     1                                  ; ****************************************************************************
     2                                  ; COMMAND.COM (PCDOS 7.1 Command Interpreter) - RETRO DOS v5.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 12/08/2024
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 18/07/2024 (v7.1) - ((Previous: 19/06/2023 COMMAND.COM v6.22))
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm command7.s -l command7.txt -o COMMAND.COM)) 	
    11                                  ; ****************************************************************************
    12                                  ; Modified from 'command6.s' 
    13                                  ;		(Retro DOS 4.2 - MSDOS 6.22 COMMAND.COM) source code
    14                                  ; 		in NASM syntax (by Erdogan Tan), 19/06/2023
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Labels and comments etc. are based on MSDOS 6.0 COMMAND.COM source code.
    17                                  ; However, this source code is mainly developed from the source code of
    18                                  ; Retro DOS v4.2 COMMAND.COM and PCDOS 7.1 COMMAND.COM disassembly.
    19                                  ; ----------------------------------------------------------------------------
    20                                  ; MSDOS 6.0 source files:
    21                                  ;;============================================================================
    22                                  ;; This PCDOS source code is verified & modified by using IDA Pro Disassembler
    23                                  ;;============================================================================
    24                                  ;
    25                                  ; COMMAND.COM v6.0 source files:
    26                                  ;      command1.asm, command2.asm, rucode.asm, stub.asm, rdata.asm, init.asm,
    27                                  ;      iparse.asm, uinit.asm, tcode.asm, tbatch.asm, tbatch2.asm, tfor.asm,
    28                                  ;      dir.asm, cratio.asm, tcmd1b.asm, tcmd2a.asm, tcmd2b.asm, tenv.asm,
    29                                  ;      tenv2.asm, tmisc1.asm, tmisc2.asm, tpipe.asm, parse2.asm, path1.asm,
    30                                  ;      path2.asm, tucode.asm, copy.asm, copypr1.asm, copypr2.asm, cparse.asm,
    31                                  ;      tparse.asm, tprintf.asm, loadhi.asm, tdata.asm, tspc.asm
    32                                  ;
    33                                  ; COMMAND.COM v2.11 source files:
    34                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    35                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    36                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    37                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    38                                  ;
    39                                  ; ----------------------------------------------------------------------------
    40                                  ; 09/01/2023 - COMMAND.COM v5.0 (Multi Section Binary File Format)
    41                                  
    42                                  ;============================================================================
    43                                  ; MSDOS 6.22 COMMAND.COM, DISASSEMBLED by Erdogan Tan, 17/05/2023-05/06/2023
    44                                  ;============================================================================
    45                                  
    46                                  ; -=========================================================================¬
    47                                  ; ¦     This file is generated by The Interactive Disassembler (IDA)        ¦
    48                                  ; ¦     Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>           ¦
    49                                  ; ¦                      Licensed to: Freeware version                      ¦
    50                                  ; L=========================================================================-
    51                                  ;
    52                                  ; Input MD5   : FAF051453F215165981F10BD73071D88
    53                                  ;
    54                                  ; File Name   : C:\Users\Erdo­an\Desktop\COMMAND.COM
    55                                  ; Format      : MS-DOS COM-file
    56                                  ; Base Address: 0h Range: 100h-D675h Loaded length: D575h
    57                                  
    58                                  ;============================================================================
    59                                  ; SYSCALL.INC, MSDOS 6.0, 1991
    60                                  ;============================================================================
    61                                  ; 21/09/2018 - Retro DOS v3.0
    62                                  
    63                                  ;	SCCSID = @(#)syscall.asm	1.1 85/04/10
    64                                  ;BREAK <system call definitions>
    65                                  
    66                                  ;
    67                                  ;	Microsoft Confidential
    68                                  ;	Copyright (C) Microsoft Corporation 1991
    69                                  ;	All Rights Reserved.
    70                                  ;
    71                                  
    72                                  ;SUBTTL	system call definitions
    73                                  ;PAGE
    74                                  
    75                                  Abort				EQU 0	;  0	  0
    76                                  STD_CON_INPUT			EQU 1	;  1	  1
    77                                  Std_Con_Output			EQU 2	;  2	  2
    78                                  Std_Aux_Input			EQU 3	;  3	  3
    79                                  Std_Aux_Output			EQU 4	;  4	  4
    80                                  Std_Printer_Output		EQU 5	;  5	  5
    81                                  Raw_Con_IO			EQU 6	;  6	  6
    82                                  RAW_CON_INPUT			EQU 7	;  7	  7
    83                                  Std_Con_Input_No_Echo		EQU 8	;  8	  8
    84                                  STD_CON_STRING_OUTPUT		EQU 9	;  9	  9
    85                                  Std_Con_String_Input		EQU 10	; 10	  A
    86                                  Std_Con_Input_Status		EQU 11	; 11	  B
    87                                  STD_CON_INPUT_FLUSH		EQU 12	; 12	  C
    88                                  DISK_RESET			EQU 13	; 13	  D
    89                                  Set_Default_Drive		EQU 14	; 14	  E
    90                                  FCB_Open			EQU 15	; 15	  F
    91                                  FCB_Close			EQU 16	; 16	 10
    92                                  Dir_Search_First		EQU 17	; 17	 11
    93                                  Dir_Search_Next 		EQU 18	; 18	 12
    94                                  FCB_Delete			EQU 19	; 19	 13
    95                                  FCB_Seq_Read			EQU 20	; 20	 14
    96                                  FCB_Seq_Write			EQU 21	; 21	 15
    97                                  FCB_Create			EQU 22	; 22	 16
    98                                  FCB_Rename			EQU 23	; 23	 17
    99                                  GET_DEFAULT_DRIVE		EQU 25	; 25	 19
   100                                  Set_DMA 			EQU 26	; 26	 1A
   101                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   102                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   103                                  ;									   ;
   104                                  Get_Default_DPB 		EQU 31	; 31	 1F
   105                                  ;									   ;
   106                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   107                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   108                                  FCB_Random_Read 		EQU 33	; 33	 21
   109                                  FCB_Random_Write		EQU 34	; 34	 22
   110                                  Get_FCB_File_Length		EQU 35	; 35	 23
   111                                  Get_FCB_Position		EQU 36	; 36	 24
   112                                  SET_INTERRUPT_VECTOR		EQU 37	; 37	 25
   113                                  Create_Process_Data_Block	EQU 38	; 38	 26
   114                                  FCB_Random_Read_Block		EQU 39	; 39	 27
   115                                  FCB_Random_Write_Block		EQU 40	; 40	 28
   116                                  Parse_File_Descriptor		EQU 41	; 41	 29
   117                                  Get_Date			EQU 42	; 42	 2A
   118                                  Set_Date			EQU 43	; 43	 2B
   119                                  Get_Time			EQU 44	; 44	 2C
   120                                  Set_Time			EQU 45	; 45	 2D
   121                                  SET_VERIFY_ON_WRITE		EQU 46	; 46	 2E
   122                                  ; Extended functionality group
   123                                  Get_DMA 			EQU 47	; 47	 2F
   124                                  GET_VERSION			EQU 48	; 48	 30
   125                                  Keep_Process			EQU 49	; 49	 31
   126                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   127                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   128                                  ;									   ;
   129                                  Get_DPB 			EQU 50	; 50	 32
   130                                  ;									   ;
   131                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   132                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   133                                  Set_CTRL_C_Trapping		EQU 51	; 51	 33
   134                                  Get_InDOS_Flag			EQU 52	; 52	 34
   135                                  Get_Interrupt_Vector		EQU 53	; 53	 35
   136                                  Get_Drive_Freespace		EQU 54	; 54	 36
   137                                  CHAR_OPER			EQU 55	; 55	 37
   138                                  International			EQU 56	; 56	 38
   139                                  ;   Directory Group
   140                                  MKDir				EQU 57	; 57	 39
   141                                  RMDir				EQU 58	; 58	 3A
   142                                  CHDir				EQU 59	; 59	 3B
   143                                  ;   File Group
   144                                  Creat				EQU 60	; 60	 3C
   145                                  OPEN				EQU 61	; 61	 3D
   146                                  CLOSE				EQU 62	; 62	 3E
   147                                  READ				EQU 63	; 63	 3F
   148                                  Write				EQU 64	; 64	 40
   149                                  Unlink				EQU 65	; 65	 41
   150                                  LSEEK				EQU 66	; 66	 42
   151                                  CHMod				EQU 67	; 67	 43
   152                                  IOCTL				EQU 68	; 68	 44
   153                                  XDUP				EQU 69	; 69	 45
   154                                  XDup2				EQU 70	; 70	 46
   155                                  Current_Dir			EQU 71	; 71	 47
   156                                  ;    Memory Group
   157                                  ALLOC				EQU 72	; 72	 48
   158                                  DEALLOC				EQU 73	; 73	 49
   159                                  SETBLOCK			EQU 74	; 74	 4A
   160                                  ;    Process Group
   161                                  Exec				EQU 75	; 75	 4B
   162                                  EXIT				EQU 76	; 76	 4C
   163                                  WAITPROCESS			EQU 77	; 77	 4D
   164                                  Find_First			EQU 78	; 78	 4E
   165                                  ;   Special Group
   166                                  Find_Next			EQU 79	; 79	 4F
   167                                  ; SPECIAL SYSTEM GROUP
   168                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   169                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   170                                  ;									   ;
   171                                  SET_CURRENT_PDB 		EQU 80	; 80	 50
   172                                  GET_CURRENT_PDB 		EQU 81	; 81	 51
   173                                  Get_In_Vars			EQU 82	; 82	 52
   174                                  SetDPB				EQU 83	; 83	 53
   175                                  ;									   ;
   176                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   177                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   178                                  Get_Verify_On_Write		EQU 84	; 84	 54
   179                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   180                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   181                                  ;									   ;
   182                                  Dup_PDB 			EQU 85	; 85	 55
   183                                  ;									   ;
   184                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   185                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   186                                  Rename				EQU 86	; 86	 56
   187                                  File_Times			EQU 87	; 87	 57
   188                                  AllocOper			EQU 88	; 88	 58
   189                                  ; Network extention system calls
   190                                  GetExtendedError		EQU 89	; 89	 59
   191                                  CreateTempFile			EQU 90	; 90	 5A
   192                                  CreateNewFile			EQU 91	; 91	 5B
   193                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
   194                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   195                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   196                                  ;									   ;
   197                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
   198                                  					;	    CloseByName, CloseUser,
   199                                  					;	    CloseUserProcess,
   200                                  					;	    GetOpenFileList
   201                                  ;									   ;
   202                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   203                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   204                                  UserOper			EQU 94	; 94	 5E Get and Set
   205                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
   206                                  xNameTrans			EQU 96	; 96	 60
   207                                  PathParse			EQU 97	; 97	 61
   208                                  GetCurrentPSP			EQU 98	; 98	 62
   209                                  Hongeul 			EQU 99	; 99	 63
   210                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
   211                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   212                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   213                                  ;									   ;
   214                                  Set_Printer_Flag		EQU 100 ; 100	 64
   215                                  ;									   ;
   216                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   217                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   218                                  GetExtCntry			EQU 101 ; 101	 65
   219                                  GetSetCdPg			EQU 102 ; 102	 66
   220                                  ExtHandle			EQU 103 ; 103	 67
   221                                  Commit				EQU 104 ; 104	 68
   222                                  GetSetMediaID			EQU 105 ; 105	 69
   223                                  IFS_IOCTL			EQU 107 ; 107	 6B
   224                                  ExtOpen 			EQU 108 ; 108	 6C
   225                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   226                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   227                                  ;                                                                          ;
   228                                  ;ifdef ROMEXEC
   229                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
   230                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
   231                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
   232                                  ;endif
   233                                  ;                                                                          ;
   234                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   235                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   236                                  ;
   237                                  ;
   238                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
   239                                  OEM_C1				EQU 249 ; 249	 F9
   240                                  OEM_C2				EQU 250 ; 250	 FA
   241                                  OEM_C3				EQU 251 ; 251	 FB
   242                                  OEM_C4				EQU 252 ; 252	 FC
   243                                  OEM_C5				EQU 253 ; 253	 FD
   244                                  OEM_C6				EQU 254 ; 254	 FE
   245                                  OEM_C7				EQU 255 ; 255	 FF
   246                                  
   247                                  ;============================================================================
   248                                  ; DOSSYM.INC, MSDOS 6.0, 1991
   249                                  ;============================================================================
   250                                  ; 21/09/2018 - Retro DOS v3.0
   251                                  
   252                                  ;BREAK <Control character definitions>
   253                                  
   254                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   255                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   256                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   257                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   258                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   259                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   260                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   261                                  c_HT	    EQU     09h 	; ^I ASCII tab
   262                                  
   263                                  ;============================================================================
   264                                  ; DIRENT.INC, MSDOS 6.0, 1991
   265                                  ;============================================================================
   266                                  ; 21/09/2018 - Retro DOS v3.0
   267                                  
   268                                  ;Break <Directory entry>
   269                                  
   270                                  ;	NOTE:  These offsets are also used in the DTA for
   271                                  ;	extended FCB SearchFirst/Next. DIR_NAME lines up
   272                                  ;	with the FCB filename field, and the rest of the
   273                                  ;	DIR_ENTRY fields follow. -DavidOls
   274                                  
   275                                  ;**	DIRENT.INC - FAT Directory Entry Definition
   276                                  ;
   277                                  ;	+---------------------------+
   278                                  ;	|  (12 BYTE) filename/ext   |	    0	    0
   279                                  ;	+---------------------------+
   280                                  ;	|     (BYTE) attributes     |	    11	    B
   281                                  ;	+---------------------------+
   282                                  ;	|    (10 BYTE) reserved     |	    12	    C
   283                                  ;	+---------------------------+
   284                                  ;	| (WORD) time of last write |	    22	    16
   285                                  ;	+---------------------------+
   286                                  ;	| (WORD) date of last write |	    24	    18
   287                                  ;	+---------------------------+
   288                                  ;	|   (WORD) First cluster    |	    26	    1A
   289                                  ;	+---------------------------+
   290                                  ;	|     (DWORD) file size     |	    28	    1C
   291                                  ;	+---------------------------+
   292                                  ;
   293                                  ;   First byte of filename  = E5 -> free directory entry
   294                                  ;			    = 00 -> end of allocated directory
   295                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   296                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   297                                  ;
   298                                  
   299                                  STRUC DIR_ENTRY
   300 00000000 <res Bh>                .DIR_NAME:	RESB  11	; file name
   301 0000000B ??                      .DIR_ATTR:	RESB  1		; attribute bits
   302 0000000C ????                    .DIR_CODEPG:	RESW  1		; code page DOS 4.00
   303 0000000E ????                    .DIR_EXTCLUSTER: RESW 1		; extended attribute starting cluster
   304 00000010 ??                      .DIR_ATTR2:	RESB  1		; reserved
   305 00000011 ??????????              .DIR_PAD:	RESB  5		; reserved for expansion
   306 00000016 ????                    .DIR_TIME:	RESW  1		; time of last write
   307 00000018 ????                    .DIR_DATE:	RESW  1		; date of last write
   308 0000001A ????                    .DIR_FIRST:	RESW  1		; first allocation unit of file
   309 0000001C ????                    .DIR_SIZE_L:	RESW  1		; low 16 bits of file size
   310 0000001E ????                    .DIR_SIZE_H:	RESW  1		; high 16 bits of file size
   311                                  .size:
   312                                  
   313                                  ;	    Caution: An extended FCB SearchFirst/Next on a network
   314                                  ;	    drive under Novell Netware 286 or 386 returns the time/date
   315                                  ;	    in the SIZE fields for subdirectory files. Ordinarily,
   316                                  ;	    this field is zero for subdirectory files.
   317                                  
   318                                  ENDSTRUC
   319                                  
   320                                  ATTR_READ_ONLY	equ	 1h
   321                                  ATTR_HIDDEN	equ	 2h
   322                                  ATTR_SYSTEM	equ	 4h
   323                                  ATTR_VOLUME_ID	equ	 8h
   324                                  ATTR_DIRECTORY	equ	10h
   325                                  ATTR_ARCHIVE	equ	20h
   326                                  ATTR_DEVICE	equ	40h	; This is a VERY special bit.
   327                                  				;   NO directory entry on a disk EVER
   328                                  				;   has this bit set. It is set non-zero
   329                                  				;   when a device is found by GETPATH
   330                                  
   331                                  ATTR_ALL	equ	ATTR_HIDDEN+ATTR_SYSTEM+ATTR_DIRECTORY
   332                                  				; OR of hard attributes for FINDENTRY
   333                                  
   334                                  ATTR_IGNORE	equ	ATTR_READ_ONLY+ATTR_ARCHIVE+ATTR_DEVICE
   335                                  				; ignore this(ese) attribute(s) during
   336                                  				; search first/next
   337                                  
   338                                  ATTR_CHANGEABLE equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_SYSTEM+ATTR_ARCHIVE
   339                                  				; changeable via CHMOD
   340                                  
   341                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   342                                  
   343                                  ;============================================================================
   344                                  ; ERROR.INC, MSDOS 6.0, 1991
   345                                  ;============================================================================
   346                                  ; 21/09/2018 - Retro DOS v3.0
   347                                  
   348                                  ;**	ERROR.INC - DOS Error Codes
   349                                  ;
   350                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
   351                                  ;    return error codes through AX.	If an error occurred then
   352                                  ;    the carry bit will be set and the error code is in AX.	If no error
   353                                  ;    occurred then the carry bit is reset and AX contains returned info.
   354                                  ;
   355                                  ;    Since the set of error codes is being extended as we extend the operating
   356                                  ;    system, we have provided a means for applications to ask the system for a
   357                                  ;    recommended course of action when they receive an error.
   358                                  ;
   359                                  ;    The GetExtendedError system call returns a universal error, an error
   360                                  ;    location and a recommended course of action.	The universal error code is
   361                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
   362                                  ;    is issued.
   363                                  
   364                                  
   365                                  ;	2.0 error codes
   366                                  
   367                                  error_invalid_function		EQU	1
   368                                  ERROR_FILE_NOT_FOUND		EQU	2
   369                                  ERROR_PATH_NOT_FOUND		EQU	3
   370                                  ERROR_TOO_MANY_OPEN_FILES	EQU	4
   371                                  ERROR_ACCESS_DENIED		EQU	5
   372                                  error_invalid_handle		EQU	6
   373                                  error_arena_trashed		EQU	7
   374                                  ERROR_NOT_ENOUGH_MEMORY 	EQU	8
   375                                  error_invalid_block		EQU	9
   376                                  error_bad_environment		EQU	10
   377                                  ERROR_BAD_FORMAT		EQU	11
   378                                  error_invalid_access		EQU	12
   379                                  ERROR_INVALID_DATA		EQU	13
   380                                  ;**** reserved			EQU	14	; *****
   381                                  error_invalid_drive		EQU	15
   382                                  error_current_directory 	EQU	16
   383                                  error_not_same_device		EQU	17
   384                                  ERROR_NO_MORE_FILES		EQU	18
   385                                  
   386                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
   387                                  
   388                                  ERROR_WRITE_PROTECT		EQU	19
   389                                  error_bad_unit			EQU	20
   390                                  error_not_ready 		EQU	21
   391                                  error_bad_command		EQU	22
   392                                  error_CRC			EQU	23
   393                                  error_bad_length		EQU	24
   394                                  error_Seek			EQU	25
   395                                  error_not_DOS_disk		EQU	26
   396                                  error_sector_not_found		EQU	27
   397                                  error_out_of_paper		EQU	28
   398                                  error_write_fault		EQU	29
   399                                  error_read_fault		EQU	30
   400                                  ERROR_GEN_FAILURE		EQU	31
   401                                  
   402                                  ;	the new 3.0 error codes reported through INT 24
   403                                  
   404                                  error_sharing_violation 	EQU	32
   405                                  error_lock_violation		EQU	33
   406                                  error_wrong_disk		EQU	34
   407                                  ERROR_FCB_UNAVAILABLE		EQU	35
   408                                  ERROR_SHARING_BUFFER_EXCEEDED	EQU	36
   409                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00	;AN000;
   410                                  error_handle_EOF		EQU	38    ; DOS 4.00	;AN000;
   411                                  ERROR_HANDLE_DISK_FULL		EQU	39    ; DOS 4.00	;AN000;
   412                                  
   413                                  ;	New OEM network-related errors are 50-79
   414                                  
   415                                  error_not_supported		EQU	50
   416                                  
   417                                  error_net_access_denied		EQU	65	;M028
   418                                  
   419                                  ;	End of INT 24 reportable errors
   420                                  
   421                                  error_file_exists		EQU	80
   422                                  error_DUP_FCB			EQU	81	; *****
   423                                  error_cannot_make		EQU	82
   424                                  error_FAIL_I24			EQU	83
   425                                  
   426                                  ;	New 3.0 network related error codes
   427                                  
   428                                  error_out_of_structures 	EQU	84
   429                                  error_Already_assigned		EQU	85
   430                                  error_invalid_password		EQU	86
   431                                  error_invalid_parameter 	EQU	87
   432                                  error_NET_write_fault		EQU	88
   433                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00	;AN000;
   434                                  
   435                                  ;============================================================================
   436                                  ; DEVSYM.INC, MSDOS 6.0, 1991
   437                                  ;============================================================================
   438                                  ; 22/09/2018 - Retro DOS v3.0
   439                                  
   440                                  ;**	DevSym.inc - Device Symbols
   441                                  
   442                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   443                                  
   444                                  STRUC SYSDEV
   445 00000000 ????????                .NEXT:	RESD 1			;POINTER TO NEXT DEVICE HEADER
   446 00000004 ????                    .ATT:	RESW 1			;ATTRIBUTES OF THE DEVICE
   447 00000006 ????                    .STRAT:	RESW 1			;STRATEGY ENTRY POINT
   448 00000008 ????                    .INT:	RESW 1			;INTERRUPT ENTRY POINT
   449 0000000A ????????????????        .NAME:	RESB 8			;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   450                                  .size:
   451                                  ENDSTRUC
   452                                  
   453                                  ; 24/09/2018
   454                                  DEVTYP	EQU   8000H	; BIT 15 - 1  IF CHAR, 0 IF BLOCK
   455                                  
   456                                  ;============================================================================
   457                                  ; CURDIR.INC, MSDOS 6.0, 1991
   458                                  ;============================================================================
   459                                  ; 21/09/2018 - Retro DOS v3.0
   460                                  
   461                                  DIRSTRLEN	EQU	64+3	; Max length in bytes of directory strings
   462                                  
   463                                  ;============================================================================
   464                                  ; COMEQU.ASM, MSDOS 6.0, 1991
   465                                  ;============================================================================
   466                                  ; 21/09/2018 - Retro DOS v3.0
   467                                  
   468                                  ;/*
   469                                  ; *                      Microsoft Confidential
   470                                  ; *                      Copyright (C) Microsoft Corporation 1991
   471                                  ; *                      All Rights Reserved.
   472                                  ; */
   473                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   474                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   475                                  ;*************************************
   476                                  ; COMMAND EQUs which are not switch dependant
   477                                  
   478                                  ;		include	curdir.inc	; to get DIRSTRLEN
   479                                  ;		Note dossym.inc must already have been included!
   480                                  
   481                                  GET_COMMAND_STATE	equ	5500h	; check for existing COMMAND
   482                                  GET_ROMCOMMAND_STATE	equ	5501h	; check for existing ROM COMMAND
   483                                  
   484                                  SYM		EQU	">"
   485                                  
   486                                  LINESPERPAGE	EQU	25		;AC000; default lines per page
   487                                  
   488                                  NORMPERLIN	EQU	1
   489                                  WIDEPERLIN	EQU	5
   490                                  COMBUFLEN	EQU	128		; Length of commmand buffer
   491                                  BatLen		EQU	32		; buffer for batch files
   492                                  YES_ECHO	EQU	1		; echo line
   493                                  NO_ECHO 	EQU	0		; don't echo line
   494                                  No_Echo_Char	EQU	"@"             ; don't echo line if this is first char
   495                                  call_in_progress EQU	1		; indicate we're in the CALL command
   496                                  length_call	EQU	4		; length of CALL
   497                                  max_nest	EQU    10		; max # levels of batch nesting allowed
   498                                  FAIL_ALLOWED	EQU    00001000b	; critical error
   499                                  RETRY_ALLOWED	EQU    00010000b	; critical error
   500                                  IGNORE_ALLOWED	EQU    00100000b	; critical error
   501                                  nullcommand	EQU     1		; no command on command line
   502                                  END_OF_LINE	EQU    -1		;AN000; end of line return from parser
   503                                  END_OF_LINE_OUT EQU	0		;AN000; end of line for output
   504                                  END_OF_LINE_IN	EQU	0Dh		;AN000; end of line for input
   505                                  result_number	EQU	1		;AN000; number returned from parser
   506                                  result_string	EQU	3		;AN000; string returned from parser
   507                                  RESULT_FILESPEC EQU	5		;AN000; filespec returned from parser
   508                                  result_drive	EQU	6		;AN000; drive returned from parser
   509                                  result_date	EQU	7		;AN000; date returned from parser
   510                                  result_time	EQU	8		;AN000; time returned from parser
   511                                  RESULT_NO_ERROR EQU	0		;AN000; no error returned from parser
   512                                  no_cont_flag	EQU	0		;AN000; no control flags for message
   513                                  util_msg_class	EQU	-1		;AN000; message class for utility
   514                                  ext_msg_class	EQU	1		;AN000; message class for extended error
   515                                  parse_msg_class EQU	2		;AN000; message class for parse error
   516                                  crit_msg_class	EQU	3		;AN000; message class for critical error
   517                                  ext_crlf_class	EQU	081h		;AN054; message class for extended error with no CRLF
   518                                  colon_char	EQU	":"             ;AN000; colon character
   519                                  crt_ioctl_ln	EQU	14		;AN000; default length of data for display ioctl
   520                                  text_mode	EQU	1		;AN000; text mode return from ioctl
   521                                  get_generic	EQU	07Fh		;AN000; generic ioctl - get device info
   522                                  set_crit_dev	EQU	0100H		;AN000; device attribute for critical error on I/0
   523                                  mult_ansi	EQU	01Ah		;AC064; multiplex for ansi.sys
   524                                  mult_shell_get	EQU	01902h		;AC065; multiplex for Shell - get next command
   525                                  mult_shell_brk	EQU	01903h		;AN000; multiplex for Shell - ^C batch check
   526                                  shell_action	equ	0FFh		;AN000; SHELL - return for taking SHELL specific action
   527                                  bat_not_open	EQU	-1		;AN000; batch handle will be set to this if not open
   528                                  bat_open_handle EQU	19		;AN000; handle will be in this position in JFN table
   529                                  Ptr_seg_pos	equ	7		;AN000; Offset from start of message block for subst segment
   530                                  Ptr_off_pos	equ	5		;AN000; Offset from start of message block for subst offset
   531                                  %define Parm_off_pos	word [2]	;AN000; Offset from start of subst list for subst offset
   532                                  parm_block_size equ	11		;AN000; size of message subst block
   533                                  blank		equ	" "             ;AN000; blank character
   534                                  no_subst	equ	0		;AN000; no substitutions for messages
   535                                  one_subst	equ	1		;AN000; one substitution for messages
   536                                  no_handle_out	equ	-1		;AN000; use function 1 thru 12 for message retriever
   537                                  res_subst	equ	2		;AN000; offset from start of message definition to number of subst
   538                                  read_open_mode	equ   0000000000000000b ;AN024; extended open mode for read
   539                                  deny_write	equ   0000000000100000b	; deny write sharing mode ;M031
   540                                  deny_none	equ   0000000001000000b	; deny none sharing mode ;Myyy	
   541                                  read_open_flag	equ   0000000100000001b ;AN000; extended open flags for read
   542                                  write_open_mode equ   0000000000000001b ;AN024; extended open mode for read
   543                                  write_open_flag equ   0000000100000001b ;AN000; extended open flags for read
   544                                  creat_open_flag equ   0000000100010010b ;AN000; extended open flags for read
   545                                  capital_A	equ	'A'             ;AC000;
   546                                  vbar		equ	'|'             ;AC000;
   547                                  labracket	equ	'<'             ;AC000;
   548                                  rabracket	equ	'>'             ;AC000;
   549                                  dollar		equ	'$'             ;AC000;
   550                                  lparen		equ	'('             ;AC000;
   551                                  rparen		equ	')'             ;AC000;
   552                                  nullrparen	equ	29h		;AC000;
   553                                  in_word 	equ	4E49h		;AC000; 'NI'  ('IN' backwards)
   554                                  do_word 	equ	4F44h		;AC000; 'OD'  ('DO' backwards)
   555                                  star		equ	'*'             ;AC000;
   556                                  plus_chr	equ	'+'             ;AC000;
   557                                  small_a 	equ	'a'             ;AC000;
   558                                  small_z 	equ	'z'             ;AC000;
   559                                  dot_chr 	equ	'.'             ;AC000;
   560                                  tab_chr 	equ	9		;AN032;
   561                                  equal_chr	equ	'='             ;AN032;
   562                                  semicolon	equ	';'             ;AN049;
   563                                  dot_qmark	equ	2e3fh		;AC000; '.?'
   564                                  dot_colon	equ	2e3ah		;AC000; '.:'
   565                                  capital_n	equ	0		;AC000; result from Y/N call if N entered
   566                                  capital_y	equ	1		;AC000; result from Y/N call if Y entered
   567                                  AppendInstall	equ	0B700H		;AN020; append install check
   568                                  AppendDOS	equ	0B702H		;AN020; append DOS version check
   569                                  AppendGetState	equ	0B706H		;AN020; append get current state
   570                                  AppendSetState	equ	0B707H		;AN020; append set current state
   571                                  AppendTruename	equ	0B711H		;AN042; Get file's real location for Batch
   572                                  search_attr	equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_DIRECTORY  ;AC042;
   573                                  
   574                                  ;*************************************
   575                                  ;* PARSE ERROR MESSAGES
   576                                  ;*************************************
   577                                  
   578                                  MoreArgs_Ptr	equ	1		;AN000;"Too many parameters" message number
   579                                  LessArgs_Ptr	equ	2		;AN000;"Required parameter missing" message number
   580                                  BadSwt_Ptr	equ	3		;AN000;"Invalid switch" message number
   581                                  BadParm_Ptr	equ	10		;AN000;"Invalid parameter" message number
   582                                  
   583                                  ;*************************************
   584                                  ;* EQUATES FOR MESSAGE RETRIEVER
   585                                  ;*************************************
   586                                  
   587                                  GET_EXTENDED_MSG	EQU	0	;AN000;  get extended message address
   588                                  SET_EXTENDED_MSG	EQU	1	;AN000;  set extended message address
   589                                  GET_PARSE_MSG		EQU	2	;AN000;  get parse message address
   590                                  SET_PARSE_MSG		EQU	3	;AN000;  set parse message address
   591                                  GET_CRITICAL_MSG	EQU	4	;AN000;  get critical message address
   592                                  SET_CRITICAL_MSG	EQU	5	;AN000;  set critical message address
   593                                  MESSAGE_2F		EQU	46	;AN000;  minor code for message retriever
   594                                  
   595                                  ;*********************************
   596                                  ;* EQUATES FOR INT 10H
   597                                  ;*********************************
   598                                  
   599                                  VIDEO_IO_INT		EQU	10H	;AN000;  equate for int 10h
   600                                  SET_VIDEO_MODE		EQU	0	;AN000;  set video mode
   601                                  SET_CURSOR_POSITION	EQU	2	;AN000;  set new cursor position
   602                                  SCROLL_VIDEO_PAGE	EQU	6	;AN000;  scroll active page up
   603                                  VIDEO_ATTRIBUTE 	EQU	7	;AN000;  attribute to be used on blank line
   604                                  SET_COLOR_PALETTE	EQU	11	;AN000;  set color for video
   605                                  GET_VIDEO_STATE 	EQU	15	;AN000;  get current video state
   606                                  VIDEO_ALPHA		EQU	3	;AN000;  alpha video is 3 or below
   607                                  VIDEO_BW		EQU	7	;AN000;  mode for 80X25 black & white
   608                                  
   609                                  AltPipeChr	equ	"|"             ; alternate pipe character
   610                                  
   611                                  FCB		equ	5Ch
   612                                  
   613                                  STRUC VARSTRUC
   614 00000000 ??                      .ISDIR:		RESB	1
   615 00000001 ??                      .SIZ:		RESB	1
   616 00000002 ????                    .TTAIL:		RESW	1
   617 00000004 ??                      .INFO:		RESB	1
   618 00000005 <res 57h>               .BUF:		RESB	DIRSTRLEN + 20
   619                                  .size:
   620                                  ENDSTRUC
   621                                  ;
   622                                  ; Flags for internal command parsing
   623                                  ;
   624                                  fCheckDrive	equ	00000001b	; validate drive letter
   625                                  fSwitchAllowed	equ	00000010b	; switches allowed
   626                                  fLimitHelp	equ	00000100b	; /? must appear alone
   627                                  
   628                                  ;
   629                                  ; Test switches
   630                                  ;
   631                                  fParse		EQU	0001h		; display results of parseline
   632                                  
   633                                  ;
   634                                  ; Batch segment structure
   635                                  ;
   636                                  ;   BYTE    type of segment
   637                                  ;   BYTE    echo state of parent on entry to batch file
   638                                  ;   WORD    segment of last batch file
   639                                  ;   WORD    segment for FOR command
   640                                  ;   BYTE    FOR flag state on entry to batch file
   641                                  ;   DWORD   offset for next line
   642                                  ;   10 WORD pointers to parameters. -1 is empty parameter
   643                                  ;   ASCIZ   file name (with . and ..)
   644                                  ;   BYTES   CR-terminated parameters
   645                                  ;   BYTE    0 flag to indicate end of parameters
   646                                  ;
   647                                  
   648                                  BATCHTYPE   equ 0
   649                                  
   650                                  STRUC BATCHSEGMENT
   651 00000000 ??                      .BatType:	RESB	1		; signature
   652 00000001 ??                      .BatEchoFlag:	RESB	1		; G state of echo
   653                                  ; MSDOS 5.0 (& 6.0) - 11/01/2023
   654 00000002 ??                      .BatchEOF:	RESB	1		; records if EOF reached on file
   655 00000003 ????                    .BatLast: 	RESW	1		; G segment of last batch file
   656 00000005 ????                    .BatForPtr:	RESW	1		; G segment for FOR command
   657 00000007 ??                      .BatForFlag:	RESB	1		; G state of FOR
   658 00000008 ????????                .BatSeek:	RESD	1		; lseek position of next char
   659 0000000C <res 14h>               .BatParm:	RESW	10		; pointers to parameters
   660 00000020 ??                      .BatFile:	RESB	1		; beginning of batch file name
   661                                  .SIZE:
   662                                  ENDSTRUC
   663                                  
   664                                  ANULL		equ	0		; terminates an argv string
   665                                  ARGMAX		equ	64		; max args on a command line
   666                                  ;ARGBLEN 	equ	2*128		; 1char each plus term NUL
   667                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM ;*
   668                                  ARGBLEN 	equ	2*64
   669                                  tplen		equ	64		; max size of one argument
   670                                  arg_cnt_error	equ	1		; number of args > MAXARG
   671                                  arg_buf_ovflow	equ	2		; overflowed argbuffer
   672                                  
   673                                  STRUC ARGV_ELE				; elements in the argv array
   674 00000000 ????                    .argpointer:	RESW	1		; pointer to the argstring
   675 00000002 ??                      .argflags:	RESB	1		; cparse flags for this argstring
   676 00000003 ????                    .argstartel:	RESW	1		; the result of cparse's [STARTEL]
   677 00000005 ????                    .arglen:	RESW	1		; cparse's char count + one (for null)
   678 00000007 ????                    .argsw_word:	RESW	1		; any switches after this? what kinds?
   679 00000009 ????                    .arg_ocomptr:	RESW	1		; pointer into original command string
   680                                  .SIZE:	; 11 ; 27/07/2024
   681                                  ENDSTRUC
   682                                  
   683                                  STRUC ARG_UNIT
   684 00000000 <res 2C0h>              .argv:		RESB	ARGMAX * ARGV_ELE.SIZE ; 704 ; 27/07/2024
   685 000002C0 ????                    .argvcnt:	RESW	1		; number of arguments
   686 000002C2 ????                    .argswinfo:	RESW	1		; Switch information for entire line
   687 000002C4 <res 100h>              .argbuf:	RESW	ARGBLEN		; storage for argv strings
   688 000003C4 <res 80h>               .argforcombuf:	RESB	COMBUFLEN	; Original for loop command string
   689                                  .SIZE:	; 1092 ; 27/07/2024 ; (it was 1348 in MSDOS 5.0-6.22 COMMAND.COM) ;*
   690                                  ENDSTRUC
   691                                  
   692                                  ; Equates for initialization
   693                                  ;
   694                                  INITINIT	equ	01h		; initialization in progress
   695                                  INITSPECIAL	equ	02h		; in initialization time/date routine
   696                                  INITCTRLC	equ	04h		; already in ^C handler
   697                                  
   698                                  ;============================================================================
   699                                  ;  INTNAT.INC, MSDOS 6.0, 1991
   700                                  ;============================================================================
   701                                  ; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   702                                  
   703                                  ; Current structure of the data returned by the international call
   704                                  
   705                                  struc INTERNAT_BLOCK
   706 00000000 ????                    .date_tim_format: resw 1		; 0-USA, 1-EUR, 2-JAP
   707 00000002 ??????????              .currency_sym:	resb 5			; Currency Symbol 5 bytes
   708 00000007 ????                    .thous_sep:	resb 2			; Thousands separator 2 bytes
   709 00000009 ????                    .decimal_sep:	resb 2			; Decimal separator 2 bytes
   710 0000000B ????                    .date_sep:	resb 2			; Date separator 2 bytes
   711 0000000D ????                    .time_sep:	resb 2			; Decimal separator 2 bytes
   712 0000000F ??                      .bit_field:	resb 1			; Bit values
   713                                  					;   Bit 0 = 0 if currency symbol first
   714                                  					;	  = 1 if currency symbol last
   715                                  					;   Bit 1 = 0 if No space after currency symbol
   716                                  					;	  = 1 if space after currency symbol
   717                                  .currency_cents:
   718 00000010 ??                      		resb 1			; Number of places after currency dec point
   719 00000011 ??                      .time_24:	resb 1			; 1 if 24 hour time, 0 if 12 hour time
   720 00000012 ????????                .map_call:	resw 2			; Address of case mapping call (DWORD)
   721                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
   722                                  					;  in pieces.
   723 00000016 ??                      .data_sep:	resb 1			; Data list separator character
   724 00000017 ??                      		resb 1
   725                                  endstruc
   726                                  
   727                                  ; Max size of the block returned by the INTERNATIONAL call
   728                                  
   729                                  internat_block_max equ 32
   730                                  
   731                                  ;============================================================================
   732                                  ; FIND.INC (MSDOS 3.3, 1987) - REDIRSYM.INC (MSDOS 6.0, 1991) 
   733                                  ;============================================================================
   734                                  ; 13/10/2018 - Retro DOS v3.0
   735                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   736                                  
   737                                  ;Break	<find first/next buffer>
   738                                  
   739                                  	; MSDOS 3.3 & MSDOS 6.0
   740                                  
   741                                  struc FIND_BUF
   742 00000000 ??                      .DRIVE:	    resb 1	; drive of search
   743 00000001 <res Bh>                .NAME:	    resb 11	; formatted name
   744 0000000C ??                      .SATTR:	    resb 1	; attribute of search
   745 0000000D ????                    .LASTENT:   resw 1	; LastEnt
   746 0000000F ????                    .DIRSTART:  resw 1	; DirStart
   747 00000011 ????????                .NETID:	    resb 4	; Reserved for NET
   748 00000015 ??                      .ATTR:	    resb 1	; attribute found
   749 00000016 ????                    .TIMR:	    resw 1	; time
   750 00000018 ????                    .DATE:	    resw 1	; date
   751 0000001A ????                    .SIZE_L:    resw 1	; low(size)
   752 0000001C ????                    .SIZE_H:    resw 1	; high(size)
   753 0000001E <res Dh>                .PNAME:	    resb 13	; packed name
   754                                  .size:
   755                                  endstruc
   756                                  
   757                                  ;=============================================================================
   758                                  ; PDB.INC, MSDOS 6.0, 1991
   759                                  ;=============================================================================
   760                                  ; 24/09/2018 - Retro DOS v3.0 (08/07/2018, 'msdos3.s')
   761                                  
   762                                  ;**	Process data block (otherwise known as program header)
   763                                  
   764                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   765                                  ;	can be rearranged here, ever. Reserved areas are probably safe
   766                                  ;	for use.
   767                                  
   768                                  FILPERPROC	EQU     20
   769                                  
   770                                  struc PDB	; Process_data_block
   771 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   772 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   773 00000004 ??                                      resb 1
   774 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   775 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   776 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   777 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   778 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   779 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   780 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   781 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   782 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   783 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   784 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   785 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   786 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   787 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   788 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   789 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   790 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   791 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   792                                  				;  an extended FCB
   793                                  ;endstruc 	; MSDOS 3.3
   794                                  	  	; MSDOS 6.0
   795 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   796 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   797 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   798 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   799                                  endstruc
   800                                  
   801                                  ;=============================================================================
   802                                  ; VERSIONA.INC, MSDOS 6.0, 1991
   803                                  ;=============================================================================
   804                                  ; 24/09/2018 - Retro DOS v3.0
   805                                  
   806                                  ;major_version	equ 6		; Major DOS version
   807                                  ;minor_version	equ 0		; Minor DOS Version
   808                                  
   809                                  ;expected_version    equ     (MINOR_VERSION SHL 8)+MAJOR_VERSION
   810                                  
   811                                  ; MSDOS 3.3 COMMAND.COM
   812                                  ;MAJOR_VERSION	EQU 3
   813                                  ;MINOR_VERSION	EQU 30
   814                                  
   815                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
   816                                  ;MAJOR_VERSION	EQU 5
   817                                  ;MINOR_VERSION	EQU 0
   818                                  
   819                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
   820                                  ;MAJOR_VERSION	EQU 6		; Major DOS version
   821                                  ;MINOR_VERSION	EQU 22		; Minor DOS version
   822                                  
   823                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
   824                                  MAJOR_VERSION	EQU 7		; Major DOS version
   825                                  MINOR_VERSION	EQU 10		; Minor DOS version
   826                                  
   827                                  EXPECTED_VERSION EQU (MINOR_VERSION<<8)+MAJOR_VERSION	
   828                                  
   829                                  ;-----------------------------------------------------------------------------
   830                                  ; 21/09/2018
   831                                  ;-----------------------------------------------------------------------------
   832                                  ; Retro DOS v3.0 NOTE:  
   833                                  ;	Following source code is as disassembled code of MSDOS 3.3 COMMAND.COM
   834                                  ;	with minor modifications which are done by me (Erdogan Tan).
   835                                  ;	.. but comments and descriptions are from MSDOS 6.0 COMMAND.COM
   836                                  ;	source code files (written by using MASM syntax).
   837                                  ;-----------------------------------------------------------------------------
   838                                  ; All of this Retro DOS 3.0 (2018) source code has been written by using
   839                                  ; NASM (2.11) x86 assembly language/compiler syntax.	
   840                                  ;----------------------------------------------------------------------------- 	
   841                                  
   842                                  ;=============================================================================
   843                                  ; COMMAND1.ASM, MSDOS 6.0, 1991
   844                                  ;=============================================================================
   845                                  ; 21/09/2018 - Retro DOS v3.0
   846                                  
   847                                  ;	page ,132
   848                                  ;	title	COMMAND - resident code for COMMAND.COM
   849                                  ;	name	COMMAND
   850                                  
   851                                  ;/*
   852                                  ; *                      Microsoft Confidential
   853                                  ; *                      Copyright (C) Microsoft Corporation 1991
   854                                  ; *                      All Rights Reserved.
   855                                  ; */
   856                                  
   857                                  ;*****************************************************************************
   858                                  ;
   859                                  ; MODULE:	       COMMAND.COM
   860                                  ;
   861                                  ; DESCRIPTIVE NAME:    Default DOS command interpreter
   862                                  ;
   863                                  ; FUNCTION:	       This version of COMMAND is divided into three distinct
   864                                  ;		       parts.  First is the resident portion, which includes
   865                                  ;		       handlers for interrupts	23H (Cntrl-C), 24H (fatal
   866                                  ;		       error), and 2EH (command line execute); it also has
   867                                  ;		       code to test and, if necessary, reload the transient
   868                                  ;		       portion. Following the resident is the init code, which
   869                                  ;		       is overwritten after use.  Then comes the transient
   870                                  ;		       portion, which includes all command processing (whether
   871                                  ;		       internal or external).  The transient portion loads at
   872                                  ;		       the end of physical memory, and it may be overlayed by
   873                                  ;		       programs that need as much memory as possible. When the
   874                                  ;		       resident portion of command regains control from a user
   875                                  ;		       program, a check sum is performed on the transient
   876                                  ;		       portion to see if it must be reloaded.  Thus programs
   877                                  ;		       which do not need maximum memory will save the time
   878                                  ;		       required to reload COMMAND when they terminate.
   879                                  ;
   880                                  ; ENTRY POINT:	       PROGSTART
   881                                  ;
   882                                  ; INPUT:	       command line at offset 81H
   883                                  ;
   884                                  ; EXIT_NORMAL:	       No exit from root level command processor.  Can exit
   885                                  ;		       from a secondary command processor via the EXIT
   886                                  ;		       internal command.
   887                                  ;
   888                                  ; EXIT_ERROR:	       Exit to prior command processor if possible, otherwise
   889                                  ;		       hang the system.
   890                                  ;
   891                                  ; INTERNAL REFERENCES:
   892                                  ;
   893                                  ;     ROUTINES:        See the COMMAND Subroutine Description Document
   894                                  ;		       (COMMAND.DOC)
   895                                  ;
   896                                  ;     DATA AREAS:      See the COMMAND Subroutine Description Document
   897                                  ;		       (COMMAND.DOC)
   898                                  ;
   899                                  ; EXTERNAL REFERENCES:
   900                                  ;
   901                                  ;      ROUTINES:       none
   902                                  ;
   903                                  ;      DATA AREAS:     none
   904                                  ;
   905                                  ;*****************************************************************************
   906                                  ;
   907                                  ;			      REVISION HISTORY
   908                                  ;			      ----------------
   909                                  ;
   910                                  ; DOS 1.00 to DOS 3.30
   911                                  ; --------------------------
   912                                  ; SEE REVISION LOG IN COPY.ASM ALSO
   913                                  ;
   914                                  ; REV 1.17
   915                                  ;    05/19/82  Fixed bug in BADEXE error (relocation error must return to
   916                                  ;	       resident since the EXELOAD may have overwritten the transient.
   917                                  ;
   918                                  ; REV 1.18
   919                                  ;    05/21/82  IBM version always looks on drive A
   920                                  ;	       MSVER always looks on default drive
   921                                  ;
   922                                  ; REV 1.19
   923                                  ;    06/03/82  Drive spec now entered in command line
   924                                  ;    06/07/82  Added VER command (print DOS version number) and VOL command
   925                                  ;	       (print volume label)
   926                                  ;
   927                                  ; REV 1.20
   928                                  ;    06/09/82  Prints "directory" after directories
   929                                  ;    06/13/82  MKDIR, CHDIR, PWD, RMDIR added
   930                                  ;
   931                                  ; REV 1.50
   932                                  ;	       Some code for new 2.0 DOS, sort of HACKey.  Not enough time to
   933                                  ;	       do it right.
   934                                  ;
   935                                  ; REV 1.70
   936                                  ;	       EXEC used to fork off new processes
   937                                  ;
   938                                  ; REV 1.80
   939                                  ;	       C switch for single command execution
   940                                  ;
   941                                  ; REV 1.90
   942                                  ;	       Batch uses XENIX
   943                                  ;
   944                                  ; Rev 2.00
   945                                  ;	       Lots of neato stuff
   946                                  ;	       IBM 2.00 level
   947                                  ;
   948                                  ; Rev 2.01
   949                                  ;	       'D' switch for date time suppression
   950                                  ;
   951                                  ; Rev 2.02
   952                                  ;	       Default userpath is NUL rather than BIN
   953                                  ;		       same as IBM
   954                                  ;	       COMMAND split into pieces
   955                                  ;
   956                                  ; Rev 2.10
   957                                  ;	       INTERNATIONAL SUPPORT
   958                                  ;
   959                                  ; Rev 2.50
   960                                  ;	       all the 2.x new stuff -MU
   961                                  ;
   962                                  ; Rev 3.30     (Ellen G)
   963                                  ;	       CALL internal command (TBATCH2.ASM)
   964                                  ;	       CHCP internal command (TCMD2B.ASM)
   965                                  ;	       INT 24H support of abort, retry, ignore, and fail prompt
   966                                  ;	       @ sign suppression of batch file line
   967                                  ;	       Replaceable environment value support in batch files
   968                                  ;	       INT 2FH calls for APPEND
   969                                  ;	       Lots of PTR fixes!
   970                                  ;
   971                                  ; Beyond 3.30 to forever  (Ellen G)
   972                                  ; ----------------------
   973                                  ;
   974                                  ; A000 DOS 4.00  -	Use SYSPARSE for internal commands
   975                                  ;			Use Message Retriever services
   976                                  ;			/MSG switch for resident extended error msg
   977                                  ;			Convert to new capitalization support
   978                                  ;			Better error recovery on CHCP command
   979                                  ;			Code page file tag support
   980                                  ;			TRUENAME internal command
   981                                  ;			Extended screen line support
   982                                  ;			/P switch on DEL/ERASE command
   983                                  ;			Improved file redirection error recovery
   984                                  ;	(removed)	Improved batch file performance
   985                                  ;			Unconditional DBCS support
   986                                  ;			Volume serial number support
   987                                  ;	(removed)	COMMENT=?? support
   988                                  ;
   989                                  ; A001	PTM P20 	Move system_cpage from TDATA to TSPC
   990                                  ;
   991                                  ; A002	PTM P74 	Fix PRESCAN so that redirection symbols do not
   992                                  ;			require delimiters.
   993                                  ;
   994                                  ; A003	PTM P5,P9,P111	Included in A000 development
   995                                  ;
   996                                  ; A004	PTM P86 	Fix IF command to turn off piping before
   997                                  ;			executing
   998                                  ;
   999                                  ; A005	DCR D17 	If user specifies an extension on the command
  1000                                  ;			line search for that extension only.
  1001                                  ;
  1002                                  ; A006	DCR D15 	New message for MkDir - "Directory already
  1003                                  ;			exists"
  1004                                  ;
  1005                                  ; A007	DCR D2		Change CTTY so that a write is done before XDUP
  1006                                  ;
  1007                                  ; A008	PTM P182	Change COPY to set default if invalid function
  1008                                  ;			returned from code page call.
  1009                                  ;
  1010                                  ; A009	PTM P179	Add CRLF to invalid disk change message
  1011                                  ;
  1012                                  ; A010	DCR D43 	Allow APPEND to do a far call to SYSPARSE in
  1013                                  ;			transient COMMAND.
  1014                                  ;
  1015                                  ; A011	DCR D130	Change redirection to overwrite an EOF mark
  1016                                  ;			before appending to a file.
  1017                                  ;
  1018                                  ; A012	PTM P189	Fix redirection error recovery.
  1019                                  ;
  1020                                  ; A013	PTM P330	Change date format
  1021                                  ;
  1022                                  ; A014	PTM P455	Fix echo parsing
  1023                                  ;
  1024                                  ; A015	PTM P517	Fix DIR problem with * vs *.
  1025                                  ;
  1026                                  ; A016	PTM P354	Fix extended error message addressing
  1027                                  ;
  1028                                  ; A017	PTM P448	Fix appending to 0 length files
  1029                                  ;
  1030                                  ; A018	PTM P566,P3903	Fix parse error messages to print out parameter
  1031                                  ;			the parser fails on. Fail on duplicate switches.
  1032                                  ;
  1033                                  ; A019	PTM P542	Fix device name to be printed correctly during
  1034                                  ;			critical error
  1035                                  ;
  1036                                  ; A020	DCR D43 	Set append state off while in DIR
  1037                                  ;
  1038                                  ; A021	PTM P709	Fix CTTY printing ascii characters.
  1039                                  ;
  1040                                  ; A022	DCR D209	Enhanced error recovery
  1041                                  ;
  1042                                  ; A023	PTM P911	Fix ANSI.SYS IOCTL structure.
  1043                                  ;
  1044                                  ; A024	PTM P899	Fix EXTOPEN open modes.
  1045                                  ;
  1046                                  ; A025	PTM P922	Fix messages and optimize PARSE switches
  1047                                  ;
  1048                                  ; A026	DCR D191	Change redirection error recovery support.
  1049                                  ;
  1050                                  ; A027	PTM P991	Fix so that KAUTOBAT & AUTOEXEC are terminated
  1051                                  ;			with a carriage return.
  1052                                  ;
  1053                                  ; A028	PTM P1076	Print a blank line before printing invalid
  1054                                  ;			date and invalid time messages.
  1055                                  ;
  1056                                  ; A029	PTM P1084	Eliminate calls to parse_check_eol in DATE
  1057                                  ;			and TIME.
  1058                                  ;
  1059                                  ; A030	DCR D201	New extended attribute format.
  1060                                  ;
  1061                                  ; A031	PTM P1149	Fix DATE/TIME add blank before prompt.
  1062                                  ;
  1063                                  ; A032	PTM P931	Fix =ON, =OFF for BREAK, VERIFY, ECHO
  1064                                  ;
  1065                                  ; A033	PTM P1298	Fix problem with system crashes on ECHO >""
  1066                                  ;
  1067                                  ; A034	PTM P1387	Fix COPY D:fname+,, to work
  1068                                  ;
  1069                                  ; A035	PTM P1407	Fix so that >> (appending) to a device does
  1070                                  ;			do a read to determine eof.
  1071                                  ;
  1072                                  ; A036	PTM P1406	Use 69h instead of 44h to get volume serial
  1073                                  ;			so that ASSIGN works correctly.
  1074                                  ;
  1075                                  ; A037	PTM P1335	Fix COMMAND /C with FOR
  1076                                  ;
  1077                                  ; A038	PTM P1635	Fix COPY so that it doesn't accept /V /V
  1078                                  ;
  1079                                  ; A039	DCR D284	Change invalid code page tag from -1 to 0.
  1080                                  ;
  1081                                  ; A040	PTM P1787	Fix redirection to cause error when no file is
  1082                                  ;			specified.
  1083                                  ;
  1084                                  ; A041	PTM P1705	Close redirected files after internal APPEND
  1085                                  ;			executes.
  1086                                  ;
  1087                                  ; A042	PTM P1276	Fix problem of APPEND paths changes in batch
  1088                                  ;			files causing loss of batch file.
  1089                                  ;
  1090                                  ; A043	PTM P2208	Make sure redirection is not set up twice for
  1091                                  ;			CALL'ed batch files.
  1092                                  ;
  1093                                  ; A044	PTM P2315	Set switch on PARSE so that 0ah is not used
  1094                                  ;			as an end of line character
  1095                                  ;
  1096                                  ; A045	PTM P2560	Make sure we don't lose parse, critical error,
  1097                                  ;			and extended message pointers when we EXIT if
  1098                                  ;			COMMAND /P is the top level process.
  1099                                  ;
  1100                                  ; A046	PTM P2690	Change COPY message "fn File not found" to
  1101                                  ;			"File not found - fn"
  1102                                  ;
  1103                                  ; A047	PTM P2819	Fix transient reload prompt message
  1104                                  ;
  1105                                  ; A048	PTM P2824	Fix COPY path to be upper cased.  This was broken
  1106                                  ;			when DBCS code was added.
  1107                                  ;
  1108                                  ; A049	PTM P2891	Fix PATH so that it doesn't accept extra characters
  1109                                  ;			on line.
  1110                                  ;
  1111                                  ; A050	PTM P3030	Fix TYPE to work properly on files > 64K
  1112                                  ;
  1113                                  ; A051	PTM P3011	Fix DIR header to be compatible with prior releases.
  1114                                  ;
  1115                                  ; A052	PTM P3063,P3228 Fix COPY message for invalid filename on target.
  1116                                  ;
  1117                                  ; A053	PTM P2865	Fix DIR to work in 40 column mode.
  1118                                  ;
  1119                                  ; A054	PTM P3407	Code reduction and critical error on single line
  1120                                  ;	PTM P3672	(Change to single parser exported under P3407)
  1121                                  ;
  1122                                  ; A055	PTM P3282	Reset message service variables in INT 23h to fix
  1123                                  ;			problems with breaking out of INT 24h
  1124                                  ;
  1125                                  ; A056	PTM P3389	Fix problem of environment overlaying transient.
  1126                                  ;
  1127                                  ; A057	PTM P3384	Fix COMMAND /C so that it works if there is no space
  1128                                  ;			before the "string".  EX: COMMAND /CDIR
  1129                                  ;
  1130                                  ; A058	PTM P3493	Fix DBCS so that CPARSE eats second character of
  1131                                  ;			DBCS switch.
  1132                                  ;
  1133                                  ; A059	PTM P3394	Change the TIME command to right align the display of
  1134                                  ;			the time.
  1135                                  ;
  1136                                  ; A060	PTM P3672	Code reduction - change PARSE and EXTENDED ERROR
  1137                                  ;			messages to be disk based.  Only keep them if /MSG
  1138                                  ;			is used.
  1139                                  ;
  1140                                  ; A061	PTM P3928	Fix so that transient doesn't reload when breaking
  1141                                  ;			out of internal commands, due to substitution blocks
  1142                                  ;			not being reset.
  1143                                  ;
  1144                                  ; A062	PTM P4079	Fix segment override for fetching address of environment
  1145                                  ;			of parent copy of COMMAND when no COMSPEC exists in
  1146                                  ;			secondary copy of environment.	Change default slash in
  1147                                  ;			default comspec string to backslash.
  1148                                  ;
  1149                                  ; A063	PTM P4140	REDIRECTOR and IFSFUNC changed interface for getting
  1150                                  ;			text for critical error messages.
  1151                                  ;
  1152                                  ; A064	PTM P4934	Multiplex number for ANSI.SYS changed due to conflict
  1153                                  ;	5/20/88 	with Microsoft product already shipped.
  1154                                  ;
  1155                                  ; A065	PTM P4935	Multiplex number for SHELL changed due to conflict
  1156                                  ;	 5/20/88	with Microsoft product already shipped.
  1157                                  ;
  1158                                  ; A066	PTM P4961	DIR /W /P scrolled first line off the screen in some
  1159                                  ;	 5/24/88	cases; where the listing would barely fit without the
  1160                                  ;			header and space remaining.
  1161                                  ;
  1162                                  ; A067	PTM P5011	For /E: values of 993 to 1024 the COMSPEC was getting
  1163                                  ;	 6/6/88 	trashed.  Turns out that the SETBLOCK for the new
  1164                                  ;			environment was putting a "Z block" marker in the old
  1165                                  ;			environment.  The fix is to move to the old environment
  1166                                  ;			to the new environment before doing the SETBLOCK.
  1167                                  ;
  1168                                  ; A068  PTM P5568       IR79754 APPEND /x:on not working properly with DIR/VOL
  1169                                  ;        09/19/88       because the check for APPEND needed to be performed
  1170                                  ;                       before the DIR's findfirst.
  1171                                  ;
  1172                                  ; A069  PTM P5726       IR80540 COMSPEC_flag not properly initialized and
  1173                                  ;        10/30/88       executed.  Causing AUSTIN problem testing LAN/DW4 re-
  1174                                  ;                       loading trans w/new comspec with no user change comspec.
  1175                                  ;
  1176                                  ; A070  PTM P5734       IR80484 Batch file causes sys workspace to be corrupted.
  1177                                  ;        11/05/88       Expansion of environment variables into batch line of
  1178                                  ;                       128 chars was not being counted and "%" which should be
  1179                                  ;                       ignored were being counted.
  1180                                  ;
  1181                                  ; A071  PTM P5854       IR82061 Invalid COMMAND.COM when Word Perfect, Prompt
  1182                                  ;        03/02/89       used.  Comspec_flag was not in protected data file be-
  1183                                  ;                       ing included in checksum and was being overwritten by
  1184                                  ;                       WP.  Moved var from Tspc to Tdata so Trans would reload.
  1185                                  ;                       Also removed fix A069 (because flag now protected).
  1186                                  ;
  1187                                  ; C001  VERSION 4.1     Add new internal command - SERVICE - to display the DOS
  1188                                  ;        07/25/89       version and CSD version in U.S. date format.  Files
  1189                                  ;                       changed - TRANMSG,.SKL,COMMAND1,TDATA,TCMD2A,USA.MSG
  1190                                  ;
  1191                                  ;***********************************************************************************
  1192                                  
  1193                                  ;
  1194                                  ;	Revision History
  1195                                  ;	================
  1196                                  ;
  1197                                  ;	M021	SR	08/23/90	Fixed Ctrl-C handler to handle Ctrl-C
  1198                                  ;					at init time (date/time prompt)
  1199                                  ;
  1200                                  
  1201                                  ;
  1202                                  ;.xcref
  1203                                  ;.xlist
  1204                                  ;	include dossym.inc		; basic DOS symbol set
  1205                                  ;	include syscall.inc		; DOS function names
  1206                                  ;	include comsw.asm		; build version info
  1207                                  ;	include comequ.asm		; common command.com symbols
  1208                                  ;	include resmsg.equ		; resident message names
  1209                                  ;
  1210                                  ;	include comseg.asm		;segment ordering
  1211                                  ;.list
  1212                                  ;.cref
  1213                                  
  1214                                  ;CODERES segment public byte
  1215                                  ;CODERES ends
  1216                                  ;
  1217                                  ;DATARES 	segment public byte
  1218                                  ;		extrn	AccDen:byte
  1219                                  ;		extrn	Batch:word
  1220                                  ;		extrn	EchoFlag:byte
  1221                                  ;		extrn	ExeBad:byte
  1222                                  ;		extrn	ExecEMes:byte
  1223                                  ;		extrn	ExecErrSubst:byte
  1224                                  ;		extrn	ExtCom:byte
  1225                                  ;		extrn	ForFlag:byte
  1226                                  ;		extrn	IfFlag:byte
  1227                                  ;		extrn	InitFlag:BYTE
  1228                                  ;		extrn	Nest:word
  1229                                  ;		extrn	PipeFlag:byte
  1230                                  ;		extrn	RBadNam:byte
  1231                                  ;		extrn	RetCode:word
  1232                                  ;		extrn	SingleCom:word
  1233                                  ;		extrn	TooBig:byte
  1234                                  ;
  1235                                  ;		extrn	OldDS:word
  1236                                  ;
  1237                                  ;DATARES 	ends
  1238                                  ;
  1239                                  ;
  1240                                  ;INIT		segment public para
  1241                                  ;		extrn	ConProc:near
  1242                                  ;		extrn	Init_Contc_SpecialCase:near
  1243                                  ;INIT		ends
  1244                                  
  1245                                  ; 09/01/2023 - Erdogan Tan - Istanbul
  1246                                  ; --------------------------------------
  1247                                  ; 'command5.s' source code reference(s):
  1248                                  
  1249                                  ;	1) MSDOS 6.0 COMMAND.COM source files
  1250                                  ;	2) Disassembled MSDOS 5.0 COMMAND.COM - 11/11/1991 - 47845 bytes  
  1251                                  ;	   (Disassembler: HEX-RAYS IDA Pro Freeware Version 5.0)
  1252                                  ; ----------------------------------------------------------------------				 	 	
  1253                                  
  1254                                  ; -----------------------------------------------------------------------------
  1255                                  ; START OF RESIDENT PORTION
  1256                                  ; -----------------------------------------------------------------------------
  1257                                  ; SEGMENT - DATARES
  1258                                  ; -----------------------------------------------------------------------------
  1259                                  
  1260                                  section .RESGROUP ; vstart=100h  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) 
  1261                                  
  1262                                  ; 09/01/2023 - Retro DOS v4.0 (Modified COMMAND.COM v5.0)
  1263                                  
  1264                                  ;==============================================================================
  1265                                  ; STUB.ASM - MSDOS 6.0 - 1991
  1266                                  ;==============================================================================
  1267                                  
  1268                                  ;This file contains the low memory stub for command.com which hooks all the
  1269                                  ;entry points into the resident command.com and directs the calls to the
  1270                                  ;appropriate routines in the resident code which may be located in HIMEM. 
  1271                                  ;
  1272                                  ;The stub has been made part of the resident data and will always
  1273                                  ;be duplicated on every invocation of command.com. However, the only stubs
  1274                                  ;that actually hook the interrupt vectors belong to either the first 
  1275                                  ;command.com or to any other command.com executed with the /p switch. 
  1276                                  ;
  1277                                  ;The stub also keeps track of the current active data segment. The 
  1278                                  ;INIT code of each command.com updates this variable via an int 2fh mechanism
  1279                                  ;with its own data segment. The INIT code also updates a pointer in its data
  1280                                  ;segment to the previous resident data segment. Whenever a command.com exits,
  1281                                  ;the exit code picks up the previous data segment pointer from the current
  1282                                  ;data segment and patches it into the CurResDataSeg variable in the stub.
  1283                                  ;
  1284                                  ;Right now the stub does not bother about A20 switching. We assume
  1285                                  ;A20 is always on. It just does a far jump to the resident code with the 
  1286                                  ;value of the current data segment in one of the registers. A20 toggle 
  1287                                  ;support maybe added as a future enhancement, if the need is felt.
  1288                                  
  1289                                  	; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1290                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1291                                  
  1292                                  	; 18/07/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM
  1293                                  
  1294                                  	[ORG 100H]
  1295                                  
  1296                                  	; 21/09/2018 - Retro DOS v3.0
  1297                                  StartCode:
  1298 00000000 E98D15                  	jmp	ConProc	; 10/01/2023 
  1299                                  
  1300                                  	; 09/01/2023
  1301                                  
  1302                                  ; Make following table word-aligned, and at the same time, provide a
  1303                                  ; signature that sysinit can use to (attempt to) validate the interpreter
  1304                                  
  1305                                  	;db	0	; MSDOS 5.0 COMMAND.COM - DATARES:0103h
  1306                                  	;db	7Ah	; PCDOS 7.10 (7.1) COMMAND.COM ; 18/07/2024
  1307 00000003 7A                      	db      ((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
  1308                                  
  1309                                  word_104:
  1310 00000004 0000                    	dw	0	; PCDOS 7.1 COMMAND.COM - DATARES:0104h
  1311                                  ;RESGROUP:0106h
  1312 00000006 000000000000000000-     	db	0Ch dup(0), 0Dh
  1312 0000000F 0000000D           
  1313                                  ;RESGROUP:0113h
  1314                                  a@Ibm12_01_2003:
  1315 00000013 402349424D3A31322E-     	db '@#IBM:12.01.2003.build_1.32#@ COMMAND.COM(USA)',0
  1315 0000001C 30312E323030332E62-
  1315 00000025 75696C645F312E3332-
  1315 0000002E 234020434F4D4D414E-
  1315 00000037 442E434F4D28555341-
  1315 00000040 2900               
  1316                                  ;RESGROUP:0142h:
  1317 00000042 000000000000000000-     	db 22h dup(0), 1Ah, 0
  1317 0000004B 000000000000000000-
  1317 00000054 000000000000000000-
  1317 0000005D 000000000000001A00 
  1318                                  
  1319                                  ;All the entry points declared below are patched in at INIT time with the
  1320                                  ;proper segment and offset values after the resident code segment has been
  1321                                  ;moved to its final location
  1322                                  
  1323                                  ;!!!WARNING!!!
  1324                                  ; All the dword ptrs from Int2f_Entry till MsgRetrv_Entry should be contiguous
  1325                                  ;because the init routine 'Patch_stub' (in init.asm) relies on this to patch
  1326                                  ;in the correct segments and offsets
  1327                                  
  1328                                  Int2f_Entry:
  1329 00000066 [A014]                  	dw	MsgInt2fHandler		; Address of int 2fh handler
  1330 00000068 0000                    	dw	0
  1331                                  Int2e_Entry:
  1332 0000006A [860E]                  	dw	Int_2e			; Address of int 2eh handler
  1333 0000006C 0000                    	dw	0
  1334                                  Ctrlc_Entry:
  1335 0000006E [430D]                  	dw	ContC			; Address of Ctrl-C handler
  1336 00000070 0000                    	dw	0
  1337                                  CritErr_Entry:
  1338 00000072 [8B11]                  	dw	DSKERR			; Address of critical error handler
  1339 00000074 0000                    	dw	0
  1340                                  
  1341                                  Exec_Entry:
  1342 00000076 00000000                	dd	0			; Entry from transient to Ext_Exec
  1343                                  RemCheck_Entry:
  1344 0000007A 00000000                	dd	0			; Entry from transient to TRemCheck
  1345                                  TrnLodCom1_Entry:
  1346 0000007E 00000000                	dd	0			; Entry from transient to LodCom1
  1347                                  LodCom_Entry:
  1348 00000082 00000000                	dd	0			; Entry after exit from command.com
  1349                                  MsgRetrv_Entry:
  1350 00000086 00000000                	dd	0			; Entry from external to MsgRetriever
  1351                                  HeadFix_Entry:
  1352 0000008A 00000000                	dd	0			; Entry from trans to HeadFix
  1353                                  UMBOff_Entry:
  1354 0000008E 00000000                	dd	0			; Entry from here to UMBOff routine; M003
  1355                                  XMMCallAddr:
  1356 00000092 00000000                	dd	0			; Call address for XMM functions
  1357                                  ComInHMA:
  1358 00000096 00                      	db	0			; Flags if command.com in HMA
  1359                                  
  1360                                  ; 18/07/2024 (PCDOS 7.1 COMMAND.COM - RESGROUP:0197h)
  1361                                  
  1362                                  Int2f_Trap:
  1363                                  	;sti	; 19/04/2023 (MSDOS 5.0 COMMAND.COM - RESGROUP:0135h)
  1364 00000097 E86400                  	call	CheckA20
  1365 0000009A 1E                      	push	ds			; push current ds value
  1366 0000009B 0E                      	push	cs			; push resident data segment value
  1367                                  	;jmp	cs:Int2f_Entry
  1368 0000009C 2EFF2E[6600]            	jmp	far [cs:Int2f_Entry]
  1369                                  
  1370                                  Int2e_Trap:
  1371 000000A1 FB                      	sti
  1372 000000A2 E85900                  	call	CheckA20
  1373 000000A5 1E                      	push	ds			; push current ds value
  1374 000000A6 0E                      	push	cs			; push resident data segment value
  1375                                  	;jmp	cs:Int2e_Entry
  1376 000000A7 2EFF2E[6A00]            	jmp	far [cs:Int2e_Entry]
  1377                                  
  1378                                  Ctrlc_Trap:
  1379 000000AC FB                      	sti
  1380 000000AD E84E00                  	call	CheckA20
  1381 000000B0 1E                      	push	ds			; push current ds value
  1382 000000B1 0E                      	push	cs			; push resident data segment value
  1383                                  	;jmp	cs:Ctrlc_Entry
  1384 000000B2 2EFF2E[6E00]            	jmp	far [cs:Ctrlc_Entry]
  1385                                  
  1386                                  CritErr_Trap:
  1387 000000B7 FB                      	sti
  1388 000000B8 E84300                  	call	CheckA20
  1389 000000BB 1E                      	push	ds			; push current ds value
  1390 000000BC 0E                      	push	cs			; push resident data segment value
  1391                                  	;jmp	cs:CritErr_Entry
  1392 000000BD 2EFF2E[7200]            	jmp	far [cs:CritErr_Entry]
  1393                                  
  1394                                  Exec_Trap:
  1395 000000C2 E83900                  	call	CheckA20
  1396 000000C5 1E                      	push	ds			; push current ds value
  1397 000000C6 0E                      	push	cs			; push resident data segment value
  1398                                  	;jmp	cs:Exec_Entry
  1399 000000C7 2EFF2E[7600]            	jmp	far [cs:Exec_Entry]
  1400                                  
  1401                                  RemCheck_Trap:
  1402 000000CC E82F00                  	call	CheckA20
  1403 000000CF 1E                      	push	ds			; push current ds value
  1404 000000D0 0E                      	push	cs			; push resident data segment value
  1405                                  	;jmp	cs:RemCheck_Entry
  1406 000000D1 2EFF2E[7A00]            	jmp	far [cs:RemCheck_Entry]
  1407                                  
  1408                                  TrnLodCom1_Trap:
  1409 000000D6 E82500                  	call	CheckA20
  1410 000000D9 1E                      	push	ds			; push current ds value
  1411 000000DA 0E                      	push	cs			; push resident data segment value
  1412                                  	;jmp	cs:TrnLodCom1_Entry
  1413 000000DB 2EFF2E[7E00]            	jmp	far [cs:TrnLodCom1_Entry]
  1414                                  
  1415                                  LodCom_Trap:
  1416 000000E0 E81B00                  	call	CheckA20
  1417 000000E3 1E                      	push	ds			; push current ds value
  1418 000000E4 0E                      	push	cs			; push resident data segment value
  1419                                  	;jmp	cs:LodCom_Entry
  1420 000000E5 2EFF2E[8200]            	jmp	far [cs:LodCom_Entry]
  1421                                  
  1422                                  MsgRetrv_Trap:
  1423 000000EA E81100                  	call	CheckA20
  1424 000000ED 1E                      	push	ds			; push current ds value
  1425 000000EE 0E                      	push	cs			; push resident data segment value
  1426                                  	;jmp	cs:MsgRetrv_Entry
  1427 000000EF 2EFF2E[8600]            	jmp	far [cs:MsgRetrv_Entry]
  1428                                  
  1429                                  HeadFix_Trap:
  1430 000000F4 E80700                  	call	CheckA20
  1431 000000F7 1E                      	push	ds			; push current ds value
  1432 000000F8 0E                      	push	cs			; push resident data segment value
  1433                                  	;jmp	cs:HeadFix_Entry
  1434 000000F9 2EFF2E[8A00]            	jmp	far [cs:HeadFix_Entry]
  1435                                  
  1436                                  ; ----------------------------------------------------------------------------
  1437                                  
  1438                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1439                                  %if 0
  1440                                  	; 09/01/2023
  1441                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:019Dh
  1442                                  
  1443                                  	; 05/06/2023
  1444                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:019Ch
  1445                                  CheckA20:
  1446                                  	pushf				; save current flags
  1447                                  	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1448                                  	jz	short A20_on		; no, jump to resident
  1449                                  
  1450                                  	call	QueryA20
  1451                                  	jnc	short A20_on		; A20 is on, jump to resident
  1452                                  
  1453                                  	call	EnableA20		; turn A20 on
  1454                                  A20_on:
  1455                                  	popf				; flags have to be unchanged
  1456                                  	retn
  1457                                  %else
  1458                                  	; 18/07/2024
  1459                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1460                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1461                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:01FFh
  1462                                  CheckA20:
  1463 000000FE 9C                      	pushf				; save current flags
  1464 000000FF 2E803E[9600]00          	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1465 00000105 741A                    	jz	short A20_on		; no, jump to resident
  1466                                  	; 18/07/2024
  1467 00000107 50                      	push	ax
  1468 00000108 53                      	push	bx
  1469                                  QueryA20:
  1470                                  	;mov	ah,7
  1471 00000109 B407                    	mov	ah,XMM_QUERY_A20
  1472                                  	;call	cs:XMMCallAddr
  1473 0000010B 2EFF1E[9200]            	call	far [cs:XMMCallAddr]
  1474 00000110 09C0                    	or	ax,ax
  1475                                  	; 16/04/2023
  1476 00000112 750B                    	jnz	short QA20_ON		; A20 is on, jump to resident
  1477                                  	; 18/07/2024
  1478                                  EnableA20:
  1479                                  	;mov	ah,5
  1480 00000114 B405                    	mov	ah,XMM_LOCAL_ENABLE_A20	; turn A20 on
  1481                                  	;call	cs:XMMCallAddr
  1482 00000116 2EFF1E[9200]            	call	far [cs:XMMCallAddr]
  1483 0000011B 09C0                    	or	ax,ax
  1484 0000011D 7404                    	jz	short XMMerror		; AX = 0 fatal error
  1485                                  QA20_ON:
  1486 0000011F 5B                      	pop	bx
  1487 00000120 58                      	pop	ax
  1488                                  A20_on:
  1489 00000121 9D                      	popf				; flags have to be unchanged
  1490 00000122 C3                      	retn
  1491                                  ;If we get an error, we just loop forever
  1492                                  XMMerror:
  1493 00000123 EBFE                    	jmp	short XMMerror
  1494                                  %endif
  1495                                  
  1496                                  ; ----------------------------------------------------------------------------
  1497                                  
  1498                                  ; M005; This is a far jump to the actual int 2fh entry point. The renormalized
  1499                                  ; M005; int 2fh cs:ip points here. We hardcode a far jump here to the int 2fh
  1500                                  ; M005; handler. Note that we have to hardcode a jump and we cannot use any
  1501                                  ; M005; pointers because our cs is going to be different. The segment to
  1502                                  ; M005; jump to is patched in at init time. (in init.asm)
  1503                                  
  1504                                  Carousel_i2f_Hook:			; M005
  1505 00000125 EA                      	db	0EAh			; far jump opcode; M005
  1506 00000126 [9700]                  	dw	Int2f_Trap ; DATARES	; int 2fh offset ; M005
  1507                                  int2fh_segm:	; 22/07/2024
  1508 00000128 0000                    	dw	0			; int 2fh segment; M005
  1509                                  
  1510                                  ; ----------------------------------------------------------------------------
  1511                                  
  1512                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1513                                  %if 0
  1514                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1515                                  QueryA20:
  1516                                  	push	bx
  1517                                  	push	ax
  1518                                  	;mov	ah,7
  1519                                  	mov	ah,XMM_QUERY_A20
  1520                                  	;call	cs:XMMCallAddr
  1521                                  	call	far [cs:XMMCallAddr]
  1522                                  	or	ax,ax
  1523                                  	pop	ax
  1524                                  	pop	bx
  1525                                  	; 16/04/2023
  1526                                  	jnz	short QA20_ON	; cf = 0	; AX = 1 => ON
  1527                                  	stc					; OFF
  1528                                  	;retn
  1529                                  QA20_ON:
  1530                                  	;clc					; ON
  1531                                  	retn
  1532                                  %endif
  1533                                  
  1534                                  ; ----------------------------------------------------------------------------
  1535                                  
  1536                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1537                                  %if 0
  1538                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1539                                  EnableA20:
  1540                                  	push	bx
  1541                                  	push	ax
  1542                                  	;mov	ah,5
  1543                                  	mov	ah,XMM_LOCAL_ENABLE_A20
  1544                                  	;call	cs:XMMCallAddr
  1545                                  	call	far [cs:XMMCallAddr]
  1546                                  	or	ax,ax
  1547                                  	jz	short XMMerror			; AX = 0 fatal error
  1548                                  	pop	ax
  1549                                  	pop	bx
  1550                                  	retn
  1551                                  ;If we get an error, we just loop forever
  1552                                  XMMerror:
  1553                                  	jmp	short XMMerror
  1554                                  %endif
  1555                                  
  1556                                  ; -----------------------------------------------------------------------------
  1557                                  
  1558                                  ; 05/06/2023
  1559                                  ;HV_Extern	equ	1
  1560                                  ;HV_LoadHigh	equ	1
  1561                                  ;HV_Stub	equ	1
  1562                                  ;	include	highvar.inc	; Make high-memory variables external here
  1563                                  ;	include	highexit.inc	; And add code for UnHideUMBs
  1564                                  
  1565                                  ;==============================================================================
  1566                                  ; HIGHEXIT.INC, MSDOS 6.0, 1992
  1567                                  ;==============================================================================
  1568                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1569                                  
  1570                                  DOS_STRATEGY_GET equ  5800h	; Int 21h, Func 58h, Svc 0 = get alloc strategy
  1571                                  DOS_STRATEGY_SET equ  5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
  1572                                  DOS_UMBLINK_GET	equ   5802h	; Int 21h, Func 58h, Svc 2 = get link state
  1573                                  DOS_UMBLINK_SET	equ   5803h	; Int 21h, Func 58h, Svc 3 = set link state
  1574                                  DOS_GET_LISTS	equ     52h	; Int 21h, Func 52h = get list of lists
  1575                                  
  1576                                  UMB_HeadIdx	equ     8Ch	; Offset from ES (after func52h) to get UMBHead
  1577                                  
  1578                                  	; 05/06/2023
  1579                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:01D9h
  1580                                  
  1581                                  ; -----------------------------------------------------------------------------
  1582                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
  1583                                  ; -----------------------------------------------------------------------------
  1584                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
  1585                                  ;               very little to do, as no elelments will be marked as HIDDEN.
  1586                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
  1587                                  ; ERROR:  None
  1588                                  ; USES:   fInHigh (from highvar.inc), carry flag
  1589                                  ; -----------------------------------------------------------------------------
  1590                                  
  1591                                  UnHideUMBs:
  1592 0000012A 50                      	push	ax		; Save ax for what we're about to do
  1593                                  
  1594                                  ; -----------------------------------------------------------------------------
  1595                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
  1596                                  ;    length of time. Those six constitute a check of whether or not we should
  1597                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
  1598                                  ;    will destroy the current link-state and memory-allocation strategy after
  1599                                  ;    every command execution.
  1600                                  ; -----------------------------------------------------------------------------
  1601                                  
  1602                                  	; 05/06/2023
  1603                                  	;getdata al,fInHigh	; Get InHigh from data segment
  1604                                  	;
  1605                                  	;push	ds
  1606 0000012B A0[3005]                	mov	al,[fInHigh]
  1607                                  	;pop	ds
  1608                                  
  1609                                  	;or	al, al
  1610                                  	;jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
  1611                                  
  1612                                  	;pop	ax		; then there's nothing to do here... so
  1613                                  	;stc			; restore everything and return.  Just like
  1614                                  	;retn			; that.
  1615                                  
  1616                                  	; 05/06/2023
  1617 0000012E 3C01                    	cmp	al,1
  1618 00000130 720F                    	jb	short uhu20	; cf=1
  1619                                  uhu10:	
  1620 00000132 E8A000                  	call	linkumb		; Make sure UMBs are linked in.
  1621 00000135 E82000                  	call	FreeUMBs
  1622                                  
  1623                                  	;putdata fInHigh, 0	; We're leaving, so update fInHigh.
  1624                                  	;
  1625                                  	;push	es
  1626                                  	;mov	byte [es:fInHigh],0
  1627                                  	;pop	es
  1628                                  	; 05/06/2023
  1629 00000138 C606[3005]00            	mov	byte [fInHigh],0
  1630                                  
  1631 0000013D E80300                  	call	he_unlink	; Unlink UMBs
  1632                                  
  1633                                  	;pop	ax
  1634                                  	;clc
  1635                                  	;retn
  1636                                  
  1637 00000140 F8                      	clc
  1638                                  uhu20:
  1639 00000141 58                      	pop	ax
  1640 00000142 C3                      	retn
  1641                                  
  1642                                  ; -----------------------------------------------------------------------------
  1643                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
  1644                                  ; -----------------------------------------------------------------------------
  1645                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
  1646                                  ; EXIT:     None
  1647                                  ; ERROR:    None
  1648                                  ; USES:     AX, BX
  1649                                  ; -----------------------------------------------------------------------------
  1650                                  
  1651                                  	; 05/06/2023
  1652                                  he_unlink:
  1653 00000143 30FF                    	xor	bh, bh
  1654                                  	
  1655                                  	;getdata bl,fm_umb		; Restore original link-state
  1656                                  	;
  1657                                  	;push	ds
  1658 00000145 8A1E[3505]              	mov     bl,[fm_umb]
  1659                                  	;pop	ds
  1660                                  
  1661 00000149 B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1662 0000014C CD21                    	int	21h
  1663                                  
  1664                                  	;xor	bh, bh
  1665                                  	
  1666                                  	;getdata bl,fm_strat		; Restore original mem-alloc strategy
  1667                                  	;push	ds
  1668 0000014E 8A1E[3605]              	mov     bl,[fm_strat]
  1669                                  	;pop	ds
  1670                                  
  1671 00000152 B80158                  	mov	ax,DOS_STRATEGY_SET ; 5801h
  1672 00000155 CD21                    	int	21h
  1673                                  
  1674 00000157 C3                      	retn
  1675                                  
  1676                                  ; -----------------------------------------------------------------------------
  1677                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
  1678                                  ; -----------------------------------------------------------------------------
  1679                                  ; ENTRY:    None
  1680                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
  1681                                  ; ERROR:    None (ignore CF)
  1682                                  ; USES:     Flags
  1683                                  ; -----------------------------------------------------------------------------
  1684                                  
  1685                                  	; 05/06/2023
  1686                                  arena_signature_end equ 5Ah ; 'Z'
  1687                                  arena_signature equ 0
  1688                                  arena_size equ 3
  1689                                  
  1690                                  FreeUMBs:
  1691 00000158 50                      	push	ax
  1692 00000159 06                      	push	es
  1693                                  
  1694 0000015A E86900                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
  1695 0000015D 721C                    	jc	short fusX
  1696                                  fus10:
  1697 0000015F 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
  1698 00000161 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
  1699 00000164 7503                    	jnz	short fus20
  1700 00000166 E84200                  	call	freeMCB
  1701                                  fus20:	
  1702 00000169 26A00000                	mov	al,[es:arena_signature] ; mov al,[es:0]
  1703 0000016D 3C5A                    	cmp	al,arena_signature_end ; 'Z' ; 5Ah
  1704 0000016F 740A                    	jz	short fusX	; That means this was the last MCB--that's it.
  1705                                  
  1706 00000171 8CC0                    	mov	ax,es
  1707 00000173 2603060300              	add	ax,[es:arena_size] ; add ax,[es:3]
  1708 00000178 40                      	inc	ax
  1709                                  	;mov	es,ax		; Go on forward.
  1710                                  	;jmp	short fus10
  1711                                  	; 18/07/2024
  1712 00000179 EBE4                    	jmp	short fus10
  1713                                  fusX:
  1714 0000017B 07                      	pop	es
  1715 0000017C 58                      	pop	ax
  1716 0000017D C3                      	retn
  1717                                  
  1718                                  ; -----------------------------------------------------------------------------
  1719                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
  1720                                  ; -----------------------------------------------------------------------------
  1721                                  ; ENTRY:    ES:0 should point to an MCB
  1722                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
  1723                                  ; ERROR:    None
  1724                                  ; USES:     Flags
  1725                                  ; -----------------------------------------------------------------------------
  1726                                  
  1727                                  	; 05/06/2023
  1728                                  SystemPSPOwner	equ 8
  1729                                  arena_owner	equ 1
  1730                                  arena_name	equ 8
  1731                                  
  1732                                  isHideMCB:
  1733 0000017E 50                      	push	ax
  1734                                  
  1735 0000017F 26833E010008            	cmp	word [es:arena_owner],SystemPSPOwner ; If the owner's SYSTEM
  1736 00000185 7522                    	jne	short ihm_x			     ; then check for HIDDEN
  1737                                  
  1738 00000187 26A10800                	mov	ax,[es:arena_name]   ; [es:8]
  1739 0000018B 3D4849                  	cmp	ax,'HI' ; 4948h
  1740 0000018E 7519                    	jne	short ihm_x
  1741 00000190 26A10A00                	mov	ax,[es:arena_name+2] ; [es:10]
  1742 00000194 3D4444                  	cmp	ax,'DD' ; 4444h
  1743 00000197 7510                    	jne	short ihm_x
  1744 00000199 26A10C00                	mov	ax,[es:arena_name+4] ; [es:12]
  1745 0000019D 3D454E                  	cmp	ax,'EN' ; 4E45h
  1746 000001A0 7507                    	jne	short ihm_x
  1747 000001A2 26A10E00                	mov	ax,[es:arena_name+6] ; [es:14]
  1748 000001A6 3D2020                  	cmp	ax,'  ' ; 2020h
  1749                                  ihm_x:
  1750 000001A9 58                      	pop	ax
  1751 000001AA C3                      	retn
  1752                                  
  1753                                  ; -----------------------------------------------------------------------------
  1754                                  ;*** freeMCB - marks as free the MCB at ES:0
  1755                                  ; -----------------------------------------------------------------------------
  1756                                  ; ENTRY:    ES:0 should point to an MCB
  1757                                  ; EXIT:     None; MCB free'd
  1758                                  ; ERROR:    None
  1759                                  ; USES:     AX
  1760                                  ; -----------------------------------------------------------------------------
  1761                                  
  1762                                  	; 05/06/2023
  1763                                  freeMCB:
  1764 000001AB 26C70601000000          	mov	word [es:arena_owner],0	; [es:1]
  1765 000001B2 B82020                  	mov	ax,'  '
  1766 000001B5 26A30800                	mov	[es:arena_name+0],ax	; [es:8]
  1767 000001B9 26A30A00                	mov	[es:arena_name+2],ax
  1768 000001BD 26A30C00                	mov	[es:arena_name+4],ax
  1769 000001C1 26A30E00                	mov	[es:arena_name+6],ax	; [es:14]
  1770 000001C5 C3                      	retn
  1771                                  
  1772                                  ; -----------------------------------------------------------------------------
  1773                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
  1774                                  ; -----------------------------------------------------------------------------
  1775                                  ; ENTRY:  Nothing
  1776                                  ; EXIT:   AX contains 0x9FFF for most systems
  1777                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
  1778                                  ; USES:   Flags, AX
  1779                                  ; -----------------------------------------------------------------------------
  1780                                  
  1781                                  	; 05/06/2023
  1782                                  HeadUmb:
  1783                                  	; 18/07/2024 - PCDOS 7.1 - RESGROUP:02CDh
  1784                                  	;push	si
  1785                                  	;push	ds
  1786 000001C6 06                      	push	es
  1787                                  
  1788 000001C7 B452                    	mov	ah,DOS_GET_LISTS	; Call int 21h, function 52h...
  1789 000001C9 CD21                    	int	21h	; DOS - 2+ internal - GET LIST OF LISTS
  1790                                  			; Return: ES:BX -> DOS list of lists
  1791                                  
  1792 000001CB 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008Ch
  1793 000001CF 83F8FF                  	cmp	ax,0FFFFh
  1794                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
  1795                                  	;clc				; Else, it isn't.
  1796                                  	;jmp	short xhu_x
  1797                                  ;xhu_e:
  1798                                  	;stc
  1799                                  	; 05/06/2023
  1800 000001D2 F5                      	cmc	; cf=0 -> cf=1
  1801                                  ;xhu_x:
  1802 000001D3 07                      	pop	es
  1803                                  	; 18/07/2024
  1804                                  	;pop	ds
  1805                                  	;pop	si
  1806 000001D4 C3                      	retn
  1807                                  
  1808                                  ; -----------------------------------------------------------------------------
  1809                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
  1810                                  ; -----------------------------------------------------------------------------
  1811                                  ; ENTRY:    None
  1812                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
  1813                                  ; ERROR:    None
  1814                                  ; USES:     AX, BX, fm_umb
  1815                                  ; -----------------------------------------------------------------------------
  1816                                  
  1817                                  	; 05/06/2023
  1818                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:029Dh
  1819                                  linkumb:
  1820 000001D5 B80258                  	mov	ax,DOS_UMBLINK_GET ; 5802h
  1821 000001D8 CD21                    	int	21h			; Current link-state is now in al
  1822                                  
  1823 000001DA 08C0                    	or	al,al			; BUGBUG: proper check?
  1824 000001DC 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
  1825                                  
  1826 000001DE B80358                  	mov	ax,DOS_UMBLINK_SET ; 5803h
  1827 000001E1 BB0100                  	mov	bx,1
  1828 000001E4 CD21                    	int	21h
  1829                                  lumbX:
  1830 000001E6 C3                      	retn
  1831                                  
  1832                                  ;==============================================================================
  1833                                  ; STUB.ASM, MSDOS 6.0, 1991
  1834                                  ;==============================================================================
  1835                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  1836                                  
  1837                                  	; 09/01/2023 - Retro DOS v4.0 (& 4.1)
  1838                                  	; 05/06/2023 - Retro DOS 4.2
  1839                                  
  1840                                  ;The Exec call has to be issued from the data segment. The reason for this 
  1841                                  ;is TSRs. When a TSR does a call to terminate and stay resident, the call
  1842                                  ;returns with all registers preserved and so all our segment registers are
  1843                                  ;still set up. However, if the TSR unloads itself later on, it still 
  1844                                  ;comes back here. In this case the segment registers and the stack are
  1845                                  ;not set up and random things can happen. The only way to setup all the 
  1846                                  ;registers is to use the cs value and this can only be done when we are in
  1847                                  ;the data segment ourselves. So, this piece of code had to be moved from
  1848                                  ;the code segment to the data segment.
  1849                                  
  1850                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02AFh
  1851                                  Issue_Exec_Call:
  1852 000001E7 CD21                    	int 	21h
  1853                                  
  1854                                  ;We disable interrupts while changing the stack because there is a bug in 
  1855                                  ;some old 8088 processors where interrupts are let through while ss & sp
  1856                                  ;are being changed.
  1857                                  
  1858 000001E9 FA                      	cli
  1859 000001EA 0E                      	push	cs
  1860 000001EB 17                      	pop	ss
  1861                                  
  1862                                  	;;;mov	sp,53Eh ; MSDOS 5.0 COMMAND.COM RESGROUP:01DFh
  1863                                  	;;mov	sp,60Ah	; MSDOS 6.22 COMMAND.COM RESGROUP:02B4h
  1864                                  	;mov	sp,637h ; PCDOS 7.1 COMMAND.COM RESGROUP:02F8h
  1865                                  	;mov	sp,offset DATARES:RStack ; stack is set up
  1866 000001EC BC[2E05]                	mov	sp,RStack		; stack is set up
  1867                                  
  1868                                  ; 05/06/2023	
  1869                                  %if 0	
  1870                                  	; 20/04/2023
  1871                                  	;sti
  1872                                  	;push	cs
  1873                                  	;pop	ds			; ds = DATARES
  1874                                  
  1875                                  ; M009; Restore UMB state to that before Exec
  1876                                  
  1877                                  	;pushf				;    This call frees HIDDEN umb's,
  1878                                  	;call	UnHideUMBs		; <- restores the memory-allocation
  1879                                  	;popf				;    strategy and link state, as app.
  1880                                  
  1881                                  	; 09/01/2023 - Retro DOS v4.0
  1882                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:01E2h
  1883                                  	; ----------------------
  1884                                  	sti
  1885                                  	push    cs
  1886                                  	pop     ds
  1887                                  	pushf
  1888                                  	;mov	al,[cs:fInHigh]
  1889                                  	; 18/04/2023
  1890                                  	mov	al,[fInHigh]
  1891                                  	test	al,80h
  1892                                  	jz      short uhu10
  1893                                  	and     al,7Fh
  1894                                  	;;call	cs:UMBOff_Entry
  1895                                  	;call	far [cs:UMBOff_Entry]
  1896                                  	call	far [UMBOff_Entry]
  1897                                  uhu10:
  1898                                  	;and	byte [cs:fInHigh],7Fh
  1899                                  	; 18/04/2023
  1900                                  	and	byte [fInHigh],7Fh
  1901                                  	popf
  1902                                  	; ----------------------
  1903                                  
  1904                                  %endif
  1905                                  	; 05/06/2023 - Retro DOS 4.2
  1906                                  	; MSDOS 6.22 COMMAND.COM RESGROUP:02B7h
  1907 000001EF FB                      	sti
  1908 000001F0 0E                      	push	cs
  1909 000001F1 1F                      	pop	ds			; ds = DATARES
  1910                                  
  1911                                  ; M009; Restore UMB state to that before Exec
  1912                                  
  1913 000001F2 9C                      	pushf				;    This call frees HIDDEN umb's,
  1914 000001F3 E834FF                  	call	UnHideUMBs		; <- restores the memory-allocation
  1915 000001F6 9D                      	popf				;    strategy and link state, as app
  1916                                  
  1917                                  ;We now jump to the stub trap which returns us to the resident code. All
  1918                                  ;flags are preserved by the stub code.
  1919                                  
  1920 000001F7 E9C8FE                  	jmp	Exec_Trap
  1921                                  
  1922                                  ;==============================================================================
  1923                                  ; RDATA.ASM, MSDOS 6.0, 1992
  1924                                  ;==============================================================================
  1925                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1926                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  1927                                  
  1928                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:02C2h (DATARES:02C2h) (*)
  1929                                  ; -----------------------------------------------------------------------------
  1930 000001FA 636F78                  cox_location:	db 'cox' ; (*)	
  1931 000001FD 0000                    cox_Y_option:	dw 0     ; (*)
  1932                                  ; -----------------------------------------------------------------------------
  1933                                  
  1934                                  ;***	Message substitution blocks
  1935                                  
  1936                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:01FFh (DATARES:01FFh)
  1937                                  
  1938                                  ;BlkDevErrSubst	label	byte
  1939                                  ;BlkDevErrRw	subst	<STRING,>		; "reading" or "writing"
  1940                                  ;		subst	<CHAR,DATARES:DrvLet>	; block device drive letter
  1941                                  
  1942 000001FF 02                      BlkDevErrSubst: db	2
  1943 00000200 0000                    BlkDevErrRw:	dw	0
  1944 00000202 01                      		db	1
  1945 00000203 [0502]                  		dw	DrvLet
  1946                                  
  1947 00000205 41                      DrvLet:		db	'A'			; drive letter
  1948                                  
  1949                                  
  1950                                  ;CharDevErrSubst label	byte
  1951                                  ;CharDevErrRw	subst	<STRING,>		 ; "reading" or "writing"
  1952                                  ;CharDevErrDev	subst	<STRING,DATARES:DevName> ; character device name
  1953                                  
  1954 00000206 02                      CharDevErrSubst: db	2
  1955 00000207 0000                    CharDevErrRw:	dw	0
  1956 00000209 02                      		db	2
  1957 0000020A [1802]                  		dw	DevName
  1958                                  
  1959                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0318h
  1960                                  ;DevName:	times 8 db 0  ; db 8 dup (?),0	; device name, asciiz
  1961                                  ;		db	0
  1962                                  
  1963                                  ;NeedVolSubst	label	byte
  1964                                  ;		subst	<STRING,DATARES:VolName> ; volume name
  1965                                  ;		subst	<HEX,DATARES:VolSer+2>	 ; hi word of serial #
  1966                                  ;		subst	<HEX,DATARES:VolSer>	 ; lo word of serial #
  1967                                  
  1968 0000020C 02                      NeedVolSubst:	db	2
  1969 0000020D [1502]                  		dw	VolName
  1970 0000020F 03                      		db	3
  1971 00000210 [2302]                  		dw	VolSer+2
  1972 00000212 03                      		db	3
  1973 00000213 [2102]                  		dw	VolSer
  1974                                  
  1975                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0321h
  1976                                  	; NOTE:	VolName and VolSer must be adjacent
  1977                                  ;VolName:	times 11 db 0 ; db 11 dup (?),0	; volume name
  1978                                  		; 18/07/2024
  1979 00000215 000000                  VolName:	db	3 dup(0)
  1980 00000218 0000000000000000        DevName:	db	8 dup(0)
  1981                                  	
  1982 00000220 00                      		db	0
  1983 00000221 00000000                VolSer:		dd	0			; volume serial #
  1984                                  
  1985 00000225 00                      CDevAt:		db	0
  1986                                  
  1987                                  ;BadFatSubst	label	byte
  1988                                  ;		subst	<CHAR,DATARES:DrvLet>	; drive letter
  1989                                  
  1990 00000226 01                      BadFatSubst:	db	1
  1991 00000227 [0502]                  		dw	DrvLet
  1992                                  
  1993                                  ;PutBackSubst	label	byte
  1994                                  ;PutBackComSpec	subst	<STRING,>		  ; comspec string
  1995                                  ;		subst	<CHAR,DATARES:PutBackDrv> ; drive to put it in
  1996                                  
  1997 00000229 02                      PutBackSubst:	db	2
  1998 0000022A 0000                    PutBackComSpec:	dw	0
  1999 0000022C 01                      		db	1
  2000 0000022D [2F02]                  		dw	PutBackDrv
  2001                                  
  2002 0000022F 20                      PutBackDrv:	db	' '	; db 20h	; drive letter
  2003                                  
  2004                                  ;ExecErrSubst	subst	<STRING,DATARES:SafePathBuffer>
  2005                                  
  2006 00000230 02                      ExecErrSubst:	db	2
  2007 00000231 [5E04]                  		dw	SafePathBuffer
  2008                                  
  2009 00000233 00000000                NeedVol:	dd	0	; ptr to volume name from get ext err
  2010 00000237 00                      ErrType: 	db	0	; critical error message style, 0=old, 1=new
  2011                                  
  2012 00000238 00000000                Int_2e_Ret:	dd	0	; magic command executer return address
  2013 0000023C 0000                    Save_Pdb:	dw	0
  2014 0000023E 0000                    Parent:		dw	0
  2015 00000240 00000000                OldTerm:	dd	0
  2016 00000244 0000                    ErrCd_24:	dw	0
  2017 00000246 0000                    Handle01:	dw	0
  2018 00000248 00                      Loading:	db	0
  2019 00000249 0000                    Batch:		dw	0	; assume no batch mode initially
  2020                                  
  2021                                  ;;;;SR;
  2022                                  ;;;; This flag has been added for a gross hack introduced in batch processing. 
  2023                                  ;;;;We use it to indicate that this batch file has no CR-LF before EOF and that
  2024                                  ;;;;we need to fake the CR-LF for the line to be properly processed
  2025                                  ;;;;
  2026                                  ;;;BatchEOF:	db	0
  2027                                  
  2028                                  	; Bugbug: ComSpec should be 64+3+12+1?
  2029                                  	; What's this comspec_end about?
  2030                                  ; 21/07/2024
  2031                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:0364h
  2032 0000024B 00<rep 40h>             ComSpec:	times 64 db 0 ; db 64 dup (0)
  2033 0000028B 0000                    ComSpec_End:	dw	0
  2034                                  
  2035                                  ;Trans		label	dword
  2036                                  ;		dw	TRANGROUP:Command
  2037                                  
  2038                                  Trans:		;dw	12Ch
  2039                                  		; MSDOS 5.0 COMMAND.COM RESGROUP:0296h (DATARES:0296h)
  2040 0000028D [2E01]                  		dw	COMMAND ; 16/04/2023
  2041 0000028F 0000                    TrnSeg:		dw	0
  2042                                  
  2043 00000291 00                      TrnMvFlg:	db	0	; set if transient portion has been moved
  2044                                  
  2045 00000292 00                      In_Batch:	db	0	; set if we are in batch processing mode
  2046 00000293 00                      Batch_Abort:	db	0	; set if user wants to abort from batch mode
  2047                                  
  2048 00000294 00                      ComDrv:		db	0	; drive spec to load autoexec and command
  2049 00000295 0000                    MemSiz:		dw	0
  2050 00000297 0000                    Sum:		dw	0
  2051 00000299 01                      ExtCom:		db	1	; for init, pretend just did an external
  2052 0000029A 0000                    RetCode: 	dw	0
  2053 0000029C 00                      Crit_Err_Info:	db	0	; hold critical error flags for r,i,f
  2054                                  
  2055                                  
  2056                                  ; The echo flag needs to be pushed and popped around pipes and batch files.
  2057                                  ; We implement this as a bit queue that is shr/shl for push and pop.
  2058                                  
  2059 0000029D 01                      EchoFlag:	db	00000001b ; low bit true => echo commands
  2060 0000029E 01                      Suppress:	db	1	; used for echo, 1=echo line
  2061 0000029F 0000                    Io_Save: 	dw	0
  2062 000002A1 00                      RestDir: 	db	0
  2063 000002A2 00                      PermCom: 	db	0	; true => permanent command
  2064                                  ; 05/06/2023
  2065 000002A3 FFFF                    SemiPermCom:	dw      -1	; MSDOS 6.0 COMMAND.COM 
  2066                                  				; true => semi-permanent command (/K)
  2067 000002A5 0000                    SingleCom:	dw	0	; true => single command version
  2068 000002A7 FFFF                    VerVal:		dw	-1
  2069 000002A9 00                      fFail:		db	0	; true => fail all int 24s
  2070 000002AA 00                      IfFlag:		db	0	; true => IF statement in progress
  2071                                  
  2072 000002AB 00                      ForFlag: 	db	0	; true => FOR statement in progress
  2073 000002AC 0000                    ForPtr:		dw	0
  2074                                  
  2075 000002AE 0000                    Nest:		dw	0	; nested batch file counter
  2076 000002B0 00                      Call_Flag:	db	0	; no CALL (batch command) in progress
  2077 000002B1 00                      Call_Batch_Flag: db	0
  2078 000002B2 0000                    Next_Batch:	dw	0	; address of next batch segment
  2079 000002B4 00                      NullFlag:	db	0	; flag if no command on command line
  2080 000002B5 00<rep 5h>              FUCase_Addr:	times 5 db 0 ; db 5 dup (0)
  2081                                  				; buffer for file ucase address
  2082                                  ; Bugbug: don't need crit_msg_ anymore?
  2083                                  
  2084                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
  2085                                  %if 0
  2086                                  Crit_Msg_Off:	dw	0	; saved critical error message offset
  2087                                  Crit_Msg_Seg:	dw	0	; saved critical error message segment
  2088                                  %endif
  2089                                  
  2090 000002BA 0000                    Dbcs_Vector_Addr: dw	0	; DBCS vector offset
  2091 000002BC 0000                    		 dw	0	; DBCS vector segment
  2092 000002BE 0000                    Append_State:	dw	0	; current state of append
  2093                                  				;  (if Append_Flag is set)
  2094 000002C0 00                      Append_Flag:	db	0	; set if append state is valid
  2095 000002C1 00                      Re_Out_App:	db	0
  2096 000002C2 00<rep 50h>             Re_OutStr:	times 64+3+13 db 0 ; db 64+3+13 dup (?)
  2097                                  
  2098                                  ; We flag the state of COMMAND in order to correctly handle the ^Cs at
  2099                                  ; various times. Here is the breakdown:
  2100                                  ;
  2101                                  ;   INITINIT	We are in the init code.
  2102                                  ;   INITSPECIAL We are in the date/time prompt
  2103                                  ;   INITCTRLC	We are handling a ^C already.
  2104                                  ;
  2105                                  ; If we get a ^C in the initialization but not in the date/time prompt, we
  2106                                  ; ignore the ^C. This is so the system calls work on nested commands.
  2107                                  ;
  2108                                  ; If we are in the date/time prompt at initialization, we stuff the user's
  2109                                  ; input buffer with a CR to pretend an empty response.
  2110                                  ;
  2111                                  ; If we are already handling a ^C, we set the carry bit and return to the user
  2112                                  ; (ourselves). We can then detect the carry set and properly retry the
  2113                                  ; operation.
  2114                                  
  2115                                  InitFlag:	;db	1
  2116 00000312 01                      		db	INITINIT
  2117                                  
  2118                                  ; Note: these two bytes are referenced as a word
  2119 00000313 00                      PipeFlag:	db	0
  2120 00000314 00                      PipeFiles:	db	0
  2121                                  
  2122                                  ; (rdata.asm, msdos 6.0, 1992)
  2123                                  ; ----------------------------------------------------------------------------
  2124                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:0320h (DATARES:0320h)
  2125                                  
  2126                                  ;;SR
  2127                                  ;; Pipe1 & Pipe2 now need to store full-fledged pathnames
  2128                                  ;;
  2129                                  ;
  2130                                  ;; Bugbug: can we find any way around maintaining these
  2131                                  ;; large buffers?
  2132                                  ;
  2133                                  ;Pipe1		db	67+12 dup (?)
  2134                                  ;Pipe2		db	67+12 dup (?)
  2135                                  ;
  2136                                  ;PipePtr 	dw	?
  2137                                  ;
  2138                                  ;PipeStr 	db	129 dup (?)
  2139                                  ;
  2140                                  ;EndPipe	label	byte	; marks end of buffers; M004
  2141                                  ;
  2142                                  ;;SR;
  2143                                  ;; We can move our EndInit code into above buffers. This way, the code will
  2144                                  ;;automatically be discarded after init.
  2145                                  ;;
  2146                                  ;; M004; We overlap our code with the Pipe buffers located above by changing
  2147                                  ;; M004; the origin.
  2148                                  ;;
  2149                                  ;	ORG	Pipe1	; M004
  2150                                  ;
  2151                                  ;; Bugbug: really need a procedure header for EndInit, describing
  2152                                  ;; what it expects, what it does.
  2153                                  ;
  2154                                  
  2155                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2156                                  
  2157                                  Pipe1	equ	EndInit
  2158                                  Pipe2	equ	Pipe1+67+12
  2159                                  PipePtr	equ	Pipe2+67+12
  2160                                  PipeStr	equ	PipePtr+2
  2161                                  EndPipe	equ	PipeStr+129	; EndInit+289
  2162                                  
  2163                                  ; Bugbug: really need a procedure header for EndInit, describing
  2164                                  ; what it expects, what it does.
  2165                                  
  2166                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0320h
  2167                                  
  2168                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (compatible with MSDOS 6.22)
  2169                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:03EAh 
  2170                                  
  2171                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  2172                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:041Eh
  2173                                  
  2174                                  EndInit:
  2175 00000315 1E                      	push	ds
  2176 00000316 06                      	push	es		; save segments
  2177                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM (ds=cs=RESGROUP)
  2178                                  	;push	cs
  2179                                  	;pop	ds		
  2180                                  	;assume	ds:RESGROUP
  2181                                  
  2182                                  ; M004; Save size of transient here before INIT segment is deallocated
  2183                                  
  2184 00000317 8B16[9720]              	mov	dx,[TrnSize]		; M004
  2185                                  ;M027
  2186                                  ; These variables are also defined in the INIT segment and need to be saved
  2187                                  ;before we resize
  2188                                  ;
  2189 0000031B A1[8B20]                	mov	ax,[OldEnv]	; Old Environment seg ;M027
  2190 0000031E 8B1E[8720]              	mov	bx,[EnvSiz]	; Size of new environment ;M027
  2191 00000322 8B0E[8D20]              	mov	cx,[UsedEnv]	; Size of old environment ;M027
  2192 00000326 50                      	push	ax		; Save all these values ;M027
  2193 00000327 53                      	push	bx		; M027
  2194 00000328 51                      	push	cx		; M027
  2195                                  
  2196                                  
  2197                                  ; Bugbug: push ds, pop es here.
  2198                                  	;mov	bx,ds
  2199                                  	;mov	es,bx		; es = RESGROUP
  2200                                  	; 09/01/2023
  2201 00000329 1E                      	push	ds
  2202 0000032A 07                      	pop	es
  2203                                  
  2204                                  ;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  2205                                  ; code + data for low COMMAND
  2206                                  
  2207 0000032B 8B1E[B404]              	mov	bx,[ResSize]	; Total size of resident
  2208 0000032F B44A                    	mov	ah,4Ah	; SETBLOCK
  2209                                  
  2210                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2211                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:043Ah
  2212                                  %if 1
  2213 00000331 803E[0E04]02            	cmp	byte [COMMAND_HIGH],2
  2214 00000336 7517                    	jne	short set_block
  2215                                  
  2216 00000338 31DB                    	xor	bx,bx		; low memory first
  2217 0000033A B80158                  	mov	ax,5801h	; set allocation strategy
  2218 0000033D CD21                    	int     21h     ; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  2219                                  			; AL = function code: set allocation strategy
  2220 0000033F 8B0E7E00                	mov	cx,[7Eh]	; environment segment
  2221 00000343 E308                    	jcxz	skip_dealloc_env_seg
  2222 00000345 06                      	push	es
  2223 00000346 8EC1                    	mov	es,cx
  2224 00000348 B449                    	mov	ah,49h
  2225 0000034A CD21                    	int	21h 	; DOS - 2+ - FREE MEMORY
  2226                                  			; ES = segment address of area to be freed
  2227 0000034C 07                      	pop     es
  2228                                  skip_dealloc_env_seg:
  2229 0000034D B449                    	mov	ah,49h	; DEALLOC
  2230                                  set_block:	
  2231                                  %endif
  2232                                  	;mov	ah,SETBLOCK
  2233 0000034F CD21                    	int	21h		; Set block to resident size
  2234                                  
  2235                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  2236                                  		; ES = segment address of block to change
  2237                                  		; BX = new size in paragraphs
  2238                                  
  2239                                  ;We check if this is for autoexec.bat (PermCom = 1). If so, we then
  2240                                  ;allocate a new batch segment, copy the old one into new batchseg and free
  2241                                  ;the old batchseg. Remember that the old batchseg was allocated on top of the
  2242                                  ;transient and we will leave a big hole if TSRs are loaded by autoexec.bat
  2243                                  ;
  2244                                  ; Bugbug: also describe why we alloc & copy batch seg BEFORE environment.
  2245                                  	
  2246 00000351 803E[A202]01            	cmp	byte [PermCom],1 ; permanent command.com?
  2247 00000356 7530                    	jne	short adjust_env ; no, do not free batchseg
  2248                                  
  2249 00000358 833E[4902]00            	cmp	word [Batch],0	 ; was there a valid batchseg?
  2250 0000035D 7429                    	je	short adjust_env ; no, dont juggle
  2251                                  
  2252                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0Fh)/16 ; batchseg size
  2253                                  	; 21/01/2023
  2254 0000035F BB0400                  	mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  2255                                  	;mov	bx,4	; 09/01/2023
  2256                                  			; (MSDOS 5.0 COMMAND COM RESGROUP:0350h)
  2257 00000362 B448                    	mov	ah,48h
  2258                                  	;mov	ah,ALLOC
  2259 00000364 CD21                    	int	21h
  2260                                  
  2261                                  		; DOS - 2+ - ALLOCATE MEMORY
  2262                                  		; BX = number of 16-byte paragraphs desired
  2263                                  
  2264                                  ; Bugbug: I just had a thought. If DOS or SHARE or somebody leaves
  2265                                  ; a hole, the batch segment COULD already be in the ideal place. We
  2266                                  ; could be making it worse! We're second-guessing where memory
  2267                                  ; allocations go, which might not be such a great idea. Is there
  2268                                  ; a strategy, short of doing something even worse like diddling
  2269                                  ; arena headers, where we can minimize the possibility of fragmentation
  2270                                  ; under all cases? Hmm..
  2271                                  	
  2272 00000366 7220                    	jc	short adjust_env ; no memory, use old batchseg
  2273                                  
  2274 00000368 8EC0                    	mov	es,ax		 ; es = New batch segment
  2275 0000036A 31FF                    	xor	di,di
  2276 0000036C 31F6                    	xor	si,si
  2277                                  
  2278 0000036E 1E                      	push	ds
  2279 0000036F 8E1E[4902]              	mov	ds,[Batch]	 ; ds = Old Batch Segment
  2280                                  	;assume	ds:nothing
  2281                                  	;mov	cx,SIZE BatchSegment
  2282                                  	; 23/01/2023
  2283                                  	;mov	cx,BATCHSEGMENT.SIZE
  2284                                  	;;mov	cx,33	; 09/01/2023
  2285                                  	;		; (MSDOS 5.0 COMMAND COM RESGROUP:0364h)
  2286                                  	;
  2287                                  	;add	cx,16		 ; for the filename
  2288                                  	; 20/04/2023
  2289 00000373 B93100                  	mov	cx,BATCHSEGMENT.SIZE+16
  2290                                  
  2291                                  	; Bugbug: 16? Shouldn't this be a common equate or something?
  2292                                  	; It's sure be bad if we copied more bytes than the batch segment
  2293                                  	; holds!
  2294                                  	
  2295 00000376 FC                      	cld
  2296 00000377 F3A4                    	rep	movsb
  2297 00000379 1F                      	pop	ds
  2298                                  	;assume	ds:RESGROUP
  2299                                  
  2300 0000037A 8CC1                    	mov	cx,es		; save new batch segment 
  2301 0000037C 8E06[4902]              	mov	es,[Batch]
  2302 00000380 B449                    	mov	ah,49h
  2303                                  	;mov	ah,DEALLOC
  2304 00000382 CD21                    	int	21h		; free the old batch segment
  2305                                  
  2306                                  	; Bugbug: should we check for error?
  2307                                  
  2308 00000384 890E[4902]              	mov	[Batch],cx	; store new batch segment address
  2309                                  
  2310                                  adjust_env:
  2311                                  
  2312                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2313                                  ; PCDOS 7.1 COMMAND.COM
  2314                                  %if 1
  2315 00000388 BB8000                  	mov     bx,80h		; first fit, try high then low memory
  2316 0000038B B80158                  	mov     ax,5801h
  2317 0000038E CD21                    	int     21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  2318                                  			; AL = function code: set allocation strategy
  2319                                  %endif
  2320 00000390 59                      	pop	cx		; cx = size of old env ;M027
  2321 00000391 5B                      	pop	bx		; bx = size of new env needed ;M027
  2322 00000392 5D                      	pop	bp		; bp = old env seg ;M027
  2323                                  
  2324                                  ;Allocate the correct size for the environment
  2325                                  
  2326 00000393 B448                    	mov	ah,48h
  2327                                  	;mov	ah,ALLOC
  2328 00000395 CD21                    	int	21h		; get memory
  2329 00000397 7272                    	jc	short nomem_err	; out of memory,signal error
  2330                                  	
  2331                                  	; Bugbug: why not continue, leaving environment where it is?
  2332                                  
  2333 00000399 A3[3A04]                	mov	[EnvirSeg],ax	; Store new environment segment
  2334                                  	;;mov	[ds:2Ch],ax
  2335                                  	;mov	[2Ch],ax
  2336                                  	;mov	[PDB_Environ],ax ; Put new env seg in PSP
  2337 0000039C A32C00                  	mov	[PDB.ENVIRON],ax
  2338 0000039F 8EC0                    	mov	es,ax		; es = address of allocated memory
  2339                                  	;assume	es:nothing
  2340                                  
  2341                                  ;Copy the environment to the newly allocated segment
  2342                                  
  2343 000003A1 1E                      	push	ds
  2344 000003A2 8EDD                    	mov	ds,bp		; ds = Old environment segment
  2345                                  	;assume	ds:nothing
  2346                                  
  2347 000003A4 31F6                    	xor	si,si
  2348 000003A6 89F7                    	mov	di,si		; Start transfer from 0
  2349                                  
  2350 000003A8 FC                      	cld
  2351 000003A9 F3A4                    	rep	movsb		; Do the copy
  2352                                  
  2353 000003AB 1F                      	pop	ds		; ds = RESGROUP
  2354                                  	;assume	ds:RESGROUP
  2355                                  
  2356                                  ; We have to free the old environment block if it was allocated by INIT
  2357                                  
  2358                                  ; Bugbug: is this only for the case when we were NOT passed an environment,
  2359                                  ; or does it also apply to passed environments?
  2360                                  
  2361                                  ;M036
  2362                                  ; Free up old env segment always because this is a copy passed by Exec and
  2363                                  ; takes up memory that is never used
  2364                                  
  2365                                  ;M044
  2366                                  ; Go back to the old strategy of not freeing the environment. Freeing it leaves
  2367                                  ; a hole behind that Ventura does not like. Basically, Ventura gives strange
  2368                                  ; errors if it gets a memory alloc that it is below its load segment. The
  2369                                  ; freed environment creates a large enough hole for some of its allocs to fit
  2370                                  ; in
  2371                                  
  2372                                  	;cmp	byte [AllocedEnv],0 ; has env been allocated by INIT?
  2373                                          ;je	short no_free	    ; no, do not free it
  2374                                  	; 21/01/2023
  2375                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0398h
  2376 000003AC 803E[5920]00            	cmp	byte [AllocedEnv],0 ; flag - old environment segment
  2377 000003B1 7506                    	jne	short no_free
  2378                                  
  2379 000003B3 8EC5                    	mov	es,bp
  2380 000003B5 B449                    	mov	ah,49h
  2381                                  	;mov	ah,DEALLOC
  2382 000003B7 CD21                    	int	21h		    ; Free it
  2383                                  no_free:
  2384                                  
  2385                                  ; M004; Start of changes
  2386                                  
  2387                                  ; Move the transient now. We will allocate the biggest block available
  2388                                  ; now and move the transient to the top of the block. We will then
  2389                                  ; deallocate this block. When the resident starts executing, it will
  2390                                  ; hopefully allocate this block again and find the transient intact.
  2391                                  
  2392                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2393                                  ; PCDOS 7.1 COMMAND.COM
  2394                                  %if 1
  2395 000003B9 31DB                    	xor	bx,bx	; low memory first fit
  2396 000003BB B80158                  	mov	ax,5801h
  2397 000003BE CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  2398                                  			; AL = function code: set allocation strategy
  2399 000003C0 31DB                    	xor	bx,bx	; remove UMBs from DOS memory chain
  2400 000003C2 B80358                  	mov	ax,5803h ; set UMB link state
  2401 000003C5 CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  2402                                  			; AL = function code: (DOS 5beta) set UMB link state
  2403                                  %endif
  2404 000003C7 C606[9102]01            	mov	byte [TrnMvFlg],1 ; Indicate that transient has been moved
  2405 000003CC 06                      	push	es
  2406                                  	;;mov	si,offset ResGroup:TranStart
  2407                                  	; 09/01/2023
  2408                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM RESGROUP:03ABh
  2409                                  	; 05/06/2023
  2410                                  	;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM RESGROUP:0475h
  2411                                  	; 19/07/2024
  2412                                  	;mov	si,2890h	; PCDOS 7.1 COMMAND.COM RESGROUP:04DDh
  2413 000003CD BEE027                  	mov	si,TRANSTART	; (End of the resident portion)
  2414                                  	;mov	di,0
  2415 000003D0 31FF                    	xor	di,di ; 0
  2416                                  	;;mov	cx,offset TranGroup:TranSpaceEnd ; size to move
  2417                                  	;mov	cx,98C5h
  2418                                  	; 05/06/2023 - MSDOS 6.22 COMMAND.COM RESGROUP:047Bh
  2419                                  	;mov	cx,0AF95h	; TRANSIENT portion size
  2420                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  2421                                  	;mov	cx,0AA9Ah
  2422 000003D2 B97BA6                  	mov	cx,TRANSPACEEND
  2423                                  	
  2424                                  ; Find the largest block available
  2425                                  
  2426 000003D5 BBFFFF                  	mov	bx,0FFFFh
  2427 000003D8 B448                    	mov	ah,48h
  2428                                  	;mov	ah,ALLOC
  2429 000003DA CD21                    	int	21h
  2430                                  
  2431                                  ; dx = size of transient saved previously 
  2432                                  
  2433 000003DC 39D3                    	cmp	bx,dx		; enough memory?
  2434 000003DE 722B                    	jb	short nomem_err	; not enough memory for transient
  2435                                  
  2436 000003E0 B448                    	mov	ah,48h
  2437                                  	;mov	ah,ALLOC
  2438 000003E2 CD21                    	int	21h		; get the largest block
  2439 000003E4 7225                    	jc	short nomem_err	; something is really screwed up
  2440                                  
  2441 000003E6 50                      	push	ax		; save memory address
  2442 000003E7 01D8                    	add	ax,bx		; ax = top of my memory block
  2443 000003E9 29D0                    	sub	ax,dx		; less size of transient
  2444 000003EB A3[8F02]                	mov	[TrnSeg],ax	; save transient segment
  2445 000003EE 8EC0                    	mov	es,ax		;
  2446 000003F0 58                      	pop	ax		; restore our seg addr
  2447                                  
  2448                                  ; Everything is set for a move. We need to move in the reverse direction to
  2449                                  ; make sure we dont overwrite ourselves while copying
  2450                                  
  2451 000003F1 01CE                    	add	si,cx
  2452 000003F3 4E                      	dec	si
  2453 000003F4 01CF                    	add	di,cx
  2454 000003F6 4F                      	dec	di
  2455 000003F7 FD                      	std
  2456 000003F8 F3A4                    	rep	movsb
  2457 000003FA FC                      	cld
  2458                                  
  2459                                  ; Now we have to free up this block so that resident can get hold of it
  2460                                  
  2461 000003FB 8EC0                    	mov	es,ax
  2462 000003FD B449                    	mov	ah,49h
  2463                                  	;mov	ah,DEALLOC
  2464 000003FF CD21                    	int	21h		; release the memory block
  2465                                  
  2466                                  ; M004; End of changes
  2467                                  
  2468                                  	;mov	InitFlag,FALSE	; indicate INIT is done
  2469                                  	; 09/01/2023
  2470 00000401 C606[1203]00            	mov	byte [InitFlag],0	
  2471                                  
  2472 00000406 07                      	pop	es
  2473 00000407 1F                      	pop	ds
  2474                                  	;assume	ds:nothing
  2475                                  	
  2476                                  	; Bugbug: did we need to save & restore seg reg's during EndInit?
  2477                                  	
  2478 00000408 E9D5FC                  	jmp	LodCom_Trap	; allocate transient
  2479                                  
  2480                                  nomem_err:
  2481                                  
  2482                                  ;We call the error routine which will never return. It will either exit
  2483                                  ;with an error ( if not the first COMMAND ) or just hang after an error 
  2484                                  ;message ( if first COMMAND )
  2485                                  
  2486 0000040B E9B71B                  	jmp	Alloc_error
  2487                                  
  2488                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2489                                  ; ---------------------------------------
  2490                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:0520h
  2491                                  %if 1
  2492                                  COMMAND_HIGH:
  2493 0000040E 00                      	db	0	; load high status of COMMAND.COM (/H switch)
  2494                                  %endif
  2495                                  ; ---------------------------------------
  2496                                  
  2497                                  ;EndCodeInit:	; label	byte		; M004
  2498                                  
  2499                                  	; 16/04/2023
  2500                                  	EndCodeInit equ $
  2501                                  
  2502                                  ;; M004; Check if the EndInit code will fit into the Pipe buffers above.
  2503                                  ;; M004; If not, we signal an assembly error
  2504                                  ;
  2505                                  ;IF2
  2506                                  ;	IF ($ GT EndPipe)
  2507                                  ;		.err
  2508                                  ;		%out	"ENDINIT CODE TOO BIG"
  2509                                  ;	ENDIF
  2510                                  ;ENDIF
  2511                                  
  2512                                  ;; M004; Set the origin back to what it was at the end of the buffers
  2513                                  ;;
  2514                                  ;		ORG	EndPipe		; M004
  2515                                  
  2516                                  ; 09/01/2023
  2517                                  ; MSDOS 5.0 COMMAND.COM - CODERES:03EDh
  2518                                  ; 05/06/2023
  2519                                  ; MSDOS 6.22 COMMAND.COM - CODERES:04B7h
  2520                                  ;	times 84 db 0	; db (EndPipe-EndCodeInit) dup(0)
  2521                                  
  2522                                  ; 16/04/2023
  2523                                  	FillBytes equ EndPipe - EndCodeInit
  2524                                  
  2525                                  ;%if EndCodeInit<EndPipe ; if (EndCodeInit < (EndInit+289))
  2526                                  ; 16/04/2023
  2527                                  %if FillBytes>0
  2528                                  	;times EndPipe - EndCodeInit db 0
  2529 0000040F 00<rep 27h>             	times FillBytes db 0   
  2530                                  %endif
  2531                                  
  2532                                  ; 09/01/2023 - Retrodos v4.0 (& v4.1)
  2533                                  ; MSDOS 5.0 COMMAND.COM - CODERES:0441h ; EndInit+289 
  2534                                  
  2535                                  ; 05/06/2023 - Retrodos v4.2
  2536                                  ; MSDOS 6.22 COMMAND.COM - CODERES:050Bh ; EndInit+289
  2537                                  
  2538                                  ; 19/07/2024 - Retrodos v5.0 COMMAND.COM
  2539                                  ; PCDOS 7.1 COMMAND.COM - CODERES:053Fh ; EndInit+289
  2540                                  
  2541                                  ;InPipePtr	dw	offset DATARES:Pipe1	; 320h
  2542                                  ;OutPipePtr	dw	offset DATARES:Pipe2	; 36Fh
  2543                                  
  2544 00000436 [1503]                  InPipePtr:	dw	Pipe1 ;; 320h for MSDOS 5.0 COMMAND.COM
  2545                                  			      ; 3EAh for MSDOS 6.22 COMMAND.COM
  2546                                  		 ; 19/07/2024 ; 41Eh for PCDOS 7.1 COMMAND.COM
  2547 00000438 [6403]                  OutPipePtr:	dw	Pipe2 ;; 36Fh for MSDOS 5.0 COMMAND.COM
  2548                                  			      ; 439h for MSDOS 6.22 COMMAND.COM
  2549                                  		 ; 19/07/2024 ; 46Dh for PCDOS 7.1 COMMAND.COM
  2550                                  
  2551                                  Exec_Block:	; label	byte	; the data block for exec calls
  2552 0000043A 0000                    EnvirSeg:	dw	0
  2553                                  Com_Ptr:	; label	dword
  2554 0000043C 8000                    		dw	80h	; point at unformatted parameters
  2555 0000043E 0000                    		dw	0
  2556                                  Com_Fcb1:	; label	dword
  2557 00000440 5C00                    		dw	5Ch
  2558 00000442 0000                    		dw	0
  2559                                  Com_Fcb2:	; label	dword
  2560 00000444 6C00                    		dw	6Ch
  2561 00000446 0000                    		dw	0
  2562                                  
  2563                                  ; variables passed to transient
  2564                                  TranVars:	; label	byte
  2565                                  		;dw	offset DATARES:HeadFix_Trap
  2566 00000448 [F400]                  		dw	HeadFix_Trap
  2567 0000044A 0000                    MySeg:		dw	0	; put our own segment here
  2568 0000044C 0000                    LTpa:		dw	0	; will store tpa segment here
  2569 0000044E 2F                      RSwitChar:	db	"/"
  2570 0000044F 5C                      RDirChar:	db	"\"
  2571                                  		;dw	offset DATARES:Issue_Exec_Call
  2572 00000450 [E701]                  		dw	Issue_Exec_Call
  2573 00000452 0000                    MySeg1:		dw	0
  2574                                  		;dw	offset DATARES:RemCheck_Trap
  2575 00000454 [CC00]                  		dw	RemCheck_Trap
  2576 00000456 0000                    MySeg2:		dw	0
  2577                                  
  2578                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2579                                  ; PCDOS 7.1 COMMAND.COM
  2580                                  %if 0
  2581                                  ResTest: 	dw	0
  2582                                  %endif
  2583                                  
  2584                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:0561h
  2585                                  
  2586 00000458 0000                    Res_Tpa:	dw	0	; original tpa (not rounded to 64k)
  2587                                  
  2588                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
  2589 0000045A 0000                    Y_Flag:		dw	0
  2590                                  
  2591                                  TranVarEnd:	; label	byte
  2592                                  
  2593 0000045C 0000                    OldErrNo:	dw	0
  2594                                  
  2595                                  ;* NOTE: MsgBuffer and SafePathBuffer use the same memory.
  2596                                  ;  MsgBuffer is only used while a command is being executed.
  2597                                  ;  SafePathBuffer is no longer needed, since it is used for
  2598                                  ;  unsuccessful program launches.
  2599                                  
  2600                                  MsgBuffer:	; label	byte	; buffer for messages from disk
  2601                                  SafePathBuffer: ; label	byte	; resident pathname for EXEC
  2602                                  	;Bugbug: Why so big a buffer?
  2603                                  		;db	64+3+13 dup (0)	; path + 'd:\' 'file.ext' + null
  2604 0000045E 00<rep 50h>             		times	64+3+13 db 0		
  2605                                  
  2606                                  LENMSGORPATHBUF	equ $ - MsgBuffer
  2607                                  
  2608 000004AE 00000000                Int2fHandler:	dd	0	; address of next int 2f handler
  2609 000004B2 0000                    ResMsgEnd:	dw	0	; holds offset of msg end (end of resident)
  2610                                  
  2611                                  ;SR;
  2612                                  ; The three vars below have been added for a pure COMMAND.COM
  2613                                  
  2614 000004B4 0000                    ResSize:	dw	0
  2615                                  
  2616                                  ;SR;
  2617                                  ; Moved the stack here from the code segment
  2618                                  ;
  2619                                  ; bugbug: Why this odd stack size? And what should stack size be?
  2620                                  	
  2621                                  		;db	(80h - 3) dup (?)
  2622                                  ;align 2
  2623                                  		;times	124 db 0
  2624                                  		; 19/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:05BFh
  2625 000004B6 00<rep 78h>             		times	120 db 0
  2626                                  
  2627                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2628                                  align 2	
  2629                                  		
  2630                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:053Eh (offset RStack)
  2631                                  ; 05/06/2023
  2632                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:060Ah (offset RStack)
  2633                                  ; 19/07/2024
  2634                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:0637h (offset RStack)
  2635                                  
  2636                                  RStack:		; label	word
  2637 0000052E 0000                    OldDS:		dw	0	; keeps old ds value when jumping to
  2638                                  				; resident code segments
  2639                                  ;LoadHiFlg	db	0	; Flag set to 1 if UMB loading enabled ; M003
  2640                                  
  2641                                  ; include highvar.inc		; Add variables for 6.0 loadhigh functionality
  2642                                  ; -------------------------------
  2643                                  
  2644                                  ; fInHigh  - Is set to 1 during HideUMBs(), and back to zero in UnHideUMBs().
  2645                                  ; fUmbTiny - Is set to 1 if the user has specified /S on the command line.
  2646                                  ; SegLoad  - Segment address for first UMB specified; set automatically.
  2647                                  ; UmbLoad  - The load UMB number; for example, this is 3 if the user has
  2648                                  ;            given a command-line like "/L:3,500;4"
  2649                                  ; UmbUsed  - An array of characters, each of which is 1 iff the UMB
  2650                                  ;            matching its index number was specified on the command-line;
  2651                                  ;            for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
  2652                                  ;            will be set to 1. All others will be set to 0.
  2653                                  ; UmbSize  - An array of words, each of which is interpereted as a size
  2654                                  ;            specified by the user for a UMB (in the above example, all
  2655                                  ;            elements would be zero save UmbSize[3], which would be 500.
  2656                                  ; fm_umb   - Set to the old UMB link-state (0x80 or 0x00)
  2657                                  ; fm_strat - Set to the old memory-allocation strategy (0$00000???)
  2658                                  ; fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
  2659                                  ;            for details).
  2660                                  
  2661                                  ; - MSDOS 6.0 COMMAND.COM -
  2662                                  ;; To keep track of which UMBs were specified on the DH/LH command lines, and
  2663                                  ;; to keep track of the minimum sizes given for each, there're two arrays kept
  2664                                  ;; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
  2665                                  ;; big. 16 should be around 14 too many for most users, so there's no expected
  2666                                  ;; space problem (it's just such a nice round number, eh?).
  2667                                  
  2668                                  ; 05/06/2023
  2669                                  MAXUMB	equ	16
  2670                                  
  2671                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2672                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0540h (DATARES:0540h)
  2673                                  
  2674 00000530 00                      fInHigh:	db	0
  2675                                  
  2676                                  ; MSDOS 6.0 COMMAND.COM
  2677                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2678                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:060Dh (DATARES:060Dh)
  2679                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2680                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:063Ah (DATARES:063Ah)
  2681                                  
  2682 00000531 00                      fUmbTiny:	db	0
  2683 00000532 0000                    SegLoad:	dw	0
  2684 00000534 00                      UmbLoad:	db	0
  2685                                  
  2686                                  ; 19/07/2024
  2687                                  ; PCDOS 7.1 COMMAND.COM
  2688                                  %if 0
  2689                                  UmbUsed:	times MAXUMB db 0 ; db MAXUMB dup (?)
  2690                                  UmbSize:	times MAXUMB dw 0 ; dw MAXUMB dup (?)
  2691                                  %else
  2692                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2693                                  	UmbUsed equ MsgBuffer	; 16 bytes
  2694                                  	UmbSize equ UmbUsed+MAXUMB ; UmbUsed+16; 16 words
  2695                                  %endif
  2696                                  
  2697 00000535 00                      fm_umb:		db	0
  2698 00000536 00                      fm_strat:	db	0
  2699 00000537 00                      fm_argc:	db	0
  2700                                  
  2701                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
  2702                                  ; UmbLoad is set to the UMB number given.
  2703                                  
  2704                                  ;*** MESSAGES
  2705                                  ;    and other translatable text
  2706                                  
  2707                                  ; include comrmsg.inc	; M00
  2708                                  ; ------------------------------
  2709                                  
  2710                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2711                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0541h (DATARES:0541h)
  2712                                  
  2713                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  2714                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0644h (DATARES:0644h)
  2715                                  
  2716                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  2717                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0641h (DATARES:0641h)
  2718                                  
  2719 00000538 41                      ABORT_CHAR:	db 'A'
  2720 00000539 52                      RETRY_CHAR:	db 'R'
  2721 0000053A 49                      IGNORE_CHAR:	db 'I'
  2722 0000053B 46                      FAIL_CHAR:	db 'F'
  2723 0000053C 59                      YES_CHAR:	db 'Y'
  2724 0000053D 4E                      NO_CHAR:	db 'N'
  2725 0000053E 05                      REQ_ABORT:	db 5
  2726 0000053F 41626F7274              		db 'Abort'
  2727 00000544 07                      REQ_RETRY:	db 7
  2728 00000545 2C205265747279          		db ', Retry'
  2729 0000054C 08                      REQ_IGNORE:	db 8
  2730 0000054D 2C2049676E6F7265        		db ', Ignore'
  2731 00000555 06                      REQ_FAIL:	db 6
  2732 00000556 2C204661696C            		db ', Fail'
  2733 0000055C 01                      REQ_END:	db 1
  2734 0000055D 3F                      		db '?'
  2735 0000055E 08                      MREAD:		db 8
  2736 0000055F 72656164696E6700        		db 'reading', 0
  2737 00000567 08                      MWRITE:		db 8
  2738 00000568 77726974696E6700        		db 'writing', 0
  2739 00000570 0E                      MDRIVE:		db 14
  2740 00000571 202531206472697665-     		db ' %1 drive %2',0Dh,0Ah
  2740 0000057A 2025320D0A         
  2741 0000057F 0F                      MDEVICE:	db 15
  2742 00000580 202531206465766963-     		db ' %1 device %2',0Dh,0Ah
  2742 00000589 652025320D0A       
  2743 0000058F 26                      MVOLSERIAL:	db 38
  2744 00000590 506C6561736520696E-     		db 'Please insert volume %1 serial %2-%3',0Dh,0Ah
  2744 00000599 7365727420766F6C75-
  2744 000005A2 6D6520253120736572-
  2744 000005AB 69616C2025322D2533-
  2744 000005B4 0D0A               
  2745 000005B6 25                      BADFATMSG:	db 37
  2746 000005B7 46696C6520616C6C6F-     		db 'File allocation table bad, drive %1',0Dh,0Ah
  2746 000005C0 636174696F6E207461-
  2746 000005C9 626C65206261642C20-
  2746 000005D2 64726976652025310D-
  2746 000005DB 0A                 
  2747 000005DC 15                      COMBAD:		db 21
  2748 000005DD 496E76616C69642043-     		db 'Invalid COMMAND.COM',0Dh,0Ah
  2748 000005E6 4F4D4D414E442E434F-
  2748 000005EF 4D0D0A             
  2749 000005F2 21                      PUTBACKMSG:	db 33
  2750 000005F3 496E73657274206469-     		db 'Insert disk with %1 in drive %2',0Dh,0Ah
  2750 000005FC 736B20776974682025-
  2750 00000605 3120696E2064726976-
  2750 0000060E 652025320D0A       
  2751 00000614 21                      PROMPT:		db 33
  2752 00000615 507265737320616E79-     		db 'Press any key to continue . . .',0Dh,0Ah
  2752 0000061E 206B657920746F2063-
  2752 00000627 6F6E74696E7565202E-
  2752 00000630 202E202E0D0A       
  2753 00000636 1C                      ENDBATMES:	db 28
  2754 00000637 0D0A                    		db 0Dh,0Ah
  2755 00000639 5465726D696E617465-     		db 'Terminate batch job (Y/N)?'
  2755 00000642 206261746368206A6F-
  2755 0000064B 622028592F4E293F   
  2756 00000653 13                      EXECEMES:	db 19
  2757 00000654 43616E6E6F74206578-     		db 'Cannot execute %1',0Dh,0Ah
  2757 0000065D 65637574652025310D-
  2757 00000666 0A                 
  2758 00000667 13                      EXEBAD:		db 19
  2759 00000668 4572726F7220696E20-     		db 'Error in EXE file',0Dh,0Ah
  2759 00000671 4558452066696C650D-
  2759 0000067A 0A                 
  2760 0000067B 22                      TOOBIG:		db 34
  2761 0000067C 50726F6772616D2074-     		db 'Program too big to fit in memory',0Dh,0Ah
  2761 00000685 6F6F2062696720746F-
  2761 0000068E 2066697420696E206D-
  2761 00000697 656D6F72790D0A     
  2762 0000069E 16                      NOHANDMES:	db 22
  2763 0000069F 0D0A                    		db 0Dh,0Ah
  2764 000006A1 4E6F20667265652066-     		db 'No free file handles'
  2764 000006AA 696C652068616E646C-
  2764 000006B3 6573               
  2765 000006B5 1A                      RBADNAM:	db 26
  2766 000006B6 42616420436F6D6D61-     		db 'Bad Command or file name',0Dh,0Ah
  2766 000006BF 6E64206F722066696C-
  2766 000006C8 65206E616D650D0A   
  2767                                  ACCDENIED:	; 14/01/2023
  2768                                  		; 10/01/2023
  2769                                  ACCDEN:		;db 14
  2770                                  		;db 'Access denied '
  2771                                  		; 19/07/2024 - PCDOS 7.1
  2772 000006D0 0D                      		db 13
  2773 000006D1 416363657373206465-     		db 'Access denied'
  2773 000006DA 6E696564           
  2774 000006DE 19                      BMEMMES:	db 25
  2775 000006DF 0D0A4D656D6F727920-     		db 0Dh,0Ah,'Memory allocation error'
  2775 000006E8 616C6C6F636174696F-
  2775 000006F1 6E206572726F72     
  2776 000006F8 26                      HALTMES:	db 38
  2777 000006F9 0D0A                    		db 0Dh,0Ah
  2778 000006FB 43616E6E6F74206C6F-     		db 'Cannot load COMMAND, system halted',0Dh,0Ah
  2778 00000704 616420434F4D4D414E-
  2778 0000070D 442C2073797374656D-
  2778 00000716 2068616C7465640D0A 
  2779 0000071F 21                      FRETMES:	db 33
  2780 00000720 0D0A                    		db 0Dh,0Ah,
  2781 00000722 43616E6E6F74207374-     		db 'Cannot start COMMAND, exiting',0Dh,0Ah
  2781 0000072B 61727420434F4D4D41-
  2781 00000734 4E442C206578697469-
  2781 0000073D 6E670D0A           
  2782                                  ; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  2783                                  %if 0
  2784                                  ;%if 1  ; 20/07/2024 - Retro DOS v5.1 COMMAND.COM
  2785                                  PATRICIDE:	db 46
  2786                                  		db 0Dh,0Ah
  2787                                  		db 'Top level process aborted, cannot continue'
  2788                                  		db 0Dh,0Ah
  2789                                  %endif
  2790 00000741 02                      NEWLINE:	db 2
  2791 00000742 0D0A                    		db 0Dh, 0Ah
  2792                                  
  2793                                  ; 10/01/2023
  2794                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:077Dh
  2795                                  ; 05/06/2023
  2796                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0880h
  2797                                  
  2798                                  ; 19/07/2024
  2799                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0832h
  2800                                  
  2801 00000744 [280C]                  MsgPtrLists:	dw EXTMSGPTRS		; extended error messages
  2802 00000746 0100                    		dw 1
  2803 00000748 [E309]                  		dw PARSMSGPTRS		; parse	error messages
  2804 0000074A 0100                    		dw 1
  2805 0000074C [280C]                  		dw EXTMSGPTRS		; critical error messages
  2806 0000074E 0100                    		dw 1
  2807 00000750 0000                    		dw 0			; File system error messages
  2808 00000752 0000                    		dw 0			; are not supported.
  2809 00000754 [EA00]                  		dw MsgRetrv_Trap	; disk retriever routine
  2810 00000756 0000                    MySeg3:		dw 0			; segment of retriever routine
  2811                                  
  2812                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0791h
  2813                                  ; 05/06/2023
  2814                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0894h
  2815                                  
  2816                                  ; 19/07/2024
  2817                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0846h
  2818                                  
  2819 00000758 13                      CRMSG0:		db 19
  2820 00000759 57726974652070726F-     		db 'Write protect error'
  2820 00000762 74656374206572726F-
  2820 0000076B 72                 
  2821 0000076C 0C                      CRMSG1:		db 12
  2822 0000076D 496E76616C69642075-     		db 'Invalid unit'
  2822 00000776 6E6974             
  2823 00000779 09                      CRMSG2:		db 9
  2824 0000077A 4E6F74207265616479      		db 'Not ready'
  2825 00000783 16                      CRMSG3:		db 22
  2826 00000784 496E76616C69642064-     		db 'Invalid device request'
  2826 0000078D 657669636520726571-
  2826 00000796 75657374           
  2827 0000079A 0A                      CRMSG4:		db 10
  2828 0000079B 44617461206572726F-     		db 'Data error'
  2828 000007A4 72                 
  2829 000007A5 21                      CRMSG5:		db 33
  2830 000007A6 496E76616C69642064-     		db 'Invalid device request parameters'
  2830 000007AF 657669636520726571-
  2830 000007B8 756573742070617261-
  2830 000007C1 6D6574657273       
  2831 000007C7 0A                      CRMSG6:		db 10
  2832 000007C8 5365656B206572726F-     		db 'Seek error'
  2832 000007D1 72                 
  2833 000007D2 12                      CRMSG7:		db 18
  2834 000007D3 496E76616C6964206D-     		db 'Invalid media type'
  2834 000007DC 656469612074797065 
  2835 000007E5 10                      CRMSG8:		db 16
  2836 000007E6 536563746F72206E6F-     		db 'Sector not found'
  2836 000007EF 7420666F756E64     
  2837 000007F6 1A                      CRMSG9:		db 26
  2838 000007F7 5072696E746572206F-     		db 'Printer out of paper error'
  2838 00000800 7574206F6620706170-
  2838 00000809 6572206572726F72   
  2839 00000811 11                      CRMSG10:	db 17
  2840 00000812 577269746520666175-     		db 'Write fault error'
  2840 0000081B 6C74206572726F72   
  2841 00000823 10                      CRMSG11:	db 16
  2842 00000824 52656164206661756C-     		db 'Read fault error'
  2842 0000082D 74206572726F72     
  2843 00000834 0F                      CRMSG12:	db 15
  2844 00000835 47656E6572616C2066-     		db 'General failure'
  2844 0000083E 61696C757265       
  2845 00000844 11                      CRMSG13:	db 17
  2846 00000845 53686172696E672076-     		db 'Sharing violation'
  2846 0000084E 696F6C6174696F6E   
  2847 00000856 0E                      CRMSG14:	db 14
  2848 00000857 4C6F636B2076696F6C-     		db 'Lock violation'
  2848 00000860 6174696F6E         
  2849 00000865 13                      CRMSG15:	db 19
  2850 00000866 496E76616C69642064-     		db 'Invalid disk change'
  2850 0000086F 69736B206368616E67-
  2850 00000878 65                 
  2851 00000879 0F                      CRMSG16:	db 15
  2852 0000087A 46434220756E617661-     		db 'FCB unavailable'
  2852 00000883 696C61626C65       
  2853 00000889 19                      CRMSG17:	db 25
  2854 0000088A 53797374656D207265-     		db 'System resource exhausted'
  2854 00000893 736F75726365206578-
  2854 0000089C 68617573746564     
  2855 000008A3 12                      CRMSG18:	db 18
  2856 000008A4 436F64652070616765-     		db 'Code page mismatch'
  2856 000008AD 206D69736D61746368 
  2857 000008B6 0C                      CRMSG19:	db 12
  2858 000008B7 4F7574206F6620696E-     		db 'Out of input'
  2858 000008C0 707574             
  2859 000008C3 17                      CRMSG20:	db 23
  2860 000008C4 496E73756666696369-     		db 'Insufficient disk space'
  2860 000008CD 656E74206469736B20-
  2860 000008D6 7370616365         
  2861                                  
  2862                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0914h
  2863                                  ; 05/06/2023
  2864                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0A17h
  2865                                  
  2866                                  ; 19/07/2024
  2867                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:09C9h
  2868                                  
  2869 000008DB [5807]                  CRITMSGPTRS:	dw CRMSG0
  2870 000008DD [6C07]                  		dw CRMSG1
  2871 000008DF [7907]                  		dw CRMSG2
  2872 000008E1 [8307]                  		dw CRMSG3
  2873 000008E3 [9A07]                  		dw CRMSG4
  2874 000008E5 [A507]                  		dw CRMSG5
  2875 000008E7 [C707]                  		dw CRMSG6
  2876 000008E9 [D207]                  		dw CRMSG7
  2877 000008EB [E507]                  		dw CRMSG8
  2878 000008ED [F607]                  		dw CRMSG9
  2879 000008EF [1108]                  		dw CRMSG10
  2880 000008F1 [2308]                  		dw CRMSG11
  2881 000008F3 [3408]                  		dw CRMSG12
  2882 000008F5 [4408]                  		dw CRMSG13
  2883 000008F7 [5608]                  		dw CRMSG14
  2884 000008F9 [6508]                  		dw CRMSG15
  2885 000008FB [7908]                  		dw CRMSG16
  2886 000008FD [8908]                  		dw CRMSG17
  2887 000008FF [A308]                  		dw CRMSG18
  2888 00000901 [B608]                  		dw CRMSG19
  2889 00000903 [C308]                  		dw CRMSG20
  2890                                  
  2891                                  		; 14/01/2023
  2892                                  ;DataresEnd:	;; MSDOS 5.0 COMMAND.COM - DATARES:093Eh (RESGROUP:093Eh)
  2893                                  		; 05/06/2023
  2894                                  DataresEnd:	; MSDOS 6.22 COMMAND.COM - DATARES:0A41h (RESGROUP:0A41h)
  2895                                  
  2896 00000905 13                      PAERRMSG0:	db 19
  2897 00000906 546F6F206D616E7920-     		db 'Too many parameters'
  2897 0000090F 706172616D65746572-
  2897 00000918 73                 
  2898 00000919 1A                      PAERRMSG1:	db 26
  2899 0000091A 526571756972656420-     		db 'Required parameter missing'
  2899 00000923 706172616D65746572-
  2899 0000092C 206D697373696E67   
  2900 00000934 0E                      PAERRMSG2:	db 14
  2901 00000935 496E76616C69642073-     		db 'Invalid switch'
  2901 0000093E 7769746368         
  2902 00000943 0F                      PAERRMSG3:	db 15
  2903 00000944 496E76616C6964206B-     		db 'Invalid keyword'
  2903 0000094D 6579776F7264       
  2904 00000953 01                      PAERRMSG4:	db 1
  2905 00000954 20                      		db 20h
  2906 00000955 24                      PAERRMSG5:	db 36
  2907 00000956 506172616D65746572-     		db 'Parameter value not in allowed range'
  2907 0000095F 2076616C7565206E6F-
  2907 00000968 7420696E20616C6C6F-
  2907 00000971 7765642072616E6765 
  2908                                  PAERRMSG6:	; 10/01/2023
  2909 0000097A 1B                      PAERRMSG7:	db 27
  2910 0000097B 506172616D65746572-     		db 'Parameter value not allowed'
  2910 00000984 2076616C7565206E6F-
  2910 0000098D 7420616C6C6F776564 
  2911                                  ;PAERRMSG7:	db 27
  2912                                  ;		db 'Parameter value not allowed'
  2913 00000996 1C                      PAERRMSG8:	db 28
  2914 00000997 506172616D65746572-     		db 'Parameter format not correct'
  2914 000009A0 20666F726D6174206E-
  2914 000009A9 6F7420636F72726563-
  2914 000009B2 74                 
  2915 000009B3 11                      PAERRMSG9:	db 17
  2916 000009B4 496E76616C69642070-     		db 'Invalid parameter'
  2916 000009BD 6172616D65746572   
  2917 000009C5 1D                      PAERRMSG10:	db 29
  2918 000009C6 496E76616C69642070-     		db 'Invalid parameter combination'
  2918 000009CF 6172616D6574657220-
  2918 000009D8 636F6D62696E617469-
  2918 000009E1 6F6E               
  2919                                  
  2920                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0A38h
  2921                                  ; 05/06/2023
  2922                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0B3Bh
  2923                                  
  2924                                  ; 19/07/2024
  2925                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0AD1h
  2926                                  
  2927 000009E3 [0509]                  PARSMSGPTRS:	dw PAERRMSG0
  2928 000009E5 [1909]                  		dw PAERRMSG1
  2929 000009E7 [3409]                  		dw PAERRMSG2
  2930 000009E9 [4309]                  		dw PAERRMSG3
  2931 000009EB [5309]                  		dw PAERRMSG4
  2932 000009ED [5509]                  		dw PAERRMSG5
  2933 000009EF [7A09]                  		dw PAERRMSG6
  2934 000009F1 [7A09]                  		dw PAERRMSG7
  2935 000009F3 [9609]                  		dw PAERRMSG8
  2936 000009F5 [B309]                  		dw PAERRMSG9
  2937 000009F7 [C509]                  		dw PAERRMSG10
  2938                                  ; 21/04/2023
  2939                                  NUMPARSMSGS equ ($-PARSMSGPTRS)>>1 ; 14/01/2023
  2940                                  
  2941 000009F9 10                      INVLFUNCT:	db 16
  2942 000009FA 496E76616C69642066-     		db 'Invalid function'
  2942 00000A03 756E6374696F6E     
  2943 00000A0A 0E                      FNOTFOUND:	db 14
  2944 00000A0B 46696C65206E6F7420-     		db 'File not found'
  2944 00000A14 666F756E64         
  2945 00000A19 0E                      PNOTFOUND:	db 14
  2946 00000A1A 50617468206E6F7420-     		db 'Path not found'
  2946 00000A23 666F756E64         
  2947 00000A28 13                      TOOMANYOF:	db 19
  2948 00000A29 546F6F206D616E7920-     		db 'Too many open files'
  2948 00000A32 6F70656E2066696C65-
  2948 00000A3B 73                 
  2949                                  ; 14/01/2023
  2950                                  ;ACCDEN:	; 10/01/2023
  2951                                  ;ACCDENIED:	db 14
  2952                                  ;		db 'Access denied '
  2953 00000A3C 0E                      INVHANDLE:	db 14
  2954 00000A3D 496E76616C69642068-     		db 'Invalid handle'
  2954 00000A46 616E646C65         
  2955 00000A4B 1F                      MEMCBDEST:	db 31
  2956 00000A4C 4D656D6F727920636F-     		db 'Memory control blocks destroyed'
  2956 00000A55 6E74726F6C20626C6F-
  2956 00000A5E 636B73206465737472-
  2956 00000A67 6F796564           
  2957 00000A6B 13                      INSUFFMEM:	db 19
  2958 00000A6C 496E73756666696369-     		db 'Insufficient memory'
  2958 00000A75 656E74206D656D6F72-
  2958 00000A7E 79                 
  2959 00000A7F 1C                      INVMEMBLA:	db 28
  2960 00000A80 496E76616C6964206D-     		db 'Invalid memory block address'
  2960 00000A89 656D6F727920626C6F-
  2960 00000A92 636B20616464726573-
  2960 00000A9B 73                 
  2961 00000A9C 13                      INVENVIRO:	db 19
  2962 00000A9D 496E76616C69642045-     		db 'Invalid Environment'
  2962 00000AA6 6E7669726F6E6D656E-
  2962 00000AAF 74                 
  2963 00000AB0 0E                      INVFORMAT:	db 14
  2964 00000AB1 496E76616C69642066-     		db 'Invalid format'
  2964 00000ABA 6F726D6174         
  2965 00000ABF 1A                      INVFNPARM:	db 26
  2966 00000AC0 496E76616C69642066-     		db 'Invalid function parameter'
  2966 00000AC9 756E6374696F6E2070-
  2966 00000AD2 6172616D65746572   
  2967 00000ADA 0C                      INVLDDATA:	db 12
  2968 00000ADB 496E76616C69642064-     		db 'Invalid data'
  2968 00000AE4 617461             
  2969 00000AE7 1B                      INVDRVSPC:	db 27
  2970 00000AE8 496E76616C69642064-     		db 'Invalid drive specification'
  2970 00000AF1 726976652073706563-
  2970 00000AFA 696669636174696F6E 
  2971 00000B03 23                      ATRCURDIR:	db 35
  2972 00000B04 417474656D70742074-     		db 'Attempt to remove current directory'
  2972 00000B0D 6F2072656D6F766520-
  2972 00000B16 63757272656E742064-
  2972 00000B1F 69726563746F7279   
  2973 00000B27 0F                      NOTSAMDEV:	db 15
  2974 00000B28 4E6F742073616D6520-     		db 'Not same device'
  2974 00000B31 646576696365       
  2975 00000B37 0D                      NOMOREFIL:	db 13
  2976 00000B38 4E6F206D6F72652066-     		db 'No more files'
  2976 00000B41 696C6573           
  2977 00000B45 0B                      FILEXISTS:	db 11
  2978 00000B46 46696C652065786973-     		db 'File exists'
  2978 00000B4F 7473               
  2979 00000B51 1B                      CANTMKDIR:	db 27
  2980 00000B52 43616E6E6F74206D61-     		db 'Cannot make directory entry'
  2980 00000B5B 6B6520646972656374-
  2980 00000B64 6F727920656E747279 
  2981 00000B6D 0E                      FAILINT24:	db 14
  2982 00000B6E 4661696C206F6E2049-     		db 'Fail on INT 24'
  2982 00000B77 4E54203234         
  2983 00000B7C 15                      TOOMANYRD:	db 21
  2984 00000B7D 546F6F206D616E7920-     		db 'Too many redirections'
  2984 00000B86 726564697265637469-
  2984 00000B8F 6F6E73             
  2985 00000B92 15                      DUPLREDIR:	db 21
  2986 00000B93 4475706C6963617465-     		db 'Duplicate redirection'
  2986 00000B9C 207265646972656374-
  2986 00000BA5 696F6E             
  2987 00000BA8 10                      INVPASSWD:	db 16
  2988 00000BA9 496E76616C69642070-     		db 'Invalid password'
  2988 00000BB2 617373776F7264     
  2989 00000BB9 11                      INVLDPARM:	db 17
  2990 00000BBA 496E76616C69642070-     		db 'Invalid parameter'
  2990 00000BC3 6172616D65746572   
  2991 00000BCB 12                      NETDATFAU:	db 18
  2992 00000BCC 4E6574776F726B2064-     		db 'Network data fault'
  2992 00000BD5 617461206661756C74 
  2993 00000BDE 21                      FNOSUPNET:	db 33
  2994 00000BDF 46756E6374696F6E20-     		db 'Function not supported by network'
  2994 00000BE8 6E6F7420737570706F-
  2994 00000BF1 72746564206279206E-
  2994 00000BFA 6574776F726B       
  2995 00000C00 27                      RSCNOTINS:	db 39
  2996 00000C01 526571756972656420-     		db 'Required system component not installed'
  2996 00000C0A 73797374656D20636F-
  2996 00000C13 6D706F6E656E74206E-
  2996 00000C1C 6F7420696E7374616C-
  2996 00000C25 6C6564             
  2997                                  
  2998                                  ;; MSDOS 5.0 COMMAND.COM RESGROUP:0C8Ch
  2999                                  ; 05/06/2023
  3000                                  ; MSDOS 6.22 COMMAND.COM RESGROUP:0D8Fh
  3001                                  
  3002                                  ; 19/07/2024
  3003                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0D24h
  3004                                  
  3005 00000C28 [F909]                  EXTMSGPTRS:	dw INVLFUNCT
  3006 00000C2A [0A0A]                  		dw FNOTFOUND
  3007 00000C2C [190A]                  		dw PNOTFOUND
  3008 00000C2E [280A]                  		dw TOOMANYOF
  3009 00000C30 [D006]                  		dw ACCDENIED
  3010 00000C32 [3C0A]                  		dw INVHANDLE
  3011 00000C34 [4B0A]                  		dw MEMCBDEST
  3012 00000C36 [6B0A]                  		dw INSUFFMEM
  3013 00000C38 [7F0A]                  		dw INVMEMBLA
  3014 00000C3A [9C0A]                  		dw INVENVIRO
  3015 00000C3C [B00A]                  		dw INVFORMAT
  3016 00000C3E [BF0A]                  		dw INVFNPARM
  3017 00000C40 [DA0A]                  		dw INVLDDATA
  3018 00000C42 0000                    		dw 0
  3019 00000C44 [E70A]                  		dw INVDRVSPC
  3020 00000C46 [030B]                  		dw ATRCURDIR
  3021 00000C48 [270B]                  		dw NOTSAMDEV
  3022 00000C4A [370B]                  		dw NOMOREFIL
  3023 00000C4C [5807]                  		dw CRMSG0
  3024 00000C4E [6C07]                  		dw CRMSG1
  3025 00000C50 [7907]                  		dw CRMSG2
  3026 00000C52 [8307]                  		dw CRMSG3
  3027 00000C54 [9A07]                  		dw CRMSG4
  3028 00000C56 [A507]                  		dw CRMSG5
  3029 00000C58 [C707]                  		dw CRMSG6
  3030 00000C5A [D207]                  		dw CRMSG7
  3031 00000C5C [E507]                  		dw CRMSG8
  3032 00000C5E [F607]                  		dw CRMSG9
  3033 00000C60 [1108]                  		dw CRMSG10
  3034 00000C62 [2308]                  		dw CRMSG11
  3035 00000C64 [3408]                  		dw CRMSG12
  3036 00000C66 [4408]                  		dw CRMSG13
  3037 00000C68 [5608]                  		dw CRMSG14
  3038 00000C6A [6508]                  		dw CRMSG15
  3039 00000C6C [7908]                  		dw CRMSG16
  3040 00000C6E [8908]                  		dw CRMSG17
  3041 00000C70 [A308]                  		dw CRMSG18
  3042 00000C72 [B608]                  		dw CRMSG19
  3043 00000C74 [C308]                  		dw CRMSG20
  3044 00000C76 0000<rep 28h>           		times 40 dw 0	; db 80 dup(0)
  3045 00000CC6 [450B]                  		dw FILEXISTS
  3046 00000CC8 0000                    		dw 0
  3047 00000CCA [510B]                  		dw CANTMKDIR
  3048 00000CCC [6D0B]                  		dw FAILINT24
  3049 00000CCE [7C0B]                  		dw TOOMANYRD
  3050 00000CD0 [920B]                  		dw DUPLREDIR
  3051 00000CD2 [A80B]                  		dw INVPASSWD
  3052 00000CD4 [B90B]                  		dw INVLDPARM
  3053 00000CD6 [CB0B]                  		dw NETDATFAU
  3054 00000CD8 [DE0B]                  		dw FNOSUPNET
  3055 00000CDA [000C]                  		dw RSCNOTINS
  3056                                  ; ----------------------------------------------------------------------------
  3057                                  	; 17/04/2023
  3058                                  ExtMsgEnd:
  3059                                  
  3060                                  ; 21/04/2023
  3061                                  NUMEXTMSGS equ ($-EXTMSGPTRS)>>1 ; 14/01/2023
  3062                                  
  3063                                  ; ----------------------------------------------------------------------------
  3064                                  ; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  3065                                  %if 1	;  20/07/2024
  3066 00000CDC 2E                      PATRICIDE:	db 46
  3067 00000CDD 0D0A                    		db 0Dh,0Ah
  3068 00000CDF 546F70206C6576656C-     		db 'Top level process aborted, cannot continue'
  3068 00000CE8 2070726F6365737320-
  3068 00000CF1 61626F727465642C20-
  3068 00000CFA 63616E6E6F7420636F-
  3068 00000D03 6E74696E7565       
  3069 00000D09 0D0A                    		db 0Dh,0Ah
  3070                                  %endif
  3071                                  
  3072                                  ; ----------------------------------------------------------------------------
  3073                                  
  3074                                  ; 20/04/2023
  3075                                  
  3076 00000D0B 90<rep 5h>              align 16
  3077                                  
  3078                                  ; ----------------------------------------------------------------------------
  3079                                  
  3080                                  ; 10/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3081                                  ;; MSDOS 5.0 COMMAND.COM - RESGROUP:0D40h (CODERES:0000h)
  3082                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  3083                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:0E50h (CODERES:0000h)
  3084                                  
  3085                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3086                                  ; PCDOS 7.1 COMMAND.COM RESGROUP:0E10h (CODERES:0000h)
  3087                                  
  3088                                  ; ----------------------------------------------------------------------------
  3089                                  ; SEGMENT - CODERES
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  
  3092                                  ; 11/01/2023
  3093                                  RCODE_START:	
  3094                                  
  3095                                  ; ----------------------------------------------------------------------------
  3096                                  ;***	EXEC error handling
  3097                                  ;
  3098                                  ;	COMMAND has issued an EXEC system call and it has returned an error.
  3099                                  ;	We examine the error code and select an appropriate message.
  3100                                  ; --------------------------
  3101                                  ;	Bugbug:	optimize reg usage in following code? Careful of DX!
  3102                                  ;	Condense the error scan?
  3103                                  ;	RBADNAM is checked by transient, no need here?
  3104                                  ;	Move below Ext_Exec.
  3105                                  ; ----------------------------------------------------------------------------
  3106                                  
  3107                                  Exec_Err:
  3108                                  ;SR;
  3109                                  ; ds,es are setup when the transient jumps to Ext_Exec. So segment regs are
  3110                                  ; in order here
  3111                                  
  3112                                  ;	Bugbug:	can we use byte compares here?
  3113                                  ;	Might be able to use byte msg#s, too.
  3114                                  
  3115                                  ;	Store errors in a 3 or 4 byte table. Msg #s in another.
  3116                                  ;	Speed not high priority here.
  3117                                  
  3118                                  ;	Move this to transient.
  3119                                  
  3120                                  	; 10/01/2023
  3121                                  
  3122                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3123                                  ;if 0	; PCDOS 7.1 COMMAND.COM doesn't use 'RBADNAM' error msg here 
  3124                                  %if 1	; Retro DOS v5.0 COMMAND.COM (and MSDOS 6.22 COMMAND.COM)
  3125                                  	;mov	bx,RBADNAM	; offset DATARES:RBadNam
  3126 00000D10 BA[B506]                	mov	dx,RBADNAM
  3127 00000D13 3C02                    	cmp	al,ERROR_FILE_NOT_FOUND ; 2
  3128 00000D15 741B                    	je	short GotExecEMes		; bad command
  3129                                  %endif
  3130                                  	;mov	bx,TOOBIG	; offset DATARES:TooBig
  3131 00000D17 BA[7B06]                	mov	dx,TOOBIG
  3132 00000D1A 3C08                    	cmp	al,ERROR_NOT_ENOUGH_MEMORY ; 8
  3133 00000D1C 7414                    	je	short GotExecEMes		; file not found
  3134                                  	;mov	bx,EXEBAD	; offset DATARES:ExeBad
  3135 00000D1E BA[6706]                	mov	dx,EXEBAD
  3136 00000D21 3C0B                    	cmp	al,ERROR_BAD_FORMAT ; 11 ; 0Bh
  3137 00000D23 740D                    	je	short GotExecEMes		; bad exe file
  3138                                  	;mov	bx,ACCDEN	; offset DATARES:AccDen
  3139 00000D25 BA[D006]                	mov	dx,ACCDEN
  3140 00000D28 3C05                    	cmp	al,ERROR_ACCESS_DENIED ; 5
  3141 00000D2A 7406                    	je	short GotExecEMes		; access denied
  3142                                  
  3143                                  Default_Message:
  3144                                  	;mov	bx,EXECEMES	; offset DATARES:ExecEMes
  3145 00000D2C BA[5306]                	mov	dx,EXECEMES
  3146                                  						; default message
  3147 00000D2F BE[3002]                	mov	si,ExecErrSubst ; offset DATARES:ExecErrSubst
  3148                                  						; get address of subst block
  3149                                  GotExecEMes:
  3150                                  	;mov	dx,bx				; DX = ptr to msg
  3151 00000D32 E8A606                  	call	RPrint ; invoke	RPrint
  3152 00000D35 EB09                    	jmp	short NoExec
  3153                                  
  3154                                  ; ----------------------------------------------------------------------------
  3155                                  ;***	EXEC call
  3156                                  ;
  3157                                  ;	The transient has set up everything for an EXEC system call.
  3158                                  ;	For cleanliness, we issue the EXEC here in the resident 
  3159                                  ;	so that we may be able to recover cleanly upon success.
  3160                                  ;
  3161                                  ;	CS,DS,ES,SS = DATARES seg addr
  3162                                  ; ----------------------------------------------------------------------------
  3163                                  
  3164                                  Ext_Exec:
  3165                                  ;SR;
  3166                                  ; The words put on the stack by the stub will be popped off when we finally
  3167                                  ;jump to LodCom (by LodCom).
  3168                                  
  3169                                  	; 10/01/2023
  3170                                  	;int	21h			; do the exec
  3171                                  	; 10/01/2023 - MSDOS 5.0 COMMAND.COM - RESGROUP:0D69h (CODERES:0029h)
  3172                                  Exec_Ret:
  3173 00000D37 72D7                    	jc	short Exec_Err		; exec failed
  3174                                  
  3175                                  ;	The exec has completed. Retrieve the exit code.
  3176                                  
  3177                                  Exec_Wait:
  3178 00000D39 B44D                    	mov	ah,4Dh
  3179                                  	;mov	ah,WAITPROCESS ; 4Dh	; get errorlevel
  3180 00000D3B CD21                    	int	21h			; get the return code
  3181                                  	;mov	[cs:RetCode],ax
  3182                                  	; 11/01/2023
  3183 00000D3D A3[9A02]                	mov	[RetCode],ax
  3184                                  
  3185                                  ;	See if we can reload the transient. The external command
  3186                                  ;	may have overwritten part of the transient.
  3187                                  
  3188                                  NoExec:
  3189                                  ;SR;
  3190                                  ; ds = es = ss = DATARES when we jump to LodCom
  3191                                  ;
  3192 00000D40 E97A01                  	jmp	LodCom
  3193                                  
  3194                                  ; ----------------------------------------------------------------------------
  3195                                  ;***	Int 23 (ctrl-c) handler
  3196                                  ;
  3197                                  ;	This is the default system INT 23 handler. All processes
  3198                                  ;	(including COMMAND) get it by default. There are some
  3199                                  ;	games that are played: We ignore ^C during most of the
  3200                                  ;	INIT code. This is because we may perform an ALLOC and
  3201                                  ;	diddle the header! Also, if we are prompting for date/time
  3202                                  ;	in the init code, we are to treat ^C as empty responses.
  3203                                  ; ---------------------------
  3204                                  ;	Bugbug:	put init ctrl-c handling in init module.
  3205                                  ; ----------------------------------------------------------------------------
  3206                                  
  3207                                  ;SR;
  3208                                  ;The stub has pushed the previous ds and DATARES onto the stack. We get
  3209                                  ;both these values off the stack now
  3210                                  ;
  3211                                  ;ContC	proc	far
  3212                                  
  3213                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  3214                                  
  3215                                  	; 11/01/2023 - Retro DOS v5.40 COMMAND.COM
  3216                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:0D75h (CODERES:0035h)
  3217                                  ContC:
  3218 00000D43 1F                      	pop	ds			; ds = DATARES
  3219                                  ;	assume	ds:DATARES
  3220                                  ;;	pop	word [OldDS]		; OldDS = old ds
  3221                                  
  3222 00000D44 F606[1203]01            	test	byte [InitFlag],INITINIT ; 1
  3223                                  	;test	byte [cs:INITFLAG],INITINIT ; 1	; in initialization?
  3224 00000D49 740D                    	jz	short NotAtInit		; no
  3225 00000D4B F606[1203]02            	test	byte [InitFlag],INITSPECIAL ; 2 
  3226                                  	;test	byte [cs:INITFLAG],INITSPECIAL ; 2 ; doing special stuff?
  3227 00000D50 7404                    	jz	short CmdIret		; no, ignore ^C
  3228 00000D52 1F                      	pop	ds			; restore before jumping; M021
  3229                                  	;jmp	RESGROUP:Init_ContC_SpecialCase ; Yes, go handle it
  3230 00000D53 E9E90F                  	jmp	init_contc_specialcase
  3231                                  CmdIret:
  3232                                  ;SR;
  3233                                  ; Restore ds to its previous value
  3234                                  ;
  3235                                  
  3236                                  ;;	mov	ds,[OLdDS]		;
  3237 00000D56 1F                      	pop	ds
  3238 00000D57 CF                      	iret				; yes, ignore the ^C
  3239                                  
  3240                                  NotAtInit:
  3241 00000D58 F606[1203]04            	test	byte [InitFlag],INITCTRLC ; 4
  3242                                  	;test	byte [cs:INITFLAG],INITCTRLC ; 4 ; are we already in a ^C?
  3243 00000D5D 7411                    	jz	short NotInit 		; nope too.
  3244                                  
  3245                                  ;*	We are interrupting ourselves in this ^C handler. We need
  3246                                  ;	to set carry and return to the user sans flags only if the
  3247                                  ;	system call was a 1-12 one. Otherwise, we ignore the ^C.
  3248                                  
  3249                                  	;cmp	ah,1
  3250                                  	;jb	short CmdIret
  3251                                  	; 19/07/2024
  3252 00000D5F 84E4                    	test	ah,ah
  3253 00000D61 74F3                    	jz	short CmdIret
  3254                                  
  3255 00000D63 80FC0C                  	cmp	ah,12
  3256 00000D66 77EE                    	ja	short CmdIret
  3257                                  
  3258 00000D68 1F                      	pop	ds			;restore ds to old value
  3259 00000D69 83C406                  	add	sp,6			; remove int frame
  3260 00000D6C F9                      	stc
  3261                                  
  3262                                  ;;	mov	ds,[OldDS]		;restore ds to its old value
  3263 00000D6D CA0200                  	retf	2			; remove those flags...
  3264                                  
  3265                                  NotInit:
  3266                                  
  3267                                  ;*	We have now received a ^C for some process (maybe ourselves
  3268                                  ;	but not at INIT).
  3269                                  ;	
  3270                                  ;	Note that we are running on the user's stack!!! Bad news if
  3271                                  ;	any of the system calls below go and issue another INT
  3272                                  ;	24... Massive stack overflow! Another bad point is that
  3273                                  ;	SavHand will save an already saved handle, thus losing a
  3274                                  ;	possible redirection...
  3275                                  ;	
  3276                                  ;	All we need to do is set the flag to indicate nested ^C. 
  3277                                  ;	The above code will correctly flag the ^C diring the
  3278                                  ;	message output and prompting while ignoring the ^C the rest
  3279                                  ;	of the time.
  3280                                  ;	
  3281                                  ;	Clean up: flush disk. If we are in the middle of a batch
  3282                                  ;	file, we ask if he wants to terminate it. If he does, then
  3283                                  ;	we turn off all internal flags and let the DOS abort.
  3284                                  
  3285 00000D70 800E[1203]04            	or	byte [InitFlag],INITCTRLC ; 4
  3286                                  	;or	byte [cs:INITFLAG],INITCTRLC ; 4 ; nested ^c is on
  3287 00000D75 FB                      	sti
  3288                                  
  3289                                  ;	push	cs			; el yucko! change the user's ds!!
  3290                                  ;	pop	ds
  3291                                  
  3292                                  ;	assume	ds:RESGROUP
  3293                                  
  3294 00000D76 58                      	pop	ax			; discard the old ds value
  3295                                  
  3296 00000D77 A1[A502]                	mov	ax,[SingleCom]
  3297 00000D7A 09C0                    	or	ax,ax
  3298 00000D7C 7506                    	jnz	short NoReset
  3299 00000D7E 50                      	push	ax
  3300 00000D7F B40D                    	mov	ah,DISK_RESET ; 0Dh
  3301 00000D81 CD21                    	int	21h			; reset disks in case files were open
  3302 00000D83 58                      	pop	ax
  3303                                  
  3304                                  NoReset:
  3305                                  
  3306                                  ;	In the generalized version of FOR, PIPE and BATCH, we would
  3307                                  ;	walk the entire active list and free each segment. Here,
  3308                                  ;	we just free the single batch segment.
  3309                                  
  3310 00000D84 F706[4902]FFFF          	test	word [Batch],-1 ; 0FFFFh
  3311 00000D8A 7452                    	jz	short ContCTerm
  3312 00000D8C 09C0                    	or	ax,ax
  3313 00000D8E 754E                    	jnz	short ContCTerm
  3314 00000D90 E89402                  	call	SavHand
  3315 00000D93 E8D903                  	call	AskEnd			; ask if user wants to end batch
  3316                                  
  3317                                  ;	If the carry flag is clear, we do NOT free up the batch file
  3318                                  
  3319 00000D96 7340                    	jnc	short ContBatch
  3320 00000D98 8A0E[9D02]              	mov	cl,[EchoFlag]		; get current echo flag
  3321 00000D9C 53                      	push	bx
  3322                                  
  3323                                  ClearBatch:
  3324 00000D9D 8E06[4902]              	mov	es,[Batch]		; get batch segment
  3325                                  	;mov	di,20h
  3326 00000DA1 8B3E2000                	mov	di,[BATCHSEGMENT.BatFile] ; get offset of batch file name
  3327                                  	; MSDOS 5.0 & MSDOS 6.0 (ES:5)
  3328                                  	;mov	bx,es:BatForPtr		; get old FOR segment
  3329 00000DA5 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
  3330                                  	; MSDOS 3.3 ([ES:4])
  3331                                  	;mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:4] ; get old FOR segment
  3332                                  	;
  3333                                  	; 19/07/2024
  3334                                  	;cmp	bx,0			; is a FOR in progress
  3335                                  	;je	short No_Bat_For	; no - don't deallocate
  3336 00000DAA 85DB                    	test	bx,bx
  3337 00000DAC 7408                    	jz	short No_Bat_For
  3338                                  
  3339 00000DAE 06                      	push	es			;
  3340 00000DAF 8EC3                    	mov	es,bx			; yes - free it up...
  3341 00000DB1 B449                    	mov	ah,49h
  3342                                  	;mov	ah,DEALLOC ; 49h	;
  3343 00000DB3 CD21                    	int	21h			;
  3344 00000DB5 07                      	pop	es			; restore to batch segment
  3345                                  
  3346                                  No_Bat_For:
  3347                                  	;mov	cl,[es:1]
  3348 00000DB6 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag] ; get old echo flag
  3349                                  	;mov	bx,[es:3]
  3350 00000DBB 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast] ; get old batch segment
  3351 00000DC0 B449                    	mov	ah,49h
  3352                                  	;mov	ah,DEALLOC ; 49h	; free it up...
  3353 00000DC2 CD21                    	int	21h
  3354 00000DC4 891E[4902]              	mov	[Batch],bx		; get ready to deallocate next batch
  3355 00000DC8 FF0E[AE02]              	dec	word [Nest]		; is there another batch file?
  3356 00000DCC 75CF                    	jnz	short ClearBatch	; keep going until no batch file
  3357                                  
  3358                                  ;	We are terminating a batch file; restore the echo status
  3359                                  
  3360                                  ;Shell_Bat_Cont: 			; continue batch for SHELL
  3361 00000DCE 5B                      	pop	bx
  3362 00000DCF 880E[9D02]              	mov	[EchoFlag],cl		; reset echo status
  3363                                  	; 29/05/2018
  3364 00000DD3 C606[1303]00            	mov	byte [PipeFlag],0	; turn off pipeflag
  3365                                  
  3366                                  ContBatch:
  3367 00000DD8 E8FD05                  	call	crlf			; print out crlf before returning
  3368 00000DDB E87302                  	call	RestHand
  3369                                  
  3370                                  ;	Yes, we are terminating. Turn off flags and allow the DOS to abort.
  3371                                  
  3372                                  ContCTerm:
  3373 00000DDE 31C0                    	xor	ax,ax			; indicate no read
  3374 00000DE0 89C5                    	mov	bp,ax
  3375                                  
  3376                                  ;	The following resetting of the state flags is good for the
  3377                                  ;	generalized batch processing.
  3378                                  
  3379 00000DE2 A2[AA02]                	mov	[IfFlag],al		; turn off iffing
  3380 00000DE5 A2[AB02]                	mov	[ForFlag],al		; turn off for processing
  3381 00000DE8 E81C00                  	call	ResPipeOff
  3382 00000DEB 3906[A502]              	cmp	[SingleCom],ax		; see if we need to set SingleCom
  3383 00000DEF 7406                    	jz	short NoSetSing
  3384 00000DF1 C706[A502]FFFF          	mov	word [SingleCom],-1	; cause termination on 
  3385                                  					;  pipe, batch, for
  3386                                  NoSetSing:
  3387                                  
  3388                                  ;	If we are doing an internal command, go through the reload process.
  3389                                  ;	If we are doing an external, let DOS abort the process.
  3390                                  ;	In both cases, we are now done with the ^C processing.
  3391                                  
  3392 00000DF7 8026[1203]FB            	and	byte [InitFlag],~INITCTRLC ; 0FBh
  3393 00000DFC 3806[9902]              	cmp	[ExtCom],al
  3394 00000E00 7503                    	jnz	short DoDAb		; internal ^c
  3395 00000E02 E94701                  	jmp	LodCom1
  3396                                  DoDAb:
  3397 00000E05 F9                      	stc				; tell dos to abort
  3398                                  
  3399                                  ;SR;
  3400                                  ;We dont need to restore ds here because we are forcing DOS to do an abort
  3401                                  ;by setting carry and leaving flags on the stack
  3402                                  
  3403 00000E06 CB                      	retf				; Leave flags on stack
  3404                                  
  3405                                  ;ContC	endp
  3406                                  
  3407                                  ;SR;
  3408                                  ;ds = DATARES on entry. This routine is called from DskErr and LodCom1 and
  3409                                  ;both have ds = DATARES
  3410                                  
  3411                                  	; 11/01/2023
  3412                                  ResPipeOff:
  3413 00000E07 50                      	push	ax
  3414 00000E08 31C0                    	xor	ax,ax
  3415                                  	;xchg	al,[cs:PIPEFLAG]
  3416 00000E0A 8606[1303]              	xchg	al,[PipeFlag]
  3417 00000E0E 08C0                    	or	al,al
  3418 00000E10 7404                    	jz	short NoPipePop
  3419                                  	;shr	byte [cs:ECHOFLAG],1
  3420 00000E12 D02E[9D02]              	shr	byte [EchoFlag],1
  3421                                  NoPipePop:
  3422 00000E16 58                      	pop	ax
  3423 00000E17 C3                      	retn
  3424                                  
  3425                                  ;CODERES ends
  3426                                  
  3427                                  ;=============================================================================
  3428                                  ; COMMAND2.ASM, MSDOS 6.0, 1991
  3429                                  ;=============================================================================
  3430                                  ; 21/09/2018 - Retro DOS v3.0
  3431                                  
  3432                                  ;	title	COMMAND2 - resident code for COMMAND.COM part II
  3433                                  ;	name	COMMAND2
  3434                                  
  3435                                  ;/*
  3436                                  ; *                      Microsoft Confidential
  3437                                  ; *                      Copyright (C) Microsoft Corporation 1991
  3438                                  ; *                      All Rights Reserved.
  3439                                  ; */
  3440                                  
  3441                                  ;
  3442                                  ;	Revision History
  3443                                  ;	================
  3444                                  ;
  3445                                  ; M038	SR  11/5/90	Changed stuff for Novell RPL. These guys cannot
  3446                                  ;			reserve memory by changing int 12h and then give it
  3447                                  ;			back to DOS by changing arenas in autoexec.bat.
  3448                                  ;			This makes command.com reload transient and this
  3449                                  ;			cannot be done at this stage.
  3450                                  ;
  3451                                  
  3452                                  ;CODERES segment public byte
  3453                                  
  3454                                  ;*	If we cannot allocate enough memory for the transient or there
  3455                                  ;	was some other allocation error, we display a message and
  3456                                  ;	then die.
  3457                                  
  3458                                  ;SR;
  3459                                  ; We will have to make sure that at this entry point and at FatalC, 
  3460                                  ;ds = DATARES. All jumps to these points are made from only within this file
  3461                                  ;and so we should be able to do this
  3462                                  
  3463                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3464                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0E4Bh (CODERES:010Bh)
  3465                                  
  3466                                  	;assume	ds:DATARES
  3467                                  BadMemErr:
  3468 00000E18 BA[DE06]                	mov	dx,BMEMMES			; DX = ptr to msg
  3469                                  FatalC:
  3470                                  	; 12/01/2023
  3471                                  ;;	push	cs
  3472                                  ;;	pop	ds
  3473                                  ;;	assume	ds:ResGroup
  3474                                  ;	invoke	RPrint
  3475                                  
  3476                                  	; 12/01/2023
  3477                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3478 00000E1B E8BD05                  	call	RPrint
  3479                                  
  3480                                  	; MSDOS 3.3
  3481                                  	;call	RDISPMSG
  3482                                  
  3483                                  ;	If this is NOT a permanent (top-level) COMMAND, then we exit;
  3484                                  ;	we can't do anything else!
  3485                                  
  3486 00000E1E 803E[A202]00            	cmp	byte [PermCom],0
  3487 00000E23 7410                    	je	short FatalRet
  3488                                  
  3489                                  ;	We are a permanent command. If we are in the process of the
  3490                                  ;	magic interrupt (Singlecom) then exit too.
  3491                                  
  3492 00000E25 833E[A502]00            	cmp	word [SingleCom],0		; if PermCom and SingleCom
  3493 00000E2A 7509                    	jne	short FatalRet			; must take int_2e exit
  3494                                  
  3495                                  ;	Permanent command. We can't do ANYthing except halt.
  3496                                  
  3497 00000E2C BA[F806]                	mov	dx,HALTMES			; DX = ptr to msg
  3498                                  	;invoke	RPrint
  3499                                  	; 12/01/2023	
  3500                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3501 00000E2F E8A905                  	call	RPrint	
  3502                                  	; MSDOS 3.3
  3503                                  	;call	RDISPMSG
  3504 00000E32 FB                      	sti
  3505                                  Stall:
  3506 00000E33 EBFE                    	jmp	short Stall			; crash the system nicely
  3507                                  
  3508                                  FatalRet:
  3509 00000E35 BA[1F07]                	mov	dx,FRETMES			; DX = ptr to msg
  3510                                  	;call	RDISPMSG
  3511                                  	; 12/01/2023	
  3512 00000E38 E8A005                  	call	RPrint	
  3513                                  FatalRet2:
  3514 00000E3B 803E[A202]00            	cmp	byte [PermCom],0		; if we get here and PermCom,
  3515 00000E40 7519                    	jne	short Ret_2e			; must be int_2e
  3516                                  
  3517                                  ;	Bugbug:	this is where we'd want to unhook int 2F, *if* we
  3518                                  ;	were a non-permanent COMMAND that had hooked it! (Just in 
  3519                                  ;	case we decide to do that.)
  3520                                  
  3521 00000E42 A1[3E02]                	mov	ax,[Parent]
  3522                                  	;mov	[16h],ax
  3523 00000E45 A31600                  	mov	[PDB.PARENT_PID],ax	; mov [cs:16h],ax
  3524 00000E48 A1[4002]                	mov	ax,[OldTerm]
  3525                                  	;mov	[0Ah],ax
  3526 00000E4B A30A00                  	mov	[PDB.EXIT],ax		; mov [cs:0Ah],ax
  3527 00000E4E A1[4202]                	mov	ax,[OldTerm+2]
  3528                                  	;mov	[0Ch],ax
  3529 00000E51 A30C00                  	mov	[PDB.EXIT+2],ax 	; mov [cs:0Ch],ax
  3530                                  	;mov	ax,4C00h
  3531                                  	;;mov	ax,(EXIT<<8) ; 4C00h	; return to lower level
  3532                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  3533 00000E54 B44C                    	mov	ah,4Ch ; EXIT
  3534 00000E56 A0[9A02]                	mov	al,[RetCode] 
  3535 00000E59 CD21                    	int	21h
  3536                                  Ret_2e:
  3537                                  ;SR;
  3538                                  ; We will ensure that ds = DATARES for all entries to this place
  3539                                  ;
  3540                                  
  3541                                  ;;	push	cs
  3542                                  ;;	pop	ds
  3543                                  ;;	assume	ds:resgroup,es:nothing,ss:nothing
  3544                                    	
  3545                                  ;	assume	ds:DATARES
  3546                                  
  3547                                  	;PUSH	CS
  3548                                  	;POP	DS
  3549                                  
  3550 00000E5B C706[A502]0000          	mov	word [SingleCom],0	; turn off SingleCom
  3551 00000E61 8E06[5804]              	mov	es,[Res_Tpa]
  3552                                  	;mov	ah,49h	; 12/01/2023
  3553 00000E65 B449                    	mov	ah,DEALLOC
  3554 00000E67 CD21                    	int	21h			; free up space used by transient
  3555 00000E69 8B1E[3C02]              	mov	bx,[Save_Pdb]
  3556 00000E6D B450                    	mov	ah,50h
  3557                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3558 00000E6F CD21                    	int	21h			; current process is user
  3559 00000E71 A1[9A02]                	mov	ax,[RetCode]
  3560 00000E74 803E[9902]00            	cmp	byte [ExtCom],0
  3561 00000E79 7502                    	jne	short GotECode
  3562 00000E7B 31C0                    	xor	ax,ax			; internals always return 0
  3563                                  GotECode:
  3564 00000E7D C606[9902]01            	mov	byte [ExtCom],1		; force external
  3565                                  
  3566                                  ;SR; This is actually returning to the caller. However, the old code had
  3567                                  ;ds = RESGROUP so I guess we can keep ds = DATARES for us.
  3568                                  ;Yes, int 2eh can corrupt all registers so we are ok.
  3569                                  
  3570                                  	; 12/01/2023
  3571 00000E82 FF2E[3802]              	jmp	far [Int_2e_Ret]	; "iret"
  3572                                  
  3573                                  ;***	Int_2e, magic command executer
  3574                                  
  3575                                  Int_2e:
  3576                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  3577                                  ;SR;
  3578                                  ;We are going to come here from the stub with the old ds and DATARES value
  3579                                  ;pushed on the stack in that order. Pick up this stuff off the stack
  3580                                  
  3581                                  	; 12/01/2023 - Retro DOS v4.0 COMMAND.COM
  3582                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0EB7h (CODERES:0177h)
  3583                                  
  3584 00000E86 1F                      	pop	ds			; ds = DATARES
  3585                                  	;assume	ds:DATARES
  3586 00000E87 58                      	pop	ax
  3587                                  ;	;pop	ds:OldDS 		; Save old value of ds
  3588                                  
  3589                                  	;pop	word [cs:Int_2e_Ret]
  3590                                  	;pop	word [cs:Int_2e_Ret+2]	; store return address
  3591                                  	;pop	ax			; chuck flags
  3592 00000E88 8F06[3802]              	pop	word [Int_2e_Ret]
  3593 00000E8C 8F06[3A02]              	pop	word [Int_2e_Ret+2]
  3594                                  	
  3595 00000E90 83C402                  	add	sp,2
  3596                                  
  3597                                  ;;	push	cs
  3598                                  ;;	pop	es
  3599                                  
  3600 00000E93 1E                      	push	ds
  3601 00000E94 07                      	pop	es			; es = DATARES
  3602                                  ;	;mov	ds,OldDS
  3603 00000E95 8ED8                    	mov	ds,ax
  3604                                  	;assume	ds:nothing		; ds = old value
  3605                                  
  3606 00000E97 BF8000                  	mov	di,80h
  3607 00000E9A B94000                  	mov	cx,64
  3608                                  ;	Bugbug:	cld
  3609 00000E9D F3A5                    	rep	movsw
  3610 00000E9F B451                    	mov	ah,51h
  3611                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3612 00000EA1 CD21                    	int	21h			; get user's header
  3613                                  	; 12/01/2023
  3614 00000EA3 26891E[3C02]            	mov	[es:Save_Pdb],bx
  3615                                  	;mov	[cs:Save_Pdb],bx
  3616 00000EA8 B450                    	mov	ah,50h
  3617                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3618                                  
  3619                                  ;;	mov	bx,cs
  3620                                  ;SR;
  3621                                  ;Set ds = DATARES because BadMemErr expects this
  3622                                  
  3623                                  	; 12/01/2023
  3624 00000EAA 06                      	push	es
  3625 00000EAB 1F                      	pop	ds
  3626                                  	;assume	ds:DATARES
  3627                                  
  3628 00000EAC 8CDB                    	mov	bx,ds			; es = our PSP now
  3629                                  	;mov	bx,cs
  3630                                  
  3631 00000EAE CD21                    	int	21h			; current process is me
  3632                                  	;mov	word [cs:SingleCom],81h
  3633                                  	;mov	byte [cs:ExtCom],1	; make sure this case forced
  3634                                  	; 12/01/2023
  3635 00000EB0 C706[A502]8100          	mov	word [SingleCom],81h
  3636 00000EB6 C606[9902]01            	mov	byte [ExtCom],1		; make sure this case forced
  3637                                  
  3638                                  ;SR;
  3639                                  ;We can enter LodCom directly after a command shell is terminated or we
  3640                                  ;can fall thru from above. When we enter directly from the stub, the stack
  3641                                  ;has the old ds value and the data seg value on the stack, so that ds can
  3642                                  ;be properly set. To fake this, we push dummy values here.
  3643                                  
  3644                                  	; 12/01/2023
  3645 00000EBB 1E                      	push	ds			; old value of ds
  3646 00000EBC 1E                      	push	ds			; data seg value, ds = DATARES
  3647                                  LodCom: 				; termination handler
  3648 00000EBD 1F                      	pop	ds			; ds = DATARES
  3649                                  	;assume	ds:DATARES
  3650 00000EBE 83C402                  	add	sp,2
  3651                                  ;	;pop	OldDS			; store old ds
  3652                                  	;cmp	ExtCom,0
  3653 00000EC1 803E[9902]00            	cmp	byte [ExtCom],0
  3654                                  	;cmp	byte [cs:ExtCom],0
  3655                                  	;jne	short @f	 	; internal cmd - memory allocated
  3656                                  	; 16/04/2023
  3657 00000EC6 7503                    	jne	short LodCom0 ; 24/09/2018
  3658 00000EC8 E98100                  	jmp	LodCom1
  3659                                  	;je	short LodCom1 ; 25/09/2018	
  3660                                  ;@@:
  3661                                  LodCom0: ; 24/09/2018
  3662 00000ECB BBFFFF                  	mov	bx,0FFFFh
  3663 00000ECE B448                    	mov	ah,48h	; 12/01/2023
  3664                                  	;mov	ah,ALLOC ; 48h	
  3665 00000ED0 CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  3666                                  				; BX = number of 16-byte paragraphs desired
  3667 00000ED2 E80A00                  	call	SetSize
  3668 00000ED5 83C020                  	add	ax,20h
  3669 00000ED8 39C3                    	cmp	bx,ax
  3670 00000EDA 730B                    	jnb	short MemOk		; > 512 byte buffer - good enough
  3671                                  BadMemErrJ:
  3672 00000EDC E939FF                  	jmp	BadMemErr		; not enough memory
  3673                                  
  3674                                  ;***	SetSize - get transient size in paragraphs
  3675                                  
  3676                                  SetSize:
  3677                                  	; 12/01/2023
  3678                                  	;;;mov	ax,offset TRANGROUP:TranSpaceEnd + 15
  3679                                  	;;mov	ax,98D4h		; MSDOS 5.0 COMMAND.COM
  3680                                  	; 05/06/2023
  3681                                  	;mov	ax,0AFA4h		; MSDOS 6.22 COMMAND.COM
  3682 00000EDF B88AA6                  	mov	ax,TRANSPACEEND+15	; mov AX,4D6Bh ; MSDOS 3.3
  3683 00000EE2 B104                    	mov	cl,4
  3684 00000EE4 D3E8                    	shr	ax,cl
  3685 00000EE6 C3                      	retn
  3686                                  
  3687                                  MemOk:
  3688                                  	;assume	ds:DATARES		;we have set ds = DATARES 
  3689                                  
  3690 00000EE7 B448                    	mov	ah,48h
  3691                                  	;mov	ah,ALLOC  ; 48h
  3692 00000EE9 CD21                    	int	21h
  3693 00000EEB 72EF                    	jc	short BadMemErrJ	; memory arenas probably trashed
  3694                                  	;mov	byte [cs:ExtCom],0
  3695                                  	;mov	[cs:Res_Tpa],ax
  3696                                  	; 12/01/2023
  3697 00000EED C606[9902]00            	mov	byte [ExtCom],0		; flag not to alloc again
  3698 00000EF2 A3[5804]                	mov	[Res_Tpa],ax		; save current tpa segment
  3699                                  
  3700 00000EF5 2500F0                  	and	ax,0F000h
  3701 00000EF8 050010                  	add	ax,1000h		; round up to next 64k boundary
  3702 00000EFB 7212                    	jc	short Bad_Tpa		; memory wrap if carry set
  3703                                  
  3704                                  ;	Make sure that new boundary is within allocated range
  3705                                  
  3706                                  	;mov	dx,[cs:Res_Tpa]
  3707                                  	; 12/01/2023
  3708 00000EFD 8B16[5804]              	mov	dx,[Res_Tpa]
  3709 00000F01 01DA                    	add	dx,bx			; compute maximum address
  3710 00000F03 39C2                    	cmp	dx,ax			; is 64k address out of range?
  3711 00000F05 7608                    	jbe	short Bad_Tpa
  3712                                  
  3713                                  ;	Must have 64K of usable space.
  3714                                  
  3715 00000F07 29C2                    	sub	dx,ax			; compute the usable space
  3716 00000F09 81FA0010                	cmp	dx,1000h		; is space >= 64k ?
  3717 00000F0D 7303                    	jae	short LTpaSet
  3718                                  Bad_Tpa:
  3719                                  	;mov	ax,[cs:Res_Tpa]
  3720                                  	; 12/01/2023
  3721 00000F0F A1[5804]                	mov	ax,[Res_Tpa]
  3722                                  LTpaSet:
  3723                                  	;mov	[cs:LTPA],ax
  3724                                  	;mov	ax,[cs:Res_Tpa]
  3725                                  	; 12/01/2023
  3726 00000F12 A3[4C04]                	mov	[LTpa],ax		; usable tpa is 64k buffer aligned
  3727 00000F15 A1[5804]                	mov	ax,[Res_Tpa]		; actual tpa is buffer allocated
  3728 00000F18 01C3                    	add	bx,ax
  3729                                  	;mov	[cs:MemSiz],bx
  3730 00000F1A 891E[9502]              	mov	[MemSiz],bx
  3731 00000F1E E8BEFF                  	call	SetSize
  3732 00000F21 29C3                    	sub	bx,ax
  3733                                  
  3734                                  	; MSDOS 6.0
  3735                                  
  3736                                  ;M038; Start of changes
  3737                                  ;Changes for Novell RPL. These guys reserve memory for themselves by
  3738                                  ;reducing int 12h size and add this memory to the system at autoexec time by
  3739                                  ;running a program that changes arenas. This changes the largest block that
  3740                                  ;command.com gets and so changes the transient segment. So, command.com does
  3741                                  ;a checksum at the wrong address and thinks that the transient is destroyed
  3742                                  ;and tries to reload it. At this point, no Comspec is defined and so the
  3743                                  ;reload fails, hanging the system. To get around this we just copy the
  3744                                  ;transient from the previous address to the new address(if changed) and
  3745                                  ;then let command.com do the checksum. So, if the transient area is not
  3746                                  ;corrupted, there will not be any reload. In Novell's case, the transient
  3747                                  ;is not really corrupted and so this should work.
  3748                                  
  3749                                  	; 12/01/2023
  3750                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0F5Ah (CODERES:021Ah)
  3751                                  
  3752 00000F23 3B1E[8F02]              	cmp	bx,[TrnSeg]		; Segment still the same?
  3753 00000F27 7423                    	je	short LodCom1		; yes, dont copy
  3754                                  
  3755                                  ;Check if the new segment is above or below the current move. If the new
  3756                                  ;segment is above (i.e new block is larger than previous block), then we
  3757                                  ;have to move in the reverse direction
  3758                                  
  3759                                  	;;mov	cx,98C5h
  3760                                  	; 05/06/2023
  3761                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:106Ah (CODERES:021Ah)
  3762                                  	;mov	cx,0AF95h
  3763                                  	;;mov	cx,0AA9Ah ; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  3764 00000F29 B97BA6                  	mov	cx,TRANSPACEEND		; cx = length to move
  3765 00000F2C 7707                    	ja	short mov_down		; new seg > old seg, reverse move
  3766 00000F2E 31F6                    	xor	si,si			; normal move
  3767 00000F30 89F7                    	mov	di,si
  3768 00000F32 FC                      	cld
  3769 00000F33 EB06                    	jmp	short copy_trans
  3770                                  mov_down:
  3771 00000F35 89CE                    	mov	si,cx			; reverse move, start from end
  3772 00000F37 4E                      	dec	si
  3773 00000F38 89F7                    	mov	di,si
  3774 00000F3A FD                      	std
  3775                                  copy_trans:
  3776 00000F3B 1E                      	push	ds
  3777 00000F3C 06                      	push	es
  3778 00000F3D 8EC3                    	mov	es,bx			; dest segment
  3779 00000F3F 8E1E[8F02]              	mov	ds,[TrnSeg]		; source segment
  3780                                  	;assume	ds:nothing
  3781                                  
  3782 00000F43 F3A4                    	rep	movsb			; copy transient
  3783 00000F45 FC                      	cld
  3784 00000F46 07                      	pop	es
  3785 00000F47 1F                      	pop	ds
  3786                                  	;assume	ds:DATARES
  3787                                  
  3788                                  ;M038; End of changes
  3789                                  
  3790                                  	;mov	[cs:TrnSeg],bx		; new location of transient
  3791                                  	; 12/01/2023
  3792 00000F48 891E[8F02]              	mov	[TrnSeg],bx
  3793                                  
  3794                                  LodCom1:
  3795                                  ;;	mov	ax,cs
  3796                                  ;;	mov	ss,ax
  3797                                  ;SR; At this point ds = DATARES which is where the stack is located
  3798                                  
  3799                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3800                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3801 00000F4C 8CD8                    	mov	ax,ds
  3802 00000F4E 8ED0                    	mov	ss,ax
  3803                                  	;assume	ss:DATARES
  3804                                  	;;;mov	sp,offset DATARES:RStack
  3805                                  	;;mov	sp,53Eh
  3806                                  	; 05/06/2023
  3807                                  	;;mov	sp,60Ah ; MSDOS 6.22 COMMAND.COM
  3808                                  	;mov	sp,637h ; PCDOS 7.1 COMMAND.COM ; 19/07/2024
  3809 00000F50 BC[2E05]                	mov	sp,RStack
  3810                                  
  3811                                  ;;	mov	ds,ax
  3812                                  
  3813                                  	;assume	ds:DATARES
  3814                                  	
  3815                                  	; MSDOS 3.3
  3816                                  	;mov	ax,cs
  3817                                  	;mov	ss,ax
  3818                                  	;mov	sp,RSTACK
  3819                                  	;mov	ds,ax
  3820                                  
  3821 00000F53 E88500                  	call	HeadFix			; close files, restore stdin, stdout
  3822 00000F56 31ED                    	xor	bp,bp			; flag command ok
  3823 00000F58 B8FFFF                  	mov	ax,-1
  3824 00000F5B 8706[A702]              	xchg	ax,[VerVal]
  3825 00000F5F 83F8FF                  	cmp	ax,-1
  3826 00000F62 7404                    	je	short NoSetVer
  3827 00000F64 B42E                    	mov	ah,2Eh
  3828                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh ; AL has correct value
  3829 00000F66 CD21                    	int	21h 		; DOS - SET VERIFY FLAG
  3830                                  				; DL = 00h, AL = 01h VERIFY on / 00h VERIFY off
  3831                                  NoSetVer:
  3832 00000F68 833E[A502]FF            	cmp	word [SingleCom],-1
  3833 00000F6D 7503                    	jne	short NoSng
  3834 00000F6F E9C9FE                  	jmp	FatalRet2		; we have finished the single command
  3835                                  NoSng:
  3836 00000F72 E88101                  	call	ChkSum			; check the transient
  3837                                  	;cmp	dx,[Sum]
  3838                                  	;je	short HavCom		; transient ok
  3839                                  
  3840                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3841                                  %if 0
  3842                                  	; 12/01/2023
  3843                                  	jz	short HavCom
  3844                                  
  3845                                  %else	; PCDOS 7.1 COMMAND.COM
  3846 00000F75 7505                    	jnz	short Bogus_Com
  3847 00000F77 E8A701                  	call	chk_transient
  3848 00000F7A 7417                    	jz	short HavCom
  3849                                  %endif
  3850                                  
  3851                                  Bogus_Com:
  3852 00000F7C C606[4802]01            	mov	byte [Loading],1	; flag DskErr routine
  3853 00000F81 E82801                  	call	LoadCom
  3854                                  ChkSame:
  3855 00000F84 E86F01                  	call	ChkSum
  3856                                  	;cmp	dx,[Sum]
  3857                                  	;je	short HavCom		; same command
  3858                                  
  3859                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3860                                  %if 0
  3861                                  	; 12/01/2023
  3862                                  	jz	short HavCom
  3863                                  
  3864                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  3865                                  %else	; PCDOS 7.1 COMMAND.COM
  3866 00000F87 7505                    	jnz	short Also_Bogus
  3867 00000F89 E89501                  	call	chk_transient
  3868 00000F8C 7405                    	jz	short HavCom
  3869                                  %endif
  3870                                  Also_Bogus:
  3871 00000F8E E85D01                  	call	WrongCom
  3872 00000F91 EBF1                    	jmp	short ChkSame
  3873                                  
  3874                                  	; 12/01/2023
  3875                                  ;HavCom:
  3876                                  ;	; 25/09/2018
  3877                                  ;	mov     ax,(CHAR_OPER*256) ; 3700h
  3878                                  ;	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  3879                                  ;			; Return: AL = FFh unsupported subfunction
  3880                                  ;			; DL = current switch character
  3881                                  ;	mov     [RSWITCHAR],dl
  3882                                  ;	cmp     dl,'/'
  3883                                  ;	jnz     short USESLASH
  3884                                  ;	;mov	cl,'\'
  3885                                  ;	;mov	[RDIRCHAR],cl
  3886                                  ;	mov	byte [RDIRCHAR],'\'
  3887                                  ;USESLASH:
  3888                                  
  3889                                  HavCom:
  3890                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3891 00000F93 C606[4802]00            	mov	byte [Loading],0		; flag to DskErr
  3892                                  	;;;mov	si,offset DATARES:TranVars
  3893                                  	;;mov	si,453h		; MSDOS 5.0 COMMAND.COM
  3894                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  3895                                  	;mov	si,51Dh		; MSDOS 6.22 COMMAND.COM
  3896                                  	; 19/07/2024
  3897                                  	;mov	si,551h		; PCDOS 7.1 COMMAND.COM
  3898 00000F98 BE[4804]                	mov	si,TranVars
  3899                                  	;;;mov	di,offset TRANGROUP:HeadCall
  3900                                  	;;mov	di,8D75h	; MSDOS 5.0 COMMAND.COM
  3901                                  	; 05/06/2023
  3902                                  	;mov	di,0A303h	; MSDOS 6.22 COMMAND.COM
  3903                                  	; 19/07/2024
  3904                                  	;mov	di,0A082h	; PCDOS 7.1 COMMAND.COM
  3905 00000F9B BF[619C]                	mov	di,HEADCALL
  3906 00000F9E 8E06[8F02]              	mov	es,[TrnSeg]
  3907 00000FA2 FC                      	cld
  3908                                  	;;;mov	cx,467h		; MSDOS 5.0 COMMAND.COM	
  3909                                  	;;mov	cx,533h		; MSDOS 6.22 COMMAND.COM	
  3910                                  	;mov	cx,565h		; PCDOS 7.1 COMMAND.COM
  3911 00000FA3 B9[5C04]                	mov	cx,TranVarEnd
  3912 00000FA6 29F1                    	sub	cx,si
  3913 00000FA8 F3A4                    	rep	movsb			; transfer info to transient
  3914 00000FAA A1[9502]                	mov	ax,[MemSiz]
  3915 00000FAD A30200                  	mov	[PDB.BLOCK_LEN],ax ; mov [ds:2],ax ; adjust my own header
  3916                                  
  3917                                  ;***	TJmp - jump-off to transient
  3918                                  ;
  3919                                  ;	Public label so debugger can find this spot.
  3920                                  
  3921                                  TJmp:	; 12/01/2023
  3922 00000FB0 FF2E[8D02]              	jmp	far [Trans]		; jmp dword ptr Trans
  3923                                  
  3924                                  ;***	TRemCheck - far version of RemCheck for transient
  3925                                  
  3926                                  TRemCheck:
  3927                                  	; 12/01/2023
  3928 00000FB4 1F                      	pop	ds			; ds = DATARES
  3929 00000FB5 83C402                  	add	sp,2			; discard old value of ds
  3930                                  
  3931 00000FB8 E80100                  	call	RemCheck
  3932 00000FBB CB                      	retf
  3933                                  
  3934                                  ;***	RemCheck
  3935                                  ;
  3936                                  ;	ENTRY	AL = drive (0=default, 1=A, ...)
  3937                                  ;
  3938                                  ;	EXIT	ZR set if removeable media
  3939                                  ;		ZR clear if fixed media
  3940                                  ;
  3941                                  ;	USED	none
  3942                                  
  3943                                  	; 12/01/2023
  3944                                  RemCheck:
  3945 00000FBC 50                      	push	ax
  3946 00000FBD 53                      	push	bx
  3947 00000FBE 89C3                    	mov	bx,ax
  3948 00000FC0 B80844                  	mov	ax,4408h
  3949                                  	;mov	ax,(IOCTL<<8)+8 ; 4408h
  3950 00000FC3 CD21                    	int	21h		; DOS - 2+ - IOCTL -
  3951 00000FC5 7304                    	jnc	short rcCont		
  3952                                  
  3953                                  ;	If an error occurred, assume the media is non-removable.
  3954                                  ;	AX contains the non-zero error code from the int 21, so
  3955                                  ;	'or ax,ax; sets non-zero. This behavior makes network drives
  3956                                  ;	appear to be non-removable.				
  3957                                  					
  3958 00000FC7 09C0                    	or	ax,ax			
  3959 00000FC9 EB05                    	jmp	short ResRegs
  3960                                  rcCont:
  3961 00000FCB 83E001                  	and	ax,1
  3962 00000FCE F7D0                    	not	ax
  3963                                  ResRegs:
  3964 00000FD0 5B                      	pop	bx
  3965 00000FD1 58                      	pop	ax
  3966 00000FD2 C3                      	retn
  3967                                  
  3968                                  ;***	THeadFix
  3969                                  ;
  3970                                  ;	Far version of HeadFix, called from transient.
  3971                                  
  3972                                  THeadFix:
  3973                                  	; 12/01/2023
  3974 00000FD3 1F                      	pop	ds			; ds = DATARES
  3975 00000FD4 83C402                  	add	sp,2			; discard old ds value on stack
  3976                                  
  3977 00000FD7 E80100                  	call	HeadFix
  3978 00000FDA CB                      	retf
  3979                                  
  3980                                  ;***	HeadFix
  3981                                  
  3982                                  	; 12/01/2023
  3983                                  HeadFix:
  3984 00000FDB E85001                  	call	SetVect			; set vectors to our values
  3985                                  
  3986                                  ;	Clean up header
  3987                                  
  3988                                  ;	Bugbug:	optimize:
  3989                                  ;	mov	word ptr ds:Pdb_Jfn_Table,cx  instead of separate bytes
  3990                                  
  3991 00000FDE 31DB                    	xor	bx,bx			; BX = handle = 0
  3992 00000FE0 8B0E[9F02]              	mov	cx,[Io_Save]		; CX = original stdin, stdout
  3993                                  	;mov	dx,[18h] 
  3994 00000FE4 8B161800                	mov	dx,[PDB.JFN_TABLE]	; DX = current stdin, stdout
  3995 00000FE8 38D1                    	cmp	cl,dl
  3996 00000FEA 7407                    	je	short Chk1		; stdin matches
  3997                                  
  3998                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  3999                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4000                                  	mov	ah,3Eh
  4001                                  	;mov	ah,CLOSE  ; 3Eh
  4002                                  	int	21h			; close stdin
  4003                                  %else
  4004                                  	;mov	ah,3Eh
  4005                                  	;call	int21h
  4006                                  	; 19/07/2024
  4007 00000FEC E86E01                  	call	int21h_close
  4008                                  %endif
  4009                                  	;mov	[18h],cl
  4010 00000FEF 880E1800                	mov	[PDB.JFN_TABLE],cl	; restore stdin
  4011                                  Chk1:
  4012 00000FF3 43                      	inc	bx			; BX = handle = 1
  4013 00000FF4 38F5                    	cmp	ch,dh			
  4014 00000FF6 7407                    	je	short ChkOtherHand	; stdout matches
  4015                                  
  4016                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  4017                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4018                                  	mov	ah,3Eh
  4019                                  	;mov	ah,CLOSE  ; 3Eh
  4020                                  	int	21h			; close stdout
  4021                                  %else
  4022                                  	;mov	ah,3Eh
  4023                                  	;call	int21h
  4024                                  	; 19/07/2024
  4025 00000FF8 E86201                  	call	int21h_close
  4026                                  %endif
  4027                                  	;mov	[19h],ch
  4028 00000FFB 882E1900                	mov	[PDB.JFN_TABLE+1],ch	; restore stdout
  4029                                  ChkOtherHand:
  4030 00000FFF 83C304                  	add	bx,4			; skip handles 2,3,4
  4031 00001002 B90F00                  	mov	cx,FILPERPROC-5	; 15	; CX = # handles to close
  4032                                  					; (handles 0-4 already done)
  4033                                  CloseLoop:
  4034                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  4035                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4036                                  	mov	ah,3Eh
  4037                                  	;mov	ah,CLOSE  ; 3Eh
  4038                                  	int	21h			; close file
  4039                                  %else
  4040                                  	;cmp	byte [bx+18h],0FFh
  4041 00001005 807F18FF                	cmp	byte [bx+PDB.JFN_TABLE],0FFh
  4042 00001009 7403                    	je	short CloseLoopNxt
  4043                                  
  4044                                  	;mov	ah,3Eh
  4045                                  	;call	int21h
  4046                                  	; 19/07/2024
  4047 0000100B E84F01                  	call	int21h_close
  4048                                  CloseLoopNxt:
  4049                                  %endif
  4050 0000100E 43                      	inc	bx			; BX = next handle
  4051 0000100F E2F4                    	loop	CloseLoop
  4052                                  
  4053                                  	; MSDOS 6.0
  4054                                  ;	Bugbug:	since this is for transient code, move it there
  4055                                  	
  4056                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4057                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:103Dh)
  4058                                  	; 19/07/2024
  4059                                  	; (PCDOS 7.1 COMMAND.COM - RESGROUP:1119h)
  4060                                  
  4061                                  ;	M012: remove this CS -> DS. Must've been missed during
  4062                                  ;	purification.
  4063                                  ;;	push	ds			; save data segment
  4064                                  ;;	push	cs			; get local segment into DS
  4065                                  ;;	pop	ds			;
  4066 00001011 803E[C002]FF            	cmp	byte [Append_Flag],-1	; do we need to reset APPEND?
  4067 00001016 750E                    	jne	short Append_Fix_End	; no - just exit
  4068 00001018 B807B7                  	mov	ax,0B707h
  4069                                  	;mov	ax,AppendSetState	; set the state of Append
  4070 0000101B 8B1E[BE02]              	mov	bx,[Append_State] 	; back to the original state
  4071 0000101F CD2F                    	int	2Fh			;
  4072 00001021 C606[C002]00            	mov	byte [Append_Flag],0	; set append flag to invalid
  4073                                  Append_Fix_End: 			;
  4074                                  ;;	pop	ds			; get data segment back
  4075 00001026 C3                      	retn
  4076                                  
  4077                                  	; MSDOS 3.3
  4078                                  	;retn
  4079                                  
  4080                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4081                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:112Fh
  4082                                  
  4083                                  ;***	SavHand - save current program's stdin/out & set to our stderr
  4084                                  ;
  4085                                  ;	ENTRY	nothing
  4086                                  ;
  4087                                  ;	EXIT	nothing
  4088                                  ;
  4089                                  ;	USED	flags
  4090                                  ;
  4091                                  ;	EFFECTS
  4092                                  ;	  Handle01 = current program's stdin,stdout JFN entries
  4093                                  ;	  current program's stdin,stdout set to our stderr
  4094                                  ;
  4095                                  
  4096                                  ;SR;
  4097                                  ; Changed ds = DATARES. We need it to access our JFN_Table
  4098                                  ; Called from ContC ( ds = DATARES ) and DskErr ( ds = DATARES ).
  4099                                  
  4100                                  SavHand:
  4101                                  	;assume	ds:DATARES,es:NOTHING,ss:NOTHING
  4102                                  
  4103                                  	; 12/01/2023
  4104                                  	;push	ds ; MSDOS 3.3
  4105                                  
  4106 00001027 53                      	push	bx			;preserve registers
  4107 00001028 50                      	push	ax
  4108                                  	; 12/01/2023
  4109 00001029 06                      	push	es
  4110 0000102A 1E                      	push	ds			; save DATARES value
  4111                                  
  4112 0000102B B451                    	mov	ah,51h
  4113                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  4114                                  
  4115                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  4116                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4117                                  	int	21h			; BX = user's header seg addr
  4118                                  %else
  4119 0000102D E82F01                  	call	int21h
  4120                                  %endif
  4121 00001030 8EDB                    	mov	ds,bx			; DS = user's header seg addr
  4122                                  	;lds	bx,[34h]	
  4123 00001032 C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to JFN table
  4124 00001036 8B07                    	mov	ax,[bx]			; AX = stdin,stdout JFN's
  4125                                  	; 12/01/2023
  4126 00001038 07                      	pop	es			; es = DATARES
  4127 00001039 06                      	push	es			; save it back on stack
  4128 0000103A 26A3[4602]              	mov	[es:Handle01],ax	; save user's stdin, stdout
  4129                                  	;mov	[cs:HANDLE01],ax
  4130                                  
  4131                                  ;SR;
  4132                                  ; Use es to address Handle01 & our JFN_Table
  4133                                  
  4134                                  	; 12/01/2023
  4135                                  	;mov	al,[es:1Ah]
  4136 0000103E 26A01A00                	mov	al,[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr
  4137                                  	;mov	al,[cs:PDB.JFN_TABLE+2] ; mov al,[cs:1Ah]
  4138 00001042 88C4                    	mov	ah,al			; AH = COMMAND stderr
  4139 00001044 8907                    	mov	[bx],ax			; set user's stdin/out to our stderr
  4140                                  	; 12/01/2023
  4141 00001046 1F                      	pop	ds			; restore registers
  4142 00001047 07                      	pop	es
  4143 00001048 58                      	pop	ax
  4144 00001049 5B                      	pop	bx
  4145                                  	;pop	ds ; MSDOS 3.3
  4146 0000104A C3                      	retn
  4147                                  
  4148                                  	;assume	ds:DATARES
  4149                                  GetComDsk2:
  4150 0000104B E81F00                  	call	GetComDsk
  4151 0000104E E9FBFE                  	jmp	LodCom1			; memory already allocated
  4152                                  
  4153                                  RestHand:
  4154 00001051 1E                      	push	ds
  4155 00001052 53                      	push	bx			; restore stdin, stdout to user
  4156 00001053 50                      	push	ax
  4157                                  	; 12/01/2023
  4158 00001054 B451                    	mov	ah,51h
  4159                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  4160 00001056 CD21                    	int	21h			; point to user's header
  4161 00001058 A1[4602]                	mov	ax,[Handle01]
  4162 0000105B 8EDB                    	mov	ds,bx
  4163                                  	;assume ds:NOTHING
  4164                                  	;lds	bx,[34h] 
  4165 0000105D C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to jfn table
  4166 00001061 8907                    	mov	[bx],ax			; stuff his old 0 and 1
  4167 00001063 58                      	pop	ax
  4168 00001064 5B                      	pop	bx
  4169 00001065 1F                      	pop	ds
  4170 00001066 C3                      	retn
  4171                                  
  4172                                  	;assume ds:DATARES,ss:DATARES
  4173                                  Hopeless:
  4174 00001067 BA[DC05]                	mov	dx,COMBAD
  4175 0000106A E9AEFD                  	jmp	FatalC
  4176                                  
  4177                                  GetComDsk:
  4178 0000106D A0[9402]                	mov	al,[ComDrv]
  4179 00001070 E849FF                  	call	RemCheck
  4180 00001073 75F2                    	jnz	short Hopeless		; non-removable media
  4181                                  GetComDsk3:
  4182 00001075 81FA[DC05]              	cmp	dx,COMBAD		; cmp dx,offset DATARES:ComBad
  4183 00001079 7503                    	jne	short GetComDsk4
  4184                                  	;;mov	dx,offset DATARES:ComBad ; DX = ptr to msg
  4185                                  	; 12/01/2023
  4186                                  	;;mov	dx,COMBAD ; (MSDOS 5.0 COMMAND.COM - RESGROUP:10A6h)
  4187                                  	; 05/06/2023
  4188                                  	;mov	dx,COMBAD ; (MSDOS 6.22 COMMAND.COM - RESGROUP:11B6h)
  4189                                  	;invoke	RPrint			; say COMMAND is invalid
  4190 0000107B E85D03                  	call	RPrint
  4191                                  	;call	RDISPMSG
  4192                                  
  4193                                  GetComDsk4:
  4194                                  
  4195                                  ;	Bugbug:	there's always a drive here? No need to check?
  4196                                  
  4197 0000107E 803E[2F02]00            	cmp	byte [PutBackDrv],0	; is there a drive in the comspec?
  4198 00001083 750A                    	jne	short Users_Drive	; yes - use it
  4199 00001085 B419                    	mov	ah,19h
  4200                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h ; use default drive
  4201                                  
  4202                                  ; 19/07/2024 - Retro DOS v5 COMMAND.COM
  4203                                  %if 0	; PCDOS 7.1 COMMAND.COM
  4204                                  	int	21h			; BX = user's header seg addr
  4205                                  %else
  4206 00001087 E8D500                  	call	int21h
  4207                                  %endif
  4208 0000108A 0441                    	add	al,"A"                  ; convert to ascii
  4209 0000108C A2[2F02]                	mov	[PutBackDrv],al		; put in message to print out
  4210                                  
  4211                                  Users_Drive:
  4212                                  	; 12/01/2023
  4213                                  	; MSDOS 6.0
  4214 0000108F BA[F205]                	mov	dx,PUTBACKMSG		; prompt for diskette
  4215                                  	;mov	si,offset DATARES:PutBackSubst
  4216                                  	;invoke	RPrint
  4217 00001092 BE[2902]                	mov	si,PutBackSubst		; containing COMMAND
  4218 00001095 E84303                  	call	RPrint
  4219                                  	;mov	dx,offset DATARES:Prompt
  4220                                  	;invoke	RPrint
  4221 00001098 BA[1406]                	mov	dx,PROMPT		; "Press any key"
  4222 0000109B E83D03                  	call	RPrint
  4223                                  
  4224                                  	; MSDOS 3.3
  4225                                  	;mov	dx,PUTBACKMSG		; prompt for diskette
  4226                                  	;call	RDISPMSG
  4227                                  	;mov	dx,[PUTBACKSUBSTPTR]
  4228                                  	;mov	si,[COMSPEC_END]
  4229                                  	;mov	byte [si+1],'$'
  4230                                  	;call	RDISPMSG
  4231                                  	;mov	byte [si+1],0
  4232                                  	;mov	dx,PROMPT
  4233                                  	;call	RDISPMSG
  4234                                  
  4235                                  	;call	GetRawFlushedByte
  4236                                  	;retn
  4237                                  	; 12/01/2023
  4238                                  	;jmp	short GetRawFlushedByte
  4239                                  
  4240                                  ;***	GetRawFlushedByte - flush world and get raw input
  4241                                  
  4242                                  GetRawFlushedByte:
  4243                                  	; 12/01/2023
  4244 0000109E B8070C                  	mov	ax,0C07h
  4245                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT ; 0C07h
  4246 000010A1 CD21                    	int	21h			; get char without testing or echo
  4247 000010A3 B8000C                  	mov	ax,0C00h
  4248                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + 0 ; 0C00h
  4249 000010A6 CD21                    	int	21h
  4250                                  
  4251                                  ;	Bugbug:	get rid of this return and the following retz.
  4252                                  
  4253                                  LoadCom_retn:
  4254 000010A8 C3                      	retn
  4255                                  
  4256                                  	; 21/04/2023
  4257                                  TryDoOpen:
  4258 000010A9 E8C1FF                  	call	GetComDsk
  4259                                  	;jmp	short LoadCom
  4260                                  
  4261                                  ;***	LoadCom - load in transient
  4262                                  
  4263                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4264                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:10DAh - CODERES:039Ah)
  4265                                  
  4266                                  LoadCom:
  4267                                  	;assume	ds:DATARES
  4268                                  	
  4269 000010AC 45                      	inc	bp				; flag command read
  4270                                  
  4271 000010AD BA[4B02]                	mov	dx,ComSpec
  4272 000010B0 B8003D                  	mov	ax,3D00h
  4273                                  	;mov	ax,OPEN<<8	; 3D00h
  4274 000010B3 CD21                    	int	21h				; open command.com
  4275 000010B5 730B                    	jnc	short ReadCom
  4276                                  	;cmp	ax,4
  4277 000010B7 83F804                  	cmp	ax,ERROR_TOO_MANY_OPEN_FILES
  4278 000010BA 75ED                    	jnz	short TryDoOpen
  4279 000010BC BA[9E06]                	mov	dx,NOHANDMES
  4280 000010BF E959FD                  	jmp	FatalC				; will never find a handle
  4281                                  
  4282                                  	; 21/04/2023
  4283                                  ;TryDoOpen:
  4284                                  	;call	GetComDsk
  4285                                  	;jmp	short LoadCom
  4286                                  
  4287                                  ReadCom:
  4288 000010C2 89C3                    	mov	bx,ax				; BX = handle
  4289                                  	;mov	dx,offset RESGROUP:TranStart
  4290                                  	; 05/06/2023
  4291                                  	;mov	dx,26E0h ; MSDOS 6.22 COMMAND.COM
  4292                                  	; 19/07/2024
  4293                                  	;mov	dx,2980h ; PCDOS 7.1 COMMAND.COM
  4294 000010C4 BAE027                  	mov	dx,TRANSTART
  4295 000010C7 31C9                    	xor	cx,cx				; CX:DX = seek loc
  4296 000010C9 B80042                  	mov	ax,4200h
  4297                                  	;mov	ax,LSEEK<<8	; 4200h
  4298 000010CC CD21                    	int	21h
  4299 000010CE 7210                    	jc	short WrongCom1
  4300                                  	; 12/01/2023
  4301                                  	;;mov	cx,offset TRANGROUP:TranSpaceEnd - 100h
  4302                                  	;mov	cx,97C5h		 ; MSDOS 5.0 COMMAND.COM
  4303                                  	; 05/06/2023
  4304                                  	;mov	cx,0AE95h		 ; MSDOS 6.22 COMMAND.COM
  4305                                  	; 19/07/2024
  4306                                  	;mov	cx,0A99Ah ; PCDOS 7.1 COMMAND.COM
  4307 000010D0 B97BA5                  	mov	cx,TRANSPACEEND-100h ; 4C5Ch (for original MSDOS 3.3!)
  4308 000010D3 1E                      	push	ds
  4309 000010D4 8E1E[8F02]              	mov	ds,[TrnSeg]
  4310                                  	;assume	ds:NOTHING
  4311 000010D8 BA0001                  	mov	dx,100h
  4312 000010DB B43F                    	mov	ah,3Fh
  4313                                  	;mov	ah,READ	; 3Fh
  4314 000010DD CD21                    	int     21h	; DOS - 2+ - READ FROM FILE WITH HANDLE
  4315                                  			; BX = file handle, CX = number of bytes to read
  4316                                  			; DS:DX -> buffer
  4317 000010DF 1F                      	pop	ds
  4318                                  	;assume	ds:DATARES
  4319                                  WrongCom1:
  4320 000010E0 9C                      	pushf
  4321 000010E1 50                      	push	ax
  4322 000010E2 B43E                    	mov	ah,3Eh
  4323                                  	;mov	ah,CLOSE ; 3Eh
  4324 000010E4 CD21                    	int	21h			; close command.com
  4325 000010E6 58                      	pop	ax
  4326 000010E7 9D                      	popf
  4327 000010E8 7204                    	jc	short WrongCom		; error on read
  4328 000010EA 39C8                    	cmp	ax,cx
  4329                                  	;retz				; size matched
  4330 000010EC 74BA                    	jz	short LoadCom_retn
  4331                                  WrongCom:
  4332 000010EE BA[DC05]                	mov	dx,COMBAD
  4333 000010F1 E879FF                  	call	GetComDsk
  4334 000010F4 EBB6                    	jmp	short LoadCom		; try again
  4335                                  
  4336                                  ;***	ChkSum - compute transient checksum
  4337                                  
  4338                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4339                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1129h
  4340                                  	
  4341                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4342                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1239h
  4343                                  
  4344                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4345                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1207h
  4346                                  ChkSum:
  4347 000010F6 1E                      	push	ds
  4348 000010F7 8E1E[8F02]              	mov	ds,[TrnSeg]
  4349 000010FB BE0001                  	mov	si,100h
  4350                                  	;;;mov	cx,offset TRANGROUP:TranDataEnd - 100h
  4351                                  	;;mov	cx,87C2h ; MSDOS 5.0
  4352                                  	; 05/06/2023
  4353                                  	;mov	cx,9D53h ; MSDOS 6.22
  4354                                  	; 19/07/2024
  4355                                  	;mov	cx,9B47h ; PCDOS 7.1 COMMAND.COM
  4356 000010FE B9[B196]                	mov	cx,TRANDATAEND-100h ; 3E44h (for original MSDOS 3.3!)
  4357                                  Check_Sum:
  4358 00001101 FC                      	cld
  4359 00001102 D1E9                    	shr	cx,1
  4360 00001104 31D2                    	xor	dx,dx
  4361                                  
  4362                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4363                                  %if 1  ; PCDOS 7.1 COMMAND.COM
  4364 00001106 C606[D88F]FF            	mov	byte [msg_disp_class],0FFh
  4365 0000110B 8916[DA8F]              	mov     [extend_buf_ptr],dx ; 0
  4366 0000110F 8816[DC8F]              	mov     [extend_buf_sub],dl ; 0
  4367                                  %endif	
  4368                                  
  4369                                  Chk:
  4370 00001113 AD                      	lodsw
  4371 00001114 01C2                    	add	dx,ax
  4372 00001116 83D200                  	adc	dx,0
  4373 00001119 E2F8                    	loop	Chk
  4374                                  
  4375                                  	; 04/05/2023
  4376 0000111B 1F                      	pop	ds
  4377                                  
  4378                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4379 0000111C 3B16[9702]              	cmp	dx,[Sum]
  4380                                  
  4381                                  	;pop	ds ; 04/05/2023
  4382 00001120 C3                      	retn
  4383                                  
  4384                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4385                                  ; ---------------------------------------
  4386                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:122Eh
  4387                                  %if 1
  4388                                  chk_transient:	; check transient portion is valid or not
  4389 00001121 1E                      	push    ds
  4390 00001122 8E1E[8F02]              	mov     ds,[TrnSeg]
  4391 00001126 813E[0401]9090          	cmp	word [TCOMMAND],9090h ; nop, nop
  4392 0000112C 1F                      	pop     ds
  4393 0000112D C3                      	retn
  4394                                  %endif
  4395                                  ; ---------------------------------------
  4396                                  
  4397                                  ;***	SetVect - set interrupt vectors
  4398                                  
  4399                                  SetVect:
  4400                                  
  4401                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4402                                  ; PCDOS 7.1 COMMAND.COM
  4403                                  %if 0
  4404                                  	;mov	dx,offset DATARES:LodCom_Trap 
  4405                                  	; 12/01/2023
  4406                                  	mov	dx,LodCom_Trap
  4407                                  	;mov	dx,LODCOM ; MSDOS 3.3
  4408                                  	mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  4409                                  	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4410                                  
  4411                                  	mov	ax,2522h
  4412                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8) | 22h  ; 2522h
  4413                                  	int	21h
  4414                                  	;mov	dx,offset DATARES:Ctrlc_Trap
  4415                                  	mov	dx,Ctrlc_Trap
  4416                                  	;mov	dx,CONTC ; MSDOS 3.3
  4417                                  	inc	al	; 23h
  4418                                  	int	21h
  4419                                  	;mov	dx,offset DATARES:CritErr_Trap
  4420                                  	mov	dx,CritErr_Trap
  4421                                  	;mov	dx,CRITERR ; MSDOS 3.3
  4422                                  	inc	al	; 24h
  4423                                  	int	21h
  4424                                  	retn
  4425                                  %else
  4426                                  	; PCDOS 7.1 COMMAND.COM
  4427                                  	;mov	dx,LodCom_Trap
  4428                                  	;mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  4429                                  	;mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4430                                  
  4431                                  	;push	es
  4432                                  	;push	bx
  4433                                  	;xor	bx,bx
  4434                                  	;mov	es,bx
  4435                                  	;mov 	bl,88h		; INT 22h vector
  4436                                  	;cli
  4437                                  	;mov	[es:bx],dx
  4438                                  	;mov	[es:bx+2],ds
  4439                                  	;mov	dx,Ctrlc_Trap
  4440                                  	;mov	bl,8Ch		; INT 23h vector
  4441                                  	;mov	[es:bx],dx
  4442                                  	;mov	[es:bx+2],ds
  4443                                  	;mov	dx,CritErr_Trap
  4444                                  	;mov	bl,90h		; INT 24h vector
  4445                                  	;mov 	[es:bx],dx
  4446                                  	;mov	[es:bx+2],ds
  4447                                  	;sti
  4448                                  	;pop	bx
  4449                                  	;pop	es
  4450                                  	;retn
  4451                                  
  4452                                  	; 19/07/2024
  4453                                  	; Retro DOS v5.0 COMMAND.COM
  4454                                  
  4455 0000112E 06                      	push	es
  4456                                  	;push	di
  4457 0000112F 31FF                    	xor	di,di
  4458 00001131 8EC7                    	mov	es,di
  4459 00001133 BF8800                  	mov	di,88h
  4460 00001136 1E                      	push	ds
  4461 00001137 1E                      	push	ds
  4462 00001138 1E                      	push	ds
  4463 00001139 B8[E000]                	mov	ax,LodCom_Trap
  4464 0000113C A30A00                  	mov	[PDB.EXIT],ax	; mov ds:0Ah,ax
  4465 0000113F 8C1E0C00                	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  4466 00001143 FA                      	cli	
  4467 00001144 AB                      	stosw
  4468 00001145 58                      	pop	ax	; segment (ds)
  4469 00001146 AB                      	stosw
  4470 00001147 B8[AC00]                	mov	ax,Ctrlc_Trap
  4471 0000114A AB                      	stosw
  4472 0000114B 58                      	pop	ax	; segment (ds)
  4473 0000114C AB                      	stosw
  4474 0000114D B8[B700]                	mov	ax,CritErr_Trap
  4475 00001150 AB                      	stosw
  4476 00001151 58                      	pop	ax	; segment (ds)
  4477 00001152 AB                      	stosw
  4478 00001153 FB                      	sti
  4479                                  	;pop	di
  4480 00001154 07                      	pop	es
  4481 00001155 C3                      	retn
  4482                                  %endif
  4483                                  
  4484                                  ; ----------------------
  4485                                  	; MSDOS 6.0
  4486                                  ;;SR;
  4487                                  ;We have this to take care of the extra values pushed on the stack by
  4488                                  ;the stub before jumping to LodCom1. We set up ds here and then jump to
  4489                                  ;Lodcom1
  4490                                  
  4491                                  ;public	TrnLodCom1
  4492                                  	; 12/01/2023
  4493                                  TrnLodCom1:
  4494 00001156 1F                      	pop	ds			; ds = DATARES
  4495 00001157 83C402                  	add	sp,2
  4496                                  ;	pop	ds:OldDS
  4497 0000115A E9EFFD                  	jmp	LodCom1
  4498                                  ; ----------------------
  4499                                  
  4500                                  ; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4501                                  ; ---------------------------------------
  4502                                  %if 1	; PCDOS 7.1 COMMAND.COM
  4503                                  int21h_close:
  4504 0000115D B43E                    	mov	ah,3Eh ; CLOSE file
  4505                                  int21h:
  4506                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1272h
  4507 0000115F 06                      	push	es
  4508 00001160 53                      	push	bx
  4509 00001161 31DB                    	xor	bx,bx
  4510 00001163 8EC3                    	mov	es,bx ; 0
  4511 00001165 5B                      	pop	bx
  4512 00001166 9C                      	pushf			; Int 21h simulation (ES=0)
  4513 00001167 FA                      	cli
  4514                                  	;call	dword ptr es:84h
  4515 00001168 26FF1E8400              	call	far [es:84h]	; INT 21h handler
  4516 0000116D 07                      	pop	es
  4517 0000116E C3                      	retn
  4518                                  %endif
  4519                                  ; ---------------------------------------
  4520                                  
  4521                                  ;=============================================================================
  4522                                  ; RUCODE.ASM, MSDOS 6.0, 1991
  4523                                  ;=============================================================================
  4524                                  ; 22/09/2018 - Retro DOS v3.0
  4525                                  
  4526                                  ;	title	Localizable code for resident COMMAND
  4527                                  
  4528                                  	;assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  4529                                  
  4530                                  ; ----------------------------------------------------------------------------
  4531                                  ;***	AskEnd - ask user to confirm batch file termination
  4532                                  ;
  4533                                  ;	Confirm with user before freeing batch ...
  4534                                  ;
  4535                                  ;	ENTRY	nothing
  4536                                  ;
  4537                                  ;	EXIT	CY = set if batch termination is confirmed
  4538                                  ;
  4539                                  ;		CY = clear if batch should continue
  4540                                  ;
  4541                                  ;	USED	AX,DX,...
  4542                                  ;
  4543                                  ;	Bugbug:	move this to transient, copy to batch segment.
  4544                                  ;	Bugbug:	or move it to command1 1st.
  4545                                  ;
  4546                                  ;	Bugbug: No_Char and Yes_Char should be constants.
  4547                                  ; ----------------------------------------------------------------------------
  4548                                  
  4549                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4550                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1169h (CODERES:0429h)
  4551                                  
  4552                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  4553                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1279h (CODERES:0429h)
  4554                                  
  4555                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4556                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1289h
  4557                                  AskEnd:
  4558                                  	;assume	ds:DATARES
  4559                                  
  4560 0000116F BA[3606]                	mov	dx,ENDBATMES			; DX = message #
  4561 00001172 E86602                  	call	RPrint
  4562                                  	;call	RDISPMSG  ; MSDOS 3.3
  4563 00001175 B8010C                  	mov	ax,0C01h
  4564                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT  ;0C01h
  4565 00001178 CD21                    	int     21h             ; DOS - CLEAR KEYBOARD BUFFER
  4566                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
  4567 0000117A E8F702                  	call	CharToUpper			; change to upper case
  4568 0000117D 3A06[3D05]              	cmp	al,[NO_CHAR]
  4569 00001181 7407                    	je	short aeRet			; answer is no (CY is clear)
  4570 00001183 3A06[3C05]              	cmp	al,[YES_CHAR]
  4571 00001187 75E6                    	jne	short AskEnd			; invalid response, try again
  4572 00001189 F9                      	stc					; answer is yes
  4573                                  aeRet:	
  4574 0000118A C3                      	retn
  4575                                  
  4576                                  ; ----------------------------------------------------------------------------
  4577                                  ;***	DskErr - critical error handler
  4578                                  ;
  4579                                  ;	Default critical error handler unless user intercepts int 24h.
  4580                                  ;
  4581                                  ;	ENTRY	int 24h
  4582                                  ;
  4583                                  ;	EXIT
  4584                                  ;
  4585                                  ;	USED
  4586                                  ;
  4587                                  ;	EFFECTS
  4588                                  ; ----------------------------------------------------------------------------
  4589                                  
  4590                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4591                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1185h (CODERES:0445h)
  4592                                  
  4593                                  	; 19/07/2024 - Retro DOS v5.0 COMMAND.COM
  4594                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:12A5h
  4595                                  
  4596                                  ;SR; 
  4597                                  ;The stub is going to push the old ds value and the resident data segment
  4598                                  ;onto the stack in that order. Get it off the stack
  4599                                  
  4600                                  ;DskErr	proc	far
  4601                                  DSKERR:
  4602                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  4603                                  	; 12/01/2023
  4604 0000118B 1F                      	pop	ds			; ds = DATARES
  4605                                  	;assume ds:DATARES
  4606 0000118C 8F06[2E05]              	pop	word [OldDS]		; save old ds value
  4607                                  
  4608                                  ;CRITERR: ; MSDOS 3.3
  4609 00001190 FB                      	sti
  4610                                  	; 12/01/2023
  4611                                  	;push	ds ; 25/09/2018
  4612 00001191 06                      	push	es
  4613 00001192 56                      	push	si
  4614 00001193 51                      	push	cx
  4615 00001194 57                      	push	di
  4616 00001195 51                      	push	cx
  4617 00001196 50                      	push	ax
  4618                                  
  4619 00001197 1E                      	push	ds			;save our data segment
  4620                                  	;push	cs ; 25/09/2018
  4621 00001198 07                      	pop	es			;es = DATARES
  4622                                  
  4623 00001199 8EDD                    	mov	ds,bp
  4624                                  	;assume	ds:nothing
  4625                                  
  4626                                  	;mov	ax,[si].SDEVATT
  4627 0000119B 8B4404                  	mov	ax,[si+SYSDEV.ATT] ; mov ax,[si+4]	
  4628 0000119E 268826[2502]            	mov	[es:CDevAt],ah
  4629                                  
  4630                                  	;push	cs
  4631                                  	;pop	es
  4632                                  
  4633 000011A3 BF[1802]                	mov	di,DevName
  4634 000011A6 B90800                  	mov	cx,8
  4635                                  	;add	si,SDEVNAME  ; add si,10
  4636 000011A9 83C60A                  	add	si,SYSDEV.NAME	; save device name (even for block device)
  4637                                  				
  4638 000011AC FC                      	cld
  4639 000011AD F3A4                    	rep	movsb
  4640 000011AF 58                      	pop	ax
  4641 000011B0 59                      	pop	cx
  4642 000011B1 5F                      	pop	di
  4643                                  
  4644                                  ;	Stack still contains DS and ES.
  4645                                  
  4646                                  ;SR;
  4647                                  ;We need ds = DATARES for SavHand
  4648                                  
  4649                                  	 ;12/01/2023
  4650 000011B2 06                      	push	es
  4651 000011B3 1F                      	pop	ds
  4652                                  	;assume	ds:DATARES
  4653                                  
  4654                                  	;invoke	SavHand		; save user's stdin/out, set to our stderr
  4655 000011B4 E870FE                  	call	SavHand
  4656                                  
  4657                                  	; 12/01/2023
  4658                                  	; 25/09/2018
  4659                                  	;;push	cs
  4660                                  	;push	es
  4661                                  	;pop	ds		; set up local data segment
  4662                                  	;assume	ds:resgroup
  4663                                  
  4664 000011B7 52                      	push	dx
  4665 000011B8 E81D02                  	call	crlf
  4666 000011BB 5A                      	pop	dx
  4667                                  
  4668                                  ;	Bugbug:	rename Crit_Err_Info to CritErrAH?
  4669                                  
  4670 000011BC 8826[9C02]              	mov	[Crit_Err_Info],ah	; save critical error flags
  4671                                  
  4672                                  ;	Compute and save ASCII drive letter (nonsense for char devices)
  4673                                  
  4674 000011C0 0441                    	add	al,'A'
  4675 000011C2 A2[0502]                	mov	[DrvLet],al
  4676                                  
  4677                                  ;	Bugbug:	These labels are awful. Change, especially 'NoHardE'.
  4678                                  
  4679 000011C5 F6C480                  	test	ah,80h
  4680 000011C8 740A                    	jz	short NoHardE		; it's a disk-device error
  4681 000011CA F606[2502]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4682 000011CF 7503                    	jnz	short NoHardE		; it's a character device
  4683 000011D1 E9F701                  	jmp	FatErr			; it's a FAT error
  4684                                  
  4685                                  NoHardE:
  4686 000011D4 BE[5E05]                	mov	si,MREAD		; SI = "read" msg #
  4687 000011D7 F6C401                  	test	ah,1
  4688 000011DA 7403                    	jz	short SavMes		; it's a read error
  4689 000011DC BE[6705]                	mov	si,MWRITE		; SI = "write" msg #
  4690                                  SavMes:
  4691 000011DF 893E[5C04]              	mov	[OldErrNo],di		; save critical error code
  4692                                  
  4693                                  ;	Bugbug:	don't need to save/restore all here?
  4694                                  
  4695 000011E3 06                      	push	es
  4696                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4697                                  	;push	ds			; GetExtendedError likes to STOMP
  4698                                  	; 12/01/2023
  4699                                  	; (all registers are changed -in dos service- except bp) *
  4700                                  	;push	bp
  4701                                  	; 19/07/2024
  4702                                  	;push	si
  4703                                  	;push	dx
  4704 000011E4 51                      	push	cx
  4705 000011E5 53                      	push	bx
  4706                                  	; 05/06/2023
  4707 000011E6 B459                    	mov	ah,59h ; *
  4708                                  	;mov	ah,GetExtendedError ; 59h ; get extended error info
  4709 000011E8 CD21                    	int	21h
  4710 000011EA 5B                      	pop	bx
  4711 000011EB 59                      	pop	cx
  4712                                  	; 19/07/2024
  4713                                  	;pop	dx
  4714                                  	;pop	si
  4715                                  	; 12/01/2023
  4716                                  	;pop	bp
  4717                                  	; 19/07/2024
  4718                                  	;pop	ds
  4719 000011EC 893E[3302]              	mov	[NeedVol],di		; save possible ptr to volume label
  4720 000011F0 8C06[3502]              	mov	[NeedVol+2],es
  4721 000011F4 07                      	pop	es
  4722                                  
  4723                                  ;	Bugbug:	AX has extended error code, so no need to zero AH?
  4724                                  
  4725                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4726                                  	;xor	ah,ah
  4727 000011F5 89C7                    	mov	di,ax			; DI = error code
  4728                                  
  4729                                  ; Bugbug: somewhat obsolete documentation?
  4730                                  ;
  4731                                  ; DI is now the correct error code. Classify things to see what we are
  4732                                  ; allowed to report. We convert DI into a 0-based index into a message table.
  4733                                  ; This presumes that the int 24 errors (oldstyle) and new errors (sharing and
  4734                                  ; the like) are contiguous.
  4735                                  
  4736                                  ;	Bugbug:	simplify following code by cmp'ing instead of sub'ing.
  4737                                  ;	Check use of ErrCd_24, though.
  4738                                  
  4739 000011F7 83EF13                  	sub	di,ERROR_WRITE_PROTECT ; 13h
  4740 000011FA 7303                    	jae	short HavCod
  4741                                  
  4742                                  ;	Bugbug:	wouldn't it be better to display the original error msg,
  4743                                  ;	even though it's not a critical error?
  4744                                  
  4745 000011FC BF0C00                  	mov	di,ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT ; mov di,0Ch
  4746                                  
  4747                                  ; DI now has the mapped error code. Old style errors are:
  4748                                  ;   FOOBAR <read|writ>ing drive ZZ.
  4749                                  ; New style errors are:
  4750                                  ;   FOOBAR
  4751                                  ; We need to figure out which the particular error belongs to.
  4752                                  
  4753                                  HavCod:
  4754 000011FF C606[3702]00            	mov	byte [ErrType],0	; assume old style
  4755 00001204 83FF10                  	cmp	di,ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT  ; cmp di,10h
  4756 00001207 7405                    	je	short SetStyle
  4757 00001209 83FF11                  	cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4758 0000120C 7504                    	jne	short GotStyle
  4759                                  
  4760                                  SetStyle:
  4761                                  ;	Bugbug:	use INC
  4762                                  	;mov	byte [ErrType],1		; must be new type
  4763 0000120E FE06[3702]              	inc	byte [ErrType] ; Retro DOS v3.0 COMMAND.COM - 22/09/2018
  4764                                  
  4765                                  GotStyle:
  4766 00001212 893E[4402]              	mov	[ErrCd_24],di
  4767                                  	; 12/01/2023
  4768                                  	; 25/09/2018
  4769                                  	; MSDOS 6.0
  4770 00001216 83FF14                  	cmp	di,ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT ; cmp di,14h
  4771                                  	; MSDOS 3.3
  4772                                  	;cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4773                                  
  4774                                  						; If the error message is unknown
  4775 00001219 7641                    	jbe	short NormalError		;  redirector, continue. Otherwise,
  4776                                  
  4777                                  ; We do not know how to handle this error. Ask IFSFUNC if she knows
  4778                                  ; how to handle things
  4779                                  
  4780                                  ;input to IFSFUNC:    AL=1
  4781                                  ;		      BX=extended error number
  4782                                  ;
  4783                                  ;output from IFSFUNC: AL=error type (0 or 1)
  4784                                  ;			 0=<message> error (read/writ)ing (drive/device) xxx
  4785                                  ;			   Abort, Retry, Ignore
  4786                                  ;			 1=<message>
  4787                                  ;			   Abort, Retry, Ignore
  4788                                  ;		      ES:DI=pointer to message text
  4789                                  ;		      carry set=>no message
  4790                                  
  4791 0000121B 89C7                    	mov	di,ax			; retrieve correct extended error...
  4792 0000121D B80005                  	mov	ax,0500h		; is the redir there?
  4793 00001220 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
  4794                                  			; Return: AL = 00h not installed, OK to install
  4795                                  			; 01h not installed, can't install
  4796                                  			; FFh installed
  4797 00001222 3CFF                    	cmp	al,0FFh
  4798 00001224 7529                    	jne	short NoHandler		; no, go to NoHandler
  4799                                  
  4800                                  	; 12/01/2023
  4801                                  	; MSDOS 6.0
  4802 00001226 53                      	push	bx
  4803 00001227 89FB                    	mov	bx,di			; get ErrType and ptr to error msg
  4804 00001229 B80105                  	mov	ax,0501h
  4805 0000122C CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4806 0000122E 5B                      	pop	bx 
  4807 0000122F 721E                    	jc	short NoHandler
  4808                                  	
  4809                                  	; MSDOS 3.3
  4810                                  	;mov     ax,di
  4811                                  	;mov     ah,5
  4812                                  	;int     2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4813                                  	;jc      short NOHANDLER
  4814                                  
  4815                                  ;	Bugbug:	need to record error type?
  4816                                  
  4817 00001231 A2[3702]                	mov	[ErrType],al
  4818                                  
  4819 00001234 1E                      	push	ds
  4820 00001235 06                      	push	es
  4821 00001236 1F                      	pop	ds
  4822 00001237 89FA                    	mov	dx,di
  4823 00001239 B9FFFF                  	mov	cx,-1			; find end of msg
  4824 0000123C 30C0                    	xor	al,al
  4825                                  
  4826 0000123E FC                      	cld
  4827 0000123F F2AE                    	repnz	scasb
  4828                                  
  4829                                  ;	Bugbug:	we can do better than this.
  4830                                  
  4831                                  	;mov	byte [di-1],'$'
  4832                                  	; 19/07/2024
  4833 00001241 4F                      	dec	di
  4834 00001242 C60524                  	mov	byte [di],'$'
  4835                                  
  4836                                  	;CALL	RDISPMSG ; MSDOS 3.3
  4837                                  	
  4838 00001245 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9	; print the message
  4839 00001247 CD21                    	int	21h
  4840                                  
  4841                                  	;mov	byte [di-1],0			; restore terminal byte
  4842                                  	; 19/07/2024
  4843 00001249 C60500                  	mov	byte [di],0
  4844                                  
  4845 0000124C 1F                      	pop	ds				; clean up and continue
  4846 0000124D EB15                    	jmp	short CheckErrType
  4847                                  
  4848                                  ;*	Redir isn't available or doesn't recognize the error.
  4849                                  ;	Restore regs to unextended error.
  4850                                  
  4851                                  NoHandler:
  4852 0000124F C606[3702]00            	mov	byte [ErrType],0
  4853                                  ;	Bugbug:	won't this break, since we add error_write_protect back in?
  4854 00001254 8B3E[5C04]              	mov	di,[OldErrNo]
  4855 00001258 893E[4402]              	mov	[ErrCd_24],di
  4856                                  
  4857                                  NormalError:
  4858                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4859                                  	; MSDOS 6.0
  4860 0000125C 83C713                  	add	di,ERROR_WRITE_PROTECT
  4861 0000125F 87FA                    	xchg	di,dx			; may need dx later
  4862 00001261 E89001                  	call	RPrintCrit		; print error type
  4863                                  
  4864                                  	; MSDOS 3.3
  4865                                  	;shl     di,1
  4866                                  	;mov     di,[CRMSGTBL+di]
  4867                                  	;xchg    di,dx
  4868                                  	;call    RDISPMSG
  4869                                  
  4870                                  CheckErrType:
  4871 00001264 803E[3702]00            	cmp	byte [ErrType],0	; Check error style...
  4872 00001269 7405                    	je	short ContOld
  4873 0000126B E86A01                  	call	crlf			; if new style then done printing
  4874 0000126E EB31                    	jmp	short Ask
  4875                                  
  4876                                  ContOld:
  4877                                  	; 12/01/2023
  4878                                  	; MSDOS 6.0
  4879 00001270 46                      	inc	si			; DS:SI = ptr to asciiz string
  4880                                  
  4881                                  ;	Bugbug:	combine some of the following two sections?
  4882                                  
  4883                                  	; 12/01/2023
  4884 00001271 F606[2502]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4885                                  	;test	byte [CDevAt],DEVTYP shr 8 ; 80h
  4886 00001276 740F                    	jz	short BlkErr
  4887                                  	;;mov	dx,offset DATARES:CharDevErr	; DX = ptr to device message
  4888                                  	;mov	dx,ChardevErr
  4889 00001278 BA[7F05]                	mov	dx,MDEVICE
  4890                                  	;mov	[CharDevErrRw.SubstPtr],si	; point to read/write string
  4891 0000127B 8936[0702]              	mov	[CharDevErrRw],si
  4892                                  	;mov	si,offset DATARES:CharDevErrSubst; SI = ptr to subst block
  4893 0000127F BE[0602]                	mov	si,CharDevErrSubst
  4894                                  
  4895 00001282 E85601                  	call	RPrint				; print the message
  4896 00001285 EB1A                    	jmp	short Ask			; don't ralph on command
  4897                                  
  4898                                  	; 12/01/2023
  4899                                  	; MSDOS 3.3
  4900                                  	;mov	dx,ERRMES
  4901                                  	;call	RDISPMSG
  4902                                  	;mov	dx,si
  4903                                  	;call	RDISPMSG
  4904                                  	;
  4905                                  	;test	byte [CDevAt],80h
  4906                                  	;jz	short BLKERR
  4907                                  	;mov	dx,CHARDEVERR	; " device "
  4908                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4909                                  	;int	21h		; DOS - PRINT STRING
  4910                                  	;			; DS:DX -> string terminated by "$"
  4911                                  	;jmp	short ASK
  4912                                  
  4913                                  BlkErr:
  4914                                  	; 12/01/2023
  4915                                  	; MSDOS 6.0
  4916                                  	;;mov	dx,offset DATARES:BlkDevErr	; DX = error msg #
  4917                                  	;mov	dx,BlkDevErr
  4918 00001287 BA[7005]                	mov	dx,MDRIVE
  4919                                  	;mov	[BlkDevErrRw.SubstPtr],si	; "reading","writing" ptr
  4920 0000128A 8936[0002]              	mov	[BlkDevErrRw],si
  4921                                  	;mov	si,offset DATARES:BlkDevErrSubst ; SI = ptr to subst block
  4922 0000128E BE[FF01]                	mov	si,BlkDevErrSubst
  4923 00001291 E84701                  	call	RPrint
  4924                                  
  4925                                  	; MSDOS 3.3
  4926                                  	;mov	dx,BLKDEVERR
  4927                                  	;call	RDISPMSG
  4928                                  
  4929 00001294 803E[4802]00            	cmp	byte [Loading],0
  4930 00001299 7406                    	jz	short Ask
  4931 0000129B E8B3FD                  	call	RestHand
  4932 0000129E E9AAFD                  	jmp	GetComDsk2		; if error loading COMMAND, re-prompt
  4933                                  Ask:
  4934 000012A1 833E[4402]0F            	cmp	word [ErrCd_24],15	; error 15 has an extra message
  4935 000012A6 751E                    	jne	short Not15		; not error 15
  4936                                  
  4937                                  ;*	For error 15, tell the user which volume/serial # are needed.
  4938                                  
  4939 000012A8 51                      	push	cx
  4940                                  
  4941                                  ;	Bugbug:	does this push/pop need to be done?
  4942                                  
  4943 000012A9 1E                      	push	ds
  4944 000012AA 07                      	pop	es
  4945 000012AB C536[3302]              	lds	si,[NeedVol]
  4946                                  	;assume	ds:NOTHING
  4947 000012AF 57                      	push	di
  4948 000012B0 BF[1502]                	mov	di,VolName
  4949                                  	; 12/01/2023
  4950                                  	; MSDOS 6.0
  4951 000012B3 B91000                  	mov	cx,16			; copy volume name & serial #
  4952                                  	; MSDOS 3.3
  4953                                  	;mov	cx,11			; copy volume name
  4954 000012B6 FC                      	cld
  4955 000012B7 F3A4                    	rep	movsb
  4956 000012B9 5F                      	pop	di
  4957 000012BA 06                      	push	es
  4958 000012BB 1F                      	pop	ds
  4959 000012BC 59                      	pop	cx
  4960                                  	;assume	ds:DATARES
  4961                                  	; 12/01/2023
  4962                                  	; MSDOS 6.0
  4963                                  	;mov	dx,offset DATARES:NeedVolMsg	; DX = ptr to msg
  4964                                  	;mov	si,offset DATARES:NeedVolSubst	; DS:SI = ptr to subst block
  4965                                  	;mov	dx,NeedVolMsg
  4966 000012BD BA[8F05]                	mov	dx,MVOLSERIAL
  4967 000012C0 BE[0C02]                	mov	si,NeedVolSubst
  4968 000012C3 E81501                  	call	RPrint
  4969                                  
  4970                                  	; MSDOS 3.3
  4971                                  	;mov	dx,NEEDVOLMSG
  4972                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4973                                  	;int	21h		; DOS - PRINT STRING
  4974                                  	;			; DS:DX -> string terminated by "$"
  4975                                  Not15:
  4976                                  ;*	Print abort, retry, ignore, fail message.
  4977                                  ;	Print only options that are valid.
  4978                                  
  4979                                  ;	Bugbug:	sizzle this.
  4980                                  
  4981                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4982 000012C6 BA[3E05]                	mov	dx,REQ_ABORT
  4983 000012C9 E80F01                  	call	RPrint
  4984                                  	;call	RDISPMSG
  4985 000012CC F606[9C02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED  ; 10h
  4986 000012D1 7406                    	jz	short Try_Ignore
  4987 000012D3 BA[4405]                	mov	dx,REQ_RETRY
  4988 000012D6 E80201                  	call	RPrint
  4989                                  	;call	RDISPMSG
  4990                                  Try_Ignore:
  4991 000012D9 F606[9C02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h
  4992 000012DE 7406                    	jz	short Try_Fail
  4993 000012E0 BA[4C05]                	mov	dx,REQ_IGNORE
  4994 000012E3 E8F500                  	call	RPrint
  4995                                  	;call	RDISPMSG
  4996                                  Try_Fail:
  4997 000012E6 F606[9C02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED   ; 08h
  4998 000012EB 7406                    	jz	short Term_Question
  4999 000012ED BA[5505]                	mov	dx,REQ_FAIL
  5000 000012F0 E8E800                  	call	RPrint
  5001                                  	;call	RDISPMSG
  5002                                  Term_Question:
  5003 000012F3 BA[5C05]                	mov	dx,REQ_END
  5004 000012F6 E8E200                  	call	RPrint
  5005                                  	;call	RDISPMSG
  5006                                  
  5007                                  ;	If the /f switch was given, we fail all requests.
  5008                                  
  5009 000012F9 F606[A902]FF            	test	byte [fFail],-1
  5010 000012FE 741B                    	jz	short DoPrompt
  5011 00001300 B403                    	mov	ah,3				; signal fail
  5012 00001302 E9B700                  	jmp	EExit
  5013                                  
  5014                                  	; 16/04/2023
  5015                                  Abort_Process:
  5016 00001305 F606[1203]01            	test	byte [InitFlag],INITINIT ; 1	; COMMAND init interrupted?
  5017 0000130A 746C                    	jz	short AbortCont			; no, handle it normally
  5018 0000130C 803E[A202]00            	cmp	byte [PermCom],0		; are we top level process?
  5019 00001311 745A                    	jz	short JustExit			; yes, just exit
  5020                                  
  5021 00001313 BA[DC0C]                	mov	dx,PATRICIDE			; no, load ptr to error msg
  5022                                  	; 12/01/2023
  5023 00001316 E8C200                  	call	RPrint				; print it
  5024                                  	;call	RDISPMSG
  5025                                  DeadInTheWater:
  5026 00001319 EBFE                    	jmp	short DeadInTheWater		; loop until the user reboots
  5027                                  
  5028                                  DoPrompt:
  5029                                  	; 12/01/2023
  5030 0000131B B8010C                  	mov	ax,0C01h
  5031                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT ; 0C01h
  5032 0000131E CD21                    	int	21h				; get response
  5033                                  
  5034                                  ; 21/07/2024 - PCDOS 7.1 COMMAND.COM
  5035                                  %if 1
  5036                                  ;ifdef DBCS
  5037                                  	;invoke	TestKanjR			; 3/3/KK
  5038 00001320 E85A01                  	call	ITestKanj
  5039 00001323 740A                    	jz	short NotKanj			; 3/3/KK
  5040                                   
  5041                                  	;mov	ax,(STD_CON_INPUT shl 8) ; eat the 2nd byte of ECS code  3/3/KK
  5042 00001325 B80001                  	mov	ax,0100h
  5043 00001328 CD21                    	int	21h				; 3/3/KK
  5044 0000132A E8AB00                  	call	crlf				; 3/3/KK
  5045                                  	;jmp	short Ask			; 3/3/KK
  5046                                  	; 22/07/2024
  5047 0000132D EB3B                    	jmp	short AskJ
  5048                                  NotKanj:
  5049                                  ;endif
  5050                                  %endif
  5051 0000132F E8A600                  	call	crlf
  5052 00001332 E83F01                  	call	CharToUpper			; convert to upper case
  5053 00001335 B400                    	mov	ah,0				; return code for ignore
  5054 00001337 F606[9C02]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h ; is ignore allowed?
  5055 0000133C 7406                    	jz	short User_Retry
  5056 0000133E 3A06[3A05]              	cmp	al,[IGNORE_CHAR]		; ignore?
  5057                                  	;jz	short EExitJ
  5058                                  	; 16/04/2023
  5059 00001342 7478                    	jz	short EExit
  5060                                  
  5061                                  ;	Bugbug:	optimize following code.
  5062                                  
  5063                                  User_Retry:
  5064 00001344 FEC4                    	inc	ah				; return code for retry
  5065 00001346 F606[9C02]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED ; 10h ; is retry allowed?
  5066 0000134B 7406                    	jz	short User_Abort
  5067 0000134D 3A06[3905]              	cmp	al,[RETRY_CHAR]			; retry?
  5068                                  	;jz	short EExitJ
  5069                                  	; 16/04/2023
  5070 00001351 7469                    	jz	short EExit
  5071                                  User_Abort:
  5072 00001353 FEC4                    	inc	ah				; return code for abort
  5073                                  						;  (abort always allowed)
  5074 00001355 3A06[3805]              	cmp	al,[ABORT_CHAR]			; abort?
  5075 00001359 74AA                    	jz	short Abort_Process		; exit user program
  5076 0000135B FEC4                    	inc	ah				; return code for fail
  5077 0000135D F606[9C02]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED ; 08h ; is fail allowed?
  5078 00001362 7406                    	jz	short AskJ
  5079 00001364 3A06[3B05]              	cmp	al,[FAIL_CHAR]			; fail?
  5080                                  	;jz	short EExitJ
  5081                                  	; 16/04/2023
  5082 00001368 7452                    	jz	short EExit
  5083                                  AskJ:
  5084 0000136A E934FF                  	jmp	Ask
  5085                                  
  5086                                  	; 12/01/2023
  5087                                  ;EExitJ:
  5088                                  	;jmp	short EExit
  5089                                  
  5090                                  JustExit:
  5091                                  	;assume	ds:DATARES
  5092                                  	; 12/01/2023
  5093 0000136D A1[3E02]                	mov	ax,[Parent]			; load real parent pid
  5094                                  	;mov	[16h],ax
  5095 00001370 A31600                  	mov	[PDB.PARENT_PID],ax		; put it back where it belongs
  5096 00001373 B8FF4C                  	mov	ax,4CFFh
  5097                                  	;mov	ax,(EXIT<<8) | 255 ; 4CFFh
  5098 00001376 CD21                    	int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
  5099                                  				; AL = exit code
  5100                                  AbortCont:
  5101 00001378 F606[9202]FF            	test	byte [In_Batch],-1		; Are we accessing a batch file?
  5102 0000137D 7405                    	jz	short Not_Batch_Abort
  5103 0000137F C606[9302]01            	mov	byte [Batch_Abort],1		; set flag for abort
  5104                                  
  5105                                  Not_Batch_Abort:
  5106 00001384 8A16[1303]              	mov	dl,[PipeFlag]
  5107 00001388 E87CFA                  	call	ResPipeOff
  5108 0000138B 08D2                    	or	dl,dl
  5109 0000138D 740D                    	je	short CheckForA
  5110 0000138F 833E[A502]00            	cmp	word [SingleCom],0
  5111 00001394 7406                    	je	short CheckForA
  5112 00001396 C706[A502]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  5113                                  
  5114                                  CheckForA:
  5115 0000139C 833E[4402]00            	cmp	word [ErrCd_24],0		; write protect?
  5116 000013A1 7407                    	je	short abortfor
  5117 000013A3 833E[4402]02            	cmp	word [ErrCd_24],2		; drive not ready?
  5118 000013A8 7512                    	jne	short EExit			; don't abort the FOR
  5119                                  
  5120                                  abortfor:
  5121 000013AA C606[AB02]00            	mov	byte [ForFlag],0		; abort a FOR in progress
  5122 000013AF 833E[A502]00            	cmp	word [SingleCom],0
  5123 000013B4 7406                    	je	short EExit
  5124 000013B6 C706[A502]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  5125                                  
  5126                                  EExit:
  5127 000013BC 88E0                    	mov	al,ah
  5128 000013BE 89FA                    	mov	dx,di
  5129                                  RestHd:
  5130 000013C0 E88EFC                  	call    RestHand
  5131 000013C3 59                      	pop	cx
  5132 000013C4 5E                      	pop	si				; restore registers
  5133 000013C5 07                      	pop	es
  5134                                  
  5135                                  	; 12/01/2023	
  5136                                  	; MSDOS 6.0
  5137                                  ;;	pop	ds
  5138                                  ;SR;
  5139                                  ;ds has to be got from the variable we saved it in
  5140                                  
  5141 000013C6 8E1E[2E05]               	mov	ds,[OldDS]			; restore old value of ds
  5142                                  
  5143                                  ;	pop	ds
  5144                                  ;	assume	ds:nothing
  5145                                  
  5146                                  	; MSDOS 3.3
  5147                                  	;pop	ds
  5148                                  
  5149 000013CA CF                      	iret
  5150                                  
  5151                                  FatErr:
  5152                                  	; 12/01/2023
  5153                                  	; MSDOS 6.0
  5154                                  	;mov	dx,offset DATARES:BadFatMsg
  5155                                  	;mov	si,offset DATARES:BadFatSubst
  5156 000013CB BA[B605]                	mov	dx,BADFATMSG
  5157 000013CE BE[2602]                	mov	si,BadFatSubst
  5158 000013D1 E80700                  	call	RPrint
  5159                                  
  5160                                  	; MSDOS 3.3
  5161                                  	;mov	dx,BADFATMSG
  5162                                  	;call	RDISPMSG
  5163                                  	;mov	dx,BLKDEVERR
  5164                                  	;call	RDISPMSG
  5165                                  
  5166 000013D4 B002                    	mov	al,2				; abort
  5167 000013D6 EBE8                    	jmp	short RestHd
  5168                                  
  5169                                  ;DskErr	endp
  5170                                  
  5171                                  	; MSDOS 6.0
  5172                                  ; ----------------------------------------------------------------------------
  5173                                  ;***	RPrint - print message
  5174                                  ;***	Crlf - display cr/lf
  5175                                  ;
  5176                                  ;	ENTRY	DS:DX = ptr to count byte, followed by message text
  5177                                  ;		DS:SI = ptr to 1st substitution block for this msg, if any
  5178                                  ;		variable fields related to substitution blocks are set
  5179                                  ;
  5180                                  ;	EXIT	nothing
  5181                                  ;
  5182                                  ;	USED	flags
  5183                                  ;
  5184                                  ;	EFFECTS
  5185                                  ;	  Message is displayed on stdout.
  5186                                  ;
  5187                                  ;	NOTE
  5188                                  ;	  Number of substitutions (%1, %2,...) in message text must not
  5189                                  ;	  be greater than number of substition blocks present.
  5190                                  ; ----------------------------------------------------------------------------
  5191                                  
  5192                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5193                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:13D1h (CODERES:0691h)
  5194                                  
  5195                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
  5196                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:14F6h
  5197                                  crlf: 
  5198                                  	;mov	dx,offset DATARES:Newlin ; cheap newline
  5199                                  	; 14/01/2023
  5200 000013D8 BA[4107]                	mov	dx,NEWLINE
  5201                                  
  5202                                  ;RPrint	proc
  5203                                  ;
  5204                                  ;	assume	ds:DATARES,ss:DATARES
  5205                                  ;
  5206                                  	; 14/01/2023
  5207                                  RPrint:
  5208                                  
  5209                                  ;	Bugbug:	do we need to save all reg's?
  5210                                  
  5211 000013DB 56                      	push	si			; preserve registers
  5212 000013DC 50                      	push	ax
  5213 000013DD 53                      	push	bx
  5214 000013DE 51                      	push	cx
  5215 000013DF 52                      	push	dx
  5216                                  
  5217 000013E0 89F3                    	mov	bx,si			; DS:BX = ptr to subst block
  5218 000013E2 89D6                    	mov	si,dx			; DS:SI = ptr to count byte
  5219 000013E4 AC                      	lodsb				; AL = message length
  5220                                  					; DS:SI = ptr to message text
  5221 000013E5 31C9                    	xor	cx,cx
  5222 000013E7 88C1                    	mov	cl,al			; CX = message length
  5223 000013E9 E303                    	jcxz	rpRet
  5224                                  
  5225 000013EB E81900                  	call	RDispMsg
  5226                                  
  5227 000013EE 5A                      rpRet:	pop	dx
  5228 000013EF 59                      	pop	cx
  5229 000013F0 5B                      	pop	bx
  5230 000013F1 58                      	pop	ax
  5231 000013F2 5E                      	pop	si
  5232 000013F3 C3                      	retn
  5233                                  
  5234                                  ;RPrint	endp
  5235                                  
  5236                                  	; 14/01/2023
  5237                                  ;	; MSDOS 3.3
  5238                                  ;CRLF:
  5239                                  ;	mov     dx,NEWLIN
  5240                                  ;
  5241                                  ;RDISPMSG: ; Display message/text
  5242                                  ;	; DS:DX = ($ terminated) Message/Text address 
  5243                                  ;	push    ax
  5244                                  ;	mov     ah,STD_CON_STRING_OUTPUT ; 9
  5245                                  ;	clc
  5246                                  ;	int     21h             ; DOS - PRINT STRING
  5247                                  ;				; DS:DX -> string terminated by "$"
  5248                                  ;	pop     ax
  5249                                  ;	retn
  5250                                  
  5251                                  
  5252                                  	; MSDOS 6.0
  5253                                  ; ----------------------------------------------------------------------------
  5254                                  ;***	RPrintCrit - print critical error message
  5255                                  ;
  5256                                  ;	ENTRY	DX = extended error # (19-39)
  5257                                  ;
  5258                                  ;	EXIT	nothing
  5259                                  ;
  5260                                  ;	USED	flags
  5261                                  ;
  5262                                  ;	EFFECTS
  5263                                  ;	  Message is displayed on stdout
  5264                                  ; ----------------------------------------------------------------------------
  5265                                  
  5266                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5267                                  
  5268                                  ;RPrintCrit	proc
  5269                                  ;	assume	ds:DATARES,ss:DATARES
  5270                                  
  5271                                  	; 14/01/2023
  5272                                  RPrintCrit:
  5273 000013F4 52                      	push	dx			; preserve DX
  5274 000013F5 87DA                    	xchg	bx,dx			; BX = extended error #
  5275                                  					; DX = saved BX
  5276 000013F7 83EB13                  	sub	bx,19			; BX = critical error index, from 0
  5277 000013FA D1E3                    	shl	bx,1			; BX = offset in word table
  5278 000013FC 8B9F[DB08]              	mov	bx,[bx+CRITMSGPTRS]	; BX = ptr to error msg
  5279 00001400 87DA                    	xchg	bx,dx			; DX = ptr to error msg
  5280                                  					; BX = restored
  5281 00001402 E8D6FF                  	call	RPrint			; print the message
  5282 00001405 5A                      	pop	dx			; restore DX
  5283 00001406 C3                      	retn
  5284                                  
  5285                                  ;RPrintCrit	endp
  5286                                  
  5287                                  ; ----------------------------------------------------------------------------
  5288                                  ;***	RDispMsg - display message
  5289                                  ;
  5290                                  ;	Display message, with substitutions, for RPrint.
  5291                                  ;
  5292                                  ;	ENTRY	DS:SI = ptr to message text
  5293                                  ;		CX = message length
  5294                                  ;		DS:BX = ptr to substitution block, if any
  5295                                  ;
  5296                                  ;	EXIT	nothing
  5297                                  ;
  5298                                  ;	USED	AX,CX,DX,SI
  5299                                  ; ----------------------------------------------------------------------------
  5300                                  
  5301                                  ;RDispMsg	proc
  5302                                  ;	assume	ds:DATARES,ss:DATARES
  5303                                  
  5304                                  RDispMsg:
  5305                                  	; 14/01/2023
  5306                                  rdNextChar:
  5307 00001407 AC                      	lodsb				; AL = next char
  5308 00001408 3C25                    	cmp	al,'%'
  5309 0000140A 7511                    	jne	short rdOutChar		; not a substitution
  5310 0000140C 8A14                    	mov	dl,[si]			; DL = possible '1' - '9'
  5311 0000140E 80EA31                  	sub	dl,'1'			; DL = 0 - 8 = '1' - '9'
  5312 00001411 80FA09                  	cmp	dl,9
  5313 00001414 7307                    	jae	short rdOutChar		; not a substitution
  5314                                  
  5315                                  ;*	A substitution code %1 - %9 has been encountered.
  5316                                  ;	DL = 0-8, indicating %1-%9
  5317                                  ;	DS:BX = ptr to substitution block
  5318                                  
  5319 00001416 E80D00                  	call	SubstMsg		; display the substitution
  5320 00001419 46                      	inc	si			; SI = ptr past %n
  5321 0000141A 49                      	dec	cx			; count extra character in %n
  5322 0000141B EB06                    	jmp	short rdCharDone
  5323                                  
  5324                                  ;*	Normal character output.
  5325                                  
  5326                                  rdOutChar:
  5327 0000141D 88C2                    	mov	dl,al			; DL = char
  5328 0000141F B402                    	mov	ah,2			; AH = DOS Character Output code
  5329 00001421 CD21                    	int	21h			; call DOS
  5330                                  rdCharDone:
  5331 00001423 E2E2                    	loop	rdNextChar
  5332 00001425 C3                      	retn
  5333                                  
  5334                                  ;RDispMsg	endp
  5335                                  
  5336                                  ; ----------------------------------------------------------------------------
  5337                                  ;***	SubstMsg - display message substitution
  5338                                  ;
  5339                                  ;	Display a substitution string within a message.
  5340                                  ;	Substitution can be a char, an ASCIIZ string, or
  5341                                  ;	a word to be displayed as hex digits.
  5342                                  ;
  5343                                  ;	ENTRY	DL = substitution index 0-8 (for codes %1-%9)
  5344                                  ;		DS:BX = ptr to substitution block
  5345                                  ;
  5346                                  ;	EXIT	nothing
  5347                                  ;
  5348                                  ;	USED	AX,DX
  5349                                  ; ----------------------------------------------------------------------------
  5350                                  
  5351                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5352                                  
  5353                                  ;SubstMsg	proc
  5354                                  ;	assume	ds:DATARES,ss:DATARES
  5355                                  	
  5356                                  	; 14/01/2023
  5357                                  SubstMsg:
  5358 00001426 53                      	push	bx			; preserve BX
  5359 00001427 51                      	push	cx			; preserve CX
  5360                                  
  5361                                  	;mov	al,size SUBST		; AL = size of substitution block
  5362 00001428 B003                    	mov	al,3
  5363 0000142A F6E2                    	mul	dl			; AX = offset of desired subst block
  5364 0000142C 01C3                    	add	bx,ax			; DS:BX = ptr to desired subst block
  5365                                  
  5366                                  	;mov	al,[bx].SubstType	; AX = substitution type flag
  5367 0000142E 8A07                    	mov	al,[bx]
  5368                                  	;mov	bx,[bx].SubstPtr	; BX = ptr to char, str, or hex value
  5369 00001430 8B5F01                  	mov	bx,[bx+1]
  5370                                  
  5371                                  ;	AL = 1, 2, or 3 for char, string, or hex type
  5372                                  
  5373 00001433 FEC8                    	dec	al
  5374 00001435 7428                    	jz	short smChar
  5375 00001437 FEC8                    	dec	al
  5376 00001439 742C                    	jz	short smStr
  5377                                  
  5378                                  ;*	Hex number substitution.
  5379                                  
  5380                                  	;mov	ax,ds:[bx]		; AX = word value
  5381 0000143B 8B07                    	mov	ax,[bx]
  5382 0000143D B90400                  	mov	cx,4			; CX = # digits to display
  5383                                  smDigit:
  5384 00001440 D1C0                    	rol	ax,1
  5385 00001442 D1C0                    	rol	ax,1
  5386 00001444 D1C0                    	rol	ax,1
  5387 00001446 D1C0                    	rol	ax,1			; AL<3:0> = next digit
  5388                                  
  5389 00001448 50                      	push	ax			; save other digits
  5390 00001449 240F                    	and	al,0Fh			; AL = binary digit
  5391 0000144B 0430                    	add	al,'0'			; AL = ascii digit if 0-9
  5392 0000144D 3C39                    	cmp	al,'9'
  5393 0000144F 7602                    	jbe	short smDigit09		; it's 0-9
  5394                                  	;add	al,7
  5395 00001451 0407                    	add	al,('A' - '0') - 10	; AL = ascii digit A-F
  5396                                  smDigit09:
  5397 00001453 88C2                    	mov	dl,al			; DL = ascii digit
  5398 00001455 B402                    	mov	ah,2
  5399 00001457 CD21                    	int	21h			; output the ascii digit
  5400 00001459 58                      	pop	ax			; restore all digits
  5401                                  
  5402 0000145A E2E4                    	loop	smDigit
  5403                                  	;jmp	short smRet
  5404                                  	; 14/01/2023
  5405                                  smRet:	
  5406 0000145C 59                      	pop	cx
  5407 0000145D 5B                      	pop	bx
  5408 0000145E C3                      	retn
  5409                                  
  5410                                  ;*	Char substitution.
  5411                                  
  5412                                  smChar:
  5413                                  	;mov	dl,ds:[bx]		; DL = char to output
  5414 0000145F 8A17                    	mov	dl,[bx]
  5415 00001461 B402                    	mov	ah,2
  5416 00001463 CD21                    	int	21h
  5417 00001465 EBF5                    	jmp	short smRet
  5418                                  
  5419                                  ;*	String substitution.
  5420                                  
  5421                                  smStr:
  5422                                  	;mov	dl,ds:[bx]		; DL = next char
  5423 00001467 8A17                    	mov	dl,[bx]
  5424 00001469 08D2                    	or	dl,dl
  5425 0000146B 74EF                    	jz	short smRet		; null char - we're done
  5426 0000146D B402                    	mov	ah,2
  5427 0000146F CD21                    	int	21h			; display char
  5428 00001471 43                      	inc	bx			; DS:BX = ptr to next char
  5429 00001472 EBF3                    	jmp	short smStr
  5430                                  
  5431                                  ;smRet:	pop	cx
  5432                                  ;	pop	bx
  5433                                  ;	retn
  5434                                  
  5435                                  ;SubstMsg	endp
  5436                                  
  5437                                  	; MSDOS 6.0
  5438                                  ; ----------------------------------------------------------------------------
  5439                                  ;***	CharToUpper - convert character to uppercase
  5440                                  ;
  5441                                  ;	ENTRY	AL = char
  5442                                  ;
  5443                                  ;	EXIT	AL = uppercase char
  5444                                  ;
  5445                                  ;	USED	AX
  5446                                  ; ----------------------------------------------------------------------------
  5447                                  
  5448                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5449                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
  5450                                  
  5451                                  ;CharToUpper	proc
  5452                                  ;	assume	ds:DATARES
  5453                                  CharToUpper:
  5454 00001474 50                      	push	ax		; put char on stack as arg to int 2F
  5455 00001475 B81312                  	mov	ax,1213h	; AX = DOS int 2F 'Convert Char to Uppercase'
  5456 00001478 CD2F                    	int	2Fh
  5457 0000147A 44                      	inc	sp		; throw away old char on stack
  5458 0000147B 44                      	inc	sp
  5459 0000147C C3                      	retn
  5460                                  
  5461                                  ;CharToUpper	endp
  5462                                  
  5463                                  	; 14/01/2023
  5464                                  ;	; MSDOS 3.3
  5465                                  ;CHARTOUPPER:
  5466                                  ;	cmp	al,80h
  5467                                  ;	jb	short CHARTOUPPER1
  5468                                  ;	sub	al,80h
  5469                                  ;	push	ds
  5470                                  ;	push	bx
  5471                                  ;	lds	bx,[UPPERCASETBL]
  5472                                  ;	add	bx,2
  5473                                  ;	xlat
  5474                                  ;	pop	bx
  5475                                  ;	pop	ds
  5476                                  ;	jmp	short CHARTOUPPER_RETN
  5477                                  ;CHARTOUPPER1:
  5478                                  ;	cmp	al,'a'
  5479                                  ;	jb	short CHARTOUPPER_RETN
  5480                                  ;	cmp	al,'z'
  5481                                  ;	ja	short CHARTOUPPER_RETN
  5482                                  ;	sub	al,20h
  5483                                  ;CHARTOUPPER_RETN:
  5484                                  ;	retn
  5485                                  
  5486                                  ; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
  5487                                  ; ----------------------------------------------------------------------------
  5488                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:159Dh
  5489                                  
  5490                                  ;ifdef	DBCS
  5491                                  %if 1
  5492                                  
  5493                                  ;***	ITestKanj - DBCS lead byte check
  5494                                  
  5495                                  ITestKanj:
  5496                                  TestKanjR:				; 3/3/KK
  5497 0000147D 1E                      	push	ds
  5498 0000147E 56                      	push	si
  5499 0000147F 50                      	push	ax
  5500 00001480 C536[BA02]              	lds	si,[Dbcs_Vector_Addr]
  5501                                  ktLop:
  5502 00001484 833C00                  	cmp	word [si],0		; end of Lead Byte Table
  5503 00001487 740C                    	je	short NotLead
  5504                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
  5505                                  	;pop	ax
  5506                                  	;push	ax
  5507 00001489 3A04                    	cmp	al,[si]
  5508 0000148B 7208                    	jb	short NotLead
  5509 0000148D 46                      	inc	si
  5510 0000148E 3A04                    	cmp	al,[si]
  5511 00001490 7607                    	jbe	short IsLead
  5512 00001492 46                      	inc	si
  5513 00001493 EBEF                    	jmp	short ktLop		; try another range
  5514                                  NotLead:
  5515 00001495 31C0                    	xor	ax,ax			; set zero
  5516 00001497 EB03                    	jmp	short ktRet
  5517                                  IsLead:
  5518 00001499 31C0                    	xor	ax,ax			; reset zero
  5519 0000149B 40                      	inc	ax
  5520                                  ktRet:
  5521 0000149C 58                      	pop	ax
  5522 0000149D 5E                      	pop	si
  5523 0000149E 1F                      	pop	ds
  5524 0000149F C3                      	retn
  5525                                  
  5526                                  %endif
  5527                                  ;endif
  5528                                  
  5529                                  ; ----------------------------------------------------------------------------
  5530                                  
  5531                                  ;public	EndCode
  5532                                  ;EndCode label byte
  5533                                  
  5534                                  	; MSDOS 6.0
  5535                                  ; ----------------------------------------------------------------------------
  5536                                  ;***	MsgInt2fHandler - int 2f handler for message retrieval
  5537                                  ;
  5538                                  ;	ENTRY	If we handle it -
  5539                                  ;		  AX = ((MULTDOS shl 8) or MESSAGE_2F) = 122Eh
  5540                                  ;		  DL = operation =
  5541                                  ;		     0 = get extended error messages
  5542                                  ;		     1 = set extended error messages
  5543                                  ;		     2 = get parse error messages
  5544                                  ;		     3 = set parse error messages
  5545                                  ;		     4 = get critical error messages
  5546                                  ;		     5 = set critical error messages
  5547                                  ;		     6 = get file system error messages
  5548                                  ;		     7 = set file system error messages
  5549                                  ;		     8 = get disk retriever routine
  5550                                  ;		     9 = set disk retriever routine
  5551                                  ;		  ES:DI = address for 'set' operations
  5552                                  ;
  5553                                  ;	EXIT	ES:DI = ptr to list of message ptrs, for 'get' operations
  5554                                  ;
  5555                                  ;	NOTE
  5556                                  ;	  This handler replaces the one that used to reside in DOS.
  5557                                  ;	  'Set' operations are ignored.
  5558                                  ;	  'File system error messages' are not supported.
  5559                                  ; ----------------------------------------------------------------------------
  5560                                  
  5561                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5562                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1478h (CODERES:0738h)
  5563                                  
  5564                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  5565                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1588h (CODERES:0738h)
  5566                                  
  5567                                  ;SR;
  5568                                  ;At the int 2fh entry point we push the old ds value and the resident data
  5569                                  ;segment address. Get them off the stack
  5570                                  
  5571                                  ;MsgInt2fHandler proc	far
  5572                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5573                                  
  5574                                  	; 14/01/2023
  5575                                  MsgInt2fHandler:
  5576 000014A0 1F                      	pop	ds			; ds = DATARES
  5577                                  	;assume	ds:DATARES
  5578                                  ;	pop	word [OldDS]		; save old value of ds
  5579                                  
  5580 000014A1 3D2E12                  	cmp	ax,122Eh
  5581                                  	;cmp	ax,(MULTDOS<<8)|MESSAGE_2F
  5582                                  	;;cmp	ax,(MULTDOS shl 8) or MESSAGE_2F
  5583 000014A4 742A                    	je	short miOurs		; it's ours
  5584                                  
  5585                                  ;ifndef ROMDOS
  5586                                  	;cmp	ax,5500h
  5587 000014A6 3D0055                  	cmp	ax,GET_COMMAND_STATE	; is it first COMMAND query?
  5588                                  ;else
  5589                                  ;	cmp	ax,GET_ROMCOMMAND_STATE	; is it first ROM COMMAND query?
  5590                                  ;endif	;ROMDOS
  5591 000014A9 741C                    	je	short fcOurs
  5592                                  
  5593                                  ;SR;
  5594                                  ;We cannot do a far jump any more because cs cannot be used. Push the cs:ip
  5595                                  ;onto the stack and do a far return to jump to the next 2fh handler. 
  5596                                  ;Our old ds is on the stack. We need to restore it but we cannot lose the
  5597                                  ;current value of ds as it points at the data segment. So we do some kinky
  5598                                  ;stack manipulations.
  5599                                  
  5600 000014AB 50                      	push	ax
  5601 000014AC 50                      	push	ax			; create 2 words on stack for retf
  5602                                  
  5603 000014AD 55                      	push	bp
  5604 000014AE 50                      	push	ax
  5605                                  
  5606 000014AF 89E5                    	mov	bp,sp			; bp can be used to address stack
  5607                                  
  5608                                  ;Swap the old ds value with the second dummy word on the stack. Now, we can
  5609                                  ;do a 'pop ds' at the end to restore our ds
  5610                                  
  5611 000014B1 8B4608                  	mov	ax,[bp+8]		; ax = old ds value
  5612 000014B4 894604                  	mov	[bp+4],ax
  5613                                  	
  5614                                  	;mov	ax,word ptr ds:Int2fHandler+2
  5615 000014B7 A1[B004]                	mov	ax,[Int2fHandler+2]
  5616 000014BA 894608                  	mov	[bp+8],ax		; put segment address
  5617                                  	;mov	ax,word ptr ds:Int2fHandler
  5618 000014BD A1[AE04]                	mov	ax,[Int2fHandler]
  5619 000014C0 894606                  	mov	[bp+6],ax		; put offset address
  5620                                  
  5621 000014C3 58                      	pop	ax
  5622 000014C4 5D                      	pop	bp
  5623 000014C5 1F                      	pop	ds
  5624                                  
  5625 000014C6 CB                      	retf				; chain on to next handler
  5626                                  
  5627                                  ;;	jmp	Int2fHandler		; hand off to next 2f handler
  5628                                  
  5629                                  fcOurs:
  5630                                  
  5631                                  ;We have to clear ax, and return in ds:si a pointer to the stub jump table
  5632                                  
  5633 000014C7 58                      	pop	ax			; discard ds currently on stack
  5634 000014C8 1E                      	push	ds			; store our data segment
  5635                                  
  5636                                  	;mov	si,offset DATARES:Int2f_Entry ; start of table
  5637 000014C9 BE[6600]                	mov	si,Int2f_Entry
  5638                                  
  5639 000014CC 31C0                    	xor	ax,ax			; indicate COMMAND present
  5640 000014CE EB11                    	jmp	short miRet		; return to caller
  5641                                  
  5642                                  miOurs:
  5643 000014D0 F6C201                  	test	dl,1
  5644 000014D3 750C                    	jnz	short miRet		; ignore 'set' operations
  5645                                  
  5646 000014D5 53                      	push	bx			; preserve BX
  5647 000014D6 89D3                    	mov	bx,dx
  5648 000014D8 30FF                    	xor	bh,bh			; BX = index in word table
  5649 000014DA D1E3                    	shl	bx,1			; BX = index in dword table
  5650                                  	;les	di,MsgPtrLists[bx]	; ES:DI = ptr to msg ptr list
  5651 000014DC C4BF[4407]              	les	di,[bx+MsgPtrLists]
  5652 000014E0 5B                      	pop	bx			; restore BX
  5653                                  miRet:
  5654                                  ;	mov	ds,[OldDS]		; restore ds
  5655 000014E1 1F                      	pop	ds
  5656                                  	;assume	ds:nothing
  5657                                  
  5658 000014E2 CF                      	iret
  5659                                  
  5660                                  ;MsgInt2fHandler endp
  5661                                  
  5662                                  	; MSDOS 6.0
  5663                                  ; ----------------------------------------------------------------------------
  5664                                  ;***	MsgRetriever - message retrieval routine for utilities
  5665                                  ;
  5666                                  ;	Address of this routine is passed to utility programs via 
  5667                                  ;	message services int 2f. We try to find the desired message
  5668                                  ;	in memory or in our disk image.
  5669                                  ;
  5670                                  ;	ENTRY	AX = message #
  5671                                  ;		DI = offset in RESGROUP of msg ptr list
  5672                                  ;		ComSpec = asciiz pathname to our disk image
  5673                                  ;
  5674                                  ;	EXIT	CY clear for success
  5675                                  ;		ES:DI = ptr to count byte, followed by message text
  5676                                  ;
  5677                                  ;		CY set for failure
  5678                                  ;		ES,DI undefined
  5679                                  ;
  5680                                  ;	USED	flags
  5681                                  ;
  5682                                  ;	NOTE
  5683                                  ;	  The message # in AX is used to compute an offset into
  5684                                  ;	  the message ptr list pointed to by DI. The lists must
  5685                                  ;	  start with message # 1 and proceed through consecutive
  5686                                  ;	  message #'s.  
  5687                                  ;
  5688                                  ;	  It is assumed that the msg ptr list is either ParsMsgPtrs or
  5689                                  ;	  ExtMsgPtrs. We use NUMPARSEMSGS and NUMEXTMSGS to check for
  5690                                  ;	  valid message #.  ;M033
  5691                                  ;
  5692                                  ;	  List positions with no corresponding message text are
  5693                                  ;	  indicated by null pointers, which this routine detects.
  5694                                  ; ----------------------------------------------------------------------------
  5695                                  
  5696                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5697                                  
  5698                                  ;SR; This routine will be called directly by the utilities. So, we have
  5699                                  ; trap for it in the stub. The stub pushes the old value of ds and the 
  5700                                  ; DATARES value on the stack. We get them off the stack to setup ds here
  5701                                  
  5702                                  ;MsgRetriever	proc	far
  5703                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5704                                  
  5705                                  	; 14/01/2023
  5706                                  MsgRetriever:
  5707 000014E3 1F                      	pop	ds			; ds = DATARES
  5708                                  	;assume	ds:DATARES
  5709                                  ;	pop	word [OldDS]		; save old ds
  5710                                  
  5711 000014E4 50                      	push	ax			; preserve registers
  5712 000014E5 53                      	push	bx
  5713 000014E6 51                      	push	cx
  5714 000014E7 52                      	push	dx
  5715 000014E8 56                      	push	si
  5716                                  
  5717                                  ;;	push	ds
  5718                                  ;;	push	cs
  5719                                  ;;	pop	ds			; DS = DATARES seg addr
  5720                                  ;;	assume	ds:RESGROUP
  5721                                  ;;	push	cs
  5722                                  
  5723 000014E9 1E                      	push	ds			; get es from ds
  5724 000014EA 07                      	pop	es			; ES = DATARES seg addr
  5725                                  
  5726                                  ;	Begin modification M033.
  5727                                  
  5728                                  ;	Make sure msg # is valid.
  5729                                  ;	Assume msg ptr list is either ParsMsgPtrs or ExtMsgPtrs.
  5730                                  
  5731                                  	;mov	bx,11
  5732 000014EB BB0B00                  	mov	bx,NUMPARSMSGS		; BX = # parse error msgs in list
  5733                                  	;cmp	di,offset DATARES:ParsMsgPtrs
  5734 000014EE 81FF[E309]              	cmp	di,PARSMSGPTRS
  5735 000014F2 7403                    	je	short chkmsgnum		; it's ParsMsgPtrs
  5736                                  	;mov	bx,90
  5737 000014F4 BB5A00                  	mov	bx,NUMEXTMSGS		; BX = # extended error msgs in list
  5738                                  chkmsgnum:
  5739 000014F7 39C3                    	cmp	bx,ax
  5740 000014F9 725A                    	jc	short mrRet		; msg # too high, return carry
  5741                                  
  5742                                  ;	Msg # is valid.
  5743                                  
  5744                                  ;	End modification M033.
  5745                                  
  5746 000014FB 48                      	dec	ax
  5747 000014FC D1E0                    	shl	ax,1			; AX = offset into msg ptr list
  5748 000014FE 01C7                    	add	di,ax			; DI = ptr to msg ptr
  5749                                  
  5750 00001500 81FF[B204]              	cmp	di,ResMsgEnd
  5751 00001504 7247                    	jb	short mrInMem		; ptr (and message) in memory
  5752                                  
  5753                                  ;*	Retrieve message from disk (or ROM) image.
  5754                                  ;	Read once to get the ptr to the message, then again for the message.
  5755                                  
  5756                                  ;ifndef	ROMDOS
  5757                                  	; 14/01/2023
  5758                                  	;mov	si,offset DATARES:ComSpec	; DS:SI = ptr to pathname
  5759 00001506 BE[4B02]                	mov	si,ComSpec
  5760 00001509 BA0100                  	mov	dx,1 ; EXT_EXISTS_OPEN		; DX = 'open existing file'
  5761 0000150C BB0020                  	mov	bx,2000h ; INT_24_ERROR		; BX = 'fail on crit error'
  5762 0000150F B8006C                  	mov	ax,6C00h
  5763                                  	;mov	ax,ExtOpen shl 8		; AX = 'Extended Open File'
  5764 00001512 CD21                    	int	21h				; call DOS
  5765 00001514 723F                    	jc	short mrRet			; return failure
  5766                                  
  5767 00001516 89C3                    	mov	bx,ax				; BX = file handle
  5768 00001518 89FA                    	mov	dx,di				; DX = ptr to msg ptr
  5769 0000151A 31F6                    	xor	si,si				; SI = read count
  5770                                  mrRead:
  5771 0000151C 81EA0001                	sub	dx,100h				; DX = LSW of file offset
  5772 00001520 31C9                    	xor	cx,cx				; CX = MSW of file offset
  5773 00001522 B80042                  	mov	ax,4200h
  5774                                  	;mov	ax,LSEEK shl 8			; AX = 'Set File Pointer'
  5775 00001525 CD21                    	int	21h				; call DOS
  5776 00001527 721A                    	jc	short mrCloseFile		; handle error
  5777                                  
  5778                                  	;mov	dx,offset DATARES:MsgBuffer	; DS:DX = input buffer
  5779 00001529 BA[5E04]                	mov	dx,MsgBuffer
  5780 0000152C B94000                  	mov	cx,64				; CX = # bytes to read
  5781 0000152F B43F                    	mov	ah,3Fh
  5782                                  	;mov	ah,READ				; AH = 'Read File'
  5783 00001531 CD21                    	int	21h				; call DOS
  5784 00001533 720E                    	jc	short mrCloseFile		; handle error
  5785                                  
  5786 00001535 09F6                    	or	si,si				; (CY cleared)
  5787 00001537 750A                    	jnz	short mrCloseFile		; 2nd time thru - we're done
  5788 00001539 46                      	inc	si				; mark one read done
  5789 0000153A 8B16[5E04]              	mov	dx,[MsgBuffer]			; DX = ptr to message
  5790 0000153E 09D2                    	or	dx,dx
  5791 00001540 75DA                    	jnz	short mrRead			; go read the message
  5792 00001542 F9                      	stc					; null ptr found- no msg
  5793                                  
  5794                                  mrCloseFile:
  5795 00001543 9C                      	pushf				; save success/failure (CY)
  5796 00001544 B43E                    	mov	ah,3Eh
  5797                                  	;mov	ah,CLOSE		; AH = 'Close File'
  5798 00001546 CD21                    	int	21h			; call DOS
  5799                                  ;	Bugbug: should we avoid this popf?
  5800 00001548 9D                      	popf				; CY = success/failure
  5801 00001549 89D7                    	mov	di,dx			; ES:DI = ptr to msg, if successful
  5802 0000154B EB08                    	jmp	short mrRet		; we're done
  5803                                  
  5804                                  ;else	;ROMDOS
  5805                                  ;
  5806                                  ;;	DI = ptr to msg ptr
  5807                                  ;
  5808                                  ;	mov	si,di			; SI = ptr to msg ptr
  5809                                  ;	sub	si,100h			; SI = offset into image of msg ptr
  5810                                  ;	mov	cx,2			; CX = # bytes to copy from image
  5811                                  ;
  5812                                  ;;	ASSUME ES:NOTHING is still in effect.
  5813                                  ;
  5814                                  ;	push	ds
  5815                                  ;	pop	es				; ES = DATARES seg addr
  5816                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to buffer
  5817                                  ;	invoke	LoadFromROM			; copy msg ptr from ROM
  5818                                  ;	mov	si,word ptr MsgBuffer		; SI = ptr to message
  5819                                  ;	or	si,si
  5820                                  ;	jz	mrNoMsg			; null ptr- no message text
  5821                                  ;
  5822                                  ;	sub	si,100h			; SI = offset into image of msg
  5823                                  ;	mov	cx,64			; CX = # bytes to copy from image
  5824                                  ;	mov	di,offset DATARES:MsgBuffer
  5825                                  ;	invoke	LoadFromROM
  5826                                  ;	clc					; success
  5827                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to msg
  5828                                  ;	jmp	short mrRet
  5829                                  ;
  5830                                  ;mrNoMsg:
  5831                                  ;	stc
  5832                                  ;	jmp	short mrRet
  5833                                  ;
  5834                                  ;;;	mov	ax,COMMAND_SEG-10h	; AX = seg addr of COMMAND image
  5835                                  ;;;	mov	es,ax			; ES:DI = ptr to msg ptr in image
  5836                                  ;	assume	es:NOTHING
  5837                                  ;
  5838                                  ;endif	;ROMDOS
  5839                                  
  5840                                  ;*	Message ptr is in memory.
  5841                                  ;	If ptr is in memory, assume message is in memory (/msg).
  5842                                  
  5843                                  mrInMem:
  5844                                  	; 14/01/2023
  5845 0000154D 268B3D                  	mov	di,[es:di]		; ES:DI = ptr to msg
  5846 00001550 09FF                    	or	di,di			; (CY cleared)
  5847 00001552 7501                    	jnz	short mrRet		; found message
  5848 00001554 F9                      	stc				; null ptr found - no message
  5849                                  mrRet:	
  5850 00001555 5E                      	pop	si			; restore all registers
  5851 00001556 5A                      	pop	dx
  5852 00001557 59                      	pop	cx
  5853 00001558 5B                      	pop	bx
  5854 00001559 58                      	pop	ax
  5855                                  
  5856                                  ;	mov	ds,[OldDS]		; restore ds
  5857 0000155A 1F                      	pop	ds
  5858                                  	;assume	ds:nothing
  5859                                  
  5860 0000155B CB                      	retf	; 21/04/2023
  5861                                  
  5862                                  ;MsgRetriever endp
  5863                                  
  5864                                  ; M003; Start of changes for UMB support
  5865                                  
  5866                                  ; ----------------------------------------------------------------------------
  5867                                  ;***	Lh_OffUnlink -- Restore allocation strat and link state
  5868                                  ;
  5869                                  ;	ENTRY	al = Saved alloc strat and link state
  5870                                  ;			b0 = 1 if alloc strat to restore is HighFirst
  5871                                  ;			b1 = 1 if link state to restore is Linked
  5872                                  ;
  5873                                  ;	EXIT	None
  5874                                  ;
  5875                                  ;	USED	ax, bx, cx
  5876                                  ; ----------------------------------------------------------------------------
  5877                                  
  5878                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5879                                  
  5880                                  ;public	Lh_OffUnlink
  5881                                  Lh_OffUnlink:	; proc	far
  5882                                  	; 14/01/2023
  5883 0000155C 88C5                    	mov	ch,al
  5884 0000155E 88C1                    	mov	cl,al
  5885                                  	;;mov	ax,(ALLOCOPER shl 8) OR 0
  5886                                  	;mov	ax,(ALLOCOPER<<8)
  5887 00001560 B80058                  	mov	ax,5800h
  5888 00001563 CD21                    	int	21h
  5889 00001565 89C3                    	mov	bx,ax
  5890 00001567 D0C9                    	ror	cl,1				; b7 = HighFirst bit
  5891 00001569 80E180                  	and	cl,80h				; mask off b6-b0
  5892 0000156C 80E37F                  	and	bl,7fh				; mask off HighFirst bit
  5893 0000156F 08CB                    	or	bl,cl				; set HighFirst bit state
  5894                                  	;;mov	ax,(ALLOCOPER shl 8) OR 1
  5895                                  	;mov	ax,(ALLOCOPER<<8)|1
  5896 00001571 B80158                  	mov	ax,5801h
  5897 00001574 CD21                    	int	21h				; set alloc strat
  5898                                  
  5899 00001576 88EB                    	mov	bl,ch
  5900 00001578 D0EB                    	shr	bl,1
  5901 0000157A 30FF                    	xor	bh,bh				; bx = linkstate
  5902                                  	;mov	ax,(ALLOCOPER shl 8) OR 3
  5903                                  	;mov	ax,(ALLOCOPER<<8)|3
  5904 0000157C B80358                  	mov	ax,5803h
  5905 0000157F CD21                    	int	21h				; set linkstate
  5906                                  
  5907 00001581 CB                      	retf
  5908                                  
  5909                                  ;Lh_OffUnlink endp
  5910                                  
  5911                                  ; M003; End of changes for UMB support
  5912                                  ;public	EndCode
  5913                                  ; 14/01/2023
  5914                                  ;EndCode: ; label byte
  5915                                  ; 06/06/2023
  5916                                  ; 16/04/2023
  5917                                  EndCode equ ($-StartCode)+100h
  5918                                  ; 06/06/2023
  5919                                  ;EndCode equ $-StartCode
  5920                                  
  5921                                  ;CODERES ends
  5922                                  ;	end
  5923                                  
  5924                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5925                                  
  5926 00001582 00<rep Eh>              	times	(((EndCode+15)>>4)<<4)-EndCode db 0
  5927                                  
  5928                                  ;align 16
  5929                                  
  5930                                  ;=============================================================================
  5931                                  ; INIT.ASM, MSDOS 6.0 (COMMAND.COM), 1991
  5932                                  ;=============================================================================
  5933                                  ; 22/09/2018 - Retro DOS v3.0 ('command3.s')
  5934                                  
  5935                                  ; INIT.ASM (MSDOS 2.11 COMMAND.COM, Retro DOS v2.0, 30/04/2018)
  5936                                  
  5937                                  ;TITLE   COMMAND Initialization
  5938                                  
  5939                                  ;ENVIRONSIZ EQU  0A0H		; Must agree with values in ENVIRONMENT segment
  5940                                  ;ENVIRONSIZ2 EQU 092H
  5941                                  ;MAX_COMSPEC EQU ENVIRONSIZ2 ; = 146  ; 22/09/2018
  5942                                  
  5943                                  ; UINIT.ASM, MSDOS 6.0, 1991
  5944                                  ; 23/09/2018
  5945                                  ENVBIG	EQU 32768		;AN000; maximum environment size
  5946                                  ; 14/01/2023
  5947                                  ;ENVSML	EQU 160			;AN000; minimum environment size
  5948                                  
  5949                                  ; ----------------------------------------------------------------------------
  5950                                  
  5951                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5952                                  
  5953                                  ; 06/06/2023
  5954                                  ; (MSDOS 5.0 COMMAND.COM -initial- Environment Structure size)
  5955                                  ;ENVIRONSIZ equ 160
  5956                                  
  5957                                  ENVSML	equ 256	; minimum environment size
  5958                                  ;MAX_COMSPEC equ ENVIRONSIZ - Env_ComSpec
  5959                                  MAX_COMSPEC equ 146
  5960                                  ECOMSPEC equ 14
  5961                                  
  5962                                  ; 14/01/2023
  5963                                  TAB_CHAR equ 09h
  5964                                  SPACE_CHAR equ 20h	
  5965                                  
  5966                                  ; 06/06/2023
  5967                                  ; (MSDOS 6.22 COMMAND.COM -initial- Environment Structure size)
  5968                                  ;ENVIRONSIZ equ 180	; SIZE Environment
  5969                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  5970                                  ; (PCDOS 7.1 COMMAND.COM -initial- Environment Structure size)
  5971                                  ENVIRONSIZ equ 166	; SIZE Environment 
  5972                                  
  5973                                  ;----------------------------------------------------
  5974                                  ; MSDOS 6.0 - ENVDATA.ASM - 1991
  5975                                  ;----------------------------------------------------
  5976                                  ;Environment Struc	; Default COMMAND environment
  5977                                  ;
  5978                                  ;Env_PathString  db	"path="
  5979                                  ;Env_PathSpec	 db	"c:\msdos"
  5980                                  ;                db	0
  5981                                  ;Env_PrmptString db	"prompt="
  5982                                  ;Env_PrmptSpec   db	"$p$g"
  5983                                  ;                db	0
  5984                                  ;Env_ComString   db	"comspec="
  5985                                  ;Env_ComSpec     db	"\command.com"
  5986                                  ;		 db	134 dup (0)
  5987                                  ;
  5988                                  ;Environment ends
  5989                                  ;----------------------------------------------------
  5990                                  
  5991                                  ;-----------------------------------------------------------------------------
  5992                                  
  5993                                  ;-----------------------------------------------------------------------------
  5994                                  ; START OF INIT PORTION
  5995                                  ; This code is deallocated after initialization.
  5996                                  ;-----------------------------------------------------------------------------
  5997                                  
  5998                                  ;INIT	SEGMENT PUBLIC PARA
  5999                                  
  6000                                  ; 	EXTRN   HEADER:BYTE
  6001                                  ;	EXTRN   BADCOMLKMES:BYTE
  6002                                  
  6003                                  ;	PUBLIC  CONPROC
  6004                                  
  6005                                  ;ASSUME  CS:RESGROUP,DS:RESGROUP,ES:RESGROUP,SS:RESGROUP
  6006                                  
  6007                                          ;ORG 0
  6008                                  ;ZERO = $
  6009                                  	; 23/09/2018
  6010                                  ZERO equ $	; Offset 0E30h for original MSDOS 3.3 COMMAND.COM
  6011                                  
  6012                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6013                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1560h (CODERES:0820h)
  6014                                  
  6015                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6016                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1670h (CODERES:0820h)
  6017                                  ConProc:
  6018                                  	;mov	sp,offset ResGroup:RStack	; must be first instruction
  6019 00001590 BC[2E05]                	mov	sp,RStack
  6020                                  
  6021                                  ; We need to set the PSP to us right at start because Carousel needs
  6022                                  ; to be lied to and it does not set PSP when it transfers control to
  6023                                  ; us after loading us as an overlay. By setting PSP, we ensure that
  6024                                  ; command.com is also not lied to.
  6025                                  
  6026                                  	; 14/01/2023
  6027                                  	; MSDOS 6.0
  6028 00001593 B450                            mov	ah,50h
  6029                                  	;mov	ah,SET_CURRENT_PDB
  6030 00001595 8CC3                            mov	bx,es
  6031 00001597 CD21                            int	21h
  6032                                  
  6033                                  	; 14/01/2023
  6034                                  	;mov	ah,30h 
  6035                                  	;;mov	ax,GET_VERSION<<8 ; 3000h
  6036                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6037 00001599 B80030                  	mov	ax,3000h
  6038 0000159C CD21                    	int	21h
  6039                                  	;;;cmp	ax,EXPECTED_VERSION ; 1E03h
  6040                                  	;;cmp	ax,5
  6041                                  	;cmp	ax,EXPECTED_VERSION ; 0005h
  6042                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6043 0000159E 3D070A                  	cmp	ax,EXPECTED_VERSION ; 1606h
  6044                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  6045                                  	;cmp	ax,0A07h
  6046 000015A1 7411                    	je	short okdos			; DOS version is ok
  6047                                  
  6048 000015A3 BA[6821]                	mov	dx,BADVERMSG			; DX = ptr to msg
  6049 000015A6 E832FE                  	call	RPrint
  6050                                  
  6051                                  	; MSDOS 3.3
  6052                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  6053                                  	;int	21h             ; DOS - PRINT STRING
  6054                                  				; DS:DX -> string terminated by "$"
  6055 000015A9 8CC0                    	mov	ax,es
  6056 000015AB 2639061600              	cmp	[es:PDB.PARENT_PID],ax
  6057                                  	;cmp	[es:16h],ax			; if COMMAND is own parent,
  6058                                  Here:	
  6059 000015B0 74FE                    	jz	short Here			;  loop forever
  6060                                  	
  6061 000015B2 CD20                    	int	20h				; otherwise, exit
  6062                                  okdos:
  6063                                  	; 23/09/2018
  6064                                  
  6065                                  ;  Calculate and save the end of the INIT segment (which is also
  6066                                  ;  the beginning of TRANGROUP).
  6067                                  
  6068                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6069                                  	; MSDOS 3.3
  6070                                  	;mov	ah,65h
  6071                                  	;mov	al,2
  6072                                  	;mov	dx,-1
  6073                                  	;mov	bx,-1
  6074                                  	;mov	cx,5
  6075                                  	;mov	di,UCASE_ADDR
  6076                                  	;int	21h	; AH = 65h : GET EXTENDED COUNTRY INFORMATION (DOS 3.3+)
  6077                                  	;		; AL = 02h : Get pointer to character translation table
  6078                                  	;		; BX = code page (-1 = current global code page)
  6079                                  	;		; DX = country ID (-1 = current country)
  6080                                  	;		; CX = amount of data to return
  6081                                  	;; ES:DI = pointer to output buffer
  6082                                  	;; Buffer offset :
  6083                                  	;;	00h -  byte,  country Id
  6084                                  	;;  	01h -  dword, pointer to uppercase table	
  6085                                  
  6086                                  	; 14/01/2023
  6087                                  	; MSDOS 6.0 (& MSDOS 3.3)
  6088                                    	;mov	dx,232Fh     ; MSDOS 5.0 COMMAND.COM
  6089                                  	; 06/06/2023
  6090                                  	;mov	dx,26EFh     ; MSDOS 6.22 COMMAND.COM
  6091                                  	; 18/07/2024
  6092                                  	;mov	dx,289Fh     ; PCDOS 7.1 COMMAND.COM
  6093 000015B4 BAEF27                  	mov	dx,TRANSTART+15			; get end of init code
  6094                                  	; 27/09/2018
  6095                                  	;mov	dx,TRANSTART ; (paragraph aligned address)
  6096 000015B7 B104                    	mov	cl,4				; change to paragraphs
  6097 000015B9 D3EA                            shr	dx,cl				;
  6098 000015BB 8CC8                            mov     ax,cs                           ; get current segment
  6099 000015BD 01D0                            add     ax,dx                           ; calculate segment of end of init
  6100 000015BF A3[9520]                        mov     [initend],ax			; save this
  6101                                  
  6102                                  	; 14/01/2023
  6103                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1591h 
  6104                                  
  6105                                  ;  Check for /? on the command line. If found, display help text and exit.
  6106                                  ;  NOTE: this routine may terminate the program, never returning.
  6107                                  
  6108 000015C2 E8EA07                  	call	CheckHelp
  6109                                  
  6110                                  ; We have to patch the segment values for the various interrupt entry points.
  6111                                  ; This is because we need to have the default addresses of the handlers in our
  6112                                  ; stub before the relocation is done. These values will then be changed once
  6113                                  ; the resident is relocated
  6114                                  
  6115 000015C5 E81B0A                  	call	patch_segs
  6116                                  
  6117                                  ;  Turn APPEND off during initialization processing
  6118                                  
  6119                                  	; 14/01/2023
  6120 000015C8 B800B7                  	mov     ax,0B700h
  6121                                  	;mov	ax,APPENDINSTALL                ; see if append installed
  6122 000015CB CD2F                    	int	2Fh				;
  6123                                  	;cmp	al,0				; append installed?
  6124 000015CD 08C0                    	or	al,al
  6125 000015CF 7418                    	jz	short set_msg_addr		; no - continue
  6126                                  	
  6127 000015D1 B802B7                  	mov	ax,0B702h
  6128                                  	;mov	ax,APPENDDOS			; see if append DOS version right
  6129 000015D4 CD2F                    	int	2Fh				;
  6130                                  	;cmp	ax,-1				; append version correct?
  6131                                  	;jne	short set_msg_addr		; no - continue
  6132 000015D6 40                      	inc	ax ; -1 -> 0
  6133 000015D7 7510                    	jnz	short set_msg_addr        
  6134                                  	
  6135 000015D9 B806B7                  	mov     ax,0B706h
  6136                                  	;mov	ax,APPENDGETSTATE               ; Get the state of Append
  6137 000015DC CD2F                    	int	2Fh				;
  6138 000015DE 891E[BE02]                      mov     [Append_State],bx		; save append state
  6139                                         
  6140 000015E2 31DB                    	xor	bx,bx                           ; clear out state
  6141 000015E4 B807B7                  	mov	ax,0B707h
  6142                                  	;mov	ax,APPENDSETSTATE               ; Set the state of Append
  6143 000015E7 CD2F                    	int	2Fh				; set everything off
  6144                                  
  6145                                  set_msg_addr:
  6146                                  	; 14/01/2023
  6147                                  	;;mov	di,offset resgroup:DataresEnd 	; get address of resident end
  6148                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:15BAh) 
  6149                                  	;mov	di,093Eh  ; mov di,PAERRMSG0 ; MSDOS 5.0 COMMAND.COM
  6150                                  	; 06/06/2023
  6151                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:16CBh) 
  6152                                  	;mov	di,0A41h  ; mov di,PAERRMSG0 ; MSDOS 6.22 COMMAND.COM
  6153                                  	; 18/07/2024
  6154                                  	;mov	di,9F3h   ; mov di,PAERRMSG0 ; PCDOS 7.1 COMMAND.COM	
  6155 000015E9 BF[0509]                	mov	di,DataresEnd
  6156 000015EC 893E[B204]              	mov	[ResMsgEnd],di			; save it
  6157                                  
  6158 000015F0 E8020A                          call    get_XMMAddr                     ; get XMM call address
  6159                                  
  6160                                  ; Check if this is the first instance of command.com. If not, we just exit
  6161                                  ; this routine without moving any code.
  6162                                  ; After the int 2fh, ds:si points at the resident jump table in the previous
  6163                                  ; stub. We just have to copy this over
  6164                                  	
  6165                                  ;ifndef ROMDOS
  6166 000015F3 B80055                  	mov	ax,5500h
  6167                                  	;mov	ax,GET_COMMAND_STATE	
  6168                                  ;else
  6169                                  ;	mov	ax,GET_ROMCOMMAND_STATE	
  6170                                  ;endif ; ROMDOS
  6171                                  
  6172 000015F6 CD2F                    	int	2Fh	;  (Int 2Fh/AX=5500h - DOS 5+ - COMMAND.COM INTERFACE)
  6173                                  	;assume	ds:nothing
  6174                                  
  6175                                  	; 03/05/2023
  6176                                  	; Return:
  6177                                  	;   AX = 0000h if an instance of COMMAND.COM is already running
  6178                                  	;   DS:SI -> entry point table
  6179                                  
  6180                                  	; (si = offset Int2f_Entry)  ; (('MsgInt2fHandler:', 'fcOurs:'))
  6181                                  
  6182 000015F8 09C0                    	or	ax,ax
  6183 000015FA 750C                    	jnz	short first_com			; this is the first instance
  6184                                  
  6185                                  	; 14/01/2023
  6186 000015FC 268936[9A26]            	mov	[es:ResJmpTable],si		; save old stub jump table
  6187 00001601 268C1E[9C26]            	mov	[es:ResJmpTable+2],ds
  6188 00001606 EB06                    	jmp	short init_cntry
  6189                                  
  6190                                  first_com:
  6191 00001608 26C606[9E26]01          	mov	byte [es:FirstCom],1		; indicate first command.com
  6192                                  
  6193                                  init_cntry:
  6194                                  	; 14/01/2023
  6195 0000160E 06                      	push	es
  6196 0000160F 1F                      	pop	ds
  6197                                  	;assume	ds:RESGROUP
  6198                                  
  6199 00001610 B465                    	mov	ah,65h
  6200                                  	;mov	ah,GETEXTCNTRY			; get extended country info
  6201 00001612 B004                    	mov	al,4				; get file ucase table
  6202 00001614 BAFFFF                  	mov	dx,-1				;
  6203                                  	;mov	bx,-1				;
  6204 00001617 89D3                    	mov	bx,dx
  6205 00001619 B90500                  	mov	cx,5				; number of bytes we want
  6206                                  	;mov	di,offset resgroup:FUCase_Addr	; buffer for address
  6207 0000161C BF[B502]                	mov	di,FUCase_Addr
  6208 0000161F CD21                    	int	21h
  6209                                  		; DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
  6210                                  		; AL = function -
  6211                                  
  6212                                  ;	Bugbug:	conditionalize dbcs_vector stuff?
  6213                                  
  6214 00001621 1E                      	push	ds				;
  6215 00001622 B80063                  	mov	ax,6300h
  6216                                  	;mov	ax,(ECS_CALL shl 8) or GETLEADBTBL ;
  6217 00001625 CD21                    	int	21h				;
  6218                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
  6219                                  			
  6220 00001627 8CDB                    	mov	bx,ds				; get segment to bx
  6221 00001629 1F                      	pop	ds				;
  6222 0000162A 8936[BA02]              	mov	[Dbcs_Vector_Addr],si		; save address of
  6223 0000162E 891E[BC02]              	mov	[Dbcs_Vector_Addr+2],bx		; dbcs vector
  6224                                  
  6225                                  	;mov	ax,[16h]
  6226 00001632 A11600                  	mov	ax,[PDB.PARENT_PID]
  6227                                  				; mov ax,ds:16h	; Init PARENT so we can exit
  6228 00001635 A3[3E02]                	mov	[Parent],ax			;  correctly.
  6229 00001638 A10A00                  	mov	ax,[PDB.EXIT]   ; mov ax,ds:0Ah
  6230 0000163B A3[4002]                	mov	[OldTerm],ax
  6231 0000163E A10C00                  	mov	ax,[PDB.EXIT+2] ; mov ax,ds:0Ch
  6232 00001641 A3[4202]                	mov	[OldTerm+2],ax
  6233                                  
  6234                                  	; 14/01/2023
  6235                                  	;;;mov	ax,offset ResGroup:EndCode + 15
  6236                                  	;;mov	ax,1569h	; MSDOS 5.0 COMMAND.COM
  6237                                  	; 06/06/2023
  6238                                  	;mov	ax,1679h	; MSDOS 6.22 COMMAND.COM
  6239                                  	; 18/07/2024
  6240                                  	;mov	ax,16B3h	; PCDOS 7.1 COMMAND.COM
  6241                                  	
  6242                                  	;mov	ax,EndCode+15
  6243                                  	;;mov	ax,INITSTART+15 ; 24/09/2018
  6244                                  	; 14/01/2023
  6245                                  	;mov	cl,4				; ax = size of resident part of
  6246                                  	;shr	ax,cl				;  command in paragraphs. Add
  6247                                  	;mov	cx,cs				;  this to CS and you get the
  6248                                  	;add	ax,cx				;  segment of the TPA.
  6249                                  
  6250 00001644 8CC8                    	mov	ax,cs
  6251 00001646 056901                  	add	ax,(EndCode+15)>>4
  6252                                  	
  6253 00001649 A3[5804]                	mov	[Res_Tpa],ax			; Temporarily save the TPA segment
  6254 0000164C 2500F0                  	and	ax,0F000h
  6255 0000164F 050010                  	add	ax,1000h			; Round up to next 64K boundary
  6256 00001652 7303                    	jnc	short TpaSet			; Memory wrap if carry set
  6257 00001654 A1[5804]                	mov	ax,[Res_Tpa]
  6258                                  TpaSet:
  6259 00001657 A3[4C04]                	mov	[LTpa],ax			; Good enough for the moment
  6260                                  	;mov	ax,[2]
  6261 0000165A A10200                  	mov	ax,[PDB.BLOCK_LEN]		; ax = # of paras given to command
  6262                                  
  6263 0000165D 8C1E[5204]              	mov	[MySeg1],ds			; These 3 variables are used as part of
  6264 00001661 8C1E[5604]              	mov	[MySeg2],ds			;  3 long ptrs that the transient will
  6265 00001665 8C1E[4A04]              	mov	[MySeg],ds			;  use to call resident routines.
  6266                                  	; 19/04/2023
  6267                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1641h
  6268 00001669 8C1E[5607]              	mov	[MySeg3],ds			; segment of msg retriever routine 
  6269                                  
  6270 0000166D A3[9502]                	mov	[MemSiz],ax			; Needed for execing other programs
  6271                                  
  6272                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  6273                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1648h
  6274                                  
  6275                                  ; First reallocate the COMMAND size to its memory image
  6276                                  	
  6277 00001670 50                      	push	ax    
  6278                                    	;;;mov	bx,2320h  ; MSDOS 5.0 COMMAND.COM
  6279                                  	;;mov	bx,offset RESGROUP:TranStart    ;
  6280                                  	;mov	bx,TRANSTART
  6281                                  	;;add	bx,98C5h  ; MSDOS 5.0 COMMAND.COM
  6282                                          ;add	bx,offset TRANGROUP:TranSpaceEnd;
  6283                                  	;add	bx,15 ; *			; round up the size
  6284                                  	; 06/06/2023
  6285                                  	;mov	bx,26E0h  ; MSDOS 6.22 COMMAND.COM ; mov bx,offset RESGROUP:TranStart
  6286                                  	;add	bx,0AF95h ; MSDOS 6.22 COMMAND.COM ; add bx,offset TRANGROUP:TranSpaceEnd
  6287                                  	;add	bx,15 ; *			; round up the size
  6288                                  
  6289                                  	; 03/05/2023
  6290                                  	;mov	bx,TRANSTART+15 ; * ; 14/01/2023
  6291                                  	;add	bx,TRANSPACEEND
  6292                                  	; 06/06/2023
  6293                                  	;mov	bx,TRANSTART+TRANSPACEEND+15 
  6294                                          ;mov	cl,4				;
  6295                                          ;shr	bx,cl				; size of command.com
  6296 00001671 BBE60C                  	mov	bx,(TRANSTART+TRANSPACEEND+15)>>4
  6297                                  
  6298 00001674 B44A                    	mov	ah,4Ah
  6299                                  	;mov	ah,SETBLOCK			; free all memory above pgm
  6300 00001676 CD21                            int     21h				;
  6301 00001678 58                              pop     ax				;
  6302                                  	
  6303                                  ; Compute maximum size of environment
  6304                                  
  6305                                  	;;mov	word [ENVMAX],69 ; = (160/16)+(973/16)-1 ; (11EEh-0E30h+0Fh/10h) = 3Ch
  6306                                          ;mov	word [ENVMAX],((ENVIRONSIZ+15)/16) + ((ENVMAXIMUM-ZERO+15)/16) - 1
  6307                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  6308                                  	;mov	word [EnvMax],81	; 10+72-1  ; MSDOS 5.0 COMMAND.COM
  6309                                  	;mov	word [EndMax],90	; 12+79-1  ; MSDOS 6.22 COMMAND.COM	
  6310                                  	; 22/07/2024
  6311                                  	;mov	word [EndMax],95	; 
  6312 00001679 C706[8920]5800          	mov	word [EnvMax],((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1
  6313                                  			; MSDOS 6.22	; 12+(((1B53h-1670h)+15)/16)-1 = 90
  6314                                  			; PCDOS 7.1	; ((166+15+)/16)+(1BF5h-16B0h+15)/16)-1 = 95
  6315                                  ;
  6316                                  ; Compute minimum size of environment
  6317                                  ;
  6318                                  	;;mov	word [EnvSiz],10 ; = 160/16	; MSDOS 3.3 COMMAND.COM
  6319                                  	;mov	word [EnvSiz],16 ; = 256/16	; MSDOS 5.0 COMMAND.COM
  6320 0000167F C706[8720]1000          	mov	word [EnvSiz],ENVSML/16 ; 256/16
  6321                                  
  6322                                  	;;;mov	dx,offset TranGroup:Transpaceend + 15 ; dx = size of transient
  6323                                  	;;mov	dx,98D4h	; MSDOS 5.0 COMMAND.COM
  6324                                  	; 06/06/2023
  6325                                  	;;mov	dx,0AFA4h	; MSDOS 6.22 COMMAND.COM
  6326                                  	;mov	dx,TRANSPACEEND+15 ; 4D5Ch+0Fh (for MSDOS 3.3 COMMAND.COM)
  6327                                  	; 22/07/2024
  6328                                  	;mov	dx,0AAA9h	; PCDOS 7.1 COMMAND.COM (0AA9Ah+0Fh)
  6329                                  	;mov	cl,4				;  in paragraphs.
  6330                                  	;shr	dx,cl
  6331 00001685 BA680A                  	mov	dx,(TRANSPACEEND+15)>>4
  6332                                  
  6333 00001688 8916[9720]                      mov     [TrnSize],dx			; save size of transient in paragraphs
  6334                                  
  6335 0000168C 29D0                    	sub	ax,dx				; max seg addr - # para's needed for transient
  6336 0000168E A3[8F02]                	mov	[TrnSeg],ax			;  = seg addr to load the transient at.
  6337                                  	;mov	ax,[2Ch]
  6338 00001691 A12C00                  	mov	ax,[PDB.ENVIRON]		; ax = environment segment
  6339                                  
  6340                                  	; 14/01/2023
  6341                                          ; MSDOS 6.0
  6342                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6343 00001694 A3[3A04]                	mov	[EnvirSeg],ax
  6344                                          
  6345                                  	; 21/01/2023
  6346 00001697 09C0                    	or	ax,ax				; if there is no environment segment,
  6347 00001699 7407                    	jz	short buildenv			; make one
  6348                                    
  6349                                  	; 21/01/2023
  6350                                  	; MSDOS 3.3 & MSDOS 5.0
  6351                                  	;;inc	byte [CHUCKENV]
  6352                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6353                                  	;inc	byte [AllocedEnv]		; Flag - old environment segment
  6354                                  	
  6355                                  	; MSDOS 3.3 & MSDOS 5.0
  6356                                  	; 06/06/2023
  6357                                  	;jmp	short environpassed
  6358                                  	
  6359                                  	; MSDOS 6.0
  6360                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM	
  6361 0000169B 803E[9E26]00            	cmp	byte [FirstCom],0		; if this is the first command.com,
  6362 000016A0 7403                    	je	short environpassed		; do a merge job (make sure COMSPEC exists)
  6363                                  
  6364                                  	; MSDOS 6.0
  6365                                  
  6366                                  ; We allocate a buffer here just large enough to hold the 'PATH=' and
  6367                                  ; the COMSPEC. After parsing, we will allocate an environment of the right
  6368                                  ; size and free this buffer. We need this buffer because we no longer have an
  6369                                  ; ENVIRONMENT segment but need a place to store the COMSPEC which can be
  6370                                  ; given on the command line before we know the environment size. This routine
  6371                                  ; will not return in case of an allocation error. It will either exit or hang
  6372                                  ; depending on whether or not this is the first COMMAND.COM or not.
  6373                                  
  6374                                  	; 14/01/2023
  6375                                  buildenv:
  6376 000016A2 E8E607                  	call	alloc_env                       ; try to allocate buffer
  6377                                  environpassed:
  6378                                  	; 14/01/2023 - MSDOS 5.0 COMMAND.COM
  6379                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  6380                                  	;mov	[EnvirSeg],ax
  6381                                  	;
  6382 000016A5 8EC0                    	mov	es,ax                           ; and it load into es.
  6383                                  	;assume	es:nothing
  6384                                  
  6385                                  gottheenvir:
  6386                                  
  6387                                  ; Initialize the command drive
  6388                                  
  6389                                  	; 14/01/2023
  6390                                  	; MSDOS 3.3 & MSDOS 6.0
  6391 000016A7 B419                    	mov	ah,19h
  6392                                  	;mov	ah,GET_DEFAULT_DRIVE	; 19h
  6393 000016A9 CD21                    	int	21h
  6394 000016AB FEC0                    	inc	al
  6395 000016AD A2[9402]                	mov	[ComDrv],al
  6396                                  
  6397                                          ;mov	al,byte ptr ds:[FCB]	; al = default drive number for command
  6398 000016B0 A05C00                          mov	al,[FCB] ; [5Ch]
  6399 000016B3 08C0                    	or	al,al
  6400 000016B5 7433                    	jz	short nocomdrv		; no drive specified
  6401                                  
  6402 000016B7 B43A                    	mov	ah,':'
  6403 000016B9 A2[9402]                	mov	[ComDrv],al
  6404 000016BC 0440                    	add	al,40h			; convert number to uppercase character
  6405                                  
  6406 000016BE FD                      	std
  6407                                  
  6408                                  	; MSDOS 6.0
  6409                                  	; 06/06/2023
  6410                                  	; MSDOS 6.22 - COMMAND.COM - RESGROUP:17B7h
  6411 000016BF 803E[5920]00            	cmp	byte [AllocedEnv],0	; if a new environment is being built,
  6412 000016C4 7420                    	je	short notwidenv		;  move the default comspec string in it
  6413                                  	; 14/01/2023
  6414                                  	; MSDOS 5.0 COMMAND.COM
  6415 000016C6 8B3E[7020]              	mov	di,[ComspOffset]
  6416 000016CA 26807D013A                      cmp	byte [es:di+1],':'	; drive specifier already exist?
  6417 000016CF 7415                            je	short notwidenv		; yes, must have been inherited that way
  6418                                  
  6419                                  	; 06/06/2023
  6420                                  	; MSDOS 3.3
  6421                                  	;;cmp	byte [CHUCKENV],0
  6422                                  	;;jne	short NOTWIDENV
  6423                                  	; 21/01/2021
  6424                                  	; MSDOS 5.0 - COMMAND.COM - RESGROUP:16A5h
  6425                                   	;cmp	byte [AllocedEnv],0
  6426                                  	;ja	short notwidenv
  6427                                  
  6428 000016D1 1E                        	push	ds			;  2 bytes to make room for a drivespec.
  6429 000016D2 06                      	push	es			;  the drivespec is in ax and is copied
  6430 000016D3 1F                      	pop	ds			;  on to the front of the string.
  6431                                  
  6432                                  ; 06/06/2023
  6433                                  %if 0
  6434                                  	; 21/01/2023
  6435                                  	; 14/01/2023
  6436                                  	; MSDOS 5.0 COMMAND.COM
  6437                                  	; MSDOS 3.3
  6438                                  	; 23/09/2018
  6439                                  	; 30/04/2018
  6440                                  	;mov	di,159
  6441                                  	;;MOV	DI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-1-10H
  6442                                  	;mov	di,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-1 ; mov di,9Fh
  6443                                  	mov	di,ENVIRONSIZ-1 ; 21/01/2023
  6444                                  	;mov	si,157
  6445                                  	;;MOV	SI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-3-10H
  6446                                          ;mov	si,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-3 ; mov si,9Dh 
  6447                                  	mov	si,ENVIRONSIZ-3 ; 21/01/2023 	
  6448                                  	;MOV	CX,ENVIRONSIZ2-2 ; mov cx,90h
  6449                                  	mov	cx,MAX_COMSPEC-2 ; 144
  6450                                  %endif
  6451                                  	; MSDOS 6.0
  6452                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM - RESGROUP:17CCh
  6453 000016D4 8DB58F00                        lea	si,[di+MAX_COMSPEC-3]	; lea si,[di+143]
  6454 000016D8 8DBD9100                        lea	di,[di+MAX_COMSPEC-1]	; lea di,[di+145]
  6455                                  
  6456 000016DC B99000                          mov	cx,MAX_COMSPEC-2 ; 144
  6457                                  
  6458 000016DF F3A4                    	rep	movsb
  6459 000016E1 1F                      	pop	ds
  6460                                  
  6461                                  	; MSDOS 6.0
  6462                                  	; 06/06/2023
  6463 000016E2 268945FF                	mov	[es:di-1],ax
  6464                                  
  6465                                  	; MSDOS 3.3
  6466                                  	;mov	[es:0Eh],ax
  6467                                  	;;;MOV	WORD PTR ES:[ECOMSPEC-10H],AX
  6468                                  	;;MOV	[es:(ECOMSPEC-ENVIRONMENT)],ax	; mov [es:0Eh],ax
  6469                                  	; 14/01/2023
  6470                                  	; 06/06/2023
  6471                                  	;mov	[es:ECOMSPEC],ax ; mov [es:0Eh],ax
  6472                                  
  6473                                  	; MSDOS 3.3 & MSDOS 6.0
  6474                                  notwidenv:
  6475 000016E6 FC                      	cld
  6476 000016E7 A3[3B20]                	mov	[AUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6477                                  
  6478                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  6479                                  %if 0
  6480                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6481                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C3h)
  6482                                  	; 06/06/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6483                                  	mov	[KAUTOBAT],ax ; db 0,":\AUTOEXEC.BAT"
  6484                                  %endif
  6485                                  
  6486                                  nocomdrv:
  6487 000016EA E841FA                  	call	SetVect        ; Set the vectors
  6488                                  
  6489                                  ; parsing starts here
  6490                                  
  6491                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6492                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:16C9h - CODERES:0989h)
  6493                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6494                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:17E8h - CODERES:0998h)
  6495                                  	; MSDOS 6.0
  6496 000016ED 0E                      	push	cs
  6497 000016EE 0E                      	push	cs
  6498 000016EF 1F                      	pop	ds
  6499 000016F0 07                      	pop	es
  6500                                  	;assume ds:ResGroup,es:ResGroup
  6501                                  
  6502 000016F1 BE8000                  	mov	si,80h				; get command line
  6503 000016F4 AC                      	lodsb					; get length of line
  6504 000016F5 89F7                    	mov	di,si				; get line position in di
  6505 000016F7 30E4                    	xor	ah,ah				; ax = length of command line
  6506                                  
  6507                                  ; insure that the command line correctly ends with a cr
  6508                                  
  6509 000016F9 01C7                    	add	di,ax				; go to end of command line
  6510 000016FB C6050D                          mov	byte [di],0Dh			; insert a carriage return
  6511 000016FE 31C9                    	xor	cx,cx				; clear cx
  6512 00001700 890E[6421]                      mov	[num_positionals],cx		; initialize positionals
  6513                                  
  6514                                  ; Scan the command line looking for the parameters
  6515                                  
  6516                                  Parse_command_line:
  6517                                  	;mov	di,offset ResGroup:Parse_Command; Get address of parse_command
  6518 00001704 BF[9E20]                	mov	di,PARSE_COMMAND
  6519 00001707 8B0E[6421]              	mov	cx,[num_positionals]		; Get number of positionals
  6520 0000170B 31D2                    	xor	dx,dx				; clear dx
  6521 0000170D 8936[6621]                      mov	[old_parse_ptr],si		; save position before calling parser
  6522                                  	;call	dword ptr Init_Parse
  6523 00001711 FF1E[9320]              	call	far [Init_Parse]		; call parser
  6524 00001715 890E[6421]                      mov     [num_positionals],cx		; Save number of positionals
  6525                                  	; 29/01/2023
  6526                                  	;;cmp	ax,END_OF_LINE ; 0FFFFh ; -1 	; are we at end of line?
  6527                                          ;cmp	ax,-1
  6528                                  	;jne	short t1
  6529                                  	; 10/06/2023
  6530 00001719 40                      	inc	ax	 ; cmp ax,-1
  6531 0000171A 7503                    	jnz	short t1 ; 0FFFFh -> 0
  6532                                  	; ax = 0
  6533 0000171C E99502                  	jmp     ArgsDone                        ; yes - exit
  6534                                  t1:	
  6535                                  	;;cmp	ax,RESULT_NO_ERROR ; 0		; did an error occur
  6536                                  	;;cmp	ax,0
  6537                                  	;and	ax,ax
  6538                                  	; 10/06/2023
  6539 0000171F 48                      	dec	ax  ; cmp ax,0
  6540 00001720 7468                    	jz	short parse_cont  ; 1 -> 0	; no - continue
  6541                                  
  6542                                  ; Before issuing error message - make sure switch is not /C
  6543                                  
  6544                                  parse_line_error:
  6545                                  	; 14/01/2023
  6546                                  	;push	si				; save line position
  6547                                  	;push	ax				; save error number
  6548                                  	;cmp	ax,3
  6549 00001722 83F803                  	cmp	ax,BadSwt_Ptr ; 3		; Was error invalid switch?
  6550                                          ;jnz	short parse_line_error_disp	; No - just issue message
  6551 00001725 7538                    	jne	short parse_line_error_disp2
  6552 00001727 56                      	push	si ; **				; save line position
  6553 00001728 50                      	push	ax ; *				; save error number
  6554 00001729 89F7                    	mov	di,si				; Get terminating pointer in DI
  6555 0000172B 8B36[6621]                      mov     si,[old_parse_ptr]		; Get starting pointer in SI
  6556                                  
  6557                                  init_chk_delim:
  6558 0000172F 39FE                    	cmp	si,di				; at end of parsed parameter?
  6559 00001731 742A                            je	short parse_line_error_disp	; Yes - just display message
  6560 00001733 AC                      	lodsb					;
  6561 00001734 3C20                    	cmp	al,20h ; ' ' ; 16/04/2023
  6562                                  	;cmp	al,space_chr ; 14/01/2023
  6563                                  	;;cmp	al,[space]			; Skip blank spaces
  6564 00001736 74F7                    	je	short init_chk_delim		;
  6565                                  	;cmp	al,9
  6566 00001738 3C09                    	cmp	al,tab_chr ; 9			; Skip tab characters
  6567 0000173A 74F3                    	je	short init_chk_delim		;
  6568                                  
  6569 0000173C 3A06[4E04]              	cmp	al,[RSwitChar]	; '/'		; Switch?
  6570 00001740 751B                            jne	short parse_line_error_disp	; No - just issue message
  6571 00001742 AC                      	lodsb					; Get the char after the switch
  6572                                  
  6573                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  6574                                  ;ifdef	DBCS
  6575                                  %if 1
  6576 00001743 E837FD                  	call	ITestKanj			; Is it DBCS?
  6577 00001746 7515                    	jnz	short parse_line_error_disp	; Yes - can't be /C or /K
  6578                                  %endif
  6579                                  ;endif
  6580 00001748 E8D505                  	call	iupconv 			; upper case it
  6581                                  
  6582                                  	;cmp	al,[scswitch]	; 'C'		; it is /C?
  6583                                          ;jne	short check_k_too ; MSDOS 6.0	;
  6584                                  	; 16/04/2023
  6585 0000174B 3C43                    	cmp	al,'C' ; scswitch
  6586                                  	;jne	short parse_line_error_disp  ; MSDOS 5.0 COMMAND.COM
  6587                                  	; 06/06/2023
  6588                                  	; MSDOS 6.22 COMMAND.COM
  6589 0000174D 7505                    	jne	short check_k_too
  6590 0000174F 5A                      	pop	dx ; *				; even up stack
  6591 00001750 5A                      	pop	dx ; **				; even up stack
  6592 00001751 E9D100                  	jmp	SetSSwitch			; Yes - go set COMMAND /C
  6593                                  
  6594                                  	; MSDOS 6.0
  6595                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6596                                  check_k_too:
  6597                                  	;cmp	al,[skswitch]	; 'K'		; it is /K?
  6598                                          ;jne	short parse_line_error_disp	;
  6599                                  	; 06/06/2023
  6600 00001754 3C4B                    	cmp	al,'K'
  6601 00001756 7505                    	jne	short parse_line_error_disp
  6602 00001758 5A                      	pop	dx ; *				; even up stack
  6603 00001759 5A                      	pop	dx ; **				; even up stack
  6604 0000175A E9C100                          jmp	SetKSwitch			; Yes - go set COMMAND /K
  6605                                  
  6606                                  parse_line_error_disp:
  6607                                  	; 14/01/2023
  6608 0000175D 58                      	pop	ax ; *				; restore error number
  6609 0000175E 5E                      	pop	si ; **				; restore line position
  6610                                  parse_line_error_disp2:
  6611 0000175F 89C2                    	mov	dx,ax				; get message number
  6612 00001761 E84C05                  	call	RPrintParse
  6613 00001764 E871FC                  	call	crlf
  6614 00001767 EB9B                            jmp     short Parse_command_line        ; continue parsing
  6615                                  
  6616                                  ; 22/07/2024
  6617                                  
  6618                                  ;CHECKDSWITCH:
  6619                                  	;;cmp	al,'d'
  6620                                          ;cmp	al,[letter_d]
  6621                                  	;jnz	short CHECKCSWITCH
  6622                                  
  6623                                  ; 16/04/2023
  6624                                  %if 1
  6625                                  SetMSwitch:
  6626                                          ;cmp	byte [ext_msg],1
  6627 00001769 803E[9920]01            	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6628                                  	; 16/04/2023
  6629                                  	;jnz	short setMswitchok		; no - set it
  6630                                  	;;mov	ax,1
  6631                                  	;mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6632                                  	;jmp	parse_line_error                ; go issue error message
  6633                                  	; 16/04/2023
  6634 0000176E 747C                    	je	short parse_line_error_j
  6635                                  setMswitchok:
  6636                                          ;mov	byte [ext_msg],1
  6637 00001770 C606[9920]01            	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6638                                  	; 06/06/2023
  6639 00001775 EB8D                    	jmp	short Parse_command_line	; keep parsing
  6640                                  %endif
  6641                                  
  6642                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6643                                  
  6644                                  SetDSwitch:
  6645                                  
  6646                                  ; Flag no date/time prompting.
  6647                                  
  6648                                  	; MSDOS 6.0
  6649 00001777 803E[9B20]00            	cmp	byte [dswitch],0	; has /D switch been set?
  6650                                  	; 16/04/2023
  6651                                  	;jz	short setdateok		; no - set it
  6652                                          ;;mov	ax,1
  6653                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6654                                          ;jmp	parse_line_error	; go issue error message
  6655                                  	; 16/04/2023
  6656 0000177C 756E                    	jnz	short parse_line_error_j
  6657                                  setdateok:
  6658 0000177E FE06[9B20]              	inc	byte  [dswitch]		; indicate /D entered
  6659                                  
  6660                                  	; MSDOS 3.3 & MSDOS 6.0
  6661 00001782 C606[4C20]01                    mov	byte [PRDATTM],1	; User explicitly says no date time
  6662                                  	; MSDOS 3.3
  6663                                  	;jmp	short CHKARG
  6664                                  	; MSDOS 6.0
  6665 00001787 E97AFF                  	jmp     Parse_command_line	; continue parsing
  6666                                  
  6667                                  parse_cont:
  6668                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6669                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:173Ch - CODERES:09FCh)
  6670                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6671                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:1869h - CODERES:0A19h)
  6672                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6673                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:18AEh
  6674                                  
  6675                                  	; MSDOS 6.0
  6676                                  
  6677                                  ; See if a switch was entered
  6678                                  ;
  6679                                  ; Bugbug: See if Comnd1_Syn can be moved into a reg. before the compare
  6680                                  
  6681 0000178A 813E[5D21][DD20]        	cmp	word [COMND1_SYN],COMMAND_F_SYN ; was /F entered?
  6682 00001790 7460                    	je	short SetFSwitch		; yes go set fail switch
  6683 00001792 813E[5D21][D120]        	cmp	word [COMND1_SYN],COMMAND_P_SYN ; was /P entered?
  6684 00001798 744B                    	je	short SetPSwitch		; yes go set up PERMCOM
  6685 0000179A 813E[5D21][E920]        	cmp	word [COMND1_SYN],COMMAND_D_SYN ; was /D entered?
  6686 000017A0 74D5                    	je	short SetDSwitch		; yes go set date switch
  6687 000017A2 813E[5D21][0E21]        	cmp	word [COMND1_SYN],COMMAND_C_SYN ; was /C entered?
  6688 000017A8 747B                    	je	short SetSSwitch		; yes go set up SINGLECOM
  6689                                  	; 06/06/2023
  6690                                  	; MSDOS 6.0 only!
  6691 000017AA 813E[5D21][3421]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; was /K entered?
  6692 000017B0 746C                            je	short SetKSwitch		; yes go set up SINGLECOM
  6693                                  	;
  6694 000017B2 813E[5D21][F520]        	cmp	word [COMND1_SYN],COMMAND_E_SYN ; was /E entered?
  6695 000017B8 747C                    	je	short SetESwitch		; yes go set up environment
  6696                                  
  6697                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6698                                  ; PCDOS 7.1 COMMAND.COM
  6699                                  %if 1
  6700 000017BA 813E[5D21][4021]        	cmp	word [COMND1_SYN],COMMAND_Y_SYN ; was /Y entered?
  6701                                  	;je	short SetYSwitch		; yes (step switch)
  6702                                  	; 22/07/2024
  6703 000017C0 7508                    	jne	short parse_cont_@
  6704                                  
  6705                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:19C3h
  6706                                  SetYSwitch:
  6707 000017C2 800E[5A04]10            	or      byte [Y_Flag], 10h
  6708 000017C7 E93AFF                  	jmp     Parse_command_line
  6709                                  
  6710                                  parse_cont_@:
  6711                                  %endif
  6712 000017CA 813E[5D21][1A21]        	cmp	word [COMND1_SYN],COMMAND_M_SYN	; was /MSG entered?
  6713                                  	;je	short SetMSwitchjmp		; yes go set up message flag
  6714                                  	; 15/01/2023
  6715 000017D0 7497                    	je	short SetMSwitch 
  6716                                  
  6717                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6718                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:18FDh
  6719                                  %if 1
  6720 000017D2 813E[5D21][4C21]        	cmp	word [COMND1_SYN],COMMAND_H_SYN	; was /H entered?
  6721 000017D8 747A                    	je	short SetHSwitch		; yes (load into UMB switch)
  6722 000017DA 813E[5D21][5821]        	cmp	word [COMND1_SYN],COMMAND_O_SYN	; was /O entered?
  6723 000017E0 747F                    	je	short SetOSwitch		; yes (disable overwrite prompt)
  6724                                  %endif
  6725 000017E2 E99800                  	jmp	ChkOtherArgs		; Must be something else
  6726                                  
  6727                                  	; MSDOS 6.0
  6728                                  ;SetMSwitchjmp:
  6729                                  	;jmp	SetMSwitch
  6730                                  
  6731                                  ; 22/07/2024
  6732                                  %if 1
  6733                                  SetPSwitch:
  6734                                  
  6735                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6736                                  ; termination address.
  6737                                  
  6738                                  	; MSDOS 6.0
  6739 000017E5 803E[A202]00            	cmp	byte [PermCom],0	; has /p switch been set?
  6740 000017EA 7415                    	jz	short permcomok		; no - set it
  6741                                  	; 16/04/2023
  6742                                  parse_line_error_j:
  6743                                          ;mov	ax,1
  6744 000017EC B80100                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6745 000017EF E930FF                          jmp	parse_line_error	; go issue error
  6746                                  %endif
  6747                                  	
  6748                                  	; MSDOS 6.0
  6749                                  SetFSwitch:
  6750 000017F2 803E[A902]FF            	cmp	byte [fFail],-1		; has fail switch been set?
  6751                                  	; 16/04/2023
  6752                                  	;jne	short failok		; no - set it
  6753                                  	;;mov	ax,1
  6754                                  	;mov	ax,MoreArgs_Ptr         ; set up too many arguments
  6755                                          ;jmp	parse_line_error        ; go issue error 
  6756                                  	; 16/04/2023
  6757 000017F7 74F3                    	je	short parse_line_error_j
  6758                                  
  6759                                  	; MSDOS 3.3 & MSDOS 6.0
  6760                                  failok:
  6761 000017F9 C606[A902]FF            	mov	byte [fFail],-1		; fail all INT 24s.
  6762                                  	; MSDOS 3.3
  6763                                  	;jmp	short CHKARG
  6764                                  	; MSDOS 6.0
  6765 000017FE E903FF                  	jmp	Parse_command_line
  6766                                  
  6767                                  ;CHECKPSWITCH:
  6768                                  	;;cmp	al,'p'			; Permanent COMMAND switch
  6769                                  	;cmp	al,[letter_p]
  6770                                          ;jnz	short CHECKDSWITCH
  6771                                  
  6772                                  ; 22/07/2024
  6773                                  %if 0
  6774                                  SetPSwitch:
  6775                                  
  6776                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6777                                  ; termination address.
  6778                                  
  6779                                  	; MSDOS 6.0
  6780                                  	cmp	byte [PermCom],0	; has /p switch been set?
  6781                                  	jz	short permcomok		; no - set it
  6782                                  	; 16/04/2023
  6783                                  parse_line_error_j:
  6784                                          ;mov	ax,1
  6785                                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6786                                          jmp	parse_line_error	; go issue error
  6787                                  %endif
  6788                                  
  6789                                  permcomok:
  6790                                  	; MSDOS 3.3 & MSDOS 6.0
  6791 00001801 FE06[A202]              	inc	byte [PermCom]
  6792                                  	;mov	word [OLDTERM],LODCOM
  6793 00001805 C706[4002][E000]        	mov	word [OldTerm],LodCom_Trap
  6794                                  	;mov	[OLDTERM+2],ds
  6795 0000180B 8C1E[4202]              	mov	[OldTerm+2],ds
  6796                                  
  6797                                  ; make sure that we display the date and time. if the flag was not
  6798                                  ; initialized, set it to indicate yes, do prompt.
  6799                                  
  6800                                  	; MSDOS 3.3
  6801                                  	;cmp	byte [PRDATTM],-1
  6802                                  	;jnz	short CHKARG
  6803                                  	;mov	byte [PRDATTM],0
  6804                                  	;jmp	short CHKARG
  6805                                  
  6806                                  	; MSDOS 6.0
  6807 0000180F 803E[4C20]FF            	cmp	byte [PRDATTM],-1
  6808 00001814 7505                    	jne	short Parse_command_line_jmp
  6809 00001816 C606[4C20]00            	mov	byte [PRDATTM],0
  6810                                  Parse_command_line_jmp:
  6811 0000181B E9E6FE                  	jmp     Parse_command_line	; keep parsing
  6812                                  
  6813                                  ;COMRETURNSJ:
  6814                                  ;	; MSDOS 3.3
  6815                                  ;	JMP	ARGSDONE
  6816                                  
  6817                                  	; 15/01/2023
  6818                                  	; MSDOS 6.0 
  6819                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6820                                  SetKSwitch:
  6821 0000181E C606[A302]00            	mov	byte [SemiPermCom],0
  6822 00001823 EB05                    	jmp	short SetSorKSwitch
  6823                                  
  6824                                  ;CHECKCSWITCH:
  6825                                  	;;cmp	al,'c'
  6826                                  	;cmp	al,[letter_c]
  6827                                          ;jnz	short CHECKESWITCH
  6828                                  
  6829                                  SetSSwitch:
  6830                                  ;SETCSWITCH:
  6831                                  
  6832                                  ; Set up pointer to command line, flag no date/time and turn off SingleCom.
  6833                                  
  6834 00001825 C606[A202]00            	mov	byte [PermCom],0	; A SingleCom must not be a PermCom
  6835                                  SetSorKSwitch:	; 06/06/2023
  6836 0000182A 8936[A502]              	mov	[SingleCom],si		; Point to the rest of the command line
  6837 0000182E C606[4C20]01            	mov	byte [PRDATTM],1	; no date or time either, explicit
  6838                                  ;COMRETURNSJ: ; 24/09/2018
  6839 00001833 E97E01                  	jmp     ArgsDone
  6840                                  
  6841                                  ;CHECKESWITCH:
  6842                                  	;cmp	al,'e'
  6843                                  	;jnz	short CHKARG
  6844                                  
  6845                                  ; Look for environment-size setting switch
  6846                                  
  6847                                  ; The environment size is represented in decimal bytes and is
  6848                                  ; converted into paragraphs (rounded up to the next paragraph).
  6849                                  
  6850                                  SetESwitch:
  6851                                  	; MSDOS 6.0
  6852 00001836 803E[9A20]00            	cmp	byte [eswitch],0	; has environment size switch been set?
  6853                                  	; 16/04/2023
  6854                                  	;jz	short eswitchok		; no - set it
  6855                                  	;;mov	ax,1
  6856                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6857                                          ;jmp	parse_line_error	; go issue error message
  6858                                  	; 16/04/2023
  6859 0000183B 75AF                    	jnz	short parse_line_error_j
  6860                                  eswitchok:
  6861 0000183D FE06[9A20]              	inc	byte [eswitch]		; indicate /E entered 	
  6862                                  
  6863                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  6864                                  	; 15/01/2023 - Retro DOS v4.1 (& v4.1) - MSDOS 5.0 COMMAND.COM
  6865                                  	; MSDOS 6.0
  6866                                  	;mov	di,offset ResGroup:Comnd1_Addr	; get number returned
  6867 00001841 BF[5F21]                        mov	di,COMND1_ADDR
  6868 00001844 8B1D                    	mov     bx,[di]				; into bx
  6869                                  
  6870 00001846 83C30F                  	add	bx,0Fh				; Round up to next paragraph
  6871 00001849 B104                    	mov	cl,4				; convert to pargraphs
  6872 0000184B D3EB                    	shr	bx,cl				; by right 4
  6873                                  
  6874 0000184D 891E[8720]              	mov	[EnvSiz],bx			; EnvSiz is in paragraphs
  6875 00001851 E9B0FE                  	jmp	Parse_command_line		; continue parsing command line
  6876                                  
  6877                                  ; 16/04/2023
  6878                                  %if 0
  6879                                  SetMSwitch:
  6880                                          ;cmp	byte [ext_msg],1
  6881                                  	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6882                                  	jnz	short setMswitchok		; no - set it
  6883                                  	;mov	ax,1
  6884                                  	mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6885                                  	jmp	parse_line_error                ; go issue error message
  6886                                  setMswitchok:
  6887                                          ;mov	byte [ext_msg],1
  6888                                  	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6889                                  	jmp	Parse_command_line              ; keep parsing
  6890                                  %endif
  6891                                  
  6892                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6893                                  %if 1
  6894                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:1913h
  6895                                  SetHSwitch:
  6896                                  	;jmp	short load_to_hma_umb	; load COMMAND.COM into HMA/UMB
  6897                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:19CBh
  6898                                  load_to_hma_umb:
  6899                                  	;cmp	byte [520h],0
  6900 00001854 803E[0E04]00            	cmp	byte [COMMAND_HIGH],0
  6901 00001859 741B                    	jz	short set_command_high_flag
  6902                                  parse_line_error_j2: ; 22/07/2024
  6903 0000185B B80100                  	mov	ax,1			; too many parameters
  6904 0000185E E9C1FE                  	jmp	parse_line_error
  6905                                  
  6906                                  ;set_command_high_flag:
  6907                                  ;	inc	byte [COMMAND_HIGH]
  6908                                  ;	jmp     Parse_command_line
  6909                                  
  6910                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:1916h
  6911                                  SetOSwitch:
  6912                                  	;jmp	short disable_overwrite_msg
  6913                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:19DFh
  6914                                  disable_overwrite_msg:
  6915 00001861 803E[FA01]63            	cmp	byte [cox_location],'c' ; "cox"
  6916                                  	;jz	short change_cox_to_VCB
  6917                                  	;mov	ax, 1 ; MoreArgs_Ptr
  6918                                  	;jmp	parse_line_error
  6919                                  	; 22/07/2024
  6920 00001866 75F3                    	jnz	short parse_line_error_j2
  6921                                  change_cox_to_VCB:
  6922 00001868 C606[FA01]56            	mov     byte [cox_location],56h ; 'V' ; "VCB"
  6923 0000186D C706[FB01]4342          	mov     word [cox_location+1],4243h ; 'CB'
  6924 00001873 E98EFE                  	jmp     Parse_command_line
  6925                                  
  6926                                  set_command_high_flag:
  6927 00001876 FE06[0E04]              	inc	byte [COMMAND_HIGH]
  6928 0000187A E987FE                  	jmp     Parse_command_line
  6929                                  %endif
  6930                                  
  6931                                  ;ArgsDoneJ:
  6932                                  	;jmp	ArgsDone
  6933                                  
  6934                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6935                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:181Dh - CODERES:0ADDh)
  6936                                  
  6937                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  6938                                  	; (MSDOS 6.22 COMMAND.COM - RESGROUP:196Dh - CODERES:0B1Dh)
  6939                                  
  6940                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  6941                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:19FAh
  6942                                  
  6943                                  ChkOtherArgs:
  6944                                  
  6945                                  ; We have a non-switch character here.
  6946                                  
  6947                                  	; MSDOS 6.0
  6948 0000187D 1E                      	push	ds ; ****			;
  6949 0000187E 56                      	push	si ; *** 			; save place in command line
  6950 0000187F C536[5F21]              	lds	si,[COMND1_ADDR]		; get address of filespec
  6951                                  	;assume	ds:nothing			;
  6952                                  
  6953 00001883 89F2                    	mov	dx,si				; put in dx also
  6954 00001885 B8023D                  	mov	ax,3D02h
  6955                                  	;mov	ax,(OPEN shl 8) or 2            ; Read and write
  6956 00001888 CD21                    	int	21h
  6957 0000188A 7260                    	jc	short ChkSrchSpec		; Wasn't a file
  6958 0000188C 89C3                    	mov	bx,ax
  6959 0000188E B80044                  	mov	ax,4400h
  6960                                  	;mov	ax,IOCTL shl 8
  6961 00001891 CD21                    	int	21h
  6962 00001893 F6C280                  	test	dl,80h
  6963 00001896 7506                    	jnz	short IsaDevice
  6964                                  BadSetCon:
  6965 00001898 B43E                    	mov	ah,3Eh
  6966                                  	;mov	ah,CLOSE		; Close initial handle, wasn't a device
  6967 0000189A CD21                    	int	21h
  6968 0000189C EB4E                    	jmp	short ChkSrchSpec
  6969                                  
  6970                                  	; 15/01/2023
  6971                                  IsaDevice:
  6972                                  	; MSDOS 3.3 & MSDOS 6.0
  6973 0000189E 30F6                    	xor	dh,dh
  6974 000018A0 80CA03                  	or	dl,3				; Make sure has CON attributes
  6975                                  	;mov	ax,(IOCTL shl 8) or 1
  6976 000018A3 B80144                  	mov	ax,(IOCTL*256)|1 ; 4401h
  6977 000018A6 CD21                    	int	21h
  6978                                  	;
  6979                                  	; 15/01/2023
  6980 000018A8 72EE                    	jc	short BadSetCon	; MSDOS 6.0 (& 5.0)
  6981                                  	; 25/09/2018
  6982                                  	;pop	dx ; *
  6983                                  	;pop	dx ; **
  6984                                  	;
  6985                                  	;jc	short BADSETCON	; MSDOS 6.0	; Can't set attributes - quit
  6986                                  	
  6987 000018AA 89DA                    	mov	dx,bx				; Save new handle
  6988                                  
  6989                                  	; MSDOS 6.0
  6990 000018AC 26803E[9F26]01          	cmp	byte [es:DevFlag],1
  6991 000018B2 742A                    	jz	short DevErr
  6992                                  
  6993                                  	; MSDOS 3.3
  6994                                          ;pop	bx ; *				; Throw away saved SI
  6995                                          ;pop	bx ; **				; Throw away saved CX
  6996                                  
  6997                                  	; MSDOS 3.3 & MSDOS 6.0
  6998 000018B4 51                      	push	cx ; **
  6999 000018B5 B90300                  	mov	cx,3
  7000 000018B8 31DB                    	xor	bx,bx
  7001                                  
  7002                                  	; 15/01/2023
  7003                                  rcclloop:
  7004 000018BA B43E                    	mov	ah,3Eh
  7005                                  	;mov	ah,CLOSE ; 3Eh
  7006 000018BC CD21                    	int	21h
  7007 000018BE 43                      	inc	bx
  7008 000018BF E2F9                    	loop	rcclloop
  7009                                  
  7010 000018C1 89D3                    	mov	bx,dx				; New device handle
  7011 000018C3 B445                    	mov	ah,45h
  7012                                  	;mov	ah,XDUP ; 45h
  7013 000018C5 CD21                    	int	21h				; Dup to 0
  7014 000018C7 B445                    	mov	ah,45h
  7015                                  	;mov	ah,XDUP
  7016 000018C9 CD21                    	int	21h				; Dup to 1
  7017 000018CB B445                    	mov	ah,45h
  7018                                  	;mov	ah,XDUP
  7019 000018CD CD21                    	int	21h				; Dup to 2
  7020 000018CF B43E                    	mov	ah,3Eh
  7021                                  	;mov	ah,CLOSE
  7022 000018D1 CD21                    	int	21h				; Close initial handle
  7023                                  	
  7024 000018D3 59                      	pop	cx ; **
  7025                                  	
  7026                                  	; MSDOS 6.0
  7027 000018D4 5E                      	pop	si ; ***			; restore position of command line
  7028 000018D5 1F                      	pop	ds ; ****			;
  7029                                  
  7030                                  ; Register the fact that we already have redirected the output
  7031                                  ; and can not do it again
  7032                                  
  7033 000018D6 26FE06[9F26]            	inc	byte [es:DevFlag]		
  7034 000018DB E926FE                  	jmp	Parse_command_line		; continue parsing
  7035                                  
  7036                                  	; MSDOS 3.3
  7037                                  	;jcxz	ARGSDONEJ2
  7038                                  	;jmp	CHKARG
  7039                                  
  7040                                  	; MSDOS 6.0
  7041                                  DevErr:
  7042 000018DE 5E                      	pop	si ; ***
  7043 000018DF 1F                      	pop	ds ; ****
  7044 000018E0 BA0100                  	mov	dx,1
  7045 000018E3 E8CA03                          call	RPrintParse                     ; "Too many parameters"
  7046 000018E6 E8EFFA                          call	crlf
  7047 000018E9 E918FE                  	jmp	Parse_command_line
  7048                                  
  7049                                  ChkSrchSpec:				; Not a device, so must be directory spec
  7050                                  	; MSDOS 6.0
  7051 000018EC 26803E[A026]01                  cmp	byte [es:PathFlag],1		; already set COMSPEC?
  7052 000018F2 74EA                            jz	short DevErr			; yes, error
  7053                                  	
  7054 000018F4 26FE06[A026]                    inc	byte [es:PathFlag]		; mark that we have a path
  7055                                  
  7056                                  ; We have to override the passed environment. Allocate a buffer for use now.
  7057                                  ; This buffer will later be replaced by a proper environment
  7058                                  
  7059                                  	; 15/01/2023 - Retro DOS v4.0 COMMAND.COM
  7060                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1899h
  7061                                  	; 06/06/2023
  7062                                  	;mov	ax,[ss:EnvirSeg]
  7063                                  	
  7064                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7065                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19E9h
  7066                                  	;
  7067                                  	; MSDOS 6.0
  7068 000018F9 E88F05                  	call	alloc_env                       ; environment buffer
  7069                                  
  7070                                  ; 06/06/2023
  7071                                  %if 0
  7072                                  	; 15/01/2023
  7073                                  	; MSDOS 5.0
  7074                                  	cmp	byte [ss:AllocedEnv],1
  7075                                  	mov	byte [ss:AllocedEnv],0
  7076                                  	jne     short env_alloced
  7077                                  	call	alloc_env
  7078                                  	mov	[ss:EnvirSeg],ax
  7079                                  %endif
  7080                                  
  7081                                  env_alloced:
  7082                                  	; MSDOS 5.0 & MSDOS 6.0
  7083 000018FC 8EC0                    	mov	es,ax
  7084                                  	;assume	es:nothing
  7085 000018FE 56                      	push	si ; **				; remember location of file
  7086 000018FF 31C9                    	xor	cx,cx				; clear cx for counting
  7087                                  	
  7088                                  	; 15/01/2023
  7089                                  countloop:
  7090 00001901 AC                      	lodsb					; get a character
  7091 00001902 41                      	inc	cx				; increment counter
  7092                                          ;;cmp	al,0
  7093                                  	;cmp	al,END_OF_LINE_OUT              ; are we at end of line?
  7094                                  	;jne	short countloop			; no - keep counting
  7095 00001903 08C0                    	or	al,al	
  7096 00001905 75FA                    	jnz	short countloop
  7097                                  	; 06/03/2023
  7098                                  	; al = 0 ; (*) 
  7099                                  
  7100                                  	;;;;mov	al,[Space]
  7101                                  	;;;mov	al,[ss:Space] ; 15/01/2023 - MSDOS 5.0 COMMAND.COM
  7102                                  	;;mov	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  7103                                  	; 16/04/2023
  7104                                  	;mov	al,20h ; ' ' 
  7105 00001907 4E                      	dec	si				; move back one
  7106                                          ;mov	[si],al				; put a space at end of line
  7107 00001908 C60420                  	mov	byte [si],20h ; ' ' ; space_chr
  7108                                  
  7109                                  ; We now know how long the new pathspec for command.com is. Time to
  7110                                  ; figure out how long the current COMSPEC setting is, and then to move
  7111                                  ; all the environment data up, throwing that COMSPEC setting away, and
  7112                                  ; preparing to append the new COMSPEC. ComspOffset (the offset of
  7113                                  ; where the filespec exists in the environment) is updated as well.
  7114                                  
  7115                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7116                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:19FEh
  7117                                  
  7118                                  	; MSDOS 6.0
  7119 0000190B 51                      	push	cx ; * 				;
  7120 0000190C B90080                          mov	cx,ENVBIG ; 32768		;
  7121 0000190F 368B3E[7020]                    mov	di,[ss:ComspOffset]		; get location of COMSPEC
  7122                                          ;mov	al,0                            ;
  7123                                  	; 06/06/2023
  7124                                  	; al = 0 ; (*)
  7125 00001914 F2AE                    	repne	scasb                           ; find the end of COMSPEC
  7126 00001916 89FE                            mov	si,di                           ;
  7127                                  comp_endenv:					;
  7128 00001918 AE                      	scasb					; end of env?
  7129 00001919 7404                    	je	short got_endenv		; yes
  7130 0000191B F2AE                    	repne	scasb				;
  7131 0000191D EBF9                    	jmp	short comp_endenv		;
  7132                                  got_endenv:					;
  7133 0000191F 89F9                    	mov	cx,di				;
  7134 00001921 29F1                    	sub	cx,si				;
  7135 00001923 368B3E[7020]            	mov	di,[ss:ComspOffset]		;
  7136 00001928 83EF08                  	sub	di,ComspStrLen	; sub di,8	;
  7137 0000192B 1E                      	push	ds ; +				;
  7138 0000192C 06                      	push	es				;
  7139 0000192D 1F                      	pop	ds				;
  7140 0000192E F3A4                    	rep	movsb				;
  7141 00001930 4F                      	dec	di				; copy in new COMSPEC=
  7142 00001931 0E                      	push	cs				;
  7143 00001932 1F                      	pop	ds				;
  7144                                          ;assume ds:RESGROUP			;
  7145                                  	;mov    si,offset RESGROUP:ComspString	;
  7146 00001933 BE[7220]                	mov	si,ComspString			; "COMSPEC=\COMMAND.COM"
  7147                                  	;mov	cx,ComspStrLen	; mov cx,8	;
  7148 00001936 B108                            mov	cl,ComspStrLen	; mov cl,8
  7149 00001938 F3A4                    	rep	movsb				;
  7150 0000193A 893E[7020]              	mov	[ComspOffset],di		;
  7151 0000193E 1F                      	pop	ds ; + 				;
  7152                                          ;assume ds:nothing			;
  7153 0000193F 59                      	pop	cx ; *				;
  7154                                  	;
  7155 00001940 5E                      	pop	si ; **				; get new comspec location back
  7156                                  
  7157                                  	;; MSDOS 3.3 COMMAND.COM
  7158                                  	;;mov	byte [CHUCKENV],0		; If search specified -- no inheritance
  7159                                  	;;mov	ax,PATHSTRING	; "PATH="	; Figure environment pointer
  7160                                  	;;mov	cl,4
  7161                                  	;;shr	ax,cl
  7162                                  	;;mov	dx,ds
  7163                                  	;;add	ax,dx
  7164                                  	;;mov	[ENVIRSEG],ax
  7165                                  	;;mov	es,ax
  7166                                  	;;;mov	al,' '
  7167                                  	;;mov	al,[SPACE_CHR]
  7168                                  	;;mov	[si-1],al
  7169                                  	;;pop	si ; **				; Remember location
  7170                                  	;;pop	cx ; *				; and count
  7171                                  	;;;mov	di,[ECOMLOC]
  7172                                  	;;mov	di,[COMSPOFFSET]
  7173                                  
  7174                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7175                                  	;; 15/01/2023
  7176                                  	;; MSDOS 5.0 COMMAND.COM
  7177                                  	;pop	si ; **
  7178                                  	;;mov	di,14
  7179                                  	;mov	di,ECOMSPEC ; mov di,0Eh
  7180                                  
  7181                                  ComtrLoop:
  7182                                  	; MSDOS 3.3 & MSDOS 6.0
  7183 00001941 AC                      	lodsb
  7184 00001942 49                      	dec	cx
  7185                                  	;;;;cmp	al,' '
  7186                                  	;;;cmp	al,[space_chr]
  7187                                  	;;cmp	al,[ss:Space] ;  MSDOS 5.0 COMMAND.COM
  7188                                  	;cmp	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  7189                                  	; 16/04/2023
  7190 00001943 3C20                    	cmp	al,20h ; ' ' ; space_chr
  7191 00001945 7416                    	je	short SetComsr
  7192                                  	; MSDOS 3.3
  7193                                  	;cmp	al,9
  7194                                  	;je	short SetComsr
  7195                                  	; MSDOS 3.3 & MSDOS 6.0
  7196 00001947 AA                      	stosb
  7197                                  
  7198                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7199                                  %if 1
  7200                                  ;ifdef	DBCS
  7201 00001948 30E4                    	xor	ah,ah
  7202                                  ;endif
  7203                                  %endif
  7204 0000194A E311                    	jcxz	SetComsr
  7205                                  
  7206                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7207                                  %if 1
  7208                                  ;ifdef DBCS
  7209 0000194C 1E                      	push	ds				; Make sure we have
  7210 0000194D 0E                      	push	cs				;  local DS for
  7211 0000194E 1F                      	pop	ds				;  ItestKanj
  7212 0000194F E82BFB                  	call	ITestKanj
  7213 00001952 1F                      	pop	ds				; restore parser ds
  7214 00001953 74EC                    	jz	short ComtrLoop
  7215 00001955 49                      	dec	cx
  7216 00001956 A4                      	movsb
  7217 00001957 FEC4                    	inc	ah
  7218 00001959 E302                    	jcxz	SetComsr
  7219                                  ;endif
  7220                                  %endif
  7221 0000195B EBE4                    	jmp	short ComtrLoop
  7222                                  
  7223                                  SetComsr:
  7224                                  	; 15/01/2023
  7225                                  	; MSDOS 6.0
  7226 0000195D 51                      	push	cx ; **
  7227 0000195E 0E                      	push	cs				; Get local segment
  7228 0000195F 1F                      	pop	ds				;
  7229                                  	;assume	ds:ResGroup			;
  7230 00001960 1E                      	push	ds ; *
  7231                                  	;mov	si,offset ResGroup:ComSpect
  7232 00001961 BE[2D20]                	mov	si,COMSPECT ; "\COMMAND.COM"
  7233 00001964 B90E00                  	mov	cx,14
  7234 00001967 268A45FF                	mov	al,[es:di-1]
  7235                                  
  7236                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7237                                  %if 1
  7238                                  ;ifdef DBCS
  7239 0000196B 08E4                    	or	ah,ah
  7240 0000196D 7508                    	jnz	short iNotRoot			; Last char was KANJI second byte, might be '\'
  7241                                  ;endif
  7242                                  %endif
  7243 0000196F 3A06[4F04]              	cmp	al,[RDirChar]
  7244 00001973 7502                    	jne	short iNotRoot
  7245 00001975 46                      	inc	si				; Don't make a double /
  7246 00001976 49                      	dec	cx
  7247                                  	
  7248                                  	; MSDOS 3.37
  7249                                  	;push	si
  7250                                  	;push	cx
  7251                                  	;push	ds
  7252                                  	;mov	si,COMSPECT ; "/COMMAND.COM"
  7253                                  	;mov	cx,14
  7254                                  	;mov	al,[es:di-1]
  7255                                  	;call	PATHCHRCMPR
  7256                                  	;jnz	short INOTROOT			
  7257                                  	;inc	si				; Don't make a double /
  7258                                  	;dec	cx
  7259                                  
  7260                                  iNotRoot:
  7261                                  	; MSDOS 3.3 & MSDOS 6.0
  7262 00001977 F3A4                    	rep	movsb
  7263                                  
  7264                                  	;;mov	dx,[ECOMLOC]			; Now lets make sure its good!
  7265                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7266                                  	; MSDOS 6.0 
  7267 00001979 8B16[7020]              	mov	dx,[ComspOffset] ; [COMSPOFFSET]
  7268                                  	; 15/01/2023
  7269                                  	;;mov	dx,14
  7270                                  	;mov	dx,ECOMSPEC ; mov dx,0Eh ; MSDOS 5.0 COMMAND.COM
  7271                                  
  7272 0000197D 06                      	push	es
  7273 0000197E 1F                      	pop	ds
  7274                                  	;;mov	ax,OPEN shl 8
  7275                                  	;mov	ax,OPEN*256 ; 3D00h
  7276 0000197F B8003D                  	mov	ax,3D00h ; 15/01/2023
  7277 00001982 CD21                    	int	21h				; Open COMMAND.COM
  7278 00001984 1F                      	pop	ds ; *
  7279 00001985 720E                    	jc	short SetComsrBad		; No COMMAND.COM here
  7280 00001987 89C3                    	mov	bx,ax				; Handle
  7281 00001989 B43E                    	mov	ah,3Eh ; 15/01/2023
  7282                                  	;mov	ah,CLOSE ; 3Eh
  7283 0000198B CD21                    	int	21h				; Close COMMAND.COM
  7284                                  SetComsrRet:
  7285                                  	; 15/01/2023
  7286 0000198D 59                      	pop	cx ; **
  7287 0000198E 5E                      	pop	si ; ***
  7288                                  
  7289                                  	; MSDOS 6.0
  7290 0000198F 1F                      	pop	ds ; ****			;
  7291                                  	;assume	ds:ResGroup			;
  7292                                  	;
  7293 00001990 0E                      	push	cs				; Make sure local ES is
  7294 00001991 07                      	pop	es				;  restored
  7295 00001992 E96FFD                  	jmp	Parse_command_line		; continue parsing command line
  7296                                  
  7297                                  	; MSDOS 3.3
  7298                                  ;ARGSDONEJ2:
  7299                                  	;jcxz	ARGSDONE
  7300                                  	;jmp	CHKARG
  7301                                  
  7302                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7303                                  SetComsrBad:
  7304                                  	; MSDOS 3.3 & MSDOS 6.0
  7305                                  	;mov	dx,offset ResGroup:BadComlkMsg	; dx = ptr to msg
  7306 00001995 BA[0022]                	mov	dx,BADCOMLKMES
  7307                                  
  7308                                  ;	Note: we're about to make a near call to TriageError, which
  7309                                  ;	lives in a different segment and group. Some linkers will
  7310                                  ;	generate a warning like "Possible fix-up overflow". We're
  7311                                  ;	ok, though, because we all fit in 64 KB and, at init time,
  7312                                  ;	we're still all together.
  7313                                  
  7314                                  	; 16/01/2023
  7315                                  	;TRIAGEERROR equ TRANSTART+TriageError
  7316                                  	;(MSDOS 5.0 COMMAND.COM, 2320h+2D92h)
  7317                                  
  7318                                  	; 06/06/2023
  7319                                  	TRIAGEERROR equ TRANSTART+TriageError
  7320                                  	;(MSDOS 6.22 COMMAND.COM, 26E0h+333Ch)
  7321                                  
  7322                                  	;;;call	50B2h ; MSDOS 5.0 COMMAND.COM
  7323                                  	;;call	5A1Ch ; MSDOS 6.22 COMMAND.COM
  7324                                  	; 18/07/2024
  7325                                  	;call	5A6Ch ; PCDOS 7.1 COMMAND.COM	
  7326 00001998 E8(8B58)                	call	TRIAGEERROR	; TRIAGEERROR procedure is at offset 354Eh
  7327                                  				; in original MSDOS 3.3 COMMAND.COM
  7328                                  
  7329                                  			; TriageError procedure is at offset 50B2h
  7330                                  			; in original MSDOS 5.0 COMMAND.COM	
  7331 0000199B 83F841                  	cmp	ax,65
  7332 0000199E 7503                    	jne	short doprt
  7333                                  	;mov	dx,offset ResGroup:BadComaccMsg	; dx = ptr to msg
  7334 000019A0 BA[2922]                	mov	dx,BADCOMACCMSG
  7335                                  doprt:
  7336 000019A3 E835FA                  	call	RPrint
  7337                                  	;mov	si,offset ResGroup:ComSpect
  7338 000019A6 BE[2D20]                	mov     si,COMSPECT ; "\COMMAND.COM"
  7339                                  	;;mov	di,[ECOMLOC]
  7340                                  	; 06/06/2023
  7341 000019A9 8B3E[7020]              	mov	di,[ComspOffset] ; MSDOS 6.22 COMMAND.COM
  7342                                  	; 16/01/2023
  7343                                  	;mov	di,ECOMSPEC ; mov di,0Eh ; MSDOS 5.0 COMMAND.COM
  7344 000019AD B90E00                  	mov	cx,14
  7345 000019B0 F3A4                    	rep	movsb				; get my default back
  7346                                  
  7347 000019B2 EBD9                    	jmp	short SetComsrRet
  7348                                  
  7349                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7350                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1927h (CODERES:0BE7h)
  7351                                  
  7352                                  	; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7353                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1A99h (CODERES:0C49h)
  7354                                  ArgsDone:
  7355                                  	; MSDOS 6.0
  7356 000019B4 8E06[3A04]              	mov	es,[EnvirSeg]			; get environment back
  7357                                  	;assume	es:nothing			;
  7358                                  
  7359                                  	; MSDOS 3.3 & MSDOS 6.0
  7360 000019B8 803E[A202]00                    cmp	byte [PermCom],0
  7361 000019BD 742E                            jz	short ComReturns
  7362                                  
  7363 000019BF 06                      	push	es				; Save environment pointer
  7364 000019C0 B450                    	mov	ah,50h
  7365                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  7366 000019C2 8CDB                    	mov	bx,ds
  7367 000019C4 8EC3                    	mov	es,bx
  7368 000019C6 CD21                    	int	21h				; current process is me
  7369 000019C8 BF0A00                  	mov	di,PDB.EXIT ; mov di,0Ah	; Diddle the addresses in my header
  7370                                  	;;mov	ax,offset RESGROUP:LODCOM
  7371                                  	;mov	ax,LODCOM
  7372                                  	; 16/01/2023
  7373 000019CB B8[E000]                	mov	ax,LodCom_Trap
  7374 000019CE AB                              stosw
  7375 000019CF 8CD8                            mov	ax,ds
  7376 000019D1 AB                              stosw
  7377                                  	;;mov	ax,offset RESGROUP:CONTC
  7378                                  	;mov	ax,CONTC
  7379                                  	; 16/01/2023
  7380 000019D2 B8[AC00]                	mov	ax,Ctrlc_Trap
  7381 000019D5 AB                              stosw
  7382 000019D6 8CD8                            mov	ax,ds
  7383 000019D8 AB                              stosw
  7384                                  	;;mov	ax,offset DATARES:CritErr_Trap  ; MSDOS 6.0
  7385                                  	;mov	ax,CRITERR
  7386                                  	; 16/01/2023
  7387 000019D9 B8[B700]                	mov	ax,CritErr_Trap
  7388 000019DC AB                      	stosw
  7389 000019DD 8CD8                    	mov     ax,ds
  7390 000019DF AB                      	stosw
  7391                                  	;;mov	word ptr ds:16h,ds
  7392                                  	;mov	word ptr ds:[Pdb_Parent_Pid],ds ; Parent is me forever
  7393 000019E0 8C1E1600                	mov	[PDB.PARENT_PID],ds
  7394                                          ;;mov	dx,offset RESGROUP:Int_2e
  7395                                  	;mov	dx,Int_2e
  7396                                          ; 16/01/2023
  7397 000019E4 BA[A100]                	mov	dx,Int2e_Trap
  7398 000019E7 B82E25                  	mov	ax,252Eh
  7399                                  	;;mov	ax,(SET_INTERRUPT_VECTOR SHL 8) OR 2Eh
  7400                                  	;mov	ax,(SET_INTERRUPT_VECTOR*256) | 2Eh ; 252Eh
  7401 000019EA CD21                    	int     21h	; DOS - SET INTERRUPT VECTOR
  7402                                  			; AL = interrupt number
  7403                                  			; DS:DX = new vector to be used for specified interrupt
  7404 000019EC 07                              pop	es				; Remember environment
  7405                                  	
  7406                                  ComReturns:
  7407                                          ;mov	ax,word ptr ds:Pdb_Parent_Pid
  7408 000019ED A11600                  	mov	ax,[PDB.PARENT_PID] ; mov ax,ds:16h
  7409                                  	; 16/01/2023
  7410 000019F0 A3[3E02]                	mov	[Parent],ax			; Save parent
  7411                                          ;mov	word ptr ds:Pdb_Parent_Pid,ds 	; Parent is me
  7412 000019F3 8C1E1600                        mov	[PDB.PARENT_PID],ds ; mov word ptr ds:16h,ds
  7413                                          ;mov	ax,word ptr ds:PDB_Jfn_Table
  7414 000019F7 A11800                          mov	ax,[PDB.JFN_TABLE] ; mov ax,ds:18h
  7415 000019FA A3[9F02]                        mov	[Io_Save],ax		; Get the default stdin and out
  7416 000019FD 8C1E[3E04]                      mov	[Com_Ptr+2],ds		; Set all these to resident
  7417 00001A01 8C1E[4204]                      mov	[Com_Fcb1+2],ds
  7418 00001A05 8C1E[4604]              	mov	[Com_Fcb2+2],ds
  7419                                          ;mov	di,offset ResGroup:ComSpec
  7420 00001A09 BF[4B02]                        mov	di,ComSpec
  7421                                  
  7422                                  	;;mov	si,[ECOMLOC]
  7423                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  7424 00001A0C 8B36[7020]              	mov	si,[ComspOffset]
  7425                                  	; 16/01/2023 - MSDOS 5.0 COMMAND.COM
  7426                                  	;mov	si,ECOMSPEC ; mov si,0Eh
  7427                                  
  7428 00001A10 803E[5920]00            	cmp	byte [AllocedEnv],0 ; MSDOS 6.0
  7429                                          ;cmp	byte [CHUCKENV],0 ; MSDOS 3.3
  7430                                  	
  7431 00001A15 8CD8                    	mov	ax,ds				; Xchg es,ds
  7432 00001A17 06                      	push	es
  7433 00001A18 1F                      	pop	ds
  7434 00001A19 8EC0                    	mov	es,ax
  7435                                  
  7436                                  	; 06/06/2023
  7437 00001A1B 7517                    	jne	short CopyComsp ; MSDOS 6.0
  7438                                  	; 16/01/2023	
  7439                                  	;je	short CopyComsp ; MSDOS 5.0
  7440                                  	;;je	short COPYCOMSP	; MSDOS 3.3	; All set up for copy
  7441                                  
  7442 00001A1D 0E                              push	cs
  7443 00001A1E 1F                              pop	ds
  7444                                  
  7445                                          ;mov	si,offset ResGroup:ComspString
  7446 00001A1F BE[7220]                	mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  7447 00001A22 06                      	push	es
  7448 00001A23 57                      	push	di
  7449 00001A24 E89A02                  	call	IfindE
  7450 00001A27 89FE                    	mov	si,di
  7451 00001A29 06                      	push	es
  7452 00001A2A 1F                      	pop	ds
  7453 00001A2B 5F                      	pop	di
  7454 00001A2C 07                      	pop	es
  7455 00001A2D 7305                            jnc	short CopyComsp
  7456                                  
  7457                                  	; 06/06/2023
  7458                                  	; MSDOS 6.0
  7459                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1B04h
  7460                                  ComSpecNofnd:
  7461                                  	;;mov	si,offset ResGroup:ComspString
  7462                                  	;mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  7463                                  	;add	si,ComspStrLen ; add si,8
  7464 00001A2F BE[7A20]                	mov	si,ComspString+ComspStrLen
  7465                                  	
  7466                                  	;; 21/01/2023
  7467                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:19A1h
  7468                                  	;;mov	si,0Eh
  7469                                  	;mov	si,ECOMSPEC
  7470                                  	
  7471 00001A32 0E                      	push	cs
  7472 00001A33 1F                      	pop	ds	
  7473                                  
  7474                                  	; 21/01/2023
  7475                                  ;COMSPECNOFND:
  7476                                  	; MSDOS 3.3
  7477                                          ;;mov	si,[es:ECOMLOC]
  7478                                          ;mov	si,[es:COMSPOFFSET]
  7479                                  	;;add	si,offset RESGROUP:PATHSTRING
  7480                                          ;add	si,PATHSTRING ; "PATH="
  7481                                  	;push	cs
  7482                                  	;pop	ds
  7483                                  
  7484                                  CopyComsp:
  7485                                  	; 21/01/2023
  7486                                  ;COPYCOMSP:
  7487                                  	; MSDOS 3.3 & MSDOS 6.0
  7488                                  	;;mov	es:PutBackComSpec.SubstPtr,di
  7489                                  	;mov	[es:PUTBACKSUBSTPTR],di		; Save ptr to beginning of comspec path
  7490 00001A34 26893E[2A02]            	mov	[es:PutBackComSpec],di
  7491 00001A39 807C013A                	cmp	byte [si+1],':'			; Is there a drive specifier in comspec
  7492 00001A3D 7506                    	jne	short CopyComspLoop		; If not, do not skip over first 2 bytes
  7493                                  	;;add	es:PutBackComSpec.SubstPtr,2
  7494                                  	;add	word [es:PUTBACKSUBSTPTR],2
  7495 00001A3F 268306[2A02]02          	add	word [es:PutBackComSpec],2
  7496                                  CopyComspLoop:
  7497 00001A45 AC                      	lodsb
  7498 00001A46 AA                      	stosb
  7499 00001A47 08C0                    	or	al,al
  7500 00001A49 75FA                    	jnz	short CopyComspLoop
  7501                                  
  7502 00001A4B 26893E[8B02]            	mov	[es:ComSpec_End],di		; Save ptr to end of comspec path
  7503 00001A50 26FF0E[8B02]            	dec	word [es:ComSpec_End]
  7504 00001A55 268A26[9402]            	mov	ah,[es:ComDrv]
  7505 00001A5A 80C440                  	add	ah,'A'-1 ; 40h
  7506 00001A5D 268826[2F02]            	mov	[es:PutBackDrv],ah		; save drive letter
  7507                                  
  7508                                  	; 21/01/2023 - Retrro DOS v4.0 (& v4.1) COMMAND.COM
  7509                                  	
  7510                                  	; MSDOS 6.0
  7511 00001A62 E8E702                  	call	setup_for_messages		; set up parse and extended error messages
  7512                                  
  7513                                  ; The routine below sets up the exact resident size of COMMAND. If this is not
  7514                                  ; the first COMMAND, then the resident code is not duplicated and the resident
  7515                                  ; size is just the data. If we are the first COMMAND, it checks if we are to
  7516                                  ; be loaded into HIMEM. If not, then the resident size includes the code and
  7517                                  ; the data otherwise it is just the data.
  7518                                   
  7519 00001A65 E88603                  	call	Setup_res_end			; put resident size in ResSize
  7520                                  
  7521 00001A68 0E                      	push	cs
  7522 00001A69 1F                      	pop	ds
  7523                                  	;assume	ds:RESGROUP
  7524                                  
  7525                                  ;Public EnvMaximum
  7526                                          ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7527                                  EnvMaximum:	; MSDOS 5.0 COMMAND.COM - RESGROUP:19DCh
  7528                                          ; 06/06/2023 - Retro DOS v4.2 COMMAND.COM
  7529                                  		; MSDOS 6.22 COMMAND.COM - RESGROUP:1B53h
  7530                                          ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  7531                                  		; PCDOS 7.1 COMMAND.COM - RESGROUP:1B53h
  7532                                  
  7533                                  	; 21/01/2023
  7534                                  	; MSDOS 6.0
  7535                                  	;;mov	si,offset RESGROUP:TranStart
  7536                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM
  7537                                  	; 06/06/2023
  7538                                  	;;mov	si,26E0h	; MSDOS 6.22 COMMAND.COM
  7539                                  	;mov	si,TRANSTART
  7540                                  	;add	si,100h
  7541                                  	; 23/04/2023
  7542 00001A6A BEE028                  	mov	si,TRANSTART+100h
  7543                                  
  7544                                  	;;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  7545                                  	;;mov	cx,87C2h	; MSDOS 5.0 COMMAND.COM
  7546                                  	; 06/06/2023
  7547                                  	;;mov	cx,9D53h	; MSDOS 6.22 COMMAND.COM
  7548                                  	; 18/07/2024
  7549                                  	;mov	cx,9B47h	; PCDOS 7.1 COMMAND.COM	
  7550 00001A6D B9[B196]                	mov	cx,TRANDATAEND-100h
  7551                                  
  7552 00001A70 FC                      	cld
  7553 00001A71 D1E9                    	shr	cx,1
  7554 00001A73 31D2                    	xor	dx,dx
  7555                                  Ichksum:
  7556 00001A75 AD                      	lodsw
  7557 00001A76 01C2                    	add	dx,ax
  7558 00001A78 83D200                  	adc	dx,0
  7559 00001A7B E2F8                    	loop	Ichksum
  7560                                  
  7561 00001A7D 8916[9702]                      mov	[Sum],dx			; store checksum
  7562                                  
  7563 00001A81 803E[4C20]00                    cmp     byte [PRDATTM],0
  7564 00001A86 750C                            jne	short NoBatchSeg		; don't do autoexec or date time
  7565                                  	
  7566                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  7567                                  
  7568                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0fh)/16
  7569                                  	; 21/01/2023
  7570                                  	;mov	bx,4
  7571 00001A88 BB0400                          mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  7572 00001A8B B448                    	mov	ah,48h
  7573                                  	;mov	ah,ALLOC                        ;
  7574 00001A8D CD21                            int	21h                             ;
  7575 00001A8F 7203                    	jc	short NoBatchSeg		; didn't allocate - pretend no batch
  7576 00001A91 A3[4902]                        mov	[Batch],ax			; save batch segment
  7577                                  
  7578                                  NoBatchSeg:
  7579                                  	; 21/01/2023
  7580                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7581 00001A94 8B1E[3A04]              	mov	bx,[EnvirSeg]			; get old environment segment
  7582 00001A98 891E[8B20]              	mov	[OldEnv],bx			; save it
  7583 00001A9C C706[8D20]0000          	mov	word [UsedEnv],0		; initialize env size counter
  7584 00001AA2 8EDB                    	mov	ds,bx
  7585                                  	;assume	ds:nothing
  7586                                  	
  7587 00001AA4 31F6                    	xor	si,si
  7588 00001AA6 89F7                    	mov	di,si
  7589                                  
  7590                                  ; This is the maximum allowed size for the environment
  7591                                  
  7592                                  	; 21/01/2023
  7593                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1A1Eh
  7594                                  	;mov	bx,4096 - 1 ; 0FFFh		; max. allowed env. size
  7595                                  	;;mov	[ss:EnvMax],bx
  7596                                  	;shl	bx,1
  7597                                  	;shl	bx,1
  7598                                  	;shl	bx,1
  7599                                  	;shl	bx,1
  7600 00001AA8 BBF0FF                  	mov	bx,(4096-1)<<4 ; mov bx,0FFF0h
  7601 00001AAB 36891E[8920]            	mov	[ss:EnvMax], bx			; convert envmax to bytes
  7602 00001AB0 4B                      	dec	bx				; dec by one to leave room for double 0
  7603 00001AB1 31D2                    	xor	dx,dx				; use dx to indicate that there was
  7604                                  						; no environment size error.
  7605                                  ;public NxtStr
  7606                                  NxtStr:
  7607 00001AB3 E8E101                  	call	GetStrLen			; get the size of the current env string
  7608                                  
  7609                                  ;Bugbug: Can use ss here to address UsedEnv
  7610                                  
  7611 00001AB6 1E                      	push	ds                              ; get addressability to environment
  7612 00001AB7 0E                              push	cs                              ;                       counter
  7613 00001AB8 1F                              pop	ds                              ;
  7614                                  	;assume	ds:ResGroup
  7615 00001AB9 010E[8D20]                      add	[UsedEnv],cx			; add the string length to env size
  7616 00001ABD 1F                      	pop	ds                              ;
  7617                                  	;assume	ds:nothing
  7618                                  	
  7619 00001ABE 83F901                  	cmp	cx,1				; end of environment was encountered.
  7620 00001AC1 7405                    	je	short EnvExit
  7621 00001AC3 29CB                    	sub	bx,cx
  7622                                  	;jae	short OkCpyStr			; can't fit in all of enviroment.
  7623                                  	; 21/01/2023
  7624 00001AC5 73EC                    	jae	short NxtStr
  7625 00001AC7 42                      	inc	dx				; out of env space msg must be displayed
  7626                                  	;jmp	short EnvExit
  7627                                  
  7628                                  ;OkCpyStr:
  7629                                  	;jmp	short NxtStr
  7630                                  
  7631                                  EnvExit:
  7632 00001AC8 0E                      	push	cs
  7633 00001AC9 1F                      	pop	ds
  7634                                  	;assume	ds:ResGroup
  7635 00001ACA 09D2                    	or	dx,dx				; dx will be non-zero if error
  7636 00001ACC 7406                    	jz	short EnvNoErr
  7637                                  	;mov	dx,offset ResGroup:OutEnvMsg	; dx = ptr to msg
  7638 00001ACE BA[8021]                	mov	dx,OUTENVMSG
  7639 00001AD1 E807F9                  	call 	RPrint
  7640                                  EnvNoErr:
  7641 00001AD4 A1[8720]                	mov	ax,[EnvSiz]			; env size previously set
  7642 00001AD7 B104                    	mov	cl,4
  7643 00001AD9 D3E0                    	shl	ax,cl				; get size in bytes
  7644 00001ADB 3B06[8D20]              	cmp	ax,[UsedEnv]			; is it a new env?
  7645 00001ADF 7706                    	ja	short st_envsize		; yes, store the size
  7646 00001AE1 A1[8D20]                	mov	ax,[UsedEnv]
  7647 00001AE4 83C00F                  	add	ax,15				; round up
  7648                                  st_envsize:	
  7649 00001AE7 D3E8                    	shr	ax,cl
  7650 00001AE9 A3[8720]                	mov	[EnvSiz],ax			; store env size needed(paras)
  7651                                  
  7652                                  ;if MSVER
  7653                                  	;cmp	SingleCom,0
  7654                                  	;jnz	nophead 			; don't print header if SingleCom
  7655                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7656                                  	;call	RPrint
  7657                                  ;nophead:
  7658                                  ;endif
  7659                                  	; 21/01/2023
  7660                                  
  7661                                  	; MSDOS 3.3 & 6.0
  7662 00001AEC 833E[4902]00            	cmp     word [Batch],0		; did we set up a batch segment?
  7663 00001AF1 7503                    	jnz     short DoDate		; yes - go initialize it
  7664 00001AF3 E99300                  	jmp     NoDttm			; don't do autoexec or date time
  7665                                  
  7666                                  DoDate:
  7667                                  
  7668                                  ; allocate batch segment for d:/autoexec.bat + no arguments
  7669                                  
  7670 00001AF6 A1[4902]                	mov	ax,[Batch]		; get batch segment
  7671 00001AF9 C606[9D02]03            	mov	byte [EchoFlag],3	; set batch echo
  7672 00001AFE C706[AE02]0100          	mov	word [Nest],1		; set nest flag to 1 batch
  7673 00001B04 8EC0                    	mov	es,ax
  7674                                  
  7675                                  ; initialize the segment
  7676                                  
  7677 00001B06 31FF                    	xor	di,di
  7678                                  	;;mov	al,0
  7679                                  	;mov	al,BATCHTYPE ; 0
  7680                                  	; 06/06/2023
  7681 00001B08 31C0                    	xor	ax,ax
  7682 00001B0A AA                      	stosb
  7683                                  	;mov	al,1			; initialize echo for batch exit
  7684                                  	;inc	al
  7685                                  	; 22/07/2024
  7686 00001B0B 40                      	inc	ax
  7687 00001B0C AA                      	stosb
  7688                                  
  7689                                  ; Hosebag! This guy does not use the struct fields to init the BatchSegment
  7690                                  
  7691                                  	;xor	ax,ax			; initialize to zero
  7692                                  	; 06/06/2023
  7693                                  	;dec	al ; ax = 0
  7694                                  	; 22/07/2024
  7695 00001B0D 48                      	dec	ax
  7696                                  
  7697                                  	; 21/01/2023
  7698 00001B0E AA                      	stosb	; MSDOS 6.0 		; clear out BatchEOF
  7699                                  
  7700 00001B0F AB                      	stosw				; batch segment of last job - batlast
  7701 00001B10 AB                      	stosw				; segment for FOR
  7702 00001B11 AA                      	stosb				; FOR flag
  7703 00001B12 AB                      	stosw				; position in file - batseek
  7704 00001B13 AB                      	stosw
  7705                                  
  7706                                  ; clean out the parameters
  7707                                  
  7708                                  	;mov	ax,-1			; initialize to no parameters
  7709                                  	; 06/06/2023
  7710 00001B14 48                      	dec	ax ; ax = -1
  7711                                  
  7712 00001B15 B90A00                  	mov	cx,10
  7713 00001B18 F3AB                    	rep	stosw
  7714                                  
  7715                                  ; decide whether we should grab the default drive
  7716                                  
  7717 00001B1A 803E[3B20]00            	cmp	byte [AUTOBAT],0 ; ":\AUTOEXEC.BAT"
  7718 00001B1F 7509                    	jne	short NoAutSet
  7719 00001B21 B419                    	mov	ah,19h	; 21/01/2023
  7720                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  7721 00001B23 CD21                    	int	21h
  7722                                  	;;add	al,'A'
  7723                                  	;add	al,[letter_A] ; Ucasea
  7724                                  	;add	al,[ucasea] ; 21/01/2023
  7725                                  	; 21/01/2023
  7726 00001B25 0441                    	add	al,'A'
  7727 00001B27 A2[3B20]                	mov	[AUTOBAT],al
  7728                                  
  7729                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7730                                  %if 0
  7731                                  	; 21/01/2023
  7732                                  	; 06/06/2023
  7733                                  	mov	[KAUTOBAT],al
  7734                                  %endif
  7735                                  
  7736                                  NoAutSet:
  7737                                  
  7738                                  ; copy in the batch file name (including nul)
  7739                                  
  7740                                  	;mov	si,offset ResGroup:AutoBat
  7741 00001B2A BE[3B20]                	mov	si,AUTOBAT
  7742 00001B2D B90800                  	mov	cx,8
  7743 00001B30 F3A5                    	rep	movsw
  7744                                  	; 23/04/2023
  7745 00001B32 A4                      	movsb	; MSDOS 6.0		; move in carriage return to terminate string
  7746                                  
  7747                                  	;mov	dx,offset ResGroup:AutoBat
  7748 00001B33 BA[3B20]                	mov     dx,AUTOBAT ; ":\AUTOEXEC.BAT"
  7749                                  
  7750                                  	;;mov	ax,OPEN shl 8
  7751 00001B36 B8003D                  	mov	ax,3D00h ; 21/01/2023
  7752                                  	;mov	ax,OPEN*256 ; 3D00h	; open for read
  7753 00001B39 CD21                    	int	21h			; see if autoexec.bat exists
  7754 00001B3B 7208                    	jc	short noabat
  7755 00001B3D 89C3                    	mov	bx,ax
  7756 00001B3F B43E                    	mov	ah,3Eh ; 21/01/2023
  7757                                  	;mov	ah,CLOSE  ; 3Eh
  7758 00001B41 CD21                    	int	21h
  7759                                  	;jmp	Drv0			; go process autoexec
  7760                                  	; 22/07/2024
  7761 00001B43 EB51                    	jmp	short Drv0
  7762                                  
  7763                                  noabat:
  7764 00001B45 50                      	push	ax
  7765 00001B46 E85701                  	call	Setup_Seg
  7766 00001B49 A3[5720]                	mov	[triage_add+2],ax
  7767 00001B4C 58                      	pop	ax
  7768 00001B4D FF1E[5520]              	call	far [triage_add]	; get extended error
  7769 00001B51 83F841                  	cmp	ax,65			; network access denied?
  7770                                  	;jne	short OPENERR		; no - go deallocate batch
  7771                                  	; 21/01/2023
  7772                                  	;;je	short AccDenErr
  7773                                  	; 22/07/2024
  7774 00001B54 7506                    	jne	short OpenErr
  7775                                  	; 06/06/2023
  7776                                  	;je	short AccDenErr
  7777                                  
  7778                                  	; 21/01/2023
  7779                                  ;_ACCDENERROR:					; yes - put out message
  7780                                  ;	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7781                                  ;	mov	dx,ACCDENERR
  7782                                  ;	call	RPRINT
  7783                                  
  7784                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7785                                  
  7786                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7787                                  
  7788                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7789                                  ; 06/06/2023
  7790                                  ; 21/01/2023
  7791                                  %if 0
  7792                                  
  7793                                  ; If AUTOEXEC.BAT is not found, then check for KAUTOEXE.BAT. Changed
  7794                                  ; by Ellen to check only when in Korea. The country information
  7795                                  ; returned will overlay the old parse data area, but we don't care
  7796                                  ; since we won't need the parse information or country information.
  7797                                  ; We only care about the country code returned in BX.
  7798                                  
  7799                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1AE7h
  7800                                  	; 06/06/2023
  7801                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1C5Eh
  7802                                  
  7803                                  	;mov	dx,offset ResGroup:Internat_Info ; set up internat vars
  7804                                  	mov	dx,INTERNAT_INFO
  7805                                  	mov	ax,3800h
  7806                                  	;mov	ax,INTERNATIONAL<<8
  7807                                  	;;mov	ax,INTERNATIONAL shl 8		; get country dependent info
  7808                                  	int	21h				;
  7809                                  	jc	short NoKabat 			; error - don't bother with it
  7810                                  	cmp	bx,52h
  7811                                  	;cmp	bx,KOREA_COUNTRY_CODE		; are we speaking korean?
  7812                                  	jne	short OpenErr 			; no, don't check for kautoexe
  7813                                  
  7814                                  	;mov	di,BatFile			; 3/3/kk
  7815                                  	mov	di,20h
  7816                                  	;mov	si,offset ResGroup:KautoBat	; another trial to do	3/3/kk
  7817                                  	mov	si,KAUTOBAT
  7818                                  	mov	cx,8				; auto execution for the 3/3/kk
  7819                                  	rep	movsw				; non-english country	3/3/kk
  7820                                  	movsb					; move in carraige return to terminate string
  7821                                  	;mov	dx,offset ResGroup:KautoBat	; 3/3/kk
  7822                                  	mov	dx,KAUTOBAT
  7823                                  	mov	ax,3D00h
  7824                                  	;mov	ax,OPEN<<8
  7825                                  	;;mov	ax,OPEN shl 8			; 3/3/kk
  7826                                  	int	21h				; see if kautoexe.bat exists  3/3/kk
  7827                                  	jc	short NoKabat 			; 3/3/kk
  7828                                  	mov	bx,ax				; 3/3/kk
  7829                                  	mov	ah,3Eh
  7830                                  	;mov	ah,CLOSE			; 3/3/kk
  7831                                  	int	21h				; 3/3/kk
  7832                                  	jmp	short Drv0			; 3/3/kk
  7833                                  
  7834                                  NoKabat:					; 3/3/kk
  7835                                  	call	far [triage_add]		; get extended error
  7836                                  	cmp	ax,65				; network access denied?
  7837                                  	jnz	short OpenErr 			; no - go deallocate batch
  7838                                  
  7839                                  %endif	
  7840                                  	; 06/06/2023 - Retro DOS 4.2 COMMAND.COM
  7841                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7842                                  
  7843                                  AccDenErr:					; yes - put out message
  7844                                  	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7845 00001B56 BA[D006]                	mov	dx,ACCDEN
  7846 00001B59 E87FF8                  	call	RPrint
  7847                                  OpenErr:
  7848                                  ;OPENERR:
  7849 00001B5C 8E06[4902]              	mov	es,[Batch]		; not found--turn off batch job
  7850 00001B60 B449                    	mov	ah,49h
  7851                                  	;mov	ah,DEALLOC ; 49h
  7852 00001B62 CD21                    	int	21h
  7853 00001B64 C706[4902]0000          	mov	word [Batch],0		; after dealloc in case of ^c
  7854 00001B6A C606[9D02]01            	mov	byte [EchoFlag],1
  7855 00001B6F C706[AE02]0000          	mov	word [Nest],0		; indicate no batch in progress
  7856                                  ;DoDttm:
  7857                                  	;mov	ax,offset TranGroup:Datinit
  7858 00001B75 B8[9A32]                	mov	ax,DATINIT
  7859 00001B78 A3[4D20]                	mov	[INITADD],ax
  7860                                  
  7861                                  	; MSDOS 6.0
  7862                                  ;;M004;;mov	ax,TrnSeg	
  7863                                  ;
  7864                                  ; M004; We cant use TrnSeg now because it is not initialized. We now that
  7865                                  ; M004; the transient starts on a para boundary at the label TranStart.
  7866                                  ; M004; We use TranStart to get the start of the transient segment.
  7867                                  
  7868                                  	; 21/01/2023
  7869                                  	;mov	ax,offset RESGROUP:TranStart	; M004
  7870                                  	;;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7871                                  	; 06/06/2023
  7872                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7873                                  	;
  7874                                  	;mov	ax,TRANSTART
  7875                                  	;mov	cl,4				; M004
  7876                                  	;shr	ax,cl				; get relative seg ; M004
  7877                                  	; 06/06/2023
  7878 00001B7B B87E02                  	mov	ax,TRANSTART>>4	
  7879                                  
  7880 00001B7E 8CC9                    	mov	cx,cs
  7881 00001B80 01C8                    	add	ax,cx				; ax = transient seg ; M004
  7882                                  
  7883                                  	; 21/01/2023
  7884                                  	; MSDOS 3.3
  7885                                  	; 25/09/2018
  7886                                  	;mov     ax,[TrnSeg]	; COMMAND.COM (MSDOS 3.3) - Offset 1387h
  7887                                  
  7888                                  	; MSDOS 3.3 & MSDOS 6.0
  7889 00001B82 A3[4F20]                	mov	[INITADD+2],ax
  7890                                  	;call	dword ptr InitAdd
  7891 00001B85 FF1E[4D20]              	call	far [INITADD]
  7892                                  
  7893                                  NoDttm:
  7894                                  	; MSDOS 6.0
  7895                                  	; 21/01/2023
  7896                                  ;Copyright:
  7897                                  	;public	Copyright
  7898                                  ;	Bugbug:	remove Copyright label.
  7899                                  
  7900                                  ;if IBMVER
  7901 00001B89 833E[A502]00            	cmp	word [SingleCom],0
  7902 00001B8E 7506                    	jnz	short Drv0			; don't print header if SingleCom
  7903                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7904 00001B90 BA[9B21]                	mov	dx,COPYRIGHTMSG
  7905 00001B93 E845F8                  	call	RPrint
  7906                                  ;endif
  7907                                  	; 21/01/2023
  7908                                  	; MSDOS 3.3
  7909                                  	;cmp	word [SingleCom],0	; don't print header if SingleCom
  7910                                  	;jnz	short DRV0
  7911                                  	;mov	dx,HEADERPTR	; dx = ptr to msg
  7912                                  	;call	RPRINT
  7913                                  ;DRV0:
  7914                                  	; MSDOS 3.3
  7915                                  	;mov	byte [INITFLAG],0
  7916                                  	;jmp	ENDINIT
  7917                                  
  7918                                  	; 21/01/2023
  7919                                  	; MSDOS 6.0
  7920                                  Drv0:						; Reset APPEND state
  7921 00001B96 1E                      	push	ds				; save data segment
  7922 00001B97 0E                      	push	cs				; Get local segment into DS
  7923 00001B98 1F                      	pop	ds				;
  7924 00001B99 B807B7                  	mov	ax,0B707h ; 21/01/2023
  7925                                  	;mov	ax,APPENDSETSTATE		; Set the state of Append
  7926 00001B9C 8B1E[BE02]              	mov	bx,[Append_State] 		;  back to the original state
  7927 00001BA0 CD2F                    	int	2Fh				;
  7928 00001BA2 1F                      	pop	ds				; get data segment back
  7929                                  
  7930                                  ;Check FirstCom set previously to see if this is the first instance of
  7931                                  ;command.com. If not, we do not move command.com. Instead, we copy over the
  7932                                  ;jump table from the previous stub to the current stub.
  7933                                  
  7934 00001BA3 803E[9E26]01            	cmp	byte [FirstCom],1		; first command.com?
  7935 00001BA8 7431                    	jz	short move_code			; yes, move it
  7936                                  
  7937 00001BAA 06                      	push	es
  7938 00001BAB 1E                      	push	ds
  7939                                  
  7940 00001BAC 1E                      	push	ds
  7941 00001BAD 07                      	pop	es
  7942                                  	;mov	di,offset DATARES:Int2f_Entry
  7943 00001BAE BF[6600]                	mov	di,Int2f_Entry	
  7944                                  
  7945                                  	;mov	ds,[es:ResJmpTable+2]		; get segment address
  7946                                  	;mov	si,[es:ResJmpTable]		; get offset address
  7947                                  	; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7948 00001BB1 26C536[9A26]            	lds	si,[es:ResJmpTable]
  7949                                  
  7950                                  	;mov	cx,11
  7951                                  	;;mov 	cx,NUM_RELOC_ENTRIES 		; number of dword ptrs
  7952                                  	;shl	cx,1
  7953                                  	;shl	cx,1				; size of table in bytes
  7954                                  	; 21/01/2023
  7955 00001BB6 B92C00                  	mov	cx,44				; size of table in bytes
  7956                                  
  7957 00001BB9 FC                      	cld
  7958 00001BBA F3A4                    	rep	movsb				; copy the jump table
  7959                                  
  7960                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  7961                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:1D6Ch
  7962                                  %if 1
  7963 00001BBC A0[FA01]                	mov     al,[cox_location] ; "cox"
  7964 00001BBF 26A2[FA01]              	mov     [es:cox_location],al ; "cox"
  7965 00001BC3 A1[FB01]                	mov     ax,[cox_location+1]
  7966 00001BC6 A3[FB01]                	mov     [cox_location+1],ax
  7967                                  %endif
  7968                                  
  7969                                  ;Check if the resident code is in HMA. We assume that it is in HMA if its 
  7970                                  ;code segment > 0f000h. If in HMA, we set the ComInHMA flag
  7971                                  
  7972 00001BC9 26817DFE00F0            	cmp	word [es:di-2],0F000h		; is resident code in HMA?
  7973 00001BCF 7206                    	jb	short res_low			; no, dont set flag
  7974                                  
  7975 00001BD1 26C606[9600]01          	mov	byte [es:ComInHMA],1		; indicate code in HMA
  7976                                  res_low:
  7977 00001BD7 1F                      	pop	ds
  7978 00001BD8 07                      	pop	es
  7979 00001BD9 EB03                    	jmp	short finish_init
  7980                                  
  7981                                  ;Now, we can move the resident code to its final location, either to HIMEM
  7982                                  ;or to overlay the messages in the data segment if the user has not used the
  7983                                  ;/msg switch.
  7984                                  
  7985                                  move_code:
  7986 00001BDB E85702                  	call	Move_res_code			; move the code
  7987                                  
  7988                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  7989                                  ; PCDOS 7.1 COMMAND.COM
  7990                                  %if 0
  7991                                  finish_init:
  7992                                  	;jmp	RESGROUP:EndInit 		; finish initializing
  7993                                  	jmp	EndInit
  7994                                  %else
  7995                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:1D8Fh
  7996                                  finish_init:
  7997 00001BDE 803E[A202]01            	cmp	byte [PermCom],1
  7998 00001BE3 7523                    	jne	short finish_init_@
  7999 00001BE5 803E[0E04]01            	cmp	byte [COMMAND_HIGH],1	; COMMAND.COM will be moved to HMA/UMB
  8000 00001BEA 751C                    	jne	short finish_init_@
  8001 00001BEC BB4000                  	mov	bx,40h			; high memory first fit
  8002 00001BEF B80158                  	mov	ax,5801h		; set allocation strategy
  8003 00001BF2 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  8004                                  				; AL = function code: set allocation strategy
  8005 00001BF4 BB0100                  	mov	bx,1			; add UMBs to DOS memory chain
  8006 00001BF7 B80358                  	mov	ax,5803h		; set UMB link state
  8007 00001BFA CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
  8008                                  				; AL = function code: (DOS 5beta) set UMB link state
  8009 00001BFC 720A                    	jb	short finish_init_@
  8010 00001BFE 8B1E[B404]              	mov	bx,[ResSize]
  8011 00001C02 B448                    	mov	ah,48h
  8012 00001C04 CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  8013                                  				; BX = number of 16-byte paragraphs desired
  8014 00001C06 7303                    	jnb	short patch_segments_hma
  8015                                  finish_init_@:
  8016 00001C08 E90AE7                  	jmp	EndInit
  8017                                  
  8018                                  patch_segments_hma:
  8019                                  	;mov	[ds:0Ch],ax
  8020 00001C0B A30C00                  	mov	[PDB.EXIT+2],ax
  8021                                  	;mov	[ds:10h],ax
  8022 00001C0E A31000                  	mov	[PDB.CTRL_C+2],ax
  8023                                  	;mov	[ds:14h],ax
  8024 00001C11 A31400                  	mov	[PDB.FATAL_ABORT+2],ax
  8025                                  	;mov	[ds:16h],ax
  8026 00001C14 A31600                  	mov	[PDB.PARENT_PID],ax
  8027                                  	;mov	[ds:36h],ax
  8028 00001C17 A33600                  	mov	[PDB.JFN_Pointer+2],ax
  8029 00001C1A A3[3E02]                	mov	[Parent],ax
  8030 00001C1D A3[4202]                	mov	[OldTerm+2],ax
  8031 00001C20 A3[3E04]                	mov	[Com_Ptr+2],ax
  8032 00001C23 A3[4204]                	mov	[Com_Fcb1+2],ax
  8033 00001C26 A3[4604]                	mov	[Com_Fcb2+2],ax
  8034 00001C29 A3[4A04]                	mov	[MySeg],ax
  8035 00001C2C A3[5204]                	mov	[MySeg1],ax
  8036 00001C2F A3[5604]                	mov	[MySeg2],ax
  8037 00001C32 A3[5607]                	mov	[MySeg3],ax
  8038 00001C35 A3[2801]                	mov	[int2fh_segm],ax ; [Carousel_i2f_Hook+3] ; 23/07/2024
  8039                                  	;mov	di,(offset Int2f_Entry+2)
  8040 00001C38 BF[6800]                	mov	di,Int2f_Entry+2
  8041 00001C3B 833DFF                  	cmp	word [di],0FFFFh
  8042 00001C3E 7409                    	jz	short already_hma
  8043 00001C40 B10B                    	mov	cl,11		; NUM_RELOC_ENTRIES
  8044                                  patch_entry_seg:
  8045 00001C42 8905                    	mov	[di],ax
  8046 00001C44 83C704                  	add	di,4
  8047 00001C47 E2F9                    	loop	patch_entry_seg
  8048                                  already_hma:
  8049 00001C49 8EC0                    	mov	es,ax
  8050 00001C4B 31F6                    	xor	si,si
  8051 00001C4D 31FF                    	xor	di,di
  8052 00001C4F B103                    	mov	cl,3			; BX = resident part size in paragraphs
  8053                                  					; after shifting: resident part size in words
  8054 00001C51 D3E3                    	shl	bx,cl			; move resident part of COMMAND.COM to HMA (UMB)
  8055 00001C53 89D9                    	mov	cx,bx			; number of words
  8056 00001C55 F3A5                    	rep movsw
  8057 00001C57 1E                      	push	ds
  8058 00001C58 8ED9                    	mov	ds,cx	; 0
  8059                                  	;mov	[ds:0BAh],ax	; INT 2Eh segment
  8060 00001C5A A3BA00                  	mov	[(2Eh*4)+2],ax
  8061 00001C5D 40                      	inc	ax
  8062                                  	;mov	[ds:0BEh],ax	; INT 2Fh segment
  8063 00001C5E A3BE00                  	mov	[(2Fh*4)+2],ax
  8064 00001C61 1F                      	pop	ds
  8065 00001C62 8CC3                    	mov	bx,es
  8066 00001C64 B450                    	mov	ah,50h
  8067 00001C66 CD21                    	int	21h		; DOS - 2+ internal - SET PSP SEGMENT
  8068                                  				; BX = segment address of new PSP
  8069 00001C68 4B                      	dec	bx
  8070 00001C69 8EC3                    	mov	es,bx			; memory arena header (segment)
  8071 00001C6B 43                      	inc	bx			; PSP (program) address/segment
  8072                                  	;mov	[es:1],bx
  8073                                  	;mov	[es:ARENA.owner],bx
  8074 00001C6C 26891E0100              	mov	[es:arena_owner],bx
  8075                                  	;mov	word [es:8],4F43h	; 'CO' ; [es:arena_name]
  8076 00001C71 26C7060800434F          	mov	word [es:arena_name],4F43h
  8077                                  	;mov	word [es:0Ah],4D4Dh	; 'MM'
  8078 00001C78 26C7060A004D4D          	mov	word [es:arena_name+2],4D4Dh
  8079                                  	;mov	word [es:0Ch],4E41h	; 'AN'
  8080 00001C7F 26C7060C00414E          	mov	word [es:arena_name+4],4E41h
  8081                                  	;mov	word [es:0Eh],44h	; 'D'
  8082 00001C86 26C7060E004400          	mov	word [es:arena_name+6],44h
  8083 00001C8D FE06[0E04]              	inc	byte [COMMAND_HIGH]	; = 2
  8084                                  					; Resident portion of COMMAND.COM is
  8085                                  					; in HMA/UMB flag (=2)
  8086 00001C91 53                      	push	bx
  8087                                  	;mov	ax,offset EndInit
  8088 00001C92 B8[1503]                	mov	ax,EndInit
  8089 00001C95 50                      	push	ax
  8090 00001C96 CB                      	retf	
  8091                                  %endif
  8092                                  
  8093                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8094                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1BA8h (CODERES:0E68h)
  8095                                  
  8096                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  8097                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1E48h
  8098                                  
  8099                                  GetStrLen:
  8100                                  ;	Get length of string pointed to by DS:SI. Length includes NULL.
  8101                                  ;	Length is returned in CX
  8102                                  
  8103                                  	; MSDOS 3.3 & MSDOS 6.0
  8104 00001C97 31C9                    	xor	cx,cx
  8105                                  NxtChar:
  8106 00001C99 AC                      	lodsb
  8107 00001C9A 41                      	inc	cx
  8108 00001C9B 08C0                    	or	al,al
  8109 00001C9D 75FA                    	jnz	short NxtChar
  8110 00001C9F C3                      	retn
  8111                                  
  8112                                  	; 29/01/2023
  8113                                  Setup_Seg:
  8114                                  
  8115                                  ; If the transient has been loaded in TranSeg, then we need to use that
  8116                                  ; segment for calls to routines in the transient area. Otherwise, the current
  8117                                  ; code segment is used
  8118                                  ; Segment returned in AX.
  8119                                  
  8120                                  	; MSDOS 3.3 & MSDOS 6.0
  8121 00001CA0 A1[8F02]                	mov	ax,[TrnSeg]
  8122 00001CA3 803E[9102]01            	cmp	byte [TrnMvFlg],1	; Has transient portion been moved
  8123 00001CA8 7405                    	je	short setup_end
  8124                                  
  8125                                  ;06/06/2023
  8126                                  %if 0
  8127                                  	push	bx
  8128                                  	mov	bx,cs
  8129                                  	;mov	ax,offset ResGroup:TranStart
  8130                                  	;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  8131                                  	; 06/06/2023
  8132                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  8133                                  	;mov	ax,TRANSTART
  8134                                  	;shr	ax,1
  8135                                  	;shr	ax,1
  8136                                  	;shr	ax,1
  8137                                  	;shr	ax,1
  8138                                  	; 29/01/2023
  8139                                  	mov	ax,TRANSTART>>4
  8140                                  	add	ax,bx
  8141                                  	pop	bx
  8142                                  %endif
  8143                                  	; 06/06/2023
  8144 00001CAA 8CC8                    	mov	ax,cs
  8145 00001CAC 057E02                  	add	ax,TRANSTART>>4
  8146                                  
  8147                                  setup_end:
  8148 00001CAF C3                      	retn
  8149                                  
  8150                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8151                                  ;RPRINT:
  8152                                  	; MSDOS 3.3
  8153                                  	;push	ax
  8154                                  	;call	SETUP_SEG
  8155                                  	;mov	[PRINTADD+2], ax
  8156                                  	;;call	dword ptr PRINTADD
  8157                                  	;call	far [PRINTADD]
  8158                                  	;pop	ax
  8159                                  	;retn
  8160                                  
  8161                                  	; 29/01/2023
  8162                                  	; MSDOS 6.0
  8163                                  ;***	RPrintParse - display parse error message
  8164                                  ;
  8165                                  ;	ENTRY	DX = parse error #
  8166                                  ;
  8167                                  ;	EXIT	nothing
  8168                                  ;
  8169                                  ;	USED	flags
  8170                                  ;
  8171                                  ;	EFFECTS
  8172                                  ;	  Message is displayed on stdout.
  8173                                  
  8174                                  RPrintParse:	;proc
  8175                                  	;assume	ds:ResGroup,ss:ResGroup
  8176                                  
  8177 00001CB0 52                      	push	dx				; preserve DX
  8178 00001CB1 87DA                    	xchg	bx,dx				; bx = parse error #
  8179                                  						; dx = saved BX
  8180 00001CB3 4B                      	dec	bx				; bx = parse error index, from 0
  8181 00001CB4 D1E3                    	shl	bx,1				; bx = offset in word table
  8182                                  	;mov	bx,ParsMsgPtrs[bx]		; bx = ptr to error msg
  8183 00001CB6 8B9F[E309]              	mov	bx,[bx+PARSMSGPTRS]
  8184 00001CBA 87DA                    	xchg	bx,dx				; dx = ptr to error msg
  8185                                  						; bx = restored
  8186 00001CBC E81CF7                  	call	RPrint				; print the message
  8187 00001CBF 5A                      	pop	dx				; restore DX
  8188 00001CC0 C3                      	retn
  8189                                  
  8190                                  ;RPrintParse	endp
  8191                                  
  8192                                  	; 29/01/2023
  8193                                  ;PATHCHRCMPR:
  8194                                  	; MSDOS 3.3
  8195                                  	;push	dx
  8196                                  	;mov	dl,[slash_chr]
  8197                                  	;;cmp	byte [RSWITCHAR],'/'
  8198                                          ;cmp	[RSWITCHAR],dl
  8199                                  	;je	short RNOSLASHT
  8200                                  	;;cmp	al,'/'
  8201                                  	;cmp	al,dl
  8202                                  	;je	short RET41 ; zf = 1 
  8203                                  ;RNOSLASHT:
  8204                                          ;;cmp	al,'\'
  8205                                  	;cmp	al,[bslash_chr]
  8206                                  ;RET41:
  8207                                  	;pop	dx
  8208                                  	;retn
  8209                                  
  8210                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8211                                  IfindE:
  8212                                  	; MSDOS 3.3 & MSDOS 6.0
  8213 00001CC1 E80300                  	call	ifind				; find the name
  8214                                  	;jc	short ifind2			; carry means not found
  8215                                  	;jmp	short Iscasb1 			; scan for = sign
  8216                                  	; 29/01/2023
  8217 00001CC4 734E                    	jnc	short Iscasb1
  8218                                  ifind2:
  8219 00001CC6 C3                      	retn
  8220                                  
  8221                                  	; 29/01/2023
  8222                                  
  8223                                  ; on return of find1, es:di points to beginning of name
  8224                                  
  8225                                  ifind:
  8226 00001CC7 FC                      	cld
  8227 00001CC8 E83B00                  	call	Icount0				; cx = length of name
  8228 00001CCB 8E06[3A04]              	mov	es,[EnvirSeg]
  8229 00001CCF 31FF                    	xor	di,di
  8230                                  ifind1:
  8231 00001CD1 51                      	push	cx
  8232 00001CD2 56                      	push	si
  8233 00001CD3 57                      	push	di
  8234                                  ifind11:
  8235 00001CD4 AC                      	lodsb
  8236                                  
  8237                                  ; 23/07/2024 - Retro DOS v5.0 COMMAND.COM
  8238                                  ; PCDOS 7.1 COMMAND.COM
  8239                                  %if 1
  8240                                  ;ifdef DBCS
  8241 00001CD5 E8A5F7                  	call	ITestKanj
  8242 00001CD8 740F                    	jz	short _NotKanj4
  8243 00001CDA 4E                      	dec	si
  8244 00001CDB AD                      	lodsw
  8245 00001CDC 47                      	inc	di
  8246 00001CDD 47                      	inc	di
  8247 00001CDE 263B45FE                	cmp	ax,[es:di-2]
  8248 00001CE2 7511                    	jne	short ifind12
  8249 00001CE4 49                      	dec	cx
  8250 00001CE5 E2ED                    	loop	ifind11
  8251 00001CE7 EB0C                    	jmp	short ifind12
  8252                                  _NotKanj4:
  8253                                  ;endif
  8254                                  %endif
  8255 00001CE9 E83400                  	call	iupconv
  8256 00001CEC 47                      	inc	di
  8257 00001CED 263A45FF                	cmp	al,[es:di-1]
  8258 00001CF1 7502                    	jnz	short ifind12
  8259 00001CF3 E2DF                    	loop	ifind11
  8260                                  ifind12:
  8261 00001CF5 5F                      	pop	di
  8262 00001CF6 5E                      	pop	si
  8263 00001CF7 59                      	pop	cx
  8264 00001CF8 74CC                    	jz	short ifind2
  8265 00001CFA 51                      	push	cx
  8266 00001CFB E81A00                  	call	Iscasb2 			; scan for a nul
  8267 00001CFE 59                      	pop	cx
  8268                                  	;cmp	byte [es:di],0
  8269                                  	;jnz	short ifind1
  8270                                  	;stc					; indicate not found
  8271 00001CFF 26803D01                	cmp	byte [es:di],1
  8272 00001D03 73CC                    	jnb	short ifind1
  8273                                  	; cf=1					; indicate not found
  8274                                  ;ifind2:
  8275 00001D05 C3                      	retn
  8276                                  
  8277                                  	; 29/01/2023
  8278                                  Icount0:
  8279 00001D06 1E                      	push	ds
  8280 00001D07 07                      	pop	es
  8281 00001D08 89F7                    	mov	di,si
  8282                                  
  8283 00001D0A 57                      	push	di				; count number of chars until "="
  8284 00001D0B E80600                  	call	Iscasb1
  8285                                  	; 25/09/2018
  8286                                  	;jmp	short Icountx
  8287                                  	;push	di				; count number of chars until nul
  8288                                  	;call	Iscasb2
  8289                                  ;Icountx:
  8290 00001D0E 59                      	pop	cx
  8291 00001D0F 29CF                    	sub	di,cx
  8292 00001D11 87F9                    	xchg	di,cx
  8293 00001D13 C3                      	retn
  8294                                  
  8295                                  Iscasb1:
  8296                                  	; 29/01/2023
  8297 00001D14 B03D                    	mov	al,"="
  8298                                  	;mov	al,[equalsign] ; [equal_sign]	; scan for an =
  8299 00001D16 EB02                    	jmp	short Iscasbx
  8300                                  Iscasb2:
  8301 00001D18 30C0                    	xor	al,al				; scan for a nul
  8302                                  Iscasbx:
  8303 00001D1A B90001                  	mov	cx,256 ; 100h
  8304 00001D1D F2AE                    	repnz	scasb
  8305 00001D1F C3                      	retn
  8306                                  
  8307                                  	; 29/01/2023
  8308                                  ;IUPCONV:
  8309                                  	; MSDOS 3.3
  8310                                          ;;cmp	al,"a"
  8311                                  	;cmp	al,[letter_a]
  8312                                          ;jb	short IRET22
  8313                                          ;;cmp	al,"z"
  8314                                          ;cmp	al,[letter_z]
  8315                                  	;ja	short IRET22
  8316                                          ;sub	al,20h			; Lower-case changed to upper-case
  8317                                  ;IRET22:
  8318                                  	;retn
  8319                                  
  8320                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8321                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C32h
  8322                                  
  8323                                  	; MSDOS 6.0
  8324                                  ; *****************************************************************
  8325                                  ; *
  8326                                  ; * ROUTINE:	 IUPCONV    (ADDED BY EMG 4.00)
  8327                                  ; *
  8328                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
  8329                                  ; *		 the character in AL from the file upper case table
  8330                                  ; *		 in DOS if character if above ascii 128, else
  8331                                  ; *		 subtracts 20H if between "a" and "z".
  8332                                  ; *
  8333                                  ; * INPUT:	 DS	      set to resident
  8334                                  ; *		 AL	      char to be upper cased
  8335                                  ; *		 FUCASE_ADDR  set to the file upper case table
  8336                                  ; *
  8337                                  ; * OUTPUT:	 AL	      upper cased character
  8338                                  ; *
  8339                                  ; *****************************************************************
  8340                                  
  8341                                  iupconv:	;proc	near				
  8342                                  	;assume	ds:ResGroup			;
  8343                                  
  8344 00001D20 3C80                    	cmp	al,80h				; see if char is > ascii 128
  8345 00001D22 7210                    	jb	short other_fucase		; no - upper case math
  8346 00001D24 2C80                    	sub	al,80h				; only upper 128 chars in table
  8347 00001D26 1E                      	push	ds				;
  8348 00001D27 53                      	push	bx				;
  8349                                  	;lds	bx,dword ptr FUCase_Addr+1	; get table address
  8350 00001D28 C51E[B602]              	lds     bx,[FUCase_Addr+1]
  8351 00001D2C 83C302                  	add	bx,2				; skip over first word
  8352                                  	;xlat	ds:byte ptr [bx]		; convert to upper case
  8353 00001D2F D7                      	xlat
  8354 00001D30 5B                      	pop	bx				;
  8355 00001D31 1F                      	pop	ds				;
  8356 00001D32 EB0A                    	jmp	short iupconv_end		; we finished - exit
  8357                                  
  8358                                  other_fucase:					;
  8359                                  	;cmp	al,[lcasea] ; [letter_a]	; if between "a" and "z",
  8360 00001D34 3C61                    	cmp	al,'a'
  8361 00001D36 7206                    	jb	short iupconv_end		;     subtract 20h to get
  8362                                  	;cmp	al,[lcasez] ; [letter_z]	; upper case equivalent.
  8363 00001D38 3C7A                    	cmp	al,'z'
  8364 00001D3A 7702                    	ja	short iupconv_end		;
  8365 00001D3C 2C20                    	sub	al,20h				; Change lower-case to upper
  8366                                  iupconv_end:					;
  8367 00001D3E C3                      	retn
  8368                                  
  8369                                  ;iupConv endp
  8370                                  
  8371                                  	; 29/01/2023
  8372                                  init_contc_specialcase:
  8373                                  	; MSDOS 3.3 & MSDOS 6.0
  8374                                  						; This routine is called if control-C
  8375 00001D3F 83C406                  	add	sp,6				;  is type during the date/time prompt
  8376 00001D42 56                      	push	si				;  at initialization time.  The desired
  8377 00001D43 89D6                    	mov	si,dx				;  response is to make it look like the
  8378 00001D45 C74401000D              	mov	word [si+1],0D00h		;  user typed <CR> by "popping" the
  8379 00001D4A 5E                      	pop	si				;  INT 21h stuff off the stack, putting
  8380 00001D4B CF                      	iret					;  a <CR> in the user's buffer, and
  8381                                  						;  returning directly to the user.
  8382                                  						; In this case the user is TCODE.
  8383                                  
  8384                                  ; ----------------------------------------------------------------------------
  8385                                  
  8386                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8387                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C62h (CODERES:0F22h)
  8388                                  
  8389                                  	; MSDOS 6.0
  8390                                  ; ****************************************************************
  8391                                  ; *
  8392                                  ; * ROUTINE:	 Setup_for_messages
  8393                                  ; *
  8394                                  ; * FUNCTION:	 Sets up system for PARSE and EXTENDED ERROR
  8395                                  ; *		 messages as follows:
  8396                                  ; *
  8397                                  ; *		 IF /P and /MSG are entered
  8398                                  ; *		    keep PARSE and EXTENDED ERRORS in memory
  8399                                  ; *		 ELSE IF /P is entered
  8400                                  ; *		    use PARSE and EXTENDED ERRORS on disk
  8401                                  ; *		    remove PARSE ERRORS from memory
  8402                                  ; *		 ELSE
  8403                                  ; *		    remove PARSE ERRORS from memory
  8404                                  ; *		 ENDIF
  8405                                  ; *
  8406                                  ; * INPUT:	 PERMCOM	Set up with user input
  8407                                  ; *		 EXT_MSG	Set up with user input
  8408                                  ; *		 System set up to retain PARSE ERRORS
  8409                                  ; *
  8410                                  ; * OUTPUT:	 registers unchanged
  8411                                  ; *
  8412                                  ; ****************************************************************
  8413                                  
  8414                                  setup_for_messages: ;proc near		
  8415                                  
  8416 00001D4C 53                      	push	bx
  8417 00001D4D 1E                      	push	ds				; save data segment
  8418 00001D4E 06                      	push	es				; save environment segment
  8419 00001D4F 50                      	push	ax				;
  8420 00001D50 52                      	push	dx				;
  8421 00001D51 57                      	push	di				;
  8422 00001D52 8CC8                    	mov	ax,cs				; get local segment to ES and DS
  8423 00001D54 8ED8                    	mov	ds,ax				;
  8424 00001D56 8EC0                    	mov	es,ax				;
  8425                                  
  8426 00001D58 803E[A202]00            	cmp	byte [PermCom],0		; was permcom set?
  8427 00001D5D 743C                    	jz	short no_permcom		; No - don't worry about messages
  8428                                  
  8429                                  ;*	We're permanent. Install our message services int 2f handler.
  8430                                  
  8431 00001D5F 06                      	push	es
  8432                                  	;mov	ax,(GET_INTERRUPT_VECTOR shl 8) or 2Fh
  8433 00001D60 B82F35                  	mov	ax,352Fh
  8434 00001D63 CD21                    	int	21h
  8435                                  			; DOS - 2+ - GET INTERRUPT VECTOR
  8436                                  			; AL = interrupt number
  8437                                  			; Return: ES:BX = value of interrupt vector
  8438 00001D65 891E[AE04]              	mov	[Int2fHandler],bx
  8439 00001D69 8C06[B004]              	mov	[Int2fHandler+2],es
  8440 00001D6D 07                      	pop	es
  8441                                  
  8442                                  ;	DS = RESGROUP seg addr
  8443                                  
  8444                                  ; M005; We will not hook int 2fh on any command.com other than the first.
  8445                                  ; M005; Carousel loads as a permanent command.com and when we exit Carousel,
  8446                                  ; M005; it just wipes our arena out. So, int 2fh is still hooked and the
  8447                                  ; M005; first int 2fh call after exit from Carousel (from the DOS terminate
  8448                                  ; M005; call) goes off into space.
  8449                                  
  8450 00001D6E 803E[9E26]00            	cmp	byte [FirstCom],0		; M005
  8451 00001D73 7416                    	je	short no_msg_hook		; M005
  8452                                  ;
  8453                                  ; M005; !!!SLIMIEST CAROUSEL HACK OFF ALL!!!
  8454                                  ; M005; Carousel plays around with the interrupt vector tables. He saves it
  8455                                  ; M005; before loading a new command.com. Then, it takes hold of the current
  8456                                  ; M005; command.com's PSP and then looks at all interrupt vectors whose
  8457                                  ; M005; segment matches the command.com PSP and then updates these segments
  8458                                  ; M005; to the new command.com's PSP in his saved vector table. Whenever we
  8459                                  ; M005; we pop into his menu, he puts this saved table into the vector table.
  8460                                  ; M005; If we now quit, Carousel just wipes out command.com's arena and then
  8461                                  ; M005; issues a terminate. Unfortunately, the int 2fh vector is pointing at
  8462                                  ; M005; the command.com that was wiped out and so the next int 2fh call will
  8463                                  ; M005; bomb. To prevent Carousel from doing this clever(1**$$#) patching, we
  8464                                  ; M005; renormalize our int 2fh pointer so that its cs is not the same as the
  8465                                  ; M005; command.com PSP. Now, he does no such patching and our int 2fh vector
  8466                                  ; M005; remains nice and happy. The renormalized pointer points at a far 
  8467                                  ; M005; jump to the actual int 2fh entry point.
  8468                                  ;
  8469 00001D75 1E                      	push	ds				; M005
  8470                                  	;mov	dx,offset DATARES:Carousel_i2f_Hook ; M005
  8471 00001D76 BA[2501]                	mov     dx,Carousel_i2f_Hook
  8472 00001D79 83EA10                  	sub	dx,10h				; renormalize offset; M005
  8473 00001D7C 8CD8                    	mov	ax,ds				; M005
  8474 00001D7E 40                      	inc	ax				; Relocated cs ; M005
  8475 00001D7F 8ED8                    	mov	ds,ax				; M005
  8476                                  	;mov	ax,(SET_INTERRUPT_VECTOR shl 8) or 2Fh
  8477 00001D81 B82F25                  	mov	ax,252Fh
  8478 00001D84 CD21                    	int	21h
  8479                                  			; DOS - SET INTERRUPT VECTOR
  8480                                  			; AL = interrupt number
  8481                                  			; DS:DX = new vector to be used for specified interrupt
  8482 00001D86 1F                      	pop	ds				; M005
  8483                                  	;mov	word ptr Carousel_i2f_Hook+3,ds	; M005
  8484 00001D87 8C1E[2801]              	mov	[Carousel_i2f_Hook+3],ds  ; mov [int2fh_segm], ds ; 23/07/2024
  8485                                  						; patch in the cs for jump
  8486                                  no_msg_hook:					; M005
  8487 00001D8B 803E[9920]01            	cmp	byte [ext_msg],1 ; SET_EXTENDED_MSG
  8488 00001D90 7516                    	jne	short permcom_end		; no /msg - exit
  8489                                  
  8490                                  permcom_slash_msg:				; Keep messages in memory
  8491                                  	;mov	di,offset ResGroup:ExtMsgEnd 	; get address of resident end
  8492                                  	;mov	di,0DD8h ; PCDOS 7.1 COMMAND.COM (*)
  8493 00001D92 BF[DC0C]                	mov     di,ExtMsgEnd ; = offset PATRICIDE ; 23/07/2024 (*)
  8494 00001D95 893E[B204]              	mov	[ResMsgEnd],di			; save it
  8495 00001D99 EB0D                    	jmp	short permcom_end		; exit
  8496                                  
  8497                                  no_permcom:					
  8498                                  	;cmp	byte [ext_msg],SET_EXTENDED_MSG	; was /msg specified?
  8499 00001D9B 803E[9920]01            	cmp	byte [ext_msg],1
  8500 00001DA0 7506                    	jne	short permcom_end		; no - no error
  8501                                  	;mov	dx,LessArgs_Ptr			; get message number for "Required parameter missing"
  8502 00001DA2 BA0200                  	mov	dx,2
  8503 00001DA5 E808FF                  	call	RPrintParse
  8504                                  
  8505                                  permcom_end:
  8506 00001DA8 5F                      	pop	di				;
  8507 00001DA9 5A                      	pop	dx				;
  8508 00001DAA 58                      	pop	ax				;
  8509 00001DAB 07                      	pop	es				; get environment back
  8510 00001DAC 1F                      	pop	ds				;
  8511 00001DAD 5B                      	pop	bx
  8512                                  
  8513 00001DAE C3                      	retn					;
  8514                                  
  8515                                  ;setup_for_messages	endp
  8516                                  
  8517                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8518                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1CC5h
  8519                                  
  8520                                  	; MSDOS 6.0
  8521                                  
  8522                                  ;***	CheckHelp - print help text and exit if /? is on command line
  8523                                  ;
  8524                                  ;	ENTRY	command-line tail at 81h
  8525                                  ;
  8526                                  ;	EXIT	return if /? not found
  8527                                  ;		terminate if /? found
  8528                                  ;
  8529                                  ;	USED	AX,BX,CX,DX,SI,DI
  8530                                  ;
  8531                                  ;	EFFECTS	Help text displayed if /? found on command line
  8532                                  
  8533                                  CheckHelp:	; proc
  8534                                  	;assume	cs:RESGROUP,ds:RESGROUP,es:RESGROUP,ss:RESGROUP
  8535                                  
  8536 00001DAF BE8100                  	mov	si,81h			; DS:SI = ptr to command-line tail
  8537                                  	;mov	di,offset RESGROUP:Parse_Command
  8538 00001DB2 BF[9E20]                	mov	di,PARSE_COMMAND
  8539                                  					; ES:DI = ptr to primary parse block
  8540 00001DB5 31C9                    	xor	cx,cx			; CX = # positional param's found
  8541 00001DB7 31D2                    	xor	dx,dx			; DX will be ptr to result buffer
  8542                                  chParse:
  8543                                  	;call	dword ptr Init_Parse
  8544 00001DB9 FF1E[9320]              	call	far [Init_Parse]	; call system parser
  8545                                  
  8546                                  	;;cmp	ax,END_OF_LINE
  8547                                  	;cmp	ax,-1 ; 0FFFFh	
  8548                                  	;je	short chRet		; end of command line, no /? found
  8549                                  	;;cmp	ax,RESULT_NO_ERROR
  8550                                  	;;cmp	ax,0
  8551                                  	;;je	short chWhich		; valid syntax element found
  8552                                  	;;jmp	short chParse		; go parse more
  8553                                  	;and	ax,ax ; cmp ax,0
  8554                                  	;jnz	short chParse ; jne
  8555                                  	; 10/06/2023
  8556 00001DBD 40                      	inc	ax	; cmp ax,-1
  8557 00001DBE 741B                    	jz	short chRet   ; 0FFFFh -> 0
  8558 00001DC0 48                      	dec	ax	; cmp ax,0
  8559 00001DC1 75F6                    	jnz	short chParse ; 1 -> 0
  8560                                  	; ax = 0
  8561                                  chWhich:
  8562                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_?_Syn
  8563 00001DC3 813E[5D21][2821]        	cmp     word [COMND1_SYN],COMMAND_?_SYN ; "/?"
  8564 00001DC9 7411                    	je	short chHelp		; /? found - display help & exit
  8565                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_C_Syn
  8566 00001DCB 813E[5D21][0E21]        	cmp     word [COMND1_SYN],COMMAND_C_SYN ; "/C"
  8567                                  	; 06/06/2023
  8568 00001DD1 7408                    	je	short chRet		; /c found - ignore rest of line
  8569                                  	; 29/01/2023
  8570                                  	;jne	short chParse
  8571                                  	; 06/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  8572                                  	; MSDOS 6.0
  8573                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_K_Syn
  8574 00001DD3 813E[5D21][3421]        	cmp	word [COMND1_SYN],COMMAND_K_SYN ; "/K"
  8575                                  	;je	short chRet		; /k found - ignore rest of line
  8576                                  	;jmp	short chParse		; anything else - ignore, keep looking
  8577                                  	; 06/06/2023
  8578 00001DD9 75DE                    	jne	short chParse
  8579                                  chRet:
  8580 00001DDB C3                      	retn
  8581                                  chHelp:
  8582                                  	;mov	si,offset RESGROUP:HelpMsgs	; SI = ptr to msg ptr list
  8583 00001DDC BE[6426]                	mov	si,HelpMsgs
  8584                                  chHelpNext:
  8585 00001DDF AD                      	lodsw					; AX = ptr to msg
  8586 00001DE0 09C0                    	or	ax,ax
  8587 00001DE2 7407                    	jz	short chHelpDone		; end of list - all done
  8588 00001DE4 89C2                    	mov	dx,ax				; DX = ptr to msg
  8589 00001DE6 E8F2F5                  	call	RPrint				; display msg
  8590 00001DE9 EBF4                    	jmp	short chHelpNext		; go do next msg
  8591                                  
  8592                                  chHelpDone:
  8593 00001DEB CD20                    	int	20h				; terminate program
  8594                                  ;chRet:
  8595 00001DED C3                      	retn
  8596                                  
  8597                                  ;CheckHelp	endp
  8598                                  
  8599                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8600                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D03h
  8601                                  
  8602                                  	; MSDOS 6.0
  8603                                  
  8604                                  ;***** Setup_res_end -- This routine determines the resident size of COMMAND.
  8605                                  ;
  8606                                  ; It determines based on 2 factors:
  8607                                  ;	1. Is this is the first COMMAND?
  8608                                  ;	2. Is COMMAND to be loaded into HIMEM?
  8609                                  ;   The strategy works as follows:
  8610                                  ;
  8611                                  ;	if (First COMMAND)
  8612                                  ;	then if (COMMAND in HIMEM)
  8613                                  ;		ResSize = resident_data;
  8614                                  ;	     else
  8615                                  ;		ResSize = resident_data + resident_code;
  8616                                  ;	else
  8617                                  ;	   ResSize = resident_data;
  8618                                  ;
  8619                                  ; Int 2fh calls have been added to determine whether or not we are the first
  8620                                  ; COMMAND and whether DOS is in HIMEM.
  8621                                  ;
  8622                                  ;	ENTRY: ResMsgEnd = resident size of data in paras
  8623                                  ;
  8624                                  ;	EXIT:  ResSize = resident size in low memory
  8625                                  ;
  8626                                  ;	REGISTERS AFFECTED: ax,cx,dx
  8627                                  ;
  8628                                  
  8629                                  GET_HMA_ADDR	equ	4A02h
  8630                                  
  8631                                  	; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8632                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:1FBFh
  8633                                  
  8634                                  Setup_res_end:	;proc near
  8635                                  	
  8636 00001DEE 1E                      	push	ds
  8637 00001DEF 8CC8                    	mov	ax,cs
  8638 00001DF1 8ED8                    	mov	ds,ax				;ds = RESGROUP
  8639                                  	;assume	ds:RESGROUP
  8640                                  
  8641 00001DF3 8B0E[B204]              	mov	cx,[ResMsgEnd]			;set resident size = data
  8642                                  
  8643                                  ;ifndef	ROMDOS
  8644                                  
  8645                                  ;M042 -- Begin changes
  8646                                  ;If messages are to be kept behind, we need to round up the messages to
  8647                                  ;the next para boundary. This is because we have a dummy segment between the
  8648                                  ;data and the resident code segment so that the code segment starts on a
  8649                                  ;para boundary
  8650                                  
  8651                                  	;cmp	cx,offset RESGROUP:ExtMsgEnd	;messages to be resident?
  8652                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  8653                                  	;cmp	cx,0DD8h
  8654 00001DF7 81F9[DC0C]              	cmp	cx,ExtMsgEnd
  8655 00001DFB 7506                    	jne	short calc_res			;no, continue
  8656 00001DFD 83C10F                  	add	cx,15				;round up
  8657 00001E00 83E1F0                  	and	cx,0FFF0h
  8658                                  calc_res:
  8659                                  
  8660                                  ;M042 -- End changes
  8661                                  
  8662                                  	; 18/07/2024
  8663                                  	;xor	ax,ax
  8664                                         	
  8665 00001E03 803E[9E26]01            	cmp	byte [FirstCom],1		;is it first command.com?
  8666                                  	;jne	short not_first			;no, do not keep code
  8667                                  	; 06/06/2023
  8668 00001E08 751A                    	jne	short not_first2
  8669                                  
  8670                                  ;We issue a version check call with al=01 to detect if DOS is in HMA. If so,
  8671                                  ;bit 4 of dh is set
  8672                                  
  8673 00001E0A 53                      	push	bx
  8674 00001E0B 51                      	push	cx
  8675                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ;is DOS in HIMEM? ;M013
  8676 00001E0C B80633                  	mov	ax,3306h
  8677 00001E0F CD21                    	int	21h
  8678                                  		; DOS - 5+ Get TRUE Version Number
  8679                                  		; (BL major, BH minor, DL revision, DH flags)
  8680 00001E11 59                      	pop	cx
  8681                                  
  8682                                  ;bugbug: remove version check after testing
  8683                                  
  8684 00001E12 80FB05                  	cmp	bl,5				;bl has true version ; M013
  8685 00001E15 7207                    	jb	short oldver
  8686                                  
  8687 00001E17 31C0                    	xor	ax,ax
  8688 00001E19 80E610                  	and	dh,10h				;is DOS in HMA ; M013
  8689                                  	;pop	bx
  8690                                  	;jnz	short not_first			;DOS in HIMEM, code not
  8691                                  						;	resident
  8692                                  	; 29/01/2023
  8693 00001E1C 7503                    	jnz	short not_first_pop
  8694                                  oldver:
  8695                                  	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8696                                  	; 06/06/2023
  8697                                  	;;mov	ax,81Ah ; MSDOS 5.0 and MSDOS 6.22 COMMAND.COM
  8698                                  	; 06/06/2023
  8699                                  	; 29/01/2023
  8700                                  	;mov	ax,EndCode-(RCODE_START+100h) ; 23/04/2023
  8701                                  	; 03/05/2023
  8702 00001E1E B8(7209)                	mov	ax,EndCode-RCODE_START	; 06/06/2023
  8703                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  8704                                  	;mov	ax,894h ; EndCode-RCODE_START
  8705                                  
  8706                                  not_first_pop:
  8707                                  	; 29/01/2023
  8708 00001E21 5B                      	pop	bx
  8709                                  
  8710                                  not_first:
  8711                                  
  8712                                  ;Note that ax = 0 (side effect of int 2fh), if the code is not to be retained
  8713                                  
  8714 00001E22 01C1                    	add	cx,ax
  8715                                  
  8716                                  not_first2:	; 06/06/2023
  8717                                  
  8718                                  ;endif	;not ROMDOS
  8719                                  
  8720 00001E24 83C10F                  	add	cx,15				;round up to next para
  8721 00001E27 D1E9                    	shr	cx,1
  8722 00001E29 D1E9                    	shr	cx,1
  8723 00001E2B D1E9                    	shr	cx,1
  8724 00001E2D D1E9                    	shr	cx,1				;ax = para size of res code
  8725 00001E2F 890E[B404]              	mov	[ResSize],cx			;store resident size
  8726                                  
  8727 00001E33 1F                      	pop	ds
  8728                                  	;assume	ds:nothing
  8729 00001E34 C3                      	retn
  8730                                  
  8731                                  ;ifndef	ROMDOS
  8732                                  
  8733                                  ;bugbug: remove this code (for version independent COMMAND) after testing
  8734                                  
  8735                                  	; 29/01/2023
  8736                                  ;oldver:
  8737                                  ;	pop	bx
  8738                                  ;	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8739                                  ;	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8740                                  ;	; 29/01/2023
  8741                                  ;	mov	ax,EndCode-RCODE_START
  8742                                  ;	jmp	short not_first
  8743                                  
  8744                                  ;endif	;not ROMDOS
  8745                                  
  8746                                  ;setup_res_end	endp
  8747                                  
  8748                                  ;ifndef	ROMDOS
  8749                                  
  8750                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8751                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8752                                  
  8753                                  	; MSDOS 6.0
  8754                                  ;*** Move_res_code -- This routine moves the resident code to its final 
  8755                                  ; location. We check if DOS is in HIMEM. If so, we try to load ourselves
  8756                                  ; in HIMEM. If we fail, then we remain low and update ResSize to reflect
  8757                                  ; the correct resident size. When remaining low, we have to check if we 
  8758                                  ; need to overlay the messages part of the data segment which is determined
  8759                                  ; by the /msg switch.
  8760                                  ;
  8761                                  ;	ENTRY: ResMsgEnd = end of resident data
  8762                                  ;
  8763                                  ;	EXIT:  The resident code is either up high or in its final location
  8764                                  ;		down low.
  8765                                  ;
  8766                                  ;	REGISTERS AFFECTED: ax,bx,cx,dx,si,di
  8767                                  
  8768                                  	; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8769                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:200Eh
  8770                                  	
  8771                                  Move_res_code:	;proc near
  8772                                  
  8773 00001E35 1E                      	push	ds
  8774 00001E36 06                      	push	es
  8775                                  
  8776 00001E37 8CC8                    	mov	ax,cs
  8777 00001E39 8ED8                    	mov	ds,ax
  8778                                  	;assume	ds:RESGROUP
  8779                                  
  8780                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ; M013
  8781 00001E3B B80633                  	mov	ax,3306h
  8782 00001E3E CD21                    	int	21h				;DOS in HIMEM?
  8783                                  		; DOS - 5+ Get TRUE Version Number
  8784                                  		; (BL major, BH minor, DL revision, DH flags)
  8785                                  
  8786 00001E40 80E610                  	and	dh,10h				; M013
  8787 00001E43 7517                    	jnz	short move_high			;yes, move code high
  8788                                  
  8789                                  ;Check if messages have been discarded or not
  8790                                  
  8791                                  load_low:
  8792 00001E45 1E                      	push	ds
  8793 00001E46 07                      	pop	es				;es = RESGROUP
  8794 00001E47 8B3E[B204]              	mov	di,[ResMsgEnd]			;end offset in DATARES
  8795                                  	;;mov	bx,offset RESGROUP:ExtMsgEnd	;end offset of messages
  8796                                  	;mov	bx,ExtMsgEnd
  8797                                  
  8798                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8799                                  %if 0	 ; PCDOS 7.1 COMMAND.COM
  8800                                  
  8801                                  	; 29/01/2023
  8802                                  	cmp	di,ExtMsgEnd
  8803                                  	;cmp	di,bx				;are messages to be kept?
  8804                                  	je	short no_move			;yes, dont move code
  8805                                  ;%else
  8806                                  	; Erdogan Tan - 18/07/2024
  8807                                  	;mov	bx,ExtMsgEnd ; (this bx is not used after here!)
  8808                                  %endif
  8809                                  
  8810                                  ; 18/07/2024
  8811                                  %if 0
  8812                                  	jmp	short setup_move		;es:di points at dest.
  8813                                  %else
  8814                                  	; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8815                                  setup_move:
  8816                                  	;mov	si,offset RESGROUP:StartCode
  8817                                  	; 03/05/2023
  8818 00001E4B BE[100D]                	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8819                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8820                                  				; 0E10h for PCDOS 7.1 COMMAND.COM ; 18/07/2024
  8821                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8822                                  	;mov	cx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8823                                  	; 06/06/2023
  8824                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8825                                  	; 03/05/2023
  8826 00001E4E B9(7209)                	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8827                                  	;mov	cx,894h ; PCDOS 7.1 COMMAND.COM ; 18/07/2024
  8828                                  
  8829 00001E51 FC                      	cld
  8830 00001E52 57                      	push	di				;need di for patching offset
  8831 00001E53 F3A4                    	rep	movsb
  8832 00001E55 5F                      	pop	di
  8833                                  patch_up:
  8834 00001E56 E86F01                  	call	patch_stub
  8835 00001E59 07                      	pop	es
  8836 00001E5A 1F                      	pop	ds
  8837                                  	;assume	ds:nothing
  8838 00001E5B C3                      	retn
  8839                                  %endif
  8840                                  
  8841                                  move_high:
  8842                                  
  8843                                  ;We have to call DOS to get the load address in HIMEM for COMMAND
  8844                                  ;We pass in bx the number of bytes we need
  8845                                  
  8846                                  	;mov	bx,offset CODERES:EndCode
  8847                                  	; 29/01/2023
  8848                                  	;;mov	bx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8849                                  	; 06/06/2023
  8850                                  	;mov	bx,EndCode-(RCODE_START+100h) ; 23/04/2023 ; 06/06/2023
  8851                                  	; 03/05/2023
  8852 00001E5C BB(7209)                	mov	bx,EndCode-RCODE_START ; 06/06/2023
  8853                                  	; 18/07/2024
  8854                                  	;mov	bx,894h	 ; PCDOS 7.1 COMMAND.COM
  8855                                  
  8856                                  ;M030;
  8857                                  ; Set di=0ffffh so that we load low in case no one answers this int 2fh
  8858                                  
  8859 00001E5F BFFFFF                  	mov	di,0FFFFh			;DT - in case no-one handles
  8860                                  						;this ; M030
  8861 00001E62 B8024A                  	mov	ax,GET_HMA_ADDR ; 4A02h
  8862 00001E65 CD2F                    	int	2Fh
  8863                                  
  8864                                  ;If the offset = 0xffff, then no HMA available
  8865                                  
  8866 00001E67 83FFFF                  	cmp	di,0FFFFh			;HMA available?
  8867 00001E6A C606[9600]01            	mov	byte [ComInHMA],1		;assume command.com in HMA
  8868 00001E6F 75DA                    	jne	short setup_move		;no error, es:di = memory
  8869                                  
  8870                                  	;mov	byte [ComInHMA],0		;could not load in HMA
  8871                                  	; 29/01/2023	
  8872 00001E71 FE0E[9600]              	dec	byte [ComInHMA] ; 1 -> 0
  8873                                  
  8874                                  ;Zero means that we do not have enough HIMEM. Remain low and update
  8875                                  ;ResSize to reflect this
  8876                                  
  8877 00001E75 8B0E[B204]              	mov	cx,[ResMsgEnd]			;size of data in bytes
  8878                                  	;;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8879                                  	;;mov	ax,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8880                                  	;mov	ax,EndCode-RCODE_START
  8881                                  	;add	cx,ax
  8882                                  	; 06/06/2023
  8883                                  	; 29/01/2023
  8884                                  	;add	cx,(EndCode-(RCODE_START+100h))+15 ; 23/04/2023 ; 06/06/2023
  8885                                  	;add	cx,15				;round up to next para
  8886                                  	; 03/05/2023
  8887 00001E79 81C1(8109)              	add	cx,(EndCode-RCODE_START)+15 ; 06/06/2023
  8888 00001E7D D1E9                    	shr	cx,1
  8889 00001E7F D1E9                    	shr	cx,1
  8890 00001E81 D1E9                    	shr	cx,1
  8891 00001E83 D1E9                    	shr	cx,1				;ax = para size of res code
  8892 00001E85 890E[B404]              	mov	[ResSize],cx			;store resident size
  8893 00001E89 EBBA                    	jmp	short load_low			;let code remain low
  8894                                  
  8895                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8896                                  %if 0	 ; PCDOS 7.1 COMMAND.COM
  8897                                  no_move:
  8898                                  	; 05/05/2023
  8899                                  	;mov	cl,4
  8900                                  	add	di,0Fh
  8901                                  	and	di,0FFF0h			;round it to a para offset
  8902                                  	jmp	short patch_up
  8903                                  
  8904                                  setup_move:
  8905                                  	;mov	si,offset RESGROUP:StartCode
  8906                                  	; 03/05/2023
  8907                                  	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8908                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8909                                  				; 0E10h for PCDOS 7.1 COMMAND.COM ; 18/07/2024
  8910                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8911                                  	;mov	cx,81Ah ; MSDOS 5.0 & MSDOS 6.22 COMMAND.COM
  8912                                  	; 06/06/2023
  8913                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8914                                  	; 03/05/2023
  8915                                  	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8916                                  	;mov	cx,894h ; PCDOS 7.1 COMMAND.COM ; 18/07/2024
  8917                                  
  8918                                  	cld
  8919                                  	push	di				;need di for patching offset
  8920                                  	rep	movsb
  8921                                  	pop	di
  8922                                  
  8923                                  patch_up:
  8924                                  	call	patch_stub
  8925                                  	pop	es
  8926                                  	pop	ds
  8927                                  	;assume	ds:nothing
  8928                                  	retn
  8929                                  %endif
  8930                                  
  8931                                  ;Move_res_code endp
  8932                                  
  8933                                  ;else	;ROMDOS
  8934                                  ;
  8935                                  ;;***	Move_res_code - ROMDOS version - locate ROM resident
  8936                                  ;
  8937                                  ;Move_res_code	proc
  8938                                  ;
  8939                                  ;	push	es
  8940                                  ;
  8941                                  ;	invoke	FindROMRes		; ES:DI = ptr to ROM resident code
  8942                                  ;	call	patch_stub
  8943                                  ;
  8944                                  ;	pop	es
  8945                                  ;	ret
  8946                                  ;
  8947                                  ;Move_res_code	endp
  8948                                  ;
  8949                                  ;	assume	ds:NOTHING		; to match ending assume above
  8950                                  ;
  8951                                  ;endif	;ROMDOS
  8952                                  
  8953                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8954                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8955                                  
  8956                                  	; MSDOS 6.0
  8957                                  ;*** Alloc_env -- This routine allocates the temporary environment for the
  8958                                  ; Init code to initialize the COMSPEC. This is not a complete environment. 
  8959                                  ; Later on, at EndInit time, a proper sized environment is allocated and
  8960                                  ; the contents of this temporary environment are copied to it. This routine
  8961                                  ; will not be called in case a valid environment is passed to command.com
  8962                                  ;
  8963                                  ;       ENTRY:  FirstCom and initial EnvirSeg set
  8964                                  ;
  8965                                  ;       EXIT:   ax = EnvirSeg = segment of newly allocated environment segment
  8966                                  ;
  8967                                  ;       REGISTERS AFFECTED: ax,bx,cx,dx
  8968                                  
  8969                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  8970                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:1F3Fh
  8971                                  
  8972                                  	; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  8973                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:206Eh
  8974                                  
  8975                                  alloc_env:	;proc near
  8976                                  	;assume ds:nothing
  8977                                  	
  8978 00001E8B 1E                              push    ds
  8979 00001E8C 06                      	push	es
  8980 00001E8D 56                      	push	si
  8981 00001E8E 57                      	push	di
  8982                                  
  8983                                  ; 07/06/2023
  8984                                  ; 29/01/2023 - MSDOS 6.0 COMMAND.COM
  8985                                  ;%if 0
  8986                                  %if 1 
  8987 00001E8F 16                              push    ss
  8988 00001E90 1F                              pop     ds
  8989                                  	;assume ds:RESGROUP
  8990                                  
  8991 00001E91 A1[3A04]                        mov     ax,[EnvirSeg]
  8992                                  
  8993 00001E94 803E[5920]00                    cmp	byte [AllocedEnv],0
  8994 00001E99 7403                            je	short alloc_cont
  8995 00001E9B E91F01                          jmp     alloc_done
  8996                                  
  8997                                  alloc_cont:
  8998 00001E9E 29FF                            sub     di,di                           ; default start
  8999                                          ;mov	bx,SIZE Environment             ; default size needed
  9000                                  	; 29/01/2023
  9001 00001EA0 BBA600                  	mov	bx,ENVIRONSIZ	; mov bx,180 ; 07/06/2023
  9002                                  				; mov bx,166 ; 18/07/2024 ; PCDOS 7.1
  9003 00001EA3 803E[9E26]00                    cmp	byte [FirstCom],0		; first COMMAND.COM?
  9004 00001EA8 7462                            je	short alloc_seg			; no
  9005                                  
  9006                                  ;   Check EnvirSeg; if non-zero, then scan it for PATH and COMSPEC;
  9007                                  ;   Record their respective locations and do not add the default vars.
  9008                                  
  9009 00001EAA 09C0                    	or      ax,ax
  9010 00001EAC 745A                    	jz	short alloc_new			; no previous environment
  9011                                  
  9012 00001EAE 8EC0                            mov     es,ax
  9013                                  	;assume es:nothing
  9014                                  
  9015                                  _find_path:
  9016 00001EB0 B000                            mov     al,0
  9017 00001EB2 29FF                            sub     di,di
  9018                                  comp_path:
  9019 00001EB4 AE                              scasb                                   ; end of env?
  9020 00001EB5 7417                    	je	short _find_prompt		; yes
  9021                                  	;je	short find_comspec ; 18/07/2024 ; PCDOS 7.1 COMMAND.COM
  9022 00001EB7 4F                              dec     di
  9023 00001EB8 B90500                          mov     cx,PathStrLen ; mov cx,5 ; "PATH="
  9024                                          ;mov	si,offset RESGROUP:PathString
  9025 00001EBB BE[5A20]                	mov	si,PathString	; "PATH="
  9026 00001EBE F3A6                            repe    cmpsb
  9027 00001EC0 7407                            je	short got_path
  9028 00001EC2 B90001                          mov	cx,256
  9029 00001EC5 F2AE                            repne   scasb                           ; find next NULL
  9030 00001EC7 EBEB                            jmp     short comp_path
  9031                                  
  9032                                  got_path:
  9033 00001EC9 C606[5A20]00                    mov	byte [PathString],0		; don't add it
  9034                                  
  9035                                  _find_prompt:
  9036                                  
  9037                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  9038                                  ;%if 0 ;  PCDOS 7.1 COMMAND.COM
  9039                                  ;	sub     di,di
  9040                                  ;comp_prompt:
  9041                                  ;	scasb                                   ; end of env?
  9042                                  ;	je	short find_comspec		; yes
  9043                                  ;	dec     di
  9044                                  ;	mov     cx,PrmptStrLen2	; mov cx,7
  9045                                  ;	;mov	si,offset RESGROUP:PrmptString
  9046                                  ;	mov	si,PrmptString	; "PROMPT=$P$G"
  9047                                  ;	repe	cmpsb
  9048                                  ;	je	short got_prompt
  9049                                  ;	mov	cx,256
  9050                                  ;	repne	scasb                           ; find next NULL
  9051                                  ;	jmp	short comp_prompt
  9052                                  ;
  9053                                  ;got_prompt:
  9054                                  ;	mov	byte [PrmptString],0		; don't add it
  9055                                  ;%endif
  9056                                  
  9057                                  find_comspec:
  9058 00001ECE 29FF                            sub     di,di
  9059                                  comp_comspec:
  9060 00001ED0 AE                              scasb                                   ; end of env?
  9061 00001ED1 7423                            je	short got_envend		; yes
  9062 00001ED3 4F                              dec     di
  9063 00001ED4 B90800                          mov	cx,ComspStrLen	; mov cx,8
  9064                                  	;mov	si,offset RESGROUP:ComspString
  9065 00001ED7 BE[7220]                	mov	si,ComspString	; "COMSPEC=\COMMAND.COM"
  9066 00001EDA F3A6                            repe    cmpsb
  9067 00001EDC 7407                            je	short got_comspec
  9068 00001EDE B90001                          mov     cx,256
  9069 00001EE1 F2AE                            repne   scasb                           ; find next NULL
  9070 00001EE3 EBEB                            jmp	short comp_comspec
  9071                                  
  9072                                  got_comspec:
  9073 00001EE5 893E[7020]                      mov     [ComspOffset],di
  9074                                  
  9075                                  find_envend:
  9076 00001EE9 29FF                            sub     di,di
  9077 00001EEB B90080                          mov     cx,ENVBIG	; 32768		; max env size
  9078                                  comp_envend:
  9079 00001EEE 49                              dec     cx                              ;
  9080 00001EEF AE                              scasb                                   ; end of env?
  9081 00001EF0 7404                            je	short got_envend		; yes
  9082 00001EF2 F2AE                            repne   scasb
  9083 00001EF4 EBF8                            jmp	short comp_envend
  9084                                  
  9085                                  got_envend:
  9086 00001EF6 4F                              dec     di
  9087                                  	; 07/06/2023
  9088 00001EF7 8D9DA600                	lea     bx,[di+ENVIRONSIZ]		; add room for the basics
  9089                                  	; 18/07/2024
  9090                                  	;lea     bx,[di+166] ; PCDOS 7.1 COMMAND.COM - ENVIRONSIZ = 166
  9091                                  
  9092                                  ;   We want to fall through to alloc_new and set up default
  9093                                  ;   path and prompt ONLY IF this is the first process;  in all other
  9094                                  ;   cases, we assume it is a bad idea to try editing the user's environment
  9095                                  
  9096 00001EFB 1E                              push    ds
  9097                                          ;mov	ds,ds:[PDB_Parent_Pid]
  9098 00001EFC 8E1E1600                        mov	ds,[PDB.PARENT_PID]
  9099                                  	;cmp	ds:[PDB_Parent_Pid],0           ; is parent's parent pid field 0?
  9100 00001F00 833E160000              	cmp	word [PDB.PARENT_PID],0
  9101 00001F05 1F                      	pop     ds
  9102 00001F06 7504                            jne	short alloc_seg			; no, we're not the first process
  9103                                                                                  ; so don't muck with the env.
  9104                                  alloc_new:
  9105 00001F08 FE06[5920]              	inc	byte [AllocedEnv]		; note we have virgin env.
  9106                                  
  9107                                  alloc_seg:
  9108                                  
  9109                                  ; Allocate default environment size
  9110                                  
  9111 00001F0C 89D9                            mov     cx,bx                           ; save byte-granular size in CX
  9112 00001F0E 83C30F                          add     bx,15
  9113 00001F11 D1EB                            shr     bx,1
  9114 00001F13 D1EB                            shr     bx,1
  9115 00001F15 D1EB                            shr     bx,1
  9116 00001F17 D1EB                            shr     bx,1                            ; BX = # paras
  9117 00001F19 B448                    	mov	ah,ALLOC ; 48h
  9118 00001F1B CD21                    	int	21h
  9119 00001F1D 7303                            jnc	short init_ok
  9120 00001F1F E9A000                          jmp     init_nomem                      ; insufficient memory, error
  9121                                  
  9122                                  ; If a previous environment existed (ie, DI != 0), then copy it into
  9123                                  ; the new buffer
  9124                                  
  9125                                  init_ok:
  9126 00001F22 8EC0                    	mov	es,ax
  9127                                  	;assume	es:nothing                      ; es = temp env segment
  9128                                  
  9129 00001F24 09FF                    	or      di,di
  9130 00001F26 7412                            jz	short copy_path
  9131                                  
  9132 00001F28 51                              push    cx
  9133 00001F29 1E                              push    ds
  9134 00001F2A 8E1E[3A04]                      mov     ds,[EnvirSeg]
  9135                                          ;assume ds:nothing
  9136 00001F2E 29F6                            sub     si,si
  9137 00001F30 89F9                            mov     cx,di
  9138 00001F32 29FF                            sub     di,di
  9139 00001F34 F3A4                            rep     movsb
  9140 00001F36 1F                              pop     ds
  9141                                          ;assume ds:RESGROUP
  9142 00001F37 59                              pop     cx
  9143 00001F38 29F9                            sub     cx,di
  9144                                  
  9145                                  copy_path:
  9146                                  
  9147                                  ; First clear out (the rest of) the buffer
  9148                                  
  9149 00001F3A 57                              push    di
  9150 00001F3B 29C0                            sub     ax,ax
  9151 00001F3D F3AA                            rep     stosb
  9152 00001F3F 5F                              pop     di
  9153                                  
  9154                                  ; Initialize the path string (PATH=) first
  9155                                  
  9156                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  9157 00001F40 BE[5A20]                	mov	si,PathString
  9158 00001F43 3804                            cmp     byte [si],al			; add it?
  9159 00001F45 7450                            je	short init_prompt		; no
  9160                                  	;mov	cx,PathStrLen+1                 ;
  9161 00001F47 B90600                  	mov	cx,6 ; db "PATH=",0
  9162 00001F4A F3A4                            rep     movsb                           ;
  9163 00001F4C 3806[5920]                      cmp     [AllocedEnv],al			; virgin env?
  9164 00001F50 7445                            je	short init_prompt		; no
  9165                                  
  9166                                  ; Establish a more reasonable default for the PATH
  9167                                  
  9168                                  	;mov	ah,GET_DEFAULT_DRIVE
  9169 00001F52 B419                    	mov	ah,19h
  9170 00001F54 CD21                    	int	21h
  9171 00001F56 0441                            add     al,'A'                          ; convert to letter
  9172 00001F58 A2[6020]                        mov     [DefPathString],al              ;
  9173 00001F5B A2[6720]                        mov     [DefPath2String],al             ; now our default paths are complete
  9174                                  
  9175 00001F5E B200                            mov     dl,0                            ; get dir for default drive
  9176 00001F60 1E                              push    ds                              ;
  9177 00001F61 06                              push    es                              ;
  9178 00001F62 1F                              pop     ds                              ;
  9179 00001F63 C6055C                          mov     byte [di],'\'			;
  9180 00001F66 8D7501                          lea     si,[di+1]                       ; set DS:SI -> available space
  9181                                  	;mov	ah,Current_Dir                  ;
  9182 00001F69 B447                            mov	ah,47h
  9183 00001F6B CD21                    	int     21h                             ;
  9184 00001F6D 1F                              pop     ds                              ;
  9185                                  
  9186                                  	;mov	cx,9 ; db "C:\MSDOS",0
  9187                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  9188                                  	;mov	cx,7 ; db "C:\DOS",0
  9189 00001F6E B90700                  	mov	cx,DefPathStrLen+1 ; 7
  9190                                  	
  9191                                  	;mov	dx,offset RESGROUP:DefPathString
  9192 00001F71 BA[6020]                	mov	dx,DefPathString	; "C:\MSDOS"
  9193                                  			; 18/07/2024	; "C:\DOS" for PCDOS 7.1 COMMAND.COM
  9194 00001F74 89D6                    	mov	si,dx                           ;
  9195                                          ;mov	ah,CHDir                        ;
  9196 00001F76 B43B                            mov	ah,3Bh
  9197 00001F78 CD21                    	int     21h                             ;
  9198 00001F7A 730E                            jnc	short init_setpath		; DefPathString exists!
  9199                                  
  9200                                          ;mov	cx,7 ; db "C:\DOS",0
  9201                                  	; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  9202                                  	;mov	cx,9 ; db "C:\MSDOS",0
  9203 00001F7C B90900                  	mov	cx,DefPath2StrLen+1 ; 9
  9204                                  
  9205                                  	;mov	dx,offset RESGROUP:DefPath2String
  9206 00001F7F BA[6720]                	mov	dx,DefPath2String	; "C:\DOS"
  9207                                  			; 18/07/2024	; "C:\MSDOS" for PCDOS 7.1 COMMAND.COM
  9208 00001F82 89D6                            mov     si,dx                           ;
  9209                                          ;mov	ah,CHDir                        ;
  9210 00001F84 B43B                            mov	ah,3Bh
  9211 00001F86 CD21                            int     21h                             ;
  9212 00001F88 720D                            jc	short init_prompt		; DefPath2String doesn't exist
  9213                                  
  9214                                  init_setpath:
  9215 00001F8A 89FA                            mov     dx,di                           ; success
  9216 00001F8C 1E                              push    ds                              ; so restore prev dir
  9217 00001F8D 06                              push    es                              ;
  9218 00001F8E 1F                              pop     ds                              ; DS:DX -> prev dir
  9219                                          ;mov	ah,CHDir                        ;
  9220 00001F8F B43B                            mov	ah,3Bh			
  9221 00001F91 CD21                            int     21h                             ;
  9222 00001F93 1F                              pop     ds                              ;
  9223                                  
  9224 00001F94 4F                              dec     di                              ; then copy in DefPathString
  9225 00001F95 F3A4                            rep     movsb                           ; DS:SI -> "C:\\DOS\0"
  9226                                  
  9227                                  ; Initialize the default prompt
  9228                                  
  9229                                  init_prompt:
  9230                                  ;init_compec:	; 18/07/2024 (PCDOS 7.1 COMMAND.COM - RESGROUP:217Ah)	
  9231                                  
  9232 00001F97 57                              push    di                              ;
  9233 00001F98 29C0                            sub     ax,ax                           ;
  9234 00001F9A B94000                          mov     cx,64                           ; insure any data read in
  9235 00001F9D F3AA                            rep     stosb                           ; from Current_Dir is zapped
  9236 00001F9F 5F                              pop     di                              ;
  9237                                  
  9238                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  9239                                  ;%if 0 	; PCDOS 7.1 COMMAND.COM
  9240                                  ;	cmp	[AllocedEnv],al			; virgin env?
  9241                                  ;	je	short init_comspec		; no
  9242                                  ;	;mov	si,offset RESGROUP:PrmptString  ; DS:SI -> "PROMPT=$P$G\0"
  9243                                  ;	mov	si,PrmptString
  9244                                  ;	cmp     [si],al				; add it?
  9245                                  ;	je      short init_comspec		; no
  9246                                  ;	;mov	cx,PrmptStrLen+1                ;
  9247                                  ;	mov	cl,12  ; db "PROMPT=$P$G",0
  9248                                  ;	rep     movsb                           ;
  9249                                  ;%endif
  9250                                  
  9251                                  ; Initialize the Comspec string
  9252                                  
  9253                                  init_comspec:
  9254                                  	; 18/07/2024 (PCDOS 7.1 COMMAND.COM - RESGROUP:2183h)
  9255                                  
  9256 00001FA0 3906[7020]                      cmp	[ComspOffset],ax		; add it?
  9257 00001FA4 750E                            jne	short init_done			; no
  9258                                          ;lea	ax,[di+8]
  9259 00001FA6 8D4508                  	lea     ax,[di+ComspStrLen]             ;
  9260 00001FA9 A3[7020]                        mov	[ComspOffset],ax		;
  9261                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  9262 00001FAC BE[7220]                        mov	si,ComspString
  9263                                  	; 23/07/2024
  9264 00001FAF B91500                  	mov	cx,ComspStrLen2+1               ;
  9265                                          ;mov	cx,21 ; db "COMSPEC=\COMMAND.COM",0
  9266 00001FB2 F3A4                    	rep     movsb                           ;
  9267                                  
  9268                                  init_done:
  9269 00001FB4 8CC0                            mov     ax,es                           ; return env seg in ax
  9270 00001FB6 A3[3A04]                        mov     [EnvirSeg],ax			; save env seg
  9271 00001FB9 FE06[5920]                      inc	byte [AllocedEnv]		; remember that *we* alloced it
  9272                                  %endif
  9273                                  
  9274                                  ; 07/06/2023
  9275                                  ; 29/01/2023 - MSDOS 5.0 COMMAND.COM (RESGROUP:1DC4h)
  9276                                  ;%if 1
  9277                                  %if 0
  9278                                  	;mov	bx,10
  9279                                  	mov	bx,ENVIRONSIZ>>4 ; 160/16
  9280                                  	mov	ah,48h
  9281                                  	int	21h    	; DOS - 2+ - ALLOCATE MEMORY
  9282                                  			; BX = number of 16-byte paragraphs desired
  9283                                  	jc	short init_nomem
  9284                                  
  9285                                  init_ok:
  9286                                  	mov	es,ax
  9287                                  	;assume	es:nothing                      ; es = temp env segment
  9288                                  
  9289                                  	xor	di,di
  9290                                  	mov	ax,di
  9291                                  	;mov	cx,160	
  9292                                          mov     cx,ENVIRONSIZ
  9293                                          rep	stosb
  9294                                  
  9295                                  init_pathstr:
  9296                                  
  9297                                  ; Initialize the path string (PATH=) first
  9298                                  
  9299                                  	push	ss
  9300                                  	pop	ds
  9301                                  
  9302                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  9303                                  	mov	si,PathString
  9304                                  	mov	di,0
  9305                                  init_cp_pathstr:
  9306                                  	lodsb
  9307                                  	stosb
  9308                                  	or	al,al
  9309                                  	jnz	short init_cp_pathstr
  9310                                  
  9311                                  ; Initialize the Comspec string
  9312                                  
  9313                                  init_comspec:
  9314                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  9315                                          mov	si,ComspString
  9316                                  	; 05/05/2023
  9317                                  	mov	di,6
  9318                                  init_cp_compstr:
  9319                                  	lodsb
  9320                                  	stosb
  9321                                  	or	al,al
  9322                                  	jnz	short init_cp_compstr
  9323                                  
  9324                                  init_done:
  9325                                          mov     ax,es                           ; return env seg in ax
  9326                                          ;mov	[EnvirSeg],ax			; save env seg
  9327                                          ;inc	byte [AllocedEnv]		; remember that *we* alloced it
  9328                                  %endif	
  9329                                  
  9330                                  	; 29/01/2023
  9331                                  alloc_done:
  9332 00001FBD 5F                      	pop	di
  9333 00001FBE 5E                      	pop	si
  9334 00001FBF 07                      	pop	es
  9335 00001FC0 1F                              pop     ds
  9336                                  	;assume	ds:nothing
  9337 00001FC1 C3                      	retn
  9338                                  
  9339                                  	; 29/01/2023
  9340                                  init_nomem:
  9341                                  
  9342                                  ;We call the error routine from here. This routine never returns. It either
  9343                                  ;terminates COMMAND with error( if it is not the first invocation ) or hangs
  9344                                  ;the system ( if it is the first COMMAND.COM ).
  9345                                  
  9346 00001FC2 E80000                  	call	Alloc_error
  9347                                  
  9348                                  ;Alloc_env	endp
  9349                                  
  9350                                  ;*** Alloc_error: This routine just jumps to the actual label where we 
  9351                                  ; check if this is a permanent or secondary command.com and take the 
  9352                                  ; appropriate action.
  9353                                  ;
  9354                                  ;	ENTRY:	ds = RESGROUP = DATARES
  9355                                  ;
  9356                                  ;	EXIT:	None - does not return
  9357                                  ;
  9358                                  ;	REGISTERS AFFECTED: Does not matter
  9359                                  ;
  9360                                  
  9361                                  ;public Alloc_error
  9362                                  Alloc_error:	;proc	near
  9363                                  
  9364                                  	;jmp	RESGROUP:BadMemErr
  9365                                  	; 29/01/2023
  9366 00001FC5 E950EE                  	jmp	BadMemErr	
  9367                                  	
  9368                                  ;Alloc_error	endp
  9369                                  
  9370                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9371                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1DFFh
  9372                                  
  9373                                  	; MSDOS 6.0
  9374                                  ;*** Patch_stub -- This routine patches in the segment and offset values in
  9375                                  ; the stub table of the various entry points in the resident code segment.
  9376                                  ; Some of them are interrupt entry points and some of them are entries from
  9377                                  ; the transient to the resident code segment.
  9378                                  ;
  9379                                  ;	ENTRY:	ds = RESGROUP
  9380                                  ;		es:di = segment:offset of final location of resident code
  9381                                  ;
  9382                                  ;	EXIT:	All segments and offsets patched into the stub table
  9383                                  ;
  9384                                  ;	REGISTERS AFFECTED: ax, bx, cx, dx, si, di
  9385                                  
  9386                                  patch_stub:	;proc near
  9387                                  	;assume	ds:RESGROUP
  9388                                  	
  9389 00001FC8 06                      	push	es
  9390                                  
  9391 00001FC9 8CC3                    	mov	bx,es			;bx = resident code segment
  9392 00001FCB 89FA                    	mov	dx,di
  9393                                  	;mov	di,offset DATARES:Int2f_Entry
  9394 00001FCD BF[6600]                	mov	di,Int2f_Entry
  9395                                  	;mov	si,offset RESGROUP:Reloc_Table
  9396 00001FD0 BE[8426]                	mov	si,Reloc_Table
  9397 00001FD3 1E                      	push	ds
  9398 00001FD4 07                      	pop	es			;es = RESGROUP = DATARES
  9399                                  
  9400                                  ;bx:dx = segment:offset of resident code segment
  9401                                  ;es:di = entry point table in stub
  9402                                  ;ds:si = offset table in INIT segment -- offsets of code entry points now
  9403                                  
  9404                                  	;mov	cx,NUM_RELOC_ENTRIES	;number of entry points
  9405 00001FD5 B90B00                  	mov	cx,11 ; MSDOS 5.0 COMMAND.COM
  9406                                  patchlp:
  9407 00001FD8 AD                      	lodsw				;get current offset
  9408 00001FD9 01D0                    	add	ax,dx			;offset it by code seg location 
  9409 00001FDB AB                      	stosw				;store offset
  9410 00001FDC 89D8                    	mov	ax,bx			
  9411 00001FDE AB                      	stosw				;store segment 
  9412 00001FDF E2F7                    	loop	patchlp
  9413                                  
  9414 00001FE1 07                      	pop	es
  9415 00001FE2 C3                      	retn
  9416                                  
  9417                                  ;Patch_stub	endp
  9418                                  
  9419                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9420                                  
  9421                                  	; MSDOS 6.0
  9422                                  ;*** Patch_segs -- This routine patches the segment values in the dword 
  9423                                  ; pointers that the stub uses to jump to the actual handler. These values 
  9424                                  ; are temporarily needed to handle these interrupts if they occur before
  9425                                  ; the resident is relocated to its final position and all the addresses of
  9426                                  ; the handlers have been updated.
  9427                                  ;
  9428                                  ;	ENTRY:	es = PSP segment = code segment
  9429                                  ;
  9430                                  ;	EXIT:	Current segment values patched into the jump table in the
  9431                                  ;		stub.
  9432                                  ;
  9433                                  ;	REGISTERS AFFECTED: ax, cx, di
  9434                                  
  9435                                  patch_segs:	;proc near
  9436                                  
  9437                                  	;mov	di,offset RESGROUP:Int2f_Entry
  9438 00001FE3 BF[6600]                	mov	di,Int2f_Entry 
  9439 00001FE6 B90400                  	mov	cx,4			;we have to patch 4 handlers
  9440 00001FE9 83C702                  	add	di,2
  9441 00001FEC 8CC0                    	mov	ax,es
  9442                                  pseglp:
  9443 00001FEE AB                      	stosw				;store the segment value
  9444 00001FEF 83C702                  	add	di,2			;skip the next offset value
  9445 00001FF2 E2FA                    	loop	pseglp
  9446                                  
  9447 00001FF4 C3                      	retn
  9448                                  
  9449                                  ;Patch_segs	endp
  9450                                  
  9451                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9452                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E2Ch
  9453                                  
  9454                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9455                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:20D8h
  9456                                  
  9457                                  	; MSDOS 6.0
  9458                                  ;*** get_XMMAddr -- This routine gets the call address for the XMM driver
  9459                                  ; by issuing the appropriate int 2fh. This is stored in a stub variable 
  9460                                  ; and is used by the stub when we have to jump to the resident in HMA
  9461                                  ;
  9462                                  ;	ENTRY:	ds = RESGROUP
  9463                                  ;
  9464                                  ;	EXIT:	XMMCallAddr = XMM driver far call address
  9465                                  ;
  9466                                  ;	REGISTERS AFFECTED:
  9467                                  ;
  9468                                  
  9469                                  get_XMMAddr:	;proc near
  9470                                  	;assume	ds:RESGROUP
  9471                                  
  9472 00001FF5 06                      	push	es
  9473                                  
  9474                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK
  9475 00001FF6 B80043                  	mov	ax,4300h
  9476 00001FF9 CD2F                    	int	2Fh
  9477                                  		; - Multiplex - XMS - INSTALLATION CHECK
  9478                                  		; Return: AL = 80h XMS driver installed
  9479                                  		; AL <> 80h no driver
  9480 00001FFB 3C80                    	cmp	al,80h			; Q: installed
  9481 00001FFD 750D                    	jne	short cXMMexit		; N: set error, quit
  9482                                  ;
  9483                                  ; get the XMM control functions entry point, save it, we
  9484                                  ; need to call it later.
  9485                                  ;
  9486                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR
  9487 00001FFF B81043                  	mov	ax,4310h
  9488 00002002 CD2F                    	int	2Fh
  9489                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
  9490                                  		; Return: ES:BX -> driver entry point
  9491                                  
  9492 00002004 891E[9200]              	mov	[XMMCallAddr], bx
  9493 00002008 8C06[9400]              	mov	[XMMCallAddr+2],es
  9494                                  cXMMexit:
  9495 0000200C 07                      	pop	es
  9496 0000200D C3                      	retn				; done
  9497                                  
  9498                                  ;get_XMMAddr	endp
  9499                                  
  9500                                  ;=============================================================================
  9501                                  ; UNINIT.ASM, MSDOS 6.0, 1991
  9502                                  ;=============================================================================
  9503                                  ; 24/09/2018 - Retro DOS v3.0
  9504                                  
  9505                                  ; (30/04/2018 - Retro DOS v2.0, MSDOS 2.11 COMMAND.COM)
  9506                                  
  9507                                  ; TITLE	COMMAND Initialization messages
  9508                                  
  9509                                  ;INIT	SEGMENT PUBLIC PARA
  9510                                  
  9511                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9512                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9513                                  
  9514                                  	; 25/09/2018
  9515                                  	; (15 bytes filler)
  9516 0000200E 00                      	db 0
  9517                                  	;db "25/9/2018 ETAN"
  9518                                  	; 30/01/2023
  9519                                  	;db "30/1/2023 ETAN"	
  9520                                  	; 19/06/2023
  9521                                  	;db "19/6/2023 ETAN"
  9522                                  	; 31/07/2024
  9523 0000200F 33312F372F32303234-     	db "31/7/2024 ETAN"	
  9523 00002018 204554414E         
  9524 0000201D 00                      	db 0
  9525                                  
  9526                                  ; 30/01/2023
  9527                                  %if 0
  9528                                  	; MSDOS 3.3 COMMAND.COM - offset 145Eh
  9529                                  	;dw 0
  9530                                  COPYRIGHTMSG:	; MSDOS 3.3 COMMAND.COM - offset 1460h
  9531                                  	db 0Dh,0Ah
  9532                                  	db 0Dh,0Ah
  9533                                  	db 'Microsoft(R) MS-DOS(R)  Version 3.30'
  9534                                  	db 0Dh,0Ah
  9535                                  	db '             (C)Copyright Microsoft Corp 1981-1987               '
  9536                                  	db ' ',0Dh,0Ah
  9537                                  	db '                                                   ',
  9538                                  	db 0Dh,0Ah,0
  9539                                  
  9540                                  	times	43 db 20h
  9541                                  
  9542                                  _152Fh:	db 'Specified COMMAND search directory bad',0Dh,0Ah,0
  9543                                  BADCOMLKMES:
  9544                                  	dw _152Fh
  9545                                  
  9546                                  _155Ah:	db 'Specified COMMAND search directory bad access denied',0Dh,0Ah,0
  9547                                  BADCOMACCMSG:
  9548                                  	dw _155Ah
  9549                                  
  9550                                  _1593h:	db 'Access denied',0Dh,0Ah,0
  9551                                  ACCDENERR:
  9552                                  	dw _1593h
  9553                                  
  9554                                  _15A5h:	db 'Out of environment space',0Dh,0Ah,0
  9555                                  OUTENVMSG:
  9556                                  	dw _15A5h
  9557                                  
  9558                                  BADVERMSG:
  9559                                  	db 'Incorrect DOS version',0Dh,0Ah,'$'
  9560                                  
  9561                                  BADENVSIZMSG:
  9562                                  	db 'Invalid environment size specified',0Dh,0Ah,'$'
  9563                                  
  9564                                  HEADERPTR:
  9565                                  	dw COPYRIGHTMSG
  9566                                  %endif
  9567                                  
  9568                                  ; 30/01/2023
  9569                                  ;align 16
  9570                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9571                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E50h 
  9572                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9573                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:2100h
  9574                                  
  9575                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  9576                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:2200h 
  9577                                  ICONDEV:
  9578 0000201E 2F4445562F                      db '/DEV/'
  9579 00002023 434F4E000000000000      	db 'CON',0,0,0,0,0,0	; Room for 8 char device	
  9580                                  BADCSPFL:
  9581 0000202C 00                      	db 0
  9582                                  COMSPECT:
  9583 0000202D 5C434F4D4D414E442E-     	db '\COMMAND.COM',0
  9583 00002036 434F4D00           
  9584 0000203A 00                      	db 0
  9585                                  AUTOBAT:
  9586 0000203B 003A5C4155544F4558-     	db 0,':\AUTOEXEC.BAT',0,0Dh
  9586 00002044 45432E424154000D   
  9587                                  
  9588                                  ; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  9589                                  %if 0
  9590                                  ; 07/06/2023
  9591                                  KAUTOBAT:
  9592                                  	db 0,':\KAUTOEXEC.BAT',0,0Dh
  9593                                  %endif
  9594                                   
  9595                                  PRDATTM:
  9596 0000204C FF                      	db -1 ; 0FFh		; Init not to prompt for date time
  9597                                  INITADD:
  9598 0000204D 00000000                	dd 0
  9599                                  print_add:
  9600 00002051 [1654]                  	dw Printf_Init
  9601 00002053 0000                    	dw 0
  9602                                  triage_add:
  9603 00002055 [D230]                  	dw Triage_Init
  9604 00002057 0000                    	dw 0
  9605                                  ;CHUCKENV:
  9606                                  AllocedEnv:
  9607 00002059 00                      	db 0
  9608                                  
  9609                                  ; 30/01/2023 - MSDOS 3.3
  9610                                  ;COMSPOFFSET:
  9611                                  ;ECOMLOC:
  9612                                  ;	;dw 0Eh
  9613                                  ;	;dw offset ENVIRONMENT:ECOMSPEC-10h
  9614                                  ;	dw ECOMSPEC-ENVIRONMENT ; 30/04/2018	
  9615                                  ;COMSPSTRING:
  9616                                  ;	db 'COMSPEC='
  9617                                  
  9618                                  ; 18/07/2024
  9619                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:223Ch
  9620                                  
  9621                                  ; 30/01/2023 - MSDOS 5.0 & MSDOS 6.0
  9622                                  PathString:
  9623 0000205A 504154483D00            	db 'PATH=',0
  9624                                  PathStrLen equ ($-PathString)-1
  9625                                  ;;;
  9626                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9627                                  ; MSDOS 6.0
  9628                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  9629                                  ; PCDOS 7.1
  9630                                  DefPathString:
  9631                                  	;db 'C:\MSDOS',0
  9632 00002060 433A5C444F5300          	db 'C:\DOS',0	; 18/07/2024
  9633                                  DefPathStrLen equ ($-DefPathString)-1
  9634                                  DefPath2String:
  9635                                  	;db 'C:\DOS',0
  9636 00002067 433A5C4D53444F5300      	db 'C:\MSDOS',0	; 18/07/2024
  9637                                  DefPath2StrLen equ ($-DefPath2String)-1
  9638                                  
  9639                                  ; 18/07/2024 - Retro DOS v5.0 COMMAND.COM
  9640                                  ; PCDOS 7.1 COMMAND.COM
  9641                                  %if 0
  9642                                  PrmptString:
  9643                                  	db 'PROMPT=$P$G',0
  9644                                  PrmptStrLen equ ($-PrmptString)-1
  9645                                  PrmptStrLen2 equ 7	; length of PROMPT=
  9646                                  %endif
  9647                                  
  9648                                  ; 18/07/2024
  9649                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:2252h
  9650                                  
  9651                                  ComspOffset:
  9652 00002070 0000                    	dw 0
  9653                                  ;;;
  9654                                  ComspString:
  9655 00002072 434F4D535045433D5C-     	db 'COMSPEC=\COMMAND.COM',0
  9655 0000207B 434F4D4D414E442E43-
  9655 00002084 4F4D00             
  9656                                  ComspStrLen equ 8		; length of COMSPEC=
  9657                                  ComspStrLen2 equ ($-ComspString)-1
  9658                                  				; length of full COMSPEC
  9659                                  	; 29/01/2023
  9660                                  ;equal_sign:
  9661                                  ;equalsign:
  9662                                  ;	db '='
  9663                                  ;letter_a:
  9664                                  ;lcasea:
  9665                                  ;	db 'a'
  9666                                  ;letter_z:
  9667                                  ;lcasez:
  9668                                  ;	db 'z'
  9669                                  	; 30/01/2023
  9670                                  ;;slash_chr:
  9671                                  ;;	db '/'
  9672                                  ;;bslash_chr:
  9673                                  ;;	db '\'
  9674                                  ;space_chr:
  9675                                  ;;space:
  9676                                  ;	db 20h
  9677                                  ;;letter_p:
  9678                                  ;;	db 'p'
  9679                                  ;;letter_d:
  9680                                  ;;	db 'd'
  9681                                  ;;letter_c:
  9682                                  ;;	db 'c'
  9683                                  	; 16/04/2023
  9684                                  ; MSDOS 5.0 & MSDOS 6.0
  9685                                  ;scswitch:
  9686                                  ;	db 'C'		; Single command
  9687                                  ;;skswitch:
  9688                                  ;	db 'K' ; MSDOS 6.0
  9689                                  ;;letter_A:
  9690                                  ;ucasea: ; 21/01/2023 
  9691                                  ;	db 'A'
  9692                                  
  9693                                  	; 30/01/2023
  9694                                  EnvSiz:
  9695 00002087 0000                    	dw 0		; size user wants to allocate
  9696                                  EnvMax:
  9697 00002089 0000                    	dw 0		; maximum size allowed
  9698                                  OldEnv:
  9699 0000208B 0000                    	dw 0		; envirseg at initialization
  9700                                  UsedEnv:
  9701 0000208D 0000                    	dw 0		; amount of envirseg used
  9702                                  	; MSDOS 5.0 & MSDOS 6.0
  9703                                  PARS_MSG_OFF:
  9704 0000208F 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE OFFSET
  9705                                  PARS_MSG_SEG:
  9706 00002091 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE SEGMENT
  9707                                  
  9708                                  ;Do not separate the following two words. Used to call transient PARSE routine
  9709                                  
  9710                                  Init_Parse:
  9711                                  	;dw 4FFBh	; MSDOS 5.0 COMMAND.COM (TRANGROUP:APPEND_PARSE)
  9712                                  init_p:
  9713 00002093 [1254]                  	dw append_parse ; dw 564Bh ; PCDOS 7.1 COMMAND.COM ; 18/07/2024 
  9714                                  initend:
  9715 00002095 0000                    	dw 0		; segment address of end of init
  9716                                  TrnSize:
  9717 00002097 0000                    	dw 0		; size of transient in paragraphs
  9718                                  
  9719                                  ; 23/07/2024 - Retro DOS v5.0 COMMAND.COM
  9720                                  %if 0
  9721                                  resetenv:
  9722                                  	;dw 0		; set if we need to setblck env at endinit
  9723                                  	; 23/07/2024
  9724                                  	db 0
  9725                                  %endif
  9726                                  
  9727                                  ext_msg:
  9728 00002099 00                      	db 0		; set if /MSG switch entered
  9729                                  eswitch:
  9730 0000209A 00                      	db 0		; set if /e was entered
  9731                                  dswitch:
  9732 0000209B 00                      	db 0		; set if /d was entered
  9733                                  parsemes_ptr:
  9734 0000209C 0000                    	dw 0		; word to store parse error number
  9735                                  
  9736                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9737                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1ED6h
  9738                                  
  9739                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9740                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:21A5h
  9741                                  
  9742                                  	; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  9743                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:2288h
  9744                                  
  9745                                  	; MSDOS 6.0 (UINIT.ASM, 1991)
  9746                                  ;  The following parse control block is used for COMMAND. This block is
  9747                                  ;  used for parsing during initialization. The syntax for COMMAND is:
  9748                                  ;  COMMAND [/?] [d:][path][/P][/F][/D][/E:xxxxx][/MSG][/C executable]
  9749                                  ;
  9750                                  ;  Anything on the command line after the /C switch will be passed to the
  9751                                  ;  executable command, so if /C is used, it must be specified last. The
  9752                                  ;  /MSG switch can only be specified if the /P switch is specified.
  9753                                  ;
  9754                                  ;  The /? switch causes help text to be displayed. Any other options
  9755                                  ;  on the command line are ignored. Command.com will not load if /?
  9756                                  ;  is specified.
  9757                                  
  9758                                  INTERNAT_INFO:		; used for country info after parsing is completed
  9759                                  PARSE_COMMAND:
  9760 0000209E [A120]                  	dw COMMAND_PARMS
  9761 000020A0 00                      	db 0			; no extra delimiter
  9762                                  COMMAND_PARMS:
  9763 000020A1 0002                    	db 0,2			; 1 positional parm
  9764 000020A3 [BF20]                  	dw COMMAND_FILE
  9765 000020A5 [BF20]                  	dw COMMAND_FILE
  9766                                          ; MSDOS 5.0
  9767                                  	;db 7			; 7 switches
  9768                                  	; MSDOS 6.0
  9769                                  	;db 8 			; 8 switches
  9770                                  	; 07/06/2023
  9771                                  	; MSDOS 6.22
  9772                                  	;db 9			; 9 switches
  9773                                  	; 22/07/2024
  9774                                  	; PCDOS 7.1
  9775 000020A7 0B                      	db 11			; 11 switches
  9776 000020A8 [C820]                  	dw COMMAND_SWITCH1
  9777 000020AA [D420]                  	dw COMMAND_SWITCH2
  9778 000020AC [E020]                  	dw COMMAND_SWITCH3
  9779 000020AE [EC20]                  	dw COMMAND_SWITCH4
  9780 000020B0 [0521]                  	dw COMMAND_SWITCH5
  9781 000020B2 [1121]                  	dw COMMAND_SWITCH6
  9782 000020B4 [1F21]                  	dw COMMAND_SWITCH7
  9783                                  	; 07/06/2023
  9784 000020B6 [2B21]                  	dw COMMAND_SWITCH8 ; MSDOS 6.0
  9785 000020B8 [3721]                  	dw COMMAND_SWITCH9 ; MSDOS 6.22
  9786                                  	; 22/07/2024
  9787 000020BA [4321]                  	dw COMMAND_SWITCH10 ; PCDOS 7.1
  9788 000020BC [4F21]                  	dw COMMAND_SWITCH11 ; PCDOS 7.1
  9789 000020BE 00                      	db 0			; no keywords
  9790                                  
  9791                                  COMMAND_FILE:
  9792 000020BF 0102                    	dw 0201h		; filespec - optional
  9793 000020C1 0100                    	dw 1			; capitalize - file table
  9794 000020C3 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9795 000020C5 [6321]                  	dw NO_VAL 		;
  9796 000020C7 00                      	db 0			; no keywords
  9797                                  
  9798                                  COMMAND_SWITCH1:
  9799 000020C8 0000                    	dw 0			; no match flags
  9800 000020CA 0200                    	dw 2			; capitalize by char table
  9801 000020CC [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9802 000020CE [6321]                  	dw NO_VAL 		;
  9803 000020D0 01                      	db 1			; 1 keyword
  9804                                  COMMAND_P_SYN:
  9805 000020D1 2F5000                  	db '/P',0		; /P switch
  9806                                  
  9807                                  COMMAND_SWITCH2:
  9808 000020D4 0000                    	dw 0			; no match flags
  9809 000020D6 0200                    	dw 2			; capitalize by char table
  9810 000020D8 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9811 000020DA [6321]                  	dw NO_VAL 		;
  9812 000020DC 01                      	db 1			; 1 keyword
  9813                                  COMMAND_F_SYN:
  9814 000020DD 2F4600                  	db '/F',0		; /F switch
  9815                                  
  9816                                  COMMAND_SWITCH3:
  9817 000020E0 0000                    	dw 0			; no match flags
  9818 000020E2 0200                    	dw 2			; capitalize by char table
  9819 000020E4 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9820 000020E6 [6321]                  	dw NO_VAL 		;
  9821 000020E8 01                      	db 1			; 1 keyword
  9822                                  COMMAND_D_SYN:
  9823 000020E9 2F4400                  	db '/D',0		; /D switch
  9824                                  
  9825                                  COMMAND_SWITCH4:
  9826 000020EC 0080                    	dw 8000h		; numeric value - required
  9827 000020EE 0000                    	dw 0			; no function flags
  9828 000020F0 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9829 000020F2 [F820]                  	dw COMMAND_E_VAL	; pointer to value list
  9830 000020F4 01                      	db 1			; 1 keyword
  9831                                  COMMAND_E_SYN:
  9832 000020F5 2F4500                  	db '/E',0		; /E switch
  9833                                  
  9834                                  COMMAND_E_VAL:
  9835 000020F8 01                      	db 1			;
  9836 000020F9 01                      	db 1			; 1 range
  9837 000020FA 01                      	db 1			; returned if result
  9838                                  	;dd ENVSML,ENVBIG	; minimum & maximum value
  9839                                  	; MSDOS 5.0 COMMAND.COM (RESGROUP:1F2Bh)
  9840                                  	; PCDOS 7.1 COMMAND.COM (RESGROUP:22E5h)
  9841 000020FB A0000000                	dd 160	 ; ENVSML	 
  9842 000020FF 00800000                	dd 32768 ; ENVBIG
  9843 00002103 00                      	db 0			; no numeric values
  9844 00002104 00                      	db 0			; no string values
  9845                                  
  9846                                  COMMAND_SWITCH5:
  9847 00002105 0000                    	dw 0			; no match flags
  9848 00002107 0200                    	dw 2			; capitalize by char table
  9849 00002109 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9850 0000210B [6321]                  	dw NO_VAL 		;
  9851 0000210D 01                      	db 1			; 1 keyword
  9852                                  COMMAND_C_SYN:
  9853 0000210E 2F4300                  	db '/C',0		; /C switch
  9854                                  
  9855                                  COMMAND_SWITCH6:
  9856 00002111 0000                    	dw 0			; no match flags
  9857 00002113 0200                    	dw 2			; capitalize by char table
  9858 00002115 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9859 00002117 [6321]                  	dw NO_VAL 		;
  9860 00002119 01                      	db 1			; 1 keyword
  9861                                  COMMAND_M_SYN:
  9862 0000211A 2F4D534700              	db '/MSG',0		; /MSG switch
  9863                                  
  9864                                  COMMAND_SWITCH7:
  9865 0000211F 0000                    	dw 0			; no match flags
  9866 00002121 0200                    	dw 2			; capitalize by char table
  9867 00002123 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9868 00002125 [6321]                  	dw NO_VAL 		;
  9869 00002127 01                      	db 1			; 1 keyword
  9870                                  COMMAND_?_SYN:
  9871 00002128 2F3F00                  	db '/?',0 		; /? switch
  9872                                  
  9873                                  	; 07/06/2023
  9874                                  	; MSDOS 6.0
  9875                                  COMMAND_SWITCH8:
  9876 0000212B 0000                    	dw 0			; no match flags
  9877 0000212D 0200                    	dw 2			; capitalize by char table
  9878 0000212F [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9879 00002131 [6321]                  	dw NO_VAL 		;
  9880 00002133 01                      	db 1			; 1 keyword
  9881                                  COMMAND_K_SYN:
  9882 00002134 2F4B00                  	db '/K',0		; /K switch
  9883                                  
  9884                                  	; 07/06/2023
  9885                                  	; MSDOS 6.22
  9886                                  COMMAND_SWITCH9:
  9887 00002137 0000                    	dw 0			; no match flags
  9888 00002139 0200                    	dw 2			; capitalize by char table
  9889 0000213B [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9890 0000213D [6321]                  	dw NO_VAL 		;
  9891 0000213F 01                      	db 1			; 1 keyword
  9892                                  COMMAND_Y_SYN:
  9893 00002140 2F5900                  	db '/Y',0		; /Y switch
  9894                                  
  9895                                  ; 22/07/2024 - Retro DOS v5.0 COMMAND.COM
  9896                                  %if 1
  9897                                  	; PCDOS 7.1 COMMAND.COM  - RESGROUP:2336h
  9898                                  COMMAND_SWITCH10:
  9899 00002143 0000                    	dw 0			; no match flags
  9900 00002145 0200                    	dw 2			; capitalize by char table
  9901 00002147 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9902 00002149 [6321]                  	dw NO_VAL 		;
  9903 0000214B 01                      	db 1			; 1 keyword
  9904                                  COMMAND_H_SYN:
  9905 0000214C 2F4800                  	db '/H',0		; /H switch
  9906                                  
  9907                                  COMMAND_SWITCH11:
  9908 0000214F 0000                    	dw 0			; no match flags
  9909 00002151 0200                    	dw 2			; capitalize by char table
  9910 00002153 [5B21]                  	dw COMND1_OUTPUT	; result buffer
  9911 00002155 [6321]                  	dw NO_VAL 		;
  9912 00002157 01                      	db 1			; 1 keyword
  9913                                  COMMAND_O_SYN:
  9914 00002158 2F4F00                  	db '/O',0		; /O switch
  9915                                  %endif
  9916                                  
  9917                                  COMND1_OUTPUT:
  9918                                  COMND1_TYPE:
  9919 0000215B 00                      	db 0			; type
  9920                                  COMND1_CODE:
  9921 0000215C 00                      	db 0			; return value
  9922                                  COMND1_SYN:
  9923 0000215D 0000                    	dw 0			; synonym pointer
  9924                                  COMND1_ADDR:
  9925 0000215F 00000000                	dd 0			; numeric value / address
  9926                                  				; of string value
  9927                                  NO_VAL:
  9928 00002163 00                      	db 0			; no values
  9929                                  num_positionals:
  9930 00002164 0000                    	dw 0			; counter for positionals
  9931                                  old_parse_ptr:
  9932 00002166 0000                    	dw 0			; SI position before calling parser
  9933                                  
  9934                                  	; 30/01/2023
  9935                                  ;***	INITIALIZATION MESSAGES
  9936                                  ;	-------------------------
  9937                                  ;	include	comimsg.inc	;M00
  9938                                  ;-----------------------------------------------------------------------------	
  9939                                  
  9940                                  BADVERMSG:
  9941 00002168 17                      	db 23
  9942 00002169 496E636F7272656374-     	db 'Incorrect DOS version',0Dh,0Ah
  9942 00002172 20444F532076657273-
  9942 0000217B 696F6E0D0A         
  9943                                  OUTENVMSG:
  9944 00002180 1A                      	db 26
  9945 00002181 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
  9945 0000218A 7669726F6E6D656E74-
  9945 00002193 2073706163650D0A   
  9946                                  
  9947                                  ; 07/06/2023
  9948                                  ;COPYRIGHTMSG:
  9949                                  ;	db 94
  9950                                  ;	db 0Dh,0Ah
  9951                                  ;	db 0Dh,0Ah
  9952                                  ;	db 'Microsoft(R) MS-DOS(R) Version 5.00',0Dh,0Ah
  9953                                  ;	db '             (C)Copyright Microsoft Corp 1981-1991.',0Dh,0Ah
  9954                                  
  9955                                  ; 23/07/2024
  9956                                  %if 0
  9957                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
  9958                                  ; MSDOS 6.22 COMMAND.COM - RESGROUP:2286h
  9959                                  COPYRIGHTMSG:
  9960                                  	db 94
  9961                                  	db 0Dh,0Ah
  9962                                  	db 0Dh,0Ah
  9963                                  	db 'Microsoft(R) MS-DOS(R) Version 6.22',0Dh,0Ah
  9964                                  	db '             (C)Copyright Microsoft Corp 1981-1994.',0Dh,0Ah
  9965                                  %else
  9966                                  ; 23/07/2024 - Retro DOS v5.0 COMMAND.COM
  9967                                  ; PCDOS 7.1 COMMAND.COM - RESGROUP:2385h
  9968                                  COPYRIGHTMSG:
  9969 0000219B 64                      	db 100
  9970 0000219C 0D0A                    	db 0Dh,0Ah
  9971 0000219E 0D0A                    	db 0Dh,0Ah
  9972 000021A0 504320444F53205665-     	db 'PC DOS Version 7.10',0Dh,0Ah
  9972 000021A9 7273696F6E20372E31-
  9972 000021B2 300D0A             
  9973 000021B5 202020202020202020-     	db '             (C)Copyright International Business Machines Corp '
  9973 000021BE 20202020284329436F-
  9973 000021C7 707972696768742049-
  9973 000021D0 6E7465726E6174696F-
  9973 000021D9 6E616C20427573696E-
  9973 000021E2 657373204D61636869-
  9973 000021EB 6E657320436F727020 
  9974 000021F4 313938312D32303032-     	db '1981-2002.',0Dh,0Ah
  9974 000021FD 2E0D0A             
  9975                                  %endif
  9976                                  
  9977                                  BADCOMLKMES:
  9978 00002200 28                      	db 40
  9979 00002201 537065636966696564-     	db 'Specified COMMAND search directory bad',0Dh,0Ah
  9979 0000220A 20434F4D4D414E4420-
  9979 00002213 736561726368206469-
  9979 0000221C 726563746F72792062-
  9979 00002225 61640D0A           
  9980                                  	; 07/06/2023
  9981                                  BADCOMACCMSG:
  9982 00002229 37                      	db 55
  9983 0000222A 537065636966696564-     	db 'Specified COMMAND search directory bad, access denied',0Dh,0Ah
  9983 00002233 20434F4D4D414E4420-
  9983 0000223C 736561726368206469-
  9983 00002245 726563746F72792062-
  9983 0000224E 61642C206163636573-
  9983 00002257 732064656E6965640D-
  9983 00002260 0A                 
  9984                                  HELPMSG1:
  9985 00002261 38                      	db 56
  9986                                  	;db 'Starts a new copy of the MS-DOS command interpreter.',0Dh,0Ah
  9987                                  	; 23/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
  9988 00002262 537461727473206120-     	db 'Starts a new copy of the PC DOS command interpreter.',0Dh,0Ah
  9988 0000226B 6E657720636F707920-
  9988 00002274 6F6620746865205043-
  9988 0000227D 20444F5320636F6D6D-
  9988 00002286 616E6420696E746572-
  9988 0000228F 7072657465722E0D0A 
  9989 00002298 0D0A                    	db 0Dh,0Ah
  9990                                  ;HELPMSG2:
  9991                                  ;	db 70
  9992                                  ;	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P] [/C string] [/MSG]'
  9993                                  ;	db 0Dh,0Ah
  9994                                  ;	db 0Dh,0Ah
  9995                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
  9996                                  HELPMSG2:
  9997 0000229A 38                      	db 56
  9998 0000229B 434F4D4D414E44205B-     	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P [/MSG]]',0Dh,0Ah
  9998 000022A4 5B64726976653A5D70-
  9998 000022AD 6174685D205B646576-
  9998 000022B6 6963655D205B2F453A-
  9998 000022BF 6E6E6E6E6E5D205B2F-
  9998 000022C8 50205B2F4D53475D5D-
  9998 000022D1 0D0A               
  9999                                  HELPMSG3:
 10000                                  	;db 42
 10001                                  	;db '        [/Y [/C command | /K command]]',0Dh,0Ah
 10002                                  	;db 0Dh,0Ah
 10003                                  	; 23/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 10004 000022D3 34                      	db 52
 10005 000022D4 20202020202020205B-     	db '        [/H] [/O] [/Y [/C command | /K command]]',0Dh,0Ah
 10005 000022DD 2F485D205B2F4F5D20-
 10005 000022E6 5B2F59205B2F432063-
 10005 000022EF 6F6D6D616E64207C20-
 10005 000022F8 2F4B20636F6D6D616E-
 10005 00002301 645D5D0D0A         
 10006 00002306 0D0A                    	db 0Dh,0Ah
 10007                                  ;HELPMSG3:
 10008                                  HELPMSG4:
 10009 00002308 48                              db 72
 10010 00002309 20205B64726976653A-     	db '  [drive:]path    Specifies the directory containing COMMAND.COM '
 10010 00002312 5D7061746820202020-
 10010 0000231B 537065636966696573-
 10010 00002324 207468652064697265-
 10010 0000232D 63746F727920636F6E-
 10010 00002336 7461696E696E672043-
 10010 0000233F 4F4D4D414E442E434F-
 10010 00002348 4D20               
 10011 0000234A 66696C652E0D0A          	db 'file.',0Dh,0Ah
 10012                                  ;HELPMSG4:
 10013                                  HELPMSG5:
 10014 00002351 4D                      	db 77
 10015 00002352 202064657669636520-     	db '  device          Specifies the device to use for command input and '
 10015 0000235B 202020202020202020-
 10015 00002364 537065636966696573-
 10015 0000236D 207468652064657669-
 10015 00002376 636520746F20757365-
 10015 0000237F 20666F7220636F6D6D-
 10015 00002388 616E6420696E707574-
 10015 00002391 20616E6420         
 10016 00002396 6F75747075742E0D0A      	db 'output.',0Dh,0Ah
 10017                                  ;HELPMSG5:
 10018                                  HELPMSG6:
 10019 0000239F 45                      	db 69
 10020 000023A0 20202F453A6E6E6E6E-     	db '  /E:nnnnn        Sets the initial environment size to nnnnn bytes.'
 10020 000023A9 6E2020202020202020-
 10020 000023B2 536574732074686520-
 10020 000023BB 696E697469616C2065-
 10020 000023C4 6E7669726F6E6D656E-
 10020 000023CD 742073697A6520746F-
 10020 000023D6 206E6E6E6E6E206279-
 10020 000023DF 7465732E           
 10021 000023E3 0D0A                    	db 0Dh,0Ah
 10022                                  ;HELPMSG6:
 10023                                  HELPMSG7:
 10024 000023E5 4D                      	db 77
 10025 000023E6 20202F502020202020-     	db '  /P              Makes the new Command Interpreter permanent '
 10025 000023EF 202020202020202020-
 10025 000023F8 4D616B657320746865-
 10025 00002401 206E657720436F6D6D-
 10025 0000240A 616E6420496E746572-
 10025 00002413 707265746572207065-
 10025 0000241C 726D616E656E7420   
 10026 00002424 2863616E2774206578-     	db '(can',27h,'t exit).',0Dh,0Ah
 10026 0000242D 6974292E0D0A       
 10027                                  ;HELPMSG7:
 10028                                  HELPMSG8:
 10029                                  	;db 80
 10030                                  	;db '  /C string       Carries out the command specified by string, and '
 10031                                  	;db 'then stops.',0Dh,0Ah
 10032                                  	; 07/06/2023
 10033 00002433 46                      	db 70
 10034 00002434 20202F4D5347202020-     	db '  /MSG            Stores all error messages in memory (requires /P).'
 10034 0000243D 202020202020202020-
 10034 00002446 53746F72657320616C-
 10034 0000244F 6C206572726F72206D-
 10034 00002458 657373616765732069-
 10034 00002461 6E206D656D6F727920-
 10034 0000246A 287265717569726573-
 10034 00002473 202F50292E         
 10035 00002478 0D0A                    	db 0Dh,0Ah
 10036                                  
 10037                                  ; 23/07/2024 - Retro DOS v5.0 COMMAND.COM
 10038                                  ; PCDOS 7.1 COMMAND.COM
 10039                                  ;***
 10040                                  HELPMSG9:
 10041 0000247A 4A                      	db 74
 10042 0000247B 20202F482020202020-     	db '  /H              Loads the Command Interpreter into a UMB '
 10042 00002484 202020202020202020-
 10042 0000248D 4C6F61647320746865-
 10042 00002496 20436F6D6D616E6420-
 10042 0000249F 496E74657270726574-
 10042 000024A8 657220696E746F2061-
 10042 000024B1 20554D4220         
 10043 000024B6 696620617661696C61-     	db 'if available.',0Dh,0Ah
 10043 000024BF 626C652E0D0A       
 10044                                  HELPMSG10:
 10045 000024C5 4E                      	db 78
 10046 000024C6 20202F4F2020202020-     	db '  /O              Disables overwrite prompt on COPY,XCOPY,and MOVE '
 10046 000024CF 202020202020202020-
 10046 000024D8 44697361626C657320-
 10046 000024E1 6F7665727772697465-
 10046 000024EA 2070726F6D7074206F-
 10046 000024F3 6E20434F50592C5843-
 10046 000024FC 4F50592C616E64204D-
 10046 00002505 4F564520           
 10047 00002509 636F6D6D616E64732E-     	db 'commands.',0Dh,0Ah
 10047 00002512 0D0A               
 10048                                  ;***
 10049                                  
 10050                                  ;HELPMSG8:
 10051                                  ; 23/07/2024 - PCDOS 7.1 COMMAND.COM
 10052                                  ;HELPMSG9:
 10053                                  HELPMSG11:
 10054                                  	;db 78
 10055                                  	;db '  /MSG            Specifies that all error messages be stored in '
 10056                                  	;db 'memory. You',0Dh,0Ah
 10057                                  ;HELPMSG9:
 10058                                  	;db 56
 10059                                  	;db '                  need to specify /P with this switch.',0Dh,0Ah
 10060 00002514 4A                      	db 74
 10061 00002515 20202F592020202020-     	db '  /Y              Steps through the batch program specified by /C'
 10061 0000251E 202020202020202020-
 10061 00002527 537465707320746872-
 10061 00002530 6F7567682074686520-
 10061 00002539 62617463682070726F-
 10061 00002542 6772616D2073706563-
 10061 0000254B 696669656420627920-
 10061 00002554 2F43               
 10062 00002556 206F72202F4B2E0D0A      	db ' or /K.',0Dh,0Ah
 10063                                  
 10064                                  	; 07/06/2023
 10065                                  ; 23/07/2024
 10066                                  ;HELPMSG10:
 10067                                  HELPMSG12:
 10068 0000255F 3F                      	db 63
 10069 00002560 20202F4320636F6D6D-     	db '  /C command      Executes the specified command and returns.',0Dh,0Ah
 10069 00002569 616E64202020202020-
 10069 00002572 457865637574657320-
 10069 0000257B 746865207370656369-
 10069 00002584 6669656420636F6D6D-
 10069 0000258D 616E6420616E642072-
 10069 00002596 657475726E732E0D0A 
 10070                                  ; 23/07/2024
 10071                                  ;HELPMSG11:
 10072                                  HELPMSG13:
 10073 0000259F 4B                      	db 75
 10074 000025A0 20202F4B20636F6D6D-     	db '  /K command      Executes the specified command and continues running.'
 10074 000025A9 616E64202020202020-
 10074 000025B2 457865637574657320-
 10074 000025BB 746865207370656369-
 10074 000025C4 6669656420636F6D6D-
 10074 000025CD 616E6420616E642063-
 10074 000025D6 6F6E74696E75657320-
 10074 000025DF 72756E6E696E672E   
 10075 000025E7 0D0A                    	db 0Dh,0Ah
 10076 000025E9 0D0A                    	db 0Dh,0Ah
 10077                                  ;HELPMSG12:
 10078                                  ; 23/07/2024
 10079                                  HELPMSG14:
 10080 000025EB 4C                      	db 76
 10081 000025EC 546865202F5020616E-     	db 'The /P and /MSG switches may be used only when COMMAND is started'
 10081 000025F5 64202F4D5347207377-
 10081 000025FE 697463686573206D61-
 10081 00002607 792062652075736564-
 10081 00002610 206F6E6C7920776865-
 10081 00002619 6E20434F4D4D414E44-
 10081 00002622 206973207374617274-
 10081 0000262B 6564               
 10082 0000262D 206279207573696E67-     	db ' by using',0Dh,0Ah
 10082 00002636 0D0A               
 10083                                  ;HELPMSG13:
 10084                                  ; 23/07/2024
 10085                                  HELPMSG15:
 10086 00002638 2B                      	db 43
 10087 00002639 746865205348454C4C-     	db 'the SHELL command in the CONFIG.SYS file.',0Dh,0Ah
 10087 00002642 20636F6D6D616E6420-
 10087 0000264B 696E2074686520434F-
 10087 00002654 4E4649472E53595320-
 10087 0000265D 66696C652E0D0A     
 10088                                  
 10089                                  HelpMsgs:
 10090 00002664 [6122]                          dw HELPMSG1
 10091 00002666 [9A22]                  	dw HELPMSG2
 10092 00002668 [D322]                  	dw HELPMSG3
 10093 0000266A [0823]                  	dw HELPMSG4
 10094 0000266C [5123]                  	dw HELPMSG5
 10095 0000266E [9F23]                  	dw HELPMSG6
 10096 00002670 [E523]                  	dw HELPMSG7
 10097 00002672 [3324]                  	dw HELPMSG8
 10098 00002674 [7A24]                  	dw HELPMSG9
 10099                                  
 10100                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 10101 00002676 [C524]                  	dw HELPMSG10
 10102 00002678 [1425]                  	dw HELPMSG11
 10103 0000267A [5F25]                  	dw HELPMSG12
 10104 0000267C [9F25]                  	dw HELPMSG13
 10105                                  
 10106                                  	; 23/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 10107 0000267E [EB25]                  	dw HELPMSG14
 10108 00002680 [3826]                  	dw HELPMSG15
 10109                                  
 10110                                  	; 23/04/2023
 10111 00002682 0000                    	dw 0
 10112                                  
 10113                                  ;-----------------------------------------------------------------------------
 10114                                  
 10115                                  ;SR;
 10116                                  ; This table of offsets is used by the init code to calculate the new offsets
 10117                                  ;for these labels after the resident code has been relocated
 10118                                  
 10119                                  ;Reloc_Table:
 10120                                  	;dw offset CODERES:MsgInt2fHandler
 10121                                  	;dw offset CODERES:Int_2e
 10122                                  	;dw offset CODERES:ContC
 10123                                  	;dw offset CODERES:DskErr
 10124                                  	;dw offset CODERES:Exec_Ret
 10125                                  	;dw offset CODERES:TRemCheck
 10126                                  	;dw offset CODERES:TrnLodCom1
 10127                                  	;dw offset CODERES:LodCom
 10128                                  	;dw offset CODERES:MsgRetriever
 10129                                  	;dw offset CODERES:THeadFix
 10130                                  	;dw offset CODERES:Lh_OffUnlink	; M003
 10131                                  
 10132                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10133                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:22F6h
 10134                                  
 10135                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10136                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26C1h
 10137                                  
 10138                                  Reloc_Table:	; 23/07/2024 ; PCDOS 7.1 COMMAND.COM CODERES addresses
 10139 00002684 9007                    	dw MsgInt2fHandler - RCODE_START  ; 7B2h (RESGROUP:7B2h+X) *
 10140 00002686 7601                    	dw Int_2e - RCODE_START		  ; 170h (RESGROUP:170h+X) *	
 10141 00002688 3300                    	dw ContC - RCODE_START		  ; 02Eh (RESGROUP:02Eh+X) *
 10142 0000268A 7B04                    	dw DSKERR - RCODE_START		  ; 495h (RESGROUP:495h+X) *
 10143 0000268C 2700                    	dw Exec_Ret - RCODE_START	  ; 022h (RESGROUP:022h+X) *
 10144 0000268E A402                    	dw TRemCheck - RCODE_START	  ; 2A6h (RESGROUP:2A6h+X) *
 10145 00002690 4604                    	dw TrnLodCom1 - RCODE_START	  ; 472h (RESGROUP:472h+X) *
 10146 00002692 AD01                    	dw LodCom - RCODE_START		  ; 1A7h (RESGROUP:1A7h+X) *
 10147 00002694 D307                    	dw MsgRetriever - RCODE_START	  ; 7F5h (RESGROUP:7F5h+X) *
 10148 00002696 C302                    	dw THeadFix - RCODE_START	  ; 2C5h (RESGROUP:2C5h+X) *
 10149 00002698 4C08                    	dw Lh_OffUnlink - RCODE_START	  ; 86Eh (RESGROUP:86Eh+X) *
 10150                                  
 10151                                  	; MSDOS 6.22 COMMAND.COM Reloc_Table CODERES addresses:
 10152                                  	; 738h,177h,035h,445h,029h,2A3h,422h,1AEh,77Bh,2C2h,7F4h
 10153                                  
 10154                                  	; 07/06/2023
 10155                                  	; X = 0D40h for MSDOS 5.0 COMMAND.COM
 10156                                  	; X = 0E50h for MSDOS 6.22 COMMAND.COM
 10157                                  	; 23/07/2024
 10158                                  	; X = 0E10h for PCDOS 7.1 COMMAND.COM
 10159                                  	;; example:
 10160                                  	;;	MsgIn2FHandler is at RESGROUP:15C2h or at CODERES:07B2h
 10161                                  	;;				(in PCDOS 7.1 COMMAND.COM)
 10162                                  
 10163                                  NUM_RELOC_ENTRIES equ ($-Reloc_Table)/2
 10164                                  
 10165                                  ResJmpTable:
 10166 0000269A 00000000                	dd 0			; stores prev stub jump table addr
 10167                                  FirstCom:
 10168 0000269E 00                      	db 0			; flag set if first command.com
 10169                                  DevFlag:
 10170 0000269F 00                      	db 0
 10171                                  PathFlag:
 10172 000026A0 00                      	db 0
 10173                                  
 10174                                  	;; MSDOS 5.0 COMMAND.COM - RESGROUP:2313h
 10175                                  	;;times 13 db 0
 10176                                  
 10177                                  	; 07/06/2023
 10178                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:26DEh
 10179                                  	;times 2 db 0
 10180                                  
 10181                                  ; 30/01/2023
 10182                                  coderes_end equ $
 10183                                  
 10184                                  ;INIT	ENDS
 10185                                  
 10186                                  ;	END
 10187                                  
 10188                                  ;-----------------------------------------------------------------------------
 10189                                  ; 14/10/2018 (Retro DOS v3.0 COMMAND.COM Signature)
 10190                                  ;-----------------------------------------------------------------------------
 10191                                  
 10192                                  ;db	"Retro DOS v3.0 COMMAND.COM by Erdogan Tan [2018]"
 10193                                  	; 30/01/2023
 10194 000026A1 00                      db	0
 10195                                  ;db	"Retro DOS v4.0 COMMAND.COM by Erdogan Tan [2023]"		
 10196                                  	; 07/06/2023
 10197                                  ;db	"Retro DOS v4.2 COMMAND.COM by Erdogan Tan [2023]"
 10198                                  	; 21/07/2024
 10199 000026A2 526574726F20444F53-     db	"Retro DOS v5.0 COMMAND.COM by Erdogan Tan [2024]"
 10199 000026AB 2076352E3020434F4D-
 10199 000026B4 4D414E442E434F4D20-
 10199 000026BD 6279204572646F6761-
 10199 000026C6 6E2054616E205B3230-
 10199 000026CF 32345D             
 10200 000026D2 00                      db	0
 10201                                  
 10202                                  ;-----------------------------------------------------------------------------
 10203                                  ; 24/09/2018 (Retro DOS v3.0 COMMAND)
 10204                                  ;-----------------------------------------------------------------------------
 10205                                  
 10206                                  ;TAIL    SEGMENT PUBLIC PARA
 10207                                  ;        ORG     0
 10208                                  ;TRANSTART LABEL WORD
 10209                                  ;TAIL    ENDS
 10210                                  
 10211                                  ;ALIGN 16  ; 25/09/2018
 10212                                  
 10213                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10214                                  
 10215                                  numbertodiv equ ($-StartCode)+100h ; 16/04/2023
 10216                                  numbertomod equ (numbertodiv % 16)
 10217                                  
 10218                                  %if numbertomod>0 & numbertomod<16
 10219 000026D3 00<rep Dh>              	times (16-numbertomod) db 0
 10220                                  %endif
 10221                                  
 10222                                  ; 30/01/2023
 10223                                  ;TRANSTART:
 10224                                  
 10225                                  ; 21/04/2018 (Retro DOS v2.0 COMMAND)
 10226                                  ;	times	128 db 0	
 10227                                  
 10228                                  ;-----------------------------------------------------------------------------
 10229                                  ; SEGMENT - TRANSCODE
 10230                                  ;-----------------------------------------------------------------------------
 10231                                  
 10232                                  ;TRANGROUP: ; 21/04/2018
 10233                                  
 10234                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10235                                  ;-----------------------------------------------------------------------------
 10236                                  
 10237                                  ; MSDOS 3.3 COMMAND.COM Transient Portion Addresses
 10238                                  
 10239                                  ; 21/04/2018 - Retro DOS v2.0
 10240                                  ; transcom.s (COMMAND.COM source file 2 of 2) code/data addresses 
 10241                                  ; (these values must be changed when transcom.s source code is changed
 10242                                  ; and data offsets are changed)
 10243                                  ;
 10244                                  ; 30/04/2018
 10245                                  ; 29/04/2018
 10246                                  
 10247                                  ; 24/09/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
 10248                                  ;COMMAND      EQU  012CH
 10249                                  ;DATINIT      EQU  2091H
 10250                                  ;HEADCALL     EQU  428FH
 10251                                  ;TRANSPACEEND EQU  4D5CH
 10252                                  ;TRANDATAEND  EQU  3F44H
 10253                                  
 10254                                  ; 29/04/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
 10255                                  ;TRIAGE_INIT  EQU  1F15H
 10256                                  ;PRINTF_INIT  EQU  34E0H 
 10257                                  
 10258                                  ;GETEXTERRNUM EQU  1EEEH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr	
 10259                                  
 10260                                  ;TPA	EQU  4293H
 10261                                  ;TRNLEN	EQU  04D6H
 10262                                  
 10263                                  ; 20/10/2018 - Retro DOS v3.0 COMMAND.COM transient portion addresses
 10264                                  ;COMMAND      EQU  012CH
 10265                                  ;DATINIT      EQU  206FH
 10266                                  ;HEADCALL     EQU  426FH
 10267                                  ; 09/01/2023
 10268                                  ;TRANSPACEEND EQU  4D3CH
 10269                                  ;TRANDATAEND  EQU  3F24H
 10270                                  ;TRIAGE_INIT  EQU  1EF3H
 10271                                  ;PRINTF_INIT  EQU  34BFH 
 10272                                  ;
 10273                                  ;GETEXTERRNUM EQU  1ECCH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr
 10274                                  
 10275                                  ;-----------------------------------------------------------------------------
 10276                                  ; ARENA.INC, MSDOS 6.0, 1991
 10277                                  ;-----------------------------------------------------------------------------
 10278                                  ; 13/10/2018 - Retro DOS 3.0
 10279                                  ; 17/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10280                                  
 10281                                  ;BREAK <Memory arena structure>
 10282                                  
 10283                                  ; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
 10284                                  
 10285                                  ; arena item
 10286                                  
 10287                                  struc ARENA
 10288 00000000 ??                        .signature:	resb 1		; 4D for valid item, 5A for last item
 10289 00000001 ????                      .owner:	resw 1		; owner of arena item
 10290 00000003 ????                      .size:	resw 1		; size in paragraphs of item
 10291                                  endstruc
 10292                                  
 10293                                  ;-----------------------------------------------------------------------------
 10294                                  ;START OF TRANSIENT PORTION
 10295                                  ;This code is loaded at the end of memory and may be overwritten by
 10296                                  ;memory-intensive user programs.
 10297                                  ;-----------------------------------------------------------------------------
 10298                                  
 10299                                  ; 16/04/2023
 10300                                  TRANSTART EQU ($-StartCode)+100h ; 18/04/2023
 10301                                  ; 29/09/2018
 10302                                  ; 31/01/2023 
 10303                                  ;TRANSTART:	; Offset 1660h in original MSDOS 3.3 COMMAND.COM
 10304                                  			
 10305                                  		; 09/01/2023
 10306                                  		; Offset 2320h in original MSDOS 5.0 COMMAND.COM
 10307                                  			
 10308                                  		; 07/06/2023
 10309                                  		; Offset 26E0h in original MSDOS 6.22 COMMAND.COM
 10310                                  
 10311                                  ; 25/09/2018
 10312                                  ; (original MSDOS 3.3 COMMAND.COM TRIAGEERROR offset address)
 10313                                  ;
 10314                                  ; 'GET_EXT_ERR_NUMBER' ('TRIAGEERROR') procedure is at offset 354Eh 
 10315                                  ; in MSDOS 3.3 COMMAND.COM (It is at offset 1EEEh in transient porsion).	 	
 10316                                  ;
 10317                                  ;TRIAGEERROR EQU TRANSTART+GETEXTERRNUM-100H
 10318                                  ;
 10319                                  ;
 10320                                  ;COMTRANS:
 10321                                  ;
 10322                                  ; 20/10/2018 - Retro DOS v3.0	
 10323                                  ;INCBIN	"TRANCOM3.BIN"
 10324                                  ;
 10325                                  ;COMLEN	EQU $-COMTRANS ; End of COMMAND load.
 10326                                  ;
 10327                                  ; 29/04/2018
 10328                                  ;BSS_SIZE EQU TRANSPACEEND-TRANDATAEND	
 10329                                  ;
 10330                                  ;TIMES BSS_SIZE db 0
 10331                                  ;
 10332                                  ;COMLEN	EQU $-COMTRANS ; 30/04/2018
 10333                                  
 10334                                  ;COMMANDCOMSIZE equ $ - 100h
 10335                                  
 10336                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10337                                  ; ============================================================================
 10338                                  ; --- ('trancom5.s', 31/01/2023 - modified from 'trancom3.s', 20/10/2018) ----
 10339                                  ; ============================================================================
 10340                                  
 10341                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22 COMMAND.COM)
 10342                                  
 10343                                  ; ----------------------------------------------------------------------------
 10344                                  ; START OF TRANSIENT PORTION
 10345                                  ; ----------------------------------------------------------------------------
 10346                                  ; SEGMENT - TRANSCODE
 10347                                  ; ----------------------------------------------------------------------------
 10348                                  
 10349                                  ; 18/04/2023
 10350                                  section .TRANGROUP  vstart=0  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) 
 10351                                  
 10352                                  ; 18/04/2023
 10353                                  ;-----------------------------------------------------------------------------
 10354                                  ; TRANSCODE segment offset 0
 10355                                  TRANSIENTSTART:
 10356                                  
 10357                                  	; 31/01/2023
 10358 00000000 00<rep 100h>            	times 256 db 0		; Allow for 100H parameter area
 10359                                  
 10360                                  ;============================================================================
 10361                                  ; TCODE.ASM, MSDOS 6.0, 1991
 10362                                  ;============================================================================
 10363                                  ; 12/10/2018 - Retro DOS v3.0
 10364                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1)
 10365                                  
 10366                                  ;[ORG 100h]
 10367                                  
 10368                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0100h
 10369                                  
 10370                                  ; ---------------------------------------------------------------------------
 10371                                  		
 10372                                  	; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10373                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:0100h)
 10374                                  
 10375                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10376                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0100h)
 10377                                  SETDRV:
 10378 00000100 B40E                    	mov	ah,0Eh
 10379                                  	;mov	ah,SET_DEFAULT_DRIVE ; 0Eh
 10380 00000102 CD21                    	int	21h	; DOS -	SELECT DISK
 10381                                  			; DL = new default drive number
 10382                                  			;		(0 = A, 1 = B, ..)
 10383                                  			; Return: AL = number of logical drives
 10384                                  
 10385                                  ; ---------------------------------------------------------------------------
 10386                                  
 10387                                  ; TCOMMAND is the recycle point in COMMAND. Nothing is known here.
 10388                                  ; No registers (CS:IP) no flags, nothing.
 10389                                  
 10390                                  TCOMMAND:
 10391                                  ; 21/07/2024 - PCDOS 7.1 COMMAND.COM - TRANGROUP:0104h
 10392                                  ; Retro DOS v5.0 COMMAND.COM
 10393                                  %if 1
 10394 00000104 90                      	nop
 10395 00000105 90                      	nop
 10396                                  %endif
 10397 00000106 2E8E1E[639C]            	mov	ds,[cs:RESSEG]
 10398 0000010B B8FFFF                  	mov	ax,-1
 10399 0000010E 8706[A702]              	xchg	ax,[VerVal]
 10400 00000112 83F8FF                  	cmp	ax,-1
 10401 00000115 7404                    	je	short NOSETVER2
 10402 00000117 B42E                    	mov	ah,2Eh
 10403                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh
 10404 00000119 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 10405                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 10406                                  NOSETVER2:
 10407 0000011B 2EFF1E[619C]            	call	far [cs:HEADCALL]   ; Make sure header fixed
 10408 00000120 31ED                    	xor	bp,bp		    ; Flag transient not read
 10409 00000122 833E[A502]FF            	cmp	word [SingleCom],-1
 10410 00000127 7505                    	jne	short COMMAND
 10411                                  _$EXITPREP:
 10412 00000129 0E                      	push	cs
 10413 0000012A 1F                      	pop	ds
 10414 0000012B E9CD23                  	jmp	_$EXIT		; Have finished the single command
 10415                                  
 10416                                  ; ---------------------------------------------------------------------------
 10417                                  ;
 10418                                  ; Main entry point from resident portion.
 10419                                  ;
 10420                                  ;   If BP <> 0, then we have just loaded transient portion otherwise we are
 10421                                  ;   just beginning the processing of another command.
 10422                                  ;
 10423                                  ; ---------------------------------------------------------------------------
 10424                                  
 10425                                  ; We are not always sure of the state of the world at this time. We presume
 10426                                  ; worst case and initialize the relevant registers: segments and stack.
 10427                                  
 10428                                  COMMAND:
 10429 0000012E FC                      	cld
 10430 0000012F 8CC8                    	mov	ax,cs
 10431 00000131 FA                      	cli
 10432 00000132 8ED0                    	mov	ss,ax
 10433                                  	;mov	sp,offset TRANGROUP:STACK
 10434                                  				; 07/06/2023
 10435 00000134 BC[0EA6]                	mov	sp,STACK	; 0AF24h for MSDOS 6.22 COMMAND.COM
 10436                                  				; 09854h for MSDOS 5.0 COMMAND.COM
 10437                                  				; 25/07/2024
 10438                                  				; 0AA2Dh for PCDOS 7.1 COMMAND.COM
 10439 00000137 FB                      	sti
 10440                                  		
 10441 00000138 8EC0                    	mov	es,ax
 10442                                  		
 10443                                  	; MSDOS 6.0
 10444 0000013A 8ED8                    	mov	ds,ax		;AN000; set DS to transient
 10445                                  	;ASSUME	ES:TRANGROUP,DS:TRANGROUP ;AC000;
 10446                                  	;invoke	TSYSLOADMSG	;AN000; preload messages
 10447                                  	; 31/01/2023
 10448 0000013C E8C653                  	call	TSYSLOADMSG
 10449 0000013F C606[A69F]00            	mov	byte [append_exec],0 ;AN041; set internal append state off
 10450                                  
 10451                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10452                                  	;mov	ds,[ss:RESSEG]
 10453                                  	; 31/01/2023
 10454 00000144 8E1E[639C]              	mov	ds,[RESSEG]
 10455 00000148 36C606[3F9A]80          	mov	byte [ss:UCOMBUF],128 ; Init UCOMBUF	
 10456 0000014E 36C606[C29A]80          	mov	byte [ss:COMBUF],128  ; Init COMBUF (Autoexec doing DATE)
 10457                                  
 10458                                  ; If we have just loaded the transient, then we do NOT need to initialize the
 10459                                  ; command buffer. ????  DO WE NEED TO RESTORE THE USERS DIRECTORY ????
 10460                                  ; I guess not: the only circumstances in which we reload the command processor
 10461                                  ; is after a transient program execution. In this case, we let the current
 10462                                  ; directory lie where it may.
 10463                                  
 10464 00000154 09ED                    	or	bp,bp		; See if just read
 10465 00000156 7409                    	jz	short TESTRDIR	; Not read, check user directory
 10466 00000158 36C706[409A]010D        	mov	word [ss:UCOMBUF+1],0D01h ; Reset buffer
 10467 0000015F EB17                    	jmp	short NOSETBUF
 10468                                  TESTRDIR:
 10469 00000161 803E[A102]00            	cmp	byte [RestDir],0
 10470 00000166 7410                    	jz	short NOSETBUF	; User directory OK
 10471 00000168 1E                      	push	ds
 10472                                  
 10473                                  ; We have an unusual situation to handle. The user *may* have changed his
 10474                                  ; directory as a result of an internal command that got aborted. Restoring it
 10475                                  ; twice may not help us: the problem may never go away. We just attempt it
 10476                                  ; once and give up.
 10477                                  
 10478 00000169 C606[A102]00            	mov	byte [RestDir],0 ; Flag users dirs OK
 10479                                  
 10480                                  	; Restore users directory
 10481 0000016E 0E                      	push	cs
 10482 0000016F 1F                      	pop	ds
 10483 00000170 BA[459B]                	mov	dx,USERDIR1
 10484 00000173 B43B                    	mov	ah,3Bh
 10485                                  	;mov	ah,CHDir ; 3Bh
 10486 00000175 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 10487                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 10488 00000177 1F                      	pop	ds
 10489                                  NOSETBUF:
 10490 00000178 803E[1403]00            	cmp	byte [PipeFiles],0
 10491 0000017D 740A                    	jz	short NOPCLOSE	; Don't bother if they don't exist
 10492 0000017F 803E[1303]00            	cmp	byte [PipeFlag],0
 10493 00000184 7503                    	jnz	short NOPCLOSE	; Don't del if still piping
 10494 00000186 E8952F                  	call	PIPEDEL
 10495                                  NOPCLOSE:
 10496                                  	;mov	byte [0BE9h],0	; MSDOS 3.3
 10497                                  	; 31/01/2023
 10498 00000189 C606[9902]00            	mov	byte [ExtCom],0 ; Flag internal command
 10499 0000018E 8CC8                    	mov	ax,cs		; Get segment we're in
 10500 00000190 8ED8                    	mov	ds,ax
 10501 00000192 50                      	push	ax
 10502                                  			; 07/06/2023 (INTERNATVARS addr = STACK addr)
 10503 00000193 BA[0EA6]                	mov	dx,INTERNATVARS ; 0AF24h for MSDOS 6.22 COMMAND.COM
 10504                                  				; 09854h for MSDOS 5.0 COMMAND.COM
 10505                                  			; 25/07/2024
 10506                                  				; 0AA2Dh for PCDOS 7.1 COMMAND.COM
 10507 00000196 B80038                  	mov	ax,3800h
 10508                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 10509 00000199 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 10510                                  			; get current-country info
 10511                                  			; DS:DX	-> buffer for returned info
 10512 0000019B 58                      	pop	ax
 10513 0000019C 2B06[659C]              	sub	ax,[TPA]	; AX=size of TPA in paragraphs
 10514 000001A0 53                      	push	bx
 10515 000001A1 BB1000                  	mov	bx,16
 10516 000001A4 F7E3                    	mul	bx		; DX:AX=size of TPA in bytes
 10517 000001A6 5B                      	pop	bx
 10518 000001A7 09D2                    	or	dx,dx		; See if over 64K
 10519 000001A9 7403                    	jz	short SAVSIZ	; OK if not
 10520 000001AB B8FFFF                  	mov	ax,-1		; If so, limit to 65535 bytes
 10521                                  SAVSIZ:
 10522                                  
 10523                                  ; AX is the number of bytes free in the buffer between the resident and the
 10524                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 10525                                  
 10526 000001AE 3D0002                  	cmp	ax,512
 10527 000001B1 7603                    	jbe	short GOTSIZE
 10528                                  	;and	ax,~1FFh
 10529 000001B3 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FF
 10530                                  GOTSIZE:
 10531 000001B6 A3[859C]                	mov	[BYTCNT],ax	; Max no. of bytes that can be buffered
 10532 000001B9 8E1E[639C]              	mov	ds,[RESSEG]	; All batch work must use resident seg.
 10533                                  
 10534 000001BD F606[9D02]01            	test	byte [EchoFlag],1 
 10535 000001C2 741E                    	jz	short GETCOM	; Don't do the CRLF
 10536 000001C4 E8362F                  	call	SINGLETEST
 10537 000001C7 7219                    	jb	short GETCOM
 10538 000001C9 F606[1303]FF            	test	byte [PipeFlag],0FFh ; -1
 10539 000001CE 7512                    	jnz	short GETCOM
 10540                                  				; G  Don't print prompt in FOR
 10541 000001D0 F606[AB02]FF            	test	byte [ForFlag],0FFh ; -1
 10542 000001D5 750B                    	jnz	short GETCOM
 10543                                  				; G  Don't print prompt if in batch
 10544 000001D7 F706[4902]FFFF          	test	word [Batch],0FFFFh ; -1
 10545 000001DD 7503                    	jnz	short GETCOM
 10546 000001DF E89527                  	call	CRLF2
 10547                                  
 10548                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10549                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:01E0h
 10550                                  GETCOM:
 10551 000001E2 833E[A502]00            	cmp     word [SingleCom],0
 10552 000001E7 750D                    	jnz     short GETCOM2
 10553 000001E9 F706[4902]FFFF          	test    word [Batch],0FFFFh
 10554 000001EF 7505                    	jnz     short GETCOM2
 10555 000001F1 8026[5A04]EF            	and     byte [Y_Flag],0EFh ; Y/N question overwrite flag ; ~10h
 10556                                  
 10557                                  ;GETCOM:	; MSDOS 5.0 COMMAND.COM
 10558                                  GETCOM2:
 10559 000001F6 C606[B002]00            	mov	byte [Call_Flag],0 ; G Reset call flags
 10560 000001FB C606[B102]00            	mov	byte [Call_Batch_Flag],0
 10561 00000200 B419                    	mov	ah,19h
 10562                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 10563 00000202 CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 10564 00000204 36A2[779C]              	mov	[ss:CURDRV],al
 10565 00000208 F606[1303]FF            	test	byte [PipeFlag],0FFh ; -1 ; Pipe has highest presedence
 10566 0000020D 7403                    	jz	short NOPIPE
 10567 0000020F E9DD2F                  	jmp	PIPEPROC	; Continue the pipeline
 10568                                  NOPIPE:
 10569 00000212 F606[9D02]01            	test	byte [EchoFlag],1
 10570 00000217 7417                    	jz	short NOPDRV	; No prompt if echo off
 10571 00000219 E8E12E                  	call	SINGLETEST
 10572 0000021C 7212                    	jb	short NOPDRV
 10573 0000021E F606[AB02]FF            	test	byte [ForFlag],0FFh ; G  Don't print prompt in FOR	
 10574 00000223 750B                    	jnz	short NOPDRV
 10575 00000225 F706[4902]FFFF          	test	word [Batch],0FFFFh ; G  Don't print prompt if in batch
 10576 0000022B 750D                    	jnz	short TESTFORBAT
 10577 0000022D E8BE1E                  	call	PRINT_PROMPT	; Prompt the user
 10578                                  NOPDRV:
 10579 00000230 F606[AB02]FF            	test	byte [ForFlag],0FFh ; FOR has next highest precedence
 10580 00000235 7403                    	jz	short TESTFORBAT
 10581 00000237 E9BD0C                  	jmp	FORPROC		; Continue the FOR
 10582                                  
 10583                                  TESTFORBAT:
 10584 0000023A 36C606[0E9C]00          	mov	byte [ss:RE_INSTR],0 ; Turn redirection back off	
 10585 00000240 C606[C202]00            	mov	byte [Re_OutStr],0  ; [0C09h] for MSDOS 3.3 
 10586 00000245 C606[C102]00            	mov	byte [Re_Out_App],0 ; [0C08h] for MSDOS 3.3
 10587 0000024A C606[AA02]00            	mov	byte [IfFlag],0	; no more ifs...
 10588 0000024F F706[4902]FFFF          	test	word [Batch],0FFFFh ; Batch has lowest precedence
 10589 00000255 7441                    	jz	short ISNOBAT
 10590                                  
 10591                                  	; 31/01/2023
 10592                                  
 10593                                  	; MSDOS 6.0
 10594                                  
 10595                                  ;	Bugbug:	MULT_SHELL_GET no longer used?
 10596                                  
 10597 00000257 06                      	push	es			;AN000; save ES
 10598 00000258 1E                      	push	ds			;AN000; save DS
 10599                                  	;mov	ax,mult_shell_get	;AN000; check to see if SHELL has command
 10600                                  	; 05/02/2023
 10601 00000259 B80219                  	mov	ax,1902h
 10602 0000025C 8E06[4902]              	mov	es,[Batch]		;AN000; get batch segment
 10603                                  	;mov	di,20h
 10604 00000260 BF2000                  	mov	di,BATCHSEGMENT.BatFile	;AN000; get batch file name
 10605 00000263 0E                      	push	cs			;AN000; get local segment to DS
 10606 00000264 1F                      	pop	ds			;AN000;
 10607                                  	;mov	dx,offset trangroup:combuf ;AN000; pass communications buffer
 10608 00000265 BA[C29A]                	mov	dx,COMBUF
 10609 00000268 CD2F                    	int	2Fh			;AN000; call the shell
 10610                                  		; - Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE
 10611                                  		; ES:DI -> ASCIZ full filename of current batch file, with at least the
 10612                                  		; final filename element uppercased
 10613                                  		; DS:DX -> buffer for results
 10614                                  	;cmp	al,0FFh
 10615 0000026A 3CFF                    	cmp	al,shell_action		;AN000; does shell have a commmand?
 10616 0000026C 1F                      	pop	ds			;AN000; restore DS
 10617 0000026D 07                      	pop	es			;AN000; restore ES
 10618 0000026E 7424                    	jz	short JDOCOM1		;AN000; yes - go process command
 10619                                  
 10620                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10621 00000270 1E                      	push	ds
 10622 00000271 E80E04                  	call	READBAT			; Continue BATCH
 10623 00000274 1F                      	pop	ds
 10624 00000275 C606[B402]00            	mov	byte [NullFlag],0	;G reset no command flag
 10625 0000027A F706[4902]FFFF          	test	word [Batch],0FFFFh
 10626 00000280 7512                    	jnz	short JDOCOM1		;G if batch still in progress continue
 10627 00000282 8B1E[B202]              	mov	bx,[Next_Batch]
 10628                                  	; 31/01/2023
 10629 00000286 09DB                    	or	bx,bx
 10630                                  	;cmp	bx,0			;G see if there is a new batch file
 10631 00000288 740A                    	jz	short JDOCOM1		;G no - go do command
 10632 0000028A 891E[4902]              	mov	[Batch],bx		;G get segment of next batch file
 10633 0000028E C706[B202]0000          	mov	word [Next_Batch],0	;G reset next batch
 10634                                  JDOCOM1:
 10635 00000294 0E                      	push	cs
 10636 00000295 1F                      	pop	ds
 10637                                  	;jmp	short DOCOM1
 10638                                  	; 07/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 10639 00000296 EB5D                    	jmp	short DOCOM0
 10640                                  ISNOBAT:
 10641 00000298 833E[A502]00            	cmp	word [SingleCom],0
 10642 0000029D 741D                    	jz	short REGCOM
 10643                                  	; 07/06/2023 - MSDOS 6.22 COMMAND.COM
 10644 0000029F 8B36[A302]              	mov	si,[SemiPermCom] ;  MSDOS 6.0
 10645                                  	;mov	si,0FFFFh 	 ;  MSDOS 3.3 & MSDOS 5.0
 10646 000002A3 8736[A502]              	xchg	si,[SingleCom]
 10647 000002A7 BF[C49A]                	mov	di,COMBUF+2
 10648 000002AA 31C9                    	xor	cx,cx
 10649                                  SINGLELOOP:
 10650 000002AC AC                      	lodsb
 10651 000002AD AA                      	stosb
 10652 000002AE 41                      	inc	cx
 10653 000002AF 3C0D                    	cmp	al,0Dh
 10654 000002B1 75F9                    	jnz	short SINGLELOOP
 10655 000002B3 49                      	dec	cx
 10656 000002B4 0E                      	push	cs
 10657 000002B5 1F                      	pop	ds
 10658 000002B6 880E[C39A]              	mov	[COMBUF+1],cl
 10659                                  
 10660                                  ; do NOT issue a trailing CRLF...
 10661                                  
 10662                                  	;jmp	short DOCOM1
 10663                                  	; 07/06/2023
 10664                                  	; MSDOS 6.22 COMMAND.COM
 10665 000002BA EB39                    	jmp	short DOCOM0
 10666                                  
 10667                                  	;nop
 10668                                  
 10669                                  	; 31/01/2023 - Retro DOS v4.0 COMMAND.COM
 10670                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:02A6h
 10671                                  
 10672                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10673                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02BBh
 10674                                  
 10675                                  ; We have a normal command.  
 10676                                  ; Printers are a bizarre quantity. Sometimes they are a stream and
 10677                                  ; sometimes they aren't. At this point, we automatically close all spool
 10678                                  ; files and turn on truncation mode.
 10679                                  
 10680                                  REGCOM:
 10681                                  	;mov	ax,(ServerCall shl 8) + 9
 10682                                  	; 31/01/2023
 10683 000002BC B8095D                  	mov	ax,5D09h
 10684                                  	;mov	ax,(SERVERCALL<<8)+9
 10685 000002BF CD21                    	int	21h	; DOS -	3.1+ internal -	FLUSH REDIRECTED PRINTER OUTPUT
 10686                                  	;mov	ax,(ServerCall shl 8) + 8
 10687 000002C1 B8085D                  	mov	ax,5D08h
 10688                                  	;mov	ax,(SERVERCALL<<8)+8
 10689 000002C4 B201                    	mov	dl,1
 10690 000002C6 CD21                    	int	21h	; DOS -	3.1+ internal -	SET REDIRECTED PRINTER MODE
 10691                                  			; DL = 00h redirected output is	combined
 10692                                  			;      01h redirected output placed in separate	jobs
 10693                                  			; start	new print job now
 10694 000002C8 0E                      	push	cs
 10695 000002C9 1F                      	pop	ds	; Need local segment to point to buffer
 10696 000002CA BA[3F9A]                	mov	dx,UCOMBUF
 10697                                  
 10698                                  	; MSDOS 6.0
 10699                                  ;	Try to read interactive command line via DOSKey.
 10700                                  ;	If that fails, use DOS Buffered Keyboard Input.
 10701                                  
 10702                                  	; 31/01/2023
 10703 000002CD B81048                  	mov	ax,4810h	; AX = DOSKey Read Line function
 10704 000002D0 CD2F                    	int	2Fh
 10705 000002D2 09C0                    	or	ax,ax
 10706 000002D4 7404                    	jz	short GOTCOM	; DOSKey gave us a command line
 10707                                  
 10708 000002D6 B40A                    	mov	ah,0Ah
 10709                                  	;mov	ah,Std_Con_String_Input	; AH = DOS Buffered Keyboard Input
 10710 000002D8 CD21                    	int	21h	; DOS -	BUFFERED KEYBOARD INPUT
 10711                                  			; DS:DX	-> buffer
 10712                                  GOTCOM:
 10713 000002DA 8A0E[3F9A]              	mov	cl,[UCOMBUF]
 10714 000002DE 30ED                    	xor	ch,ch
 10715 000002E0 83C103                  	add	cx,3
 10716 000002E3 BE[3F9A]                	mov	si,UCOMBUF
 10717 000002E6 BF[C29A]                	mov	di,COMBUF
 10718 000002E9 F3A4                    	rep	movsb		; Transfer it to the cooked buffer
 10719                                  
 10720                                  	; -------------
 10721                                  
 10722                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10723                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02EDh
 10724                                  
 10725 000002EB E88926                  	call	CRLF2
 10726 000002EE 31C0                    	xor	ax,ax
 10727 000002F0 EB06                    	jmp	short DOCOM2
 10728                                  	; -------------
 10729                                  
 10730                                  DOCOM:
 10731 000002F2 E88226                  	call	CRLF2
 10732                                  
 10733                                  	; -------------
 10734                                  
 10735                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10736                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:02F4h
 10737                                  
 10738                                  
 10739                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 10740                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:02F6h
 10741                                  DOCOM0:
 10742 000002F5 B80100                  	mov	ax,1
 10743                                  DOCOM2:
 10744 000002F8 1E                      	push	ds
 10745 000002F9 8E1E[639C]              	mov     ds,[RESSEG]
 10746 000002FD A3[FD01]                	mov	[cox_Y_option],ax
 10747 00000300 1F                      	pop	ds
 10748 00000301 BE[C29A]                	mov	si,COMBUF
 10749 00000304 8A4C01                  	mov	cl,[si+1]
 10750 00000307 30ED                    	xor	ch,ch
 10751 00000309 83C602                  	add	si,2
 10752 0000030C E82501                  	call	get_cox_y_n_opt
 10753 0000030F 7303                    	jnc	short DOCOM1    ; YES answer
 10754                                  	; 07/06/2023
 10755                                  NULLCOMJ:
 10756 00000311 E90201                  	jmp	NULLCOM         ; NO answer
 10757                                  	; -------------
 10758                                  
 10759                                  	; MSDOS 5.0 & MSDOS 6.0 COMMAND.COM
 10760                                  DOCOM1:
 10761 00000314 E8642A                  	call	PRESCAN		; Cook the input buffer
 10762 00000317 7403                    	jz	short NOPIPEPROC
 10763 00000319 E94E2E                  	jmp	PIPEPROCSTRT	; Fire up the pipe
 10764                                  
 10765                                  	; 07/06/2023
 10766                                  ;NULLCOMJ:
 10767                                  	;jmp	NULLCOM
 10768                                  
 10769                                  NOPIPEPROC:
 10770 0000031C E85631                  	call	PARSELINE
 10771 0000031F 730B                    	jnb	short OKPARSE	; user error? or maybe we goofed?
 10772                                  BADPARSE:
 10773 00000321 0E                      	push	cs
 10774 00000322 1F                      	pop	ds
 10775 00000323 BA[FD8F]                	mov	dx,BADNAM_PTR	; 31/01/2023
 10776 00000326 E8F750                  	call	std_eprintf
 10777 00000329 E9D8FD                  	jmp	TCOMMAND
 10778                                  
 10779                                  OKPARSE:
 10780                                  	;test	byte [ARGV0_ARG_FLAGS],2
 10781                                  	;test	byte [ARG+ARGV_ELE.argflags],2 ; wildcard
 10782                                  	; 01/02/2023
 10783 0000032C F606[C29F]02            	test	byte [ARG+ARGV_ELE.argflags],2
 10784 00000331 75EE                    	jnz	short BADPARSE	; ambiguous commands not allowed
 10785                                  	;cmp	word [ARG_ARGVCNT],0  ; there WAS a command, wasn't there?
 10786 00000333 833E[80A2]00            	cmp	word [ARG+ARG_UNIT.argvcnt],0
 10787 00000338 74D7                    	jz	short NULLCOMJ
 10788                                  	;cmp	word [ARGV0_ARGLEN],0 ; probably an unnecessary check...
 10789 0000033A 833E[C59F]00            	cmp	word [ARG+ARGV_ELE.arglen],0
 10790 0000033F 74D0                    	jz	short NULLCOMJ	; guarantees argv[0] at least x<NULL>
 10791                                  
 10792 00000341 BE[C49A]                	mov	si,COMBUF+2
 10793 00000344 BF[2C9D]                	mov	di,IDLEN
 10794                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10795                                  				; Make FCB with blank scan-off
 10796                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10797 00000347 B80129                  	mov	ax,2901h
 10798 0000034A CD21                    	int	21h	; DOS -	PARSE FILENAME
 10799                                  			; DS:SI	-> string to parse
 10800                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10801                                  			; AL = bit mask	to control parsing
 10802                                  	;mov	bx,[ARG_ARGV]
 10803 0000034C 8B1E[C09F]              	mov	bx,[ARG+ARG_UNIT.argv] ; mov bx,[ARG]
 10804 00000350 807F013A                	cmp	byte [bx+1],':'	; was a drive specified?
 10805 00000354 751B                    	jne	short DRVGD	; no, use default of zero...
 10806 00000356 8A17                    	mov	dl,[bx]		; pick-up drive letter
 10807                                  	;mov	dl,[bx+ARGV_ELE.argpointer] ; mov dl,[bx+0]
 10808                                  	;and	dl,~20h
 10809 00000358 80E2DF                  	and	dl,0DFh		; uppercase the sucker
 10810                                  	;sub	dl,[CAPITAL_A]	; convert it to a drive number, A=0
 10811                                  	; 31/01/2023
 10812 0000035B 80EA41                  	sub	dl,'A'
 10813 0000035E 3CFF                    	cmp	al,-1		; See what PARSE said about our drive letter.
 10814 00000360 740C                    	je	short DRVBADJ	; It was invalid.
 10815                                  	;mov	di,[ARGV0_ARGSTARTEL]
 10816 00000362 8B3E[C39F]              	mov	di,[ARG+ARGV_ELE.argstartel]
 10817 00000366 803D00                  	cmp	byte [di],0	; is there actually a command there?
 10818 00000369 7506                    	jne	short DRVGD	; if not, we have:  "d:", "d:\", "d:/"
 10819 0000036B E992FD                  	jmp	SETDRV		; and set drive to new drive spec
 10820                                  DRVBADJ:
 10821 0000036E E9AF28                  	jmp	DRVBAD
 10822                                  DRVGD:
 10823 00000371 8A05                    	mov	al,[di]
 10824 00000373 A2[849C]                	mov	[SPECDRV],al
 10825 00000376 B020                    	mov	al,' '
 10826 00000378 B90900                  	mov	cx,9
 10827 0000037B 47                      	inc	di
 10828 0000037C F2AE                    	repne	scasb		; Count number of letters in command name
 10829 0000037E B008                    	mov	al,8
 10830 00000380 28C8                    	sub	al,cl
 10831 00000382 A2[2C9D]                	mov	[IDLEN],al	; IDLEN is truly the length
 10832 00000385 BF8100                  	mov	di,81h
 10833 00000388 56                      	push	si
 10834 00000389 BE[C49A]                	mov	si,COMBUF+2	; Skip over all leading delims
 10835 0000038C E8F525                  	call	scanoff
 10836                                  
 10837                                  	; 01/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10838                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0356h
 10839                                  
 10840                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10841                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0391h
 10842                                  
 10843                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 10844                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:0393h
 10845                                  
 10846                                  	; MSDOS 6.0
 10847                                  ;SR;
 10848                                  ; We are going to skip over the first char always. The logic is that the
 10849                                  ;command tail can never start from the first character. The code below is 
 10850                                  ;trying to figure out the command tail and copy it to the command line 
 10851                                  ;buffer in the PSP. However, if the first character happens to be a switch
 10852                                  ;character and the user given command line is a full 128 bytes, we try to
 10853                                  ;copy 128 bytes to the PSP while it can take only 127 chars. This extra
 10854                                  ;char overwrites the code and leads to a crash on future commands.
 10855                                  
 10856 0000038F 46                      	inc	si ;  MSDOS 6.0
 10857                                  
 10858                                  DO_SKIPCOM:
 10859 00000390 AC                      	lodsb			; move command line pointer over
 10860 00000391 E8F825                  	call	DELIM		; pathname -- have to do it ourselves
 10861 00000394 740A                    	jz	short DO_SKIPPED ; 'cause parse_file_descriptor is dumb
 10862 00000396 3C0D                    	cmp	al,0Dh		; can't always depend on argv[0].arglen
 10863 00000398 7406                    	jz	short DO_SKIPPED ; to be the same length as the user-
 10864 0000039A 3A06[679C]              	cmp	al,[SWITCHAR]	; specified command string
 10865 0000039E 75F0                    	jnz	short DO_SKIPCOM 
 10866                                  DO_SKIPPED:
 10867 000003A0 4E                      	dec	si
 10868 000003A1 31C9                    	xor	cx,cx
 10869                                  COMTAIL:
 10870 000003A3 AC                      	lodsb
 10871 000003A4 AA                      	stosb			; Move command tail to 80h
 10872 000003A5 3C0D                    	cmp	al,0Dh
 10873 000003A7 E0FA                    	loopne	COMTAIL
 10874 000003A9 4F                      	dec	di
 10875 000003AA 89FD                    	mov	bp,di
 10876 000003AC F6D1                    	not	cl
 10877 000003AE 880E8000                	mov	[80h],cl
 10878 000003B2 5E                      	pop	si
 10879                                  ;-----
 10880                                  ; Some of these comments are sadly at odds with this brave new code.
 10881                                  ;-----
 10882                                  ; If the command has 0 parameters must check here for
 10883                                  ; any switches that might be present.
 10884                                  ; SI -> first character after the command.
 10885                                  
 10886                                  	;mov	di,arg.argv[0].argsw_word
 10887                                  	;mov	di,[ARGV0_ARGSW_WORD]
 10888 000003B3 8B3E[C79F]              	mov	di,[ARG+ARGV_ELE.argsw_word]
 10889 000003B7 893E[7B9C]              	mov	[COMSW],di	; ah yes, the old addressing mode problem...
 10890                                  	;mov	SI,arg.argv[1 * SIZE argv_ele].argpointer  
 10891                                  				; s = argv[1];
 10892                                  	;mov	si,[ARGV1_ARGPOINTER]
 10893 000003BB 8B36[CB9F]              	mov	si,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]
 10894 000003BF 09F6                    	or	si,si		;   if (s == NULL)
 10895 000003C1 7502                    	jnz	short DOPARSE	;	s = bp; (buffer end)
 10896 000003C3 89EE                    	mov	si,bp
 10897                                  DOPARSE:
 10898 000003C5 BF5C00                  	mov	di,FCB ; 5Ch
 10899                                  	;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10900                                  	; 01/02/2023
 10901 000003C8 B80129                  	mov	ax,2901h
 10902                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10903 000003CB CD21                    	int	21h	; DOS -	PARSE FILENAME
 10904                                  			; DS:SI	-> string to parse
 10905                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10906                                  			; AL = bit mask	to control parsing
 10907 000003CD A2[789C]                	mov	[PARM1],al	; Save result of parse
 10908                                  	;mov	di,arg.argv[1*SIZE argv_ele].argsw_word
 10909                                  	;mov	di,[ARGV1_ARGSW_WORD]
 10910 000003D0 8B3E[D29F]              	mov	di,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]
 10911 000003D4 893E[7D9C]              	mov	[ARG1S],di
 10912                                  	;mov	si,arg.argv[2*SIZE argv_ele].argpointer    
 10913                                  				; s = argv[2];
 10914                                  	;mov	si,[ARGV2_ARGPOINTER]
 10915 000003D8 8B36[D69F]              	mov	si,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argpointer]
 10916 000003DC 09F6                    	or	si,si		; if (s == NULL)
 10917 000003DE 7502                    	jnz	short DOPARSE2
 10918 000003E0 89EE                    	mov	si,bp		;     s = bp; (buffer end)
 10919                                  DOPARSE2:			
 10920 000003E2 BF6C00                  	mov	di,FCB+10h ; 6Ch
 10921                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
 10922 000003E5 B80129                  	mov	ax,2901h
 10923                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
 10924 000003E8 CD21                    	int	21h	; DOS -	PARSE FILENAME
 10925                                  			; DS:SI	-> string to parse
 10926                                  			; ES:DI	-> buffer to fill with unopened	FCB
 10927                                  			; AL = bit mask	to control parsing
 10928 000003EA A2[7A9C]                	mov	[PARM2],al	; Save result
 10929                                  	;mov	di,[ARGV2_ARGSW_WORD]
 10930                                  	;mov	di,arg.argv[2*SIZE argv_ele].argsw_word
 10931 000003ED 8B3E[DD9F]              	mov	di,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]
 10932 000003F1 893E[7F9C]              	mov	[ARG2S],di
 10933                                  	;mov	di,[ARGV0_ARGSW_WORD]
 10934                                  	;mov	di,arg.argv[0].argsw_word
 10935 000003F5 8B3E[C79F]              	mov	di,[ARG+ARGV_ELE.argsw_word]
 10936 000003F9 F7D7                    	not	di		; ARGTS doesn't include the flags
 10937                                  	;and	di,[ARG_ARGSWINFO] ; from COMSW...
 10938                                  	;and	di,arg.argswinfo	
 10939 000003FB 233E[82A2]              	and	di,[ARG+ARG_UNIT.argswinfo]
 10940 000003FF 893E[819C]              	mov	[ARGTS],di
 10941                                  
 10942 00000403 A0[2C9D]                	mov	al,[IDLEN]
 10943 00000406 8A16[849C]              	mov	dl,[SPECDRV]
 10944 0000040A 08D2                    	or	dl,dl		; if a drive was specified...
 10945 0000040C 7505                    	jnz	short EXTERNALJ1 ; it MUST be external, by this time
 10946 0000040E FEC8                    	dec	al		; (I don't know why -- old code did it)
 10947 00000410 E96027                  	jmp	FNDCOM		; otherwise, check internal com table
 10948                                  EXTERNALJ1:
 10949 00000413 E96228                  	jmp	EXTERNAL
 10950                                  NULLCOM:
 10951 00000416 8E1E[639C]              	mov	ds,[RESSEG]
 10952 0000041A F706[4902]FFFF          	test	word [Batch],0FFFFh ; -1 ;G Are we in a batch file?
 10953 00000420 7405                    	jz	short NOSETFLAG	  ;G only set flag if in batch
 10954 00000422 C606[B402]01            	mov	byte [NullFlag],1 ;G set flag to indicate no command
 10955                                  	;mov	byte [NullFlag],nullcommand ; 1
 10956                                  NOSETFLAG:
 10957 00000427 833E[A502]FF            	cmp	word [SingleCom],0FFFFh ; -1
 10958 0000042C 7403                    	je	short EXITJ
 10959 0000042E E9B1FD                  	jmp	GETCOM
 10960                                  EXITJ:
 10961 00000431 E9F5FC                  	jmp	_$EXITPREP
 10962                                  
 10963                                  ; 07/06/2023
 10964                                  ; ---------------------------------------------------------------------------
 10965                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 10966                                  ; -----------------------------------------
 10967                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 10968                                  ; ---------------------------------------------------------------------------
 10969                                  
 10970                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 10971                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0436h
 10972                                  
 10973                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 10974                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:0438h
 10975                                  get_cox_y_n_opt:
 10976 00000434 E339                    	jcxz	ccydp4		; empty	input buffer
 10977                                  ccydp0:
 10978 00000436 803C0D                  	cmp	byte [si],0Dh
 10979 00000439 7434                    	je	short ccydp4
 10980 0000043B 803C0A                  	cmp	byte [si],0Ah
 10981 0000043E 742F                    	je	short ccydp4
 10982 00000440 06                      	push	es
 10983 00000441 8E06[639C]              	mov	es,[RESSEG]
 10984 00000445 26A0[5A04]              	mov	al,[es:Y_Flag]
 10985 00000449 A810                    	test	al,10h		; bit 1	= 1 -> Y/N answer is needed
 10986 0000044B 7421                    	jz	short ccydp3 ; cf=0 ; 07/06/2023
 10987 0000044D 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],1 ; (in) Batch file ?
 10988 00000453 7419                    	je	short ccydp3	; yes, don't check for ESCAPE
 10989 00000455 A840                    	test	al,40h		; ESCAPE status
 10990                                  				; (bit 4 is zero if Y/N	is escaped)
 10991 00000457 7417                    	jz	short ccydp5
 10992                                  ccydp1:
 10993 00000459 26F706[4902]FFFF        	test	word [es:Batch],0FFFFh
 10994 00000460 740B                    	jz	short ccydp2
 10995 00000462 268E06[4902]            	mov	es,[es:Batch]
 10996                                  	;mov	byte [es:2],1 ; [es:BATCHSEGMENT.BatchEOF]
 10997 00000467 26C606020001            	mov	byte [es:BATCHSEGMENT.BatchEOF],1
 10998                                  ccydp2:
 10999 0000046D F9                      	stc
 11000                                  ccydp3:		; 07/06/2023 ; cf = 0
 11001 0000046E 07                      	pop	es
 11002                                  ccydp4:		; 07/06/2023 ; cf = 0
 11003 0000046F C3                      	retn
 11004                                  
 11005                                  ;ccydp3:
 11006                                  ;	pop	es
 11007                                  ;ccydp4:
 11008                                  ;	clc
 11009                                  ;	retn
 11010                                  
 11011                                  ccydp5:
 11012 00000470 89F2                    	mov	dx,si
 11013 00000472 BB0200                  	mov	bx,2
 11014 00000475 B440                    	mov	ah,40h
 11015 00000477 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 11016                                  			; BX = file handle, CX = number	of bytes to write
 11017                                  			; DS:DX -> buffer
 11018 00000479 BA[9892]                	mov	dx,cox_Y_quest_ptr ; msg number	pointer	of ' [Y/N]?'
 11019                                  				   ; (is 1082)
 11020 0000047C E8A14F                  	call	std_eprintf
 11021 0000047F 1E                      	push	ds
 11022 00000480 B83B04                  	mov	ax,1083	; cox_Y_answer number (overwrite Y/N answer letter)
 11023 00000483 B6FF                    	mov	dh,0FFh		; utility_msg_class
 11024 00000485 E88350                  	call	TSYSGETMSG
 11025                                  	;mov	cx,'NY' ; MASM word format
 11026                                  	; NASM word format
 11027 00000488 B9594E                  	mov	cx,'YN'        ; 'YN' Yes/No (CL=Y)
 11028 0000048B 7202                    	jc	short ccydp6
 11029 0000048D 8B0C                    	mov	cx,[si]
 11030                                  ccydp6:
 11031 0000048F 1F                      	pop	ds
 11032                                  ccydp7:
 11033 00000490 B408                    	mov	ah,8
 11034 00000492 CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 11035                                  			; Return: AL = character
 11036 00000494 84C0                    	test	al,al
 11037 00000496 7510                    	jnz	short ccydp8
 11038 00000498 B408                    	mov	ah,8
 11039 0000049A CD21                    	int	21h	; DOS -	KEYBOARD INPUT,	NO ECHO
 11040                                  			; Return: AL = character
 11041 0000049C 3C3F                    	cmp	al,'?'
 11042 0000049E 75F0                    	jne	short ccydp7
 11043 000004A0 26800E[5A04]40          	or	byte [es:Y_Flag],40h ; bit 4, question flag
 11044 000004A6 EBB1                    	jmp	short ccydp1
 11045                                  ccydp8:
 11046 000004A8 3C1B                    	cmp	al,1Bh		; ESCAPE ?
 11047 000004AA 7509                    	jne	short ccydp9
 11048 000004AC 268026[5A04]EF          	and	byte [es:Y_Flag],0EFh ; (ESCAPE) Clear bit 4 ; ~10h
 11049                                  	;jmp	short ccydp12
 11050                                  	; 07/06/2023
 11051 000004B2 9C                      	pushf
 11052 000004B3 EB18                    	jmp	short ccydp12
 11053                                  ccydp9:
 11054                                  	; 25/07/2024 - PCDOS 7.1 COMMAND.COM
 11055 000004B5 3C41                    	cmp     al,41h ; 'A'
 11056 000004B7 7202                    	jb      short ccydp13
 11057                                  	;
 11058 000004B9 24DF                    	and	al,0DFh		; uppercase
 11059                                  ccydp13:	; 25/07/2024
 11060 000004BB 38E8                    	cmp	al,ch		; NO character (N)
 11061 000004BD 7503                    	jne	short ccydp10
 11062 000004BF F9                      	stc
 11063 000004C0 EB04                    	jmp	short ccydp11	; cf = 1 -> overwrite NO answer
 11064                                  ccydp10:
 11065 000004C2 38C8                    	cmp	al,cl		; YES character	(Y)
 11066 000004C4 75CA                    	jne	short ccydp7
 11067                                  ccydp11:
 11068 000004C6 9C                      	pushf			; cf = 0 -> overwrite YES answer
 11069 000004C7 88C2                    	mov	dl,al
 11070 000004C9 B402                    	mov	ah,2
 11071 000004CB CD21                    	int	21h	; DOS -	DISPLAY	OUTPUT
 11072                                  			; DL = character to send to standard output
 11073                                  	; 07/06/2023
 11074                                  	;popf
 11075                                  ccydp12:
 11076                                  	;pushf
 11077 000004CD E8A724                  	call	CRLF2
 11078 000004D0 9D                      	popf
 11079 000004D1 07                      	pop	es
 11080 000004D2 C3                      	retn
 11081                                  
 11082                                  ;============================================================================
 11083                                  ; MSHALO.ASM, MSDOS 6.0, 1991
 11084                                  ;============================================================================
 11085                                  ; 12/10/2018 - Retro DOS v3.0
 11086                                  
 11087                                  ; 05/02/2023 - Retro DOS v5.0 (& v4.1) COMMAND.COM
 11088                                  
 11089                                  ;	SCCSID = @(#)ibmhalo.asm	1.1 85/04/10
 11090                                  ;   On 2K (800h) boundaries beginning at address C0000h and ending at EF800h
 11091                                  ;   there is a header that describes a block of rom program.  This header
 11092                                  ;   contains information needed to initialize a module and to provide PCDOS
 11093                                  ;   with a set of reserved names for execution.
 11094                                  ;
 11095                                  ;   This header has the following format:
 11096                                  ;
 11097                                  ;   rom_header	STRUC
 11098                                  ;	Signature1  DB	55h
 11099                                  ;	Signature2  DB	AAh
 11100                                  ;	rom_length  DB	?		; number of 512 byte pieces
 11101                                  ;	init_jmp    DB	3 dup (?)
 11102                                  ;	name_list   name_struc <>
 11103                                  ;   rom_header	ENDS
 11104                                  ;
 11105                                  ;   name_struc	STRUC
 11106                                  ;	name_len    DB	?
 11107                                  ;	name_text   DB	? DUP (?)
 11108                                  ;	name_jmp    DB	3 DUP (?)
 11109                                  ;   name_struc	ENDS
 11110                                  ;
 11111                                  ;   The name list is a list of names that are reserved by a particular section
 11112                                  ;   of a module.  This list of names is terminated by a null name (length
 11113                                  ;   is zero).
 11114                                  ;
 11115                                  ;   Consider now, the PCDOS action when a user enters a command:
 11116                                  ;
 11117                                  ;	COMMAND.COM has control.
 11118                                  ;	o   If location FFFFEh has FDh then
 11119                                  ;	o	Start scanning at C0000h, every 800h for a byte 55h followed
 11120                                  ;		    by AAh, stop scan if we get above or = F0000H
 11121                                  ;	o	When we've found one, compare the name entered by the user
 11122                                  ;		    with the one found in the rom.  If we have a match, then
 11123                                  ;		    set up the environment for execution and do a long jump
 11124                                  ;		    to the near jump after the found name.
 11125                                  ;	o	If no more names in the list, then continue scanning the module
 11126                                  ;		    for more 55h followed by AAh.
 11127                                  ;	o   We get to this point only if there is no matching name in the
 11128                                  ;		rom.  We now look on disk for the command.
 11129                                  ;
 11130                                  ;   This gives us the flexibility to execute any rom cartridge without having
 11131                                  ;   to 'hard-code' the name of the cartridge into PCDOS.  Rom modules that
 11132                                  ;   want to be invisible to the DOS should not have any names in their lists
 11133                                  ;   (i.e. they have a single null name).
 11134                                  ;
 11135                                  ;   Consider a new release of BASIC, say, that patches bugs in the ROM version.
 11136                                  ;   Clearly this version will be available on disk.  How does a user actually
 11137                                  ;   invoke this new BASIC??  He cannot call it BASIC on the disk because the
 11138                                  ;   EXEC loader will execute the ROM before it even looks at the disk!	Only
 11139                                  ;   solution:
 11140                                  ;
 11141                                  ;   o	Keep things consistent and force the user to have his software named
 11142                                  ;	differently from the ROM names (BASIC1, BASIC2, etc).
 11143                                  
 11144                                  struc ROM_HEADER
 11145 00000000 ??                          .signature1: resb 1
 11146 00000001 ??                          .signature2: resb 1
 11147 00000002 ??                          .rom_length: resb 1
 11148 00000003 ??????                      .init_jmp:	 resb 3
 11149 00000006 ??                          .name_list:	 resb 1
 11150                                      .size:
 11151                                  endstruc
 11152                                  
 11153                                  struc NAME_STRUC
 11154 00000000 ??                          .name_len:	resb 1
 11155 00000001 ??                          .name_text:	resb 1
 11156 00000002 ??????                      .name_jmp:	resb 3
 11157                                      .size:	
 11158                                  endstruc
 11159                                  
 11160                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 03D1h
 11161                                  
 11162                                  ; =============== S U B	R O U T	I N E =======================================
 11163                                  
 11164                                  ;ASSUME	CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
 11165                                  
 11166                                  ; 05/02/2023
 11167                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:03FBh
 11168                                  
 11169                                  ; 07/06/2023
 11170                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:04D5h
 11171                                  
 11172                                  ; 25/07/2024
 11173                                  ; PCDOS 7.1 COMMAND.COM - TRANGROUP:04DBh
 11174                                  
 11175                                  ; Check for IBM PC Jr rom cartrides. DS:DX is a pointer to name
 11176                                  
 11177                                  ROM_SCAN:
 11178 000004D3 06                      	push	es
 11179 000004D4 56                      	push	si
 11180 000004D5 57                      	push	di
 11181 000004D6 51                      	push	cx
 11182 000004D7 50                      	push	ax
 11183 000004D8 53                      	push	bx
 11184                                  
 11185                                  	; check for PC Jr signature in rom
 11186                                  
 11187 000004D9 B800F0                  	mov	ax,0F000h
 11188 000004DC 8EC0                    	mov	es,ax
 11189 000004DE 26803EFEFFFD            	cmp	byte [es:0FFFEh],0FDh
 11190 000004E4 7408                    	je	short SCAN_IT
 11191                                  NO_ROM:
 11192 000004E6 F8                      	clc
 11193                                  ROM_RET:
 11194 000004E7 5B                      	pop	bx
 11195 000004E8 58                      	pop	ax
 11196 000004E9 59                      	pop	cx
 11197 000004EA 5F                      	pop	di
 11198 000004EB 5E                      	pop	si
 11199 000004EC 07                      	pop	es
 11200 000004ED C3                      	retn
 11201                                  
 11202                                  	; start scanning at C000h
 11203                                  SCAN_IT:
 11204 000004EE B800C0                  	mov	ax,0C000h
 11205                                  SCAN_ONE:
 11206 000004F1 8EC0                    	mov	es,ax
 11207 000004F3 31FF                    	xor	di,di
 11208                                  
 11209                                  	; check for a valid header
 11210                                  SCAN_MODULE:
 11211 000004F5 26813D55AA              	cmp	word [es:di],0AA55h
 11212 000004FA 740A                    	je	short SCAN_LIST
 11213 000004FC 058000                  	add	ax,80h
 11214                                  SCAN_END:
 11215 000004FF 3D00F0                  	cmp	ax,0F000h
 11216 00000502 72ED                    	jb	short SCAN_ONE
 11217 00000504 EBE0                    	jmp	short NO_ROM
 11218                                  
 11219                                  	; trundle down list of names
 11220                                  SCAN_LIST:
 11221                                  	;mov	bl,[es:di+2]	; number of 512-byte jobbers
 11222 00000506 268A5D02                	mov	bl,[es:di+ROM_HEADER.rom_length]
 11223 0000050A 30FF                    	xor	bh,bh		; nothing in the high byte
 11224 0000050C D1E3                    	shl	bx,1
 11225 0000050E D1E3                    	shl	bx,1		; number of paragraphs
 11226 00000510 83C37F                  	add	bx,7Fh
 11227 00000513 83E380                  	and	bx,0FF80h	; round to 2k
 11228                                  	;mov	di,6
 11229                                  	; 05/05/2023
 11230 00000516 BF0600                  	mov	di,ROM_HEADER.name_list
 11231                                  	;nop
 11232                                  SCAN_NAME:
 11233 00000519 268A0D                  	mov	cl,[es:di]	; length of name
 11234 0000051C 47                      	inc	di		; point to name
 11235 0000051D 30ED                    	xor	ch,ch
 11236 0000051F 09C9                    	or	cx,cx		; zero length name
 11237 00000521 7504                    	jnz	short SCAN_TEST	; nope... compare
 11238 00000523 01D8                    	add	ax,bx		; yep, skip to next block
 11239 00000525 EBD8                    	jmp	short SCAN_END
 11240                                  
 11241                                  	; compare a single name
 11242                                  SCAN_TEST:
 11243 00000527 89D6                    	mov	si,dx
 11244 00000529 46                      	inc	si
 11245 0000052A F3A6                    	repe	cmpsb		 ; compare name
 11246 0000052C 7407                    	jz	short SCAN_FOUND ; success!
 11247                                  SCAN_NEXT:
 11248 0000052E 01CF                    	add	di,cx		; failure, next name piece
 11249 00000530 83C703                  	add	di,3
 11250 00000533 EBE4                    	jmp	short SCAN_NAME
 11251                                  
 11252                                  	; found a name. save entry location
 11253                                  SCAN_FOUND:	
 11254 00000535 803C3F                  	cmp	byte [si],'?'
 11255 00000538 7405                    	je	short SCAN_SAVE
 11256 0000053A 803C20                  	cmp	byte [si],' '
 11257 0000053D 75EF                    	jne	short SCAN_NEXT
 11258                                  SCAN_SAVE:
 11259 0000053F 2E8C06[279E]            	mov	[cs:ROM_CS],es
 11260 00000544 2E893E[259E]            	mov	[cs:ROM_IP],di
 11261 00000549 F9                      	stc
 11262 0000054A EB9B                    	jmp	short ROM_RET
 11263                                  
 11264                                  ; ---------------------------------------------------------------------------
 11265                                  
 11266                                  ; execute a rom-placed body of code. allocate largest block
 11267                                  
 11268                                  ROM_EXEC:
 11269 0000054C BBFFFF                  	mov	bx,0FFFFh
 11270                                  	; 05/02/2023
 11271 0000054F B448                    	mov	ah,48h
 11272                                  	;mov	ah,ALLOC ; 48h
 11273 00000551 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11274                                  			; BX = number of 16-byte paragraphs desired
 11275 00000553 B448                    	mov	ah,48h
 11276                                  	;mov	ah,ALLOC ; 48h
 11277 00000555 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11278                                  			; BX = number of 16-byte paragraphs desired
 11279 00000557 53                      	push	bx
 11280 00000558 50                      	push	ax
 11281                                  
 11282                                  	; set terminate addresses
 11283                                  
 11284 00000559 B82225                  	mov	ax,2522h
 11285                                  	;;mov	ax,(set_interrupt_vector SHL 8) + int_terminate
 11286                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE
 11287 0000055C 1E                      	push	ds
 11288 0000055D 2E8E1E[639C]            	mov	ds,[cs:RESSEG]
 11289                                  	;mov	dx,offset RESGROUP:EXEC_WAIT
 11290                                  	;mov	dx,131h ; MSDOS 3.3
 11291                                  	; 05/02/2023
 11292                                  	;mov	dx,0D6Bh ; MSDOS 5.0
 11293 00000562 BA[390D]                	mov	dx,Exec_Wait
 11294 00000565 CD21                    	int	21h	; DOS -	SET INTERRUPT VECTOR
 11295                                  			; AL = interrupt number
 11296                                  			; DS:DX	= new vector to	be used	for specified interrupt
 11297 00000567 8CDA                    	mov	dx,ds
 11298 00000569 8EC2                    	mov	es,dx
 11299 0000056B 1F                      	pop	ds
 11300                                  		
 11301                                  	; and create program header and dup all jfn's
 11302                                  
 11303 0000056C 5A                      	pop	dx
 11304 0000056D B455                    	mov	ah,55h
 11305                                  	;mov	ah,DUP_PDB ; 55h
 11306 0000056F CD21                    	int	21h	; DOS -	2+ internal - CREATE PSP
 11307                                  			; DX = segment number at which to set up PSP
 11308                                  			; SI = (DOS 3+)	value to place in memory size field at DX:[0002h]
 11309                                  		
 11310                                  	; set up dma address
 11311                                  
 11312 00000571 8EDA                    	mov	ds,dx
 11313 00000573 BA8000                  	mov	dx,80h
 11314 00000576 B41A                    	mov	ah,1Ah
 11315                                  	;mov	ah,Set_DMA ; 1Ah
 11316 00000578 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 11317                                  			; DS:DX	-> disk	transfer buffer
 11318                                  
 11319                                  	; copy in environment info
 11320                                  
 11321 0000057A 26A1[3A04]              	mov	ax,[es:EnvirSeg]
 11322                                  	;mov	[2Ch],ax
 11323 0000057E A32C00                  	mov	[PDB.ENVIRON],ax
 11324                                  
 11325                                  	; set up correct size of block
 11326                                  
 11327 00000581 5B                      	pop	bx		; BX has size, DS has segment
 11328 00000582 8CDA                    	mov	dx,ds
 11329 00000584 01DA                    	add	dx,bx
 11330                                  	;mov	[2],dx
 11331 00000586 89160200                	mov	[PDB.BLOCK_LEN],dx
 11332                                  
 11333                                  	; change ownership of block
 11334                                  
 11335 0000058A 8CDA                    	mov	dx,ds
 11336 0000058C 4A                      	dec	dx
 11337 0000058D 8EDA                    	mov	ds,dx
 11338 0000058F 42                      	inc	dx	
 11339                                  	;mov	[1],dx
 11340 00000590 89160100                	mov	[ARENA.owner],dx
 11341 00000594 8EDA                    	mov	ds,dx
 11342                                  
 11343                                  	; set up correct stack
 11344                                  
 11345 00000596 81FB0010                	cmp	bx,1000h
 11346 0000059A 7202                    	jb	short GOT_STACK
 11347 0000059C 31DB                    	xor	bx,bx
 11348                                  GOT_STACK:
 11349 0000059E B104                    	mov	cl,4
 11350 000005A0 D3E3                    	shl	bx,cl
 11351 000005A2 8CDA                    	mov	dx,ds
 11352 000005A4 8ED2                    	mov	ss,dx
 11353 000005A6 89DC                    	mov	sp,bx
 11354 000005A8 31C0                    	xor	ax,ax
 11355 000005AA 50                      	push	ax
 11356                                  
 11357                                  	; set up initial registers and go to the guy
 11358                                  
 11359 000005AB F7D0                    	not	ax
 11360 000005AD 2EFF36[279E]            	push	word [cs:ROM_CS]
 11361 000005B2 2EFF36[259E]            	push	word [cs:ROM_IP]
 11362 000005B7 8EC2                    	mov	es,dx
 11363 000005B9 CB                      	retf	; far return
 11364                                  
 11365                                  ; 25/07/2024 - Retro DOS v5.0
 11366                                  ; ---------------------------------------------------------------------------
 11367                                  ; PCDOS 7.1 COMMAND.COM - TRANGROUP:05C2h
 11368                                  
 11369                                  ; =============== S U B	R O U T	I N E =======================================
 11370                                  
 11371                                  int_21h_indirect:
 11372 000005BA 1E                      	push	ds		; (*)
 11373 000005BB 9C                      	pushf			; (**)
 11374 000005BC 53                      	push	bx
 11375 000005BD 31DB                    	xor	bx, bx
 11376 000005BF 8EDB                    	mov	ds, bx		; 0
 11377 000005C1 5B                      	pop	bx
 11378 000005C2 0E                      	push	cs		; simulate INT 21h
 11379                                  				; stack: ip, cs, flags (**)
 11380 000005C3 E80300                  	call	INT21h_fcall
 11381 000005C6 C20200                  	retn	2		; discard ds (*) on top	of stack
 11382                                  
 11383                                  ; =============== S U B	R O U T	I N E =======================================
 11384                                  
 11385                                  INT21h_fcall:
 11386                                  	;push	word ptr ds:86h
 11387 000005C9 FF368600                	push	word [(4*21h)+2] ; INT 21h segment
 11388                                  	;push	word ptr ds:84h
 11389 000005CD FF368400                	push	word [4*21h]	; INT 21h offset
 11390 000005D1 55                      	push	bp
 11391 000005D2 89E5                    	mov	bp,sp
 11392 000005D4 8E5E0C                  	mov	ds,[bp+12]	; DS (*) in stack
 11393 000005D7 FF760E                  	push	word [bp+14]	; return addr of the caller of INT21h_fcall
 11394 000005DA 8F460C                  	pop	word [bp+12]	; return address from INT 21h
 11395 000005DD 5D                      	pop	bp
 11396 000005DE FA                      	cli
 11397 000005DF CB                      	retf
 11398                                  
 11399                                  ; =============== S U B	R O U T	I N E =======================================
 11400                                  
 11401                                  int_2Fh_indirect:
 11402 000005E0 1E                      	push	ds
 11403 000005E1 53                      	push	bx
 11404 000005E2 31DB                    	xor	bx,bx
 11405 000005E4 8EDB                    	mov	ds,bx
 11406 000005E6 5B                      	pop	bx
 11407 000005E7 9C                      	pushf
 11408 000005E8 FA                      	cli
 11409                                  	;call	dword ptr ds:0BCh
 11410 000005E9 FF1EBC00                	call	far [4*2Fh]	;  INT 2Fh handler
 11411 000005ED 1F                      	pop	ds
 11412 000005EE C3                      	retn
 11413                                  
 11414                                  ; ---------------------------------------------------------------------------
 11415                                  
 11416                                  ;============================================================================
 11417                                  ; TBATCH.ASM, MSDOS 6.0, 1991
 11418                                  ;============================================================================
 11419                                  ; 12/10/2018 - Retro DOS v3.0
 11420                                  
 11421                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 04B9h
 11422                                  
 11423                                  ; =============== S U B	R O U T	I N E =======================================
 11424                                  
 11425                                  ;Break	<PromptBat - Open or wait for batch file>
 11426                                  
 11427                                  ; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11428                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:04E2h
 11429                                  
 11430                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11431                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:05BCh
 11432                                  
 11433                                  ; Open the batch file. If we cannot find the batch file. If the media is
 11434                                  ; changeable, we prompt for the change. Otherwise, we terminate the batch
 11435                                  ; file. Leave segment registers alone.
 11436                                  
 11437                                  PROMPTBAT:
 11438 000005EF E85308                  	call	BATOPEN
 11439 000005F2 7201                    	jc	short PROMPTBAT1
 11440 000005F4 C3                      	retn
 11441                                  PROMPTBAT1:
 11442                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11443                                  	; MSDOS 6.0 COMMAND.COM
 11444 000005F5 83FA02                  	cmp	dx,ERROR_FILE_NOT_FOUND ;AN022; Ask for diskette if file not found
 11445 000005F8 740A                    	je	short BAT_REMCHECK	;AN022;
 11446 000005FA 83FA03                  	cmp	dx,ERROR_PATH_NOT_FOUND ;AN022; Ask for diskette if path not found
 11447 000005FD 7405                    	je	short BAT_REMCHECK	;AN022; Otherwise, issue message and exit
 11448                                  	;invoke	output_batch_name	;AN022; set up batch name in bwdbuf
 11449 000005FF E83500                  	call	output_batch_name
 11450 00000602 EB13                    	jmp	short BATDIE		;AN022;
 11451                                  
 11452                                  	; 05/02/2023
 11453                                  	; MSDOS 3.3 COMMAND.COM
 11454                                  	;cmp	dx,ACCDENPTR
 11455                                  	;jz	short BATDIE
 11456                                  
 11457                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11458                                  BAT_REMCHECK:				;AN022; Go see if media is removable
 11459 00000604 2EFF1E[6D9C]            	call	far [cs:RCH_ADDR]	; DX has error number
 11460 00000609 7417                    	jz	short ASKFORBAT		; Media is removable
 11461                                  
 11462                                  ; The media is not changeable. Turn everything off.
 11463                                  
 11464 0000060B E84B0B                  	call	FOROFF
 11465 0000060E E8942D                  	call	PipeOff
 11466 00000611 A2[AA02]                	mov	[IfFlag],al	; No If in progress.	
 11467 00000614 BA[F78F]                	mov	dx,BADBAT_PTR
 11468                                  BATDIE:
 11469 00000617 E8F803                  	call	BATCHOFF
 11470 0000061A 0E                      	push	cs
 11471 0000061B 1F                      	pop	ds
 11472                                  	;invoke	std_eprintf	;AC022; display message ;  MSDOS 6.0
 11473                                  	; 05/02/2023
 11474 0000061C E8014E                  	call	std_eprintf	; MSDOS 6.0
 11475                                  	;call	STD_PRINTF	; MSDOS 3.3
 11476                                  
 11477                                  ; TCOMMAND resets the stack. This is the equivalent of a non-local goto.
 11478                                  
 11479 0000061F E9E2FA                  	jmp	TCOMMAND
 11480                                  
 11481                                  ; Ask the user to reinsert the batch file
 11482                                  
 11483                                  ASKFORBAT:
 11484 00000622 1E                      	push	ds
 11485 00000623 0E                      	push	cs
 11486 00000624 1F                      	pop	ds
 11487                                  
 11488                                  	; MSDOS 6.0
 11489                                  	;mov	dx,offset TRANGROUP:NEEDBAT_ptr  ;AN022;
 11490 00000625 BA[FA8F]                	mov	dx,NEEDBAT_PTR
 11491                                  	;invoke	std_eprintf	 	;Prompt for batch file on stderr
 11492                                  	; 05/02/2023
 11493 00000628 E8F54D                  	call	std_eprintf
 11494                                  	;mov	dx,offset trangroup:pausemes_ptr
 11495 0000062B BA[A790]                	mov	dx,PAUSEMES_PTR
 11496                                  	;invoke std_eprintf		;AN000; get second part of message
 11497 0000062E E8EF4D                  	call	std_eprintf
 11498                                  					;AN000; print it to stderr
 11499                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11500                                  	;call	STD_EPRINTF
 11501 00000631 E82E00                  	call	GETKEYSTROKE
 11502 00000634 1F                      	pop	ds
 11503 00000635 EBB8                    	jmp	short PROMPTBAT
 11504                                  
 11505                                  
 11506                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11507                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:052Ah
 11508                                  
 11509                                  	; MSDOS 6.0
 11510                                  ;****************************************************************
 11511                                  ;*
 11512                                  ;* ROUTINE:	Output_batch_name
 11513                                  ;*
 11514                                  ;* FUNCTION:	Sets up batch name to be printed on extended error
 11515                                  ;*
 11516                                  ;* INPUT:	DX - extended error number
 11517                                  ;*
 11518                                  ;* OUTPUT:	Ready to call print routine
 11519                                  ;*
 11520                                  ;****************************************************************
 11521                                  ;
 11522                                  ;public	output_batch_name		;AN022;
 11523                                  
 11524                                  output_batch_name:	;proc near	;AN022;
 11525                                  
 11526 00000637 1E                      	push	ds			;AN022; save resident segment
 11527 00000638 8E1E[4902]              	mov	ds,[Batch]		;AN022; get batch file segment
 11528                                  	;assume	DS:nothing		;AN022;
 11529                                  	;;mov	SI,BatFile		;AN022; get offset of batch file
 11530                                  	; 05/02/2023
 11531                                  	;mov	si,20h
 11532                                  	; 24/04/2023
 11533 0000063C BE2000                  	mov	si,BATCHSEGMENT.BatFile
 11534                                  	;invoke	dstrlen 		;AN022; get length of string
 11535 0000063F E85B2A                  	call	dstrlen
 11536                                  	;mov	di,offset Trangroup:bwdbuf
 11537                                  					;AN022; target for batch name
 11538 00000642 BF[AB9D]                	mov	di,BWDBUF
 11539 00000645 F3A4                    	rep	movsb			;AN022; move the name
 11540                                  
 11541 00000647 0E                      	push	cs			;AN022; get local segment
 11542 00000648 1F                      	pop	ds			;AN022;
 11543                                  	;assume	DS:trangroup		;AN022;
 11544                                  	; 05/02/2023
 11545 00000649 8916[DA8F]              	mov	[extend_buf_ptr],dx	;AN022; put message number in block
 11546                                  	;mov	byte [msg_disp_class],1
 11547 0000064D C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class
 11548                                  					;AN022; set up extended error msg class
 11549                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 11550 00000652 BA[DA8F]                	mov	dx,extend_buf_ptr	
 11551                                  					;AN022; get extended message pointer
 11552                                  	;mov	string_ptr_2,offset trangroup:bwdbuf 
 11553 00000655 C706[129E][AB9D]        	mov	word [string_ptr_2],BWDBUF	
 11554                                  					;AN022; point to substitution
 11555                                  	;mov	byte [extend_buf_sub],1
 11556 0000065B C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst
 11557                                  					;AN022; set up for one subst
 11558 00000660 1F                      	pop	ds			;AN022; restore data segment
 11559 00000661 C3                      	retn				;AN022; return
 11560                                  
 11561                                  ;output_batch_name    endp		;AN022;
 11562                                  
 11563                                  
 11564                                  ; =============== S U B	R O U T	I N E =======================================
 11565                                  
 11566                                  ;Break	<GetKeystroke - get a keystroke and flush queue>
 11567                                  
 11568                                  ; Read the next keystroke. Since there may be several characters in the queue
 11569                                  ; after the one we ask for (function keys/Kanji), we need to flush the queue
 11570                                  ; AFTER waiting.
 11571                                  
 11572                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11573                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0555h
 11574                                  
 11575                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 11576                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:062Fh
 11577                                  
 11578                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 11579                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:066Ah
 11580                                  
 11581                                  GETKEYSTROKE:
 11582                                  	; 05/02/2023
 11583                                  	; MSDOS 3.3
 11584                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_NO_ECHO
 11585                                  	;;mov	ax,0C08h
 11586                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT_NO_ECHO
 11587                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 11588                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 11589                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 11590                                  	;;mov	ax,0C00h
 11591                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)+0
 11592                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 11593                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 11594                                  	;retn
 11595                                  
 11596                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11597                                  	; MSDOS 6.0
 11598 00000662 52                      	push	dx			;AN000;  3/3/KK
 11599                                  	;mov	ax,(ECS_call SHL 8) OR GetInterimMode
 11600                                  					;AN000;  3/3/KK
 11601 00000663 B80263                  	mov	ax,6302h
 11602 00000666 CD21                    	int	21h			;AN000;  3/3/KK
 11603                                  		; DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE
 11604                                  	
 11605 00000668 52                      	push	dx			;AN000;  save interim state 3/3/KK
 11606                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 11607                                  					;AN000;  3/3/KK
 11608 00000669 B80163                  	mov	ax,6301h
 11609 0000066C B201                    	mov	dl,1
 11610                                  	;mov	dl,InterimMode		;AN000;  3/3/KK
 11611 0000066E CD21                    	int	21h			;AN000;  3/3/KK
 11612                                  		; DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE
 11613                                  		; DL = new mode
 11614                                  		; 00h return only full characters on DOS keyboard input functions
 11615                                  		; 01h return partially-formed characters also
 11616                                  	
 11617                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo
 11618 00000670 B8080C                  	mov	ax,0C08h
 11619 00000673 CD21                    	int	21h			; Get character with KB buffer flush
 11620                                  		; DOS - CLEAR KEYBOARD BUFFER
 11621                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 11622                                  
 11623                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 11624 00000675 B8000C                  	mov	ax,0C00h
 11625 00000678 CD21                    	int	21h
 11626                                  		; DOS - CLEAR KEYBOARD BUFFER
 11627                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 11628                                  
 11629                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 11630                                  					;AN000;  3/3/KK
 11631 0000067A B80163                  	mov	ax,6301h
 11632 0000067D 5A                      	pop	dx			;AN000;  restore interim state 3/3/KK
 11633 0000067E CD21                    	int	21h			;AN000;  3/3/KK
 11634 00000680 5A                      	pop	dx			;AN000;  3/3/KK
 11635                                  	
 11636 00000681 C3                      	retn
 11637                                  
 11638                                  ; =============== S U B	R O U T	I N E =======================================
 11639                                  
 11640                                  ; Break	<ReadBat - read 1 line from batch file>
 11641                                  
 11642                                  ; ReadBat - read a single line from the batch file. 
 11643                                  ; Perform all substitutions as appropriate.
 11644                                  
 11645                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 11646                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0575h
 11647                                  
 11648                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 11649                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:068Ah
 11650                                  
 11651                                  READBAT:
 11652                                  	;ASSUME	DS:ResGroup,ES:TranGroup
 11653                                  		
 11654                                  	;mov	byte [Suppress],1
 11655                                  				; initialize line suppress status
 11656 00000682 C606[9E02]01            	mov	byte [Suppress],YES_ECHO
 11657 00000687 F606[9302]FF            	test	byte [Batch_Abort],-1 ; 0FFh
 11658 0000068C 751F                    	jnz	short TRYING_TO_ABORT
 11659 0000068E C606[9202]01            	mov	byte [In_Batch],1 ; set flag to indicate batch job
 11660                                  
 11661                                  	; MSDOS 6.0
 11662                                  
 11663                                  ;M037; Start of changes
 11664                                  ; We check here if we have set the flag indicating that the batchfile is at
 11665                                  ;EOF. In this case, we do not want to continue with the normal processing.
 11666                                  ;We call GetBatByt once more so that the batch segment gets freed up, the
 11667                                  ;batch file gets closed etc. and then return as if everything is done.
 11668                                  
 11669                                  	; 05/02/2023
 11670 00000693 1E                      	push	ds
 11671 00000694 8E1E[4902]              	mov	ds,[Batch]
 11672                                  	;cmp	byte [2],0
 11673 00000698 803E020000              	cmp	byte [BATCHSEGMENT.BatchEOF],0
 11674                                  				; are we at EOF in batchfile
 11675 0000069D 1F                      	pop	ds
 11676 0000069E 740A                    	jz	short CONTBAT	; no, continue normal processing
 11677                                  	;invoke	GetBatByt	; frees up batchseg
 11678 000006A0 E8DC03                  	call	GETBATBYT
 11679 000006A3 26A2[C49A]              	mov	[es:COMBUF+2],al
 11680                                  				; stuff CR into command buffer
 11681                                  				; as a dummy command
 11682                                  	;;invoke CrLf2		; print a CR-LF
 11683                                  	;call	CRLF2
 11684                                  	;;return		; done batch processing
 11685                                  	;retn
 11686                                  	; 24/04/2023
 11687 000006A7 E9CD22                  	jmp	CRLF2
 11688                                  
 11689                                  ;M037; End of changes
 11690                                  		
 11691                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11692                                  CONTBAT:
 11693 000006AA E842FF                  	call	PROMPTBAT
 11694                                  
 11695                                  TRYING_TO_ABORT:
 11696 000006AD BF[C49A]                	mov	di,COMBUF+2
 11697                                  
 11698                                  ; Save position and try to scan for first non delimiter.
 11699                                  
 11700                                  TESTNOP:
 11701 000006B0 8CD8                    	mov	ax,ds
 11702 000006B2 8E1E[4902]              	mov	ds,[Batch]
 11703 000006B6 FF360800                	push	word [BATCHSEGMENT.BatSeek]
 11704 000006BA FF360A00                	push	word [BATCHSEGMENT.BatSeek+2]
 11705                                  				; save current location.
 11706 000006BE 8ED8                    	mov	ds,ax
 11707 000006C0 E85506                  	call	SKIPDELIM	; skip to first non-delim
 11708                                  
 11709                                  ; If the first non-delimiter is not a : (label), we reseek back to the
 11710                                  ; beginning and read the line.
 11711                                  
 11712 000006C3 3C3A                    	cmp	al,':'		; is it a label?
 11713 000006C5 59                      	pop	cx
 11714 000006C6 5A                      	pop	dx		; restore position in bat file
 11715 000006C7 7432                    	jz	short NOPLINE	; yes, resync everything.
 11716 000006C9 F706[4902]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 11717 000006CF 7439                    	jz	short RDBAT	; no, go read batch file
 11718                                  
 11719                                  	;cmp	al,'@'
 11720 000006D1 3C40                    	cmp	al,No_Echo_Char	; see if user wants to suppress line
 11721 000006D3 7507                    	jne	short SET_BAT_POS ; no - go and set batch file position
 11722                                  	;mov	byte [Suppress],0
 11723 000006D5 C606[9E02]00            	mov	byte [Suppress],NO_ECHO ; yes set flag to indicate
 11724 000006DA EB2E                    	jmp	short RDBAT	; go read batch file
 11725                                  	;nop
 11726                                  SET_BAT_POS:
 11727 000006DC 1E                      	push	ds
 11728 000006DD 8E1E[4902]              	mov	ds,[Batch]
 11729                                  	;mov	[8],dx
 11730 000006E1 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; reseek back to beginning
 11731                                  	;mov	[10],cx
 11732 000006E5 890E0A00                	mov	[BATCHSEGMENT.BatSeek+2],cx
 11733 000006E9 1F                      	pop	ds
 11734                                  	;;mov	ax,(LSEEK SHL 8) + 0
 11735                                  	; 05/02/2023
 11736 000006EA B80042                  	mov	ax,4200h
 11737                                  	;mov	ax,(LSEEK*256) ; 4200h ; seek back
 11738                                  
 11739                                  ; 25/07/2024
 11740                                  ; PCDOS 7.1 COMMAND.COM
 11741                                  %if 0
 11742                                  	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 11743                                  			; AL = method: offset from beginning of	file
 11744                                  %else
 11745 000006ED E8CAFE                  	call	int_21h_indirect
 11746                                  %endif
 11747                                  	;mov	word [cs:BATBUFPOS],0FFFFh
 11748                                  	; 24/04/2023
 11749                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:05E3h
 11750 000006F0 26C706[37A6]FFFF        	mov	word [es:BATBUFPOS],-1; 0FFFFh
 11751                                  	;mov	word [cs:BATBUFPOS],-1 ; nuke batch buffer position
 11752 000006F7 31C9                    	xor	cx,cx		; Initialize line length to zero
 11753 000006F9 EB0F                    	jmp	short RDBAT
 11754                                  
 11755                                  	;nop
 11756                                  
 11757                                  ; The first non-delimiter is a :. This line is not echoed and is ignored.
 11758                                  ; We eat characters until a CR is seen.
 11759                                  
 11760                                  NOPLINE:
 11761 000006FB E80501                  	call	SKIPTOEOL
 11762 000006FE E87E03                  	call	GETBATBYT	; eat trailing LF
 11763                                  	;test	word [Batch],0FFFFh
 11764 00000701 F706[4902]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 11765 00000707 75A7                    	jnz	short TESTNOP	; no, go get another line
 11766                                  READBAT_RETN:			; Hit EOF
 11767 00000709 C3                      	retn
 11768                                  
 11769                                  ; ---------------------------------------------------------------------------
 11770                                  
 11771                                  ; Read a line into the buffer pointed to by ES:DI. If any %s are seen in the
 11772                                  ; input, we are to consider two special cases:
 11773                                  ;
 11774                                  ;   %0 to %9	These represent replaceable parameters from the batch segment
 11775                                  ;   %sym%	This is a symbol from the environment
 11776                                  
 11777                                  RDBAT:
 11778 0000070A E87203                  	call	GETBATBYT
 11779 0000070D 41                      	inc	cx		; Inc the line length
 11780                                  
 11781                                  	; 05/02/2023
 11782                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0601h
 11783 0000070E E84E20                  	call	testkanj
 11784 00000711 740C                    	jz	short RDBAT1
 11785                                  	;cmp	cx,127
 11786 00000713 83F97F                  	cmp	cx,COMBUFLEN-1
 11787 00000716 7350                    	jnb	short TOOLONG
 11788 00000718 AA                      	stosb
 11789 00000719 E86303                  	call    GETBATBYT
 11790 0000071C 41                      	inc	cx
 11791 0000071D EB0A                    	jmp	short SAVBATBYT
 11792                                  RDBAT1:
 11793 0000071F 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 11794 00000723 7343                    	jnb	short TOOLONG	   ; Yes - handle it, handle it
 11795                                  
 11796                                  ; See if we have a parameter character.
 11797                                  
 11798 00000725 3C25                    	cmp	al,'%'		; Check for parameter
 11799 00000727 7449                    	je	short NEEDPARM
 11800                                  
 11801                                  ; no parameter character. Store it as usual and see if we are done.
 11802                                  
 11803                                  SAVBATBYT:
 11804 00000729 AA                      	stosb			; End of line found?
 11805 0000072A 3C0D                    	cmp	al,0Dh
 11806 0000072C 75DC                    	jne	short RDBAT	; no, go for more
 11807                                  
 11808                                  ; We have read in an entire line. 
 11809                                  ; Decide whether we should echo the command line or not.
 11810                                  
 11811                                  FOUND_EOL:
 11812 0000072E 81EF[C59A]              	sub	di,COMBUF+3
 11813 00000732 89F8                    	mov	ax,di		; remember that we've not counted the CR
 11814 00000734 26A2[C39A]              	mov	[es:COMBUF+1],al
 11815                                  				; Set length of line
 11816 00000738 E84403                  	call	GETBATBYT	; Eat linefeed
 11817 0000073B E8F206                  	call	BATCLOSE
 11818 0000073E 803E[9E02]00            	cmp	byte [Suppress],NO_ECHO ; 0
 11819 00000743 7407                    	jz	short RESET
 11820 00000745 F606[9D02]01            	test	byte [EchoFlag],1  ; To echo or not to echo, that is the
 11821 0000074A 7504                    	jnz	short TRY_NEXTFLAG ; question. (Profound, huh?)
 11822                                  RESET:
 11823 0000074C 0E                      	push	cs
 11824 0000074D 1F                      	pop	ds		; Go back to local segment
 11825 0000074E 74B9                    	jz	short READBAT_RETN ; no echoing here...
 11826                                  TRY_NEXTFLAG:
 11827 00000750 803E[B402]01            	cmp	byte [NullFlag],nullcommand ; 1
 11828                                  				;G was there a command last time?
 11829 00000755 7403                    	jz	short NO_CRLF_PRINT
 11830                                  				;G no - don't print crlf
 11831 00000757 E81D22                  	call	CRLF2		;G Print out prompt
 11832                                  NO_CRLF_PRINT:
 11833 0000075A E89119                  	call	PRINT_PROMPT
 11834 0000075D 0E                      	push	cs		;G change data segment
 11835 0000075E 1F                      	pop	ds
 11836 0000075F BA[C49A]                	mov	dx,COMBUF+2	; get command line for echoing
 11837 00000762 E86B22                  	call	CRPRINT
 11838                                  	;call	CRLF2
 11839                                  	;retn
 11840                                  	; 06/02/2023
 11841 00000765 E90F22                  	jmp	CRLF2
 11842                                  
 11843                                  ; The line was too long. Eat remainder of input text up until the CR
 11844                                  
 11845                                  TOOLONG:
 11846 00000768 3C0D                    	cmp	al,0Dh		; Has the end of the line been reached?
 11847 0000076A 7403                    	jz	short LTLCONT	; Yes, continue
 11848 0000076C E89400                  	call	SKIPTOEOL	; Eat remainder of line	
 11849                                  LTLCONT:
 11850 0000076F AA                      	stosb			; Terminate the command
 11851 00000770 EBBC                    	jmp	short FOUND_EOL	; Go process the valid part of the line
 11852                                  
 11853                                  ; We have found a parameter lead-in character. Check for the 0-9 case first
 11854                                  
 11855                                  NEEDPARM:
 11856 00000772 E80A03                  	call	GETBATBYT	; get next character
 11857 00000775 3C25                    	cmp	al,'%'		; Check for two consecutive %
 11858 00000777 74B0                    	je	short SAVBATBYT	; if so, replace with a single %
 11859 00000779 3C0D                    	cmp	al,0Dh		; Check for end-of-line
 11860 0000077B 74AC                    	je	short SAVBATBYT	; yes, treat it normally
 11861                                  
 11862                                  ; We have found %<something>. If the <something> is in the range 0-9, we
 11863                                  ; retrieve the appropriate parameter from the batch segment. Otherwise we
 11864                                  ; see if the <something> has a terminating % and then look up the contents
 11865                                  ; in the environment.
 11866                                  
 11867                                  PAROK:
 11868 0000077D 2C30                    	sub	al,'0'
 11869 0000077F 7239                    	jb	short NEEDENV	; look for parameter in the environment
 11870 00000781 3C09                    	cmp	al,9
 11871 00000783 7735                    	ja	short NEEDENV
 11872                                  
 11873                                  ; We have found %<number>. This is taken from the parameters in the
 11874                                  ; allocated batch area.
 11875                                  
 11876 00000785 98                      	cbw
 11877 00000786 89C3                    	mov	bx,ax		; move index into AX
 11878 00000788 D1E3                    	shl	bx,1		; convert word index into byte ptr
 11879 0000078A 06                      	push	es
 11880 0000078B 8E06[4902]              	mov	es,[Batch]
 11881                                  
 11882                                  ; The structure of the batch area is:
 11883                                  ;
 11884                                  ;   BYTE    type of segment
 11885                                  ;   DWORD   offset for next line
 11886                                  ;   10 WORD pointers to parameters. -1 is empty parameter
 11887                                  ;   ASCIZ   file name (with . and ..)
 11888                                  ;   BYTES   CR-terminated parameters
 11889                                  ;   BYTE    0 flag to indicate end of parameters
 11890                                  ;
 11891                                  ; Get pointer to BX'th argument
 11892                                  
 11893                                  	;;mov	si,[es:bx+0Bh]
 11894                                  	; 05/02/2023
 11895                                  	;mov	si,[es:bx+0Ch] 	; MSDOS 5.0 COMMAND.COM
 11896 0000078F 268B770C                	mov	si,[es:bx+BATCHSEGMENT.BatParm]
 11897 00000793 07                      	pop	es
 11898                                  
 11899                                  ; Is there a parameter here?
 11900                                  
 11901 00000794 83FEFF                  	cmp	si,-1		; Check if parameter exists
 11902 00000797 7503                    	jnz	short YES_THERE_IS ; Yes go get it
 11903 00000799 E96EFF                  	jmp	RDBAT		; Ignore if it doesn't
 11904                                  
 11905                                  ; Copy in the found parameter from batch segment
 11906                                  
 11907                                  YES_THERE_IS:
 11908 0000079C 1E                      	push	ds
 11909 0000079D 8E1E[4902]              	mov	ds,[Batch]
 11910 000007A1 49                      	dec	cx		; Don't count '%' in line length
 11911                                  COPYPARM:
 11912 000007A2 AC                      	lodsb			; From resident segment
 11913 000007A3 3C0D                    	cmp	al,0Dh		; Check for end of parameter
 11914 000007A5 740F                    	je	short ENDPARAM
 11915 000007A7 41                      	inc	cx		; Inc the line length
 11916 000007A8 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 11917 000007AC 7303                    	jnb	short LINETOOL	; Yes - handle it, handle it
 11918 000007AE AA                      	stosb
 11919 000007AF EBF1                    	jmp	short COPYPARM
 11920                                  
 11921                                  ; We have copied up to the limit. Stop copying and eat remainder of batch
 11922                                  ; line. We need to make sure that the tooLong code isn't fooled into
 11923                                  ; believing that we are at EOL. Clobber AL too.
 11924                                  
 11925                                  LINETOOL:
 11926 000007B1 30C0                    	xor	al,al
 11927 000007B3 1F                      	pop	ds
 11928 000007B4 EBB2                    	jmp	short TOOLONG
 11929                                  
 11930                                  ; We have copied in an entire parameter. Go back for more
 11931                                  
 11932                                  ENDPARAM:
 11933 000007B6 1F                      	pop	ds
 11934 000007B7 E950FF                  	jmp	RDBAT
 11935                                  
 11936                                  ; We have found % followed by something other than 0-9. We presume that there
 11937                                  ; will be a following % character. In between is an environment variable that
 11938                                  ; we will fetch and replace in the batch line with its value.
 11939                                  
 11940                                  NEEDENV:
 11941                                  	; MSDOS 6.0 COMMAND.COM
 11942                                  	; 05/02/2023 
 11943 000007BA 49                      	dec     cx 		;AN070; Don't count "%"
 11944                                  
 11945                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11946 000007BB 1E                      	push	ds
 11947 000007BC 57                      	push	di
 11948                                  				; temp spot for name
 11949 000007BD BF[2D9D]                	mov	di,ID
 11950 000007C0 0430                    	add	al,'0'		; reconvert character
 11951 000007C2 AA                      	stosb			; store it in appropriate place
 11952                                  
 11953                                  ; loop getting characters until the next % is found or until EOL
 11954                                  
 11955                                  GETENV1:
 11956 000007C3 E8B902                  	call	GETBATBYT	; get the byte
 11957 000007C6 AA                      	stosb			; store it
 11958 000007C7 3C0D                    	cmp	al,0Dh		; EOL?
 11959 000007C9 7514                    	jne	short GETENV15	; no, see if it the term char
 11960                                  
 11961                                  ; The user entered a string with a % but no trailing %. We copy the string.
 11962                                  
 11963 000007CB 26C645FF00              	mov	byte [es:di-1],0 ; nul terminate the string
 11964 000007D0 BE[2D9D]                	mov	si,ID 		; point to buffer
 11965 000007D3 5F                      	pop	di		; point to line buffer
 11966 000007D4 0E                      	push	cs
 11967 000007D5 1F                      	pop	ds
 11968 000007D6 E89302                  	call	STRCPY
 11969                                  	; 05/02/2023
 11970 000007D9 72D6                    	jc	short LINETOOL	;  MSDOS 6.0 COMMAND.COM
 11971                                  	; 24/04/2023
 11972                                  	;dec	di  		;  MSDOS 3.3 COMMAND.COM	
 11973 000007DB 1F                      	pop	ds
 11974 000007DC E94AFF                  	jmp	SAVBATBYT
 11975                                  GETENV15:
 11976 000007DF 3C25                    	cmp	al,'%'		; terminating %?
 11977 000007E1 75E0                    	jne	short GETENV1	; no, go suck out more characters
 11978                                  
 11979                                  ; M017 - following DEC is wrong, because we replace the % with a = here.
 11980                                  ; This was the source of bug #1.
 11981                                  ;	dec	cx		;AN070; Don't count "%"
 11982                                  
 11983 000007E3 B03D                    	mov	al,'='		; terminate  with =
 11984 000007E5 268845FF                	mov	[es:di-1],al
 11985                                  
 11986                                  ; ID now either has a =-terminated string which we are to find in the
 11987                                  ; environment or a non =-terminated string which will not be found in the
 11988                                  ; environment.
 11989                                  
 11990                                  GETENV2:
 11991 000007E9 BE[2D9D]                	mov	si,ID
 11992 000007EC 0E                      	push	cs
 11993 000007ED 1F                      	pop	ds		; DS:SI points to name
 11994 000007EE 51                      	push	cx
 11995 000007EF E8C31E                  	call	find_name_in_environment
 11996 000007F2 59                      	pop	cx
 11997 000007F3 06                      	push	es
 11998 000007F4 1F                      	pop	ds
 11999 000007F5 0E                      	push	cs
 12000 000007F6 07                      	pop	es
 12001 000007F7 89FE                    	mov	si,di
 12002 000007F9 5F                      	pop	di		; get back pointer to command line
 12003                                  
 12004                                  ; If the parameter was not found, there is no need to perform any replacement.
 12005                                  ; We merely pretend that we've copied the parameter.
 12006                                  
 12007 000007FA 7203                    	jc	short GETENV6
 12008                                  
 12009                                  ; ES:DI points to command line being built
 12010                                  ; DS:SI points either to nul-terminated environment object AFTER =
 12011                                  
 12012 000007FC E86D02                  	call	STRCPY		; (let RdBat handle overflow)
 12013                                  	; 24/04/2022
 12014                                  	;dec	di 		; MSDOS 3.3 COMMAND.COM
 12015                                  GETENV6:
 12016 000007FF 1F                      	pop	ds
 12017 00000800 E907FF                  	jmp	RDBAT		; go back to batch file
 12018                                  
 12019                                  ; =============== S U B	R O U T	I N E =======================================
 12020                                  
 12021                                  ;   SkipToEOL - read from batch file until end of line
 12022                                  
 12023                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12024                                  SKIPTOEOL:
 12025 00000803 F706[4902]FFFF          	test	word [Batch],-1 ; 0FFFFh
 12026                                  	;jnz	short SKIPTOEOL1  	
 12027                                  	;retn			; no batch file in effect
 12028                                  	
 12029 00000809 7407                    	jz	short SKIPTOEOL2 ; Retro DOS v3.0 COMMAND.COM
 12030                                  SKIPTOEOL1:
 12031 0000080B E87102                  	call	GETBATBYT
 12032 0000080E 3C0D                    	cmp	al,0Dh		; eol character?
 12033 00000810 75F1                    	jnz	short SKIPTOEOL	; no, go eat another
 12034                                  SKIPTOEOL2:
 12035 00000812 C3                      	retn
 12036                                  
 12037                                  ; =============== S U B	R O U T	I N E =======================================
 12038                                  
 12039                                  ;Break	<Allocate and deallocate the transient portion>
 12040                                  
 12041                                  ; Free Transient. Modify ES,AX,flags
 12042                                  
 12043                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12044                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0708h
 12045                                  
 12046                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 12047                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:081Eh
 12048                                  FREE_TPA:
 12049 00000813 06                      	push	es
 12050 00000814 8E06[639C]              	mov	es,[RESSEG]
 12051 00000818 268E06[5804]            	mov	es,[es:Res_Tpa]
 12052 0000081D B449                    	mov	ah,49h
 12053                                  	;mov	ah,DEALLOC ; 49h
 12054                                  
 12055                                  ; 25/07/2024
 12056                                  ; PCDOS 7.1 COMMAND.COM
 12057                                  %if 0
 12058                                  	int	21h	; DOS -	2+ - FREE MEMORY
 12059                                  			; ES = segment address of area to be freed
 12060                                  %else
 12061 0000081F E898FD                  	call	int_21h_indirect
 12062                                  %endif
 12063                                  
 12064 00000822 07                      	pop	es
 12065 00000823 C3                      	retn
 12066                                  
 12067                                  ; =============== S U B	R O U T	I N E =======================================
 12068                                  
 12069                                  ; Allocate transient. Modify AX,BX,DX,flags
 12070                                  
 12071                                  	; 25/07/2024 - Retro DOS v5.0 COMMAND.COM
 12072                                  	; 06/02/2023
 12073                                  ALLOC_TPA:
 12074 00000824 06                      	push	es
 12075 00000825 8E06[639C]              	mov	es,[RESSEG]
 12076 00000829 BBFFFF                  	mov	bx,0FFFFh 	; Re-allocate the transient	
 12077 0000082C B448                    	mov	ah,48h
 12078                                  	;mov	ah,ALLOC ; 48h
 12079                                  
 12080                                  ; 25/07/2024
 12081                                  ; PCDOS 7.1 COMMAND.COM
 12082                                  %if 0
 12083                                  	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 12084                                  			; BX = number of 16-byte paragraphs desired
 12085                                  %else
 12086 0000082E E889FD                  	call	int_21h_indirect
 12087                                  %endif
 12088                                  
 12089 00000831 53                      	push	bx	  	; Save size of block
 12090 00000832 B448                    	mov	ah,48h
 12091                                  	;mov	ah,ALLOC ; 48h
 12092                                  
 12093                                  ; 25/07/2024
 12094                                  ; PCDOS 7.1 COMMAND.COM
 12095                                  %if 0
 12096                                  	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 12097                                  			; BX = number of 16-byte paragraphs desired
 12098                                  %else
 12099 00000834 E883FD                  	call	int_21h_indirect
 12100                                  %endif
 12101                                  
 12102                                  ; Attempt to align TPA on 64K boundary
 12103                                  
 12104 00000837 5B                      	pop	bx		; Restore size of block
 12105 00000838 26A3[5804]              	mov	[es:Res_Tpa],ax
 12106                                  				; Save segment to beginning of block
 12107 0000083C A3[739C]                	mov	[TRAN_TPA],ax
 12108                                  
 12109                                  ; Is the segment already aligned on a 64K boundary
 12110                                  
 12111 0000083F 89C2                    	mov	dx,ax		; Save segment
 12112 00000841 25FF0F                  	and	ax,0FFFh	; Test if above boundary
 12113 00000844 7507                    	jnz	short CALC_TPA
 12114 00000846 89D0                    	mov	ax,dx
 12115 00000848 2500F0                  	and	ax,0F000h	; Test if multiple of 64K
 12116 0000084B 7523                    	jnz	short NOROUND
 12117                                  CALC_TPA:
 12118 0000084D 89D0                    	mov	ax,dx
 12119 0000084F 2500F0                  	and	ax,0F000h
 12120 00000852 050010                  	add	ax,1000h	; Round up to next 64K boundary
 12121 00000855 7219                    	jc	short NOROUND	; Memory wrap if carry set
 12122                                  
 12123                                  ; Make sure that new boundary is within allocated range
 12124                                  
 12125 00000857 268B16[5804]            	mov	dx,[es:Res_Tpa]
 12126 0000085C 01DA                    	add	dx,bx		; Compute maximum address
 12127 0000085E 39C2                    	cmp	dx,ax		; Is 64K address out of range?
 12128 00000860 720E                    	jb	short NOROUND
 12129                                  
 12130                                  ; Make sure that we won't overwrite the transient
 12131                                  
 12132 00000862 8CCB                    	mov	bx,cs		; CS is beginning of transient
 12133 00000864 39C3                    	cmp	bx,ax
 12134 00000866 7208                    	jb	short NOROUND
 12135                                  
 12136                                  ; The area from the 64K boundary to the beginning of the transient must
 12137                                  ; be at least 64K.
 12138                                  
 12139 00000868 29C3                    	sub	bx,ax
 12140                                  	;cmp	bx,4096
 12141 0000086A 81FB0010                	cmp	bx,1000h	; Size greater than 64K?	
 12142 0000086E 7304                    	jnb	short ROUNDDONE
 12143                                  NOROUND:
 12144 00000870 26A1[5804]              	mov	ax,[es:Res_Tpa]
 12145                                  ROUNDDONE:
 12146 00000874 26A3[4C04]              	mov	[es:LTpa],ax	; Re-compute everything
 12147 00000878 A3[659C]                	mov	[TPA],ax
 12148 0000087B 89C3                    	mov	bx,ax
 12149 0000087D 8CC8                    	mov	ax,cs
 12150 0000087F 29D8                    	sub	ax,bx
 12151 00000881 53                      	push	bx
 12152 00000882 BB1000                  	mov	bx,16
 12153 00000885 F7E3                    	mul	bx
 12154 00000887 5B                      	pop	bx
 12155 00000888 09D2                    	or	dx,dx
 12156 0000088A 7403                    	jz	short SAVSIZ2
 12157 0000088C B8FFFF                  	mov	ax,-1
 12158                                  SAVSIZ2:
 12159                                  
 12160                                  ; AX is the number of bytes free in the buffer between the resident and the
 12161                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 12162                                  
 12163 0000088F 3D0002                  	cmp	ax,512
 12164 00000892 7603                    	jbe	short GOTSIZE2
 12165                                  	;and	ax,~1FFh
 12166 00000894 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FFh
 12167                                  GOTSIZE2:
 12168 00000897 A3[859C]                	mov	[BYTCNT],ax
 12169 0000089A 07                      	pop	es
 12170 0000089B C3                      	retn
 12171                                  
 12172                                  ; =============== S U B	R O U T	I N E =======================================
 12173                                  
 12174                                  ;Break	<BatCom - enter a batch file>
 12175                                  
 12176                                  ; The exec search has determined that the user has requested a batch file for
 12177                                  ; execution. We parse the arguments, create the batch segment, and signal
 12178                                  ; batch processing.
 12179                                  
 12180                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12181                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:078Eh
 12182                                  
 12183                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12184                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0868h
 12185                                  
 12186                                  	; 18/07/2024 - Retro DOS 5.0 COMMAND.COM
 12187                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:08A7h
 12188                                  
 12189                                  BATCOM:	
 12190                                  
 12191                                  ;ASSUME	DS:TRANGROUP, ES:NOTHING
 12192                                  
 12193                                  ; Batch parameters are read with ES set to segment of resident part
 12194                                  
 12195                                  	; MSDOS 6.0
 12196 0000089C 8E06[639C]              	mov	es,[RESSEG]
 12197                                  	;ASSUME	ES:RESGROUP
 12198                                  	;cmp	byte [es:Call_Batch_Flag],1
 12199 000008A0 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 12200                                  					;AN043; If in CALL,
 12201 000008A6 7403                    	jz	short skip_ioset	;AN043; redirection was already set up
 12202                                  	;invoke	IOSET			; Set up any redirection
 12203 000008A8 E80327                  	call	IOSET
 12204                                  skip_ioset:				;AN043;
 12205 000008AB E865FF                  	call	FREE_TPA		; G
 12206                                  	;cmp	byte [es:Call_Batch_Flag],1
 12207 000008AE 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 12208 000008B4 7403                    	jz	short GETECHO 		; G if we're in a call, don't execute
 12209                                  
 12210                                  	; 12/02/2023
 12211                                  	; MSDOS 3.3
 12212                                  	;call	IOSET
 12213                                  	;mov	es,[RESSEG]
 12214                                  	;call	FREE_TPA
 12215                                  	;;cmp	byte [es:CALL_BATCH_FLAG],1
 12216                                  	;cmp	byte [es:CALL_BATCH_FLAG],call_in_progress
 12217                                  	;jz	short GETECHO		; G if we're in a call, don't execute
 12218                                  
 12219                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12220                                  
 12221                                  ; Since BATCH has lower precedence than PIPE or FOR. If a new BATCH file is
 12222                                  ; being started it MUST be true that no FOR or PIPE is currently in progress.
 12223                                  ; Don't execute if in call
 12224                                  
 12225 000008B6 E8A008                  	call	FOROFF
 12226                                  GETECHO:
 12227 000008B9 E8E92A                  	call	PipeOff
 12228 000008BC 26A0[9D02]              	mov	al,[es:EchoFlag]	; preserve echo state for chaining
 12229 000008C0 2401                    	and	al,1			; Save current echo state
 12230                                  
 12231 000008C2 50                      	push	ax
 12232 000008C3 31C0                    	xor	ax,ax
 12233 000008C5 26F706[4902]FFFF        	test	word [es:Batch],-1 	; Are we in a batch file?
 12234 000008CC 7414                    	jz	short LEAVEBAT	   	; No, nothing to save
 12235 000008CE 26A1[4902]              	mov	ax,[es:Batch] 		; Get current batch segment
 12236                                  	;cmp	byte [es:Call_Batch_Flag],1
 12237 000008D2 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 12238 000008D8 7408                    	jz	short LEAVEBAT
 12239                                  
 12240                                  ;  We are in a chained batch file, save batlast from previous batch segment
 12241                                  ;  so that if we're in a CALL, we will return to the correct batch file.
 12242                                  
 12243 000008DA 06                      	push	es
 12244 000008DB 8EC0                    	mov	es,ax		; Get current batch segment
 12245                                  	;mov	ax,[es:02h] ; MSDOS 3.3 COMMAND.COM
 12246                                  				; Get previous batch segment
 12247                                  	; 12/02/2023
 12248                                  	;mov	ax,[es:03h] ; MSDOS 6.0 (&5.0) COMMAND.COM	
 12249 000008DD 26A10300                	mov	ax,[es:BATCHSEGMENT.BatLast]
 12250 000008E1 07                      	pop	es
 12251                                  LEAVEBAT:
 12252 000008E2 50                      	push	ax		; Keep segment until new one created
 12253                                  	;cmp	byte [es:Call_Batch_Flag],1
 12254 000008E3 26803E[B102]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 12255 000008E9 7403                    	jz	short STARTBAT
 12256 000008EB E82401                  	call	BATCHOFF
 12257                                  
 12258                                  ; Find length of batch file
 12259                                  
 12260                                  STARTBAT:
 12261 000008EE 26C606[B102]00          	mov	byte [es:Call_Batch_Flag],0 ; Reset call flag
 12262 000008F4 BE[8B9B]                	mov	si,EXECPATH
 12263                                  
 12264                                  	; 12/02/2023
 12265                                  	; MSDOS 6.0
 12266 000008F7 B811B7                  	mov	ax,0B711h
 12267                                  	;mov	ax,AppendTruename
 12268                                  				;AN042; Get the real path where the batch file
 12269 000008FA CD2F                    	int	2Fh		;AN042;    was found with APPEND
 12270 000008FC B44E                    	mov	ah,4Eh
 12271                                  	;mov	ah,Find_First	;AN042; The find_first will return it
 12272 000008FE 89F2                    	mov	dx,si		;AN042; Get the string
 12273 00000900 B91300                  	mov	cx,13h
 12274                                  	;mov	cx,search_attr	;AN042; filetypes to search for
 12275                                  	
 12276                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12277                                  %if 0
 12278                                  	int	21h		;AN042;
 12279                                  %else
 12280 00000903 E8B4FC                  	call	int_21h_indirect
 12281                                  %endif
 12282                                  
 12283                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12284 00000906 E89427                  	call	dstrlen
 12285                                  ;
 12286                                  ; Allocate batch area:
 12287                                  ;   BYTE    type of segment
 12288                                  ;   WORD    segment of last batch file
 12289                                  ;   WORD    segment for FOR command
 12290                                  ;   BYTE    FOR flag state on entry to batch file
 12291                                  ;   DWORD   offset for next line
 12292                                  ;   10 WORD pointers to parameters.  -1 is empty parameter
 12293                                  ;   ASCIZ   file name (with . and ..)
 12294                                  ;   BYTES   CR-terminated parameters
 12295                                  ;   BYTE    0 flag to indicate end of parameters
 12296                                  ;
 12297                                  ; We allocate the maximum size for the command line and use setblock to shrink
 12298                                  ; later when we've squeezed out the extra
 12299                                  ;
 12300 00000909 89CB                    	mov	bx,cx		; length of file name.
 12301                                  	;add	bx,190	; MSDOS 3.3 (BATCHSEGMENT struc size = 32)
 12302                                  	; 12/02/2023
 12303                                  	;add	bx,191	; MSDOS 6.0 (BATCHSEGMENT struc size = 33)
 12304                                  			; PCDOS 7.1 ; 26/07/2024
 12305                                   	; 25/04/2023
 12306 0000090B 81C3BF00                	add	bx,15+BATCHSEGMENT.SIZE+COMBUFLEN+15
 12307                                  					; structure + max len + round up
 12308 0000090F 51                      	push	cx
 12309 00000910 B104                    	mov	cl,4
 12310 00000912 D3EB                    	shr	bx,cl		; convert to paragraphs
 12311 00000914 53                      	push	bx		; Save size of batch segment
 12312 00000915 B448                    	mov	ah,48h
 12313                                  	;mov	ah,ALLOC ; 48h ; Allocate batch segment
 12314                                  
 12315                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12316                                  %if 0
 12317                                  	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 12318                                  				; BX = number of 16-byte paragraphs desired
 12319                                  %else
 12320 00000917 E8A0FC                  	call	int_21h_indirect
 12321                                  %endif
 12322                                  
 12323 0000091A 5B                      	pop	bx		; Get size of batch segment
 12324                                  
 12325                                  ; This should *NEVER* return an error. The transient is MUCH bigger than
 12326                                  ; the batch segment. This may not be true, however, in a multitasking system.
 12327                                  ; G This error will occur with nesting of batch files. We also need to
 12328                                  ; G make sure that we don't overlay the transient.
 12329                                  
 12330 0000091B 7222                    	jc	short MEM_ERROR	;G not enough memory - exit
 12331                                  
 12332 0000091D 50                      	push	ax		;G save batch segment
 12333 0000091E 01D8                    	add	ax,bx		;G get end of batch segment
 12334 00000920 83C020                  	add	ax,20h		;G add some tpa work area
 12335 00000923 8CCB                    	mov	bx,cs		;G get the transient segment
 12336                                  
 12337                                  	; MSDOS 6.0
 12338                                  ; M006; We cant check just for above. If the batchseg goes into a UMB, the
 12339                                  ; M006; batchseg is always above the transient. We need to change this code
 12340                                  ; M006; to only check for an overlap
 12341                                  
 12342                                  	;;mov	dx,offset TRANGROUP:TranSpaceEnd ; M006
 12343                                  	; 12/02/2023
 12344                                  	;;mov	dx,98C5h ; MSDOS 5.0 COMMAND.COM
 12345                                  	; 18/07/2024
 12346                                  	;mov	dx,0AA9Ah ; PCDOS 7.1 COMMAND.COM
 12347                                  	;mov	dx,TRANSPACEEND		
 12348                                  	;add	dx,15		;round up para; M006
 12349 00000925 BA8AA6                  	mov	dx,TRANSPACEEND+15
 12350                                  
 12351 00000928 D3EA                    	shr	dx,cl		;para size of transient; M006
 12352 0000092A 01DA                    	add	dx,bx		;dx = top of transient; M006
 12353                                  
 12354 0000092C 39D8                    	cmp	ax,bx		; M006
 12355 0000092E 7212                    	jb	short ENOUGH_MEM
 12356                                  				; Batchseg below transient
 12357                                  				; enough memory ; M006
 12358 00000930 39D0                    	cmp	ax,dx		; M006
 12359 00000932 770E                    	ja	short ENOUGH_MEM	
 12360                                  				; Batchseg above transient
 12361                                  				; enough memory ; M006
 12362                                  
 12363                                  ; M006; Batchseg overlaps transient -- insufficient memory
 12364                                  
 12365 00000934 58                      	pop	ax		; restore ax; M006
 12366                                  
 12367                                  	; 12/02/2023
 12368                                  	; MSDOS 3.3
 12369                                  ; M006;	cmp	ax,bx		;G do we end before the transient
 12370                                  ; M006;	pop	ax		;G get batch segment back
 12371                                  ; M006;	jb	short ENOUGH_MEM ;G we have enough memory - continue
 12372                                  
 12373                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12374 00000935 06                      	push	es		;G no we're hitting the transient
 12375 00000936 8EC0                    	mov	es,ax
 12376 00000938 B80049                  	mov	ax,4900h
 12377                                  	;mov	ax,DEALLOC*256 ; 4900h ;G deallocate the batch segment
 12378                                  
 12379                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12380                                  %if 0
 12381                                  	int	21h	; DOS -	2+ - FREE MEMORY
 12382                                  			; ES = segment address of area to be freed
 12383                                  %else
 12384 0000093B E87CFC                  	call	int_21h_indirect
 12385                                  %endif
 12386                                  
 12387 0000093E 07                      	pop	es
 12388                                  MEM_ERROR:
 12389 0000093F E9B900                  	jmp	NO_MEMORY	;G Set up for message and exit
 12390                                  
 12391                                  ENOUGH_MEM:
 12392                                  	; 12/02/2023 - Retro DOS v4.0 COMMAND.COM
 12393                                  	; MSDOS 6.0
 12394 00000942 58                      	pop	ax		; restore ax; M006
 12395                                  
 12396                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12397 00000943 26A3[4902]              	mov	[es:Batch],ax
 12398 00000947 E8DAFE                  	call	ALLOC_TPA
 12399                                  
 12400                                  ; Initialize batch segment
 12401                                  
 12402 0000094A 5A                      	pop	dx		; length of name
 12403 0000094B 58                      	pop	ax		;G get saved batch segment back
 12404 0000094C 26FF06[AE02]            	inc	word [es:Nest]	;G increment # batch files in progress
 12405 00000951 06                      	push	es
 12406 00000952 268E06[4902]            	mov	es,[es:Batch]
 12407                                  	;mov	byte [ES:0],0
 12408                                  				; signal batch file type
 12409 00000957 26C606000000            	mov	byte [es:BATCHSEGMENT.BatType],BATCHTYPE ; 0
 12410                                  	;;mov	[es:2],ax	; MSDOS 3.3
 12411                                  				;G save segment of last batch file
 12412                                  	;mov	[es:3],ax	; MSDOS 6.0
 12413 0000095D 26A30300                	mov	[es:BATCHSEGMENT.BatLast],ax
 12414 00000961 1E                      	push	ds
 12415 00000962 8E1E[639C]              	mov	ds,[RESSEG]	;G set to resident data
 12416                                  
 12417 00000966 31C0                    	xor	ax,ax
 12418 00000968 8A1E[AB02]              	mov	bl,[ForFlag]	;G get the current FOR state
 12419                                  	;;mov	[es:6],bl	; MSDOS 3.3
 12420                                  				;G save it in the batch segment
 12421                                  	;mov	[es:7],bl	; MSDOS 6.0 	
 12422 0000096C 26881E0700              	mov	[es:BATCHSEGMENT.BatForFlag],bl
 12423 00000971 F6C3FF                  	test	bl,-1 ; 0FFh	;G are we in a FOR?
 12424 00000974 7406                    	jz	short FOR_NOT_ON ;G no, for segment set to 0	
 12425                                  	;mov	ax,[ForPtr]	;G yes, get current FOR segment	
 12426                                  	;mov	byte [ForFlag],0 ;G reset forflag
 12427                                  	; 26/07/2024
 12428 00000976 A2[AB02]                	mov	[ForFlag],al ; 0
 12429 00000979 A1[AC02]                	mov	ax,[ForPtr]	;G yes, get current FOR segment	
 12430                                  FOR_NOT_ON:
 12431                                  	;;mov	[es:4],ax	; MSDOS 3.3
 12432                                  				;G save FOR segment in batch segment
 12433                                  	;mov	[es:5],ax	; MSDOS 6.0		
 12434 0000097C 26A30500                	mov	[es:BATCHSEGMENT.BatForPtr],ax	
 12435 00000980 31C0                    	xor	ax,ax
 12436 00000982 A3[AC02]                	mov	[ForPtr],ax	;G make sure for segment is not active
 12437 00000985 8A1E[9D02]              	mov	bl,[EchoFlag]
 12438 00000989 1F                      	pop	ds
 12439                                  	;mov	[es:1],bl 
 12440                                  				 ;G save echo state of parent
 12441 0000098A 26881E0100              	mov	[es:BATCHSEGMENT.BatEchoFlag],bl
 12442                                  ;SR;
 12443                                  ; Initialize the new BatchEOF flag we have added to 0
 12444                                  
 12445                                  	; MSDOS 6.0
 12446                                  	;mov	byte [es:2],0
 12447 0000098F 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 12448                                  
 12449                                  	;mov	[es:08h],ax  ; MSDOS 6.0
 12450 00000995 26A30800                	mov	[es:BATCHSEGMENT.BatSeek],ax ; point to beginning of file
 12451                                  	;mov	[es:0Ah],ax  ; MSDOS 6.0	
 12452 00000999 26A30A00                	mov	[es:BATCHSEGMENT.BatSeek+2],ax
 12453                                  
 12454                                  ; Initialize pointers
 12455                                  
 12456 0000099D 48                      	dec	ax		; put -1 into AX
 12457                                  	;;mov	di,0Bh  ; MSDOS 3.3
 12458                                  				; point to parm area
 12459                                  	;mov	di,0Ch	; MSDOS 6.0
 12460 0000099E BF0C00                  	mov	di,BATCHSEGMENT.BatParm
 12461 000009A1 89FB                    	mov	bx,di
 12462 000009A3 B90A00                  	mov	cx,10
 12463 000009A6 F3AB                    	rep stosw		; Init to no parms
 12464                                  
 12465                                  ; Move in batch file name
 12466                                  
 12467 000009A8 89D1                    	mov	cx,dx
 12468 000009AA F3A4                    	rep	movsb
 12469                                  
 12470                                  ; Now copy the command line into batch segment, parsing the arguments along
 12471                                  ; the way. Segment will look like this:
 12472                                  ;
 12473                                  ;   <arg0>CR<arg1>CR...<arg9>CR<arg10>CR...<ARGn>CR 0
 12474                                  ;
 12475                                  ; or, in the case of fewer arguments:
 12476                                  ;
 12477                                  ;   <arg0>CR<arg1>CR...<arg6>CR CR CR ... CR 0
 12478                                  
 12479 000009AC BE[C49A]                	mov	si,COMBUF+2
 12480                                  	;mov	cx,10		; at most 10 arguments
 12481                                  	; 07/06/2023
 12482 000009AF B10A                    	mov	cl,10
 12483                                  EACHPARM:
 12484 000009B1 E8D01F                  	call	scanoff		; skip to argument
 12485                                  
 12486                                  ; AL is first non-delimiter. DS:SI points to char = AL
 12487                                  
 12488 000009B4 3C0D                    	cmp	al,0Dh		; end of road?
 12489 000009B6 741D                    	jz	short HAVPARM	; yes, no more arguments
 12490                                  
 12491                                  ; If CX = 0 then we have stored the most parm we can. Skip store
 12492                                  
 12493 000009B8 E306                    	jcxz	MOVPARM		; Only first 10 parms get pointers
 12494                                  
 12495                                  ; Go into allocated piece and stick in new argument pointer.
 12496                                  
 12497 000009BA 26893F                  	mov	[es:bx],di	; store batch pointer
 12498 000009BD 83C302                  	add	bx,2		; advance arg counter
 12499                                  
 12500                                  ; Move the parameter into batch segment
 12501                                  
 12502                                  MOVPARM:
 12503 000009C0 AC                      	lodsb			; get byte
 12504 000009C1 E8C81F                  	call	DELIM		; if delimiter
 12505 000009C4 7407                    	jz	short ENDPARM	; then done with parm
 12506 000009C6 AA                      	stosb			; store byte
 12507 000009C7 3C0D                    	cmp	al,0Dh		; if CR then not delimiter
 12508 000009C9 740A                    	jz	short HAVPARM	; but end of parm list, finish
 12509 000009CB EBF3                    	jmp	short MOVPARM
 12510                                  
 12511                                  ; We have copied a parameter up until the first separator.
 12512                                  ; Terminate it with CR.
 12513                                  
 12514                                  ENDPARM:
 12515 000009CD B00D                    	mov	al,0Dh
 12516 000009CF AA                      	stosb
 12517 000009D0 E3DF                    	jcxz	EACHPARM	; if no parameters, don't dec
 12518 000009D2 49                      	dec	cx		; remember that we've seen one.	
 12519 000009D3 EBDC                    	jmp	short EACHPARM
 12520                                  
 12521                                  ; We have parsed the entire line. Terminate the arg list
 12522                                  
 12523                                  HAVPARM:
 12524 000009D5 30C0                    	xor	al,al		; Nul terminate the parms
 12525 000009D7 AA                      	stosb
 12526                                  
 12527                                  ; Now we know EXACTLY how big the BATCH segment is. Round up size (from DI)
 12528                                  ; into paragraphs and setblock to the appropriate size
 12529                                  
 12530 000009D8 8D5D0F                  	lea	bx,[di+15]
 12531 000009DB B104                    	mov	cl,4
 12532 000009DD D3EB                    	shr	bx,cl
 12533 000009DF B44A                    	mov	ah,4Ah
 12534                                  	;mov	ah,SETBLOCK ; 4Ah
 12535                                  
 12536                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12537                                  %if 0
 12538                                  	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 12539                                  			; ES = segment address of block	to change
 12540                                  			; BX = new size	in paragraphs
 12541                                  %else
 12542 000009E1 E8D6FB                  	call	int_21h_indirect
 12543                                  %endif
 12544                                  
 12545 000009E4 07                      	pop	es
 12546 000009E5 06                      	push	es
 12547 000009E6 1F                      	pop	ds		; Simply batch FCB setup
 12548 000009E7 833E[A502]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 12549 000009EC 7506                    	jne	short NOBATSING
 12550 000009EE C706[A502]F0FF          	mov	word [SingleCom],0FFF0h ; Flag single command BATCH job
 12551                                  
 12552                                  NOBATSING:
 12553                                  
 12554                                  ; Enter the batch file with the current echo state
 12555                                  
 12556 000009F4 58                      	pop	ax		; Get original echo state
 12557 000009F5 A2[9D02]                	mov	[EchoFlag],al	; restore it
 12558 000009F8 E909F7                  	jmp	TCOMMAND
 12559                                  
 12560                                  ; The following is executed if there isn't enough memory for batch segment
 12561                                  
 12562                                  NO_MEMORY:
 12563 000009FB 5A                      	pop	dx		; even up our stack 
 12564 000009FC 58                      	pop	ax
 12565 000009FD 58                      	pop	ax
 12566 000009FE E823FE                  	call	ALLOC_TPA	; reallocate memory
 12567                                  
 12568                                  	; 12/02/2023
 12569                                  	; MSDOS 3.3
 12570                                  	;mov	dx,INSFMEMMESPTR
 12571                                  	;jmp	CERROR
 12572                                  
 12573                                  	; MSDOS 6.0
 12574                                  	;mov	byte [msg_disp_class],1
 12575 00000A01 C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class
 12576                                  				;AN000; set up extended error msg class
 12577                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 12578 00000A06 BA[DA8F]                	mov	dx,extend_buf_ptr
 12579                                  	;			;AC000; get extended message pointer
 12580                                  	;mov	word [extend_buf_ptr],8
 12581 00000A09 C706[DA8F]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 12582                                  				;AN000; get message number in control block
 12583 00000A0F E91223                  	jmp	cerror		;g print error message and go...
 12584                                  
 12585                                  ; =============== S U B	R O U T	I N E =======================================
 12586                                  
 12587                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12588                                  	; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 12589                                  BATCHOFF:
 12590 00000A12 50                      	push	ax
 12591 00000A13 06                      	push	es
 12592 00000A14 1E                      	push	ds
 12593 00000A15 53                      	push	bx
 12594                                  
 12595 00000A16 2E8E06[639C]            	mov	es,[cs:RESSEG]
 12596                                  	;mov	ds,[cs:RESSEG]
 12597                                  	; 26/07/2024
 12598 00000A1B 06                      	push	es
 12599 00000A1C 1F                      	pop	ds
 12600                                  
 12601 00000A1D A1[4902]                	mov	ax,[Batch]	; Free the batch segment
 12602 00000A20 09C0                    	or	ax,ax
 12603 00000A22 7443                    	jz	short NOTFREE
 12604                                  
 12605 00000A24 06                      	push	es
 12606 00000A25 8EC0                    	mov	es,ax
 12607 00000A27 F606[9D02]01            	test	byte [EchoFlag],1
 12608                                  				;G Is echo on?
 12609 00000A2C 7505                    	jnz	short ECHO_LAST_LINE
 12610                                  				;G Yes - echo last line in file
 12611                                  	;mov	byte [SUPPRESS],0
 12612 00000A2E C606[9E02]00            	mov	byte [Suppress],NO_ECHO
 12613                                  				;G no - don't echo last line in file	
 12614                                  ECHO_LAST_LINE:
 12615                                  	;mov	bl,[es:1]
 12616 00000A33 268A1E0100              	mov	bl,[es:BATCHSEGMENT.BatEchoFlag]
 12617                                  				; G get echo state
 12618 00000A38 881E[9D02]              	mov	[EchoFlag],bl
 12619                                  				; G  and restore it
 12620                                  	;;mov	bx,[es:4]  ; MSDOS 3.3
 12621                                  	;mov	bx,[es:5]  ; MSDOS 6.0
 12622 00000A3C 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr]
 12623                                  				;G Get FOR segment
 12624 00000A41 891E[AC02]              	mov	[ForPtr],bx	;G  and restore it
 12625                                  	;;mov	bl,[es:6]  ; MSDOS 3.3
 12626                                  	;mov	bl,[es:7]  ; MSDOS 6.0	
 12627 00000A45 268A1E0700              	mov	bl,[es:BATCHSEGMENT.BatForFlag]
 12628                                  				;G Get FOR flag
 12629 00000A4A 881E[AB02]              	mov	[ForFlag],bl
 12630                                  				;G  and restore it
 12631                                  	;;mov	bx,[es:2] ; MSDOS 3.3
 12632                                  	;mov	bx,[es:3] ; MSDOS 6.0	
 12633 00000A4E 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 12634                                  				;G  Get old batch segment
 12635 00000A53 B449                    	mov	ah,49h
 12636                                  	;mov	ah,DEALLOC ; 49h
 12637                                  
 12638                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12639                                  %if 0
 12640                                  	int	21h	; DOS -	2+ - FREE MEMORY
 12641                                  			; ES = segment address of area to be freed
 12642                                  %else
 12643 00000A55 E862FB                  	call	int_21h_indirect
 12644                                  %endif
 12645                                  
 12646 00000A58 07                      	pop	es
 12647 00000A59 891E[B202]              	mov	[Next_Batch],bx	;G reset batch segment	
 12648 00000A5D 26FF0E[AE02]            	dec	word [es:Nest]
 12649 00000A62 31C0                    	xor	ax,ax
 12650 00000A64 A3[4902]                	mov	[Batch],ax	; No batch in progress
 12651                                  NOTFREE:
 12652 00000A67 5B                      	pop	bx
 12653 00000A68 1F                      	pop	ds
 12654 00000A69 07                      	pop	es
 12655 00000A6A 58                      	pop	ax
 12656 00000A6B C3                      	retn
 12657                                  
 12658                                  ; =============== S U B	R O U T	I N E =======================================
 12659                                  
 12660                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12661                                  
 12662                                  ; StrCpy - copy string, checking count in CX against COMBUFLEN
 12663                                  ;	Entry : DS:SI ==> source string
 12664                                  ;		ES:DI ==> destination string
 12665                                  ;		CX = current length of destination string
 12666                                  ;	Exit  : string copied, CX updated, Carry set if length limit exceeded
 12667                                  
 12668                                  	; 12/02/2023	
 12669                                  	; MSDOS 3.3
 12670                                  ;STRCPY:
 12671                                  	;push	ax
 12672                                  ;CCYCLE:
 12673                                  	;lodsb
 12674                                  	;stosb
 12675                                  	;or	al,al
 12676                                  	;jnz	short CCYCLE
 12677                                  	;pop	ax
 12678                                  	;retn
 12679                                  
 12680                                  ;Procedure StrCpy,NEAR
 12681                                  
 12682                                  	; 12/02/2023
 12683                                  	; MSDOS 6.0
 12684                                  STRCPY:
 12685 00000A6C 50                      	push	ax
 12686                                  ccycle:
 12687 00000A6D AC                      	lodsb
 12688 00000A6E 41                      	inc	cx
 12689                                  	;cmp	cx,128
 12690 00000A6F 81F98000                	cmp	cx,COMBUFLEN
 12691                                  	;jb	short ccopy
 12692                                  	;stc			; set carry to signal error
 12693                                  	;jmp	short ccend
 12694                                  	; 12/02/2023
 12695 00000A73 F5                      	cmc
 12696 00000A74 7205                    	jc	short ccend
 12697                                  ccopy:
 12698 00000A76 AA                      	stosb
 12699 00000A77 08C0                    	or	al,al
 12700 00000A79 75F2                    	jnz	short ccycle
 12701                                  ccend:
 12702 00000A7B 49                      	dec	cx		; discount extra byte
 12703 00000A7C 4F                      	dec	di		; back up pointer
 12704 00000A7D 58                      	pop	ax
 12705 00000A7E C3                      	retn			; return carry clear
 12706                                  
 12707                                  ;EndProc StrCpy
 12708                                  
 12709                                  ;============================================================================
 12710                                  ; TBATCH2.ASM, MSDOS 6.0, 1991
 12711                                  ;============================================================================
 12712                                  ; 12/10/2018 - Retro DOS v3.0
 12713                                  
 12714                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0892h
 12715                                  
 12716                                  ; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12717                                  
 12718                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 0977h
 12719                                  
 12720                                  ; =============== S U B	R O U T	I N E =======================================
 12721                                  
 12722                                  ;Break	<GetBatByt - retrieve a byte from the batch file>
 12723                                  
 12724                                  ; Get one byte from the batch file and return it in AL. End-of-file returns
 12725                                  ; <CR> and ends batch mode. DS must be set to resident segment.
 12726                                  ; AH, DX destroyed.
 12727                                  
 12728                                  ; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 12729                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 0A95h
 12730                                  
 12731                                  GETBATBYT:
 12732 00000A7F 53                      	push	bx
 12733 00000A80 51                      	push	cx
 12734 00000A81 1E                      	push	ds
 12735 00000A82 F606[9302]FF            	test	byte [Batch_Abort],-1
 12736                                  	;jnz	short BATEOF
 12737                                  	; 14/02/2023
 12738 00000A87 7403                    	jz	short getbatbyt1
 12739 00000A89 E9D200                  	jmp	BATEOF
 12740                                  getbatbyt1:
 12741 00000A8C F706[4902]FFFF          	test	word [Batch],-1
 12742                                  	;jz	short BATEOF
 12743                                  	; 14/02/2023
 12744 00000A92 7503                    	jnz	short getbatbyt2
 12745 00000A94 E9C700                  	jmp	BATEOF
 12746                                  getbatbyt2:
 12747 00000A97 06                      	push	es
 12748 00000A98 8E06[4902]              	mov	es,[Batch]
 12749                                  
 12750                                  	; MSDOS 6.0
 12751                                  ;M020;
 12752                                  ;Check if we have already reached EOF (BatchEOF flag set. Then, we do not
 12753                                  ;try to read from the batchfile again.
 12754                                  
 12755                                  	;cmp	byte [es:2],0
 12756 00000A9C 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 12757                                  				;already reached EOF?	;M020
 12758 00000AA2 7403                    	jz	short not_eof	;no, read batch file	;M020
 12759 00000AA4 E99D00                  	jmp	At_EOF		;yes, no more reads	;M020
 12760                                  not_eof:						;M020
 12761                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12762                                  	;add	word [es:8],1	; MSDOS 6.0
 12763 00000AA7 268306080001            	add	word [es:BATCHSEGMENT.BatSeek],1
 12764                                  	;adc	word [es:10],0	; MSDOS 6.0
 12765 00000AAD 2683160A0000            	adc	word [es:BATCHSEGMENT.BatSeek+2],0
 12766 00000AB3 07                      	pop	es
 12767                                  
 12768                                  ; See if we have bytes buffered...
 12769                                  
 12770 00000AB4 8CC8                    	mov	ax,cs
 12771 00000AB6 8ED8                    	mov	ds,ax
 12772 00000AB8 8B1E[37A6]              	mov	bx,[BATBUFPOS]
 12773 00000ABC 83FBFF                  	cmp	bx,-1
 12774 00000ABF 7541                    	jnz	short UNBUF
 12775                                  
 12776                                  ; There are no bytes in the buffer. Let's try to fill it up.
 12777                                  
 12778 00000AC1 BA[39A6]                	mov	dx,BATBUF
 12779 00000AC4 8B0E[E895]              	mov	cx,[BATBUFLEN] ; max to read.
 12780 00000AC8 8B1E[649F]              	mov	bx,[BATHAND]
 12781                                  	; 14/02/2023
 12782 00000ACC B43F                    	mov	ah,3Fh
 12783                                  	;mov	ah,READ ; 3Fh	; Get one more byte from batch file
 12784                                  
 12785                                  ; 26/07/2024 - PCDOS 7.1 COMMAND.COM
 12786                                  %if 0
 12787                                  	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 12788                                  			; BX = file handle,CX = number	of bytes to read
 12789                                  			; DS:DX	-> buffer
 12790                                  %else
 12791 00000ACE E8E9FA                  	call	int_21h_indirect
 12792                                  %endif
 12793                                  
 12794                                  	; MSDOS 6.0
 12795 00000AD1 7321                    	jnc	short bat_read_ok	;AN022; if no error - continue
 12796                                  	;invoke	get_ext_error_number	;AN022; get the error
 12797 00000AD3 E87315                  	call	get_ext_error_number
 12798 00000AD6 1E                      	push	ds			;AN022; save local segment
 12799 00000AD7 8E1E[639C]              	mov	ds,[RESSEG]		;AN022; get resident segment
 12800                                  	;assume ds:resgroup		;AN022;
 12801 00000ADB 89C2                    	mov	dx,ax			;AN022; put error in DX
 12802                                  	;invoke	output_batch_name	;AN022; set up to print the error
 12803 00000ADD E857FB                  	call	output_batch_name
 12804 00000AE0 1F                      	pop	ds			;AN022;
 12805                                  	;assume	ds:trangroup		;AN022;
 12806                                  	;invoke	std_eprintf		;AN022; print out the error
 12807 00000AE1 E83C49                  	call	std_eprintf
 12808                                  	;mov	byte ptr combuf+2,end_of_line_in
 12809 00000AE4 C606[C49A]0D            	mov	byte [COMBUF+2],END_OF_LINE_IN ; 0Dh
 12810                                  	;				;AN022; terminate the batch line for parsing
 12811                                  	;mov	byte ptr combuf+3,end_of_line_out 
 12812 00000AE9 C606[C59A]00            	mov	byte [COMBUF+3],END_OF_LINE_OUT ; 0
 12813                                  	;				;AN022; terminate the batch line for output
 12814                                  ;M020;
 12815                                  ;Old bug! We jump to BatEof from here without ds=RESGROUP. Probably, this
 12816                                  ;error is never hit (and it shouldn't be)
 12817                                  
 12818 00000AEE 8E1E[639C]              	mov	ds,[RESSEG]		; ds = RESGROUP ; M020
 12819 00000AF2 EB6A                    	jmp	short BATEOF		;AN022; terminate the batch file
 12820                                  bat_read_ok:				;AN022;
 12821                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12822 00000AF4 89C1                    	mov	cx,ax
 12823                                  	;jcxz	TURN_OFF ; MSDOS 3.3
 12824                                  	; 14/02/2023
 12825 00000AF6 E320                    	jcxz	BATEOFDS ; MSDOS 6.0
 12826 00000AF8 890E[59A6]              	mov	[BATBUFEND],cx
 12827 00000AFC 31DB                    	xor	bx,bx
 12828 00000AFE 891E[37A6]              	mov	[BATBUFPOS],bx
 12829                                  
 12830                                  	; Buffered bytes!
 12831                                  UNBUF:
 12832 00000B02 8A87[39A6]              	mov	al,[BATBUF+bx]		; get next byte
 12833 00000B06 43                      	inc	bx
 12834 00000B07 3B1E[59A6]              	cmp	bx,[BATBUFEND]		; beyond end of buffer?
 12835 00000B0B 7203                    	jb	short SETBUFPOS
 12836 00000B0D BBFFFF                  	mov	bx,-1
 12837                                  SETBUFPOS:
 12838 00000B10 891E[37A6]              	mov	[BATBUFPOS],bx
 12839 00000B14 3C1A                    	cmp	al,1Ah			; ^Z for termination?
 12840 00000B16 7575                    	jne	short GETBYTEDONE
 12841                                  
 12842                                  ;We get here only when we hit an EOF
 12843                                  	
 12844                                  	; MSDOS 6.0
 12845                                  BATEOFDS:
 12846                                  ;SR;
 12847                                  ; HACK!!! A massive hack being put in here to get batch processing to work
 12848                                  ;properly on EOF. Previously, a CR was returned and batch processing turned
 12849                                  ;off the moment we hit an EOF. Unfortunately, if the last line had no CR-LF,
 12850                                  ;batch processing is turned off before the last line is processed and so 
 12851                                  ;this line would never be executed. 
 12852                                  ;   	To fix this, a new flag BatchEOF has been introduced. This flag is
 12853                                  ;set to 4 if there is no CR-LF before the EOF -- this is determined by looking
 12854                                  ;at the buffer contents. If there is no LF ( we assume that presence of LF
 12855                                  ;indicated a CR-LF combination), then we set BatchEOF to 4 and return a 
 12856                                  ;fake CR to the caller. This decrements BatchEOF. On the next call to this
 12857                                  ;routine, BatchEOF is decremented to 2 and a fake lF is returned. On the 
 12858                                  ;third call, BatchEOF becomes zero and batch processing is turned off,
 12859                                  ;now that the last line has been processed. If the EOF is the first char read into the buffer 
 12860                                  ;during this call, and there was a CR-LF previously, we are going to fake
 12861                                  ;another redundant CR-LF. There is no work-around I can think of.
 12862                                  ; 	I would love to restructure this entire routine and its caller to
 12863                                  ;make the flow really easy to understand but I guess this will have to wait.
 12864                                  ;
 12865 00000B18 06                      	push	es
 12866 00000B19 8E06[639C]              	mov	es,[RESSEG]
 12867                                  ;SR;
 12868                                  ; If we had already set the BatchEOF flag on a previous call (BatchEOF == 2
 12869                                  ;or BatchEOF == 1 now), then do not do the LF check.
 12870                                  ;
 12871 00000B1D 268E06[4902]            	mov	es,[es:Batch]
 12872                                  	;cmp	byte [es:2],0
 12873 00000B22 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 12874 00000B28 7516                    	jnz	short crpresent
 12875                                  
 12876                                  	;inc	byte [es:2]
 12877 00000B2A 26FE060200              	inc	byte [es:BATCHSEGMENT.BatchEOF]
 12878                                  					;match the dec following
 12879 00000B2F 8B1E[59A6]              	mov	bx,[BATBUFEND]
 12880 00000B33 80BF[38A6]0A            	cmp	byte [bx+BATBUF-1],0Ah	;was a LF present?
 12881 00000B38 7406                    	je	short crpresent		;yes, no need to fake it
 12882                                  
 12883                                  	;add	byte [es:2],3
 12884 00000B3A 268006020003            	add	byte [es:BATCHSEGMENT.BatchEOF],3
 12885                                  					;BatchEOF == 4 to fake CR-LF
 12886                                  crpresent:
 12887                                  ;;	;pop	es
 12888                                  
 12889                                  	;ASSUME	DS:TranGroup
 12890                                  	; 14/02/2023
 12891 00000B40 8E1E[639C]              	mov	ds,[RESSEG]
 12892                                  	;ASSUME	DS:ResGroup
 12893                                  ;SR;
 12894                                  ; The shift operation is done here to replace the decrement. This is because
 12895                                  ;we can jump to this label directly from above when bogus calls are made to
 12896                                  ;this routine even after batch processing is turned off. The shift ensures
 12897                                  ;maintains the following invariance : 4 -> 2; 2 -> 1 ; 1 -> 0; 0 -> 0. Thus,
 12898                                  ;it is used as a decrement and also as a NOP to just fall through on bogus 
 12899                                  ;calls.
 12900                                  ;	We turn batch processing off if BatchEOF == 1 or BatchEOF == 0.
 12901                                  ;BatchEOF == 1 when we fall through from BatEOFDS and BatchEOF == 0 on a 
 12902                                  ;direct jump to BATEOF. If BatchEOF == 4, we return a fake CR-LF without 
 12903                                  ;turning batch processing off.
 12904                                  
 12905                                  At_EOF:					;new label added ;M020
 12906                                  	;shr	byte [es:2],1
 12907 00000B44 26D02E0200              	shr	byte [es:BATCHSEGMENT.BatchEOF],1
 12908                                  					;decrement the flag
 12909 00000B49 7412                    	jz	short turn_off		;zero,turn batch off
 12910                                  	;cmp	byte [es:2],1
 12911 00000B4B 26803E020001            	cmp	byte [es:BATCHSEGMENT.BatchEOF],1				
 12912 00000B51 7405                    	jz	short ret_lf		;BatchEOF was 2, return LF
 12913                                  ;
 12914                                  ;BatchEOF == 4, indicates return fake CR now and fake LF next.
 12915                                  ;
 12916 00000B53 B00D                    	mov	al,0Dh			;return fake CR.
 12917 00000B55 07                      	pop	es
 12918 00000B56 EB35                    	jmp	short GETBYTEDONE
 12919                                  ret_lf:
 12920 00000B58 B00A                    	mov	al,0Ah			;return fake LF
 12921 00000B5A 07                      	pop	es
 12922 00000B5B EB30                    	jmp	short GETBYTEDONE		
 12923                                  turn_off:
 12924 00000B5D 07                      	pop	es
 12925                                  ;BATEOF:
 12926                                  	; MSDOS 3.3
 12927                                  ;TURN_OFF:
 12928                                  	;mov	ds,[RESSEG]
 12929                                  
 12930                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12931                                  BATEOF:
 12932 00000B5E E8B1FE                  	call	BATCHOFF
 12933 00000B61 E8CC02                  	call	BATCLOSE
 12934                                  
 12935                                  ;;;	mov	BatchEOF,0	;make sure BatchEOF = 0
 12936                                  
 12937                                  ;SR; BugBug
 12938                                  ; There is a good reason why this carriage return is being returned here. 
 12939                                  ;This was part of the old code, thanks to some brain-damaged coding. Because,
 12940                                  ;of the way the caller is structured, a fake CR has to be returned again on
 12941                                  ;EOF to ensure the termination of the caller's loop. If echo is on, this
 12942                                  ;results in an extra linefeed after the batchfile is run if the last line of
 12943                                  ;the batchfile already had a CR-LF. 
 12944                                  ;NB: Do not confuse this with the faked CR. The fake CR-LF was to mark
 12945                                  ;the end-of-line. This CR is to mark the end-of-file.
 12946                                  
 12947 00000B64 B00D                    	mov	al,0Dh			; If end-of-file, then end of line
 12948 00000B66 F606[9302]FF            	test	byte [Batch_Abort],-1
 12949 00000B6B C606[9302]00            	mov	byte [Batch_Abort],0
 12950 00000B70 7407                    	jz	short CONT_GET_BYT
 12951 00000B72 BF[C49A]                	mov	di,COMBUF+2		; reset pointer to beginning of buffer
 12952 00000B75 31C9                    	xor	cx,cx			; zero line length
 12953 00000B77 EB14                    	jmp	short GETBYTEDONE
 12954                                  CONT_GET_BYT:
 12955 00000B79 833E[A502]F0            	cmp	word [SingleCom],0FFF0h ; See if we need to set SINGLECOM
 12956 00000B7E 750D                    	jne	short GETBYTEDONE
 12957 00000B80 833E[AE02]00            	cmp	word [Nest],0		;G See if we have nested batch files
 12958 00000B85 7506                    	jnz	short GETBYTEDONE	;G Yes - don't exit just yet
 12959 00000B87 C706[A502]FFFF          	mov	word [SingleCom],0FFFFh	; -1 ; Cause termination
 12960                                  GETBYTEDONE:
 12961 00000B8D 1F                      	pop	ds
 12962 00000B8E 59                      	pop	cx
 12963 00000B8F 5B                      	pop	bx
 12964 00000B90 C3                      	retn
 12965                                  
 12966                                  ; ---------------------------------------------------------------------------
 12967                                  
 12968                                  ;break	<$If - conditional execution>
 12969                                  
 12970                                  	; 17/04/2023
 12971                                  ;IFERRORP:
 12972                                  ;	pop	ax
 12973                                  ;IFERROR:
 12974                                  ;	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 12975                                  ;FORERROR:
 12976                                  ;	mov	dx,SYNTMES_PTR
 12977                                  ;	jmp	cerror
 12978                                  
 12979                                  ; ---------------------------------------------------------------------------
 12980                                  
 12981                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12982                                  	;
 12983                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12984                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0B69h
 12985                                  
 12986                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12987                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:0BAEh
 12988                                  _$IF:
 12989                                  	; MSDOS 6.0
 12990                                  ; Turn off any pipes in progress.
 12991 00000B91 1E                      	push	ds			;AN004; save local DS
 12992 00000B92 8E1E[639C]              	mov	ds,[RESSEG]		;AN004; get resident segment
 12993                                  	;assume	ds:resgroup		;AN004;
 12994 00000B96 803E[1403]00            	cmp	byte [PipeFiles],0	;AN004; Only turn off if present.
 12995 00000B9B 7403                    	jz	short IFNoPipe		;AN004; no pipe - continue
 12996                                  	;invoke	PipeDel 		;AN004; turn off piping
 12997 00000B9D E87E25                  	call	PIPEDEL	
 12998                                  IFNoPipe:				;AN004;
 12999 00000BA0 1F                      	pop	ds			;AN004; get local DS back
 13000                                  	;assume	ds:trangroup		;AN004;
 13001                                  
 13002                                  	; MSDOS 3.3 (&MSDOS 6.0)
 13003 00000BA1 C606[769C]00            	mov	byte [IFNOTFLAG],0
 13004 00000BA6 C706[0CA5]0000          	mov	word [IF_NOT_COUNT],0
 13005 00000BAC BE8100                  	mov	si,81h
 13006                                  IFREENT:
 13007 00000BAF E8D21D                  	call	scanoff
 13008 00000BB2 3C0D                    	cmp	al,0Dh
 13009 00000BB4 743C                    	je	short IFERROR
 13010 00000BB6 89F5                    	mov	bp,si
 13011 00000BB8 BF[3794]                	mov	di,IFTAB		; Prepare to search if table	
 13012                                  	;mov	ch,0
 13013                                  	; 17/04/2023
 13014 00000BBB 30ED                    	xor	ch,ch
 13015                                  IFINDCOM:
 13016 00000BBD 89EE                    	mov	si,bp
 13017 00000BBF 8A0D                    	mov	cl,[di]
 13018 00000BC1 47                      	inc	di
 13019 00000BC2 E33E                    	jcxz	IFSTRING
 13020 00000BC4 EB02                    	jmp	short FIRSTCOMP
 13021                                  IFCOMP:
 13022 00000BC6 7510                    	jnz	short IF_DIF
 13023                                  FIRSTCOMP:
 13024 00000BC8 AC                      	lodsb
 13025 00000BC9 268A25                  	mov	ah,[es:di]
 13026 00000BCC 47                      	inc	di
 13027 00000BCD 38E0                    	cmp	al,ah
 13028 00000BCF 7405                    	je	short IFLP
 13029 00000BD1 80CC20                  	or	ah,20h			; Try lower case
 13030 00000BD4 38E0                    	cmp	al,ah
 13031                                  IFLP:
 13032 00000BD6 E2EE                    	loop	IFCOMP
 13033                                  IF_DIF:
 13034 00000BD8 9F                      	lahf
 13035 00000BD9 01CF                    	add	di,cx			; Bump to next position without affecting flags
 13036 00000BDB 8B1D                    	mov	bx,[di]			; Get handler address
 13037 00000BDD 47                      	inc	di
 13038 00000BDE 47                      	inc	di
 13039 00000BDF 9E                      	sahf
 13040 00000BE0 75DB                    	jnz	short IFINDCOM
 13041 00000BE2 AC                      	lodsb
 13042 00000BE3 3C0D                    	cmp	al,0Dh
 13043                                  IFERRJ:
 13044 00000BE5 740B                    	jz	short IFERROR
 13045 00000BE7 E8A21D                  	call	DELIM
 13046 00000BEA 75D1                    	jnz	short IFINDCOM
 13047 00000BEC E8951D                  	call	scanoff
 13048 00000BEF FFE3                    	jmp	bx
 13049                                  
 13050                                  	; 17/04/2023
 13051                                  IFERRORP:
 13052 00000BF1 58                      	pop	ax
 13053                                  IFERROR:
 13054                                  	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 13055                                  FORERROR:
 13056 00000BF2 BA[AD90]                	mov	dx,SYNTMES_PTR
 13057 00000BF5 E92C21                  	jmp	cerror
 13058                                  
 13059                                  IFNOT:
 13060 00000BF8 F616[769C]              	not	byte [IFNOTFLAG]
 13061 00000BFC FF06[0CA5]              	inc	word [IF_NOT_COUNT]
 13062 00000C00 EBAD                    	jmp	short IFREENT
 13063                                  
 13064                                  ; We are comparing two strings for equality. First, find the end of the
 13065                                  ; first string.
 13066                                  
 13067                                  IFSTRING:
 13068 00000C02 56                      	push	si			; save away pointer for later compare
 13069 00000C03 31C9                    	xor	cx,cx			; count of chars in first string
 13070                                  FIRST_STRING:
 13071 00000C05 AC                      	lodsb				; get character
 13072 00000C06 3C0D                    	cmp	al,0Dh			; end of line?
 13073 00000C08 74E7                    	jz	short IFERRORP		; yes => error
 13074 00000C0A E87F1D                  	call	DELIM			; is it a delimiter?
 13075 00000C0D 7403                    	jz	short EQUAL_CHECK 	; yes, go find equal sign
 13076 00000C0F 41                      	inc	cx			; remember 1 byte for the length
 13077 00000C10 EBF3                    	jmp	short FIRST_STRING 	; go back for more
 13078                                  EQUAL_CHECK:
 13079 00000C12 3C3D                    	cmp	al,'='			; is char we have an = sign?
 13080 00000C14 7407                    	je	short EQUAL_CHECK2 	; yes, go find second one.
 13081 00000C16 3C0D                    	cmp	al,0Dh			; end of line?
 13082 00000C18 74D7                    	je	short IFERRORP		; yes, syntax error
 13083 00000C1A AC                      	lodsb				; get next char
 13084 00000C1B EBF5                    	jmp	short EQUAL_CHECK
 13085                                  
 13086                                  ; The first = has been found. The next char had better be an = too.
 13087                                  
 13088                                  EQUAL_CHECK2:
 13089 00000C1D AC                      	lodsb				; get potential = char
 13090 00000C1E 3C3D                    	cmp	al,'='			; is it good?	
 13091                                  	;jnz	short IFERRPJ		; no, error
 13092                                  	; 17/04/2023
 13093 00000C20 75CF                    	jne	short IFERRORP
 13094                                  
 13095                                  ; Find beginning of second string.
 13096                                  
 13097 00000C22 E85F1D                  	call	scanoff
 13098 00000C25 3C0D                    	cmp	al,0Dh
 13099                                  	;jz	short IFERRPJ
 13100                                  	; 17/04/2023
 13101 00000C27 74C8                    	je	short IFERRORP
 13102 00000C29 5F                      	pop	di
 13103                                  
 13104                                  ; DS:SI points to second string
 13105                                  ; CX has number of chars in first string
 13106                                  ; ES:DI points to first string
 13107                                  
 13108 00000C2A F3A6                    	repe	cmpsb
 13109 00000C2C 7414                    	jz	short MATCH		; match found!
 13110                                  
 13111                                  ; No match. Let's find out what was wrong. The character that did not match
 13112                                  ; has been advanced over. Let's back up to it.
 13113                                  
 13114 00000C2E 4E                      	dec	si
 13115                                  
 13116                                  ; If it is EOL, then syntax error
 13117                                  
 13118 00000C2F 803C0D                  	cmp	byte [si],0Dh
 13119                                  	;jz	short IFERRJ
 13120                                  	; 17/04/2023
 13121 00000C32 74BE                    	je	short IFERROR
 13122                                  
 13123                                  ; Advance pointer over remainder of unmatched text to next delimiter
 13124                                  
 13125                                  SKIPSTRINGEND:
 13126 00000C34 AC                      	lodsb
 13127                                  NOTMATCH:
 13128 00000C35 3C0D                    	cmp	al,0Dh
 13129                                  IFERRORJ2:
 13130                                  	;jz	short IFERRJ
 13131                                  	; 17/04/2023
 13132 00000C37 74B9                    	jz	short IFERROR
 13133 00000C39 E8501D                  	call	DELIM
 13134 00000C3C 75F6                    	jnz	short SKIPSTRINGEND
 13135                                  
 13136                                  ; Signal that we did NOT have a match
 13137                                  
 13138 00000C3E B0FF                    	mov	al,-1	 ; 0FFh
 13139 00000C40 EB37                    	jmp	short IFRET
 13140                                  
 13141                                  	; 17/04/2023
 13142                                  ;IFERRPJ:
 13143                                  	;jmp	IFERRORP
 13144                                  
 13145                                  ; The compare succeeded. Was the second string longer than the first?
 13146                                  ; We do this by seeing if the next char is a delimiter.
 13147                                  
 13148                                  MATCH:
 13149 00000C42 AC                      	lodsb
 13150 00000C43 E8461D                  	call	DELIM
 13151 00000C46 75ED                    	jnz	short NOTMATCH ; not same.
 13152 00000C48 30C0                    	xor	al,al
 13153 00000C4A EB2D                    	jmp	short IFRET
 13154                                  
 13155                                  ; ---------------------------------------------------------------------------
 13156                                  
 13157                                  IFEXISTS:
 13158                                  
 13159                                  IFEXIST_ATTR	EQU	ATTR_HIDDEN+ATTR_SYSTEM  ; 2+4 = 6
 13160                                  
 13161                                  ;MOREDELIM:
 13162 00000C4C AC                      	lodsb
 13163 00000C4D E83C1D                  	call	DELIM
 13164 00000C50 75FA                    	jnz	short IFEXISTS
 13165                                  	;jnz	short MOREDELIM
 13166                                  
 13167 00000C52 BA[AB9D]                	mov	dx,DIRBUF
 13168 00000C55 B8001A                  	mov	ax,1A00h
 13169                                  	;mov	ax,Set_DMA*256 ; 1A00h
 13170 00000C58 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13171                                  			; DS:DX	-> disk	transfer buffer
 13172 00000C5A BB0200                  	mov	bx,2	; if(0) [|not](|1) exist[1|2] file(2|3)
 13173 00000C5D 031E[0CA5]              	add	bx,[IF_NOT_COUNT]
 13174                                  	;mov	ax,ARG_ARGV
 13175                                  	;mov	ax,ARG+ARG_UNIT.argv
 13176 00000C61 B8[C09F]                	mov	ax,ARG
 13177 00000C64 E82729                  	call	argv_calc		; convert arg index to pointer
 13178 00000C67 8B17                    	mov	dx,[bx]
 13179                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13180                                  	;mov	cx,6
 13181 00000C69 B90600                  	mov	cx,IFEXIST_ATTR ; filetypes to search for
 13182 00000C6C B8004E                  	mov	ax,4E00h
 13183                                  	;mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 13184 00000C6F CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13185                                  			; CX = search attributes
 13186                                  			; DS:DX	-> ASCIZ filespec
 13187                                  			; (drive,path, and wildcards allowed)
 13188 00000C71 7204                    	jc	short IF_EX_C ; carry is how to determine error
 13189 00000C73 30C0                    	xor	al,al
 13190 00000C75 EB02                    	jmp	short IFRET
 13191                                  
 13192                                  	;nop
 13193                                  IF_EX_C:
 13194 00000C77 B0FF                    	mov	al,-1	; 0FFh	; false 'n' fall through...
 13195                                  IFRET:
 13196 00000C79 F606[769C]FF            	test	byte [IFNOTFLAG],-1 ; 0FFh
 13197 00000C7E 7402                    	jz	short REALTEST
 13198 00000C80 F6D0                    	not	al
 13199                                  REALTEST:
 13200 00000C82 08C0                    	or	al,al
 13201 00000C84 7403                    	jz	short IFTRUE
 13202 00000C86 E97BF4                  	jmp	TCOMMAND
 13203                                  
 13204                                  IFTRUE:
 13205 00000C89 E8F81C                  	call	scanoff
 13206 00000C8C 89F1                    	mov	cx,si
 13207 00000C8E 81E98100                	sub	cx,81h
 13208 00000C92 280E8000                	sub	[80h],cl
 13209 00000C96 8A0E8000                	mov	cl,[80h]
 13210 00000C9A 880E[C39A]              	mov	[COMBUF+1],cl
 13211 00000C9E BF[C49A]                	mov	di,COMBUF+2
 13212 00000CA1 FC                      	cld
 13213 00000CA2 F3A4                    	rep	movsb
 13214 00000CA4 B00D                    	mov	al,0Dh
 13215 00000CA6 AA                      	stosb
 13216                                  
 13217                                  ; Signal that an IF was done. 
 13218                                  ; This prevents the redirections from getting lost.
 13219                                  
 13220 00000CA7 1E                      	push	ds
 13221 00000CA8 8E1E[639C]              	mov	ds,[RESSEG]
 13222 00000CAC C606[AA02]FF            	mov	byte [IfFlag],-1
 13223 00000CB1 1F                      	pop	ds
 13224                                  
 13225                                  ; Go do the command
 13226                                  
 13227                                  	;jmp	DOCOM1 ; MSDOS 5.0 COMMAND.COM
 13228                                  	; 07/06/2023
 13229                                  	; Retro DOS v4.2 COMMAND.COM
 13230 00000CB2 E940F6                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 13231                                  
 13232                                  ; ---------------------------------------------------------------------------
 13233                                  
 13234                                  IFERRORJ3:
 13235 00000CB5 EB80                    	jmp	IFERRORJ2
 13236                                  
 13237                                  IFERLEV:
 13238                                  
 13239                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13240                                  ; PCDOS 7.1 COMMAND.COM
 13241                                  ;%if 1
 13242                                  ;	cmp	byte [si],0F2h  ; CODE PAGE 437
 13243                                  ;	jne	short IFERLEV_@
 13244                                  ;	inc	si
 13245                                  ;IFERLEV_@:	
 13246                                  ;%endif
 13247 00000CB7 B70A                    	mov	bh,10
 13248 00000CB9 30DB                    	xor	bl,bl
 13249                                  GETNUMLP:
 13250 00000CBB AC                      	lodsb
 13251 00000CBC 3C0D                    	cmp	al,0Dh
 13252 00000CBE 74F5                    	je	short IFERRORJ3
 13253 00000CC0 E8C91C                  	call	DELIM
 13254 00000CC3 740C                    	jz	short GOTNUM
 13255 00000CC5 2C30                    	sub	al,'0'
 13256 00000CC7 86C3                    	xchg	al,bl
 13257 00000CC9 F6E7                    	mul	bh
 13258 00000CCB 00D8                    	add	al,bl
 13259 00000CCD 86C3                    	xchg	al,bl
 13260 00000CCF EBEA                    	jmp	short GETNUMLP
 13261                                  GOTNUM:
 13262 00000CD1 1E                      	push	ds
 13263 00000CD2 8E1E[639C]              	mov	ds,[RESSEG]
 13264 00000CD6 8A26[9A02]              	mov	ah,[RetCode]
 13265 00000CDA 1F                      	pop	ds
 13266 00000CDB 30C0                    	xor	al,al
 13267 00000CDD 38DC                    	cmp	ah,bl
 13268 00000CDF 7398                    	jnb	short IFRET
 13269 00000CE1 FEC8                    	dec	al
 13270 00000CE3 EB94                    	jmp	short IFRET
 13271                                  
 13272                                  ; ---------------------------------------------------------------------------
 13273                                  
 13274                                  ; Shift the parameters in the batch structure by 1 and set up the new argument.
 13275                                  ; This is a NOP if no batch in progress.
 13276                                  
 13277                                  _SHIFT:
 13278 00000CE5 8E1E[639C]              	mov	ds,[RESSEG]
 13279 00000CE9 A1[4902]                	mov	ax,[Batch]		; get batch pointer
 13280 00000CEC 09C0                    	or	ax,ax			; in batch mode?
 13281 00000CEE 7501                    	jnz	short SHIFT1		; yes, operate in batch segment	
 13282                                  SHIFT_RETN:				; no, done.
 13283 00000CF0 C3                      	retn
 13284                                  SHIFT1:
 13285 00000CF1 8EC0                    	mov	es,ax
 13286 00000CF3 8ED8                    	mov	ds,ax
 13287                                  
 13288                                  ; Now move the batch args down by 1 word
 13289                                  
 13290                                  	;;mov	di,0Bh ; MSDOS 3.3 COMMAND.COM
 13291                                  	;mov	di,0Ch ; MSDOS 5.0 COMMAND.COM
 13292 00000CF5 BF0C00                  	mov	di,BATCHSEGMENT.BatParm ; point to parm table
 13293 00000CF8 8D7502                  	lea	si,[di+2]		; make source = dest + 2
 13294 00000CFB B90900                  	mov	cx,9			; move 9 parameters
 13295 00000CFE F3A5                    	rep	movsw			; SHIFT down
 13296                                  
 13297                                  ; If the last parameter (the one not moved) is empty (= -1) then we are done.
 13298                                  ; We have copied it into the previous position.
 13299                                  
 13300 00000D00 833DFF                  	cmp	word [di],-1	; if last one was not in use then
 13301 00000D03 74EB                    	je	short SHIFT_RETN ; No new parm
 13302                                  
 13303                                  ; This last pointer is NOT nul. Get it and scan to find the next argument.
 13304                                  ; Assume, first, that there is no next argument.
 13305                                   
 13306 00000D05 8B35                    	mov	si,[di]
 13307 00000D07 C705FFFF                	mov	word [di],-1		; Assume no parm
 13308                                  
 13309                                  ; The parameters are CR separated. Scan for end of this parm.
 13310                                  
 13311                                  SKIPCRLP:
 13312 00000D0B AC                      	lodsb
 13313 00000D0C 3C0D                    	cmp	al,0Dh
 13314 00000D0E 75FB                    	jne	short SKIPCRLP
 13315                                  
 13316                                  ; We are now pointing at next arg. If it is 0 (end of original line) then we
 13317                                  ; are finished. There are no more parms and the pointer has been previously
 13318                                  ; initialized to indicate it.
 13319                                  
 13320 00000D10 803C00                  	cmp	byte [si],0
 13321 00000D13 74DB                    	jz	short SHIFT_RETN 	; End of parms
 13322 00000D15 8935                    	mov	[di],si			; Pointer to next parm as %9
 13323 00000D17 C3                      	retn
 13324                                  
 13325                                  ; =============== S U B	R O U T	I N E =======================================
 13326                                  
 13327                                  ; Skip delim reads bytes from the batch file until a non-delimiter is seen.
 13328                                  ; returns char in AL, carry set -> eof
 13329                                  
 13330                                  SKIPDELIM:
 13331 00000D18 F706[4902]FFFF          	test	word [Batch],-1		; batch file empty. OOPS!
 13332 00000D1E 740A                    	jz	short SKIPERR
 13333 00000D20 E85CFD                  	call	GETBATBYT		; get a char
 13334 00000D23 E8661C                  	call	DELIM			; check for ignoreable chars
 13335 00000D26 74F0                    	jz	short SKIPDELIM		; ignore this char.
 13336 00000D28 F8                      	clc
 13337 00000D29 C3                      	retn
 13338                                  SKIPERR:
 13339 00000D2A F9                      	stc
 13340                                  GOTO_RETN:
 13341 00000D2B C3                      	retn
 13342                                  
 13343                                  ; ---------------------------------------------------------------------------
 13344                                  
 13345                                  ;  CALL is an internal command that transfers control to a .bat, .exe, or
 13346                                  ;  .com file. This routine strips the CALL off the command line, sets
 13347                                  ;  the CALL_FLAG to indicate a call in progress, and returns control to
 13348                                  ;  DOCOM1 in TCODE to reprocess the command line and execute the file
 13349                                  ;  being CALLed.
 13350                                  
 13351                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13352                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0C27h
 13353                                  
 13354                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 13355                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0D01h
 13356                                  
 13357                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13358                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:0D4Ch
 13359                                  _$CALL:
 13360                                  
 13361                                  ;  strip off CALL from command line
 13362                                  
 13363                                  	;ASSUME DS:trangroup,ES:trangroup
 13364                                  
 13365 00000D2C 56                      	push	si
 13366 00000D2D 57                      	push	di
 13367 00000D2E 50                      	push	ax
 13368 00000D2F 51                      	push	cx
 13369 00000D30 BE[C49A]                	mov	si,COMBUF+2
 13370 00000D33 E84E1C                  	call	scanoff			;get to first non-delimeter
 13371                                  	;add	si,4
 13372 00000D36 83C604                  	add	si,length_call		;point to char past CALL
 13373 00000D39 BF[C49A]                	mov	di,COMBUF+2
 13374                                  	;mov	cx,124		
 13375 00000D3C B97C00                  	mov	cx,COMBUFLEN-length_call 
 13376                                  					;get length of buffer
 13377 00000D3F F3A4                    	rep	movsb			;move it
 13378 00000D41 59                      	pop	cx
 13379 00000D42 58                      	pop	ax
 13380 00000D43 5F                      	pop	di
 13381 00000D44 5E                      	pop	si
 13382                                  
 13383                                  ;  set call flag to indicate call in progress
 13384                                  
 13385 00000D45 1E                      	push	ds
 13386 00000D46 8E1E[639C]              	mov	ds,[RESSEG]
 13387 00000D4A C606[B002]01            	mov	byte [Call_Flag],call_in_progress ; 1
 13388 00000D4F C606[B102]01            	mov	byte [Call_Batch_Flag],call_in_progress ; 1
 13389                                  
 13390                                  ; Turn off any pipes in progress.
 13391                                  
 13392 00000D54 803E[1403]00            	cmp	byte [PipeFiles],0 	; Only turn off if present.
 13393 00000D59 7403                    	jz	short _NOPIPE
 13394 00000D5B E8C023                  	call	PIPEDEL
 13395                                  _NOPIPE:
 13396 00000D5E 1F                      	pop	ds
 13397 00000D5F C3                      	retn
 13398                                  
 13399                                  ; ---------------------------------------------------------------------------
 13400                                  
 13401                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13402                                  _GOTO:
 13403 00000D60 8E1E[639C]              	mov	ds,[RESSEG]
 13404 00000D64 F706[4902]FFFF          	test	word [Batch],-1	; If not in batch mode, a nop
 13405 00000D6A 74BF                    	jz	short GOTO_RETN
 13406 00000D6C 31D2                    	xor	dx,dx
 13407 00000D6E 1E                      	push	ds
 13408 00000D6F 8E1E[4902]              	mov	ds,[Batch]
 13409                                  	;mov	[8],dx	; MSDOS 5.0 COMMAND.COM
 13410 00000D73 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; Back to start
 13411                                  	;mov	[10],dx	; MSDOS 5.0 COMMAND.COM
 13412 00000D77 89160A00                	mov	[BATCHSEGMENT.BatSeek+2],dx ; Back to start
 13413                                  
 13414                                  	; MSDOS 6.0
 13415                                  ;M037
 13416                                  ; Clear EOF indicator because we have reseeked to the beginning of the file.
 13417                                  ;
 13418 00000D7B C606020000              	mov	byte [BATCHSEGMENT.BatchEOF],0
 13419                                  					; clear eof indicator ;M037
 13420                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13421 00000D80 1F                      	pop	ds
 13422                                  GOTOOPEN:
 13423 00000D81 E86BF8                  	call	PROMPTBAT
 13424                                  	;mov	di,5Dh
 13425 00000D84 BF5D00                  	mov	di,FCB+1		; Get the label
 13426 00000D87 B90B00                  	mov	cx,11
 13427 00000D8A B020                    	mov	al,' '
 13428 00000D8C F2AE                    	repne	scasb
 13429 00000D8E 7501                    	jnz	short NOINC
 13430 00000D90 41                      	inc	cx
 13431                                  NOINC:
 13432 00000D91 83E90B                  	sub	cx,11
 13433 00000D94 F7D9                    	neg	cx
 13434                                  	;mov	[cs:GOTOLEN],cx
 13435                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13436 00000D96 26890E[AB9D]            	mov	[es:GOTOLEN],cx	; MSDOS 5.0 (& 6.0)
 13437                                  
 13438                                  ; At beginning of file. Skip to first non-delimiter char
 13439                                  
 13440 00000D9B E87AFF                  	call	SKIPDELIM
 13441 00000D9E 721C                    	jb	short BADGOTO
 13442 00000DA0 3C3A                    	cmp	al,':'
 13443 00000DA2 7426                    	jz	short CHKLABEL
 13444                                  LABLKLP:				; Look for the label
 13445 00000DA4 E8D8FC                  	call	GETBATBYT
 13446 00000DA7 3C0A                    	cmp	al,0Ah
 13447 00000DA9 7509                    	jne	short LABLKTST
 13448                                  
 13449                                  ; At beginning of line. Skip to first non-delimiter char
 13450                                  
 13451 00000DAB E86AFF                  	call	SKIPDELIM
 13452 00000DAE 720C                    	jb	short BADGOTO
 13453 00000DB0 3C3A                    	cmp	al,':'
 13454 00000DB2 7416                    	je	short CHKLABEL
 13455                                  LABLKTST:
 13456 00000DB4 F706[4902]FFFF          	test	word [Batch],0FFFFh ; -1
 13457 00000DBA 75E8                    	jnz	short LABLKLP
 13458                                  BADGOTO:
 13459 00000DBC E87100                  	call	BATCLOSE
 13460                                  
 13461                                  	; MSDOS 6.0
 13462                                  ;SR;
 13463                                  ; At this point we are terminating without freeing up any nested batch 
 13464                                  ;segments i.e if the error occurred within a called batch file. This routine
 13465                                  ;will traverse the linked list of batch segments and free all of them.
 13466                                  ;
 13467 00000DBF E8BD00                  	call	free_batch		; free up nested batch segments
 13468                                  
 13469                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13470 00000DC2 0E                      	push	cs
 13471 00000DC3 1F                      	pop	ds
 13472 00000DC4 BA[AA90]                	mov	dx,BADLAB_PTR
 13473 00000DC7 E95A1F                  	jmp	cerror
 13474                                  
 13475                                  ; Found the :.	Skip to first non-delimiter char
 13476                                  
 13477                                  CHKLABEL:
 13478 00000DCA E84BFF                  	call	SKIPDELIM
 13479 00000DCD 72ED                    	jb	short BADGOTO
 13480 00000DCF BF5D00                  	mov	di,FCB+1 ; 5Dh
 13481                                  	;mov	cx,[cs:GOTOLEN]
 13482                                  	; 14/02/2023
 13483 00000DD2 268B0E[AB9D]            	mov	cx,[es:GOTOLEN]	 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 13484 00000DD7 EB05                    	jmp	short GOTBYTE
 13485                                  
 13486                                  NEXTCHRLP:
 13487 00000DD9 51                      	push	cx
 13488 00000DDA E8A2FC                  	call	GETBATBYT
 13489 00000DDD 59                      	pop	cx
 13490                                  GOTBYTE:
 13491                                  	; 18/03/2023
 13492                                  	; 14/02/2023
 13493                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CD9h
 13494 00000DDE E87E19                  	call	testkanj
 13495 00000DE1 7413                    	jz	short NOTKANJ1
 13496 00000DE3 263A05                  	cmp	al,[es:di]
 13497 00000DE6 75CC                    	jne	short LABLKTST
 13498 00000DE8 47                      	inc	di
 13499 00000DE9 49                      	dec	cx
 13500 00000DEA E3C8                    	jcxz	LABLKTST
 13501 00000DEC 51                      	push	cx
 13502 00000DED E88FFC                  	call	GETBATBYT
 13503 00000DF0 59                      	pop	cx
 13504 00000DF1 263A05                  	cmp	al,[es:di]
 13505 00000DF4 EB0C                    	jmp	short KNEXTLABCHR
 13506                                  NOTKANJ1:
 13507                                  	; 14/02/2023
 13508                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CF1h
 13509 00000DF6 0C20                    	or	al,20h
 13510 00000DF8 263A05                  	cmp	al,[es:di]
 13511                                  	;jne	short TRYUPPER
 13512                                  	;jmp	short NEXTLABCHR
 13513                                  	; 25/04/2023
 13514 00000DFB 7407                    	je	short NEXTLABCHR 
 13515                                  TRYUPPER:
 13516 00000DFD 2C20                    	sub	al,20h
 13517 00000DFF 263A05                  	cmp	al,[es:di]
 13518                                  KNEXTLABCHR:
 13519 00000E02 75B0                    	jnz	short LABLKTST
 13520                                  NEXTLABCHR:
 13521 00000E04 47                      	inc	di
 13522 00000E05 E2D2                    	loop	NEXTCHRLP
 13523 00000E07 E875FC                  	call	GETBATBYT
 13524                                  	; 14/02/2023
 13525 00000E0A 26833E[AB9D]08          	cmp	word [es:GOTOLEN],8 ;  MSDOS 5.0 (& 6.0) COMMAND.COM
 13526                                  	;cmp	word [cs:GOTOLEN],8 ; Is the label at least 8 chars long?
 13527 00000E10 7D04                    	jge	short GOTOCONT	; Yes, then the next char doesn't matter
 13528 00000E12 3C20                    	cmp	al,' '
 13529 00000E14 779E                    	ja	short LABLKTST
 13530                                  GOTOCONT:
 13531 00000E16 3C0D                    	cmp	al,0Dh
 13532 00000E18 7407                    	je	short SKIPLFEED
 13533                                  TONEXTBATLIN:
 13534 00000E1A E862FC                  	call	GETBATBYT
 13535 00000E1D 3C0D                    	cmp	al,0Dh
 13536 00000E1F 75F9                    	jne	short TONEXTBATLIN
 13537                                  SKIPLFEED:
 13538 00000E21 E85BFC                  	call	GETBATBYT
 13539                                  
 13540                                  	; MSDOS 6.0
 13541                                  ;SR;
 13542                                  ; The BatchEOF flag is set in GetBatByt to indicate that we are faking a 
 13543                                  ;CR-LF for the last line. On a goto, this flag has to be cleared, because
 13544                                  ;BatchEOF == 1 now, after returning a CR-LF. The next call to GetBatByt
 13545                                  ;to get the EOF has not been made yet because we encountered the Goto. On
 13546                                  ;all other cases, EOF will be hit while trying to read the next line and
 13547                                  ;we are fine. I know, I know, what a massive hack from hell!! God help us!!
 13548                                  ;
 13549 00000E24 06                      	push	es
 13550 00000E25 8E06[4902]              	mov	es,[Batch]
 13551 00000E29 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 13552                                  					;invalidate fake CR-LF flag
 13553 00000E2F 07                      	pop	es
 13554                                  
 13555                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13556                                  	;call	BATCLOSE
 13557                                  	;retn
 13558                                  	; 14/02/2023
 13559                                  	;jmp	short BATCLOSE
 13560                                  
 13561                                  ; =============== S U B	R O U T	I N E =======================================
 13562                                  
 13563                                  	; 27/07/2024
 13564                                  BATCLOSE:
 13565 00000E30 2E8B1E[649F]            	mov	bx,[cs:BATHAND]
 13566 00000E35 83FB05                  	cmp	bx,5
 13567 00000E38 7205                    	jb	short CLOSERETURN
 13568                                  	; 14/02/2023
 13569 00000E3A B43E                    	mov	ah,3Eh
 13570                                  	;mov	ah,CLOSE ; 3Eh
 13571                                  
 13572                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM
 13573                                  %if 0
 13574                                  	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 13575                                  			; BX = file handle
 13576                                  %else
 13577 00000E3C E87BF7                  	call	int_21h_indirect
 13578                                  %endif
 13579                                  
 13580                                  CLOSERETURN:
 13581 00000E3F C606[9202]00            	mov	byte [In_Batch],0 ; reset flag	
 13582 00000E44 C3                      	retn
 13583                                  
 13584                                  ; =============== S U B	R O U T	I N E =======================================
 13585                                  
 13586                                  ; Open the BATCH file, If open fails, AL is drive of batch file (A=1)
 13587                                  ; Also, fills internal batch buffer. If access denied, then AX = -1
 13588                                  	
 13589                                  	; 27/07/2024
 13590                                  	; 14/02/2023
 13591                                  BATOPEN:
 13592 00000E45 1E                      	push	ds
 13593 00000E46 8E1E[4902]              	mov	ds,[Batch]
 13594                                  	;;mov	dx,1Fh	; MSDOS 3.3 COMMAND.COM
 13595                                  	;mov	dx,20h	; MSDOS 5.0 COMMAND.COM
 13596 00000E4A BA2000                  	mov	dx,BATCHSEGMENT.BatFile
 13597                                  
 13598                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM
 13599                                  %if 0
 13600                                  	mov	ax,3D00h
 13601                                  	;mov	ax,(OPEN<<8) ; 3D00h ; Open the batch file
 13602                                  
 13603                                  	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 13604                                  			; DS:DX	-> ASCIZ filename
 13605                                  			; AL = access mode
 13606                                  			; 0 - read
 13607                                  %else
 13608 00000E4D B8203D                  	mov	ax,3D20h
 13609                                  	;mov	ax,(OPEN<<8)|20h ; 3D20h ; Open the batch file
 13610                                  				 ; 00-100-000b (00-DENYNONE-READONLY)
 13611 00000E50 E867F7                  	call	int_21h_indirect
 13612                                  %endif
 13613                                  
 13614 00000E53 721C                    	jc	short SETERRDL
 13615                                  	;mov	dx,[8]
 13616 00000E55 8B160800                	mov	dx,[BATCHSEGMENT.BatSeek]
 13617                                  	;mov	cx,[10]
 13618 00000E59 8B0E0A00                	mov	cx,[BATCHSEGMENT.BatSeek+2]
 13619 00000E5D 1F                      	pop	ds
 13620                                  	;mov	[cs:BATHAND],ax
 13621 00000E5E 26A3[649F]              	mov	[es:BATHAND],ax ; MSDOS 5.0 (& 6.0) COMMAND.COM
 13622 00000E62 89C3                    	mov	bx,ax
 13623 00000E64 B80042                  	mov	ax,4200h
 13624                                  	;mov	ax,(LSEEK<<8) ; 4200h ; Go to the right spot
 13625 00000E67 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 13626                                  			; AL = method: offset from beginning of	file
 13627                                  
 13628                                  	;mov	word [cs:BATBUFPOS],-1 ; 0FFFFh
 13629                                  					; nuke batch buffer position
 13630 00000E69 26C706[37A6]FFFF        	mov	word [es:BATBUFPOS],-1 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 13631                                  BATOPEN_RETN:
 13632 00000E70 C3                      	retn
 13633                                  
 13634                                  SETERRDL:
 13635 00000E71 89D3                    	mov	bx,dx
 13636                                  	; MSDOS 6.0
 13637                                  	;invoke	get_ext_error_number 	;AN022; get the extended error
 13638                                  	; 14/02/2023
 13639 00000E73 E8D311                  	call	get_ext_error_number
 13640 00000E76 89C2                    	mov	dx,ax		     	;AN022; save extended error in DX
 13641                                  
 13642                                  	; MSDOS 3.3
 13643                                  	;mov	dx,INSERTDSKPTR
 13644                                  	;call	GET_EXT_ERR_NUMBER
 13645                                  
 13646                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13647 00000E78 8A07                    	mov	al,[bx]			; Get drive spec
 13648 00000E7A 2C40                    	sub	al,'@'	; sub al,40h	; A = 1, B = 2 ..
 13649 00000E7C 1F                      	pop	ds
 13650 00000E7D F9                      	stc				; SUB mucked over carry
 13651 00000E7E C3                      	retn
 13652                                  
 13653                                  ; =============== S U B	R O U T	I N E =======================================
 13654                                  
 13655                                  ;Free_batch : This routine traverses the linked batch segments freeing all
 13656                                  ;the batch and FOR segments until all of them are freed. It also restores
 13657                                  ;the old state of the EchoFlag.
 13658                                  ;
 13659                                  ;	ENTRY:	ds = RESGROUP
 13660                                  ;
 13661                                  ;	EXIT: 	All batch & FOR segments freed.
 13662                                  ;		EchoFlag restored to old state before batch process.
 13663                                  ;
 13664                                  ;	REGISTERS AFFECTED: bx, cx
 13665                                  
 13666                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13667                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0D7Eh
 13668                                  
 13669                                  free_batch: ;proc near
 13670                                  	;assume	ds:RESGROUP,es:nothing
 13671                                  
 13672 00000E7F 06                      	push	es
 13673 00000E80 8B1E[B202]              	mov	bx,[Next_Batch]
 13674 00000E84 09DB                    	or	bx,bx
 13675 00000E86 7433                    	jz	short fb_ret
 13676                                  _ClearBatch:
 13677 00000E88 8EC3                    	mov	es,bx			; get batch segment
 13678                                  	;mov	bx,es:BatForPtr		; get old FOR segment
 13679 00000E8A 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
 13680                                  	;cmp	bx,0			; is a FOR in progress
 13681                                  	; 27/07/2024
 13682 00000E8F 21DB                    	and	bx,bx
 13683 00000E91 7409                    	jz	short no_bat_for	; no - don't deallocate
 13684 00000E93 06                      	push	es			;
 13685 00000E94 8EC3                    	mov	es,bx			; yes - free it up...
 13686 00000E96 B449                    	mov	ah,49h
 13687                                  	;mov	ah,DEALLOC		;
 13688                                  
 13689                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM
 13690                                  %if 0
 13691                                  	int	21h			;
 13692                                  %else
 13693 00000E98 E81FF7                  	call	int_21h_indirect
 13694                                  %endif
 13695 00000E9B 07                      	pop	es			; restore to batch segment
 13696                                  no_bat_for:
 13697                                  	;mov	cl,[es:1]
 13698 00000E9C 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag]
 13699                                  					; get old echo flag
 13700                                  	;mov	bx,[es:3]
 13701 00000EA1 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 13702                                  					; get old batch segment
 13703 00000EA6 B449                    	mov	ah,49h
 13704                                  	;mov	ah,DEALLOC		; free it up...
 13705                                  
 13706                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM
 13707                                  %if 0
 13708                                  	int	21h			;
 13709                                  %else
 13710 00000EA8 E80FF7                  	call	int_21h_indirect
 13711                                  %endif
 13712                                  	; 14/02/2023
 13713                                  	;mov	[Batch],bx		; get ready to deallocate next batch
 13714 00000EAB FF0E[AE02]              	dec	word [Nest]		; is there another batch file?
 13715 00000EAF 75D7                    	jnz	short _ClearBatch	; keep going until no batch file
 13716                                  	
 13717 00000EB1 880E[9D02]              	mov	[EchoFlag],cl		;restore echo status
 13718 00000EB5 C706[4902]0000          	mov	word [Batch],0		;no batch process in progress
 13719                                  fb_ret:
 13720 00000EBB 07                      	pop	es
 13721 00000EBC C3                      	ret
 13722                                  
 13723                                  ;free_batch endp
 13724                                  
 13725                                  ;============================================================================
 13726                                  ; TFOR.ASM, MSDOS 6.0, 1991
 13727                                  ;============================================================================
 13728                                  ; 10/10/2018 - Retro DOS v3.0
 13729                                  
 13730                                  ; All batch proccessing has DS set to segment of resident portion
 13731                                  
 13732                                  ;ASSUME DS:RESGROUP,ES:TRANGROUP
 13733                                  
 13734                                  ; MSDOS 3.3 COMMAND.COM, transient portion/segment offset 0BE9h
 13735                                  
 13736                                  ; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13737                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:0DBFh
 13738                                  
 13739                                  ; ---------------------------------------------------------------------------
 13740                                  
 13741                                  	; 15/02/2023
 13742                                  FORTERM:
 13743                                  	; MSDOS 6.0
 13744 00000EBD 0E                      	push	cs			;AN037; Get local segment into
 13745 00000EBE 1F                      	pop	ds			;AN037;  DS, ES
 13746 00000EBF 0E                      	push	cs			;AN037;
 13747 00000EC0 07                      	pop	es			;AN037;
 13748                                  
 13749                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13750 00000EC1 E89502                  	call	FOROFF
 13751                                  	;mov	ds,[cs:RESSEG]
 13752 00000EC4 268E1E[639C]            	mov	ds,[es:RESSEG] ; 15/02/2023 - MSDOS 5.0
 13753 00000EC9 813E[A502]00FF          	cmp	word [SingleCom],0FF00h
 13754 00000ECF 750F                    	jne	short BAT_CRLF
 13755 00000ED1 833E[AE02]00            	cmp	word [Nest],0		;See if we have nested batch files
 13756 00000ED6 7508                    	jne	short BAT_CRLF		;Yes - don't exit just yet
 13757 00000ED8 C706[A502]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause a terminate
 13758 00000EDE EB12                    	jmp	short NOFORP2
 13759                                  BAT_CRLF:
 13760 00000EE0 F606[9D02]01            	test	byte [EchoFlag],1 	; Is echo on?
 13761 00000EE5 740B                    	jz	short NOFORP2		; no - exit
 13762 00000EE7 F706[4902]FFFF          	test	word [Batch],-1 ; 0FFFFh
 13763                                  					; print CRLF if in batch
 13764 00000EED 7403                    	jz	short NOFORP2
 13765 00000EEF E8851A                  	call	CRLF2
 13766                                  NOFORP2:
 13767 00000EF2 E90FF2                  	jmp	TCOMMAND
 13768                                  
 13769                                  ; ---------------------------------------------------------------------------
 13770                                  
 13771                                  ;------
 13772                                  ;   For-loop processing. For loops are of the form:
 13773                                  ;	    for %<loop-variable> in (<list>) do <command>
 13774                                  ; where <command> may contain references of the form %<variable>, which are
 13775                                  ; later substituted with the items in <list>. The for-loop structure is
 13776                                  ; set-up by the procedure '$for'; successive calls to 'forproc' execute
 13777                                  ; <command> once for each item in <list>. All of the information needed for
 13778                                  ; loop processing is stored on a piece of memory gotten from 'alloc'. This
 13779                                  ; structure is actually fairly large, on the order of 700 bytes, and includes
 13780                                  ; a complete copy of the original command-line structure as parsed by
 13781                                  ; 'parseline', loop control variables, and a dma buffer for the
 13782                                  ; 'FindFirst/FindNext' expansion of wildcard filenames in <list>. When loop
 13783                                  ; processing has completed, this chunk of memory is returned to the system.
 13784                                  ;
 13785                                  ;   All of the previously defined variables, in 'datares', used for loop
 13786                                  ; processing may be erased. Only one, (DW) ForPtr, need be allocated.
 13787                                  ;
 13788                                  ;   The error message, 'for_alloc_mes', should be moved into the file
 13789                                  ; containing all of the other error messages.
 13790                                  ;
 13791                                  ;   Referencing the allocated for-loop structure is a little tricky.
 13792                                  ; At the moment, a byte is defined as part of a new segment, 'for_segment'.
 13793                                  ; When 'forproc' actually runs, ES and DS are set to point to the base of the
 13794                                  ; new chunk of memory.	References to this byte, 'f', thus assemble correctly
 13795                                  ; as offsets of ES or DS. 'f' would not be necessary, except that the
 13796                                  ; assembler translates an instruction such as 'mov AX, [for_minarg]' as an
 13797                                  ; immediate move of the offset of 'for_minarg' into AX. In other words, in
 13798                                  ; terms of PDP-11 mnemonics, the assembler ACTUALLY assembles
 13799                                  ;	mov  AX, #for_minarg 	; AX := 02CA (for example)
 13800                                  ; instead of
 13801                                  ;	mov  AX, for_minarg	; AX := [02CA] (contents of 02CA)
 13802                                  ; By using 'f', we pretend that we are actually referencing an allocated
 13803                                  ; structure, and the assembler coughs up the code we want. Notice that it
 13804                                  ; doesn't matter whether we put brackets around the location or not -- the
 13805                                  ; assembler is "smart" enough to know that we want an address instead of the
 13806                                  ; contents of that location.
 13807                                  ;
 13808                                  ;   Finally, there now exists the potential to easily implement nested loops.
 13809                                  ; One method would be to have a link field in each for-structure pointing to
 13810                                  ; its parent.  Variable references that couldn't be resolved in the local
 13811                                  ; frame would cause a search of prior frames. For-structures would still be
 13812                                  ; allocated and released in exactly the same fashion. The only limit on the
 13813                                  ; number of nested loops would be memory size (although at 700 bytes a pop,
 13814                                  ; memory wouldn't last THAT long). Alternately, a small structure could be
 13815                                  ; maintained in the resident data area. This structure would be an array of
 13816                                  ; control-variable names and pointers to for-structure blocks. This would
 13817                                  ; greatly speed up the resolution of non-local variable references. However,
 13818                                  ; since space in the resident is precious, we would have to compromise on a
 13819                                  ; "reasonable" level of nesting -- 10, 16, 32 levels, whatever. For-structure
 13820                                  ; allocation and de-allocation would have to be modified slightly to take this
 13821                                  ; new structure into account.
 13822                                  ;
 13823                                  ;   Oops, just one more thing. Forbuf need not be a part of the for-structure.
 13824                                  ; It could just as well be one structure allocated in 'transpace'. Actually,
 13825                                  ; it may be easier to allocate it as part of 'for_segment'.
 13826                                  ;------
 13827                                  		; include fordata.asm
 13828                                  
 13829                                  ; Data structure definitions included by tfor.asm
 13830                                  
 13831                                  struc FOR_INFO
 13832 00000000 <res 444h>                .FOR_ARGS:	  resb  ARG_UNIT.SIZE	; argv[] structure 
 13833 00000444 ??                        .FOR_COM_START: resb  1		; beginning of <command>
 13834 00000445 ????                      .FOR_EXPAND:	  resw  1		; * or ? item in <list>?
 13835 00000447 ????                      .FOR_MINARG:	  resw  1		; beginning of <list>
 13836 00000449 ????                      .FOR_MAXARG:	  resw  1		; end of <list>
 13837 0000044B <res 80h>                 .FORBUF:	  resw  64		; temporary buffer
 13838 000004CB <res 80h>                 .FORDMA:	  resw  64		; FindFirst/Next buffer
 13839 0000054B ??                        .FOR_VAR:	  resb  1		; loop control variable
 13840                                    .size:
 13841                                  endstruc
 13842                                  					; ARG_UNIT.SIZE = 1348 (544h)
 13843                                  					; ARG_UNIT.SIZE = 1092 ; 27/07/2024
 13844                                  _$FOR_EXIT:
 13845 00000EF5 EBC6                    	jmp	short FORTERM		; exceeding maxarg means all done
 13846                                  
 13847                                  ; ---------------------------------------------------------------------------
 13848                                  
 13849                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13850                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 13851                                  FORPROC:
 13852 00000EF7 A1[AC02]                	mov	ax,[ForPtr]
 13853 00000EFA 8ED8                    	mov	ds,ax
 13854 00000EFC 8EC0                    	mov	es,ax			; operate in for-info area
 13855                                  	;;mov	dx,5CBh	; MSDOS 5.0 & 6.22
 13856                                  	;mov	dx,4CBh ; PCDOS 7.1 ; 27/07/2024
 13857 00000EFE BACB04                  	mov	dx,FOR_INFO.FORDMA	; 1348+1+2+2+2+128 = 1483 = 5CBh
 13858                                  		; PCDOS 7.1 COMMAND.COM ; 1092+1+2+2+2+128 = 1227 = 4CBh
 13859 00000F01 B8001A                  	mov	ax,1A00h
 13860                                  	;mov	ax,Set_DMA*256 ; 1A00h
 13861 00000F04 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13862                                  			; DS:DX	-> disk	transfer buffer
 13863                                  FOR_BEGIN:
 13864                                  	;;cmp	word [545h],0
 13865                                  	;cmp	word [445h] ; 27/07/2024
 13866 00000F06 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 13867 00000F0B 7404                    	jz	short FOR_BEGIN1
 13868                                  					; non-zero for_expand equals FALSE
 13869                                  	;;inc	word [547h]
 13870                                  	;inc	word [447h] ; 27/07/2024
 13871 00000F0D FF064704                	inc	word [FOR_INFO.FOR_MINARG]
 13872                                  FOR_BEGIN1:
 13873                                  	;mov	bx,[447h] ; 27/07/2024
 13874 00000F11 8B1E4704                	mov	bx,[FOR_INFO.FOR_MINARG] ; current item in <list> to examine
 13875                                  	;cmp	bx,[449h] ; 27/07/2024
 13876 00000F15 3B1E4904                	cmp	bx,[FOR_INFO.FOR_MAXARG]
 13877 00000F19 7FDA                     	jg	short _$FOR_EXIT	; exceeding maxarg means all done
 13878                                  	;mov	ax,0
 13879 00000F1B B80000                  	mov	ax,FOR_INFO.FOR_ARGS ; 0
 13880 00000F1E E86D26                  	call	argv_calc		; compute argv[x] address
 13881                                  	;mov	cx,[bx+3]
 13882 00000F21 8B4F03                  	mov	cx,[bx+ARGV_ELE.argstartel]
 13883 00000F24 8B17                    	mov	dx,[bx]
 13884                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13885                                  	;test	byte [bx+2],4		; Is there a path separator in this arg?
 13886 00000F26 F6470204                	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 13887 00000F2A 7512                    	jnz	short FORSUB		; Yes, argstartel should be correct
 13888 00000F2C 8B37                    	mov	si,[bx]
 13889                                  	;mov	si,[bx+ARGV_ELE.argpointer]
 13890                                  
 13891                                  	;mov	al,[cs:LPAREN]
 13892                                  	; 15/02/2023
 13893                                  	; MSDOS 6.0 (& 5.0) COMMAND.com
 13894                                  	;mov	al,'('	; mov al,lparen
 13895                                  	;cmp	[si-1],	al		; If the current token is the first
 13896                                  	; 27/07/2024
 13897 00000F2E 807CFF28                	cmp	byte [si-1],'('
 13898 00000F32 750A                    	jne	short FORSUB		;  one in the list and originally had
 13899 00000F34 41                      	inc	cx			;  the opening paren as its first char,
 13900                                  					;  the argstartel ptr needs to be
 13901                                  					;  advanced passed it before the prefix
 13902                                  					;  length is computed.
 13903                                  	;mov	al,':'
 13904                                  	;cmp	[si+1],	al		; If the token begins with "(d:",
 13905                                  	; 27/07/2024
 13906 00000F35 807C013A                	cmp	byte [si+1],':'
 13907 00000F39 7503                    	jne	short FORSUB		;  argstartel has to be moved over the
 13908 00000F3B 83C102                  	add	cx,2			;  rest of the prefix as well.
 13909                                  FORSUB:
 13910 00000F3E 29D1                    	sub	cx,dx			; compute length of pathname prefix
 13911                                  	;;cmp	word [545h],0
 13912                                  	;cmp	word [445h],0 ; 27/07/2024
 13913 00000F40 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 13914                                  					; are we still expanding a name?
 13915 00000F45 7416                    	jz	short FOR_FIND_NEXT
 13916                                  					; if so, get next matching filename
 13917                                  	;test	byte [bx+2],2
 13918 00000F47 F6470202                	test	byte [bx+ARGV_ELE.argflags],2 ; wildcard
 13919 00000F4B 7505                    	jnz	short FOR_FIND_FIRST
 13920                                  					; should we expand THIS (new) arg?
 13921                                  	;mov	cx,[bx+5]
 13922                                  					; else, just copy all of it directly
 13923 00000F4D 8B4F05                  	mov	cx,[bx+ARGV_ELE.arglen]
 13924 00000F50 EB1D                    	jmp	short FOR_SMOOSH
 13925                                  
 13926                                  	;nop
 13927                                  	; 15/02/2023
 13928                                  FOR_FIND_FIRST:
 13929 00000F52 51                      	push	cx
 13930 00000F53 31C9                    	xor	cx,cx
 13931 00000F55 B8004E                  	mov	ax,4E00h
 13932                                  	;mov	ax,Find_First*256 ; 4E00h
 13933 00000F58 CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13934                                  			; CX = search attributes
 13935                                  			; DS:DX	-> ASCIZ filespec
 13936                                  			; (drive,path, and wildcards allowed)
 13937 00000F5A 59                      	pop	cx
 13938 00000F5B EB05                    	jmp	short FOR_RESULT
 13939                                  
 13940                                  	;nop
 13941                                  FOR_FIND_NEXT:
 13942 00000F5D B8004F                  	mov	ax,4F00h
 13943                                  	;mov	ax,Find_Next*256 ;4F00h
 13944 00000F60 CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 13945                                  			; [DTA]	= data block from
 13946                                  			; last AH = 4Eh/4Fh call
 13947                                  FOR_RESULT:
 13948 00000F62 B8FFFF                  	mov	ax,-1 ; 0FFFFh		; assume worst case
 13949 00000F65 7201                    	jc	short FOR_CHECK
 13950                                  	; 15/02/2023
 13951 00000F67 40                      	inc	ax ; ax = 0
 13952                                  	;mov	ax,0			; Find* returns 0 for SUCCESS
 13953                                  FOR_CHECK:				; record success of findfirst/next
 13954                                  	;;mov	[545h],ax
 13955                                  	;mov	[445h],ax ; 27/07/2024
 13956 00000F68 A34504                  	mov	[FOR_INFO.FOR_EXPAND],ax
 13957 00000F6B 09C0                    	or	ax,ax			; anything out there?
 13958 00000F6D 7597                    	jnz	short FOR_BEGIN		; if not, try next arg
 13959                                  FOR_SMOOSH:
 13960                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 13961 00000F6F 8B37                    	mov	si,[bx] 		; copy argv[arg][0,CX] into destbuf
 13962                                  	;;mov	di,54Bh	; MSDOS 5.0 & 6.22 COMMAND.COM
 13963                                  	;mov	di,44Bh ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 13964 00000F71 BF4B04                  	mov	di,FOR_INFO.FORBUF	; some days this will be the entire
 13965 00000F74 F3A4                    	rep	movsb			; arg, some days just the path prefix
 13966                                  					
 13967 00000F76 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 13968                                  					; if we're not expanding, we can
 13969 00000F7B 7509                    	jnz	short FOR_MAKE_COM 	; skip the following
 13970                                  	; 15/02/2023
 13971                                  	;;mov	si,05E9h ; MSDOS 3.3 & 5.0 & 6.22 COMMAND.COM ; 27/07/2024
 13972                                  	; 27/07/2024
 13973                                  	;mov	si,04E9h ; PCDOS 7.1 COMMAND.COM
 13974 00000F7D BEE904                  	mov	si,FOR_INFO.FORDMA+FIND_BUF.PNAME ; 14/10/2018
 13975                                  FOR_MORE:
 13976                                  	;cmp	byte [si],0		; tack on matching filename
 13977                                  	;jz	short FOR_MAKE_COM
 13978                                  	;movsb
 13979                                  	;jnz	short FOR_MORE
 13980                                  	; 25/04/2023
 13981 00000F80 AC                      	lodsb
 13982 00000F81 AA                      	stosb
 13983 00000F82 08C0                    	or	al,al
 13984 00000F84 75FA                    	jnz	short FOR_MORE
 13985                                  FOR_MAKE_COM:
 13986                                  	; 25/04/2023
 13987                                  	;xor	al,al			; tack a null byte onto the end
 13988                                  	;stosb				; of the substitute string
 13989 00000F86 31C9                    	xor	cx,cx			; character count for command line
 13990 00000F88 F7D1                    	not	cx			; negate it -- take advantage of loopnz
 13991 00000F8A 31DB                    	xor	bx,bx			; argpointer
 13992 00000F8C BF[C49A]                	mov	di,COMBUF+2
 13993                                  	; 15/02/2023
 13994                                  	;;mov	bl,[544h] ; MSDOS 5.0-6.22 ; 27/07/2024
 13995                                  	; 27/07/2024
 13996                                  	;mov	bl,[444h] ; PCDOS 7.1 COMMAND.COM 
 13997 00000F8F 8A1E4404                	mov	bl,[FOR_INFO.FOR_COM_START] ; argindex
 13998                                  	;;mov	dh,[64Bh]
 13999                                  	;mov	dh,[54Bh] ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 14000 00000F93 8A364B05                	mov	dh,[FOR_INFO.FOR_VAR]
 14001                                  					; %<for-var> is replaced by [forbuf]
 14002 00000F97 0E                      	push	cs			; time to form the <command> string
 14003 00000F98 07                      	pop	es
 14004                                  	;assume ES:trangroup
 14005                                  	;mov	ax,FOR_INFO.FOR_ARGS
 14006 00000F99 B80000                  	mov	ax,0			; translate offset to pointer
 14007 00000F9C E8EF25                  	call	argv_calc
 14008                                  	;mov	si,[bx+9]
 14009 00000F9F 8B7709                  	mov	si,[bx+ARGV_ELE.arg_ocomptr]
 14010                                  					; mov ptr passed beginning space
 14011 00000FA2 46                      	inc	si
 14012                                  FOR_MAKE_LOOP:
 14013 00000FA3 8A04                    	mov	al,[si]			; the <command> arg, byte by byte
 14014 00000FA5 46                      	inc	si
 14015 00000FA6 3C25                    	cmp	al,'%'			; looking for %<control-variable>
 14016 00000FA8 7514                    	jne	short FOR_STOSB 	; no % ... add byte to string
 14017 00000FAA 3834                    	cmp	[si],dh			; got the right <variable>?
 14018 00000FAC 7510                    	jnz	short FOR_STOSB		; got a %, but wrong <variable>
 14019 00000FAE 46                      	inc	si			; skip over <for-variable>
 14020                                  
 14021 00000FAF 56                      	push	si
 14022                                  	; 15/02/2023
 14023                                  	;;mov	si,54Bh	; MSDOS 5.0-6.22 ; 27/07/2024
 14024                                  	; 27/07/2024
 14025                                  	;mov	si,44Bh ; PCDOS 7.1 COMMAND.COM
 14026 00000FB0 BE4B04                  	mov	si,FOR_INFO.FORBUF
 14027                                  					; substitute the <item> for <variable>
 14028                                  					; to make a final <command> to execute
 14029                                  SLOOP:					
 14030 00000FB3 AC                      	lodsb				; grab all those <item> bytes, and
 14031 00000FB4 AA                      	stosb				; add 'em to the <command> string,
 14032 00000FB5 08C0                    	or	al,al			; until we run into a null
 14033 00000FB7 E0FA                    	loopne	SLOOP
 14034 00000FB9 4F                      	dec	di			; adjust length and <command> pointer
 14035 00000FBA 41                      	inc	cx			; so we can overwrite the null
 14036 00000FBB 5E                      	pop	si
 14037 00000FBC EBE5                    	jmp	short FOR_MAKE_LOOP
 14038                                  					; got back for more <command> bytes
 14039                                  FOR_STOSB:
 14040 00000FBE AA                      	stosb				; take a byte from the <command> arg
 14041 00000FBF 49                      	dec	cx			; and put it into the <command> to be
 14042                                  					; executed (and note length, too)
 14043 00000FC0 3C0D                    	cmp	al,0Dh
 14044 00000FC2 75DF                    	jne	short FOR_MAKE_LOOP	; If not done, loop.
 14045                                  FOR_MADE_COM:
 14046 00000FC4 F6D1                    	not	cl
 14047                                  	;mov	[cs:COMBUF+1],cl
 14048                                  	;mov	ds,[cs:RESSEG]
 14049                                  	; 15/02/2023 - Retro DOS v4.0 COMMAND.COM
 14050                                  	; MSDOS 5.0 COMMAND.COM
 14051 00000FC6 26880E[C39A]            	mov	[es:COMBUF+1],cl
 14052 00000FCB 268E1E[639C]            	mov	ds,[es:RESSEG]
 14053                                  	;assume DS:resgroup
 14054 00000FD0 F606[9D02]01            	test	byte [EchoFlag],1 	; shall we echo this <command>, dearie?
 14055 00000FD5 742F                    	jz	short NOECHO3
 14056                                  	;cmp	byte [NullFlag],nullcommand
 14057 00000FD7 803E[B402]01            	cmp	byte [NullFlag],1 	;G was there a command last time?
 14058 00000FDC 7403                    	jz	short NO_CRLF_PR  	;G no - don't print crlf
 14059                                  
 14060 00000FDE E89619                  	call	CRLF2		  	;G Print out prompt
 14061                                  NO_CRLF_PR:
 14062 00000FE1 C606[B402]00            	mov	byte [NullFlag],0 	;G reset no command flag
 14063 00000FE6 0E                      	push	cs
 14064 00000FE7 1F                      	pop	ds
 14065 00000FE8 57                      	push	di
 14066 00000FE9 E80211                  	call	PRINT_PROMPT	  	;G Prompt the user
 14067 00000FEC 5F                      	pop	di
 14068                                  
 14069 00000FED 26C645FF00              	mov	byte [es:di-1],0  	; yeah, PRINT it out...	
 14070 00000FF2 C706[129E][C49A]        	mov	word [string_ptr_2],COMBUF+2
 14071                                  	; 17/04/2023
 14072 00000FF8 BA[E291]                	mov	dx,string_buf_ptr
 14073 00000FFB E82A44                  	call	std_printf
 14074 00000FFE 26C645FF0D              	mov	byte [es:di-1],0Dh
 14075 00001003 E9ECF2                  	jmp	DOCOM		  	; run silent, run deep...
 14076                                  NOECHO3:
 14077 00001006 C606[B402]00            	mov	byte [NullFlag],0
 14078 0000100B 0E                      	push	cs
 14079 0000100C 1F                      	pop	ds
 14080                                  	;jmp	DOCOM1
 14081                                  	; 07/06/2023
 14082                                  	; Retro DOS v4.2 COMMAND.COM
 14083 0000100D E9E5F2                  	jmp	DOCOM0 ; MSDOS 6.22 COMMAND.COM
 14084                                  
 14085                                  FORNESTERRJ:				; no multi-loop processing... yet!
 14086 00001010 E84601                  	call	FOROFF
 14087 00001013 E92901                  	jmp	FORNESTERR
 14088                                  
 14089                                  ; ---------------------------------------------------------------------------
 14090                                  
 14091                                  FORERRORJ:
 14092 00001016 E9D9FB                  	jmp	FORERROR
 14093                                  
 14094                                  ; ---------------------------------------------------------------------------
 14095                                  
 14096                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F24h
 14097                                  
 14098                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 14099                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0FFEh
 14100                                  
 14101                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 14102                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1040h
 14103                                  _$FOR:
 14104 00001019 8E06[639C]              	mov	es,[RESSEG]
 14105 0000101D 26803E[AB02]00          	cmp	byte [es:ForFlag],0 ; is another one already running?
 14106 00001023 75EB                    	jnz	short FORNESTERRJ   ; if flag is set.... boom!
 14107                                  
 14108                                  ; Turn off any pipes in progress.
 14109                                  
 14110 00001025 26803E[1403]00          	cmp	byte [es:PipeFiles],0 ; Only turn off if present.
 14111 0000102B 7403                    	jz	short NO_PIPE
 14112 0000102D E8EE20                  	call	PIPEDEL
 14113                                  NO_PIPE:
 14114 00001030 31D2                    	xor	dx,dx			; counter (0 <= DX < argvcnt)
 14115 00001032 E8F400                  	call	NEXTARG			; move to next argv[n]
 14116 00001035 72DF                    	jc	short FORERRORJ		; no more args -- bad forloop
 14117 00001037 3C25                    	cmp	al,'%'			; next arg MUST start with '%'...
 14118 00001039 75DB                    	jne	short FORERRORJ
 14119 0000103B 89C5                    	mov	bp,ax			; save forloop variable
 14120 0000103D AC                      	lodsb
 14121 0000103E 08C0                    	or	al,al			; and MUST end immediately...
 14122 00001040 75D4                    	jnz	short FORERRORJ
 14123 00001042 E8E400                  	call	NEXTARG			; let's make sure the next arg is 'in'
 14124 00001045 72CF                    	jb	short FORERRORJ
 14125                                  	;and	ax,0DFDFh
 14126 00001047 25DFDF                  	and	ax,~2020h		; uppercase the letters
 14127                                  	; 15/02/2023
 14128                                  	;cmp	ax,4E49h  	; MSDOS 5.0
 14129                                  	;cmp	ax,[IN_WORD] 	; MSDOS 3.3
 14130                                  	;cmp	ax,in_word	; MSDOS 5.0
 14131 0000104A 3D494E                  	cmp	ax,'IN'
 14132 0000104D 75C7                    	jnz	short FORERRORJ
 14133 0000104F AC                      	lodsb
 14134                                  
 14135                                  	; 15/02/2023
 14136                                  	; MSDOS 3.3
 14137                                  	;or	al,al			; it, too, must end right away
 14138                                  	;jz	short CHECKLPAREN
 14139                                  	;cmp	al,[LPAREN]
 14140                                  	;jnz	short FORERRORJ
 14141                                  	;;add	word [bx+ARGV_ELE.argpointer],2 ; add word [bx+0],2
 14142                                  	;add	word [bx],2
 14143                                  	;;add	word [bx+9],2
 14144                                  	;add	word [bx+ARGV_ELE.arg_ocomptr],2
 14145                                  	;;sub	word [bx+5],2
 14146                                  	;sub	word [bx+ARGV_ELE.arglen],2
 14147                                  	;mov	ax,[si-1]
 14148                                  	;jmp	short LPCHECK
 14149                                  
 14150                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14151                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Bh
 14152                                  
 14153                                  	; MSDOS 6.0
 14154                                  ; Compaq bug fix -- exit from this loop on error
 14155                                  
 14156 00001050 08C0                    	or	al,al
 14157 00001052 75C2                    	jne	short FORERRORJ		; jump on error
 14158                                  
 14159                                  ;	je	short CHECKLPAREN
 14160                                  ;
 14161                                  ; Not null. Perhaps there are no spaces between this and the (:
 14162                                  ;   FOR %i in(foo bar...
 14163                                  ; Check for the Lparen here
 14164                                  ;
 14165                                  ;;	cmp	al,lparen
 14166                                  ;;	jnz	short FORERRORJ
 14167                                  ;
 14168                                  ; The token was in(... We strip off the "in" part to simulate a separator
 14169                                  ; being there in the first place.
 14170                                  ;
 14171                                  ;;	add	word [bx+ARGV_ELE.argpointer],2 ; advance source pointer
 14172                                  ;;	add	word [bx+ARGV_ELE.arg_ocomptr],2
 14173                                  ;;						; advance original string
 14174                                  ;;	sub	word [bx+ARGV_ELE.arglen],2 	; decrement the appropriate length
 14175                                  ;
 14176                                  ; SI now points past the in(.  Simulate a nextarg call that results in the
 14177                                  ; current value.
 14178                                  ;
 14179                                  ;;	mov	ax,[si-1]		; get lparen and next char
 14180                                  ;;	jmp	short LPCHECK
 14181                                  ;
 14182                                  ; end of Compaq bug fix
 14183                                  
 14184                                  ; ---------------------------------------------------------------------------
 14185                                  
 14186                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14187                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Fh
 14188                                  
 14189                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14190                                  CHECKLPAREN:
 14191 00001054 E8D200                  	call	NEXTARG			; lparen delimits beginning of <list>
 14192 00001057 72BD                    	jc	short FORERRORJ
 14193                                  LPCHECK:
 14194                                  	; 15/02/2023
 14195                                  	; MSDOS 5.0 (% MSDOS 6.0)
 14196                                  	;;cmp	al,[LPAREN]
 14197                                  	;cmp	al,lparen
 14198 00001059 3C28                    	cmp	al,'('
 14199 0000105B 75B9                    	jne	short FORERRORJ
 14200 0000105D 80FC00                  	cmp	ah,0
 14201 00001060 7410                    	je	short FOR_PAREN_TOKEN
 14202                                  	;;cmp	ah,[RPAREN]		; special case:  null list
 14203                                  	;cmp	ah,rparen
 14204 00001062 80FC29                  	cmp	ah,')'
 14205 00001065 7503                    	jne	short FOR_LIST_NOT_EMPTY
 14206 00001067 E953FE                  	jmp	FORTERM
 14207                                  FOR_LIST_NOT_EMPTY:
 14208                                  	;inc	word [bx+ARGV_ELE.argpointer] ; inc word [bx+0]
 14209 0000106A FF07                    	inc	word [bx]		; Advance ptr past "("
 14210                                  	;dec	word [bx+5]		; Adjust the rest of this argv entry
 14211 0000106C FF4F05                  	dec	word [bx+ARGV_ELE.arglen] ; to agree.
 14212 0000106F 46                      	inc	si			; Inc si so check for ")" works
 14213 00001070 EB0D                    	jmp	short FOR_LIST
 14214                                  
 14215                                  	;nop
 14216                                  FOR_PAREN_TOKEN:
 14217 00001072 E8B400                  	call	NEXTARG			; what have we in our <list>?
 14218 00001075 729F                    	jc	short FORERRORJ
 14219                                  	; 15/02/2023
 14220                                  	;;;cmp	ax,[RPAREN+1]
 14221                                  	;;cmp	ax,[NULLRPAREN]		; special case:  null list
 14222                                  	;cmp	ax,nullrparen
 14223 00001077 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 14224 0000107A 7503                    	jne	short FOR_LIST
 14225 0000107C E93EFE                  	jmp	FORTERM
 14226                                  
 14227                                  ;FORERORJJ:
 14228                                  	;jmp	FORERROR
 14229                                  
 14230                                  FOR_LIST:				; skip over rest of <list>
 14231 0000107F 89D1                    	mov	cx,dx			; first arg of <list>
 14232                                  
 14233                                  SKIP_LIST:
 14234                                  	;add	si,[bx+5]
 14235 00001081 037705                  	add	si,[bx+ARGV_ELE.arglen]
 14236 00001084 83EE03                  	sub	si,3			; si = ptr to last char of token
 14237                                  	; 15/02/2023
 14238                                  	;;mov	al,[RPAREN]
 14239                                  	;mov	al,rparen
 14240 00001087 B029                    	mov	al,')'
 14241 00001089 3804                    	cmp	[si],al			; Is this the last element in <list>
 14242 0000108B 7408                    	je	short FOR_END_LIST 	; Yes, exit loop.
 14243 0000108D E89900                  	call	NEXTARG			; No, get next arg <list>
 14244                                  	;jc	short FORERORJJ		; If no more and no rparen, error.
 14245                                  	;jmp	short SKIP_LIST
 14246                                  	; 15/02/2023
 14247 00001090 73EF                    	jnc	short SKIP_LIST
 14248                                  
 14249                                  	; 15/02/2023
 14250                                  FORERORJJ:
 14251 00001092 E95DFB                  	jmp	FORERROR
 14252                                  
 14253                                  FOR_END_LIST:
 14254 00001095 89D7                    	mov	di,dx			; record position of last arg in <list>
 14255 00001097 C60400                  	mov	byte [si],0		; Zap the rparen
 14256                                  	; 15/02/2023
 14257                                  	;;;cmp	ax,[RPAREN+1]
 14258                                  	;;cmp	ax,[NULLRPAREN] 	; Was this token only a rparen
 14259                                  	;cmp	ax,nullparen
 14260 0000109A 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 14261 0000109D 7401                    	je	short FOR_DO		; Yes, continue
 14262 0000109F 47                      	inc	di			; No, inc position of last arg
 14263                                  FOR_DO:
 14264 000010A0 E88600                  	call	NEXTARG			; now we had BETTER find a 'do'...
 14265 000010A3 72ED                    	jc	short FORERORJJ
 14266                                  	;and	ax,0DFDFh
 14267 000010A5 25DFDF                  	and	ax,~2020h		; uppercase the letters
 14268                                  	; 15/02/2023
 14269                                  	;;cmp	ax,[DO_WORD]
 14270                                  	;cmp	ax,do_word ; 4F44h
 14271 000010A8 3D444F                  	cmp	ax,'DO'	 ; 4F44h
 14272 000010AB 75E5                    	jne	short FORERORJJ
 14273 000010AD AC                      	lodsb
 14274 000010AE 08C0                    	or	al,al			; and it had BETTER be ONLY a 'do'...
 14275 000010B0 75E0                    	jnz	short FORERORJJ
 14276                                  		
 14277 000010B2 E87400                  	call	NEXTARG			; on to the beginning of <command>
 14278 000010B5 72DB                    	jc	short FORERORJJ		; null <command> not legal
 14279                                  
 14280 000010B7 50                      	push	ax
 14281 000010B8 53                      	push	bx
 14282 000010B9 51                      	push	cx
 14283 000010BA 52                      	push	dx			; preserve registers against disaster
 14284 000010BB 57                      	push	di
 14285 000010BC 56                      	push	si
 14286 000010BD 55                      	push	bp
 14287 000010BE E852F7                  	call	FREE_TPA		; need to make free memory, first
 14288 000010C1 E89500                  	call	FOROFF
 14289                                  	;mov	bx,264 ; 27/07/2024  ; MSDOS 5.0-6.22 & PCDOS 7.1	
 14290 000010C4 BB0801                  	mov	bx,FOR_INFO.size-ARG_UNIT.SIZE
 14291 000010C7 E8E927                  	call	SAVE_ARGS		; extra bytes needed for for-info
 14292 000010CA 9C                      	pushf
 14293 000010CB 26A3[AC02]              	mov	[es:ForPtr],ax
 14294 000010CF E852F7                  	call	ALLOC_TPA		; ALLOC_TPA clobbers registers...
 14295 000010D2 9D                      	popf
 14296 000010D3 5D                      	pop	bp
 14297 000010D4 5E                      	pop	si
 14298 000010D5 5F                      	pop	di
 14299 000010D6 5A                      	pop	dx
 14300 000010D7 59                      	pop	cx
 14301 000010D8 5B                      	pop	bx
 14302 000010D9 58                      	pop	ax
 14303 000010DA 723C                    	jc	short FOR_ALLOC_ERR
 14304                                  
 14305 000010DC 06                      	push	es			; save resgroup seg...
 14306 000010DD 26FF36[AC02]            	push	word [es:ForPtr]
 14307 000010E2 07                      	pop	es
 14308                                  	;assume es:for_segment
 14309 000010E3 49                      	dec	cx			; forproc wants min pointing before
 14310 000010E4 4F                      	dec	di			; first arg, max right at last one
 14311                                  	; 15/02/2023
 14312                                  	;;mov	[547h],cx
 14313                                  	; 27/07/2024
 14314                                  	;mov	[447h],cx ; PCDOS 7.1 COMMAND.COM
 14315 000010E5 26890E4704              	mov	[es:FOR_INFO.FOR_MINARG],cx
 14316                                  	;;mov	[549h],di
 14317                                  	;mov	[449h],di ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 14318 000010EA 26893E4904              	mov	[es:FOR_INFO.FOR_MAXARG],di
 14319                                  	;;mov	[544h],dl
 14320                                  	;mov	[444h],dl ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 14321 000010EF 2688164404              	mov	[es:FOR_INFO.FOR_COM_START],dl
 14322                                  	;;mov	word [545h],0FFFFh ; -1
 14323                                  	;mov	[445h],0FFFFh ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 14324 000010F4 26C7064504FFFF          	mov	word [es:FOR_INFO.FOR_EXPAND],-1
 14325                                  					; non-zero means FALSE
 14326 000010FB 89E8                    	mov	ax,bp
 14327                                  	;;mov	[64Bh],ah
 14328                                  	;mov	[54Bh],ah ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 14329 000010FD 2688264B05              	mov	[es:FOR_INFO.FOR_VAR],ah
 14330 00001102 07                      	pop	es
 14331                                  	;assume es:resgroup
 14332 00001103 26FE06[AB02]            	inc	byte [es:ForFlag]
 14333 00001108 26833E[A502]FF          	cmp	word [es:SingleCom],-1
 14334 0000110E 7507                    	jne	short FOR_RET
 14335 00001110 26C706[A502]00FF        	mov	word [es:SingleCom],0FF00h
 14336                                  FOR_RET:
 14337 00001117 C3                      	retn
 14338                                  
 14339                                  FOR_ALLOC_ERR:
 14340                                  	; 15/02/2023
 14341                                  	; MSDOS 3.3
 14342                                  	;mov	dx,INSFMEMMESPTR
 14343                                  	;jmp	CERROR
 14344                                  
 14345                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14346                                  	; MSDOS 6.0
 14347                                  	;mov	byte [msg_disp_class],1
 14348 00001118 C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class
 14349                                  					;AN000; set up extended error msg class
 14350                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 14351 0000111D BA[DA8F]                	mov	dx,extend_buf_ptr
 14352                                  					;AC000; get extended message pointer
 14353                                  	;mov	word [extend_buf_ptr],8
 14354 00001120 C706[DA8F]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 14355                                  					;AN000; get message number in control block
 14356 00001126 E9FB1B                  	jmp	cerror
 14357                                  
 14358                                  
 14359                                  ; =============== S U B	R O U T	I N E =======================================
 14360                                  
 14361                                  NEXTARG:
 14362 00001129 42                      	inc	dx			; next argv[n]
 14363                                  	;cmp	dx,[ARG_ARGVCNT]
 14364 0000112A 3B16[80A2]              	cmp	dx,[ARG+ARG_UNIT.argvcnt]
 14365                                  					; make sure we don't run off end
 14366 0000112E 7D0D                    	jge	short NEXTARG_ERR 	;  of argv[]...	
 14367 00001130 89D3                    	mov	bx,dx
 14368                                  	;mov	ax,ARG_ARGV
 14369                                  	;mov	ax,ARG+ARG_UNIT.argv
 14370 00001132 B8[C09F]                	mov	ax,ARG
 14371 00001135 E85624                  	call	argv_calc		; convert array index to pointer
 14372 00001138 8B37                    	mov	si,[bx]			; load pointer to argstring
 14373                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 14374 0000113A AD                      	lodsw				; and load first two chars
 14375 0000113B F8                      	clc
 14376 0000113C C3                      	retn
 14377                                  NEXTARG_ERR:
 14378 0000113D F9                      	stc
 14379 0000113E C3                      	retn
 14380                                  
 14381                                  ; ---------------------------------------------------------------------------
 14382                                  
 14383                                  FORNESTERR:
 14384 0000113F 1E                      	push	ds
 14385 00001140 8E1E[639C]              	mov	ds,[RESSEG]
 14386                                  	;ASSUME DS:RESGROUP
 14387 00001144 BA[5D91]                	mov	dx,FORNESTMES_PTR
 14388 00001147 813E[A502]00FF          	cmp	word [SingleCom],0FF00h
 14389 0000114D 7506                    	jne	short NOFORP3
 14390 0000114F C706[A502]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause termination
 14391                                  NOFORP3:
 14392 00001155 1F                      	pop	ds
 14393 00001156 E9CB1B                  	jmp	cerror
 14394                                  
 14395                                  ; =============== S U B	R O U T	I N E =======================================
 14396                                  
 14397                                  ; General routine called to free the for segment. We also clear the forflag
 14398                                  ; too. Change no registers.
 14399                                  
 14400                                  FOROFF:
 14401 00001159 50                      	push	ax
 14402 0000115A 06                      	push	es
 14403 0000115B 2E8E06[639C]            	mov	es,[cs:RESSEG]
 14404 00001160 26A1[AC02]              	mov	ax,[es:ForPtr]
 14405 00001164 09C0                    	or	ax,ax
 14406 00001166 7408                    	jz	short FREEDONE
 14407 00001168 06                      	push	es
 14408 00001169 8EC0                    	mov	es,ax
 14409                                  	; 15/02/2023
 14410 0000116B B449                    	mov	ah,49h
 14411                                  	;mov	ah,DEALLOC ; 49h
 14412 0000116D CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 14413                                  			; ES = segment address of area to be freed
 14414 0000116F 07                      	pop	es
 14415                                  FREEDONE:
 14416 00001170 26C706[AC02]0000        	mov	word [es:ForPtr],0
 14417 00001177 26C606[AB02]00          	mov	byte [es:ForFlag],0
 14418 0000117D 07                      	pop	es
 14419 0000117E 58                      	pop	ax
 14420 0000117F C3                      	retn
 14421                                  
 14422                                  ;============================================================================
 14423                                  ; TCMD1A.ASM, MSDOS 6.0, 1991
 14424                                  ;============================================================================
 14425                                  ; 09/10/2018 - Retro DOS v3.0
 14426                                  
 14427                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0ECBh
 14428                                  
 14429                                  ; ---------------------------------------------------------------------------
 14430                                  
 14431                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14432                                  
 14433                                  %if 0
 14434                                  
 14435                                  ; The DIR command displays the contents of a directory.
 14436                                  ;
 14437                                  ; ****************************************************************
 14438                                  ; *
 14439                                  ; * ROUTINE:	 CATALOG - display file(s) in directory
 14440                                  ; *
 14441                                  ; * FUNCTION:	 PARSE command line for drive, file, or path name.
 14442                                  ; *		 DIR allows two switches, /P (pause) and /W (wide).
 14443                                  ; *		 If an error occurs issue and error message and
 14444                                  ; *		 transfer control to CERROR.
 14445                                  ; *
 14446                                  ; * INPUT:	 command line at offset 81H
 14447                                  ; *
 14448                                  ; * OUTPUT:	 none
 14449                                  ; *
 14450                                  ; ****************************************************************
 14451                                  
 14452                                  CATALOG:
 14453                                  	; MSDOS 3.3
 14454                                  
 14455                                  	;mov	ax,ARG_ARGV
 14456                                  	;mov	ax,ARG+ARG_UNIT.argv
 14457                                  	mov	ax,ARG
 14458                                  	mov	dx,0FFFFh
 14459                                  	xor	cx,cx
 14460                                  	xor	si,si
 14461                                  DIR1:
 14462                                  	;cmp	cx,[ARG_ARGVCNT]
 14463                                  	cmp	cx,[ARG+ARG_UNIT.argvcnt]
 14464                                  	jnb	short DIR6 ; No more arguments
 14465                                  	mov	bx,cx
 14466                                  	call	ARGV_CALC
 14467                                  	;or	si,[bx+7]
 14468                                  	or	si,[bx+ARGV_ELE.argsw_word]
 14469                                  	test	si,7FFCh  ; test si,~8003
 14470                                  	jnz	short DIR2  ; /A,/B,/V switches (are invalid)
 14471                                  	;test	byte [bx+2],1
 14472                                  	test	byte [bx+ARGV_ELE.argflags],sw_flag  ; 1
 14473                                  	jz	short DIR3
 14474                                  	jmp	short DIR5
 14475                                  DIR2:
 14476                                  	mov	dx,BADPARMPTR
 14477                                  	jmp	CERROR
 14478                                  DIR3:
 14479                                  	or	cx,cx
 14480                                  	jnz	short DIR4	
 14481                                  	;cmp	word [bx+5],3
 14482                                  	cmp	word [bx+ARGV_ELE.arglen],3
 14483                                  	jz	short DIR5
 14484                                  	;add	word [bx+ARGV_ELE.argpointer],3 ; add word [bx+0],3
 14485                                  	add	word [bx],3
 14486                                  	;add	word [bx+9],3
 14487                                  	add	word [bx+ARGV_ELE.arg_ocomptr],3
 14488                                  	;add	word [bx+3],3
 14489                                  	add	word [bx+ARGV_ELE.argstartel],3
 14490                                  	;sub	word [bx+5],3
 14491                                  	sub	word [bx+ARGV_ELE.arglen],3
 14492                                  DIR4:
 14493                                  	cmp	dx,0FFFFh
 14494                                  	jnz	short DIR2
 14495                                  	mov	dx,bx
 14496                                  DIR5:
 14497                                  	inc	cx
 14498                                  	jmp	short DIR1
 14499                                  DIR6:
 14500                                  	mov	[COMSW],si
 14501                                  	push	dx
 14502                                  	xor	al,al
 14503                                  	cmp	dx,0FFFFh
 14504                                  	jz	short DIR7
 14505                                  	mov	bx,dx
 14506                                  	;mov	di,[bx+ARGV_ELE.argpointer]  ;mov di,[bx+0]
 14507                                  	mov	di,[bx]
 14508                                  	cmp	byte [di+1],':'
 14509                                  	jnz	short DIR7
 14510                                  	mov	al,[di]
 14511                                  	or	al,20h		; Lowercase drive name	
 14512                                  	sub	al,'a'-1 ; 60h  ; Convert to drive number (0,1..)
 14513                                  DIR7:
 14514                                  	;mov	[5CH],al
 14515                                  	mov	[FCB],al
 14516                                  	call	OKVOLARG
 14517                                  	mov	al,'?'		; *.* is default file spec.
 14518                                  	;mov	di,5Dh
 14519                                  	mov	di,FCB+1
 14520                                  	mov	cx,11
 14521                                  	rep stosb
 14522                                  
 14523                                  ; Begin by processing any switches that may have been specified.
 14524                                  ; BITS will contain any information about switches that was
 14525                                  ; found when the command line was parsed.
 14526                                  
 14527                                  	mov	ax,[COMSW]	; Get switches from command
 14528                                  	mov	[_BITS],ax	; initialize switches
 14529                                  	mov	word [COMSW],0	; initialize flags
 14530                                  	mov	byte [LINPERPAG],23 ; Set default for lines per page
 14531                                  	;test	al,1
 14532                                  	test	al,SWITCHW	; /W ?
 14533                                  	;mov	al,1
 14534                                  	mov	al,NORMPERLIN
 14535                                  	jz	short DIR8
 14536                                  	;mov	al,5
 14537                                  	mov	al,WIDEPERLIN
 14538                                  DIR8:
 14539                                  	mov	[LINLEN],al	; Set number of entries per line
 14540                                  	mov	[LINCNT],al
 14541                                  	mov	word [FILECNT],0 ; Keep track of how many files found
 14542                                  	mov	dx,DIRBUF
 14543                                  	mov	ah,Set_DMA ; 1Ah
 14544                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 14545                                  			; DS:DX	-> disk	transfer buffer
 14546                                  	;mov	dl,[5Ch]
 14547                                  	mov	dl,[FCB]
 14548                                  	call	SAVUDIR
 14549                                  	pop	bx
 14550                                  	cmp	bx,0FFFFh
 14551                                  	jz	short DIR9
 14552                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 14553                                  	mov	dx,[bx]
 14554                                  
 14555                                  ; The user may have specified a device. Search for the path and see if the
 14556                                  ; attributes indicate a device.
 14557                                  
 14558                                  	mov	ah,Find_First ; 4Eh
 14559                                  	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 14560                                  			; CX = search attributes
 14561                                  			; DS:DX	-> ASCIZ filespec
 14562                                  			; (drive,path, and wildcards allowed)
 14563                                  	jc	short DIR10
 14564                                  			; Check device atrribute..
 14565                                  	;test	byte [DIRBUF_ATTRIB2],40h
 14566                                  	;test	byte [DIRBUF_ATTRIB2],ATTR_DEVICE
 14567                                  	; 14/10/2018
 14568                                  	;test	byte [DIRBUF+21],40h
 14569                                  	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 14570                                  	jz	short DIR10	; no, go do normal operation
 14571                                  	mov	word [COMSW],-2 ; 0FFFEh  ; Signal device
 14572                                  DIR9:
 14573                                  	jmp	short DOHEADER
 14574                                  DIR10:
 14575                                  	;mov	dx,[bx+ARGV_ELE.argpointer]
 14576                                  	mov	dx,[bx]
 14577                                  	mov	ah,CHDir ; 3Bh
 14578                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 14579                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 14580                                  	jnc	short DOHEADER
 14581                                  	;mov	si,[bx+3]
 14582                                  	mov	si,[bx+ARGV_ELE.argstartel]
 14583                                  	cmp	dx,si
 14584                                  	jz	short DIR_NO_DRIVE
 14585                                  	xor	cl,cl
 14586                                  	xchg	cl,[si]
 14587                                  	mov	ah,CHDir ; 3Bh
 14588                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 14589                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 14590                                  	xchg	cl,[si]
 14591                                  	jnc	short DIR_NO_DRIVE
 14592                                  	mov	al,[si-1]
 14593                                  	call	PATHCHRCMP
 14594                                  	jnz	short DIR11
 14595                                  	mov	al,[si-2]
 14596                                  	call	PATHCHRCMP
 14597                                  	jz	short DIR12
 14598                                  	xchg	cl,[si-1]
 14599                                  	mov	ah,CHDir ; 3Bh
 14600                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 14601                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 14602                                  	xchg	cl,[si-1]
 14603                                  	jnc	short DIR_NO_DRIVE
 14604                                  DIR11:
 14605                                  	mov	ch,':'
 14606                                  	cmp	ch,[si-1]
 14607                                  	jnz	short DIR12
 14608                                  	;mov	cx,[bx+ARGV_ELE.argpointer] ; mov cx,[bx+0]
 14609                                  	mov	cx,[bx]
 14610                                  	xchg	cx,si
 14611                                  	sub	cx,si
 14612                                  	cmp	cx,2
 14613                                  	jz	short DIR_NO_DRIVE
 14614                                  DIR12:
 14615                                  	mov	dx,BADCDPTR
 14616                                  	;test	byte [bx+2],4
 14617                                  	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 14618                                  	jnz	short DIRERROR
 14619                                  DIRNF:
 14620                                  	mov	dx,FNOTFOUNDPTR
 14621                                  DIRERROR:
 14622                                  	jmp	CERROR
 14623                                  DIR_NO_DRIVE:
 14624                                  	cmp	word [si],'..'
 14625                                  	jnz	short DOREALPARSE
 14626                                  	cmp	byte [si+2],0
 14627                                  	jnz	short DOREALPARSE
 14628                                  	inc	word [COMSW]
 14629                                  	jmp	short DOHEADER
 14630                                  DOREALPARSE:
 14631                                  	mov	di,FCB ; 5Ch	
 14632                                  	;mov	ax,290Eh
 14633                                  	mov	ax,(Parse_File_Descriptor<<8)|0Eh
 14634                                  	int	21h	; DOS -	PARSE FILENAME
 14635                                  			; DS:SI	-> string to parse
 14636                                  			; ES:DI	-> buffer to fill with unopened	FCB
 14637                                  			; AL = bit mask	to control parsing
 14638                                  	cmp	byte [si],0
 14639                                  	jz	short DOHEADER
 14640                                  	dec	word [COMSW]
 14641                                  DOHEADER:
 14642                                  		
 14643                                  ; Display the header
 14644                                  
 14645                                  	push	bx
 14646                                  	call	BUILD_DIR_STRING
 14647                                  	mov	dx,DIRBUF
 14648                                  	mov	[VOL_DIR],dx
 14649                                  	mov	dx,DIRHEADPTR
 14650                                  	call	PRINTF_CRLF
 14651                                  	pop	bx
 14652                                  	cmp	bx,0FFFFh
 14653                                  	jz	short DOSEARCH
 14654                                  
 14655                                  ; If there were chars left after parse or device, then invalid file name
 14656                                  
 14657                                  	cmp	word [COMSW],0
 14658                                  	jz	short DOSEARCH	; nothing left; good parse
 14659                                  	jl	short DIRNFFIX	; not .. => error file not found
 14660                                  	call	RESTUDIR
 14661                                  	mov	dx,BADCDPTR
 14662                                  	jmp	CERROR		; was .. => error directory not found
 14663                                  DIRNFFIX:
 14664                                  	call	RESTUDIR
 14665                                  	jmp	short DIRNF
 14666                                  
 14667                                  ; We are assured that everything is correct. Let's go and search. Use
 14668                                  ; attributes that will include finding directories. Perform the first search
 14669                                  ; and reset our directory afterward.
 14670                                  
 14671                                  DOSEARCH:
 14672                                  	;mov	byte [55h],0FFh
 14673                                  	mov	byte [FCB-7],0FFh
 14674                                  	;mov	byte [5Bh],10h
 14675                                  	mov	byte [FCB-1],10h
 14676                                  
 14677                                  ; Caution! Since we are using an extended FCB, we will *also* be returning
 14678                                  ; the directory information as an extended FCB. We must bias all fetches into
 14679                                  ; DIRBUF by 8 (Extended FCB part + drive)
 14680                                  
 14681                                  	mov	ah,Dir_Search_First ; 11h
 14682                                  	mov	dx,FCB-7 ; 55h
 14683                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 14684                                  			; DS:DX	-> FCB
 14685                                  
 14686                                  ; Restore the user's directory. We preserve, though, the return from the
 14687                                  ; previous system call for later checking.
 14688                                  
 14689                                  FOUND_FIRST_FILE:
 14690                                  	push	ax		; save return state
 14691                                  	call	RESTUDIR	; restore user's dir	
 14692                                  	pop	ax		; get return state back
 14693                                  
 14694                                  ; Main scanning loop. Entry has AL = Search first/next error code. Test for
 14695                                  ; no more.
 14696                                  
 14697                                  DIRSTART:
 14698                                  	inc	al		; 0FFh = file not found
 14699                                  	jnz	short DISPLAY	; Either an error or we are finished
 14700                                  	jmp	CHKCNT
 14701                                  DISPLAY:
 14702                                  	inc	word [FILECNT]	; Keep track of how many we find
 14703                                  	mov	si,DIRBUF+8	; SI -> information returned by sys call
 14704                                  	;call	SHONAME
 14705                                  	call	DISPLAYNAME
 14706                                  	;test	byte [_BITS],1
 14707                                  	test	byte [_BITS],SWITCHW ; W switch set?
 14708                                  	jz	short DIRTEST	; If so, no size, date, or time
 14709                                  	jmp	NEXENT
 14710                                  DIRTEST:
 14711                                  	;test	byte [DIRBUF_ATTRIB1],10h
 14712                                  	; 14/10/2018
 14713                                  	;test	byte [DIRBUF_ATTRIB1],ATTR_DIRECTORY
 14714                                  	;test	byte [DIRBUF+19],10h
 14715                                  	test	byte [DIRBUF+8+DIR_ENTRY.DIR_ATTR],ATTR_DIRECTORY
 14716                                  	jz	short FILEENT
 14717                                  	mov	dx,DMESPTR
 14718                                  	call	STD_PRINTF
 14719                                  	jmp	short NOFSIZ
 14720                                  FILEENT:
 14721                                  	;mov	dx,[DIRBUF_FSIZ_L]
 14722                                  	;mov	dx,[DIRBUF+36]
 14723                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_L]
 14724                                  	mov	[FILESIZE_L],dx
 14725                                  	;mov	dx,[DIRBUF_FSIZ_H]
 14726                                  	;mov	dx,[DIRBUF+38]
 14727                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_H]
 14728                                  	mov	[FILESIZE_H],dx
 14729                                  	mov	dx,FSIZEMESPTR
 14730                                  	call	STD_PRINTF	; Print size of file
 14731                                  NOFSIZ:
 14732                                  	;mov	ax,[DIRBUF_FDATE]  ; Get date
 14733                                  	;mov	ax,[DIRBUF+32]
 14734                                  	mov	ax,[DIRBUF+8+DIR_ENTRY.DIR_DATE]
 14735                                  	or	ax,ax
 14736                                  	jz	short NEXENT	; Skip if no date
 14737                                  	mov	di,CHARBUF
 14738                                  	push	ax
 14739                                  	mov	ax,'  '
 14740                                  	stosw
 14741                                  	pop	ax
 14742                                  	mov	bx,ax
 14743                                  	and	ax,1Fh		; Get day
 14744                                  	mov	dl,al
 14745                                  	mov	ax,bx
 14746                                  	mov	cl,5
 14747                                  	shr	ax,cl		; Align month
 14748                                  	and	al,0Fh		; Get month
 14749                                  	mov	dh,al
 14750                                  	mov	cl,bh
 14751                                  	shr	cl,1		; Align year
 14752                                  	xor	ch,ch
 14753                                  	add	cx,80		; Relative 1980
 14754                                  	cmp	cl,100
 14755                                  	jb	short MILLENIUM
 14756                                  	sub	cl,100
 14757                                  MILLENIUM:
 14758                                  	call	DATE_CXDX
 14759                                  	;mov	cx,[DIRBUF_FTIME]
 14760                                  	;mov	cx,[DIRBUF+30]
 14761                                  	mov	cx,[DIRBUF+8+DIR_ENTRY.DIR_TIME]
 14762                                  	jcxz	PRBUF		; Time field present?
 14763                                  	mov	ax,2020h
 14764                                  	stosw
 14765                                  	shr	cx,1
 14766                                  	shr	cx,1
 14767                                  	shr	cx,1
 14768                                  	shr	cl,1
 14769                                  	shr	cl,1		; Hours in CH, minutes in CL
 14770                                  	mov	bl,[TIME_24]
 14771                                  	or	bl,80h		; Tell P_TIME called from DIR
 14772                                  	call	P_TIME		; Don't care about DX, never used with DIR
 14773                                  PRBUF:
 14774                                  	xor	ax,ax
 14775                                  	stosb
 14776                                  	mov	dx,CHARBUF
 14777                                  	mov	[STRING_PTR_2],dx
 14778                                  	mov	dx,STRINGBUF2PTR
 14779                                  	call	STD_PRINTF
 14780                                  NEXENT:
 14781                                  	dec	byte [LINCNT]
 14782                                  	jnz	short SAMLIN
 14783                                  NEXLIN:
 14784                                  	mov	al,[LINLEN]
 14785                                  	mov	[LINCNT],al
 14786                                  	call	CRLF2
 14787                                  	dec	byte [LINPERPAG]
 14788                                  	jnz	short SCROLL
 14789                                  	;test	byte [_BITS],2
 14790                                  	test	byte [_BITS],SWITCHP ; P switch present?
 14791                                  	jz	short SCROLL	; If not, just continue
 14792                                  	mov	byte [LINPERPAG],23
 14793                                  	call	PAUSE
 14794                                  	jmp	short SCROLL
 14795                                  SAMLIN:
 14796                                  	mov	dx,TABPTR	; Output a tab
 14797                                  	call	STD_PRINTF
 14798                                  SCROLL:
 14799                                  	mov	ah,Dir_Search_Next ; 12h
 14800                                  	;mov	dx,55h
 14801                                  	mov	dx,FCB-7	; DX -> Unopened FCB
 14802                                  	int	21h	; DOS -	SEARCH NEXT USING FCB
 14803                                  			; DS:DX	-> FCB
 14804                                  			; Return: AL = status
 14805                                  	jmp	DIRSTART
 14806                                  CHKCNT:
 14807                                  	test	word [FILECNT],0FFFFh ; -1
 14808                                  	jnz	short TRAILER
 14809                                  	jmp	DIRNF
 14810                                  TRAILER:
 14811                                  	mov	al,[LINLEN]
 14812                                  	cmp	al,[LINCNT]
 14813                                  	jz	short MMESSAGE
 14814                                  	call	CRLF2
 14815                                  MMESSAGE:
 14816                                  	mov	dx,DIRMESPTR
 14817                                  	mov	si,[FILECNT]
 14818                                  	mov	[DIR_NUM],si
 14819                                  	call	STD_PRINTF
 14820                                  DTFREE:
 14821                                  	mov	ah,GET_DRIVE_FREESPACE ; 36h
 14822                                  	;mov	dl,[5Ch]
 14823                                  	mov	dl,[FCB]
 14824                                  	int	21h	; DOS -	2+ - GET DISK SPACE
 14825                                  			; DL = drive code (0 = default,	1 = A,2 = B,etc.)
 14826                                  	cmp	ax,-1
 14827                                  	jnz	short DTFREE1
 14828                                  DTRET:
 14829                                  	retn
 14830                                  DTFREE1:
 14831                                  	mul	cx
 14832                                  	mul	bx
 14833                                  	mov	[BYTES_FREE],ax
 14834                                  	mov	[BYTES_FREE+2],dx
 14835                                  	mov	dx,BYTEMESPTR
 14836                                  	jmp	STD_PRINTF
 14837                                  
 14838                                  ; =============== S U B	R O U T	I N E =======================================
 14839                                  
 14840                                  SHONAME:
 14841                                  DISPLAYNAME:
 14842                                  	; MSDOS 3.3
 14843                                  	mov	di,CHARBUF
 14844                                  	mov	cx,8
 14845                                  	rep	movsb
 14846                                  	mov	al,' '
 14847                                  	stosb
 14848                                  	mov	cx,3
 14849                                  	rep	movsb
 14850                                  	xor	ax,ax
 14851                                  	stosb
 14852                                  	push	dx
 14853                                  	mov	dx,CHARBUF
 14854                                  	mov	[STRING_PTR_2],dx
 14855                                  	mov	dx,STRINGBUF2PTR
 14856                                  	call	STD_PRINTF
 14857                                  	pop	dx
 14858                                  	retn
 14859                                  
 14860                                  %endif
 14861                                  
 14862                                  ;============================================================================
 14863                                  ; DIR.ASM, MSDOS 6.0, 1991
 14864                                  ;============================================================================
 14865                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14866                                  
 14867                                  	; MSDOS 6.0
 14868                                  %if 0
 14869                                  
 14870                                  ;***	DIR.ASM - DIR internal command
 14871                                  
 14872                                  comment	% =================================================================
 14873                                  
 14874                                  This module replaces TCMD1A.ASM.  The old module was titled 
 14875                                  "PART4 COMMAND Transient routines".
 14876                                  
 14877                                  From residual documentation, I surmise that TCMD.ASM originally
 14878                                  contained the internal commands DIR, PAUSE, ERASE, TYPE, VOL, and
 14879                                  VER.  The file seems to have been successively split:
 14880                                  
 14881                                    TCMD -> TCMD1,TCMD2 -> TCMD1A,TCMD1B,TCMD2A,TCMD2B
 14882                                  
 14883                                  TCMD1A.ASM contained only the DIR command.
 14884                                  
 14885                                  Usage:
 14886                                  ------
 14887                                  
 14888                                  DIR <filespec> /w /p /b /s /l /c /o<sortorder> /a<attriblist>
 14889                                  
 14890                                  DIR /?
 14891                                  
 14892                                  
 14893                                  <filespec> may include any or none of:  drive; directory path;
 14894                                             wildcarded filename.  If drive or directory path are
 14895                                  	   omitted, the current defaults are used.  If the
 14896                                  	   file name or extension is omitted, wildcards are
 14897                                  	   assumed.
 14898                                  
 14899                                  /w	Wide listing format.  Files are displayed in compressed
 14900                                  	'name.ext' format.  Subdirectory files are enclosed in
 14901                                  	brackets, '[dirname]'.
 14902                                  
 14903                                  /p	Paged, or prompted listing.  A screenful is displayed
 14904                                  	at a time.  The name of the directory being listed appears
 14905                                  	at the top of each page.
 14906                                  
 14907                                  	Bugbug:  pages nead to be uniform length..?
 14908                                  
 14909                                  /b	Bare listing format.  Turns off /w or /p.  Files are 
 14910                                  	listed in compressed 'name.ext' format, one per line,
 14911                                  	without additional information.  Good for making batch
 14912                                  	files or for piping.  When used with /s, complete
 14913                                  	pathnames are listed.
 14914                                  
 14915                                  /s	Descend subdirectory tree.  Performs command on current
 14916                                  	or specified directory, then for each subdirectory below
 14917                                  	that directory.  Directory header and footer is displayed
 14918                                  	for each directory where matching files are found, unless
 14919                                  	used with /b.  /b suppresses headers and footers.
 14920                                  
 14921                                  	Tree is explored depth first, alphabetically within the
 14922                                  	same level.
 14923                                  
 14924                                  	Bugbug:  hidden directories aren't searched.
 14925                                  
 14926                                  /l	Display file names, extensions and paths in lowercase.	;M010
 14927                                  
 14928                                  /c	Display file compression ratio, if the file is on a MagicDrv
 14929                                  	compressed volume.
 14930                                  
 14931                                  /o	Sort order.  /o alone sorts by default order (dirs-first, name,
 14932                                  	extension).  A sort order may be specified after /o.  Any of
 14933                                  	the following characters may be used: nedsgc (name, extension,
 14934                                  	date/time, size, group-dirs-first, compression ratio).	Placing
 14935                                  	a '-' before any letter causes a downward sort on that field.
 14936                                  	E.g., /oe-d means sort first by extension in alphabetical order,
 14937                                  	then within each extension sort by date and time in reverse
 14938                                  	chronological order.
 14939                                  
 14940                                  /a	Attribute selection.  Without /a, hidden and system files
 14941                                  	are suppressed from the listing.  With /a alone, all files
 14942                                  	are listed.  An attribute list may follow /a, consisting of
 14943                                  	any of the following characters:  hsdar (hidden, system,
 14944                                  	directory, archive, read-only).  A '-' before any letter
 14945                                  	means 'not' that attribute.  E.g., /ar-d means files that
 14946                                  	are marked read-only and are not directory files.  Note
 14947                                  	that hidden or system files may be included in the listing.
 14948                                  	They are suppressed without /a but are treated like any other
 14949                                  	attribute with /a.
 14950                                  
 14951                                  /?	Help listing.  Display DIR useage information.	;M008;Handled externally
 14952                                  
 14953                                  /h has been removed.					;M008
 14954                                  
 14955                                  DIRCMD	An environment variable named DIRCMD is parsed before the
 14956                                  	DIR command line.  Any command line options may be specified
 14957                                  	in DIRCMD, and become defaults.  /? will be ignored in DIRCMD.
 14958                                  	A filespec may be specified in DIRCMD and will be used unless
 14959                                  	a filespec is specified on the command line.  Any switch
 14960                                  	specified in DIRCMD may be overridden on the command line.
 14961                                  	If the original DIR default action is desired for a particular
 14962                                  	switch, the switch letter may be preceded by a '-' on the
 14963                                  	command line.  E.g.,
 14964                                  
 14965                                  	  /-w	use long listing format
 14966                                  	  /-p	don't page the listing
 14967                                  	  /-b	don't use bare format
 14968                                  	  /-s	don't descend subdirectory tree
 14969                                  	  /-o	display files in disk order
 14970                                  	  /-a	suppress hidden and system files
 14971                                  
 14972                                  Notes:
 14973                                  ------
 14974                                  
 14975                                  For sorted listings, file entries are loaded into the TPA buffer, which
 14976                                  is usually about 64K in size.  This allows sorts of up to 3000 files at
 14977                                  a time.  Each entry takes up 21 bytes in the buffer (see EntryStruc below).
 14978                                  The byte after the last entry is 0FFh.  The first byte of each entry is
 14979                                  a flag byte which is made zero when the entry is loaded, and made one
 14980                                  when the entry is used.
 14981                                  
 14982                                  Revision History
 14983                                  ================
 14984                                  M01	md	7/13/90 	Use ROM BIOS data area to obtain screen height
 14985                                  				in the absence of ANSI.SYS
 14986                                  
 14987                                  M007	sa	8/1/90		Allow /p/b combination
 14988                                  
 14989                                  M008	sa	8/1/90		Remove /h parameter.  Eliminate code used
 14990                                  				to internally handle /? message.
 14991                                  
 14992                                  M010	sa	8/5/90		Add support for /l (lowercase) option.
 14993                                  
 14994                                  M011	sa	8/5/90		Patch up bug where MS-DOS does not load the
 14995                                  				first FCB with the drive number when the drive
 14996                                  				letter in the command line is preceded by a
 14997                                  				switch.  Now dir manually loads the drive
 14998                                  				number after parsing.
 14999                                  
 15000                                  M018	md	8/12/90 	Increment the screen height by 1 when obtained
 15001                                  				from the ROM BIOS.
 15002                                  
 15003                                  M023	sa	8/31/90		Prevent DIR from failing if it encounters
 15004                                  				a subdirectory having len(pathname)>MAXPATH.
 15005                                  				Just skip over that subdirectory.
 15006                                  
 15007                                  M028	dbo	9/24/90		When country=US, sort by strict character
 15008                                  				byte value, rather than collating table.
 15009                                  				This to match MS-DOS Shell's sort order.
 15010                                  
 15011                                  ========================================================================= %
 15012                                  
 15013                                  %endif
 15014                                  
 15015                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM (PCDOS 7.1)
 15016                                  ; 05/06/2023 - Retro DOS v4.2 COMMAND.COM (MSDOS 6.22)
 15017                                  ;ifdef DBLSPACE_HOOKS
 15018                                  ;NUM_DIR_SWS	equ	16	; # of dir switch synonyms in Dir_Sw_Ptrs list
 15019                                  ; 28/07/2024 - PCDOS 7.1 COMMAND.COM
 15020                                  NUM_DIR_SWS	equ	18
 15021                                  ;else
 15022                                  ; 16/02/2023 - Retro DOS v4.0 (v4.1) COMMAND.COM (MSDOS 5.0)
 15023                                  ;NUM_DIR_SWS	equ	14	; # of dir switch synonyms in Dir_Sw_Ptrs list
 15024                                  ;endif
 15025                                  
 15026                                  ;OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 15027                                  ;
 15028                                  ;		on/off bit record for /l, /b, /s, /p, /w, /c options
 15029                                  ;		(order is hard-coded; see OnOffSw)
 15030                                  ;		Inmem is set when entries are loaded in memory.
 15031                                  
 15032                                  ; 28/07/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM
 15033                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM (MSDOS 5.0)
 15034                                  mask.wide  equ 1	; dir /W switch
 15035                                  mask.pagd  equ 2	; dir /P switch
 15036                                  mask.subd  equ 4	; dir /S switch
 15037                                  mask.bare  equ 8	; dir /B switch
 15038                                  mask.lcase equ 16	; dir /L switch	
 15039                                  ;mask.inmem equ 32	;
 15040                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15041                                  mask.narrow equ 32	; dir /Z switch
 15042                                  mask.year4 equ 64	; dir /4 switch	
 15043                                  mask.inmem equ 128	; 
 15044                                  
 15045                                  ; 28/07/2024
 15046                                  ; 05/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 15047                                  ;ifdef DBLSPACE_HOOKS
 15048                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1,cratio:1
 15049                                  ;else
 15050                                  ;  OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 15051                                  ;endif
 15052                                  ;mask.cratio equ 1
 15053                                  ;mask.wide   equ 2
 15054                                  ;mask.pagd   equ 4
 15055                                  ;mask.subd   equ 8
 15056                                  ;mask.bare   equ 16
 15057                                  ;mask.lcase  equ 32
 15058                                  ;mask.inmem  equ 64
 15059                                  ;
 15060                                  mask.dev    equ 1
 15061                                  mask.baddir equ 2	
 15062                                  
 15063                                  NUM_ATTR_LTRS	equ	6	; length of attribute letter list
 15064                                  
 15065                                  ; 05/06/2023
 15066                                  ;ifdef DBLSPACE_HOOKS
 15067                                  NUM_ORDER_LTRS	equ	6	; length of sort order letter list
 15068                                  CRATIO_ORDER	equ	6	; position of 'C' in ORDER_LTRS
 15069                                  ;else
 15070                                  ;NUM_ORDER_LTRS	equ	5	; length of sort order letter list
 15071                                  ;endif
 15072                                  
 15073                                  ;ResultBuffer	struc		; structure of parse result buffer
 15074                                  ;ValueType	db	?
 15075                                  ;ValueTag	db	?
 15076                                  ;SynPtr		dw	?
 15077                                  ;ValuePtr	dd	?
 15078                                  ;ResultBuffer	ends
 15079                                  
 15080                                  ;ErrorRec	record	baddir:1,dev:1
 15081                                  ;
 15082                                  ;		Error bits are:
 15083                                  ;		  Invalid directory format
 15084                                  ;		  File is device
 15085                                  
 15086                                  ;EntryStruc	struc			; our private directory entry structure
 15087                                  ;used		db	?		; =0 until entry used, then =1
 15088                                  ;filename	db	8 dup (?)	; filename
 15089                                  ;fileext	db	3 dup (?)	; extension
 15090                                  ;fileattr	db	?		; file attributes
 15091                                  ;filetime	dw	?		; file time
 15092                                  ;filedate	dw	?		; file date
 15093                                  ;filesize	dd	?		; file size
 15094                                  ; 05/06/2023
 15095                                  ;;ifdef DBLSPACE_HOOKS
 15096                                  ;compratio	db	?		; compression ratio
 15097                                  ;;endif
 15098                                  ;EntryStruc	ends
 15099                                  
 15100                                  ;shove	macro	val		; hose-bag 8086 doesn't push immediate
 15101                                  ;	mov	ax,val		; invisible, dangerous use of AX!
 15102                                  ;	push	ax
 15103                                  ;	endm
 15104                                  
 15105                                  ;	public	Catalog		; our entry point
 15106                                  ;
 15107                                  ;	break	<DIR (Catalog) principal routines>
 15108                                  ;
 15109                                  ;	assume	cs:TRANGROUP,ds:TRANGROUP,es:nothing,ss:TRANGROUP
 15110                                  ; ---------------------------------------------------------------------------
 15111                                  ;	Bugbug:	Each routine should start with it's own ASSUME.
 15112                                  
 15113                                  ;----------------------------------------------------------------------------
 15114                                  ;----------------------------------------------------------------------------
 15115                                  
 15116                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15117                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:108Dh
 15118                                  
 15119                                  ;***	Catalog - DIR command main routine
 15120                                  ;
 15121                                  ;	ENTRY	FCB #1 in PSP has drive# from cmd-line or default
 15122                                  ;		Cmd-line tail text is at 81h, terminated by 0Dh
 15123                                  ;		CS, DS, ES, SS = TRANGROUP seg addr
 15124                                  ;		Tpa = TPA buffer seg addr
 15125                                  ;		BytCnt = # bytes in TPA buffer
 15126                                  ;
 15127                                  ;	EXIT	nothing
 15128                                  ;
 15129                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15130                                  ;
 15131                                  ;	ERROR EXITS
 15132                                  ;
 15133                                  ;	  Errors are handled by setting up error message pointers
 15134                                  ;	   for Std_EPrintf and jumping to CError. Syntax errors in
 15135                                  ;	   the environment variable, however, are handled by printing
 15136                                  ;	   an error message and continuing.
 15137                                  ;
 15138                                  ;	EFFECTS
 15139                                  ;
 15140                                  ;	  Directory listing is displayed (on standard output).
 15141                                  ;	  APPEND is disabled. HeadFix routine is expected to
 15142                                  ;	   restore APPEND state.
 15143                                  ;	  Working directory may be changed. The user's default
 15144                                  ;	   directory is saved and flagged for restoration by RestUDir
 15145                                  ;	   during COMMAND cycle.
 15146                                  ;	  Lots of variables may be changed in TRANSPACE segment.
 15147                                  ;
 15148                                  ;	NOTES
 15149                                  ;
 15150                                  ;	  ES = TRANGROUP seg addr except when used to address the
 15151                                  ;	   the TPA buffer, where directory entries are loaded from disk.
 15152                                  
 15153                                  	; 16/02/2023
 15154                                  
 15155                                  ; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15156                                  ; ----------------------------------------
 15157                                  ; MSDOS 6.22 COMMAND.COM - TRANGROUP:1167h
 15158                                  
 15159                                  ; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 15160                                  ;----------------------------------------------------------------------------
 15161                                  ; PCDOS 7.1 COMMAND.COM - TRANGROUP:11B7h
 15162                                  
 15163                                  CATALOG:
 15164                                  
 15165                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15166                                  %if 0
 15167                                  	; 07/06/2023
 15168                                  	; MSDOS 6.22 COMMAND COM feature only !
 15169                                  	call    screen_f_set	; set display parameters for video/text mode
 15170                                  	;			; (different depending on scr width/columns)
 15171                                  	call	SetDefaults
 15172                                  	call	ParseEnvironment
 15173                                  	call	ParseCmdLine
 15174                                  	jnc	short catalog1	; no parse error
 15175                                  	;jmp	catErr		; error msg is set up
 15176                                  	; 07/06/2023
 15177                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMANBD.COM
 15178                                  	jmp	catExtErr2
 15179                                  %else
 15180                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 15181                                  	; PCDOS 7.1 COMMAND.COM
 15182 00001180 C606[9D9C]00            	mov	byte [nocommas],0
 15183 00001185 C606[9F9C]00            	mov	byte [bfree_not_kilo],0
 15184                                  				; use kilobyte if number of bytes is very big
 15185 0000118A 50                      	push	ax
 15186 0000118B 51                      	push	cx
 15187 0000118C 57                      	push	di
 15188 0000118D 56                      	push	si
 15189 0000118E 06                      	push	es
 15190 0000118F BE[0F93]                	mov	si,no_sep_text	; NO_SEP=1 ; Removes the commas from numbers
 15191 00001192 E82015                  	call	find_name_in_environment
 15192 00001195 720A                    	jb	short catalog0
 15193 00001197 C606[9F9C]FF            	mov	byte [bfree_not_kilo],0FFh 
 15194                                  				; no need to kilobyte (short) display
 15195 0000119C C606[9D9C]FF            	mov	byte [nocommas],0FFh
 15196                                  				; do not use commas for displaying numbers
 15197                                  catalog0:
 15198 000011A1 07                      	pop	es
 15199 000011A2 5E                      	pop	si
 15200 000011A3 5F                      	pop	di
 15201 000011A4 59                      	pop	cx
 15202 000011A5 58                      	pop	ax
 15203 000011A6 E8D000                  	call	SetDefaults
 15204 000011A9 E8F400                  	call	ParseEnvironment
 15205 000011AC E80C01                  	call	ParseCmdLine
 15206 000011AF 7303                    	jnc	short catalog1	; no parse error
 15207                                  	;jmp	catErr
 15208                                  	; 31/07/2024
 15209 000011B1 E9C200                  	jmp	catExtErr2
 15210                                  %endif
 15211                                   
 15212                                  catalog1:
 15213 000011B4 E83501                  	call	SetOptions
 15214 000011B7 E80B01                  	call	SetCollatingTable
 15215                                  
 15216                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15217                                  %if 1
 15218 000011BA C606[9C9C]00            	mov	byte [narrow],0
 15219                                  	;test	byte [_Bits],20h	; /Z switch (narrow)
 15220 000011BF F606[FD9D]20            	test	byte [_Bits],mask.narrow ; 20h
 15221 000011C4 740A                    	jz	short catalog1_1
 15222 000011C6 C606[9C9C]FF            	mov	byte [narrow],0FFh
 15223 000011CB C606[9D9C]FF            	mov	byte [nocommas],0FFh
 15224                                  catalog1_1:
 15225                                  	;test	byte [_Bits],40h	; /4 switch
 15226 000011D0 F606[FD9D]40            	test	byte [_Bits],mask.year4	; 40h
 15227 000011D5 7407                    	jz	short catalog1_2
 15228                                  	;mov	byte [cs:yeardigit4],0FFh ; 4 digits year
 15229                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 15230 000011D7 C606[9E9C]FF            	mov	byte [yeardigit4],0FFh
 15231 000011DC EB05                    	jmp	short catalog1_3
 15232                                  catalog1_2:
 15233                                  	;mov	byte [cs:yeardigit4],0	; 2 digits year
 15234 000011DE C606[9E9C]00            	mov	byte [yeardigit4],0
 15235                                  catalog1_3:
 15236                                  %endif
 15237                                  
 15238                                  ;	Drive # to operate on has already been placed in FCB by
 15239                                  ;	COMMAND preprocessing. OkVolArg & PathCrunch depend on that.
 15240                                  
 15241                                  	;;;test	Bits,mask bare
 15242                                  	;;test 	word [_Bits],8
 15243                                  	;test	byte [_Bits],8
 15244                                  	; 07/06/2023
 15245 000011E3 F606[FD9D]08            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0 (6.22)
 15246                                  		; 31/07/2024 ; mask.bare = 8 ; PCDOS 7.1
 15247 000011E8 750A                    	jnz	short catalog2	; don't display volume info for /b
 15248                                  	;invoke	OkVolArg	; find & display volume info
 15249 000011EA E8CB0D                  	call	OkVolArg
 15250                                  	;sub	byte [LeftOnpage],2
 15251 000011ED 832E[909C]02            	sub	word [LeftOnPage],2
 15252                                  				; record display lines used by volume info
 15253 000011F2 EB14                    	jmp	short catCrunch
 15254                                  
 15255                                  ;	OkVolArg side effects:
 15256                                  ;	APPEND is disabled;
 15257                                  ;	DTA established at DirBuf;
 15258                                  ;	Filename fields in FCB are wildcarded.
 15259                                  
 15260                                  catalog2:
 15261                                  ;	OkVolArg wasn't executed, so we have to do these ourselves.
 15262                                  
 15263                                  	;invoke	DisAppend	; disable APPEND
 15264 000011F4 E88A0D                  	call	DisAppend
 15265                                  
 15266                                  	;mov	dx,offset TRANGROUP:DirBuf
 15267 000011F7 BA[AB9D]                	mov	dx,DIRBUF
 15268 000011FA B41A                    	mov	ah,1Ah
 15269                                  	;mov	ah,Set_DMA
 15270 000011FC CD21                    	int	21h		; set DTA
 15271                                  
 15272                                  	;mov	di,FCB	; 5Ch	; ES:DI = ptr to FCB
 15273                                  	;inc	di		; ES:DI = ptr to filename field of FCB
 15274                                  	; 28/07/2024
 15275 000011FE BF5D00                  	mov	di, FCB+1 ; 5Dh
 15276 00001201 B03F                    	mov	al,'?'		; AL = wildcard character
 15277 00001203 B90B00                  	mov	cx,11
 15278 00001206 F3AA                    	rep	stosb		; wildcard filename field
 15279                                  
 15280                                  catCrunch:
 15281 00001208 E83C01                  	call	CrunchPath	; crunch pathname to get directory and filename
 15282 0000120B 7233                    	jc	short catRecErr	; handle recorded or extended error
 15283                                  
 15284                                  ;	User's directory has been saved, we've changed to specified directory.
 15285                                  ;	ComSw = error bits for later use
 15286                                  ;	FCB contains parsed filename
 15287                                  
 15288                                  	;cmp	byte [COMSW],0
 15289 0000120D 833E[7B9C]00            	cmp	word [COMSW],0
 15290 00001212 752C                    	jne	short catRecErr	; handle recorded error
 15291                                  
 15292 00001214 E88A01                  	call	InstallCtrlC	; install control-C handler
 15293                                  
 15294                                  ; 31/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 15295                                  %if 0
 15296                                  	; 07/06/2023
 15297                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 15298                                  	; MSDOS 6.0 (DBLSPACE/DRVSPACE)
 15299                                  
 15300                                   	;test	word [_Bits],1	; mask.cratio
 15301                                  	test	byte [_Bits],mask.cratio ; compression ratio wanted?
 15302                                  	jz      short catalog4
 15303                                  	call    OpenCVF         ; yes, try to open CVF file
 15304                                  	jnc     short catalog4
 15305                                  
 15306                                  	;and	word [_Bits],0FFFEh ; not (mask cratio)
 15307                                  	and	byte [_Bits],~mask.cratio ; 0FEh
 15308                                  %endif
 15309                                  
 15310                                  catalog4:	; 07/06/2023
 15311 00001217 E89F0A                  	call	ZeroTotals	; zero grand totals
 15312 0000121A E8DD04                  	call	ListDir		; list main directory
 15313                                  	;jc	short catExtErr
 15314                                  	; 07/06/2023
 15315                                  	; MSDOS 6.22 COMMAND.COM
 15316 0000121D 7247                    	jc      short catExtErr1
 15317                                  
 15318                                  	;;;test	Bits,mask subd
 15319                                  	;;test	word [_Bits],4
 15320                                  	;test	byte [_Bits],4
 15321                                  	; 07/06/2023
 15322 0000121F F606[FD9D]04            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0 (6.22)
 15323                                  			; 31/07/2024   ; 4 ; PCDOS 7.1
 15324 00001224 7405                    	jz	short catalog3	; subdirectories option not set
 15325 00001226 E89001                  	call	ListSubds	; list subdirectories
 15326                                  	;jc	short catExtErr
 15327                                  	; 07/06/2023
 15328                                  	; MSDOS 6.22 COMMAND.COM
 15329 00001229 723B                    	jc      short catExtErr1
 15330                                  
 15331                                  catalog3:
 15332                                  ;	Check if any files were found.
 15333                                  
 15334                                  	;;;test	Bits,mask bare
 15335                                  	;;test	word [_Bits],8
 15336                                  	;test	byte [_Bits],8
 15337                                  	; 07/06/2023
 15338 0000122B F606[FD9D]08            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0 (6.22)
 15339                                  			; 31/07/2024   ; 8  ; PCDOS 7.1
 15340 00001230 750D                    	jnz	short catRet	; don't bother for bare format
 15341                                  
 15342                                  ; 31/07/2024
 15343                                  ; PCDOS 7.1 COMMAND.COM
 15344                                  %if 0
 15345                                  	mov	ax,[FileCntTotal]
 15346                                  	or	ax,ax
 15347                                  	jz	short catNoFiles ; no files found
 15348                                  %else
 15349 00001232 8B0E[D09C]              	mov	cx,[FileCntTotal]
 15350 00001236 0B0E[D29C]              	or	cx,[FileCntTotal+2]
 15351 0000123A E317                    	jcxz	catNoFiles	; no files found
 15352                                  %endif
 15353                                  
 15354 0000123C E8BA02                  	call	DisplayTotals	; display trailing grand totals
 15355                                  	;jmp	short catRet	; all done
 15356                                  	; 25/04/2023
 15357                                  	; 07/06/2023
 15358                                  catRet:
 15359                                  	;retn	; MSDOS 5.0 COMMAND.COM
 15360                                  	
 15361                                  ; 31/07/2024
 15362                                  ; PCDOS 7.1 COMMAND.COM
 15363                                  %if 0
 15364                                  	; 07/06/2023
 15365                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 15366                                  
 15367                                  	;test	word [_Bits],1	; mask.cratio
 15368                                  	test	byte [_Bits],mask.cratio
 15369                                  	jz      short catRetn
 15370                                  	call    CloseCVF
 15371                                  %endif
 15372                                  
 15373                                  catRetn:
 15374 0000123F C3                      	retn
 15375                                  
 15376                                  catRecErr:
 15377                                  
 15378                                  ;	ComSw may have error bit set. If not, do extended error.
 15379                                  
 15380                                  	;;;test	ComSw,mask dev
 15381                                  	;;test	word [COMSW],1
 15382                                  	;test	byte [COMSW],1
 15383 00001240 F606[7B9C]01            	test	byte [COMSW],mask.dev
 15384 00001245 750C                    	jnz	short catNoFiles 
 15385                                  				; filename is device, respond 'file not found'
 15386                                  	;;test	ComSw,mask baddir
 15387                                  	;;test	word [COMSW],2
 15388                                  	;test	byte [COMSW],2
 15389 00001247 F606[7B9C]02            	test	byte [COMSW],mask.baddir
 15390                                  	;jz	short catExtErr	; no ComSw error bits, must be extended error
 15391                                  	; 07/06/2023
 15392                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM 
 15393 0000124C 7418                    	jz	short catExtErr1
 15394                                  
 15395                                  	;mov	dx,offset TRANGROUP:BadCd_Ptr
 15396                                  				; invalid directory
 15397 0000124E BA[3A91]                	mov	dx,badcd_ptr
 15398                                  	;jmp	short catErr
 15399                                  	; 07/06/2023
 15400                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 15401 00001251 EB23                    	jmp	short catExtErr2	
 15402                                  
 15403                                  catNoFiles:
 15404                                  
 15405                                  ;	Display header and force 'file not found' message.
 15406                                  
 15407 00001253 E8EF07                  	call	DisplayHeader
 15408 00001256 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 15409 00001259 C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 15410 0000125E BA[DA8F]                	mov	dx,extend_buf_ptr
 15411 00001261 A3[DA8F]                	mov	[extend_buf_ptr],ax
 15412                                  	;jmp	short catErr
 15413                                  	; 07/06/2023
 15414                                  	; MSDOS 6.22 COMMAND.COM
 15415 00001264 EB10                    	jmp	short catExtErr2
 15416                                  
 15417                                  catExtErr:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 15418                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 15419                                  catExtErr1:
 15420                                  
 15421                                  ;	DOS has returned an error status. Get the extended error#, and
 15422                                  ;	set up an error message, changing 'No more files' error 
 15423                                  ;	to 'File not found' error.
 15424                                  
 15425 00001266 E8D00D                  	call	Set_Ext_Error_Msg
 15426 00001269 833E[DA8F]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 15427                                  	;jne	short catalog4  ; catErr ; MSDOS 5.0 COMMAND.COM
 15428                                  	; 07/06/2023
 15429                                  	; MSDOS 6.22 COMMAND.COM
 15430 0000126E 7506                    	jne	short catExtErr2	
 15431                                  
 15432 00001270 C706[DA8F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 15433                                  
 15434                                  ;catalog4:	; Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 15435                                  	; 07/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 15436                                  catExtErr2:
 15437                                  
 15438                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15439                                  %if 0
 15440                                  	;test	word [_Bits],1	; mask.cratio
 15441                                  	test	byte [_Bits],mask.cratio
 15442                                  				; close Compressed Volume File if cratio
 15443                                  	jz      short catErr
 15444                                  	call    CloseCVF
 15445                                  %endif
 15446                                  
 15447                                  ;	Error exit. Error message information has been set up
 15448                                  ;	for Std_EPrintf.
 15449                                  
 15450                                  catErr:
 15451 00001276 E9AB1A                  	jmp	cerror		; go to COMMAND error recycle point
 15452                                  
 15453                                  	; 25/04/2023
 15454                                  ;catRet:
 15455                                  	;retn
 15456                                  
 15457                                  ; ---------------------------------------------------------------------------
 15458                                  
 15459                                  ;***	SetDefaults - set default pathname, options
 15460                                  ;
 15461                                  ;	ENTRY	DS = TRANGROUP seg addr
 15462                                  ;
 15463                                  ;	EXIT	nothing
 15464                                  ;
 15465                                  ;	USED	AX,DI
 15466                                  ;
 15467                                  ;	EFFECTS
 15468                                  ;	  SrcBuf = '*',EOL - default pathname
 15469                                  ;	  PathPos = ptr to pathname
 15470                                  ;	  PathCnt = length of pathname
 15471                                  
 15472                                  	; 16/02/2023
 15473                                  SetDefaults:
 15474 00001279 BF[919E]                	mov	di,SrcBuf		; DI = ptr to pathname buffer
 15475 0000127C 893E[019E]              	mov	[PathPos],di		; PathPos = ptr to pathname
 15476                                  	;mov	al,STAR
 15477 00001280 B02A                    	mov	al,'*'
 15478 00001282 AA                      	stosb
 15479                                  	;mov	al,END_OF_LINE_IN
 15480 00001283 B00D                    	mov	al,0Dh ; cr
 15481 00001285 AA                      	stosb				; SrcBuf = '*',0Dh
 15482 00001286 C706[FF9D]0100          	mov	word [PathCnt],1	; PathCnt = pathname length
 15483                                  
 15484 0000128C 31C0                    	xor	ax,ax			; AX = 0
 15485 0000128E A3[7B9C]                	mov	[COMSW],ax		; = no error
 15486 00001291 A3[FD9D]                	mov	[_Bits],ax		; = options off
 15487 00001294 A2[2E9E]                	mov	[DestBuf],al		; = no sort
 15488 00001297 C606[059E]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM ; 6
 15489 0000129C A2[069E]                	mov	[AttrSelect],al		; exclude hidden, system files
 15490                                  peRet:	; 25/04/2023
 15491 0000129F C3                      	retn
 15492                                  
 15493                                  ; ---------------------------------------------------------------------------
 15494                                  
 15495                                  ;***	ParseEnvironment - find and parse our environment variable
 15496                                  ;
 15497                                  ;	Find our environment variable and parse it. If a parse
 15498                                  ;	error occurs, issue an error message. The parse results
 15499                                  ;	up to the error will still have effect. Always leave
 15500                                  ;	the option variables in a useable state.
 15501                                  ;
 15502                                  ;	ENTRY	DS = TRANGROUP seg addr
 15503                                  ;
 15504                                  ;	EXIT	nothing
 15505                                  ;
 15506                                  ;	USED	AX,BX,CX,DX,SI,DI
 15507                                  ;
 15508                                  ;	EFFECTS
 15509                                  ;
 15510                                  ;	  Bits may contain new option settings.
 15511                                  ;	  DestBuf may contain new series of sort codes.
 15512                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 15513                                  ;	  SrcBuf may contain a new default pathname/filespec.
 15514                                  ;	  PathPos, PathCnt updated for new pathname.
 15515                                  ;
 15516                                  ;	  If a parse error occurred, an error message will be issued.
 15517                                  
 15518                                  	; 16/02/2023
 15519                                  ParseEnvironment:
 15520 000012A0 E80D04                  	call	GetEnvValue		; get environment variable value
 15521 000012A3 72FA                    	jc	short peRet		; name not found in environment
 15522                                  
 15523                                  ;	SI = ptr to value of environment variable, in TRANGROUP seg
 15524                                  
 15525 000012A5 E85E05                  	call	Parse_Line		; parse environment value
 15526 000012A8 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 15527                                  	;cmp	ax,END_OF_LINE
 15528 000012AB 74F2                    	je	short peRet		; successful completion
 15529                                  
 15530                                  ;	Some kind of parse error occurred.
 15531                                  ;	We're set up for a Std_EPrintf call.
 15532                                  
 15533 000012AD E87041                  	call	std_eprintf		; display the parse error
 15534                                  	;mov	byte [Msg_Disp_Class],util_msg_class ; -1
 15535                                  					; restore default msg class
 15536 000012B0 C606[D88F]FF            	mov	byte [msg_disp_class],0FFh ; -1
 15537                                  	;mov	dx,offset TRANGROUP:ErrParsEnv_Ptr
 15538 000012B5 BA[9592]                	mov	dx,errparsenv_ptr
 15539                                  	;;invoke Printf_Crlf		; "(Error occurred in environment.."
 15540                                  	;call	Printf_Crlf
 15541                                  	; 25/04/2023
 15542                                  	;retn
 15543 000012B8 E95F41                  	jmp	Printf_Crlf
 15544                                  					;M008;Internal handling of /? removed
 15545                                  ;peOk:	and	Bits,not mask help	; disallow /h in environment variable
 15546                                  	; 25/04/2023
 15547                                  ;peRet:
 15548                                  	;retn
 15549                                  
 15550                                  ; ---------------------------------------------------------------------------
 15551                                  
 15552                                  ;***	ParseCmdLine - parse and record command line parameters
 15553                                  ;
 15554                                  ;	ENTRY	PSP offset 81h is beginning of cmd line buffer
 15555                                  ;		DS, ES, CS = TRANGROUP seg addr
 15556                                  ;
 15557                                  ;	EXIT	CY = set if parse error occurred
 15558                                  ;
 15559                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 15560                                  ;		AX = system parser error code
 15561                                  ;		DX = ptr to message block
 15562                                  ;
 15563                                  ;	USED	AX,BX,CX,DX,SI,DI
 15564                                  ;
 15565                                  ;	EFFECTS
 15566                                  ;
 15567                                  ;	  Bits may contain new option settings.
 15568                                  ;	  DestBuf may contain new series of sort codes.
 15569                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 15570                                  ;	  SrcBuf may contain a new default pathname/filespec.
 15571                                  ;	  PathPos, PathCnt updated for new pathname.
 15572                                  ;
 15573                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 15574                                  ;	  Msg_Disp_Class = parse error class
 15575                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 15576                                  ;	  Message block (see DX) is set up for parse error message
 15577                                  
 15578                                  	; 16/02/2023
 15579                                  ParseCmdLine:
 15580 000012BB BE8100                  	mov	si,81h			; SI = ptr to cmd-line tail text
 15581 000012BE E84505                  	call	Parse_Line		; parse cmd line tail
 15582 000012C1 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 15583                                  	;;cmp	ax,END_OF_LINE
 15584                                  	; 25/04/2023
 15585                                  	;je	short pcOk		; parse completed successfully
 15586                                  
 15587                                  ;	A parse error occurred. We're all set up for message output.
 15588                                  
 15589                                  	; 25/04/2023
 15590                                  	; cf = 1 (ax < 0FFFFh)
 15591                                  	;stc		   		; return failure
 15592                                  	;jmp	short pcRet
 15593                                  	; 25/04/2023
 15594                                  	;retn
 15595                                  pcOk:
 15596                                  	; 25/04/2023
 15597                                  	;cf = 0 (ax = 0FFFFh)
 15598                                  	;clc				; return success
 15599                                  pcRet:
 15600 000012C4 C3                      	retn
 15601                                  
 15602                                  ; ---------------------------------------------------------------------------
 15603                                  
 15604                                  ;***	SetCollatingTable - set up character collating table for sorting
 15605                                  ;
 15606                                  ;	If country is other than USA, try to get a collating table
 15607                                  ;	for character sorting. For USA, use straight byte values.
 15608                                  ;	This is so DIR behaves like the MS-DOS Shell, which sorts
 15609                                  ;	by straight byte values in the USA for better performance.
 15610                                  ;
 15611                                  ;	ENTRY	ES = TRANGROUP seg addr
 15612                                  ;
 15613                                  ;	EXIT	nothing
 15614                                  ;
 15615                                  ;	USED	AX,BX,CX,DX,DI
 15616                                  ;
 15617                                  ;	EFFECTS
 15618                                  ;
 15619                                  ;	  If collating table is set -
 15620                                  ;	    CountryPtrId = 6.
 15621                                  ;	    CountryPtr points to collating table.
 15622                                  ;
 15623                                  ;	  Otherwise -
 15624                                  ;	    CountryPtrId = 0.
 15625                                  
 15626                                  SetCollatingTable:
 15627                                  
 15628                                  ;	Begin modification M028
 15629                                  
 15630                                  	;mov	dx,offset TRANGROUP:InternatVars
 15631                                  	;			; DS:DX = ptr to international info buffer
 15632 000012C5 BA[0EA6]                	mov	dx,INTERNATVARS
 15633 000012C8 B80038                  	mov	ax,3800h
 15634                                  	;mov	ax,INTERNATIONAL << 8
 15635                                  	;;mov	ax,INTERNATIONAL shl 8
 15636                                  				; AX = 'Get current country info'
 15637 000012CB CD21                    	int	21h		; call DOS
 15638 000012CD 7217                    	jc	short scNoTable	; error - so don't collate
 15639                                  
 15640                                  ;	BX = country code
 15641                                  
 15642 000012CF 83FB01                  	cmp	bx,1
 15643 000012D2 7412                    	je	short scNoTable	; we're in USA, don't collate
 15644                                  
 15645                                  ;	End modification M028
 15646                                  
 15647                                  ;*	Country code is other than USA. Try to get a collating table.
 15648                                  
 15649 000012D4 B80665                  	mov	ax,6506h
 15650                                  	;mov	ax,(GETEXTCNTRY << 8) + SETCOLLATE
 15651                                  	;;mov	ax,(GETEXTCNTRY shl 8) + SETCOLLATE
 15652                                  				; AH = 'Get Extended Country Info'
 15653                                  				; AL = 'Get Pointer to Collating Table'
 15654 000012D7 BBFFFF                  	mov	bx,-1		; BX = code page of interest = CON
 15655 000012DA B90500                  	mov	cx,5		; CX = length of info buffer
 15656 000012DD 89DA                    	mov	dx,bx		; DX = country ID = default
 15657                                  	;mov	di,offset TRANGROUP:CountryPtrInfo
 15658 000012DF BF[2EA6]                	mov	di,CountryPtrInfo
 15659                                  				; ES:DI = ptr to info buffer
 15660 000012E2 CD21                    	int	21h		; call DOS
 15661 000012E4 7305                    	jnc	short scRet	; success
 15662                                  
 15663                                  ;*	Set CountryPtrId = 0 to signal no collating table.
 15664                                  
 15665                                  scNoTable:			;M028
 15666 000012E6 C606[2EA6]00            	mov	byte [CountryPtrId],0
 15667                                  scRet:
 15668 000012EB C3                      	retn
 15669                                  
 15670                                  ; ---------------------------------------------------------------------------
 15671                                  
 15672                                  ;***	SetOptions - check and set options
 15673                                  ;
 15674                                  ;	ENTRY	nothing
 15675                                  ;
 15676                                  ;	EXIT	nothing
 15677                                  ;
 15678                                  ;	USED	AX,BX,CX,DX
 15679                                  ;
 15680                                  ;	EFFECTS
 15681                                  ;
 15682                                  ;	  Bits may contain modified option settings.
 15683                                  ;	  Display_Ioctl table, including LinPerPag variable, is filled in.
 15684                                  ;	  LeftOnPage is initialized to # lines till end of page is handled.
 15685                                  ;	  PerLine is set according to /w presence.
 15686                                  
 15687                                  	; 16/02/2023
 15688                                  
 15689                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 15690                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:12BEh
 15691                                  
 15692                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 15693                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1335h
 15694                                  
 15695                                  SetOptions:
 15696                                  
 15697                                  ;	If bare listing requested, cancel wide listings.
 15698                                  
 15699                                  	;;;test	Bits,mask bare
 15700                                  	;;test	word [_Bits],8
 15701                                  	;test	byte [_Bits],8
 15702                                  	; 07/06/2023
 15703 000012EC F606[FD9D]08            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 15704                                  		; 31/07/2024 ; mask.bare = 8 ; PCDOS 7.1
 15705 000012F1 7405                    	jz	short setopts1
 15706                                  	;;;and	Bits,not mask wide	;M007;Allow /p with /b
 15707                                  	;;and	word [_Bits],0FFFEh
 15708                                  	;;and	byte [_Bits],0FEh
 15709                                  	; 31/07/2024
 15710                                  	;and	word [_Bits],0FFFEh ; PCDOS 7.1 COMMAND.COM
 15711                                  	; 07/06/2023
 15712 000012F3 8026[FD9D]FE            	and	byte [_Bits],~mask.wide ; 0FDh ; MSDOS 6.0
 15713                                  			; 31/07/2024	; 0FEh ; PCDOS 7.1 	
 15714                                  
 15715                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 15716                                  %if 0
 15717                                  ;setopts1:	; MSDOS 5.0 COMMAND.COM
 15718                                  	; 07/06/2023
 15719                                   	; MSDOS 6.22 COMMAND.COM
 15720                                  setopts0:
 15721                                  	;test	word [_Bits],12h  ; (mask bare) or (mask wide)
 15722                                  	test	byte [_Bits],(mask.bare|mask.wide)
 15723                                  	jz      short setopts1
 15724                                  	;and 	word [_Bits],0FFFEh ; not mask cratio
 15725                                  	and	byte [_Bits],~mask.cratio
 15726                                  %endif
 15727                                  
 15728                                  setopts1:
 15729                                  ;	Set # lines per display page.
 15730                                  
 15731                                  ;M01  Obtain screen height from ROM BIOS data area
 15732                                  ;
 15733                                  ;M01	mov	LinPerPag,LINESPERPAGE	; default value
 15734                                  
 15735 000012F8 1E                      	push	ds
 15736                                  	;mov	ax,ROMBIOS_DATA 	; Get ROM Data segment
 15737 000012F9 B84000                  	mov	ax,40h
 15738 000012FC 8ED8                    	mov	ds,ax			;
 15739                                  	;Assume	DS:ROMBIOS_DATA
 15740                                  
 15741                                  	;mov	al,[CRT_Rows] ; [84h]	; Get max rows
 15742 000012FE A08400                  	mov	al,[84h]
 15743 00001301 1F                      	pop	ds			;
 15744                                  	;Assume	DS:Trangroup
 15745                                  
 15746 00001302 08C0                    	or	al,al			; If zero specified
 15747 00001304 7502                    	jnz	short setopts2		;
 15748                                  
 15749                                  	;mov	al,LINESPERPAGE 	; assume 24 rows
 15750 00001306 B019                    	mov	al,25	; MSDOS 5.0 COMMAND.COM (TRANGROUP:11D1h)
 15751                                  setopts2:
 15752 00001308 30E4                    	xor	ah,ah
 15753                                  setopts3:
 15754 0000130A FEC0                    	inc	al			; height + 1 ;M018
 15755                                  
 15756 0000130C A3[879F]                	mov	[LinPerPag],ax		; set the rows now
 15757                                  
 15758                                  ; Now the console driver can change the rows if it knows better (M01 end)
 15759                                  
 15760                                  	;mov	ax,(IOCTL shl 8)+GENERIC_IOCTL_HANDLE
 15761                                  					; IOCTL for handles
 15762 0000130F B80C44                  	mov	ax,440Ch
 15763                                  	;mov	bx,STDOUT		; handle #
 15764 00001312 BB0100                  	mov	bx,1
 15765                                  	;mov	ch,IOC_SC		; screen
 15766 00001315 B503                    	mov	ch,3
 15767                                  	;mov	cl,get_generic		; get display info
 15768 00001317 B17F                    	mov	cl,7Fh
 15769 00001319 BA[779F]                	mov	dx,Display_Ioctl	; info block
 15770 0000131C CD21                    	int	21h			; call DOS
 15771                                  
 15772 0000131E A1[879F]                	mov	ax,[LinPerPag]		; AX = # lines per page
 15773 00001321 A3[909C]                	mov	[LeftOnPage],ax		; initialize # lines left on page
 15774                                  
 15775                                  ;	Set # entries per line.
 15776                                  
 15777                                  	;mov	byte [PerLine],NORMPERLIN
 15778                                  					; # entries per line without /w
 15779 00001324 C606[8D9C]01            	mov	byte [PerLine],1
 15780                                  	;;;test	Bits,mask wide
 15781                                  	;;test	word [_Bits],1
 15782                                  	;test	byte [_Bits],1
 15783                                  	; 07/06/2023
 15784 00001329 F606[FD9D]01            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 15785                                  			; 31/07/2024   ; 1 ; PCDOS 7.1
 15786 0000132E 7405                    	jz	short setopts4
 15787                                  	;mov	byte [PerLine],WIDEPERLIN
 15788                                  					; # entries per line with /w
 15789 00001330 C606[8D9C]05            	mov	byte [PerLine],5
 15790                                  setopts4:
 15791                                  				;M011;start;The following code checks if a drive
 15792                                  				;letter has been parsed into SrcBuf, and if
 15793                                  				;so, the correct drive number is loaded into
 15794                                  				;the first FCB, at offset 5C.
 15795                                  
 15796                                  	;cmp	TRANGROUP:[SrcBuf+1],COLON_CHAR	; is this a drive letter?
 15797 00001335 803E[929E]3A            	cmp	byte [SrcBuf+1],':'
 15798 0000133A 750A                    	jne	short soRet
 15799                                  	;mov	al,TRANGROUP:[SrcBuf]		; load drive letter into al
 15800 0000133C A0[919E]                	mov	al,[SrcBuf]
 15801                                  	;and	al,not 20h			; capitalize ASCII drive letter (LowerCase-32)-->UpperCase
 15802 0000133F 24DF                    	and	al,0DFh ; ~20h ; not 20h
 15803 00001341 2C40                    	sub	al,'@'	; 40h			; convert to 1-based number (1=A)
 15804 00001343 A25C00                  	mov	[FCB],al  ; [5Ch]		; store in first FCB
 15805                                  						;M011;end
 15806                                  soRet:
 15807 00001346 C3                      	retn
 15808                                  
 15809                                  ; ---------------------------------------------------------------------------
 15810                                  
 15811                                  ;***	CrunchPath - analyze supplied or default pathname
 15812                                  ;
 15813                                  ;	ENTRY	PathPos = ptr to pathname buffer
 15814                                  ;		PathCnt = length of pathname, not incl trailing delimiter
 15815                                  ;		Pathname in buffer must end in delimiter (like CR) and
 15816                                  ;		 must have space for another char after the delimiter.
 15817                                  ;
 15818                                  ;	EXIT	CY = clear if no error
 15819                                  ;		We are changed to directory found in pathname
 15820                                  ;		Previous directory ready to be restored via RestUDir
 15821                                  ;		FCB filename fields contain filename (possibly w/ wildcards)
 15822                                  ;
 15823                                  ;		If error occurred,
 15824                                  ;		CY = set
 15825                                  ;		ComSw = error bits (see ErrorRec)
 15826                                  ;		If ComSw not set,
 15827                                  ;		Ready for DOS Get Extended Error call
 15828                                  
 15829                                  	; 16/02/2023
 15830                                  CrunchPath:
 15831 00001347 E87802                  	call	FileIsDevice
 15832 0000134A 7507                    	jne	short crpath1	; not a device, skip ahead
 15833                                  	;;;or	ComSw,mask dev	; signal file is device
 15834                                  	;;or	word [COMSW],1
 15835                                  	;or	byte [COMSW],1
 15836 0000134C 800E[7B9C]01            	or	byte [COMSW],mask.dev
 15837 00001351 EB2F                    	jmp	short cpErr	; return error
 15838                                  crpath1:
 15839 00001353 FF36[019E]              	push	word [PathPos]	; save ptr to pathname
 15840 00001357 C606[099E]FF            	mov	byte [DirFlag],-1
 15841                                  				; tell PathCrunch not to parse file into FCB
 15842 0000135C E8C116                  	call	PathCrunch	; change to directory in pathname
 15843 0000135F C606[099E]00            	mov	byte [DirFlag],0
 15844                                  				; reset our little flag
 15845 00001364 5E                      	pop	si		; SI = ptr to pathname
 15846 00001365 7208                    	jc	short cpNoDir	; didn't find directory path
 15847 00001367 741A                    	jz	short cpRet	; found directory path w/ no filename
 15848                                  				;  - leave wildcard default in FCB and return
 15849                                  
 15850                                  ;*	We found a directory, and there was a filename attached.
 15851                                  ;	DestTail = ptr to ASCIIZ filename
 15852                                  
 15853 00001369 8B36[2B9E]              	mov	si,[DestTail]	; SI = ptr to filename
 15854 0000136D EB28                    	jmp	short cpFile	; go parse the file into FCB
 15855                                  
 15856                                  ;*	PathCrunch failed to find a directory in the pathname.
 15857                                  ;
 15858                                  ;	Msg_Numb = error code
 15859                                  ;	DestIsDir = nonzero if path delimiter char's occur in pathname
 15860                                  ;	SI = ptr to pathname (now an ASCIIZ string)
 15861                                  
 15862                                  cpNoDir:
 15863 0000136F A1[A49F]                	mov	ax,[Msg_Numb]	  ; AX = error code from PathCrunch
 15864 00001372 09C0                    	or	ax,ax
 15865 00001374 750C                    	jnz	short cpErr	  ; error occurred - return it
 15866 00001376 803E[299E]00            	cmp	byte [DestIsDir],0
 15867 0000137B 7407                    	je	short cpMaybe	  ; no path delimiters seen, maybe it's a file
 15868                                  crpath3:
 15869                                  	;;;or	ComSw,mask baddir ; signal invalid directory name
 15870                                  	;;or	word [COMSW],2
 15871                                  	;or	byte [COMSW],2
 15872 0000137D 800E[7B9C]02            	or	byte [COMSW],mask.baddir
 15873                                  	;jmp	short cpErr	  ; return error
 15874                                  	; 16/02/2023
 15875                                  cpErr:
 15876 00001382 F9                      	stc			  ; return error
 15877                                  cpRet:
 15878 00001383 C3                      	retn
 15879                                  
 15880                                  cpMaybe:
 15881                                  ;	SI = ptr to pathname
 15882                                  
 15883                                  	;cmp	byte [si+1],COLON_CHAR
 15884 00001384 807C013A                	cmp	byte [si+1],':'
 15885 00001388 7501                    	jne	short crpath2	  ; no drive specifier, skip ahead
 15886 0000138A AD                      	lodsw			  ; SI = ptr past drive specifier "d:"
 15887                                  crpath2:
 15888 0000138B 813C2E2E                	cmp	word [si],".."	; 2E2Eh
 15889 0000138F 7506                    	jne	short cpFile	  ; if not "..", treat as a file
 15890 00001391 807C0200                	cmp	byte [si+2],0
 15891                                  	;jne	short cpFile	  ; or if there's more after "..", treat as file
 15892                                  	;;;;or	ComSw,mask baddir ; signal invalid directory
 15893                                  	;;;or	word [COMSW],2
 15894                                  	;;or	byte [COMSW],2
 15895                                  	;or	byte [COMSW],mask.baddir
 15896                                  	;jmp	short cpErr	  ; return error
 15897                                  	; 16/02/2023
 15898 00001395 74E6                    	je	short crpath3
 15899                                  
 15900                                  ;	The preceding code was taken from the old DIR routine.
 15901                                  ;	It's garbage, I'm afraid. It's meant to check for ".."
 15902                                  ;	occurring when we're at the root directory. Too bad it
 15903                                  ;	doesn't handle problems with "..\..", etc.
 15904                                  
 15905                                  ;	We're ready to parse a filename into the FCB.
 15906                                  ;	SI = ptr to ASCIIZ filename
 15907                                  
 15908                                  cpFile:	
 15909 00001397 BF5C00                  	mov	di,FCB	; 5Ch	; DI = ptr to FCB
 15910 0000139A B80E29                  	mov	ax,290Eh
 15911                                  	;mov	ax,(Parse_File_Descriptor<<8)|0Eh
 15912                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 0Eh
 15913                                  				; wildcards already in FCB used as defaults
 15914 0000139D CD21                    	int	21h
 15915 0000139F F8                      	clc			; return success
 15916                                  	;jmp	short cpRet
 15917                                  	; 16/02/2023
 15918 000013A0 C3                      	retn
 15919                                  
 15920                                  ;cpErr:
 15921                                  ;	stc			; return error
 15922                                  ;cpRet:
 15923                                  ;	retn
 15924                                  
 15925                                  ; ---------------------------------------------------------------------------
 15926                                  
 15927                                  ;***	InstallCtrlC - install our private control-C handler
 15928                                  ;
 15929                                  ;	Put our control-c handler in front of command.com's default
 15930                                  ;	handler, to make sure the user's default directory gets restored.
 15931                                  ;	This shouldn't be necessary, but, for now, there are situations
 15932                                  ;	where the TDATA segment is left in a modified state when a
 15933                                  ;	control-c occurs.  This means that the transient will be
 15934                                  ;	reloaded, and the user's directory cannot be restored.
 15935                                  ;
 15936                                  ;	Bugbug:  fix the wider problem?  Involves message services.  Ugly.
 15937                                  ;
 15938                                  ;	ENTRY	nothing
 15939                                  ;
 15940                                  ;	EXIT	nothing
 15941                                  ;
 15942                                  ;	USED	AX,BX,DX
 15943                                  ;
 15944                                  ;	EFFECTS
 15945                                  ;
 15946                                  ;	  CtrlCHandler address placed in int 23 vector.
 15947                                  ;
 15948                                  ;	NOTE
 15949                                  ;
 15950                                  ;	  Command.com's basic control-c handler will be restored
 15951                                  ;	  to the int 23 vector by the HeadFix routine, after DIR finishes.
 15952                                  
 15953                                  	; 16/02/2023
 15954                                  InstallCtrlC:
 15955 000013A1 06                      	push	es			; preserve ES
 15956 000013A2 B82335                  	mov	ax,3523h
 15957                                  	;mov	ax,(GET_INTERRUPT_VECTOR<<8)+23h
 15958                                  	;;mov	ax,(GET_INTERRUPT_VECTOR shl 8) + 23h
 15959 000013A5 CD21                    	int	21h
 15960 000013A7 891E[33A6]              	mov	[OldCtrlCHandler],bx	; save old int 23 vector
 15961 000013AB 8C06[35A6]              	mov	[OldCtrlCHandler+2],es	 
 15962 000013AF 07                      	pop	es			; restore ES
 15963                                  
 15964 000013B0 BA[C41C]                	mov	dx,CtrlCHandler 	; DS:DX = ptr to CtrlCHandler
 15965 000013B3 B82325                  	mov	ax,2523h
 15966                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+23h
 15967                                  	;;mov	ax,(SET_INTERRUPT_VECTOR shl 8) + 23h
 15968 000013B6 CD21                    	int	21h
 15969 000013B8 C3                      	retn
 15970                                  
 15971                                  ; ---------------------------------------------------------------------------
 15972                                  
 15973                                  ;***	ListSubds - search and list files in subdirectories
 15974                                  ;
 15975                                  ;	ENTRY	Current directory (on selected drive) is top of subdir tree
 15976                                  ;		FCB is still set up for file searches
 15977                                  ;		Bits, AttrSpecified, AttrSelect, DestBuf all still set up
 15978                                  ;
 15979                                  ;	EXIT	CY = clear if no error
 15980                                  ;		FileCnt = # files found & displayed
 15981                                  ;		FileSiz = total size of files found
 15982                                  ;
 15983                                  ;		If error,
 15984                                  ;		CY = set
 15985                                  ;		Ready for DOS Get Extended Error call
 15986                                  ;
 15987                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15988                                  ;
 15989                                  ;	EFFECTS
 15990                                  ;
 15991                                  ;	  FileCntTotal, FileSizTotal are updated.
 15992                                  ;	  Subdirectories may be listed on standard output device.
 15993                                  ;
 15994                                  ;	NOTES
 15995                                  ;
 15996                                  ;	  ListSubds seeds the recursive entry point lsNode with a ptr
 15997                                  ;	   to a buffer where we'll stack up subdirectory filenames.
 15998                                  ;	   Each name is stored ASCIIZ.
 15999                                  
 16000                                  	; 16/02/2023
 16001                                  ListSubds:
 16002                                  	;invoke	SetRest1		; make sure user's dir gets restored
 16003 000013B9 E8561D                  	call	SetRest1
 16004                                  
 16005 000013BC BB[EB9E]                	mov	bx,ScanBuf   		; BX = ptr to child name buffer
 16006                                  lsNode:
 16007 000013BF C60700                  	mov	byte [bx],0		; start with null child name
 16008                                  lsLoop:
 16009 000013C2 E88702                  	call	FindNextChild		; search for next subdirectory
 16010 000013C5 7235                    	jc	short lsErr		; search failed - examine error
 16011                                  
 16012 000013C7 89DA                    	mov	dx,bx			; DX = ptr to child's name
 16013 000013C9 E8ED04                  	call	ChangeDir		; enter child directory
 16014                                  
 16015                                  					; M023;start
 16016 000013CC 7306                    	jnc	short lstsd1		; check for error
 16017                                  	;cmp	ax,3
 16018 000013CE 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND	; error due to len(pathname)>MAXPATH?
 16019 000013D1 74EF                    	je	short lsLoop		; yes, skip over this subdirectory
 16020                                  	;jmp	short lsRet		; no, other error: DIR must fail
 16021                                  	; 16/02/2023			; M023;end
 16022 000013D3 C3                      	retn
 16023                                  lstsd1:	
 16024 000013D4 53                      	push	bx
 16025 000013D5 E82203                  	call	ListDir			; list the directory
 16026 000013D8 5B                      	pop	bx
 16027                                  
 16028                                  ;	Note we're ignoring errors returned here.
 16029                                  
 16030 000013D9 89DF                    	mov	di,bx			; DI = ptr to child's name
 16031 000013DB B90D00                  	mov	cx,13			; CX = max name length w/ null
 16032 000013DE 30C0                    	xor	al,al			; AL = zero byte to look for
 16033 000013E0 F2AE                    	repne	scasb			; DI = ptr to next name pos'n in buf
 16034 000013E2 53                      	push	bx			; save ptr to child's name
 16035 000013E3 89FB                    	mov	bx,di			; BX = ptr to next name pos'n in buf
 16036 000013E5 E8D7FF                  	call	lsNode			; recurse from new node
 16037 000013E8 5B                      	pop	bx			; BX = ptr to child's name
 16038 000013E9 9C                      	pushf				; save error condition
 16039                                  	
 16040                                  	;;shove	0
 16041                                  	;mov	ax,0
 16042 000013EA 29C0                    	sub	ax,ax ; 0
 16043 000013EC 50                      	push	ax
 16044                                  	;shove	".."
 16045 000013ED B82E2E                  	mov	ax,'..'  ; 2E2Eh
 16046 000013F0 50                      	push	ax
 16047 000013F1 89E2                    	mov	dx,sp			; DX = ptr to "..",0 on stack
 16048 000013F3 E8C304                  	call	ChangeDir		; return to parent directory
 16049 000013F6 58                      	pop	ax			; restore stack
 16050 000013F7 58                      	pop	ax
 16051                                  
 16052 000013F8 9D                      	popf				; restore error condition from child
 16053                                  	;jc	short lsRet		; return error
 16054                                  	;jmp	short lsLoop		; look for more children
 16055                                  	; 16/02/2023
 16056 000013F9 73C7                    	jnc	short lsLoop
 16057 000013FB C3                      	retn
 16058                                  lsErr:
 16059 000013FC E84A0C                  	call	get_ext_error_number	; AX = extended error code
 16060                                  	;cmp	ax,2
 16061 000013FF 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 16062 00001402 7406                    	je	short lsRet		; file not found, we're ok
 16063                                  	;cmp	ax,18
 16064 00001404 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 16065 00001407 7401                    	je	short lsRet		; no more files, we're ok
 16066 00001409 F9                      	stc				; return other errors
 16067                                  lsRet:	
 16068 0000140A C3                      	retn
 16069                                  
 16070                                  ; ---------------------------------------------------------------------------
 16071                                  
 16072                                  	;break	<DIR support routines>
 16073                                  
 16074                                  ;***	SUPPORT ROUTINES
 16075                                  
 16076                                  ; ----------------------
 16077                                  
 16078                                  ;***	CheckChild - check potential subdirectory name for FindNextChild
 16079                                  ;
 16080                                  ;	ENTRY	DirBuf contains DOS Find-buffer with potential child
 16081                                  ;		BX = ptr to last child's name
 16082                                  ;		BP = ptr to temp child's name
 16083                                  ;
 16084                                  ;	EXIT	nothing
 16085                                  ;
 16086                                  ;	USED	AX,CX,SI,DI
 16087                                  ;
 16088                                  ;	EFFECTS
 16089                                  ;
 16090                                  ;	  Filename pointed to by BP may be changed.
 16091                                  ;
 16092                                  ;	NOTES
 16093                                  ;
 16094                                  ;	  Potential filename replaces temp filename if:
 16095                                  ;	   it's a subdirectory file;
 16096                                  ;	   it doesn't start with a '.';
 16097                                  ;	   it's alphanumerically greater than last child's name;
 16098                                  ;	   and it's alphanumerically less than temp name.
 16099                                  
 16100                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16101                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16102                                  CheckChild:
 16103                                  	;test	DirBuf.find_buf_attr,ATTR_DIRECTORY
 16104 0000140B F606[C09D]10            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY ; 10h
 16105 00001410 741D                    	jz	short ccRet	; not a subdirectory file- return
 16106                                  
 16107                                  	; 16/02/2023
 16108 00001412 BE[C99D]                	mov	si,DIRBUF+FIND_BUF.PNAME
 16109 00001415 803C2E                  	cmp	byte [si],'.'
 16110                                  	;;cmp	DirBuf.find_buf_pname,'.'
 16111                                  	;cmp	byte [DIRBUF+FIND_BUF.PNAME],'.'
 16112 00001418 7415                    	je	short ccRet	; starts with a dot- return
 16113                                  
 16114                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 16115                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 16116 0000141A 89DF                    	mov	di,bx
 16117 0000141C E8B104                  	call	CmpAscz		; compare candidate to last child's name
 16118 0000141F 760E                    	jna	short ccRet	; it's not above it- return
 16119                                  
 16120                                  	; 07/06/2023
 16121                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 16122                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 16123                                  	; si = DIRBUF+FIND_BUF.PNAME
 16124 00001421 89EF                    	mov	di,bp
 16125 00001423 E8AA04                  	call	CmpAscz		; compare candidate to temp name
 16126 00001426 7307                    	jnb	short ccRet	; it's not below it- return
 16127                                  
 16128                                  ;	New kid is alright. Copy to temp.
 16129                                  
 16130                                  	; 07/06/2023
 16131                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 16132                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 16133                                  	; si = DIRBUF+FIND_BUF.PNAME
 16134 00001428 89EF                    	mov	di,bp
 16135 0000142A B90D00                  	mov	cx,13
 16136 0000142D F3A4                    	rep	movsb
 16137                                  ccRet:
 16138 0000142F C3                      	retn
 16139                                  
 16140                                  ; ---------------------------------------------------------------------------
 16141                                  
 16142                                  ;***	CmpEntry - compare one directory entry to another in sort order
 16143                                  ;
 16144                                  ;	Compare one directory entry against another according to
 16145                                  ;	the sort codes in DestBuf. One or more comparisons
 16146                                  ;	may be made of file name, extension, time/date, and
 16147                                  ;	size.  Comparisons may be made for upward or downward
 16148                                  ;	sort order.
 16149                                  ;
 16150                                  ;	ENTRY	ES:BX = ptr to entry to compare
 16151                                  ;		ES:BP = ptr to entry to be compared against
 16152                                  ;		DestBuf contains sort codes (see DestBuf)
 16153                                  ;		DS = TRANGROUP seg addr
 16154                                  ;
 16155                                  ;	EXIT	BX = unchanged
 16156                                  ;		BP = unchanged
 16157                                  ;		Condition flags set for same, above, or below
 16158                                  ;		 comparing BX entry against BP entry.
 16159                                  ;		 'Same, above, below' translate to 'same, after, before'.
 16160                                  ;
 16161                                  ;	USED:	AX,CX,DX,SI,DI
 16162                                  
 16163                                  	; 16/02/2023
 16164                                  CmpEntry:
 16165 00001430 BE[2E9E]                	mov	si,DestBuf	; (DS:SI) = ptr to sort codes
 16166                                  ceLoop:
 16167 00001433 31C0                    	xor	ax,ax		; AX = 0
 16168 00001435 8A04                    	mov	al,[si]		; AL = sort code
 16169 00001437 08C0                    	or	al,al
 16170 00001439 741C                    	jz	short ceDone	; sort code is zero, we're done
 16171 0000143B 46                      	inc	si		; DS:SI = ptr to next sort code
 16172 0000143C 56                      	push	si		; save ptr to next sort code
 16173 0000143D FEC8                    	dec	al
 16174 0000143F D0E0                    	shl	al,1
 16175                                  	;sal	al,1		; AX = index into cmp call table
 16176                                  				; CY set for downward sort order
 16177 00001441 89C6                    	mov	si,ax		; SI = index into cmp call table
 16178 00001443 2E8B84[5814]            	mov	ax,[cs:si+FieldCmps]
 16179                                  				; AX = addr of compare routine
 16180 00001448 7204                    	jc	short ceDn	; downwards sort - go swap entries
 16181 0000144A FFD0                    	call	ax 		; do upwards sort
 16182 0000144C EB06                    	jmp	short ceNs
 16183                                  ceDn:
 16184 0000144E 87DD                    	xchg	bx,bp		; swap entry ptrs for downward sort order
 16185 00001450 FFD0                    	call	ax		; do sort
 16186 00001452 87DD                    	xchg	bx,bp		; swap ptrs back
 16187                                  ceNs:
 16188 00001454 5E                      	pop	si		; SI = ptr to next sort code
 16189 00001455 74DC                    	je	short ceLoop	; compare showed no difference, keep trying
 16190                                  ceDone:
 16191                                  
 16192                                  ;	Get here either from unequal compare or sort code = 0.
 16193                                  ;	In the latter case, condition codes indicate equality,
 16194                                  ;	which is correct.
 16195                                  
 16196 00001457 C3                      	retn
 16197                                  
 16198                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16199                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:1339h)
 16200                                  
 16201                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 16202                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:144Eh)
 16203                                  
 16204                                  FieldCmps:		; call table of entry comparisons
 16205 00001458 [6214]                  	dw	CmpName
 16206 0000145A [6D14]                  	dw	CmpExt
 16207 0000145C [BE14]                  	dw	CmpTime
 16208 0000145E [DA14]                  	dw	CmpSize
 16209 00001460 [DF14]                  	dw	CmpType
 16210                                  
 16211                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 16212                                  %if 0
 16213                                  	; 05/06/2023 - Retro DOS 4.2 COMMAND.COM
 16214                                  	dw	CmpCratio
 16215                                  %endif
 16216                                  
 16217                                  ; ---------------------------------------------------------------------------
 16218                                  
 16219                                  ;***	CmpName - compare file name of two entries
 16220                                  ;***	CmpExt - compare extension of two entries
 16221                                  ;
 16222                                  ;	ENTRY	ES:BX = ptr to one entry
 16223                                  ;		ES:BP = ptr to another entry
 16224                                  ;
 16225                                  ;	EXIT	BX = unchanged
 16226                                  ;		BP = unchanged
 16227                                  ;		Condition flags set for same, above, or below
 16228                                  ;		comparing BX entry to BP entry.
 16229                                  ;
 16230                                  ;	USED:	AX,CX,DX,SI,DI
 16231                                  
 16232                                  	; 16/02/2023
 16233                                  CmpName:
 16234 00001462 89DE                    	mov	si,bx		; ES:SI = ptr to BX entry
 16235 00001464 89EF                    	mov	di,bp		; ES:DI = ptr to BP entry
 16236                                  	;;add	si,filename	; ES:SI = ptr to BX name
 16237                                  	;add	si,1
 16238                                  	; 25/04/2023
 16239 00001466 46                      	inc	si
 16240                                  	;;add	di,filename	; ES:DI = ptr to BP name
 16241                                  	;add	di,1
 16242                                  	; 25/04/2023
 16243 00001467 47                      	inc	di
 16244                                  	;mov	cx,size filename
 16245                                  				; CX = length of name
 16246 00001468 B90800                  	mov	cx,8
 16247 0000146B EB0C                    	jmp	short CmpStr
 16248                                  
 16249                                  CmpExt:
 16250                                  	; 07/06/2023
 16251                                  	;mov	si,bx		; ES:SI = ptr to BX entry
 16252                                  	;mov	di,bp		; ES:DI = ptr to BP entry
 16253                                  	;;add	si,fileext	; ES:SI = ptr to BX extension
 16254                                  	;add	si,9
 16255                                  	;;add	di,fileext	; ES:DI = ptr to BP extension
 16256                                  	;add	di,9
 16257                                  	;
 16258 0000146D BE0900                  	mov	si,9
 16259 00001470 89F7                    	mov	di,si ; mov di,9
 16260 00001472 01DE                    	add	si,bx
 16261 00001474 01EF                    	add	di,bp
 16262                                  	;
 16263                                  	;mov	cx,size fileext	; CX = length of extension field
 16264 00001476 B90300                  	mov	cx,3
 16265                                  
 16266                                  ;	Bugbug:	use symbol for subfunction code.
 16267                                  
 16268                                  CmpStr:	
 16269 00001479 803E[2EA6]06            	cmp	byte [CountryPtrId],6
 16270 0000147E 753A                    	jne	short cnNoCollTable
 16271                                  				; no collating table available
 16272                                  
 16273                                  ;*	Compare strings using collating table.
 16274                                  ;
 16275                                  ;	ES:SI = ptr to 1st string
 16276                                  ;	ES:DI = ptr to 2nd string
 16277                                  ;	CX = length
 16278                                  
 16279 00001480 55                      	push	bp		; preserve BP
 16280 00001481 53                      	push	bx		; preserve BX
 16281 00001482 1E                      	push	ds		; preserve DS
 16282 00001483 C51E[2FA6]              	lds	bx,[CountryPtr]	; DS:BX = ptr to collating table
 16283                                  	;assume	ds:NOTHING
 16284 00001487 8B2F                    	mov	bp,[bx]		; BP = size of collating table
 16285 00001489 43                      	inc	bx
 16286 0000148A 43                      	inc	bx		; DS:BX = ptr to collating values
 16287                                  				; DS:[BX]-2 = size of table
 16288 0000148B 31C0                    	xor	ax,ax		; AX = 0 for starters
 16289                                  
 16290                                  ;	Bugbug:	Investigate removing collating table length checks.
 16291                                  
 16292                                  cnNextChar:
 16293 0000148D 268A05                  	mov	al,[es:di]	; AL = AX = char from 2nd string
 16294 00001490 47                      	inc	di		; ES:DI = ptr to next char 2nd string
 16295                                  
 16296                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 16297                                  %if 0
 16298                                  	cmp	ax,bp		; compare to collating table length
 16299                                  	jae	short cn1 	; char not in table
 16300                                  	xlat				
 16301                                  cn1:				; AL = AX = collating value
 16302                                  	mov	dx,ax		; DX = collating value from 2nd string
 16303                                  	;lods	byte ptr es:[si]
 16304                                  	es	lodsb		; AL = AX = char from 1st string
 16305                                  				; ES:SI = ptr to next char 1st string
 16306                                  	cmp	ax,bp		; compare to collating table length
 16307                                  	jae	short cn2	; char not in table
 16308                                  	xlat				
 16309                                  cn2:				; AL = AX = collating value
 16310                                  	cmp	ax,dx		; compare collating values
 16311                                  	loope	cnNextChar	; until unequal or no more left
 16312                                  
 16313                                  	pop	ds		; restore DS
 16314                                  	;assume	ds:TRANGROUP
 16315                                  	pop	bx		; restore BX
 16316                                  	pop	bp		; restore BP
 16317                                  	retn
 16318                                  
 16319                                  ;*	If no collating table is available, simply compare raw ASCII values.
 16320                                  ;	Don't we wish we could just do this all the time? Sigh.
 16321                                  
 16322                                  %else
 16323                                  	; 31/07/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 16324 00001491 84F6                    	test	dh,dh
 16325 00001493 7408                    	jz	short cn1
 16326 00001495 30F6                    	xor	dh,dh
 16327 00001497 88C2                    	mov	dl,al
 16328                                  	;lods	byte ptr es:[si]
 16329 00001499 26AC                    	es	lodsb
 16330 0000149B EB15                    	jmp	short cn4
 16331                                  cn1:
 16332 0000149D E8BF12                  	call	testkanj
 16333 000014A0 7402                    	jz	short cn2
 16334 000014A2 B601                    	mov	dh,1
 16335                                  cn2:
 16336 000014A4 39E8                    	cmp	ax,bp
 16337 000014A6 7301                    	jnb	short cn3
 16338 000014A8 D7                      	xlat
 16339                                  cn3:
 16340 000014A9 88C2                    	mov	dl,al
 16341                                  	;lods	byte ptr es:[si]
 16342 000014AB 26AC                    	es	lodsb
 16343 000014AD 39E8                    	cmp	ax,bp
 16344 000014AF 7301                    	jnb	short cn4
 16345 000014B1 D7                      	xlat
 16346                                  cn4:
 16347 000014B2 38D0                    	cmp	al,dl
 16348 000014B4 E1D7                    	loope	cnNextChar
 16349 000014B6 1F                      	pop	ds
 16350 000014B7 5B                      	pop	bx
 16351 000014B8 5D                      	pop	bp
 16352 000014B9 C3                      	retn	
 16353                                  %endif
 16354                                  
 16355                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16356                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:138Dh)
 16357                                  cnNoCollTable:
 16358                                  	;repe	cmps byte ptr es:[si], byte ptr es:[di] ; 31/07/2024
 16359                                  				;db 0F3h,26h,0A6h,0C3h
 16360 000014BA F3                      	repe	; 0F3h
 16361 000014BB 26                      	es	; 26h
 16362 000014BC A6                      	cmpsb	; 0A6h
 16363 000014BD C3                      	retn	; 0C3h
 16364                                  
 16365                                  ; ---------------------------------------------------------------------------
 16366                                  
 16367                                  ;***	CmpTime - compare entries by date/time
 16368                                  ;
 16369                                  ;	ENTRY	ES:BX = ptr to one entry
 16370                                  ;		ES:BP = ptr to another entry
 16371                                  ;
 16372                                  ;	EXIT	BX = unchanged
 16373                                  ;		BP = unchanged
 16374                                  ;		Condition flags set for same, above, or below
 16375                                  ;		 comparing BX entry to BP entry.
 16376                                  ;
 16377                                  ;	USED:	CX,SI,DI
 16378                                  ;
 16379                                  ;	NOTE	Filetime and filedate fields in our private entry
 16380                                  ;		structure must be adjacent and in that order.
 16381                                  
 16382                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16383                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16384                                  CmpTime:
 16385 000014BE 89DE                    	mov	si,bx
 16386 000014C0 89EF                    	mov	di,bp
 16387                                  	;add	si,filedate + size filedate - 1
 16388 000014C2 83C610                  	add	si,16 ; 15+2-1
 16389                                  	;add	di,filedate + size filedate - 1
 16390 000014C5 83C710                  	add	di,16 ; 15+2-1
 16391                                  	; 07/06/2023
 16392 000014C8 BE1000                  	mov	si,16
 16393                                  CmpST2:		; 07/06/2023
 16394 000014CB 89F7                    	mov	di,si	; mov di,16
 16395 000014CD 01DE                    	add	si,bx
 16396 000014CF 01EF                    	add	di,bp
 16397                                  
 16398                                  	;mov	cx,size filetime + size filedate
 16399 000014D1 B90400                  	mov	cx,4 ; 2+2
 16400 000014D4 FD                      	std
 16401                                  	;repe	cmps byte ptr es:[si],[di]
 16402                                  				;db 0F3h,26h,0A6h, 0FCh,0C3h
 16403 000014D5 F3                      	repe	; 0F3h
 16404 000014D6 26                      	es	; 26h
 16405 000014D7 A6                      	cmpsb	; 0A6h
 16406                                  	
 16407 000014D8 FC                      	cld	; 0FCh
 16408 000014D9 C3                      	retn	; 0C3h
 16409                                  
 16410                                  ; ---------------------------------------------------------------------------
 16411                                  
 16412                                  ;***	CmpSize - compare entries by size
 16413                                  ;
 16414                                  ;	ENTRY	ES:BX = ptr to one entry
 16415                                  ;		ES:BP = ptr to another entry
 16416                                  ;
 16417                                  ;	EXIT	BX = unchanged
 16418                                  ;		BP = unchanged
 16419                                  ;		Condition flags set for same, above, or below
 16420                                  ;		 comparing BX entry to BP entry.
 16421                                  ;
 16422                                  ;	USED:	CX,SI,DI
 16423                                  
 16424                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16425                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16426                                  CmpSize:
 16427                                  	;mov	si,bx
 16428                                  	;mov	di,bp
 16429                                  	;;add	si,filesize + size filesize - 1
 16430                                  	;add	si,20  ; 17+4-1
 16431                                  	;;add	di,filesize + size filesize - 1
 16432                                  	;add	di,20  ; 17+4-1
 16433                                  	; 07/06/2023
 16434 000014DA BE1400                  	mov	si,20
 16435                                  	;;;
 16436 000014DD EBEC                    	jmp	short CmpST2 ; 07/06/2023
 16437                                  	;;;
 16438                                  ;CmpST2:
 16439                                  ;	mov	di,si	; mov di,20
 16440                                  ;	add	si,bx
 16441                                  ;	add	di,bp
 16442                                  ;
 16443                                  ;	;mov	cx,size filesize
 16444                                  ;	mov	cx,4
 16445                                  ;	std
 16446                                  ;	;repe	cmps byte ptr es:[si],[di]
 16447                                  ;				;db 0F3h,26h,0A6h
 16448                                  ;	repe	; 0F3h
 16449                                  ;	es	; 26h
 16450                                  ;	cmpsb	; 0A6h
 16451                                  ;
 16452                                  ;	cld
 16453                                  ;	retn
 16454                                  
 16455                                  ; ---------------------------------------------------------------------------
 16456                                  
 16457                                  ;***	CmpType - compare entries by file type (subdirectory or not)
 16458                                  ;
 16459                                  ;	ENTRY	ES:BX = ptr to one entry
 16460                                  ;		ES:BP = ptr to another entry
 16461                                  ;
 16462                                  ;	EXIT	BX = unchanged
 16463                                  ;		BP = unchanged
 16464                                  ;		Condition flags set for same, above, or below
 16465                                  ;		 comparing BX entry to BP entry.
 16466                                  ;
 16467                                  ;	USED:	AX
 16468                                  
 16469                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 16470                                  CmpType:
 16471                                  	;mov	al,es:[bx].fileattr
 16472 000014DF 268A470C                	mov	al,[es:bx+12]
 16473                                  	;mov	ah,es:[bp].fileattr
 16474 000014E3 268A660C                	mov	ah,[es:bp+12]
 16475                                  	;and	ax,(ATTR_DIRECTORY shl 8) + ATTR_DIRECTORY
 16476                                  	;and	ax,1010h
 16477 000014E7 251010                  	and	ax,(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY
 16478 000014EA 38C4                    	cmp	ah,al
 16479 000014EC C3                      	retn
 16480                                  
 16481                                  ; ---------------------------------------------------------------------------
 16482                                  
 16483                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 16484                                  %if 0
 16485                                  
 16486                                  ;***	CmpCratio - compare entries by compression ratio
 16487                                  ;
 16488                                  ;	ENTRY	ES:BX = ptr to one entry
 16489                                  ;		ES:BP = ptr to another entry
 16490                                  ;
 16491                                  ;	EXIT	BX = unchanged
 16492                                  ;		BP = unchanged
 16493                                  ;		Condition flags set for same, above, or below
 16494                                  ;		 comparing BX entry to BP entry.
 16495                                  ;
 16496                                  ;	USED:	AX
 16497                                  
 16498                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 16499                                  CmpCratio:
 16500                                  	;mov	al,es:[bx].compratio
 16501                                  	mov	al,[es:bx+21]	
 16502                                  	;cmp	al,es:[bp].compratio
 16503                                  	cmp     al,[es:bp+21]
 16504                                  	retn
 16505                                  
 16506                                  %endif
 16507                                  
 16508                                  ; ---------------------------------------------------------------------------
 16509                                  
 16510                                  ;***	DefaultAttr - set default attribute conditions
 16511                                  ;
 16512                                  ;	ENTRY	nothing
 16513                                  ;
 16514                                  ;	EXIT	CY clear
 16515                                  ;
 16516                                  ;	USED
 16517                                  ;
 16518                                  ;	EFFECTS
 16519                                  ;
 16520                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 16521                                  
 16522                                  	; 16/02/2023
 16523                                  DefaultAttr:
 16524                                  	;mov	byte [AttrSpecified],6
 16525 000014ED C606[059E]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM
 16526                                  					; specify H and S
 16527 000014F2 C606[069E]00            	mov	byte [AttrSelect],0	; H and S must be off
 16528 000014F7 F8                      	clc				; return success
 16529                                  dtRet:	; 18/02/2023
 16530 000014F8 C3                      	retn
 16531                                  
 16532                                  ; ---------------------------------------------------------------------------
 16533                                  
 16534                                  ;***	DisplayTotals - display grand total stats
 16535                                  ;
 16536                                  ;	If we searched subdirectories, display the total # files found
 16537                                  ;	 and total size of files found.
 16538                                  ;	Display disk space remaining.
 16539                                  ;
 16540                                  ;	ENTRY	FileCntTotal, FileSizTotal contain correct values
 16541                                  ;		Bits contains setting of /s
 16542                                  ;		FCB contains drive #
 16543                                  ;
 16544                                  ;	EXIT	nothing
 16545                                  ;
 16546                                  ;	USES	AX,DX
 16547                                  ;		FileSiz
 16548                                  
 16549                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16550                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:13D1h
 16551                                  
 16552                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16553                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:14F1h
 16554                                  
 16555                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 16556                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1565h
 16557                                  
 16558                                  DisplayTotals:
 16559                                  	;;;test	Bits,mask subd
 16560                                  	;;test	word [_Bits],4
 16561                                  	;test	byte [_Bits],4
 16562                                  	; 07/06/2023
 16563 000014F9 F606[FD9D]04            	test	byte [_Bits],mask.subd	; 8 ; MSDOS 6.0
 16564                                  			; 31/07/2024	; 4 ; PCDOS 7.1
 16565 000014FE 7423                    	jz	short dtFree		; no subdirectories- do bytes free
 16566                                  
 16567 00001500 E87414                  	call	CRLF2			; start on new line
 16568 00001503 E87304                  	call	UseLine
 16569                                  
 16570 00001506 BA[9292]                	mov	dx,total_ptr
 16571 00001509 E81C3F                  	call	std_printf		; "Total:",cr,lf
 16572 0000150C E86A04                  	call	UseLine
 16573                                  
 16574                                  ; 31/07/2024
 16575                                  ; PCDOS 7.1 COMMAND.COM
 16576                                  	;;;
 16577                                  %if 0
 16578                                  	; 07/06/2023
 16579                                  	; MSDOS 6.22 COMMAND.COM
 16580                                  	;test	word [_Bits],1		; mask.cratio
 16581                                  	test	byte [_Bits],mask.cratio
 16582                                  	jz      short dtCntSize
 16583                                  	mov     ax,[ccluUsedTotal]
 16584                                  	mov     [ccluUsedDir],ax
 16585                                  	mov     si,csecUsedTotal
 16586                                  	mov     di,csecUsedDir
 16587                                  	movsw
 16588                                  	movsw
 16589                                  dtCntSize:    
 16590                                  %endif
 16591                                  	;;;
 16592 0000150F A1[D09C]                	mov	ax,[FileCntTotal]	; AX = # files found mod 64K
 16593 00001512 BE[D49C]                	mov	si,FileSizTotal
 16594 00001515 BF[949C]                	mov	di,FileSiz
 16595 00001518 A5                      	movsw				; move total size to size variable
 16596 00001519 A5                      	movsw
 16597                                  
 16598                                  ; 31/07/2024
 16599                                  ; PCDOS 7.1 COMMAND.COM
 16600                                  %if 1
 16601 0000151A A5                      	movsw
 16602 0000151B A5                      	movsw
 16603 0000151C 8B16[D29C]              	mov	dx,[FileCntTotal+2]
 16604                                  %endif
 16605 00001520 E8D106                  	call	DisplayCntSiz		; display file count & size
 16606                                  dtFree:
 16607                                  
 16608                                  ; 31/07/2024
 16609                                  ; PCDOS 7.1 COMMAND.COM
 16610                                  %if 0
 16611                                  	mov	ah,36h
 16612                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 16613                                  	mov	dl,[FCB] ; [5Ch]	; DL = drive#
 16614                                  	int	21h			; call DOS
 16615                                  	cmp	ax,-1			; check 'invalid drive' return code
 16616                                  	jz	short dtRet		; can't get drive space - return
 16617                                  	mul	cx
 16618                                  	mul	bx
 16619                                  	mov	[Bytes_Free],ax
 16620                                  	mov	[Bytes_Free+2],dx
 16621                                  	mov	dx,bytmes_ptr
 16622                                  %else
 16623                                  	; 31/07/2024 - Retro DOS v5.0
 16624                                  	; PCDOS 7.1 COMMAND.COM
 16625 00001523 E86707                  	call	GetDriveLtr
 16626 00001526 A2[CC9C]                	mov	byte [efs_drive],al ; "C:\"
 16627 00001529 BA[CC9C]                	mov	dx,efs_drive ; "C:\"
 16628 0000152C BF[A09C]                	mov	di,efs_buffer
 16629 0000152F B92C00                  	mov	cx,44
 16630 00001532 26890D                  	mov	[es:di],cx
 16631 00001535 26C745020000            	mov	word [es:di+2],0
 16632 0000153B B80373                  	mov	ax,7303h	; GET EXTENDED FREE SPACE ON DRIVE (Windows95, FAT32)
 16633                                  				; DS:DX	-> ASCIZ string	for drive ("C:\" or "\\SERVER\Share")
 16634                                  				; ES:DI	-> buffer for extended free space structure
 16635                                  				; CX = length of buffer	for extended free space
 16636 0000153E CD21                    	int	21h		; DOS -
 16637                                  				;
 16638                                  				; Return:
 16639                                  				; CF clear if successful
 16640                                  				; ES:DI	buffer filled
 16641                                  				; CF set on error
 16642                                  				; AX = error code
 16643                                  				;
 16644                                  				; Format of extended free space	structure:
 16645                                  				;
 16646                                  				; Offset  Size	  Description
 16647                                  				; 00h	 WORD	 (ret) size of returned	structure
 16648                                  				; 02h	 WORD	 (call)	structure version (0000h)
 16649                                  				;		 (ret) actual structure	version	(0000h)
 16650                                  				; 04h	 DWORD	 number	of sectors per cluster
 16651                                  				;		 (with adjustment for compression)
 16652                                  				; 08h	 DWORD	 number	of bytes per sector
 16653                                  				; 0Ch	 DWORD	 number	of available clusters
 16654                                  				; 10h	 DWORD	 total number of clusters on the drive
 16655                                  				; 14h	 DWORD	 number	of physical sectors available on the drive,
 16656                                  				;		 without adjustment for	compression
 16657                                  				; 18h	 DWORD	 total number of physical sectors on the drive,
 16658                                  				;		 without adjustment for	compression
 16659                                  				; 1Ch	 DWORD	 number	of available allocation	units,
 16660                                  				;		 without adjustment for	compression
 16661                                  				; 20h	 DWORD	 total allocation units,
 16662                                  				;		 without adjustment for	compression
 16663                                  				; 24h  8 BYTEs	 reserved
 16664 00001540 89C1                    	mov	cx,ax		; error	code (cf=1) or (cf=0) efs structure size (44)
 16665 00001542 268B5D08                	mov	bx,[es:di+8]	; bytes	per sector
 16666 00001546 268B4514                	mov	ax,[es:di+14h]	; number of sectors available
 16667 0000154A 268B5516                	mov	dx,[es:di+16h]
 16668 0000154E 7204                    	jc	short get_efs_err
 16669 00001550 08C9                    	or	cl,cl
 16670 00001552 750F                    	jnz	short dtFree_1	; cl = 44 (IBMDOS 7.1 Kernel, INT 21h, AX=7303h	return value)
 16671                                  get_efs_err:
 16672 00001554 B436                    	mov	ah,36h
 16673                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 16674 00001556 8A165C00                	mov	dl,[FCB] 		; DL = drive#
 16675                                  	;mov	dl,[5Ch]
 16676 0000155A CD21                    	int	21h		; DOS -	2+ - GET DISK SPACE
 16677                                  				; DL = drive code (0 = default,	1 = A, 2 = B, etc.)
 16678 0000155C 83F8FF                  	cmp	ax,0FFFFh	; ax = sectors per cluster
 16679 0000155F 7497                    	je	short dtRet	; ! invalid drive ! return
 16680 00001561 F7E1                    	mul	cx		; * bytes per sectors
 16681                                  				; dx:ax	= bytes	per cluster
 16682                                  				; bx = free clusters
 16683                                  dtFree_1:
 16684 00001563 89D1                    	mov	cx,dx		; hw of	free sectors
 16685 00001565 F7E3                    	mul	bx		; lw of	free sectors * bytes per sector
 16686 00001567 91                      	xchg	ax,cx
 16687 00001568 87D3                    	xchg	dx,bx
 16688 0000156A F7E2                    	mul	dx
 16689 0000156C 01D8                    	add	ax,bx
 16690 0000156E 83D200                  	adc	dx,0		; dx:ax:cx = free bytes
 16691 00001571 09D2                    	or	dx,dx
 16692 00001573 7416                    	jz	short dtFree_2
 16693 00001575 88E9                    	mov	cl,ch		; prints free space as kilobytes
 16694 00001577 88C5                    	mov	ch,al		; save al
 16695 00001579 88E0                    	mov	al,ah		; / 256
 16696 0000157B 88D4                    	mov	ah,dl
 16697 0000157D D0CE                    	ror	dh,1		; / 2 (= free bytes / 512)
 16698 0000157F D1D8                    	rcr	ax,1
 16699 00001581 D1D9                    	rcr	cx,1
 16700 00001583 D0CE                    	ror	dh,1		; / 2 (= free bytes / 1024)
 16701 00001585 D1D8                    	rcr	ax,1
 16702 00001587 D1D9                    	rcr	cx,1
 16703 00001589 B2FF                    	mov	dl,0FFh	; dx > 0
 16704                                  dtFree_2:
 16705 0000158B 890E[199E]              	mov	[Bytes_Free],cx
 16706 0000158F A3[1B9E]                	mov	[Bytes_Free+2],ax
 16707 00001592 09D2                    	or	dx,dx		; is dx	> 0 ?
 16708 00001594 740F                    	jz	short dtFree_3	; no
 16709 00001596 BA[D892]                	mov	dx,kbytesf_ptr	; MSG_1106 (".. K bytes free" msg)
 16710                                  				; 30 digits, long binary do decimal
 16711 00001599 803E[9F9C]00            	cmp	byte [bfree_not_kilo],0
 16712 0000159E 741C                    	jz	short dtFree_5
 16713 000015A0 BA[D892]                	mov	dx,kbytesf_ptr	; MSG_1106
 16714                                  				; ".. K	bytes free" msg, 28 digits
 16715 000015A3 EB17                    	jmp	short dtFree_5
 16716                                  dtFree_3:
 16717 000015A5 BA[4790]                	mov	dx,bytmes1_ptr	; MSG_1020 (".. bytes free" msg)
 16718                                  				; 30 digits, long binary do decimal
 16719 000015A8 803E[9C9C]00            	cmp	byte [narrow],0	; narrow display area ?
 16720 000015AD 7503                    	jnz	short dtFree_4	; yes
 16721 000015AF BA[5590]                	mov	dx,bytmes2_ptr	; MSG_1020, 33 digits
 16722                                  dtFree_4:
 16723 000015B2 803E[9F9C]00            	cmp	byte [bfree_not_kilo],0 ; not kilobyte option
 16724 000015B7 7403                    	jz	short dtFree_5	; use kilo bytes (if number of free bytes is big)
 16725 000015B9 BA[6390]                	mov	dx,bytmes_n_ptr	; narrow (28 digits), MSG_1020
 16726                                  dtFree_5:
 16727                                  %endif
 16728 000015BC E8693E                  	call	std_printf	; "nnn bytes free",cr,lf
 16729                                  	;call	UseLine
 16730                                  ;dtRet:
 16731                                  	;retn
 16732                                  	; 18/02/2023
 16733 000015BF E9B703                  	jmp	UseLine
 16734                                  
 16735                                  ; ---------------------------------------------------------------------------
 16736                                  
 16737                                  ;***	FileIsDevice - see if file looks like a device
 16738                                  ;
 16739                                  ;	ENTRY	PathPos = ptr to pathname
 16740                                  ;		PathCnt = length of pathname w/o terminating char
 16741                                  ;		DirBuf is DOS DTA
 16742                                  ;
 16743                                  ;	EXIT	ZR = set if file looks like a device
 16744                                  ;
 16745                                  ;	USED	AX,BX,CX,DX,DI
 16746                                  ;
 16747                                  ;	EFFECTS
 16748                                  ;
 16749                                  ;	  DTA buffer holds results of Find First function
 16750                                  ;
 16751                                  ;	NOTES
 16752                                  ;
 16753                                  ;	  We try to flag devices in two ways. First, we try
 16754                                  ;	  the DOS Find First function. It returns attribute bit 6
 16755                                  ;	  set on a successful find if it identifies a device name.
 16756                                  ;	  Unfortunately, it returns 'path not found' for a device
 16757                                  ;	  name terminated with colon, such as "CON:". So, we look
 16758                                  ;	  for any colon in the pathname after the 2nd character,
 16759                                  ;	  and flag the pathname as a device if we find one.
 16760                                  
 16761                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16762                                  FileIsDevice:
 16763 000015C2 8B16[019E]              	mov	dx,[PathPos]	 ; DX = ptr to pathname
 16764                                  
 16765 000015C6 89D7                    	mov	di,dx
 16766 000015C8 033E[FF9D]              	add	di,[PathCnt]	 ; DI = ptr to byte after pathname
 16767 000015CC 30DB                    	xor	bl,bl		 ; BL = NUL to terminate pathname with
 16768 000015CE 861D                    	xchg	bl,[di] 	 ; BL = saved pathname terminating char
 16769                                  
 16770 000015D0 31C9                    	xor	cx,cx		 ; CX = attribute mask (normal search)
 16771 000015D2 B44E                    	mov	ah,4Eh
 16772                                  	;mov	ah,Find_First	 ; AH = DOS Find First function code
 16773 000015D4 CD21                    	int	21h	 	 ; call DOS
 16774 000015D6 861D                    	xchg	bl,[di]		 ; restore pathname terminating char
 16775 000015D8 720A                    	jc	short piCol	 ; didn't find a dir entry, check for colon
 16776                                  
 16777                                  ;	Found a dir entry, see if Find First thinks it's a device.
 16778                                  
 16779                                  	;test	byte [DIRBUF+21],40h
 16780 000015DA F606[C09D]40            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 16781 000015DF 7403                    	jz	short piCol	 ; device attribute not set, look for colon
 16782 000015E1 31C9                    	xor	cx,cx		 ; it's a device, return ZR flag
 16783                                  	;jmp	short piRet
 16784                                  	; 25/04/2023
 16785                                  piRet:
 16786 000015E3 C3                      	retn
 16787                                  
 16788                                  ;	Device attribute not returned by Find First function. But
 16789                                  ;	let's check for a colon anywhere in the pathname after the
 16790                                  ;	second byte.
 16791                                  ;
 16792                                  ;	DI = ptr to byte after pathname
 16793                                  
 16794                                  piCol:
 16795 000015E4 4F                      	dec	di		 ; DI = ptr to last char in pathname
 16796 000015E5 B03A                    	mov	al,':'
 16797                                  	;mov	al,COLON_CHAR	 ; AL = colon char to search for
 16798 000015E7 8B0E[FF9D]              	mov	cx,[PathCnt]	 ; CX = # chars to scan
 16799 000015EB 49                      	dec	cx
 16800 000015EC 49                      	dec	cx		 ; ignore 1st two chars of pathname
 16801 000015ED 09C9                    	or	cx,cx
 16802 000015EF 78F2                    	js	short piRet	 ; if < 2 chars in pathname, just return
 16803 000015F1 09FF                    	or	di,di		 ; clear ZR in case CX = 0
 16804 000015F3 FD                      	std			 ; scan downward
 16805 000015F4 F2AE                    	repne	scasb
 16806 000015F6 FC                      	cld			 ; restore default upward direction
 16807                                  
 16808                                  ;	After scanning, the ZR flag is set to indicate presence of a colon.
 16809                                  ;piRet:
 16810 000015F7 C3                      	retn
 16811                                  
 16812                                  ;FileIsDevice endp
 16813                                  
 16814                                  ; ---------------------------------------------------------------------------
 16815                                  
 16816                                  ;***	FindFirst - find first directory entry to display
 16817                                  ;***	FindNext - find next directory entry to display
 16818                                  ;
 16819                                  ;	ENTRY	Bits<inmem> = set if entries are loaded in TPA
 16820                                  ;		AttrSpecified, AttrSelect are set
 16821                                  ;
 16822                                  ;	EXIT	CY = clear if successful
 16823                                  ;		BX = offset in TPA buffer of directory entry found
 16824                                  ;
 16825                                  ;		If unsuccessful,
 16826                                  ;		CY = set
 16827                                  ;		AX = DOS error code
 16828                                  ;		DOS Get Extended Error call will get error code
 16829                                  ;
 16830                                  ;		NOTE: if entries were loaded into TPA, AX contains
 16831                                  ;		ERROR_NO_MORE_FILES when no more entries are available,
 16832                                  ;		but DOS Get Extended Error call WON'T return the correct
 16833                                  ;		error. That's ok, because we'll see the value in AX
 16834                                  ;		and recognize it as a non-error condition.
 16835                                  ;
 16836                                  ;	USED	AX,CX,DX,SI,DI
 16837                                  ;
 16838                                  ;	EFFECTS
 16839                                  ;
 16840                                  ;	  Entries in memory may be marked as output.
 16841                                  ;	  If not sorted, entry is loaded at TPA.
 16842                                  ;
 16843                                  ;	NOTES
 16844                                  ;
 16845                                  ;	  If we don't find a qualifying file, we return after the final
 16846                                  ;	   DOS Find File call. A DOS Get Extended Error call will then
 16847                                  ;	   indicate an appropriate condition.
 16848                                  
 16849                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16850                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 16851                                  
 16852                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 16853                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1585h
 16854                                  
 16855                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 16856                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1667h
 16857                                  	
 16858                                  FindFirst:
 16859                                  	;mov	ax,offset TRANGROUP:GetFirst
 16860 000015F8 B8[CF16]                	mov	ax,GetFirst
 16861 000015FB EB03                    	jmp	short ffFindEntry
 16862                                  
 16863                                  	; 18/02/2023
 16864                                  FindNext:
 16865                                  	;mov	ax,offset TRANGROUP:GetNext
 16866 000015FD B8[DD16]                	mov	ax,GetNext
 16867                                  
 16868                                  ;	AX = address of correct disk get routine to use.
 16869                                  
 16870                                  ffFindEntry:
 16871 00001600 06                      	push	es			; save TRANGROUP seg addr
 16872                                  	;;;test	Bits,mask inmem
 16873                                  	;;test	word [_Bits],20h
 16874                                  	;test	byte [_Bits],20h
 16875                                  	; 07/06/2023
 16876 00001601 F606[FD9D]80            	test	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0
 16877                                  			; 31/07/2024	; 80h ; PCDOS 7.1	
 16878 00001606 7405                    	jz	short ffDisk		; entries not in memory, search disk
 16879                                  
 16880                                  ;	Entries are loaded in memory to sort out. Find the first one.
 16881                                  ;	There will always be one, or LoadEntries would've failed.
 16882                                  
 16883 00001608 E81A00                  	call	FindInMem		; find first entry in TPA
 16884 0000160B EB16                    	jmp	short ffRet		; return what TPA search returns
 16885                                  
 16886                                  ;	Get entry from disk.
 16887                                  
 16888                                  ffDisk:
 16889 0000160D FFD0                    	call	ax			; get entry from disk
 16890 0000160F 720E                    	jc	short ffGetErr		; get & return error
 16891 00001611 8E06[659C]              	mov	es,[TPA]		; ES = seg addr of TPA
 16892 00001615 31FF                    	xor	di,di			; ES:DI = ptr to TPA
 16893 00001617 89FB                    	mov	bx,di			; BX = offset of entry in TPA
 16894 00001619 E85C01                  	call	LoadEntry		; load entry to TPA
 16895 0000161C F8                      	clc				; return success
 16896 0000161D EB04                    	jmp	short ffRet
 16897                                  
 16898                                  ffGetErr:
 16899 0000161F E8270A                  	call	 get_ext_error_number	; AX = DOS error code
 16900 00001622 F9                      	stc
 16901                                  ffRet:
 16902 00001623 07                      	pop	es			; ES = TRANGROUP seg addr again
 16903 00001624 C3                      	retn
 16904                                  
 16905                                  ; ---------------------------------------------------------------------------
 16906                                  
 16907                                  ;***	FindInMem - find next directory entry in TPA buffer
 16908                                  ;
 16909                                  ;	ENTRY	TPA is loaded (see LoadEntries)
 16910                                  ;
 16911                                  ;	EXIT	BX = offset in TPA of entry found
 16912                                  ;
 16913                                  ;		If no more files,
 16914                                  ;		CY = set
 16915                                  ;		AX = DOS 'no more files' error code
 16916                                  ;
 16917                                  ;	USED	AX,BX,CX,DX,SI,DI,BP,ES
 16918                                  ;
 16919                                  ;	EFFECTS
 16920                                  ;
 16921                                  ;	  Entry found is flagged as 'used' (see EntryStruc).
 16922                                  
 16923                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16924                                  FindInMem:
 16925 00001625 8E06[659C]              	mov	es,[TPA]		; ES = TPA seg addr
 16926 00001629 31DB                    	xor	bx,bx			; ES:BX = ptr to 1st entry in TPA
 16927 0000162B FC                      	cld				; make sure default string direction is up
 16928                                  	
 16929 0000162C E86D00                  	call	FindOneInMem		; locate an entry
 16930 0000162F 720E                    	jc	short fiNoMore		; none left, set up 'no more files' error
 16931                                  
 16932                                  ;	BX = ptr to entry in TPA
 16933                                  
 16934                                  fiBest:
 16935 00001631 89DD                    	mov	bp,bx			; BP = ptr to best entry so far
 16936                                  fiNext:
 16937 00001633 E87300                  	call	FindNextInMem		; locate next entry
 16938 00001636 720C                    	jc	short fiFound		; no more, best entry so far wins
 16939                                  
 16940                                  ;	BX = ptr to next entry
 16941                                  
 16942 00001638 E8F5FD                  	call	CmpEntry		; compare it to best found so far (BP)
 16943 0000163B 73F6                    	jnb	short fiNext		; it's not better, go look at next one
 16944 0000163D EBF2                    	jmp	short fiBest		; it's better, go mark it as best so far
 16945                                  
 16946                                  fiNoMore:
 16947                                  
 16948                                  ;	No more entries available in TPA. Set up 'no more files' error.
 16949                                  
 16950                                  	;mov	ax,18
 16951 0000163F B81200                  	mov	ax,ERROR_NO_MORE_FILES	; AX = 'no more files' error code
 16952 00001642 F9                      	stc				; return error
 16953                                  	;jmp	short fiRet
 16954                                  	; 18/02/2023
 16955 00001643 C3                      	retn
 16956                                  
 16957                                  fiFound:
 16958 00001644 89EB                    	mov	bx,bp			; BX = ptr to best entry found
 16959 00001646 26C60701                	mov	byte [es:bx],1		; mark entry 'used'
 16960 0000164A F8                      	clc				; return success
 16961                                  fiRet:
 16962 0000164B C3                      	retn
 16963                                  
 16964                                  ; ---------------------------------------------------------------------------
 16965                                  
 16966                                  ;***	FindNextChild - find next subdirectory in current directory
 16967                                  ;
 16968                                  ;	ENTRY	BX = ptr to last child found, ASCIIZ filename
 16969                                  ;		DirBuf is established DTA
 16970                                  ;
 16971                                  ;	EXIT	BX = ptr (same addr) to next child found, ASCIIZ filename
 16972                                  ;
 16973                                  ;		If failure,
 16974                                  ;		CY = set
 16975                                  ;		DOS Get Extended Error call will get error
 16976                                  ;
 16977                                  ;	USED	AX,CX,DX,SI,DI,BP
 16978                                  ;
 16979                                  ;	EFFECTS
 16980                                  ;
 16981                                  ;	  DirBuf is used for find first/next calls.
 16982                                  ;
 16983                                  ;	NOTES
 16984                                  ;
 16985                                  ;	  We keep on checking files until DOS returns an error. If
 16986                                  ;	  the error is 'no more files' and the temp filename is not
 16987                                  ;	  the initial high tag, copy the temp to the child's name spot
 16988                                  ;	  and return success. Otherwise, send the error back to caller.
 16989                                  ;
 16990                                  ;	  This routine depends on DS,ES,CS, & SS all being equal.
 16991                                  
 16992                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16993                                  FindNextChild:
 16994 0000164C 83EC0C                  	sub	sp,12			; make temp filename buf on stack
 16995                                  	;shove	00FFh			; temp filename = high tag
 16996 0000164F B8FF00                  	mov	ax,0FFh
 16997 00001652 50                      	push	ax
 16998 00001653 89E5                    	mov	bp,sp			; BP = ptr to temp filename buf
 16999                                  	;shove	"*"	
 17000 00001655 B02A                    	mov	al,'*'  ; ax = 002Ah
 17001 00001657 50                      	push	ax
 17002                                  	;;shove	".*" 
 17003                                  	;mov	ax,"*."
 17004                                  	;mov	ax,2E2Ah
 17005 00001658 B42E                    	mov	ah,'.'
 17006 0000165A 50                      	push	ax
 17007 0000165B E82F06                  	call	GetDriveLtr		; AX = "d:"
 17008 0000165E 50                      	push	ax
 17009 0000165F 89E2                    	mov	dx,sp			; DX = ptr to "d:*.*",0 on stack
 17010                                  
 17011                                  ;	See that the stack is restored properly at the end of this proc.
 17012                                  
 17013                                  	;mov	cx,10h
 17014 00001661 B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 17015 00001664 B44E                    	mov	ah,4Eh
 17016                                  	;mov	ah,Find_First
 17017 00001666 CD21                    	int	21h			; DOS- Find First matching file
 17018 00001668 722C                    	jc	short fcRet		; return error
 17019                                  
 17020 0000166A E89EFD                  	call	CheckChild		; check child against last, temp
 17021                                  fcNext:	
 17022                                  	;mov	cx,10h
 17023 0000166D B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 17024 00001670 B44F                    	mov	ah,4Fh
 17025                                  	;mov	ah,Find_Next
 17026 00001672 CD21                    	int	21h			; DOS- Find Next matching file
 17027 00001674 7205                    	jc	short fcErr		; examine error
 17028                                  
 17029 00001676 E892FD                  	call	CheckChild		; check child against last, temp
 17030 00001679 EBF2                    	jmp	short fcNext		; go find another child
 17031                                  
 17032                                  fcErr:
 17033 0000167B E8CB09                  	call	get_ext_error_number	; AX = extended error code
 17034                                  	;cmp	ax,18
 17035 0000167E 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	; no more files?
 17036 00001681 7512                    	jne	short fcNope		; some other error- return it
 17037                                  
 17038                                  ;	We ran out of files. See if we qualified at least one.
 17039                                  
 17040 00001683 807E00FF                	cmp	byte [bp],0FFh
 17041 00001687 740C                    	je	short fcNope		; temp filename is unused- no child
 17042                                  
 17043                                  ;	Move temp filename to child name position.
 17044                                  
 17045 00001689 89EE                    	mov	si,bp			; SI = ptr to temp filename
 17046 0000168B 89DF                    	mov	di,bx			; DI = ptr to child name pos'n
 17047                                  fcMove:
 17048 0000168D AC                      	lodsb				; AL = next byte of filename
 17049 0000168E AA                      	stosb				; store byte
 17050 0000168F 08C0                    	or	al,al
 17051 00001691 7403                    	jz	short fcRet		; byte was zero, return success (CY clear)
 17052 00001693 EBF8                    	jmp	short fcMove		; go move another byte
 17053                                  fcNope:
 17054 00001695 F9                      	stc				; return error
 17055                                  fcRet:
 17056 00001696 9F                      	lahf
 17057 00001697 83C414                  	add	sp,20			; restore stack
 17058 0000169A 9E                      	sahf
 17059 0000169B C3                      	retn
 17060                                  
 17061                                  ; ---------------------------------------------------------------------------
 17062                                  
 17063                                  ;***	FindOneInMem - find the first available entry in TPA
 17064                                  ;***	FindNextInMem - find the next available entry in TPA
 17065                                  ;
 17066                                  ;	ENTRY	ES = TPA seg addr
 17067                                  ;		BX = ptr to entry in TPA
 17068                                  ;
 17069                                  ;	EXIT	BX = ptr to entry found
 17070                                  ;		CY = set if no more entries available in TPA
 17071                                  ;
 17072                                  ;	USED	AL
 17073                                  
 17074                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17075                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 17076                                  FindOneInMem:
 17077 0000169C 268A07                  	mov	al,[es:bx]		; examine 'used' byte of starting entry
 17078 0000169F 3C01                    	cmp	al,1
 17079 000016A1 7406                    	je	short FindNextInMem	; entry has already been used
 17080 000016A3 3CFF                    	cmp	al,0FFh
 17081 000016A5 7407                    	je	short foNoMore		; 0FFh, we're at the end of the list
 17082                                  
 17083                                  ;	BX = ptr to entry that hasn't been output yet.
 17084                                  
 17085 000016A7 F8                      	clc				; return success
 17086 000016A8 C3                      	retn
 17087                                  
 17088                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 17089                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:163Ah
 17090                                  FindNextInMem:
 17091                                  	; 07/06/2023
 17092                                  	;add	bx,21 ; MSDOS 5.0
 17093                                  	; 07/06/2023
 17094 000016A9 83C316                  	add	bx,22 ; MSDOS 6.0  ; size EntryStruc (22 = 21 + compratio)
 17095                                  	;add	bx,size EntryStruc	; BX = ptr to next entry
 17096 000016AC EBEE                    	jmp	short FindOneInMem	; go look at it
 17097                                  foNoMore:
 17098 000016AE F9                      	stc				; ran out of entries, return failure
 17099 000016AF C3                      	retn
 17100                                  
 17101                                  ; ---------------------------------------------------------------------------
 17102                                  
 17103                                  ;***	GetEnvValue - get value of our environment variable
 17104                                  ;
 17105                                  ;	ENTRY	DS, ES = TRANGROUP seg addr
 17106                                  ;
 17107                                  ;	EXIT	CY = set if environment variable not in environment
 17108                                  ;
 17109                                  ;		Otherwise:
 17110                                  ;		SI = ptr to environment variable asciiz value in TRANGROUP
 17111                                  ;
 17112                                  ;	USED	AX,BX,CX,DX,DI
 17113                                  ;		(We assume the (almost) worst, since we don't know about
 17114                                  ;		Find_Name_In_Environment.)
 17115                                  ;
 17116                                  ;	EFFECTS
 17117                                  ;
 17118                                  ;	  ScanBuf is loaded with value text
 17119                                  
 17120                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17121                                  GetEnvValue:
 17122 000016B0 06                      	push	es				; save ES
 17123                                  	;mov	si,offset TRANGROUP:DirEnvVar	; DS:SI = ptr to variable name
 17124 000016B1 BE[0893]                	mov	si,DirEnvVar	; "DIRCMD="
 17125                                  	;invoke	Find_Name_In_Environment
 17126 000016B4 E8FE0F                  	call	find_name_in_environment
 17127 000016B7 7214                    	jc	short geRet			; name not found in environment
 17128                                  
 17129                                  ;	ES:DI = ptr to value of environment variable
 17130                                  ;	We're assuming DS, CS, and SS are unchanged.
 17131                                  
 17132 000016B9 1E                      	push	ds
 17133 000016BA 06                      	push	es
 17134 000016BB 1F                      	pop	ds
 17135 000016BC 07                      	pop	es
 17136                                  
 17137                                  	;assume	ds:nothing
 17138                                  
 17139                                  ;	DS = seg addr of environment variable value (in environment segment)
 17140                                  ;	ES = TRANGROUP seg addr
 17141                                  
 17142 000016BD 89FE                    	mov	si,di				; DS:SI = ptr to value string
 17143                                  	;mov	di,offset TRANGROUP:ScanBuf	; ES:DI = ptr to dest buffer
 17144 000016BF BF[EB9E]                	mov	di,ScanBuf
 17145                                  geLoop:
 17146                                  ;@@:	
 17147 000016C2 AC                      	lodsb
 17148 000016C3 08C0                    	or	al,al
 17149 000016C5 AA                      	stosb
 17150                                  	;loopnz	@B		; move the string, including trailing null
 17151 000016C6 E0FA                    	loopnz	geLoop
 17152                                  
 17153 000016C8 06                      	push	es
 17154 000016C9 1F                      	pop	ds		; DS = TRANGROUP seg addr again
 17155                                  	;assume	ds:TRANGROUP
 17156                                  
 17157                                  	;mov	si,offset TRANGROUP:ScanBuf	; SI = ptr to var value
 17158 000016CA BE[EB9E]                	mov	si,ScanBuf
 17159                                  geRet:
 17160 000016CD 07                      	pop	es				; restore ES
 17161 000016CE C3                      	retn
 17162                                  
 17163                                  ; ---------------------------------------------------------------------------
 17164                                  
 17165                                  ;***	GetFirst - get first directory entry from disk
 17166                                  ;
 17167                                  ;	ENTRY	DOS DTA established at DirBuf
 17168                                  ;		FCB contains drive # and filename
 17169                                  ;		Current directory (on selected drive) is the one to search
 17170                                  ;		AttrSpecified & AttrSelect masks set
 17171                                  ;
 17172                                  ;	EXIT	CY = clear if success
 17173                                  ;		DirBuf contains extended FCB for file found
 17174                                  ;
 17175                                  ;		If unsuccessful,
 17176                                  ;		CY = set
 17177                                  ;		Ready for DOS Get Extended Error call
 17178                                  ;
 17179                                  ;	USED	AX,DX
 17180                                  ;
 17181                                  ;	EFFECTS
 17182                                  ;
 17183                                  ;	  FCB-7 = 0FFh to mark extended FCB
 17184                                  ;	  FCB-1 = attribute mask to find all files
 17185                                  ;	  These fields should remain unmodified for GetNext calls.
 17186                                  ;
 17187                                  ;***	GetNext - get next directory entry from disk
 17188                                  ;
 17189                                  ;	ENTRY	As for GetFirst, plus
 17190                                  ;		FCB-7 set up as extended FCB w/ find-all attribute byte
 17191                                  ;
 17192                                  ;	EXIT	As for GetFirst
 17193                                  ;
 17194                                  ;	USED	AX,DX
 17195                                  
 17196                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17197                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 17198                                  
 17199                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 17200                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1660h
 17201                                  GetFirst:
 17202                                  	;mov	byte [55h],0FFh	; -1
 17203 000016CF C6065500FF              	mov	byte [FCB-7],0FFh	; signal extended FCB
 17204                                  	;mov	byte [5Bh],16h
 17205 000016D4 C6065B0016              	mov	byte [FCB-1],ATTR_ALL ; 16h
 17206                                  					; find any file
 17207                                  	; 07/06/2023
 17208                                  	;mov	dx,FCB-7 ; 55h		; DX = ptr to extended FCB
 17209 000016D9 B411                    	mov	ah,11h
 17210                                  	;mov	ah,Dir_Search_First	; AH = DOS Find First function code
 17211                                  	; 07/06/2023
 17212                                  	;int	21h			; call DOS
 17213                                  	;shl	al,1			; CY = set if error
 17214                                  	;jc	short gfRet		; return error
 17215                                  	;jmp	short gfFound		; go look at attr's
 17216                                  	; 07/06/2023
 17217 000016DB EB02                    	jmp	short GetFrstNxt
 17218                                  GetNext:
 17219                                  	; 07/06/2023
 17220                                  	;;mov	dx,55h
 17221                                  	;mov	dx,FCB-7		; DX = ptr to extended FCB
 17222 000016DD B412                    	mov	ah,12h
 17223                                  	;mov	ah,Dir_Search_Next	; AH = DOS Find Next function code
 17224                                  GetFrstNxt:
 17225                                  	; 07/06/2023
 17226 000016DF BA5500                  	mov	dx,FCB-7 ; mov dx,55h
 17227                                  	;
 17228 000016E2 CD21                    	int	21h			; call DOS
 17229 000016E4 D0E0                    	shl	al,1			; CY = set if error
 17230 000016E6 7211                    	jc	short gfRet		; return error
 17231                                  
 17232                                  ;*	Found an entry. Check attributes.
 17233                                  gfFound:
 17234                                  	;;mov	al,[DirBuf+8].dir_attr	; AL = file attributes
 17235                                  	;mov	al,[DIRBUF+19]
 17236 000016E8 A0[BE9D]                	mov	al,[DIRBUF+8+DIR_ENTRY.DIR_ATTR]
 17237 000016EB 8A26[059E]              	mov	ah,[AttrSpecified]	; AH = mask of pertinent attr's
 17238 000016EF 20E0                    	and	al,ah			; AL = pertinent attr's of file
 17239 000016F1 2226[069E]              	and	ah,[AttrSelect]		; AH = attr settings to match
 17240 000016F5 38E0                    	cmp	al,ah
 17241 000016F7 75E4                    	jne	short GetNext		; attr's don't match, look for another
 17242                                  gfRet:
 17243 000016F9 C3                      	retn
 17244                                  
 17245                                  ; ---------------------------------------------------------------------------
 17246                                  
 17247                                  ;***	ListDir - search for and list files in the current directory
 17248                                  ;
 17249                                  ;	List header, files, and trailer for current directory on selected
 17250                                  ;	drive. Header & trailer are listed if at least one file is found.
 17251                                  ;	If no qualifying files are found, no display output occurs.
 17252                                  ;
 17253                                  ;	ENTRY	Current directory (on selected drive) is the one to be listed
 17254                                  ;		FCB contains selected drive # and filename spec
 17255                                  ;		Option bits, attribute masks, and sort codes set up
 17256                                  ;
 17257                                  ;	EXIT	CY = clear if no error
 17258                                  ;		FileCnt = # files found & displayed
 17259                                  ;
 17260                                  ;		If error,
 17261                                  ;		CY = set
 17262                                  ;		Ready for DOS Get Extended Error call
 17263                                  ;
 17264                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 17265                                  ;		FileSiz
 17266                                  ;
 17267                                  ;	EFFECTS
 17268                                  ;
 17269                                  ;	  FileCntTotal, FileSizTotal are updated.
 17270                                  ;	  Files found are listed. A directory header and trailer are
 17271                                  ;	   displayed only if files are found.
 17272                                  
 17273                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17274                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:155Eh
 17275                                  
 17276                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17277                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1694h
 17278                                  
 17279                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 17280                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1776h
 17281                                  ListDir:
 17282 000016FA 31C0                    	xor	ax,ax ; 0
 17283 000016FC A3[929C]                	mov	[FileCnt],ax		; zero file count
 17284 000016FF A3[949C]                	mov	[FileSiz],ax		; zero file size accumulator
 17285 00001702 A3[969C]                	mov	[FileSiz+2],ax
 17286                                  
 17287                                  ; 31/07/2024
 17288                                  ; PCDOS 7.1 COMMAND.COM
 17289                                  %if 1
 17290 00001705 A3[989C]                	mov	[FileSiz+4],ax
 17291 00001708 A3[9A9C]                	mov	[FileSiz+6],ax	
 17292                                  %else
 17293                                  	; 08/06/2023
 17294                                  	; MSDOS 6.0
 17295                                  ;ifdef DBLSPACE_HOOKS
 17296                                  	mov	[ccluUsedDir],ax 	; zero count clusters used
 17297                                  	mov	[csecUsedDir],ax	; zero count compressed sectors used
 17298                                  	mov	[csecUsedDir+2],ax
 17299                                  ;endif
 17300                                  %endif	
 17301                                  	;cmp	byte [DestBuf],0	; check for sort code
 17302                                  	; 31/07/2024
 17303 0000170B 3806[2E9E]              	cmp	[DestBuf],al ; 0
 17304 0000170F 740A                    	je	short ld1		; no sort
 17305 00001711 E83000                  	call	LoadEntries		; load entries for sorted listing
 17306 00001714 7305                    	jnc	short ld1		; no error - continue
 17307 00001716 E83009                  	call	get_ext_error_number	; AX = DOS error code
 17308                                  	; 19/02/2023
 17309                                  	;stc
 17310 00001719 EB12                    	jmp	short ldErr		; return error
 17311                                  ld1:
 17312 0000171B E8DAFE                  	call	FindFirst		; find first file
 17313 0000171E 720D                    	jc	short ldErr		; not found, return error
 17314                                  
 17315                                  ;	BX = offset in TPA buffer of entry found
 17316                                  
 17317 00001720 E82203                  	call	DisplayHeader		; if at least one file, display header
 17318                                  ldNext:
 17319 00001723 E8FA02                  	call	DisplayFile		; display the file entry
 17320                                  ;ldNext:
 17321 00001726 E8D4FE                  	call	FindNext		; find another file
 17322 00001729 7202                    	jc	short ldErr		; not found
 17323                                  	;call	DisplayFile		; display entry
 17324                                  	;jmp	short ldNext		; go find another one
 17325                                  	; 19/02/2023
 17326 0000172B EBF6                    	jmp	short ldNext
 17327                                  ldErr:
 17328                                  	;cmp	ax,2
 17329 0000172D 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 17330 00001730 7407                    	je	short ldDone		; file not found, we're done
 17331                                  	;cmp	ax,18
 17332 00001732 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 17333 00001735 7402                    	je	short ldDone		; no more files, we're done
 17334 00001737 F9                      	stc
 17335                                  	;jmp	short ldRet
 17336                                  	; 19/02/2023
 17337 00001738 C3                      	retn
 17338                                  ldDone:
 17339 00001739 833E[929C]00            	cmp	word [FileCnt],0
 17340                                  	;je	short ld2		; no files found, just return
 17341                                  	; 25/04/2023
 17342 0000173E 7403                    	jz	short ldRet
 17343 00001740 E8A104                  	call	DisplayTrailer		; display trailing info
 17344                                  	; 08/06/2023
 17345                                  	; cf=0
 17346                                  ;ld2:	
 17347                                  	;clc				; return success
 17348                                  ldRet:
 17349 00001743 C3                      	retn
 17350                                  
 17351                                  ; ---------------------------------------------------------------------------
 17352                                  
 17353                                  ;***	LoadEntries - attempt to load entries from current directory
 17354                                  ;
 17355                                  ;	Load all qualifying directory entries from the current directory
 17356                                  ;	into the TPA. If an error is returned by FindFirst/FindNext calls
 17357                                  ;	other than 'no more files', return to caller with carry flag set.
 17358                                  ;	If we run out of buffer space, display a message that we haven't
 17359                                  ;	enough memory to sort this directory, but return without error.
 17360                                  ;	Other routines know whether or not entries have been loaded by
 17361                                  ;	the 'inmem' flag bit, which we set here.
 17362                                  ;
 17363                                  ;	The TPA is usually 64K - 512 bytes long. At 20 bytes per entry,
 17364                                  ;	this allows sorting over 3000 entries in a directory.
 17365                                  ;
 17366                                  ;	ENTRY	Tpa = buffer seg addr
 17367                                  ;		BytCnt = buffer length, in bytes
 17368                                  ;		Current directory (on selected drive) is the one to load
 17369                                  ;		FCB contains drive # and filespec
 17370                                  ;		Bits, AttrSpecified, AttrSelect, & DestBuf (sort codes) are set
 17371                                  ;
 17372                                  ;	EXIT	CY = set if error
 17373                                  ;		If error, DOS Get Extended Error will get error info
 17374                                  ;
 17375                                  ;	USED	AX,CX,DX,SI,DI
 17376                                  ;
 17377                                  ;	EFFECTS
 17378                                  ;
 17379                                  ;	  Inmem bit of Bits = set if load succeeded.
 17380                                  ;	  Tpa buffer contains directory entries.
 17381                                  ;	  Byte after last entry = 0FFh.
 17382                                  
 17383                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17384                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17385                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 17386                                  LoadEntries:
 17387 00001744 06                      	push	es			; save TRANGROUP seg addr
 17388 00001745 8E06[659C]              	mov	es,[TPA]		; ES = TPA seg addr
 17389 00001749 31FF                    	xor	di,di			; ES:DI = destination ptr
 17390                                  	;;;and	Bits,not mask inmem	; signal entries not loaded
 17391                                  	; MSDOS 5.0
 17392                                  	;;;and	word [_Bits],0FFDFh
 17393                                  	;;and	byte [_Bits],0DFh	; not 20h
 17394                                  	; 31/07/2024
 17395                                  	;and	word [_Bits],0FF7Fh ; PCDOS 7.1 COMMAND.COM
 17396                                  	; 08/06/2023
 17397                                  	;and	byte [_Bits],0BFh	; ~20h ; MSDOS 6.0
 17398 0000174B 8026[FD9D]7F            	and	byte [_Bits],~mask.inmem ; 0BFh ; MSDOS 6.0
 17399                                  			; 31/07/2024	; 07Fh ; PCDOS 7.1
 17400                                  
 17401 00001750 E87CFF                  	call	GetFirst		; look for first file
 17402 00001753 7221                    	jc	short leRet		; return any error
 17403 00001755 E82000                  	call	LoadEntry		; load entry into TPA
 17404                                  leNext:
 17405 00001758 E882FF                  	call	GetNext			; get another file
 17406 0000175B 720F                    	jc	short leLoaded		; assume any error is no more files
 17407 0000175D A1[859C]                	mov	ax,[BYTCNT]		; AX = size of TPA
 17408 00001760 29F8                    	sub	ax,di			; AX = bytes left in TPA
 17409                                  	; 08/06/2023
 17410                                  	;;cmp	ax,size EntryStruc+2	; insist on entry size + 2 bytes
 17411                                  	;cmp	ax,23 ; 21+2 ; MSDOS 5.0
 17412 00001762 83F818                  	cmp	ax,24 ; 22+2 ; MSDOS 6.0
 17413 00001765 720E                    	jb	short leOk		; not enough memory left, give up
 17414 00001767 E80E00                  	call	LoadEntry		; load entry into TPA
 17415 0000176A EBEC                    	jmp	short leNext		; go get another file
 17416                                  
 17417                                  leLoaded:
 17418 0000176C 26C605FF                	mov	byte [es:di],0FFh	; mark end of entry list
 17419                                  	;;;or	Bits,mask inmem		; signal entries loaded in memory
 17420                                  	; MSDOS 5.0
 17421                                  	;;or	word [_Bits],20h
 17422                                  	;or	byte [_Bits],20h
 17423                                  	; 08/06/2023
 17424                                  	;or	byte [_Bits],40h	; MSDOS 6.0
 17425 00001770 800E[FD9D]80            	or	byte [_Bits],mask.inmem ; 40h ; MSDOS 6.0 
 17426                                  			; 31/07/2024	; 80h ; PCDOS 7.1	
 17427                                  	; 25/04/2023
 17428                                  	; cf = 0
 17429                                  leOk:
 17430 00001775 F8                      	clc				; return no error
 17431                                  leRet:
 17432 00001776 07                      	pop	es			; ES = TRANGROUP seg addr again
 17433 00001777 C3                      	retn
 17434                                  
 17435                                  ; ---------------------------------------------------------------------------
 17436                                  
 17437                                  ;***	LoadEntry - load directory entry from DirBuf ext'd FCB
 17438                                  ;
 17439                                  ;	ENTRY	ES:DI = ptr to load point in TPA
 17440                                  ;		DirBuf contains extended FCB of entry to load
 17441                                  ;
 17442                                  ;	EXIT	ES:DI = ptr to next byte available in TPA
 17443                                  ;
 17444                                  ;	USED	AX,CX,SI
 17445                                  ;
 17446                                  ;	NOTES
 17447                                  ;
 17448                                  ;	  I could've used symbolic offsets and sizes of fields from
 17449                                  ;	   the dir_entry struc to do this, but this is time-critical,
 17450                                  ;	   so I hard-wired the structure of the DOS 4.x returned FCB,
 17451                                  ;	   as well as our private directory entry structure.
 17452                                  ;
 17453                                  ;	  We force a zero size for subdirectory files. A zero size is
 17454                                  ;	   ordinarily returned for subdirectories, but with Novell
 17455                                  ;	   Netware 286 or 386 loaded, we can't depend on it. Bug #1594.
 17456                                  
 17457                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17458                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:15DDh
 17459                                  	
 17460                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 17461                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:171Ch
 17462                                  
 17463                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 17464                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:17FDh
 17465                                  LoadEntry:
 17466                                  	;mov	si,offset TRANGROUP:Dirbuf+8	; DS:SI = ptr to filename
 17467 00001778 BE[B39D]                	mov	si,DIRBUF+8
 17468 0000177B 30C0                    	xor	al,al				; AL = 0
 17469 0000177D AA                      	stosb					; 'used' byte = false
 17470 0000177E B90B00                  	mov	cx,11
 17471 00001781 F3A4                    	rep	movsb				; transfer filename & extension
 17472 00001783 AC                      	lodsb					; AL = attrib byte
 17473 00001784 AA                      	stosb					; store attrib byte
 17474                                  	;add	si,10 ; 22-11-1
 17475                                  	;add	si,dir_time-dir_attr-1		; skip to time field
 17476 00001785 83C60A                  	add	si,(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1
 17477 00001788 A5                      	movsw					; transfer time
 17478 00001789 A5                      	movsw					; transfer date
 17479                                  
 17480                                  ; 08/06/2023
 17481                                  ; MSDOS 5.0
 17482                                  %if 0
 17483                                  	inc	si				; skip alloc unit
 17484                                  	inc	si
 17485                                  	;and	al,10h
 17486                                  	and	al,ATTR_DIRECTORY
 17487                                  	jnz	short leSetDirSize		; force zero size for subdir
 17488                                  	movsw
 17489                                  	movsw					; transfer size
 17490                                  	retn
 17491                                  leSetDirSize:
 17492                                  	xor	ax,ax ; 0
 17493                                  	stosw
 17494                                  	stosw					; store zero size
 17495                                  	retn
 17496                                  %endif
 17497                                  
 17498                                  ; 08/06/2023
 17499                                  ; MSDOS 6.0
 17500                                  ;%if 1
 17501                                  ;ifdef DBLSPACE_HOOKS
 17502 0000178A 88C1                    	mov	cl,al				; attrib to cl
 17503 0000178C AD                      	lodsw					; allocation unit (cluster
 17504                                  	;and	cl,10h
 17505 0000178D 80E110                  	and	cl,ATTR_DIRECTORY
 17506 00001790 7506                    	jnz	short leSetDirSize		; force zero size for subdir
 17507 00001792 A5                      	movsw
 17508 00001793 A5                      	movsw					; transfer size
 17509                                  
 17510                                  ; 31/07/2024 - Retro DOS 5.0 - PCDOS 7.1 COMMAND.COM
 17511                                  %if 0
 17512                                  	;;test	word [_Bits],1
 17513                                  	;test	word [_Bits],mask.cratio	; compression ratio report?
 17514                                  	test	byte [_Bits],mask.cratio
 17515                                  	jnz	short leCalcRatio		; yup
 17516                                  %endif
 17517                                  
 17518 00001794 31C0                    	xor	ax,ax
 17519 00001796 AA                      	stosb					; dummy compression ratio
 17520 00001797 C3                      	retn
 17521                                  
 17522                                  ; 31/07/2024 - Retro DOS 5.0 - PCDOS 7.1 COMMAND.COM
 17523                                  %if 0
 17524                                  leCalcRatio:
 17525                                  	call	CalcCompRatio			; takes cluster in AX
 17526                                  	or	ax,ax				;   returns ratio in AX
 17527                                  	jz	short leNoRatio			; 0 means couldn't calculate
 17528                                  	dec	ah				; pack 1.0 - 16.0 comp ratio
 17529                                  	mov	cl,4				;   into 2 nibbles.  Store
 17530                                  	shl	ah,cl				;   1-16 as 0-15 in hi nibble,
 17531                                  	or	al,ah				;   tenths (0-9) in low nibble
 17532                                  	stosb
 17533                                  	retn
 17534                                  %endif
 17535                                  
 17536                                  leSetDirSize:
 17537 00001798 31C0                    	xor	ax,ax ; 0
 17538 0000179A AB                      	stosw
 17539 0000179B AB                      	stosw					; store zero size
 17540                                  leNoRatio:
 17541 0000179C FEC8                    	dec	al				; al = FFh = special invalid
 17542 0000179E AA                      	stosb					; compression ratio
 17543 0000179F C3                      	retn
 17544                                  ;endif
 17545                                  ;%endif
 17546                                  
 17547                                  ; ---------------------------------------------------------------------------
 17548                                  
 17549                                  ;***	NoOrder - turn sorting off
 17550                                  ;
 17551                                  ;	ENTRY	nothing
 17552                                  ;
 17553                                  ;	EXIT	CY clear
 17554                                  ;
 17555                                  ;	USED	AX
 17556                                  ;
 17557                                  ;	EFFECTS
 17558                                  ;
 17559                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 17560                                  
 17561                                  	; 19/02/2023
 17562                                  NoOrder:
 17563 000017A0 C606[2E9E]00            	mov	byte [DestBuf],0
 17564                                  				; no sort
 17565 000017A5 F8                      	clc			; no error
 17566 000017A6 C3                      	retn
 17567                                  
 17568                                  ; ---------------------------------------------------------------------------
 17569                                  
 17570                                  ;***	OnOffSw - record occurence of on/off option switch
 17571                                  ;
 17572                                  ;	ENTRY	DI = index into word list of switches
 17573                                  ;
 17574                                  ;	EXIT	CY clear
 17575                                  ;
 17576                                  ;	USED	AX,CX
 17577                                  ;
 17578                                  ;	EFFECTS
 17579                                  ;
 17580                                  ;	  Bits modified to indicate option state.
 17581                                  
 17582                                  	; 19/02/2023
 17583                                  OnOffSw:
 17584 000017A7 89F9                    	mov	cx,di		; CX = index into word list of options
 17585 000017A9 D1E9                    	shr	cx,1
 17586 000017AB D1E9                    	shr	cx,1		; CX = bit position of option
 17587 000017AD B80100                  	mov	ax,1		
 17588 000017B0 D3E0                    	shl	ax,cl		; AX = bit mask of option
 17589 000017B2 F7C70200                	test	di,2		; check if it is a negated option
 17590 000017B6 7405                    	jz	short oo1	; it's negated
 17591                                  	;or	Bits,ax		; turn option on
 17592 000017B8 0906[FD9D]              	or	[_Bits],ax
 17593                                  	;jmp	short ooRet
 17594                                  	; 19/02/2023
 17595                                  	;cf=0
 17596 000017BC C3                      	retn
 17597                                  oo1:	
 17598 000017BD F7D0                    	not	ax		; AX = complemented bit mask of option
 17599                                  	;and	Bits,ax		; turn option off
 17600 000017BF 2106[FD9D]              	and	[_Bits],ax
 17601                                  ooRet:
 17602                                  	; 19/02/2023
 17603                                  	;cf=0
 17604                                  	;clc			; always return success
 17605 000017C3 C3                      	retn
 17606                                  
 17607                                  ; ---------------------------------------------------------------------------
 17608                                  
 17609                                  ;***	ParseAttr - parse and record /A option
 17610                                  ;
 17611                                  ;	ENTRY	BX = ptr to system parser result buffer for /A occurence
 17612                                  ;
 17613                                  ;	EXIT	CY = set if error occurs parsing attribute conditions
 17614                                  ;
 17615                                  ;		For parse error, we set up for Std_EPrintf call:
 17616                                  ;		AX = parse error code, like system parser
 17617                                  ;		DX = ptr to message block
 17618                                  ;
 17619                                  ;	USED	AX,CX,DX,DI
 17620                                  ;
 17621                                  ;	EFFECTS
 17622                                  ;
 17623                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 17624                                  ;	  If parse error occurs, attribute conditions parsed so far hold.
 17625                                  ;
 17626                                  ;	  For parse error, we set up for Std_EPrintf call:
 17627                                  ;	  Msg_Disp_Class = parse error message class
 17628                                  ;	  Message block (see DX) is set up for parse error message
 17629                                  
 17630                                  	; 19/02/2023
 17631                                  ParseAttr:
 17632 000017C4 56                      	push	si			; save SI
 17633 000017C5 C606[059E]00            	mov	byte [AttrSpecified],0	; cancel all attribute conditions
 17634                                  
 17635                                  ;	Each /A invocation starts by assuming all files are to be listed.
 17636                                  
 17637                                  	;;mov	si,word ptr [bx].ValuePtr
 17638                                  					; SI = ptr to string after /A
 17639                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17640 000017CA 8B7704                  	mov	si,[bx+4]
 17641                                  paLoop:	
 17642 000017CD BA0100                  	mov	dx,1			; DX = 1 (for un-negated attribute)
 17643 000017D0 AC                      	lodsb				; AL = next char in string
 17644 000017D1 08C0                    	or	al,al
 17645                                  	;jz	short paOk		; it's terminating null, we're done
 17646                                  	; 19/02/2023
 17647 000017D3 742F                    	jz	short paRet ; cf=0
 17648 000017D5 3C2D                    	cmp	al,'-'
 17649 000017D7 7502                    	jne	short pa1		; not '-', go look for letter
 17650 000017D9 4A                      	dec	dx			; DX = 0 (for negated attribute)
 17651 000017DA AC                      	lodsb				; AL = next char
 17652                                  pa1:	
 17653                                  	;mov	di,offset TRANGROUP:AttrLtrs 
 17654                                  					; DI = ptr to attrib letter list
 17655 000017DB BF[DC95]                	mov	di,AttrLtrs ; "RHSvDA"
 17656                                  	;mov	cx,6
 17657 000017DE B90600                  	mov	cx,NUM_ATTR_LTRS ; 6	; CX = length of attrib letter list
 17658 000017E1 F2AE                    	repne	scasb			; look for our letter in the list
 17659 000017E3 751B                    	jne	short paErr		; not found, return error
 17660                                  
 17661 000017E5 F7D1                    	not	cx
 17662                                  	;add	cx,6
 17663 000017E7 83C106                  	add	cx,NUM_ATTR_LTRS	; CX = attrib bit #, 0-5
 17664                                  
 17665                                  ;	Note that we rely on AttrLtrs to be in the attribute bit order,
 17666                                  ;	starting from bit 0.
 17667                                  
 17668                                  ;	Record this attribute bit in AttrSpecified.
 17669                                  
 17670 000017EA B001                    	mov	al,1
 17671 000017EC D2E0                    	shl	al,cl			; AL = mask for our bit
 17672 000017EE 0806[059E]              	or	[AttrSpecified],al	; set it in the 'specified' mask
 17673                                  
 17674                                  ;	Record the selected state for this attribute in AttrSelect.
 17675                                  ;	DX = 0 or 1, the selected state for this attribute.
 17676                                  
 17677 000017F2 F6D0                    	not	al			; AL = mask for all other bits
 17678 000017F4 2006[069E]              	and	[AttrSelect],al		; clear our bit
 17679 000017F8 D2E2                    	shl	dl,cl			; DL = our bit state in position
 17680 000017FA 0816[069E]              	or	[AttrSelect],dl		; set selected attr state
 17681 000017FE EBCD                    	jmp	short paLoop		; go look at next char
 17682                                  
 17683                                  ;	The attribute letter string is invalid.
 17684                                  
 17685                                  paErr:	
 17686 00001800 E89B04                  	call	SetupParamError		; set message up for Std_EPrintf
 17687 00001803 F9                      	stc		   		; return error
 17688                                  	; 19/02/2023
 17689                                  	;jmp	short paRet
 17690                                  ;paOk:
 17691                                  	;clc				; return success		
 17692                                  paRet:	
 17693 00001804 5E                      	pop	si			; restore SI
 17694 00001805 C3                      	retn
 17695                                  
 17696                                  ; ---------------------------------------------------------------------------
 17697                                  
 17698                                  ;***	ParseLine - parse a line of text
 17699                                  ;
 17700                                  ;	Parse text until an EOL (CR or NUL) is found, or until a parse
 17701                                  ;	error occurs.
 17702                                  ;
 17703                                  ;	ENTRY	DS:SI = ptr to text
 17704                                  ;		CS, DS, ES = TRANGROUP seg addr
 17705                                  ;
 17706                                  ;	EXIT	AX = last return code from system parser
 17707                                  ;		CX = # positional parameters (pathnames) found - 0 or 1
 17708                                  ;
 17709                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 17710                                  ;		DX = ptr to message block
 17711                                  ;
 17712                                  ;	USED	BX,CX,DX,SI,DI
 17713                                  ;
 17714                                  ;	EFFECTS
 17715                                  ;
 17716                                  ;	  Bits may contain new option settings.
 17717                                  ;	  DestBuf may contain new series of sort codes.
 17718                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 17719                                  ;	  SrcBuf may contain a new default pathname/filespec.
 17720                                  ;	  PathPos, PathCnt updated for new pathname.
 17721                                  ;
 17722                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 17723                                  ;	  Msg_Disp_Class = parse error class
 17724                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 17725                                  ;	  Message block (see DX) is set up for parse error message
 17726                                  
 17727                                  	; 19/02/2023
 17728                                  Parse_Line:
 17729                                  	; 04/05/2023
 17730 00001806 BF[A996]                	mov	di,PARSE_DIR		; ES:DI = ptr to parse block
 17731 00001809 31C9                    	xor	cx,cx			; CX = # positionals found
 17732                                  plPars:
 17733 0000180B E84B0D                  	call	Parse_With_Msg		; call parser
 17734 0000180E 83F8FF                  	cmp	ax,-1
 17735                                  	;cmp	ax,END_OF_LINE ; 0FFFFh ; -1
 17736 00001811 7411                    	je	short plRet		; EOL encountered, return
 17737 00001813 83F800                  	cmp	ax,RESULT_NO_ERROR ; 0
 17738 00001816 750C                    	jne	short plRet		; parse error occurred, return
 17739                                  
 17740                                  ;	Parse call succeeded. We have a filespec or a switch.
 17741                                  ;	DX = ptr to result buffer
 17742                                  
 17743 00001818 89D3                    	mov	bx,dx			; BX = ptr to parse result buffer
 17744 0000181A 803F05                  	cmp	byte [bx],RESULT_FILESPEC ; 5
 17745 0000181D 7406                    	je	short plFil		; we have a filespec
 17746                                  
 17747 0000181F E85900                  	call	ParseSwitch		; else we have a switch
 17748                                  	;jc	short plRet		; error parsing switch, return
 17749                                  	;jmp	short plPars		; parse more
 17750                                  	; 19/02/2023
 17751 00001822 73E7                    	jnc	short plPars
 17752                                  plRet:
 17753 00001824 C3                      	retn	
 17754                                  plFil:	
 17755 00001825 E8BA00                  	call	CopyPathname		; copy pathname into our buffer
 17756 00001828 EBE1                    	jmp	short plPars		; parse more
 17757                                  ;plRet:
 17758                                  ;	retn
 17759                                  
 17760                                  ; ---------------------------------------------------------------------------
 17761                                  
 17762                                  ;***	ParseOrder - parse and record /O option
 17763                                  ;
 17764                                  ;	ENTRY	BX = ptr to system parser result buffer for /O occurence
 17765                                  ;
 17766                                  ;	EXIT	CY = set if error occurs parsing order
 17767                                  ;
 17768                                  ;		For parse error, we set up for Std_EPrintf call:
 17769                                  ;		AX = parse error code, like system parser
 17770                                  ;		DX = ptr to message block
 17771                                  ;
 17772                                  ;	USED	AX,CX,DX,DI
 17773                                  ;
 17774                                  ;	EFFECTS
 17775                                  ;
 17776                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 17777                                  ;
 17778                                  ;	  For parse error, we set up for Std_EPrintf call:
 17779                                  ;	  Msg_Disp_Class = parse error message class
 17780                                  ;	  Message block (see DX) is set up for parse error message
 17781                                  
 17782                                  	; 19/02/2023 - Retro DOS v4.0 COMMAND.COM
 17783                                  	;
 17784                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17785                                  	; MSDOS 6.22 COMMAND.COM
 17786                                  ParseOrder:
 17787 0000182A 56                      	push	si			; save SI
 17788 0000182B 53                      	push	bx			; save ptr to result buffer
 17789                                  
 17790                                  	;;mov	si,word ptr [bx].ValuePtr
 17791                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17792 0000182C 8B7704                  	mov	si,[bx+4]		; SI = ptr to order letters
 17793                                  	;mov	bx,offset TRANGROUP:DestBuf
 17794                                  	; 08/06/2023
 17795 0000182F BB[2E9E]                	mov	bx,DestBuf		; BX = ptr to sort code buffer
 17796 00001832 8A04                    	mov	al,[si]			; AL = 1st char of order string
 17797 00001834 08C0                    	or	al,al
 17798 00001836 750E                    	jnz	short poLtr		; not NUL, go parse letters
 17799                                  
 17800                                  ;	We have /O alone. Set standard sort order.
 17801                                  ;	Note hardwired dependency on character order in OrderLtrs.
 17802                                  
 17803 00001838 C60705                  	mov	byte [bx],5		; sort 1st by group (subdirs 1st)
 17804 0000183B 43                      	inc	bx
 17805 0000183C C60701                  	mov	byte [bx],1		; then by name
 17806 0000183F 43                      	inc	bx
 17807 00001840 C60702                  	mov	byte [bx],2		; then by extension
 17808 00001843 43                      	inc	bx
 17809 00001844 EB2F                    	jmp	short poOk		; return success
 17810                                  
 17811                                  ;	We have /O<something>. Parse sort order letters.
 17812                                  
 17813                                  poLtr:	
 17814 00001846 30D2                    	xor	dl,dl			; DL = 0 (upward sort)
 17815 00001848 AC                      	lodsb				; AL = next sort order letter
 17816 00001849 08C0                    	or	al,al
 17817 0000184B 7428                    	jz	short poOk		; NUL found, return success
 17818                                  
 17819 0000184D 3C2D                    	cmp	al,'-'
 17820 0000184F 7503                    	jne	short po1		; not '-', go look for letter
 17821 00001851 B280                    	mov	dl,80h			; DL = downward sort mask
 17822 00001853 AC                      	lodsb				; AL = next char
 17823                                  po1:
 17824                                  	;mov	di,offset TRANGROUP:OrderLtrs
 17825                                  	; 08/06/2023
 17826 00001854 BF[E295]                	mov	di,OrderLtrs ;"NEDSGC"	; DI = ptr to list of letters
 17827                                  	; (NUM_ORDER_LTRS = 6 for MSDOS 6.22 COMMAND.COM)
 17828                                  	; ((N,E,D,S,G for MSDOS 5.0 and N,E,D,S,G,C for MSDOS 6.22)) 
 17829                                  	;mov	cx,6 ; 08/06/2023
 17830 00001857 B90600                  	mov	cx,NUM_ORDER_LTRS ; 5	; CX = length of list
 17831 0000185A F2AE                    	repne	scasb			; look for our letter in the list
 17832 0000185C 7510                    	jne	short poErr		; not found, return error
 17833                                  
 17834 0000185E F7D9                    	neg	cx
 17835                                  	;add	cx,6 ; 08/06/2023
 17836 00001860 83C106                  	add	cx,NUM_ORDER_LTRS ; 5	; CL = sort order code, 1-6
 17837                                  
 17838 00001863 08D1                    	or	cl,dl			; CL = sort code with up/dn bit
 17839 00001865 880F                    	mov	[bx],cl			; store sort order code in buffer
 17840 00001867 43                      	inc	bx			; BX = ptr to next spot in buffer
 17841                                  	;cmp	bx,offset TRANGROUP:EndDestBuf
 17842 00001868 81FB[859E]              	cmp	bx,EndDestBuf
 17843                                  	;jae	short poErr		; too many letters
 17844                                  	;
 17845                                  	;jmp	short poLtr		; go look at next char
 17846                                  	; 19/02/2023
 17847 0000186C 72D8                    	jb	short poLtr
 17848                                  
 17849                                  ;	The sort order string is invalid.  
 17850                                  
 17851                                  poErr:
 17852 0000186E 5B                      	pop	bx			; BX = ptr to result buffer
 17853 0000186F E82C04                  	call	SetupParamError		; set message up for Std_EPrintf
 17854 00001872 F9                      	stc				; return failure
 17855 00001873 EB04                    	jmp	short poRet
 17856                                  poOk:	
 17857 00001875 C60700                  	mov	byte [bx],0		; mark end of sort code list
 17858 00001878 5B                      	pop	bx			; BX = ptr to result buffer
 17859                                  	; 19/02/2023
 17860                                  	;cf=0
 17861                                  	;clc				; return success
 17862                                  poRet:
 17863 00001879 5E                      	pop	si			; restore SI
 17864 0000187A C3                      	retn
 17865                                  
 17866                                  ; ---------------------------------------------------------------------------
 17867                                  ; MSDOS 6.0
 17868                                  	; 08/06/2023
 17869                                  
 17870                                  ; 31/07/2024 - Retro DOS 5.0 - PCDOS 7.1 COMMAND.COM
 17871                                  %if 0
 17872                                  
 17873                                  ;ifdef DBLSPACE_HOOKS
 17874                                  
 17875                                  ;***	ParseRatio - parse and record /C[H] option
 17876                                  ;
 17877                                  ;	ENTRY	BX = ptr to system parser result buffer for /C occurence
 17878                                  ;		DI = index into word list of switches
 17879                                  ;
 17880                                  ;	EXIT	CY = set if error occurs parsing order
 17881                                  ;
 17882                                  ;		For parse error, we set up for Std_EPrintf call:
 17883                                  ;		AX = parse error code, like system parser
 17884                                  ;		DX = ptr to message block
 17885                                  ;
 17886                                  ;	USED	AX,CX,DX,DI
 17887                                  ;
 17888                                  ;	EFFECTS
 17889                                  ;
 17890                                  ;	  Bits modified to indicate option state.
 17891                                  ;	  fUseHostSize is set to zero for /C, non-zero for /CH.
 17892                                  ;
 17893                                  ;	  For parse error, we set up for Std_EPrintf call:
 17894                                  ;	  Msg_Disp_Class = parse error message class
 17895                                  ;	  Message block (see DX) is set up for parse error message
 17896                                  
 17897                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17898                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:184Ch
 17899                                  
 17900                                  ParseRatio:	;proc
 17901                                  	call	OnOffSw			; turn on option bit
 17902                                  	push	si			; save SI
 17903                                  	;;mov	si,word ptr [bx].ValuePtr
 17904                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 17905                                  	mov	si,[bx+4]		; SI = ptr to possible H option
 17906                                  	mov	al,[si] 		; AL = null or 'H'
 17907                                  	or	al,al
 17908                                  	jz	short prDone		; if null, no H option to check
 17909                                  	cmp	al,'H' 			; only H is allowed, make sure that's
 17910                                  	je	short prDone		;   what it is
 17911                                  	call	SetupParamError		; set message up for Std_EPrintf
 17912                                  	stc				; return failure
 17913                                  	jmp	short prRet
 17914                                  prDone:
 17915                                  	mov	[fUseHostSize],al	; set Host cluster size flag
 17916                                  	; 08/06/2023
 17917                                  	;clc
 17918                                  	;;cf = 0
 17919                                  prRet:	
 17920                                  	pop	si
 17921                                  	retn
 17922                                  
 17923                                  ;ParseRatio	;endp
 17924                                  ;endif
 17925                                  
 17926                                  %endif
 17927                                  
 17928                                  ; ---------------------------------------------------------------------------
 17929                                  
 17930                                  ;***	ParseSwitch - parse a switch
 17931                                  ;
 17932                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 17933                                  ;		     a switch
 17934                                  ;
 17935                                  ;	EXIT	CY = set if parse error occurred
 17936                                  ;
 17937                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 17938                                  ;		AX = parse error code, like system parser
 17939                                  ;		DX = ptr to message block
 17940                                  ;
 17941                                  ;	USED	AX,BX,DX
 17942                                  ;
 17943                                  ;	EFFECTS
 17944                                  ;
 17945                                  ;	  Bits may contain new option settings.
 17946                                  ;	  DestBuf may contain new series of sort codes.
 17947                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 17948                                  ;
 17949                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 17950                                  ;	  Msg_Disp_Class = parse error class
 17951                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 17952                                  ;	  Message block (see DX) is set up for parse error message
 17953                                  
 17954                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17955                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16E2h
 17956                                  
 17957                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17958                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1869h
 17959                                  ParseSwitch:
 17960 0000187B 51                      	push	cx			; save CX
 17961 0000187C 57                      	push	di			; save DI
 17962                                  
 17963                                  	;;mov	ax,[bx].SynPtr		; AX = synonym ptr
 17964                                  	;mov	ax,[bx+ResultBuffer.SynPtr]
 17965 0000187D 8B4702                  	mov	ax,[bx+2]
 17966                                  	;mov	di,offset TRANGROUP:Dir_Sw_Ptrs
 17967 00001880 BF[0097]                	mov	di,Dir_Sw_Ptrs		; ES:DI = ptr to list of synonym ptrs
 17968                                  	; 08/06/2023
 17969                                  	; (NUM_DIR_SWS = 16 for MSDOS 6.0)
 17970                                  	;mov	cx,16
 17971                                  	; 31/07/2024
 17972                                  	;mov	cx,18 ; PCDOS 7.1 COMMAND.COM
 17973 00001883 B91200                  	mov	cx,NUM_DIR_SWS ; 14	; CX = # of dir switches in list
 17974 00001886 FC                      	cld				; scan direction = upward
 17975 00001887 F2AF                    	repne	scasw			; locate synonym ptr in list
 17976                                  	;sub	di,offset TRANGROUP:Dir_Sw_Ptrs + 2
 17977 00001889 81EF[0297]              	sub	di,Dir_Sw_Ptrs+2
 17978                                  
 17979                                  ;	DI = index into word list of synonym ptrs
 17980                                  
 17981 0000188D 2EFF95[9518]            	call	word [cs:di+SwHandler]	; use same index into call table
 17982                                  
 17983 00001892 5F                      	pop	di			; restore DI
 17984 00001893 59                      	pop	cx			; restore CX
 17985                                  
 17986 00001894 C3                      	retn
 17987                                  
 17988                                  ; ---------------------------------------------------------------------------
 17989                                  
 17990                                  ;	Order in this table must correspond to order in Dir_Sw_Ptrs list.
 17991                                  ;	Simple on/off switches must occur first in both lists, and must be
 17992                                  ;	  in order of option bits in Bits, starting with bit 0.
 17993                                  
 17994                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17995                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16FCh
 17996                                  
 17997                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 17998                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1883h
 17999                                  SwHandler:
 18000                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 18001                                  
 18002                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 18003                                  %if 0
 18004                                  		; ifdef DBLSPACE_HOOKS
 18005                                  	dw	OnOffSw 	; /-C
 18006                                  	dw	ParseRatio	; /C[H]
 18007                                  	;	; endif	
 18008                                  %endif
 18009                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 18010                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1922h
 18011                                  
 18012 00001895 [A717]                  	dw	OnOffSw		; /-W
 18013 00001897 [A717]                  	dw	OnOffSw		; /W
 18014 00001899 [A717]                  	dw	OnOffSw		; /-P
 18015 0000189B [A717]                  	dw	OnOffSw		; /P
 18016 0000189D [A717]                  	dw	OnOffSw		; /-S
 18017 0000189F [A717]                  	dw	OnOffSw		; /S
 18018 000018A1 [A717]                  	dw	OnOffSw		; /-B
 18019 000018A3 [A717]                  	dw	OnOffSw		; /B
 18020 000018A5 [A717]                  	dw	OnOffSw		; /-L	;M010
 18021 000018A7 [A717]                  	dw	OnOffSw		; /L	;M010
 18022                                  
 18023                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 18024                                  %if 1
 18025 000018A9 [A717]                    	dw	OnOffSw		; /-Z
 18026 000018AB [A717]                  	dw	OnOffSw		; /Z
 18027 000018AD [A717]                  	dw	OnOffSw		; /-4
 18028 000018AF [A717]                  	dw	OnOffSw		; /4
 18029                                  %endif
 18030 000018B1 [A017]                  	dw	NoOrder		; /-O
 18031 000018B3 [2A18]                  	dw	ParseOrder	; /O
 18032 000018B5 [ED14]                  	dw	DefaultAttr	; /-A
 18033 000018B7 [C417]                  	dw	ParseAttr	; /A
 18034                                  
 18035                                  ; ---------------------------------------------------------------------------
 18036                                  
 18037                                  	;break	<DIR utility routines>
 18038                                  
 18039                                  ;***	UTILITY ROUTINES
 18040                                  ; ---------------------- 
 18041                                  
 18042                                  ; ---------------------------------------------------------------------------
 18043                                  
 18044                                  ;***	ChangeDir - change directory on target drive
 18045                                  ;
 18046                                  ;	ENTRY	FCB contains drive #
 18047                                  ;		DS:DX = ptr to ASCIIZ string w/o drive specifier
 18048                                  ;
 18049                                  ;	EXIT	Changed current directory on drive
 18050                                  ;
 18051                                  ;		If error,
 18052                                  ;		CY = set
 18053                                  ;		DOS Get Extended Error call will get error
 18054                                  ;
 18055                                  ;	USED	AX,DX,SI,DI
 18056                                  ;
 18057                                  ;	EFFECTS
 18058                                  ;
 18059                                  ;	  DirBuf is used to build "d:string".
 18060                                  
 18061                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18062                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1718h
 18063                                  
 18064                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18065                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:18A3h
 18066                                  
 18067                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 18068                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1946h
 18069                                  ChangeDir:
 18070                                  	;mov	di,offset TRANGROUP:DirBuf
 18071 000018B9 BF[AB9D]                	mov	di,DIRBUF
 18072 000018BC E8CE03                  	call	GetDriveLtr	; AX = "d:"
 18073 000018BF AB                      	stosw			; put drive specifier in buffer
 18074 000018C0 89D6                    	mov	si,dx		; SI = ptr to argument string
 18075                                  cdLoop:
 18076 000018C2 AC                      	lodsb
 18077 000018C3 AA                      	stosb			; move byte to buffer
 18078 000018C4 08C0                    	or	al,al
 18079 000018C6 75FA                    	jne	short cdLoop	; continue until null transferred
 18080                                  
 18081                                  	;mov	dx,offset TRANGROUP:DirBuf
 18082 000018C8 BA[AB9D]                	mov	dx,DIRBUF	; DX = ptr to "d:string"
 18083                                  	;mov	ah,CHDir
 18084 000018CB B43B                    	mov	ah,3Bh
 18085 000018CD CD21                    	int	21h		; change directory
 18086 000018CF C3                      	retn			; return what CHDIR returns
 18087                                  
 18088                                  ; ---------------------------------------------------------------------------
 18089                                  
 18090                                  ;***	CmpAscz - compare two ASCIIZ strings alphanumerically
 18091                                  ;
 18092                                  ;	ENTRY	DS:SI = ptr to one ASCIIZ string
 18093                                  ;		ES:DI = ptr to another ASCIIZ string
 18094                                  ;
 18095                                  ;	EXIT	flags set after REPE CMPSB
 18096                                  ;
 18097                                  ;	USED	AL,CX,SI,DI
 18098                                  ;
 18099                                  ;	NOTES
 18100                                  ;
 18101                                  ;	Maximum run of comparison is length of DS:SI string.
 18102                                  ;	This ensures that two identical strings followed by
 18103                                  ;	random characters will compare correctly.
 18104                                  
 18105                                  	; 19/02/2023
 18106                                  CmpAscz:
 18107                                  	; 07/06/2023
 18108 000018D0 56                      	push	si ; *
 18109                                  	;
 18110 000018D1 57                      	push	di
 18111                                  
 18112 000018D2 89F7                    	mov	di,si
 18113 000018D4 30C0                    	xor	al,al
 18114 000018D6 B9FFFF                  	mov	cx,0FFFFh
 18115 000018D9 F2AE                    	repne	scasb
 18116 000018DB F7D1                    	not	cx
 18117                                  
 18118 000018DD 5F                      	pop	di
 18119 000018DE F3A6                    	repe	cmpsb
 18120                                  
 18121                                  	; 07/06/2023
 18122 000018E0 5E                      	pop	si ; *
 18123                                  	;
 18124 000018E1 C3                      	retn
 18125                                  
 18126                                  ; ---------------------------------------------------------------------------
 18127                                  
 18128                                  ;***	CopyPathname - copy pathname to our buffer
 18129                                  ;
 18130                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 18131                                  ;		     a filespec
 18132                                  ;
 18133                                  ;	EXIT	nothing
 18134                                  ;
 18135                                  ;	USED	AX
 18136                                  ;
 18137                                  ;	EFFECTS
 18138                                  ;
 18139                                  ;	  SrcBuf may contain a new pathname/filespec.
 18140                                  ;	  PathPos, PathCnt updated for new pathname.
 18141                                  
 18142                                  	; 19/02/2023
 18143                                  CopyPathname:
 18144 000018E2 56                      	push	si
 18145                                  	;;lds	si,dword ptr [bx].ValuePtr  ; load far ptr from result buffer
 18146                                  	;lds	si,[bx+ResultBuffer.ValuePtr]
 18147 000018E3 C57704                  	lds	si,[bx+4]
 18148                                  	;invoke	Move_To_SrcBuf		    ; copy pathname to SrcBuf
 18149 000018E6 E8ED17                  	call	Move_To_SrcBuf
 18150 000018E9 5E                      	pop	si
 18151 000018EA C3                      	retn
 18152                                  
 18153                                  ; ---------------------------------------------------------------------------
 18154                                  
 18155                                  ;***	CountFile - update counters with current file
 18156                                  ;
 18157                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18158                                  ;
 18159                                  ;	EXIT	nothing
 18160                                  ;
 18161                                  ;	USED	AX,DX
 18162                                  ;
 18163                                  ;	EFFECTS
 18164                                  ;
 18165                                  ;	  FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 18166                                  
 18167                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18168                                  	; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 18169                                  CountFile:
 18170 000018EB 06                      	push	es			; save TRANGROUP seg addr
 18171 000018EC 8E06[659C]              	mov	es,[TPA]		; ES = TPA seg addr
 18172                                  
 18173 000018F0 FF06[929C]              	inc	word [FileCnt]		; # files this directory
 18174 000018F4 FF06[D09C]              	inc	word [FileCntTotal]	; # files total
 18175 000018F8 7504                    	jnz	short cntf1
 18176 000018FA FF06[D29C]              	inc	word [FileCntTotal+2]
 18177                                  cntf1:
 18178                                  	;mov	ax,word ptr es:[bx].filesize
 18179                                  					; AX = low word of file size
 18180                                  	;mov	dx,word ptr es:[bx].filesize+2
 18181                                  					; DX = high word of file size
 18182 000018FE 268B4711                	mov	ax,[es:bx+17] ; [es:bx+EntryStruc.filesize]
 18183 00001902 268B5713                	mov	dx,[es:bx+19] ; [es:bx+EntryStruc.filesize+2]
 18184 00001906 0106[949C]              	add	[FileSiz],ax
 18185 0000190A 1116[969C]              	adc	[FileSiz+2],dx		; size of this directory
 18186                                  
 18187                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 18188                                  %if 1
 18189 0000190E 8316[989C]00            	adc	word [FileSiz+4],0
 18190                                  %endif
 18191 00001913 0106[D49C]              	add	[FileSizTotal],ax
 18192 00001917 1116[D69C]              	adc	[FileSizTotal+2],dx	; total size of files listed
 18193                                  
 18194                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM
 18195                                  %if 1
 18196 0000191B 8316[D89C]00            	adc	word [FileSizTotal+4],0
 18197                                  %endif
 18198 00001920 07                      	pop	es			; ES = TRANGROUP seg addr again
 18199                                  dbRet:	; 19/02/2023
 18200 00001921 C3                      	retn
 18201                                  
 18202                                  ; ---------------------------------------------------------------------------
 18203                                  
 18204                                  ;***	DisplayBare - display filename in bare format
 18205                                  ;
 18206                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18207                                  ;
 18208                                  ;	EXIT	DX = # char's displayed, including dot
 18209                                  ;
 18210                                  ;	USED	AX,CX,SI,DI
 18211                                  ;
 18212                                  ;	EFFECTS
 18213                                  ;
 18214                                  ;	  Filename is displayed in name.ext format, followed by cr/lf.
 18215                                  ;	  If /s is on, complete pathname is displayed.
 18216                                  ;
 18217                                  ;	NOTE
 18218                                  ;
 18219                                  ;	  Directory pseudofiles . and .. and suppressed in bare listing.
 18220                                  
 18221                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18222                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1775h
 18223                                  
 18224                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18225                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1900h
 18226                                  
 18227                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18228                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:19ADh
 18229                                  
 18230                                  DisplayBare:
 18231                                  ;	Suppress . and .. files from bare listing.
 18232                                  
 18233 00001922 8CD9                    	mov	cx,ds			; CX = saved TRANGROUP seg addr
 18234 00001924 8E1E[659C]              	mov	ds,[TPA]		; DS:BX = ptr to file entry
 18235                                  	;assume	ds:NOTHING
 18236                                  	;cmp	ds:[bx].filename,'.'	; check 1st char of filename
 18237 00001928 807F012E                	cmp	byte [bx+1],'.' ; [bx+EntrStruc.filename]
 18238 0000192C 8ED9                    	mov	ds,cx			; DS = TRANGROUP seg addr again
 18239                                  	;assume	ds:TRANGROUP
 18240 0000192E 74F1                    	je	short dbRet		; it's . or .. - don't display
 18241                                  
 18242                                  	;;;test	Bits,mask subd
 18243                                  	;;test	word [_Bits],4
 18244                                  	;test	byte [_Bits],4
 18245                                  	; 08/06/2023
 18246 00001930 F606[FD9D]04            	test	byte [_Bits],mask.subd	; 8 ; MSDOS 6.0
 18247                                  			; 01/08/2024    ; 4 ; PCDOS 7.1	
 18248 00001935 743C                    	jz	short dbNameExt		; not /s - display filename only
 18249                                  
 18250                                  	;invoke	Build_Dir_String
 18251 00001937 E8C108                  	call	build_dir_string
 18252                                  	;mov	di,offset TRANGROUP:BwdBuf
 18253 0000193A BF[AB9D]                	mov	di,BWDBUF		; ES:DI = ptr to dir string
 18254                                     
 18255                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 18256                                  	;;test	word [_Bits],10h
 18257                                  	;test	byte [_Bits],10h
 18258                                  	; 08/06/2023
 18259 0000193D F606[FD9D]10            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 18260                                  			; 01/08/2024	; 10h ; PCDOS 7.1
 18261                                  	;jz	@F			;M010;lowercase not needed
 18262 00001942 7405                    	jz	short dbare1
 18263 00001944 89FE                    	mov	si,di			;M010;DS:SI --> ASCIIZ string in BwdBuf	
 18264 00001946 E89603                  	call	LowercaseString		;M010;path string is in BwdBuf
 18265                                  dbare1:
 18266                                  ;@@:	
 18267                                  	;xor	al,al			; AL = 0
 18268                                  	; 19/02/2023
 18269 00001949 31C0                    	xor	ax,ax
 18270 0000194B B9FFFF                  	mov	cx,0FFFFh
 18271 0000194E FC                      	cld
 18272 0000194F F2AE                    	repne	scasb			; ES:DI = ptr to byte after null
 18273 00001951 4F                      	dec	di			; ES:DI = ptr to null byte
 18274                                  
 18275                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18276                                  %if 1 ; *!
 18277                                  ;ifdef DBCS
 18278 00001952 56                      	push	si ; *!
 18279 00001953 57                      	push	di
 18280                                  	;mov	si,offset TRANGROUP:BwdBuf
 18281 00001954 BE[AB9D]                	mov	si,BWDBUF
 18282 00001957 4F                      	dec	di
 18283 00001958 E8C711                  	call	CheckDBCSTailByte
 18284 0000195B 5F                      	pop	di
 18285                                  	; 01/08/2024
 18286                                  	;pop	si ; *!
 18287 0000195C 7407                    	jz	short dbTailByte	; if last char is double byte
 18288                                  ;endif
 18289                                  %endif
 18290 0000195E 26807DFF5C              	cmp	byte [es:di-1],'\'
 18291                                  	;je	@F
 18292 00001963 7403                    	je	short dbare2		; already terminated w/ '\'
 18293                                  
 18294                                  dbTailByte:	; 01/08/2024
 18295                                  	;mov	ax,'\'			; AX = '\',0
 18296 00001965 B05C                    	mov	al,'\'
 18297 00001967 AB                      	stosw				; add to dir string
 18298                                  ;@@:
 18299                                  dbare2:
 18300                                  	;;mov	String_Ptr_2,offset TRANGROUP:BwdBuf
 18301                                  	;mov	word [string_ptr_2],BWDBUF ; *!
 18302                                  	; 01/08/2024
 18303 00001968 8936[129E]              	mov	[string_ptr_2],si ; BWDBUF ; *!
 18304 0000196C 5E                      	pop	si ; *!
 18305                                  	;mov	dx,offset TRANGROUP:String_Buf_Ptr
 18306 0000196D BA[E291]                	mov	dx,string_buf_ptr
 18307                                  	;invoke	Std_Printf		; display device & directory path
 18308 00001970 E8B53A                  	call	std_printf
 18309                                  dbNameExt:
 18310 00001973 E82D00                  	call	DisplayDotForm		; display name.ext
 18311                                  	;invoke	CrLf2			; display cr/lf
 18312 00001976 E8FE0F                  	call	CRLF2
 18313                                  	; 19/02/2023
 18314                                  	;call	UseLine			;M007;Allow /p with /b
 18315                                  ;dbRet:
 18316                                  	;retn
 18317                                  
 18318                                  	; 19/02/2023
 18319                                  	;jmp	short UseLine
 18320                                  
 18321                                  ; ---------------------------------------------------------------------------
 18322                                  
 18323                                  ;***	UseLine - use a display line, start a new page if none left
 18324                                  ;
 18325                                  ;	ENTRY	nothing
 18326                                  ;
 18327                                  ;	EXIT	nothing
 18328                                  ;
 18329                                  ;	USED	flags
 18330                                  
 18331                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18332                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A04h
 18333                                  
 18334                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18335                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1D58h
 18336                                  UseLine:
 18337 00001979 FF0E[909C]              	dec	word [LeftOnPage]
 18338 0000197D 833E[909C]02            	cmp	word [LeftOnPage],2
 18339 00001982 771E                    	ja	short ulRet
 18340                                  	; 19/02/2023
 18341                                  	;call	EndPage
 18342                                  ;ulRet:
 18343                                  	;retn
 18344                                  
 18345                                  	; 19/02/2023
 18346                                  	;jmp	short EndPage
 18347                                  
 18348                                  ; ---------------------------------------------------------------------------
 18349                                  
 18350                                  ;***	EndPage - end the current display page
 18351                                  ;
 18352                                  ;	ENTRY	LeftOnPage = # lines left on display page
 18353                                  ;		Current directory (on selected drive) is the one being listed
 18354                                  ;		Bits contains /p setting
 18355                                  ;
 18356                                  ;	EXIT	LeftOnPage = # lines left for next page
 18357                                  ;
 18358                                  ;	USED	AX,DX
 18359                                  ;
 18360                                  ;	EFFECTS
 18361                                  ;
 18362                                  ;	  Pause is invoked to display a message and wait for a keystroke.
 18363                                  ;	  BwdBuf (same as DirBuf) used to build directory string.
 18364                                  
 18365                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18366                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19B8h
 18367                                  
 18368                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18369                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1BADh
 18370                                  
 18371                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18372                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1D0Ch
 18373                                  EndPage:
 18374                                  	;;;test	Bits,mask pagd
 18375                                  	;;test	word [_Bits],2
 18376                                  	;test	byte [_Bits],2
 18377                                  	; 08/06/2023
 18378 00001984 F606[FD9D]02            	test	byte [_Bits],mask.pagd ; 4 ; MSDOS 6.0
 18379                                  			; 01/08/2024   ; 2 ; PCDOS 7.1	
 18380 00001989 7410                    	jz	short epNew		; paged display isn't enabled
 18381                                  
 18382 0000198B 53                      	push	bx			; save BX
 18383 0000198C 51                      	push	cx			; save CX
 18384                                  
 18385                                  	;invoke	Pause			; "Press any key to continue..."
 18386 0000198D E86E03                  	call	PAUSE
 18387                                  
 18388                                  	;invoke	Build_Dir_String
 18389 00001990 E86808                  	call	build_dir_string
 18390                                  	;mov	dx,offset TRANGROUP:DirCont_Ptr
 18391 00001993 BA[9E92]                	mov	dx,dircont_ptr
 18392                                  	;invoke	Printf_Crlf		; "(continuing <dir>)", cr/lf
 18393 00001996 E8813A                  	call	Printf_Crlf
 18394                                  
 18395 00001999 59                      	pop	cx			; restore CX
 18396 0000199A 5B                      	pop	bx			; restore BX
 18397                                  epNew:	
 18398 0000199B A1[879F]                	mov	ax,[LinPerPag]		; AX = # lines per page
 18399 0000199E 48                      	dec	ax			; AX = # lines till next EndPage
 18400 0000199F A3[909C]                	mov	[LeftOnPage],ax		; LeftOnPage = countdown variable
 18401                                  ulRet:	
 18402                                  	; 19/02/2023
 18403 000019A2 C3                      	retn
 18404                                  
 18405                                  ; ---------------------------------------------------------------------------
 18406                                  
 18407                                  ;***	DisplayDotForm - display filename in compressed dot format
 18408                                  ;
 18409                                  ;	Display name.ext, with no cr/lf's. Dot is displayed only
 18410                                  ;	if the filename has a nonblank extension.
 18411                                  ;
 18412                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18413                                  ;
 18414                                  ;	EXIT	DX = # char's displayed, including dot
 18415                                  ;
 18416                                  ;	USED	AX,CX,SI,DI
 18417                                  ;
 18418                                  ;	EFFECTS
 18419                                  ;
 18420                                  ;	  Filename is displayed in name.ext format.
 18421                                  ;
 18422                                  ;	NOTE
 18423                                  ;
 18424                                  ;	  We allow for bogus filenames that have blanks embedded
 18425                                  ;	  in the name or extension.
 18426                                  
 18427                                  ;	Bugbug:	might be a good performance gain if we buffered
 18428                                  ;	up the output and used DOS function 9.
 18429                                  
 18430                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18431                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:17C8h
 18432                                  
 18433                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18434                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1953h
 18435                                  
 18436                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18437                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1A0Dh
 18438                                  DisplayDotForm:
 18439 000019A3 1E                      	push	ds			; save TRANGROUP seg addr
 18440 000019A4 06                      	push	es			; save ES
 18441 000019A5 2EA1[659C]              	mov	ax,[cs:TPA]		; AX = TPA seg addr
 18442 000019A9 8ED8                    	mov	ds,ax			; DS:BX = ptr to entry
 18443                                  	;assume	ds:nothing
 18444 000019AB 8EC0                    	mov	es,ax			; ES:BX = ptr to entry
 18445                                  
 18446                                  	; 08/06/2023
 18447                                  	;mov	di,bx			; ES:DI = ptr to entry
 18448                                  	;;;add	di,filename + size filename - 1
 18449                                  	;add	di,8 ; 1+8-1		; ES:DI = ptr to last char in name field
 18450                                  	;;mov	cx,size filename	; CX = length of name field
 18451                                  	;mov	cx,8
 18452                                  	; 08/06/2023
 18453 000019AD B90800                  	mov	cx,8
 18454 000019B0 89CF                    	mov	di,cx
 18455 000019B2 01DF                    	add	di,bx	
 18456                                  
 18457 000019B4 B020                    	mov	al,' '
 18458 000019B6 FD                      	std				; scan down
 18459 000019B7 F3AE                    	repe	scasb			; scan for nonblank
 18460                                  
 18461                                  ;	Assume file name has at least one character.
 18462                                  
 18463 000019B9 41                      	inc	cx			; CX = # chars in name
 18464 000019BA 89CA                    	mov	dx,cx			; DX = # chars to be displayed
 18465                                  
 18466 000019BC 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 18467                                  	;;add	si,filename		; DS:SI = ptr to name
 18468                                  	;add	si,1 
 18469                                  	;		; add si,EntryStruc.filename
 18470                                  	; 25/04/2023
 18471 000019BE 46                      	inc	si
 18472                                  NextNameChar:
 18473 000019BF FC                      	cld
 18474 000019C0 AC                      	lodsb				; AL = next char
 18475                                  
 18476                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18477                                  %if 1
 18478                                  ;ifdef DBCS
 18479                                  	;invoke	testkanj
 18480                                  	;jz	@f			; if this is not lead byte
 18481 000019C1 E89B0D                  	call	testkanj
 18482 000019C4 7409                    	jz	short ddf3
 18483                                  	;invoke	Print_Char		; display lead byte
 18484 000019C6 E8E307                  	call    PRINT_CHAR
 18485 000019C9 49                      	dec	cx
 18486 000019CA 7413                    	jz	short ExtChar		; if this is end
 18487 000019CC AC                      	lodsb				; get tail byte
 18488                                  	;jmp	short NameChar10	; display tail byte
 18489 000019CD EB0B                    	jmp	short ddf1
 18490                                  ;@@:
 18491                                  ddf3:
 18492                                  ;endif
 18493                                  %endif
 18494                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 18495                                  	;;test	word [ss:_Bits],10h
 18496                                  	;test	byte [ss:_Bits],10h
 18497                                  	; 08/06/2023
 18498 000019CF 36F606[FD9D]10          	test	byte [ss:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 18499                                  			; 01/08/2024	   ; 10h ; PCDOS 7.1
 18500                                  	;jz	short @F		;M010;lowercase not required
 18501 000019D5 7403                    	jz	short ddf1
 18502 000019D7 E8FA02                  	call	LowerCase		;M010;filename char is in AL
 18503                                  
 18504                                  ;NameChar10:
 18505                                  ddf1:
 18506                                  ;@@:	
 18507                                  	;invoke	Print_Char		; display it
 18508 000019DA E8CF07                  	call	PRINT_CHAR
 18509 000019DD E2E0                    	loop	NextNameChar
 18510                                  
 18511                                  ExtChar:	; 01/08/2024
 18512                                  
 18513                                  ;	Now do extension.
 18514                                  
 18515 000019DF 89DF                    	mov	di,bx			; ES:DI = ptr to entry
 18516                                  	;add	di,fileext + size fileext - 1
 18517 000019E1 83C70B                  	add	di,11 ; 9+3-1		; ES:DI = ptr to last char in ext field
 18518                                  	;mov	cx,size fileext		; CX = length of ext field
 18519 000019E4 B90300                  	mov	cx,3
 18520 000019E7 B020                    	mov	al,' '
 18521 000019E9 FD                      	std				; scan down
 18522 000019EA F3AE                    	repe	scasb			; scan for nonblank
 18523 000019EC 742E                    	je	short ddDone		; no nonblank chars in ext
 18524                                  
 18525 000019EE 41                      	inc	cx			; CX = # chars in ext
 18526 000019EF 01CA                    	add	dx,cx			; DX = total # chars to be displayed
 18527 000019F1 42                      	inc	dx			;      including dot
 18528                                  
 18529 000019F2 B02E                    	mov	al,'.'
 18530 000019F4 E8B507                  	call	PRINT_CHAR
 18531 000019F7 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 18532                                  	;add	si,fileext		; DS:SI = ptr to ext
 18533 000019F9 83C609                  	add	si,9
 18534                                  
 18535                                  NextExtChar:
 18536 000019FC FC                      	cld
 18537 000019FD AC                      	lodsb				; AL = next char
 18538                                  
 18539                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18540                                  %if 1
 18541                                  ;ifdef DBCS
 18542                                  	;invoke	testkanj
 18543                                  	;jz	@f			; if this is not lead byte
 18544 000019FE E85E0D                  	call	testkanj
 18545 00001A01 7409                    	jz	short ddf4
 18546                                  	;invoke	Print_Char		; display lead byte
 18547 00001A03 E8A607                  	call    PRINT_CHAR
 18548 00001A06 49                      	dec	cx
 18549 00001A07 7413                    	jz	short ddDone		; if this is end
 18550 00001A09 AC                      	lodsb				; get tail byte
 18551                                  	;jmp	short ExtChar10		; display tail byte
 18552 00001A0A EB0B                    	jmp	short ddf2
 18553                                  ;@@:
 18554                                  ddf4:
 18555                                  ;endif
 18556                                  %endif
 18557                                  	;;;test	CS:Bits,mask lcase	;M010;check for lowercase option
 18558                                  	;;test	word [cs:_Bits],10h
 18559                                  	;test	byte [cs:_Bits],10h
 18560                                  	; 08/06/2023
 18561 00001A0C 2EF606[FD9D]10          	test	byte [cs:_Bits],mask.lcase ; 20h ; MSDOS 6.0
 18562                                  			; 01/08/2024	   ; 10h ; PCDOS 7.1
 18563                                  	;jz	short @F		;M010;lowercase not required
 18564 00001A12 7403                    	jz	short ddf2
 18565 00001A14 E8BD02                  	call	LowerCase		;M010;fileext char is in AL
 18566                                  ;@@:	
 18567                                  ddf2:
 18568                                  	;invoke	Print_Char		; display it
 18569 00001A17 E89207                  	call	PRINT_CHAR
 18570 00001A1A E2E0                    	loop	NextExtChar
 18571                                  ddDone:
 18572 00001A1C 07                      	pop	es			; restore ES
 18573 00001A1D 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 18574                                  	;assume	ds:TRANGROUP
 18575 00001A1E FC                      	cld				; leave direction flag = up
 18576 00001A1F C3                      	retn
 18577                                  
 18578                                  ; ---------------------------------------------------------------------------
 18579                                  
 18580                                  ;***	DisplayFile - display file entry, update counters
 18581                                  ;
 18582                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18583                                  ;		Bits contains /w, /p settings
 18584                                  ;
 18585                                  ;	EXIT	nothing
 18586                                  ;
 18587                                  ;	USED	AX,CX,DX,SI,DI,BP
 18588                                  ;
 18589                                  ;	EFFECTS
 18590                                  ;
 18591                                  ;	  Entry is displayed.  
 18592                                  ;	  If not /b,
 18593                                  ;	    Cursor is left at end of entry on screen.
 18594                                  ;	    FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 18595                                  ;	  If /b,
 18596                                  ;	    Cursor is left at beginning of next line.
 18597                                  ;	    Cnt's and Siz's aren't updated.
 18598                                  
 18599                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18600                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:182Eh
 18601                                  	
 18602                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18603                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:19B9h
 18604                                  
 18605                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18606                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1A8Fh
 18607                                  
 18608                                  DisplayFile:
 18609                                  	;;;test	Bits,mask bare
 18610                                  	;;test	word [_Bits],8
 18611                                  	;test	byte [_Bits],8
 18612                                  	; 08/06/2023
 18613 00001A20 F606[FD9D]08            	test	byte [_Bits],mask.bare ; 16 ; MSDOS 6.0
 18614                                  			; 01/08/2024	; 8 ; PCDOS 7.1
 18615 00001A25 7405                    	jz	short dfNorm		; not /b - do normal display
 18616                                  
 18617 00001A27 E8F8FE                  	call	DisplayBare		; display file in bare format
 18618 00001A2A EB18                    	jmp	short dfRet
 18619                                  dfNorm:	
 18620 00001A2C E87800                  	call	DisplayNext		; pos'n cursor for next entry
 18621                                  	;;;test	Bits,mask wide
 18622                                  	;;test	word [_Bits],1
 18623                                  	;test	byte [_Bits],1
 18624                                  	; 08/06/2023
 18625 00001A2F F606[FD9D]01            	test	byte [_Bits],mask.wide ; 2 ; MSDOS 6.0
 18626                                  			; 01/08/2024   ; 1 ; PCDOS 7.1
 18627 00001A34 7405                    	jz	short dfFull		; full format
 18628 00001A36 E82802                  	call	DisplayWide		; wide format
 18629 00001A39 EB06                    	jmp	short dfCnt
 18630                                  dfFull:	
 18631 00001A3B E83400                  	call	DisplayName		; display filename & extension
 18632 00001A3E E88D00                  	call	DisplayTheRest		; display size, date, time
 18633                                  
 18634                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18635                                  %if 0	
 18636                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 18637                                  	; MSDOS 6.0
 18638                                  ;ifdef DBLSPACE_HOOKS
 18639                                  	;;test	Bits,mask cratio
 18640                                  	;test	word [_Bits],1
 18641                                  	test	byte [_Bits],mask.cratio
 18642                                  					; display compression ratio
 18643                                  	jz	short dfCnt
 18644                                  	call	DisplayCompRatio
 18645                                  ;endif
 18646                                  %endif
 18647                                  
 18648                                  dfCnt:
 18649 00001A41 E8A7FE                  	call	CountFile		; update file counters
 18650                                  dfRet:
 18651                                  dhRet:	; 19/02/2023
 18652 00001A44 C3                      	retn
 18653                                  
 18654                                  ; ---------------------------------------------------------------------------
 18655                                  
 18656                                  ;***	DisplayHeader - display directory header of working directory
 18657                                  ;
 18658                                  ;	ENTRY	Current directory (on selected drive) is the one to display
 18659                                  ;		LeftOnPage = # lines left on display page
 18660                                  ;
 18661                                  ;	EXIT	nothing
 18662                                  ;
 18663                                  ;	ERROR EXIT
 18664                                  ;
 18665                                  ;	  Build_Dir_String will exit through CError with "Invalid drive
 18666                                  ;	   specification" if there's a problem obtaining the current
 18667                                  ;	   directory pathname.
 18668                                  ;
 18669                                  ;	USED	AX,DX,SI,DI
 18670                                  ;
 18671                                  ;	EFFECTS
 18672                                  ;
 18673                                  ;	  BwdBuf (which is really the same buffer as DirBuf, which
 18674                                  ;	   we are using for the DTA) contains the directory string.
 18675                                  ;	  LeftOnPage is adjusted.
 18676                                  
 18677                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18678                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18679                                  
 18680                                  DisplayHeader:
 18681                                  	;;;test	Bits,mask bare
 18682                                  	;;test	word [_Bits],8
 18683                                  	;test	byte [_Bits],8
 18684                                  	; 08/06/2023
 18685 00001A45 F606[FD9D]08            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 18686                                  			; 01/08/2024	; 8 ; PCDOS 7.1
 18687 00001A4A 75F8                    	jnz	short dhRet		; /b - don't display header
 18688                                  
 18689                                  	;;;test	Bits,mask subd
 18690                                  	;;test	word [_Bits],4
 18691                                  	;test	byte [_Bits],4
 18692                                  	; 08/06/2023
 18693 00001A4C F606[FD9D]04            	test	byte [_Bits],mask.subd ; 8 ; MSDOS 6.0
 18694                                  			; 01/08/2024   ; 4 ; PCDOS 7.1
 18695 00001A51 7408                    	jz	short dhNorm		; not /s
 18696                                  
 18697                                  ;	For subdirectory listings, put a blank line before the header.
 18698                                  
 18699                                  	;invoke	Crlf2			; start with a blank line
 18700 00001A53 E8210F                  	call	CRLF2
 18701 00001A56 E820FF                  	call	UseLine
 18702 00001A59 EB05                    	jmp	short dhCom
 18703                                  dhNorm:
 18704 00001A5B B020                    	mov	al,' ' ; 20h
 18705                                  	;mov	al,BLANK		; if not /s, precede by a blank
 18706 00001A5D E84C07                  	call	PRINT_CHAR		; print a leading blank
 18707                                  dhCom:
 18708 00001A60 E89807                  	call	build_dir_string
 18709 00001A63 BA[4691]                	mov	dx,dirhead_ptr
 18710 00001A66 E8BF39                  	call	std_printf		; print header & cr/lf
 18711 00001A69 E80DFF                  	call	UseLine
 18712 00001A6C E8080F                  	call	CRLF2			; another cr/lf
 18713                                  	;call	UseLine
 18714                                  ;dhRet:
 18715                                  	;retn
 18716                                  
 18717                                  	; 19/02/2023
 18718 00001A6F E907FF                  	jmp	UseLine
 18719                                  
 18720                                  ; ---------------------------------------------------------------------------
 18721                                  
 18722                                  ;***	DisplayName - display file name & extension
 18723                                  ;
 18724                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18725                                  ;
 18726                                  ;	EXIT	nothing
 18727                                  ;
 18728                                  ;	USED	AX,CX,DX,SI,DI
 18729                                  ;
 18730                                  ;	EFFECTS
 18731                                  ;
 18732                                  ;	  Filename & extension are displayed in spread format.
 18733                                  ;	  Cursor is left at end of extension.
 18734                                  
 18735                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18736                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18737                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18738                                  
 18739                                  DisplayName:
 18740 00001A72 1E                      	push	ds			; save TRANGROUP seg addr
 18741 00001A73 8E1E[659C]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 18742                                  	;assume	ds:nothing
 18743 00001A77 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 18744                                  	;;add	si,filename		; DS:SI = ptr to filename
 18745                                  	;add	si,1  ; EntryStruc.filename
 18746                                  	; 08/06/2023
 18747 00001A79 46                      	inc	si
 18748 00001A7A BF[DC9C]                	mov	di,CHARBUF		; ES:DI = ptr to CharBuf
 18749                                  
 18750 00001A7D B90800                  	mov	cx,8
 18751 00001A80 FC                      	cld
 18752 00001A81 F3A4                    	rep	movsb			; move filename to CharBuf
 18753 00001A83 B020                    	mov	al,' '
 18754 00001A85 AA                      	stosb				; add a blank
 18755                                  	;mov	cx,3
 18756                                  	; 08/06/2023
 18757 00001A86 B103                    	mov	cl,3
 18758 00001A88 F3A4                    	rep	movsb			; add extension
 18759 00001A8A 30C0                    	xor	al,al
 18760 00001A8C AA                      	stosb				; add a NULL
 18761                                  
 18762 00001A8D 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 18763                                  	;assume	ds:TRANGROUP
 18764                                  
 18765                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 18766                                  	;;test	word [_Bits],10h
 18767                                  	;test	byte [_Bits],10h
 18768                                  	; 08/06/2023
 18769 00001A8E F606[FD9D]10            	test	byte [_Bits],mask.lcase ; 20h ; MSDOS 6.0
 18770                                  			; 01/08/2024	; 10h ; PCDOS 7.1
 18771 00001A93 7406                    	jz	short dn1		;M010;lowercase not required
 18772 00001A95 BE[DC9C]                	mov	si,CHARBUF		;M010;DS:SI --> ASCIIZ string
 18773 00001A98 E84402                  	call	LowercaseString		;M010;filename.ext string is in CharBuf
 18774                                  dn1:	
 18775 00001A9B C706[129E][DC9C]        	mov	word [string_ptr_2],CHARBUF
 18776 00001AA1 BA[E291]                	mov	dx,string_buf_ptr
 18777                                  	;call	std_printf		; print filename & extension
 18778                                  	;retn
 18779                                  	; 19/02/2023
 18780 00001AA4 E98139                  	jmp	std_printf
 18781                                  
 18782                                  ; ---------------------------------------------------------------------------
 18783                                  
 18784                                  ;***	DisplayNext - move display cursor to next entry position
 18785                                  ;
 18786                                  ;	ENTRY	LeftOnLine = # entries can still be printed on this line
 18787                                  ;		LeftOnPage = # lines can still be printed for this page
 18788                                  ;		FileCnt = # files in this dir displayed before this one
 18789                                  ;		Bits contains /w setting
 18790                                  ;
 18791                                  ;	EXIT	nothing
 18792                                  ;
 18793                                  ;	USED	AX,DX
 18794                                  ;
 18795                                  ;	EFFECTS
 18796                                  ;
 18797                                  ;	  LeftOnLine will be updated to reflect the entry about to be
 18798                                  ;	   displayed.
 18799                                  ;	  LeftOnPage may be updated.
 18800                                  
 18801                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18802                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18803                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18804                                  	
 18805                                  DisplayNext:
 18806 00001AA7 833E[929C]00            	cmp	word [FileCnt],0
 18807 00001AAC 7415                    	je	short dn1st		; 1st file in directory
 18808 00001AAE 803E[8C9C]00            	cmp	byte [LeftOnLine],0
 18809 00001AB3 7E08                    	jng	short dnEol	; jle	; no more room on this line
 18810                                  
 18811                                  ;	We are in wide mode (LeftOnLine is always 0 otherwise) and
 18812                                  ;	we still have room for more on this line.
 18813                                  ;	Tab to next position.
 18814                                  
 18815 00001AB5 BA[F191]                	mov	dx,tab_ptr
 18816 00001AB8 E86D39                  	call	std_printf
 18817 00001ABB EB0C                    	jmp	short dnDone
 18818                                  dnEol:	
 18819                                  ;	Start this entry on a new line.
 18820                                  
 18821 00001ABD E8B70E                  	call	CRLF2		; start on new line
 18822 00001AC0 E8B6FE                  	call	UseLine
 18823                                  dn1st:
 18824 00001AC3 A0[8D9C]                	mov	al,[PerLine]
 18825 00001AC6 A2[8C9C]                	mov	[LeftOnLine],al	; reset # entries left on line
 18826                                  
 18827                                  dnDone:
 18828 00001AC9 FE0E[8C9C]              	dec	byte [LeftOnLine]
 18829                                  				; reflect the entry about to be displayed
 18830 00001ACD C3                      	retn
 18831                                  
 18832                                  ; ---------------------------------------------------------------------------
 18833                                  
 18834                                  ;***	DisplayTheRest - display file size/dir, date, time
 18835                                  ;
 18836                                  ;	ENTRY	BX = offset of entry in TPA buffer
 18837                                  ;		Display cursor is at end of file extension
 18838                                  ;
 18839                                  ;	EXIT	nothing
 18840                                  ;
 18841                                  ;	USED	AX,CX,DX,SI,DI,BP
 18842                                  ;
 18843                                  ;	EFFECTS
 18844                                  ;
 18845                                  ;	  File size, date, & time are displayed.
 18846                                  
 18847                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18848                                  
 18849                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 18850                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1A7Ch
 18851                                  
 18852                                  	; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 18853                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1B47h
 18854                                  
 18855                                  DisplayTheRest:
 18856 00001ACE 06                      	push	es			; save TRANGROUP seg addr
 18857 00001ACF 8E06[659C]              	mov	es,[TPA]		; ES = TPA seg addr
 18858 00001AD3 89DD                    	mov	bp,bx			; BP = offset of entry in TPA
 18859                                  	;;test	es:[bp].fileattr,ATTR_DIRECTORY
 18860                                  	;test	byte [es:bp+EntryStruc.fileattr],10h
 18861 00001AD5 26F6460C10              	test	byte [es:bp+12],ATTR_DIRECTORY
 18862 00001ADA 7425                    	jz	short drNonDir		; not a directory file
 18863                                  
 18864                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18865                                  %if 1
 18866 00001ADC 803E[9D9C]00            	cmp	byte [nocommas],0	; no commas ?
 18867 00001AE1 750C                    	jnz	short dr_2		; yes
 18868 00001AE3 C706[129E][0494]        	mov	word [string_ptr_2],twospacechars ; db "  ",0
 18869 00001AE9 BA[E291]                	mov	dx,string_buf_ptr
 18870 00001AEC E83939                  	call	std_printf
 18871                                  dr_2:
 18872                                  %endif
 18873                                  
 18874                                  ;	For a directory file, display <DIR> instead of size.
 18875                                  
 18876                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18877                                  %if 0
 18878                                  	mov	dx,dmes_ptr
 18879                                  	call	std_printf
 18880                                  	; 08/06/2023
 18881                                  	;jmp	short drCom
 18882                                  
 18883                                  	; 08/06/2023
 18884                                  	; MSDOS 6.22 COMMAND.COM (disassembled source code)
 18885                                  	test    byte [screen_f_1],40h	; 80 columns ?
 18886                                  	jz      short dr_0      	; no
 18887                                  	mov     dx,space_4_ptr		; 4 space chars
 18888                                  	call    std_printf
 18889                                  dr_0:
 18890                                  	jmp	short drCom		; skip to common fields
 18891                                  %else
 18892                                  	; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18893 00001AEF BA[F491]                	mov	dx,dmes_ptr		; MSG_1068
 18894 00001AF2 803E[9F9C]00            	cmp	byte [bfree_not_kilo],0 ; size will be displayed as kilobyte ?
 18895 00001AF7 7403                    	jz	short dr_3		; yes
 18896 00001AF9 BA[F791]                	mov	dx,space_4_ptr		; 4 space chars
 18897                                  dr_3:
 18898 00001AFC E82939                  	call	std_printf
 18899 00001AFF EB2A                    	jmp	short drCom	
 18900                                  %endif
 18901                                  
 18902                                  drNonDir:
 18903                                  ;	For a non-directory file, display file size.
 18904                                  
 18905                                  	;;mov	dx,word ptr es:[bp].filesize
 18906                                  	;mov	dx,[es:bp+EntryStruc.filesize]
 18907 00001B01 268B5611                	mov	dx,[es:bp+17]
 18908 00001B05 8916[0E9E]              	mov	[File_Size_Low],dx
 18909                                  	;;mov	dx,word ptr es:[bp].filesize+2
 18910                                  	;mov	dx,[es:bp+EntryStruc.filesize+2]
 18911 00001B09 268B5613                	mov	dx,[es:bp+19]
 18912 00001B0D 8916[109E]              	mov	[File_Size_High],dx
 18913 00001B11 BA[B891]                	mov	dx,disp_file_size_ptr
 18914                                  
 18915                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18916                                  %if 1
 18917 00001B14 803E[9C9C]00            	cmp	byte [narrow],0
 18918 00001B19 7503                    	jnz	short dr_4		; narrow display
 18919 00001B1B BA[C691]                	mov	dx,disp_file_size_w_ptr	; big file (wide)
 18920                                  dr_4:
 18921 00001B1E 803E[9F9C]00            	cmp	byte [bfree_not_kilo],0
 18922 00001B23 7403                    	jz	short dr_5		; big file
 18923 00001B25 BA[D491]                	mov	dx,disp_file_size_n_ptr ; not big file
 18924                                  dr_5:	
 18925                                  %endif
 18926                                  
 18927 00001B28 E8FD38                  	call	std_printf
 18928                                  drCom:
 18929                                  ;	For all files, display date & time.
 18930                                  
 18931                                  	;;mov	ax,es:[bp].filedate	; AX = date word
 18932                                  	;mov	ax,[es:bp+EntryStruc.filedate]
 18933 00001B2B 268B460F                	mov	ax,[es:bp+15]
 18934                                  
 18935                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18936                                  %if 0
 18937                                  	or	ax,ax			; test for null date (DOS 1.x)
 18938                                  	jz	short drDone		; no date, skip date/time display
 18939                                  %else
 18940 00001B2F 09C0                    	or	ax,ax
 18941 00001B31 7503                    	jnz	short dr_6
 18942 00001B33 E9AA00                  	jmp	drDone
 18943                                  dr_6:
 18944                                  %endif
 18945                                  
 18946 00001B36 89C3                    	mov	bx,ax			; BX = date word
 18947 00001B38 83E01F                  	and	ax,1Fh			; AX = day of month
 18948 00001B3B 88C2                    	mov	dl,al			; DL = day of month
 18949 00001B3D 89D8                    	mov	ax,bx			; AX = date word
 18950 00001B3F B105                    	mov	cl,5
 18951 00001B41 D3E8                    	shr	ax,cl			; shift day out
 18952 00001B43 240F                    	and	al,0Fh			; AL = month
 18953 00001B45 88C6                    	mov	dh,al			; DH = month
 18954 00001B47 88F9                    	mov	cl,bh
 18955 00001B49 D0E9                    	shr	cl,1			; CL = year - 1980
 18956 00001B4B 30ED                    	xor	ch,ch			; CX = year - 1980
 18957                                  
 18958                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18959                                  %if 0
 18960                                  	; MSDOS 5.0-6.22
 18961                                  	add	cx,80			; CX = 2-digit year
 18962                                  	cmp	cl,100
 18963                                  	jb	short dr_1		; not year 2000 yet, skip ahead
 18964                                  	sub	cl,100			; adjust for 21st century
 18965                                  %else
 18966                                  	; PCDOS 7.1
 18967 00001B4D 81C1BC07                	add	cx,1980			; CX = 4-digit year
 18968 00001B51 803E[9E9C]00            	cmp	byte [yeardigit4],0	; 4 digits year display ?
 18969 00001B56 7509                    	jnz	short dr_1		; yes
 18970 00001B58 81E9D007                	sub	cx,2000			; after	year 2000 (21st century)
 18971 00001B5C 7903                    	jns	short dr_1
 18972 00001B5E 83C164                  	add	cx,100			; before year 2000 (20th century)
 18973                                  %endif
 18974                                  
 18975                                  dr_1:	
 18976 00001B61 86F2                    	xchg	dh,dl			; DX = month/day
 18977 00001B63 890E[3592]              	mov	[DirDat_Yr],cx		; move year to msg block
 18978 00001B67 8916[3792]              	mov	[DirDat_Mo_Day],dx	; move month/day to msg block
 18979                                  	;;mov	cx,es:[bp].filetime	; CX = file time
 18980                                  	;mov	cx,[es:bp+EntryStruc.filetime]
 18981 00001B6B 268B4E0D                	mov	cx,[es:bp+13]
 18982 00001B6F E310                    	jcxz	drPrint			; no time field - go print
 18983 00001B71 D1E9                    	shr	cx,1
 18984 00001B73 D1E9                    	shr	cx,1
 18985 00001B75 D1E9                    	shr	cx,1			; CH = hours
 18986 00001B77 D0E9                    	shr	cl,1
 18987 00001B79 D0E9                    	shr	cl,1			; CL = minutes
 18988 00001B7B 86E9                    	xchg	ch,cl			; CX = hr/min
 18989 00001B7D 890E[4092]              	mov	[DirTim_Hr_Min],cx	; move time to msg block
 18990                                  drPrint:
 18991                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 18992                                  %if 1
 18993 00001B81 C706[3092]3504          	mov	word [dirdattim_ptr],1077 ; MSG_1077 (normal)
 18994 00001B87 C606[3A92]A4            	mov	byte [DirDat_form],0A4h   ; Right_Align+DATE_MDY_2
 18995 00001B8C C706[3B92]0A08          	mov	word [DirDat_width],80Ah  ; 10 (max), 8 (min)
 18996 00001B92 803E[9C9C]00            	cmp	byte [narrow],0
 18997 00001B97 750C                    	jnz	short dr_narrow
 18998 00001B99 C706[3092]3304          	mov	word [dirdattim_ptr],1075 ; MSG_1075 (narrow)
 18999 00001B9F 8106[3B92]0202          	add	word [DirDat_width],202h  ; 12 (max), 10 (min)
 19000                                  dr_narrow:
 19001 00001BA5 803E[9E9C]00            	cmp	byte [yeardigit4],0
 19002 00001BAA 740B                    	jz	short dr_7		 ; 2 digits year display
 19003                                  		; 4 digits year display
 19004 00001BAC C606[3A92]B4            	mov	byte [DirDat_form],0B4h  ; Right_Align+DATE_MDY_4
 19005 00001BB1 8106[3B92]0202          	add	word [DirDat_width],202h ; 12 (max), 10 (min)
 19006                                  dr_7:	
 19007                                  %endif
 19008 00001BB7 BA[3092]                	mov	dx,dirdattim_ptr
 19009 00001BBA E86B38                  	call	std_printf		; print date & time
 19010                                  
 19011                                  ; 01/08/2024 - PCDOS 7.1 COMMAND.COM
 19012                                  %if 1
 19013                                  	; restore message data format fields (to the default values)
 19014 00001BBD C706[3092]3504          	mov	word [dirdattim_ptr],1077 ; MSG_1077
 19015 00001BC3 C606[3A92]A4            	mov	byte [DirDat_form],0A4h   ; Right_Align+DATE_MDY_2
 19016 00001BC8 C706[3B92]0A08          	mov	word [DirDat_width],80Ah  ; 10 (max), 8 (min)
 19017 00001BCE C706[3592]0000          	mov	word [DirDat_Yr],0
 19018 00001BD4 C706[3792]0000          	mov	word [DirDat_Mo_Day],0
 19019 00001BDA C706[4092]0000          	mov	word [DirTim_Hr_Min],0
 19020                                  %endif
 19021                                  
 19022                                  drDone:
 19023 00001BE0 07                      	pop	es			; ES = TRANGROUP seg addr again	
 19024 00001BE1 89EB                    	mov	bx,bp			; BX = offset of entry in TPA again
 19025                                  dtrRet:		; 03/08/2024
 19026                                  	; 19/02/2023
 19027 00001BE3 C3                      	retn
 19028                                  
 19029                                  ; ---------------------------------------------------------------------------
 19030                                  ; MSDOS 6.0
 19031                                  
 19032                                  ; 01/08/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 19033                                  %if 0
 19034                                  ;ifdef DBLSPACE_HOOKS
 19035                                  
 19036                                  ;***	DisplayCompRatio - display compression ratio
 19037                                  ;
 19038                                  ;	ENTRY	BX = offset of entry in TPA buffer
 19039                                  ;
 19040                                  ;	EXIT	nothing
 19041                                  ;
 19042                                  ;	USED	AX,CX,DX
 19043                                  ;
 19044                                  ;	EFFECTS
 19045                                  ;
 19046                                  ;	  File compression ratio is displayed.
 19047                                  
 19048                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19049                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1B09h
 19050                                  
 19051                                  DisplayCompRatio: ;proc
 19052                                  	push	es			; save TRANGROUP seg addr
 19053                                  	mov	es,[TPA]		; ES = TPA seg addr
 19054                                  	;;mov	al,es:[bx].compratio
 19055                                  	;mov	al,[es:bx+EntryStruc.compratio]
 19056                                  	mov	al,[es:bx+15h]
 19057                                  	cmp	al,0FFh			; invalid/no compression ratio?
 19058                                  	je	short dcrRet
 19059                                  
 19060                                  	mov	ah,al			; unpack compression ratio
 19061                                  	mov	cl,4
 19062                                  	shr	ah,cl			; isolate whole number portion
 19063                                  	inc	ah			; 0-15 = 1-16
 19064                                  	and	al,0Fh 			; isolate tenths
 19065                                  
 19066                                  	mov	[Dir_CRatio_1],ah
 19067                                  	mov	[Dir_CRatio_2],al
 19068                                  	;mov	dx,offset TRANGROUP:DirCompRatio_Ptr
 19069                                  	;invoke	Std_Printf
 19070                                  	mov	dx,DirCompRatio_Ptr
 19071                                  	call	std_printf	
 19072                                  dcrRet:
 19073                                  	pop	es
 19074                                  dtrRet:		; 08/06/2023
 19075                                  	retn
 19076                                  
 19077                                  ;DisplayCompRatio ;endp
 19078                                  
 19079                                  ;endif
 19080                                  %endif
 19081                                  
 19082                                  ; ---------------------------------------------------------------------------
 19083                                  
 19084                                  ;***	DisplayTrailer - display trailing lines for directory listing
 19085                                  ;
 19086                                  ;	ENTRY	LeftOnPage = # lines left on display page
 19087                                  ;		FileCnt = # files listed
 19088                                  ;		FileSiz = total size of files listed
 19089                                  ;
 19090                                  ;	EXIT	nothing
 19091                                  ;
 19092                                  ;	USED
 19093                                  ;
 19094                                  ;	EFFECTS
 19095                                  ;
 19096                                  ;	  Trailing info lines are displayed
 19097                                  
 19098                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19099                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19100                                  	; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 19101                                  
 19102                                  DisplayTrailer:
 19103                                  	;;;test	Bits,mask bare
 19104                                  	;;test	word [_Bits],8
 19105                                  	;test	byte [_Bits],8
 19106                                  	; 08/06/2023
 19107 00001BE4 F606[FD9D]08            	test	byte [_Bits],mask.bare ; 10h ; MSDOS 6.0
 19108                                  			    ; 02/08/2024 ; 8 ; PCDOS 7.1 	
 19109 00001BE9 75F8                    	jnz	short dtrRet		; /b - don't display trailer
 19110                                  
 19111 00001BEB E8890D                  	call	CRLF2			; start on new line
 19112 00001BEE E888FD                  	call	UseLine
 19113 00001BF1 A1[929C]                	mov	ax,[FileCnt]		; AX = # files found
 19114                                  
 19115                                  ;	DisplayTotals uses this entry point.
 19116                                  ;
 19117                                  DisplayCntSiz:
 19118                                  ;	AX = # files
 19119                                  ;	FileSiz = dword total size of files
 19120                                  
 19121                                  ; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 19122                                  ; PCDOS 7.1 COMMAND.COM
 19123                                  %if 0 
 19124                                  	mov	[Dir_Num],ax		; load # files
 19125                                  	mov	dx,dirmes_ptr		; DX = ptr to message block
 19126                                  	call	std_printf		; "nnn File(s)"
 19127                                  
 19128                                  	mov	dx,bytes_ptr
 19129                                  	call	std_printf		; "nnn bytes",cr,lf
 19130                                  	; 19/02/2023
 19131                                  	;call	UseLine
 19132                                  ;dtrRet:
 19133                                  	;retn
 19134                                  
 19135                                  	; 19/02/2023
 19136                                  	jmp	UseLine
 19137                                  %else
 19138                                  	; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 19139 00001BF4 A3[179E]                	mov	[Dir_Num],ax		; number of files
 19140 00001BF7 8916[199E]              	mov	[Dir_Num+2],dx
 19141 00001BFB BA[1D90]                	mov	dx,dirmes_ptr		; MSG_1019, 9 bytes, word	
 19142 00001BFE 803E[9C9C]00            	cmp	byte [narrow],0		; narrow display ?
 19143 00001C03 7503                    	jnz	short dcs_1		; yes
 19144 00001C05 BA[2B90]                	mov	dx,dirmes_w_ptr		; MSG_1019, 10 bytes
 19145                                  dcs_1:
 19146 00001C08 803E[9F9C]00            	cmp	byte [bfree_not_kilo],0	; is kilobyte display usable?
 19147 00001C0D 7403                    	jz	short dcs_2		; yes (big files)
 19148 00001C0F BA[3990]                	mov	dx,dirmes2_ptr		; MSG_1019, 9 bytes, dword
 19149                                  dcs_2:
 19150 00001C12 E81338                  	call	std_printf		; "nnn File(s)"
 19151 00001C15 8B0E[989C]              	mov	cx,[FileSiz+4]		; 5th and 6th byte of the file size
 19152                                  					; (6th byte=0)
 19153 00001C19 E329                    	jcxz	dcs_3			; file size is (in) 4 bytes
 19154 00001C1B 8B16[979C]              	mov	dx,[FileSiz+3]		; convert to kilobytes
 19155 00001C1F A1[959C]                	mov	ax,[FileSiz+1]
 19156 00001C22 D0CD                    	ror	ch,1			; ch = 5th byte of file size
 19157 00001C24 D1DA                    	rcr	dx,1
 19158 00001C26 D1D8                    	rcr	ax,1
 19159 00001C28 D0CD                    	ror	ch,1
 19160 00001C2A D1DA                    	rcr	dx,1
 19161 00001C2C D1D8                    	rcr	ax,1			; dx:ax = (ch:dx:ax) / 1024
 19162 00001C2E 8916[969C]              	mov	[FileSiz+2],dx
 19163 00001C32 A3[949C]                	mov	[FileSiz],ax
 19164 00001C35 BA[7692]                	mov	dx,kbytes_ptr		; MSG_1107 normal, 14 bytes
 19165 00001C38 803E[9F9C]00            	cmp	byte [bfree_not_kilo],0 ; is kilobyte display usable?
 19166 00001C3D 741C                    	jz	short dcs_5		; yes (big files)
 19167                                  		; no (not big files)
 19168 00001C3F BA[8492]                	mov	dx,kybytes_n_ptr	; MSG_1107 narrow, 10 bytes
 19169 00001C42 EB17                    	jmp	short dcs_5
 19170                                  dcs_3:
 19171 00001C44 BA[4C92]                	mov	dx,bytes_ptr		; MSG_1079 normal, 12 bytes
 19172 00001C47 803E[9C9C]00            	cmp	byte [narrow],0		; narrow display option
 19173 00001C4C 7503                    	jnz	short dcs_4
 19174 00001C4E BA[5A92]                	mov	dx,bytes_w_tr		; MSG_1079 wide, 14 bytes
 19175                                  dcs_4:
 19176 00001C51 803E[9F9C]00            	cmp	byte [bfree_not_kilo],0
 19177 00001C56 7403                    	jz	short dcs_5
 19178 00001C58 BA[6892]                	mov	dx,bytes_n_ptr		; MSG_1079 narrow, 10 bytes
 19179                                  dcs_5:
 19180 00001C5B E8CA37                  	call	std_printf		; "nnn bytes",cr,lf
 19181                                  	;call	UseLine
 19182                                  ;dtrRet:
 19183                                  	;retn
 19184                                  	; 02/08/2024
 19185 00001C5E E918FD                  	jmp	UseLine
 19186                                  %endif
 19187                                  
 19188                                  ; ---------------------------------------------------------------------------
 19189                                  
 19190                                  ;***	DisplayWide - display filename in wide format
 19191                                  ;
 19192                                  ;	ENTRY	BX = offset of entry in TPA buffer
 19193                                  ;
 19194                                  ;	EXIT	nothing
 19195                                  ;
 19196                                  ;	USED	AX,CX,DX,SI,DI
 19197                                  ;
 19198                                  ;	EFFECTS
 19199                                  ;
 19200                                  ;	  Name.ext is displayed. Cursor left at end of field (padded
 19201                                  ;	  with blanks). Subdirectory files are displayed as [name.ext].
 19202                                  
 19203                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19204                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:198Ah
 19205                                  
 19206                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19207                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1CDEh
 19208                                  
 19209                                  DisplayWide:
 19210 00001C61 1E                      	push	ds			; save TRANGROUP seg addr
 19211 00001C62 8E1E[659C]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 19212                                  	;assume	ds:nothing
 19213                                  
 19214                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 19215                                  	;test	byte [bx+EntryStruc.fileattr],10h
 19216 00001C66 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 19217 00001C6A 9C                      	pushf	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19218 00001C6B 7405                    	jz	short dw1		; not a subdirectory file
 19219 00001C6D B05B                    	mov	al,'['
 19220 00001C6F E83A05                  	call	PRINT_CHAR		; prefix subdirectory
 19221                                  dw1:	
 19222 00001C72 E82EFD                  	call	DisplayDotForm		; display name.ext
 19223                                  
 19224                                  ;	DX = # chars displayed in name.ext
 19225                                  
 19226                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 19227                                  	;test	byte [bx+EntryStruc.fileattr],10h
 19228                                  	; 03/08/2024
 19229                                  	;test	byte [bx+12],ATTR_DIRECTORY
 19230 00001C75 9D                      	popf	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19231 00001C76 7405                    	jz	short dw2		; not a subdirectory file
 19232 00001C78 B05D                    	mov	al,']'
 19233 00001C7A E82F05                  	call	PRINT_CHAR		; postfix subdirectory
 19234                                  dw2:
 19235                                  ;	Pad field with blanks.
 19236                                  
 19237                                  	;mov	cx,size filename + size fileext + 1
 19238 00001C7D B90C00                  	mov	cx,12 ; 8+3+1
 19239                                  					; CX = field size
 19240 00001C80 29D1                    	sub	cx,dx			; CX = # pad char's
 19241 00001C82 E307                    	jcxz	dwDone
 19242 00001C84 B020                    	mov	al,' '
 19243                                  dw3:	
 19244 00001C86 E82305                  	call	PRINT_CHAR
 19245 00001C89 E2FB                    	loop	dw3
 19246                                  dwDone:	
 19247 00001C8B 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 19248                                  	;assume	ds:TRANGROUP
 19249 00001C8C C3                      	retn
 19250                                  
 19251                                  ; ---------------------------------------------------------------------------
 19252                                  
 19253                                  ;***	GetDriveLtr - get target drive letter
 19254                                  ;
 19255                                  ;	ENTRY	FCB contains drive #
 19256                                  ;
 19257                                  ;	EXIT	AX = "d:"
 19258                                  ;
 19259                                  ;	USED	nothing
 19260                                  
 19261                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19262                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19D8h
 19263                                  GetDriveLtr:
 19264 00001C8D A05C00                  	mov	al,[FCB] ; 5Ch	; AL = target drive #
 19265 00001C90 08C0                    	or	al,al
 19266 00001C92 7505                    	jnz	short gdl1	; not current drive default, skip ahead
 19267 00001C94 A0[779C]                	mov	al,[CURDRV]	; AL = current drive #
 19268 00001C97 FEC0                    	inc	al		; AL = 1-based drive #
 19269                                  gdl1:	
 19270 00001C99 0440                    	add	al,'A'-1 ; 40h	; AL = target drive letter
 19271 00001C9B B43A                    	mov	ah,':'		; AX = "d:"
 19272 00001C9D C3                      	retn
 19273                                  
 19274                                  ; ---------------------------------------------------------------------------
 19275                                  
 19276                                  ;***	SetupParamError - set up for Std_EPrintf parameter parse error message
 19277                                  ;
 19278                                  ;	Do for our /O and /A string parsers what Parse_With_Msg does
 19279                                  ;	for system parser calls. Set up a message substitution block,
 19280                                  ;	etc. for invalid value strings. I copied the procedure from
 19281                                  ;	Setup_Parse_Error_Msg.
 19282                                  ;
 19283                                  ;	ENTRY	BX = ptr to system parser result buffer (contains ptr to str)
 19284                                  ;		
 19285                                  ;
 19286                                  ;	EXIT	AX = system parser error return code for bad param format
 19287                                  ;		DX = ptr to message description block for Std_EPrintf
 19288                                  ;
 19289                                  ;	USED	SI
 19290                                  ;
 19291                                  ;	EFFECTS
 19292                                  ;
 19293                                  ;	  Msg_Disp_Class = parse error message class
 19294                                  ;	  Message block (see DX) is set up for parse error message
 19295                                  
 19296                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19297                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19E9h
 19298                                  SetupParamError:
 19299 00001C9E B80900                  	mov	ax,9			; parse error #
 19300 00001CA1 C606[D88F]02            	mov	byte [msg_disp_class],parse_msg_class
 19301                                  	;mov	byte [msg_disp_class],2
 19302 00001CA6 A3[DA8F]                	mov	[extend_buf_ptr],ax
 19303                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 19304 00001CA9 8B7704                  	mov	si,[bx+4]
 19305 00001CAC 8936[129E]              	mov	[string_ptr_2],si
 19306 00001CB0 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst
 19307                                  	;mov	byte [extend_buf_sub],1
 19308 00001CB5 BA[DA8F]                	mov	dx,extend_buf_ptr
 19309 00001CB8 C3                      	retn
 19310                                  
 19311                                  ; ---------------------------------------------------------------------------
 19312                                  
 19313                                  ;***	ZeroTotals - zero grand total file count, size
 19314                                  ;
 19315                                  ;	ENTRY	nothing
 19316                                  ;
 19317                                  ;	EXIT	nothing
 19318                                  ;
 19319                                  ;	USED	AX
 19320                                  ;
 19321                                  ;	EFFECTS
 19322                                  ;
 19323                                  ;	  FileCntTotal & FileSizTotal are zeroed.
 19324                                  ;
 19325                                  ;	NOTES
 19326                                  ;
 19327                                  ;	  FileCntTotal throuth csecUsedTotal must be together!
 19328                                  
 19329                                  ; 05/06/2023
 19330                                  ;ifdef DBLSPACE_HOOKS
 19331                                  ;csecSIZE EQU size csecUsed + size csecUsedDir + size csecUsedTotal
 19332                                  ;ccluSIZE EQU size ccluUsed + size ccluUsedDir + size ccluUsedTotal
 19333                                  ;endif
 19334                                  
 19335                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19336                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A13h
 19337                                  
 19338                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 19339                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C08h
 19340                                  
 19341                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19342                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1D67h
 19343                                  ZeroTotals:
 19344 00001CB9 BF[D09C]                	mov	di,FileCntTotal
 19345                                  
 19346                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 19347                                  	;;mov	cx,size FileCntTotal+size FileSizTotal
 19348                                  	;mov	cx,8
 19349                                  	;ifdef DBLSPACE_HOOKS
 19350                                  	;mov	cx,size FileCntTotal+size FileSizTotal+csecSIZE+ccluSIZE
 19351                                  	;endif
 19352                                  	;mov	cx,26
 19353                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19354 00001CBC B90C00                  	mov	cx,12
 19355                                  
 19356 00001CBF 30C0                    	xor	al,al
 19357 00001CC1 F3AA                    	rep	stosb
 19358 00001CC3 C3                      	retn	
 19359                                  
 19360                                  ; ---------------------------------------------------------------------------
 19361                                  
 19362                                  ;***	CtrlCHandler - our own control-c handler
 19363                                  ;
 19364                                  ;	Make sure user's default directory gets restored. See notes
 19365                                  ;	at InstallCtrlCHandler.
 19366                                  ;
 19367                                  ;	ENTRY	control-c
 19368                                  ;
 19369                                  ;	EXIT	to OldCtrlCHandler
 19370                                  ;
 19371                                  ;	USED	DS,flags
 19372                                  ;
 19373                                  ;	EFFECTS
 19374                                  ;
 19375                                  ;	  Restore user's default directory.
 19376                                  ;
 19377                                  ;	NOTES
 19378                                  ;
 19379                                  ;	  This handler is only installed after calling PathCrunch,
 19380                                  ;	  which sets UserDir1, so the restoration will work.
 19381                                  ;
 19382                                  ;	  The original control-c vector will be restored, whether
 19383                                  ;	  or not this one is invoked, in the HeadFix routine.
 19384                                  
 19385                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19386                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A1Eh
 19387                                  
 19388                                  	; 05/06/2023 - Retro DOS v4.2 COMMAND.COM
 19389                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C13h ; *
 19390                                  
 19391                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19392                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1D72h
 19393                                  
 19394                                  CtrlCHandler:	;proc far
 19395                                  
 19396                                  ;SR;
 19397                                  ; Save all registers used: ds, dx, ax. I know ax is being used by the 
 19398                                  ;CtrlC handler, am not sure about ds & dx. Save them to be safe
 19399                                  ;
 19400 00001CC4 1E                      	push	ds
 19401 00001CC5 0E                      	push	cs
 19402 00001CC6 1F                      	pop	ds			; DS = TRANGROUP seg addr
 19403 00001CC7 50                      	push	ax
 19404                                  
 19405                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19406                                  %if 0
 19407                                  	push	bx ; *
 19408                                  	push	dx
 19409                                  	call	CloseCVF ; * 		; close CVF file if open
 19410                                  	call	RestUDir		; restore user's default directory
 19411                                  	pop	dx
 19412                                  	pop	bx ; *
 19413                                  %else
 19414 00001CC8 52                      	push	dx
 19415 00001CC9 E8620B                  	call	RestUDir		; restore user's default directory
 19416 00001CCC 5A                      	pop	dx
 19417                                  %endif
 19418 00001CCD 58                      	pop	ax
 19419 00001CCE 1F                      	pop	ds
 19420 00001CCF 2EFF2E[33A6]            	jmp	far [cs:OldCtrlCHandler]
 19421                                  					; go to previous int 23 handler
 19422                                  
 19423                                  ; ---------------------------------------------------------------------------
 19424                                  
 19425                                  ;M010;start
 19426                                  ;***	LowerCase - convert ASCII character in AL to lowercase
 19427                                  ;
 19428                                  ;	ENTRY	AL = character to be displayed
 19429                                  ;
 19430                                  ;	EXIT	AL is lowercase
 19431                                  ;
 19432                                  ;	USED	nothing
 19433                                  
 19434                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19435                                  LowerCase:
 19436 00001CD4 3C41                    	cmp	al,'A'		; ensure AL is in range 'A'-'Z'
 19437 00001CD6 7206                    	jb	short lcRet
 19438 00001CD8 3C5A                    	cmp	al,'Z'
 19439 00001CDA 7702                    	ja	short lcRet
 19440                                  
 19441 00001CDC 0C20                    	or	al,20h		; convert to ASCII lowercase (UpperCase+32)-->LowerCase
 19442                                  lcRet:
 19443 00001CDE C3                      	retn
 19444                                  
 19445                                  ; ---------------------------------------------------------------------------
 19446                                  
 19447                                  ;***	LowercaseString - convert ASCIIZ string at DS:SI to lowercase
 19448                                  ;
 19449                                  ;	ENTRY	DS:SI points to start of ASCIIZ string
 19450                                  ;		ES = DS
 19451                                  ;
 19452                                  ;	EXIT	nothing
 19453                                  ;	
 19454                                  ;	USED	AL,SI
 19455                                  
 19456                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19457                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 19458                                  LowercaseString:
 19459 00001CDF 57                      	push	di			; save di
 19460 00001CE0 89F7                    	mov	di,si			; ES:DI --> ASCIIZ string
 19461 00001CE2 FC                      	cld
 19462                                  NextChar: 
 19463 00001CE3 AC                      	lodsb				; get character from string into al
 19464 00001CE4 08C0                    	or	al,al			; are we at end of string?
 19465 00001CE6 7414                    	jz	short EndOfString
 19466                                  
 19467                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19468                                  %if 1
 19469                                  ;ifdef DBCS
 19470                                  	;invoke	testkanj
 19471                                  	;jz	@f			; if this is not lead byte
 19472 00001CE8 E8740A                  	call	testkanj
 19473 00001CEB 7409                    	jz	short NextChar_@
 19474 00001CED AA                      	stosb				; store lead byte
 19475 00001CEE AC                      	lodsb				; get tail byte
 19476 00001CEF 08C0                    	or	al,al
 19477 00001CF1 7409                    	jz	short EndOfString	; if end
 19478 00001CF3 AA                      	stosb				; store tail byte
 19479 00001CF4 EBED                    	jmp	short NextChar
 19480                                  ;@@:
 19481                                  NextChar_@:
 19482                                  ;endif
 19483                                  %endif
 19484 00001CF6 E8DBFF                  	call	LowerCase		; convert character to lowercase
 19485 00001CF9 AA                      	stosb				; store character back into buffer
 19486 00001CFA EBE7                    	jmp	short NextChar		; repeat until end of string
 19487                                  
 19488                                  EndOfString:
 19489 00001CFC 5F                      	pop	di			; restore di
 19490 00001CFD C3                      	retn
 19491                                  
 19492                                  ;M010;end
 19493                                  
 19494                                  ; 08/06/2023
 19495                                  ; ---------------------------------------------------------------------------
 19496                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 19497                                  ; -----------------------------------------
 19498                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 19499                                  ; ---------------------------------------------------------------------------
 19500                                  
 19501                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19502                                  %if 0
 19503                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19504                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1C44h
 19505                                  screen_f_set:
 19506                                  	; set dir display parameters depending on screen width (# of columns)
 19507                                  	push	ds
 19508                                  	mov	ax,40h
 19509                                  	mov	ds,ax
 19510                                  	cmp	word [4Ah],40	; Check ROMBIOS DATA colums per row
 19511                                  				; value (80 or 40)
 19512                                  	pop	ds
 19513                                  	jnz	short columns_80 ; 80 columns per line (video mode 3)
 19514                                  	and	byte [screen_f_1],0BFh ; ~40h
 19515                                  	mov	word [screen_f_2],0A0Ah ; 10 bytes (file size field)
 19516                                  	and	byte [screen_f_3],0BFh
 19517                                  	and	byte [screen_f_4],0BFh
 19518                                  	mov	word [screen_f_5],0A0Ah ; 10 bytes (file size field)
 19519                                  	and	byte [screen_f_6],0BFh
 19520                                  	mov	word [screen_f_7],1C1Ch ; 28 bytes (free bytes field)
 19521                                  	;jmp	short screen_f_set_retn
 19522                                  	retn
 19523                                  columns_80:
 19524                                  	or	byte [screen_f_1],40h
 19525                                  	mov	word [screen_f_2],0E0Eh ; 14 bytes (file size field)
 19526                                  	or	byte [screen_f_3],40h
 19527                                  	or	byte [screen_f_4],40h
 19528                                  	mov	word [screen_f_5],0E0Eh ; 14 bytes (file size field)
 19529                                  	or	byte [screen_f_6],40h
 19530                                  	mov	word [screen_f_7],2020h ; 32 bytes (free bytes field)
 19531                                  screen_f_set_retn:
 19532                                  	retn
 19533                                  %endif
 19534                                  
 19535                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 19536                                  %if 0
 19537                                  
 19538                                  ;============================================================================
 19539                                  ; CRATIO.ASM, MSDOS 6.0, 1992
 19540                                  ;============================================================================
 19541                                  ; 08/06/2023 - Retro DOS v4.2
 19542                                  
 19543                                  ; The code to calculate compression ratios requires access to the drive's
 19544                                  ; (DOS) FAT and MagicDrv FAT regions.  Two buffers are used (one for each
 19545                                  ; FAT type).  pbufDOSFAT and pbufMDFAT contain the offset to the buffers,
 19546                                  ; segFATBuf contains the segment (both buffers are in the same segment).
 19547                                  ; The buffers are of variable size: cFATEntries contains the size of the
 19548                                  ; buffers in terms of the number of FAT entries they can contain.
 19549                                  
 19550                                  ; ---------------------------------------------------------------------------
 19551                                  
 19552                                  ;***	OpenCVF - open Compressed Volume File for compression ratio report
 19553                                  ;
 19554                                  ;	ENTRY
 19555                                  ;		FCB setup with drive for DIR
 19556                                  ;
 19557                                  ;	EXIT	If successful, CY clear, CVF file open, fhCVF has file handle,
 19558                                  ;		szCVF has \0 terminated CVF file name, MDBPB loaded.
 19559                                  ;
 19560                                  ;		If unsuccessful, CY set
 19561                                  ;
 19562                                  ;	USED	AX, BX, CX, DX, SI, DI
 19563                                  
 19564                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 19565                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1CA1h
 19566                                  OpenCVF:
 19567                                  	mov	ax,-1
 19568                                  	mov	[fhCVF],ax		;indicate CVF not open
 19569                                  	mov	[entInBuf],ax		;  and no FAT entries in buffers
 19570                                  
 19571                                  	mov	dl,[FCB] ; mov dl,5Ch	;target drive of DIR cmd
 19572                                  	or	dl,dl			;default drive?
 19573                                  	jz	short ocvf_default
 19574                                  	dec	dl			;no, from 1=A to 0=A
 19575                                  	jmp	short ocvf_swap_info
 19576                                  
 19577                                  ocvf_default:
 19578                                  	mov	dl,[CURDRV]		;0=A, 1=B, ...
 19579                                  
 19580                                  ocvf_swap_info:
 19581                                  	mov	ax,4A11h ; multMagicDrv	;magicdrv Int 2Fh multiplex ID
 19582                                  	mov	bx,1	 ; MD_DRIVE_MAP	;get drive swap info
 19583                                  	int	2fh
 19584                                  
 19585                                  	or	ax,ax			;0 if okay
 19586                                  	jnz	short ocvf_error
 19587                                  
 19588                                  	test	bl,80h 			;80h set if compressed volume
 19589                                  	jz	short ocvf_error
 19590                                  
 19591                                  	and	bl,7Fh 			;bl = host drive, bh = seq #
 19592                                  
 19593                                  	; The CVF may have been mounted from a swapped host drive, in which
 19594                                  	; case the host drive returned in BL is the original host (now
 19595                                  	; swapped with a CVF).	Make a second drive swap info call on the
 19596                                  	; returned host to see if it must be accessed by a different drive
 19597                                  	; letter.
 19598                                  
 19599                                  	push	bx
 19600                                  	push	dx			;save dl, orig drive letter
 19601                                  
 19602                                  	mov	ax,4A11h ; mov ax,multMagicDrv
 19603                                  	mov	dl,bl
 19604                                  	mov	bx,1	 ; mov bx,MD_DRIVE_MAP
 19605                                  	int	2fh
 19606                                  
 19607                                  	pop	dx
 19608                                  	pop	cx			;bx from 1st drive swap info call
 19609                                  
 19610                                  	or	ax,ax			;0 if okay
 19611                                  	jnz	short ocvf_error
 19612                                  
 19613                                  	and	bl,7Fh
 19614                                  	xchg	bx,cx			;bx = 1st, cx = 2nd swap results
 19615                                  
 19616                                  	cmp	dl,cl			;2nd swap info call return orig drive?
 19617                                  	je	short ocvf_got_host	;yes, 1st swap info call returned host
 19618                                  
 19619                                  	mov	bl,cl			;no, use swapped host, orig seq #
 19620                                  ocvf_got_host:
 19621                                  	; Build the filename of the Compressed Volume File
 19622                                  
 19623                                  	;mov	di,offset TRANGROUP:szCVF
 19624                                  					;CVF name buffer
 19625                                  	mov	di,szCVF
 19626                                  
 19627                                  	mov	al,bl
 19628                                  	add	al,'A'
 19629                                  	mov	ah,':'
 19630                                  	cld
 19631                                  	stosw				; drive:
 19632                                  
 19633                                  	;mov	si,offset TRANGROUP:sCVFRoot
 19634                                  					; \name.
 19635                                  	mov	si,sCVFRoot	; "\DBLSPACE"
 19636                                  	;mov	cx,cbCVFRoot
 19637                                  	mov	cx,10
 19638                                  	rep	movsb
 19639                                  
 19640                                  	add	di,3			; point past extension
 19641                                  	xor	al,al
 19642                                  	std
 19643                                  	stosb				; null terminate
 19644                                  
 19645                                  	mov	al,bh			; seq #
 19646                                  	mov	bl,10
 19647                                  	;mov	cx,3			; 3 digit ext/seq #
 19648                                  	mov	cl,3
 19649                                  ;@@:
 19650                                  ocvf_1:	xor	ah,ah			; convert seq # to ascii
 19651                                  	div	bl			;   and store as CVF extension
 19652                                  	add	ah,'0'
 19653                                  	xchg	ah,al
 19654                                  	stosb
 19655                                  	mov	al,ah
 19656                                  	;loop	@b
 19657                                  	loop	ocvf_1
 19658                                  
 19659                                  	cld
 19660                                  
 19661                                  	; Now open the Compressed Volume File
 19662                                  
 19663                                  	; 08/06/2023
 19664                                  	; MSDOS 6.22 COMMAND.COM code only !
 19665                                  	;;;
 19666                                  	mov	di,szCVF ; *
 19667                                  	mov	word [di+4],5652h ; 'RV' (DRVSPACE)
 19668                                  	mov	ax,3D00h
 19669                                  	;mov	dx,szCVF
 19670                                  	mov	dx,di ; *
 19671                                  	int	21h     ; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 19672                                  			; DS:DX -> ASCIZ filename
 19673                                  			; AL = access mode
 19674                                  			; 0 - read
 19675                                  	jnb     short ocvf_2
 19676                                  	mov	word [di+4],4C42h ; 'BL' (DBLSPACE)
 19677                                  	;;;
 19678                                  
 19679                                  	;mov	ax,(OPEN shl 8) or 00h 	;compatibility mode/read access
 19680                                  	mov	ax,3D00h
 19681                                  	;;mov	dx,offset TRANGROUP:szCVF
 19682                                  	;mov	dx,szCVF
 19683                                  	mov	dx,di ; *
 19684                                  	int	21h
 19685                                  	;jc	short ocvf_error
 19686                                  	; 18/06/2023
 19687                                  	jnc	short ocvf_2
 19688                                  ocvf_error:	; 18/06/2023
 19689                                  	stc				;indicate failure
 19690                                  	retn
 19691                                  ocvf_2:
 19692                                  	mov	[fhCVF],ax		; success, save CVF file handle
 19693                                  
 19694                                  	; Read the extended MagicDrv BPB
 19695                                  
 19696                                  	mov	bx,ax
 19697                                  	;mov	ah,READ
 19698                                  	mov	ah,3Fh
 19699                                  	;mov	cx,size MD_BPB
 19700                                  	mov	cx,64
 19701                                  	;mov	dx,offset TRANGROUP:MDBPB
 19702                                  	mov	dx,MDBPB
 19703                                  	int	21h
 19704                                  	jc	short ocvf_error1
 19705                                  
 19706                                  	cmp	ax,cx			; get it all?
 19707                                  	je	short ocvf_pick_cluster_size
 19708                                  					; yes...
 19709                                  ocvf_error1:
 19710                                  	call	CloseCVF
 19711                                  	; 18/06/2023
 19712                                  ;ocvf_error:
 19713                                  	stc				;indicate failure
 19714                                  	;jmp	short ocvf_ret
 19715                                  	retn
 19716                                  
 19717                                  	; Determine the cluster size to use for ratio calculation
 19718                                  
 19719                                  ocvf_pick_cluster_size:
 19720                                  	cmp	byte [fUseHostSize],0 	; user want Host drive cluster size?
 19721                                  	je	short ovcf_use_CVF_size	; no, use CVF cluster size
 19722                                  
 19723                                  	;mov	ah,Get_Drive_Data	; get the host drive cluster size
 19724                                  	mov	ah,1Ch
 19725                                  	mov	dl,[szCVF]
 19726                                  	;sub	dl,40h	
 19727                                  	sub	dl,'A'-1		; 1 = A, 2 = B, ...
 19728                                  	push	ds
 19729                                  	int	21h
 19730                                  	pop	ds
 19731                                  
 19732                                  	cmp	al,0FFh			; host drive cluster size in AL if okay,
 19733                                  	jne	short ovcf_set_size	;   failed = 0FFh
 19734                                  
 19735                                  ovcf_use_CVF_size:
 19736                                  	;mov	al,[MDBPB.dos_bpb.csecPerClu]
 19737                                  	mov	al,[MDBPB+0Dh]		; using CVF cluster size
 19738                                  
 19739                                  ovcf_set_size:
 19740                                  	mov	[csecPerCluster],al
 19741                                  
 19742                                  	; Lastly, setup the FAT buffers
 19743                                  ocvf_set_buf:
 19744                                  	mov	ax,[BYTCNT]		; if >= 32k TPA space available,
 19745                                  	mov	[savBytCnt],ax		;   setup larger FAT buffers
 19746                                  	cmp	ax,32*1024  ; 8000h
 19747                                  	jae	short ocvf_big_buf
 19748                                  
 19749                                  	; small TPA, use small resident buffers
 19750                                  
 19751                                  	;mov	word ptr [cFATEntries],cRES_FAT_ENTRIES
 19752                                  	mov	word [cFATEntries],32 ; cRES_FAT_ENTRIES
 19753                                  	mov	[segFATBuf],ds
 19754                                  	;mov	word ptr [pbufDOSFAT],offset TRANGROUP:bufDOSFAT
 19755                                  	;mov	word ptr [pbufMDFAT],offset TRANGROUP:bufMDFAT
 19756                                  	mov	word [pbufDOSFAT],bufDOSFAT
 19757                                  	mov	word [pbufMDFAT],bufMDFAT
 19758                                  	;jmp	short ocvf_success
 19759                                  	; 08/06/2023
 19760                                  	; cf = 1
 19761                                  	clc
 19762                                  	retn
 19763                                  
 19764                                  ocvf_big_buf:
 19765                                  	;mov	bx,cBIG_FAT_ENTRIES
 19766                                  	mov	bx,256
 19767                                  	mov	[cFATEntries],bx
 19768                                  
 19769                                  	shl	bx,1			; 6 bytes per entry (2 for DOS FAT, 4 MD FAT)
 19770                                  	mov	cx,bx			; entries * 2
 19771                                  	shl	bx,1
 19772                                  	add	bx,cx			; bx = # entries * 6
 19773                                  
 19774                                  	sub	ax,bx			; reduce TPA size by size of FAT buffers
 19775                                  	and	ax,0FE00h		; init code rounds BytCnt down to multiple of
 19776                                  	mov	[BYTCNT],ax		;   512 bytes -- a no-op with some buf sizes.
 19777                                  
 19778                                  	mov	bx,[TPA]		; buffers in the TPA
 19779                                  	mov	[segFATBuf],bx
 19780                                  	mov	[pbufDOSFAT],ax		; DOS FAT buffer offset
 19781                                  	add	ax,cx			;   + DOS FAT buffer size
 19782                                  	mov	[pbufMDFAT],ax 		;   = MD FAT buffer offset
 19783                                  	; 08/06/2023
 19784                                  	; cf = 0
 19785                                  ;ocvf_success:
 19786                                  	;clc				;indicate success
 19787                                  ocvf_ret:
 19788                                  	retn
 19789                                  
 19790                                  ; ---------------------------------------------------------------------------
 19791                                  
 19792                                  ;***	CloseCVF - close Compressed Volume File
 19793                                  ;
 19794                                  ;	ENTRY	fhCVF has file handle
 19795                                  ;
 19796                                  ;	EXIT
 19797                                  ;
 19798                                  ;	USED	AX, BX, CX, DX
 19799                                  
 19800                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 19801                                  CloseCVF:
 19802                                  	mov	bx,[fhCVF]		; -1 unless file is open
 19803                                  	cmp	bx,-1 ; 0FFFFh
 19804                                  	je	short ccvf_ret
 19805                                  
 19806                                  	;mov	ah,CLOSE
 19807                                  	mov	ah,3Eh
 19808                                  	int	21h
 19809                                  
 19810                                  	mov	word [fhCVF],-1 ; 0FFFFh ; don't try to close again
 19811                                  
 19812                                  	mov	ax,[savBytCnt]		; 'deallocate' DOS & MD FAT buffers
 19813                                  	mov	[BYTCNT],ax		;   by restoring old TPA byte count
 19814                                  ccvf_ret:
 19815                                  	retn
 19816                                  
 19817                                  ; ---------------------------------------------------------------------------
 19818                                  
 19819                                  ;***	CalcCompRatio - calculate file compression ratio
 19820                                  ;
 19821                                  ;	ENTRY	AX = starting cluster of file to get compression ratio of
 19822                                  ;
 19823                                  ;	EXIT	AX = compression ratio.  Example: a ratio of 2.7 to 1.0
 19824                                  ;		     will return AH = 02h & AL = 07h
 19825                                  ;		ccluUsed set to # DOS clusters used by file
 19826                                  ;		csecUsed set to # compressed sectors used by file
 19827                                  ;		ccluUsedDir, ccluUsedTotal, csecUsedDir, csecUsedTotal updated
 19828                                  ;	USED	none
 19829                                  
 19830                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 19831                                  CalcCompRatio:
 19832                                  	push	bx
 19833                                  	push	cx
 19834                                  	push	dx
 19835                                  	push	es
 19836                                  	mov	es,[segFATBuf]		; es is pointer to FAT buffers
 19837                                  	;assume	es:nothing
 19838                                  
 19839                                  	xor	bx,bx			; zero count of sectors & clusters used
 19840                                  	mov	[ccluUsed],bx
 19841                                  	mov	[csecUsed],bx
 19842                                  	mov	[csecUsed+2],bx
 19843                                  ccr_next:
 19844                                  	cmp	ax,2			; sanity check the DOS FAT value
 19845                                  	jb	short ccr_screwy
 19846                                  
 19847                                  	cmp	ax,0FFF0h		; end of file?
 19848                                  	jae	short ccr_eof
 19849                                  
 19850                                  	call	CheckFATBuffers 	; make sure buffers contain target
 19851                                  	jc	short ccr_screwy	;   FAT entries
 19852                                  
 19853                                  	call	GetMDFATEntry		; returns corresponding entry in BX:CX
 19854                                  	jc	short ccr_screwy
 19855                                  
 19856                                  	shl	bx,1			; used bit to CY
 19857                                  	jnc	short ccr_screwy	; better be used!
 19858                                  
 19859                                  	mov	ch,bh			; save uncompressed count
 19860                                  
 19861                                  	shl	bx,1			; get count into position
 19862                                  	and	bx,0F00h		; bh = count of compressed sectors used
 19863                                  	xchg	bh,bl			; bx = count
 19864                                  	inc	bx			; 0 - 15 means 1 - 16 used
 19865                                  
 19866                                  	add	[csecUsed],bx
 19867                                  	adc	word [csecUsed+2],0
 19868                                  
 19869                                  	mov	dx,ax			; save cluster # in dx
 19870                                  
 19871                                  	mov	al,ch			; uncompressed count to al
 19872                                  	mov	cl,3
 19873                                  	shr	al,cl			; get uncompressed count into position
 19874                                  	and	ax,000Fh		; ax = uncompressed count (0 - 15)
 19875                                  	dec	bx			; bx = compressed count (0 - 15)
 19876                                  	cmp	ax,bx			; if the compressed cnt > uncompressed
 19877                                  	;jae	@f			;   fudge a little and use the larger
 19878                                  	jae	short ccr_1 ; jnb
 19879                                  	mov	ax,bx
 19880                                  ;@@:	
 19881                                  ccr_1:
 19882                                  	mov	cl,[csecPerCluster]	; round up to the number of clusters
 19883                                  	xor	ch,ch			;   required for uncompressed
 19884                                  	add	ax,cx			;   sectors
 19885                                  	div	cl
 19886                                  	xor	ah,ah
 19887                                  	add	[ccluUsed],ax
 19888                                  
 19889                                  	mov	ax,dx			; restore cluster #
 19890                                  	call	GetDOSFATEntry		; retuns next DOS FAT entry in AX
 19891                                  	;jc	short ccr_screwy
 19892                                  	;jmp	short ccr_next
 19893                                  	; 08/06/2023
 19894                                  	jnc	short ccr_next
 19895                                  ccr_screwy:
 19896                                  	xor	ax,ax			; something screwy happened, set
 19897                                  					;   ratio to 0.0 and exit
 19898                                  ccr_ret:
 19899                                  	pop	es
 19900                                  	pop	dx
 19901                                  	pop	cx
 19902                                  	pop	bx
 19903                                  	retn
 19904                                  
 19905                                  	; Reached the end-of-file, now calculate the ratio as the
 19906                                  	; number of DOS sectors used / number of compressed sectors used.
 19907                                  
 19908                                  ccr_eof:
 19909                                  	mov	ax,[ccluUsed]
 19910                                  	add	[ccluUsedDir],ax	; update cluster used totals
 19911                                  	add	[ccluUsedTotal],ax
 19912                                  
 19913                                  	mov	cx,[csecUsed+2]
 19914                                  	mov	bx,[csecUsed]		; cx:bx = # compressed sectors used
 19915                                  
 19916                                  	add	[csecUsedDir],bx	; update sector used totals
 19917                                  	adc	[csecUsedDir+2],cx
 19918                                  	add	[csecUsedTotal],bx
 19919                                  	adc	[csecUsedTotal+2],cx
 19920                                  
 19921                                  	call	ComputeRatio		; ax=clusters used, cx:bx=sectors used
 19922                                  
 19923                                  	jmp	short ccr_ret
 19924                                  
 19925                                  	; 08/06/2023
 19926                                  ;ccr_screwy:
 19927                                  ;	xor	ax,ax			; something screwy happened, set
 19928                                  ;					;   ratio to 0.0 and exit
 19929                                  ;ccr_ret:
 19930                                  ;	pop	es
 19931                                  ;	pop	dx
 19932                                  ;	pop	cx
 19933                                  ;	pop	bx
 19934                                  ;	retn
 19935                                  
 19936                                  ; ---------------------------------------------------------------------------
 19937                                  
 19938                                  ;***	ComputeRatio - calculate ratio of compressed sectors used to
 19939                                  ;		       (would be) DOS sectors used
 19940                                  ;
 19941                                  ;	Entry
 19942                                  ;		AX = DOS clusters used, cx:bx = compressed sectors used
 19943                                  ;	Exit
 19944                                  ;		ah = whole portion, al = tenths
 19945                                  ;
 19946                                  ;	Used	BX, CX, DX
 19947                                  
 19948                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 19949                                  ComputeRatio:
 19950                                  	push	si
 19951                                  	push	di
 19952                                  
 19953                                  	mov	si,bx
 19954                                  	mov	di,cx			; save cx:bx in di:si
 19955                                  
 19956                                  	mov	bl,[csecPerCluster]
 19957                                  	xor	bh,bh
 19958                                  	mul	bx			; dx:ax = # DOS sectors used
 19959                                  	mov	bx,si			; restore bx
 19960                                  
 19961                                  	call	Div32			; dx:ax = quotient, cx:bx = remainder
 19962                                  
 19963                                  	push	ax			; save quotient
 19964                                  
 19965                                  	mov	ax,bx			; if no remainder, tenths will be 0
 19966                                  	or	ax,cx			;   which is in AX so skip following
 19967                                  	jz	short cr_got_tenths	;   (happens frequently)
 19968                                  
 19969                                  	; Multiply the reminder by 10, add half the divisor so result is
 19970                                  	; rounded up, and divide again to get tenths digit
 19971                                  
 19972                                  	mov	ax,cx
 19973                                  	xor	dx,dx
 19974                                  	mov	cx,bx
 19975                                  	mov	bx,10
 19976                                  	mul	bx
 19977                                  	xchg	ax,cx
 19978                                  	mul	bx
 19979                                  	add	dx,cx			; dx:ax = remainder * 10
 19980                                  
 19981                                  	mov	cx,di
 19982                                  	mov	bx,si
 19983                                  	shr	cx,1
 19984                                  	rcr	bx,1			; cx:bx = 1/2 divisor
 19985                                  	add	ax,bx
 19986                                  	adc	dx,cx			; dx:ax = remainder * 10 + 1/2 divisor
 19987                                  
 19988                                  	mov	cx,di
 19989                                  	mov	bx,si
 19990                                  
 19991                                  	call	Div32
 19992                                  
 19993                                  cr_got_tenths:
 19994                                  	pop	bx			; original quotient
 19995                                  	mov	ah,bl
 19996                                  
 19997                                  	cmp	al,10			; if the tenths rounded up to the
 19998                                  	jb	short cr_exit 		;   next whole number, adjust the
 19999                                  					;   whole number part and 0 the
 20000                                  	inc	ah			;   tenths  (i.e. round 1.97 to 2.0)
 20001                                  	xor	al,al
 20002                                  cr_exit:
 20003                                  	pop	di
 20004                                  	pop	si
 20005                                  
 20006                                  	retn
 20007                                  
 20008                                  ; --------------------------------------------------------------------------- 
 20009                                  
 20010                                  ;***	Div32 - 32 bit divide for computing ratios
 20011                                  ;
 20012                                  ;	Entry	DX:AX = dividend, CX:BX = divisor
 20013                                  ;
 20014                                  ;	Exit	DX:AX = quotient, CX:BX = reminder
 20015                                  
 20016                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 20017                                  Div32:
 20018                                  	jcxz	d32_16bit		; differently if 16bit divisor
 20019                                  
 20020                                  	push	si
 20021                                  	push	di
 20022                                  
 20023                                  	; Brute force divide by subtraction. This is okay because worse case
 20024                                  	; the dividend will only be 16 times greater, and typically about 2
 20025                                  	; times
 20026                                  
 20027                                  	xor	si,si
 20028                                  	mov	di,si			; di:si is quotient
 20029                                  ;@@:
 20030                                  div32_1:
 20031                                  	sub	ax,bx			; subtract divisor
 20032                                  	sbb	dx,cx
 20033                                  	jc	short d32_too_far
 20034                                  
 20035                                  	add	si, 1			; accumulate quotient
 20036                                  	adc	di, 0
 20037                                  	;jmp	short @b
 20038                                  	jmp	short div32_1
 20039                                  
 20040                                  d32_too_far:
 20041                                  	add	ax,bx			; fix the last subtraction
 20042                                  	adc	dx,cx
 20043                                  
 20044                                  	mov	cx,di
 20045                                  	mov	bx,si			; dx:ax = remainder, cx:bx = quoient
 20046                                  
 20047                                  	xchg	ax,bx
 20048                                  	xchg	dx,cx			; dx:ax = quoient, cx:bx = remainder
 20049                                  
 20050                                  	pop	di
 20051                                  	pop	si
 20052                                  
 20053                                  	retn
 20054                                  
 20055                                  d32_16bit:
 20056                                  	div	bx			; divide dx:ax by bx
 20057                                  
 20058                                  	mov	bx,dx			; remainder to cx:bx
 20059                                  	xor	dx,dx			; quotient to dx:ax
 20060                                  	mov	cx,dx
 20061                                  	retn
 20062                                  
 20063                                  ; --------------------------------------------------------------------------- 
 20064                                  
 20065                                  ;***	GetDOSFATEntry - returns next cluster in file's FAT chain
 20066                                  ;
 20067                                  ;	Entry	AX = current cluster number
 20068                                  ;		ES = segment of FAT buffer
 20069                                  ;		Entry should be in FAT buffer
 20070                                  ;
 20071                                  ;	Exit	AX = next cluster number
 20072                                  ;		CY set if error
 20073                                  ;
 20074                                  ;	Uses	BX
 20075                                  
 20076                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20077                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1EF2h
 20078                                  GetDOSFATEntry:
 20079                                  	sub	ax,[entInBuf]		; calc entry # in buffer
 20080                                  	jc	short gdf_ret 		; CY already set for error
 20081                                  
 20082                                  	mov	bx,ax
 20083                                  
 20084                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 20085                                  	cmp	byte [MDBPB+3Dh],0
 20086                                  	jnz	short gdf_12		; go do 12
 20087                                  
 20088                                  	shl	bx,1			; offset = entry * 2
 20089                                  	add	bx,[pbufDOSFAT]
 20090                                  	mov	ax,[es:bx]
 20091                                  	; 08/06/2023
 20092                                  	; cf = 0
 20093                                  ;gdf_success:
 20094                                  	;clc				; success
 20095                                  gdf_ret:
 20096                                  	retn
 20097                                  
 20098                                  gdf_12:
 20099                                  	shr	bx,1
 20100                                  	add	bx,ax			; offset to entry = entry * 1.5
 20101                                  	add	bx,[pbufDOSFAT]
 20102                                  
 20103                                  ;	ES:BX points to the word containing the desired 12 bit FAT entry.
 20104                                  ;	For odd entries, the upper 12 bits are valid, for even entries
 20105                                  ;	the low 12 bits are valid.  odd: OOOx  even: xEEE
 20106                                  
 20107                                  	test	al,1			; is current entry odd?
 20108                                  
 20109                                  	mov	ax,[es:bx]		; word with FAT entry
 20110                                  	jnz	short gdf_odd
 20111                                  
 20112                                  	and	ax,0FFFh		; keep low 12 bits for even
 20113                                  	jmp	short gdf_testEOF
 20114                                  
 20115                                  gdf_odd:
 20116                                  	mov	bx,cx			; (save cx in bx)
 20117                                  	mov	cl,4
 20118                                  	shr	ax,cl			; upper 12 bits for odd
 20119                                  	mov	cx,bx			; (restore cx)
 20120                                  
 20121                                  gdf_testEOF:
 20122                                  	cmp	ax,0FF0h		; valid entry?
 20123                                  	;jb	short gdf_success
 20124                                  	cmc	; cf = 1 <--> cf = 0
 20125                                  	jnc	short gdf_ret	
 20126                                  
 20127                                  	or	ah,0F0h			; caller expects 16 bit special values
 20128                                  	;jmp	short gdf_success
 20129                                  	; cf = 0
 20130                                  	retn
 20131                                  
 20132                                  ; --------------------------------------------------------------------------- 
 20133                                  
 20134                                  ;***	GetMDFATEntry - returns requested MD FAT entry
 20135                                  ;
 20136                                  ;	Entry	AX = current DOS cluster number
 20137                                  ;		ES = segment of FAT buffer
 20138                                  ;		Entry should be in FAT buffer
 20139                                  ;
 20140                                  ;	Exit	BX:CX = corresponding MD FAT entry
 20141                                  ;		CY set if error
 20142                                  ;
 20143                                  ;	Uses	None
 20144                                  
 20145                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 20146                                  GetMDFATEntry:
 20147                                  	mov	bx,ax
 20148                                  	sub	bx,[entInBuf]		; calc entry # in buffer
 20149                                  	jc	short gmf_ret 		; CY already set for error return
 20150                                  
 20151                                  	shl	bx,1
 20152                                  	shl	bx,1			; * 4 bytes per MDFAT entry
 20153                                  
 20154                                  	add	bx,[pbufMDFAT]
 20155                                  	mov	cx,[es:bx]
 20156                                  	mov	bx,[es:bx+2]
 20157                                  
 20158                                  	clc
 20159                                  gmf_ret:
 20160                                  	retn
 20161                                  
 20162                                  ; --------------------------------------------------------------------------- 
 20163                                  
 20164                                  ;***	CheckFATBuffers - check that target FAT entry is in FAT buffers.  If
 20165                                  ;			  not, fill the buffers starting with the requested
 20166                                  ;			  entry.
 20167                                  ;
 20168                                  ;	ENTRY	AX = FAT entry #
 20169                                  ;		ES = segment of FAT buffers
 20170                                  ;
 20171                                  ;	EXIT	FAT buffers contain target entry, or CY set if error
 20172                                  ;		entInBuf updated
 20173                                  ;
 20174                                  ;	USED	BX
 20175                                  
 20176                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20177                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1F4Bh
 20178                                  
 20179                                  CheckFATBuffers:
 20180                                  	mov	bx,ax
 20181                                  	sub	bx,[entInBuf]
 20182                                  	jb	short cfb_load_fat
 20183                                  
 20184                                  	sub	bx,[cFATEntries]
 20185                                  	jae	short cfb_load_fat ; jnb
 20186                                  
 20187                                  	clc
 20188                                  	retn
 20189                                  
 20190                                  	; Desired entry isn't in the FAT buffers, reload the buffers to
 20191                                  	; include it
 20192                                  
 20193                                  cfb_load_fat:
 20194                                  	push	ax
 20195                                  	push	cx
 20196                                  	push	dx
 20197                                  
 20198                                  	; Start with the DOS FAT buffer
 20199                                  
 20200                                  	xor	cx,cx			; zero high offset to FAT file position
 20201                                  
 20202                                  	;cmp	MDBPB.f12BitFAT, 0	; 12 or 16 bit FAT?
 20203                                  	cmp	byte [MDBPB+3Dh],0
 20204                                  	jnz	short cfb_12		; go do 12
 20205                                  
 20206                                  	mov	[entInBuf],ax		; this entry is first
 20207                                  
 20208                                  	shl	ax,1			; 2 bytes per cluster #
 20209                                  	rcl	cx,1			; cx:ax = offset to FAT entry
 20210                                  
 20211                                  	jmp	short cfb_common
 20212                                  
 20213                                  cfb_12:
 20214                                  	;and	al,not 1 ; 0FEh		; start with even # entry
 20215                                  	and	al,~1
 20216                                  	mov	[entInBuf],ax
 20217                                  
 20218                                  	mov	bx,ax
 20219                                  	shr	bx,1
 20220                                  	add	ax,bx			; ax = offset to FAT entry
 20221                                  					;      (entry # * 1.5)
 20222                                  cfb_common:
 20223                                  	mov	bx,ax			; cx:bx = offset to FAT entry
 20224                                  
 20225                                  	;mov	ax,[MDBPB.csecMDReserved] ; # magicDrv reserved sectors
 20226                                  	mov	ax,[MDBPB+27h]
 20227                                  	;add	ax,[MDBPB.dos_bpb.csecReserved]
 20228                                  	add	ax,[MDBPB+0Eh]
 20229                                  
 20230                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 20231                                  	mul	word [MDBPB+0Bh]	; DX:AX = DOS FAT file origin
 20232                                  	add	ax,bx
 20233                                  	adc	dx,cx			; DX:AX = file offset to read from
 20234                                  
 20235                                  	mov	cx,[cFATEntries]	; size to read
 20236                                  	shl	cx,1
 20237                                  	mov	bx,[pbufDOSFAT]		; es:bx = location to read
 20238                                  
 20239                                  	call	ReadCVFile
 20240                                  	jc	short cfb_error
 20241                                  
 20242                                  	; Now read the corresponding MagicDrv FAT entries
 20243                                  
 20244                                  	;mov	ax,[MDBPB.secMDFATStart]
 20245                                  	mov	ax,[MDBPB+24h]
 20246                                  	inc	ax
 20247                                  	;mul	word [MDBPB.dos_bpb.cbPerSec]
 20248                                  	mul	word [MDBPB+0Bh]	; DX:AX = MDFAT file offset
 20249                                  
 20250                                  	mov	bx,[entInBuf]
 20251                                  	xor	cx,cx			; CX:BX = 32 bit cluster #
 20252                                  	;add	bx,[MDBPB.cluFirstData]
 20253                                  	add	bx,[MDBPB+2Dh]
 20254                                  	adc	cx,cx			; CX:BX = MDFAT entry #
 20255                                  
 20256                                  	shl	bx,1
 20257                                  	rcl	cx,1
 20258                                  	shl	bx,1
 20259                                  	rcl	cx,1			; * 4 bytes per MDFAT entry
 20260                                  
 20261                                  	add	ax,bx
 20262                                  	adc	dx,cx			; DX:AX = file offset of MDFAT entry
 20263                                  
 20264                                  	mov	cx,[cFATEntries]
 20265                                  	shl	cx,1
 20266                                  	shl	cx,1			; size to read
 20267                                  	mov	bx,[pbufMDFAT]		; es:bx = location to read into
 20268                                  
 20269                                  	call	ReadCVFile
 20270                                  	;jnc	short cfb_ret ; cf = 0 ; 08/06/2023
 20271                                  	; 08/06/2023
 20272                                  	; cf = 1
 20273                                  cfb_error:
 20274                                  	;stc
 20275                                  cfb_ret:
 20276                                  	pop	dx
 20277                                  	pop	cx
 20278                                  	pop	ax
 20279                                  	retn
 20280                                  
 20281                                  ; --------------------------------------------------------------------------- 
 20282                                  
 20283                                  ;***	ReadCVFile - read from the Compressed Volume File
 20284                                  ;
 20285                                  ;	Entry	DX:AX file offset, ES:BX buffer location, CX length in bytes
 20286                                  ;
 20287                                  ;	Exit	CY set if error, else data read
 20288                                  ;
 20289                                  ;	Uses	AX, BX, CX, DX
 20290                                  
 20291                                  	; 08/06/2023 - Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 20292                                  ReadCVFile:
 20293                                  	push	bx			; save buffer loc
 20294                                  	push	cx			; save read length
 20295                                  
 20296                                  	mov	cx,dx
 20297                                  	mov	dx,ax			; cx:dx = file offset of fat entry
 20298                                  	;mov	ax,(LSEEK shl 8) or 0
 20299                                  	mov	ax,4200h
 20300                                  	mov	bx,[fhCVF]
 20301                                  	int	21h
 20302                                  	jc	short rcf_ret 		; CY set for error return
 20303                                  
 20304                                  	;mov	ah,READ
 20305                                  	mov	ah,3Fh
 20306                                  	pop	cx			; read length
 20307                                  	pop	dx			; buffer loc offset
 20308                                  	push	ds
 20309                                  	push	es
 20310                                  	pop	ds			; buffer loc segment
 20311                                  	int	21h
 20312                                  	pop	ds
 20313                                  	jc	short rcf_ret 		; CY set for error return
 20314                                  
 20315                                  	cmp	ax,cx			; read it all?
 20316                                  	;je	short rcf_ret 		; yes, CY clear
 20317                                  	; 08/06/2023	
 20318                                  	; ax < cx
 20319                                  	;stc				; end-of-file?
 20320                                  rcf_ret:
 20321                                  	retn
 20322                                  
 20323                                  %endif
 20324                                  
 20325                                  ;============================================================================
 20326                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 20327                                  ;============================================================================
 20328                                  ; 09/10/2018 - Retro DOS v3.0
 20329                                  
 20330                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1195h
 20331                                  
 20332                                  ; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20333                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1A4Ah
 20334                                  
 20335                                  ; =============== S U B	R O U T	I N E =======================================
 20336                                  
 20337                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20338                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:1FF4h
 20339                                  
 20340                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20341                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1DCCh
 20342                                  PAUSE:
 20343 00001CFE BA[A790]                	mov	dx,PAUSEMES_PTR ; 19/02/2023
 20344 00001D01 E82437                  	call	std_printf
 20345 00001D04 E85BE9                  	call	GETKEYSTROKE
 20346                                  	;call	CRLF2
 20347                                  	;retn
 20348                                  	; 19/02/2023
 20349 00001D07 E96D0C                  	jmp	CRLF2
 20350                                  
 20351                                  ; ---------------------------------------------------------------------------
 20352                                  
 20353                                  ;****************************************************************
 20354                                  ;*
 20355                                  ;* ROUTINE:	DEL/ERASE - erase file(s)
 20356                                  ;*
 20357                                  ;* FUNCTION:	PARSE command line for file or path name and /P
 20358                                  ;*		and invoke PATHCRUNCH. If an error occurs, set
 20359                                  ;*		up an error message and transfer control to CERROR.
 20360                                  ;*		Otherwise, transfer control to NOTEST2 if /P not
 20361                                  ;*		entered or SLASHP_ERASE if /P entered.
 20362                                  ;*
 20363                                  ;* INPUT:	command line at offset 81H
 20364                                  ;*
 20365                                  ;* OUTPUT:	if no error:
 20366                                  ;*		FCB at 5ch set up with filename(s) entered
 20367                                  ;*		Current directory set to entered directory
 20368                                  ;*
 20369                                  ;****************************************************************
 20370                                  
 20371                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20372                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A57h
 20373                                  
 20374                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20375                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2001h
 20376                                  
 20377                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20378                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1DD9h
 20379                                  ERASE:
 20380                                  	; MSDOS 6.0
 20381                                  
 20382                                  	;assume	ds:trangroup,es:trangroup
 20383                                  
 20384 00001D0A BE8100                  	mov	si,81h		;AC000; get command line
 20385 00001D0D C706[7B9C]0000          	mov	word [COMSW],0 	;AN000; clear switch indicator
 20386 00001D13 BF[9E96]                	mov	di,PARSE_ERASE
 20387                                  				;AN000; Get address of PARSE_ERASE
 20388 00001D16 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20389                                  erase_scan:
 20390 00001D18 31D2                    	xor	dx,dx		;AN000;
 20391 00001D1A E83C08                  	call	Parse_With_Msg	;AC018; call parser
 20392                                  	
 20393                                  	;cmp	ax,-1  ; 0FFFFh
 20394                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 20395                                  	;je	short good_line	;AN000; yes - done parsing
 20396                                  	;;cmp	ax,0
 20397                                  	;;cmp	ax,RESULT_NO_ERROR ; 0
 20398                                  	;and	ax,ax		;AC000; did we have an error?
 20399                                  	;jnz	short errj2	;AC000; yes exit
 20400                                  	; 10/06/2023
 20401 00001D1D 40                      	inc	ax  ; cmp ax,-1
 20402 00001D1E 743C                    	jz	short good_line ; 0FFFFh -> 0
 20403 00001D20 48                      	dec	ax  ; cmp ax,0	
 20404 00001D21 7566                    	jnz	short errj2  ; 1 -> 0
 20405                                  	; ax = 0
 20406                                  
 20407 00001D23 813E[5DA6][1196]        	cmp	word [PARSE1_SYN],SLASH_P_SYN ; "/P"
 20408                                  				;AN000; was /P entered?
 20409 00001D29 741C                    	je	short set_erase_prompt
 20410                                  				;AN000; yes - go set prompt
 20411                                  ;
 20412                                  ; Must be filespec since no other matches occurred. move filename to srcbuf
 20413                                  ;
 20414 00001D2B 56                      	push	si		;AC000; save position in line
 20415 00001D2C C536[5FA6]              	lds	si,[PARSE1_ADDR]
 20416                                  				;AC000; get address of filespec
 20417                                  	;cmp	byte [si+1],colon_char
 20418 00001D30 807C013A                	cmp	byte [si+1],':'	;AC000; drive specified?
 20419 00001D34 750B                    	jne	short erase_drive_ok
 20420                                  				;AC000; no - continue
 20421                                  	;cmp	byte [si+2],END_OF_LINE_OUT	
 20422 00001D36 807C0200                	cmp	byte [si+2],0	;AC000; was only drive entered?
 20423 00001D3A 7505                    	jne	short erase_drive_ok
 20424                                  				;AC000; no - continue
 20425 00001D3C B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2 
 20426                                  				;AN022; get message number in control block
 20427 00001D3F EB3D                    	jmp	short extend_setup
 20428                                  				;AC000; exit
 20429                                  erase_drive_ok:
 20430 00001D41 E89213                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 20431 00001D44 5E                      	pop	si		;AC000; get position back
 20432 00001D45 EBD1                    	jmp	short erase_scan
 20433                                  				;AN000; continue parsing
 20434                                  set_erase_prompt:
 20435 00001D47 833E[7B9C]00            	cmp	word [COMSW],0 	;AN018; was /P already entered?
 20436 00001D4C 7408                    	jz	short ok_to_set_erase_prompt
 20437                                  				;AN018; no go set switch
 20438                                  	;mov	ax,1
 20439 00001D4E B80100                  	mov	ax,MoreArgs_Ptr 
 20440                                  				;AN018; set up too many arguments
 20441 00001D51 E81408                  	call	setup_parse_error_msg
 20442                                  				;AN018; set up an error message
 20443 00001D54 EB33                    	jmp	short errj2	;AN018; exit
 20444                                  
 20445                                  ok_to_set_erase_prompt: 	;AN018;
 20446 00001D56 FF06[7B9C]              	inc	word [COMSW]	;AN000; indicate /p specified
 20447 00001D5A EBBC                    	jmp	short erase_scan
 20448                                  				;AN000; continue parsing
 20449                                  good_line:			;G  We know line is good
 20450 00001D5C E8C10C                  	call	PathCrunch
 20451 00001D5F 730D                    	jnc	short checkdr
 20452 00001D61 A1[A49F]                	mov	ax,[Msg_Numb]	;AN022; get message number
 20453                                  	;cmp	ax,0		;AN022; was message flag set?
 20454 00001D64 09C0                    	or	ax,ax
 20455 00001D66 7516                    	jnz	short extend_setup
 20456                                  				;AN022; yes - print out message
 20457                                  	;cmp	byte [DestIsDir],0
 20458 00001D68 3806[299E]              	cmp	[DestIsDir],al 	; No CHDIRs worked
 20459 00001D6C 750D                    	jnz	short badpath_err
 20460                                  				;AC022; see if they should have
 20461                                  checkdr:
 20462 00001D6E 833E[7B9C]00            	cmp	word [COMSW],0 	;AN000; was /p specified
 20463 00001D73 7403                    	jz	short notest2j	;AN000; no - go to notest2
 20464 00001D75 E9FD1B                  	jmp	slashp_erase	;AN000; yes - go to slashp_erase
 20465                                  notest2j:
 20466 00001D78 E9951B                  	jmp	notest2
 20467                                  
 20468                                  badpath_err:			;AN022; "Path not found" message
 20469 00001D7B B80300                  	mov	ax,ERROR_PATH_NOT_FOUND ; 3
 20470                                  				;AN022; set up error number
 20471                                  extend_setup:			;AN022;
 20472                                  	;mov	byte [msg_disp_class],1
 20473 00001D7E C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class
 20474                                  				;AN022; set up extended error msg class
 20475 00001D83 BA[DA8F]                	mov	dx,extend_buf_ptr
 20476                                  				;AC022; get extended message pointer
 20477 00001D86 A3[DA8F]                	mov	[extend_buf_ptr],ax
 20478                                  				;AN022; get message number in control block
 20479                                  errj2:				;AC022; exit jump
 20480 00001D89 E9980F                  	jmp	cerror		;AN022;
 20481                                  
 20482                                  ; ---------------------------------------------------------------------------
 20483                                  
 20484                                  ; ****************************************************************
 20485                                  ; *
 20486                                  ; * ROUTINE:	 CRENAME - rename file(s)
 20487                                  ; *
 20488                                  ; * FUNCTION:	 PARSE command line for one full filespec and one
 20489                                  ; *		 filename. Invoke PATHCRUNCH on the full filespec.
 20490                                  ; *		 Make sure the second filespec only contains a
 20491                                  ; *		 filename. If both openands are valid, attempt
 20492                                  ; *		 to rename the file.
 20493                                  ; *
 20494                                  ; * INPUT:	 command line at offset 81H
 20495                                  ; *
 20496                                  ; * OUTPUT:	 none
 20497                                  ; *
 20498                                  ; ****************************************************************
 20499                                  
 20500                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20501                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20502                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20503                                  CRENAME:
 20504                                  	; MSDOS 6.0
 20505                                  	;assume	ds:trangroup,es:trangroup
 20506                                  
 20507 00001D8C BE8100                  	mov	si,81h		;AC000; Point to command line
 20508 00001D8F BF[2097]                	mov	di,PARSE_RENAME
 20509                                  				;AN000; Get address of PARSE_RENAME
 20510 00001D92 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20511 00001D94 31D2                    	xor	dx,dx		;AN000;
 20512 00001D96 E8C007                  	call	Parse_With_Msg	;AC018; call parser
 20513                                  	;cmp	ax,RESULT_NO_ERROR ; 0
 20514 00001D99 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 20515                                  ;	jz	short crename_no_parse_error
 20516                                  				;AC000; no - continue
 20517 00001D9B 752C                    	jnz	short crename_parse_error
 20518                                  				;AC000; Yes, fail. (need long jump)
 20519                                  ;
 20520                                  ;  Get first file name returned from parse into our buffer
 20521                                  ;
 20522                                  crename_no_parse_error:
 20523 00001D9D 56                      	push	si		;AN000; save position in line
 20524 00001D9E C536[5FA6]              	lds	si,[PARSE1_ADDR]
 20525                                  				;AN000; get address of filespec
 20526 00001DA2 E83113                  	call    Move_To_SrcBuf	;AN000; move to srcbuf
 20527 00001DA5 5E                      	pop	si		;AN000; restore position in line
 20528                                  
 20529 00001DA6 31D2                    	xor	dx,dx		;AN000; clear dx
 20530 00001DA8 E8AE07                  	call	Parse_With_Msg	;AC018; call parser
 20531                                  	;cmp	ax,RESULT_NO_ERROR
 20532 00001DAB 21C0                    	and	ax,ax ; 0 ?	;AN000; did we have an error?
 20533 00001DAD 751A                    	jnz	short crename_parse_error
 20534                                  				;AN000; Yes, fail.
 20535                                  ;
 20536                                  ;  Check the second file name for drive letter colon
 20537                                  ;
 20538 00001DAF 56                      	push	si		;AN000; save position in line
 20539 00001DB0 C536[5FA6]              	lds	si,[PARSE1_ADDR]
 20540                                  				;AC000; get address of path
 20541                                  	;mov	al,':'		;AC000;
 20542                                  	;cmp	[si+1],al	;AC000; Does the 2nd parm have a drive spec?
 20543 00001DB4 807C013A                	cmp	byte [si+1],':'
 20544 00001DB8 7511                    	jnz	short ren_no_drive
 20545                                  				;AN000; Yes, error
 20546                                  	;mov	byte [msg_disp_class],2
 20547 00001DBA C606[D88F]02            	mov	byte [msg_disp_class],parse_msg_class
 20548                                  				;AN000; set up parse error msg class
 20549 00001DBF BA[DA8F]                	mov	dx,extend_buf_ptr
 20550                                  				;AC000; get extended message pointer
 20551                                  	;mov	word [extend_buf_ptr],0Ah
 20552 00001DC2 C706[DA8F]0A00          	mov	word [extend_buf_ptr],BadParm_Ptr
 20553                                  				;AN000; get "Invalid parameter" message number
 20554 00001DC8 5E                      	pop	si		;AN000;
 20555                                  crename_parse_error:		;AC022;
 20556 00001DC9 EB64                    	jmp	short errj	;AC000;
 20557                                  
 20558                                  ;  Get second file name returned from parse into the fCB. Save
 20559                                  ;  character after file name so we can later check to make sure it
 20560                                  ;  isn't a path character.
 20561                                  
 20562                                  ren_no_drive:
 20563 00001DCB BF6C00                  	mov	di,FCB+10h ; 6Ch
 20564                                  				;AC000; set up to parse second file name
 20565                                  	;mov	ax,(Parse_File_Descriptor SHL 8) OR 01H ;AC000;
 20566 00001DCE B80129                  	mov	ax,2901h
 20567 00001DD1 CD21                    	int	21h		;AC000; do the function
 20568 00001DD3 AC                      	lodsb			;AC000; Load char after filename
 20569 00001DD4 A2[219E]                	mov	[One_Char_Val],al
 20570                                  				;AN000; save char after filename
 20571 00001DD7 5E                      	pop	si		;AN000; get line position back
 20572                                  ;
 20573                                  ; We have source and target. See if any args beyond.
 20574                                  ;
 20575 00001DD8 BF[2097]                	mov	di,PARSE_RENAME
 20576                                  				;AC000; get address of parse_rename
 20577 00001DDB E86507                  	call	parse_check_eol ;AC000; are we at end of line?
 20578 00001DDE 75E9                    	jnz	short crename_parse_error
 20579                                  				;AN000; no, fail.
 20580 00001DE0 E83D0C                  	call	PathCrunch
 20581 00001DE3 BA[EB8F]                	mov	dx,BADCPMES_PTR
 20582 00001DE6 74A1                    	jz	short errj2	; If 1st parm a dir, print error msg
 20583 00001DE8 730F                    	jnc	short notest3
 20584 00001DEA A1[A49F]                	mov	ax,[Msg_Numb]	;AN022; get message number
 20585                                  	;cmp	ax,0		;AN022; was message flag set?
 20586 00001DED 21C0                    	and	ax,ax ; 0 ?
 20587 00001DEF 758D                    	jnz	short extend_setup
 20588                                  				;AN022; yes - print out message
 20589                                  	;cmp	byte [DestIsDir],0
 20590 00001DF1 3806[299E]              	cmp	[DestIsDir],al	; No CHDIRs worked
 20591 00001DF5 7402                    	jz	short notest3 	; see if they should have
 20592 00001DF7 EB82                    	Jmp	badpath_err	;AC022; set up error
 20593                                  notest3:
 20594 00001DF9 A0[219E]                	mov	al,[One_Char_Val]
 20595                                  				;AN000; move char into AX
 20596 00001DFC BA[0C90]                	mov	dx,INORNOT_PTR 
 20597                                  				; Load invalid fname error ptr
 20598 00001DFF E8100C                  	call	pathchrcmp	; Is the char in al a path sep?
 20599 00001E02 742B                    	jz	short errj	; Yes, error - 2nd arg must be
 20600                                  				;  filename only.
 20601                                  	;mov	ah,FCB_Rename
 20602 00001E04 B417                    	mov	ah,17h
 20603 00001E06 BA5C00                  	mov	dx,FCB ; 5Ch
 20604 00001E09 CD21                    	int	21h
 20605 00001E0B 3CFF                    	cmp	al,0FFh		; Did an error occur??
 20606 00001E0D 7506                    	jne	short renameok
 20607                                  
 20608 00001E0F E83702                  	call	get_ext_error_number
 20609                                  				;AN022; get extended error
 20610 00001E12 50                      	push	ax		;AC022; Save results
 20611 00001E13 B0FF                    	mov	al,0FFh		; Restore original error state
 20612                                  renameok:
 20613 00001E15 50                      	push	ax
 20614 00001E16 E8150A                  	call	RestUDir
 20615 00001E19 58                      	pop	ax
 20616 00001E1A FEC0                    	inc	al
 20617                                  	;;retnz
 20618                                  	;jz	short rn1
 20619                                  	;retn	
 20620 00001E1C 7514                    	jnz	short ret56
 20621                                  rn1:
 20622 00001E1E 58                      	pop	ax		;AC022; get the error number back
 20623 00001E1F 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2 
 20624                                  				;AN022; error file not found?
 20625 00001E22 7408                    	je	short use_renerr
 20626                                  				;AN022; yes - use generic error message
 20627 00001E24 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5 
 20628                                  				;AN022; error file not found?
 20629 00001E27 7403                    	je	short use_renerr
 20630                                  				;AN022; yes - use generic error message
 20631 00001E29 E952FF                  	jmp	extend_setup	;AN022; need long jump - use extended error
 20632                                  
 20633                                  use_renerr:
 20634 00001E2C BA[E88F]                	mov	dx,RENERR_PTR	;AC022;
 20635                                  errj:
 20636 00001E2F E9F20E                  	jmp	cerror
 20637                                  ret56:
 20638                                  ;typefil_ret:	; 20/02/2023 ; 17/04/2023
 20639 00001E32 C3                      	retn
 20640                                  
 20641                                  ; ---------------------------------------------------------------------------
 20642                                  
 20643                                  ;****************************************************************
 20644                                  ;*
 20645                                  ;* ROUTINE:	TYPEFIL - Display the contents of a file to the
 20646                                  ;*		standard output device
 20647                                  ;*
 20648                                  ;* SYNTAX:	TYPE filespec
 20649                                  ;*
 20650                                  ;* FUNCTION:	If a valid filespec is found, read the file until
 20651                                  ;*		1Ah and display the contents to STDOUT.
 20652                                  ;*
 20653                                  ;* INPUT:	command line at offset 81H
 20654                                  ;*
 20655                                  ;* OUTPUT:	none
 20656                                  ;*
 20657                                  ;****************************************************************
 20658                                  
 20659                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20660                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20661                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20662                                  TYPEFIL:
 20663                                  	; MSDOS 6.0	
 20664                                  	;assume	ds:trangroup,es:trangroup
 20665                                  
 20666 00001E33 BE8100                  	mov	si,81h
 20667 00001E36 BF[8C96]                	mov	di,PARSE_MRDIR
 20668                                  				;AN000; Get address of PARSE_MRDIR
 20669 00001E39 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20670 00001E3B 31D2                    	xor	dx,dx		;AN000;
 20671 00001E3D E81907                  	call	Parse_With_Msg	;AC018; call parser
 20672                                  	;cmp	ax,RESULT_NO_ERROR
 20673 00001E40 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 20674 00001E42 751E                    	jnz	short typefil_parse_error
 20675                                  				;AN000; yes - issue error message
 20676                                  
 20677 00001E44 56                      	push	si		;AC000; save position in line
 20678 00001E45 C536[5FA6]              	lds	si,[PARSE1_ADDR]
 20679                                  				;AC000; get address of filespec
 20680 00001E49 E88A12                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 20681 00001E4C 5E                      	pop	si		;AC000; get position back
 20682 00001E4D BF[8C96]                	mov	di,PARSE_MRDIR
 20683                                  				;AC000; get address of parse_mrdir
 20684 00001E50 E8F006                  	call	parse_check_eol ;AC000; are we at end of line?
 20685                                  	;jz	short gottarg 	;AC000; yes - continue
 20686                                  	; 20/02/2023
 20687                                  ;typefil_parse_error:		;AN000; no - set up error message and exit
 20688                                  	;jmp	cerror
 20689 00001E53 750D                    	jnz	short typefil_parse_error
 20690                                  gottarg:
 20691 00001E55 E8C510                  	call	SETPATH
 20692 00001E58 F606[2D9E]02            	test	byte [DestInfo],00000010b ; 2
 20693                                  				; Does the filespec contain wildcards
 20694 00001E5D 7406                    	jz	short nowilds 	; No, continue processing
 20695 00001E5F BA[0C90]                	mov	dx,INORNOT_PTR	; Yes, report error
 20696                                  	; 20/02/2023
 20697                                  typefil_parse_error:
 20698 00001E62 E9BF0E                  	jmp	cerror
 20699                                  nowilds:
 20700                                  	;mov	ax,ExtOpen SHL 8 ;AC000; open the file
 20701 00001E65 B8006C                  	mov	ax,6C00h
 20702                                  	;mov	bx,read_open_mode ; 0
 20703                                  				;AN000; get open mode for TYPE
 20704 00001E68 31C9                    	xor	cx,cx		;AN000; no special files
 20705 00001E6A 89CB                    	mov	bx,cx ; 20/02/2023
 20706 00001E6C BA0101                  	mov	dx,101h
 20707                                  	;mov	dx,read_open_flag ; 101h
 20708                                  				;AN000; set up open flags
 20709 00001E6F BE[919E]                	mov	si,SrcBuf	;AN030; get file name
 20710                                  	;int	21h
 20711                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20712 00001E72 E845E7                  	call	int_21h_indirect
 20713 00001E75 7313                    	jnc	short typecont	; If open worked, continue. Otherwise load
 20714                                  
 20715                                  typerr: 			;AN022;
 20716 00001E77 0E                      	push	cs		;AN022; make sure we have local segment
 20717 00001E78 1F                      	pop	ds		;AN022;
 20718 00001E79 E8BD01                  	call	Set_Ext_Error_Msg ;AN022;
 20719 00001E7C C706[129E][919E]        	mov	word [string_ptr_2],SrcBuf 
 20720                                  				;AC022; get address of failed string
 20721                                  	;mov	byte [extend_buf_sub],1
 20722 00001E82 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst
 20723                                  				;AC022; put number of subst in control block
 20724 00001E87 E99A0E                  	jmp	cerror		;AC022; exit
 20725                                  
 20726                                  typecont:
 20727 00001E8A 89C3                    	mov	bx,ax		;AC000; get Handle
 20728                                  ;M043
 20729                                  ; We should do the LSEEK for filesize only if this handle belongs to a file
 20730                                  ;and not if it belongs to a device. If device, set TypeFilSiz+2 to -1 to
 20731                                  ;indicate it is a device.
 20732                                  ;
 20733                                  	;mov	ax,(IOCTL shl 8) or 0
 20734 00001E8C B80044                  	mov	ax,4400h
 20735                                  	;int	21h
 20736                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20737 00001E8F E828E7                  	call	int_21h_indirect
 20738                                  
 20739 00001E92 F6C280                  	test	dl,80h		;is it a device?
 20740 00001E95 7408                    	jz	short not_device
 20741                                  				;no, a file
 20742                                  
 20743                                  	;mov	word [TypeFilSiz+2],-1 ; 0FFFFh
 20744                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20745 00001E97 C706[109E]FFFF          	mov	word [File_Size_High],-1 ; 0FFFFh
 20746                                  				;indicate it is a device
 20747 00001E9D EB19                    	jmp	short dotype
 20748                                  not_device:
 20749                                  ;SR;
 20750                                  ; Find the filesize by seeking to the end and then reset file pointer to
 20751                                  ;start of file
 20752                                  
 20753                                  	;mov	ax,(LSEEK shl 8) or 2
 20754 00001E9F B80242                  	mov	ax,4202h
 20755 00001EA2 31D2                    	xor	dx,dx
 20756 00001EA4 89D1                    	mov	cx,dx		;seek  to end of file
 20757                                  	;int	21h
 20758                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20759 00001EA6 E811E7                  	call	int_21h_indirect
 20760                                  
 20761                                  	;mov	[TypeFilSiz],ax
 20762                                  	;mov	[TypeFilSiz+2],dx ;store filesize
 20763                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20764 00001EA9 A3[0E9E]                	mov	[File_Size_Low],ax
 20765 00001EAC 8916[109E]              	mov	[File_Size_High],dx
 20766                                  
 20767                                  	;mov	ax,(LSEEK shl 8) or 0
 20768 00001EB0 B80042                  	mov	ax,4200h
 20769 00001EB3 31D2                    	xor	dx,dx
 20770                                  	;int	21h	        ;reset file pointer to start
 20771                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20772 00001EB5 E802E7                  	call	int_21h_indirect
 20773                                  dotype:				;M043
 20774 00001EB8 C606[559F]00            	mov	byte [zflag],0 	; Reset ^Z flag
 20775 00001EBD 8E1E[659C]              	mov	ds,[TPA]
 20776 00001EC1 31D2                    	xor	dx,dx
 20777                                  	;ASSUME	DS:NOTHING
 20778                                  typelp:
 20779 00001EC3 2E803E[559F]00          	cmp	byte [cs:zflag],0
 20780                                  				;AC050; Is the ^Z flag set?
 20781                                  	;retnz			; Yes, return
 20782                                  	; 17/04/2023
 20783 00001EC9 7401                    	jz	short tf1
 20784 00001ECB C3                      	retn
 20785                                  tf1:
 20786 00001ECC 2E8B0E[859C]            	mov	cx,[cs:BYTCNT]	;AC056; No, continue
 20787                                  
 20788                                  ;Update the filesize left to read
 20789                                  
 20790                                  	;cmp	word [cs:TypeFilSiz+2],-1
 20791                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20792 00001ED1 2E833E[109E]FF          	cmp	word [cs:File_Size_High],-1 ; 0FFFFh
 20793                                  				;is it a device? M043
 20794 00001ED7 7431                    	je	short typ_read	;yes, just read from it; M043
 20795                                  
 20796                                  	;cmp	word [cs:TypeFilSiz+2],0
 20797                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20798 00001ED9 2E833E[109E]00          	cmp	word [cs:File_Size_High],0
 20799                                  				;more than 64K left?
 20800 00001EDF 740D                    	jz	short lt64k	;no, do word subtraction
 20801                                  	;sub	[cs:TypeFilSiz],cx
 20802                                  	;sbb	word [cs:TypeFilSiz+2],0
 20803                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20804 00001EE1 2E290E[0E9E]            	sub	[cs:File_Size_Low],cx
 20805 00001EE6 2E831E[109E]00          	sbb	word [cs:File_Size_High],0
 20806                                  				;update filesize
 20807 00001EEC EB1C                          	jmp	short typ_read	;do the read
 20808                                  lt64k:
 20809                                  	;cmp	cx,[cs:TypeFilSiz]
 20810                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20811 00001EEE 2E3B0E[0E9E]            	cmp	cx,[cs:File_Size_Low]
 20812                                  				;readsize <= buffer?
 20813 00001EF3 7610                    	jbe	short gtbuf	; yes, just update readsize
 20814                                  
 20815                                  ;Buffer size is larger than bytes to read
 20816                                  
 20817                                  	;mov	cx,[cs:TypeFilSiz]
 20818                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20819 00001EF5 2E8B0E[0E9E]            	mov	cx,[cs:File_Size_Low]
 20820 00001EFA E364                    	jcxz	typelp_ret
 20821                                  	;mov	word [cs:TypeFilSiz],0
 20822                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20823 00001EFC 2EC706[0E9E]0000        	mov	word [cs:File_Size_Low],0
 20824 00001F03 EB05                    	jmp	short typ_read
 20825                                  gtbuf:
 20826                                  	;sub	[cs:TypeFilSiz],cx
 20827                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20828 00001F05 2E290E[0E9E]            	sub	 [cs:File_Size_Low],cx
 20829                                  				;update filesize remaining
 20830                                  typ_read:
 20831                                  	;mov	ah,read
 20832 00001F0A B43F                    	mov	ah,3Fh
 20833                                  	;int	21h
 20834                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20835 00001F0C E8ABE6                  	call	int_21h_indirect
 20836 00001F0F 7303                    	jnc	short tf2	;M043
 20837 00001F11 E963FF                  	jmp	typerr		;M043
 20838                                  tf2:				;M043
 20839                                  ;M043;	jc	typerr		;AN022; Exit if error
 20840                                  
 20841 00001F14 89C1                    	mov	cx,ax
 20842 00001F16 E348                    	jcxz	typelp_ret	;AC000; exit if nothing read
 20843 00001F18 1E                      	push	ds
 20844 00001F19 07                      	pop	es		; Check to see if a ^Z was read.
 20845                                  	;assume es:nothing
 20846 00001F1A 31FF                    	xor	di,di
 20847 00001F1C 50                      	push	ax
 20848 00001F1D B01A                    	mov	al,1Ah
 20849 00001F1F F2AE                    	repnz	scasb
 20850 00001F21 58                      	pop	ax
 20851 00001F22 91                      	xchg	ax,cx
 20852                                  	;cmp	ax,0
 20853 00001F23 21C0                    	and	ax,ax
 20854 00001F25 7506                    	jnz	short foundz	; Yes, handle it
 20855 00001F27 807DFF1A                	cmp	byte [di-1],1Ah	; No, double check
 20856 00001F2B 750A                    	jnz	short typecont2	; No ^Z, continue
 20857                                  foundz:
 20858 00001F2D 29C1                    	sub	cx,ax		; Otherwise change cx so that only those
 20859 00001F2F 49                      	dec	cx		;  bytes up to but NOT including the ^Z
 20860 00001F30 0E                      	push	cs		;  will be typed.
 20861 00001F31 07                      	pop	es
 20862                                  	;assume es:trangroup
 20863 00001F32 26F616[559F]            	not	byte [es:zflag]	; Turn on ^Z flag so that the routine
 20864                                  typecont2:			;  will quit after this write.
 20865 00001F37 53                      	push	bx
 20866 00001F38 BB0100                  	mov	bx,1
 20867                                  	;mov	ah,Write
 20868 00001F3B B440                    	mov	ah,40h
 20869                                  	;int	21h
 20870                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20871 00001F3D E87AE6                  	call	int_21h_indirect
 20872 00001F40 5B                      	pop	bx
 20873 00001F41 720C                    	jc	short Error_outputj
 20874 00001F43 39C8                    	cmp	ax,cx
 20875 00001F45 7503                    	jnz	short tf3	;M043
 20876 00001F47 E979FF                  	jmp	typelp		;M043
 20877                                  tf3:				;M043
 20878                                  ;M043;	jz	short typelp
 20879 00001F4A 49                      	dec	cx
 20880 00001F4B 39C8                    	cmp	ax,cx
 20881                                  	;;retz			; One less byte OK (^Z)
 20882                                  	;jnz	short Error_outputj
 20883                                  ;tf4:
 20884                                  	;retn
 20885 00001F4D 7411                    	jz	short typelp_ret ; 20/02/2023
 20886                                  
 20887                                  Error_outputj:
 20888 00001F4F BB0100                  	mov	bx,1
 20889                                  	;mov	ax,IOCTL SHL 8
 20890 00001F52 B80044                  	mov	ax,4400h
 20891                                  	;int	21h
 20892                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20893 00001F55 E862E6                  	call	int_21h_indirect
 20894 00001F58 F6C280                  	test	dl,80h
 20895                                  	;test	dl,devid_ISDEV
 20896                                  	;;retnz			; If device, no error message
 20897                                  	;jnz	short tf4
 20898 00001F5B 7503                    	jnz	short typelp_ret
 20899 00001F5D E9980A                  	jmp	error_output
 20900                                  typelp_ret:
 20901 00001F60 C3                      	retn
 20902                                  
 20903                                  ; ---------------------------------------------------------------------------
 20904                                  
 20905                                  ; VOLUME command displays the volume ID on the specified drive
 20906                                  
 20907                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20908                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20909                                  	; 10/06/2023
 20910                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20911                                  VOLUME:
 20912                                  	; MSDOS 6.0
 20913 00001F61 BE8100                  	mov	si,81h
 20914 00001F64 BF[7A96]                	mov	di,PARSE_VOL
 20915                                  				;AN000; Get address of PARSE_VOL
 20916 00001F67 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20917 00001F69 31D2                    	xor	dx,dx		;AN000;
 20918 00001F6B E8EB05                  	call	Parse_With_Msg	;AC018; call parser
 20919                                  
 20920                                  	;cmp	ax,-1 ; 0FFFFh
 20921                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 20922                                  	;je	short OkVolArg	;AC000; Yes, display default volume ID
 20923                                  	;;cmp	ax,RESULT_NO_ERROR
 20924                                  	;;cmp	ax,0		;AC000; did we have an error?
 20925                                  	;or	ax,ax ; 0?
 20926                                  	;jnz	short badvolarg	;AC000; Yes, fail.
 20927                                  	; 10/06/2023
 20928 00001F6E 40                      	inc	ax  ; cmp ax,-1
 20929 00001F6F 7447                    	jz	short OkVolArg ; 0FFFFh -> 0
 20930 00001F71 48                      	dec	ax  ; cmp ax,0
 20931 00001F72 750A                    	jnz	short badvolarg ; 1 -> 0
 20932                                  	; ax = 0
 20933                                  
 20934                                  ; We have parsed off the drive. See if there are any more chars left
 20935                                  
 20936 00001F74 BF[7A96]                	mov	di,PARSE_VOL
 20937                                  				;AC000; get address of parse_vol
 20938 00001F77 31D2                    	xor	dx,dx		;AC000;
 20939 00001F79 E8C705                  	call	parse_check_eol ;AC000; call parser
 20940 00001F7C 743A                    	jz	short OkVolArg	;AC000; yes, end of road
 20941                                  
 20942                                  ; The line was not interpretable. Report an error.
 20943                                  
 20944                                  badvolarg:
 20945 00001F7E E9A30D                  	jmp	cerror
 20946                                  
 20947                                  ; ---------------------------------------------------------------------------
 20948                                  
 20949                                  ;***	DisAppend - disable APPEND
 20950                                  ;
 20951                                  ;	ENTRY	nothing
 20952                                  ;
 20953                                  ;	EXIT	nothing
 20954                                  ;
 20955                                  ;	USED	AX,BX
 20956                                  ;
 20957                                  ;	EFFECTS
 20958                                  ;
 20959                                  ;	  APPEND is disabled. If it was active, it will be re-enabled
 20960                                  ;	  after the command finishes, by the HeadFix routine.
 20961                                  ;
 20962                                  ;	NOTE
 20963                                  ;
 20964                                  ;	  This routine must not be called more than once during a single
 20965                                  ;	  command cycle. The second call would permanently disable APPEND.
 20966                                  
 20967                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20968                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1CDFh
 20969                                  	
 20970                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 20971                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2289h
 20972                                  
 20973                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 20974                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2069h
 20975                                  
 20976                                  	; MSDOS 6.0
 20977                                  DisAppend:
 20978 00001F81 1E                      	push	ds			; save DS
 20979 00001F82 06                      	push	es			; save ES
 20980 00001F83 57                      	push	di
 20981                                  
 20982                                  	;mov	ax,APPENDINSTALL	; AX = Append Installed Check code
 20983 00001F84 B800B7                  	mov	ax,0B700h
 20984                                  	;int	2Fh			; talk to APPEND via multiplex
 20985                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20986 00001F87 E856E6                  	call	int_2Fh_indirect
 20987 00001F8A 08C0                    	or	al,al
 20988 00001F8C 7426                    	jz	short daRet		; APPEND not installed, return
 20989                                  
 20990                                  	;mov	ax,APPENDDOS		; AX = Get Append Version code
 20991 00001F8E B802B7                  	mov	ax,0B702h
 20992                                  	;int	2Fh			; talk to APPEND via multiplex
 20993                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 20994 00001F91 E84CE6                  	call	int_2Fh_indirect
 20995 00001F94 83F8FF                  	cmp	ax,0FFFFh
 20996 00001F97 751B                    	jne	short daRet		; it's not a local version, return
 20997                                  
 20998                                  	;mov	ax,APPENDGETSTATE	; AX = Get Function State code
 20999 00001F99 B806B7                  	mov	ax,0B706h
 21000                                  	;int	2Fh			; talk to APPEND via multiplex
 21001                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21002 00001F9C E841E6                  	call	int_2Fh_indirect
 21003                                  
 21004 00001F9F 8E1E[639C]              	mov	ds,[RESSEG]		; DS = resident seg addr
 21005                                  
 21006 00001FA3 891E[BE02]              	mov	[Append_State],bx	; Append_State = saved APPEND state
 21007 00001FA7 C606[C002]FF            	mov	byte [Append_Flag],-1	; Append_Flag = true, restore state
 21008                                  
 21009 00001FAC 31DB                    	xor	bx,bx			; BX = APPEND state = off
 21010                                  	;mov	ax,APPENDSETSTATE	; AX = Set Append State code
 21011 00001FAE B807B7                  	mov	ax,0B707h
 21012                                  	;int	2Fh			; talk to APPEND via multiplex
 21013                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21014 00001FB1 E82CE6                  	call	int_2Fh_indirect
 21015                                  daRet:	
 21016 00001FB4 5F                      	pop	di
 21017 00001FB5 07                      	pop	es			; restore ES
 21018 00001FB6 1F                      	pop	ds			; restore DS
 21019                                  
 21020 00001FB7 C3                      	retn
 21021                                  
 21022                                  ; ---------------------------------------------------------------------------
 21023                                  
 21024                                  ; Find the Volume ID on the disk.
 21025                                  
 21026                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21027                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21028                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21029                                  	
 21030                                  	; MSDOS 6.0
 21031                                  OkVolArg:
 21032 00001FB8 E8C6FF                  	call	DisAppend		; disable APPEND
 21033 00001FBB E8B909                  	call	CRLF2
 21034                                  	;mov	al,blank			
 21035 00001FBE B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 21036 00001FC0 E8E901                  	call	PRINT_CHAR		;AN051;  before volume message
 21037 00001FC3 1E                      	push	ds
 21038 00001FC4 07                      	pop	es
 21039                                  
 21040                                  ; Volume IDs are only findable via extended FCBs or find_first with attributes
 21041                                  ; of volume_id ONLY.
 21042                                  
 21043 00001FC5 BF5500                  	mov	di,FCB-7 ; 55h		; Point to extended FCB beginning
 21044 00001FC8 B0FF                    	mov	al,-1 ; 0FFh		; Tag to indicate Extention
 21045 00001FCA AA                      	stosb
 21046 00001FCB 31C0                    	xor	ax,ax			; Zero padding to volume label
 21047 00001FCD AB                      	stosw
 21048 00001FCE AB                      	stosw
 21049 00001FCF AA                      	stosb
 21050 00001FD0 B008                    	mov	al,ATTR_VOLUME_ID ; 8	; Look for volume label
 21051 00001FD2 AA                      	stosb
 21052 00001FD3 47                      	inc	di			; Skip drive byte; it is already set
 21053 00001FD4 B90B00                  	mov	cx,11			; fill in remainder of file
 21054 00001FD7 B03F                    	mov	al,'?'
 21055 00001FD9 F3AA                    	rep	stosb
 21056                                  
 21057                                  ; Set up transfer address (destination of search first information)
 21058                                  
 21059 00001FDB BA[AB9D]                	mov	dx,DIRBUF
 21060                                  	;mov	ah,Set_DMA
 21061 00001FDE B41A                    	mov	ah,1Ah
 21062                                  	;int	21h
 21063                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21064 00001FE0 E8D7E5                  	call	int_21h_indirect
 21065                                  
 21066                                  ; Do the search
 21067                                  
 21068 00001FE3 BA5500                  	mov	dx,FCB-7 ; 55h
 21069                                  	;mov	ah,Dir_Search_First
 21070 00001FE6 B411                    	mov	ah,11h
 21071                                  	;int	21h
 21072                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21073 00001FE8 E8CFE5                  	call	int_21h_indirect
 21074                                  
 21075                                  
 21076                                  ;********************************
 21077                                  ; Print volume ID info
 21078                                  
 21079 00001FEB 50                      	push	ax			;AC000; AX return from SEARCH_FIRST for VOL ID
 21080 00001FEC A05C00                  	mov	al,[FCB]  ; [5Ch]	;AC000; get drive letter
 21081 00001FEF 0440                    	add	al,'@'  ; add al,40h
 21082 00001FF1 3C40                    	cmp	al,'@'
 21083 00001FF3 7505                    	jne	short drvok
 21084 00001FF5 A0[779C]                	mov	al,[CURDRV]
 21085                                  	;add	al,capital_A
 21086 00001FF8 0441                    	add	al,'A'
 21087                                  drvok:
 21088 00001FFA A2[239E]                	mov	[vol_drv],al		;AC000; get drive letter into argument
 21089 00001FFD 58                      	pop	ax			;AC000; get return code back
 21090 00001FFE 08C0                    	or	al,al			;AC000; volume label found?
 21091 00002000 7405                    	jz	short Get_vol_name	;AC000; volume label exists - go get it
 21092 00002002 BA[FA90]                	mov	dx,VolMes_Ptr_2		;AC000; set up no volume message
 21093 00002005 EB13                    	jmp	short print_serial	;AC000; go print it
 21094                                  
 21095                                  Get_vol_name:
 21096 00002007 BF[DC9C]                	mov	di,CHARBUF
 21097 0000200A 89FA                    	mov	dx,di
 21098 0000200C BE[B39D]                	mov	si,DIRBUF+8		;AN000;  3/3/KK
 21099 0000200F B90B00                  	mov	cx,11			;AN000;  3/3/KK
 21100 00002012 F3A4                    	rep	movsb			;AN000;  3/3/KK
 21101                                  
 21102 00002014 30C0                    	xor	al,al			;AC000; store a zero to terminate the string
 21103 00002016 AA                      	stosb
 21104 00002017 BA[0891]                	mov	dx,VolMes_Ptr		;AC000; set up message
 21105                                  
 21106                                  print_serial:
 21107                                  
 21108                                  ; Attempt to get the volume serial number from the disk. If an error
 21109                                  ; occurs, do not print volume serial number.
 21110                                  
 21111 0000201A 52                      	push	dx			;AN000; save message offset
 21112                                  	;mov	ax,(GetSetMediaID SHL 8)
 21113 0000201B B80069                  	mov	ax,6900h		;AC036; Get the volume serial info
 21114 0000201E 8A1E5C00                	mov	bl,[FCB] ; [5Ch]	;AN000; get drive number from FCB
 21115 00002022 BA[899F]                	mov	dx,vol_ioctl_buf	;AN000; target buffer
 21116                                  	;int	21h			;AN000; do the call
 21117                                  	; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21118 00002025 E892E5                  	call	int_21h_indirect
 21119                                  			; DOS - 4.0 internal - GET/SET DISK SERIAL NUMBER
 21120                                  			; AL = 00h get serial number / 01h set serial number
 21121                                  			; BL = drive (0=default, 1=A, 2=B, etc)
 21122                                  			; DS:DX -> disk info
 21123 00002028 5A                      	pop	dx			;AN000; get message offset back
 21124 00002029 720B                    	jc	short printvol_end	;AN000; if error, just go print label
 21125 0000202B E8FA33                  	call	std_printf		;AC000; go print volume message
 21126                                  	;mov	al,blank				
 21127 0000202E B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 21128 00002030 E87901                  	call	PRINT_CHAR		;AN051;  before volume message
 21129 00002033 BA[2191]                	mov	dx,VolSerMes_Ptr 	;AN000; get serial number message
 21130                                  printvol_end:
 21131 00002036 E9EF33                  	jmp	std_printf		;AC000; go print and exit
 21132                                  
 21133                                  ; ---------------------------------------------------------------------------
 21134                                  
 21135                                  ;****************************************************************
 21136                                  ;*
 21137                                  ;* ROUTINE:	Set_ext_error_msg
 21138                                  ;*
 21139                                  ;* FUNCTION:	Sets up extended error message for printing
 21140                                  ;*
 21141                                  ;* INPUT:	return from INT 21
 21142                                  ;*
 21143                                  ;* OUTPUT:	extended error message set up in extended error
 21144                                  ;*		buffer.
 21145                                  ;*
 21146                                  ;****************************************************************
 21147                                  	
 21148                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21149                                  
 21150                                  	; MSDOS 6.0
 21151                                  Set_Ext_Error_Msg:			;AN000;
 21152 00002039 E80D00                  	call	get_ext_error_number	;AC022; get the extended error
 21153 0000203C C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class
 21154                                  	;mov	byte [msg_disp_class],1	;AN000; set up extended error msg class
 21155 00002041 BA[DA8F]                	mov	dx,extend_buf_ptr 	;AC000; get extended message pointer
 21156 00002044 A3[DA8F]                	mov	[extend_buf_ptr],ax	;AN000; get message number in control block
 21157 00002047 F9                      	stc				;AN000; make sure carry is set
 21158 00002048 C3                      	retn				;AN000; return
 21159                                  
 21160                                  ; ---------------------------------------------------------------------------
 21161                                  
 21162                                  ;****************************************************************
 21163                                  ;*
 21164                                  ;* ROUTINE:	Get_ext_error_number
 21165                                  ;*
 21166                                  ;* FUNCTION:	Does get extended error function call
 21167                                  ;*
 21168                                  ;* INPUT:	return from INT 21
 21169                                  ;*
 21170                                  ;* OUTPUT:	AX - extended error number
 21171                                  ;*
 21172                                  ;****************************************************************
 21173                                  
 21174                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21175                                  
 21176                                  	; MSDOS 6.0
 21177                                  get_ext_error_number:			;AN022;
 21178                                  
 21179                                  	;SaveReg <BX,CX,DX,SI,DI,BP,ES,DS>
 21180                                  					;AN022; save registers
 21181 00002049 53                      	push	bx
 21182 0000204A 51                      	push	cx
 21183 0000204B 52                      	push	dx
 21184 0000204C 56                      	push	si
 21185 0000204D 57                      	push	di
 21186 0000204E 55                      	push	bp
 21187 0000204F 06                      	push	es
 21188 00002050 1E                      	push	ds
 21189                                  	;mov	ah,GetExtendedError	;AN022; get extended error
 21190 00002051 B459                    	mov	ah,59h
 21191 00002053 31DB                    	xor	bx,bx			;AN022; clear BX
 21192 00002055 CD21                    	int	21h			;AN022;
 21193                                  			; DOS - 3+ - GET EXTENDED ERROR CODE
 21194                                  			; BX = version code (0000h for DOS 3.x)
 21195                                  
 21196                                  	;RestoreReg  <DS,ES,BP,DI,SI,DX,CX,BX>
 21197                                  					;AN022; restore registers
 21198 00002057 1F                      	pop	ds
 21199 00002058 07                      	pop	es
 21200 00002059 5D                      	pop	bp
 21201 0000205A 5F                      	pop	di
 21202 0000205B 5E                      	pop	si
 21203 0000205C 5A                      	pop	dx
 21204 0000205D 59                      	pop	cx
 21205 0000205E 5B                      	pop	bx
 21206                                  
 21207 0000205F C3                      	retn				;AN022; return
 21208                                  
 21209                                  ;============================================================================
 21210                                  ; TCMD2A.ASM, MSDOS 6.0, 1991
 21211                                  ;============================================================================
 21212                                  ; 08/10/2018 - Retro DOS v3.0
 21213                                  
 21214                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1379h
 21215                                  
 21216                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 21217                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1DB7h
 21218                                  
 21219                                  ; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21220                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 2361h
 21221                                  
 21222                                  ; ---------------------------------------------------------------------------
 21223                                  
 21224                                  ; MSDOS 6.0
 21225                                  ;***	Version - display DOS version
 21226                                  ;
 21227                                  ;	SYNTAX	ver [/debug]
 21228                                  ;
 21229                                  ;		/debug - display additional DOS configuration info
 21230                                  ;
 21231                                  ;	ENTRY	command-line tail is in PSP
 21232                                  ;
 21233                                  ;	EXIT	if successful, nothing
 21234                                  ;		if parse fails,
 21235                                  ;		  parse error message is set up (for Std_EPrintf)
 21236                                  ;		    AX = system parser error code
 21237                                  ;		    DX = ptr to message block
 21238                                  ;		  we jump to CError
 21239                                  ;
 21240                                  ;	EFFECTS
 21241                                  ;	  If parse fails, a parse error message is displayed.
 21242                                  ;	  Otherwise, version message is displayed.
 21243                                  ;	  If /debug is specified, additional DOS info is displayed.
 21244                                  
 21245                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21246                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21247                                  	; 20/07/2024 - Retro DOS v5.0 COMMAND.COM
 21248                                  VERSION:
 21249                                  	;assume	ds:TRANGROUP,es:TRANGROUP
 21250                                  
 21251                                  ;	Parse command line for /debug switch.
 21252                                  
 21253 00002060 BE8100                  	mov	si,81h			; DS:SI = ptr to command tail
 21254 00002063 BF[3D97]                	mov	di,PARSE_VER		; ES:DI = ptr to parse block
 21255 00002066 31C9                    	xor	cx,cx			; CX = # positional param's found
 21256 00002068 E8EE04                  	call	Parse_With_Msg
 21257                                  
 21258 0000206B B301                    	mov	bl,1			; BL = flag = /debug present
 21259                                  	;cmp	ax,RESULT_NO_ERROR
 21260                                  	;cmp	ax,0
 21261                                  	;je	short verPrintVer	; something parsed - must be /debug
 21262 0000206D 09C0                    	or	ax,ax
 21263 0000206F 740A                    	jz	short verPrintVer 
 21264 00002071 FECB                    	dec	bl			; BL = flag = no /debug present
 21265                                  	;cmp	ax,END_OF_LINE ; -1
 21266 00002073 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 21267                                  
 21268                                  ; 20/07/2024 - Retro DOS v5.0 COMMAND.COM
 21269                                  %if 0
 21270                                  	je	short verPrintVer	; reached end of line - ok
 21271                                  %else
 21272 00002076 7414                    	je	short not_truever_sw
 21273                                  %endif
 21274                                  
 21275                                  ;	The parse failed. Error message has been set up.
 21276                                  
 21277 00002078 E9A90C                  	jmp	cerror
 21278                                  
 21279                                  verPrintVer:
 21280                                  
 21281                                  ; 20/07/2024 - Retro DOS v5.0 COMMAND.COM
 21282                                  %if 1
 21283                                  check_t_switch:
 21284 0000207B 813E[5DA6][5D97]        	cmp	word [PARSE1_SYN],SLASH_T_SYN ; "/T" ; /t switch
 21285 00002081 7509                    	jne	short not_truever_sw
 21286 00002083 BA[8097]                	mov	dx,RD5CMD_VER_MSG
 21287 00002086 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9 ; print the message
 21288 00002088 CD21                    	int	21h
 21289 0000208A EB47                    	jmp	short verDone
 21290                                  not_truever_sw:
 21291                                  %endif
 21292 0000208C 53                      	push	bx			; save /debug flag
 21293 0000208D E8E708                  	call	CRLF2
 21294 00002090 E84300                  	call	PRINT_VERSION
 21295 00002093 E8E108                  	call	CRLF2
 21296 00002096 5B                      	pop	bx   			; BL = /debug flag
 21297 00002097 08DB                    	or	bl,bl
 21298 00002099 7438                    	jz	short verDone		; /debug is false - we're done
 21299                                  
 21300                                  ;*	For /debug, display DOS internal revision and DOS location
 21301                                  ;	(low memory, HMA, or ROM).
 21302                                  
 21303                                  ;	Bugbug:	use symbols for bitmasks below.
 21304                                  
 21305                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) + 6 ; M013
 21306 0000209B B80633                  	mov	ax,3306h
 21307 0000209E CD21                    	int	21h
 21308                                  		; DOS - 5+ Get TRUE Version Number
 21309                                  		; (BL major, BH minor, DL revision, DH flags)
 21310 000020A0 88D0                    	mov	al,dl			;revision number in dl; M013
 21311 000020A2 88F7                    	mov	bh,dh			;flags in dh now; M013
 21312                                  ;M032	and	al,7			; AL = DOS internal revision
 21313 000020A4 3C19                    	cmp	al,'Z'-'A' ; 25	 ;M032	; revision in A-to-Z range?
 21314                                  	;jbe	short @f	 ;M032	; A-to-Z revision ok
 21315 000020A6 7602                    	jbe	short ver1
 21316                                  	;mov	al,0E9h
 21317 000020A8 B0E9                    	mov	al,'*'-'A' ; -23 ;M032	; beyond Z, just say revision *
 21318                                  ;@@:
 21319                                  ver1:
 21320                                  
 21321                                  ; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 21322                                  %if 0
 21323                                  	add	al,'A' ; 41h		; AL = DOS internal rev letter
 21324                                  %else
 21325                                  	; PCDOS 7.1 COMMAND.COM
 21326 000020AA 0430                    	add	al,'0'  ; 30h
 21327                                  %endif
 21328                                  
 21329 000020AC A2[219E]                	mov	[One_Char_Val],al
 21330 000020AF BA[AC92]                	mov	dx,dosrev_ptr		; MSG_1090
 21331 000020B2 E87333                  	call	std_printf		; print DOS internal revision
 21332                                  
 21333                                  ; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 21334                                  %if 1
 21335 000020B5 08D2                    	or	dl,dl
 21336 000020B7 741A                    	jz	short verDone		; Revision 0
 21337                                  %endif
 21338                                  
 21339 000020B9 B104                    	mov	cl,4
 21340 000020BB D2EF                    	shr	bh,cl			; CY = DOS in ROM
 21341 000020BD 7209                    	jc	short verRom
 21342 000020BF D0EF                    	shr	bh,1			; CY = DOS in HMA
 21343 000020C1 720A                    	jc	short verHma
 21344                                  
 21345                                  ;	DOS isn't in ROM or HMA, so it must be in lower memory.
 21346                                  
 21347                                  	;mov	dx,offset TRANGROUP:DosLow_Ptr
 21348 000020C3 BA[C092]                	mov	dx,DosLow_Ptr		; MSG_1093
 21349 000020C6 EB08                    	jmp	short verPrintLoc
 21350                                  verRom: 
 21351                                  	;mov	dx,offset TRANGROUP:DosRom_Ptr
 21352 000020C8 BA[BA92]                	mov	dx,DosRom_Ptr		; MSG_1091
 21353 000020CB EB03                    	jmp	short verPrintLoc
 21354                                  verHma: 
 21355                                  	;mov	dx,offset TRANGROUP:DosHma_Ptr
 21356 000020CD BA[BD92]                	mov	dx,DosHma_Ptr		; MSG_1092
 21357                                  verPrintLoc:
 21358 000020D0 E85533                  	call	std_printf
 21359                                  verDone:
 21360 000020D3 E9A108                  	jmp	CRLF2
 21361                                  
 21362                                  ; 21/02/2023
 21363                                  ;	; MSDOS 3.3
 21364                                  ;VERSION:
 21365                                  ;	call	CRLF2
 21366                                  ;	call	PRINT_VERSION
 21367                                  ;	jmp	CRLF2
 21368                                  
 21369                                  ; =============== S U B	R O U T	I N E =======================================
 21370                                  
 21371                                  	; 21/02/2023 - Retro DOS v4.0
 21372                                  PRINT_VERSION:
 21373                                  	;mov	ah,GET_VERSION ; 30h
 21374 000020D6 B430                    	mov	ah,30h
 21375 000020D8 CD21                    	int	21h	; DOS -	GET DOS	VERSION
 21376                                  			; Return: AL = major version number (00h for DOS 1.x)
 21377 000020DA 50                      	push	ax
 21378 000020DB 30E4                    	xor	ah,ah
 21379 000020DD A3[1D9E]                	mov	[Major_Ver_Num],ax
 21380 000020E0 58                      	pop	ax
 21381 000020E1 86E0                    	xchg	ah,al
 21382 000020E3 30E4                    	xor	ah,ah
 21383 000020E5 A3[1F9E]                	mov	[Minor_Ver_Num],ax
 21384 000020E8 BA[F790]                	mov	dx,VerMes_Ptr	; MSG_1040
 21385 000020EB E93A33                  	jmp	std_printf
 21386                                  
 21387                                  ; =============== S U B	R O U T	I N E =======================================
 21388                                  
 21389                                  	; 21/02/2023 - Retro DOS v4.0
 21390                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21391                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21392                                  
 21393                                  PRINT_PROMPT:
 21394                                  
 21395                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 21396                                  %if 0
 21397                                  	push	ds
 21398                                  	push	cs
 21399                                  	pop	ds		; Make sure DS is in TRANGROUP
 21400                                  	push	es
 21401                                  	call	find_prompt	; Look for prompt string
 21402                                  	jc	short PP0	; Can't find one
 21403                                  	cmp	byte [es:di],0
 21404                                  	jnz	short PP1
 21405                                  PP0:				; Use default prompt
 21406                                  	call	PRINT_DRIVE
 21407                                  	mov	al,'>'
 21408                                  	;mov	al,SYM
 21409                                  	call	PRINT_CHAR
 21410                                  	jmp	short PP5
 21411                                  ;PP1:
 21412                                  ;	mov	al,[es:di]	; Get a char
 21413                                  ;	inc	di
 21414                                  ;	or	al,al
 21415                                  ;	jz	short PP5	; Nul terminated
 21416                                  ;	; 21/02/2023
 21417                                  ;	cmp	al,'$' ; 24h
 21418                                  ;	;cmp	al,[DOLLAR]	; Meta character
 21419                                  ;	jz	short PP2	; Nope
 21420                                  ;	call	PRINT_CHAR
 21421                                  ;	jmp	short PP1
 21422                                  PP2:
 21423                                  	mov	al,[es:di]
 21424                                  	inc	di
 21425                                  	;mov	bx,CLSSTRING+2	; "[2J"
 21426                                  	mov	bx,PROMPT_TABLE-3
 21427                                  	or	al,al
 21428                                  	jz	short PP5
 21429                                  PP3:
 21430                                  	add	bx,3
 21431                                  	; 21/02/2023
 21432                                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 21433                                  	;call	UPCONV_MAPCALL  ; MSDOS 3.3
 21434                                  	cmp	al,[bx]
 21435                                  	jz	short PP4
 21436                                  	cmp	byte [bx],0
 21437                                  	jnz	short PP3
 21438                                  	;jmp	short PP1
 21439                                  	; 21/02/2023
 21440                                  PP1:
 21441                                  	mov	al,[es:di]	; Get a char
 21442                                  	inc	di
 21443                                  	or	al,al
 21444                                  	jz	short PP5	; Nul terminated
 21445                                  	; 21/02/2023
 21446                                  	cmp	al,'$' ; 24h
 21447                                  	;cmp	al,[DOLLAR]	; Meta character
 21448                                  	jz	short PP2	; Nope
 21449                                  	call	PRINT_CHAR
 21450                                  	jmp	short PP1
 21451                                  PP4:
 21452                                  	push	es
 21453                                  	push	di
 21454                                  	push	cs
 21455                                  	pop	es
 21456                                  	call	word [bx+1]
 21457                                  	pop	di
 21458                                  	pop	es
 21459                                  	jmp	short PP1
 21460                                  PP5:
 21461                                  	pop	es		; Restore segments
 21462                                  	pop	ds
 21463                                  	retn
 21464                                  %else
 21465                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21466                                  	; PCDOS 7.1 COMMAND.COM
 21467 000020EE 1E                      	push	ds
 21468 000020EF 0E                      	push	cs
 21469 000020F0 1F                      	pop	ds		; Make sure DS is in TRANGROUP
 21470 000020F1 06                      	push	es
 21471 000020F2 9C                      	pushf
 21472                                  PP0:
 21473 000020F3 B8104A                  	mov	ax,4A10h	; SMARTDRV INSTALLATION CHECK (*)
 21474 000020F6 BB0000                  	mov	bx,0		; (*)
 21475 000020F9 CD2F                    	int	2Fh
 21476 000020FB 3DBEBA                  	cmp	ax,0BABEh	; 0BABEh if installed
 21477 000020FE 7504                    	jnz	short PP1
 21478                                  	;cmp	cx,0		; number of dirty cache elements
 21479 00002100 21C9                    	and	cx,cx ; 03/08/2024
 21480 00002102 7516                    	jnz	short PP3
 21481                                  PP1:
 21482 00002104 9D                      	popf
 21483 00002105 E8AA05                  	call	find_prompt	; Look for prompt string
 21484 00002108 7206                    	jc	short PP2	; Can't find one
 21485 0000210A 26803D00                	cmp	byte [es:di],0
 21486 0000210E 752E                    	jnz	short PP4
 21487                                  PP2:				; Use default prompt
 21488 00002110 1E                      	push	ds
 21489 00002111 07                      	pop	es
 21490 00002112 E8AE00                  	call	build_dir_for_prompt
 21491 00002115 E88A00                  	call	PRINT_G
 21492 00002118 EB40                    	jmp	short PP8
 21493                                  PP3:
 21494 0000211A B8104A                  	mov	ax,4A10h	; SMARTDRV - FLUSH BUFFERS (**)
 21495 0000211D BB0100                  	mov	bx,1		; (**)
 21496 00002120 CD2F                    	int	2Fh
 21497 00002122 EBCF                    	jmp	short PP0
 21498                                  PP5:
 21499 00002124 268A05                  	mov	al,[es:di]
 21500 00002127 47                      	inc	di
 21501                                  	;mov	bx,CLSSTRING+2	; "[2J"
 21502 00002128 BB[0994]                	mov	bx,PROMPT_TABLE-3
 21503 0000212B 08C0                    	or	al,al
 21504 0000212D 742B                    	jz	short PP8
 21505                                  PP6:
 21506 0000212F 83C303                  	add	bx,3
 21507 00002132 E85406                  	call	UPCONV
 21508 00002135 3A07                    	cmp	al,[bx]
 21509 00002137 7416                    	je	short PP7
 21510 00002139 803F00                  	cmp	byte [bx],0
 21511 0000213C 75F1                    	jnz	short PP6
 21512                                  	;jmp	short PP4
 21513                                  PP4:
 21514 0000213E 268A05                  	mov	al,[es:di]	; Get a char
 21515 00002141 47                      	inc	di
 21516 00002142 08C0                    	or	al,al
 21517 00002144 74DE                    	jz	short PP5	; Nul terminated
 21518 00002146 3C24                    	cmp	al,'$' ; 24h	; Meta character
 21519 00002148 74DA                    	je	short PP5	; Nope
 21520 0000214A E85F00                  	call	PRINT_CHAR
 21521 0000214D EBEF                    	jmp	short PP4
 21522                                  PP7:
 21523 0000214F 06                      	push	es
 21524 00002150 57                      	push	di
 21525 00002151 0E                      	push	cs
 21526 00002152 07                      	pop	es
 21527 00002153 FF5701                  	call	word [bx+1]
 21528 00002156 5F                      	pop	di
 21529 00002157 07                      	pop	es
 21530 00002158 EBE4                    	jmp	short PP4
 21531                                  PP8:
 21532 0000215A 07                      	pop	es		; Restore segments
 21533 0000215B 1F                      	pop	ds
 21534 0000215C C3                      	retn
 21535                                  
 21536                                  %endif
 21537                                  
 21538                                  ; ---------------------------------------------------------------------------
 21539                                  
 21540                                  PRINT_BACK:
 21541                                  	; 21/02/2023
 21542 0000215D BA[FA91]                	mov	dx,dback_ptr
 21543 00002160 E9C532                  	jmp	std_printf
 21544                                  
 21545                                  ; ---------------------------------------------------------------------------
 21546                                  
 21547                                  PRINT_EQ:
 21548 00002163 B03D                    	mov	al,'='
 21549 00002165 EB45                    	jmp	short PRINT_CHAR
 21550                                  
 21551                                  ; ---------------------------------------------------------------------------
 21552                                  
 21553                                  ; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 21554                                  ; PCDOS 7.1 COMMAND.COM - TRANGROUP:223Eh
 21555                                  %if 1
 21556                                  PRINT_R:	 ; Print [RetCode] as PROMPT
 21557 00002167 1E                      	push	ds
 21558 00002168 8E1E[639C]              	mov	ds,[RESSEG]
 21559 0000216C A0[9A02]                	mov	al,[RetCode]
 21560 0000216F 1F                      	pop	ds
 21561 00002170 30E4                    	xor	ah,ah
 21562 00002172 B20A                    	mov	dl,10
 21563 00002174 BE[9A21]                	mov	si,RetCode_str ; "000"
 21564 00002177 F6F2                    	div	dl
 21565 00002179 80C430                  	add	ah,30h	; '0'
 21566 0000217C 886402                  	mov	[si+2],ah
 21567 0000217F 30E4                    	xor	ah,ah
 21568 00002181 F6F2                    	div	dl
 21569 00002183 053030                  	add	ax,3030h
 21570 00002186 8904                    	mov	[si],ax
 21571 00002188 3C30                    	cmp	al,30h	; '0'
 21572 0000218A 7507                    	jnz	short Print_R_@
 21573 0000218C 46                      	inc	si
 21574 0000218D 80FC30                  	cmp	ah,30h	; '0'
 21575 00002190 7501                    	jnz	short Print_R_@
 21576 00002192 46                      	inc	si
 21577                                  Print_R_@:
 21578 00002193 8936[129E]              	mov	[string_ptr_2],si
 21579 00002197 F8                      	clc
 21580 00002198 EB46                    	jmp	short Print_R_@@
 21581                                  
 21582                                  ; ---------------------------------------------------------------------------
 21583                                  RetCode_str:
 21584 0000219A 30303000                	db	'000',0
 21585                                  ; ---------------------------------------------------------------------------
 21586                                  ;; 'PROMPT $R' test for PCDOS 7.1 COMMAND.COM - Erdogan Tan - August 6, 2024
 21587                                  ;
 21588                                  ;	[org 100h]
 21589                                  ;	
 21590                                  ;	;mov	ah,09h
 21591                                  ;	;mov	dx,program_name
 21592                                  ;	;int	21h
 21593                                  ;	call	print_msg
 21594                                  ;
 21595                                  ;	mov	al,255  ; Return Code
 21596                                  ;	mov	ah,4Ch
 21597                                  ;	int	21h
 21598                                  ;hang:
 21599                                  ;	;sti
 21600                                  ;	jmp	short hang
 21601                                  ;
 21602                                  ;print_msg:
 21603                                  ;	mov	ah,0Eh
 21604                                  ;	mov	bx,7
 21605                                  ;	mov	si,program_name
 21606                                  ;nextchr:
 21607                                  ;	lodsb
 21608                                  ;	or	al,al
 21609                                  ;	jz	short pmsg_end
 21610                                  ;	int	10h
 21611                                  ;	jmp	short nextchr
 21612                                  ;pmsg_end:
 21613                                  ;	retn
 21614                                  ;
 21615                                  ;program_name:
 21616                                  ;	db 0Dh,0Ah
 21617                                  ;	db "IBM PCDOS 7.1 COMMAND.COM (Prompt "
 21618                                  ;	db 24h,"R) Return Code Test Program"
 21619                                  ;	db 0Dh,0Ah
 21620                                  ;	db "(Erdogan Tan - 06/08/2024)"
 21621                                  ;	;db 0Dh,0Ah,"$"
 21622                                  ;	db 0Dh,0Ah,0 
 21623                                  
 21624                                  %endif
 21625                                  
 21626                                  ; ---------------------------------------------------------------------------
 21627                                  
 21628                                  PRINT_ESC:
 21629 0000219E B01B                    	mov	al,1Bh
 21630 000021A0 EB0A                    	jmp	short PRINT_CHAR
 21631                                  
 21632                                  ; ---------------------------------------------------------------------------
 21633                                  
 21634                                  	; 21/02/2023
 21635                                  PRINT_G:
 21636                                  	;mov	al,[RABRACKET]
 21637 000021A2 B03E                    	mov	al,'>' ; 3Eh
 21638 000021A4 EB06                    	jmp	short PRINT_CHAR
 21639                                  
 21640                                  ; ---------------------------------------------------------------------------
 21641                                  
 21642                                  	; 21/02/2023
 21643                                  PRINT_L:
 21644                                  	;mov	al,[LABRACKET]
 21645 000021A6 B03C                    	mov	al,'<' ; 3Ch
 21646 000021A8 EB02                    	jmp	short PRINT_CHAR
 21647                                  
 21648                                  ; ---------------------------------------------------------------------------
 21649                                  
 21650                                  	; 21/02/2023
 21651                                  Print_B:
 21652                                  	;mov	al,[VBAR]
 21653 000021AA B07C                    	mov	al,'|' ; 7Ch
 21654                                  
 21655                                  ; =============== S U B	R O U T	I N E =======================================
 21656                                  
 21657                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21658                                  PRINT_CHAR:
 21659                                  	; MSDOS 6.0
 21660                                  
 21661                                  ;	Bugbug:	Why bother with ds,es here?
 21662                                  		
 21663 000021AC 06                      	push	es
 21664 000021AD 1E                      	push	ds
 21665 000021AE 07                      	pop	es
 21666 000021AF 57                      	push	di
 21667 000021B0 52                      	push	dx
 21668 000021B1 88C2                    	mov	dl,al		;AC000; Get char into al
 21669                                  	;mov	ah,STD_CON_OUTPUT
 21670                                  				;AC000; print the char to stdout
 21671 000021B3 B402                    	mov	ah,2
 21672 000021B5 CD21                    	int	21h		;AC000;
 21673 000021B7 5A                      	pop	dx
 21674 000021B8 5F                      	pop	di
 21675 000021B9 07                      	pop	es
 21676 000021BA C3                      	retn
 21677                                  
 21678                                  ; ---------------------------------------------------------------------------
 21679                                  
 21680                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21681                                  PRINT_DRIVE:
 21682                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 21683 000021BB B419                    	mov	ah,19h
 21684 000021BD CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 21685 000021BF 0441                    	add	al,'A'
 21686                                  	;add	al,[CAPITAL_A]
 21687                                  	;call	PRINT_CHAR
 21688                                  	;retn
 21689                                  	; 21/02/2023
 21690 000021C1 EBE9                    	jmp	short PRINT_CHAR
 21691                                  
 21692                                  ; ---------------------------------------------------------------------------
 21693                                  
 21694                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21695                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EB6h
 21696                                  
 21697                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21698                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2460h
 21699                                  
 21700                                  	; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 21701                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:229Ch
 21702                                  
 21703                                  build_dir_for_prompt:
 21704 000021C3 30D2                    	xor	dl,dl
 21705 000021C5 BE[AB9D]                	mov	si,BWDBUF
 21706 000021C8 89F7                    	mov	di,si
 21707 000021CA A0[779C]                	mov	al,[CURDRV]
 21708 000021CD 0441                    	add	al,'A'
 21709 000021CF B43A                    	mov	ah,':'
 21710 000021D1 AB                      	stosw
 21711 000021D2 A0[689C]                	mov	al,[DIRCHAR]
 21712 000021D5 AA                      	stosb
 21713 000021D6 87F7                    	xchg	si,di
 21714 000021D8 893E[129E]              	mov	[string_ptr_2],di
 21715                                  	;mov	ah,CURRENT_DIR ; 47h
 21716 000021DC B447                    	mov	ah,47h
 21717 000021DE CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 21718                                  			; DL = drive (0=default,1=A,etc.)
 21719                                  			; DS:SI	points to 64-byte buffer area
 21720                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 21721                                  Print_R_@@:	; 06/08/2024
 21722 000021E0 BA[E291]                	mov	dx,string_buf_ptr
 21723 000021E3 7303                    	jnc	short doprint
 21724                                  	;mov	dx,BADCURDRVPTR	; MSDOS 3.3
 21725 000021E5 BA[A490]                	mov	dx,BADCURDRV
 21726                                  doprint:
 21727                                  	;call	std_printf
 21728                                  	;retn
 21729 000021E8 E93D32                  	jmp	std_printf
 21730                                  
 21731                                  ; =============== S U B	R O U T	I N E =======================================
 21732                                  
 21733                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21734                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EDFh
 21735                                  
 21736                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21737                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:22C5h
 21738                                  
 21739                                  build_dir_for_chdir:
 21740 000021EB E80D00                  	call	build_dir_string
 21741 000021EE BA[AB9D]                	mov	dx,DIRBUF
 21742 000021F1 8916[129E]              	mov	[string_ptr_2],dx
 21743                                  	;mov	dx,offset trangroup:string_buf_ptr ; MSDOS 6.0
 21744                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 21745 000021F5 BA[E291]                	mov	dx,string_buf_ptr
 21746                                  	;call	std_printf
 21747                                  	;retn
 21748                                  	; 21/02/2023
 21749                                  	;jmp	short doprint
 21750 000021F8 E92D32                  	jmp	std_printf
 21751                                  
 21752                                  ; =============== S U B	R O U T	I N E =======================================
 21753                                  
 21754                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21755                                  build_dir_string:
 21756 000021FB 8A165C00                	mov	dl,[FCB] ; mov dl,[5Ch]
 21757 000021FF 88D0                    	mov	al,dl
 21758 00002201 0440                    	add	al,'@'	; 40h
 21759 00002203 3C40                    	cmp	al,'@'
 21760 00002205 7506                    	jne	short gotdrive
 21761 00002207 0206[779C]              	add	al,[CURDRV]
 21762 0000220B FEC0                    	inc	al
 21763                                  gotdrive:
 21764 0000220D 50                      	push	ax
 21765 0000220E BE[AE9D]                	mov	si,BWDBUF+3
 21766                                  	;mov	ah,CURRENT_DIR ; 47h
 21767 00002211 B447                    	mov	ah,47h
 21768 00002213 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 21769                                  			; DL = drive (0=default,1=A,etc.)
 21770                                  			; DS:SI	points to 64-byte buffer area
 21771 00002215 7305                    	jnc	short dpbisok
 21772 00002217 0E                      	push	cs
 21773 00002218 1F                      	pop	ds
 21774 00002219 E9040A                  	jmp	DRVBAD
 21775                                  dpbisok:
 21776 0000221C BF[AB9D]                	mov	di,BWDBUF
 21777 0000221F 89FA                    	mov	dx,di
 21778 00002221 58                      	pop	ax
 21779 00002222 B43A                    	mov	ah,':'
 21780 00002224 AB                      	stosw
 21781 00002225 A0[689C]                	mov	al,[DIRCHAR]
 21782 00002228 AA                      	stosb
 21783 00002229 C3                      	retn
 21784                                  
 21785                                  ; ---------------------------------------------------------------------------
 21786                                  
 21787                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21788                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1F1Fh
 21789                                  
 21790                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21791                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:24C9h
 21792                                  
 21793                                  	; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 21794                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2305h
 21795                                  PATH:
 21796                                  	; MSDOS 6.0
 21797 0000222A 30C0                    	xor	al,al			;AN049; Set up holding buffer
 21798 0000222C BF[9199]                	mov	di,SRCXNAME		;AN049;  for PATH while parsing
 21799 0000222F AA                      	stosb				;AN049; Initialize PATH to null
 21800 00002230 4F                      	dec	di			;AN049; point to the start of buffer
 21801 00002231 E8600D                  	call	PGETARG 		; Pre scan for arguments
 21802 00002234 7460                    	jz	short disppath		; Print the current path
 21803                                  	;cmp	al,semicolon		;AC049; NUL path argument?
 21804 00002236 3C3B                    	cmp	al,';' ; 3Bh
 21805 00002238 7503                    	jne	short pathslp 		;AC049;
 21806 0000223A 46                      	inc	si			;AN049; point past semicolon
 21807 0000223B EB1B                    	jmp	short scan_white	;AC049; Yes - make sure nothing else on line
 21808                                  pathslp:					; Get the user specified path
 21809 0000223D AC                      	lodsb				; Get a character
 21810 0000223E 3C0D                    	cmp	al,0Dh
 21811                                  	;cmp	al,END_OF_LINE_IN	;AC049; Is it end of line?
 21812 00002240 7434                    	je	short path_eol		;AC049; yes - end of command
 21813 00002242 E81A05                  	call	testkanj		;See if DBCS
 21814 00002245 7405                    	jz	short notkanj2		;No - continue
 21815 00002247 AA                      	stosb				;AC049; Yes - store the first byte
 21816 00002248 AC                      	lodsb				;skip second byte of DBCS
 21817                                  path_hold:				;AN049;
 21818 00002249 AA                      	stosb				;AC049; Store a byte in the PATH buffer
 21819 0000224A EBF1                    	jmp	short pathslp		;continue parsing
 21820                                  notkanj2:
 21821 0000224C E83A05                  	call	UPCONV			;upper case the character
 21822                                  
 21823 0000224F 3C3B                    	cmp	al,';' ; 3Bh
 21824                                  	;cmp	al,semicolon		;AC049; ';' not a delimiter on PATH
 21825 00002251 74F6                    	je	short path_hold		;AC049; go store it
 21826 00002253 E83607                  	call	DELIM			;delimiter?
 21827 00002256 75F1                    	jnz	short path_hold		;AC049; no - go store character
 21828                                  scan_white:				;AN049; make sure were at EOL
 21829 00002258 AC                      	lodsb				;AN049; get a character
 21830 00002259 3C0D                    	cmp	al,0Dh
 21831                                  	;cmp	al,END_OF_LINE_IN	;AN049; end of line?
 21832 0000225B 7419                    	je	short path_eol		;AN049; yes - go set path
 21833 0000225D 3C20                    	cmp	al,' ' ; 20h
 21834                                  	;cmp	al,blank		;AN049; whitespace?
 21835 0000225F 74F7                    	je	short scan_white	;AN049; yes - continue scanning
 21836                                  	;cmp	al,9
 21837 00002261 3C09                    	cmp	al,tab_chr ; 9		;AN049; whitespace?
 21838 00002263 74F3                    	je	short scan_white	;AN049; yes - continue scanning
 21839                                  
 21840 00002265 BA[DA8F]                	mov	dx,extend_buf_ptr 	;AN049; no - set up error message
 21841                                  	;mov	word [extend_buf_ptr],1	;AN049; get "Too many parameters" message number
 21842 00002268 C706[DA8F]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 21843                                  	;mov	byte [msg_disp_class],2		
 21844                                  					;AN049; set up parse error msg class
 21845 0000226E C606[D88F]02            	mov	byte [msg_disp_class],parse_msg_class
 21846 00002273 E9AE0A                  	jmp	cerror			;AN049;
 21847                                  path_eol:				;AN049; Parsing was clean
 21848 00002276 30C0                    	xor	al,al			;AN049; null terminate the PATH
 21849 00002278 AA                      	stosb				;AN049;    buffer
 21850 00002279 E83104                  	call	find_path		;AN049; Find PATH in environment
 21851 0000227C E80504                  	call	delete_path		;AC049; Delete any offending name
 21852 0000227F E8BB04                  	call	scan_double_null	;AC049; Scan to end of environment
 21853 00002282 E88B04                  	call	move_name		;AC049; move in PATH=
 21854 00002285 BE[9199]                	mov	si,SRCXNAME		;AN049; Set up source as PATH buffer
 21855                                  store_path:				;AN049; Store the PATH in the environment
 21856 00002288 AC                      	lodsb				;AN049; Get a character
 21857                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN049; null character?
 21858 00002289 20C0                    	and	al,al ; al=0 ?
 21859 0000228B 7405                    	jz	short got_paths		;AN049; yes - exit
 21860 0000228D E81B05                  	call	store_char		;AN049; no - store character
 21861 00002290 EBF6                    	jmp	short store_path	;AN049; continue
 21862                                  got_paths:				;AN049; we're finished
 21863 00002292 31C0                    	xor	ax,ax			;	null terminate the PATH in
 21864 00002294 AB                      	stosw				;    	the environment
 21865 00002295 C3                      	retn
 21866                                  disppath:
 21867 00002296 E81404                  	call	find_path		;AN049;
 21868 00002299 E80300                  	call	print_path
 21869                                  	;call	CRLF2
 21870                                  	;retn
 21871                                  	; 21/02/2023
 21872 0000229C E9D806                  	jmp	CRLF2
 21873                                  
 21874                                  ; =============== S U B	R O U T	I N E =======================================
 21875                                  
 21876                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21877                                  print_path:
 21878 0000229F 26803D00                	cmp	byte [es:di],0
 21879 000022A3 750A                    	jnz	short path1
 21880                                  path0:
 21881 000022A5 BA[5491]                	mov	dx,NULLPATH_PTR
 21882 000022A8 0E                      	push	cs
 21883 000022A9 07                      	pop	es
 21884 000022AA 0E                      	push	cs
 21885 000022AB 1F                      	pop	ds
 21886 000022AC E97931                  	jmp	std_printf
 21887                                  path1:
 21888 000022AF 06                      	push	es
 21889 000022B0 1F                      	pop	ds
 21890 000022B1 83EF05                  	sub	di,5
 21891 000022B4 89FE                    	mov	si,di
 21892 000022B6 E89E04                  	call	SCASB2		; Look for null
 21893                                  	;cmp	cx,0FFh ; 255
 21894                                  	; 21/02/2023
 21895                                  	;ch = 0
 21896 000022B9 80F9FF                  	cmp	cl,255
 21897 000022BC 74E7                    	je	short path0
 21898 000022BE 0E                      	push	cs
 21899 000022BF 07                      	pop	es
 21900 000022C0 BF[06A4]                	mov	di,Arg_Buf
 21901                                  	;mov	dx,100h ; 256
 21902                                  	;sub	dx,cx
 21903                                  	;xchg	dx,cx
 21904                                  	; 21/02/2023
 21905 000022C3 F6D9                    	neg	cl ; 256-cl
 21906 000022C5 F3A4                    	rep	movsb
 21907 000022C7 BA[9C91]                	mov	dx,arg_buf_ptr
 21908 000022CA 0E                      	push	cs
 21909 000022CB 1F                      	pop	ds
 21910 000022CC E95931                  	jmp	std_printf
 21911                                  
 21912                                  ; ---------------------------------------------------------------------------
 21913                                  
 21914                                  ; ****************************************************************
 21915                                  ; *
 21916                                  ; * ROUTINE:	 CLS
 21917                                  ; *
 21918                                  ; * FUNCTION:	 Clear the screen using INT 10h. If ANSI.SYS is
 21919                                  ; *		 installed, send a control string to clear the
 21920                                  ; *		 screen.
 21921                                  ; *
 21922                                  ; * INPUT:	 command line at offset 81H
 21923                                  ; *
 21924                                  ; * OUTPUT:	 none
 21925                                  ; *
 21926                                  ; ****************************************************************
 21927                                  
 21928                                  	; MSDOS 6.0
 21929                                  
 21930                                  ANSI_installed	equ 0FFh
 21931                                  
 21932                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21933                                  	; 08/06/2023 - Retro DOS v4.2 COMMAND.COM
 21934                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 21935                                  CLS:
 21936                                  	;;mov	ah,Mult_ANSI		;AN000; see if ANSI.SYS installed
 21937                                  	;mov	ah,1Ah
 21938                                  	;mov	al,0			;AN000;
 21939 000022CF B8001A                  	mov	ax,1A00h
 21940 000022D2 CD2F                    	int	2Fh			;AN000;
 21941                                  		; - Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK
 21942                                  		; Return: AL = FFh if installed
 21943 000022D4 3CFF                    	cmp	al,ANSI_installed	;AN000;
 21944 000022D6 7429                    	je	short ansicls 		;AN000; installed - go do ANSI CLS
 21945                                  
 21946                                  check_lines:
 21947                                  	;mov	ax,(IOCTL SHL 8) + generic_ioctl_handle ; 440Ch
 21948 000022D8 B80C44                  	mov	ax,440Ch		;AN000; get lines per page on display
 21949                                  	;mov	bx,stdout		;AN000; lines for stdout
 21950 000022DB BB0100                  	mov	bx,1   ; handle
 21951                                  	;;mov	ch,ioc_sc		;AN000; type is display
 21952                                  	;mov	ch,3   ; CON device	
 21953                                  	;;mov	cl,get_generic		;AN000; get information
 21954                                  	;mov	cl,7Fh ; minor function, get display info
 21955                                  	; 25/04/2023
 21956 000022DE B97F03                  	mov	cx,037Fh
 21957 000022E1 BA[779F]                	mov	dx,Display_Ioctl	;AN000;
 21958 000022E4 CD21                    	int	21h			;AN000;
 21959 000022E6 720A                    	jc	short no_variable	;AN000; function had error, use default
 21960                                  		; 21/02/2023
 21961                                  		; ds:dx = parameter block
 21962                                  		; --- https://stanislavs.org/helppc/int_21-44-c.html ---
 21963                                  		; offset 00h  byte  level (0 for DOS 4.0)
 21964                                  		;   	 01h  byte  reserved
 21965                                  		;   	 02h  word  length of following data
 21966                                  		;   	 04h  word  control flags
 21967                                  		;	       bit 0 set for blink, clear for intensity
 21968                                  		;	       bits 1 to 15 reserved
 21969                                  		;   	 06h  byte  mode type (1=text, 2=graphics)
 21970                                  		;   	 07h  byte  reserved
 21971                                  		;   	 08h  word  colors; 0=monochrome, n=bits per pixel
 21972                                  		;   	 0Ah  word  pixel columns
 21973                                  		;   	 0Ch  word  pixel rows
 21974                                  		;   	 0Eh  word  character columns
 21975                                  		;   	 10h  word  character rows
 21976                                  	
 21977                                  	;mov	ax,[LinPerPag] ; [Display_Ioctl+10h]
 21978                                  	;				;AN000; get number of rows returned
 21979                                  	;mov	dh,al			;AN000; set number of rows
 21980                                  	;mov	ax,[display_width] ; [Display_Ioctl+0Eh]
 21981                                  	;				;AN000; get number of columns returned
 21982                                  	;mov	dl,al			;AN000; set number of columns
 21983                                  	; 21/02/2023
 21984 000022E8 8A16[859F]              	mov	dl,[display_width]
 21985 000022EC 8A36[879F]              	mov	dh,[LinPerPag]
 21986 000022F0 EB3B                    	jmp	short regcls		;AN000; go do cls
 21987                                  
 21988                                  no_variable:
 21989                                  	;;mov	bx,stdout		;AC000; set handle as stdout
 21990                                  	;mov	bx,1
 21991                                  	; bx = 1
 21992                                  	;mov	ax,IOCTL SHL 8		;AC000; do ioctl - get device info
 21993 000022F2 B80044                  	mov	ax,4400h
 21994 000022F5 CD21                    	int	21h			;AC000;
 21995 000022F7 F6C280                  	test	dl,80h
 21996                                  	;test	dl,devid_ISDEV		;AC000; is handle a device
 21997 000022FA 7405                    	jz	short ansicls 		;AC000; If a file put out ANSI
 21998 000022FC F6C210                  	test	dl,10h
 21999                                  	;test	dl,devid_SPECIAL	;AC000;
 22000 000022FF 7505                    	jnz	short cls_normal	;AC000; If not special CON, do ANSI
 22001                                  
 22002                                  ansicls:
 22003 00002301 E85200                  	call	ansi_cls		;AN000; clear the screen
 22004 00002304 EB2C                    	jmp	short cls_ret		;AN000; exit
 22005                                  
 22006                                  ; Get video mode
 22007                                  
 22008                                  cls_normal:				;AC000;
 22009                                  	;mov	ah,get_video_state	;AC000; set up to get video state
 22010 00002306 B40F                    	mov	ah,0Fh
 22011                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 22012 00002308 CD10                    	int	10h
 22013 0000230A 3C03                    	cmp	al,3
 22014                                  	;cmp	al,video_alpha		;AC000; see if in text mode
 22015 0000230C 760A                    	jbe	short DoAlpha
 22016 0000230E 3C07                    	cmp	al,7
 22017                                  	;cmp	al,video_bw		;AC000; see if black & white card
 22018 00002310 7406                    	je	short DoAlpha
 22019                                  
 22020                                  ; We are in graphics mode. Bogus IBM ROM does not scroll correctly. We will
 22021                                  ; be just as bogus and set the mode that we just got. This will blank the
 22022                                  ; screen too.
 22023                                  
 22024                                  	;mov	ah,set_video_mode	;AC000; set video mode call
 22025 00002312 B400                    	mov	ah,0
 22026                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 22027 00002314 CD10                    	int	10h
 22028 00002316 EB1A                    	jmp	short cls_ret		;AC000; exit
 22029                                  
 22030                                  DoAlpha:
 22031                                  
 22032                                  ; Get video mode and number of columns to scroll
 22033                                  
 22034                                  ;M01 - INT 10 Function 0F doesn't reliably return the number of rows on some
 22035                                  ;M01   adaptors. We circumvent this by reaching directly into the BIOS data
 22036                                  ;M01   area
 22037                                  ;M01   Commented out code here is the original
 22038                                  ;M01	mov	ah,get_video_state	;AC000; set up to get current video state
 22039                                  ;M01	int	video_io_int		;AC000; do int 10h - BIOS video IO
 22040                                  ;M01	mov	dl,ah
 22041                                  ;M01	mov	dh,linesperpage 	;AC000; have 25 rows on the screen
 22042                                  
 22043                                  ;M01   Following code lifted from a fix Compaq applied to ANSI
 22044                                  
 22045 00002318 1E                      	push	ds
 22046                                  	;mov	ax,ROMBIOS_DATA 	; GET ROM Data segment	M01
 22047 00002319 B84000                  	mov	ax,40h
 22048 0000231C 8ED8                    	mov	ds,ax			;  *			M01
 22049                                  
 22050                                  	;mov	dx,[CRT_Cols]		; Get Columns - assume < 256 M01
 22051 0000231E 8A164A00                	mov	dl,[4Ah]
 22052                                  	;mov	dh,[CRT_Rows]		; GET MAX NUM OF ROWS	M01
 22053 00002322 8A368400                	mov	dh,[84h]
 22054 00002326 1F                      	pop	ds			;			M01
 22055                                  
 22056 00002327 08F6                    	or	dh,dh			; Q:ZERO		M01
 22057 00002329 7502                    	jnz	short regcls		;  *JMP IF NO		M01
 22058                                  
 22059                                  	;mov	dh,LINESPERPAGE 	; SET TO 24 ROWS	M01
 22060                                  	; 25/04/2023
 22061 0000232B B619                    	mov	dh,25
 22062                                  regcls:
 22063 0000232D FEC6                    	inc	dh			; height+1		M018
 22064 0000232F E80100                  	call	reg_cls 		; go clear the screen
 22065                                  cls_ret:
 22066 00002332 C3                      	retn				; exit
 22067                                  
 22068                                  ; ---------------------------------------------------------------------------
 22069                                  
 22070                                  ; MSDOS 6.0
 22071                                  
 22072                                  ; ****************************************************************
 22073                                  ; *
 22074                                  ; * ROUTINE:	 REG_CLS
 22075                                  ; *
 22076                                  ; * FUNCTION:	 Clear the screen using INT 10H.
 22077                                  ; *
 22078                                  ; * INPUT:	 DL = NUMBER OF COLUMNS
 22079                                  ; *		 DH = NUMBER OF ROWS
 22080                                  ; *
 22081                                  ; * OUTPUT:	 none
 22082                                  ; *
 22083                                  ; ****************************************************************
 22084                                  
 22085                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22086                                  reg_cls:
 22087                                  ; Set overscan to black.
 22088                                  
 22089 00002333 FECE                    	dec	dh			; decrement rows and columns
 22090 00002335 FECA                    	dec	dl			;  to zero base
 22091 00002337 52                      	push	dx			; save rows,columns
 22092                                  	;mov	ah,set_color_palette	; set up to set the color to blank
 22093 00002338 B40B                    	mov	ah,0Bh
 22094 0000233A 31DB                    	xor	bx,bx
 22095                                  	;int	video_io_int		; do int 10h - BIOS video IO
 22096 0000233C CD10                    	int	10h
 22097 0000233E 5A                      	pop	dx			;  restore rows,colums
 22098                                  
 22099 0000233F 31C0                    	xor	ax,ax			; zero out ax
 22100 00002341 89C1                    	mov	cx,ax			;  and cx
 22101                                  
 22102                                  ; Scroll active page
 22103                                  
 22104                                  	;mov	ah,scroll_video_page	; set up to scroll page up
 22105 00002343 B406                    	mov	ah,6
 22106                                  	;mov	bh,video_attribute	; attribute for blank line
 22107 00002345 B707                    	mov	bh,7
 22108 00002347 30DB                    	xor	bl,bl			; set BL to 0
 22109                                  	;int	video_io_int		; do int 10h - BIOS video IO
 22110 00002349 CD10                    	int	10h
 22111                                  
 22112                                  ; Seek to cursor to 0,0
 22113                                  
 22114                                  ;M022 following two lines added
 22115                                  	;mov	ah,get_video_state	; get current video page in BH
 22116 0000234B B40F                    	mov	ah,0Fh
 22117                                  	;int	video_io_int
 22118 0000234D CD10                    	int	10h
 22119                                  	;mov	ah,set_cursor_position	; set up to set cursor position
 22120 0000234F B402                    	mov	ah,2
 22121 00002351 31D2                    	xor	dx,dx			; row and column 0
 22122                                  ;M022	mov	bh,0
 22123                                  	;int	video_io_int		; do into 10h - BIOS video IO
 22124 00002353 CD10                    	int	10h
 22125                                  
 22126 00002355 C3                      	retn
 22127                                  
 22128                                  ; ---------------------------------------------------------------------------
 22129                                  
 22130                                  ; MSDOS 6.0
 22131                                  
 22132                                  ; ****************************************************************
 22133                                  ; *
 22134                                  ; * ROUTINE:	 ANSI_CLS
 22135                                  ; *
 22136                                  ; * FUNCTION:	 Clear the screen using by writing a control code
 22137                                  ; *		 to STDOUT.
 22138                                  ; *
 22139                                  ; * INPUT:	 none
 22140                                  ; *
 22141                                  ; * OUTPUT:	 none
 22142                                  ; *
 22143                                  ; ****************************************************************
 22144                                  
 22145                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22146                                  ansi_cls:			;AC000;
 22147 00002356 BE[0794]                	mov	si,CLSSTRING
 22148                                  			; db 4,1Bh,'[2J'
 22149 00002359 AC                      	lodsb
 22150 0000235A 88C1                    	mov	cl,al	; al = 4
 22151 0000235C 30ED                    	xor	ch,ch
 22152                                  	;mov	ah,Raw_CON_IO
 22153 0000235E B406                    	mov	ah,6
 22154                                  clrloop:
 22155 00002360 AC                      	lodsb
 22156 00002361 88C2                    	mov	dl,al
 22157 00002363 CD21                    	int	21h
 22158                                  		; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
 22159 00002365 E2F9                    	loop	clrloop
 22160 00002367 C3                      	retn
 22161                                  
 22162                                  ;============================================================================
 22163                                  ; TCMD2B.ASM, MSDOS 6.0, 1991
 22164                                  ;============================================================================
 22165                                  ; 08/10/2018 - Retro DOS v3.0
 22166                                  
 22167                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 156Dh
 22168                                  
 22169                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 22170                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 206Bh
 22171                                  
 22172                                  ; ---------------------------------------------------------------------------
 22173                                  
 22174                                  ; ****************************************************************
 22175                                  ; *
 22176                                  ; * ROUTINE:	 CTTY - Change console
 22177                                  ; *
 22178                                  ; * SYNTAX:	 CTTY device
 22179                                  ; *
 22180                                  ; * FUNCTION:	 If a valid console device is specified, CTTY will
 22181                                  ; *		 duplicate the device handle to STDIN, STDOUT and
 22182                                  ; *		 STDERR. This routine returns to LODCOM1.
 22183                                  ; *
 22184                                  ; * INPUT:	 command line at offset 81H
 22185                                  ; *
 22186                                  ; * OUTPUT:	 none
 22187                                  ; *
 22188                                  ; ****************************************************************
 22189                                  
 22190                                  	; 21/02/2023 - Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 22191                                  	; 08/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 22192                                  	; 10/06/2023
 22193                                  	; 03/08/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM
 22194                                  CTTY:
 22195                                  	; MSDOS 6.0
 22196 00002368 1E                      	push	ds			;AN000; Get local ES
 22197 00002369 07                      	pop	es			;AN000;
 22198 0000236A BE8100                  	mov	si,81h			;AC000; Get command argument for CTTY
 22199 0000236D BF[2B97]                	mov	di,PARSE_CTTY
 22200                                  					;AC000; Get address of PARSE_CTTY
 22201 00002370 31C9                    	xor	cx,cx			;AC000; clear cx,dx
 22202 00002372 31D2                    	xor	dx,dx			;AC000;
 22203 00002374 E8F525                  	call	cmd_parse		;AC000; call parser
 22204                                  
 22205                                  	;cmp	ax,-1 ; 0FFFFh
 22206                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 22207                                  	;je	short ctty_error	;AN000; yes - error
 22208                                  	;;cmp	ax,RESULT_NO_ERROR ; 0	;AN000; did an error occur
 22209                                  	;and	ax,ax ; ax > 0 ?
 22210                                  	;jnz	short ctty_error	;AN000; YES -ERROR
 22211                                  	; 10/06/2023
 22212 00002377 40                      	inc	ax  ; cmp ax,-1
 22213 00002378 7434                    	jz	short ctty_error  ; 0FFFFh -> 0
 22214 0000237A 48                      	dec	ax  ; cmp ax,0
 22215 0000237B 7531                    	jnz	short ctty_error  ; 1 -> 0
 22216                                  	; ax = 0
 22217                                  
 22218 0000237D 56                      	push	si			;AN000; save position in line
 22219 0000237E C536[5FA6]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 22220 00002382 BF[919E]                	mov	di,SrcBuf		;AN000; get address of srcbuf
 22221                                  ctty_move_filename:			;AN000; put filespec in srcbuf
 22222 00002385 AC                      	lodsb				;AN000; get a char from buffer
 22223 00002386 AA                      	stosb				;AN000; store in srcbuf
 22224                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN000; it char a terminator?
 22225 00002387 08C0                    	or	al,al ; al = 0 ?
 22226 00002389 75FA                    	jnz	short ctty_move_filename ; 26/04/2023
 22227                                  					;AN000; no - keep moving
 22228 0000238B 5E                      	pop	si			;AN000; get line position back
 22229 0000238C BF[2B97]                	mov	di,PARSE_CTTY		;AC000; Get address of PARSE_CTTY
 22230 0000238F E8B101                  	call	parse_check_eol 	;AN000; are we at end of line?
 22231                                  	;jz	short nocolon 		;AN000; yes - continue
 22232                                  	; 21/02/2023
 22233 00002392 751A                    	jnz	short ctty_error
 22234                                  ;ctty_error:
 22235                                  	;jmp	short isbaddev		;AC000; yes - exit
 22236                                  
 22237                                  	; 21/02/2023
 22238                                  	; MSDOS 3.3
 22239                                  	;call	SETPATH
 22240                                  	;dec	si
 22241                                  	;dec	si
 22242                                  	;cmp	byte [si],':'
 22243                                  	;jnz	short NOCOLON
 22244                                  	;mov	byte [si],0
 22245                                  nocolon:
 22246                                  	; 21/02/2023
 22247                                  	; MSDOS 6.0
 22248 00002394 BA[919E]                	mov	dx,SrcBuf
 22249                                  ;NOCOLON:
 22250                                  	; MSDOS 3.3 & MSDOS 6.0
 22251                                  	;;mov	ax,(OPEN SHL 8) OR 2 ; Read and write
 22252                                  	;mov	ax,(OPEN<<8)|2 ; 3D02h
 22253 00002397 B8023D                  	mov	ax,3D02h ; 21/02/2023
 22254 0000239A CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 22255                                  			; DS:DX	-> ASCIZ filename
 22256                                  			; AL = access mode
 22257                                  			; 2 - read & write
 22258 0000239C 7210                    	jc	short isbaddev
 22259 0000239E 89C3                    	mov	bx,ax
 22260                                  	;mov	ax,IOCTL*256 ; 4400h
 22261 000023A0 B80044                  	mov	ax,4400h
 22262 000023A3 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 22263                                  			; BX = file or device handle
 22264 000023A5 F6C280                  	test	dl,80h
 22265 000023A8 750C                    	jnz	short devisok
 22266                                  closedev:
 22267                                  	;mov	ah,CLOSE ; 3Eh ; Close initial handle
 22268 000023AA B43E                    	mov	ah,3Eh
 22269 000023AC CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 22270                                  			; BX = file handle
 22271                                  ctty_error:
 22272                                  isbaddev:
 22273 000023AE BA[5A91]                	mov	dx,BADDEV_PTR
 22274 000023B1 E87430                  	call	std_printf
 22275 000023B4 EB40                    	jmp	short resret
 22276                                  
 22277                                  	;nop
 22278                                  devisok:
 22279                                  	; 21/02/2023
 22280                                  	; MSDOS 6.0
 22281 000023B6 52                      	push	dx		;AN007; save device info
 22282                                  	; 08/06/2023
 22283 000023B7 A1[FD91]                	mov	ax,[acrlf_ptr]	;AN021; get message number for 0d, 0a
 22284                                  	;mov	dh,util_msg_class
 22285 000023BA B6FF                    	mov	dh,-1 ; 0FFh	;AN021; this is a utility message
 22286 000023BC 53                      	push	bx		;AN021; save handle
 22287 000023BD E84B31                  	call	TSYSGETMSG	;AN021; get the address of the message
 22288 000023C0 89F2                    	mov	dx,si		;AN021; get address into dx
 22289                                  	;mov	ax,(Write shl 8)
 22290 000023C2 B80040                  	mov	ax,4000h	;AN007; write to device
 22291 000023C5 B90200                  	mov	cx,2		;AN007; write two bytes
 22292 000023C8 CD21                    	int	21h		;AN007;
 22293 000023CA 5B                      	pop	bx		;AN021; get back handle
 22294 000023CB 5A                      	pop	dx		;AN007; get back device info
 22295 000023CC 72DC                    	jc	short closedev	;AN007; if error, quit
 22296                                  
 22297                                  	; MSDOS 3.3 & MSDOS 6.0
 22298 000023CE 30F6                    	xor	dh,dh
 22299 000023D0 80CA03                  	or	dl,3
 22300                                  	;;mov	ax,(IOCTL SHL 8) OR 1
 22301                                  	;mov	ax,(IOCTL<<8)|1 ; 4401h
 22302 000023D3 B80144                  	mov	ax,4401h
 22303 000023D6 CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 22304                                  			; BX = device handle,DH = 0
 22305                                  			; DL = device information to set 
 22306                                  			;	(bits 0-7 from	function 0)
 22307 000023D8 53                      	push	bx
 22308 000023D9 B90300                  	mov	cx,3
 22309 000023DC 31DB                    	xor	bx,bx
 22310                                  iclloop:			; Close basic handles
 22311                                  	;mov	ah,CLOSE ; 3Eh
 22312 000023DE B43E                    	mov	ah,3Eh
 22313 000023E0 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 22314                                  			; BX = file handle
 22315 000023E2 43                      	inc	bx
 22316 000023E3 E2F9                    	loop	iclloop
 22317 000023E5 5B                      	pop	bx		; Get handle
 22318                                  	;mov	ah,XDUP ; 45h
 22319 000023E6 B445                    	mov	ah,45h
 22320 000023E8 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 22321                                  			; BX = file handle to duplicate
 22322                                  	;mov	ah,XDUP ; 45h
 22323 000023EA B445                    	mov	ah,45h
 22324 000023EC CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 22325                                  			; BX = file handle to duplicate
 22326                                  	;mov	ah,XDUP ; 45h
 22327 000023EE B445                    	mov	ah,45h
 22328 000023F0 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 22329                                  			; BX = file handle to duplicate
 22330                                  	;mov	ah,CLOSE ; 3Eh
 22331 000023F2 B43E                    	mov	ah,3Eh
 22332 000023F4 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 22333                                  			; BX = file handle
 22334                                  resret:
 22335 000023F6 8E1E[639C]              	mov	ds,[RESSEG]
 22336 000023FA 1E                      	push	ds
 22337                                  	;mov	ax,[18h]
 22338 000023FB A11800                  	mov	ax,[PDB.JFN_TABLE] ; Get new 0 and 1
 22339 000023FE A3[9F02]                	mov	[Io_Save],ax
 22340                                  	;;;mov	ax,31Eh ; MSDOS 3.3
 22341                                  	;;mov	ax,LODCOM1
 22342                                  	;;mov	ax,offset DATARES:TrnLodCom1_Trap  ; MSDOS 6.0
 22343                                  	;mov	ax,175h ; MSDOS 6.0
 22344 00002401 B8[D600]                	mov	ax,TrnLodCom1_Trap
 22345 00002404 50                      	push	ax
 22346                                  
 22347 00002405 CB                      	retf		; Far return
 22348                                  
 22349                                  ; ---------------------------------------------------------------------------
 22350                                  
 22351                                  ;****************************************************************
 22352                                  ;*
 22353                                  ;* ROUTINE:	CHCP - Change code page internal command
 22354                                  ;*		(added DOS 3.30 07/21/86)
 22355                                  ;*
 22356                                  ;* SYNTAX:	CHCP [xxx]
 22357                                  ;*		where xxx is a valid code page
 22358                                  ;*
 22359                                  ;* FUNCTION:	If xxx is specified, CHCP will use INT 21H function
 22360                                  ;*		6402H to set the code page to xxxx. If no parameters
 22361                                  ;*		are specified, CHCP will use INT 21H function 6401H
 22362                                  ;*		to get global code page and display it to the user.
 22363                                  ;*
 22364                                  ;* INPUT:	command line at offset 81H
 22365                                  ;*
 22366                                  ;* OUTPUT:	none
 22367                                  ;*
 22368                                  ;****************************************************************
 22369                                  
 22370                                  NLSFUNC_installed equ  0FFh
 22371                                  set_global_cp	  equ  2
 22372                                  get_global_cp	  equ  1
 22373                                  
 22374                                  	; 21/02/2023 - Retro DOS v4.0
 22375                                  	; 09/06/2023 - Retro DOS v4.2 COMMAND.COM
 22376                                  	; 10/06/2023
 22377                                  	; 03/08/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM
 22378                                  CHCP:
 22379                                  	; MSDOS 6.0
 22380 00002406 1E                      	push	ds		;AN000; Get local ES
 22381 00002407 07                      	pop	es		;AN000;
 22382 00002408 BE8100                  	mov	si,81h		;AC000; Get command argument for CHCP
 22383 0000240B BF[3796]                	mov	di,PARSE_CHCP
 22384                                  				;AN000; Get address of PARSE_CHCP
 22385 0000240E 31C9                    	xor	cx,cx		;AC000; clear cx,dx
 22386 00002410 31D2                    	xor	dx,dx		;AC000;
 22387 00002412 E84401                  	call    Parse_With_Msg	;AC018; call parser
 22388                                  
 22389                                  	;cmp	ax,-1
 22390                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 22391                                  	;;jne	short setcp	;AC000; no go get number & set code page
 22392                                  	;je	short getcp	;AC000; yes - no parm - get code page
 22393                                  ;setcp:
 22394                                  	;;cmp	ax,0
 22395                                  	;;cmp	ax,RESULT_NO_ERROR
 22396                                  	;			;AN000; did we have an error?
 22397                                  	;;jne	short cp_error	;AC018; yes - go issue message
 22398                                  	;and	ax,ax ; ax > 0 ?
 22399                                  	;jnz	short cp_error	
 22400                                  	; 10/06/2023
 22401 00002415 40                      	inc	ax  ; cmp ax,-1	
 22402 00002416 745C                    	jz	short getcp ; 0FFFFh -> 0
 22403 00002418 48                      	dec	ax  ; cmp ax,0
 22404 00002419 7556                    	jnz	short cp_error ; 1 -> 0
 22405                                  	; ax = 0
 22406                                  
 22407                                  	;;push	cx		;AN000; save positional count
 22408                                  	;mov	bx,PARSE1_ADDR	;AN000; get number returned
 22409                                  	;;mov	cx,[bx]		;AN000;  into cx
 22410                                  	;;mov	[system_cpage],cx
 22411                                  	;			;AN000; save user input number
 22412                                  	;;pop	cx		;AC000; restore positional count
 22413                                  	;; 21/02/2023
 22414                                  	;mov	di,[bx]
 22415                                  	;mov	[system_cpage],di
 22416                                  	; 09/06/2023	
 22417 0000241B 8B1E[5FA6]              	mov	bx,[PARSE1_ADDR]
 22418 0000241F 891E[0C9E]              	mov	[system_cpage],bx
 22419                                  	;
 22420 00002423 BF[3796]                	mov	di,PARSE_CHCP	;AN000; Get address of PARSE_CHCP
 22421 00002426 E81A01                  	call	parse_check_eol ;AN000; are we at end of line?
 22422 00002429 7546                    	jnz	short cp_error	;AC000; no - exit
 22423                                  okset:
 22424                                  	;;mov	ah,NLSFUNC	;AN000; see if NLSFUNC installed
 22425                                  	;mov	ah,14h
 22426                                  	;mov	al,0		;AN000;
 22427 0000242B B80014                  	mov	ax,1400h
 22428 0000242E CD2F                    	int	2Fh		;AN000;
 22429                                  	;cmp	al,0FFh
 22430 00002430 3CFF                    	cmp	al,NLSFUNC_installed
 22431                                  				;AN000;
 22432 00002432 7405                    	je	short got_NLS 	;AN000; Yes - continue
 22433 00002434 BA[9E90]                	mov	dx,NLSFUNC_PTR
 22434                                  				;AN000; no - set up error message
 22435 00002437 EB38                    	jmp	short cp_error	;AN000; error exit
 22436                                  
 22437                                  	; 21/02/2023
 22438                                  got_NLS:
 22439                                  	; MSDOS 6.0
 22440 00002439 8B1E[0C9E]              	mov	bx,[system_cpage]
 22441                                  				;AN000; get user input code page
 22442                                  ;SET_CP_TBL_NUM:
 22443                                  	;mov	[SYSTEM_CPAGE],bx ; MSDOS 3.3
 22444                                  	;
 22445                                  	; MSDOS 3.3 & MSDOS 6.0
 22446                                  	;;mov	ah,GETSETCDPG 	;get/set global code page function
 22447                                  	;mov	ah,66h
 22448                                  	;;mov	al,set_global_cp 
 22449                                  	;mov	al,2		;minor - set
 22450                                  	; 26/04/2023
 22451 0000243D B80266                  	mov	ax,6602h
 22452 00002440 CD21                    	int	21h
 22453                                  		; DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE
 22454                                  		; BX = active code page
 22455                                  		; DX = system code page (active page at boot time)
 22456                                  
 22457 00002442 733F                    	jnc	short chcp_return
 22458                                  				;no error - exit
 22459                                  
 22460 00002444 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2
 22461 00002447 7515                    	jnz	short chcp_other_error
 22462                                  
 22463                                  	;mov	ah,GETEXTENDEDERROR ; 59h
 22464 00002449 B459                    	mov	ah,59h
 22465 0000244B 31DB                    	xor	bx,bx
 22466 0000244D CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 22467                                  			; BX = version code (0000h for DOS 3.x)
 22468                                  
 22469 0000244F 83F80D                  	cmp	ax,ERROR_INVALID_DATA ; 0Dh ; invalid code page
 22470 00002452 7505                    	jne	short no_countrysys ; 26/04/2023
 22471                                  	;mov	dx,FNOTFOUNDPTR ; MSDOS 3.3
 22472 00002454 BA[A190]                	mov	dx,INV_CODE_PAGE
 22473                                  	;jmp	cerror
 22474 00002457 EB18                    	jmp	short cp_error
 22475                                  
 22476                                  	; 21/02/2023
 22477                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 22478                                  no_countrysys:
 22479                                  ;M045;	mov	byte [msg_disp_class],ext_msg_class	   
 22480                                  ;					;AN000; set up extended error msg class
 22481                                  ;M045;	mov	dx,extend_buf_ptr	;AC000; get extended message pointer
 22482                                  ;M045;	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND
 22483                                  					;AN000; get message number in control block
 22484 00002459 BA[C992]                	mov	dx,NoCntry_Ptr
 22485 0000245C EB13                    	jmp	short cp_error
 22486                                  
 22487                                  chcp_other_error:		; end of p716
 22488                                  	;mov	ah,GETEXTENDEDERROR ; 59h ;error - see what it is
 22489 0000245E B459                    	mov	ah,59h
 22490 00002460 31DB                    	xor	bx,bx
 22491 00002462 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 22492                                  			; BX = version code (0000h for DOS 3.x)
 22493 00002464 83F841                  	cmp	ax,65		;was it access denied?
 22494 00002467 7505                    	jne	short none_set	;no - assume all failed
 22495 00002469 BA[8290]                	mov	dx,cp_not_all_ptr
 22496                                  				;set up message
 22497                                  	;jmp	cerror		;AC000; error exit
 22498 0000246C EB03                    	jmp     short cp_error
 22499                                  none_set:
 22500 0000246E BA[7490]                	mov	dx,cp_not_set_ptr
 22501                                  				;set up message
 22502                                  cp_error:
 22503 00002471 E9B008                  	jmp	cerror		;exit
 22504                                  getcp:
 22505                                  	;;mov	ah,GETSETCDPG ; 66h
 22506                                  	;mov	ah,66h		;get/set global code page function	
 22507                                  	;;mov	al,get_global_cp ; 1
 22508                                  	;mov	al,1		;minor - get
 22509                                  	; 26/04/2023
 22510 00002474 B80166                  	mov	ax,6601h
 22511 00002477 CD21                    	int	21h	; DOS -	3.3+ - GET GLOBAL CODE PAGE TABLE
 22512 00002479 891E[0C9E]              	mov	[system_cpage],bx
 22513                                  				;get active cp for output
 22514 0000247D BA[9090]                	mov	dx,cp_active_ptr
 22515 00002480 E8A52F                  	call	std_printf	;print it out
 22516                                  chcp_return:
 22517 00002483 C3                      	retn
 22518                                  
 22519                                  ; ---------------------------------------------------------------------------
 22520                                  
 22521                                  ; ****************************************************************
 22522                                  ; *
 22523                                  ; * ROUTINE:	 TRUENAME
 22524                                  ; *
 22525                                  ; * FUNCTION:	 Entry point for the internal TRUENAME command.
 22526                                  ; *		 Parses the command line. If a path is found, set
 22527                                  ; *		 SRCXNAME to path. If only a drive letter is found,
 22528                                  ; *		 set SRCXNAME to the drive letter. If no path
 22529                                  ; *		 is found, set the path of SRCXNAME to dot (.) for
 22530                                  ; *		 current directory. Use the NAME TRANSLATE system
 22531                                  ; *		 call to get the real name and  then display the 
 22532                                  ; *		 real name. If an error occurs issue an error
 22533                                  ; *		 message and transfer control to  CERROR.
 22534                                  ; *
 22535                                  ; * INPUT:	 command line at offset 81H
 22536                                  ; *
 22537                                  ; * OUTPUT:	 none
 22538                                  ; *
 22539                                  ; ****************************************************************
 22540                                  
 22541                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22542                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2197h
 22543                                  
 22544                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 22545                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2741h
 22546                                  
 22547                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 22548                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:257Dh
 22549                                  
 22550                                  TRUENAME:				;AN000; TRUENAME entry point
 22551 00002484 1E                      	push	ds			;AN000; Get local ES
 22552 00002485 07                      	pop	es			;AN000;
 22553 00002486 BE8100                  	mov	si,81h			;AN000; Get command line
 22554 00002489 BF[9596]                	mov	di,PARSE_CHDIR		;AN000; Get address of PARSE_CHDIR
 22555 0000248C 31C9                    	xor	cx,cx			;AN000; clear cx,dx
 22556 0000248E 31D2                    	xor	dx,dx			;AN000;
 22557 00002490 E8C600                  	call	Parse_With_Msg		;AC018; call parser
 22558                                  
 22559 00002493 BF[9199]                	mov	di,SRCXNAME		;AN000; get address of srcxname
 22560                                  	;cmp	ax,0FFFFh
 22561                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 22562                                  	;je	short tn_eol		;AN000; yes - go process
 22563                                  	;; 22/02/2023
 22564                                  	;;cmp	ax,0
 22565                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 22566                                  	;;jne	short tn_parse_error	;AN000; yes - go issue message
 22567                                  	;and	ax,ax ; ax = 0 ?
 22568                                  	;jnz	short tn_parse_error ; no, parse error	
 22569                                  	; 10/06/2023
 22570 00002496 40                      	inc	ax  ; 0FFFFh -> 0 ; cmp ax,0FFFFh
 22571 00002497 7433                    	jz	short tn_eol ; ah = 0 ; *
 22572 00002499 48                      	dec	ax  ; 1 -> 0 ; cmp ax, 0
 22573 0000249A 752D                    	jnz	short tn_parse_error
 22574                                  	
 22575                                  	;cmp	byte [PARSE1_TYPE],6
 22576 0000249C 803E[5BA6]06            	cmp	byte [PARSE1_TYPE],result_drive
 22577                                  					;AN000; was a drive entered?
 22578                                  	;je	short tn_drive		;AN000; yes - go process
 22579                                  	;jmp	short tn_filespec	;AN000; nothing else - must be filespec
 22580                                  	; 23/02/2023
 22581 000024A1 7512                    	jne	short tn_filespec
 22582                                  
 22583                                  ;tn_eol: 
 22584                                  ;	;mov	ah,0			;AN000; no parameters on line
 22585                                  ;	mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 22586                                  ;	;mov	al,dot_chr		;AN000;   for current dir
 22587                                  ;	mov	al,'.'
 22588                                  ;	stosw				;AN000; store in srcxname
 22589                                  ;	jmp	short tn_doit		;AN000; go do command
 22590                                  
 22591                                  tn_drive:				;AN000; a drive was entered
 22592 000024A3 56                      	push	si			;AN000; save position in line
 22593 000024A4 BE[5FA6]                	mov	si,PARSE1_ADDR		;AN000; get address of drive
 22594 000024A7 AC                      	lodsb				;AN000; get the drive number
 22595 000024A8 0440                    	add	al,"A"-1 ; 40h		;AN000; convert it to char
 22596 000024AA AA                      	stosb				;AN000; store it in srcxname
 22597                                  	;mov	ax,dot_colon		;AN000; get colon and . and
 22598 000024AB B83A2E                  	mov	ax,':.' ; 2E3Ah ; ah=".", al=":"
 22599 000024AE AB                      	stosw				;AN000;  store in srcxname
 22600                                  	;mov	al,0
 22601 000024AF B000                    	mov	al,END_OF_LINE_OUT	;AN000; put a terminator char
 22602 000024B1 AA                      	stosb				;AN000;
 22603 000024B2 5E                      	pop	si			;AN000; get line position back
 22604 000024B3 EB0C                    	jmp	short tn_check_eol	;AN000; check to make sure eol
 22605                                  
 22606                                  tn_filespec:				;AN000; a filespec was entered
 22607 000024B5 56                      	push	si			;AN000; save position in line
 22608 000024B6 C536[5FA6]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 22609                                  
 22610                                  tn_move_filename:			;AN000; put filespec in srcxname
 22611 000024BA AC                      	lodsb				;AN000; get a char from buffer
 22612 000024BB AA                      	stosb				;AN000; store in srcxname
 22613                                  	;;cmp	al,0
 22614                                  	;cmp	al,END_OF_LINE_OUT	;AN000; it char a terminator?
 22615 000024BC 08C0                    	or	al,al ; al = 0 ?
 22616 000024BE 75FA                    	jnz	short tn_move_filename	;AN000; no - keep moving
 22617 000024C0 5E                      	pop	si			;AN000; get line position back
 22618                                  
 22619                                  tn_check_eol:				;AN000; make sure no extra parms
 22620 000024C1 BF[9596]                	mov	di,PARSE_CHDIR		;AN000; get address of parse_chdir
 22621 000024C4 E87C00                  	call	parse_check_eol 	;AN000; are we at end of line?
 22622 000024C7 7406                    	jz	short tn_doit 		;AN000; Yes - do the command
 22623                                  tn_parse_error: 			;AN000; A parse error occurred
 22624 000024C9 E95808                  	jmp	cerror			;AN000; Go to error routine
 22625                                  
 22626                                  tn_eol: 
 22627                                  	;23/02/2023
 22628                                  	;;mov	ah,0			;AN000; no parameters on line
 22629                                  	;mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 22630                                  	;;mov	al,dot_chr		;AN000;   for current dir
 22631                                  	;mov	al,'.'
 22632                                  	; 10/06/2023
 22633                                  	;mov	ax,002Eh
 22634                                  	; ah = 0 ; *
 22635 000024CC B02E                    	mov	al,'.'  ;dot_chr ; 2Eh
 22636                                  	;	
 22637 000024CE AB                      	stosw				;AN000; store in srcxname
 22638                                  	; 23/02/2023
 22639                                  	;jmp	short tn_doit		;AN000; go do command
 22640                                  
 22641                                  tn_doit:				;AN000;
 22642 000024CF BE[9199]                	mov	si,SRCXNAME		;AN000; set up srcxname as source
 22643 000024D2 BF[C29A]                	mov	di,COMBUF		;AN000; set up combuf as target (need big target)
 22644 000024D5 B460                    	mov	ah,xNameTrans		;AN000; do name translate call
 22645                                  	;mov	ah,60h
 22646 000024D7 CD21                    	int	21h			;AN000;
 22647 000024D9 7311                    	jnc	short tn_print_xname	;AN000; If no error - print result
 22648                                  
 22649 000024DB E85BFB                  	call	Set_Ext_Error_Msg	;AN000; get extended message
 22650 000024DE C706[129E][9199]        	mov	word [string_ptr_2],SRCXNAME
 22651                                  					;AN000; get address of failed string
 22652                                  	;mov	byte [extend_buf_sub],1
 22653 000024E4 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst
 22654                                  					;AN000; put number of subst in control block
 22655 000024E9 E93808                  	jmp	cerror			;AN000; Go to error routine
 22656                                  
 22657                                  tn_print_xname: 			;AN000;
 22658 000024EC C706[129E][C29A]        	mov	word [string_ptr_2],COMBUF
 22659                                  					;AN000; Set up address of combuf
 22660 000024F2 BA[E291]                	mov	dx,string_buf_ptr	;AN000; Set up address of print control block
 22661 000024F5 E87F04                  	call	CRLF2			;AN000; print a crlf
 22662                                  	;call	Printf_Crlf		;AN000; print it out
 22663                                  	;retn				;AN000;
 22664                                  	; 23/02/2023
 22665 000024F8 E91F2F                  	jmp	Printf_Crlf
 22666                                  
 22667                                  ; ---------------------------------------------------------------------------
 22668                                  
 22669                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22670                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2219h
 22671                                  
 22672                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 22673                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:27C3h
 22674                                  
 22675                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22676                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2600h
 22677                                  _$EXIT:
 22678                                  	; MSDOS 6.0
 22679 000024FB 1E                      	push	ds			;AN000; save data segment
 22680 000024FC 8E1E[639C]              	mov	ds,[RESSEG]		;AN000; get resident data segment
 22681                                  	;assume	ds:resgroup		;AN000;
 22682                                  
 22683 00002500 803E[A202]00            	cmp	byte [PermCom],0	;AN045; is this a permanent COMMAND?
 22684 00002505 740A                    	jz	short free_com		;AN045; no - free everything
 22685                                  
 22686                                  ;	We're a permanent command.
 22687                                  ;	Unless this is a singlecom (int 2Eh), don't deallocate transient.
 22688                                  
 22689 00002507 833E[A502]FF            	cmp	word [SingleCom],-1	;M034
 22690 0000250C 7403                    	je	short no_reset		;M034 ; exit singlecom
 22691 0000250E E9F3DB                  	jmp	TCOMMAND		;permanent command, recycle
 22692                                  
 22693                                  free_com:
 22694                                  
 22695                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 22696                                  %if 0
 22697                                  	;mov	ax,(multdos shl 8 or message_2f)
 22698                                  	mov	ax,122Eh		;AN060; reset parse message pointers
 22699                                  	;mov	dl,SET_CRITICAL_MSG	;AN000; set up critical error message address
 22700                                  	mov	dl,5
 22701                                  	mov	di,[Crit_Msg_Off] 	;AN000; old offset of critical messages
 22702                                  	mov	es,[Crit_Msg_Seg] 	;AN000; old segment of critical messages
 22703                                  	int	2Fh			;AN000; go set it
 22704                                  %endif
 22705                                  
 22706                                  no_reset:				;AN045;
 22707 00002511 1F                      	pop	ds			;AN000; restore local data segment
 22708                                  	;assume	ds:trangroup		;AN000;
 22709                                  ;M040
 22710                                  ; Restore user directory if the restore flag is set. RestUDir1 checks for
 22711                                  ;this, restores user dir if flag is set and resets the flag.
 22712                                  
 22713                                  	;invoke	RestUDir1		;restore user dir if needed ;M040
 22714 00002512 E80C03                  	call	RestUDir1
 22715 00002515 8E06[639C]              	mov	es,[RESSEG]
 22716                                  	;assume	es:resgroup
 22717                                  
 22718 00002519 26A1[3E02]              	mov	ax,[es:Parent]
 22719                                  	;mov	[es:16h],ax
 22720                                  	;mov	[es:PDB_Parent_PID],ax
 22721 0000251D 26A31600                	mov	[es:PDB.PARENT_PID],ax
 22722 00002521 26A1[4002]              	mov	ax,[es:OldTerm]
 22723                                  	;mov	[es:0Ah],ax
 22724                                  	;mov	[es:PDB_Exit],ax
 22725 00002525 26A30A00                	mov	[es:PDB.EXIT],ax
 22726 00002529 26A1[4202]              	mov	ax,[es:OldTerm+2]
 22727                                  	;mov	[es:0Ch],ax
 22728                                  	;mov	[es:PDB_Exit+2],ax
 22729 0000252D 26A30C00                	mov	[es:PDB.EXIT+2],ax
 22730                                  
 22731 00002531 06                      	push	es
 22732 00002532 8E06[739C]              	mov	es,[TRAN_TPA]
 22733                                  	;mov	ah,DEALLOC
 22734 00002536 B449                    	mov	ah,49h
 22735 00002538 CD21                    	int	21h			; Now running in "free" space
 22736 0000253A 07                      	pop	es
 22737                                  
 22738                                  	;mov	ah,Exit
 22739 0000253B B44C                    	mov	ah,4Ch
 22740                                  	;mov	al,byte ptr RetCode
 22741 0000253D 26A0[9A02]              	mov	al,[es:RetCode]
 22742 00002541 CD21                    	int	21h
 22743                                  
 22744                                  ; ---------------------------------------------------------------------------
 22745                                  
 22746                                  ; MSDOS 6.0
 22747                                  ; ****************************************************************
 22748                                  ; *
 22749                                  ; * ROUTINE:	 PARSE_CHECK_EOL
 22750                                  ; *
 22751                                  ; * FUNCTION:	 Calls parser to see if end of line occurred.
 22752                                  ; *		 If not end of line, set up to print parse
 22753                                  ; *		 error message. ASSUMES NO MORE PARAMETERS ARE
 22754                                  ; *		 EXPECTED!
 22755                                  ; *
 22756                                  ; * INPUT:	 DS:SI	  last output from parser
 22757                                  ; *		 ES:DI	  points to parse block
 22758                                  ; *		 CX	  last output from parser
 22759                                  ; *
 22760                                  ; * OUTPUT:	 AX	  parser return code
 22761                                  ; *
 22762                                  ; *		 if end of line found
 22763                                  ; *		     zero flag set
 22764                                  ; *		 else
 22765                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 22766                                  ; *
 22767                                  ; ****************************************************************
 22768                                  
 22769                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22770                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2270h
 22771                                  
 22772                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22773                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2648h
 22774                                  parse_check_eol:
 22775 00002543 31D2                    	xor	dx,dx			;AN000;
 22776 00002545 8936[0A9E]              	mov	[parse_last],si 	;AN018; save start of parameter
 22777 00002549 E82024                  	call	cmd_parse		;AN000; call parser
 22778 0000254C 3CFF                    	cmp	al,-1 ; 0FFh
 22779                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN000; Are we at end of line?
 22780 0000254E 7408                    	je	short parse_good_eol	;AN000; yes - no problem
 22781                                  	;cmp	ax,0
 22782                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; was any error found?
 22783 00002550 21C0                    	and	ax,ax ; ax = 0 ?
 22784 00002552 7501                    	jnz	short ok_to_setup_pmsg	;AN018; yes - continue
 22785 00002554 40                      	inc	ax			;AN018; set AX to 1 and turn off zero flag
 22786                                  ok_to_setup_pmsg:
 22787 00002555 E81000                  	call	setup_parse_error_msg	;AN018; go set up error message
 22788                                  parse_good_eol:
 22789                                  parse_msg_good:	; 23/02/2023
 22790 00002558 C3                      	retn				;AN000;
 22791                                  
 22792                                  ; ---------------------------------------------------------------------------
 22793                                  
 22794                                  ; MSDOS 6.0
 22795                                  ; ****************************************************************
 22796                                  ; *
 22797                                  ; * ROUTINE:	 PARSE_WITH_MSG
 22798                                  ; *
 22799                                  ; * FUNCTION:	 Calls parser. If an error occurred, the error
 22800                                  ; *		 message is set up.
 22801                                  ; *
 22802                                  ; * INPUT:	 DS:SI	  last output from parser
 22803                                  ; *		 ES:DI	  points to parse block
 22804                                  ; *		 CX	  last output from parser
 22805                                  ; *
 22806                                  ; * OUTPUT:	 AX	  parser return code
 22807                                  ; *
 22808                                  ; *		 if no error
 22809                                  ; *		     outputs from parser
 22810                                  ; *		 else
 22811                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 22812                                  ; *		     error message set up for STD_PRINTF
 22813                                  ; *
 22814                                  ; ****************************************************************
 22815                                  
 22816                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22817                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22818                                  Parse_With_Msg:
 22819 00002559 8936[0A9E]              	mov	[parse_last],si 	;AN018; save start of parameter
 22820 0000255D E80C24                  	call	cmd_parse		;AN018; call parser
 22821 00002560 3CFF                    	cmp	al,-1 ; 0FFh
 22822                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN018; Are we at end of line?
 22823 00002562 74F4                    	je	short parse_msg_good	;AN018; yes - no problem
 22824                                  	;cmp	ax,0
 22825                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; did an error occur
 22826 00002564 09C0                    	or	ax,ax ; ax = 0 ?
 22827 00002566 74F0                    	jz	short parse_msg_good	;AN018; yes - no problem
 22828                                  	; 23/02/2023
 22829                                  	;call	setup_parse_error_msg	;AN018; go set up error message
 22830                                  ;parse_msg_good:
 22831                                  	;retn				;AN018;
 22832                                  	; 23/02/2023
 22833                                  	;jmp	short setup_parse_error_msg	
 22834                                  
 22835                                  ; ---------------------------------------------------------------------------
 22836                                  
 22837                                  ; MSDOS 6.0
 22838                                  ; ****************************************************************
 22839                                  ; *
 22840                                  ; * ROUTINE:	 SETUP_PARSE_ERROR_MSG
 22841                                  ; *
 22842                                  ; * FUNCTION:	 Calls parser.	If an error occurred, the error
 22843                                  ; *		 message is set up.
 22844                                  ; *
 22845                                  ; * INPUT:	 AX	     Parse error number
 22846                                  ; *		 SI	     Set to past last parameter
 22847                                  ; *		 Parse_last  Set to start of last parameter
 22848                                  ; *
 22849                                  ; * OUTPUT:	 MSG_DISPLAY_CLASS set to parse error
 22850                                  ; *		 error message set up for STD_PRINTF
 22851                                  ; *
 22852                                  ; ****************************************************************
 22853                                  
 22854                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22855                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22856                                  setup_parse_error_msg:
 22857 00002568 C606[D88F]02            	mov	byte [msg_disp_class],parse_msg_class
 22858                                  	;mov	byte [msg_disp_class],2	;AC018; Set up parse message class
 22859 0000256D BA[DA8F]                	mov	dx,extend_buf_ptr	;AC018; get extended message pointer
 22860 00002570 C60400                  	mov	byte [si],END_OF_LINE_OUT ; 0
 22861                                  					;AC018; terminate the parameter string
 22862 00002573 A3[DA8F]                	mov	[extend_buf_ptr],ax	;AC018; get message number in control block
 22863 00002576 83F802                  	cmp	ax,2
 22864                                  	;cmp	ax,LessArgs_Ptr 	;AC018; if required parameter missing
 22865 00002579 740D                    	je	short setup_parse_msg_ret
 22866                                  					;AN018;    no subst
 22867 0000257B 8B36[0A9E]              	mov	si,[parse_last] 	;AC018; get start of parameter
 22868 0000257F 8936[129E]              	mov	[string_ptr_2],si 	;AC018; get address of failed string
 22869 00002583 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst
 22870                                  					;AC018; put number of subst in control block
 22871                                  	;mov	byte [extend_buf_sub],1
 22872                                  setup_parse_msg_ret:
 22873 00002588 46                      	inc	si			;AN018; make sure zero flag not set
 22874 00002589 C3                      	retn				;AC018;
 22875                                  
 22876                                  ;============================================================================
 22877                                  ; TENV.ASM, MSDOS 6.0, 1991
 22878                                  ;============================================================================
 22879                                  ; 08/10/2018 - Retro DOS v3.0
 22880                                  
 22881                                  ; TITLE	Part6 COMMAND Transient routines.
 22882                                  
 22883                                  ;	Environment utilities and misc. routines
 22884                                  
 22885                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1690h
 22886                                  
 22887                                  ; 23/02/2023 - Retro DOS v4.0 (& v4.1)
 22888                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 22BDh
 22889                                  
 22890                                  ; ---------------------------------------------------------------------------
 22891                                  
 22892                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 22893                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 22894                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 22895                                  ADD_PROMPT:
 22896 0000258A E8FC00                  	call	delete_prompt	; Delete any existing prompt
 22897 0000258D E8AD01                  	call	scan_double_null
 22898                                  
 22899                                  ADD_PROMPT2:
 22900 00002590 56                      	push	si
 22901 00002591 E89B01                  	call	GETARG
 22902 00002594 5E                      	pop	si
 22903 00002595 7501                    	jnz	short ADD_PROMPT3
 22904                                  ADD_PROMPT_RETN:
 22905 00002597 C3                      	retn
 22906                                  ADD_PROMPT3:			; Pre scan for arguments
 22907 00002598 E87501                  	call	move_name	; Move in name
 22908 0000259B E89101                  	call	GETARG
 22909 0000259E 56                      	push	si
 22910 0000259F EB53                    	jmp	short ADD_NAME
 22911                                  
 22912                                  ;break	The SET command
 22913                                  
 22914                                  ; Input: DS:SI points to a CR terminated string
 22915                                  ; Output: carry flag is set if no room
 22916                                  ;	  otherwise name is added to environment
 22917                                  
 22918                                  DISP_ENVJ:
 22919 000025A1 E9BC00                  	jmp	DISP_ENV
 22920                                  
 22921                                  ADD_NAME_TO_ENVIRONMENT:
 22922 000025A4 E88801                  	call	GETARG
 22923 000025A7 74F8                    	jz	short DISP_ENVJ
 22924                                  
 22925                                  ; check if line contains exactly one equals sign
 22926                                  
 22927 000025A9 31DB                    	xor	bx,bx		; = count is 0
 22928 000025AB 56                      	push	si		; Save pointer to beginning of line
 22929                                  EQLP:
 22930 000025AC AC                      	lodsb			; Get a char
 22931 000025AD 3C0D                    	cmp	al,13 ; 0Dh	; IF CR we're all done
 22932 000025AF 740F                    	je	short QUEQ	
 22933 000025B1 3C3D                    	cmp	al,'='		; Look for = sign	
 22934 000025B3 75F7                    	jne	short EQLP	; not there, get next char
 22935 000025B5 FEC3                    	inc	bl		; Otherwise increment EQ count
 22936 000025B7 803C0D                  	cmp	byte [si],13	; Look for CR following = sign
 22937 000025BA 75F0                    	jne	short EQLP
 22938 000025BC FEC7                    	inc	bh		; Set BH=1 means no parameters
 22939 000025BE EBEC                    	jmp	short EQLP	; And look for more
 22940                                  QUEQ:
 22941 000025C0 5E                      	pop	si		; Restore beginning of line
 22942 000025C1 FECB                    	dec	bl		; Zero flag means only one EQ
 22943 000025C3 7406                    	jz	short ONEQ	; Good line
 22944 000025C5 BA[AD90]                	mov	dx,SYNTMES_PTR
 22945 000025C8 E95907                  	jmp	cerror
 22946                                  ONEQ:
 22947 000025CB 53                      	push	bx
 22948 000025CC E8BD00                  	call	delete_name_in_environment
 22949 000025CF 5B                      	pop	bx
 22950 000025D0 FECF                    	dec	bh
 22951 000025D2 74C3                    	jz	short ADD_PROMPT_RETN
 22952 000025D4 E86601                  	call	scan_double_null
 22953 000025D7 89FB                    	mov	bx,di		; Save ptr to beginning of env var name
 22954 000025D9 E83401                  	call	move_name
 22955 000025DC 56                      	push	si
 22956 000025DD 87DF                    	xchg	bx,di		; Switch ptrs to beginning and end of
 22957                                  				;  env var name
 22958                                  		
 22959                                  ; We want to special-case COMSPEC. This is to reduce the amount of code
 22960                                  ; necessary in the resident for re-reading the transient. Let's look for
 22961                                  ; COMSPEC=
 22962                                  
 22963 000025DF C606[E795]00            	mov	byte [comspec_flag],0 ; MSDOS 6.0 ; clear flag ; M024
 22964 000025E4 BE[0093]                	mov	si,COMSPECSTR ; "COMSPEC="
 22965 000025E7 B90400                  	mov	cx,4
 22966 000025EA F3A7                    	repe	cmpsw
 22967 000025EC 7504                    	jnz	short NOT_COMSPEC
 22968                                  				; Zero set => exact match
 22969 000025EE FE06[E795]              	inc	byte [comspec_flag] ; MSDOS 6.0 ; comspec is changing ; M024
 22970                                  	;mov	byte [COMSPEC_FLAG],1
 22971                                  NOT_COMSPEC:
 22972 000025F2 89DF                    	mov	di,bx		; Load ptr to end of env var name
 22973                                  ADD_NAME:
 22974 000025F4 5E                      	pop	si		; Add the value of the new env var
 22975 000025F5 56                      	push	si		;  to the environment.
 22976                                  ADD_NAME1:
 22977 000025F6 AC                      	lodsb
 22978 000025F7 3C0D                    	cmp	al,13 ; 0Dh
 22979 000025F9 7405                    	je	short ADD_NAME_RET
 22980 000025FB E8AD01                  	call	store_char
 22981 000025FE EBF6                    	jmp	short ADD_NAME1
 22982                                  ADD_NAME_RET:
 22983 00002600 5E                      	pop	si
 22984 00002601 803E[E795]00            	cmp	byte [comspec_flag],0
 22985                                  				; If the new env var is comspec,	
 22986                                  ADD_NAME_JZ_RET:
 22987 00002606 748F                    	jz	short ADD_PROMPT_RETN 
 22988                                  				;  copy the value into the
 22989                                  				;  comspec var in the resident
 22990                                  
 22991                                  ; We have changed the COMSPEC variable. We need to update the resident
 22992                                  ; pieces necessary to reread in the info. First, skip all delimiters
 22993                                  
 22994 00002608 E87903                  	call	scanoff
 22995 0000260B 8E06[639C]              	mov	es,[RESSEG]	;  comspec var in the resident
 22996                                  
 22997                                  ; Make sure that the printer knows where the beginning of the string is
 22998                                  
 22999 0000260F BF[4B02]                	mov	di,ComSpec
 23000 00002612 89FB                    	mov	bx,di
 23001                                  
 23002                                  ; Generate drive letter for display
 23003                                  
 23004 00002614 31C0                    	xor	ax,ax		;g assume no drive first
 23005 00002616 26A2[9402]              	mov	[es:ComDrv],al
 23006                                  	; 23/02/2023
 23007                                  	; MSDOS 6.0 (& 5.0)
 23008 0000261A 50                      	push	ax		;AN000; 3/3/KK
 23009 0000261B 8A04                    	mov	al,[si]		;AN000; 3/3/KK
 23010 0000261D E83F01                  	call	testkanj	;AN000; 3/3/KK	
 23011 00002620 58                      	pop	ax		;AN000; 3/3/KK
 23012 00002621 7518                    	jnz	short _GOTDRIVE
 23013                                  	;
 23014 00002623 807C013A                	cmp	byte [si+1],':'	; drive specified?
 23015 00002627 7512                    	jne	short _GOTDRIVE
 23016 00002629 8A04                    	mov	al,[si]		; get his specified drive
 23017                                  	; 23/02/2023
 23018 0000262B E85B01                  	call	UPCONV
 23019                                  	;call	UPCONV_MAPCALL	; convert to uppercase
 23020 0000262E 2C41                    	sub	al,'A'		; convert to 0-based
 23021 00002630 83C702                  	add	di,2
 23022 00002633 FEC0                    	inc	al		; convert to 1-based number
 23023 00002635 26A2[9402]              	mov	[es:ComDrv],al
 23024                                  
 23025                                  ; Stick the drive letter in the prompt message. Nothing special needs to be
 23026                                  ; done here..
 23027                                  	;add	al,40h
 23028 00002639 0440                    	add	al,'A'-1
 23029                                  _GOTDRIVE:
 23030                                  	; 23/02/2023
 23031                                  	;;mov	[es:0BD9h],di	; MSDOS 3.3 COMMAND.COM offset 1734h
 23032                                  	;mov	[es:PUTBACKSUBSTPTR],di
 23033                                  	;mov	[es:0233h],di	; MSDOS 5.0 COMMAND.COM offset 236Eh
 23034 0000263B 26893E[2A02]            	mov	[es:PutBackComSpec],di
 23035                                  				;g point to beginning of name after drive
 23036                                  	;;mov	[es:0A21h],al	; MSDOS 3.3 COMMAND.COM offset 1739h
 23037                                  	;mov	[es:PUTBACKDRV],al
 23038                                  	;mov	[es:0238h],al	; MSDOS 5.0 COMMAND.COM offset 2373h
 23039 00002640 26A2[2F02]              	mov	[es:PutBackDrv],al
 23040                                  
 23041                                  ; Copy chars until delim      	
 23042                                  
 23043 00002644 89DF                    	mov	di,bx
 23044                                  COPY_COMSPEC:
 23045 00002646 AC                      	lodsb
 23046 00002647 E84203                  	call	DELIM
 23047 0000264A 7407                    	jz	short COPYDONE
 23048 0000264C 3C0D                    	cmp	al,13 ; 0Dh
 23049 0000264E 7403                    	je	short COPYDONE
 23050 00002650 AA                      	stosb
 23051 00002651 EBF3                    	jmp	short COPY_COMSPEC
 23052                                  COPYDONE:
 23053 00002653 30C0                    	xor	al,al		; Null terminate the string and quit
 23054 00002655 AA                      	stosb
 23055                                  	;mov	byte [comspec_flag],0
 23056 00002656 A2[E795]                	mov	[comspec_flag],al ; 0 ; 23/02/2023
 23057 00002659 4F                      	dec	di
 23058 0000265A 26893E[8B02]            	mov	[es:ComSpec_End],di
 23059 0000265F C3                      	retn
 23060                                  
 23061                                  DISP_ENV:
 23062 00002660 8E1E[639C]              	mov	ds,[RESSEG]
 23063 00002664 8E1E[3A04]              	mov	ds,[EnvirSeg]
 23064                                  	; assume ds:nothing
 23065 00002668 31F6                    	xor	si,si
 23066                                  PENVLP:
 23067 0000266A 803C00                  	cmp	byte [si],0
 23068 0000266D 7497                    	jz	short ADD_NAME_JZ_RET
 23069 0000266F BF[06A4]                	mov	di,Arg_Buf
 23070                                  PENVLP2:
 23071 00002672 AC                      	lodsb
 23072 00002673 AA                      	stosb
 23073 00002674 08C0                    	or	al,al
 23074 00002676 75FA                    	jnz	short PENVLP2
 23075 00002678 BA[9C91]                	mov	dx,arg_buf_ptr
 23076 0000267B 1E                      	push	ds
 23077 0000267C 06                      	push	es
 23078 0000267D 1F                      	pop	ds
 23079                                  	; assume ds:nothing
 23080 0000267E E8992D                  	call	Printf_Crlf
 23081 00002681 1F                      	pop	ds
 23082 00002682 EBE6                    	jmp	short PENVLP
 23083                                  
 23084                                  ; =============== S U B	R O U T	I N E =======================================
 23085                                  
 23086                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23087                                  delete_path:
 23088 00002684 BE[F492]                	mov	si,PATH_TEXT ; "PATH="
 23089 00002687 EB03                    	jmp	short delete_name_in_environment
 23090                                  
 23091                                  ; =============== S U B	R O U T	I N E =======================================
 23092                                  
 23093                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23094                                  delete_prompt:
 23095 00002689 BE[F992]                	mov	si,PROMPT_TEXT ; "PROMPT="
 23096                                  
 23097                                  ; ---------------------------------------------------------------------------
 23098                                  
 23099                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23100                                  delete_name_in_environment:
 23101                                  
 23102                                  ; Input: DS:SI points to a "=" terminated string
 23103                                  ; Output: carry flag is set if name not found
 23104                                  ;	  otherwise name is deleted
 23105                                  
 23106 0000268C 56                      	push	si
 23107 0000268D 1E                      	push	ds
 23108 0000268E E82C00                  	call	FIND		; ES:DI points to name
 23109 00002691 7217                    	jc	short del1
 23110 00002693 89FE                    	mov	si,di		; Save it
 23111 00002695 E8BF00                  	call	SCASB2		; Scan for the nul
 23112 00002698 87F7                    	xchg	si,di
 23113                                  ;SR;
 23114                                  ; If we have only one env string, then the double null is lost when the last
 23115                                  ;string is deleted and we have an invalid empty environment with only a
 23116                                  ;single null. To avoid this, we will look for the double null case and then
 23117                                  ;move an extra null char.
 23118                                  ; Bugbug: The only possible problem is that the last pathstring
 23119                                  ;will be followed by a triple null. Is this really a problem?
 23120                                  
 23121                                  	; MSDOS 6.0
 23122 0000269A 26803C00                	cmp	byte [es:si],0	;null char?
 23123 0000269E 7501                    	jnz	short not_dnull	;no, we are at a double null
 23124 000026A0 4E                      	dec	si		;point at the double null
 23125                                  not_dnull:
 23126                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23127 000026A1 E86901                  	call	GETENVSIZ
 23128 000026A4 29F1                    	sub	cx,si
 23129 000026A6 06                      	push	es
 23130 000026A7 1F                      	pop	ds		; ES:DI points to name
 23131                                  				; DS:SI points to next name
 23132 000026A8 F3A4                    	rep	movsb
 23133                                  del1:
 23134 000026AA 1F                      	pop	ds
 23135 000026AB 5E                      	pop	si
 23136                                  find_retn:
 23137 000026AC C3                      	retn
 23138                                  
 23139                                  ; =============== S U B	R O U T	I N E =======================================
 23140                                  
 23141                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23142                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:23E2h
 23143                                  find_path:
 23144 000026AD BE[F492]                	mov	si,PATH_TEXT ; "PATH="
 23145 000026B0 EB03                    	jmp	short find_name_in_environment
 23146                                  
 23147                                  ; =============== S U B	R O U T	I N E =======================================
 23148                                  
 23149                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23150                                  find_prompt:
 23151 000026B2 BE[F992]                	mov	si,PROMPT_TEXT ; "PROMPT="
 23152                                  
 23153                                  ; ---------------------------------------------------------------------------
 23154                                  
 23155                                  find_name_in_environment:
 23156                                  
 23157                                  ; Input: DS:SI points to a "=" terminated string
 23158                                  ; Output: ES:DI points to the arguments in the environment
 23159                                  ;	  zero is set if name not found
 23160                                  ;	  carry flag is set if name not valid format
 23161                                  
 23162 000026B5 E80500                  	call	FIND		; Find the name
 23163 000026B8 72F2                    	jc	short find_retn	; Carry means not found	
 23164 000026BA E99600                  	jmp	SCASB1		; Scan for = sign
 23165                                  
 23166                                  ; ---------------------------------------------------------------------------
 23167                                  	;nop
 23168                                  
 23169                                  ; =============== S U B	R O U T	I N E =======================================
 23170                                  
 23171                                  ; On return of FIND1, ES:DI points to beginning of name
 23172                                  
 23173                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 23174                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 23175                                  FIND:
 23176 000026BD FC                      	cld
 23177 000026BE E84100                  	call	COUNT0		; CX = Length of name
 23178 000026C1 8E06[639C]              	mov	es,[RESSEG]
 23179                                  	;assume es:RESGROUP
 23180 000026C5 268E06[3A04]            	mov	es,[es:EnvirSeg]
 23181                                  	;assume es:NOTHING
 23182 000026CA 31FF                    	xor	di,di
 23183                                  find1:	
 23184 000026CC 51                      	push	cx
 23185 000026CD 56                      	push	si
 23186 000026CE 57                      	push	di
 23187                                  find11:
 23188 000026CF AC                      	lodsb
 23189                                  	; 23/02/2023 
 23190                                  	; MSDOS 6.0 (& 5.0)
 23191 000026D0 E88C00                  	call	testkanj	
 23192 000026D3 740F                    	jz	short notkanj3
 23193 000026D5 4E                      	dec	si
 23194 000026D6 AD                      	lodsw
 23195 000026D7 47                      	inc	di
 23196 000026D8 47                      	inc	di
 23197 000026D9 263B45FE                	cmp	ax,[es:di-2]
 23198 000026DD 7511                    	jne	short find12
 23199 000026DF 49                      	dec	cx
 23200 000026E0 E2ED                    	loop	find11
 23201 000026E2 EB0C                    	jmp	short find12
 23202                                  notkanj3:
 23203 000026E4 E8A200                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 23204                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 23205 000026E7 47                      	inc	di
 23206 000026E8 263A45FF                	cmp	al,[es:di-1]
 23207 000026EC 7502                    	jne	short find12
 23208 000026EE E2DF                    	loop	find11
 23209                                  find12:
 23210 000026F0 5F                      	pop	di
 23211 000026F1 5E                      	pop	si
 23212 000026F2 59                      	pop	cx
 23213 000026F3 74B7                    	jz	short find_retn
 23214 000026F5 51                      	push	cx
 23215 000026F6 E85E00                  	call	SCASB2		; Scan for a nul
 23216 000026F9 59                      	pop	cx
 23217 000026FA 26803D00                	cmp	byte [es:di],0
 23218 000026FE 75CC                    	jnz	short find1
 23219 00002700 F9                      	stc			; Indicate not found
 23220 00002701 C3                      	retn
 23221                                  
 23222                                  ; =============== S U B	R O U T	I N E =======================================
 23223                                  
 23224                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23225                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2437h
 23226                                  COUNT0:
 23227 00002702 1E                      	push	ds
 23228 00002703 07                      	pop	es
 23229                                  	;assume es:nothing
 23230 00002704 89F7                    	mov	di,si
 23231                                  ;COUNT1:
 23232 00002706 57                      	push	di		; Count number of chars until "="
 23233 00002707 E84900                  	call	SCASB1
 23234                                  	; 23/02/2023
 23235                                  ;	jmp	short COUNTX
 23236                                  ;COUNT2:
 23237                                  ;	push	di		; Count number of chars until nul
 23238                                  ;	call	SCASB2
 23239                                  ;COUNTX:
 23240 0000270A 59                      	pop	cx
 23241 0000270B 29CF                    	sub	di,cx
 23242 0000270D 87F9                    	xchg	di,cx
 23243                                  move_name_retn:
 23244 0000270F C3                      	retn
 23245                                  
 23246                                  ; =============== S U B	R O U T	I N E =======================================
 23247                                  
 23248                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23249                                  move_name:
 23250 00002710 803C0D                  	cmp	byte [si],13 ; 0Dh
 23251 00002713 74FA                    	je	short move_name_retn
 23252 00002715 AC                      	lodsb
 23253                                  	; 23/02/2023 
 23254                                  	; MSDOS 6.0 (& 5.0)
 23255 00002716 E84600                  	call	testkanj		
 23256 00002719 7409                    	jz	short notkanj1
 23257 0000271B E88D00                  	call	store_char
 23258 0000271E AC                      	lodsb
 23259 0000271F E88900                  	call	store_char
 23260 00002722 EBEC                    	jmp	short move_name
 23261                                  notkanj1: 
 23262 00002724 E86200                  	call	UPCONV
 23263                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3
 23264 00002727 E88100                  	call	store_char
 23265 0000272A 3C3D                    	cmp	al,'='
 23266 0000272C 75E2                    	jne	short move_name
 23267                                  getarg_retn:
 23268 0000272E C3                      	retn
 23269                                  
 23270                                  ; =============== S U B	R O U T	I N E =======================================
 23271                                  
 23272                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23273                                  GETARG:
 23274 0000272F BE8000                  	mov	si,80h
 23275 00002732 AC                      	lodsb
 23276 00002733 08C0                    	or	al,al
 23277 00002735 74F7                    	jz	short getarg_retn
 23278 00002737 E84A02                  	call	scanoff
 23279 0000273A 3C0D                    	cmp	al,13 ; 0Dh
 23280                                  sdn_retn:
 23281 0000273C C3                      	retn
 23282                                  
 23283                                  ; =============== S U B	R O U T	I N E =======================================
 23284                                  
 23285                                  ; Point ES:DI to the final NULL string. Note that in an empty environment,
 23286                                  ; there is NO double NULL, merely a string that is empty.
 23287                                  
 23288                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23289                                  scan_double_null:
 23290 0000273D 8E06[639C]              	mov	es,[RESSEG]
 23291 00002741 268E06[3A04]            	mov	es,[es:EnvirSeg]
 23292 00002746 31FF                    	xor	di,di
 23293                                  
 23294                                  ; Top cycle-point. If the string here is empty, then we are done
 23295                                  
 23296                                  sdn1:
 23297 00002748 26803D00                	cmp	byte [es:di],0	; nul string?
 23298 0000274C 74EE                    	jz	short sdn_retn	; yep, all done
 23299 0000274E E80600                  	call	SCASB2
 23300 00002751 EBF5                    	jmp	short sdn1
 23301                                  
 23302                                  ; =============== S U B	R O U T	I N E =======================================
 23303                                  
 23304                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23305                                  SCASB1:
 23306 00002753 B03D                    	mov	al,'='		; Scan for an =
 23307 00002755 EB02                    	jmp	short SCASBX
 23308                                  
 23309                                  ; =============== S U B	R O U T	I N E =======================================
 23310                                  
 23311                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23312                                  SCASB2:
 23313 00002757 30C0                    	xor	al,al		; Scan for a nul
 23314                                  
 23315                                  ; ---------------------------------------------------------------------------
 23316                                  
 23317                                  	; 23/02/2023
 23318                                  SCASBX:
 23319 00002759 B90001                  	mov	cx,256
 23320 0000275C F2AE                    	repne	scasb
 23321 0000275E C3                      	retn
 23322                                  
 23323                                  ; =============== S U B	R O U T	I N E =======================================
 23324                                  
 23325                                  ; MSDOS 6.0
 23326                                  
 23327                                  ;Bugbug: This is Kanji stuff - put it in conditionals
 23328                                  
 23329                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 23330                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:249Ah
 23331                                  
 23332                                  	; 26/07/2024 - Retro DOS v5.0 COMMAND.COM
 23333                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2872h
 23334                                  testkanj:
 23335 0000275F 1E                      	push	ds			;AN000;  3/3/KK
 23336 00002760 56                      	push	si			;AN000;  3/3/KK
 23337 00002761 50                      	push	ax			;AN000;  3/3/KK
 23338 00002762 2E8E1E[639C]            	mov	ds,[cs:RESSEG]		;AN000;  Get resident segment
 23339 00002767 C536[BA02]              	lds	si,[Dbcs_Vector_Addr]	;AN000;  get DBCS vector
 23340                                  ktlop:					;AN000;  3/3/KK
 23341 0000276B 833C00                  	cmp	word [si],0		;AN000;  end of Table 3/3/KK
 23342 0000276E 740E                    	je	short notlead 		;AN000;  3/3/KK
 23343 00002770 58                      	pop	ax			;AN000;  3/3/KK
 23344 00002771 50                      	push	ax			;AN000;  3/3/KK
 23345 00002772 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 23346 00002774 7208                    	jb	short notlead 		;AN000;  3/3/KK
 23347 00002776 46                      	inc	si			;AN000;  3/3/KK
 23348 00002777 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 23349 00002779 7607                    	jbe	short islead		;AN000;  3/3/KK
 23350 0000277B 46                      	inc	si			;AN000;  3/3/KK
 23351 0000277C EBED                    	jmp	short ktlop		;AN000;  try another range ; 3/3/KK
 23352                                  notlead:				;AN000;  3/3/KK
 23353 0000277E 31C0                    	xor	ax,ax			;AN000;  set zero 3/3/KK
 23354 00002780 EB03                    	jmp	short ktret		;AN000;  3/3/KK
 23355                                  islead: 				;AN000;  3/3/KK
 23356 00002782 31C0                    	xor	ax,ax			;AN000;  reset zero 3/3/KK
 23357 00002784 40                      	inc	ax			;AN000;  3/3/KK
 23358                                  ktret:					;AN000;  3/3/KK
 23359 00002785 58                      	pop	ax			;AN000;  3/3/KK
 23360 00002786 5E                      	pop	si			;AN000;  3/3/KK
 23361 00002787 1F                      	pop	ds			;AN000;  3/3/KK
 23362 00002788 C3                      	retn				;AN000;  3/3/KK
 23363                                  
 23364                                  ; =============== S U B	R O U T	I N E =======================================
 23365                                  
 23366                                  ; MSDOS 6.0
 23367                                  
 23368                                  ; ****************************************************************
 23369                                  ; *
 23370                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 23371                                  ; *
 23372                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 23373                                  ; *		 the character in AL from the file upper case table
 23374                                  ; *		 in DOS if character if above  ascii 128, else
 23375                                  ; *		 subtracts 20H if between "a" and "z".
 23376                                  ; *
 23377                                  ; * INPUT:	 AL	      char to be upper cased
 23378                                  ; *		 FUCASE_ADDR  set to the file upper case table
 23379                                  ; *
 23380                                  ; * OUTPUT:	 AL	      upper cased character
 23381                                  ; *
 23382                                  ; ****************************************************************
 23383                                  
 23384                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23385                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:24C4h
 23386                                  
 23387                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 23388                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2A6Eh
 23389                                  
 23390                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 23391                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:289Ch
 23392                                  UPCONV:
 23393 00002789 3C80                    	cmp	al,80h			;AN000;  see if char is > ascii 128
 23394 0000278B 7213                    	jb	short oth_fucase	;AN000;  no - upper case math
 23395 0000278D 2C80                    	sub	al,80h			;AN000;  only upper 128 chars in table
 23396 0000278F 1E                      	push	ds			;AN000;
 23397 00002790 53                      	push	bx			;AN000;
 23398 00002791 8E1E[639C]              	mov	ds,[RESSEG]		;AN000;  get resident data segment
 23399                                  	;lds	bx,dword ptr FUCase_Addr+1
 23400 00002795 C51E[B602]              	lds	bx,[FUCase_Addr+1]	;AN000;  get table address
 23401 00002799 83C302                  	add	bx,2			;AN000;  skip over first word
 23402                                  	;xlat	ds:byte ptr [bx]	;AN000;  convert to upper case
 23403 0000279C D7                      	xlat
 23404 0000279D 5B                      	pop	bx			;AN000;
 23405 0000279E 1F                      	pop	ds			;AN000;
 23406                                  	;jmp	short upconv_end	;AN000;  we finished - exit
 23407                                  	; 10/06/2023
 23408                                  upconv_end:
 23409                                  	; 24/02/2023
 23410 0000279F C3                      	retn
 23411                                  oth_fucase:				;AN000;
 23412 000027A0 3C61                    	cmp	al,'a' ; small_a	;AC000; if between "a" and "z",
 23413 000027A2 72FB                    	jb	short upconv_end	;AC000;    subtract 20h to get
 23414 000027A4 3C7A                    	cmp	al,'z' ; small_z	;AC000;    upper case equivalent.
 23415 000027A6 77F7                    	ja	short upconv_end	;AC000;
 23416 000027A8 2C20                    	sub	al,20h			;AC000; Change lower-case to upper
 23417                                  ;upconv_end:	; 10/06/2023		;AN000;
 23418 000027AA C3                      	retn
 23419                                  
 23420                                  ; ---------------------------------------------------------------------------
 23421                                  
 23422                                  ; MSDOS 3.3
 23423                                  
 23424                                  	; 24/02/2023
 23425                                  ;UPCONV_MAPCALL:
 23426                                  	;			; If between "a" and "z"
 23427                                  	;cmp	al,[small_a]
 23428                                  	;jb	short UPCONV_END
 23429                                  	;cmp	al,[small_z]
 23430                                  	;ja	short UPCONV_END
 23431                                  	;sub	al,20h		; Change lower-case to upper
 23432                                  ;UPCONV_END:
 23433                                  	;call	far [cs:MAP_CALL] ; (far) call to char mapping routine 
 23434                                  	;			  ; 	  for (current) country
 23435                                  	;retn
 23436                                  
 23437                                  ; =============== S U B	R O U T	I N E =======================================
 23438                                  
 23439                                  ; STORE A CHAR IN environment, GROWING IT IF NECESSARY
 23440                                  
 23441                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23442                                  store_char:
 23443 000027AB 51                      	push	cx
 23444 000027AC 53                      	push	bx
 23445                                  
 23446                                  	; 24/02/2023
 23447                                  	;;16/10/2018
 23448                                  	; MSDOS 6.0
 23449 000027AD 06                      	push	es		;AN056;*
 23450 000027AE 1E                      	push	ds		;AN056; Save local DS
 23451 000027AF 8E1E[639C]              	mov	ds,[RESSEG]	;AN056; Get resident segment
 23452 000027B3 8E06[3A04]              	mov	es,[EnvirSeg]	;AN056; Get environment segment
 23453 000027B7 1F                      	pop	ds		;AN056; Get local segment back
 23454                                  
 23455                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23456 000027B8 E85200                  	call	GETENVSIZ
 23457 000027BB 89CB                    	mov	bx,cx		; Save room for double nul
 23458 000027BD 83EB02                  	sub	bx,2
 23459 000027C0 39DF                    	cmp	di,bx
 23460 000027C2 723F                    	jb	short store1
 23461 000027C4 50                      	push	ax
 23462 000027C5 51                      	push	cx
 23463 000027C6 53                      	push	bx		; Save Size of environment
 23464 000027C7 E849E0                  	call	FREE_TPA
 23465 000027CA 5B                      	pop	bx
 23466 000027CB 83C302                  	add	bx,2		; Recover true environment size
 23467                                  
 23468 000027CE 81FB0080                	cmp	bx,8000h	; Don't let environment grow > 32K
 23469 000027D2 7203                    	jb	short envsiz_ok
 23470                                  bad_env_size:			;AN056;
 23471 000027D4 F9                      	stc
 23472 000027D5 EB16                    	jmp	short envnoset
 23473                                  	;nop
 23474                                  envsiz_ok:
 23475 000027D7 B104                    	mov	cl,4
 23476 000027D9 D3EB                    	shr	bx,cl		; Convert back to paragraphs
 23477 000027DB 43                      	inc	bx
 23478                                  	; 24/02/2023
 23479                                  	; MSDOS 6.0
 23480 000027DC 8CC1                    	mov	cx,es		;AN056; Get environment segment
 23481 000027DE 01D9                    	add	cx,bx		;AN056; Add in size of environment
 23482 000027E0 83C120                  	add	cx,20h		;AN056; Add in some TPA
 23483 000027E3 8CC8                    	mov	ax,cs		;AN056; Get the transient segment
 23484 000027E5 39C1                    	cmp	cx,ax		;AN056; Are we hitting the transient?
 23485 000027E7 73EB                    	jnb	short bad_env_size
 23486                                  				;AN056; Yes - don't do it!!!
 23487                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23488 000027E9 B44A                    	mov	ah,4Ah
 23489                                  	;mov	ah,SETBLOCK ; 4Ah
 23490 000027EB CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23491                                  			; ES = segment address of block	to change
 23492                                  			; BX = new size	in paragraphs
 23493                                  envnoset:
 23494 000027ED 9C                      	pushf
 23495 000027EE 06                      	push	es
 23496 000027EF 8E06[639C]              	mov	es,[RESSEG]
 23497 000027F3 E82EE0                  	call	ALLOC_TPA
 23498 000027F6 07                      	pop	es
 23499 000027F7 9D                      	popf
 23500 000027F8 59                      	pop	cx
 23501 000027F9 58                      	pop	ax
 23502                                  	; 10/06/2023
 23503 000027FA 7307                    	jnc	short store1
 23504                                  	; 24/02/2023
 23505 000027FC 07                      	pop	es ; MSDOS 6.0	;AN056;*	
 23506                                  	;jnc	short store1
 23507 000027FD BA[F18F]                	mov	dx,ENVERR_PTR
 23508 00002800 E92105                  	jmp	cerror
 23509                                  store1:	
 23510 00002803 AA                      	stosb
 23511 00002804 26C7050000              	mov	word [es:di],0	; NULL IS AT END
 23512                                  	; 24/02/2023
 23513 00002809 07                      	pop	es ; MSDOS 6.0	;AN056;*
 23514 0000280A 5B                      	pop	bx
 23515 0000280B 59                      	pop	cx
 23516 0000280C C3                      	retn
 23517                                  
 23518                                  ; =============== S U B	R O U T	I N E =======================================
 23519                                  
 23520                                  	; 24/02/2023
 23521                                  GETENVSIZ:
 23522                                  
 23523                                  ;Get size of environment in bytes, rounded up to paragraph boundry
 23524                                  ;ES has environment segment
 23525                                  ;Size returned in CX, all other registers preserved
 23526                                  
 23527 0000280D 06                      	push	es
 23528 0000280E 50                      	push	ax
 23529 0000280F 8CC0                    	mov	ax,es
 23530 00002811 48                      	dec	ax		;Point at arena
 23531 00002812 8EC0                    	mov	es,ax
 23532                                  	;mov	ax,[es:3]
 23533 00002814 26A10300                	mov	ax,[es:ARENA.size]
 23534 00002818 B104                    	mov	cl,4
 23535 0000281A D3E0                    	shl	ax,cl		;Convert to bytes
 23536 0000281C 89C1                    	mov	cx,ax
 23537 0000281E 58                      	pop	ax
 23538 0000281F 07                      	pop	es
 23539                                  getenvsiz_retn:
 23540 00002820 C3                      	retn
 23541                                  
 23542                                  ; =============== S U B	R O U T	I N E =======================================
 23543                                  
 23544                                  	; 24/02/2023
 23545                                  RestUDir1:
 23546 00002821 1E                      	push	ds
 23547 00002822 8E1E[639C]              	mov	ds,[RESSEG]
 23548 00002826 803E[A102]00            	cmp	byte [RestDir],0
 23549 0000282B 1F                      	pop	ds
 23550 0000282C 74F2                    	jz	short getenvsiz_retn
 23551                                  
 23552                                  ; =============== S U B	R O U T	I N E =======================================
 23553                                  
 23554                                  	; 24/02/2023
 23555                                  RestUDir:
 23556 0000282E BA[459B]                	mov	dx,USERDIR1
 23557 00002831 B43B                    	mov	ah,3Bh
 23558                                  	;mov	ah,CHDir ; 3Bh
 23559 00002833 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 23560                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 23561 00002835 30C0                    	xor	al,al
 23562                                  	;call	SETREST
 23563                                  	;retn
 23564                                  	; 24/02/2023
 23565 00002837 E9DA08                  	jmp	SETREST
 23566                                  
 23567                                  ;============================================================================
 23568                                  ; TENV2.ASM, MSDOS 6.0, 1991
 23569                                  ;============================================================================
 23570                                  ; 07/10/2018 - Retro DOS v3.0
 23571                                  
 23572                                  ; TITLE	Part6 COMMAND Transient routines.
 23573                                  
 23574                                  ;	Environment utilities and misc. routines
 23575                                  
 23576                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 18C2h
 23577                                  
 23578                                  ; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23579                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2577h
 23580                                  
 23581                                  ; ---------------------------------------------------------------------------
 23582                                  
 23583                                  ; ****************************************************************
 23584                                  ; *
 23585                                  ; * ROUTINE:	 $CHDIR
 23586                                  ; *
 23587                                  ; * FUNCTION:	 Entry point for CHDIR command. Parse the command
 23588                                  ; *		 line. If path is found, CHDIR to path. If a drive
 23589                                  ; *		 letter is found, get and display the current dir
 23590                                  ; *		 of the specified drive. If nothing is found, get
 23591                                  ; *		 and display the current dir of the default drive.
 23592                                  ; *
 23593                                  ; * INPUT:	 command line at offset 81H
 23594                                  ; *
 23595                                  ; * OUTPUT:	 none
 23596                                  ; *
 23597                                  ; ****************************************************************
 23598                                  
 23599                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23600                                  
 23601                                  	; 10/06/2023 - Retro DOS v4.2 COMMAND.COM
 23602                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B21h
 23603                                  
 23604                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 23605                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:294Fh
 23606                                  
 23607                                  _$CHDIR:
 23608                                  	; MSDOS 6.0
 23609 0000283A BE8100                  	mov	si,81h
 23610 0000283D BF[9596]                	mov	di,PARSE_CHDIR
 23611                                  				;AN000; Get address of PARSE_CHDIR
 23612 00002840 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 23613 00002842 31D2                    	xor	dx,dx		;AN000;
 23614 00002844 E812FD                  	call	Parse_With_Msg	;AC018; call parser
 23615                                  	
 23616                                  	;cmp	ax,-1
 23617                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 23618                                  	;je	short bwdj	; No args
 23619                                  	;;cmp	ax,0
 23620                                  	;;cmp	ax,RESULT_NO_ERROR
 23621                                  	;			;AC000; did we have an error?
 23622                                  	;or	ax,ax ; ax = 0 ?
 23623                                  	;jnz	short ChDirErr	;AC018; yes - exit
 23624                                  	
 23625                                  	; 10/06/2023
 23626 00002847 40                      	inc	ax	; cmp ax,-1
 23627 00002848 7414                    	jz	short bwdj ; 0FFFFh -> 0
 23628 0000284A 48                      	dec	ax	; cmp ax,0
 23629 0000284B 756F                    	jnz	short ChDirErr ; 1 -> 0
 23630                                  	; ax = 0
 23631                                  
 23632                                  	;cmp	byte [PARSE1_TYPE],6
 23633 0000284D 803E[5BA6]06            	cmp	byte [PARSE1_TYPE],result_drive
 23634                                  				;AC000; was a drive entered?
 23635 00002852 7511                    	jne	short REALCD	; no
 23636                                  
 23637                                  ; D: was found. See if there is anything more.
 23638                                  
 23639 00002854 BF[9596]                	mov	di,PARSE_CHDIR
 23640                                  				;AC000; get address of parse_chdir
 23641 00002857 31D2                    	xor	dx,dx		;AC000;
 23642 00002859 E8E7FC                  	call	parse_check_eol ;AC000; call parser
 23643 0000285C 755E                    	jnz	short ChDirErr	;AC000;
 23644                                  bwdj:
 23645 0000285E E88AF9                  	call	build_dir_for_chdir
 23646                                  				; Drive only specified
 23647 00002861 E81301                  	call	CRLF2
 23648                                  chdir_retn:
 23649 00002864 C3                      	retn
 23650                                  
 23651                                  	; 24/02/2023
 23652                                  	; MSDOS 3.3
 23653                                  	;mov	ax,[COMSW]
 23654                                  	;or	ax,[ALLSWITCH]
 23655                                  	;mov	dx,BADPARMPTR
 23656                                  	;jnz	short CHDIR_ERR
 23657                                  	;mov	si,81h
 23658                                  	;call	SCANOFF
 23659                                  	;cmp	al,0Dh		; are we at end of line?
 23660                                  	;je	short BWDJ	; No args
 23661                                  	;inc	si
 23662                                  	;lodsb
 23663                                  	;cmp	al,':'
 23664                                  	;jne	short REALCD
 23665                                  	;push	si
 23666                                  	;call	SCANOFF
 23667                                  	;pop	si
 23668                                  	;cmp	al,0Dh		; was a drive entered?
 23669                                  	;jne	short REALCD	; no
 23670                                  ;BWDJ:
 23671                                  	;call	BUILD_DIR_FOR_CHDIR ; Drive only specified
 23672                                  	;call	CRLF2
 23673                                  ;CHDIR_RETN:
 23674                                  	;retn
 23675                                  
 23676                                  	; 24/02/2023
 23677                                  	; MSDOS 6.0
 23678                                  REALCD:
 23679 00002865 56                      	push	si		;AN000; save position in line
 23680 00002866 C536[5FA6]              	lds	si,[PARSE1_ADDR]
 23681                                  				;AN000; get address of filespec
 23682 0000286A E86908                  	call	Move_To_SrcBuf	;AN000; move to srcbuf
 23683 0000286D 5E                      	pop	si		;AN000; restore position in line
 23684 0000286E BF[9596]                	mov	di,PARSE_CHDIR	;AC000; get address of parse_chdir
 23685 00002871 31D2                    	xor	dx,dx		;AC000;
 23686 00002873 E8CDFC                  	call	parse_check_eol ;AC000; call parser
 23687 00002876 7544                    	jnz	short ChDirErr	;AC000;
 23688                                  	
 23689 00002878 E8A206                  	call	SETPATH
 23690 0000287B F606[2D9E]02            	test	byte [DestInfo],2
 23691 00002880 7519                    	jnz	short BadChDir
 23692                                  
 23693                                  	; 26/04/2023
 23694 00002882 B43B                    	mov	ah,3Bh
 23695                                  	;mov	ah,CHDir
 23696                                  	;int	21h
 23697                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23698 00002884 E833DD                  	call    int_21h_indirect
 23699 00002887 73DB                    	jnc	short chdir_retn
 23700                                  	
 23701 00002889 E8BDF7                  	call	get_ext_error_number
 23702                                  				;AN022; get the extended error
 23703 0000288C 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 23704                                  				;AN022; see if path not found
 23705 0000288F 740A                    	je	short BadChDir	;AN022; yes - issue old message
 23706                                  ;SR;
 23707                                  ; We want to issue "Invalid Directory" message even if the path is valid
 23708                                  ;but is not a directory. The extended error returns "Access denied" which
 23709                                  ;is kind of confusing. Issue the old message if access denied error is 
 23710                                  ;returned
 23711                                  
 23712 00002891 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 23713 00002894 7405                    	je	short BadChDir
 23714                                  	
 23715 00002896 E8A200                  	call	set_ext_error_subst ;AN022;
 23716 00002899 EB21                    	jmp	short ChDirErr	;AN022;
 23717                                  
 23718                                  BadChDir:
 23719 0000289B BA[3A91]                	mov	dx,badcd_ptr
 23720                                  ;ChDirErr:
 23721                                  ;	call	std_eprintf
 23722                                  ;mkdir_retn:
 23723                                  	;retn
 23724                                  	; 24/02/2023
 23725 0000289E EB1C                    	jmp	short ChDirErr	;AN022;
 23726                                  
 23727                                  	; 24/02/2023
 23728                                  	; MSDOS 3.3
 23729                                  ;REALCD:
 23730                                  	;call	SETPATH
 23731                                  	;test	byte [DESTINFO],2
 23732                                  	;jnz	short BADCHDIR
 23733                                  	;mov	ah,CHDir ; 3Bh
 23734                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 23735                                  	;		; DS:DX	-> ASCIZ directory name	(may include drive)
 23736                                  	;jnc	short CHDIR_RETN
 23737                                  ;BADCHDIR:
 23738                                  	;mov	dx,BADCDPTR
 23739                                  ;CHDIR_ERR:
 23740                                  	;call	STD_EPRINTF
 23741                                  ;MKDIR_RETN:
 23742                                  	;retn
 23743                                  
 23744                                  ; =============== S U B	R O U T	I N E =======================================
 23745                                  
 23746                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23747                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:25E2h
 23748                                  
 23749                                  	; 11/06/2023 - Retro DOS v4.2
 23750                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2B8Ch
 23751                                  
 23752                                  	; 04/08/2024 - Retro DOS v5.0
 23753                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:29BBh
 23754                                  
 23755                                  _$MKDIR:
 23756                                  	; MSDOS 6.0
 23757 000028A0 E86700                  	call	SETRMMK
 23758 000028A3 7217                    	jc	short MkDirErr
 23759                                  
 23760 000028A5 B439                    	mov	ah,39h
 23761                                  	;mov	ah,MKDIR
 23762                                  	;int	21h
 23763                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23764 000028A7 E810DD                  	call    int_21h_indirect
 23765 000028AA 7313                    	jnc	short mkdir_retn
 23766                                  
 23767 000028AC E89AF7                  	call	get_ext_error_number	
 23768                                  				;AN022; get the extended error
 23769 000028AF 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 23770                                  				;AN022; see if path not found
 23771 000028B2 742C                    	je	short MD_other_err
 23772                                  				;AN022; yes - issue old message
 23773 000028B4 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 23774                                  				;AN022; access denied?
 23775 000028B7 7407                    	je	short badmderr	;AN022; yes - see if file exists
 23776                                  	
 23777 000028B9 E87F00                  	call	set_ext_error_subst
 23778                                  				;AN022;
 23779                                  	;jmp	short MkDirerr	;AC022; yes - go print it
 23780                                  	; 24/02/2023
 23781                                  ChDirErr:
 23782                                  MkDirErr:
 23783                                  RmDirErr:
 23784 000028BC E8612B                  	call	std_eprintf
 23785                                  mkdir_retn:
 23786                                  rmdir_retn:
 23787 000028BF C3                      	retn
 23788                                  	
 23789                                  badmderr:
 23790 000028C0 BA[9199]                	mov	dx,SRCXNAME	;AN006; Set Disk transfer address
 23791 000028C3 B41A                    	mov	ah,1Ah
 23792                                  	;mov	ah,Set_DMA	;AN006;
 23793                                  	;int	21h		;AN006;
 23794                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23795 000028C5 E8F2DC                  	call    int_21h_indirect
 23796                                  	
 23797 000028C8 B44E                    	mov	ah,4Eh
 23798                                  	;mov	ah,Find_First	;AN006; see if file/dir exists
 23799                                  	;mov	cx,10h
 23800 000028CA B91000                  	mov	cx,ATTR_DIRECTORY
 23801                                  				;AN006;   search for directory
 23802                                  	;int	21h		;AN006;
 23803                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23804 000028CD E8EADC                  	call    int_21h_indirect
 23805 000028D0 720E                    	jc	short MD_other_err
 23806                                  				;AN006; doesn't exist - must be something else
 23807                                  	;;mov	dl,SRCXNAME.find_buf_attr
 23808                                  				;AN006; we found a file/dir
 23809                                  	;mov	dl,[SRCXNAME+21] 
 23810 000028D2 8A16[A699]              	mov	dl,[SRCXNAME+FIND_BUF.ATTR]
 23811 000028D6 F6C210                  	test	dl,ATTR_DIRECTORY
 23812                                  				;AN006; was it a directory?
 23813 000028D9 7405                    	jz	short MD_other_err
 23814                                  				;AN006; no - must have been a file
 23815 000028DB BA[4992]                	mov	dx,MD_EXISTS_PTR
 23816                                  				;AN006; set up already exists error
 23817 000028DE EBDC                    	jmp	short MkDirErr	;AN006; make sure we didn't have network error
 23818                                  MD_other_err:			;AN006;
 23819 000028E0 BA[3D91]                	mov	dx,badmkd_ptr
 23820                                  ;MkDirErr:
 23821                                  	;call	std_eprintf
 23822                                  	;retn
 23823                                  	; 24/02/2023
 23824 000028E3 EBD7                    	jmp	short MkDirErr
 23825                                  
 23826                                  	; 24/02/2023
 23827                                  	; MSDOS 3.3
 23828                                  	;call	SETRMMK
 23829                                  	;jb	short MKDIRERR
 23830                                  	;mov	ah,MKDIR ; 39h
 23831                                  	;int	21h	; DOS -	2+ - CREATE A SUBDIRECTORY (MKDIR)
 23832                                  	;		; DS:DX	-> ASCIZ pathname (may include drive)
 23833                                  	;jnc	short MKDIR_RETN
 23834                                  	;mov	dx,BADMKDPTR
 23835                                  	;call	GET_EXT_ERR_NUMBER
 23836                                  ;MKDIRERR:
 23837                                  	;call	STD_EPRINTF
 23838                                  	;retn
 23839                                  
 23840                                  ; =============== S U B	R O U T	I N E =======================================
 23841                                  
 23842                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23843                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2656h
 23844                                  	
 23845                                  	; 11/06/2023 - Retro DOS v4.2
 23846                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2C00h
 23847                                  	
 23848                                  	; 04/08/2024 - Retro DOS v5.0
 23849                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2A32h
 23850                                  
 23851                                  _$RMDIR:
 23852 000028E5 E82200                  	call	SETRMMK
 23853 000028E8 72D2                    	jb	short RmDirErr
 23854 000028EA 7519                    	jnz	short badrderr
 23855                                  
 23856 000028EC B43A                    	mov	ah,3Ah
 23857                                  	;mov	ah,RMDIR ; 3Ah
 23858                                  	;int	21h	; DOS -	2+ - REMOVE A DIRECTORY	ENTRY (RMDIR)
 23859                                  			; DS:DX	-> ASCIZ pathname (may include drive)
 23860                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 23861 000028EE E8C9DC                  	call    int_21h_indirect
 23862 000028F1 73CC                    	jnc	short rmdir_retn ; 24/02/2023
 23863                                  
 23864                                  	; 24/02/2023
 23865                                  	; MSDOS 6.0
 23866 000028F3 E853F7                  	call	get_ext_error_number
 23867                                  				;AN022; get the extended error
 23868 000028F6 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 23869                                  				;AN022; see if path not found
 23870 000028F9 740A                    	je	short badrderr	;AN022; yes - issue old message
 23871 000028FB 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 23872                                  				;AN022; access denied?
 23873 000028FE 7405                    	je	short badrderr	;AN022; yes - issue old message
 23874                                  
 23875 00002900 E83800                  	call	set_ext_error_subst
 23876                                  				;AN022;
 23877 00002903 EBB7                    	jmp	short RmDirErr	;AC022; yes - go print it
 23878                                  
 23879                                  	; MSDOS 6.0
 23880                                  badrderr:
 23881                                  	; 24/02/2023
 23882 00002905 BA[4091]                	mov	dx,badrmd_ptr
 23883 00002908 EBB2                    	jmp	short RmDirErr
 23884                                  ;RmDirErr:
 23885                                  	;call	std_eprintf
 23886                                  ;;rmdir_retn
 23887                                  	;retn
 23888                                  
 23889                                  	; 24/02/2023
 23890                                  	; MSDOS 3.3
 23891                                  	;mov	dx,BADRMDPTR
 23892                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 23893                                  ;RMDIRERR:
 23894                                  	;call	STD_EPRINTF
 23895                                  ;RMDIR_RETN:
 23896                                  	;retn
 23897                                  
 23898                                  ; =============== S U B	R O U T	I N E =======================================
 23899                                  
 23900                                  ; 	<Common MkDir/RmDir set up code>
 23901                                  ;****************************************************************
 23902                                  ;*
 23903                                  ;* ROUTINE:	SETRMMK
 23904                                  ;*
 23905                                  ;* FUNCTION:	Parse routine for the internal MKDIR and RMDIR
 23906                                  ;*		commands. Parses the command line for a required
 23907                                  ;*		filespec.
 23908                                  ;*
 23909                                  ;* INPUT:	command line at offset 81H
 23910                                  ;*
 23911                                  ;* OUTPUT:	carry clear
 23912                                  ;*		    DS:DX points to ASCIIZ argument
 23913                                  ;*		carry set
 23914                                  ;*		    DS:DX has error message pointer
 23915                                  ;*
 23916                                  ;****************************************************************
 23917                                  
 23918                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 23919                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2624h
 23920                                  	
 23921                                  	; 11/06/2023 - Retro DOS v4.2
 23922                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2BCEh
 23923                                  
 23924                                  	; 04/08/2024 - Retro DOS v5.0
 23925                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2A00h
 23926                                  
 23927                                  SETRMMK:
 23928                                  	; MSDOS 6.0
 23929 0000290A BE8100                  	mov	si,81h
 23930 0000290D BF[8C96]                	mov	di,PARSE_MRDIR 	;AN000; Get address of PARSE_MRDIR
 23931 00002910 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 23932 00002912 31D2                    	xor	dx,dx		;AN000;
 23933                                  	;invoke	Parse_With_Msg	;AC000; call parser
 23934 00002914 E842FC                  	call	Parse_With_Msg
 23935                                  	;cmp	ax,0
 23936                                  	;cmp	ax,RESULT_NO_ERROR
 23937 00002917 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 23938 00002919 7519                    	jnz	short noargerr	;AC000; yes - exit
 23939                                  
 23940 0000291B BF[9199]                	mov	di,SRCXNAME
 23941                                  				;AN000; get address of srcxname
 23942 0000291E 57                      	push	di		;AN000; save address
 23943 0000291F 56                      	push	si		;AN000; save position in line
 23944 00002920 C536[5FA6]              	lds	si,[PARSE1_ADDR]
 23945                                  				;AN000; get address of path
 23946                                  mrdir_move_filename:		;AN000; put filespec in srcxname
 23947 00002924 AC                      	lodsb			;get a char from buffer
 23948 00002925 AA                      	stosb			;AN000; store in srcxname
 23949                                  	;cmp	al,0
 23950                                  	;cmp	al,END_OF_LINE_OUT
 23951 00002926 20C0                    	and	al,al ; 0 ?	;AC000; it char a terminator?
 23952 00002928 75FA                    	jnz	short mrdir_move_filename
 23953                                  				;AC000; no - keep moving
 23954 0000292A 5E                      	pop	si		;AN000; get line position back
 23955                                  
 23956                                  ; we have scanned an argument.	See if any args beyond.
 23957                                  
 23958 0000292B BF[8C96]                	mov	di,PARSE_MRDIR
 23959 0000292E E812FC                  	call	parse_check_eol ;AC000; are we at end of line?
 23960 00002931 5A                      	pop	dx		;AC000; get address of SRCXNAME
 23961                                  	;retz			;yes - return no error
 23962 00002932 7406                    	jz	short setrmmk_retn
 23963                                  noargerr:
 23964 00002934 BA[DA8F]                	mov	dx,extend_buf_ptr
 23965                                  				;AC000; get extended message pointer
 23966 00002937 31C0                    	xor	ax,ax
 23967 00002939 F9                      	stc
 23968                                  setrmmk_retn:
 23969 0000293A C3                      	retn
 23970                                  
 23971                                  	; 24/02/2023
 23972                                  	; MSDOS 3.3
 23973                                  ;SETRMMK:
 23974                                  	;mov	si,81h
 23975                                  	;call	SCANOFF
 23976                                  	;cmp	al,0Dh
 23977                                  	;je	short NOARGERR
 23978                                  	;mov	dx,si
 23979                                  ;SETRMMK1:
 23980                                  	;lodsb
 23981                                  	;call	DELIM
 23982                                  	;jz	short SETRMMK3
 23983                                  	;cmp	al,0Dh
 23984                                  	;jne	short SETRMMK1
 23985                                  	;mov	byte [si-1],0
 23986                                  ;SETRMMK2:
 23987                                  	;retn
 23988                                  ;SETRMMK3:
 23989                                  	;mov	byte [si-1],0
 23990                                  	;push	si
 23991                                  	;call	SCANOFF
 23992                                  	;pop	si
 23993                                  	;cmp	al,0Dh
 23994                                  	;je	short SETRMMK2
 23995                                  ;NOARGERR:
 23996                                  	;mov	dx,BADARGSPTR
 23997                                  	;xor	ax,ax
 23998                                  	;stc
 23999                                  ;SETRMMK_RETN:
 24000                                  	;retn
 24001                                  
 24002                                  ; =============== S U B	R O U T	I N E =======================================
 24003                                  
 24004                                  ; MSDOS 6.0
 24005                                  
 24006                                  ;****************************************************************
 24007                                  ;*
 24008                                  ;* ROUTINE:	Set_ext_error_subst
 24009                                  ;*
 24010                                  ;* FUNCTION:	Sets up substitution for extended error
 24011                                  ;*
 24012                                  ;* INPUT:	AX - extended error number
 24013                                  ;*		DX - offset of string
 24014                                  ;*
 24015                                  ;* OUTPUT:	Extend_Buf_Ptr set up for STD_EPRINTF
 24016                                  ;*
 24017                                  ;****************************************************************
 24018                                  
 24019                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24020                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:267Ch
 24021                                  set_ext_error_subst:
 24022                                  	;mov	byte [msg_disp_class],1
 24023 0000293B C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class
 24024                                  					;AN022; set up extended error msg class
 24025 00002940 8916[129E]              	mov	[string_ptr_2],dx 	;AN022; get address of failed string
 24026                                  	;mov	byte [extend_buf_sub],1
 24027 00002944 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst
 24028                                  	;AN022; put number of subst in control block
 24029 00002949 BA[DA8F]                	mov	dx,extend_buf_ptr 	;AN022; get extended message pointer
 24030 0000294C A3[DA8F]                	mov	[extend_buf_ptr],ax	;AN022; get message number in control block
 24031                                  savudir_err_retn: ; 24/02/2023
 24032 0000294F C3                      	retn				;AN022; return
 24033                                  
 24034                                  ; =============== S U B	R O U T	I N E =======================================
 24035                                  
 24036                                  ; <SavUDir - preserve the users current directory on a particular drive>
 24037                                  
 24038                                  ; SavUDir - move the user's current directory on a drive into UserDir1
 24039                                  ; SavUDir1 - move the user's current directory on a drive into a specified
 24040                                  ;   buffer
 24041                                  ;
 24042                                  ;   Inputs:	DL has 1-based drive number
 24043                                  ;		ES:DI has destination buffer (SavUDir1 only)
 24044                                  ;   Outputs:	Carry Clear
 24045                                  ;		    DS = TranGroup
 24046                                  ;		Carry Set
 24047                                  ;		    AX has error code
 24048                                  ;   Registers Modified: AX, SI
 24049                                  
 24050                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24051                                  SAVUDIR:
 24052 00002950 BF[459B]                	mov	di,USERDIR1
 24053                                  ; --------------
 24054                                  SAVUDIR1:
 24055 00002953 88D0                    	mov	al,dl
 24056 00002955 0440                    	add	al,'@' ; 40h
 24057 00002957 3C40                    	cmp	al,'@' ; 40h
 24058 00002959 7506                    	jne	short GOTUDRV
 24059 0000295B 0206[779C]              	add	al,[CURDRV]
 24060 0000295F FEC0                    	inc	al		; A = 1
 24061                                  GOTUDRV:
 24062 00002961 AA                      	stosb
 24063 00002962 8A26[689C]              	mov	ah,[DIRCHAR]
 24064 00002966 B03A                    	mov	al,':' ; 3Ah
 24065 00002968 AB                      	stosw
 24066 00002969 06                      	push	es
 24067 0000296A 1F                      	pop	ds
 24068 0000296B 89FE                    	mov	si,di
 24069 0000296D B447                    	mov	ah,47h ; 24/02/2023
 24070                                  	;mov	ah,CURRENT_DIR	; 47h
 24071                                  	;int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 24072                                  			; DL = drive (0=default,1=A,etc.)
 24073                                  			; DS:SI	points to 64-byte buffer area
 24074                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 24075 0000296F E848DC                  	call	int_21h_indirect
 24076 00002972 72DB                    	jc	short savudir_err_retn ; 24/02/2023
 24077 00002974 0E                      	push	cs
 24078 00002975 1F                      	pop	ds
 24079 00002976 C3                      	retn
 24080                                  
 24081                                  ; =============== S U B	R O U T	I N E =======================================
 24082                                  
 24083                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24084                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:26B7h
 24085                                  CRLF2:
 24086 00002977 52                      	push	dx
 24087 00002978 BA[FD91]                	mov	dx,acrlf_ptr
 24088 0000297B 1E                      	push	ds
 24089 0000297C 0E                      	push	cs
 24090 0000297D 1F                      	pop	ds
 24091 0000297E E8A72A                  	call	std_printf
 24092 00002981 1F                      	pop	ds
 24093 00002982 5A                      	pop	dx
 24094 00002983 C3                      	retn
 24095                                  
 24096                                  ; =============== S U B	R O U T	I N E =======================================
 24097                                  
 24098                                  ; These routines (SCANOFF, DELIM) are called in batch processing when DS
 24099                                  ; may NOT be TRANGROUP
 24100                                  
 24101                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24102                                  scanoff:
 24103 00002984 AC                      	lodsb
 24104 00002985 E80400                  	call	DELIM
 24105 00002988 74FA                    	jz	short scanoff
 24106 0000298A 4E                      	dec	si		; Point to first non-delimiter
 24107                                  scanoff_retn:
 24108 0000298B C3                      	retn
 24109                                  
 24110                                  ; =============== S U B	R O U T	I N E =======================================
 24111                                  
 24112                                  ; Input:    AL is character to classify
 24113                                  ; Output:   Z set if delimiter
 24114                                  ;	    NZ set otherwise
 24115                                  ; Registers modified: none
 24116                                  
 24117                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24118                                  DELIM:
 24119 0000298C 3C20                    	cmp	al,' '	 ;20h
 24120 0000298E 74FB                    	je	short scanoff_retn
 24121 00002990 3C3D                    	cmp	al,'='  ; 3Dh
 24122 00002992 74F7                    	je	short scanoff_retn
 24123 00002994 3C2C                    	cmp	al,','	; 2Ch
 24124 00002996 74F3                    	je	short scanoff_retn
 24125 00002998 3C3B                    	cmp	al,';'	 ;3Bh
 24126 0000299A 74EF                    	je	short scanoff_retn
 24127 0000299C 3C09                    	cmp	al,9		; Check for TAB character
 24128 0000299E 74EB                    	je	short scanoff_retn
 24129 000029A0 3C0A                    	cmp	al,0Ah		; Check for line feed character - BAS
 24130 000029A2 C3                      	retn
 24131                                  
 24132                                  
 24133                                  ; =============== S U B	R O U T	I N E =======================================
 24134                                  
 24135                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24136                                  FCB_TO_ASCZ:			
 24137                                  	; Convert DS:SI to ASCIZ ES:DI
 24138 000029A3 B90800                  	mov	cx,8
 24139                                  MAINNAME:
 24140 000029A6 AC                      	lodsb
 24141 000029A7 3C20                    	cmp	al,' ' ; 20h
 24142 000029A9 7401                    	jz	short SKIPSPC
 24143 000029AB AA                      	stosb
 24144                                  SKIPSPC:
 24145 000029AC E2F8                    	loop	MAINNAME
 24146 000029AE AC                      	lodsb
 24147 000029AF 3C20                    	cmp	al,' '
 24148 000029B1 740F                    	je	short GOTNAME
 24149 000029B3 88C4                    	mov	ah,al
 24150                                  	; 24/02/2023
 24151 000029B5 B02E                    	mov	al,'.' ; 2Eh  ; MSDOS 5.0 (& 6.0)
 24152                                  	;mov	al,[DOT_CHR]  ; MSDOS 3.3
 24153                                  	;stosb
 24154                                  	;xchg	al,ah
 24155                                  	;stosb
 24156                                  	; 24/02/2023
 24157 000029B7 AB                      	stosw
 24158 000029B8 B102                    	mov	cl,2
 24159                                  EXTNAME:
 24160 000029BA AC                      	lodsb
 24161 000029BB 3C20                    	cmp	al,' '
 24162 000029BD 7403                    	je	short GOTNAME
 24163 000029BF AA                      	stosb
 24164 000029C0 E2F8                    	loop	EXTNAME
 24165                                  GOTNAME:
 24166 000029C2 30C0                    	xor	al,al
 24167 000029C4 AA                      	stosb
 24168                                  STRCOMP_RETN:
 24169 000029C5 C3                      	retn
 24170                                  
 24171                                  ; =============== S U B	R O U T	I N E =======================================
 24172                                  
 24173                                  ; Compare ASCIZ DS:SI with ES:DI.
 24174                                  ; SI,DI destroyed.
 24175                                  
 24176                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24177                                  STRCOMP:	
 24178 000029C6 A6                      	cmpsb
 24179 000029C7 75FC                    	jnz	short STRCOMP_RETN ; Strings not equal
 24180 000029C9 807CFF00                	cmp	byte [si-1],0	; Hit NUL terminator?
 24181                                  	;jz	short STRCOMP_RETN ; Yes, strings equal
 24182                                  	;jmp	short STRCOMP	; Equal so far, keep going
 24183                                  	; 24/02/2023
 24184 000029CD 75F7                    	jnz	short STRCOMP
 24185 000029CF C3                      	retn
 24186                                  
 24187                                  ; =============== S U B	R O U T	I N E =======================================
 24188                                  
 24189                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24190                                  CRPRINT:
 24191 000029D0 50                      	push	ax
 24192                                  	;mov	al,13	; 0Dh
 24193 000029D1 B00D                    	mov	al,0Dh
 24194 000029D3 51                      	push	cx
 24195 000029D4 57                      	push	di
 24196 000029D5 89D7                    	mov	di,dx
 24197 000029D7 B9FFFF                  	mov	cx,65535 ; 0FFFFh
 24198 000029DA 06                      	push	es
 24199 000029DB 1E                      	push	ds
 24200 000029DC 07                      	pop	es
 24201 000029DD F2AE                    	repne	scasb		; LOOK FOR TERMINATOR
 24202 000029DF C645FF00                	mov	byte [di-1],0	; nul terminate the string
 24203 000029E3 07                      	pop	es
 24204 000029E4 8916[129E]              	mov	[string_ptr_2],dx
 24205                                  	;mov	dx,STRINGBUF2PTR  ; MSDOS 3.3 (Retro DOS v3.0 COMMAND.COM)
 24206 000029E8 BA[E291]                	mov	dx,string_buf_ptr ; MSDOS 5.0 (& 6.0)
 24207 000029EB E83A2A                  	call	std_printf
 24208                                  	;mov	byte [di-1],13
 24209 000029EE C645FF0D                	mov	byte [di-1],0Dh	; now put the CR back
 24210 000029F2 7204                    	jb	short error_output
 24211 000029F4 5F                      	pop	di
 24212 000029F5 59                      	pop	cx
 24213 000029F6 58                      	pop	ax
 24214 000029F7 C3                      	retn
 24215                                  
 24216                                  ; ---------------------------------------------------------------------------
 24217                                  
 24218                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24219                                  error_output:
 24220 000029F8 0E                      	push	cs
 24221 000029F9 1F                      	pop	ds
 24222 000029FA 8E06[639C]              	mov	es,[RESSEG]
 24223 000029FE BA[EE8F]                	mov	dx,NOSPACE_PTR
 24224 00002A01 26803E[1303]00          	cmp	byte [es:PipeFlag],0
 24225 00002A07 7406                    	jz	short go_to_error
 24226 00002A09 E89909                  	call	PipeOff
 24227 00002A0C BA[6091]                	mov	dx,PIPEEMES_PTR
 24228                                  go_to_error:
 24229 00002A0F E91203                  	jmp	cerror
 24230                                  
 24231                                  ; =============== S U B	R O U T	I N E =======================================
 24232                                  
 24233                                  ;---- Mod for path invocation ----
 24234                                  
 24235                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 24236                                  pathchrcmp:
 24237                                  	; 18/03/2023	
 24238                                  	;push	ax
 24239                                  	;mov	ah,'/' ; 2Fh
 24240                                  	;cmp	[SWITCHAR],ah
 24241 00002A12 803E[679C]2F            	cmp	byte [SWITCHAR],'/' ; 2Fh
 24242 00002A17 7404                    	je	short noslasht
 24243 00002A19 3C2F                    	cmp	al,'/'
 24244 00002A1B 7402                    	je	short pccont
 24245                                  noslasht:
 24246 00002A1D 3C5C                    	cmp	al,'\' ; 5Ch
 24247                                  pccont:	
 24248                                  	;pop	ax
 24249 00002A1F C3                      	retn
 24250                                  
 24251                                  ; =============== S U B	R O U T	I N E =======================================
 24252                                  
 24253                                  ; PATHCRUNCH -
 24254                                  ;
 24255                                  ; ENTRY FCB (in PSP) contains drive # to crunch on
 24256                                  ;       PathPos = ptr to string with pathname in it
 24257                                  ;       PathCnt = length of string
 24258                                  ;
 24259                                  ; EXIT  PathPos = ptr after pathname (w/ NULL) in string
 24260                                  ;       PathCnt = length left in string
 24261                                  ;       DestIsDir = nonzero if pathname delimiter char's found in pathname
 24262                                  ;       DestInfo<bit1> = set if wildcard char's found in pathname
 24263                                  ;       If path crunched successfully,
 24264                                  ;         CY = clear
 24265                                  ;         Current directory is changed to directory in pathname
 24266                                  ;         UserDir1 contains previous directory for use by RestUDir
 24267                                  ;         RestDir = nonzero to flag later restoration of user's dir
 24268                                  ;         DestTail = ptr to beginning of filename
 24269                                  ;         If filename found in pathname,
 24270                                  ;           ZR = clear
 24271                                  ;           FCB filename fields contain filename
 24272                                  ;         If filename not found (pure directory path),
 24273                                  ;           ZR = set
 24274                                  ;           FCB filename fields are wildcarded with ?'s
 24275                                  ;       If pathcrunch failed (no ChDir's worked),
 24276                                  ;         CY = set
 24277                                  ;         Msg_Numb = extended error code
 24278                                  ;
 24279                                  ; NOTE  DIR asks PathCrunch to forego parsing the filename into the
 24280                                  ;       FCB by setting DirFlag. In this case, the FCB is returned
 24281                                  ;       with the filename wildcarded.
 24282                                  
 24283                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 24284                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2767h
 24285                                  
 24286                                  	; 11/06/2023 - Retro DOS v4.2
 24287                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2D11h
 24288                                  
 24289                                  	; 04/08/2024 - Retro DOS v5.0
 24290                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2B45h
 24291                                  PathCrunch:
 24292                                  	; MSDOS 6.0
 24293 00002A20 C706[A49F]0000          	mov     word [Msg_Numb],0
 24294                                  				;AN022; Set up message flag
 24295                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24296                                  	;mov	dl,[5Ch]
 24297 00002A26 8A165C00                	mov	dl,[FCB]	; DL = drive # (1 = A)
 24298 00002A2A E823FF                  	call	SAVUDIR		; save current directory in UserDir1
 24299                                  	; MSDOS 6.0
 24300 00002A2D 7233                     	jc	short pcrunch_cderrj
 24301                                  				;AN022; if error on current dir - report
 24302 00002A2F E8EB04                  	call	SETPATH		; scan past switches, whitespace
 24303                                  
 24304                                  ;       DX = ptr to pathname, NULL-terminated
 24305                                  ;       PathPos = ptr to byte after NULL at end of pathname
 24306                                  
 24307                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24308 00002A32 F606[2D9E]02            	test	byte [DestInfo],2 ; test if wildcards (? or *) seen
 24309 00002A37 752C                    	jnz	short trypeel	; wildcard seen, peel filename
 24310                                  
 24311                                  	;mov	ah,CHDir ; 3Bh
 24312 00002A39 B43B                    	mov	ah,3Bh
 24313 00002A3B CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 24314                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 24315                                  	; MSDOS 6.0
 24316 00002A3D 7313                    	jnc	short chdir_worked	;AN022; no error - continue
 24317                                  	
 24318 00002A3F E807F6                  	call	get_ext_error_number    ;AN022; get the extended error
 24319 00002A42 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found
 24320 00002A45 741E                    	je	short trypeel		;AC022;    keep trying
 24321 00002A47 83F805                  	cmp	ax,ERROR_ACCESS_DENIED  ;AN022; if access denied
 24322 00002A4A 7419                    	je	short trypeel		;AC022;    keep trying
 24323 00002A4C A3[A49F]                	mov	[Msg_Numb],ax           ;AN022; set up message flag
 24324 00002A4F E99D00                  	jmp	peelfail                ;AN022; exit with other error
 24325                                  
 24326                                  	; MSDOS 3.3
 24327                                  	;jc	short trypeel
 24328                                  chdir_worked:
 24329                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24330 00002A52 E8BD06                  	call	SetRest1	; set 'Restore Directory' flag true
 24331 00002A55 B03F                    	mov	al,'?'		; if pure dir, wildcard filename in FCB
 24332 00002A57 BF5D00                  	mov	di,5Dh  ; FCB+1
 24333 00002A5A B90B00                  	mov	cx,11
 24334 00002A5D F3AA                    	rep	stosb
 24335 00002A5F 30C0                    	xor	al,al		; return carry clear, zero set
 24336 00002A61 C3                      	retn
 24337                                  
 24338                                  pcrunch_cderrj: 		;AN022; need this for long jmp
 24339 00002A62 E98200                  	jmp	pcrunch_cderr	;AN022;
 24340                                  
 24341                                  trypeel:
 24342 00002A65 8B36[019E]              	mov	si,[PathPos]
 24343 00002A69 4E                      	dec	si		; SI = ptr to NULL at end of pathname
 24344 00002A6A 8A44FF                  	mov	al,[si-1]	; AL = last char of pathname
 24345                                  	; 25/02/2023
 24346                                  	; MSDOS 5.0 (& 6.0)
 24347 00002A6D 803E[BF9F]00            	cmp	byte [KPARSE],0
 24348 00002A72 7505                    	jnz	short delstrt	; Last char is 2nd KANJI byte, might be '\'
 24349                                  	
 24350 00002A74 E89BFF                  	call	pathchrcmp
 24351 00002A77 7476                    	jz	short peelfail	; Trailing '/'
 24352                                  delstrt:
 24353 00002A79 89F1                    	mov	cx,si		; CX = ptr to NULL at end of pathname
 24354 00002A7B 89D6                    	mov	si,dx		; SI = ptr to start of pathname
 24355 00002A7D 52                      	push	dx		; save ptr to pathname
 24356                                  delloop:
 24357 00002A7E 39CE                    	cmp	si,cx
 24358                                  	;jz	short BADRET
 24359                                  	; 25/02/2023
 24360 00002A80 7413                    	je	short gotdele	; no char's left, we have what we have
 24361 00002A82 AC                      	lodsb			; AL = next char of pathname
 24362 00002A83 E8D9FC                  	call	testkanj
 24363 00002A86 7403                    	jz	short notkanj8	; not Kanji, move along
 24364 00002A88 46                      	inc	si
 24365 00002A89 EBF3                    	jmp	short delloop	
 24366                                  
 24367                                  	; 25/02/2023
 24368                                  	; MSDOS 3.3
 24369                                  	;mov	al,[si]
 24370                                  	;call	PATHCHRCMP
 24371                                  	;jz	short TRYCD
 24372                                  	;dec	si
 24373                                  	;jmp	short delloop
 24374                                  
 24375                                  notkanj8:
 24376 00002A8B E884FF                  	call	pathchrcmp
 24377 00002A8E 75EE                    	jnz	short delloop	; not a path delimiter, keep looking
 24378 00002A90 89F2                    	mov	dx,si
 24379 00002A92 4A                      	dec	dx		; DX = ptr to last delimiter found	
 24380 00002A93 EBE9                    	jmp	short delloop	; go look for more
 24381                                  
 24382                                  	; 25/02/2023
 24383                                  	; MSDOS 5.0 (& 6.0)
 24384                                  gotdele:
 24385 00002A95 89D6                    	mov	si,dx		; SI = ptr to pathname or last delim
 24386 00002A97 5A                      	pop	dx		; DX = ptr to pathname
 24387 00002A98 39D6                    	cmp	si,dx
 24388 00002A9A 7455                    	je	short badret	; didn't find path delim
 24389 00002A9C 89F1                    	mov	cx,si		; CX = ptr to last path delimiter
 24390 00002A9E 89D6                    	mov	si,dx		; SI = ptr to pathname
 24391                                  delloop2:			; Set value of KPARSE
 24392 00002AA0 39CE                    	cmp	si,cx
 24393 00002AA2 7412                    	je	short trycd	; roll up till SI meets CX
 24394 00002AA4 C606[BF9F]00            	mov	byte [KPARSE],0
 24395 00002AA9 AC                      	lodsb
 24396 00002AAA E8B2FC                  	call	testkanj
 24397 00002AAD 74F1                    	jz	short delloop2
 24398 00002AAF 46                      	inc	si
 24399 00002AB0 FE06[BF9F]              	inc	byte [KPARSE]
 24400 00002AB4 EBEA                    	jmp	short delloop2
 24401                                  
 24402                                  trycd:
 24403 00002AB6 50                      	push	ax
 24404                                  	; 25/02/2023
 24405 00002AB7 B02E                    	mov	al,'.'
 24406                                  	;mov	al,[DOT_CHR]	; AL = '.'
 24407                                  	; MSDOS 6.0
 24408 00002AB9 384401                  	cmp	[si+1],al	; check for '.' after path delim
 24409                                  				;M019; allow continuation if '. ' or 
 24410                                  				;M019; '..' is not found.
 24411 00002ABC 7509                    	jne	short trycd1	;M019; '.' not found
 24412 00002ABE 384402                  	cmp	[si+2],al	;M019; check for '..'
 24413 00002AC1 7404                    	je	short trycd1	;M019; found '..'
 24414 00002AC3 807C0200                	cmp	byte [si+2],0	;M019; check for '. ' (null terminated)
 24415                                  trycd1:	
 24416 00002AC7 58                      	pop     ax
 24417 00002AC8 7425                    	jz	short peelfail	; if . or .., pure cd should have worked
 24418                                  
 24419                                  	; 25/02/2023
 24420                                  	; MSDOS 3.3
 24421                                  	;cmp	[si+1],	al	; check for '.' after path delim
 24422                                  	;pop	ax
 24423                                  	;jz	short PEELFAIL	; if . or .., pure cd should have worked
 24424                                  
 24425                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24426 00002ACA 8A44FF                  	mov	al,[si-1]
 24427 00002ACD 3C3A                    	cmp	al,':' 		; Special case d:\file
 24428 00002ACF 7420                    	je	short badret
 24429                                  	; 25/02/2023
 24430                                  	; MSDOS 6.0
 24431 00002AD1 803E[BF9F]00            	cmp	byte [KPARSE],0
 24432 00002AD6 7505                    	jnz	short notdoublesl
 24433 00002AD8 E837FF                  	call	pathchrcmp
 24434                                  	;jnz	short notdoublesl
 24435                                  				; Last char is 2nd KANJI byte, might be '\'
 24436                                  	; 25/02/2023
 24437 00002ADB 7412                    	jz	short peelfail 
 24438                                  ;peelfail:
 24439                                  	;stc
 24440                                  	;retn
 24441                                  
 24442                                  notdoublesl:
 24443 00002ADD C60400                  	mov	byte [si],0
 24444                                  	;mov	ah,CHDir ; 3Bh
 24445 00002AE0 B43B                    	mov	ah,3Bh
 24446                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 24447                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 24448                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 24449 00002AE2 E8D5DA                  	call	int_21h_indirect
 24450 00002AE5 7321                    	jnc	short cdsucc
 24451                                  
 24452                                  	; 25/02/2023
 24453                                  	; MSDOS 6.0
 24454                                  pcrunch_cderr:
 24455 00002AE7 E85FF5                  	call	get_ext_error_number
 24456                                  				;AN022; get the extended error
 24457 00002AEA A3[A49F]                	mov	[Msg_Numb],ax	;AN022; set up message flag
 24458 00002AED 09F6                    	or	si,si		;AN022; set up zero flag to not zero
 24459                                  peelfail: ; 25/02/2023
 24460 00002AEF F9                      	stc			;AN022; set up carry flag
 24461                                  pcrunch_retn:
 24462 00002AF0 C3                      	retn
 24463                                  
 24464                                  badret:
 24465                                  	; MSDOS 3.3 & MSDOS 6.0
 24466 00002AF1 8A04                    	mov	al,[si]
 24467 00002AF3 E81CFF                  	call	pathchrcmp	; Special case 'DIRCHAR'file
 24468 00002AF6 F9                      	stc
 24469 00002AF7 75F7                    	jnz	short pcrunch_retn
 24470 00002AF9 30DB                    	xor	bl,bl
 24471 00002AFB 865C01                  	xchg	bl,[si+1]
 24472                                  	;mov	ah,CHDir ; 3Bh
 24473 00002AFE B43B                    	mov	ah,3Bh
 24474                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 24475                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 24476                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 24477 00002B00 E8B7DA                  	call	int_21h_indirect
 24478                                  	;jc	short pcrunch_retn ; MSDOS 3.3
 24479                                  	; 25/02/2023
 24480 00002B03 72E2                    	jc	short pcrunch_cderr
 24481                                  				;AN022; go to error exit 
 24482 00002B05 885C01                  	mov	[si+1],bl
 24483                                  cdsucc:
 24484 00002B08 E80706                  	call	SetRest1
 24485 00002B0B 46                      	inc	si		; Reset zero
 24486 00002B0C 8936[2B9E]              	mov	[DestTail],si
 24487                                  	; 25/02/2023
 24488                                  	; MSDOS 6.0
 24489 00002B10 9C                      	pushf			;AN015; save flags
 24490 00002B11 803E[099E]FF            	cmp	byte [DirFlag],-1
 24491                                  				;AN015; don't do parse if in DIR
 24492 00002B16 7408                    	je	short pcrunch_end
 24493                                  				;AN015;
 24494                                  	; MSDOS 3.3 & MSDOS 6.0
 24495 00002B18 BF5C00                  	mov	di,FCB  ; 5Ch
 24496                                  	;mov	ax,(Parse_File_Descriptor<<8)|2 ; 2902h
 24497 00002B1B B80229                  	mov	ax,2902h	
 24498 00002B1E CD21                    	int	21h		; Parse with default drive
 24499                                  			; DOS -	PARSE FILENAME
 24500                                  			; DS:SI	-> string to parse
 24501                                  			; ES:DI	-> buffer to fill with unopened	FCB
 24502                                  			; AL = bit mask	to control parsing
 24503                                  	; MSDOS 3.3
 24504                                  	;retn
 24505                                  
 24506                                  pcrunch_end:
 24507 00002B20 9D                      	popf			;AN015; get flags back
 24508 00002B21 C3                      	retn
 24509                                  
 24510                                  ; =============== S U B	R O U T	I N E =======================================
 24511                                  
 24512                                  ; 01/08/2024 - Retro DOS v5.0 COMMAND.COM
 24513                                  ; PCDOS 7.1 COMMAND.COM
 24514                                  %if 1
 24515                                  ;ifdef DBCS
 24516                                  ;
 24517                                  ;	Check if the character position is at Tail Byte of DBCS
 24518                                  ;
 24519                                  ;	input:	ds:si = start address of the string
 24520                                  ;		ds:di = character position to check
 24521                                  ;	output:	ZF = 1 if at Tail Byte
 24522                                  ;
 24523                                  ;CheckDBCSTailByte proc near
 24524                                  CheckDBCSTailByte:
 24525 00002B22 50                      	push	ax
 24526 00002B23 51                      	push	cx
 24527 00002B24 57                      	push	di
 24528 00002B25 89F9                    	mov	cx,di			; save character position
 24529                                  cdtb_check:
 24530 00002B27 39F7                    	cmp	di,si
 24531 00002B29 7409                    	jz	short cdtb_next		; if at the top
 24532 00002B2B 4F                      	dec	di			; go back
 24533 00002B2C 8A05                    	mov	al,[di]			; get character
 24534                                  	;invoke	testkanj
 24535 00002B2E E82EFC                  	call	testkanj
 24536 00002B31 75F4                    	jnz	short cdtb_check	; if DBCS lead byte do next
 24537 00002B33 47                      	inc	di			; adjust
 24538                                  cdtb_next:
 24539 00002B34 29F9                    	sub	cx,di			; if the length is odd then
 24540 00002B36 80F101                  	xor	cl,1			; the character position is
 24541 00002B39 F6C101                  	test	cl,1			; at the tail byte
 24542 00002B3C 5F                      	pop	di
 24543 00002B3D 59                      	pop	cx
 24544 00002B3E 58                      	pop	ax
 24545 00002B3F C3                      	retn
 24546                                  ;CheckDBCSTailByte endp
 24547                                  ;endif
 24548                                  %endif
 24549                                  
 24550                                  ;============================================================================
 24551                                  ; TMISC1.ASM, MSDOS 6.0, 1991
 24552                                  ;============================================================================
 24553                                  ; 05/10/2018 - Retro DOS v3.0
 24554                                  
 24555                                  ;TITLE	Part7 COMMAND Transient Routines
 24556                                  
 24557                                  ;	More misc routines
 24558                                  
 24559                                  ;---------------------------
 24560                                  ; We can get rid of this switch processing code if we can take
 24561                                  ; care of the remaining two calls to switch, later in the file.
 24562                                  ; However, I have not checked whether or not any other files use
 24563                                  ; switch -- after all, it IS public!
 24564                                  ;---------------------------
 24565                                  
 24566                                  ; 14/06/2023
 24567                                  SWCOUNT	EQU 8	; MSDOS 6.22		; Length of switch_list
 24568                                  ; 28/03/2023
 24569                                  ;SWCOUNT  EQU  6  ; MSDOS 6.0 (& MSDOS 5.0)
 24570                                  ;;SWCOUNT EQU  5  ; MSDOS 3.3	
 24571                                  
 24572                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1AC2h
 24573                                  
 24574                                  ; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 24575                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2869h
 24576                                  
 24577                                  ; ---------------------------------------------------------------------------
 24578                                  
 24579                                  	; 25/02/2023
 24580                                  RETSW:
 24581 00002B40 93                      	xchg	ax,bx		; Put switches in AX
 24582 00002B41 C3                      	retn
 24583                                  
 24584                                  ; =============== S U B	R O U T	I N E =======================================
 24585                                  
 24586                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 24587                                  	; 11/06/2023 - Retro DOS 4.2 COMMAND.COM
 24588                                  	; 04/08/2024 - Retro DOS 5.0 COMMAND.COM
 24589                                  SWITCH:
 24590 00002B42 31DB                    	xor	bx,bx		; Initialize - no switches set
 24591                                  SWLOOP:
 24592 00002B44 E83DFE                  	call	scanoff		; Skip any delimiters
 24593 00002B47 3A06[679C]              	cmp	al,[SWITCHAR]	; Is it a switch specifier?
 24594 00002B4B 75F3                    	jnz	short RETSW	; No -- we're finished
 24595 00002B4D 81CB0080                	or	bx,8000h
 24596                                  	;or	bx,FSWITCH	; Indicate there is a switch specified
 24597 00002B51 46                      	inc	si		; Skip over the switch character
 24598 00002B52 E82FFE                  	call	scanoff
 24599 00002B55 3C0D                    	cmp	al,0Dh
 24600 00002B57 74E7                    	je	short RETSW	; Oops
 24601 00002B59 46                      	inc	si
 24602                                  
 24603                                  	; Convert lower case input to upper case
 24604                                  
 24605 00002B5A E82CFC                  	call	UPCONV
 24606                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 24607                                  
 24608 00002B5D BF[D495]                	mov	di,switch_list	; "-Y?VBAPW" (for PCDOS 7.1) ; 04/08/2024
 24609                                  				; "-Y?VBAPW" (for MSDOS 6.22) ; 11/06/2023
 24610                                  				; "?VBAPW" (for MSDOS 6.0)
 24611                                  				; ("VBAPW" (for MSDOS 3.3))
 24612                                  	; 11/06/2023
 24613                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2E33h
 24614 00002B60 B90800                  	mov	cx,8  ; MSDOS 6.22
 24615                                  	;mov	cx,6  ; MSDOS 6.0 (& MSDOS 5.0)
 24616                                  	;;mov	cx,5  ; MSDOS 3.3
 24617                                  	;;mov	cx,SWCOUNT ; 5 (for MSDOS 3.3), (6 (for MSDOS 6.0))
 24618                                  
 24619                                  	;nop
 24620                                  
 24621 00002B63 F2AE                    	repne	scasb		; Look for matching switch
 24622 00002B65 7507                    	jnz	short BADSW
 24623 00002B67 B80100                  	mov	ax,1
 24624 00002B6A D3E0                    	shl	ax,cl		; Set a bit for the switch
 24625 00002B6C 09C3                    	or	bx,ax
 24626                                  BADSW: 				; Retro DOS v3.0 COMMAND.COM modificiation
 24627 00002B6E EBD4                    	jmp	short SWLOOP
 24628                                  ;BADSW:
 24629                                  	;jmp	short SWLOOP
 24630                                  ;DRVBAD:
 24631                                  ;	mov	dx,baddrv_ptr
 24632                                  ;	jmp	cerror
 24633                                  EXTERNALJ:
 24634 00002B70 E90501                  	jmp	EXTERNAL
 24635                                  FNDCOM:				; search the internal command table
 24636 00002B73 08C0                    	or	al,al		; Get real length of first arg
 24637 00002B75 74F9                    	jz	short EXTERNALJ	; If 0, it must begin with "\" so has
 24638                                  				;  to be external.
 24639                                  ; barryf code starts here
 24640                                  
 24641 00002B77 E89203                  	call	test_append	; see if APPEND installed
 24642 00002B7A 7429                    	jz	short CONTCOM	; not loaded
 24643                                  
 24644                                  APPEND_INTERNAL:
 24645 00002B7C 8A0E[2C9D]              	mov	cl,[IDLEN]
 24646 00002B80 B500                    	mov	ch,0
 24647 00002B82 890E[019E]              	mov	[PathPos],cx
 24648                                  	
 24649                                  	; 25/02/2023
 24650                                  	; MSDOS 6.0
 24651 00002B86 FE06[A69F]              	inc 	byte [append_exec]
 24652                                  				;AN041; set APPEND to ON
 24653 00002B8A E82104                  	call	IOSET		; re-direct the o'l io
 24654                                  
 24655 00002B8D BE[2C9D]                	mov	si,IDLEN	; address command name, DS already set
 24656 00002B90 BAFFFF                  	mov	dx,-1 ; 0FFFFh	; set invoke function
 24657                                  		
 24658                                  	; MSDOS 6.0
 24659 00002B93 BF[1254]                	mov	di,append_parse
 24660                                  				;AN010; Get the entry point for PARSE for APPEND
 24661                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24662 00002B96 B801AE                  	mov	ax,0AE01h
 24663 00002B99 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal
 24664                                  			; - INSTALLABLE	COMMAND	- EXECUTE
 24665                                  			; DX = FFFFh, DS:SI -> buffer
 24666                                  			; Return: buffer at DS:SI filled with a	length byte
 24667                                  			; followed by the uppercase internal command
 24668                                  			; to execute (if length not 0)
 24669                                  	; 25/02/2023
 24670                                  	; INT 2Fh
 24671                                  	; 	AX = AE01h
 24672                                  	; entry:
 24673                                  	; 	DX = magic value FFFFh
 24674                                  	; 	CH = 00h
 24675                                  	; 	CL = length of command name
 24676                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 24677                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 24678                                  	; return:
 24679                                  	;	DS:SI buffer updated
 24680                                  	;	if length byte is nonzero, the following bytes contain
 24681                                  	;	the uppercase internal command to execute and the command line
 24682                                  	; 	buffer contains the command's parameters
 24683                                  	;	(the first DS:[SI] bytes are ignored)
 24684                                  	;
 24685                                  	; Format of COMMAND.COM command line buffer:
 24686                                  	;	Offset  Size    Description
 24687                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 24688                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 24689                                  	;	N BYTEs command line text, terminated by 0Dh
 24690                                  	;
 24691                                  	; Format of command name buffer:
 24692                                  	;	Offset  Size    Description
 24693                                  	;	00h     BYTE    length of command name
 24694                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 24695                                  
 24696 00002B9B 803E[2C9D]00            	cmp	byte [IDLEN],0 ; execute requested
 24697 00002BA0 7503                    	jne	short CONTCOM
 24698 00002BA2 E9A300                  	jmp	CMD_DONE
 24699                                  
 24700                                  	;nop
 24701                                  CONTCOM:			; continue with internal scan
 24702 00002BA5 BF[5394]                	mov	di,COMTAB
 24703 00002BA8 31C9                    	xor	cx,cx
 24704                                  FINDCOM:
 24705 00002BAA BE[2D9D]                	mov	si,ID		; pointer to command argument
 24706 00002BAD 8A0D                    	mov	cl,[di]		; load length of internal command
 24707 00002BAF 47                      	inc	di		; advance past length
 24708 00002BB0 E3BE                    	jcxz	EXTERNALJ 	; if it's zero, we're out of internals
 24709 00002BB2 3A0E[2C9D]              	cmp	cl,[IDLEN]	; that of the command argument
 24710 00002BB6 7506                    	jne	short ABCD	; lengths not equal ==> strings not eq
 24711 00002BB8 890E[019E]              	mov	[PathPos],cx	; store length of command
 24712 00002BBC F3A6                    	repe	cmpsb
 24713                                  ABCD:
 24714 00002BBE 9F                      	lahf			; save the good ol' flags
 24715 00002BBF 01CF                    	add	di,cx		; skip over remaining internal, if any
 24716 00002BC1 8A05                    	mov	al,[di]		; load drive-check indicator byte (DCIB)
 24717 00002BC3 A2[759C]                	mov	[CHKDRV],al	; save command flag byte in chkdrv
 24718 00002BC6 47                      	inc	di		; increment DI (OK, OK, I'll stop)
 24719 00002BC7 8B1D                    	mov	bx,[di]		; load internal command address
 24720 00002BC9 47                      	inc	di		; skip over the puppy
 24721 00002BCA 47                      	inc	di
 24722                                  
 24723                                  	; MSDOS 6.0
 24724 00002BCB 8B15                    	mov	dx,[di]		; load ptr to help msg #s
 24725 00002BCD 47                      	inc	di
 24726 00002BCE 47                      	inc	di
 24727 00002BCF 9E                      	sahf			; remember those flags?
 24728 00002BD0 75D8                    	jnz	short FINDCOM	; well, if all the cmps worked...
 24729                                  
 24730                                  ; All messages get redirected.
 24731                                  
 24732 00002BD2 803E[A69F]00            	cmp     byte [append_exec],0
 24733                                  				;AN041; APPEND just executed?
 24734 00002BD7 7503                    	jnz 	short DONT_SET_IO
 24735                                  				;AN041; Yes - this junk is already set
 24736 00002BD9 E8D203                  	call	IOSET		; re-direct the ol' i/o
 24737                                  
 24738                                  DONT_SET_IO:			;AN041;
 24739                                  
 24740                                  ; Check for /?. Certain commands, flagged fLimitHelp,
 24741                                  ; respond to /? only if it is the only command-line argument.
 24742                                  
 24743 00002BDC A1[7B9C]                	mov	ax,[COMSW]	; AX = switches after command
 24744 00002BDF 0B06[819C]              	or	ax,[AllSwitch]	; AX = all switches
 24745                                  	;and	ax,SwitchQues
 24746 00002BE3 83E020                  	and	ax,20h
 24747 00002BE6 7426                    	jz	short DRIVE_CHECK
 24748                                  				; /? not in command line
 24749 00002BE8 F606[759C]04            	test	byte [CHKDRV],4	
 24750                                  	;test	byte [CHKDRV],fLimitHelp
 24751 00002BED 7407                    	jz	short DO_HELP	; /? allowed in combination
 24752                                  
 24753                                  ; Make sure /? is the only argument on the command line.
 24754                                  
 24755 00002BEF 833E[80A2]02            	cmp	word [ARG+ARG_UNIT.argvcnt],2
 24756 00002BF4 7518                    	jne	short DRIVE_CHECK
 24757                                  				; /? not only arg - ignore
 24758                                  
 24759                                  ; Note: this is all the check we need, even against things like /??.
 24760                                  ; Our argv parser breaks /?? into two args, /? and ?.
 24761                                  
 24762                                  DO_HELP:
 24763                                  ; DX = ptr to word list of msg #s, terminated by zero word
 24764                                  
 24765 00002BF6 89D6                    	mov	si,dx		; SI = ptr to list of msg #s
 24766                                      	;mov	ax,no_subst	; AL = no subst's code
 24767 00002BF8 B80000                  	mov	ax,0
 24768 00002BFB 50                      	push	ax		; build subst block on stack
 24769                                  
 24770                                  NEXT_HELP_MSG:
 24771 00002BFC AD                      	lodsw			; AX = help msg # or zero
 24772 00002BFD 09C0                    	or	ax,ax
 24773 00002BFF 7409                    	jz	short HELP_DONE
 24774 00002C01 50                      	push	ax		; SS:SP = ptr to subst block
 24775                                  				; (msg # and no_subst byte)
 24776                                  ;; We assume DS = SS.
 24777                                  	
 24778 00002C02 89E2                    	mov     dx,sp		; DS:DX = ptr to subst block
 24779 00002C04 E82128                  	call	std_printf	; display help message
 24780 00002C07 58                      	pop	ax		; remove msg # from stack
 24781 00002C08 EBF2                    	jmp	short NEXT_HELP_MSG
 24782                                  
 24783                                  HELP_DONE:
 24784 00002C0A 58                      	pop	ax		; clean up stack
 24785 00002C0B E9F6D4                  	jmp	TCOMMAND
 24786                                  
 24787                                  	; 25/02/2023
 24788                                  	; MSDOS 3.3
 24789                                  	;sahf			; remember those flags?
 24790                                  	;jnz	short FINDCOM	; well, if all the cmps worked...
 24791                                  	;call	IOSET		; re-direct the ol' i/o
 24792                                  
 24793                                  DRIVE_CHECK:
 24794 00002C0E F606[759C]01            	test	byte [CHKDRV],1
 24795                                  	;test	byte [CHKDRV],FCHECKDRIVE
 24796                                  				; did we wanna check those drives?
 24797 00002C13 7411                    	jz	short NOCHECK
 24798 00002C15 A0[789C]                	mov	al,[PARM1]	; parse_file_descriptor results tell
 24799 00002C18 0A06[7A9C]              	or	al,[PARM2]	; us whether those drives were OK
 24800 00002C1C 3CFF                    	cmp	al,-1
 24801 00002C1E 7506                    	jne	short NOCHECK
 24802                                  	;jmp	DRVBAD
 24803                                  	; 25/02/2023
 24804                                  DRVBAD:
 24805 00002C20 BA[7190]                	mov	dx,baddrv_ptr
 24806 00002C23 E9FE00                  	jmp	cerror
 24807                                  
 24808                                  ; The user may have omitted the space between the command and its arguments.
 24809                                  ; We need to copy the remainder of the user's command line into the buffer.
 24810                                  ; Note that thisdoes not screw up the arg structure; it points into COMBUF not
 24811                                  ; into the command line at 80.
 24812                                  
 24813                                  NOCHECK:
 24814 00002C26 E8C602                  	call	cmd_copy
 24815                                  SWITCHECK:
 24816                                  	;test	byte [CHKDRV],2
 24817 00002C29 F606[759C]02            	test	byte [CHKDRV],fSwitchAllowed 
 24818                                  				; Does the command take switches
 24819 00002C2E 7516                    	jnz	short REALWORK	; Yes, process the command
 24820 00002C30 E82F00                  	call	noswit		; No, check to see if any switches
 24821 00002C33 7511                    	jnz	short REALWORK	; None, process the command
 24822                                  
 24823                                  	; MSDOS 6.0
 24824                                  	;mov	byte [msg_disp_class],2
 24825 00002C35 C606[D88F]02            	mov	byte [msg_disp_class],parse_msg_class
 24826                                  				;AN000; set up parse error msg class
 24827 00002C3A BA[DA8F]                	mov	dx,extend_buf_ptr	
 24828                                  				;AC000; get extended message pointer
 24829                                  	;mov	word [extend_buf_ptr],3
 24830 00002C3D C706[DA8F]0300          	mov	word [extend_buf_ptr],BadSwt_Ptr
 24831                                  				;AN000; get "Invalid switch" message number
 24832 00002C43 E9DE00                  	jmp	cerror		; Print error and chill out...
 24833                                  
 24834                                  	; 25/02/2023
 24835                                  	; MSDOS 3.3
 24836                                  	;mov	dx,BADPARMPTR
 24837                                  	;jmp	CERROR
 24838                                  
 24839                                  REALWORK:
 24840 00002C46 FFD3                    	call	bx		; do some real work, at last
 24841                                  
 24842                                  ; See if we're in a batch CALL command. If we are, reprocess the command line,
 24843                                  ; otherwise, go get another command.
 24844                                  
 24845                                  CMD_DONE:
 24846 00002C48 0E                      	push	cs		; g  restore data segment
 24847 00002C49 1F                      	pop	ds		; g
 24848 00002C4A 1E                      	push	ds
 24849 00002C4B 8E1E[639C]              	mov	ds,[RESSEG]	; g  save data segment
 24850                                  	;cmp	byte [Call_Flag],1
 24851                                  				; G  Is a call in progress?
 24852 00002C4F 803E[B002]01            	cmp	byte [Call_Flag],call_in_progress
 24853 00002C54 C606[B002]00            	mov	byte [Call_Flag],0
 24854                                  				; G  Either way, reset flag
 24855 00002C59 1F                      	pop	ds		; g  get data segment back
 24856 00002C5A 7403                    	jz	short INCALL	; G
 24857 00002C5C E9A5D4                  	jmp	TCOMMAND	; chill out...
 24858                                  INCALL:
 24859                                  	;jmp	DOCOM1
 24860                                  	; 11/06/2023
 24861                                  	; Retro DOS v4.2 - MSDOS 6.22 COMMAND.COM
 24862 00002C5F E993D6                  	jmp	DOCOM0
 24863                                  
 24864                                  ; =============== S U B	R O U T	I N E =======================================
 24865                                  
 24866                                  	; 25/02/2023
 24867                                  noswit:
 24868 00002C62 57                      	push	di		; Save di
 24869 00002C63 BF8100                  	mov	di,81h		; di = ptr to command args
 24870 00002C66 BE8000                  	mov	si,80h		; Get address of length of command args
 24871 00002C69 AC                      	lodsb			; Load length
 24872 00002C6A 88C1                    	mov	cl,al		; Move length to cl
 24873 00002C6C 30ED                    	xor	ch,ch		; Zero ch
 24874 00002C6E 2EA0[679C]              	mov	al,[cs:SWITCHAR] ; al = switch character
 24875                                  	;cmp	al,0		; Turn off ZF
 24876                                  	; 25/02/2023
 24877 00002C72 20C0                    	and	al,al
 24878 00002C74 F2AE                    	repne	scasb		; Scan for a switch character and return
 24879 00002C76 5F                      	pop	di		;  with ZF set if one was found
 24880 00002C77 C3                      	retn
 24881                                  
 24882                                  ; ---------------------------------------------------------------------------
 24883                                  
 24884                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 24885                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:29A6h
 24886                                  
 24887                                  EXTERNAL:
 24888 00002C78 E89102                  	call	test_append	; check to see if append installed
 24889 00002C7B 7403                    	jz	short NOT_BARRYF
 24890                                  				; no - truly external command
 24891 00002C7D E9FCFE                  	jmp	APPEND_INTERNAL	; yes - go to Barryf code
 24892                                  
 24893                                  NOT_BARRYF:
 24894 00002C80 2EC606[769C]00          	mov	byte [cs:FILTYP],0
 24895 00002C86 2E8A16[849C]            	mov	dl,[cs:SPECDRV]
 24896 00002C8B 2E8816[2C9D]            	mov	[cs:IDLEN],dl
 24897 00002C90 2EC606[249E]00          	mov	byte [cs:ROM_CALL],0
 24898 00002C96 52                      	push	dx
 24899 00002C97 BA[2C9D]                	mov	dx,IDLEN
 24900 00002C9A E836D8                  	call	ROM_SCAN
 24901 00002C9D 5A                      	pop	dx
 24902                                  	;jnc	short POSTSAVE
 24903 00002C9E 7305                    	jnc	short DO_SCAN
 24904 00002CA0 2EFE06[249E]            	inc	byte [cs:ROM_CALL]
 24905                                  	;jmp	short POSTSAVE
 24906                                  
 24907                                  	;nop
 24908                                  DO_SCAN:
 24909                                  POSTSAVE:
 24910 00002CA5 BF[8B9B]                	mov	di,EXECPATH
 24911 00002CA8 C60500                  	mov	byte [di],0	; Initialize to current directory
 24912                                  	
 24913 00002CAB 2E803E[249E]00          	cmp	byte [cs:ROM_CALL],0
 24914                                  	;jz	short RESEARCH
 24915                                  	; 25/02/2023
 24916                                  	;jmp	short NEOEXECUTE
 24917 00002CB1 7577                    	jnz	short NEOEXECUTE
 24918                                  
 24919                                  	;nop
 24920                                  RESEARCH:
 24921 00002CB3 E8EA08                  	call	path_search	; find the mother (result in execpath)
 24922 00002CB6 09C0                    	or	ax,ax		; did we find anything?
 24923                                  	;jz	short BADCOMJ45	; null means no (sob)
 24924                                  	; 25/02/2023
 24925 00002CB8 7465                    	jz	short BADCOM
 24926 00002CBA 83F804                  	cmp	ax,4		; 04H and 08H are .exe and .com
 24927                                  				; fuckin' sixteen-bit machine ought
 24928                                  	;jl	short BATCOMJ	; to be able to handle a SIXTEEN-BIT
 24929                                  				; DISPLACEMENT!!
 24930                                  	;;jmp	short NEOEXECUTE
 24931                                  	;jmp	short EXECUTE	
 24932                                  	; 25/02/2023
 24933 00002CBD 7D6B                    	jnl	short EXECUTE ; jge
 24934                                  
 24935                                  	; 02H is .bat
 24936                                  
 24937                                  ; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 24938                                  ; PCDOS 7.1 COMMAND.COM
 24939                                  %if 1
 24940                                  		; ... .BAT file	...
 24941 00002CBF BA[8B9B]                	mov	dx,EXECPATH
 24942 00002CC2 B8003D                  	mov	ax,3D00h
 24943 00002CC5 CD21                    	int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 24944                                  				; DS:DX	-> ASCIZ filename
 24945                                  				; AL = access mode
 24946                                  				; 0 - read
 24947 00002CC7 7253                    	jb	short BATCOMJ
 24948 00002CC9 8326[06A4]00            	and	word [TPBUF],0	; clear 1st two bytes of the buffer
 24949 00002CCE BA[06A4]                	mov	dx,TPBUF
 24950 00002CD1 B90200                  	mov	cx,2
 24951 00002CD4 89C3                    	mov	bx,ax
 24952 00002CD6 B43F                    	mov	ah,3Fh
 24953 00002CD8 CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 24954                                  				; BX = file handle, CX = number	of bytes to read
 24955                                  				; DS:DX	-> buffer
 24956 00002CDA B43E                    	mov	ah,3Eh
 24957 00002CDC CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 24958                                  				; BX = file handle
 24959 00002CDE 813E[06A4]2F2A          	cmp	word [TPBUF],2A2Fh ; '/*' (NASM syntax)
 24960 00002CE4 7536                    	jnz	short BATCOMJ
 24961 00002CE6 B8[7797]                	mov	ax,REXX_EXE ; "REXX.EXE"
 24962                                  	;mov	[ARG_ARGV],ax
 24963 00002CE9 A3[C09F]                	mov	[ARG+ARGV_ELE.argpointer],ax
 24964                                  	;mov	word [ARGV0_ARG_FLAGS],0
 24965 00002CEC C706[C29F]0000          	mov	word [ARG+ARGV_ELE.argflags],0
 24966                                  	;mov	[ARGV0_ARGSTARTEL],ax
 24967 00002CF2 A3[C39F]                	mov	[ARG+ARGV_ELE.argstartel],ax
 24968                                  	;mov	word [ARGV0_ARGLEN],8
 24969 00002CF5 C706[C59F]0800          	mov	word [ARG+ARGV_ELE.arglen],8
 24970                                  	;mov	word [ARGV0_ARGSW_WORD],0
 24971 00002CFB C706[C79F]0000          	mov	word [ARG+ARGV_ELE.argsw_word],0
 24972                                  	;mov	[ARGV0_ARG_OCOMPTR],ax
 24973 00002D01 A3[C99F]                	mov	[ARG+ARGV_ELE.arg_ocomptr],ax
 24974                                  				; pointer into original	command	string
 24975 00002D04 E89908                  	call	path_search
 24976 00002D07 85C0                    	test	ax,ax
 24977 00002D09 740C                    	jz	short rexx_nf_err
 24978 00002D0B BE[C39A]                	mov	si,COMBUF+1
 24979 00002D0E BF8000                  	mov	di,80h		; PSP command tail (arguments)
 24980 00002D11 89F9                    	mov	cx,di ; 128
 24981 00002D13 F3A4                    	rep movsb
 24982 00002D15 EB13                    	jmp	short NEOEXECUTE
 24983                                  rexx_nf_err:
 24984 00002D17 BA[0090]                	mov	dx,REXXNOTF_PTR	; MSG_1012 ; REXX.EXE not found
 24985 00002D1A EB08                    	jmp	short cerror	
 24986                                  %endif
 24987                                  
 24988                                  	;nop
 24989                                  BATCOMJ:
 24990 00002D1C E97DDB                  	jmp	BATCOM
 24991                                  
 24992                                  	; 25/02/2023
 24993                                  ;BADCOMJ45:
 24994                                  	;jmp	short BADCOM
 24995                                  
 24996                                  ; 06/08/2024
 24997                                  ; ---------------------------------------------------------------------------
 24998                                  
 24999                                  	;  25/02/2023 - Retro DOS v4.0 COMMAND.COM
 25000                                  BADCOM:
 25001 00002D1F 0E                      	push	cs
 25002 00002D20 1F                      	pop	ds
 25003 00002D21 BA[FD8F]                	mov	dx,BADNAM_PTR
 25004                                  cerror:		
 25005 00002D24 E8F926                  	call	std_eprintf
 25006 00002D27 E9DAD3                  	jmp	TCOMMAND
 25007                                  
 25008                                  ; ---------------------------------------------------------------------------
 25009                                  
 25010                                  	;nop
 25011                                  EXECUTE:
 25012                                  NEOEXECUTE:
 25013 00002D2A E88102                  	call	IOSET
 25014                                  
 25015                                  ; MSDOS 6.0
 25016                                  ;M051
 25017                                  ; Previously LoadHigh was jumping to the execute label above. This was wrong
 25018                                  ;because IOSET was getting invoked twice resulting in 2 sets of redirections.
 25019                                  ;After a close, this would still leave one open active resulting in sharing
 25020                                  ;errors on subsequent opens of the redirected file.
 25021                                  
 25022                                  LH_EXECUTE:			;M051	
 25023 00002D2D 8E06[739C]              	mov	es,[TRAN_TPA]
 25024                                  	;mov	ah,DEALLOC ; 49h
 25025 00002D31 B449                    	mov	ah,49h
 25026 00002D33 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 25027                                  			; ES = segment address of area to be freed
 25028                                  				; Now running in "free" space
 25029 00002D35 8E06[639C]              	mov	es,[RESSEG]
 25030 00002D39 26FE06[9902]            	inc	byte [es:ExtCom] ; Indicate external command
 25031 00002D3E 26C606[A102]00          	mov	byte [es:RestDir],0 
 25032                                  				; Since USERDIR1 is in transient, insure
 25033                                  				; this flag value for re-entry to COMMAND
 25034                                  	; MSDOS 6.0
 25035 00002D44 BE[8B9B]                	mov	si,EXECPATH	  ; offset TRANGROUP:EXECPATH	
 25036 00002D47 BF[5E04]                	mov	di,SafePathBuffer ; offset RESGROUP:SAFEPATHBUFFER
 25037                                  	;mov	cx,LENMSGORPATHBUF
 25038 00002D4A B95000                  	mov	cx,80
 25039 00002D4D FC                      	cld
 25040 00002D4E F3A4                    	rep	movsb		; copy program pathname to resident
 25041                                  
 25042                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25043 00002D50 BF5C00                  	mov	di,FCB ; 5Ch
 25044 00002D53 89FE                    	mov	si,di
 25045                                  	;mov	cx,82 ; 52h	; moving (100h-5Ch)/2 = 80h-2Eh
 25046 00002D55 B152                    	mov	cl,82 ; 25/02/2023
 25047 00002D57 F3A5                    	rep	movsw		; Transfer parameters to resident header
 25048                                  	
 25049                                  	; 25/02/2023
 25050                                  	;mov	dx,EXECPATH  ; MSDOS 3.3
 25051                                  	; MSDOS 6.0 (& 5.0)
 25052                                  	;mov	dx,offset RESGROUP:SAFEPATHBUFFER
 25053 00002D59 BA[5E04]                	mov	dx,SafePathBuffer
 25054 00002D5C 06                      	push	es
 25055 00002D5D 1F                      	pop	ds
 25056                                  
 25057                                  	;mov	bx,offset RESGROUP:EXEC_BLOCK
 25058 00002D5E BB[3A04]                	mov	bx,Exec_Block  ; = offset EnvirSeg
 25059                                  	;mov	ax,EXEC*256 ; 4B00h
 25060 00002D61 B8004B                  	mov	ax,4B00h
 25061                                  	;test	byte [ROM_CALL],-1 ; 0FFh ; MSDOS 3.3
 25062 00002D64 2EF606[249E]FF          	test	byte [cs:ROM_CALL],-1 ; MSDOS 6.0 (& 5.0)
 25063 00002D6A 7403                    	jz	short OK_EXEC
 25064 00002D6C E9DDD7                  	jmp	ROM_EXEC
 25065                                  
 25066                                  OK_EXEC:
 25067                                  
 25068                                  ; we are now running in free space. Anything we do from here on may get
 25069                                  ; trashed. Move the stack (also in free space) to allocated space because
 25070                                  ; since EXEC restores the stack, somebody may trash what is on the stack.
 25071                                  
 25072 00002D6F 8CC1                    	mov	cx,es
 25073 00002D71 8ED1                    	mov	ss,cx
 25074 00002D73 BC[2E05]                	mov	sp,RStack
 25075                                  	; MSDOS 3.3
 25076                                  	;jmp	far [EXEC_ADDR]	; Jmp to the EXEC in the resident
 25077                                  	; 25/02/2023
 25078                                  	; MSDOS 6.0
 25079 00002D76 2EFF2E[699C]            	jmp	far [cs:EXEC_ADDR] ; Jmp to the EXEC in the resident
 25080                                  
 25081                                  ; =============== S U B	R O U T	I N E =======================================
 25082                                  
 25083                                  ; Prescan converts the input buffer into a canonicalized form.
 25084                                  ; All redirections and pipes are removed.
 25085                                  
 25086                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25087                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2A51h
 25088                                  
 25089                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25090                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:2FFBh
 25091                                  
 25092                                  	; 05/08/2024 - Retro DOS v5.0 COMMAND.COM
 25093                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2E8Dh
 25094                                  PRESCAN:
 25095 00002D7B 31C9                    	xor	cx,cx
 25096 00002D7D 8E06[639C]              	mov	es,[RESSEG]
 25097 00002D81 BE[C49A]                	mov	si,COMBUF+2
 25098 00002D84 89F7                    	mov	di,si
 25099                                  COUNTQUOTES:
 25100 00002D86 AC                      	lodsb			; get a byte
 25101 00002D87 3C22                    	cmp	al,22h	; '"'	; is it a quote?
 25102 00002D89 7504                    	jne	short COUNTEND	; no, try for end of road
 25103 00002D8B FEC5                    	inc	ch		; bump count
 25104 00002D8D EBF7                    	jmp	short COUNTQUOTES
 25105                                  				; go get next char
 25106                                  COUNTEND:
 25107 00002D8F 3C0D                    	cmp	al,0Dh	; 13	; end of road?
 25108 00002D91 75F3                    	jne	short COUNTQUOTES
 25109                                  				; no, go back for next char
 25110                                  	; 26/02/2023
 25111                                  	; MSDOS 5.0 (& 6.0)
 25112 00002D93 51                      	push	cx		; save count
 25113 00002D94 89FE                    	mov	si,di		; restore pointer to begining
 25114                                  KanjiScan:
 25115 00002D96 AC                      	lodsb			; get a byte
 25116 00002D97 E8C5F9                  	call	testkanj	; is it a leadin byte
 25117 00002D9A 740F                    	jz	short KanjiQuote
 25118                                  				; no, check for quotes
 25119 00002D9C 88C4                    	mov	ah,al		; save leadin
 25120 00002D9E AC                      	lodsb			; get trailing byte
 25121 00002D9F 3D2020                  	cmp	ax,2020h
 25122                                  	;cmp	ax,DB_SPACE	; is it Kanji space
 25123 00002DA2 75F2                    	jne	short KanjiScan	; no, go get next
 25124 00002DA4 C744FE2020              	mov	word [si-2],2020h
 25125                                  				; replace with spaces
 25126 00002DA9 EBEB                    	jmp	short KanjiScan	; go get next char
 25127                                  	
 25128                                  KanjiQuote:
 25129 00002DAB 3C22                    	cmp	al,22h	; '"'	; beginning of quoted string
 25130 00002DAD 750D                    	jne	short KanjiEnd	; no, check for end
 25131 00002DAF FECD                    	dec	ch		; drop count
 25132 00002DB1 74E3                    	jz	short KanjiScan	; if count is zero, no quoting
 25133                                  KanjiQuoteLoop:
 25134 00002DB3 AC                      	lodsb			; get next byte
 25135 00002DB4 3C22                    	cmp	al,22h	; '"'	; is it another quote
 25136 00002DB6 75FB                    	jne	short KanjiQuoteLoop
 25137                                  				; no, get another
 25138 00002DB8 FECD                    	dec	ch		; yes, drop count
 25139 00002DBA EBDA                    	jmp	short KanjiScan	; go get next char
 25140                                  KanjiEnd:
 25141 00002DBC 3C0D                    	cmp	al,13 ; 0Dh	; end of line character?
 25142 00002DBE 75D6                    	jne	short KanjiScan	; go back to beginning
 25143 00002DC0 59                      	pop	cx		; get back original count
 25144                                  	; 26/04/2023
 25145 00002DC1 89FE                    	mov	si,di		; restore pointer to beginning
 25146                                  	
 25147                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25148                                  PRESCANLP:
 25149 00002DC3 AC                      	lodsb
 25150                                  	; 26/02/2023
 25151 00002DC4 E898F9                  	call	testkanj
 25152 00002DC7 740C                    	jz	short NOTKANJ6
 25153                                  	; MSDOS 6.0
 25154 00002DC9 8805                    	mov	[di],al
 25155 00002DCB 47                      	inc	di		; fake STOSB into DS
 25156 00002DCC AC                      	lodsb			; grab second byte
 25157 00002DCD 8805                    	mov	[di],al		; fake stosb into DS
 25158 00002DCF FEC1                    	inc	cl
 25159 00002DD1 FEC1                    	inc	cl
 25160 00002DD3 EBEE                    	jmp	short PRESCANLP
 25161                                  
 25162                                  NOTKANJ6:
 25163                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25164 00002DD5 3C22                    	cmp	al,'"'	; 22h	; " character
 25165 00002DD7 7510                    	jne	short TRYGREATER
 25166 00002DD9 FECD                    	dec	ch
 25167 00002DDB 740C                    	jz	short TRYGREATER
 25168                                  QLOOP:
 25169 00002DDD 8805                    	mov	[di],al
 25170 00002DDF 47                      	inc	di
 25171 00002DE0 FEC1                    	inc	cl
 25172 00002DE2 AC                      	lodsb
 25173 00002DE3 3C22                    	cmp	al,'"'		; " character
 25174 00002DE5 75F6                    	jne	short QLOOP
 25175 00002DE7 FECD                    	dec	ch
 25176                                  TRYGREATER:
 25177 00002DE9 3C3E                    	cmp	al,'>' ; 3Eh
 25178                                  	;cmp	al,rabracket	; MSDOS 6.0 (& 5.0)
 25179                                  	;;cmp	al,[RABRACKET]	; MSDOS 3.3
 25180 00002DEB 7565                    	jne	short NOOUT
 25181                                  
 25182                                  ; We have found a ">" char. We need to see if there is another ">"
 25183                                  ; following it.
 25184                                  
 25185 00002DED 3804                    	cmp	[si],al
 25186 00002DEF 7506                    	jne	short NOAPPND
 25187 00002DF1 AC                      	lodsb
 25188 00002DF2 26FE06[C102]            	inc	byte [es:Re_Out_App] ; Flag >>
 25189                                  NOAPPND:
 25190                                  ; Now we attempt to find the file name. First, scan off all whitespace
 25191                                  
 25192 00002DF7 E88AFB                  	call	scanoff
 25193                                  
 25194                                  	; 26/02/2023
 25195                                  	; MSDOS 6.0
 25196 00002DFA 3C3C                    	cmp	al,'<' ; 3Ch
 25197                                  	;cmp	al,labracket	;AN040; was there no filename?
 25198 00002DFC 7404                    	je	short REOUT_ERRSET
 25199                                  				;AN040; yes - set up error
 25200                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25201 00002DFE 3C0D                    	cmp	al,0Dh
 25202 00002E00 750D                    	jnz	short GOTREOFIL
 25203                                  
 25204                                  ; There was no file present. Set us up at end-of-line.
 25205                                  
 25206                                  REOUT_ERRSET:			;AN040; set up for an error
 25207 00002E02 C6050D                  	mov	byte [di],0Dh	; Clobber first ">"
 25208 00002E05 26C706[C202]0900        	mov	word [es:Re_OutStr],9
 25209                                  				; Cause an error later
 25210 00002E0C E9B700                  	jmp	PRESCANEND
 25211                                  
 25212                                  GOTREOFIL:
 25213 00002E0F 57                      	push	di
 25214                                  	;mov	di,offset RESGROUP:RE_OUTSTR
 25215 00002E10 BF[C202]                	mov	di,Re_OutStr
 25216 00002E13 89FB                    	mov	bx,di
 25217 00002E15 06                      	push	es
 25218                                  
 25219                                  	; 26/02/2023
 25220                                  	; MSDOS 6.0
 25221                                  SETREOUTSTR:			; Get the output redirection name
 25222                                  				; MSKK06 07/14/89
 25223 00002E16 51                      	push	cx		; save cx
 25224 00002E17 B94D00                  	mov	cx,64+13	; CX = max string length
 25225                                  SETREOUTSTR_LOOP:
 25226 00002E1A AC                      	lodsb
 25227 00002E1B 3C0D                    	cmp	al,0Dh
 25228 00002E1D 741A                    	je	short GOTRESTR_J
 25229 00002E1F E86AFB                  	call	DELIM
 25230 00002E22 7415                    	jz	short GOTRESTR_J
 25231 00002E24 3A06[679C]              	cmp	al,[SWITCHAR]
 25232 00002E28 740F                    	je	short GOTRESTR_J
 25233 00002E2A 3C22                    	cmp	al,'"' ; 22h 	;AN033; Is the character a quote?
 25234 00002E2C 7421                    	je	short PIPEERRSYNJ5_J
 25235                                  				;AN033; Yes - get out quick - or system crashes
 25236 00002E2E 3C3C                    	cmp	al,'<' ; 3Ch
 25237                                  	;cmp	al,labracket	;AN002; Is char for input redirection
 25238 00002E30 7404                    	je	short ABRACKET_TERM
 25239                                  				;AN002; yes - end of string
 25240 00002E32 3C3E                    	cmp	al,'>' ; 3Eh
 25241                                  	;cmp	al,rabracket	;AN002; Is char for output redirection
 25242 00002E34 7506                    	jne	short NO_ABRACKET
 25243                                  				;AN002; no - not end of string
 25244                                  ABRACKET_TERM:			;AN002; have end of string by < or >
 25245 00002E36 4E                      	dec	si		;AN002; back up over symbol
 25246 00002E37 B020                    	mov	al,20h ; BLANK	;AN002; show delimiter as char
 25247                                  GOTRESTR_J:
 25248 00002E39 59                      	pop	cx		; MSKK06 07/14/89
 25249 00002E3A EB66                    	jmp	short GOTRESTR	;AN002; go process it
 25250                                  NO_ABRACKET:			;AN002; NOT AT END OF STRING
 25251 00002E3C AA                      	stosb			; store it into resgroup
 25252                                  
 25253                                  ; 05/08/2024 - PCDOS 7.1 COMMAND.COM
 25254                                  %if 1
 25255                                  ;ifdef DBCS
 25256                                  	;invoke	testkanj
 25257                                  	;jz	short @f	; if not lead byte of DBCS
 25258 00002E3D E81FF9                  	call	testkanj
 25259 00002E40 7409                    	jz	short NO_ABRACKET_@
 25260 00002E42 E3F5                    	jcxz	GOTRESTR_J	; if no tail byte
 25261 00002E44 AC                      	lodsb
 25262 00002E45 3C0D                    	cmp	al,0Dh
 25263 00002E47 74F0                    	jz	short GOTRESTR_J ; if tail byte does't come and ends
 25264 00002E49 AA                      	stosb			; copy tail byte
 25265 00002E4A 49                      	dec	cx
 25266                                  ;@@:
 25267                                  NO_ABRACKET_@:	; 05/08/2024
 25268                                  ;endif
 25269                                  %endif
 25270                                  
 25271 00002E4B E2CD                    	loop	SETREOUTSTR_LOOP
 25272                                  				; MSKK06 07/14/89
 25273 00002E4D EBEA                    	jmp	short GOTRESTR_J
 25274                                  PIPEERRSYNJ5_J:
 25275 00002E4F 59                      	pop	cx		; recover CX
 25276 00002E50 EB4B                    	jmp	short PIPEERRSYNJ5
 25277                                  
 25278                                  	; 26/02/2023
 25279                                  ;	; MSDOS 3.3
 25280                                  ;SETREOUTSTR_LOOP:		; Get the output redirection name
 25281                                  ;	lodsb
 25282                                  ;	cmp	al,0Dh
 25283                                  ;	jz	short GOTRESTR
 25284                                  ;	call	DELIM
 25285                                  ;	jz	short GOTRESTR
 25286                                  ;	cmp	al,[SWITCHAR]
 25287                                  ;	je	short GOTRESTR
 25288                                  ;	cmp	al,'"'
 25289                                  ;	jne	short NO_ABRACKET
 25290                                  ;	dec	ch
 25291                                  ;NO_ABRACKET:
 25292                                  ;	stosb
 25293                                  ;	jmp	short SETREOUTSTR_LOOP
 25294                                  
 25295                                  NOOUT:
 25296                                  	; 26/02/2023
 25297                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25298 00002E52 3C3C                    	cmp	al, '<' ; 3Ch
 25299                                  	;cmp	al,labracket	; MSDOS 6.0
 25300                                  	;;cmp	al,[LABRACKET]  ; MSDOS 3.3
 25301 00002E54 7523                    	jne	short CHKPIPE
 25302 00002E56 89F3                    	mov	bx,si		; Save loc of "<"
 25303 00002E58 E829FB                  	call	scanoff
 25304                                  	; MSDOS 6.0
 25305 00002E5B 3C3E                    	cmp	al,'>' ; 3Eh
 25306                                  	;cmp	al,rabracket	;AN040; was there no filename?
 25307 00002E5D 7404                    	je	short REIN_ERRSET ;AN040; yes - set up error
 25308                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25309 00002E5F 3C0D                    	cmp	al,0Dh
 25310 00002E61 750B                    	jne	short GOTREIFIL
 25311                                  REIN_ERRSET:			;AN040; set up for error
 25312 00002E63 C6050D                  	mov	byte [di],0Dh	; Clobber "<"
 25313 00002E66 C706[0E9C]0900          	mov	word [RE_INSTR],9 
 25314                                  				; Cause an error later
 25315 00002E6C EB58                    	jmp	short PRESCANEND
 25316                                  GOTREIFIL:
 25317 00002E6E 57                      	push	di
 25318 00002E6F BF[0E9C]                	mov	di,RE_INSTR
 25319 00002E72 89FB                    	mov	bx,di
 25320 00002E74 06                      	push	es
 25321 00002E75 0E                      	push	cs
 25322 00002E76 07                      	pop	es		; store in TRANGROUP
 25323                                  	; 26/04/2023
 25324                                  	;jmp	short SETREOUTSTR_LOOP  ; MSDOS 3.3 COMMAND.COM
 25325 00002E77 EB9D                    	jmp	short SETREOUTSTR ; MSDOS 5.0 (& 6.0) COMMAND.COM
 25326                                  				; Get the input redirection name
 25327                                  CHKPIPE:
 25328 00002E79 88C4                    	mov	ah,al
 25329                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25330 00002E7B 80FC7C                  	cmp	ah,'|' ; 7Ch
 25331                                  	;cmp	ah,ALTPIPECHR ; 7Ch
 25332                                  	;je	short ISPIPE3
 25333                                  	;; MSDOS 6.0
 25334                                  	;cmp	ah,'|' ; 7Ch
 25335                                  	;;cmp	al,vbar ; 7Ch
 25336                                  	;;;cmp	ah,[VBAR]  ; MSDOS 3.3
 25337 00002E7E 7539                    	jne	short CONTPRESCAN
 25338                                  ISPIPE3:
 25339                                  ; Only push the echo flag if we are entering the pipe for the first time.
 25340                                  
 25341 00002E80 26803E[1303]00          	cmp	byte [es:PipeFlag],0
 25342 00002E86 7505                    	jne	short NOECHOPUSH
 25343 00002E88 26D026[9D02]            	shl	byte [es:EchoFlag],1 ; push echo state and turn it off
 25344                                  NOECHOPUSH:
 25345 00002E8D 26FE06[1303]            	inc	byte [es:PipeFlag]
 25346 00002E92 E8EFFA                  	call	scanoff
 25347 00002E95 3C0D                    	cmp	al,0Dh
 25348 00002E97 7404                    	je	short PIPEERRSYNJ5
 25349                                  	; 26/02/2023
 25350 00002E99 3C7C                    	cmp	al,'|' ; 7Ch
 25351                                  	;cmp	al,ALTPIPECHR ; 7Ch
 25352                                  	;je	short PIPEERRSYNJ5
 25353                                  	;; MSDOS 6.0
 25354                                  	;cmp	al,'|' ; 7Ch
 25355                                  	;;cmp	al,vbar ; 7Ch
 25356                                  	;;;cmp	al,[VBAR]  ; MSDOS 3.3	
 25357 00002E9B 751C                    	jne	short CONTPRESCAN
 25358                                  
 25359                                  PIPEERRSYNJ5:
 25360 00002E9D 06                      	push	es
 25361 00002E9E 1F                      	pop	ds
 25362 00002E9F E99E02                  	jmp	PIPEERRSYN
 25363                                  
 25364                                  ; Trailing :s are allowed on devices. Check to be sure that there is more
 25365                                  ; than just a : in the redir string.
 25366                                  
 25367                                  GOTRESTR:
 25368 00002EA2 86E0                    	xchg	ah,al
 25369 00002EA4 B03A                    	mov	al,':' ; 3Ah
 25370 00002EA6 29FB                    	sub	bx,di		; compute negative of number of chars
 25371 00002EA8 83FBFF                  	cmp	bx,-1		; is there just a :?
 25372 00002EAB 7407                    	je	short NOTRAILCOL ; yep, don't change
 25373 00002EAD 263845FF                	cmp	[es:di-1],al	; Trailing ':' OK on devices
 25374 00002EB1 7501                    	jne	short NOTRAILCOL
 25375 00002EB3 4F                      	dec	di		; Back up over trailing ':'
 25376                                  NOTRAILCOL:
 25377 00002EB4 30C0                    	xor	al,al
 25378 00002EB6 AA                      	stosb			; NUL terminate the string
 25379 00002EB7 07                      	pop	es
 25380 00002EB8 5F                      	pop	di		; Remember the start
 25381                                  CONTPRESCAN:
 25382 00002EB9 8825                    	mov	[di],ah		; "delete" the redirection string
 25383 00002EBB 47                      	inc	di
 25384 00002EBC 80FC0D                  	cmp	ah,0Dh
 25385 00002EBF 7405                    	je	short PRESCANEND
 25386 00002EC1 FEC1                    	inc	cl
 25387 00002EC3 E9FDFE                  	jmp	PRESCANLP
 25388                                  PRESCANEND:
 25389 00002EC6 26803E[1303]00          	cmp	byte [es:PipeFlag],0
 25390 00002ECC 7414                    	jz	short ISNOPIPE
 25391                                  
 25392                                  	; 11/06/2023
 25393                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:314Ah
 25394                                  	;mov	di,48Ah		; PipeStr ; RESGROUP:EndInit+160
 25395                                  	;mov	[es:488h],di	; [es:PipePtr],di
 25396                                  				; (RESGROUP:EndInit+158)
 25397                                  	; 26/02/2023
 25398                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA0h
 25399                                  	;;mov	di,3C0h		; offset RESGROUP:PIPESTR
 25400                                  	;;			; (EndInit+160]
 25401                                  
 25402                                  	; 05/08/2024
 25403                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:2FEAh
 25404                                  	;mov	di,4BEh		; PipeStr ; RESGROUP:EndInit+160	
 25405                                  	;mov	[es:4BCh],di	; (RESGROUP:EndInit+158)
 25406                                  
 25407                                  	;mov	di,offset RESGROUP:PIPESTR
 25408 00002ECE BF[B503]                	mov	di,PipeStr	; RESGROUP:EndInit+160
 25409                                  
 25410                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA3h
 25411                                  	;;mov	[es:3BEh],di	; [es:EndInit+158]
 25412 00002ED1 26893E[B303]            	mov	[es:PipePtr],di	; RESGROUP:EndInit+158
 25413                                  	
 25414 00002ED6 BE[C49A]                	mov	si,COMBUF+2
 25415 00002ED9 E8A8FA                  	call	scanoff
 25416                                  PIPESETLP:			; Transfer the pipe into the resident
 25417 00002EDC AC                      	lodsb			; pipe buffer
 25418 00002EDD AA                      	stosb
 25419 00002EDE 3C0D                    	cmp	al,0Dh
 25420 00002EE0 75FA                    	jnz	short PIPESETLP
 25421                                  ISNOPIPE:
 25422 00002EE2 880E[C39A]              	mov	[COMBUF+1],cl
 25423 00002EE6 26803E[1303]00          	cmp	byte [es:PipeFlag],0 ; [es:41Ch] ; PCDOS 7.1 COMMAND.COM
 25424 00002EEC 0E                      	push	cs
 25425 00002EED 07                      	pop	es
 25426 00002EEE C3                      	retn
 25427                                  
 25428                                  ; =============== S U B	R O U T	I N E =======================================
 25429                                  
 25430                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25431                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2BC1h
 25432                                  cmd_copy:
 25433 00002EEF BE[C49A]                	mov	si,COMBUF+2
 25434 00002EF2 E88FFA                  	call	scanoff		; advance past separators...
 25435 00002EF5 0336[019E]              	add	si,[PathPos]
 25436 00002EF9 BF8100                  	mov	di,81h
 25437 00002EFC 31C9                    	xor	cx,cx
 25438                                  cmdcopy:
 25439 00002EFE AC                      	lodsb
 25440 00002EFF AA                      	stosb
 25441 00002F00 3C0D                    	cmp	al,0Dh
 25442 00002F02 7403                    	je	short copy_done
 25443 00002F04 41                      	inc	cx
 25444 00002F05 EBF7                    	jmp	short cmdcopy
 25445                                  copy_done:
 25446 00002F07 880E8000                	mov	[80h],cl
 25447 00002F0B C3                      	retn
 25448                                  
 25449                                  ; =============== S U B	R O U T	I N E =======================================
 25450                                  
 25451                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25452                                  test_append:
 25453 00002F0C BB[C29A]                	mov	bx,COMBUF	; barry can address
 25454 00002F0F BE[2C9D]                	mov	si,IDLEN	; address command name, DS already set 	
 25455 00002F12 BAFFFF                  	mov	dx,-1
 25456 00002F15 B800AE                  	mov	ax,0AE00h
 25457 00002F18 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal 
 25458                                  			; - INSTALLABLE	COMMAND	- INSTALL CHECK
 25459                                  			; DX = FFFFh,[BX -> command line
 25460                                  			; Return: AL = FFh if this command is a TSR extension 
 25461                                  			;		   to COMMAND.COM
 25462                                  			; AL = 00h if the command should be executed as	usual
 25463                                  	;cmp	al,0
 25464 00002F1A 08C0                    	or	al,al ; 25/02/2023
 25465 00002F1C C3                      	retn
 25466                                  
 25467                                  	; 25/02/2023
 25468                                  	; INT 2Fh
 25469                                  	; 	AX = AE00h
 25470                                  	; entry:
 25471                                  	; 	DX = magic value FFFFh
 25472                                  	; 	CH = FFh
 25473                                  	; 	CL = length of command line tail
 25474                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 25475                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 25476                                  	; return:
 25477                                  	;	AL = FFh if this command is a TSR extension to COMMAND.COM
 25478                                  	;	AL = 00h if the command should be executed as usual
 25479                                  	;
 25480                                  	; Format of COMMAND.COM command line buffer:
 25481                                  	;	Offset  Size    Description
 25482                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 25483                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 25484                                  	;	N BYTEs command line text, terminated by 0Dh
 25485                                  	;
 25486                                  	; Format of command name buffer:
 25487                                  	;	Offset  Size    Description
 25488                                  	;	00h     BYTE    length of command name
 25489                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 25490                                  
 25491                                  ;============================================================================
 25492                                  ; TMISC2.ASM, MSDOS 6.0, 1991
 25493                                  ;============================================================================
 25494                                  ; 05/10/2018 - Retro DOS v3.0
 25495                                  
 25496                                  ;	More misc routines
 25497                                  
 25498                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1D9Bh
 25499                                  
 25500                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25501                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2BEFh
 25502                                  
 25503                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25504                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3199h
 25505                                  
 25506                                  ; 05/08/2024 - Retro DOS v5.0 COMMAND.COM
 25507                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 3039h
 25508                                  
 25509                                  ; =============== S U B	R O U T	I N E =======================================
 25510                                  
 25511                                  SETPATH:
 25512                                  
 25513                                  ; ENTRY PathPos = ptr to string
 25514                                  ;       PathCnt = length of string
 25515                                  ;
 25516                                  ; EXIT  PathPos = ptr to string after pathname
 25517                                  ;       PathCnt = length of rest of string
 25518                                  ;       DX = ptr to pathname in string, made ASCIIZ
 25519                                  ;       DestIsDir = 1 if pathname delimiters appeared in pathname, 0 otherwise
 25520                                  ;       DestInfo = 2 if wildcards (?, *) appeared in pathname, 0 otherwise
 25521                                  ;
 25522                                  ;       A null character is dropped at the end of the pathname. If the
 25523                                  ;       character in that spot previously was CR, it is copied into the
 25524                                  ;       following byte. So there must be at least two two character 
 25525                                  ;       positions in the buffer following the pathname.
 25526                                  
 25527                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25528                                  	
 25529                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25530                                  	; MSDOS 6.0
 25531                                  	;mov	ax,[PathCnt]	;AC000; get length of string
 25532                                  	;mov	si,[PathPos]	;AC000; get start of source buffer
 25533                                  
 25534                                  	; 26/02/2023
 25535                                  	; MSDOS 3.3
 25536                                  	;mov	si,80h
 25537                                  	;lodsb
 25538                                  	;xor	ah,ah
 25539                                  	;mov	[PATCNT],ax
 25540                                  	;mov	[PATHPOS],si
 25541                                  GETPATH:
 25542                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25543 00002F1D C606[2D9E]00            	mov	byte [DestInfo],0
 25544 00002F22 C606[299E]00            	mov	byte [DestIsDir],0
 25545 00002F27 8B36[019E]              	mov	si,[PathPos]	; SI = ptr to string
 25546 00002F2B 8B0E[FF9D]              	mov	cx,[PathCnt]	; CX = string length
 25547 00002F2F 89F2                    	mov	dx,si		; DX = ptr to string
 25548 00002F31 E34D                    	jcxz	PATHDONE	; string length is zero, we're done
 25549 00002F33 51                      	push	cx		; save string length
 25550 00002F34 56                      	push	si		; save ptr to string
 25551 00002F35 E80AFC                  	call	SWITCH
 25552                                  
 25553                                  ;       After Switch, SI has been scanned past any switches, and
 25554                                  ;       switches that COMMAND intrinsically recognizes are recorded in AX.
 25555                                  
 25556 00002F38 A3[039E]                	mov	[PathSw],ax	; PathSw = switch occurrence mask
 25557 00002F3B 5B                      	pop	bx		; BX = ptr to original string
 25558 00002F3C 29F3                    	sub	bx,si		; BX = -(# chars scanned by Switch)
 25559 00002F3E 59                      	pop	cx		; CX = string length
 25560 00002F3F 01D9                    	add	cx,bx		; CX = string length from current SI
 25561 00002F41 89F2                    	mov	dx,si		; DX = ptr to current string
 25562                                  SKIPPATH:
 25563                                  	; 26/02/2023
 25564                                  	; MSDOS 6.0
 25565 00002F43 C606[BF9F]00            	mov	byte [KPARSE],0
 25566                                  SKIPPATH2:
 25567 00002F48 E336                    	jcxz	PATHDONE	; string length is zero, we're done
 25568 00002F4A 49                      	dec	cx		; CX = length left after next char
 25569 00002F4B AC                      	lodsb			; AL = next char of string
 25570                                  				; SI = ptr to char after this one
 25571                                  	; 26/02/2023
 25572 00002F4C E810F8                  	call	testkanj
 25573 00002F4F 7408                    	jz	short TESTPPSEP
 25574 00002F51 49                      	dec	cx
 25575 00002F52 46                      	inc	si
 25576 00002F53 FE06[BF9F]              	inc	byte [KPARSE]
 25577 00002F57 EBEF                    	jmp	short SKIPPATH2
 25578                                  TESTPPSEP:
 25579 00002F59 E8B6FA                  	call	pathchrcmp	; compare AL to path delimiter char
 25580 00002F5C 7504                    	jnz	short TESTPMETA	; it's not a path delim
 25581 00002F5E FE06[299E]              	inc	byte [DestIsDir]
 25582                                  				; DestIsDir = 1, signalling path char
 25583                                  TESTPMETA:
 25584 00002F62 3C3F                    	cmp	al,'?'
 25585 00002F64 7505                    	jne	short TESTPSTAR	; char is not '?'
 25586 00002F66 800E[2D9E]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 25587                                  TESTPSTAR:
 25588 00002F6B 3C2A                    	cmp	al,'*'
 25589                                  	;cmp	al,[STAR] ; MSDOS 3.3	
 25590 00002F6D 7505                    	jne	short TESTPDELIM ; char is not '*'
 25591 00002F6F 800E[2D9E]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 25592                                  TESTPDELIM:
 25593 00002F74 E815FA                  	call	DELIM		; compare AL to all delimiters
 25594 00002F77 7406                    	jz	short PATHDONEDEC ; delimiter found, back up & leave
 25595 00002F79 3A06[679C]              	cmp	al,[SWITCHAR]
 25596 00002F7D 75C4                    	jne	short SKIPPATH	; char isn't switch, go get next char
 25597                                  PATHDONEDEC:
 25598 00002F7F 4E                      	dec	si		; SI = ptr to char after pathname
 25599                                  PATHDONE:
 25600 00002F80 30C0                    	xor	al,al		; AL = NULL
 25601 00002F82 8604                    	xchg	al,[si]		; place NULL after pathname
 25602 00002F84 46                      	inc	si		; SI = ptr to byte after NULL
 25603 00002F85 3C0D                    	cmp	al,0Dh		; were we at end of line?
 25604 00002F87 7502                    	jne	short NOPSTORE	; not EOL, finish up
 25605 00002F89 8804                    	mov	[si],al		; save EOL after NULL
 25606                                  NOPSTORE:
 25607 00002F8B 8936[019E]              	mov	[PathPos],si	; PathPos = ptr to char after NULL
 25608 00002F8F 890E[FF9D]              	mov	[PathCnt],cx	; PathCnt = length of string left
 25609                                  SETPATH_RETN:
 25610 00002F93 C3                      	retn
 25611                                  
 25612                                  ; ---------------------------------------------------------------------------
 25613                                  
 25614                                  PGETARG:
 25615 00002F94 BE8000                  	mov	si,80h
 25616 00002F97 AC                      	lodsb
 25617 00002F98 08C0                    	or	al,al
 25618 00002F9A 74F7                    	jz	short SETPATH_RETN
 25619 00002F9C E80300                  	call	PSCANOFF
 25620 00002F9F 3C0D                    	cmp	al,0Dh
 25621 00002FA1 C3                      	retn
 25622                                  
 25623                                  ; ---------------------------------------------------------------------------
 25624                                  
 25625                                  PSCANOFF:
 25626 00002FA2 AC                      	lodsb
 25627 00002FA3 E8E6F9                  	call	DELIM
 25628 00002FA6 7504                    	jnz	short PSCANOFFD
 25629 00002FA8 3C3B                    	cmp	al,';' ; 3Bh
 25630 00002FAA 75F6                    	jne	short PSCANOFF	; ';' is not a delimiter
 25631                                  PSCANOFFD:
 25632 00002FAC 4E                      	dec	si		; Point to first non-delimiter
 25633 00002FAD C3                      	retn
 25634                                  
 25635                                  ; =============== S U B	R O U T	I N E =======================================
 25636                                  
 25637                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25638                                  IOSET:
 25639                                  	; ALL REGISTERS PRESERVED
 25640 00002FAE 1E                      	push	ds
 25641 00002FAF 52                      	push	dx
 25642 00002FB0 50                      	push	ax
 25643 00002FB1 53                      	push	bx
 25644 00002FB2 51                      	push	cx
 25645 00002FB3 2E8E1E[639C]            	mov	ds,[cs:RESSEG]
 25646 00002FB8 803E[1303]00            	cmp	byte [PipeFlag],0
 25647 00002FBD 750D                    	jne	short NOREDIR
 25648 00002FBF F606[AA02]FF            	test	byte [IfFlag],0FFh
 25649 00002FC4 7506                    	jnz	short NOREDIR
 25650 00002FC6 E88C00                  	call	TESTDOREIN
 25651 00002FC9 E80600                  	call	TESTDOREOUT
 25652                                  NOREDIR:
 25653 00002FCC 59                      	pop	cx
 25654 00002FCD 5B                      	pop	bx
 25655 00002FCE 58                      	pop	ax
 25656 00002FCF 5A                      	pop	dx
 25657 00002FD0 1F                      	pop	ds
 25658                                  IOSET_RETN:	; 06/08/2024
 25659 00002FD1 C3                      	retn
 25660                                  
 25661                                  ; =============== S U B	R O U T	I N E =======================================
 25662                                  
 25663                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25664                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CF3h
 25665                                  
 25666                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 25667                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:313Dh
 25668                                  TESTDOREOUT:
 25669 00002FD2 803E[C202]00            	cmp	byte [Re_OutStr],0
 25670                                  	;je	short NOREOUT  ; MSDOS 3.3
 25671                                  	; 26/02/2023
 25672                                  	;jne	short REOUTEXISTS
 25673                                  	;jmp	NOREOUT
 25674                                  	; 06/08/2024
 25675 00002FD7 74F8                    	jz	short IOSET_RETN
 25676                                  REOUTEXISTS:
 25677 00002FD9 803E[C102]00            	cmp	byte [Re_Out_App],0
 25678 00002FDE 745D                    	je	short REOUTCRT
 25679                                  
 25680 00002FE0 BA[C202]                	mov	dx,Re_OutStr
 25681                                  
 25682                                  	; 26/02/2023
 25683                                  	; MSDOS 6.0
 25684                                  	;mov	ax,(OPEN SHL 8) OR 2 ;AC011; Open for read/write
 25685 00002FE3 B8023D                  	mov	ax,3D02h
 25686                                  	; MSDOS 3.3
 25687                                  	;mov	ax,(OPEN<<8)|1  ; 3D01h ; Open for write
 25688                                  	
 25689                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25690 00002FE6 50                      	push	ax
 25691 00002FE7 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 25692                                  			; DS:DX	-> ASCIZ filename
 25693                                  			; AL = access mode
 25694                                  			; 1 - write
 25695 00002FE9 5B                      	pop	bx
 25696 00002FEA 724B                    	jc	short OpenWriteError
 25697                                  
 25698                                  	; 26/02/2023
 25699                                  	; MSDOS 6.0
 25700 00002FEC 89C3                    	mov	bx,ax
 25701                                  	;mov	ax,IOCTL<<8		;AN035; Get attributes of handle
 25702 00002FEE B80044                  	mov	ax,4400h
 25703 00002FF1 CD21                    	int	21h			;AN035;
 25704                                  			; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 25705                                  			; BX = file or device handle
 25706 00002FF3 F6C280                  	test	dl,80h
 25707                                  	;test	dl,devid_ISDEV		;AN035; Is it a device?
 25708 00002FF6 7554                    	jnz	short SET_REOUT		;AN035; Yes, don't read from it
 25709                                  	
 25710                                  	;mov	ax,(LSEEK SHL 8) OR 2
 25711 00002FF8 B80242                  	mov	ax,4202h
 25712 00002FFB B9FFFF                  	mov	cx,-1			;AC011; MOVE TO EOF -1
 25713 00002FFE 89CA                    	mov	dx,cx			;AC011;
 25714 00003000 CD21                    	int	21h
 25715                                  			; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 25716                                  			; AL = method: offset from end of file
 25717 00003002 0E                      	push	cs			;AN011; Get transient seg to DS
 25718 00003003 1F                      	pop	ds			;AN011;
 25719                                  	
 25720                                  	;mov	ax,(READ SHL 8) 	;AN011; Read one byte from the
 25721 00003004 B8003F                  	mov	ax,3F00h
 25722 00003007 B90100                  	mov	cx,1			;AN011;  file into one_char_val
 25723 0000300A BA[219E]                	mov	dx,One_Char_Val		;AN011;
 25724 0000300D CD21                    	int	21h			;AN011;
 25725                                  			; DOS - 2+ - READ FROM FILE WITH HANDLE
 25726                                  			; BX = file handle, CX = number of bytes to read
 25727                                  			; DS:DX -> buffer
 25728 0000300F 7226                    	jc	short OpenWriteError	;AN011; If error, exit
 25729 00003011 39C8                    	cmp	ax,cx			;AN017; Did we read 1 byte?
 25730 00003013 7517                    	jnz	short reout_0_length	;AN017; No - file must be 0 length
 25731                                  	
 25732 00003015 803E[219E]1A            	cmp	byte [One_Char_Val],1Ah	;AN011; Was char an eof mark?
 25733 0000301A 8E1E[639C]              	mov	ds,[RESSEG]		;AN011; Get resident segment back
 25734 0000301E 752C                    	jne	short SET_REOUT		;AN011; No, just continue
 25735                                  	
 25736                                  	;mov	ax,(LSEEK<<8)|1		;AN011; EOF mark found
 25737 00003020 B80142                  	mov	ax,4201h
 25738 00003023 B9FFFF                  	mov	cx,-1			;AN011; LSEEK back one byte
 25739                                  setreout_p:	; 26/02/2023
 25740 00003026 89CA                    	mov	dx,cx			;AN011;
 25741 00003028 CD21                    	int	21h			;AN011;
 25742 0000302A EB20                    	jmp	short SET_REOUT
 25743                                  reout_0_length: 			;AN017; We have a 0 length file
 25744                                  	; ds = cs ; 26/02/2023
 25745                                  	;mov	ds,[cs:RESSEG] ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2D50h
 25746                                  					;AN017; Get resident segment back
 25747                                  	; 26/02/2023
 25748 0000302C 8E1E[639C]              	mov	ds,[RESSEG]
 25749                                  	;mov	ax,(LSEEK SHL 8)	;AN017; Move to beginning of file
 25750 00003030 B80042                  	mov	ax,4200h
 25751 00003033 31C9                    	xor	cx,cx			;AN017; Offset is 0
 25752                                  	;mov	dx,cx			;AN017;
 25753                                  	;int	21h			;AN017;
 25754                                  	;jmp	short SET_REOUT 	;AN017; now finish setting up redirection
 25755                                  	; 26/02/2023
 25756 00003035 EBEF                    	jmp	short setreout_p
 25757                                  
 25758                                  	; 26/02/2023
 25759                                  	; MSDOS 3.3
 25760                                  	;xor	dx,dx
 25761                                  	;xor	cx,cx
 25762                                  	;mov	bx,ax
 25763                                  	;mov	ax,(LSEEK<<8)|2 ; 4202h
 25764                                  	;int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 25765                                  	;		; AL = method: offset from end of file
 25766                                  	;jmp	short SET_REOUT
 25767                                  		
 25768                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25769                                  OpenWriteError:	
 25770                                  	;cmp	ax,5
 25771 00003037 83F805                  	cmp	ax,ERROR_ACCESS_DENIED
 25772 0000303A F9                      	stc
 25773                                  	;;je	short REDIRERR ; MSDOS 3.3
 25774                                  	; 26/02/2023
 25775                                  	;jnz	short REOUTCRT
 25776                                  	;jmp	REDIRERR
 25777 0000303B 743B                    	je	short REDIRERR
 25778                                  
 25779                                  REOUTCRT:	
 25780 0000303D BA[C202]                	mov	dx,Re_OutStr
 25781 00003040 31C9                    	xor	cx,cx
 25782                                  	;mov	ah,CREAT ; 3Ch
 25783 00003042 B43C                    	mov	ah,3Ch
 25784 00003044 50                      	push	ax
 25785 00003045 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 25786                                  			; CX = attributes for file
 25787                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 25788 00003047 5B                      	pop	bx
 25789                                  	;jc	short REDIRERR ; MSDOS 3.3
 25790                                  	; 26/02/2023
 25791                                  	;jnc	short NOREDIRERR
 25792                                  	;jmp	REDIRERR
 25793 00003048 722E                    	jc	short REDIRERR
 25794                                  	
 25795                                  NOREDIRERR:
 25796 0000304A 89C3                    	mov	bx,ax
 25797                                  SET_REOUT:
 25798                                  
 25799                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdout
 25800                                  ; spot. We invalidate the new JFN we got.
 25801                                  
 25802 0000304C B0FF                    	mov	al,0FFh
 25803                                  	;xchg	al,[bx+18h]
 25804 0000304E 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 25805 00003051 A21900                  	mov	[PDB.JFN_TABLE+1],al
 25806                                  NOREOUT:	; 06/08/2024
 25807 00003054 C3                      	retn
 25808                                  
 25809                                  ; =============== S U B	R O U T	I N E =======================================
 25810                                  
 25811                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25812                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 25813                                  
 25814                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 25815                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:30F5h
 25816                                  TESTDOREIN:
 25817 00003055 2E803E[0E9C]00          	cmp	byte [cs:RE_INSTR],0
 25818                                  	;jz	short IOSET_RETN
 25819                                  	; 06/08/2024
 25820 0000305B 74F7                    	jz	short NOREOUT
 25821 0000305D 1E                      	push	ds
 25822 0000305E 0E                      	push	cs
 25823 0000305F 1F                      	pop	ds
 25824 00003060 BA[0E9C]                	mov	dx,RE_INSTR
 25825                                  	;;mov	ax,OPEN*256 ; 3D00h
 25826                                  	;mov	ax,3D00h
 25827                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 25828                                  	;mov	ax,(OPEN*256)+SHARING_DENY_NONE
 25829 00003063 B8403D                  	mov	ax,3D40h
 25830 00003066 89C3                    	mov	bx,ax
 25831 00003068 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 25832                                  			; DS:DX	-> ASCIZ filename
 25833                                  			; AL = access mode
 25834                                  			; 0 - read
 25835 0000306A 1F                      	pop	ds
 25836                                  
 25837 0000306B 720B                    	jc	short REDIRERR
 25838                                  
 25839 0000306D 89C3                    	mov	bx,ax
 25840 0000306F B0FF                    	mov	al,0FFh
 25841                                  
 25842                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdin
 25843                                  ; spot. We invalidate the new JFN we got.
 25844                                  
 25845                                  	;xchg	al,[bx+18h]
 25846 00003071 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 25847 00003074 A21800                  	mov	[PDB.JFN_TABLE],al
 25848 00003077 C3                      	retn
 25849                                  
 25850                                  ; ---------------------------------------------------------------------------
 25851                                  
 25852                                  ; We had some kind of error on the redirection. Figure out what the
 25853                                  ; appropriate message should be; BX has the system call that failed
 25854                                  
 25855                                  REDIRERR:
 25856 00003078 0E                      	push	cs
 25857 00003079 1F                      	pop	ds
 25858 0000307A E82E00                  	call	TriageError  ; MSDOS 6.0
 25859                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 25860                                  
 25861                                  ; At this point, we have recognized the network-generated access denied error.
 25862                                  ; The correct message is in DX
 25863                                  
 25864 0000307D 83F841                  	cmp	ax,65
 25865 00003080 7408                    	je	short _CERRORJ	;AC000; just issue message returned
 25866 00003082 80FF3D                  	cmp	bh,OPEN ; 3Dh
 25867 00003085 7406                    	je	short OpenError
 25868 00003087 BA[F48F]                	mov	dx,FULLDIR_PTR
 25869                                  _CERRORJ:
 25870 0000308A E997FC                  	jmp	cerror
 25871                                  
 25872                                  OpenError:
 25873                                  ; The system call was an OPEN. Report either file not found or path not found.
 25874                                  
 25875                                  	; 26/02/2023
 25876                                  	; MSDOS 6.0
 25877                                  	;mov	byte [cs:msg_disp_class],1
 25878 0000308D 2EC606[D88F]01          	mov	byte [cs:msg_disp_class],ext_msg_class
 25879                                  				;AN000; set up extended error msg class
 25880 00003093 BA[DA8F]                	mov	dx,extend_buf_ptr
 25881                                  				;AC000; get extended message pointer
 25882 00003096 2EA3[DA8F]              	mov	[cs:extend_buf_ptr],ax
 25883                                  				;AN000; get message number in control block
 25884 0000309A E987FC                  	jmp	cerror
 25885                                  
 25886                                  	; 26/02/2023
 25887                                  	; MSDOS 3.3
 25888                                  	;mov	dx,FNOTFOUNDPTR
 25889                                  	;;cmp	ax,2
 25890                                  	;cmp	ax,ERROR_FILE_NOT_FOUND
 25891                                  	;je	short _CERRORJ
 25892                                  	;mov	dx,ACCDENPTR
 25893                                  	;;cmp	ax,5 ; Access denied error
 25894                                  	;cmp	ax,ERROR_ACCESS_DENIED
 25895                                  	;je	short _CERRORJ
 25896                                  	;	; ERROR_PATH_NOT_FOUND
 25897                                  	;mov	dx,PNOTFOUNDPTR
 25898                                  	;jmp	CERROR
 25899                                  
 25900                                  ; =============== S U B	R O U T	I N E =======================================
 25901                                  
 25902                                  ; Compute length of string (including NUL) in DS:SI into CX. Change no other
 25903                                  ; registers
 25904                                  
 25905                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 25906                                  dstrlen:
 25907 0000309D 50                      	push	ax
 25908 0000309E 31C9                    	xor	cx,cx
 25909 000030A0 FC                      	cld
 25910                                  dloop:
 25911 000030A1 AC                      	lodsb
 25912 000030A2 41                      	inc	cx
 25913 000030A3 08C0                    	or	al,al
 25914 000030A5 75FA                    	jnz	short dloop
 25915 000030A7 29CE                    	sub	si,cx
 25916 000030A9 58                      	pop	ax
 25917                                  TRIAGEERR_RETN:
 25918 000030AA C3                      	retn
 25919                                  
 25920                                  ; =============== S U B	R O U T	I N E =======================================
 25921                                  
 25922                                  ;Break	<Extended error support>
 25923                                  
 25924                                  TriageError:  ; MSDOS 6.0
 25925                                  
 25926                                  ; TriageError will examine the return from a carry-set system call and
 25927                                  ; return the correct error if applicable.
 25928                                  ;
 25929                                  ;   Inputs:	outputs from a carry-settable system call
 25930                                  ;		No system calls may be done in the interrim
 25931                                  ;   Outputs:	If carry was set on input
 25932                                  ;		   carry set on output
 25933                                  ;		   DX contains trangroup offset to printf message
 25934                                  ;		else
 25935                                  ;		   No registers changed
 25936                                  
 25937                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1EEEh
 25938                                  
 25939                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25940                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2D92h
 25941                                  
 25942                                  ; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25943                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 333Ch
 25944                                  
 25945                                  GET_EXT_ERR_NUMBER:  ; MSDOS 3.3
 25946 000030AB 73FD                    	jnc	short TRIAGEERR_RETN ; no carry => do nothing...
 25947 000030AD 9C                      	pushf
 25948 000030AE 53                      	push	bx
 25949 000030AF 51                      	push	cx
 25950 000030B0 56                      	push	si
 25951 000030B1 57                      	push	di
 25952 000030B2 55                      	push	bp
 25953 000030B3 06                      	push	es
 25954 000030B4 1E                      	push	ds
 25955 000030B5 50                      	push	ax
 25956 000030B6 52                      	push	dx
 25957 000030B7 B459                    	mov	ah,59h
 25958                                  	;mov	ah,GETEXTENDEDERROR
 25959 000030B9 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 25960                                  			; BX = version code (0000h for DOS 3.x)
 25961 000030BB 59                      	pop	cx
 25962 000030BC 5B                      	pop	bx		; restore original AX
 25963 000030BD BA[0390]                	mov	dx,ACCDEN_PTR
 25964 000030C0 83F841                  	cmp	ax,65		; network access denied?
 25965 000030C3 7404                    	je	short NoMove	; Yes, return it.
 25966 000030C5 89D8                    	mov	ax,bx
 25967 000030C7 89CA                    	mov	dx,cx
 25968                                  NoMove:
 25969 000030C9 1F                      	pop	ds
 25970 000030CA 07                      	pop	es
 25971 000030CB 5D                      	pop	bp
 25972 000030CC 5F                      	pop	di
 25973 000030CD 5E                      	pop	si
 25974 000030CE 59                      	pop	cx
 25975 000030CF 5B                      	pop	bx
 25976 000030D0 9D                      	popf
 25977 000030D1 C3                      	retn
 25978                                  
 25979                                  ; =============== S U B	R O U T	I N E =======================================
 25980                                  
 25981                                  	; Far call from resident portion/segment of COMMAND.COM
 25982                                  
 25983                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F15h
 25984                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DB9h
 25985                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3363h
 25986                                  
 25987                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25988                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 25989                                  Triage_Init:
 25990 000030D2 E8D6FF                  	call	TriageError	 ; MSDOS 6.0
 25991                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 25992 000030D5 CB                      	retf
 25993                                  
 25994                                  ; =============== S U B	R O U T	I N E =======================================
 25995                                  
 25996                                  ; MSDOS 6.0
 25997                                  
 25998                                  ; ****************************************************************
 25999                                  ; *
 26000                                  ; * ROUTINE:	 MOVE_TO_SRCBUF
 26001                                  ; *
 26002                                  ; * FUNCTION:	 Move ASCIIZ string from DS:SI to SRCBUF.  Change
 26003                                  ; *		 terminating 0 to 0dH.	Set PATHCNT to length of
 26004                                  ; *		 string.  Set PATHPOS to start of SRCBUF.
 26005                                  ; *
 26006                                  ; * INPUT:	 DS:SI points to ASCIIZ string
 26007                                  ; *		 ES    points to TRANGROUP
 26008                                  ; *
 26009                                  ; * OUTPUT:	 SRCBUF filled in with string terminated by 0dH
 26010                                  ; *		 PATHCNT set to length of string
 26011                                  ; *		 PATHPOS set to start of SRCBUF
 26012                                  ; *		 CX,AX	 changed
 26013                                  ; *
 26014                                  ; ****************************************************************
 26015                                  
 26016                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26017                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 26018                                  Move_To_SrcBuf:
 26019 000030D6 56                      	push	si			;AN000;  save si,di
 26020 000030D7 57                      	push	di			;AN000;
 26021 000030D8 51                      	push	cx			;AN000;
 26022 000030D9 BF[919E]                	mov	di,SrcBuf		;AN000;  set ES:DI to srcbuf
 26023 000030DC 31C9                    	xor	cx,cx			;AN000; clear cx for counint
 26024 000030DE 89C8                    	mov	ax,cx			;AN000; clear ax
 26025 000030E0 57                      	push	di			;AN000; save start of srcbuf
 26026 000030E1 AC                      	lodsb				;AN000; get a character from DS:SI
 26027                                  mts_get_chars:				;AN000;
 26028                                  	;cmp	al,0			;AN000; was it a null char?
 26029 000030E2 20C0                    	and 	al,al ; al = 0 ?
 26030 000030E4 7405                    	jz	short mts_end_string	;AN000; yes - exit
 26031 000030E6 AA                      	stosb				;AN000; no - store it in srcbuf
 26032 000030E7 41                      	inc	cx			;AN000; increment length count
 26033 000030E8 AC                      	lodsb				;AN000; get a character from DS:SI
 26034 000030E9 EBF7                    	jmp	short mts_get_chars	;AN000; go check it
 26035                                  mts_end_string: 			;AN000; we've reached the end of line
 26036                                  	;mov	al,END_OF_LINE_IN	;AN000; store 0Dh in srcbuf
 26037 000030EB B00D                    	mov	al,0Dh
 26038 000030ED AA                      	stosb				;AN000;
 26039 000030EE 5F                      	pop	di			;AN000; restore start of srcbuf
 26040 000030EF 0E                      	push	cs			;AN000; set DS to local segment
 26041 000030F0 1F                      	pop	ds			;AN000;
 26042 000030F1 890E[FF9D]              	mov	[PathCnt],cx		;AN000; set patchcnt to length count
 26043 000030F5 893E[019E]              	mov	[PathPos],di		;AN000; set pathpos to start of srcbuf
 26044 000030F9 59                      	pop	cx			;AN000; restore cx,di,si
 26045 000030FA 5F                      	pop	di			;AN000;
 26046 000030FB 5E                      	pop	si			;AN000;
 26047 000030FC C3                      	retn				;AN000; exit
 26048                                  
 26049                                  ;============================================================================
 26050                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 26051                                  ;============================================================================
 26052                                  ; 03/10/2018 - Retro DOS v3.0
 26053                                  
 26054                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F19h
 26055                                  
 26056                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26057                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DE4h
 26058                                  
 26059                                  ; =============== S U B	R O U T	I N E =======================================
 26060                                  
 26061                                  	; 26/02/2023
 26062                                  SINGLETEST:
 26063 000030FD 1E                      	push	ds
 26064 000030FE 2E8E1E[639C]            	mov	ds,[cs:RESSEG]
 26065 00003103 833E[A502]00            	cmp	word [SingleCom],0
 26066 00003108 7406                    	jz	short TESTDONE
 26067 0000310A 813E[A502]FFEF          	cmp	word [SingleCom],0EFFFh
 26068                                  TESTDONE:
 26069 00003110 1F                      	pop	ds
 26070 00003111 C3                      	retn
 26071                                  
 26072                                  ; =============== S U B	R O U T	I N E =======================================
 26073                                  
 26074                                  	; 26/02/2023
 26075                                  SetRest1:
 26076 00003112 B001                    	mov	al,1
 26077                                  
 26078                                  ; ---------------------------------------------------------------------------
 26079                                  
 26080                                  SETREST:
 26081 00003114 1E                      	push	ds
 26082 00003115 8E1E[639C]              	mov	ds,[RESSEG]
 26083 00003119 A2[A102]                	mov	[RestDir],al
 26084 0000311C 1F                      	pop	ds
 26085 0000311D C3                      	retn
 26086                                  
 26087                                  ; =============== S U B	R O U T	I N E =======================================
 26088                                  
 26089                                  ; Note that we need to handle the same thing that RestDir handles: the
 26090                                  ; requirement that we try only once to restore the user's environment after
 26091                                  ; and INT 24 or the like. If the condition that causes the INT 24 does not
 26092                                  ; disappear, we just give up.
 26093                                  
 26094                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 26095                                  	;
 26096                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26097                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33AFh
 26098                                  	;
 26099                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 26100                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:324Fh
 26101                                  PIPEDEL:
 26102 0000311E 1E                      	push	ds
 26103 0000311F 52                      	push	dx
 26104 00003120 2E8E1E[639C]            	mov	ds,[cs:RESSEG]
 26105                                  	;;;mov	dx,320h	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E0Ch
 26106                                  	;;mov	dx,3EAh	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33B1h
 26107                                  	;mov	dx,41Eh	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3256h
 26108                                  			; Pipe1 = offset RESGROUP:EndInit
 26109 00003125 BA[1503]                	mov	dx,Pipe1	; Clean up in case ^C
 26110                                  	;mov	ah,Unlink ; 41h 
 26111 00003128 B441                    	mov	ah,41h
 26112                                  	;int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 26113                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 26114                                  			;		(no wildcards allowed)
 26115                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26116 0000312A E88DD4                  	call	int_21h_indirect
 26117                                  
 26118                                  	;;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E13h
 26119                                  	;;mov	dx,439h	; MSDOS 6.22 COMMAND.COM - TRANGROUP:33BDh
 26120                                  	;mov	dx,46Dh	; PCDOS 7.1 COMMAND.COM - TRANGROUP:325Eh
 26121                                  			; Pipe2 = offset RESGROUP:EndInit+79
 26122 0000312D BA[6403]                	mov	dx,Pipe2
 26123                                  	;mov	ah,Unlink ; 41h
 26124 00003130 B441                    	mov	ah,41h
 26125                                  	;int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 26126                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 26127                                  			;		(no wildcards allowed)
 26128                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26129 00003132 E885D4                  	call	int_21h_indirect
 26130 00003135 5A                      	pop	dx
 26131 00003136 E86C02                  	call	PipeOff
 26132 00003139 C606[1403]00            	mov	byte [PipeFiles],0
 26133 0000313E 1F                      	pop	ds
 26134 0000313F C3                      	retn
 26135                                  
 26136                                  ; ---------------------------------------------------------------------------
 26137                                  
 26138                                  	; 26/02/2023
 26139                                  PIPEERRSYN:
 26140 00003140 BA[AD90]                	mov	dx,SYNTMES_PTR	; MSG_1030 ; 06/08/2024
 26141 00003143 E8D8FF                  	call	PIPEDEL
 26142 00003146 0E                      	push	cs
 26143 00003147 1F                      	pop	ds
 26144 00003148 E9D9FB                  	jmp	cerror
 26145                                  
 26146                                  ; ---------------------------------------------------------------------------
 26147                                  
 26148                                  	; 26/02/2023
 26149                                  PIPERR:
 26150 0000314B 9C                      	pushf
 26151 0000314C E85CFF                  	call    TriageError
 26152                                  	;call	GET_EXT_ERR_NUMBER  ; MSDOS 3.3
 26153 0000314F 50                      	push	ax		; Save results from TriageError
 26154 00003150 52                      	push	dx
 26155 00003151 BA[6091]                	mov	dx,PIPEEMES_PTR
 26156 00003154 E8C7FF                  	call	PIPEDEL
 26157 00003157 0E                      	push	cs
 26158 00003158 1F                      	pop	ds
 26159 00003159 E8C422                  	call	std_eprintf
 26160 0000315C 5A                      	pop	dx		; Restore results from TriageError
 26161 0000315D 58                      	pop	ax
 26162 0000315E 9D                      	popf
 26163 0000315F 83F841                  	cmp	ax,65		; network access denied
 26164 00003162 7503                    	jne	short TCOMMANDJ
 26165 00003164 E9BDFB                  	jmp	cerror
 26166                                  
 26167                                  TCOMMANDJ:
 26168 00003167 E99ACF                  	jmp	TCOMMAND
 26169                                  
 26170                                  ; ---------------------------------------------------------------------------
 26171                                  
 26172                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 26173                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26174                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 26175                                  PIPEPROCSTRT:
 26176 0000316A 8E1E[639C]              	mov	ds,[RESSEG]
 26177 0000316E FE06[1403]              	inc	byte [PipeFiles] ; Flag that the pipe files exist
 26178                                  
 26179                                  	; MSDOS 6.0
 26180 00003172 06                      	push	es
 26181 00003173 57                      	push	di
 26182 00003174 1E                      	push	ds
 26183 00003175 56                      	push	si
 26184                                  	
 26185 00003176 1E                      	push	ds
 26186 00003177 06                      	push	es
 26187 00003178 1F                      	pop	ds			;ds = TRANGROUP
 26188 00003179 BE[6997]                	mov	si,TempVarName		;ds:si = "TEMP="
 26189                                  
 26190                                  ;Some hideous code in Find_Name_In_Environment. Expects ds = TRANGROUP and
 26191                                  ;so the routine is not really general
 26192                                  
 26193 0000317C E836F5                  	call	find_name_in_environment
 26194                                  					;es:di points at path
 26195 0000317F 1F                      	pop	ds			;ds = DATARES again
 26196 00003180 7220                    	jc	short no_temp_path
 26197                                  	
 26198 00003182 1E                      	push	ds
 26199 00003183 06                      	push	es
 26200 00003184 1F                      	pop	ds
 26201 00003185 07                      	pop	es			;swap ds and es
 26202 00003186 89FE                    	mov	si,di			;ds:si points at path
 26203                                  	
 26204 00003188 E8B702                  	call	skip_white		;skip white space chars
 26205                                  
 26206                                  ;This copies the path into both buffers -- Pipe1 & Pipe2
 26207                                  
 26208 0000318B E8C002                  	call	copy_pipe_path		;copy the pipe path
 26209                                  	
 26210                                  ;Check if the TEMP path is valid
 26211                                  
 26212 0000318E 06                      	push	es
 26213 0000318F 1F                      	pop	ds			;ds = DATARES
 26214                                  	;mov	dx,offset DATARES:Pipe1	;ds:dx = path to look for
 26215                                  	;;;mov	dx,320h ; MSDOS 5.0 - offset EndInit
 26216                                  	;;mov	dx,3EAh	; MSDOS 6.22 - offset EndInit
 26217                                  	;mov	dx,41Eh	; PCDOS 7.1 COMMAND.COM - offset EndInit
 26218 00003190 BA[1503]                	mov	dx,Pipe1
 26219                                  	;mov	ax,(CHMOD shl 8) or 0
 26220 00003193 B80043                  	mov	ax,4300h
 26221                                  	;int	21h
 26222                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26223 00003196 E821D4                  	call	int_21h_indirect
 26224 00003199 7207                    	jc	short no_temp_path
 26225                                  	
 26226 0000319B F7C11000                	test	cx,10h			;is it a directory?
 26227 0000319F 7501                    	jnz	short no_temp_path	;yes, continue (carry clear)
 26228                                  	
 26229 000031A1 F9                      	stc				;no, indicate fail
 26230                                  no_temp_path:
 26231 000031A2 5E                      	pop	si
 26232 000031A3 1F                      	pop	ds
 26233 000031A4 5F                      	pop	di
 26234 000031A5 07                      	pop	es
 26235 000031A6 730B                    	jnc	short crt_temp		;path found, create tempfiles
 26236                                  
 26237                                  	; 27/02/2023
 26238                                  	; MSDOS 3.3
 26239                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 26240                                  	;				; Get current drive
 26241                                  	;int	21h ; DOS - GET DEFAULT DISK NUMBER
 26242                                  	;add	al,[cs:CAPITAL_A]
 26243                                  	;mov	byte [PIPE2],al		; Make pipe files in root of def drv
 26244                                  	;mov	bx,PIPE1
 26245                                  	;mov	[bx],al
 26246                                  	;xor	ah,ah			; nul terminate path names
 26247                                  	;mov	byte [PIPE1+3],ah
 26248                                  	;mov	byte [PIPE2+3],ah
 26249                                  
 26250                                  	; MSDOS 6.0
 26251                                  ;SR;
 26252                                  ; We want to create temp files in the current directory rather than in the 
 26253                                  ;root of the drive. This is because the number of files that can be present
 26254                                  ;in the root directory is fixed, whereas it is not so in subdirectories.
 26255                                  
 26256                                  	;mov	ah,'.'
 26257                                  	;mov	[Pipe1],ah	; = RESGROUP:EndInit
 26258                                  	;mov	[Pipe2],ah	; = RESGROUP:EndInit+79
 26259                                  	;xor	ah,ah
 26260                                  	;mov	[Pipe1+1],ah	; = RESGROUP:EndInit+1
 26261                                  	;mov	[Pipe2+1],ah		;create files in current dir
 26262                                  	; 27/02/2023
 26263 000031A8 B92E00                  	mov	cx,002Eh
 26264 000031AB 890E[1503]              	mov	[Pipe1],cx
 26265 000031AF 890E[6403]              	mov	[Pipe2],cx
 26266                                  crt_temp:
 26267                                  	; MSDOS 6.0
 26268                                  	;mov	dx,offset DATARES:Pipe1	; = RESGROUP:EndInit
 26269                                  	;;mov	dx,320h ; MSDOS 5.0 COMMAND.COM
 26270                                  	;mov	dx,3EAh ; MSDOS 6.22 COMMAND.COM	
 26271 000031B3 BA[1503]                	mov	dx,Pipe1
 26272                                  	; MSDOS 3.3
 26273                                  	;mov	dx,bx
 26274                                  	
 26275                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26276 000031B6 31C9                    	xor	cx,cx
 26277                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 26278 000031B8 B45A                    	mov	ah,5Ah
 26279                                  	;int	21h
 26280                                  		; DOS -	3+ - CREATE UNIQUE FILE
 26281                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes
 26282                                  		;         to receive generated filename
 26283                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 26284                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26285 000031BA E8FDD3                  	call	int_21h_indirect
 26286 000031BD 728C                    	jc	short PIPERR	; Couldn't create
 26287                                  
 26288 000031BF 89C3                    	mov	bx,ax
 26289                                  	;mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 26290 000031C1 B43E                    	mov	ah,3Eh
 26291 000031C3 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 26292                                  			; BX = file handle
 26293                                  	;;;mov	dx,PIPE2
 26294                                  	;;;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM
 26295                                  	;;mov	dx,439h ; MSDOS 6.22 COMMAND.COM
 26296                                  	;mov	dx,46Dh ; PCDOS 7.1 COMMAND.COM
 26297 000031C5 BA[6403]                	mov	dx,Pipe2
 26298                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 26299 000031C8 B45A                    	mov	ah,5Ah
 26300                                  	;int	21h
 26301                                  		; DOS -	3+ - CREATE UNIQUE FILE
 26302                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 26303                                  		; receive generated filename
 26304                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 26305                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26306 000031CA E8EDD3                  	call	int_21h_indirect
 26307                                  	; 17/04/2023
 26308                                  	;jc	short PIPERR
 26309                                  	; 27/02/2023
 26310 000031CD 7303                    	jnc	short pps1
 26311 000031CF E979FF                  	jmp	PIPERR
 26312                                  pps1:
 26313 000031D2 89C3                    	mov	bx,ax
 26314 000031D4 B43E                    	mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 26315                                  	;int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 26316                                  				; BX = file handle
 26317                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26318 000031D6 E8E1D3                  	call	int_21h_indirect
 26319                                  	;
 26320                                  	;call	near ptr TESTDOREIN ; Set up a redirection if specified
 26321 000031D9 E879FE                  	call	TESTDOREIN
 26322                                  	;;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 26323                                  	;mov	si,[4BCh] ; PCDOS 7.1 COMMAND.COM ; 06/08/2024
 26324 000031DC 8B36[B303]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 26325 000031E0 833E[A502]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 26326 000031E5 7506                    	jne	short NOSINGP
 26327 000031E7 C706[A502]00F0          	mov	word [SingleCom],0F000h ; Flag single command pipe
 26328                                  NOSINGP:
 26329 000031ED EB2A                    	jmp	short FIRSTPIPE
 26330                                  
 26331                                  ; ---------------------------------------------------------------------------
 26332                                  
 26333                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 26334                                  	; 11/06/2026 - Retro DOS v4.2 COMMAND.COM
 26335                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 26336                                  PIPEPROC:
 26337 000031EF 8026[9D02]FE            	and	byte [EchoFlag],0FEh  ; force current echo to be off
 26338                                  	;;mov	si,[488h] ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 26339 000031F4 8B36[B303]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 26340 000031F8 AC                      	lodsb
 26341                                  	; 27/02/2023
 26342 000031F9 3C7C                    	cmp	al,'|'		
 26343                                  	;;cmp	al,ALTPIPECHR	; Alternate pipe char? 	
 26344                                  	;je	short ISPIPE1	; Yes
 26345                                  	;cmp	al,'|'
 26346                                  	;;cmp	al,[cs:VBAR]
 26347 000031FB 7403                    	je	short ISPIPE1
 26348 000031FD E98600                  	jmp	PIPEEND		; Pipe done
 26349                                  ISPIPE1:
 26350 00003200 8B16[3604]              	mov	dx,[InPipePtr]	; Get the input file name
 26351                                  	;mov	ax,OPEN*256 ; 3D00h
 26352 00003204 B8003D                  	mov	ax,3D00h
 26353                                  	;int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 26354                                  			; DS:DX	-> ASCIZ filename
 26355                                  			; AL = access mode
 26356                                  			; 0 - read
 26357                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26358 00003207 E8B0D3                  	call	int_21h_indirect
 26359                                  PIPEERRJ:
 26360 0000320A 7303                    	jnc	short NO_PIPEERR
 26361 0000320C E93CFF                  	jmp	PIPERR		; Lost the pipe file
 26362                                  NO_PIPEERR:
 26363 0000320F 89C3                    	mov	bx,ax
 26364 00003211 B0FF                    	mov	al,0FFh
 26365                                  	;xchg	al,[bx+18h]
 26366 00003213 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 26367 00003216 A21800                  	mov	[PDB.JFN_TABLE],al ; Redirect
 26368                                  FIRSTPIPE:
 26369 00003219 BF[C49A]                	mov	di,COMBUF+2
 26370 0000321C 31C9                    	xor	cx,cx
 26371 0000321E 803C0D                  	cmp	byte [si],0Dh	; '|<CR>'
 26372 00003221 7503                    	jne	short PIPEOK1
 26373                                  PIPEERRSYNJ:
 26374 00003223 E91AFF                  	jmp	PIPEERRSYN
 26375                                  PIPEOK1:
 26376                                  	;;;mov	al,[cs:VBAR]
 26377                                  	; 27/02/2023
 26378                                  	;;mov	al,vbar
 26379                                  	;mov	al,'|'
 26380                                  	;cmp	[si],al		; '||'
 26381                                  	;je	short PIPEERRSYNJ
 26382 00003226 803C7C                  	cmp	byte [si],'|'
 26383                                  	;cmp	byte [si],ALTPIPECHR ; '##' or '|#'?
 26384 00003229 74F8                    	je	short PIPEERRSYNJ
 26385                                  PIPECOMLP:
 26386 0000322B AC                      	lodsb
 26387 0000322C AA                      	stosb
 26388                                  	; 27/02/2023
 26389 0000322D E82FF5                  	call	testkanj
 26390 00003230 7405                    	jz	short NOTKANJ5
 26391 00003232 A4                      	movsb
 26392                                  ;  Added following 2 commands to the fix pipe bug.
 26393 00003233 41                      	inc	cx		;AN000;  3/3/KK
 26394 00003234 41                      	inc	cx		;AN000;  3/3/KK
 26395 00003235 EBF4                    	jmp	short PIPECOMLP
 26396                                  NOTKANJ5:
 26397 00003237 3C0D                    	cmp	al,0Dh
 26398 00003239 7439                    	je	short LASTPIPE
 26399 0000323B 41                      	inc	cx
 26400                                  	; 27/02/2023
 26401 0000323C 3C7C                    	cmp	al,'|'
 26402                                  	;cmp	al,ALTPIPECHR
 26403                                  	;je	short ISPIPE2
 26404                                  	;;cmp	al,[cs:VBAR]
 26405                                  	;cmp	al,vbar
 26406 0000323E 75EB                    	jne	short PIPECOMLP
 26407                                  ISPIPE2:
 26408 00003240 26C645FF0D              	mov	byte [es:di-1],0Dh
 26409 00003245 49                      	dec	cx
 26410                                  	;mov	[cs:COMBUF+1],cl
 26411                                  	; 27/02/2023
 26412 00003246 26880E[C39A]            	mov	[es:COMBUF+1],cl
 26413 0000324B 4E                      	dec	si
 26414                                  	;;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 26415                                  	; 11/06/2023 - MSDOS 6.22 COMMAND.COM
 26416                                  	;mov	[488h],si ; [PipePtr] = [EndInit+158]
 26417                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26418                                  	;mov	[4BCh],si ; [PipePtr] = [EndInit+158]
 26419 0000324C 8936[B303]              	mov	[PipePtr],si		; On to next pipe element
 26420                                  			; mov [EndInit+158],si
 26421 00003250 8B16[3804]              	mov	dx,[OutPipePtr]
 26422 00003254 51                      	push	cx
 26423 00003255 31C9                    	xor	cx,cx
 26424                                  	;mov	ax,CREAT*256 ; 3C00h
 26425 00003257 B8003C                  	mov	ax,3C00h
 26426                                  	;int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 26427                                  			; CX = attributes for file
 26428                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 26429                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26430 0000325A E85DD3                  	call	int_21h_indirect
 26431 0000325D 59                      	pop	cx
 26432 0000325E 72AA                    	jc	short PIPEERRJ		; Lost the file
 26433 00003260 89C3                    	mov	bx,ax
 26434 00003262 B0FF                    	mov	al,0FFh
 26435                                  	;xchg	al,[bx+18h]
 26436 00003264 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 26437 00003267 A21900                  	mov	[PDB.JFN_TABLE+1],al
 26438 0000326A 8716[3604]              	xchg	dx,[InPipePtr]	; Swap for next element of pipe
 26439 0000326E 8916[3804]              	mov	[OutPipePtr],dx
 26440 00003272 EB0D                    	jmp	short PIPECOM
 26441                                  LASTPIPE:
 26442                                  	;mov	[cs:COMBUF+1],cl 
 26443                                  	; 27/02/2023
 26444 00003274 26880E[C39A]            	mov	[es:COMBUF+1],cl
 26445 00003279 4E                      	dec	si
 26446                                  	;;;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 26447                                  	;;mov	[488h],si ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 26448                                  	;mov	[4BCh],si ; PCDOS 7.1 COMMAND.COM ; 06/08/2024
 26449 0000327A 8936[B303]              	mov	[PipePtr],si	; Point at the CR (anything not '|' will do)
 26450                                  		; mov [EndInit+158],si
 26451 0000327E E851FD                  	call	TESTDOREOUT	; Set up the redirection if specified
 26452                                  PIPECOM:
 26453 00003281 0E                      	push	cs
 26454 00003282 1F                      	pop	ds
 26455 00003283 E996D0                  	jmp	NOPIPEPROC	; Process the pipe element
 26456                                  PIPEEND:
 26457 00003286 E895FE                  	call	PIPEDEL
 26458 00003289 813E[A502]00F0          	cmp	word [SingleCom],0F000h
 26459 0000328F 7506                    	jnz	short NOSINGP2
 26460 00003291 C706[A502]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Make it return
 26461                                  NOSINGP2:
 26462 00003297 E96ACE                  	jmp	TCOMMAND
 26463                                  
 26464                                  ; =============== S U B	R O U T	I N E =======================================
 26465                                  
 26466                                  ; Date and time are set during initialization and use
 26467                                  ; this routines since they need to do a long return
 26468                                  
 26469                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 26470                                  
 26471                                  DATINIT:
 26472 0000329A 2E8C1E[639C]            	mov	[cs:RESSEG],ds	; SetInitFlag needs resseg initialized
 26473 0000329F 06                      	push	es
 26474 000032A0 1E                      	push	ds		; Going to use the previous stack
 26475 000032A1 8CC8                    	mov	ax,cs		; Set up the appropriate segment registers
 26476 000032A3 8EC0                    	mov	es,ax
 26477 000032A5 8ED8                    	mov	ds,ax
 26478 000032A7 E85B22                  	call	TSYSLOADMSG ; MSDOS 6.0 ; AN000; preload messages
 26479 000032AA BA[0EA6]                	mov	dx,INTERNATVARS
 26480 000032AD B80038                  	mov	ax,3800h
 26481                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 26482                                  	;int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 26483                                  			; get current-country info
 26484                                  			; DS:DX	-> buffer for returned info
 26485                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26486 000032B0 E807D3                  	call	int_21h_indirect
 26487                                  	; 20/10/2018
 26488 000032B3 C70681000D00            	mov	word [81h],0Dh ; Want to prompt for date during initialization
 26489 000032B9 C606[C29A]80            	mov	byte [COMBUF],128 ; Init COMBUF
 26490 000032BE C706[C39A]010D          	mov	word [COMBUF+1],0D01h
 26491 000032C4 E80600                  	call	DATE
 26492 000032C7 E86300                  	call	CTIME
 26493 000032CA 1F                      	pop	ds
 26494 000032CB 07                      	pop	es
 26495 000032CC CB                      	retf	; far return
 26496                                  
 26497                                  ; =============== S U B	R O U T	I N E =======================================
 26498                                  
 26499                                  ; MSDOS 6.0
 26500                                  
 26501                                  ; ****************************************************************
 26502                                  ; *
 26503                                  ; * ROUTINE:	 DATE - Set system date
 26504                                  ; *
 26505                                  ; * FUNCTION:	 If a date is specified, set the system date,
 26506                                  ; *		 otherwise display the current system date and
 26507                                  ; *		 prompt the user for a new date.  If an invalid
 26508                                  ; *		 date is specified, issue an error message and
 26509                                  ; *		 prompt for a new date.  If the user enters
 26510                                  ; *		 nothing when prompted for a date, terminate.
 26511                                  ; *
 26512                                  ; * INPUT:	 command line at offset 81H
 26513                                  ; *
 26514                                  ; * OUTPUT:	 none
 26515                                  ; *
 26516                                  ; ****************************************************************
 26517                                  
 26518                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26519                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2FC4h
 26520                                  
 26521                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26522                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:356Eh
 26523                                  
 26524                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 26525                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3417h
 26526                                  DATE:
 26527 000032CD BE8100                  	mov	si,81h			; Accepting argument for date inline
 26528 000032D0 BF[5696]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 26529 000032D3 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 26530 000032D5 31D2                    	xor	dx,dx			;AN000;
 26531 000032D7 E89216                  	call	cmd_parse		;AC000; call parser
 26532                                  
 26533                                  	; 27/02/2023
 26534                                  	;cmp	ax,-1
 26535                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 26536                                  	;je	short PRMTDAT 		;AC000; yes - go ask for date
 26537                                  	;;cmp	ax,0
 26538                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 26539                                  	;;jne	short DATERR		;AN000; yes - go issue message
 26540                                  	; 26/04/2023
 26541                                  	;or	ax,ax ; ax = 0 ?
 26542                                  	;jnz	short DATERR
 26543                                  	;;jmp	short COMDAT		;AC000; we have a date
 26544                                  	; 11/06/2023
 26545 000032DA 40                      	inc	ax  ; cmp ax,-1
 26546 000032DB 7429                    	jz	short PRMTDAT ; 0FFFFh -> 0
 26547 000032DD 48                      	dec	ax  ; cmp ax,0
 26548 000032DE 7542                    	jnz	short DATERR ; 1 -> 0
 26549                                  	; ax = 0
 26550                                  
 26551                                  	; 27/02/2023
 26552                                  COMDAT:
 26553 000032E0 8B0E[67A6]              	mov	cx,[DATE_YEAR]		;AC000; get parts of date in
 26554 000032E4 8A36[69A6]              	mov	dh,[DATE_MONTH]		;AC000;  cx and dx for set
 26555 000032E8 8A16[6AA6]              	mov	dl,[DATE_DAY]		;AC000;  date function call.
 26556 000032EC 51                      	push	cx			;AC000; save date
 26557 000032ED 52                      	push	dx			;AC000;
 26558 000032EE B90100                  	mov	cx,1			;AC000; set 1 positional entered
 26559 000032F1 31D2                    	xor	dx,dx			;AN029;
 26560 000032F3 E87616                  	call	cmd_parse		;AN029; call parser
 26561 000032F6 3CFF                    	cmp	al,0FFh ; -1
 26562                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 26563 000032F8 5A                      	pop	dx			;AC000; retrieve date
 26564 000032F9 59                      	pop	cx			;AC000;
 26565 000032FA 7526                    	jnz	short DATERR		;AC000; extra stuff on line - try again
 26566                                  	; 26/04/2023
 26567                                  	;mov	ah,SET_DATE		;yes - set date
 26568 000032FC B42B                    	mov	ah,2Bh
 26569                                  	;int	21h
 26570                                  			; DOS - SET CURRENT DATE
 26571                                  			; DL = day, DH = month, CX = year
 26572                                  			; Return: AL = 00h if no error /= FFh if bad value sent to routine
 26573                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26574 000032FE E8B9D2                  	call	int_21h_indirect
 26575 00003301 08C0                    	or	al,al
 26576 00003303 751D                    	jnz	short DATERR
 26577                                  date_end:
 26578 00003305 C3                      	retn
 26579                                  
 26580                                  PRMTDAT:
 26581                                  	; Print "Current date is
 26582 00003306 E81A08                  	call	GetDate 		;AN000; get date for output
 26583                                  
 26584 00003309 86F2                    	xchg	dh,dl			;AN000; switch month & day
 26585 0000330B 890E[C390]              	mov	[CurDat_yr],cx		;AC000; put year into message control block
 26586 0000330F 8916[C590]              	mov	[CurDat_mo_day],dx	;AC000; put month and day into message control block
 26587 00003313 BA[B390]                	mov	dx,CurDat_Ptr		;AC000; set up message for output
 26588 00003316 E80F21                  	call	std_printf
 26589                                  
 26590                                  ;AD061; mov	word [CurDat_yr],0	;AC000; reset year, month and day
 26591                                  ;AD061; mov	word [CurDat_mo_day],0 	;AC000;  pointers in control block
 26592                                  
 26593                                  GET_NEW_DATE:				;AN000;
 26594 00003319 E8BF00                  	call	GETDAT			;AC000; prompt user for date
 26595                                  	
 26596                                  	; 11/06/2023
 26597                                  	;cmp	ax,0FFFFh ; -1
 26598                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 26599                                  	;je	short date_end		;AC000; yes - exit
 26600                                  	; 26/04/2023
 26601                                  	;;cmp	ax,0
 26602                                  	;;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 26603                                  	;;;jnz	short DATERR		;AN000; yes - go issue message
 26604                                  	;; 27/02/2023
 26605                                  	;;jz	short COMDAT
 26606                                  	; 26/04/2023
 26607                                  	;and	ax,ax ; 0 ?
 26608                                  	;jz	short COMDAT
 26609                                  
 26610                                  	; 11/06/2023
 26611 0000331C 40                      	inc	ax  ; cmp ax,-1
 26612 0000331D 74E6                    	jz	short date_end ; 0FFFFh -> 0
 26613 0000331F 48                      	dec	ax  ; cmp ax,0
 26614 00003320 74BE                    	jz	short COMDAT ; 1 -> 0
 26615                                  	; ax > 0
 26616                                  
 26617                                  ;COMDAT:
 26618                                  ;	....
 26619                                  DATERR:
 26620 00003322 E852F6                  	call	CRLF2			;AN028; print out a blank line
 26621 00003325 BA[B090]                	mov	dx,BADDAT_PTR
 26622 00003328 E8FD20                  	call	std_printf
 26623 0000332B EBEC                    	jmp	short GET_NEW_DATE	;AC000; get date again
 26624                                  
 26625                                  ; =============== S U B	R O U T	I N E =======================================
 26626                                  
 26627                                  ; MSDOS 6.0
 26628                                  
 26629                                  ; TIME gets and sets the time
 26630                                  
 26631                                  ; ****************************************************************
 26632                                  ; *
 26633                                  ; * ROUTINE:	 TIME - Set system time
 26634                                  ; *
 26635                                  ; * FUNCTION:	 If a time is specified, set the system time,
 26636                                  ; *		 otherwise display the current system time and
 26637                                  ; *		 prompt the user for a new time.  If an invalid
 26638                                  ; *		 time is specified, issue an error message and
 26639                                  ; *		 prompt for a new time.  If the user enters
 26640                                  ; *		 nothing when prompted for a time, terminate.
 26641                                  ; *
 26642                                  ; * INPUT:	 command line at offset 81H
 26643                                  ; *
 26644                                  ; * OUTPUT:	 none
 26645                                  ; *
 26646                                  ; ****************************************************************
 26647                                  
 26648                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26649                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:302Dh
 26650                                  
 26651                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26652                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:35D7h
 26653                                  
 26654                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 26655                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3481h
 26656                                  CTIME:
 26657 0000332D BE8100                  	mov	si,81h			; Accepting argument for time inline
 26658 00003330 BF[6896]                	mov	di,PARSE_TIME		;AN000; Get address of PARSE_time
 26659 00003333 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 26660 00003335 31D2                    	xor	dx,dx			;AN000;
 26661 00003337 E83216                  	call	cmd_parse		;AC000; call parser
 26662                                  	
 26663                                  	; 27/02/2023
 26664                                  	;cmp	ax,-1
 26665                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 26666                                  	;je	short PRMTTIM 		;AC000; yes - prompt for time
 26667                                  	;;cmp	ax,0
 26668                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 26669                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 26670                                  	;and	ax,ax ; ax = 0 ?
 26671                                  	;jnz	short TIMERR
 26672                                  	;;jmp	short COMTIM		;AC000; we have a time
 26673                                  	; 11/06/2023
 26674 0000333A 40                      	inc	ax  ; cmp ax,-1
 26675 0000333B 742D                    	jz	short PRMTTIM ; 0FFFFh -> 0
 26676 0000333D 48                      	dec	ax  ; cmp ax,0
 26677 0000333E 754A                    	jnz	short TIMERR ; 1 -> 0
 26678                                  	; ax = 0
 26679                                  	
 26680                                  	; 27/02/2023
 26681                                  COMTIM:
 26682 00003340 8A2E[6FA6]              	mov	ch,[TIME_HOUR]		;AC000; get parts of time in
 26683 00003344 8A0E[70A6]              	mov	cl,[TIME_MINUTES]	;AC000;  cx and dx for set
 26684 00003348 8A36[71A6]              	mov	dh,[TIME_SECONDS]	;AC000;  time function call
 26685 0000334C 8A16[72A6]              	mov	dl,[TIME_FRACTION]	;AC000;
 26686 00003350 51                      	push	cx			;AC000; save time
 26687 00003351 52                      	push	dx			;AC000;
 26688 00003352 B90100                  	mov	cx,1			;AC000; set 1 positional parm entered
 26689 00003355 31D2                    	xor	dx,dx			;AN029;
 26690 00003357 E81216                  	call	cmd_parse		;AN029; call parser
 26691 0000335A 3CFF                    	cmp	al, -1
 26692                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 26693 0000335C 5A                      	pop	dx			;AC000; retieve time
 26694 0000335D 59                      	pop	cx			;AC000;
 26695 0000335E 752A                    	jnz	short TIMERR		;AC000; extra stuff on line - try again
 26696                                  SAVTIM:
 26697                                  	;mov	ah,SET_TIME
 26698 00003360 B42D                    	mov	ah,2Dh
 26699                                  	;int	21h
 26700                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26701 00003362 E855D2                  	call	int_21h_indirect
 26702 00003365 08C0                    	or	al,al
 26703 00003367 7521                    	jnz	short TIMERR		;AC000; if an error occured, try again
 26704                                  time_end:
 26705 00003369 C3                      	retn
 26706                                  
 26707                                  PRMTTIM:
 26708                                  	;Printf "Current time is ... "
 26709                                  
 26710                                  	;mov	ah,Get_Time		;AC000; get the current time
 26711 0000336A B42C                    	mov	ah,2Ch
 26712                                  	;int	21h			;AC000;   Get time in CX:DX
 26713                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 26714 0000336C E84BD2                  	call	int_21h_indirect
 26715 0000336F 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 26716 00003371 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 26717 00003373 890E[E590]              	mov	[CurTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 26718 00003377 8916[E790]              	mov	[CurTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 26719 0000337B BA[E090]                	mov	dx,CurTim_Ptr		;AC000; set up message for output
 26720 0000337E E8A720                  	call	std_printf
 26721                                  
 26722                                  ;AD061; mov	word [CurTim_hr_min],0 	;AC000; reset hour, minutes, seconds, and hundredths
 26723                                  ;AD061; mov	word [CurTim_Sec_hn],0 	;AC000;  pointers in control block
 26724                                  
 26725                                  GET_NEW_TIME:
 26726 00003381 E8B100                  	call	GETTIM			;AC000;
 26727                                  	
 26728                                  	; 11/06/2023
 26729                                  	;cmp	ax,-1
 26730                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 26731                                  	;je	short time_end		;AC000;
 26732                                  	;;cmp	ax,0
 26733                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 26734                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 26735                                  	;or	ax,ax  ; ax = 0 ?
 26736                                  	;;jnz	short TIMERR
 26737                                  	; 27/02/2023
 26738                                  	;jz	short COMTIM
 26739                                  
 26740                                  	; 11/06/2023
 26741 00003384 40                      	inc	ax  ; cmp ax,-1
 26742 00003385 74E2                    	jz	short time_end ; 0FFFFh -> 0
 26743 00003387 48                      	dec	ax  ; cmp ax,0
 26744 00003388 74B6                    	jz	short COMTIM ; 1 -> 0
 26745                                  	; ax > 0
 26746                                  
 26747                                  ;COMTIM:
 26748                                  ;	....
 26749                                  TIMERR:
 26750 0000338A E8EAF5                  	call	CRLF2			;AN028; print out a blank line
 26751 0000338D BA[DD90]                	mov	dx,BadTim_Ptr
 26752 00003390 E89520                  	call	std_printf		; Print error message
 26753 00003393 EBEC                    	jmp	short GET_NEW_TIME	;AC000; Try again
 26754                                  
 26755                                  ; =============== S U B	R O U T	I N E =======================================
 26756                                  
 26757                                  ; MSDOS 6.0
 26758                                  
 26759                                  ; Set the special flag in the INIT flag to the value in CX.
 26760                                  
 26761                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26762                                  SetInitFlag:
 26763 00003395 8E1E[639C]              	mov	ds,[RESSEG]
 26764                                  
 26765 00003399 8026[1203]FD            	and	byte [InitFlag],~INITSPECIAL ; 0FDh ; not initspecial
 26766                                  	;and	byte [InitFlag],0FDh
 26767 0000339E 080E[1203]              	or	byte [InitFlag],cl
 26768 000033A2 0E                      	push	cs
 26769 000033A3 1F                      	pop	ds
 26770 000033A4 C3                      	retn
 26771                                  
 26772                                  ; =============== S U B	R O U T	I N E =======================================
 26773                                  
 26774                                  ; MSDOS 6.0
 26775                                  
 26776                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26777                                  PipeOff:
 26778 000033A5 1E                      	push	ds
 26779 000033A6 50                      	push	ax
 26780 000033A7 2E8E1E[639C]            	mov	ds,[cs:RESSEG]
 26781 000033AC 30C0                    	xor	al,al
 26782 000033AE 8606[1303]              	xchg	[PipeFlag],al
 26783 000033B2 08C0                    	or	al,al
 26784 000033B4 7404                    	jz	short PipeOffDone
 26785 000033B6 D02E[9D02]              	shr	byte [EchoFlag],1
 26786                                  PipeOffDone:
 26787 000033BA 58                      	pop	ax
 26788 000033BB 1F                      	pop	ds
 26789 000033BC C3                      	retn
 26790                                  
 26791                                  ; =============== S U B	R O U T	I N E =======================================
 26792                                  
 26793                                  ; MSDOS 6.0
 26794                                  
 26795                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26796                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26797                                  	; 08/08/2024 - Retro DOS v5.0 COMMAND.COM
 26798                                  PRINT_TIME:
 26799                                  	;mov	ah,Get_Time
 26800 000033BD B42C                    	mov	ah,2Ch
 26801                                  	;int	21h			; Get time in CX:DX
 26802                                  	; 08/08/2024 - PCDOS 7.1 COMMAND.COM
 26803 000033BF E8F8D1                  	call	int_21h_indirect
 26804                                  
 26805 000033C2 06                      	push	es
 26806 000033C3 0E                      	push	cs
 26807 000033C4 07                      	pop	es
 26808 000033C5 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 26809 000033C7 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 26810 000033C9 2E890E[2792]            	mov	[cs:PromTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 26811 000033CE 2E8916[2992]            	mov	[cs:PromTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 26812 000033D3 BA[2292]                	mov	dx,promtim_ptr		;AC000; set up message for output
 26813 000033D6 E84F20                  	call	std_printf
 26814                                  
 26815                                  ;AD061; mov	word [cs:PromTim_hr_min],0
 26816                                  					;AC000; reset hour, minutes, seconds, and hundredths
 26817                                  ;AD061; mov	word [cs:PromTim_Sec_hn],0
 26818                                  					;AC000;  pointers in control block
 26819 000033D9 07                      	pop	es
 26820 000033DA C3                      	retn
 26821                                  
 26822                                  ; =============== S U B	R O U T	I N E =======================================
 26823                                  
 26824                                  ; MSDOS 6.0
 26825                                  
 26826                                  ; ****************************************************************
 26827                                  ; *
 26828                                  ; * ROUTINE:	 GETDAT - Prompt user for date
 26829                                  ; *
 26830                                  ; * FUNCTION:	 Gets the date format from the COUNTRY DEPENDENT
 26831                                  ; *		 INFORMATION and issues the "Enter new date"
 26832                                  ; *		 message with the proper date format. COMBUF
 26833                                  ; *		 is reset to get a date from the command line.
 26834                                  ; *		 The PARSE_DATE blocks are then reset and the
 26835                                  ; *		 PARSE function call is issued.
 26836                                  ; *
 26837                                  ; * INPUT:	 NONE
 26838                                  ; *
 26839                                  ; * OUTPUT:	 COMBUF
 26840                                  ; *		 PARSER RETURN CODES
 26841                                  ; *
 26842                                  ; ****************************************************************
 26843                                  
 26844                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26845                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:30E2h
 26846                                  
 26847                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26848                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:368Ch
 26849                                  
 26850                                  	; 08/08/2024 - Retro DOS v5.0 COMMAND.COM
 26851                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3539h
 26852                                  GETDAT:
 26853                                  	;mov	ax,(International SHL 8)
 26854 000033DB B80038                  	mov	ax,3800h
 26855                                  					; Determine what format the date
 26856 000033DE BA5C00                  	mov	dx,5Ch			;  should be entered in and
 26857                                  	;int	21h			;  print a message describing it
 26858                                  			; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 26859                                  			; get current-country info
 26860                                  			; DS:DX -> buffer for returned info
 26861                                  	; 08/08/2024 - PCDOS 7.1 COMMAND.COM
 26862 000033E1 E8D6D1                  	call	int_21h_indirect
 26863 000033E4 89D6                    	mov	si,dx
 26864 000033E6 AD                      	lodsw
 26865 000033E7 2E8B16[0092]            	mov	dx,[cs:usadat_ptr]	;AC000; get mm-dd-yy
 26866 000033EC 48                      	dec	ax
 26867 000033ED 780C                    	js	short printformat
 26868 000033EF 2E8B16[0392]            	mov	dx,[cs:eurdat_ptr]	;AC000; get dd-mm-yy
 26869 000033F4 7405                    	jz	short printformat
 26870 000033F6 2E8B16[0692]            	mov	dx,[cs:japdat_ptr]	;AC000; get yy-mm-dd
 26871                                  printformat:
 26872 000033FB 89D0                    	mov	ax,dx			;AN000; get message number of format
 26873                                  	;mov	dh,util_msg_class	;AN000; this is a utility message
 26874 000033FD B6FF                    	mov	dh,-1 ; 0FFh
 26875 000033FF E80921                  	call	TSYSGETMSG		;AN000; get the address of the message
 26876 00003402 2E8936[D490]            	mov	[cs:NewDat_Format],si	;AN000; put the address in subst block
 26877 00003407 BA[CF90]                	mov	dx,NewDat_Ptr		;AC000; get address of message to print
 26878 0000340A E81B20                  	call	std_printf
 26879                                  	;mov	word [cs:NewDat_Format],no_subst
 26880                                  					;AN000; reset subst block
 26881 0000340D 2EC706[D490]0000        	mov	word [cs:NewDat_Format],0
 26882                                  
 26883                                  	; 28/02/2023
 26884 00003414 BF[5696]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 26885                                  ; 28/02/2023
 26886                                  gettim_p:	
 26887                                  	;mov	ah,Std_Con_String_Input
 26888 00003417 B40A                    	mov	ah,0Ah
 26889 00003419 BA[C29A]                	mov	dx,COMBUF
 26890 0000341C B90200                  	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 26891 0000341F E873FF                  	call	SetInitFlag		;  prompting for date.
 26892                                  	;int	21h			; Get input line
 26893                                  	; 08/08/2024 - PCDOS 7.1 COMMAND.COM
 26894 00003422 E895D1                  	call	int_21h_indirect
 26895 00003425 31C9                    	xor	cx,cx			; Reset bit in InitFlag that indicates
 26896 00003427 E86BFF                  	call	SetInitFlag		;  prompting for date.
 26897 0000342A E84AF5                  	call	CRLF2
 26898                                  	; 28/02/2023
 26899                                  	;mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 26900                                  ;gettim_p: ; 28/02/2023
 26901 0000342D BE[C49A]                	mov	si,COMBUF+2
 26902                                  	;xor	cx,cx	 ; cx = 0	;AN000; clear counter for positionals
 26903 00003430 31D2                    	xor	dx,dx			;AN000;
 26904                                  	;call	cmd_parse		;AC000; call parser
 26905                                  	;retn
 26906                                  	; 28/02/2023
 26907 00003432 E93715                  	jmp	cmd_parse
 26908                                  
 26909                                  ; =============== S U B	R O U T	I N E =======================================
 26910                                  
 26911                                  ; MSDOS 6.0
 26912                                  
 26913                                  ; ****************************************************************
 26914                                  ; *
 26915                                  ; * ROUTINE:	 GETTIME - Prompt user for time
 26916                                  ; *
 26917                                  ; * FUNCTION:	 Gets the time format from the COUNTRY DEPENDENT
 26918                                  ; *		 INFORMATION and issues the "Enter new time"
 26919                                  ; *		 message. COMBUF is reset to get a time from the
 26920                                  ; *		 command line. The PARSE_TIME blocks are then
 26921                                  ; *		 reset and the PARSE function call is issued.
 26922                                  ; *
 26923                                  ; * INPUT:	 NONE
 26924                                  ; *
 26925                                  ; * OUTPUT:	 COMBUF
 26926                                  ; *		 PARSER RETURN CODES
 26927                                  ; *
 26928                                  ; ****************************************************************
 26929                                  
 26930                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26931                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:313Dh
 26932                                  
 26933                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 26934                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:36E7h
 26935                                  
 26936                                  	; 08/08/2024 - Retro DOS v5.0 COMMAND.COM
 26937                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3596h
 26938                                  GETTIM:
 26939 00003435 31C9                    	xor	cx,cx			; Initialize hours and minutes to zero
 26940 00003437 BA[EE90]                	mov	dx,NewTim_Ptr
 26941 0000343A E8EB1F                  	call	std_printf
 26942                                  
 26943                                  	; 28/02/2023
 26944 0000343D BF[6896]                	mov	di,PARSE_TIME
 26945 00003440 EBD5                    	jmp	short gettim_p
 26946                                  
 26947                                  ; 28/02/2023
 26948                                  ;	;mov	ah,Std_Con_String_Input
 26949                                  ;	mov	ah,0Ah
 26950                                  ;	mov	dx,COMBUF
 26951                                  ;	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 26952                                  ;	call	SetInitFlag		;  prompting for time.
 26953                                  ;	int	21h			; Get input line
 26954                                  ;	; 28/02/2023
 26955                                  ;	xor	cx,cx			; Reset bit in InitFlag that indicates
 26956                                  ;	call	SetInitFlag		;  prompting for time.
 26957                                  ;	call	CRLF2
 26958                                  ;	; 28/02/2023
 26959                                  ;	;mov	si,COMBUF+2
 26960                                  ;	; 28/02/2023
 26961                                  ;	mov	di,PARSE_TIME		;AN000; Get address of PARSE_TIME
 26962                                  ;	; 28/02/2023
 26963                                  ;	jmp	short gettim_p	
 26964                                  ;	; 28/02/2023
 26965                                  ;	;;xor	cx,cx			;AN000; clear counter for positionals
 26966                                  ;	;xor	dx,dx			;AN000;
 26967                                  ;	;call	cmd_parse		;AC000; call parser
 26968                                  ;	;retn
 26969                                  
 26970                                  
 26971                                  ; =============== S U B	R O U T	I N E =======================================
 26972                                  
 26973                                  ; MSDOS 6.0
 26974                                  
 26975                                  ;Skip_white: Skips over the whitespace chars that could be present after
 26976                                  ;the '=' sign in the environment variable before the actual path.
 26977                                  ;
 26978                                  ;	ENTRY:	ds:si = arguments of the environment variable
 26979                                  ;
 26980                                  ;	EXIT:	ds:si = start of the path
 26981                                  ;
 26982                                  ;	REGISTERS AFFECTED: ax
 26983                                  
 26984                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26985                                  skip_white:
 26986 00003442 FC                      	cld
 26987                                  skw_lp:
 26988 00003443 AC                      	lodsb
 26989 00003444 3C20                    	cmp	al,' '			;blank char?
 26990 00003446 74FB                    	jz	short skw_lp		;yes, skip it
 26991 00003448 3C09                    	cmp	al,9			;tab char?
 26992 0000344A 74F7                    	jz	short skw_lp		;yes, skip it
 26993 0000344C 4E                      	dec	si			;point at first non-white
 26994 0000344D C3                      	retn
 26995                                  
 26996                                  ; =============== S U B	R O U T	I N E =======================================
 26997                                  
 26998                                  ; MSDOS 6.0
 26999                                  
 27000                                  ;Copy_pipe_path: This routine copies the path from the TEMP environment
 27001                                  ;variable into the path buffers Pipe1 & Pipe2.
 27002                                  ;
 27003                                  ;	ENTRY:	ds:si = path to be copied
 27004                                  ;		es = RESGROUP
 27005                                  ;
 27006                                  ;	EXIT:	Path copied into Pipe1 and Pipe2.
 27007                                  ;
 27008                                  ;	REGISTERS AFFECTED: si, di, cx, ax
 27009                                  
 27010                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27011                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3174h
 27012                                  
 27013                                  	; 11/06/2023 - Retro DOS v4.2 COMMAND.COM
 27014                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:371Eh
 27015                                  
 27016                                  	; 08/08/2024 - Retro DOS v5.0 COMMAND.COM
 27017                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:35CEh
 27018                                  copy_pipe_path:
 27019 0000344E B9FFFF                  	mov	cx,0FFFFh ; 65535
 27020 00003451 30C0                    	xor	al,al
 27021                                  
 27022 00003453 89F7                    	mov	di,si
 27023 00003455 06                      	push	es			;save es
 27024 00003456 1E                      	push	ds
 27025 00003457 07                      	pop	es			;es:di = path to be copied
 27026                                  	
 27027 00003458 FC                      	cld
 27028 00003459 57                      	push	di
 27029 0000345A F2AE                    	repnz	scasb			;look for the null char
 27030 0000345C 5F                      	pop	di
 27031                                  
 27032 0000345D 07                      	pop	es			;es = RESGROUP again
 27033                                  
 27034 0000345E F7D1                    	not	cx			;length including the null
 27035                                  
 27036                                  	;;;;mov	di,320h ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit)
 27037                                  	;;;mov	di,3EAh ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 27038                                  	;;mov	di,41Eh ; PCDOS 7.1 COMMAND.COM ; 08/08/2024	
 27039                                  	;mov	di,offset DATARES:Pipe1
 27040 00003460 BF[1503]                	mov	di,Pipe1  ; (offset RESGROUP:EndInit)
 27041 00003463 57                      	push	di
 27042 00003464 51                      	push	cx			
 27043 00003465 F3A4                    	rep	movsb			;copy path into Pipe1
 27044 00003467 59                      	pop	cx
 27045 00003468 5F                      	pop	di
 27046                                  
 27047 00003469 1E                      	push	ds
 27048 0000346A 06                      	push	es
 27049 0000346B 1F                      	pop	ds			;ds:si = Pipe1
 27050 0000346C 89FE                    	mov	si,di
 27051                                  	;;;;mov	di,36Fh ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit+79)
 27052                                  	;;;mov	di,439h ; MSDOS 6.22 COMMAND.COM ; 11/06/2023
 27053                                  	;;mov	di,46Dh ; PCDOS 7.1 COMMAND.COM ; 08/08/2024	
 27054                                  	;mov	di,offset DATARES:Pipe2	;es:di = Pipe2
 27055 0000346E BF[6403]                	mov	di,Pipe2  ; (offset RESGROUP:EndInit+79)
 27056 00003471 F3A4                    	rep	movsb			;copy path into Pipe2
 27057 00003473 1F                      	pop	ds
 27058 00003474 C3                      	retn
 27059                                  
 27060                                  ;============================================================================
 27061                                  ; PARSE2.ASM, MSDOS 6.0, 1991
 27062                                  ;============================================================================
 27063                                  ; 03/10/2018 - Retro DOS v3.0
 27064                                  
 27065                                  ;----------------------------------------------------------------------------
 27066                                  ; PARSELINE takes an MSDOS command line and maps it into a UNIX-style
 27067                                  ; argv[argvcnt] array. The most important difference between this array and
 27068                                  ; the tradition UNIX format is the extra cparse information included with
 27069                                  ; each argument element.
 27070                                  ;---------------
 27071                                  ; ENTRY:
 27072                                  ;	BL	     special delimiter for cparse -- not implemented)
 27073                                  ;---------------
 27074                                  ; EXIT:
 27075                                  ;	CF	    set if error
 27076                                  ;	AL	    error code (carry set). Note AH clobbered in any event.
 27077                                  ;	argv[]	    array of cparse flags and pointers to arguments
 27078                                  ;	argvcnt     argument count
 27079                                  ;---------------
 27080                                  ; NOTE(S):
 27081                                  ;	*   BL (special delimiter) is ignored, for now (set to space).
 27082                                  ;	*   Parseflags record contains cparse flags, as follows:
 27083                                  ;		sw_flag 	--	was this arg a switch?
 27084                                  ;		wildcard	--	whether or not it contained a * or ?
 27085                                  ;		path_sep	--	maybe it was a pathname
 27086                                  ;		unused		--	for future expansion
 27087                                  ;		special_delim	--	was there an initial special delimiter?
 27088                                  ;	*   argv[] and argvcnt are undefined if CF/AL indicates an error.
 27089                                  ;	*   Relationship between input, cparse output, and comtail can be
 27090                                  ;	    found in the following chart. Despite the claim of the cparse
 27091                                  ;	    documentation that, "Token buffer always starts d: for non switch
 27092                                  ;	    tokens", such is not the case (see column two, row two).
 27093                                  ;	    Similarly, [STARTEL] is not null when the command line is one of
 27094                                  ;	    the forms, "d:", "d:\", or "d:/". In fact, *STARTEL (i.e., what
 27095                                  ;	    STARTEL addresses) will be null. This is clearly just a
 27096                                  ;	    documentation error.
 27097                                  ;	*   cparse also returns a switch code in BP for each switch it
 27098                                  ;	    recognizes on the command line.
 27099                                  ;	*   arglen for each token does NOT include the terminating null.
 27100                                  ;	*   Finally, note that interesting constructions like 'foodir/*.exe'
 27101                                  ;	    parse as three separate tokens, and the asterisk is NOT a wildcard.
 27102                                  ;	    For example, 'for %i in (foodir/*.exe) do echo %i' will first
 27103                                  ;	    echo 'foodir', then '*', then '.exe'. Using cparse for command-
 27104                                  ;	    line parsing may result in slightly different behavior than
 27105                                  ;	    previously observed with the old COMMAND.COM command-line parser.
 27106                                  ;
 27107                                  ;	    Input		    Cparse		Command Line (80H)
 27108                                  ;	\alan\foo.bat		c:\alan\foo.bat 	\alan\foo.bat
 27109                                  ;	alan\foo.bat		alan\foo.bat		alan\foo.bat
 27110                                  ;	foo.bat 		foo.bat 		foo.bat
 27111                                  ;	c:\alan\foo.bat 	c:\alan\foo.bat 	c:\alan\foo.bat
 27112                                  ;	c:alan\foo.bat		c:alan\foo.bat		c:alan\foo.bat
 27113                                  ;	c:foo.bat		c:foo.bat		c:foo.bat
 27114                                  
 27115                                  ; =============== S U B	R O U T	I N E =======================================
 27116                                  
 27117                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23D0h
 27118                                  
 27119                                  ; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27120                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 319Bh
 27121                                  
 27122                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27123                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3745h
 27124                                  
 27125                                  ; 27/07/2024 - Retro DOS v4.0-v4.1-v4.2-v5.0 COMMAND.COM (PARSELINE)
 27126                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 35F5h
 27127                                  
 27128                                  PARSELINE:
 27129 00003475 50                      	push	ax			; most of these are clobbered
 27130 00003476 53                      	push	bx			; by cparse...
 27131 00003477 51                      	push	cx
 27132 00003478 52                      	push	dx
 27133 00003479 57                      	push	di
 27134 0000347A 56                      	push	si
 27135 0000347B 9C                      	pushf
 27136                                  	;mov	byte [cpyflag],0  ; Turn "CPARSE called from COPY flag" off
 27137 0000347C C706[86A4]FFFF          	mov	word [LASTARG],-1 ; last argument at which to accumulate
 27138 00003482 31C0                    	xor	ax,ax
 27139                                  	;;mov	cx,1348
 27140                                  	; 27/07/2024
 27141                                  	;mov	cx,1092  ; PCDOS 7.1 COMMAND.COM
 27142 00003484 B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092
 27143 00003487 A2[169E]                	mov	[cpyflag],al ; 0 ; 27/07/2024
 27144 0000348A BF[C09F]                	mov	di,ARG
 27145 0000348D F3AA                    	rep	stosb
 27146                                  	;mov	word [ARGBUF_PTR],ARG_ARGBUF
 27147 0000348F C706[04A4][84A2]        	mov	word [ARGBUF_PTR],ARG+ARG_UNIT.argbuf
 27148                                  	;mov	word [ARG_ARGSWINFO],0 ; switch information, and info to date
 27149                                  	;mov	word [ARG+ARG_UNIT.argswinfo],0
 27150 00003495 A3[82A2]                	mov	[ARG+ARG_UNIT.argswinfo],ax ; 0 ; 27/07/2024
 27151                                  	;mov	word [ARG_ARGVCNT],0 ; initialize argvcnt/argv[]
 27152                                  	;mov	word [ARG+ARG_UNIT.argvcnt],0
 27153 00003498 A3[80A2]                	mov	[ARG+ARG_UNIT.argvcnt],ax ; 0 ; 27/07/2024 
 27154 0000349B BE[C49A]                	mov	si,COMBUF+2	; prescan leaves cooked input in combuf
 27155                                  
 27156                                  ; This next section of code (up to pcont:)  makes sure that si is set up for
 27157                                  ; parsing. It should point at COMBUF if FORFLAG is set and arg.argforcombuf
 27158                                  ; otherwise. This is done so that commands can get arg pointers into their
 27159                                  ; original command line (or an exact copy of it) in arg_ocomptr.
 27160                                  ; Arg.argforcombuf is used so that the for loop processor will always be able
 27161                                  ; to get a hold of its original command line; even after COMBUF is blasted by
 27162                                  ; the command to be repeated or the transient part of command has been
 27163                                  ; reloaded.
 27164                                  
 27165 0000349E 1E                      	push	ds
 27166 0000349F 8E1E[639C]              	mov	ds,[RESSEG]
 27167                                  	;cmp	byte [ForFlag],0
 27168 000034A3 3806[AB02]              	cmp	[ForFlag],al ; 0 ; 27/07/2024
 27169 000034A7 1F                      	pop	ds
 27170 000034A8 7510                    	jnz	short PCONT
 27171                                  	;mov	di,ARG_ARGFORCOMBUF
 27172 000034AA BF[84A3]                	mov	di,ARG+ARG_UNIT.argforcombuf
 27173 000034AD 30ED                    	xor	ch,ch
 27174 000034AF 8A0E[C39A]              	mov	cl,[COMBUF+1]
 27175 000034B3 FEC1                    	inc	cl
 27176 000034B5 F3A4                    	rep	movsb
 27177                                  	;mov	si,ARG_ARGFORCOMBUF
 27178 000034B7 BE[84A3]                	mov	si,ARG+ARG_UNIT.argforcombuf
 27179                                  PCONT:
 27180 000034BA BF[06A4]                	mov	di,TPBUF	; destination is temporary token buffer
 27181 000034BD B320                    	mov	bl,' '		; no special delimiter, for now
 27182                                  PARSELOOP:
 27183 000034BF 8936[88A4]              	mov	[COMPTR],si	; save ptr into original command buffer
 27184 000034C3 31ED                    	xor	bp,bp		; switch information put here by cparse
 27185 000034C5 C606[A29F]00            	mov	byte [expand_star],0 ; don't expand *'s to ?'s
 27186 000034CA E8B7F4                  	call	scanoff		; skip leading blanks...
 27187 000034CD E8D712                  	call	cparse		; byte off a token (args in SI, DI, BL)
 27188 000034D0 730B                    	jnb	short MORE_PRSE
 27189 000034D2 09ED                    	or	bp,bp		; Check for trailing switch character
 27190 000034D4 7403                    	jz	short PARSEDONE
 27191 000034D6 E81700                  	call	newarg		; We hit CR but BP is non-zero. The
 27192                                  				;   typical cause of this is that a
 27193                                  				;   switch char IMMEDIATELY preceeds
 27194                                  				;   the CR. We have an argument, but it
 27195                                  				;   is sort of an error.
 27196                                  	;jmp	short PARSEDONE	; We're done (found the CR).
 27197                                  	; 01/03/2023
 27198                                  PARSEDONE:
 27199 000034D9 9D                      	popf
 27200 000034DA F8                      	clc
 27201 000034DB EB0C                    	jmp	short PARSE_EXIT
 27202                                  
 27203                                  MORE_PRSE:
 27204 000034DD C606[169E]02            	mov	byte [cpyflag],2
 27205                                  				; tell CPARSE that 1st token is done
 27206 000034E2 E80B00                  	call	newarg		; add to argv array (CX has char count)
 27207 000034E5 73D8                    	jnb	short PARSELOOP	; was everything OK?
 27208                                  	;jmp	short PARSE_ERROR ; NO, it wasn't -- bug out (CF set)
 27209                                  	; 01/03/2023
 27210                                  ;PARSEDONE:
 27211                                  	;popf
 27212                                  	;clc
 27213                                  	;jmp	short PARSE_EXIT
 27214                                  
 27215                                  PARSE_ERROR:			; error entry (er, exit) point
 27216 000034E7 9D                      	popf
 27217 000034E8 F9                      	stc
 27218                                  PARSE_EXIT:			; depend on not changing CF
 27219 000034E9 5E                      	pop	si
 27220 000034EA 5F                      	pop	di
 27221 000034EB 5A                      	pop	dx
 27222 000034EC 59                      	pop	cx
 27223 000034ED 5B                      	pop	bx
 27224 000034EE 58                      	pop	ax
 27225 000034EF C3                      	retn
 27226                                  
 27227                                  ; =============== S U B	R O U T	I N E =======================================
 27228                                  
 27229                                  ; NEWARG adds the supplied argstring and cparse data to arg.argv[].
 27230                                  ;
 27231                                  ; ENTRY:
 27232                                  ;   BH			argflags
 27233                                  ;   CX			character count in argstring
 27234                                  ;   DI			pointer to argstring
 27235                                  ;   comptr		ptr to starting loc of current token in original command
 27236                                  ;   [STARTEL]		cparse's answer to where the last element starts
 27237                                  ; EXIT:
 27238                                  ;   argbufptr		points to next free section of argbuffer
 27239                                  ;   arg.argbuf		contains null-terminated argument strings
 27240                                  ;   arg.argvcnt 	argument count
 27241                                  ;   arg.argv[]		array of flags and pointers
 27242                                  ;   arg.arg_ocomptr	ptr to starting loc of current token in original command
 27243                                  ;   CF			set if error
 27244                                  ;   AL			carry set:  error code; otherwise, zero
 27245                                  
 27246                                  	; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27247                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27248                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27249                                  newarg:
 27250 000034F0 53                      	push	bx
 27251 000034F1 51                      	push	cx
 27252 000034F2 52                      	push	dx
 27253 000034F3 57                      	push	di
 27254 000034F4 56                      	push	si
 27255 000034F5 9C                      	pushf
 27256 000034F6 E86200                  	call	arg_switch		; if it's a switch, record switch info
 27257                                  					; LEAVE SWITCH ON COMMAND LINE!!
 27258                                  	;;;jc	short newarg_done 	; previous arg's switches -- and leave
 27259                                  
 27260                                  	;cmp	word [ARG_ARGVCNT],64	; check to ensure we've not
 27261 000034F9 833E[80A2]40            	cmp	word [ARG+ARG_UNIT.argvcnt],ARGMAX ; 64
 27262 000034FE 7D50                    	jge	short to_many_args	; exceeded array limits
 27263 00003500 88FE                    	mov	dh,bh			
 27264                                  	;mov	bx,[ARG_ARGVCNT]	; save argflags	
 27265 00003502 8B1E[80A2]              	mov	bx,[ARG+ARG_UNIT.argvcnt] ; argv[argvcnt++] = arg data
 27266                                  	;inc	word [ARG_ARGVCNT]
 27267 00003506 FF06[80A2]              	inc	word [ARG+ARG_UNIT.argvcnt]
 27268                                  	;mov	ax,ARG_ARGV
 27269 0000350A B8[C09F]                	mov	ax,ARG+ARG_UNIT.argv
 27270 0000350D E87E00                  	call	argv_calc		; convert offset to pointer
 27271                                  	;mov	[BX].argsw_word,0 	; no switch information, yet...
 27272                                  	;mov	word [bx+7],0
 27273 00003510 C747070000              	mov	word [bx+ARGV_ELE.argsw_word],0
 27274                                  	;mov	[BX].arglen,CX		; argv[argvcnt].arglen = arg length
 27275                                  	;mov	[bx+5],cx
 27276 00003515 894F05                  	mov	[bx+ARGV_ELE.arglen],cx 
 27277                                  	;mov	[BX].argflags,DH 	; argv[argvcnt].argflags = cparse flags
 27278                                  	;mov	[bx+2],dh
 27279 00003518 887702                  	mov	[bx+ARGV_ELE.argflags],dh
 27280 0000351B 8B36[04A4]              	mov	si,[ARGBUF_PTR]
 27281                                  	;mov	[BX].argpointer,SI 	; argv[argvcnt].argpointer = [argbufptr]
 27282                                  	;mov	[bx+ARGV_ELE.argpointer],si
 27283 0000351F 8937                    	mov	[bx],si			
 27284 00003521 0336[669F]              	add	si,[STARTEL]		; save startel from new location
 27285 00003525 29FE                    	sub	si,di			; form pointer into argbuf
 27286                                  	;mov	[BX].argstartel,SI ; argv[argvcnt].argstartel = new [STARTEL]
 27287                                  	;mov	[bx+3],si
 27288 00003527 897703                  	mov	[bx+ARGV_ELE.argstartel],si
 27289 0000352A 8B36[88A4]              	mov	si,[COMPTR]
 27290                                  	;mov	[BX].arg_ocomptr,si ; arg_ocomptr = ptr into original com line
 27291                                  	;mov	[bx+9],si
 27292 0000352E 897709                  	mov	[bx+ARGV_ELE.arg_ocomptr],si
 27293 00003531 89FE                    	mov	si,di			; now save argstring in argbuffer
 27294 00003533 8B3E[04A4]              	mov	di,[ARGBUF_PTR]		; load the argbuf pointer and make
 27295                                  
 27296                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27297                                  ; PCDOS 7.1 COMMAND.COM
 27298                                  %if 0
 27299                                  	add	di,cx			; sure we're not about to run off
 27300                                  	;cmp	DI,OFFSET TRANGROUP:arg.argbuf+ARGBLEN-1
 27301                                  	;;cmp	di,ARG_ARGBUF+255
 27302                                  	;cmp	di,ARG+ARG_UNIT.argbuf+127
 27303                                  	cmp	di,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 27304                                  	jge	short buf_oflow		; the end of the buffer (plus null byte)
 27305                                  	sub	di,cx
 27306                                  %else
 27307                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27308                                  	;mov	bx,ARG_ARGBUF+127
 27309 00003537 BB[03A3]                	mov	bx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 27310 0000353A 29FB                    	sub	bx,di	; sure we're not about to run off
 27311 0000353C 39CB                    	cmp	bx,cx
 27312 0000353E 7302                    	jnb	short newarg_@
 27313 00003540 89D9                    	mov	cx,bx	
 27314                                  %endif
 27315                                  
 27316                                  newarg_@:	; 27/07/2024
 27317 00003542 FC                      	cld
 27318 00003543 F3A4                    	rep	movsb
 27319 00003545 B000                    	mov	al,ANULL ; 0		; tack a null byte on the end
 27320 00003547 AA                      	stosb
 27321 00003548 893E[04A4]              	mov	[ARGBUF_PTR],di		; update argbufptr after copy
 27322                                  newarg_done:
 27323 0000354C 9D                      	popf
 27324 0000354D F8                      	clc
 27325 0000354E EB05                    	jmp	short newarg_exit
 27326                                  
 27327                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27328                                  ; PCDOS 7.1 COMMAND.COM
 27329                                  %if 0
 27330                                  to_many_args:
 27331                                  	mov	ax,1
 27332                                  	jmp	short newarg_error
 27333                                  buf_oflow:
 27334                                  	mov	ax,2
 27335                                  %else
 27336                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 27337                                  ;buf_oflow:
 27338                                  ;	; 27/07/2024
 27339                                  ;	; PCDOS 7.1 COMMAND.COM
 27340                                  ;	sub	di,cx
 27341                                  ;	;mov	cx,ARG_ARGBUF+7Fh
 27342                                  ;	mov	cx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 27343                                  ;	sub	cx,di
 27344                                  ;	jmp     short newarg_@
 27345                                  to_many_args:
 27346 00003550 B80100                  	mov	ax,1
 27347                                  %endif
 27348                                  
 27349                                  newarg_error:
 27350 00003553 9D                      	popf
 27351 00003554 F9                      	stc
 27352                                  newarg_exit:
 27353 00003555 5E                      	pop	si
 27354 00003556 5F                      	pop	di
 27355 00003557 5A                      	pop	dx
 27356 00003558 59                      	pop	cx
 27357 00003559 5B                      	pop	bx
 27358 0000355A C3                      	retn
 27359                                  
 27360                                  ; =============== S U B	R O U T	I N E =======================================
 27361                                  
 27362                                  ; ARG_SWITCH decides if an argument might really be a switch. In the
 27363                                  ; event that it is, and we can recognize
 27364                                  ;
 27365                                  ; ENTRY:
 27366                                  ;   As in <newarg>.
 27367                                  ; EXIT:
 27368                                  ;   CF	    --	    clear (wasn't a switch); set (was a switch)
 27369                                  ; NOTE(S):
 27370                                  ;   *	The mechanism mapping a switch into a bit-value depends entirely
 27371                                  ;	on the order of definition in the <switch_list> variable and the
 27372                                  ;	values chosen to define the bits in CMDT:COMEQU.ASM. Change either
 27373                                  ;	<switch_list> or the definitions in CMDT:COMEQU.ASM -- and rewrite
 27374                                  ;	this mechanism. This code taken from CMDT:TCODE.ASM.
 27375                                  ;   *	The <switch_list> declared below is redundant to one declared in
 27376                                  ;	TDATA.ASM, and used in TCODE.ASM.
 27377                                  ;   *	An ugly routine.
 27378                                  
 27379                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 27380                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27381                                  	; 08/08/2024 - Retro DOS v5.0 COMMAND.COM
 27382                                  arg_switch:
 27383 0000355B 50                      	push	ax
 27384 0000355C 53                      	push	bx
 27385 0000355D 51                      	push	cx
 27386 0000355E 57                      	push	di
 27387 0000355F 9C                      	pushf
 27388 00003560 F6C701                  	test	bh,1 ; sw_flag		; is it a switch? (preserve flag word)
 27389 00003563 741C                    	jz	short arg_no_switch0
 27390 00003565 833E[86A4]FF            	cmp	word [LASTARG],-1 	; have we encountered any REAL args yet?
 27391 0000356A 741B                    	je	short arg_no_switch1 	; no, so leading switches don't matter
 27392 0000356C 8B1E[86A4]              	mov	bx,[LASTARG]		; yes, add switch info to last REAL arg
 27393                                  	;mov	ax,offset TRANGROUP:arg.argv
 27394                                  	;mov	ax,ARG_ARGV
 27395 00003570 B8[C09F]                	mov	ax,ARG+ARG_UNIT.argv  ; ARG+0
 27396 00003573 E81800                  	call	argv_calc
 27397                                  	;or	[BX].argsw_word,BP
 27398                                  	;or	[bx+7],bp
 27399 00003576 096F07                  	or	[bx+ARGV_ELE.argsw_word],bp
 27400                                  	;or	arg.argswinfo,BP
 27401                                  	;or	[ARG_ARGSWINFO],bp
 27402 00003579 092E[82A2]              	or	[ARG+ARG_UNIT.argswinfo],bp
 27403                                  arg_yes_switch:
 27404 0000357D 9D                      	popf
 27405 0000357E F9                      	stc
 27406 0000357F EB08                    	jmp	short arg_switch_exit
 27407                                  
 27408                                  arg_no_switch0:
 27409                                  	;mov	ax,[ARG_ARGVCNT]
 27410 00003581 A1[80A2]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 27411 00003584 A3[86A4]                	mov	[LASTARG],ax
 27412                                  arg_no_switch1:
 27413 00003587 9D                      	popf
 27414 00003588 F8                      	clc
 27415                                  arg_switch_exit:
 27416 00003589 5F                      	pop	di
 27417 0000358A 59                      	pop	cx
 27418 0000358B 5B                      	pop	bx
 27419 0000358C 58                      	pop	ax
 27420 0000358D C3                      	retn
 27421                                  
 27422                                  ; =============== S U B	R O U T	I N E =======================================
 27423                                  
 27424                                  ; ARGV_CALC maps an array index into a byte-offset from the base of
 27425                                  ; the supplied array.  Method used for computing the address is:
 27426                                  ;	Array Index * Array Elt Size + Base Addr = Elt Addr
 27427                                  ; ENTRY:
 27428                                  ;   AX	    --	    base of array
 27429                                  ;   BX	    --	    array index
 27430                                  ; EXIT:
 27431                                  ;   BX	    --	    byte offset
 27432                                  
 27433                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 27434                                  argv_calc:
 27435 0000358E 50                      	push	ax		; Save base
 27436 0000358F 88D8                    	mov	al,bl		; al = array index
 27437                                  	;mov	bl,11
 27438 00003591 B30B                    	mov	bl,ARGV_ELE.SIZE ; bl = size of an argv element
 27439 00003593 F6E3                    	mul	bl		; ax = base offset
 27440 00003595 5B                      	pop	bx		; Get base
 27441 00003596 01D8                    	add	ax,bx		; Add in base offset
 27442 00003598 93                      	xchg	ax,bx		; Restore ax and put byte offset in bx
 27443 00003599 C3                      	retn
 27444                                  
 27445                                  ; ---------------------------------------------------------------------------
 27446                                  	
 27447                                  	;db 0Ah dup(0)
 27448                                  	;times 10 db 0
 27449                                  
 27450 0000359A 90<rep 6h>              align 16
 27451                                  
 27452                                  ;============================================================================
 27453                                  ; PATH1.ASM, MSDOS 6.0, 1991
 27454                                  ;============================================================================
 27455                                  ; 03/10/2018 - Retro DOS v3.0
 27456                                  
 27457                                  ;----------------------------------------------------------------------------
 27458                                  ;    PATH.ASM contains the routines to perform pathname incovation. Path and
 27459                                  ;    Parse share a temporary buffer and argv[] definitions. <Path_Search>,
 27460                                  ;    given a pathname, attempts to find a corresponding executable or batch
 27461                                  ;    file on disk. Directories specified in the user's search path will be
 27462                                  ;    searched for a matching file, if a match is not found in the current
 27463                                  ;    directory and if the pathname is actually only an MSDOS filename.
 27464                                  ;    <Path_Search> assumes that the parsed command name can be found in
 27465                                  ;    argv[0] -- in other words, <Parseline> should be executed prior to
 27466                                  ;    <Path_Search>. Alternatively, the command name and appropriate
 27467                                  ;    information could be placed in argv[0], or <Path_Search> could be
 27468                                  ;    (easily) modified to make no assumptions about where its input is found.
 27469                                  ;    Please find enclosed yet another important routine, <Save_Args>, which
 27470                                  ;    places the entire arg/argv[]/argbuf structure on a piece of newly
 27471                                  ;    allocated memory. This is handy for for-loop processing, and anything
 27472                                  ;    else that wants to save the whole shebang and then process other command
 27473                                  ;    lines.
 27474                                  ;
 27475                                  ; Alan L, OS/MSDOS				    August 15, 1983
 27476                                  ;
 27477                                  ; ENTRY:
 27478                                  ;   <Path_Search>:	    argv[0].
 27479                                  ;   <Save_Args>:	    bytes to allocate in addition to arg structure
 27480                                  ; EXIT:
 27481                                  ;   <Path_Search>:	    success flag, best pathname match in EXECPATH.
 27482                                  ;   <Save_Args>:	    success flag, segment address of new memory
 27483                                  ; NOTE(S):
 27484                                  ;   *	<Argv_calc> handily turns an array index into an absolute pointer.
 27485                                  ;	The computation depends on the size of an argv[] element (arg_ele).
 27486                                  ;   *	<Parseline> calls <cparse> for chunks of the command line. <Cparse>
 27487                                  ;	does not function as specified; see <Parseline> for more details.
 27488                                  ;   *	<Parseline> now knows about the flags the internals of COMMAND.COM
 27489                                  ;	need to know about. This extra information is stored in a switch_flag
 27490                                  ;	word with each command-line argument; the switches themselves will not
 27491                                  ;	appear in the resulting arg structure.
 27492                                  ;   *	With the exception of CARRY, flags are generally preserved across calls.
 27493                                  ;----------------------------------------------------------------------------
 27494                                  
 27495                                  ; =============== S U B	R O U T	I N E =======================================
 27496                                  
 27497                                  ; PATH_SEARCH tries to find the file it's given, somewhere. An initial value
 27498                                  ; of *argv[0].argstartel == 0 implies that there is no command (empty line
 27499                                  ; or 'd:' or 'd:/'). This check is done in strip; otherwise, strip formats
 27500                                  ; the filename/pathname into tpbuf. Search(tpbuf) is executed to see if we
 27501                                  ; have a match, either in the current working directory if we were handed
 27502                                  ; a filename, or in the specified directory, given a pathname. If this call
 27503                                  ; fails, and we were given a pathname, then Path_Search fails. Otherwise,
 27504                                  ; Path_Crunch is repeatedly invoked on tpbuf[STARTEL] (if there's a drive
 27505                                  ; prefix, we want to skip it) for each pathstring in userpath. Success on
 27506                                  ; either the first invocation of search or on one of the succeeding calls
 27507                                  ; sets up the appropriate information for copying the successful pathname
 27508                                  ; prefix (if any) into the result buffer, followed by the successful filename
 27509                                  ; match (from [search_best_buf]). The result is returned in in EXECPATH.
 27510                                  ;
 27511                                  ; ENTRY:
 27512                                  ;   argv[0]		--	command name and associated information
 27513                                  ; EXIT:
 27514                                  ;   AX			--	non-zero indicates type of file found
 27515                                  ;   EXECPATH		--	successful pathname (AX non-zero)
 27516                                  ; NOTE(S):
 27517                                  ;   1)	Uses the temporary buffer, tpbuf, from the parse routines.
 27518                                  ;   2)	Some files are more equal than others.	See search: for rankings.
 27519                                  ;   3)	Path_Search terminates as soon as a call to search succeeds, even
 27520                                  ;	if search returns an .exe or .bat.
 27521                                  ;   5)	Clobbers dma address.
 27522                                  
 27523                                  ;PBUFLEN 	EQU	128		; length of EXECPATH
 27524                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 27525                                  PBUFLEN 	EQU	256
 27526                                  PATH_SEP_CHAR	EQU	';'
 27527                                  
 27528                                  ;parseflags RECORD special_delim:1, unused:4, path_sep:1, wildcard:1, sw_flag:1
 27529                                  
 27530                                  	;special_delim equ 128
 27531                                  	;path_sep equ 4
 27532                                  	;wildcard equ 2
 27533                                  	;sw_flag  equ 1
 27534                                  
 27535                                  ;----------------------------------------------------------------------------
 27536                                  
 27537                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2510h
 27538                                  
 27539                                  ; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27540                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 32D1h
 27541                                  
 27542                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27543                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 387Bh
 27544                                  
 27545                                  ; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 27546                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 372Fh
 27547                                  
 27548                                  path_search:
 27549 000035A0 53                      	push	bx
 27550 000035A1 51                      	push	cx
 27551 000035A2 52                      	push	dx		; could use a "stack 'em" instruction
 27552 000035A3 56                      	push	si
 27553 000035A4 57                      	push	di
 27554 000035A5 55                      	push	bp
 27555 000035A6 9C                      	pushf
 27556                                  
 27557                                  	;test	ds:arg.argv[0].argflags, (MASK wildcard) + (MASK sw_flag)
 27558                                  	;test	byte [ARGV0_ARG_FLAGS],3
 27559 000035A7 F606[C29F]03            	test	byte [ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag
 27560 000035AC 7403                    	jz	short path_search_ok
 27561                                  path_failure_jmp:
 27562 000035AE E9C100                  	jmp	path_failure	; ambiguous commands not allowed
 27563                                  
 27564                                  path_search_ok:
 27565 000035B1 E85201                  	call	STORE_PCHAR	; figure out the pathname separator
 27566 000035B4 BA[8AA4]                	mov	dx,FBUF		; clobber old dma value with
 27567 000035B7 B8001A                  	mov	ax,Set_DMA*256 ; 1A00h ; a pointer to our dma buffer
 27568 000035BA CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 27569                                  			; DS:DX	-> disk	transfer buffer
 27570 000035BC 06                      	push	es
 27571 000035BD E8EDF0                  	call	find_path	; get a handle (ES:DI) on user path
 27572 000035C0 8C06[B5A4]              	mov	[pathinfo+0],es	; and squirrel it away
 27573 000035C4 893E[B7A4]              	mov	[pathinfo+2],di	; "old" pathstring pointer
 27574 000035C8 893E[B9A4]              	mov	[pathinfo+4],di	; "new" pathstring pointer
 27575 000035CC 07                      	pop	es
 27576                                  	
 27577                                  	;mov	bx,PBUFLEN ; 128 ; copy/format argv[0] into temp buffer
 27578                                  	; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 27579                                  	;mov	bx,256
 27580 000035CD BB0001                  	mov	bx,PBUFLEN ; 256 ; copy/format argv[0] into temp buffer
 27581 000035D0 BE[8B9B]                	mov	si,EXECPATH
 27582 000035D3 E88002                  	call	STRIP
 27583 000035D6 72D6                    	jc	short path_failure_jmp ; if possible, of course
 27584                                  		
 27585 000035D8 89F2                    	mov	dx,si		; search (EXECPATH, error_message)
 27586 000035DA C706[0AA5][7190]        	mov	word [search_error],baddrv_ptr
 27587 000035E0 E89F01                  	call	PSEARCH		; must do at least one search
 27588 000035E3 09C0                    	or	ax,ax		; find anything?
 27589 000035E5 7469                    	jz	short path_noinit
 27590                                  				; failure ... search farther
 27591 000035E7 89C5                    	mov	bp,ax		; success... save filetype code
 27592 000035E9 BF[8B9B]                	mov	di,EXECPATH
 27593                                  	;mov	si,ds:arg.argv[0].argpointer
 27594                                  	;mov	si,[ARG_ARGV]
 27595 000035EC 8B36[C09F]              	mov	si,[ARG+ARGV_ELE.argpointer]
 27596                                  	;mov	cx,ds:arg.argv[0].argstartel
 27597                                  	;mov	cx,[ARGV0_ARGSTARTEL]
 27598 000035F0 8B0E[C39F]              	mov	cx,[ARG+ARGV_ELE.argstartel]
 27599 000035F4 29F1                    	sub	cx,si		; compute prefix bytes to copy
 27600                                  
 27601                                  ; We have the number of bytes in the prefix (up to the final component).
 27602                                  ; We need to form the complete pathname including leading drive and current
 27603                                  ; directory.
 27604                                  ;
 27605                                  ; Is there a drive letter present?
 27606                                  
 27607 000035F6 B43A                    	mov	ah,':'
 27608 000035F8 83F902                  	cmp	cx,2		; room for drive letter?
 27609 000035FB 7205                    	jb	short adddrive	; no, stick it in
 27610 000035FD 386401                  	cmp	[si+1],	ah	; colon present?
 27611 00003600 7408                    	je	short movedrive	; yes, just move it
 27612                                  adddrive:
 27613 00003602 A0[779C]                	mov	al,[CURDRV]	; get current drive
 27614 00003605 0441                    	add	al,'A'		; convert to uppercase letter
 27615 00003607 AB                      	stosw			; store d:
 27616 00003608 EB05                    	jmp	short checkpath
 27617                                  
 27618                                  movedrive:
 27619 0000360A AD                      	lodsw			; move d:
 27620 0000360B AB                      	stosw
 27621 0000360C 83E902                  	sub	cx,2		; 2 bytes less to move
 27622                                  checkpath:
 27623 0000360F 0C20                    	or	al,20h
 27624 00003611 88C2                    	mov	dl,al
 27625                                  	;sub	dl,60h
 27626 00003613 80EA60                  	sub	dl,'a'-1	; convert to 1-based for current dir
 27627                                  
 27628                                  ; Stick in beginning path char
 27629                                  
 27630 00003616 A0[BBA4]                	mov	al,[psep_char]
 27631 00003619 AA                      	stosb
 27632                                  
 27633                                  ; Is there a leading /? If so, then no current dir copy is necessary.
 27634                                  ; Otherwise, get current dir for DL.
 27635                                  
 27636 0000361A 83F901                  	cmp	cx,1		; is there room for path char?
 27637 0000361D 720A                    	jb	short addpath	; no, go add path
 27638 0000361F AC                      	lodsb
 27639 00003620 49                      	dec	cx
 27640 00003621 3A06[BBA4]              	cmp	al,[psep_char]	; is there a path separator?
 27641 00003625 741C                    	je	short movepath	; yes, go move remainder of path
 27642 00003627 41                      	inc	cx
 27643 00003628 4E                      	dec	si		; undo the lodsb
 27644                                  addpath:
 27645 00003629 56                      	push	si
 27646 0000362A 89FE                    	mov	si,di		; remainder of buffer
 27647 0000362C B80047                  	mov	ax,Current_Dir*256 ; 4700h
 27648 0000362F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 27649                                  			; DL = drive (0=default,1=A,etc.)
 27650                                  			; DS:SI	points to 64-byte buffer area
 27651                                  
 27652                                  ; The previous current dir will succeed a previous find_first already worked.
 27653                                  ;
 27654                                  ; Find end of string.
 27655                                  
 27656 00003631 89F7                    	mov	di,si
 27657 00003633 5E                      	pop	si
 27658 00003634 A0[BBA4]                	mov	al,[psep_char]
 27659 00003637 803D00                  	cmp	byte [di],0	; root (empty dir string)?
 27660 0000363A 7407                    	jz	short movepath	; yes, no need for path char
 27661                                  scanend:
 27662                                  	;cmp	byte [di],0	; end of string?
 27663                                  	;jz	short foundend
 27664                                  	;inc	di
 27665                                  	;jmp	short scanend
 27666                                  	; 18/03/2023 - Retro DOS v4.0 COMMAND.COM
 27667 0000363C 47                      	inc	di
 27668 0000363D 803D00                  	cmp	byte [di],0
 27669 00003640 75FA                    	jnz	short scanend
 27670                                  
 27671                                  ; Stick in a trailing path char.
 27672                                  
 27673                                  foundend:
 27674 00003642 AA                      	stosb
 27675                                  
 27676                                  ; Move remaining part of path. Skip leading path char if present.
 27677                                  
 27678                                  movepath:
 27679 00003643 3804                    	cmp	[si],al		; first char a path char?
 27680 00003645 7502                    	jne	short copypath
 27681                                  	; 26/04/2023
 27682 00003647 46                      	inc	si		; move past leading char
 27683 00003648 49                      	dec	cx		; drop from count
 27684                                  copypath:
 27685 00003649 E302                    	jcxz	_copydone	; no chars to move!
 27686 0000364B F3A4                    	rep	movsb
 27687                                  _copydone:
 27688 0000364D E9A100                  	jmp	path_success
 27689                                  				; run off and form complete pathname
 27690                                  path_noinit:
 27691                                  	;test	ds:arg.argv[0].argflags, MASK path_sep
 27692                                  	;test	byte [ARGV0_ARG_FLAGS],4
 27693 00003650 F606[C29F]04            	test	byte [ARG+ARGV_ELE.argflags],4 ; path_sep
 27694 00003655 751B                    	jnz	short path_failure
 27695                                  				; complete pathname specified ==> fail
 27696                                  	;mov	bh,';'
 27697 00003657 B73B                    	mov	bh,PATH_SEP_CHAR
 27698                                  				; semicolon terminates pathstring
 27699                                  	;mov	dx,ds:arg.argv[0].argstartel
 27700                                  				; this is where the last element starts
 27701                                  	;mov	dx,[ARGV0_ARGSTARTEL]
 27702 00003659 8B16[C39F]              	mov	dx,[ARG+ARGV_ELE.argstartel]
 27703                                  	;sub	dx,ds:arg.argv[0].argpointer
 27704                                  				; form pointer into EXECPATH,
 27705                                  	;sub	dx,[ARG_ARGV]
 27706 0000365D 2B16[C09F]              	sub	dx,[ARG+ARGV_ELE.argpointer]
 27707 00003661 81C2[8B9B]              	add	dx,EXECPATH	; skipping over drive spec, if any
 27708                                  path_loop:
 27709 00003665 E8AD00                  	call	path_crunch	; pcrunch (EXECPATH, pathinfo)
 27710 00003668 89C5                    	mov	bp,ax		; save filetype code
 27711 0000366A 9F                      	lahf			; save flags, just in case
 27712 0000366B 09ED                    	or	bp,bp		; did path_crunch find anything?
 27713 0000366D 7508                    	jnz	short path_found
 27714 0000366F 9E                      	sahf			; see? needed those flags, after all!
 27715 00003670 73F3                    	jnc	short path_loop	; is there anything left to the path?
 27716                                  path_failure:
 27717 00003672 31C0                    	xor	ax,ax
 27718 00003674 E98700                  	jmp	path_exit
 27719                                  
 27720                                  path_found:				; pathinfo[] points to winner
 27721 00003677 BF[8B9B]                	mov	di,EXECPATH
 27722                                  	;mov	cx,pathinfo[4]
 27723 0000367A 8B0E[B9A4]              	mov	cx,[pathinfo+4]	; "new" pointer -- end of string
 27724                                  	;mov	si,pathinfo[2]
 27725 0000367E 8B36[B7A4]              	mov	si,[pathinfo+2]	; "old" pointer -- beginning of string
 27726                                  
 27727                                  ;	BAS Nov 20/84
 27728                                  ;   Look at the pathname and expand . and .. if they are the first element
 27729                                  ;   in the pathname (after the drive letter)
 27730                                  
 27731 00003682 06                      	push	es
 27732                                  	;push	pathinfo[0]
 27733 00003683 FF36[B5A4]              	push	word [pathinfo+0]
 27734 00003687 07                      	pop	es
 27735                                  ;SR;
 27736                                  ; Oops! Gets fooled if path= \;..
 27737                                  ; We should also check if a drive letter is really present
 27738                                  ;
 27739 00003688 26807C022E              	cmp	byte [es:si+2],'.'
 27740                                  				; Look for Current dir at start of path
 27741 0000368D 7534                    	jne	short path_cpy
 27742                                  
 27743                                  	; 18/03/2023
 27744                                  	; MSDOS 6.0
 27745 0000368F 26807C013A              	cmp	byte [es:si+1],':'
 27746                                  				; does path have drive letter?
 27747 00003694 752D                    	jne	short path_cpy	; no, copy the path string
 27748                                  
 27749 00003696 51                      	push	cx		; Save pointer to end of string
 27750                                  	;mov	al,[es:si]
 27751                                  	;mov	[di],al		; Copy drive letter, :, and root char
 27752                                  	;mov	al,[es:si+1]	; to EXECPATH
 27753                                  	;mov	[di+1],al
 27754                                  	; 05/05/2023
 27755 00003697 268B04                  	mov	ax,[es:si]
 27756 0000369A 8905                    	mov	[di],ax
 27757 0000369C A0[BBA4]                	mov	al,[psep_char]
 27758 0000369F 884502                  	mov	[di+2],	al
 27759 000036A2 56                      	push	si		; Save pointer to begining of string
 27760 000036A3 268A14                  	mov	dl,[es:si]	; Convert device letter for cur dir
 27761 000036A6 80CA20                  	or	dl,20h
 27762                                  	;sub	dl,60h
 27763 000036A9 80EA60                  	sub	dl,'a'-1
 27764 000036AC 89FE                    	mov	si,di		; pointer to EXECPATH
 27765 000036AE 83C603                  	add	si,3		; Don't wipe out drive and root info
 27766 000036B1 B80047                  	mov	ax,Current_Dir*256 ; 4700h
 27767 000036B4 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 27768                                  			; DL = drive (0=default,1=A,etc.)
 27769                                  			; DS:SI	points to 64-byte buffer area
 27770 000036B6 E8E4F9                  	call	dstrlen		; Determine length of present info
 27771 000036B9 01CE                    	add	si,cx		; Don't copy over drive and root info
 27772 000036BB 4E                      	dec	si
 27773 000036BC 89F7                    	mov	di,si		; Point to end of target string
 27774 000036BE 5E                      	pop	si		; Restore pointer to begining of string
 27775 000036BF 83C603                  	add	si,3		; Point past drive letter, :, .
 27776 000036C2 59                      	pop	cx		; Restore pointer to end of string
 27777                                  path_cpy:
 27778 000036C3 07                      	pop	es
 27779 000036C4 29F1                    	sub	cx,si		; yields character count
 27780 000036C6 1E                      	push	ds		; time to switch segments
 27781 000036C7 FF36[B5A4]              	push	word [pathinfo+0]
 27782                                  				; string lives in this segment
 27783 000036CB 1F                      	pop	ds
 27784 000036CC FC                      	cld
 27785                                  
 27786                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27787                                  	; MSDOS 5.0 (& MSDOS 5.0)
 27788                                  	;;rep	movsb ; 3/3/KK	; copy the prefix path into EXECPATH
 27789                                  kloop:
 27790 000036CD AC                      	lodsb			;AN000;  3/3/KK
 27791 000036CE AA                      	stosb			;AN000;  3/3/KK
 27792 000036CF E88DF0                  	call	testkanj	;AN000;  3/3/KK
 27793 000036D2 7410                    	jz	short _notkanj1	;AN000;  3/3/KK
 27794 000036D4 49                      	dec	cx		;AN000;  3/3/KK
 27795 000036D5 E307                    	jcxz	popdone		;AN000;  Ignore boundary error 3/3/KK
 27796 000036D7 A4                      	movsb			;AN000;  3/3/KK
 27797 000036D8 49                      	dec	cx		;AN000;  3/3/KK
 27798 000036D9 83F901                  	cmp	cx,1		;AN000;  One char (the terminator) left ? 3/3/KK
 27799 000036DC 77EF                    	ja	short kloop	;AN000;  no.  3/3/KK
 27800                                  popdone:			;AN000;  3/3/KK
 27801 000036DE 1F                      	pop	ds		;AN000;  Yes ES:DI->terminator, last char is 3/3/KK
 27802 000036DF A0[BBA4]                	mov	al,[psep_char]	;AN000;  KANJI 3/3/KK
 27803 000036E2 EB0C                    	jmp	short path_store
 27804                                  				;AN000;  3/3/KK
 27805                                  _notkanj1:
 27806                                  	; 26/04/2023
 27807 000036E4 E2E7                    	loop	kloop
 27808 000036E6 1F                      	pop	ds		; return to our segment
 27809 000036E7 4F                      	dec	di		; overwrite terminator
 27810 000036E8 A0[BBA4]                	mov	al,[psep_char]	; with a pathname separator
 27811 000036EB 3A45FF                  	cmp	al,[di-1]
 27812 000036EE 7401                    	je	short path_success
 27813                                  path_store:
 27814 000036F0 AA                      	stosb
 27815                                  path_success:
 27816 000036F1 BE[BDA4]                	mov	si,search_best_buf
 27817 000036F4 31C9                    	xor	cx,cx
 27818                                  path_succ_loop:
 27819 000036F6 AC                      	lodsb			; append winning filename to path
 27820 000036F7 AA                      	stosb			; (including terminating null)
 27821 000036F8 08C0                    	or	al,al
 27822 000036FA 75FA                    	jnz	short path_succ_loop
 27823 000036FC 89E8                    	mov	ax,bp		; retrieve filetype code
 27824                                  path_exit:
 27825 000036FE 9D                      	popf
 27826 000036FF 5D                      	pop	bp
 27827 00003700 5F                      	pop	di
 27828 00003701 5E                      	pop	si		; chill out...
 27829 00003702 5A                      	pop	dx
 27830 00003703 59                      	pop	cx
 27831 00003704 5B                      	pop	bx
 27832 00003705 C3                      	retn
 27833                                  
 27834                                  ; =============== S U B	R O U T	I N E =======================================
 27835                                  
 27836                                  ; STORE_PCHAR determines the pathname-element separator and squirrels
 27837                                  ; it away. In other words, must we say '/bin/ls' or '\bin\ls'?
 27838                                  ;
 27839                                  ; ENTRY:
 27840                                  ; EXIT:
 27841                                  ; NOTE(S):
 27842                                  ;   *	Uses <psep_char>, defined in <path_search>.
 27843                                  
 27844                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27845                                  STORE_PCHAR:
 27846 00003706 50                      	push	ax
 27847 00003707 B02F                    	mov	al,'/'		; is the pathname-element separator
 27848 00003709 E806F3                  	call	pathchrcmp	; a regular slash?
 27849 0000370C 7402                    	jz	short STORE_SLASH
 27850                                  				; if yes, remember slash
 27851 0000370E B05C                    	mov	al,'\'
 27852                                  	; 18/03/2023
 27853                                  	;mov	[psep_char],al	; otherwise, remember back-slash
 27854                                  	;pop	ax
 27855                                  	;retn
 27856                                  STORE_SLASH:
 27857 00003710 A2[BBA4]                	mov	[psep_char],al
 27858 00003713 58                      	pop	ax
 27859 00003714 C3                      	retn
 27860                                  
 27861                                  ; =============== S U B	R O U T	I N E =======================================
 27862                                  
 27863                                  ; PATH_CRUNCH takes a prefix from a prefix string, and a suffix from
 27864                                  ; EXECPATH, and smooshes them into tpbuf. The caller may supply an
 27865                                  ; additional separator to use for breaking up the path-string. Null is the
 27866                                  ; default. Once the user-string has been formed, search is invoked to see
 27867                                  ; what's out there.
 27868                                  ;
 27869                                  ; ENTRY:
 27870                                  ;   BH			--	additional terminator character
 27871                                  ;   SI			--	pointer into pathstring to be dissected
 27872                                  ;   DX			--	pointer to stripped filename
 27873                                  ; EXIT:
 27874                                  ;   AX			--	non-zero (file type), zero (nothing found)
 27875                                  ;   SI			--	moves along pathstring from call to call
 27876                                  ;   [search_best_buf]	--	name of best file (AX non-zero)
 27877                                  ;   [tpbuf]		--	clobbered
 27878                                  ; NOTE(S):
 27879                                  ;   *	Implicit in this code is the ability to specify when to search
 27880                                  ;	the current directory (if at all) through the PATH defined by
 27881                                  ;	the user, a la UNIX (e.g., PATH=;c:\bin;c:\etc searches the
 27882                                  ;	current directory before the bin and etc directories of drive c).
 27883                                  
 27884                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27885                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3454h
 27886                                  
 27887                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 27888                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:39FEh
 27889                                  
 27890                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 27891                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:38B2h
 27892                                  path_crunch:
 27893 00003715 53                      	push	bx
 27894 00003716 51                      	push	cx
 27895 00003717 52                      	push	dx
 27896 00003718 57                      	push	di
 27897 00003719 56                      	push	si
 27898                                  	;pushf	; ** ; 18/03/2023
 27899 0000371A E8E9FF                  	call	STORE_PCHAR	; figure out pathname separator
 27900 0000371D BF[06A4]                	mov	di,TPBUF	; destination of concatenated string
 27901 00003720 8B36[B9A4]              	mov	si,[pathinfo+4]	; "new" pointer to start with
 27902 00003724 8936[B7A4]              	mov	[pathinfo+2],si	; becomes "old" pointer
 27903 00003728 1E                      	push	ds		; save old segment pointer
 27904 00003729 FF36[B5A4]              	push	word [pathinfo+0]
 27905                                  				; replace with pointer to userpath's
 27906 0000372D 1F                      	pop	ds		; segment
 27907                                  	; 26/04/2023
 27908 0000372E 30C9                    	xor	cl,cl		;AN000; clear flag for later use 3/3/KK
 27909                                  path_cr_copy:
 27910 00003730 AC                      	lodsb			; get a pathname byte
 27911 00003731 08C0                    	or	al,al		; check for terminator(s)
 27912 00003733 7414                    	jz	short path_seg	; null terminates segment & pathstring
 27913 00003735 38F8                    	cmp	al,bh
 27914 00003737 7410                    	je	short path_seg	; BH terminates a pathstring segment
 27915                                  	;
 27916                                  	; 18/03/2023
 27917                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 27918 00003739 E823F0                  	call	testkanj	;AN000; 3/3/KK
 27919 0000373C 7406                    	jz	short _notkanj2	;AN000; 3/3/KK
 27920 0000373E AA                      	stosb			;AN000; 3/3/KK
 27921 0000373F A4                      	movsb			;AN000; 3/3/KK
 27922 00003740 B101                    	mov	cl,1 ; *	;AN000; CL=1 means latest stored char is DBCS 3/3/KK
 27923 00003742 EBEC                    	jmp	short path_cr_copy
 27924                                  _notkanj2:
 27925 00003744 30C9                    	xor	cl,cl ; *	;AN000; CL=0 means latest stored char is SBCS 3/3/KK
 27926                                  	;
 27927 00003746 AA                      	stosb
 27928 00003747 EBE7                    	jmp	short path_cr_copy
 27929                                  
 27930                                  path_seg:
 27931 00003749 1F                      	pop	ds		; restore old data segment
 27932 0000374A 8936[B9A4]              	mov	[pathinfo+4],si	; save "new" pointer for next time
 27933 0000374E 88C3                    	mov	bl,al		; remember if we saw null or not...
 27934                                  				;;; REMOVE NEXT 3 LINES FOR CURDIR SPEC
 27935 00003750 31C0                    	xor	ax,ax		; in case nothing in pathstr...
 27936 00003752 81FF[06A4]              	cmp	di,TPBUF	; was there really anything in pathstr?
 27937 00003756 7421                    	je	short path_cr_leave
 27938                                  				; if nothing was copied, pathstr empty
 27939                                  path_cr_look:
 27940 00003758 A0[BBA4]                	mov	al,[psep_char]	; form complete pathname
 27941                                  	;
 27942                                  	; 18/03/2023
 27943                                  	; MSDOS 6.0
 27944 0000375B 08C9                    	or	cl,cl ; *	;AN000; 3/3/KK
 27945 0000375D 7505                    	jnz	short path_cr_store
 27946                                  				;AN000; this is a trailing byte of ECS code 3/3/KK
 27947                                  	;
 27948 0000375F 3A45FF                  	cmp	al,[di-1]	; add pathname separator for suffix
 27949 00003762 7401                    	je	short path_cr_l1
 27950                                  path_cr_store:
 27951 00003764 AA                      	stosb
 27952                                  path_cr_l1:
 27953 00003765 89D6                    	mov	si,dx
 27954                                  path_cr_l2:
 27955 00003767 AC                      	lodsb			; tack the stripped filename onto
 27956 00003768 AA                      	stosb			; the end of the path, up to and
 27957 00003769 08C0                    	or	al,al		; including the terminating null
 27958 0000376B 75FA                    	jnz	short path_cr_l2
 27959 0000376D BA[06A4]                	mov	dx,TPBUF	; and look for an appropriate file...
 27960 00003770 C706[0AA5][5791]        	mov	word [search_error],BADPMES_PTR
 27961                                  	;invoke search
 27962 00003776 E80900                  	call	PSEARCH		; results are in AX & search_best_buf
 27963                                  
 27964                                  	; 18/03/2023
 27965                                  ;path_cr_leave:
 27966                                  	;or	bl,bl		; did we finish off the pathstring?
 27967                                  	;jz	short path_cr_empty
 27968                                  	;			; null in BL means all gone...
 27969                                  	;popf	; **		; otherwise, plenty left
 27970                                  	;clc
 27971                                  	;jmp	short path_cr_exit
 27972                                  ;path_cr_empty:
 27973                                  	;popf	; **
 27974                                  	;stc
 27975                                  ;path_cr_exit:
 27976                                  
 27977                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27978                                  path_cr_leave:
 27979                                  	;popf ; ** ; 18/03/2023
 27980 00003779 80FB01                  	cmp	bl,1	; if bl = 0 -> cf = 1 (path_cr_empty:)
 27981                                  
 27982                                  path_cr_exit:
 27983 0000377C 5E                      	pop	si
 27984 0000377D 5F                      	pop	di
 27985 0000377E 5A                      	pop	dx
 27986 0000377F 59                      	pop	cx
 27987 00003780 5B                      	pop	bx
 27988 00003781 C3                      	retn
 27989                                  
 27990                                  ;============================================================================
 27991                                  ; PATH2.ASM, MSDOS 6.0, 1991
 27992                                  ;============================================================================
 27993                                  ; 02/10/2018 - Retro DOS v3.0
 27994                                  
 27995                                  ;----------------------------------------------------------------------------
 27996                                  ;   SEARCH, when given a pathname, attempts to find a file with
 27997                                  ; one of the following extensions: .com, .exe, .bat (highest to
 27998                                  ; lowest priority). Where conflicts arise, the extension with
 27999                                  ; the highest priority is favored.
 28000                                  ; ENTRY:
 28001                                  ;   DX		--	pointer to null-terminated pathname
 28002                                  ;   fbuf	--	dma buffer for findfirst/next
 28003                                  ; EXIT:
 28004                                  ;   AX		--	8)  file found with .com extension
 28005                                  ;			4)  file found with .exe extension
 28006                                  ;			2)  file found with .bat extension
 28007                                  ;			0)  no such file to be found
 28008                                  ;   (if AX is non-zero:)
 28009                                  ;   [search_best]	identical to AX
 28010                                  ;   [search_best_buf]	null-terminated filename
 28011                                  ; NOTES:
 28012                                  ;   1) Requires caller to have allocated a dma buffer and executed a setdma.
 28013                                  ;---------------
 28014                                  ; CONSTANTS:
 28015                                  ;---------------
 28016                                  SEARCH_FILE_NOT_FOUND	EQU	0
 28017                                  SEARCH_COM		EQU	8
 28018                                  SEARCH_EXE		EQU	4
 28019                                  SEARCH_BAT		EQU	2
 28020                                  FNAME_LEN		EQU	8
 28021                                  FNAME_MAX_LEN		EQU	13
 28022                                  DOT			EQU	'.'
 28023                                  WILDCHAR		EQU	'?'
 28024                                  
 28025                                  
 28026                                  ; =============== S U B	R O U T	I N E =======================================
 28027                                  
 28028                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 26D6h
 28029                                  
 28030                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28031                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:34C9h
 28032                                  
 28033                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28034                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3A73h
 28035                                  
 28036                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 28037                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3927h
 28038                                  PSEARCH:
 28039 00003782 51                      	push	cx
 28040 00003783 52                      	push	dx
 28041 00003784 57                      	push	di
 28042 00003785 56                      	push	si
 28043                                  	;pushf	; ** ; 18/03/2023
 28044 00003786 52                      	push	dx		; check drivespec (save pname ptr)
 28045 00003787 89D7                    	mov	di,dx		; working copy of pathname
 28046 00003789 BE[CAA4]                	mov	si,search_curdir_buf
 28047 0000378C 31D2                    	xor	dx,dx		; zero means current drive
 28048 0000378E 807D013A                	cmp	byte [di+1],':'	; is there a drive spec?
 28049 00003792 7508                    	jne	short SEARCH_DIR_CHECK
 28050 00003794 8A15                    	mov	dl,[di]		; get the drive byte
 28051 00003796 80E2DF                  	and	dl,0DFh ; ~20h	; uppercase the sucker
 28052 00003799 80EA40                  	sub	dl,'@' ; 40h	; and convert to drive number
 28053                                  SEARCH_DIR_CHECK:
 28054 0000379C B80047                  	mov	ax,Current_Dir*256 ; 4700h
 28055 0000379F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 28056                                  			; DL = drive (0=default,1=A,etc.)
 28057                                  			; DS:SI	points to 64-byte buffer area
 28058 000037A1 5A                      	pop	dx		; directory? If we can't we'll
 28059 000037A2 724C                    	jc	short SEARCH_INVALID_DRIVE
 28060                                  				; assume it's a bad drive...
 28061 000037A4 B91300                  	mov	cx,search_attr	; 13h
 28062                                  				; filetypes to search for
 28063 000037A7 B8004E                  	mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 28064 000037AA CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 28065                                  			; CX = search attributes
 28066                                  			; DS:DX	-> ASCIZ filespec
 28067                                  			; (drive,path, and wildcards allowed)
 28068 000037AC 7249                    	jc	short SEARCH_NO_FILE
 28069 000037AE C606[BCA4]00            	mov	byte [search_best],SEARCH_FILE_NOT_FOUND ; 0
 28070 000037B3 C606[BDA4]00            	mov	byte [search_best_buf],ANULL
 28071                                  				; 0 ; nothing's been found, yet
 28072                                  SEARCH_LOOP:
 28073 000037B8 E84300                  	call	SEARCH_FTYPE	; determine if .com, &c...
 28074 000037BB 3A06[BCA4]              	cmp	al,[search_best]
 28075                                  				; better than what we've found so far?
 28076 000037BF 7E13                    	jle	short SEARCH_NEXT
 28077                                  				; no, look for another
 28078 000037C1 A2[BCA4]                	mov	[search_best],al
 28079                                  				; found something... save its code
 28080                                  	;mov	si,offset TRANGROUP:fbuf.find_buf_pname
 28081                                  	;mov	si,FBUF_PNAME
 28082 000037C4 BE[A8A4]                	mov	si,FBUF+FIND_BUF.PNAME ; FBUF+30
 28083 000037C7 BF[BDA4]                	mov	di,search_best_buf
 28084 000037CA B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 28085 000037CD FC                      	cld
 28086 000037CE F3A4                    	rep	movsb		; save complete pathname representation
 28087 000037D0 3C08                    	cmp	al,SEARCH_COM	; 8
 28088                                  				; have we found the best of all?
 28089 000037D2 740A                    	je	short SEARCH_DONE
 28090                                  SEARCH_NEXT:			; keep on looking
 28091 000037D4 B91300                  	mov	cx,search_attr ; 13h
 28092 000037D7 B8004F                  	mov	ax,Find_Next*256 ; 4F00h ; next match
 28093 000037DA CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 28094                                  			; [DTA]	= data block from
 28095                                  			; last AH = 4Eh/4Fh call
 28096 000037DC 73DA                    	jnc	short SEARCH_LOOP
 28097                                  SEARCH_DONE:			; it's all over with...
 28098 000037DE A0[BCA4]                	mov	al,[search_best]
 28099                                  				; pick best to return with
 28100                                  	; 18/03/2023
 28101                                  	; MSDOS 6.0
 28102 000037E1 803E[769F]01            	cmp	byte [ext_entered],1
 28103                                  				;AN005; Did user request a specific ext?
 28104 000037E6 7411                    	je	short SEARCH_EXIT
 28105                                  				;AN005; no - exit
 28106 000037E8 A0[769F]                	mov	al,[ext_entered]
 28107                                  				;AN005; yes - get the real file type back
 28108 000037EB A2[BCA4]                	mov	[search_best],al
 28109                                  				;AN005; save the real file type
 28110                                  	;
 28111 000037EE EB09                    	jmp	short SEARCH_EXIT
 28112                                  
 28113                                  SEARCH_INVALID_DRIVE:		; Tell the user path/drive
 28114 000037F0 8B16[0AA5]              	mov	dx,[search_error]
 28115                                  				; appropriate error message
 28116 000037F4 E8311C                  	call	std_printf	; and pretend no file found
 28117                                  
 28118                                  SEARCH_NO_FILE:			; couldn't find a match
 28119                                  	;mov	ax,SEARCH_FILE_NOT_FOUND ; 0
 28120                                  	; 18/03/2023
 28121 000037F7 31C0                    	xor	ax,ax
 28122                                  SEARCH_EXIT:
 28123                                  	;popf	; ** ; 18/03/2023
 28124 000037F9 5E                      	pop	si
 28125 000037FA 5F                      	pop	di
 28126 000037FB 5A                      	pop	dx
 28127 000037FC 59                      	pop	cx
 28128 000037FD C3                      	retn
 28129                                  
 28130                                  ; =============== S U B	R O U T	I N E =======================================
 28131                                  
 28132                                  ; SEARCH_FTYPE determines the type of a file by examining its extension.
 28133                                  ;
 28134                                  ; ENTRY:
 28135                                  ;   fbuf    --	dma buffer containing filename
 28136                                  ; EXIT:
 28137                                  ;   AX	    --	file code, as given in search header
 28138                                  ; NOTE(S):
 28139                                  ;   *	Implicit assumption that NULL == search_file_not_found
 28140                                  
 28141                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28142                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28143                                  
 28144                                  	; 04/08/2024 - Retro DOS v5.0 COMMAND.COM
 28145                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3927h
 28146                                  SEARCH_FTYPE:
 28147 000037FE 57                      	push	di
 28148 000037FF 56                      	push	si
 28149                                  	;mov	ax,ANULL ; 0	; find the end of the filename
 28150                                  	; 18/02/2023
 28151 00003800 31C0                    	xor	ax,ax ; ax = 0		
 28152                                  	;mov	di,offset TRANGROUP:fbuf.find_buf_pname
 28153                                  	;mov	di,FBUF_PNAME
 28154 00003802 BF[A8A4]                	mov	di,FBUF+FIND_BUF.PNAME ; FBUF+1Eh
 28155 00003805 B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 28156 00003808 FC                      	cld
 28157 00003809 F2AE                    	repnz	scasb		; search for the terminating null
 28158 0000380B 7535                    	jnz	short FTYPE_EXIT
 28159                                  				; weird... no null byte at end
 28160 0000380D 83EF05                  	sub	di,5		; . + E + X + T + NULL
 28161                                  
 28162                                  	; Compare .COM
 28163                                  
 28164 00003810 BE[C895]                	mov	si,comext ; ".COM"
 28165 00003813 89F8                    	mov	ax,di
 28166 00003815 A7                      	cmpsw
 28167 00003816 7508                    	jnz	short FTYPE_EXE
 28168 00003818 A7                      	cmpsw
 28169 00003819 7505                    	jnz	short FTYPE_EXE
 28170                                  	;mov	ax,8
 28171 0000381B B80800                  	mov	ax,SEARCH_COM	; success!
 28172 0000381E EB22                    	jmp	short FTYPE_EXIT
 28173                                  
 28174                                  	; Compare .EXE
 28175                                  FTYPE_EXE:			; still looking... now for '.exe'
 28176 00003820 89C7                    	mov	di,ax
 28177 00003822 BE[CC95]                	mov	si,exeext ; ".EXE"
 28178 00003825 A7                      	cmpsw
 28179 00003826 7508                    	jnz	short FTYPE_BAT
 28180 00003828 A7                      	cmpsw
 28181 00003829 7505                    	jnz	short FTYPE_BAT
 28182                                  	;mov	ax,4
 28183 0000382B B80400                  	mov	ax,SEARCH_EXE	; success!
 28184 0000382E EB12                    	jmp	short FTYPE_EXIT
 28185                                  
 28186                                  	; Compare .BAT
 28187                                  FTYPE_BAT:			; still looking... now for '.bat'
 28188 00003830 89C7                    	mov	di,ax
 28189 00003832 BE[D095]                	mov	si,batext ; ".BAT"
 28190 00003835 A7                      	cmpsw
 28191 00003836 7508                    	jnz	short FTYPE_FAIL
 28192 00003838 A7                      	cmpsw
 28193 00003839 7505                    	jnz	short FTYPE_FAIL
 28194                                  	;mov	ax,2
 28195 0000383B B80200                  	mov	ax,SEARCH_BAT	; success!
 28196 0000383E EB02                    	jmp	short FTYPE_EXIT
 28197                                  
 28198                                  FTYPE_FAIL:			; file doesn't match what we need
 28199                                  	;mov	ax,ANULL ; 0
 28200                                  	; 18/03/2023
 28201 00003840 29C0                    	sub	ax,ax  ; ax = 0
 28202                                  FTYPE_EXIT:
 28203                                  	; 18/03/2023
 28204                                  	; MSDOS 6.0
 28205 00003842 803E[769F]01            	cmp	byte [ext_entered],1
 28206                                  				;AN005; was an extension entered?
 28207 00003847 740A                    	jz	short FTYPE_DONE
 28208                                  				;AN005; no - exit
 28209                                  	;cmp	ax,ANULL	;AN005; was any match found
 28210 00003849 21C0                    	and	ax,ax  ; ax = 0 ?
 28211 0000384B 7406                    	jz	short FTYPE_DONE
 28212                                  				;AN005; no - exit
 28213 0000384D A2[769F]                	mov	[ext_entered],al
 28214                                  				;AN005; save the match type found
 28215 00003850 B80800                  	mov	ax,SEARCH_COM	;AN005; send back best was found to stop search
 28216                                  FTYPE_DONE:
 28217 00003853 5E                      	pop	si
 28218 00003854 5F                      	pop	di
 28219 00003855 C3                      	retn
 28220                                  
 28221                                  ; =============== S U B	R O U T	I N E =======================================
 28222                                  
 28223                                  ; STRIP copies the source string (argv[0]) into the destination buffer,
 28224                                  ; replacing any extension with wildcards.
 28225                                  ;
 28226                                  ; ENTRY:
 28227                                  ;	BX	--	maximum length of destination buffer
 28228                                  ;	DS:SI	--	address of destination buffer
 28229                                  ;	argv[0] --	command name to be stripped
 28230                                  ; EXIT:
 28231                                  ;	CF	--	set if failure, clear if successful
 28232                                  ; NOTE(S):
 28233                                  
 28234                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28235                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28236                                  	; 08/08/2024 - Retro DOS v5.0 COMMAND.COM
 28237                                  STRIP:
 28238 00003856 50                      	push	ax
 28239 00003857 53                      	push	bx
 28240 00003858 51                      	push	cx
 28241 00003859 52                      	push	dx
 28242 0000385A 57                      	push	di
 28243 0000385B 56                      	push	si
 28244                                  	;pushf	; ** ; 18/03/2023
 28245                                  		
 28246                                  	; 05/05/2023
 28247                                  	; MSDOS 6.0
 28248 0000385C C606[769F]01            	mov	byte [ext_entered],1
 28249                                  				;AN005; assume no extension on file name
 28250                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28251                                  	;mov	dx,[ARG_ARGV]
 28252                                  	;mov	dx,ds:arg.argv[0].argpointer
 28253                                  				; save pointer to beginning of argstring
 28254                                  	;mov	dx,[ARGV0_ARGPOINTER]
 28255 00003861 8B16[C09F]              	mov	dx,[ARG+ARGV_ELE.argpointer]
 28256                                  	;mov	di,ds:arg.argv[0].argstartel
 28257                                  				; beginning of last pathname element
 28258                                  	;mov	di,[ARGV0_ARGSTARTEL] ; beginning of last pathname element
 28259 00003865 8B3E[C39F]              	mov	di,[ARG+ARGV_ELE.argstartel]
 28260 00003869 803D00                  	cmp	byte [di],0	; *STARTEL == NULL means no command
 28261 0000386C 743D                    	je	short STRIP_ERROR
 28262 0000386E 89D1                    	mov	cx,dx		; compute where end of argstring lies
 28263                                  	;add	cx,ds:arg.argv[0].arglen
 28264                                  	;add	cx,[ARGV0_ARGLEN]
 28265 00003870 030E[C59F]              	add	cx,[ARG+ARGV_ELE.arglen]
 28266 00003874 29F9                    	sub	cx,di		; and then find length of last element
 28267 00003876 41                      	inc	cx		; include null as well
 28268 00003877 B02E                    	mov	al,'.'
 28269                                  	;mov	al,DOT		; let's find the filetype extension
 28270 00003879 FC                      	cld
 28271 0000387A F2AE                    	repnz	scasb		; wind up pointing to either null or dot
 28272                                  
 28273                                  	; 18/03/2023
 28274                                  	; MSDOS 6.0
 28275 0000387C E307                    	jcxz	PROCESS_EXT	;AN005; if no extension found, just continue
 28276 0000387E B000                    	mov	al,0 ; 18/03/2023
 28277                                  	;mov	byte [ext_entered],0
 28278 00003880 A2[769F]                	mov	[ext_entered],al
 28279                                  				;AN005; we found an extension
 28280                                  	;;mov	al,ANULL	;AN005; continue scanning until the
 28281                                  	;mov	al,0
 28282 00003883 F2AE                    	repnz	scasb		;AN005; end of line is reached.
 28283                                  PROCESS_EXT:
 28284                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28285 00003885 89F9                    	mov	cx,di		; pointer to end of argstring yields
 28286 00003887 29D1                    	sub	cx,dx		; number of bytes to be copied
 28287 00003889 83EB04                  	sub	bx,4		; can argstring fit into dest. buffer?
 28288 0000388C 39D9                    	cmp	cx,bx
 28289 0000388E 7F1B                    	jg	short STRIP_ERROR
 28290                                  				; if not, we must have a bad pathname
 28291 00003890 89F7                    	mov	di,si		; destination buffer
 28292 00003892 89D6                    	mov	si,dx		; source is beginning of pathname
 28293 00003894 FC                      	cld
 28294 00003895 F3A4                    	rep	movsb		; SI=arg,DI=buffer,CX=argend-argbeg
 28295                                  
 28296                                  	; 18/03/2023
 28297                                  	; MSDOS 6.0
 28298 00003897 803E[769F]01            	cmp	byte [ext_entered],1
 28299                                  				;AN005; if an extension was entered
 28300 0000389C 750A                    	jne	short SKIP_WILDS ; cf = 1 ; 12/06/2023
 28301                                  				;AN005;    don't set up wildcard ext.
 28302                                  
 28303                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28304 0000389E 4F                      	dec	di		; overwrite null or dot
 28305 0000389F AA                      	stosb			; with a dot
 28306 000038A0 B03F                    	mov	al,'?'
 28307                                  	;mov	al,WILDCHAR	; now add wildcards
 28308 000038A2 AA                      	stosb
 28309 000038A3 AA                      	stosb
 28310 000038A4 AA                      	stosb
 28311 000038A5 B000                    	mov	al,0
 28312                                  	;mov	al,ANULL	; and a terminating null	
 28313 000038A7 AA                      	stosb
 28314                                  SKIP_WILDS:
 28315                                  	;popf	; ** ; 18/03/2023
 28316 000038A8 F8                      	clc
 28317 000038A9 EB01                    	jmp	short STRIP_EXIT ; chill out...
 28318                                  
 28319                                  STRIP_ERROR:
 28320                                  	;popf	; ** ; 18/03/2023
 28321 000038AB F9                      	stc
 28322                                  STRIP_EXIT:
 28323 000038AC 5E                      	pop	si
 28324 000038AD 5F                      	pop	di
 28325 000038AE 5A                      	pop	dx
 28326 000038AF 59                      	pop	cx
 28327 000038B0 5B                      	pop	bx
 28328 000038B1 58                      	pop	ax
 28329 000038B2 C3                      	retn
 28330                                  
 28331                                  ; =============== S U B	R O U T	I N E =======================================
 28332                                  
 28333                                  ; SAVE_ARGS attempts to preserve the existing argv[]/argvcnt/argbuffer
 28334                                  ;
 28335                                  ; structure in newly allocated memory. The argv[] structure is found at the
 28336                                  ; beginning of this area. The caller indicates how much extra space is
 28337                                  ; needed in the resulting structure; Save_Args returns a segment number and
 28338                                  ; an offset into that area, indicating where the caller may preserve its own
 28339                                  ; data. Note that <argvcnt> can be found at <offset-2>.
 28340                                  ; ENTRY:
 28341                                  ;   BX	    --	size (in bytes) of extra area to allocate
 28342                                  ; EXIT:
 28343                                  ;   AX	    --	segment of new area.
 28344                                  ;   CF	    --	set if unable to save a copy.
 28345                                  ; NOTE(S):
 28346                                  ;   1)	The allocated area will be AT LEAST the size requested -- since
 28347                                  ;	the underlying MSDOS call, <alloc> returns an integral number of
 28348                                  ;	paragraphs.
 28349                                  ;   2)	It is an error if MSDOS can't allocate AT LEAST as much memory
 28350                                  ;	as the caller of Save_Args requests.
 28351                                  ;   3)	AX is undefined if CF indicates an error.
 28352                                  
 28353                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28354                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28355                                  	; 09/08/2024 - Retro DOS v5.0 COMMAND.COM
 28356                                  SAVE_ARGS:
 28357 000038B3 53                      	push	bx
 28358 000038B4 51                      	push	cx
 28359 000038B5 52                      	push	dx
 28360 000038B6 57                      	push	di
 28361 000038B7 56                      	push	si
 28362 000038B8 55                      	push	bp
 28363                                  	; 01/05/2023
 28364                                  	; 26/04/2023
 28365                                  	;pushf ; **
 28366                                  	;;add	bx,1363		; space for arg structure, round up
 28367                                  	; 09/08/2024 - PCDOS 7.1 COMMAND.COM
 28368                                  	;add	bx,1107 ; 1092+15
 28369 000038B9 81C35304                	add	bx,ARG_UNIT.SIZE+15 ; 1348+15
 28370 000038BD B104                    	mov	cl,4		; to paragraph size and convert
 28371 000038BF D3EB                    	shr	bx,cl		; size in bytes to size in paragraphs
 28372 000038C1 B80048                  	mov	ax,ALLOC*256 ; 4800h
 28373 000038C4 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 28374                                  			; BX = number of 16-byte paragraphs desired
 28375 000038C6 7241                    	jc	short SAVE_ERROR ; ***
 28376 000038C8 89C5                    	mov	bp,ax		; save segment id
 28377 000038CA 06                      	push	es		; save TRANGROUP address
 28378 000038CB 8EC0                    	mov	es,ax		; switch to new memory segment
 28379                                  	; assume es:nothing
 28380                                  	;mov	cx,1348		; get back structure size
 28381 000038CD B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092 ; 09/08/2024
 28382 000038D0 31FF                    	xor	di,di		; destination is new memory area
 28383                                  	;mov	si,ARG_ARGV
 28384 000038D2 BE[C09F]                	mov	si,ARG		; source is arg structure
 28385                                  	; 09/08/2024
 28386 000038D5 56                      	push	si
 28387 000038D6 F3A4                    	rep	movsb		; move that sucker!
 28388                                  	;mov	cx,arg.argvcnt 	; adjust argv pointers
 28389                                  	;mov	cx,[ARG_ARGVCNT]
 28390 000038D8 8B0E[80A2]              	mov	cx,[ARG+ARG_UNIT.argvcnt]
 28391 000038DC 31C0                    	xor	ax,ax		; base address for argv_calc
 28392                                  
 28393                                  ;	Bugbug:	What did they mean by this?
 28394                                  ;	Note that the replacement line produces exactly the same code.
 28395                                  ;;	mov	SI, OFFSET TRANGROUP:arg.argbuf - OFFSET arg_unit.argbuf
 28396                                  ;	mov	SI, OFFSET TRANGROUP:arg
 28397                                  
 28398                                  	;;mov	si,ARG_ARGV
 28399                                  	;mov	si,ARG
 28400                                  	; 09/08/2024
 28401 000038DE 5E                      	pop	si
 28402                                  SAVE_PTR_LOOP:
 28403 000038DF 49                      	dec	cx		; exhausted all args?
 28404 000038E0 7C24                    	jl	short SAVE_DONE
 28405 000038E2 89CB                    	mov	bx,cx		; get arg index and
 28406 000038E4 E8A7FC                  	call	argv_calc	; convert to a pointer
 28407                                  	;mov	dx,ds:arg.argv[bx].argpointer
 28408                                  	;mov	dx,[ARG_ARGV+bx]
 28409 000038E7 8B97[C09F]              	mov	dx,[ARG+ARGV_ELE.argpointer+bx]
 28410 000038EB 29F2                    	sub	dx,si		; adjust argpointer
 28411                                  	;mov	es:argv[BX].argpointer,dx
 28412                                  	;mov	[es:bx+ARGV_ELE.argpointer],dx ; mov [es:bx+0],dx
 28413 000038ED 268917                  	mov	[es:bx],dx
 28414                                  	;mov	dx,ds:arg.argv[bx].argstartel
 28415                                  	;mov	dx,[ARGV0_ARGSTARTEL+bx]
 28416 000038F0 8B97[C39F]              	mov	dx,[ARG+ARGV_ELE.argstartel+bx]
 28417 000038F4 29F2                    	sub	dx,si		; and adjust argstartel
 28418                                  	;mov	es:argv[bx].argstartel,dx
 28419                                  	;mov	[es:bx+3],dx
 28420 000038F6 26895703                	mov	[es:bx+ARGV_ELE.argstartel],dx
 28421                                  	;mov	dx,ds:arg.argv[bx].arg_ocomptr
 28422                                  	;mov	dx,[ARGV0_OCOMPTR+bx]
 28423 000038FA 8B97[C99F]              	mov	dx,[ARG+ARGV_ELE.arg_ocomptr+bx]
 28424 000038FE 29F2                    	sub	dx,si		; and adjust arg_ocomptr
 28425                                  	;mov	es:argv[bx].arg_ocomptr,dx
 28426                                  	;mov	[es:bx+9],dx
 28427 00003900 26895709                	mov	[es:bx+ARGV_ELE.arg_ocomptr],dx
 28428 00003904 EBD9                    	jmp	short SAVE_PTR_LOOP
 28429                                  SAVE_DONE:
 28430 00003906 07                      	pop	es		; back we go to TRANGROUP
 28431                                  	; assume es:nothing
 28432 00003907 89E8                    	mov	ax,bp		; restore segment id
 28433                                  	; 26/04/2023
 28434                                  	; cf = 0 ; *
 28435                                  	;jmp	short SAVE_OK
 28436                                  
 28437                                  	; 26/04/2023
 28438                                  ;SAVE_ERROR:
 28439                                  ;	; 26/04/2023
 28440                                  ;	;popf ; **
 28441                                  ;	stc
 28442                                  ;	jmp	short SAVE_EXIT
 28443                                  
 28444                                  SAVE_OK:
 28445                                  	; 26/04/2023
 28446                                  	;popf ; **
 28447                                  	; 26/04/2023
 28448                                  	; cf = 0 ; *
 28449                                  	;clc
 28450                                  SAVE_EXIT:
 28451                                  SAVE_ERROR:	; 26/04/2023 (cf=1) ; ***
 28452 00003909 5D                      	pop	bp
 28453 0000390A 5E                      	pop	si
 28454 0000390B 5F                      	pop	di
 28455 0000390C 5A                      	pop	dx
 28456 0000390D 59                      	pop	cx
 28457 0000390E 5B                      	pop	bx
 28458                                  answ_no:	; 26/04/2023
 28459 0000390F C3                      	retn
 28460                                  
 28461                                  ;============================================================================
 28462                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (1)
 28463                                  ;============================================================================
 28464                                  ; 02/10/2018 - Retro DOS v3.0
 28465                                  
 28466                                  ; Title	COMMAND Language midifiable Code Transient
 28467                                  
 28468                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2843h
 28469                                  
 28470                                  ; =============== S U B	R O U T	I N E =======================================
 28471                                  
 28472                                  ; ****************************************************************
 28473                                  ; *
 28474                                  ; * ROUTINE:	 NOTEST2 - execution of DEL/ERASE command
 28475                                  ; *
 28476                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 28477                                  ; *		 user for Y/N if necessary. If an error occurs,
 28478                                  ; *		 set up an error message and go to CERROR.
 28479                                  ; *
 28480                                  ; * INPUT:	 FCB at 5ch set up with filename(s) entered
 28481                                  ; *		 Current directory set to entered directory
 28482                                  ; *
 28483                                  ; * OUTPUT:	 none
 28484                                  ; *
 28485                                  ; ****************************************************************
 28486                                  ;
 28487                                  ; ARE YOU SURE prompt when deleting *.*
 28488                                  
 28489                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28490                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28491                                  notest2:
 28492 00003910 B90B00                  	mov	cx,11
 28493 00003913 BE5D00                  	mov	si,FCB+1 ; 5Dh
 28494                                  ambspec:
 28495 00003916 AC                      	lodsb
 28496 00003917 3C3F                    	cmp	al,'?'
 28497 00003919 7502                    	jne	short allfil
 28498 0000391B E2F9                    	loop	ambspec
 28499                                  allfil:
 28500                                  	; 19/03/2023
 28501                                  	;cmp	cx,0
 28502 0000391D 09C9                    	or	cx,cx
 28503 0000391F 752E                    	jnz	short noprmpt
 28504                                  askagn:	
 28505 00003921 BA[F490]                	mov	dx,SureMes_Ptr	; "Are you sure (Y/N)?"
 28506 00003924 E8011B                  	call	std_printf
 28507 00003927 BE8000                  	mov	si,80h
 28508 0000392A 89F2                    	mov	dx,si
 28509 0000392C C7047800                	mov	word [si],120	; zero length
 28510                                  	;mov	ax,0C0Ah
 28511 00003930 B80A0C                  	mov	ax,(STD_CON_INPUT_FLUSH<<8)|Std_Con_String_Input
 28512 00003933 CD21                    	int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 28513                                  			; AL must be 01h,06h,07h,08h or 0Ah.
 28514 00003935 AD                      	lodsw
 28515 00003936 08E4                    	or	ah,ah
 28516 00003938 74E7                    	jz	short askagn
 28517 0000393A E847F0                  	call	scanoff
 28518                                  	; 19/03/2023
 28519                                  	; MSDOS 6.0
 28520 0000393D E80C02                  	call	char_in_xlat	; Convert to upper case
 28521                                  	;retc			; return if function not supported
 28522                                  	; 19/03/2023
 28523                                  	;jnc	short check_yn
 28524                                  ;answ_no:
 28525                                  	;retn
 28526 00003940 72CD                    	jc	short answ_no
 28527                                  
 28528                                  	; 19/03/2023
 28529                                  	; AL = 0 if it was (country depended) NO character
 28530                                  	; AL = 1 if it was (country depenced) YES character
 28531                                  
 28532                                  	; MSDOS 3.3
 28533                                  	;call	UPCONV
 28534                                  
 28535                                  	; 19/03/2023	
 28536                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28537                                  	;cmp	al,[CAPITAL_N]
 28538                                  	;jne	short CHECK_Y
 28539                                  	;retn
 28540                                  ;CHECK_Y:
 28541                                  	;cmp	al,[CAPITAL_Y]
 28542                                  	;pushf
 28543                                  	;call	CRLF2
 28544                                  	;popf
 28545                                  	;jne	short ASKAGN
 28546                                  
 28547                                  check_yn:
 28548                                  	; 19/03/2023
 28549                                  	;cmp	al,0	; NO character
 28550 00003942 08C0                    	or	al,al
 28551 00003944 74C9                    	jz	short answ_no
 28552                                  	;cmp	al,1	 ;YES character
 28553 00003946 FEC8                    	dec	al ; 1 -> 0 --> zf = 1
 28554 00003948 9C                      	pushf
 28555 00003949 E82BF0                  	call	CRLF2
 28556 0000394C 9D                      	popf
 28557 0000394D 75D2                    	jnz	short askagn
 28558                                  noprmpt:
 28559 0000394F B413                    	mov	ah,FCB_Delete ; 13h
 28560 00003951 BA5C00                  	mov	dx,FCB ; 5Ch
 28561 00003954 CD21                    	int	21h	; DOS -	DELETE FILE via	FCB
 28562                                  			; DS:DX	-> FCB with filename field filled with
 28563                                  			; template for deletion ('?' wildcard allowed,but not '*')
 28564                                  			; Return: AL = 00h file	found,FFh file	not found
 28565 00003956 FEC0                    	inc	al
 28566 00003958 7403                    	jz	short eraerr
 28567                                  	; 26/04/2023
 28568                                  	;call	RestUDir
 28569                                  ;answ_no:
 28570                                  	;retn
 28571 0000395A E9D1EE                  	jmp	RestUDir ; 26/04/2023
 28572                                  
 28573                                  	; 19/03/2023
 28574                                  	; MSDOS 6.0
 28575                                  eraerr:
 28576                                  	;invoke	set_ext_error_msg
 28577                                  				;AN022; set up the extended error
 28578 0000395D E8D9E6                  	call	Set_Ext_Error_Msg
 28579 00003960 52                      	push	dx		;AN022; save message
 28580                                  	;invoke	RESTUDIR
 28581 00003961 E8CAEE                  	call	RestUDir
 28582 00003964 5A                      	pop	dx		;AN022; restore message
 28583                                  	
 28584 00003965 833E[DA8F]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 28585                                  				;AN022; convert no more files to
 28586 0000396A 7506                    	jne	short cerrorj2	;AN022;  file not found
 28587 0000396C C706[DA8F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2  
 28588                                  				;AN000; get message number in control block
 28589                                  cerrorj2:
 28590 00003972 E9AFF3                  	jmp	cerror
 28591                                  	
 28592                                  	; 19/03/2023
 28593                                  	; MSDOS 3.3
 28594                                  ;ERAERR:	
 28595                                  	;mov	ah,Set_DMA ; 1Ah
 28596                                  	;mov	dx,FCB ; 5Ch
 28597                                  	;int	21h		; DOS -	SET DISK TRANSFER AREA ADDRESS
 28598                                  	;			; DS:DX	-> disk	transfer buffer
 28599                                  	;mov	ah,Dir_Search_First ; 11h
 28600                                  	;int	21h		; DOS -	SEARCH FIRST USING FCB
 28601                                  	;			; DS:DX	-> FCB
 28602                                  	;push	ax
 28603                                  	;call	RESTUDIR
 28604                                  	;pop	ax
 28605                                  	;mov	dx,FNOTFOUNDPTR
 28606                                  	;inc	al
 28607                                  	;jz	short CERRORJ
 28608                                  	;mov	dx,ACCDENPTR
 28609                                  	;jmp	CERROR
 28610                                  
 28611                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28612                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:36D4h
 28613                                  
 28614                                  ; ****************************************************************
 28615                                  ; *
 28616                                  ; * ROUTINE:	 SLASHP_ERASE - execution of DEL/ERASE /P
 28617                                  ; *
 28618                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 28619                                  ; *		 user for Y/N where necessary. If an error occurs
 28620                                  ; *		 set up and error message and transfer control
 28621                                  ; *		 to CERROR.
 28622                                  ; *
 28623                                  ; * INPUT:	 FCB at 5Ch set up with filename(s) entered
 28624                                  ; *		 Current directory set to entered directory
 28625                                  ; *
 28626                                  ; * OUTPUT:	 none
 28627                                  ; *
 28628                                  ; ****************************************************************
 28629                                  
 28630                                  	; 19/03/2023
 28631                                  slashp_erase:				;AN000; entry point
 28632                                  	;invoke	build_dir_string	;AN000; set up current directory string for output
 28633 00003975 E883E8                  	call	build_dir_string
 28634                                  
 28635 00003978 B41A                    	mov	ah,Set_DMA ; 1Ah	;AN000; issue set dta int 21h
 28636                                  	;mov	dx,offset trangroup:destdir
 28637 0000397A BA[689D]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 28638 0000397D CD21                    	int	21h			;AN000;
 28639                                  
 28640                                  	;mov	ah,11h
 28641 0000397F B411                    	mov	ah,Dir_Search_First	;AN000; do dir search first int 21h
 28642 00003981 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000; use FCB at 5Ch for target
 28643 00003984 CD21                    	int	21h			;AN000;
 28644 00003986 FEC0                    	inc	al			;AN000; did an error occur
 28645                                  	;jz	short eraerr		;AN022; go to error exit
 28646                                  	; 26/04/2023
 28647 00003988 7502                    	jnz	short delete_prompt_loop
 28648                                  
 28649                                  	; 26/04/2023
 28650                                  stop_del:
 28651 0000398A EBD1                    	jmp	short eraerr		;AN022; go to error exit - need long jmp
 28652                                  
 28653                                  delete_prompt_loop:			;AN000;
 28654                                  	;mov	si,offset trangroup:destdir+1
 28655 0000398C BE[699D]                	mov	si,DESTDIR+1		;AN000; set up FCB as source
 28656                                  	;mov	di,offset trangroup:dest
 28657 0000398F BF[389D]                	mov	di,DEST			;AN000; set up dest as target
 28658 00003992 A0[689C]                	mov	al,[DIRCHAR]		;AN000; store a "\" in the first char
 28659 00003995 AA                      	stosb				;AN000;   of DEST
 28660                                  	;invoke	FCB_TO_ASCZ		;AN000; convert filename from FCB to ASCIIZ string
 28661 00003996 E80AF0                  	call	FCB_TO_ASCZ
 28662                                  
 28663                                  slashp_askagn:				;AN000;
 28664 00003999 E8DBEF                  	call	CRLF2			;AN000; print out carriage return, line feed
 28665                                  	;mov	dx,offset trangroup:bwdbuf
 28666 0000399C BA[AB9D]                	mov	dx,BWDBUF		;AN000; print out current directory string
 28667 0000399F 89D3                    	mov	bx,dx			;AN000; get string pointer in bx
 28668 000039A1 807F0300                	cmp	byte [bx+3],END_OF_LINE_OUT ; 0
 28669                                  					;AN000; see if only D:\,0
 28670 000039A5 7504                    	jnz	short not_del_root	;AN000; no continue
 28671 000039A7 C6470200                	mov	byte [bx+2],END_OF_LINE_OUT ; 0
 28672                                  					;AN000; yes, get rid of \ ;
 28673                                  not_del_root:				;AN000;
 28674 000039AB 8916[129E]              	mov	[string_ptr_2],dx 	;AN000;
 28675                                  	;mov	dx,offset trangroup:string_buf_ptr
 28676 000039AF BA[E291]                	mov	dx,string_buf_ptr	;AN000;
 28677                                  	;invoke	std_printf		;AN000;
 28678 000039B2 E8731A                  	call	std_printf
 28679                                  	;mov	dx,offset trangroup:dest
 28680 000039B5 BA[389D]                	mov	dx,DEST			;AN000; print out file name string
 28681 000039B8 8916[129E]              	mov	[string_ptr_2],dx 	;AN000;
 28682                                  	;mov	dx,offset trangroup:string_buf_ptr
 28683 000039BC BA[E291]                	mov	dx,string_buf_ptr	;AN000;
 28684                                  	;invoke	std_printf		;AN000;
 28685 000039BF E8661A                  	call	std_printf
 28686                                  	;mov	dx,offset trangroup:Del_Y_N_Ptr
 28687 000039C2 BA[F190]                	mov	dx,Del_Y_N_Ptr		;AN000; issue ", Delete (Y/N)?" message
 28688                                  	;invoke	std_printf		;AN000;
 28689 000039C5 E8601A                  	call	std_printf
 28690                                  
 28691                                  ;;M029	mov	si,80H			;AN000; set up buffer for input
 28692                                  ;;M029	mov	dx,si			;AN000;
 28693                                  ;;M029	mov	word ptr [si],combuflen ;AN000;
 28694                                  ;;M029	mov	ax,(std_con_input_flush shl 8) or std_con_string_input	;AN000;
 28695                                  ;;M029	int	21h			;AN000; get input from the user
 28696                                  ;;M029	lodsw				;AN000;
 28697                                  ;;M029	or	ah,ah			;AN000; was a character entered?
 28698                                  ;;M029	jz	short slashp_askagn	;AN000; no - ask again
 28699                                  ;;M029	invoke	scanoff 		;AN000; scan off leading delimiters
 28700                                  
 28701                                  ;	Get a single character input.
 28702                                  
 28703                                  	;;mov	ax,(STD_CON_INPUT_FLUSH shl 8) or STD_CON_INPUT	;M029
 28704                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT
 28705 000039C8 B8010C                  	mov	ax,0C01h
 28706 000039CB CD21                    	int	21h			;M029
 28707                                  
 28708 000039CD E87C01                  	call	char_in_xlat		;AN000; yes - upper case it
 28709                                  	;retc				;AN000; return if function not supported
 28710                                  	; 19/03/2023
 28711 000039D0 7301                    	jnc	short slashp_check_yn
 28712                                  slashp_ans_no:
 28713 000039D2 C3                      	retn
 28714                                  
 28715                                  slashp_check_yn:
 28716                                  	; 19/03/2023
 28717                                  	; AL = 0 if it was (country depended) NO character
 28718                                  	; AL = 1 if it was (country depenced) YES character
 28719                                  
 28720                                  	;cmp	al,capital_n		;AN000; was it no?
 28721                                  	;cmp	al,0
 28722 000039D3 20C0                    	and	al,al ; 0
 28723 000039D5 7420                    	jz	short next_del_file	;AN000; yes - don't delete file
 28724                                  	;cmp	al,capital_y		;AN000; was it yes?
 28725                                  	;cmp	al,1
 28726 000039D7 FEC8                    	dec	al  ; 1-> 0 --> zf = 1
 28727                                  	;jz	short delete_this_file	;AN000; yes - delete the file
 28728                                  	;jmp	short slashp_askagn	;AN000; it was neither - ask again
 28729                                  	; 19/03/2023
 28730 000039D9 75BE                    	jnz	short slashp_askagn
 28731                                  
 28732                                  delete_this_file:			;AN000;
 28733 000039DB B413                    	mov	ah,FCB_Delete ; 13h	;AN000; delete the file
 28734                                  	;mov	dx,offset trangroup:destdir
 28735 000039DD BA[689D]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 28736 000039E0 CD21                    	int	21h			;AN000;
 28737 000039E2 FEC0                    	inc	al			;AN000; did an error occur?
 28738 000039E4 7511                    	jnz	short next_del_file	;AN000; no - get next file
 28739                                  ;
 28740                                  ;M041; Begin changes
 28741                                  ; We got an error deleting the file. If this is access denied, we can go on
 28742                                  ;to the next file after printing an error message.
 28743                                  ;
 28744                                  	;invoke	Get_ext_error_number	;see what error we got
 28745 000039E6 E860E6                  	call	get_ext_error_number
 28746 000039E9 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 28747                                  					;is it access denied?
 28748 000039EC 759C                    	jne	short stop_del		;no, some other error
 28749                                  	;invoke	CrLf2			;print a CR-LF
 28750 000039EE E886EF                  	call	CRLF2
 28751                                  	;invoke set_ext_error_msg	;error message
 28752 000039F1 E845E6                  	call	Set_Ext_Error_Msg
 28753                                  	;invoke	std_eprintf		;"Access denied"
 28754 000039F4 E8291A                  	call	std_eprintf
 28755                                  	; 26/04/2023
 28756                                  	;jmp	short next_del_file	;try next file
 28757                                  	; 26/04/2023
 28758                                  ;stop_del:
 28759                                  ;;
 28760                                  ;;M041; End changes
 28761                                  ;;
 28762                                  ;	jmp	eraerr			;AN022; go to error exit - need long jmp
 28763                                  
 28764                                  next_del_file:				;AN000;
 28765                                  ;
 28766                                  ; M050 - begin
 28767                                  ; 	Norton Utilities 5.0 has a bug. DiskMon when invoked
 28768                                  ;       with /protect+ and /light+ makes it intercept all
 28769                                  ;       deletes. This hook does not save and restore the DTA correctly.
 28770                                  ;       They save the DWORD in a WORD by mistake! They save both the
 28771                                  ;       segment and the offset in the SAME variable (WORD)!!!
 28772                                  ;
 28773 000039F7 B41A                    	mov	ah,Set_DMA ; 1Ah
 28774                                  	;mov	dx,offset trangroup:destdir
 28775 000039F9 BA[689D]                	mov	dx,DESTDIR
 28776 000039FC CD21                    	int	21h
 28777                                  ;
 28778                                  ; M050 - end
 28779                                  
 28780 000039FE B412                    	mov	ah,Dir_Search_Next ; 12h
 28781                                  					;AN000; search for another file
 28782 00003A00 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000;
 28783 00003A03 CD21                    	int	21h			;AN000;
 28784 00003A05 FEC0                    	inc	al			;AN000; was a file found?
 28785                                  	;jz	short slash_p_exit	;AN000; no - exit
 28786                                  	;jmp	delete_prompt_loop	;AN000; yes - continue (need long jump)
 28787                                  	; 26/04/2023
 28788 00003A07 7583                    	jnz	short delete_prompt_loop
 28789                                  
 28790                                  slash_p_exit:
 28791                                  	;invoke	get_ext_error_number	;AN022; get the extended error number
 28792 00003A09 E83DE6                  	call	get_ext_error_number
 28793 00003A0C 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	;AN022; was error file not found?
 28794 00003A0F 7403                    	jz	short good_erase_exit 	;AN022; yes - clean exit
 28795 00003A11 E96AE3                  	jmp	extend_setup		;AN022; go issue error message
 28796                                  
 28797                                  good_erase_exit:
 28798                                  	;invoke	restudir		;AN000; we're finished - restore user's dir
 28799 00003A14 E817EE                  	call	RestUDir
 28800                                  	;call	CRLF2			;AN000; print out carriage return, line feed
 28801                                  	;retn				;AN000; exit
 28802                                  	; 19/03/2023
 28803 00003A17 E95DEF                  	jmp	CRLF2
 28804                                  
 28805                                  ; =============== S U B	R O U T	I N E =======================================
 28806                                  
 28807                                  ; ECHO, BREAK, and VERIFY commands. Check for "ON" and "OFF"
 28808                                  
 28809                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28810                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 28811                                  	; 10/08/2024 - Retro DOS v5.0 COMMAND.COM
 28812                                  _ECHO:
 28813 00003A1A E89900                  	call	ON_OFF
 28814 00003A1D 7212                    	jb	short DOEMES
 28815 00003A1F 8E1E[639C]              	mov	ds,[RESSEG]
 28816 00003A23 7506                    	jnz	short ECH_OFF
 28817 00003A25 800E[9D02]01            	or	byte [EchoFlag],1
 28818 00003A2A C3                      	retn
 28819                                  
 28820                                  ECH_OFF:
 28821 00003A2B 8026[9D02]FE            	and	byte [EchoFlag],0FEh
 28822 00003A30 C3                      	retn
 28823                                  
 28824                                  	; 19/03/2023
 28825                                  	; MSDOS 6.0 (& MSDOS 5.0)
 28826                                  ;CERRORJ:
 28827                                  	;jmp	cerror
 28828                                  
 28829                                  ; There was no discrenable ON or OFF after the ECHO. If there is nothing but
 28830                                  ; delimiters on the command line, we issue the ECHO is ON/OFF message.
 28831                                  
 28832                                  DOEMES:
 28833                                  	; 19/03/2023
 28834                                  	; MSDOS 6.0
 28835                                  	;cmp	cl,0		;AC000; was anything on the line?
 28836 00003A31 20C9                    	and	cl,cl
 28837 00003A33 7409                    	jz	short PECHO	; just display current state.
 28838 00003A35 BA8200                  	mov	dx,82h		; Skip one char after "ECHO"
 28839 00003A38 E895EF                  	call	CRPRINT
 28840 00003A3B E939EF                  	jmp	CRLF2
 28841                                  
 28842                                  	; 19/03/2023
 28843                                  	; MSDOS 3.3
 28844                                  	;call	MOVE_TO_FIRST_ARG
 28845                                  	;jz	short PECHO
 28846                                  	;mov	dx,82h
 28847                                  	;call	CRPRINT
 28848                                  	;jmp	CRLF2
 28849                                  
 28850                                  PECHO:
 28851                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28852 00003A3E 8E1E[639C]              	mov	ds,[RESSEG]
 28853 00003A42 8A1E[9D02]              	mov	bl,[EchoFlag]
 28854 00003A46 0E                      	push	cs
 28855 00003A47 1F                      	pop	ds
 28856 00003A48 80E301                  	and	bl,1
 28857 00003A4B BA[8291]                	mov	dx,EchoMes_Ptr
 28858 00003A4E EB24                    	jmp	short PYN
 28859                                  
 28860                                  ; ---------------------------------------------------------------------------
 28861                                  
 28862                                  	; 19/03/2023
 28863                                  	; MSDOS 3.3
 28864                                  CERRORJ:
 28865 00003A50 E9D1F2                  	jmp	cerror
 28866                                  
 28867                                  ; =============== S U B	R O U T	I N E =======================================
 28868                                  
 28869                                  	; 19/03/2023
 28870                                  	; MSDOS 3.3
 28871                                  ;MOVE_TO_FIRST_ARG:
 28872                                  	;mov	si,81h
 28873                                  	;call	SCANOFF
 28874                                  	;cmp	al,0Dh
 28875                                  	;retn
 28876                                  
 28877                                  ; =============== S U B	R O U T	I N E =======================================
 28878                                  
 28879                                  CNTRLC:
 28880 00003A53 E86000                  	call	ON_OFF
 28881 00003A56 B80133                  	mov	ax,(Set_CTRL_C_Trapping<<8)|1 ; 3301h
 28882 00003A59 720C                    	jc	short PCNTRLC
 28883 00003A5B 7505                    	jnz	short CNTRLC_OFF
 28884 00003A5D B201                    	mov	dl,1
 28885 00003A5F CD21                    	int	21h	; DOS -	EXTENDED CONTROL-BREAK CHECKING
 28886                                  			; AL = 00h get state / 01h set state / 02h set AND get
 28887                                  			; DL = 00h for OFF or 01h for ON
 28888 00003A61 C3                      	retn
 28889                                  
 28890                                  ; ---------------------------------------------------------------------------
 28891                                  
 28892                                  CNTRLC_OFF:
 28893 00003A62 30D2                    	xor	dl,dl
 28894 00003A64 CD21                    	int	21h		; Turn off ^C check
 28895 00003A66 C3                      	retn
 28896                                  
 28897                                  ; ---------------------------------------------------------------------------
 28898                                  
 28899                                  PCNTRLC:
 28900                                  	; 19/03/2023
 28901                                  	; MSDOS 6.0
 28902                                  	;cmp	cl,0		;AC000; rest of line blank?
 28903 00003A67 08C9                    	or	cl,cl
 28904 00003A69 75E5                    	jnz	short CERRORJ 	; no, oops!
 28905                                  
 28906                                  	; 19/03/2023
 28907                                  	; MSDOS 3.3
 28908                                  	;call	MOVE_TO_FIRST_ARG
 28909                                  	;jnz	short CERRORJ
 28910                                  ;pccont:
 28911                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28912 00003A6B 30C0                    	xor	al,al
 28913 00003A6D CD21                    	int	21h		; get Ctrl-Break state (ah=33h)
 28914 00003A6F 88D3                    	mov	bl,dl
 28915 00003A71 BA[6691]                	mov	dx,CtrlcMes_Ptr
 28916                                  
 28917                                  ; ---------------------------------------------------------------------------
 28918                                  
 28919                                  PYN:	; write "ON" or "OFF" state 
 28920                                  
 28921                                  	; 26/04/2023
 28922                                  	; 19/03/2023
 28923                                  	; MSDOS 3.3
 28924                                  	;call	STD_PRINTF
 28925                                  	;mov	dx,ONMES_PTR	;AC000; get ON pointer
 28926                                  	;or	bl,bl
 28927                                  	;jnz	short PRINTVAL
 28928                                  	;mov	dx,OFFMES_PTR	;AC000; get OFF pointer
 28929                                  	
 28930                                  	; 26/04/2023
 28931                                  	; 19/03/2023
 28932                                  	; MSDOS 6.0
 28933 00003A74 BE[9391]                	mov	si,ONMES_PTR
 28934 00003A77 08DB                    	or	bl,bl
 28935 00003A79 7503                    	jnz	short PRINTVAL
 28936 00003A7B BE[9091]                	mov	si,OFFMES_PTR
 28937                                  PRINTVAL:
 28938                                  	; 19/03/2023
 28939                                  	; MSDOS 3.3
 28940                                  	;jmp	STD_PRINTF
 28941                                  
 28942                                  	; 19/03/2023
 28943                                  	; MSDOS 6.0
 28944 00003A7E 52                      	push	dx		;AN000; save offset of message block
 28945 00003A7F 89D3                    	mov	bx,dx		;AN000; save offset value
 28946 00003A81 AD                      	lodsw			;AN000; get message number of on or off
 28947 00003A82 B6FF                    	mov	dh,util_msg_class ; -1 ; 0FFh
 28948                                  				;AN000; this is a utility message
 28949 00003A84 E8841A                  	call	TSYSGETMSG	;AN000; get the address of the message
 28950                                  	;add	bx,5
 28951 00003A87 83C305                  	add	bx,Ptr_off_pos	;AN000; point to offset of ON/OFF
 28952                                  	
 28953 00003A8A 8937                    	mov	[bx],si		;AN000; put the offset in the message block
 28954 00003A8C 5A                      	pop	dx		;AN000; get message back
 28955 00003A8D E89819                  	call	std_printf	;AC000; go print message
 28956 00003A90 C7070000                	mov	word [bx],0	;AN000; zero out message pointer
 28957 00003A94 C3                      	retn			;AN000; exit
 28958                                  
 28959                                  ; =============== S U B	R O U T	I N E =======================================
 28960                                  
 28961                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.CO
 28962                                  VERIFY:
 28963 00003A95 E81E00                  	call	ON_OFF
 28964 00003A98 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 28965 00003A9B 720A                    	jc	short PVERIFY
 28966 00003A9D 7503                    	jnz	short VER_OFF
 28967 00003A9F CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 28968                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 28969 00003AA1 C3                      	retn
 28970                                  
 28971                                  ; ---------------------------------------------------------------------------
 28972                                  
 28973                                  VER_OFF:
 28974 00003AA2 FEC8                    	dec	al
 28975 00003AA4 CD21                    	int	21h		; Turn off verify after write
 28976 00003AA6 C3                      	retn
 28977                                  
 28978                                  ; ---------------------------------------------------------------------------
 28979                                  
 28980                                  PVERIFY:
 28981                                  	; 19/03/2023
 28982                                  	; MSDOS 6.0
 28983                                  	;cmp	cl,0		;AC000; is rest of line blank?
 28984 00003AA7 20C9                    	and	cl,cl
 28985 00003AA9 75A5                    	jnz	short CERRORJ 	; nope...
 28986                                  
 28987                                  	 ;19/03/2023
 28988                                  	; MSDOS 3.3
 28989                                  	;call	MOVE_TO_FIRST_ARG
 28990                                  	;jnz	short CERRORJ
 28991                                  
 28992 00003AAB B454                    	mov	ah,Get_Verify_On_Write ; 54h
 28993 00003AAD CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 28994                                  				; Return: AL = 00h if flag OFF
 28995                                  				; AL = 01h if flag ON
 28996 00003AAF 88C3                    	mov	bl,al
 28997 00003AB1 BA[7491]                	mov	dx,VeriMes_Ptr
 28998 00003AB4 EBBE                    	jmp	short PYN
 28999                                  
 29000                                  ; =============== S U B	R O U T	I N E =======================================
 29001                                  
 29002                                  ; ****************************************************************
 29003                                  ; *
 29004                                  ; * ROUTINE:	 ON_OFF
 29005                                  ; *
 29006                                  ; * FUNCTION:	 Parse the command line for an optional ON or
 29007                                  ; *		 OFF string for the BREAK, VERIFY, and ECHO
 29008                                  ; *		 routines.
 29009                                  ; *
 29010                                  ; * INPUT:	 command line at offset 81H
 29011                                  ; *		 PARSE_BREAK control block
 29012                                  ; *
 29013                                  ; * OUTPUT:	 If carry is clear
 29014                                  ; *		    If ON is found
 29015                                  ; *		       Zero flag set
 29016                                  ; *		    If OFF is found
 29017                                  ; *		       Zero flag clear
 29018                                  ; *		 If carry set
 29019                                  ; *		    If nothing on command line
 29020                                  ; *		       CL set to zero
 29021                                  ; *		    If error
 29022                                  ; *		       CL contains error value from parse
 29023                                  ; *
 29024                                  ; ****************************************************************
 29025                                  
 29026                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29027                                  ON_OFF:
 29028 00003AB6 BE8100                  	mov	si,81h
 29029                                  
 29030                                  	; 19/03/2023
 29031                                  	; MSDOS 3.3
 29032                                  	;call	SCANOFF		; scan off leading blanks & equal
 29033                                  	;cmp	al,0Dh		; are we at end of line?
 29034                                  	;je	short BAD_ONF	; yes, return error
 29035                                  	;lodsw
 29036                                  	;or	ax,2020h	; convert to lowercase
 29037                                  	;cmp	ax,6E6Fh ;'on'
 29038                                  	;je	short ON_CHECK
 29039                                  	;cmp	ax,666Fh ;'of'
 29040                                  	;jne	short BAD_ONF
 29041                                  	;lodsb
 29042                                  	;or	al,20h		; convert to lowercase		
 29043                                  	;cmp	al,66h	 ; 'f'
 29044                                  	;jne	short BAD_ONF	
 29045                                  	;or	al,66h ; or al,'f'
 29046                                  	;jmp	short OFF_CHECK
 29047                                  ;ON_CHECK:
 29048                                  	;xor	al,al
 29049                                  ;OFF_CHECK:
 29050                                  	;lahf
 29051                                  	;mov	bx,ax
 29052                                  	;call	SCANOFF		; scan off leading blanks & equal
 29053                                  	;cmp	al,0Dh		; are we at end of line?	
 29054                                  	;jne	short BAD_ONF	; no, return error
 29055                                  	;mov	ax,bx
 29056                                  	;sahf
 29057                                  	;clc
 29058                                  	;retn
 29059                                  
 29060                                  	; 19/03/2023
 29061                                  	; MSDOS 6.0
 29062                                  scan_on_off:			;AN032; scan off leading blanks & equal
 29063 00003AB9 AC                      	lodsb			;AN032; get a char
 29064                                  	;cmp	al,blank	;AN032; if whitespace
 29065 00003ABA 3C20                    	cmp	al,20h
 29066 00003ABC 74FB                    	je	short scan_on_off
 29067                                  				;AN032;    keep scanning
 29068 00003ABE 3C09                    	cmp	al,tab_chr	;AN032; if tab
 29069                                  	;cmp	al,09h
 29070 00003AC0 74F7                    	je	short scan_on_off
 29071                                  				;AN032;    keep scanning
 29072                                  	;cmp	al,equal_chr	;AN032; if equal char
 29073 00003AC2 3C3D                    	cmp	al,'=' ; 3Dh
 29074 00003AC4 7401                    	je	short parse_on_off
 29075                                  				;AN032;    start parsing
 29076 00003AC6 4E                      	dec	si		;AN032; if none of above - back up
 29077                                  
 29078                                  parse_on_off:			;AN032;    and start parsing
 29079 00003AC7 BF[1496]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 29080 00003ACA 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 29081 00003ACC 31D2                    	xor	dx,dx		;AN000;
 29082 00003ACE E89B0E                  	call	cmd_parse	;AC000; call parser
 29083                                  	;cmp	ax,-1 ; 0FFFFh
 29084 00003AD1 83F8FF                  	cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 29085 00003AD4 742E                    	je	short BADONF	;AC000; yes, return error
 29086                                  	;cmp	ax,RESULT_NO_ERROR ;AN000; did an error occur
 29087                                  	;cmp	ax,0
 29088 00003AD6 21C0                    	and	ax,ax ; ax = 0 ?
 29089 00003AD8 7404                    	jz	short on_off_there
 29090                                  				;AN000; no - continue
 29091 00003ADA 89C1                    	mov	cx,ax		;AN000; yes - set cl to error code
 29092 00003ADC EB26                    	jmp	short BADONF	;AN000; return error
 29093                                  
 29094                                  on_off_there:
 29095 00003ADE 803E[5CA6]FF            	cmp	byte [PARSE1_CODE],-1 ; 0FFh
 29096                                  				;AN014; was a valid positional present?
 29097 00003AE3 7505                    	jnz	short good_on_off
 29098                                  				;AN014; yes - continue
 29099 00003AE5 B90A00                  	mov	cx,BadParm_Ptr	;AN014; something other than ON/OFF
 29100                                  	;mov	cx,10 ; 0Ah
 29101 00003AE8 EB1A                    	jmp	short BADONF	;AN014; return error
 29102                                  
 29103                                  good_on_off:			;AN014;
 29104 00003AEA 31C0                    	xor	ax,ax		;AC000; set up return code for
 29105 00003AEC 0A06[5CA6]              	or	al,[PARSE1_CODE]
 29106                                  				;AC000;    ON or OFF in AX
 29107 00003AF0 9C                      	pushf			;AN000; save flags
 29108 00003AF1 BF[1496]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 29109 00003AF4 31D2                    	xor	dx,dx		;AN000;
 29110 00003AF6 E8730E                  	call	cmd_parse	;AN000; call parser
 29111 00003AF9 83F8FF                  	cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 29112                                  	;cmp	ax,-1 ; 0FFFFh
 29113 00003AFC 7503                    	jne	short BADONF_flags
 29114                                  				;AN000; NO, return error
 29115 00003AFE 9D                      	popf			;AN000; restore flags
 29116 00003AFF F8                      	clc			;AC000; no error
 29117                                  	;jmp	short on_off_end
 29118                                  				;AN000; return to caller
 29119                                  	; 26/04/2023
 29120 00003B00 C3                      	retn
 29121                                  
 29122                                  BADONF_flags:
 29123 00003B01 89C1                    	mov	cx,ax
 29124 00003B03 9D                      	popf
 29125                                  
 29126                                  ; ---------------------------------------------------------------------------
 29127                                  
 29128                                  ; No discernable ON or OFF has been found. Put an error message pointer in DX
 29129                                  ; and return the error
 29130                                  
 29131                                  BADONF:
 29132 00003B04 BA[4391]                	mov	dx,bad_on_off_ptr
 29133 00003B07 F9                      	stc
 29134                                  on_off_end:
 29135 00003B08 C3                      	retn
 29136                                  
 29137                                  ;============================================================================
 29138                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (2)
 29139                                  ;============================================================================
 29140                                  ; 02/10/2018 - Retro DOS v3.0
 29141                                  
 29142                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29BFh
 29143                                  
 29144                                  ; =============== S U B	R O U T	I N E =======================================
 29145                                  
 29146                                  	; 20/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29147                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3876h
 29148                                  	
 29149                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29150                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3E20h
 29151                                  
 29152                                  	; 10/08/2024 - Retro DOS v5.0 COMMAND.COM
 29153                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:3CD4h
 29154                                  PRINT_DATE:
 29155                                  	; 20/03/2023
 29156                                  	; MSDOS 3.3
 29157                                  	;push	es
 29158                                  	;push	di
 29159                                  	;push	cs
 29160                                  	;pop	es
 29161                                  	;mov	di,ARG_BUF
 29162                                  	;mov	ah,Get_Date ; 2Ah
 29163                                  	;int	21h	; DOS -	GET CURRENT DATE
 29164                                  	;		; Return: DL = day,DH = month,	CX = year
 29165                                  	;		; AL = day of the week (0=Sunday,1=Monday,etc.)
 29166                                  	;cbw
 29167                                  	;call	GETDATE
 29168                                  	;call	P_DATE
 29169                                  	;xor	al,al
 29170                                  	;stosb
 29171                                  	;mov	dx,ARG_BUF_PTR
 29172                                  	;call	STD_PRINTF
 29173                                  		; 20/03/2023 (MSDOS 3.3 COMMAND.COM - TRANGROUP:29DAh)
 29174                                  	;pop	es ; !!??!! 
 29175                                  	;pop	di
 29176                                  	;retn
 29177                                  
 29178                                  	; 20/03/2023
 29179                                  	; MSDOS 6.0
 29180 00003B09 06                      	push	es
 29181 00003B0A 57                      	push	di
 29182 00003B0B 0E                      	push	cs
 29183 00003B0C 07                      	pop	es
 29184 00003B0D E81300                  	call	GetDate 		; get date
 29185 00003B10 86F2                    	xchg	dh,dl			;AN000; switch month & day
 29186 00003B12 890E[1992]              	mov	[promptDat_yr],cx 	;AC000; put year into message control block
 29187 00003B16 8916[1B92]              	mov	[promptDat_moday],dx	;AC000; put month and day into message control block
 29188 00003B1A BA[0992]                	mov	dx,promptdat_ptr	;AC000; set up message for output
 29189 00003B1D E80819                  	call	std_printf
 29190                                  	;AD061; mov word [promptDat_yr],0 ;AC000; reset year, month and day
 29191                                  	;AD061; mov word [promptDat_moday],0 ;AC000; pointers in control block
 29192 00003B20 5F                      	pop	di			;AC000; restore di,es
 29193 00003B21 07                      	pop	es			;AC000;
 29194 00003B22 C3                      	retn
 29195                                  
 29196                                  ; ---------------------------------------------------------------------------
 29197                                  
 29198                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29199                                  
 29200                                  ;GETDATE:
 29201                                  	; 21/03/2023
 29202                                  	; MSDOS 3.3
 29203                                  	;mov	si,ax
 29204                                  	;shl	si,1
 29205                                  	;add	si,ax
 29206                                  	;add	si,WEEKTAB ; "SunMonTueWedThuFriSat"
 29207                                  	;mov	bx,cx
 29208                                  	;mov	cx,3
 29209                                  	;rep	movsb
 29210                                  	;mov	al,' '
 29211                                  	;stosb
 29212                                  	;retn
 29213                                  
 29214                                  	; 21/03/2023
 29215                                  	; MSDOS 6.0
 29216                                  
 29217                                  ; Do GET DATE system call and set up 3 character day of week in ARG_BUF
 29218                                  ; for output. Date will be returned in CX,DX.
 29219                                  
 29220                                  GetDate:
 29221 00003B23 BF[06A4]                	mov	di,Arg_Buf		;AC000; target for day of week
 29222 00003B26 B42A                    	mov	ah,Get_Date ;2Ah	;AC000; get current date
 29223 00003B28 CD21                    	int	21h			;AC000; Get date in CX:DX
 29224 00003B2A 98                      	cbw				;AC000;
 29225 00003B2B 51                      	push	cx			;AN000; save date returned in
 29226 00003B2C 52                      	push	dx			;AN000;  CX:DX
 29227 00003B2D 89C6                    	mov	si,ax
 29228 00003B2F D1E6                    	shl	si,1
 29229 00003B31 01C6                    	add	si,ax			; SI=AX*3
 29230 00003B33 89F1                    	mov	cx,si			;AN000; save si
 29231 00003B35 A1[CC90]                	mov	ax,[WeekTab]		;AN000; get message number of weektab
 29232 00003B38 B6FF                    	mov	dh,util_msg_class ;0FFh	;AN000; this is a utility message
 29233 00003B3A 57                      	push	di			;AN000; save argument buffer
 29234 00003B3B E8CD19                  	call	TSYSGETMSG		;AN000; get the address of the message
 29235 00003B3E 5F                      	pop	di			;AN000; retrieve argument buffer
 29236 00003B3F 01CE                    	add	si,cx			;AC000; get day of week
 29237 00003B41 B90300                  	mov	cx,3
 29238 00003B44 F3A4                      	rep	movsb
 29239 00003B46 B000                    	mov	al,END_OF_LINE_OUT ; 0	;AC000; terminate the string
 29240 00003B48 AA                      	stosb
 29241 00003B49 5A                      	pop	dx			;AN000; get back date
 29242 00003B4A 59                      	pop	cx			;AN000;
 29243 00003B4B C3                      	retn
 29244                                  
 29245                                  ; =============== S U B	R O U T	I N E =======================================
 29246                                  
 29247                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29248                                  
 29249                                  	; MSDOS 6.0
 29250                                  
 29251                                  ; This routine determines whether the character in AL is a
 29252                                  ; Yes or No character. On return, if AL=0, the character is
 29253                                  ; No, if AL=1, the character is Yes.
 29254                                  
 29255                                  ;	assume	ds:trangroup
 29256                                  
 29257                                  char_in_xlat:	; proc	near
 29258                                  	; 21/03/2023
 29259 00003B4C 88C2                    	mov	dl,al			;AC000; get character into DX
 29260 00003B4E 30F6                    	xor	dh,dh			;AC000;
 29261                                  	;mov	ax,(GetExtCntry<<8)+35	;AC000; Yes/No char call
 29262 00003B50 B82365                  	mov	ax,6523h
 29263 00003B53 CD21                    	int	21h			;AC000;
 29264 00003B55 C3                      	retn
 29265                                  
 29266                                  ;char_in_xlat	endp
 29267                                  
 29268                                  ;============================================================================
 29269                                  ; TENV.ASM, MSDOS 6.0, 1991
 29270                                  ;============================================================================
 29271                                  ; 02/10/2018 - Retro DOS v3.0
 29272                                  
 29273                                  ;	Environment utilities and misc. routines
 29274                                  
 29275                                  ; MSDOS 6.0
 29276                                  ; ****************************************************************
 29277                                  ; *
 29278                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 29279                                  ; *
 29280                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 29281                                  ; *		 the character in AL from the file upper case table
 29282                                  ; *		 in DOS if character if above  ascii 128, else
 29283                                  ; *		 subtracts 20H if between "a" and "z".
 29284                                  ; *
 29285                                  ; * INPUT:	 AL	      char to be upper cased
 29286                                  ; *		 FUCASE_ADDR  set to the file upper case table
 29287                                  ; *
 29288                                  ; * OUTPUT:	 AL	      upper cased character
 29289                                  ; *
 29290                                  ; ****************************************************************
 29291                                  ;
 29292                                  ;assume	ds:trangroup				;AN000;
 29293                                  ;
 29294                                  ;upconv	proc	near				;AN000;
 29295                                  ;
 29296                                  ;	cmp	al,80h				;AN000;  see if char is > ascii 128
 29297                                  ;	jb	oth_fucase			;AN000;  no - upper case math
 29298                                  ;	sub	al,80h				;AN000;  only upper 128 chars in table
 29299                                  ;	push	ds				;AN000;
 29300                                  ;	push	bx				;AN000;
 29301                                  ;	mov	ds,[resseg]			;AN000;  get resident data segment
 29302                                  ;assume	ds:resgroup				;AN000;
 29303                                  ;	lds	bx,dword ptr FUCase_Addr+1	;AN000;  get table address
 29304                                  ;	add	bx,2				;AN000;  skip over first word
 29305                                  ;	xlat	ds:byte ptr [bx]		;AN000;  convert to upper case
 29306                                  ;	pop	bx				;AN000;
 29307                                  ;	pop	ds				;AN000;
 29308                                  ;assume	ds:trangroup				;AN000;
 29309                                  ;	jmp	short upconv_end		;AN000;  we finished - exit
 29310                                  ;
 29311                                  ;oth_fucase:					;AN000;
 29312                                  ;	cmp	al,small_a			;AC000; if between "a" and "z",
 29313                                  ;	jb	upconv_end			;AC000;     subtract 20h to get
 29314                                  ;	cmp	al,small_z			;AC000;    upper case equivalent.
 29315                                  ;	ja	upconv_end			;AC000;
 29316                                  ;	sub	al,20h				;AC000; Change lower-case to upper
 29317                                  ;
 29318                                  ;upconv_end:					;AN000;
 29319                                  ;	ret
 29320                                  ;
 29321                                  ;upconv	endp					;AN000;
 29322                                  
 29323                                  ;============================================================================
 29324                                  ; COPY.ASM, MSDOS 6.0, 1991
 29325                                  ;============================================================================
 29326                                  ; 01/10/2018 - Retro DOS v3.0
 29327                                  
 29328                                  ;	title	COMMAND COPY routines.
 29329                                  
 29330                                  ;/*
 29331                                  ; *                      Microsoft Confidential
 29332                                  ; *                      Copyright (C) Microsoft Corporation 1991
 29333                                  ; *                      All Rights Reserved.
 29334                                  ; */
 29335                                  
 29336                                  ;***	COPY.ASM
 29337                                  
 29338                                  ;Source files:  copy.asm, copypr1.asm, copypr2.asm
 29339                                  
 29340                                  
 29341                                  ;***	MODIFICATION HISTORY
 29342                                  
 29343                                  ;11/01/83 EE  Added a few lines at the end of SCANSRC2 to get multiple
 29344                                  ;	     file concatenations (eg copy a.*+b.*+c.*) to work properly.
 29345                                  ;11/02/83 EE  Commented out the code in CPARSE which added drive designators
 29346                                  ;	     to tokens which begin with path characters so that PARSELINE
 29347                                  ;	     will work correctly.
 29348                                  ;11/04/83 EE  Commented out the code in CPARSE that considered paren's to be
 29349                                  ;	     individual tokens. That distinction is no longer needed for
 29350                                  ;	     FOR loop processing.
 29351                                  ;11/17/83 EE  CPARSE upper case conversion is now flag dependent. Flag is
 29352                                  ;	     1 when Cparse is called from COPY.
 29353                                  ;11/17/83 EE  Took out the comment chars around code described in 11/04/83
 29354                                  ;	     mod. It now is conditional on flag like previous mod.
 29355                                  ;11/21/83 NP  Added printf
 29356                                  ;12/09/83 EE  CPARSE changed to use CPYFLAG to determine when a colon should
 29357                                  ;	     be added to a token.
 29358                                  ;05/30/84 MZ  Initialize all copy variables. Fix confusion with destclosed
 29359                                  ;	     NOTE: DestHand is the destination handle. There are two
 29360                                  ;	     special values: -1 meaning destination was never opened and
 29361                                  ;	     0 which means that the destination has been openned and
 29362                                  ;	     closed.
 29363                                  ;06/01/84 MZ  Above reasoning totally specious. Returned things to normal
 29364                                  ;06/06/86 EG  Change to fix problem of source switches /a and /b getting
 29365                                  ;	     lost on large and multiple file (wildcard) copies.
 29366                                  ;06/09/86 EG  Change to use xnametrans call to verify that source and
 29367                                  ;	     destination are not equal.
 29368                                  ;
 29369                                  ;06/24/90 DO  If the destination of a file concatenation is the same as
 29370                                  ;	     first source file AND we run out of disk space before
 29371                                  ;	     completing the concatenation, restore the first source
 29372                                  ;	     file as best we can. See SeekEnd and CopErr. Bug #859.
 29373                                  ;
 29374                                  ;M031 SR 10/11/90  Bug #3069. Use deny write sharing mode to open files
 29375                                  ;		instead of compatibility mode. This gives lesser sharing
 29376                                  ;		violations when files are opened for read on a copy.
 29377                                  
 29378                                  ; ---------------------------------------------------------------------------
 29379                                  ;***	COPY CODE
 29380                                  ; ---------------------------------------------------------------------------
 29381                                  
 29382                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2A15h
 29383                                  
 29384                                  ; 23/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29385                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 38C3h
 29386                                  
 29387                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29388                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3E6Dh
 29389                                  
 29390                                  ; 10/08/2024 - Retro DOS v5.0 COMMAND.COM
 29391                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 3D1Eh
 29392                                  
 29393                                  COPY:
 29394                                  	; 	Initialize internal variables.
 29395                                  
 29396 00003B56 31C0                    	xor	ax,ax		; AX = 0
 29397 00003B58 A3[149E]                	mov	[Copy_num],ax	; # files copied (destinations) = 0
 29398 00003B5B A3[429F]                	mov	[SRCPT],ax	; cmd line ptr for source scan = 0
 29399 00003B5E A3[8E9E]                	mov	[SrcTail],ax	; ptr to last element of source pathname = 0
 29400 00003B61 A2[839C]                	mov	[CFLAG],al	; 'destination file created' = false
 29401 00003B64 A3[899C]                	mov	[NXTADD],ax	; ptr into TPA buffer = 0
 29402 00003B67 A3[7F9C]                	mov	[DestSwitch],ax	; destination switches = none
 29403 00003B6A A3[669F]                	mov	[STARTEL],ax	; CParse ptr to last pathname element = 0
 29404 00003B6D A3[2B9E]                	mov	[DestTail],ax	; ptr to last element of dest pathname = 0
 29405 00003B70 A2[849C]                	mov	[DestClosed],al	; 'destination file closed' = false
 29406 00003B73 A2[2A9E]                	mov	[DestSiz],al	; length of destination pathname = 0
 29407 00003B76 A2[8D9E]                	mov	[SrcSiz],al	; length of source pathname = 0
 29408 00003B79 A2[2D9E]                	mov	[DestInfo],al	; destination pathname flags = none
 29409 00003B7C A2[909E]                	mov	[SrcInfo],al	; source pathname flags = none
 29410 00003B7F A2[449F]                	mov	[INEXACT],al	; 'inexact copy' = false
 29411 00003B82 A2[299E]                	mov	[DestVars],al	; 'dest pathname is directory' = false  ;*!*
 29412 00003B85 A2[8C9E]                	mov	[SrcVars],al	; 'source pathname is directory' = false
 29413 00003B88 A2[459B]                	mov	[USERDIR1],al	; saved working directory = null
 29414 00003B8B A2[459F]                	mov	[NOWRITE],al	; 'no write' (source = dest) = false
 29415 00003B8E A2[769C]                	mov	[RDEOF],al	; 'read end of file' = false
 29416 00003B91 A3[E89E]                	mov	[SRCHAND],ax	; source handle = 0
 29417 00003B94 A3[4D9F]                	mov	[CPDATE],ax	; copy date = 0
 29418 00003B97 A3[4F9F]                	mov	[CPTIME],ax	; copy time = 0
 29419 00003B9A A2[EA9E]                	mov	[SRCISDEV],al	; 'source is device' = false
 29420                                  	; 23/03/2023
 29421                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM	
 29422 00003B9D A2[559F]                	mov	[OCtrlZ],al	; 'Ctrl+Z removed from original' = false
 29423                                  				; mov [zflag],al ; PCDOS 7.1 ; 10/08/2024
 29424 00003BA0 A3[519F]                	mov	[OFilePtr_Lo],ax
 29425 00003BA3 A3[539F]                	mov	[OFilePtr_Hi],ax ; original destination file ptr = null
 29426 00003BA6 A2[499F]                	mov	[TERMREAD],al	; 'terminate read' = false
 29427 00003BA9 A2[079E]                	mov	[comma],al	; '"+,," found' = false
 29428 00003BAC A2[089E]                	mov	[plus_comma],al ; '"+,," found last time' = false (?)
 29429 00003BAF A2[A39F]                	mov	[msg_flag],al	;AN022; 'non-utility msg issued' = false
 29430 00003BB2 A3[819C]                	mov	[AllSwitch],ax	; all switches = none
 29431 00003BB5 A2[7A9C]                	mov	[ArgC],al	; source/dest argument count = 0
 29432 00003BB8 A2[4B9F]                	mov	[PLUS],al	; '"+" in command line' = false
 29433 00003BBB A2[469F]                	mov	[BINARY],al	; 'binary copy' = false
 29434 00003BBE A2[4A9F]                	mov	[ASCII],al	; 'ascii copy' = false
 29435 00003BC1 A3[929C]                	mov	[FileCnt],ax	; # files copied (destinations) = 0
 29436 00003BC4 A3[479F]                	mov	[WRITTEN],ax	; 'destination written to' = false
 29437 00003BC7 A2[789C]                	mov	[Concat],al	; 'concatenating' = false
 29438 00003BCA A2[899E]                	mov	[MELCOPY],al	; 'Mel Hallerman copy' = false
 29439 00003BCD A3[8A9E]                	mov	[MELSTART],ax	; Mel Hallerman cmd line ptr = 0
 29440                                  	
 29441                                  	; 12/06/2023
 29442                                  	; MSDOS 6.22 COMMAND.COM
 29443                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 29444 00003BD0 A2[629F]                	mov     [cox_dest_file], al ; MSDOS 6.22
 29445 00003BD3 A2[639F]                	mov     [cox_src_file], al  ; MSDOS 6.22
 29446                                  
 29447                                  	;	Initialize buffers with double-nulls.
 29448                                  
 29449 00003BD6 A3[EB9E]                	mov	[ScanBuf],ax
 29450 00003BD9 A3[2E9E]                	mov	[DestBuf],ax
 29451 00003BDC A3[919E]                	mov	[SrcBuf],ax
 29452 00003BDF A3[F19D]                	mov	[SDIRBUF],ax
 29453 00003BE2 A3[AB9D]                	mov	[DIRBUF],ax
 29454 00003BE5 A3[689D]                	mov	[DestFcb],ax
 29455                                  
 29456 00003BE8 A2[4C9F]                	mov	[objcnt],al	; # CParse cmd-line objects found = 0
 29457                                  		
 29458 00003BEB 48                      	dec	ax ; -1		; AX = 0FFFFh
 29459 00003BEC A3[859E]                	mov	[DESTHAND],ax	; destination handle = 'never opened'
 29460 00003BEF A2[8B9C]                	mov	[FRSTSRCH],al	; 'first search for source' = true
 29461 00003BF2 A2[889E]                	mov	[FIRSTDEST],al	; 'first time for dest' = true
 29462 00003BF5 A2[299E]                	mov	[DestIsDir],al	; 'haven't analyzed destination' ; *!*
 29463                                  
 29464                                  	; 12/06/2023
 29465                                  	; Retro DOS v4.2 COMMAND.COM
 29466                                  	; MSDOS 6.22 COMMAND.COM code only !
 29467                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 29468                                  	;
 29469 00003BF8 E8FB06                  	call	init_copycmd_option ; MSDOS 6.22 
 29470                                  		
 29471 00003BFB BE8100                  	mov	si,81h		; SI = ptr to command line
 29472                                  	;mov	bl,[PLUS_CHR]	; BL = special delimiter = "+"
 29473                                  	; 23/03/2023
 29474 00003BFE B32B                    	mov	bl,'+'
 29475 00003C00 FE06[A29F]              	inc	byte [expand_star] ; CParse 'expand * to ?s' = true
 29476 00003C04 C606[169E]01            	mov	byte [cpyflag],1 ; CParse 'called from COPY' = true
 29477                                  
 29478                                  	;*	Scan the command line for destination information.
 29479                                  
 29480                                  DESTSCAN:
 29481 00003C09 31ED                    	xor	bp,bp			; BP = switch flag accumulator
 29482 00003C0B BF[EB9E]                	mov	di,ScanBuf		; ES:DI = ptr to pathname buf
 29483                                  	; 23/03/2023
 29484 00003C0E 8936[0A9E]              	mov	[parse_last],si		;AN018; save cmd line ptr
 29485 00003C12 E8920B                  	call	cparse			; parse next object
 29486 00003C15 9C                      	pushf	; (*)			; save CParse flags
 29487 00003C16 FE06[4C9F]              	inc	byte [objcnt]		; count object
 29488 00003C1A F6C780                  	test	bh,80h
 29489 00003C1D 7405                    	jz	short NOCOPY		; no "+" delimiter
 29490 00003C1F C606[4B9F]01            	mov	byte [PLUS],1		; "+" delimiter occurred
 29491                                  NOCOPY:
 29492 00003C24 F6C701                  	test	bh,1
 29493 00003C27 747D                    	jz	short TESTP2		; not a switch
 29494                                  
 29495                                  	;	Found a switch.
 29496                                  
 29497                                  	; 23/03/2023 - Retro DOS v4.0 COMMAND.COM
 29498                                  	;
 29499                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29500                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F43h
 29501                                  CHK_CP_SWITCH:
 29502                                  	; MSDOS 6.0
 29503 00003C29 F7C51000                	test	bp,10h
 29504                                  	;test	bp,SwitchV ; 10h	;AN038; Verify requested?
 29505 00003C2D 740B                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 29506                                  	;test	word [AllSwitch],10h
 29507 00003C2F F606[819C]10            	test	byte [AllSwitch],10h
 29508                                  	;test	byte [AllSwitch],SwitchV ;AN038; Verify already entered?
 29509 00003C34 7404                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 29510                                  ;AD018; ;or	word [AllSwitch],FBadSwitch ;AN038; Set up bad switch
 29511                                  	;or	bp,FBadSwitch		;AN018; Set up bad switch
 29512 00003C36 81CD0040                	or	bp,4000h
 29513                                  NOT_SLASHV:
 29514                                  	; ****************************************
 29515                                  	; 12/06/2023
 29516                                  	; Retro DOS v4.2 COMMAND.COM
 29517                                  	; MSDOS 6.22 COMMAND.COM code only !
 29518                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 29519                                  	; ****************************************
 29520                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:3F55h
 29521                                  	;
 29522 00003C3A F7C54000                	test    bp,40h			; negative Y (-Y) switch flag
 29523 00003C3E 7417                    	jz	short CHK_SLASHY0
 29524                                  	;
 29525                                  	;test	word [AllSwitch],40h
 29526 00003C40 F606[819C]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 29527 00003C45 7507                    	jnz	short NOT_SLASHY1	; N flag
 29528                                  	;test	word [AllSwitch],80h
 29529 00003C47 F606[819C]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 29530 00003C4C 7404                    	jz	short NOT_SLASHY2
 29531                                  NOT_SLASHY1:
 29532 00003C4E 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 29533                                  NOT_SLASHY2:				; Set up bad switch
 29534 00003C52 C606[619F]00            	mov	byte [cox_y_override],0	; cox_y setting will be used
 29535                                  CHK_SLASHY0:
 29536 00003C57 F7C58000                	test    bp,80h
 29537 00003C5B 742B                    	jz      short CHK_SLASHY4	; not a /Y switch
 29538                                  	;
 29539 00003C5D 8A04                    	mov	al,[si]
 29540 00003C5F 3C79                    	cmp	al,'y'
 29541 00003C61 740A                    	je	short CHK_SLASHY1
 29542 00003C63 3C59                    	cmp	al,'Y'
 29543 00003C65 7406                    	je	short CHK_SLASHY1
 29544 00003C67 81CD0040                	or	bp,4000h		; FBadSwitch
 29545                                  	;				; Set up bad switch
 29546 00003C6B EB1B                    	jmp	short CHK_SLASHY4
 29547                                  CHK_SLASHY1:
 29548 00003C6D C60420                  	mov	byte [si],20h ; ' '
 29549 00003C70 46                      	inc	si
 29550                                  	;test	word [AllSwitch],40h
 29551 00003C71 F606[819C]40            	test	byte [AllSwitch],40h	; [AllSwitch] negative (-Y) flag
 29552 00003C76 7507                    	jnz	short CHK_SLASHY2	; N flag
 29553                                  	;test	word [AllSwitch],80h
 29554 00003C78 F606[819C]80            	test	byte [AllSwitch],80h	; [AllSwitch] SwitchY (Y) flag
 29555 00003C7D 7404                    	jz	short CHK_SLASHY3
 29556                                  CHK_SLASHY2:
 29557 00003C7F 81CD0040                	or	bp,4000h		; FBadSwitch (Repetitive)
 29558                                  	;				; Set up bad switch
 29559                                  CHK_SLASHY3:
 29560 00003C83 C606[619F]01            	mov	byte [cox_y_override],1
 29561                                  CHK_SLASHY4:
 29562                                  	; ****************************************
 29563                                  	; 12/06/2023
 29564                                  ;NOT_SLASHV:
 29565                                  	;or	[DestSwitch],bp		; assume destination
 29566                                  	;or	[AllSwitch],bp		; keep tabs on all switches
 29567                                  
 29568                                  	; 12/06/2023
 29569                                  	; Retro DOS v4.2 COMMAND.COM
 29570                                  	; MSDOS 6.22 COMMAND.COM -TRANGROUP:3FA7h
 29571 00003C88 092E[7F9C]              	or	[DestSwitch],bp		; set [DestSwitch] SwitchY flag to 1
 29572 00003C8C 092E[819C]              	or	[AllSwitch],bp		; set [AllSwitch] SwitchY flag to 1
 29573                                  	;test	bp,~SwitchCopy		; Bad switch?
 29574 00003C90 F7C5237F                	test	bp,7F23h ; MSDOS 6.22	; ~SwitchCopy ; not SwitchCopy
 29575 00003C94 740A                    	jz	short NOT_BAD_SWITCH	; Switches are okay
 29576                                  
 29577                                  	; 12/06/2023
 29578                                  	; 23/03/2023
 29579                                  	; MSDOS 6.0
 29580                                  	;;test	bp,not SwitchCopy	;AN018; Bad switch?
 29581                                  	;test	bp,7FE3h ; test bp,~SwitchCopy
 29582                                  	;jz	short NOT_BAD_SWITCH	;AN018; Switches are okay
 29583                                  	
 29584 00003C96 9D                      	popf	; (*)			;AN018; fix up stack
 29585 00003C97 B80300                  	mov	ax,BadSwt_Ptr ; 3	;AN018; get "Invalid switch" message number
 29586 00003C9A E8CBE8                  	call	setup_parse_error_msg	;AN018; setup to print the message
 29587 00003C9D E984F0                  	jmp	cerror			;AC018; exit
 29588                                  NOT_BAD_SWITCH:
 29589 00003CA0 9D                      	popf				; restore CParse flags
 29590 00003CA1 7233                    	jc	short CHECKDONE		; found CR
 29591 00003CA3 E963FF                  	jmp	DESTSCAN		; continue scanning for destination
 29592                                  TESTP2:
 29593 00003CA6 9D                      	popf	; (*)			; restore CParse flags
 29594 00003CA7 722D                    	jc	short CHECKDONE		; found CR
 29595 00003CA9 F6C780                  	test	bh,80h
 29596 00003CAC 7504                    	jnz	short GOTPLUS		; found a "+pathname" argument
 29597 00003CAE FE06[7A9C]              	inc	byte [ArgC]		; count independent pathname args
 29598                                  GOTPLUS:
 29599 00003CB2 56                      	push	si			; save cmd line ptr
 29600 00003CB3 A1[669F]                	mov	ax,[STARTEL]		; AX = ptr to last path element
 29601 00003CB6 BE[EB9E]                	mov	si,ScanBuf		; SI = ptr to path string
 29602 00003CB9 29F0                    	sub	ax,si			; AX = offset of last element
 29603 00003CBB BF[2E9E]                	mov	di,DestBuf		; DI = ptr to destination buf
 29604 00003CBE 01F8                    	add	ax,di			; AX = ptr to last element in
 29605                                  					;  destination path buffer
 29606 00003CC0 A3[2B9E]                	mov	[DestTail],ax		; save ptr to last element
 29607 00003CC3 880E[2A9E]              	mov	[DestSiz],cl		; save path string length
 29608 00003CC7 41                      	inc	cx			; CX = mov length (incl null)
 29609 00003CC8 F3A4                    	rep	movsb			; DestBuf = possible destination path
 29610 00003CCA 883E[2D9E]              	mov	[DestInfo],bh		; save CParse info flags
 29611                                  	;mov	word [DestSwitch],0	; clear destination switches
 29612                                  	; 10/08/2024
 29613 00003CCE 890E[7F9C]              	mov	[DestSwitch],cx ; 0
 29614 00003CD2 5E                      	pop	si			; SI = ptr into cmd line again
 29615 00003CD3 E933FF                  	jmp	DESTSCAN		;AC018; continue scanning for dest
 29616                                  
 29617                                  CHECKDONE:
 29618                                  	;	We reached the CR. The destination scan is finished.
 29619                                  
 29620                                  	;	Disallow "copy file1+" as file overwriting itself.
 29621                                  	;
 29622                                  	;	(Note that "copy file1+file2+" will be accepted, and
 29623                                  	;	equivalent to "copy file1+file2".)
 29624                                  
 29625                                  	;	Bugbug: it looks like "copy /x file1+" would slip
 29626                                  	;	through this check, since the switch would count
 29627                                  	;	as another object in ObjCnt.
 29628                                  
 29629 00003CD6 803E[4B9F]01            	cmp	byte [PLUS],1		; "+" with
 29630 00003CDB 7514                    	jnz	short CDCONT
 29631 00003CDD 803E[7A9C]01            	cmp	byte [ArgC],1		; one arg,
 29632 00003CE2 750D                    	jnz	short CDCONT
 29633 00003CE4 803E[4C9F]02            	cmp	byte [objcnt],2		; two objects..
 29634 00003CE9 7506                    	jnz	short CDCONT
 29635 00003CEB BA[0690]                	mov	dx,OVERWR_PTR
 29636 00003CEE E9D207                  	jmp	COPYERR			; is file overwrite
 29637                                  
 29638                                  CDCONT:
 29639 00003CF1 A0[4B9F]                	mov	al,[PLUS]		; AL = '"+" occurred'
 29640 00003CF4 A2[789C]                	mov	[Concat],al		; if "+" occurred, we're concatenating
 29641 00003CF7 D0E0                    	shl	al,1
 29642 00003CF9 D0E0                    	shl	al,1
 29643 00003CFB A2[449F]                	mov	[INEXACT],al		; therefore making an inexact copy
 29644                                  	;mov	dx,BADARGSPTR ; MSDOS 3.3 ; 18/04/2023
 29645 00003CFE A0[7A9C]                	mov	al,[ArgC]		; AL = # independent arguments
 29646                                  
 29647                                  	; 23/03/2023
 29648                                  	; MSDOS 3.3		
 29649                                  	;or	al,al
 29650                                  	;jz	short CERROR4J
 29651                                  	; MSDOS 6.0
 29652 00003D01 08C0                    	or	al,al
 29653 00003D03 750B                    	jnz	short TRY_TOO_MANY	; more than 0 args; check if too many
 29654                                  		
 29655 00003D05 BA[DA8F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 29656 00003D08 C706[DA8F]0200          	mov	word [extend_buf_ptr],LessArgs_Ptr ; 2
 29657                                  	;mov	word [extend_buf_ptr],2	; set msg # "param missing"
 29658 00003D0E EB0D                    	jmp	short CERROR_PARSEJ	; take parse error exit		
 29659                                  
 29660                                  	; more than 0 args; check if too many
 29661                                  TRY_TOO_MANY:
 29662 00003D10 3C02                    	cmp	al,2
 29663 00003D12 7611                    	jbe	short ACOUNTOK		; <= 2 arguments - ok
 29664                                  
 29665                                  	; 23/03/2023
 29666                                  	; MSDOS 6.0
 29667 00003D14 BA[DA8F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 29668 00003D17 C706[DA8F]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 29669                                  	;mov	word [extend_buf_ptr],1 ; set msg # "too many params"
 29670                                  CERROR_PARSEJ:
 29671 00003D1D C606[D88F]02            	mov	byte [msg_disp_class],parse_msg_class ; 2
 29672                                  					; parse error message	
 29673                                  CERROR4J:
 29674 00003D22 E9FFEF                  	jmp	cerror
 29675                                  
 29676                                  ACOUNTOK:
 29677 00003D25 BD[299E]                	mov	bp,DestVars		; BP = base of dest variables
 29678                                  
 29679 00003D28 3C01                    	cmp	al,1
 29680 00003D2A 7520                    	jnz	short GOT2ARGS
 29681                                  
 29682                                  	;	Only one independent pathname argument on command line.
 29683                                  	;	Set destination to d:*.*, where d: is current drive.
 29684                                  
 29685                                  	;	Bugbug: but is this appropriate for "copy x:file1+x:file2"?
 29686                                  	;	The two files would be appended as d:file1, rather than x:file1.
 29687                                  
 29688 00003D2C A0[779C]                	mov	al,[CURDRV]		; AL = current drive (0 = A)
 29689                                  	;add	al,[CAPITAL_A]		; AL = current drive letter
 29690                                  	; 23/03/2023
 29691 00003D2F 0441                    	add	al,'A'
 29692 00003D31 B43A                    	mov	ah,':'			; AX = "d:"
 29693                                  	;mov	byte [bp+1],2
 29694 00003D33 C6460102                	mov	byte [bp+VARSTRUC.SIZ],2 ; pathname length = 2
 29695                                  
 29696 00003D37 BF[2E9E]                	mov	di,DestBuf		; ES:DI = ptr to dest path buf
 29697 00003D3A AB                      	stosw				; store "d:"
 29698                                  		
 29699 00003D3B C706[7F9C]0000          	mov	word [DestSwitch],0	; clear destination switches
 29700                                  	;mov	byte [bp+4],2		
 29701 00003D41 C6460402                	mov	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 29702                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 29703                                  	;mov	byte [bp+0],0		
 29704 00003D45 C6460000                	mov	byte [bp],0
 29705 00003D49 E82C0A                  	call	SETSTARS		; add wildcards
 29706                                  GOT2ARGS:
 29707                                  	;	If destination pathname is "d:", add full wildcard filename
 29708                                  
 29709                                  	;cmp	byte [bp+1],2
 29710 00003D4C 807E0102                	cmp	byte [bp+VARSTRUC.SIZ],2
 29711 00003D50 7516                    	jnz	short NOTSHORTDEST	; not two chars, can't be "d:"
 29712 00003D52 B03A                    	mov	al,':'  ; 3Ah
 29713 00003D54 3806[2F9E]              	cmp	byte [DestBuf+1],al
 29714 00003D58 750E                    	jnz	short NOTSHORTDEST	; it's just a 2-character filename
 29715                                  	;or	byte [bp+4],2
 29716 00003D5A 804E0402                	or	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 29717 00003D5E BF[309E]                	mov	di,DestBuf+2		; ES:DI = ptr after "d:"
 29718                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 29719                                  	;mov	byte [bp+0],0		
 29720 00003D61 C6460000                	mov	byte [bp],0
 29721 00003D65 E8100A                  	call	SETSTARS		; add wildcards
 29722                                  NOTSHORTDEST:
 29723                                  	;	If destination pathname ends with "\", try to make
 29724                                  	;	sure it's "d:\".
 29725                                  
 29726                                  	;mov	di,[bp+2]
 29727 00003D68 8B7E02                  	mov	di,[bp+VARSTRUC.TTAIL]	; DI = ptr to last path element
 29728 00003D6B 803D00                  	cmp	byte [di],0
 29729 00003D6E 7515                    	jnz	short CHKSWTCHES	; not a null, so last char not "\"
 29730                                  
 29731 00003D70 BA[3A91]                	mov	dx,badcd_ptr
 29732 00003D73 B03A                    	mov	al,':'
 29733 00003D75 3845FE                  	cmp	[di-2],al
 29734 00003D78 75A8                    	jne	short CERROR4J		; it's not "d:\", exit with error msg
 29735                                  	;mov	byte [bp+0],2
 29736                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; destination 'is a directory'
 29737 00003D7A C6460002                	mov	byte [bp],2
 29738                                  	;or	byte [bp+4],6
 29739 00003D7E 804E0406                	or	byte [bp+VARSTRUC.INFO],6 ; destination wildcarded and contains
 29740                                  					  ;  path character
 29741 00003D82 E8F309                  	call	SETSTARS		; add wildcards
 29742                                  CHKSWTCHES:
 29743                                  	;	We have enough information about the destination for now.
 29744                                  
 29745                                  	;	Turn on verify if requested. Save the current verify flag.
 29746                                  
 29747                                  	; 23/03/2023
 29748                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM
 29749                                  	;mov	dx,BADPARMPTR
 29750                                  	
 29751 00003D85 A1[819C]                	mov	ax,[AllSwitch]		; AX = all switch flags
 29752                                  
 29753                                  	; 23/03/2023
 29754                                  	; MSDOS 3.3
 29755                                  	;;test	ax,~SWITCHCOPY ; 7FE3h
 29756                                  	;test	ax,NOT_SWITCHCOPY ; 7FE3h ; 13/10/2018
 29757                                  	;jnz	short CERROR4J
 29758                                  	
 29759                                  	; 23/03/2023
 29760                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29761                                  	;test	ax,SwitchV ; 10h
 29762                                  	; 18/04/2023
 29763                                  	;test	ax,10h
 29764 00003D88 A810                    	test	al,10h  ; test al,SwitchV
 29765 00003D8A 7414                    	jz	short NOVERIF		; no /v, no verify
 29766                                  
 29767 00003D8C B454                    	mov	ah,Get_Verify_On_Write ; 54h
 29768 00003D8E CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 29769                                  				; Return: AL = 00h if flag OFF
 29770                                  				; AL = 01h if flag ON
 29771 00003D90 1E                      	push	ds
 29772 00003D91 8E1E[639C]              	mov	ds,[RESSEG]
 29773 00003D95 30E4                    	xor	ah,ah
 29774 00003D97 A3[A702]                	mov	[VerVal],ax		; save current verify flag
 29775 00003D9A 1F                      	pop	ds
 29776 00003D9B B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 29777 00003D9E CD21                    	int	21h		; DOS -	SET VERIFY FLAG
 29778                                  				; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 29779                                  NOVERIF:
 29780                                  	;*	Scan for first source.
 29781                                  
 29782 00003DA0 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 29783 00003DA2 BE8100                  	mov	si,81h			; SI = ptr into command line
 29784                                  	;mov	bl,[PLUS_CHR]		; BL = special CParse delimiter = "+"
 29785                                  	; 23/03/2023
 29786 00003DA5 B32B                    	mov	bl,'+' ; 2Bh
 29787                                  SCANFSRC:
 29788 00003DA7 BF[EB9E]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 29789 00003DAA E8FA09                  	call	cparse			; parse first source pathname
 29790 00003DAD F6C701                  	test	bh,1			; switch?
 29791 00003DB0 75F5                    	jnz	short SCANFSRC		; yes, try again
 29792 00003DB2 092E[7F9C]              	or	[DestSwitch],bp		; include copy-wide switches on dest
 29793                                  
 29794                                  ;	Set ascii copying mode if concatenating, unless /b is specified.
 29795                                  
 29796                                  	; 23/03/2023
 29797 00003DB6 F7C50800                	test	bp,8
 29798                                  	;test	bp,SWITCHB
 29799 00003DBA 750C                    	jnz	short NOSETCASC		; /b - explicit binary copy
 29800 00003DBC 803E[789C]00            	cmp	byte [Concat],0
 29801 00003DC1 7405                    	jz	short NOSETCASC		; we're not concatenating
 29802 00003DC3 C606[4A9F]04            	mov	byte [ASCII],4
 29803                                  	;mov	byte [ASCII],SWITCHA	; set ascii copy
 29804                                  NOSETCASC:
 29805 00003DC8 E83004                  	call	SOURCE_SET		; set source variables
 29806 00003DCB E84400                  	call	FRSTSRC			; set up first source copy
 29807 00003DCE E99800                  	jmp	FIRSTENT		; jump into the copy loop
 29808                                  
 29809                                  ; ---------------------------------------------------------------------------
 29810                                  
 29811                                  	; 24/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29812                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3AE9h
 29813                                  ENDCOPY:
 29814                                  	;*	End of the road. Close destination, display # files
 29815                                  	;	copied (meaning # destinations), and go back to main
 29816                                  	;	transient COMMAND code.
 29817                                  
 29818 00003DD1 E83503                  	call	CLOSEDEST
 29819                                  ENDCOPY2:
 29820 00003DD4 BA[0F90]                	mov	dx,copied_ptr
 29821 00003DD7 8B36[929C]              	mov	si,[FileCnt]
 29822 00003DDB 8936[149E]              	mov	[Copy_num],si
 29823 00003DDF E84616                  	call	std_printf
 29824 00003DE2 E91FC3                  	jmp	TCOMMAND		; stack could be messed up
 29825                                  
 29826                                  ; ---------------------------------------------------------------------------
 29827                                  
 29828                                  SRCNONEXIST:
 29829                                  	;*	Source doesn't exist. If concatenating, ignore and continue.
 29830                                  	;	Otherwise, say 'file not found' and quit.
 29831                                  
 29832 00003DE5 803E[789C]00            	cmp	byte [Concat],0
 29833 00003DEA 7546                    	jne	short NEXTSRC		; concatenating - go on to next source
 29834                                  
 29835                                  	; 24/03/2023
 29836                                  	; MSDOS 3.3
 29837                                  	;mov	dx,SRCBUF
 29838                                  	;mov	[STRING_PTR_1],dx
 29839                                  	;mov	dx,STRINGBUF1PTR
 29840                                  	;call	STD_PRINTF
 29841                                  	;mov	dx,FNOTFOUNDPTR
 29842                                  	;jmp	COPYERR
 29843                                  
 29844                                  	; 24/*03/2023
 29845                                  	; MSDOS 6.0
 29846                                  	;	Set up error message.
 29847 00003DEC C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 29848                                  				  	; extended error msg
 29849 00003DF1 BA[DA8F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 29850 00003DF4 C706[DA8F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 29851                                  					; 'file not found' msg#
 29852 00003DFA C706[129E][919E]        	mov	word [string_ptr_2],SrcBuf
 29853                                  					; point at bad pathname
 29854 00003E00 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst ; 1
 29855                                  					; 1 substitution
 29856 00003E05 E9BB06                  	jmp	COPYERR			; print msg and clean up
 29857                                  
 29858                                  ; ---------------------------------------------------------------------------
 29859                                  
 29860                                  SOURCEPROC:
 29861                                  
 29862                                  	;*	Preparatory processing for each source file.
 29863                                  	;	Called at FrstSrc for first source file.
 29864                                  
 29865 00003E08 E8F003                  	call	SOURCE_SET		; set source variables & ascii/binary
 29866 00003E0B 803E[789C]00            	cmp	byte [Concat],0
 29867 00003E10 750B                    	jne	short LEAVECFLAG	; concatenating - leave CFlag alone
 29868                                  
 29869                                  ; ---------------------------------------------------------------------------
 29870                                  
 29871                                  FRSTSRC:
 29872 00003E12 31C0                    	xor	ax,ax
 29873 00003E14 A2[839C]                	mov	[CFLAG],al		; 'destination not created'
 29874 00003E17 A3[899C]                	mov	[NXTADD],ax		; copy buffer ptr = 0
 29875 00003E1A A2[849C]                	mov	[DestClosed],al		; 'destination not closed'
 29876                                  
 29877                                  LEAVECFLAG:
 29878 00003E1D 8936[429F]              	mov	[SRCPT],si		; save cmd-line ptr
 29879 00003E21 BF[459B]                	mov	di,USERDIR1		; DI = ptr to buf for user's 
 29880                                  						;   current dir
 29881 00003E24 BD[8C9E]                	mov	bp,SrcVars		; BP = base of source variables
 29882                                  
 29883                                  ; 10/08/2024 - PCDOS 7.1 COMMAND.COM
 29884                                  %if 1
 29885                                  	;mov	bx,deny_none|read_open_mode
 29886 00003E27 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 29887                                  %endif
 29888 00003E2A E8FE07                  	call	BUILDPATH		; cd to source dir, figure
 29889                                  						;   out stuff about source
 29890 00003E2D 8B36[8E9E]              	mov	si,[SrcTail]		; SI = ptr to source filename
 29891 00003E31 C3                      	retn
 29892                                  
 29893                                  ; ---------------------------------------------------------------------------
 29894                                  
 29895                                  	; 25/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29896                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 29897                                  NEXTSRC:
 29898                                  	;*	Next source. Come here after handling each pathname.
 29899                                  	;	We're done unless there are additional source pathnames
 29900                                  	;	to be appended.
 29901                                  	;
 29902                                  	;	Note that all files matching an ambiguous pathname
 29903                                  	;	are processed before coming here.
 29904                                  
 29905 00003E32 803E[4B9F]00            	cmp	byte [PLUS],0
 29906                                  	;jne	short MORECP		; copying "+" sources - keep going
 29907                                  	; 26/04/2023
 29908                                  ;ENDCOPYJ2:
 29909                                  	;jmp	short ENDCOPY
 29910 00003E37 7498                    	je	short ENDCOPY
 29911                                  MORECP:
 29912 00003E39 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 29913 00003E3B 8B36[429F]              	mov	si,[SRCPT]		; SI = ptr to current pos'n in cmd line
 29914                                  	;mov	bl,[PLUS_CHR]		; BL = special delimiter = "+"
 29915 00003E3F B32B                    	mov	bl,'+' ; 2Bh
 29916                                  SCANSRC:
 29917 00003E41 BF[EB9E]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 29918 00003E44 E86009                  	call	cparse			; parse first source name
 29919                                  	;jb	short ENDCOPYJ2		; CR found - we're done
 29920                                  	; 26/04/2023
 29921 00003E47 7288                    	jb	short ENDCOPY
 29922                                  
 29923 00003E49 F6C780                  	test	bh,80h
 29924                                  	;jz	short ENDCOPYJ2		; no "+" delimiter - we're done
 29925                                  	; 26/04/2023
 29926 00003E4C 7483                    	jz	short ENDCOPY
 29927                                  
 29928 00003E4E F6C701                  	test	bh,1
 29929 00003E51 75EE                    	jnz	short SCANSRC		; switch found - keep looking
 29930                                  
 29931                                  	;	ScanBuf contains the next source pathname.
 29932                                  
 29933 00003E53 E8B2FF                  	call	SOURCEPROC		; prepare this source
 29934 00003E56 803E[079E]01            	cmp	byte [comma],1		; was +,, found last time?
 29935 00003E5B 7507                    	jnz	short NOSTAMP		;  no - try for a file
 29936 00003E5D C606[089E]01            	mov	byte [plus_comma],1	; yes - set flag
 29937 00003E62 EB81                    	jmp	short SRCNONEXIST	; we know we won't find it
 29938                                  
 29939                                  NOSTAMP:
 29940 00003E64 C606[089E]00            	mov	byte [plus_comma],0	; reset +,, flag
 29941                                  
 29942                                  ; ---------------------------------------------------------------------------
 29943                                  
 29944                                  FIRSTENT:
 29945                                  
 29946                                  ;M047
 29947                                  ; The only case we need to worry about is when the source is wildcarded and
 29948                                  ;the destination is not. For this case, ConCat is not yet set to indicate
 29949                                  ;concatenation. We check for this case.
 29950                                  ;
 29951                                  ;NB: This change has been backed out and replaced by M048. This is not the
 29952                                  ;right place to do this check.
 29953                                  
 29954                                  	;	This is where we enter the loop with the first source.
 29955                                  
 29956 00003E69 BF5C00                  	mov	di,FCB ; 5Ch		; DI = ptr to FCB
 29957 00003E6C B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 29958 00003E6F CD21                    	int	21h		; DOS -	PARSE FILENAME
 29959                                  				; DS:SI	-> string to parse
 29960                                  				; ES:DI	-> buffer to fill with unopened	FCB
 29961                                  				; AL = bit mask	to control parsing
 29962 00003E71 803C00                  	cmp	byte [si],0		; did we parse the whole thing?
 29963 00003E74 7516                    	jne	short SRCHDONE		; no, error, simulate 'not found'
 29964 00003E76 A1[919E]                	mov	ax,[SrcBuf]		; AX = possible "d:"
 29965 00003E79 80FC3A                  	cmp	ah,':'
 29966 00003E7C 7402                    	je	short DRVSPEC1		; AX = definite "d:"
 29967 00003E7E B040                    	mov	al,'@'	; 40h		; AL = drive 'letter' for current drive
 29968                                  DRVSPEC1:
 29969 00003E80 0C20                    	or	al,20h			; AL = lowercase drive letter
 29970 00003E82 2C60                    	sub	al,60h			; AL = drive id (0=current,1=A,..)
 29971                                  	;mov	[5Ch],al
 29972 00003E84 A25C00                  	mov	[FCB],al		; put drive id in FCB
 29973                                  
 29974                                  	;	FCB contains drive and filename to search.
 29975                                  		
 29976 00003E87 B411                    	mov	ah,Dir_Search_First ; 11h  ; AH = 'Find First File'
 29977 00003E89 E86D01                  	call	SEARCH
 29978                                  SRCHDONE:
 29979 00003E8C 9C                      	pushf				; save flags from Search
 29980 00003E8D E891E9                  	call	RestUDir1		; restore users current directory
 29981 00003E90 9D                      	popf				; restore flags from search
 29982 00003E91 7403                    	jz	short NEXTAMBIG0	; found the source - continue
 29983 00003E93 E94FFF                  	jmp	SRCNONEXIST		; didn't find the source
 29984                                  
 29985                                  NEXTAMBIG0:
 29986 00003E96 30C0                    	xor	al,al
 29987 00003E98 8606[8B9C]              	xchg	al,[FRSTSRCH]
 29988 00003E9C 08C0                    	or	al,al
 29989 00003E9E 740B                    	jz	short NEXTAMBIG
 29990                                  SETNMEL:
 29991 00003EA0 B90C00                  	mov	cx,12
 29992 00003EA3 BF[F19D]                	mov	di,SDIRBUF
 29993 00003EA6 BE[AB9D]                	mov	si,DIRBUF
 29994 00003EA9 F3A4                    	rep	movsb			; save very first source name
 29995                                  NEXTAMBIG:
 29996 00003EAB 30C0                    	xor	al,al
 29997 00003EAD A2[459F]                	mov	[NOWRITE],al		; turn off nowrite
 29998 00003EB0 8B3E[8E9E]              	mov	di,[SrcTail]
 29999 00003EB4 BE[AC9D]                	mov	si,DIRBUF+1
 30000 00003EB7 E8E9EA                  	call	FCB_TO_ASCZ		; SrcBuf has complete name
 30001                                  ;MELDO:
 30002                                  	; ****************************************
 30003                                  	; 12/06/2023
 30004                                  	; Retro DOS v4.2 COMMAND.COM
 30005                                  	; MSDOS 6.22 COMMAND.COM code only !
 30006                                  	; (Disassembled source code by using Hex-Rays IDA disassembler)
 30007                                  	; ****************************************
 30008                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:41DBh
 30009                                  MELDO0:
 30010 00003EBA 803E[619F]00            	cmp	byte [cox_y_override],0 ; /Y switch override (question) enabled ?
 30011 00003EBF 746C                    	jz	short MELDO ; no
 30012                                  	; ----------------------
 30013                                  	; yes
 30014 00003EC1 E87506                  	call	BUILDDEST
 30015 00003EC4 BE[919E]                	mov	si,SrcBuf
 30016 00003EC7 BF[9199]                	mov	di,SRCXNAME
 30017                                  	;mov	ah,60h
 30018 00003ECA B460                    	mov	ah,xNameTrans ; 60h
 30019 00003ECC CD21                    	int	21h	; DOS - RESOLVE PATH STRING TO CANONICAL PATH STRING
 30020                                  			; DS:SI -> ASCIZ relative path string or directory name
 30021                                  			; ES:DI -> 128-byte buffer for ASCIZ canonical fully qualified name
 30022 00003ECE E8C308                  	call	COMPNAME
 30023 00003ED1 7540                    	jnz	short MELDO1    	; different file names
 30024 00003ED3 803E[789C]00            	cmp	byte [Concat],0
 30025 00003ED8 7539                    	jnz	short MELDO1		; concatenating
 30026                                  	; "File cannot be copied onto itself"
 30027 00003EDA BA[AA91]                	mov	dx,file_name_ptr
 30028 00003EDD E84815                  	call	std_printf
 30029 00003EE0 E894EA                  	call	CRLF2
 30030 00003EE3 BA[0690]                	mov	dx,OVERWR_PTR
 30031 00003EE6 E9DA05                  	jmp	COPYERR
 30032                                  ;MELDO1:
 30033                                  	;cmp	byte [CFLAG],0		; destination file created flag
 30034                                  	;jnz	short MELDO		; yes, new (created) file
 30035                                  	;				; no, overwrite question (must be confirmed)
 30036                                  	;call	get_answer_YNA
 30037                                  	;jb	short MELDO2    	; answer is no
 30038                                  	;cmp	byte [Concat],0
 30039                                  	;jnz	short MELDO
 30040                                  	;cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 30041                                  	;jnz	short DOREAD    	; yes
 30042                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 30043                                  MELDO2:
 30044 00003EE9 803E[899E]00            	cmp	byte [MELCOPY],0	; is 'Mel Hallerman copy' false ?
 30045 00003EEE 7507                    	jnz	short MELDO3    	; no (, it is true)
 30046 00003EF0 803E[789C]00            	cmp	byte [Concat],0
 30047 00003EF5 7408                    	jz	short MELDO4
 30048                                  MELDO3:
 30049 00003EF7 C606[849C]01            	mov	byte [DestClosed],1
 30050 00003EFC E9D2FE                  	jmp	ENDCOPY
 30051                                  MELDO4:
 30052 00003EFF E8EB00                  	call	SEARCHNEXT
 30053 00003F02 74A7                    	jz	short NEXTAMBIG
 30054 00003F04 803E[639F]00            	cmp	byte [cox_src_file],0
 30055                                  	;jz	short MELDO5
 30056                                  	;jmp	NEXTSRC
 30057                                  	; 18/06/2023
 30058 00003F09 7505                    	jnz	short NEXTSRCJ
 30059                                  MELDO5:
 30060 00003F0B C606[849C]01            	mov	byte [DestClosed],1
 30061                                  NEXTSRCJ:	; 18/06/2023
 30062 00003F10 E91FFF                  	jmp	NEXTSRC
 30063                                  
 30064                                  	; 12/06/2023
 30065                                  MELDO1:
 30066 00003F13 803E[839C]00            	cmp	byte [CFLAG],0		; destination file created flag
 30067 00003F18 7513                    	jnz	short MELDO     	; yes, new (created) file
 30068                                  					; no, overwrite question (must be confirmed)
 30069 00003F1A E81F03                  	call	get_answer_YNA
 30070 00003F1D 72CA                    	jb	short MELDO2    	; answer is no
 30071 00003F1F 803E[789C]00            	cmp	byte [Concat],0
 30072 00003F24 7507                    	jnz	short MELDO
 30073 00003F26 803E[629F]00            	cmp	byte [cox_dest_file],0	; is there a (valid) target file ?
 30074 00003F2B 7517                    	jnz	short DOREAD    	; yes
 30075                                  	; 12/06/2023
 30076                                  	;jmp	short MELDO     	; no, destination/target file does not exist
 30077                                  
 30078                                  	; ****************************************
 30079                                  	; 12/06/2023
 30080                                  MELDO:
 30081 00003F2D 803E[789C]00            	cmp	byte [Concat],0
 30082 00003F32 7507                    	jnz	short SHOWCPNAM		; concatenating - show name
 30083 00003F34 F606[909E]02            	test	byte [SrcInfo],2	; wildcard - show name
 30084 00003F39 7409                    	jz	short DOREAD
 30085                                  SHOWCPNAM:
 30086                                  	; 25/03/2023
 30087                                  	; MSDOS 3.3
 30088                                  	;mov	dx,SRCBUF
 30089                                  	;mov	[STRING_PTR_2],dx
 30090                                  	;mov	dx,STRINGBUF2PTR
 30091                                  	;call	STD_PRINTF
 30092                                  	;call	CRLF2
 30093                                  	; 25/03/2023 - Retro DOS 4.0 COMMAND.COM
 30094                                  	; MSDOS 6.0 (& MSDOS 5.0
 30095 00003F3B BA[AA91]                	mov	dx,file_name_ptr
 30096 00003F3E E8E714                  	call	std_printf
 30097 00003F41 E833EA                  	call	CRLF2
 30098                                  DOREAD:
 30099 00003F44 E8C300                  	call	DOCOPY
 30100 00003F47 803E[789C]00            	cmp	byte [Concat],0
 30101 00003F4C 750A                    	jnz	short NODCLOSE		; concatenating - don't close dest
 30102                                  
 30103 00003F4E E8B801                  	call	CLOSEDEST		; close current destination
 30104 00003F51 7205                    	jc	short NODCLOSE		; concatenating - dest not closed
 30105                                  
 30106 00003F53 C606[839C]00            	mov	byte [CFLAG],0		; 'destination not created'
 30107                                  NODCLOSE:
 30108 00003F58 803E[789C]00            	cmp	byte [Concat],0
 30109 00003F5D 740A                    	jz	short NOFLUSH
 30110                                  
 30111                                  ;	Concatenating - flush output between source files so LostErr
 30112                                  ;	stuff works correctly.
 30113                                  
 30114                                  	;invoke	FlshFil  ; MSDOS 6.0
 30115                                  	; 25/03/2023
 30116 00003F5F E81204                  	call	FlshFil
 30117                                  	;call	FLUSHFIL ; MSDOS 3.3
 30118                                  
 30119 00003F62 F606[899E]FF            	test	byte [MELCOPY],0FFh
 30120                                  	;jz	short NOFLUSH
 30121                                  	;jmp	short DOMELCOPY
 30122                                  	; 25/03/2023
 30123 00003F67 750D                    	jnz	short DOMELCOPY
 30124                                  NOFLUSH:
 30125 00003F69 E88100                  	call	SEARCHNEXT		; try next match
 30126 00003F6C 75A2                    	jnz	short NEXTSRCJ		; not found - finished with 
 30127                                  					;   this source spec
 30128 00003F6E C606[849C]00            	mov	byte [DestClosed],0	; 'destination not closed'
 30129 00003F73 E935FF                  	jmp	NEXTAMBIG		; do next ambig match
 30130                                  
 30131                                  DOMELCOPY:
 30132 00003F76 803E[899E]FF            	cmp	byte [MELCOPY],0FFh
 30133 00003F7B 740D                    	je	short CONTMEL
 30134 00003F7D 8B36[429F]              	mov	si,[SRCPT]
 30135 00003F81 8936[8A9E]              	mov	[MELSTART],si
 30136 00003F85 C606[899E]FF            	mov	byte [MELCOPY],0FFh
 30137                                  
 30138                                  CONTMEL:
 30139 00003F8A 31ED                    	xor	bp,bp
 30140 00003F8C 8B36[429F]              	mov	si,[SRCPT]
 30141                                  	;mov	bl,[PLUS_CHR]
 30142                                  	; 25/03/2023
 30143 00003F90 B32B                    	mov	bl,'+'
 30144                                  SCANSRC2:
 30145 00003F92 BF[EB9E]                	mov	di,ScanBuf
 30146 00003F95 E80F08                  	call	cparse
 30147 00003F98 F6C780                  	test	bh,80h
 30148 00003F9B 742F                    	jz	short NEXTMEL		; no "+" - go back to start
 30149 00003F9D F6C701                  	test	bh,1
 30150 00003FA0 75F0                    	jnz	short SCANSRC2		; switch - keep scanning
 30151 00003FA2 E863FE                  	call	SOURCEPROC
 30152 00003FA5 E879E8                  	call	RestUDir1
 30153 00003FA8 BF[2C9D]                	mov	di,DESTFCB2
 30154 00003FAB B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 30155 00003FAE CD21                    	int	21h		; DOS -	PARSE FILENAME
 30156                                  				; DS:SI	-> string to parse
 30157                                  				; ES:DI	-> buffer to fill with unopened	FCB
 30158                                  				; AL = bit mask	to control parsing
 30159 00003FB0 BB[F29D]                	mov	bx,SDIRBUF+1
 30160 00003FB3 BE[2D9D]                	mov	si,DESTFCB2+1
 30161 00003FB6 8B3E[8E9E]              	mov	di,[SrcTail]
 30162                                  
 30163 00003FBA E83F06                  	call	BUILDNAME
 30164                                  
 30165 00003FBD 803E[789C]00            	cmp	byte [Concat],0
 30166 00003FC2 7405                    	je	short MELDOJ		; not concatenating - continue
 30167                                  
 30168                                  	;	Yes, turn off nowrite because this part of the code 
 30169                                  	;	is only reached after the first file has been dealt with.
 30170                                  
 30171 00003FC4 C606[459F]00            	mov	byte [NOWRITE],0
 30172                                  MELDOJ:
 30173 00003FC9 E961FF                  	jmp	MELDO
 30174                                  	; 18/06/2023
 30175                                  ;NEXTSRCJ:
 30176                                  	;jmp	NEXTSRC
 30177                                  
 30178                                  NEXTMEL:
 30179 00003FCC E83A01                  	call	CLOSEDEST
 30180 00003FCF 31C0                    	xor	ax,ax
 30181 00003FD1 A2[839C]                	mov	[CFLAG],al
 30182 00003FD4 A3[899C]                	mov	[NXTADD],ax
 30183 00003FD7 A2[849C]                	mov	[SPECDRV],al
 30184 00003FDA 8B36[8A9E]              	mov	si,[MELSTART]
 30185 00003FDE 8936[429F]              	mov	[SRCPT],si
 30186 00003FE2 E80800                  	call	SEARCHNEXT
 30187 00003FE5 7403                    	jz	short SETNMELJ
 30188 00003FE7 E9EAFD                  	jmp	ENDCOPY2
 30189                                  SETNMELJ:
 30190 00003FEA E9B3FE                  	jmp	SETNMEL
 30191                                  
 30192                                  ; ---------------------------------------------------------------------------
 30193                                  
 30194                                  SEARCHNEXT:
 30195 00003FED B412                    	mov	ah,Dir_Search_Next ; 12h
 30196 00003FEF F606[909E]02            	test	byte [SrcInfo],2
 30197 00003FF4 7503                    	jnz	short SEARCH		; do search-next if ambig
 30198 00003FF6 08E4                    	or	ah,ah			; reset zero flag
 30199 00003FF8 C3                      	retn
 30200                                  
 30201                                  ; ---------------------------------------------------------------------------
 30202                                  
 30203                                  SEARCH:
 30204 00003FF9 50                      	push	ax
 30205 00003FFA B41A                    	mov	ah,Set_DMA ; 1Ah
 30206 00003FFC BA[AB9D]                	mov	dx,DIRBUF	; put result of search in dirbuf
 30207 00003FFF CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 30208                                  			; DS:DX	-> disk	transfer buffer
 30209 00004001 58                      	pop	ax		; restore search first/next command
 30210 00004002 BA5C00                  	mov	dx,FCB ; 5Ch
 30211 00004005 CD21                    	int	21h		; Do the search
 30212 00004007 08C0                    	or	al,al
 30213 00004009 C3                      	retn
 30214                                  
 30215                                  ; ---------------------------------------------------------------------------
 30216                                  
 30217                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30218                                  
 30219                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30220                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4335h
 30221                                  
 30222                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 30223                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:41E9h
 30224                                  DOCOPY:
 30225 0000400A BE[919E]                	mov	si,SrcBuf	; do name translate of source
 30226 0000400D BF[9199]                	mov	di,SRCXNAME	; save for name comparison
 30227 00004010 B460                    	mov	ah,xNameTrans ; 60h
 30228                                  	;mov	ah,60h
 30229 00004012 CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 30230                                  			; DS:SI	-> ASCIZ relative path string or directory name
 30231                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 30232 00004014 C606[769C]00            	mov	byte [RDEOF],0	; no EOF yet
 30233                                  
 30234                                  	; MSDOS 6.0
 30235                                  	;mov	ax,ExtOpen shl 8	; open the file
 30236                                  	; 26/03/2023
 30237 00004019 B8006C                  	mov	ax,6C00h
 30238                                  ;M046
 30239                                  ; For reads, the sharing mode should be deny none so that any process can
 30240                                  ;open this file again in any other sharing mode. This is mainly to allow
 30241                                  ;multiple command.com's to access the same file without getting sharing
 30242                                  ;violations
 30243                                  ;
 30244                                  	;mov	bx,deny_none|read_open_mode
 30245 0000401C BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 30246 0000401F 31C9                    	xor	cx,cx			; no special files
 30247                                  	;mov	dx,read_open_flag	; set up open flags
 30248 00004021 BA0101                  	mov	dx,101h
 30249 00004024 CD21                    	int	21h
 30250                                  	; 26/03/2023
 30251 00004026 7230                    	jc	short Error_On_Source
 30252                                  	;jnc	short OPENOK
 30253                                  
 30254                                  	;	Bogosity: IBM wants us to issue Access Denied in this case.
 30255                                  	;	They asked for it...
 30256                                  
 30257                                  	;jmp	short Error_On_Source ;AC022; clean up and exit
 30258                                  
 30259                                  	; 26/03/2023
 30260                                  	; MSDOS 3.3
 30261                                  	;mov	dx,SRCBUF
 30262                                  	;mov	ax,OPEN*256 ; 3D00h
 30263                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 30264                                  	;			; DS:DX	-> ASCIZ filename
 30265                                  	;			; AL = access mode
 30266                                  	;			; 0 - read
 30267                                  	;jnc	short OPENOK
 30268                                  	;call	GET_EXT_ERR_NUMBER
 30269                                  	;pushf
 30270                                  	;cmp	ax,65
 30271                                  	;jnz	short DOCOPY_ERR
 30272                                  	;mov	dx,ACCDENPTR
 30273                                  	;call	STD_PRINTF
 30274                                  ;DOCOPY_ERR:
 30275                                  	;popf
 30276                                  	;retn
 30277                                  
 30278                                  	; 26/03/2023
 30279                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30280                                  OPENOK:
 30281 00004028 89C3                    	mov	bx,ax
 30282 0000402A 891E[E89E]              	mov	[SRCHAND],bx		; save handle
 30283 0000402E B80057                  	mov	ax,File_Times*256 ; 5700h
 30284 00004031 CD21                    	int	21h		; DOS -	2+ - GET FILE'S DATE/TIME
 30285                                  				; BX = file handle
 30286                                  
 30287 00004033 7223                    	jc	short Error_On_Source ; MSDOS 6.0
 30288                                  
 30289 00004035 8916[4D9F]              	mov	[CPDATE],dx		; save date
 30290 00004039 890E[4F9F]              	mov	[CPTIME],cx		; save time
 30291                                  
 30292                                  	; MSDOS 6.0
 30293                                  	;jmp	short No_Copy_Xa 	; (xa copy code removed)
 30294                                  	; 26/04/2023
 30295                                  No_Copy_Xa:
 30296                                  	; 26/03/2023
 30297                                  	;mov	bx,[SRCHAND]		;AN022; get handle back
 30298                                  
 30299                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30300 0000403D B80044                  	mov	ax,(IOCTL<<8) ; 4400h
 30301 00004040 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 30302                                  				; BX = file or device handle
 30303                                  	;and	dl,devid_ISDEV ; 80h
 30304                                  	; 18/04/2023
 30305 00004042 80E280                  	and	dl,80h ; devid_ISDEV
 30306 00004045 8816[EA9E]              	mov	[SRCISDEV],dl		; set source info
 30307 00004049 7436                    	jz	short COPYLP		; source not a device
 30308 0000404B 803E[469F]00            	cmp	byte [BINARY],0
 30309 00004050 742F                    	je	short COPYLP		; ascii device ok
 30310 00004052 BA[6391]                	mov	dx,INBDEV_PTR		; cannot do binary input
 30311 00004055 E96B04                  	jmp	COPYERR
 30312                                  
 30313                                  Error_On_Source:			;AN022; we have a BAD error
 30314 00004058 E8DEDF                  	call	Set_Ext_Error_Msg	;AN022; set up the error message
 30315 0000405B C706[129E][919E]        	mov	word [string_ptr_2],SrcBuf
 30316                                  				;AN022; get address of failed string
 30317 00004061 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst ; 1
 30318                                  				;AN022; put number of subst in control block
 30319 00004066 E8B713                  	call	std_eprintf		;AN022; print it
 30320                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 30321 00004069 8B1E[E89E]              	mov	bx,[SRCHAND]
 30322                                  	;cmp	word [SRCHAND],0	;AN022; did we open the file?
 30323                                  	;je	short No_Close_Src	;AN022; no - don't close
 30324 0000406D 09DB                    	or	bx,bx
 30325 0000406F 7403                    	jz	short No_Close_Src
 30326                                  	;call	CLOSESRC		;AN022; clean up
 30327                                  	; 26/03/2023
 30328 00004071 E89000                  	call	CLOSESRC2 ; bx = [SRCHAND]
 30329                                  No_Close_Src:				;AN022;
 30330 00004074 803E[839C]00            	cmp	byte [CFLAG],0		;AN022; was destination created?
 30331 00004079 7403                    	je	short EndCopyJ3		;AN022; no - just cleanup and exit
 30332 0000407B E953FD                  	jmp	ENDCOPY			;AN022; clean up concatenation and exit
 30333                                  EndCopyJ3:				;AN022;
 30334 0000407E E953FD                  	jmp	ENDCOPY2		;AN022;
 30335                                  
 30336                                  	; 26/04/2023
 30337                                  ;No_Copy_Xa:
 30338                                  ;	; 26/03/2023
 30339                                  ;	;mov	bx,[SRCHAND]		;AN022; get handle back
 30340                                  ;
 30341                                  ;	; MSDOS 3.3 (& MSDOS 6.0)
 30342                                  ;	mov	ax,(IOCTL<<8) ; 4400h
 30343                                  ;	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 30344                                  ;				; BX = file or device handle
 30345                                  ;	;and	dl,devid_ISDEV ; 80h
 30346                                  ;	; 18/04/2023
 30347                                  ;	and	dl,80h ; devid_ISDEV
 30348                                  ;	mov	[SRCISDEV],dl		; set source info
 30349                                  ;	jz	short COPYLP		; source not a device
 30350                                  ;	cmp	byte [BINARY],0
 30351                                  ;	je	short COPYLP		; ascii device ok
 30352                                  ;	mov	dx,INBDEV_PTR		; cannot do binary input
 30353                                  ;	jmp	COPYERR
 30354                                  
 30355                                  COPYLP:
 30356                                  	; 26/03/2023
 30357 00004081 8B1E[E89E]              	mov	bx,[SRCHAND] ; ? ; 26/03/2023
 30358 00004085 8B0E[859C]              	mov	cx,[BYTCNT]
 30359 00004089 8B16[899C]              	mov	dx,[NXTADD]
 30360 0000408D 29D1                    	sub	cx,dx			; compute available space
 30361 0000408F 750E                    	jnz	short GOTROOM
 30362 00004091 E8E002                  	call	FlshFil   ; MSDOS 6.0
 30363                                  	;call	FLUSHFIL  ; MSDOS 3.3
 30364 00004094 803E[499F]00            	cmp	byte [TERMREAD],0
 30365 00004099 7565                    	jne	short CLOSESRC		; give up
 30366 0000409B 8B0E[859C]              	mov	cx,[BYTCNT]
 30367                                  GOTROOM:
 30368 0000409F 1E                      	push	ds
 30369 000040A0 8E1E[659C]              	mov	ds,[TPA]
 30370 000040A4 B43F                    	mov	ah,READ ; 3Fh
 30371 000040A6 CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 30372                                  				; BX = file handle,CX = number of bytes to read
 30373                                  				; DS:DX	-> buffer
 30374 000040A8 1F                      	pop	ds
 30375                                  	;jc	short CLOSESRC	; MSDOS 3.3
 30376                                  	; 26/03/2023
 30377 000040A9 72AD                    	jc	short Error_On_Source ; MSDOS 6.0
 30378 000040AB 89C1                    	mov	cx,ax			; get count
 30379 000040AD E351                    	jcxz	CLOSESRC		; no more to read
 30380 000040AF 803E[EA9E]00            	cmp	byte [SRCISDEV],0
 30381 000040B4 7507                    	jne	short NOTESTA		; is a device, ascii mode
 30382 000040B6 803E[4A9F]00            	cmp	byte [ASCII],0
 30383 000040BB 741B                    	je	short BINREAD
 30384                                  NOTESTA:
 30385 000040BD 89CA                    	mov	dx,cx
 30386 000040BF 8B3E[899C]              	mov	di,[NXTADD]
 30387 000040C3 B01A                    	mov	al,1Ah
 30388 000040C5 06                      	push	es
 30389 000040C6 8E06[659C]              	mov	es,[TPA]		; scan for EOF
 30390 000040CA F2AE                    	repne	scasb
 30391 000040CC 07                      	pop	es
 30392 000040CD 7505                    	jnz	short USEALL
 30393 000040CF FE06[769C]              	inc	byte [RDEOF]
 30394 000040D3 41                      	inc	cx
 30395                                  USEALL:
 30396 000040D4 29CA                    	sub	dx,cx
 30397 000040D6 89D1                    	mov	cx,dx
 30398                                  BINREAD:
 30399 000040D8 030E[899C]              	add	cx,[NXTADD]
 30400 000040DC 890E[899C]              	mov	[NXTADD],cx
 30401 000040E0 3B0E[859C]              	cmp	cx,[BYTCNT]		; is buffer full?
 30402 000040E4 720C                    	jb	short TESTDEV		; if not, we may have found eof
 30403                                  	; 26/03/2023
 30404 000040E6 E88B02                  	call	FlshFil
 30405                                  	;call	FLUSHFIL
 30406 000040E9 803E[499F]00            	cmp	byte [TERMREAD],0
 30407 000040EE 7510                    	jne	short CLOSESRC		; give up
 30408 000040F0 EB8F                    	jmp	short COPYLP
 30409                                  TESTDEV:
 30410 000040F2 803E[EA9E]00            	cmp	byte [SRCISDEV],0	; if file then EOF
 30411 000040F7 7407                    	je	short CLOSESRC
 30412 000040F9 803E[769C]00            	cmp	byte [RDEOF],0
 30413 000040FE 7481                    	je	short COPYLP		; on device, go till ^Z
 30414                                  CLOSESRC:
 30415 00004100 8B1E[E89E]              	mov	bx,[SRCHAND]
 30416                                  CLOSESRC2:
 30417 00004104 B43E                    	mov	ah,CLOSE ; 3Eh
 30418 00004106 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 30419                                  				; BX = file handle
 30420                                  CLOSESRCDEST_RETN:
 30421 00004108 C3                      	retn
 30422                                  
 30423                                  ; ---------------------------------------------------------------------------
 30424                                  
 30425                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30426                                  CLOSEDEST:
 30427                                  
 30428                                  	;	We are called to close the destination.
 30429                                  	;	We need to note whether or not there is any internal data left
 30430                                  	;	to be flushed out.
 30431                                  
 30432 00004109 803E[849C]00            	cmp	byte [DestClosed],0
 30433 0000410E 75F8                    	jne	short CLOSESRCDEST_RETN	; don't double close
 30434 00004110 A0[7F9C]                	mov	al,[DestSwitch]
 30435 00004113 E80904                  	call	SETASC			; check for b or a switch
 30436 00004116 742E                    	jz	short BINCLOS		;   on destination
 30437 00004118 8B1E[899C]              	mov	bx,[NXTADD]
 30438                                  ;
 30439                                  ;M048 -- TryFlush changes the state of ConCat flag. So, before we append a
 30440                                  ;^Z, let's always flush out. This way if the ConCat flag changes, we will
 30441                                  ;just return without appending a ^Z incorrectly for the first file (since we
 30442                                  ;are concatenating now). Also, in case it is a single file copy, we will
 30443                                  ;anyway write the ^Z out separately. The only drawback is that there is a
 30444                                  ;performance overhead on single ASCII file copies which now always involve
 30445                                  ;2 writes instead of 1 before. Is this really that important?
 30446                                  ;
 30447                                  ;M048;	cmp	bx,[BYTCNT]		; is memory full?
 30448                                  ;M048;	jne	short PutZ
 30449                                  
 30450                                  	; 26/03/2023
 30451                                  	; MSDOS 3.3
 30452                                  	;cmp	bx,[BYTCNT]		; is memory full?
 30453                                  	;jne	short PUTZ
 30454                                  
 30455                                  	; 26/03/2023
 30456 0000411C E84802                  	call	TRYFLUSH		; flush (and double-check for concat)	
 30457 0000411F 7402                    	jz	short NOCONC
 30458                                  CONCHNG:
 30459 00004121 F9                      	stc
 30460 00004122 C3                      	retn
 30461                                  
 30462                                  NOCONC:	
 30463 00004123 31DB                    	xor	bx,bx
 30464                                  PUTZ:
 30465 00004125 1E                      	push	ds
 30466 00004126 8E1E[659C]              	mov	ds,[TPA]
 30467 0000412A C7071A00                	mov	word [bx],1Ah	; add EOF mark (ctrl-Z)
 30468 0000412E 1F                      	pop	ds
 30469 0000412F FF06[899C]              	inc	word [NXTADD]	; make sure our ^z gets written	
 30470 00004133 C606[459F]00            	mov	byte [NOWRITE],0
 30471 00004138 A1[479F]                	mov	ax,[WRITTEN]
 30472 0000413B 0306[899C]              	add	ax,[NXTADD]
 30473 0000413F 7205                    	jc	short BINCLOS	; > 1
 30474 00004141 83F801                  	cmp	ax,1
 30475 00004144 740C                    	je	short FORGETITJ	; Written = 0 NxtAdd = 1 (the ^Z)
 30476                                  BINCLOS:
 30477 00004146 E81E02                  	call	TRYFLUSH
 30478 00004149 75D6                    	jnz	short CONCHNG
 30479                                  
 30480                                  	; 26/04/2023
 30481 0000414B 833E[479F]00            	cmp	word [WRITTEN],0
 30482                                  	; 26/03/2023
 30483 00004150 7503                    	jnz	short NO_FORGET
 30484                                  FORGETITJ:
 30485                                  	;jz	short FORGETIT	; never wrote nothing
 30486                                  	; 26/03/2023
 30487 00004152 E98500                  	jmp	FORGETIT ; 18/04/2023
 30488                                  NO_FORGET:			; wrote something
 30489 00004155 8B1E[859E]              	mov	bx,[DESTHAND]
 30490 00004159 8B0E[4F9F]              	mov	cx,[CPTIME]
 30491 0000415D 8B16[4D9F]              	mov	dx,[CPDATE]
 30492 00004161 803E[449F]00            	cmp	byte [INEXACT],0 ; copy not exact?
 30493 00004166 7431                    	je	short DODCLOSE	; if no, copy date & time
 30494 00004168 B42C                    	mov	ah,Get_Time ; 2Ch
 30495 0000416A CD21                    	int	21h		; DOS -	GET CURRENT TIME
 30496                                  				; Return: CH = hours,CL = minutes,DH = seconds
 30497                                  				; DL = hundredths of seconds
 30498 0000416C D0E1                    	shl	cl,1
 30499 0000416E D0E1                    	shl	cl,1		; left justify min in cl
 30500 00004170 D1E1                    	shl	cx,1
 30501 00004172 D1E1                    	shl	cx,1
 30502 00004174 D1E1                    	shl	cx,1		; hours to high 5 bits, min to 5-10
 30503 00004176 D0EE                    	shr	dh,1		; divide seconds by 2 (now 5 bits)
 30504 00004178 08F1                    	or	cl,dh		; and stick into low 5 bits of cx
 30505 0000417A 51                      	push	cx		; save packed time
 30506 0000417B B42A                    	mov	ah,Get_Date ; 2Ah
 30507 0000417D CD21                    	int	21h		; DOS -	GET CURRENT DATE
 30508                                  				; Return: DL = day,DH = month,	CX = year
 30509                                  				; AL = day of the week (0=Sunday,1=Monday,etc.)
 30510 0000417F 81E9BC07                	sub	cx,1980
 30511 00004183 86E9                    	xchg	ch,cl
 30512 00004185 D1E1                    	shl	cx,1		; year to high 7 bits
 30513 00004187 D0E6                    	shl	dh,1		; month to high 3 bits
 30514 00004189 D0E6                    	shl	dh,1
 30515 0000418B D0E6                    	shl	dh,1
 30516 0000418D D0E6                    	shl	dh,1
 30517 0000418F D0E6                    	shl	dh,1		; most sig bit of month in carry
 30518 00004191 80D500                  	adc	ch,0		; put that bit next to year
 30519 00004194 08F2                    	or	dl,dh		; or low three of month into day
 30520 00004196 88EE                    	mov	dh,ch		; get year and high bit of month
 30521 00004198 59                      	pop	cx
 30522                                  DODCLOSE:
 30523 00004199 83FB00                  	cmp	bx,0
 30524 0000419C 7E36                    	jle	short CLOSEDONE
 30525 0000419E B80157                  	mov	ax,(File_Times<<8)|1 ; 5701h
 30526 000041A1 CD21                    	int	21h		; DOS -	2+ - SET FILE'S DATE/TIME
 30527                                  				; BX = file handle,CX = time to be set
 30528                                  				; DX = date to be set
 30529                                  	; 26/03/2023
 30530                                  	; MSDOS 6.0
 30531 000041A3 721A                    	jc	short Cleanup_Err ;AN022; handle error
 30532                                  
 30533                                  	;	See if the destination has *anything* in it.
 30534                                  	;	If not, just close and delete it.
 30535                                  
 30536 000041A5 B80242                  	mov	ax,(LSEEK<<8)+2 ; 4202h	; seek to EOF
 30537 000041A8 31D2                    	xor	dx,dx
 30538 000041AA 89D1                    	mov	cx,dx
 30539 000041AC CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 30540                                  			; AL = method: offset from end of file
 30541                                  	;	DX:AX is file size
 30542                                  
 30543 000041AE 09C2                    	or	dx,ax
 30544 000041B0 9C                      	pushf
 30545 000041B1 B80044                  	mov	ax,(IOCTL<<8)+0 ; 4400h	; get the destination attributes
 30546 000041B4 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 30547                                  			; BX = file or device handle
 30548 000041B6 52                      	push	dx		; save them away
 30549 000041B7 B43E                    	mov	ah,CLOSE ; 3Eh
 30550 000041B9 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 30551                                  			; BX = file handle
 30552 000041BB 5A                      	pop	dx
 30553                                  
 30554                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 30555                                  	; MSDOS 6.0
 30556 000041BC 730D                    	jnc	short Close_Cont ;AN022; handle error on close
 30557 000041BE 9D                      	popf			;AN022; get the flags back
 30558                                  Cleanup_Err: 			;AN022;
 30559 000041BF E86100                  	call	CleanUpErr	;AN022; attempt to delete the target
 30560                                  	; 26/03/2023
 30561                                  	;call	DestDelete	;AN022; attempt to delete the target
 30562                                  	;jmp	short FILECLOSED
 30563                                  	;			;AN022; close the file
 30564                                  	; 26/03/2023
 30565                                  DestDel_fclosed:
 30566 000041C2 E82700                  	call	DestDelete
 30567                                  FILECLOSED:
 30568 000041C5 FE06[849C]              	inc	byte [DestClosed]
 30569                                  RET50:
 30570 000041C9 F8                      	clc
 30571 000041CA C3                      	retn
 30572                                  	
 30573                                  Close_Cont:			;AN022; no error - co
 30574                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30575 000041CB 9D                      	popf
 30576 000041CC 7506                    	jnz	short CLOSEDONE
 30577 000041CE F7C28000                	test	dx,80h		; is the destination a device?
 30578                                  	;jnz	short CLOSEDONE	; yes, copy succeeded
 30579                                  	;call	DestDelete
 30580                                  	;jmp	short FILECLOSED
 30581                                  	; 26/03/2023
 30582 000041D2 74EE                    	jz	short DestDel_fclosed
 30583                                  CLOSEDONE:
 30584 000041D4 FF06[929C]              	inc	word [FileCnt]
 30585                                  	; 26/03/2023
 30586 000041D8 EBEB                    	jmp	short FILECLOSED
 30587                                  	
 30588                                  ;FILECLOSED:
 30589                                  ;	inc	byte [DestClosed]
 30590                                  ;RET50:
 30591                                  	;clc
 30592                                  	;retn
 30593                                  
 30594                                  FORGETIT:
 30595 000041DA 8B1E[859E]              	mov	bx,[DESTHAND]
 30596 000041DE E8B8FF                  	call	DODCLOSE	 ; close the dest
 30597 000041E1 E80800                  	call	DestDelete
 30598 000041E4 C706[929C]0000          	mov	word [FileCnt],0 ; no files transferred
 30599 000041EA EBDD                    	jmp	short RET50
 30600                                  
 30601                                  ; ---------------------------------------------------------------------------
 30602                                  
 30603                                  	; 26/03/2023
 30604                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 30605                                  DestDelete:
 30606                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30607                                  %if 1
 30608 000041EC 803E[799C]01            	cmp	byte [notzerofile],1 ; destination file size > 0
 30609 000041F1 74D6                    	je	short RET50 	; yes, do not delete
 30610                                  %endif
 30611 000041F3 BA[2E9E]                	mov	dx,DestBuf
 30612 000041F6 B441                    	mov	ah,Unlink ; 41h
 30613 000041F8 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 30614                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 30615                                  			;		(no wildcards allowed)
 30616 000041FA C3                      	retn
 30617                                  
 30618                                  ; ---------------------------------------------------------------------------
 30619                                  
 30620                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30621                                  SOURCE_SET:
 30622 000041FB 56                      	push	si
 30623 000041FC A1[669F]                	mov	ax,[STARTEL]
 30624 000041FF BE[EB9E]                	mov	si,ScanBuf	; adjust to copy
 30625 00004202 29F0                    	sub	ax,si
 30626 00004204 BF[919E]                	mov	di,SrcBuf
 30627 00004207 01F8                    	add	ax,di
 30628 00004209 A3[8E9E]                	mov	[SrcTail],ax
 30629 0000420C 880E[8D9E]              	mov	[SrcSiz],cl	; save its size
 30630 00004210 41                      	inc	cx		; include the nul
 30631 00004211 F3A4                    	rep	movsb		; save this source
 30632 00004213 883E[909E]              	mov	[SrcInfo],bh	; save info about it
 30633 00004217 5E                      	pop	si
 30634 00004218 89E8                    	mov	ax,bp		; switches so far
 30635 0000421A E80203                  	call	SETASC		; set a,b switches accordingly
 30636 0000421D E822E9                  	call	SWITCH		; get any more switches on this arg
 30637                                  	;call	SETASC		; set
 30638                                  	;retn
 30639                                  	; 26/03/2023
 30640 00004220 E9FC02                  	jmp	SETASC
 30641                                  
 30642                                  ; =============== S U B	R O U T	I N E =======================================
 30643                                  
 30644                                  ; MSDOS 6.0
 30645                                  
 30646                                  ;****************************************************************
 30647                                  ;*
 30648                                  ;* ROUTINE:	CleanupErr
 30649                                  ;*
 30650                                  ;* FUNCTION:	Issues extended error message for destination
 30651                                  ;*		if not alreay issued
 30652                                  ;*
 30653                                  ;* INPUT:	return from INT 21
 30654                                  ;*
 30655                                  ;* OUTPUT:	none
 30656                                  ;*
 30657                                  ;****************************************************************
 30658                                  
 30659                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30660                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30661                                  	; MSDOS 6.0 (MSDOS 5.0) COMMAND.COM
 30662                                  CleanUpErr:	;proc near		;AN022;
 30663                                  
 30664 00004223 803E[A39F]00            	cmp	byte [msg_flag],0	;AN022; have we already issued a message?
 30665 00004228 7511                    	jnz	short CleanupErr_Cont	;AN022; yes - don't issue duplicate error
 30666 0000422A E80CDE                  	call	Set_Ext_Error_Msg	;AN022; set up error message
 30667 0000422D C706[129E][2E9E]        	mov	word [string_ptr_2],DestBuf 
 30668                                  					;AN022; get address of failed string
 30669 00004233 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 30670                                  					;AN022; put number of subst in control block
 30671 00004238 E8E511                  	call	std_eprintf		;AN022; issue the error message
 30672                                  CleanupErr_Cont:			;AN022;
 30673                                  getansw_8:	; 12/06/2023
 30674 0000423B C3                      	retn				;AN022; return to caller
 30675                                  
 30676                                  ;CleanUpErr	endp			;AN022;
 30677                                  
 30678                                  
 30679                                  ; 12/06/2023
 30680                                  ; ---------------------------------------------------------------------------
 30681                                  ; MSDOS 6.2(2) COMMAND.COM procedure only !
 30682                                  ; -----------------------------------------
 30683                                  ; Hex-Rays IDA / disassembled source code ! modified for NASM by Erdogan Tan
 30684                                  ; ---------------------------------------------------------------------------
 30685                                  
 30686                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30687                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:456Dh
 30688                                  
 30689                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 30690                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:4427h
 30691                                  
 30692                                  ; burada kaldým.. 11/08/2024
 30693                                  
 30694                                  get_answer_YNA:
 30695 0000423C C606[629F]00            	mov	byte [cox_dest_file],0	; clear validation flag
 30696 00004241 B80043                  	mov	ax,4300h
 30697 00004244 BA[2E9E]                	mov	dx,DestBuf
 30698 00004247 CD21                    	int	21h		; DOS -	2+ - GET FILE ATTRIBUTES
 30699                                  				; DS:DX	-> ASCIZ file name or directory
 30700                                  				; name without trailing	slash
 30701                                  	;jnc	short getansw_1
 30702                                  	;jmp	getansw_5
 30703                                  	; 12/06/2023
 30704 00004249 F5                      	cmc
 30705 0000424A 73EF                    	jnc	short getansw_8 
 30706                                  getansw_1:
 30707 0000424C FE06[629F]              	inc	byte [cox_dest_file]	; valid destination file
 30708 00004250 8D36[569F]              	lea	si,cox_sublist_buff
 30709 00004254 C7040B00                	mov	word [si],11		; sublist size, 11 bytes
 30710 00004258 C74402[2E9E]            	mov	word [si+2],DestBuf	; sublist value	(pointer)
 30711 0000425D 8C5C04                  	mov	[si+4],ds		; sublist segment
 30712                                  	;mov	byte [si+6],1		; sub id (N of %N)
 30713 00004260 C6440710                	mov	byte [si+7],10h		; data type flags
 30714                                  	;mov	byte [si+8],0		; maximum length (chars)
 30715                                  	;mov	byte [si+9],0		; minimum length (chars)
 30716                                  	;mov	byte [si+10],0		; pad field character (0)
 30717                                  	; 12/06/2023
 30718 00004264 31C9                    	xor	cx,cx
 30719 00004266 894C08                  	mov	[si+8],cx ; 0
 30720 00004269 884C0A                  	mov	[si+10],cl ; 0
 30721 0000426C FEC1                    	inc	cl
 30722 0000426E 884C06                  	mov	[si+6],cl ; 1	
 30723                                  
 30724                                  	; 12/06/2023
 30725                                  	;lea	si,cox_sublist_buff
 30726 00004271 B84F04                  	mov	ax,1103			; message number
 30727                                  					; 'Overwrite %1 (Yes/No/All)?'
 30728 00004274 BB0200                  	mov	bx,2			; std error (file handle = 2)
 30729                                  	; 12/06/2023
 30730                                  	;mov	cx,1			; byte count
 30731                                  	; cx = 1
 30732                                  	;mov	dh,0FFh			; message class	(utility)
 30733                                  	;xor	dl,dl			; control flag = 0
 30734 00004277 31D2                    	xor	dx,dx
 30735 00004279 FECE                    	dec	dh  ; dh = 0FFh
 30736 0000427B E87514                  	call	SYSDISPMSG
 30737                                  	; 12/06/2023
 30738                                  	;xor	bx,bx
 30739                                  	; bh = 0
 30740                                  getansw_2:
 30741 0000427E B8080C                  	mov	ax,0C08h
 30742 00004281 CD21                    	int	21h		; DOS -	CLEAR KEYBOARD BUFFER
 30743                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 30744                                  	;cmp	al,0
 30745                                  	;jz	short getansw_2
 30746                                  	; 12/06/2023
 30747 00004283 20C0                    	and	al,al
 30748 00004285 74F7                    	jz	short getansw_2
 30749 00004287 3C0D                    	cmp	al,0Dh
 30750 00004289 743B                    	je	short getansw_4
 30751 0000428B 88C3                    	mov	bl,al
 30752 0000428D 88C2                    	mov	dl,al
 30753 0000428F B82065                  	mov	ax,6520h
 30754 00004292 CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 30755                                  				; AL = function	-
 30756 00004294 3A16[906D]              	cmp	dl,[_Y_es]		; 'Y' ?
 30757 00004298 740C                    	je	short getansw_3
 30758 0000429A 3A16[916D]              	cmp	dl,[_N_o]		; 'N' ?
 30759 0000429E 7406                    	je	short getansw_3
 30760 000042A0 3A16[926D]              	cmp	dl,[_A_ll]		; 'A' ?
 30761 000042A4 75D8                    	jne	short getansw_2
 30762                                  getansw_3:
 30763 000042A6 88DF                    	mov	bh,bl
 30764 000042A8 53                      	push	bx
 30765 000042A9 881E[8F6D]              	mov	[MSG_1104],bl
 30766 000042AD B440                    	mov	ah,40h
 30767 000042AF BB0200                  	mov	bx,2			; std error (file handle = 2)
 30768 000042B2 B90100                  	mov	cx,1			; byte count
 30769 000042B5 BA[8F6D]                	mov	dx,MSG_1104
 30770 000042B8 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 30771                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 30772 000042BA B440                    	mov	ah,40h
 30773 000042BC C606[8F6D]08            	mov	byte [MSG_1104],8	; backspace (move cursor to back)
 30774 000042C1 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 30775                                  				; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
 30776 000042C3 5B                      	pop	bx
 30777 000042C4 EBB8                    	jmp	short getansw_2
 30778                                  getansw_4:
 30779                                  	;cmp	bh,0
 30780                                  	;jz	short getansw_2
 30781                                  	; 12/06/2023
 30782 000042C6 08FF                    	or	bh,bh
 30783 000042C8 74B4                    	jz	short getansw_2
 30784 000042CA 88FA                    	mov	dl,bh
 30785 000042CC B82065                  	mov	ax,6520h
 30786 000042CF CD21                    	int	21h		; DOS -	4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
 30787                                  				; AL = function	-
 30788 000042D1 52                      	push	dx
 30789 000042D2 B82E04                  	mov	ax,1070			; message number
 30790 000042D5 BB0200                  	mov	bx,2			; std error (file handle = 2)
 30791 000042D8 31C9                    	xor	cx,cx
 30792                                  	;mov	dh,0FFh			; message class	(utility)
 30793                                  	;xor	dl,dl
 30794                                  	; 12/06/2023
 30795 000042DA 31D2                    	xor	dx,dx
 30796 000042DC FECE                    	dec	dh  ; dh = 0FFh
 30797 000042DE E81214                  	call	SYSDISPMSG
 30798 000042E1 5A                      	pop	dx
 30799 000042E2 3A16[906D]              	cmp	dl,[_Y_es]
 30800 000042E6 740B                    	jz	short getansw_5
 30801 000042E8 3A16[916D]              	cmp	dl,[_N_o]
 30802 000042EC 7406                    	jz	short getansw_6
 30803 000042EE C606[619F]00            	mov	byte [cox_y_override],0
 30804                                  	; 12/06/2023
 30805                                  	;jmp	short $+2
 30806                                  getansw_5:
 30807                                  	; 12/06/2023
 30808                                  	;clc
 30809                                  	; cf = 0
 30810                                  	;jmp	short getansw_7
 30811                                  	; 12/06/2023
 30812 000042F3 C3                      	retn
 30813                                  getansw_6:
 30814                                  gcpcmdo_2:	; 12/06/2023
 30815                                  gecpcmd_3:	; 12/06/2023
 30816 000042F4 F9                      	stc
 30817                                  getansw_7:
 30818 000042F5 C3                      	retn
 30819                                  
 30820                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30821                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:463Ah
 30822                                  
 30823                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 30824                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:44F1h
 30825                                  init_copycmd_option:
 30826 000042F6 C606[619F]01            	mov	byte [cox_y_override],1 ; suppress copy overwrite confirmation
 30827 000042FB 06                      	push	es
 30828 000042FC 8E06[639C]              	mov	es,[RESSEG]
 30829                                  
 30830                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30831                                  %if 1
 30832 00004300 26803E[FA01]63          	cmp	byte [es:cox_location],'c' ; "cox"
 30833 00004306 7520                    	jne	short icpcmd_1
 30834                                  %endif
 30835 00004308 268E06[3A04]            	mov	es,[es:EnvirSeg]
 30836 0000430D 8D36[6F97]              	lea	si,copycmd		; "COPYCMD="
 30837 00004311 B90800                  	mov	cx,8
 30838 00004314 E83500                  	call	getenv_copycmd
 30839 00004317 7216                    	jc	short icpcmd_3
 30840 00004319 E82000                  	call	get_copycmd_option	; copycmd=/Y or copycmd=/-Y
 30841 0000431C 720F                    	jc	short icpcmd_2
 30842 0000431E 47                      	inc	di			; skip '/'
 30843 0000431F 268A05                  	mov	al,[es:di]
 30844 00004322 24DF                    	and	al,0DFh			; convert to uppercase
 30845 00004324 3C59                    	cmp	al,'Y'
 30846 00004326 7505                    	jnz	short icpcmd_2
 30847                                  icpcmd_1:
 30848 00004328 C606[619F]00            	mov	byte [cox_y_override],0	; clear copy overwrite question/confirmation
 30849                                  					; (don't suppress)
 30850                                  icpcmd_2:
 30851 0000432D 07                      	pop	es
 30852 0000432E C3                      	retn
 30853                                  icpcmd_3:				; ...
 30854 0000432F 8E06[639C]              	mov	es,[RESSEG]
 30855 00004333 803E[FD01]00            	cmp	byte [cox_Y_option],0	; default (/Y) switch option (1 = enabled)
 30856 00004338 74F3                    	jz	short icpcmd_2
 30857 0000433A EBEC                    	jmp	short icpcmd_1
 30858                                  
 30859                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30860                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4679h
 30861                                  
 30862                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 30863                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:4538h
 30864                                  get_copycmd_option:
 30865 0000433C 26803D00                	cmp	byte [es:di],0
 30866 00004340 74B2                    	jz	short gcpcmdo_2
 30867 00004342 26803D2F                	cmp	byte [es:di],'/'
 30868 00004346 7403                    	jz	short gcpcmdo_1
 30869 00004348 47                      	inc	di
 30870 00004349 EBF1                    	jmp	short get_copycmd_option
 30871                                  gcpcmdo_1:
 30872                                  	; 12/06/2023
 30873                                  	;clc
 30874                                  	; cf = 0
 30875                                  	;jmp	short gcpcmdo_3
 30876                                  	; 12/06/2023
 30877 0000434B C3                      	retn
 30878                                  	; 12/06/2023
 30879                                  ;gcpcmdo_2:
 30880                                  ;	stc
 30881                                  ;gcpcmdo_3:
 30882                                  ;	retn
 30883                                  
 30884                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30885                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:468Dh
 30886                                  
 30887                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 30888                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:454Bh
 30889                                  getenv_copycmd:
 30890 0000434C 31FF                    	xor	di,di
 30891 0000434E 30C0                    	xor	al,al
 30892                                  gecpcmd_1:
 30893                                  	;cmp	byte [es:di],0
 30894                                  	; 12/06/2023
 30895 00004350 263805                  	cmp	[es:di],al ; 0
 30896 00004353 749F                    	jz	short gecpcmd_3
 30897 00004355 51                      	push	cx
 30898 00004356 56                      	push	si
 30899 00004357 F3A6                    	repe	cmpsb
 30900 00004359 5E                      	pop	si
 30901 0000435A 59                      	pop	cx
 30902 0000435B 7409                    	jz	short gecpcmd_2 ; cf = 0
 30903 0000435D 51                      	push	cx
 30904 0000435E B90080                  	mov	cx,32768
 30905 00004361 F2AE                    	repne	scasb	; al = 0
 30906 00004363 59                      	pop	cx
 30907 00004364 EBEA                    	jmp	short gecpcmd_1
 30908                                  gecpcmd_2:
 30909                                  	;clc
 30910                                  	; 12/06/2023
 30911                                  	; cf = 0
 30912                                  	;jmp	short gecpcmd_4
 30913                                  	; 12/06/2023
 30914 00004366 C3                      	retn
 30915                                  	; 12/06/2023
 30916                                  ;gecpcmd_3:
 30917                                  ;	stc
 30918                                  ;gecpcmd_4:
 30919                                  ;	retn
 30920                                  
 30921                                  ;============================================================================
 30922                                  ; COPYPR1.ASM, MSDOS 6.0, 1991
 30923                                  ;============================================================================
 30924                                  ; 01/10/2018 - Retro DOS v3.0
 30925                                  
 30926                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2FBBh
 30927                                  
 30928                                  ; =============== S U B	R O U T	I N E =======================================
 30929                                  
 30930                                  ;***	TryFlush - flush copy buffer, double-check for concatenation
 30931                                  ;
 30932                                  ;	EXIT	ZR set if concatenate flag unchanged
 30933                                  
 30934                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30935                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3EEAh
 30936                                  
 30937                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 30938                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46ADh
 30939                                  
 30940                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 30941                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:456Ah
 30942                                  TRYFLUSH:
 30943 00004367 A0[789C]                	mov	al,[Concat]
 30944 0000436A 50                      	push	ax
 30945                                  	;call	FLUSHFIL
 30946 0000436B E80600                  	call	FlshFil
 30947 0000436E 58                      	pop	ax
 30948 0000436F 3A06[789C]              	cmp	al,[Concat]
 30949 00004373 C3                      	retn
 30950                                  
 30951                                  ; =============== S U B	R O U T	I N E =======================================
 30952                                  
 30953                                  	; 26/03/2023
 30954                                  	; MSDOS 3.3
 30955                                  ;FLUSHFIL:
 30956                                  	;mov	al,[BINARY]
 30957                                  	;mov	ah,[ASCII]
 30958                                  	;push	ax
 30959                                  	;call	FLSHFIL
 30960                                  	;pop	ax
 30961                                  	;mov	[ASCII],ah
 30962                                  	;mov	[BINARY],al
 30963                                  	;retn
 30964                                  
 30965                                  ; =============== S U B	R O U T	I N E =======================================
 30966                                  
 30967                                  ;***	Flshfil - write out any data remaining in copy buffer.
 30968                                  ;
 30969                                  ;	Inputs:
 30970                                  ;	  [NXTADD] = No. of bytes to write
 30971                                  ;	  [CFLAG] <> 0 if file has been created
 30972                                  ;	Outputs:
 30973                                  ;	  [NXTADD] = 0
 30974                                  
 30975                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30976                                  	;
 30977                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 30978                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:46BAh
 30979                                  	;
 30980                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 30981                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:4577h
 30982                                  FlshFil:
 30983 00004374 C606[499F]00            	mov	byte [TERMREAD],0
 30984 00004379 803E[839C]00            	cmp	byte [CFLAG],0
 30985 0000437E 7403                    	jz	short NotExists
 30986 00004380 E99600                  	jmp	Exists
 30987                                  NotExists:
 30988 00004383 E8B301                  	call	BUILDDEST		; find out all about the destination
 30989 00004386 E80B04                  	call	COMPNAME		; source and dest. the same?
 30990 00004389 7519                    	jnz	short ProcDest		; if not, go ahead
 30991 0000438B 803E[EA9E]00            	cmp	byte [SRCISDEV],0
 30992 00004390 7512                    	jnz	short ProcDest		; same name on device ok
 30993 00004392 803E[789C]00            	cmp	byte [Concat],0		; concatenation?
 30994 00004397 BA[0690]                	mov	dx,OVERWR_PTR
 30995                                  	;je	short COPERR		; not concatenating - overwrite error
 30996                                  	; 26/03/2023
 30997 0000439A 7503                    	jne	short No_Concat_Err
 30998 0000439C E92401                  	jmp	COPYERR
 30999                                  	
 31000                                  No_Concat_Err:	; concatenating
 31001 0000439F C606[459F]01            	mov	byte [NOWRITE],1 	; flag not writing (just seeking)
 31002                                  ProcDest:
 31003                                  	; MSDOS 6.0
 31004                                  	;mov	ax,(ExtOpen<<8)		; open the file
 31005                                  	; 26/03/2023
 31006 000043A4 B8006C                  	mov	ax,6C00h
 31007 000043A7 BE[2E9E]                	mov	si,DestBuf		; get file name
 31008                                  ;M046
 31009                                  ; For writes, we want to deny writes by anyone else at the same time that we
 31010                                  ;are writing to it. For instance, on a network, 2 workstations could try
 31011                                  ;writing to the same file. Also, because we opened the source file with
 31012                                  ;DENY NONE, it is fine if the source and destination files are the same as
 31013                                  ;would happen when we append to an existing file.
 31014                                  
 31015                                  	; 26/03/2023
 31016                                  	;mov	bx,deny_write|write_open_mode
 31017 000043AA BB2100                  	mov	bx,21h			; get open mode for copy; M046
 31018 000043AD 31C9                    	xor	cx,cx			; no special files
 31019                                  	;mov	dx,write_open_flag	; set up open flags
 31020 000043AF BA0101                  	mov	dx,101h	
 31021                                  
 31022 000043B2 803E[459F]00            	cmp	byte [NOWRITE],0
 31023 000043B7 7503                    	jne	short DoDestOpen	; don't actually create if nowrite set
 31024                                  	;mov	dx,creat_open_flag	; set up create flags
 31025 000043B9 BA1201                  	mov	dx,112h
 31026                                  
 31027                                  	; 26/03/2023
 31028                                  	; MSDOS 3.3
 31029                                  	;mov	ax,(OPEN*256)+1 ; 3D01h ; open file, write access
 31030                                  	;cmp	byte [NOWRITE],0
 31031                                  	;jne	short DODESTOPEN
 31032                                  	;mov	ah,CREAT ; 3Ch
 31033                                  	;xor	cx,cx
 31034                                  ;DODESTOPEN:
 31035                                  	;mov	dx,DESTBUF
 31036                                  	;int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 31037                                  	;		; CX = attributes for file
 31038                                  	;		; DS:DX	-> ASCIZ filename (may include drive and path)
 31039                                  
 31040                                  ; 26/03/2023
 31041                                  ;	; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 301Ch
 31042                                  ;	;mov	dx,FULDIRPTR
 31043                                  ;	;call	GET_EXT_ERR_NUMBER
 31044                                  ;	;jc	short COPERR
 31045                                  ;
 31046                                  ;	; 01/10/2018
 31047                                  ;	;jnc	short DEST_OPEN_OKAY
 31048                                  ;		
 31049                                  ;	;mov	dx,FULDIRPTR
 31050                                  ;	;call	GET_EXT_ERR_NUMBER
 31051                                  ;	;jmp	short COPERR
 31052                                  ;
 31053                                  ;	jc	short DEST_OPEN_ERROR
 31054                                  
 31055                                  	; 26/03/2023
 31056                                  DoDestOpen:
 31057 000043BC CD21                    	int     21h	; DOS - 4.0 - EXTENDED OPEN/CREATE
 31058                                  			; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
 31059                                  			; BH = flags
 31060                                  			; CX = create attribute
 31061                                  			; DL = action if file exists/does not exists
 31062                                  			; DH = 00h (reserved), DS:SI -> ASCIZ file name
 31063                                  
 31064                                  ;	We assume that the error is normal.
 31065                                  ;	TriageError will correct the DX value appropriately.
 31066                                  	
 31067 000043BE 7311                    	jnc	short Dest_Open_Okay
 31068                                  Xa_Set_Error:				;AN030; error occurred on XA
 31069 000043C0 E876DC                  	call	Set_Ext_Error_Msg	;AN030; get extended error
 31070                                  
 31071                                  	; 26/04/2023 - Retro DOS v4.0 ( 4.1) COMMAND.COM
 31072                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3F46h
 31073                                  Ext_Err_Set:				;AN030;
 31074 000043C3 C706[129E][2E9E]        	mov	word [string_ptr_2],DestBuf
 31075                                  					;AN000; get address of failed string
 31076 000043C9 C606[DC8F]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 31077                                  					;AN030; put number of subst in control block
 31078                                  CopErrJ2:				;AN030;
 31079 000043CE E9F200                  	jmp	COPYERR			;AN030; go issue message
 31080                                  
 31081                                  ;DEST_OPEN_OKAY:
 31082                                  	; 26/03/2023
 31083                                  Dest_Open_Okay:
 31084 000043D1 A3[859E]                	mov	[DESTHAND],ax		; save handle
 31085 000043D4 C606[839C]01            	mov	byte [CFLAG],1		; destination now exists
 31086 000043D9 89C3                    	mov	bx,ax
 31087 000043DB B80044                  	mov	ax,IOCTL*256 ; 4400h 	; get device stuff
 31088 000043DE CD21                    	int	21h	   	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 31089                                  			   	; BX = file or device handle
 31090                                  
 31091 000043E0 8816[879E]              	mov	[DESTISDEV],dl		; set dest info
 31092                                  	; 18/04/2023
 31093 000043E4 F6C280                  	test	dl,80h
 31094                                  	;test	dl,devid_ISDEV
 31095 000043E7 7430                    	jz	short Exists		; Dest not a device
 31096                                  
 31097                                  ;	Destination is device.
 31098                                  
 31099 000043E9 A0[7F9C]                	mov	al,[DestSwitch]
 31100                                  	; 26/03/2023
 31101 000043EC 240C                    	and	al,0Ch
 31102                                  	;and	al,SWITCHA+SWITCHB ; 4+8
 31103 000043EE 7509                    	jnz	short TestBoth
 31104 000043F0 A0[4A9F]                	mov	al,[ASCII]		; neither set, use current setting
 31105 000043F3 0A06[469F]              	or	al,[BINARY]
 31106 000043F7 7416                    	jz	short ExSetA		; neither set, default to ascii
 31107                                  TestBoth:
 31108 000043F9 7A1E                    	jpe	short Exists		; both are set, ignore
 31109 000043FB A808                    	test	al,8
 31110                                  	;test	al,SWITCHB
 31111 000043FD 741A                    	jz	short Exists
 31112                                  	;mov	ax,(IOCTL shl 8) or 1
 31113 000043FF B80144                  	mov	ax,(IOCTL<<8)|1 ; 4401h
 31114 00004402 30F6                    	xor	dh,dh
 31115                                  	; 18/04/2023
 31116 00004404 80CA20                  	or	dl,20h
 31117                                  	;or	dl,devid_RAW
 31118 00004407 8816[879E]              	mov	[DESTISDEV],dl
 31119 0000440B CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 31120                                  			; BX = device handle,DH = 0
 31121                                  			; DL = device information to set (bits 0-7 from	function 0)
 31122 0000440D EB0A                    	jmp	short Exists
 31123                                  
 31124                                  	; 26/03/2023
 31125                                  	; 01/10/2018 - Retro DOS v3.0 modification
 31126                                  ;DEST_OPEN_ERROR:
 31127                                  	;mov	dx,FULDIRPTR
 31128                                  	;call	GET_EXT_ERR_NUMBER
 31129                                  ;COPERR:
 31130                                  	; 26/03/2023
 31131                                  ;CopyErrj:
 31132                                  	;jmp	short COPYERR
 31133                                  
 31134                                  ExSetA:
 31135                                  ;	What we read in may have been in binary mode, flag zapped write OK
 31136                                  
 31137 0000440F C606[4A9F]04            	mov	byte [ASCII],4
 31138                                  	;mov	byte [ASCII],SWITCHA	; set ascii mode
 31139 00004414 800E[449F]04            	or	byte [INEXACT],4
 31140                                  	;or	byte [INEXACT],SWITCHA	; ascii -> inexact
 31141                                  Exists:
 31142 00004419 803E[459F]00            	cmp	byte [NOWRITE],0
 31143 0000441E 7524                    	jnz	short NoChecking	; if nowrite don't bother with name check
 31144 00004420 803E[089E]01            	cmp	byte [plus_comma],1	; don't check if just doing +,,
 31145 00004425 741D                    	jz	short NoChecking
 31146 00004427 E86A03                  	call	COMPNAME		; source and dest. the same?
 31147 0000442A 7518                    	jnz	short NoChecking	; if not, go ahead
 31148 0000442C 803E[EA9E]00            	cmp	byte [SRCISDEV],0
 31149 00004431 7511                    	jne	short NoChecking	; same name on device ok
 31150                                  
 31151                                  ;	At this point we know in append (would have gotten overwrite error
 31152                                  ;	on first destination create otherwise), and user trying to specify
 31153                                  ;	destination which has been scribbled already (if dest had been named
 31154                                  ;	first, NoWrite would be set).
 31155                                  
 31156 00004433 BA[0990]                	mov	dx,LOSTERR_PTR		; tell him he's not going to get it
 31157                                  	;invoke	Std_EprintF		;ac022;
 31158                                  	; 26/03/2023
 31159 00004436 E8E70F                  	call	std_eprintf ; MSDOS 6.0 (& 5.0)
 31160                                  	;call	STD_PRINTF  ; MSDOS 3.3	
 31161 00004439 C706[899C]0000          	mov	word [NXTADD],0		; set return
 31162 0000443F FE06[499F]              	inc	byte [TERMREAD]		; tell read to give up
 31163                                  Ret60:
 31164 00004443 C3                      	retn
 31165                                  
 31166                                  NoChecking:
 31167 00004444 8B1E[859E]              	mov	bx,[DESTHAND]		; get handle
 31168 00004448 31C9                    	xor	cx,cx
 31169 0000444A 870E[899C]              	xchg	cx,[NXTADD]
 31170 0000444E E3F3                    	jcxz	Ret60			; if nothing to write, forget it
 31171 00004450 FF06[479F]              	inc	word [WRITTEN]		; flag that we wrote something
 31172 00004454 803E[459F]00            	cmp	byte [NOWRITE],0	; if nowrite set, just seek cx bytes
 31173 00004459 7514                    	jnz	short SeekEnd
 31174 0000445B 31D2                    	xor	dx,dx
 31175 0000445D 1E                      	push	ds
 31176 0000445E 8E1E[659C]              	mov	ds,[TPA]
 31177 00004462 B440                    	mov	ah,Write ; 40h
 31178 00004464 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 31179                                  			; BX = file handle,CX = number of bytes to write,DS:DX -> buffer
 31180 00004466 1F                      	pop	ds
 31181 00004467 BA[EE8F]                	mov	dx,NOSPACE_PTR
 31182                                  	;jc	short COPERRP		; failure
 31183                                  	; 26/03/2023
 31184                                  	; MSDOS 6.0
 31185 0000446A 7338                    	jnc	short NoChecking2
 31186 0000446C E951FF                  	jmp	Xa_Set_Error
 31187                                  
 31188                                  	; 18/04/2023
 31189                                  	; 26/03/2023
 31190                                  SeekEnd:
 31191 0000446F 31D2                    	xor	dx,dx
 31192 00004471 87D1                    	xchg	dx,cx
 31193                                  	;mov	ax,(LSEEK shl 8) or 1
 31194 00004473 B80142                  	mov	ax,(LSEEK<<8)|1 ; 4201h
 31195 00004476 CD21                    	int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 31196                                  				; AL = method: offset from present location
 31197                                  
 31198                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 31199                                  %if 1
 31200 00004478 C606[799C]01            	mov	byte [notzerofile],1 ; (existing) destination file size is not zero
 31201 0000447D 85C0                    	test	ax,ax
 31202 0000447F 7509                    	jnz	short SeekEnd_@
 31203 00004481 85D2                    	test	dx,dx
 31204 00004483 7505                    	jnz	short SeekEnd_@
 31205 00004485 C606[799C]00            	mov	byte [notzerofile],0 ; (existing) destination file size is zero
 31206                                  SeekEnd_@:
 31207                                  %endif
 31208                                  	; 26/03/2023
 31209                                  	; MSDOS 6.0
 31210                                  
 31211                                  ;	Save the file pointer in DX:AX to restore the file
 31212                                  ;	with in case the copy should fail.
 31213                                  
 31214 0000448A A3[519F]                	mov	[OFilePtr_Lo],ax
 31215 0000448D 8916[539F]              	mov	[OFilePtr_Hi],dx
 31216                                  
 31217                                  	; 26/03/2023
 31218                                  	; MSDOS 3.3  MSDOS 6.0
 31219                                  
 31220 00004491 803E[769C]00            	cmp	byte [RDEOF],0
 31221 00004496 740B                    	jz	short Retz60
 31222                                  
 31223                                  ;	^Z has been read - we must set the file size to the current
 31224                                  ;	file pointer location
 31225                                  
 31226 00004498 B440                    	mov	ah,Write ; 40h
 31227 0000449A CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 31228                                  				; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 31229                                  
 31230                                  	; 26/03/2023
 31231                                  	; MSDOS 6.0
 31232 0000449C 727E                    	jc	short Xa_Set_Error_Jmp	;AC022; failure
 31233                                  
 31234                                  ;	Make note that ^Z was removed, in case the
 31235                                  ;	copy should fail and we need to restore the file.
 31236                                  
 31237 0000449E C606[559F]1A            	mov	byte [OCtrlZ],1Ah
 31238                                  Retz60:
 31239 000044A3 C3                      	retn
 31240                                  
 31241                                  NoChecking2:
 31242 000044A4 29C1                    	sub	cx,ax
 31243 000044A6 749B                    	jz	short Ret60		; wrote all supposed to
 31244                                  	; 18/04/2023
 31245 000044A8 F606[879E]80            	test	byte [DESTISDEV],80h ; devid_ISDEV
 31246                                  	;test	byte [DESTISDEV],devid_ISDEV ;80h
 31247 000044AD 7414                    	jz	short COPYERR		; is a file, error
 31248 000044AF F606[879E]20            	test	byte [DESTISDEV],20h  ; devid_RAW
 31249                                  	;test	byte [DESTISDEV],devid_RAW ; 20h
 31250 000044B4 750A                    	jnz	short DevWrtErr	; is a raw device, error
 31251 000044B6 803E[449F]00            	cmp	byte [INEXACT],0
 31252 000044BB 7586                    	jnz	short Ret60		; inexact so ok
 31253 000044BD 49                      	dec	cx
 31254                                  ;Retz60:
 31255 000044BE 7483                    	jz	short Ret60		; wrote one byte less (the ^z)
 31256                                  
 31257                                  DevWrtErr:
 31258 000044C0 BA[9691]                	mov	dx,DEVWMES_PTR
 31259                                  	; 26/03/2023
 31260                                  COPYERR:
 31261                                  	;invoke	Std_EPrintF		;AC022;
 31262 000044C3 E85A0F                  	call	std_eprintf  ; MSDOS 6.0
 31263                                  	;call	STD_PRINTF   ; MSDOS 3.3
 31264                                  CopErrP:
 31265 000044C6 FE06[849C]              	inc	byte [DestClosed]
 31266 000044CA 803E[839C]00            	cmp	byte [CFLAG],0
 31267 000044CF 7448                    	jz	short EndCopyJ		; never actually got it open
 31268 000044D1 8B1E[859E]              	mov	bx,[DESTHAND]
 31269 000044D5 83FB00                  	cmp	bx,0
 31270 000044D8 7E33                    	jle	short NoClose
 31271                                  
 31272                                  ;	Check to see if we should save part of the destination file.
 31273                                  
 31274                                  	; 26/03/2023
 31275                                  	; MSDOS 6.0
 31276 000044DA 8B0E[539F]              	mov	cx,[OFilePtr_Hi]	; CX = hi word of original file ptr
 31277 000044DE 8B16[519F]              	mov	dx,[OFilePtr_Lo]	; DX = lo word of original file ptr
 31278                                  			
 31279 000044E2 89C8                    	mov	ax,cx
 31280 000044E4 09D0                    	or	ax,dx
 31281 000044E6 7421                    	jz	short ceClose		; null file ptr means nothing to save
 31282                                  
 31283                                  ;	Destination was also the first source. Do the best we can to
 31284                                  ;	restore it. Truncate it back to the size we took from it (which
 31285                                  ;	may have been due to a Ctrl-Z, so may not have included the whole
 31286                                  ;	file). If a Ctrl-Z was originally read, put it back.
 31287                                  
 31288 000044E8 B80042                  	mov	ax,(LSEEK<<8) ; 4200h
 31289 000044EB CD21                    	int	21h
 31290                                  
 31291 000044ED 31C9                    	xor	cx,cx			; CX = # bytes to write = 0
 31292 000044EF B440                    	mov	ah,Write ; 40h
 31293 000044F1 CD21                    	int	21h			; truncate file
 31294                                  
 31295 000044F3 803E[559F]00            	cmp	byte [OCtrlZ],0
 31296 000044F8 7408                    	je	short ceClose0		; no ctrl-z removed from original
 31297 000044FA 41                      	inc	cx			; CX = # bytes to write = 1
 31298 000044FB BA[559F]                	mov	dx,OCtrlZ		; DS:DX = ptr to original ctrl-z
 31299 000044FE B440                    	mov	ah,Write ; 40h
 31300 00004500 CD21                    	int	21h			; write ctrl-z
 31301                                  ceClose0:
 31302 00004502 B43E                    	mov	ah,CLOSE ; 3Eh
 31303 00004504 CD21                    	int	21h			; close it
 31304                                  ;;	;mov	byte [CFLAG],0
 31305 00004506 E9C8F8                  	jmp	ENDCOPY			; and go home
 31306                                  
 31307                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31308                                  ceClose:
 31309 00004509 B43E                    	mov	ah,CLOSE ; 3Eh		; close the file
 31310 0000450B CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 31311                                  				; BX = file handle
 31312                                  NoClose:
 31313 0000450D BA[2E9E]                	mov	dx,DestBuf
 31314 00004510 B441                    	mov	ah,Unlink ; 41h 	; and delete it
 31315 00004512 CD21                    	int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
 31316                                  				; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
 31317 00004514 C606[839C]00            	mov	byte [CFLAG],0
 31318                                  EndCopyJ:
 31319 00004519 E9B5F8                  	jmp	ENDCOPY
 31320                                  
 31321                                  Xa_Set_Error_Jmp:			;AN022; go set up error message
 31322 0000451C E9A1FE                  	jmp	Xa_Set_Error
 31323                                  
 31324                                  ;============================================================================
 31325                                  ; COPYPR2.ASM, MSDOS 6.0, 1991
 31326                                  ;============================================================================
 31327                                  ; 01/10/2018 - Retro DOS v3.0
 31328                                  
 31329                                  ; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 311Fh
 31330                                  
 31331                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31332                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4095h
 31333                                  
 31334                                  ; =============== S U B	R O U T	I N E =======================================
 31335                                  
 31336                                  ;***	SetAsc - set Ascii, Binary, Inexact flags based on switches
 31337                                  ;
 31338                                  ;	Given switch vector in AX,
 31339                                  ;	  Set Ascii flag if /a is set
 31340                                  ;	  Clear Ascii flag if /b is set
 31341                                  ;	  Binary set if /b specified
 31342                                  ;	  Leave Ascii unchanged if neither or both are set
 31343                                  ; 	Also sets Inexact if Ascii is ever set. 
 31344                                  ;	AL = Ascii on exit, flags set
 31345                                  
 31346                                  	; 26/03/2023
 31347                                  SETASC:
 31348                                  	;and	al,SWITCHA+SWITCHB ; 0Ch ; AL = /a, /b flags
 31349 0000451F 240C                    	and	al,0Ch ; 4+8
 31350 00004521 7A10                    	jpe	short LOADSW	; even parity - both or neither
 31351 00004523 50                      	push	ax
 31352                                  	;and	al,SWITCHB  ; 8
 31353 00004524 2408                    	and	al,8
 31354 00004526 A2[469F]                	mov	[BINARY],al
 31355 00004529 58                      	pop	ax
 31356                                  	;and	al,SWITCHA
 31357 0000452A 2404                    	and	al,4	
 31358 0000452C A2[4A9F]                	mov	[ASCII],al
 31359 0000452F 0806[449F]              	or	[INEXACT],al
 31360                                  LOADSW:
 31361 00004533 A0[4A9F]                	mov	al,[ASCII]
 31362 00004536 08C0                    	or	al,al
 31363 00004538 C3                      	retn
 31364                                  
 31365                                  ; =============== S U B	R O U T	I N E =======================================
 31366                                  
 31367                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31368                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 31369                                  	; 10/08/2024 - Retro DOS v5.0 COMMAND.COM
 31370                                  BUILDDEST:
 31371 00004539 803E[299E]FF            	cmp	byte [DestIsDir],-1 ; 0FFh
 31372 0000453E 750F                    	jnz	short KNOWABOUTDEST	; figuring already done
 31373 00004540 BF[459B]                	mov	di,USERDIR1
 31374 00004543 BD[299E]                	mov	bp,DestVars
 31375                                  
 31376                                  ; 10/08/2024 - PCDOS 7.1 COMMAND.COM
 31377                                  %if 1
 31378                                  	;mov	bx,deny_none|write_open_mode
 31379 00004546 BB4100                  	mov	bx,41h			; open mode for COPY ;M046
 31380                                  %endif
 31381                                  
 31382 00004549 E8DF00                  	call	BUILDPATH
 31383 0000454C E8D2E2                  	call	RestUDir1
 31384                                  
 31385                                  ;	We now know all about the destination
 31386                                  
 31387                                  KNOWABOUTDEST:
 31388 0000454F 30C0                    	xor	al,al
 31389 00004551 8606[889E]              	xchg	al,[FIRSTDEST]
 31390 00004555 08C0                    	or	al,al
 31391 00004557 7503                    	jnz	short FIRSTDST
 31392 00004559 E98C00                  	jmp	NOFIRSTDEST
 31393                                  
 31394                                  FIRSTDST:
 31395                                  ;	Create an fcb of the original dest.
 31396                                  
 31397 0000455C 8B36[2B9E]              	mov	si,[DestTail]
 31398 00004560 BF[689D]                	mov	di,DestFcb
 31399 00004563 B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 31400 00004566 CD21                    	int	21h		; DOS -	PARSE FILENAME
 31401                                  				; DS:SI	-> string to parse
 31402                                  				; ES:DI	-> buffer to fill with unopened	FCB
 31403                                  				; AL = bit mask	to control parsing
 31404 00004568 803C00                  	cmp	byte [si],0
 31405 0000456B 7406                    	jz	short GOODPARSE
 31406                                  
 31407                                  	; 27/03/2023	
 31408                                  	; MSDOS 6.0
 31409                                  	;mov	byte [di+1],"|"	;AD052; must be illegal file name character
 31410                                  	
 31411 0000456D BA[F48F]                	mov	dx,FULLDIR_PTR		;AN052; issue "file creation error"
 31412 00004570 E950FF                  	jmp	COPYERR			;AN052;
 31413                                  GOODPARSE:
 31414 00004573 A1[2E9E]                	mov	ax,[DestBuf]		; AX = possible "d:"
 31415 00004576 80FC3A                  	cmp	ah,':'
 31416 00004579 7402                    	jz	short DRVSPEC4
 31417 0000457B B040                    	mov	al,'@'  ; 40h
 31418                                  DRVSPEC4:
 31419                                  ;	AX = "d:" for following FCB drive computation
 31420                                  
 31421 0000457D 8A0E[4A9F]              	mov	cl,[ASCII]		; CL = saved Ascii flag
 31422 00004581 0C20                    	or	al,20h
 31423 00004583 2C60                    	sub	al,60h
 31424 00004585 A2[689D]                	mov	[DestFcb],al		; store drive # in FCB
 31425                                  
 31426                                  ;*	Figure out what copy mode we're in.
 31427                                  ;	Letters stand for unambiguous, * for ambiguous pathnames.
 31428                                  ;	+n stands for additional sources delimited by +'s.
 31429                                  ;
 31430                                  ;	copy a b	not concatenating
 31431                                  ;	copy a *	not concatenating
 31432                                  ;	copy * a	concatenating
 31433                                  ;	copy * *	not concatenating
 31434                                  ;	copy a+n b	concatenating
 31435                                  ;	copy *+n a	concatenating
 31436                                  ;	copy *+n *	concatenating, Mel Hallerman style
 31437                                  
 31438                                  ;	Bugbug:  copy *.a+a.b *.t  picks up only 1st *.a file.. Why?
 31439                                  ;		 copy a.b+*.a *.t  picks up all *.a files.
 31440                                  
 31441 00004588 A0[2D9E]                	mov	al,[DestInfo]		; AL = destination CParse flags
 31442 0000458B 8A26[909E]              	mov	ah,[SrcInfo]		; AH = source CParse flags
 31443 0000458F 250202                  	and	ax,202h			; AH,AL = source,dest wildcard flags
 31444 00004592 08C0                    	or	al,al
 31445 00004594 7413                    	jz	short NOTMELCOPY 	; no destination wildcard
 31446                                  
 31447                                  ;	Destination is wildcarded.
 31448                                  	
 31449 00004596 38E0                    	cmp	al,ah
 31450 00004598 750F                    	jnz	short NOTMELCOPY ; no source wildcard
 31451                                  
 31452                                  ;	Source and destination are both wildcarded.
 31453                                  
 31454 0000459A 803E[4B9F]00            	cmp	byte [PLUS],0
 31455 0000459F 7408                    	jz	short NOTMELCOPY	; no +'s in source
 31456                                  
 31457                                  ;	Source and destination are wildcarded, and source includes +'s.
 31458                                  ;	It's Mel Hallorman copy time.
 31459                                  
 31460 000045A1 FE06[899E]              	inc	byte [MELCOPY]		; 'Mel copy' = true
 31461 000045A5 30C0                    	xor	al,al
 31462 000045A7 EB06                    	jmp	short SETCONC
 31463                                  
 31464                                  NOTMELCOPY:
 31465 000045A9 3402                    	xor	al,2			; AL=0 -> ambiguous destination, 2 otherwise
 31466 000045AB 20E0                    	and	al,ah
 31467 000045AD D0E8                    	shr	al,1			; AL=1 -> ambiguous source, unambiguous dest
 31468                                  					;   (implies concatenation)
 31469                                  SETCONC:
 31470 000045AF 0A06[4B9F]              	or	al,[PLUS]		; "+" always infers concatenation
 31471                                  
 31472                                  ;	Whew. AL = 1 if concatenating, 0 if not.
 31473                                  
 31474 000045B3 A2[789C]                	mov	[Concat],al
 31475 000045B6 D0E0                    	shl	al,1
 31476 000045B8 D0E0                    	shl	al,1
 31477 000045BA A2[449F]                	mov	[INEXACT],al		; concatenation -> inexact copy
 31478 000045BD 803E[469F]00            	cmp	byte [BINARY],0
 31479 000045C2 7524                    	jne	short NOFIRSTDEST 	; explicit binary copy
 31480                                  
 31481                                  	; 13/06/2023 - Retro DOS v4.2 COMMAND.COM
 31482                                  	; MSDOS 6.0 (MSDOS 5.0)
 31483                                  	;mov	[ASCII],al		; otherwise, concatenate in ascii mode
 31484                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:48FAh
 31485                                  	;or	[ASCII],al
 31486                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 31487                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:47C5h  
 31488 000045C4 A2[4A9F]                	mov	[ASCII],al
 31489                                  
 31490 000045C7 08C9                    	or	cl,cl
 31491 000045C9 751D                    	jnz	short NOFIRSTDEST 	; Ascii flag set before, data read correctly
 31492 000045CB 08C0                    	or	al,al
 31493 000045CD 7419                    	jz	short NOFIRSTDEST 	; Ascii flag did not change state
 31494                                  
 31495                                  ;	At this point there may already be binary read data in the read
 31496                                  ;	buffer. We need to find the first ^Z (if there is one) and trim the
 31497                                  ;	amount of data in the buffer correctly.
 31498                                  
 31499 000045CF 8B0E[899C]              	mov	cx,[NXTADD]
 31500 000045D3 E313                    	jcxz	NOFIRSTDEST		; no data, everything ok
 31501 000045D5 B01A                    	mov	al,1Ah
 31502 000045D7 06                      	push	es
 31503 000045D8 31FF                    	xor	di,di
 31504 000045DA 8E06[659C]              	mov	es,[TPA]
 31505 000045DE F2AE                    	repne	scasb			; scan for EOF
 31506 000045E0 07                      	pop	es
 31507 000045E1 7505                    	jnz	short NOFIRSTDEST 	; no ^z in buffer, everything ok
 31508 000045E3 4F                      	dec	di			; point at ^z
 31509 000045E4 893E[899C]              	mov	[NXTADD],di		; new buffer length
 31510                                  
 31511                                  NOFIRSTDEST:
 31512 000045E8 BB[AC9D]                	mov	bx,DIRBUF+1		; Source of replacement chars
 31513 000045EB 803E[789C]00            	cmp	byte [Concat],0
 31514 000045F0 7403                    	jz	short GOTCHRSRC		; Not a concat
 31515 000045F2 BB[F29D]                	mov	bx,SDIRBUF+1		; Source of replacement chars
 31516                                  GOTCHRSRC:
 31517 000045F5 BE[699D]                	mov	si,DestFcb+1		; Original dest name
 31518 000045F8 8B3E[2B9E]              	mov	di,[DestTail]		; Where to put result
 31519                                  
 31520                                  ; --------------- S U B	R O U T	I N E --------------------------------------- 
 31521                                  
 31522                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31523                                  BUILDNAME:
 31524 000045FC B90800                  	mov	cx,8
 31525                                  BUILDMAIN:
 31526 000045FF AC                      	lodsb
 31527 00004600 3C3F                    	cmp	al,'?'
 31528 00004602 7502                    	jne	short NOTAMBIG
 31529 00004604 8A07                    	mov	al,[bx]
 31530                                  NOTAMBIG:
 31531 00004606 3C20                    	cmp	al,' '
 31532 00004608 7401                    	je	short NOSTORE
 31533 0000460A AA                      	stosb
 31534                                  NOSTORE:
 31535 0000460B 43                      	inc	bx
 31536 0000460C E2F1                    	loop	BUILDMAIN
 31537 0000460E B103                    	mov	cl,3
 31538                                  	;mov	al,' ' ; 20h
 31539                                  	;cmp	[si],al
 31540                                  	; 27/03/2023
 31541 00004610 803C20                  	cmp	byte [si],20h ; ' '
 31542 00004613 7412                    	je	short ENDDEST		; No extension
 31543                                  	;mov	al,[DOT_CHR]
 31544                                  	; 27/03/2023
 31545 00004615 B02E                    	mov	al,'.' ; 2Eh ; dot_chr
 31546 00004617 AA                      	stosb
 31547                                  BUILDEXT:
 31548 00004618 AC                      	lodsb
 31549 00004619 3C3F                    	cmp	al,'?'
 31550 0000461B 7502                    	jne	short NOTAMBIGE
 31551 0000461D 8A07                    	mov	al,[bx]
 31552                                  NOTAMBIGE:
 31553 0000461F 3C20                    	cmp	al,' '
 31554 00004621 7401                    	je	short NOSTOREE
 31555 00004623 AA                      	stosb
 31556                                  NOSTOREE:
 31557 00004624 43                      	inc	bx
 31558 00004625 E2F1                    	loop	BUILDEXT
 31559                                  ENDDEST:
 31560 00004627 30C0                    	xor	al,al
 31561 00004629 AA                      	stosb				; NUL terminate
 31562 0000462A C3                      	retn
 31563                                  
 31564                                  ; =============== S U B	R O U T	I N E =======================================
 31565                                  
 31566                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31567                                  	; 28/03/2023
 31568                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31569                                  	; 10/08/2024 - Retro DOS v5.0 COMMAND.COM
 31570                                  BUILDPATH:
 31571 0000462B F6460402                	test	byte [bp+VARSTRUC.INFO],2 ; test byte [bp+4],2
 31572 0000462F 7540                    	jnz	short NOTPFILE		; If ambig don't bother with open
 31573 00004631 89EA                    	mov	dx,bp			; Set DX to spec
 31574 00004633 83C205                  	add	dx,VARSTRUC.BUF 	; add dx,5
 31575                                  
 31576                                  	; 27/03/2023
 31577                                  	; MSDOS 6.0
 31578 00004636 57                      	push	di			;AN000;
 31579 00004637 B8006C                  	mov	ax,(ExtOpen<<8)	; 6C00h	;AC000; open the file
 31580                                  
 31581                                  ; 10/08/2024 - PCDOS 7.1 COMMAND.COM
 31582                                  %if 0
 31583                                  	;mov	bx,deny_none|read_open_mode
 31584                                  	mov	bx,40h			; open mode for COPY ;M046
 31585                                  %endif
 31586 0000463A 31C9                    	xor	cx,cx			;AN000; no special files
 31587 0000463C 89D6                    	mov	si,dx			;AN030; get file name offset
 31588                                  	;mov	dx,read_open_flag	;AN000; set up open flags
 31589 0000463E BA0101                  	mov	dx,101h
 31590 00004641 CD21                    	INT	21h
 31591 00004643 5F                      	pop	di			;AN000;
 31592 00004644 7315                    	jnc	short PURE_FILE		;AN022; is pure file
 31593 00004646 E800DA                  	call	get_ext_error_number	;AN022; get the extended error
 31594                                  	;cmp	ax,2
 31595 00004649 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ;AN022; if file not found - okay
 31596 0000464C 7423                    	jz	short NOTPFILE		;AN022;
 31597                                  	;cmp	ax,3
 31598 0000464E 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 31599 00004651 741E                    	jz	short NOTPFILE		;AN022;
 31600                                  	;cmp	ax,5
 31601 00004653 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 31602 00004656 7419                    	jz	short NOTPFILE		;AN022;
 31603 00004658 E923D7                  	jmp	extend_setup		;AN022; exit with error
 31604                                  
 31605                                  	; 27/03/2023
 31606                                  	; MSDOS 3.3
 31607                                  	;mov	ax,OPEN*256 ; 3D00h
 31608                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 31609                                  	;			; DS:DX	-> ASCIZ filename
 31610                                  	;			; AL = access mode
 31611                                  	;			; 0 - read
 31612                                  	;jc	short NOTPFILE
 31613                                  
 31614                                  PURE_FILE:
 31615 0000465B 89C3                    	mov	bx,ax
 31616 0000465D B80044                  	mov	ax,IOCTL*256 ; 4400h
 31617 00004660 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 31618                                  				; BX = file or device handle
 31619 00004662 B43E                    	mov	ah,CLOSE ;3Eh
 31620 00004664 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 31621                                  				; BX = file handle
 31622                                  	; 18/04/2023
 31623 00004666 F6C280                  	test	dl,80h
 31624                                  	;test	dl,devid_ISDEV ; test dl,80h
 31625 00004669 7553                    	jnz	short ISADEV
 31626 0000466B F6460404                	test	byte [bp+VARSTRUC.INFO],4 ; test byte [bp+4],4
 31627 0000466F 744D                    	jz	short ISADEV
 31628                                  NOTPFILE:
 31629 00004671 8B5605                  	mov	dx,[bp+VARSTRUC.BUF] ; mov dx,[bp+5]
 31630                                  	
 31631                                  	; 27/03/2023
 31632                                  	; MSDOS 6.0
 31633 00004674 80FA00                  	cmp	dl,0		     	;AN034; If no drive specified, get
 31634 00004677 7405                    	je	short SET_DRIVE_SPEC	;AN034;    default drive dir
 31635                                  
 31636 00004679 80FE3A                  	cmp	dh,':'
 31637 0000467C 7402                    	je	short DRVSPEC5
 31638                                  SET_DRIVE_SPEC:
 31639 0000467E B240                    	mov	dl,'@' ; 40h
 31640                                  DRVSPEC5:
 31641 00004680 80CA20                  	or	dl,20h
 31642 00004683 80EA60                  	sub	dl,60h		; A = 1
 31643 00004686 E8CAE2                  	call	SAVUDIR1
 31644                                  	
 31645                                  	; 27/03/2023
 31646                                  	; MSDOS 6.0
 31647 00004689 7306                    	jnc	short CURDIR_OK		;AN022; if error - exit
 31648 0000468B E8BBD9                  	call	get_ext_error_number	;AN022; get the extended error
 31649 0000468E E9EDD6                  	jmp	extend_setup		;AN022; exit with error
 31650                                  
 31651                                  CURDIR_OK:
 31652 00004691 89EA                    	mov	dx,bp
 31653                                  	;add	dx,5
 31654 00004693 83C205                  	add	dx,VARSTRUC.BUF		; Set DX for upcomming CHDIRs
 31655                                  	;mov	bh,[bp+4]
 31656 00004696 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 31657 00004699 80E706                  	and	bh,6
 31658 0000469C 80FF06                  	cmp	bh,6			; Ambig and path ?
 31659 0000469F 7518                    	jne	short CHECKAMB		; jmp if no
 31660                                  	;mov	si,[bp+2]
 31661 000046A1 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 31662 000046A4 B33A                    	mov	bl,':'
 31663 000046A6 385CFE                  	cmp	[si-2],bl
 31664 000046A9 7506                    	jne	short KNOWNOTSPEC
 31665                                  	;mov	byte [bp+VARSTRUC.ISDIR],2
 31666                                  					; Know is d:/file
 31667                                  	;mov	byte [bp+0],2
 31668 000046AB C6460002                	mov	byte [bp],2
 31669 000046AF EB05                    	jmp	short DOPCDJ
 31670                                  KNOWNOTSPEC:
 31671                                  	;mov	byte [bp+VARSTRUC.ISDIR],1
 31672                                  					; Know is path/file
 31673                                  	;mov	byte [bp+0],1
 31674 000046B1 C6460001                	mov	byte [bp],1
 31675 000046B5 4E                      	dec	si
 31676                                  DOPCDJ:
 31677 000046B6 E98300                  	jmp	DOPCD
 31678                                  CHECKAMB:
 31679 000046B9 80FF02                  	cmp	bh,2
 31680 000046BC 7505                    	jnz	short CHECKCD
 31681                                  ISSIMPFILE:
 31682                                  ISADEV:
 31683                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 31684                                  	;mov	byte [bp+0],0
 31685 000046BE C6460000                	mov	byte [bp],0
 31686 000046C2 C3                      	retn
 31687                                  CHECKCD:
 31688 000046C3 E84CEA                  	call	SetRest1
 31689 000046C6 B43B                    	mov	ah,CHDir ; 3Bh
 31690 000046C8 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 31691                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 31692 000046CA 7239                    	jb	short NOTPDIR
 31693 000046CC 89D7                    	mov	di,dx
 31694 000046CE 31C0                    	xor	ax,ax
 31695 000046D0 89C1                    	mov	cx,ax
 31696 000046D2 49                      	dec	cx
 31697                                  	; 14/06/2023
 31698                                  	;repne	scasb	 ; MSDOS 3.3
 31699                                  
 31700                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31701                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:424Ah)
 31702                                  	; MSDOS 6.0
 31703                                  Kloop:					;AN000;  3/3/KK
 31704 000046D3 268A05                  	mov	al,[es:di]		;AN000;  3/3/KK
 31705 000046D6 47                      	inc	di			;AN000;  3/3/KK
 31706 000046D7 08C0                    	or	al,al			;AN000;  3/3/KK
 31707 000046D9 740C                    	jz	short DONE		;AN000;  3/3/KK
 31708 000046DB 30E4                    	xor	ah,ah			;AN000;  3/3/KK
 31709 000046DD E87FE0                  	call	testkanj		;AN000;  3/3/KK
 31710 000046E0 74F1                    	jz	short Kloop		;AN000;  3/3/KK
 31711 000046E2 47                      	inc	di			;AN000;  3/3/KK
 31712 000046E3 FEC4                    	inc	ah			;AN000;  3/3/KK
 31713 000046E5 EBEC                    	jmp	short Kloop		;AN000;  3/3/KK
 31714                                  DONE:
 31715 000046E7 4F                      	dec	di
 31716 000046E8 A0[689C]                	mov	al,[DIRCHAR]
 31717                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 31718                                  	;mov	byte [bp+0],2
 31719 000046EB C6460002                	mov	byte [bp],2
 31720                                  	; 27/03/2023
 31721                                  	; MSDOS 6.0
 31722 000046EF 08E4                    	or	ah,ah			;AN000; 3/3/KK
 31723 000046F1 7505                    	jnz	short _STORE_PCHAR	;AN000; 3/3/KK
 31724                                  					;this is the trailing byte of ECS code
 31725                                  	;
 31726 000046F3 3A45FF                  	cmp	al,[di-1]
 31727 000046F6 7405                    	jz	short GOTSRCSLSH
 31728                                  _STORE_PCHAR:
 31729 000046F8 AA                      	stosb
 31730                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 ; know path/file
 31731                                  	;mov	byte [bp+0],1
 31732 000046F9 C6460001                	mov	byte [bp],1
 31733                                  GOTSRCSLSH:
 31734                                  	;or	byte [bp+4],6
 31735 000046FD 804E0406                	or 	byte [bp+VARSTRUC.INFO],6
 31736 00004701 E87400                  	call	SETSTARS
 31737                                  NOTPDIR_RETN:
 31738 00004704 C3                      	retn
 31739                                  
 31740                                  	; 28/03/2023
 31741                                  NOTPDIR:
 31742                                  	; MSDOS 6.0
 31743 00004705 E841D9                  	call	get_ext_error_number	;AN022; get the extended error
 31744                                  	;cmp	ax,3
 31745 00004708 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 31746 0000470B 7405                    	je	short NOTPDIR_TRY	;AN022;
 31747                                  	;cmp	ax,5
 31748 0000470D 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 31749 00004710 7560                    	jne	short EXTEND_SETUPJ	;AN022; otherwise - exit error
 31750                                  NOTPDIR_TRY:
 31751                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31752                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 31753                                  	;mov	byte [bp+0],0
 31754 00004712 C6460000                	mov	byte [bp],0
 31755                                  	;mov	bh,[bp+4]
 31756 00004716 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 31757 00004719 F6C704                  	test	bh,4
 31758 0000471C 74E6                    	jz	short NOTPDIR_RETN	; Know pure file, no path seps
 31759                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 31760                                  	;mov	byte [bp+0],2		
 31761 0000471E C6460002                	mov	byte [bp],2
 31762                                  	;mov	si,[bp+2]
 31763 00004722 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 31764 00004725 803C00                  	cmp	byte [si],0
 31765 00004728 744B                    	je	short BADCDERRJ2	; Trailing '/'
 31766                                  	;mov	bl,[DOT_CHR]
 31767                                  	; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 31768                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 31769 0000472A B32E                    	mov	bl,'.'  ; 2Eh ; dot_chr
 31770 0000472C 381C                    	cmp	[si],bl
 31771 0000472E 7445                    	je	short BADCDERRJ2	; If . or .. pure cd should have worked
 31772 00004730 B33A                    	mov	bl,':'  ; 3Ah
 31773 00004732 385CFE                  	cmp	[si-2],bl
 31774 00004735 7405                    	je	short DOPCD		; Know d:/file
 31775                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 
 31776                                  					; Know path/file
 31777                                  	;mov	byte [bp+0],1
 31778 00004737 C6460001                	mov	byte [bp],1
 31779 0000473B 4E                      	dec	si			; Point at last '/'
 31780                                  DOPCD:
 31781 0000473C 30DB                    	xor	bl,bl
 31782 0000473E 861C                    	xchg	bl,[si]			; Stick in a NUL
 31783 00004740 E8CFE9                  	call	SetRest1
 31784                                  
 31785                                  	; 28/03/2023
 31786                                  	; MSDOS 6.0 (& MSDOS 5.0)
 31787 00004743 39F2                    	cmp	dx,si			;AN000;  3/3/KK
 31788 00004745 771B                    	ja	short LookBack		;AN000;  3/3/KK
 31789 00004747 56                      	push	si			;AN000;  3/3/KK
 31790 00004748 51                      	push	cx			;AN000;  3/3/KK
 31791 00004749 89F1                    	mov	cx,si			;AN000;  3/3/KK
 31792 0000474B 89D6                    	mov	si,dx			;AN000;  3/3/KK
 31793                                  Kloop2: 				;AN000;  3/3/KK
 31794 0000474D AC                      	lodsb				;AN000;  3/3/KK
 31795 0000474E E80EE0                  	call	testkanj		;AN000;  3/3/KK
 31796 00004751 7409                    	jz	short NotKanj4		;AN000;  3/3/KK
 31797 00004753 AC                      	lodsb				;AN000;  3/3/KK
 31798 00004754 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 31799 00004756 72F5                    	jb	short Kloop2		;AN000;  3/3/KK
 31800 00004758 59                      	pop	cx			;AN000;  3/3/KK
 31801 00004759 5E                      	pop	si			;AN000;  3/3/KK
 31802 0000475A EB0B                    	jmp	short DoCdr		;AN000;  3/3/KK  Last char is ECS code, don't check for
 31803                                  					;		 trailing path sep
 31804                                  NotKanj4:				;AN000;  3/3/KK
 31805 0000475C 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 31806 0000475E 72ED                    	jb	short Kloop2		;AN000;  3/3/KK
 31807 00004760 59                      	pop	cx			;AN000;  3/3/KK
 31808 00004761 5E                      	pop	si			;AN000;  3/3/KK
 31809                                  LookBack:				;AN000;  3/3/KK
 31810                                  	; 28/03/2023
 31811                                  	; MSDOS 3.3 & MSDOS 6.0
 31812 00004762 3A5CFF                  	cmp	bl,[si-1]		; if double slash, then complain.
 31813 00004765 740E                    	je	short BADCDERRJ2
 31814                                  DoCdr:
 31815 00004767 B43B                    	mov	ah,CHDir ; 3Bh
 31816 00004769 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 31817                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 31818 0000476B 861C                    	xchg	bl,[si]
 31819 0000476D 7395                    	jnc	short NOTPDIR_RETN
 31820                                  	
 31821                                  	; 28/03/2023
 31822                                  	; MSDOS 3.3
 31823                                  ;BADCDERRJ2:
 31824                                  	;stc
 31825                                  	;jmp	BADCDERR
 31826                                  
 31827                                  	; 28/03/2023
 31828                                  	; MSDOS 6.0 (& MSDOS 5.0)
 31829 0000476F E8D7D8                  	call	get_ext_error_number	;AN022; get the extended error
 31830                                  EXTEND_SETUPJ:				;AN022;
 31831 00004772 E909D6                  	jmp	extend_setup		;AN022; go issue the error message
 31832                                  BADCDERRJ2:
 31833 00004775 E903D6                  	jmp	badpath_err		;AC022; go issue path not found message
 31834                                  
 31835                                  ; =============== S U B	R O U T	I N E =======================================
 31836                                  
 31837                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31838                                  SETSTARS:
 31839                                  	;mov	[bp+2],di
 31840 00004778 897E02                  	mov	[bp+VARSTRUC.TTAIL],di
 31841                                  	;add	byte [bp+1],12
 31842 0000477B 8046010C                	add	byte [bp+VARSTRUC.SIZ],12
 31843                                  	;;mov	ax,[DOT_QMARK] ; '?.' (2E3Fh)
 31844                                  	; 28/03/2023
 31845                                  	; MSDOS 6.0
 31846 0000477F B83F2E                  	mov	ax,dot_qmark ; 2E3Fh
 31847                                  	;mov	ax,'?.' ; dot_qmark
 31848                                  
 31849 00004782 B90800                  	mov	cx,8
 31850 00004785 F3AA                    	rep	stosb
 31851 00004787 86C4                    	xchg	al,ah
 31852 00004789 AA                      	stosb
 31853 0000478A 86C4                    	xchg	al,ah
 31854 0000478C B103                    	mov	cl,3
 31855 0000478E F3AA                    	rep	stosb
 31856 00004790 30C0                    	xor	al,al
 31857 00004792 AA                      	stosb
 31858 00004793 C3                      	retn
 31859                                  
 31860                                  ; =============== S U B	R O U T	I N E =======================================
 31861                                  
 31862                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31863                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 31864                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 31865                                  COMPNAME:
 31866 00004794 BE[2E9E]                	mov	si,DestBuf	; do name translate of target
 31867 00004797 BF[E899]                	mov	di,TRGXNAME	; save for name comparison
 31868 0000479A B460                    	mov	ah,xNameTrans ; 60h
 31869                                  	;mov	ah,60h
 31870 0000479C CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 31871                                  			; DS:SI	-> ASCIZ relative path string or directory name
 31872                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 31873 0000479E BE[9199]                	mov	si,SRCXNAME	; get name translate of source
 31874 000047A1 BF[E899]                	mov	di,TRGXNAME	; get name translate of target
 31875                                  	;call	STRCOMP
 31876                                  	;retn
 31877                                  	; 28/03/2023
 31878 000047A4 E91FE2                  	jmp	STRCOMP
 31879                                  
 31880                                  ;============================================================================
 31881                                  ; CPARSE.ASM, MSDOS 6.0, 1991
 31882                                  ;============================================================================
 31883                                  ; 30/09/2018 - Retro DOS v3.0
 31884                                  ; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31885                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31886                                  ; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 31887                                  
 31888                                  ;-----------------------------------------------------------------------;
 31889                                  ; ENTRY:								;
 31890                                  ;	DS:SI	Points input buffer					;
 31891                                  ;	ES:DI	Points to the token buffer				;
 31892                                  ;	BL	Special delimiter for this call 			;
 31893                                  ;		    Always checked last 				;
 31894                                  ;		    set it to space if there is no special delimiter	;
 31895                                  ; EXIT: 								;
 31896                                  ;	DS:SI	Points to next char in the input buffer 		;
 31897                                  ;	ES:DI	Points to the token buffer				;
 31898                                  ;	[STARTEL] Points to start of last element of path in token	;
 31899                                  ;		points to a NUL for no element strings 'd:' 'd:/'       ;
 31900                                  ;	CX	Character count 					;
 31901                                  ;	BH	Condition Code						;
 31902                                  ;			Bit 1H of BH set if switch character		;
 31903                                  ;				Token buffer contains char after	;
 31904                                  ;				switch character			;
 31905                                  ;				BP has switch bits set (ORing only)	;
 31906                                  ;			Bit 2H of BH set if ? or * in token		;
 31907                                  ;				if * found element ? filled		;
 31908                                  ;			Bit 4H of BH set if path sep in token		;
 31909                                  ;			Bit 80H of BH set if the special delimiter	;
 31910                                  ;			   was skipped at the start of this token	;
 31911                                  ;		Token buffer always starts d: for non switch tokens	;
 31912                                  ;	CARRY SET							;
 31913                                  ;	    if CR on input						;
 31914                                  ;		token buffer not altered				;
 31915                                  ;									;
 31916                                  ;	DOES NOT RETURN ON BAD PATH, OR TRAILING SWITCH CHAR ERROR	;
 31917                                  ; MODIFIES:								;
 31918                                  ;	CX, SI, AX, BH, DX and the Carry Flag				;
 31919                                  ;									;
 31920                                  ;-----------------------------------------------------------------------;
 31921                                  
 31922                                  ; Modifications to cparse: recognition of right and left parentheses
 31923                                  ; as integral tokens, and removal of automatic upper-case conversion code.
 31924                                  ;
 31925                                  ; Both modifications were installed in the course of adding a coherent
 31926                                  ; command-line parser to COMMAND.COM which builds a UNIX-style argv[]/argc
 31927                                  ; structure for command-line arguments. This parser relies on cparse to
 31928                                  ; recognize individual tokens.
 31929                                  ;
 31930                                  ; To process for-loops correctly, parentheses must therefore be
 31931                                  ; recognized as tokens. The upper-case conversion code was removed so
 31932                                  ; that commands (such as for and echo) would be able to use the "original"
 31933                                  ; text of the command line.
 31934                                  ;
 31935                                  ; Note also the modification to prevent the automatic conversion of colons
 31936                                  ; into spaces WITHIN THE SOURCE TEXT!
 31937                                  ;
 31938                                  ; Also note that BP is also clobbered if cparse recognizes any switches
 31939                                  ; on the command line.
 31940                                  ;
 31941                                  ; Alan L, OS/MSDOS				    14 August 1983
 31942                                  
 31943                                  ; ---------------------------------------------------------------------------
 31944                                  
 31945                                  ; COMEQU.ASM (MSDOS 6.0, 1991)
 31946                                  
 31947                                  ;FSWITCH	EQU	8000h
 31948                                  ;FBADSWITCH	EQU	4000h
 31949                                  
 31950                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3334h
 31951                                  
 31952                                  ; =============== S U B	R O U T	I N E =======================================
 31953                                  		
 31954                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31955                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 431Fh
 31956                                  
 31957                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 31958                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 4AE3h
 31959                                  
 31960                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 31961                                  	; PCDOS 7.1 COMMAND.COM (2003) Transient portion offset 49ABh
 31962                                  cparse:
 31963 000047A7 31C0                    	xor	ax,ax
 31964 000047A9 893E[669F]              	mov	[STARTEL],di		; No path element (Is DI correct?)
 31965 000047AD A2[699F]                	mov	[ELPOS],al		; Start in 8 char prefix
 31966                                  	; MSDOS 3.3
 31967                                  	;mov	[SOURCE],al		
 31968                                  	; MSDOS 6.0
 31969 000047B0 A2[6A9F]                	mov	[SKPDEL], al		; No skip delimiter yet
 31970 000047B3 88C7                    	mov	bh,al			; Init nothing
 31971 000047B5 9C                      	pushf				; save flags
 31972 000047B6 57                      	push	di			; save the token buffer addrss
 31973 000047B7 31C9                    	xor	cx,cx			; no chars in token buffer
 31974 000047B9 880E[079E]              	mov	[comma],cl		; reset comma flag
 31975                                  moredelim:
 31976 000047BD AC                      	lodsb
 31977 000047BE E8CBE1                  	call	DELIM
 31978 000047C1 751D                    	jnz	short SCANCDONE
 31979 000047C3 3C20                    	cmp	al,' '
 31980 000047C5 74F6                    	jz	short moredelim
 31981 000047C7 3C09                    	cmp	al,9
 31982 000047C9 74F2                    	jz	short moredelim
 31983                                  	;xchg	al,[SOURCE]
 31984                                  	; 28/03/2023
 31985 000047CB 8606[6A9F]              	xchg	al,[SKPDEL]
 31986 000047CF 08C0                    	or	al,al
 31987 000047D1 74EA                    	jz	short moredelim		; One non space/tab delimiter allowed
 31988 000047D3 F6C780                  	test	bh,80h			; has a special char been found?
 31989 000047D6 7405                    	jz	short no_comma		; no - just exit
 31990 000047D8 C606[079E]01            	mov	byte [comma],1		; set comma flag
 31991                                  no_comma:
 31992 000047DD E92A01                  	jmp	x_done			; Nul argument
 31993                                  
 31994                                  SCANCDONE:
 31995                                  	; 28/03/2023
 31996                                  	; MSDOS 6.0
 31997                                  	; -----------------------------------
 31998                                  	; Mod to avoid upper-case conversion.
 31999                                  	; -----------------------------------
 32000                                  	; MSDOS 3.3
 32001                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 32002                                  	;jnz	short cpcont1		; 3/3/KK
 32003                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 32004                                  cpcont1:
 32005                                  	; -----------------------------------
 32006                                  	; 28/03/2023
 32007 000047E0 38D8                    	cmp	al,bl			; Special delimiter?
 32008 000047E2 7505                    	jne	short nospec
 32009 000047E4 80CF80                  	or	bh,80h
 32010 000047E7 EBD4                    	jmp	short moredelim
 32011                                  nospec:
 32012 000047E9 3C0D                    	cmp	al,0Dh			; a CR?
 32013 000047EB 7503                    	jne	short ncperror
 32014 000047ED E91501                  	jmp	cperror
 32015                                  ncperror:
 32016 000047F0 3A06[679C]              	cmp	al,[SWITCHAR]		; is the char the switch char?
 32017 000047F4 7503                    	jne	short na_switch		; yes, process...
 32018 000047F6 E91401                  	jmp	a_switch
 32019                                  na_switch:
 32020 000047F9 B23A                    	mov	dl,':'
 32021 000047FB 3814                    	cmp	[si],dl
 32022 000047FD 751D                    	jne	short anum_chard	; Drive not specified
 32023                                  	; 28/03/2023
 32024                                  	; MSDOS 6.0 
 32025 000047FF 803E[169E]01            	cmp	byte [cpyflag],1	; 3/3/KK
 32026 00004804 7503                    	jne	short cpcont2		; 3/3/KK
 32027 00004806 E880DF                  	call	UPCONV			; 3/3/KK
 32028                                  cpcont2:
 32029 00004809 E85901                  	call	move_char
 32030 0000480C AC                      	lodsb				; Get the ':'
 32031 0000480D E85501                  	call	move_char
 32032 00004810 893E[669F]              	mov	[STARTEL],di
 32033 00004814 C606[689F]00            	mov	byte [ELCNT],0
 32034 00004819 E9B300                  	jmp	anum_test
 32035                                  anum_chard:
 32036 0000481C 893E[669F]              	mov	[STARTEL],di
 32037 00004820 C606[689F]00            	mov	byte [ELCNT],0		; Store of this char sets it to one
 32038 00004825 803E[169E]01            	cmp	byte [cpyflag],1	; Was CPARSE called from COPY?
 32039 0000482A 751D                    	jnz	short anum_char		; No, don't add drive spec.
 32040 0000482C E8E3E1                  	call	pathchrcmp		; Starts with a pathchar?
 32041 0000482F 7518                    	jnz	short anum_char		; no
 32042 00004831 50                      	push	ax
 32043 00004832 A0[779C]                	mov	al,[CURDRV]		; Insert drive spec
 32044                                  	;add	al,[CAPITAL_A]
 32045                                  	; 28/03/2023
 32046                                  	; MSDOS 6.0
 32047 00004835 0441                    	add	al,'A' ; 41h
 32048 00004837 E82B01                  	call	move_char
 32049 0000483A B03A                    	mov	al,':' ; 3Ah
 32050 0000483C E82601                  	call	move_char
 32051 0000483F 58                      	pop	ax
 32052 00004840 893E[669F]              	mov	[STARTEL],di
 32053 00004844 C606[689F]00            	mov	byte [ELCNT],0
 32054                                  anum_char:
 32055                                  	; 28/03/2023
 32056                                  	; MSDOS 6.0
 32057 00004849 E813DF                  	call	testkanj		;AC048			
 32058 0000484C 7406                    	jz	short NOTKANJ		;AC048;
 32059 0000484E E81401                  	call	move_char
 32060 00004851 AC                      	lodsb
 32061 00004852 EB78                    	jmp	short notspecial
 32062                                  
 32063                                  NOTKANJ:				;AN048; If not kanji
 32064 00004854 803E[169E]01            	cmp	byte [cpyflag],1	;AN048; and if we're in COPY
 32065 00004859 7503                    	jne	short TESTDOT 		;AN048;
 32066 0000485B E82BDF                  	call	UPCONV			;AN048; upper case the char
 32067                                  TESTDOT:
 32068                                  	; 28/03/2023
 32069                                  	;cmp	al,dot_chr  ; 2Eh
 32070 0000485E 3C2E                    	cmp	al,'.'
 32071 00004860 7509                    	jne	short testquest
 32072 00004862 FE06[699F]              	inc	byte [ELPOS] 		; flag in extension
 32073 00004866 C606[689F]FF            	mov	byte [ELCNT],0FFh	; Store of the '.' resets it to 0
 32074                                  testquest:
 32075 0000486B 3C3F                    	cmp	al,'?'  ; 3Fh
 32076 0000486D 7503                    	jnz	short testsplat
 32077 0000486F 80CF02                  	or	bh,2
 32078                                  testsplat:
 32079                                  	;cmp	al,[STAR]
 32080 00004872 3C2A                    	cmp	al,star	; 2Ah
 32081                                  	; 27/04/2023
 32082                                  	;cmp	al,'*' 
 32083 00004874 7530                    	jne	short testpath
 32084 00004876 80CF02                  	or	bh,2
 32085 00004879 803E[A29F]00            	cmp	byte [expand_star],0
 32086 0000487E 7504                    	jne	short expand_filename
 32087 00004880 EB24                    	jmp	short testpath
 32088                                  
 32089                                  BADPERR2J:
 32090                                  	;jmp	BADPERR2
 32091                                  	; 28/03/2023
 32092                                  	; MSDOS 6.0
 32093 00004882 EB75                    	jmp	short BADPERR2
 32094                                  
 32095                                  expand_filename:
 32096 00004884 B407                    	mov	ah,7
 32097 00004886 803E[699F]00            	cmp	byte [ELPOS],0
 32098 0000488B 7402                    	jz	short gotelcnt
 32099 0000488D B402                    	mov	ah,2
 32100                                  gotelcnt:
 32101 0000488F B03F                    	mov	al,'?'
 32102 00004891 2A26[689F]              	sub	ah,[ELCNT]
 32103 00004895 72EB                    	jb	short BADPERR2J
 32104 00004897 86E1                    	xchg	ah,cl
 32105 00004899 E309                    	jcxz	testpathx
 32106                                  qmove:
 32107 0000489B 86E1                    	xchg	ah,cl
 32108 0000489D E8C500                  	call	move_char
 32109 000048A0 86E1                    	xchg	ah,cl
 32110 000048A2 E2F7                    	loop	qmove
 32111                                  testpathx:
 32112 000048A4 86E1                    	xchg	ah,cl
 32113                                  testpath:
 32114 000048A6 E869E1                  	call	pathchrcmp
 32115 000048A9 7521                    	jnz	short notspecial
 32116 000048AB 80CF04                  	or	bh,4
 32117 000048AE 803E[A29F]00            	cmp	byte [expand_star],0
 32118 000048B3 7405                    	jz	short no_err_check
 32119 000048B5 F6C702                  	test	bh,2			; If just hit a '/', cannot have ? or * yet
 32120 000048B8 7545                    	jnz	short BADPERR
 32121                                  no_err_check:
 32122 000048BA 893E[669F]              	mov	[STARTEL],di	  	; New element
 32123 000048BE FF06[669F]              	inc	word [STARTEL]	  	; Point to char after /
 32124 000048C2 C606[689F]FF            	mov	byte [ELCNT],0FFh 	; Store of '/' sets it to 0
 32125 000048C7 C606[699F]00            	mov	byte [ELPOS],0
 32126                                  notspecial:
 32127 000048CC E89600                  	call	move_char		; just an alphanum string
 32128                                  anum_test:
 32129 000048CF AC                      	lodsb
 32130                                  
 32131                                  	; 28/03/2023
 32132                                  	; MSDOS 6.0
 32133                                  	; -----------------------------------
 32134                                  	; Mod to avoid upper-case conversion.
 32135                                  	; -----------------------------------
 32136                                  	; MSDOS 3.3
 32137                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 32138                                  	;jnz	short cpcont3		; 3/3/KK
 32139                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 32140                                  cpcont3:
 32141                                  	; -----------------------------------
 32142                                  
 32143 000048D0 E8B9E0                  	call	DELIM
 32144 000048D3 7435                    	jz	short x_done
 32145 000048D5 3C0D                    	cmp	al,0Dh
 32146 000048D7 7431                    	je	short x_done
 32147 000048D9 3A06[679C]              	cmp	al,[SWITCHAR]
 32148 000048DD 742B                    	je	short x_done
 32149 000048DF 38D8                    	cmp	al,bl
 32150 000048E1 7427                    	je	short x_done
 32151 000048E3 3C3A                    	cmp	al,':'			; ':' allowed as trailer because of devices
 32152                                  	; 28/03/2023
 32153                                  	; MSDOS 3.3
 32154                                  	;jnz	short ANUM_CHARJ 
 32155                                  	; MSDOS 6.0
 32156 000048E5 7403                    	je	short FOO15
 32157 000048E7 E95FFF                  	jmp	anum_char
 32158                                  
 32159                                  ; Modification made for parseline.
 32160                                  ; Why would it be necessary to change colons to spaces? In this
 32161                                  ; case, EVERY colon is changed to a space; e.g., 'f:' yields 'f ',
 32162                                  ; but so does 'echo foo:bar' yield 'echo foo bar'.
 32163                                  
 32164                                  FOO15:
 32165 000048EA 803E[169E]02            	cmp	byte [cpyflag],2
 32166 000048EF 7505                    	jnz	short cpcont4
 32167 000048F1 E87100                  	call	move_char
 32168 000048F4 EBD9                    	jmp	short anum_test
 32169                                  cpcont4:
 32170 000048F6 46                      	inc	si			; Skip the ':'
 32171 000048F7 EB11                    	jmp	short x_done
 32172                                  
 32173                                  	; 28/03/2023
 32174                                  ;ANUM_CHARJ:
 32175                                  	;jmp	anum_char
 32176                                  
 32177                                  BADPERR2:
 32178 000048F9 BA[EB8F]                	mov	dx,BADCPMES_PTR
 32179 000048FC E925E4                  	jmp	cerror
 32180                                  
 32181                                  BADPERR:
 32182                                  	; 28/03/2023
 32183                                  	;jmp	BADCDERR  ; MSDOS 3.3	
 32184                                  BADCDERR:
 32185                                  	; MSDOS 6.0
 32186 000048FF BA[3A91]                	mov	dx,badcd_ptr		;AC022; Issue "Invalid Directory"
 32187 00004902 E91FE4                  	jmp	cerror			;AC022;  message
 32188                                  	
 32189                                  cperror:
 32190 00004905 4E                      	dec	si			; adjust the pointer
 32191 00004906 5F                      	pop	di			; retrieve token buffer address
 32192 00004907 9D                      	popf				; restore flags
 32193 00004908 F9                      	stc				; set the carry bit
 32194 00004909 C3                      	retn
 32195                                  
 32196                                  x_done:
 32197 0000490A 4E                      	dec	si			; adjust for next round
 32198                                  
 32199                                  ; Mod to recognize right and left parens as integral tokens.
 32200                                  ;x_done2:
 32201 0000490B EB51                    	jmp	short out_token
 32202                                  
 32203                                  a_switch:
 32204 0000490D 80CF01                  	or	bh,1			; Indicate switch
 32205                                  	;or	bp,FSWITCH ; 8000h
 32206                                  	; 28/03/2023
 32207 00004910 81CD0080                	or	bp,8000h
 32208 00004914 E86DE0                  	call	scanoff
 32209 00004917 46                      	inc	si
 32210                                  	; 28/03/2023
 32211                                  	; MSDOS 6.0
 32212 00004918 E844DE                  	call	testkanj		;AN057; See if DBCS lead byte
 32213 0000491B 740D                    	jz	short a_switch_notkanj	;AN057; no - continue processing
 32214 0000491D E84500                  	call	move_char		;AN057; DBCS - store first byte
 32215 00004920 AC                      	lodsb				;AN057; get second byte
 32216 00004921 E84100                  	call	move_char		;AN057; store second byte
 32217                                  	;or	bp,FBADSWITCH ; 4000h	;AN057; DBCS switch is invalid
 32218 00004924 81CD0040                	or	bp,4000h
 32219 00004928 EB34                    	jmp	short out_token 	;AN057; don't bother checking switch
 32220                                  a_switch_notkanj:			;AN057;
 32221 0000492A 3C0D                    	cmp	al,0Dh
 32222 0000492C 7509                    	jne	short Store_swt
 32223 0000492E B000                    	mov	al,0
 32224 00004930 AA                      	stosb
 32225                                  	;or	bp,FBADSWITCH ; 4000h
 32226 00004931 81CD0040                	or	bp,4000h
 32227 00004935 EBCE                    	jmp	short cperror		; Trailing switch character error
 32228                                  					;   BP = fSwitch but no switch
 32229                                  					;   bit is set (unknown switch)
 32230                                  Store_swt:
 32231 00004937 E82B00                  	call	move_char		; store the character
 32232                                  
 32233                                  ; This upconv call must stay. It is used to identify copy-switches
 32234                                  ; on the command line, and won't store anything into the output buffer.
 32235                                  
 32236                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3 (Retro DOS 3.0)
 32237                                  	; 28/03/2023
 32238 0000493A E84CDE                  	call	UPCONV 	; MSDOS 6.0 & MSDOS 5.0 (Retro DOS 4.0)
 32239                                  	
 32240 0000493D 06                      	push	es
 32241 0000493E 57                      	push	di
 32242 0000493F 51                      	push	cx
 32243 00004940 0E                      	push	cs
 32244 00004941 07                      	pop	es
 32245                                  	; 28/03/2023
 32246                                  	; MSDOS 3.3
 32247                                  	;;mov	di,SWITCH_LIST ; "VBAPW"
 32248                                  	; MSDOS 6.0
 32249                                  	;mov	di,switch_list ; "?VBAPW"
 32250                                  	; 14/06/*2023
 32251                                  	; MSDOS 6.22
 32252 00004942 BF[D495]                	mov	di,switch_list ; "-Y?VBAPW"
 32253                                  
 32254                                  	; MSDOS 3.3
 32255                                  	;mov	cx,SWCOUNT ; 5
 32256                                  	; MSDOS 6.0
 32257                                  	;mov	cx,6  ; SWCOUNT = 6
 32258                                  	; 14/06/2023
 32259                                  	; MSDOS 6.22
 32260 00004945 B90800                  	mov	cx,8  ; SWCOUNT = 8
 32261                                  
 32262                                  	;or	bp,FBADSWITCH  ; 4000h
 32263 00004948 81CD0040                	or	bp,4000h
 32264 0000494C F2AE                    	repne	scasb
 32265 0000494E 750B                    	jnz	short out_tokenp
 32266                                  	;and	bp,~FBADSWITCH ; 0BFFFh
 32267 00004950 81E5FFBF                	and	bp,0BFFFh
 32268 00004954 B80100                  	mov	ax,1
 32269 00004957 D3E0                    	shl	ax,cl
 32270 00004959 09C5                    	or	bp,ax
 32271                                  out_tokenp:
 32272 0000495B 59                      	pop	cx
 32273 0000495C 5F                      	pop	di
 32274 0000495D 07                      	pop	es
 32275                                  out_token:
 32276 0000495E B000                    	mov	al,0			; null at the end
 32277 00004960 AA                      	stosb
 32278 00004961 5F                      	pop	di			; restore token buffer pointer
 32279 00004962 9D                      	popf
 32280 00004963 F8                      	clc				; clear carry flag
 32281 00004964 C3                      	retn
 32282                                  
 32283                                  ; =============== S U B	R O U T	I N E =======================================
 32284                                  
 32285                                  	; 28/03/2023
 32286                                  move_char:
 32287 00004965 AA                      	stosb				; store char in token buffer
 32288 00004966 41                      	inc	cx			; increment char count
 32289 00004967 FE06[689F]              	inc	byte [ELCNT]		; increment element count for * substi
 32290 0000496B C3                      	retn
 32291                                  
 32292                                  ;============================================================================
 32293                                  ; PARSE.ASM, MSDOS 6.0, 1991
 32294                                  ;============================================================================
 32295                                  ; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32296                                  ; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32297                                  ; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 32298                                  
 32299                                  ; -----------------------------
 32300                                  ; (PSDATA.INC, MSDOS 6.0, 1991)
 32301                                  ; -----------------------------
 32302                                  
 32303                                  ;**** Equation field
 32304                                  ;-------- Character code definition
 32305                                  
 32306                                  $P_DBSP1	   equ	20h ; DB_SP_HI	;AN000; 1st byte of DBCS blank
 32307                                  $P_DBSP2	   equ	20h ; DB_SP_LO	;AN000; 2nd byte of DBCS blank
 32308                                  $P_Period	   equ	"."             ;AN020;
 32309                                  $P_Slash	   equ	"/"             ;AN020;
 32310                                  $P_Space	   equ	" "             ;AN000; SBCS blank
 32311                                  $P_Comma	   equ	","             ;AN000;
 32312                                  $P_Switch	   equ	"/"             ;AN000;
 32313                                  $P_Keyword	   equ	"="             ;AN000;
 32314                                  $P_Colon	   equ	":"             ;AN000;
 32315                                  $P_Plus 	   equ	"+"             ;AN000;
 32316                                  $P_Minus	   equ	"-"             ;AN000;
 32317                                  $P_Rparen	   equ	")"             ;AN000;
 32318                                  $P_Lparen	   equ	"("             ;AN000;
 32319                                  ;(deleted ;AN025;) $P_SQuote equ  "'"
 32320                                  $P_DQuote	   equ	'"'             ;AN000;
 32321                                  $P_NULL 	   equ	0		;AN000;
 32322                                  $P_TAB		   equ	9		;AN000;
 32323                                  $P_CR		   equ	0Dh		;AN000;
 32324                                  $P_LF		   equ	0Ah		;AN000;
 32325                                  $P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 32326                                  
 32327                                  $P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 32328                                  $P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 32329                                  
 32330                                  $P_error_filespec  equ  1
 32331                                  
 32332                                  ;----------------------------------------------------------------------------
 32333                                  ; PARMS LABEL	BYTE
 32334                                  ;	DW	PARMSX
 32335                                  ;	DB	2		; NUMBER OF STRINGS (0, 1, 2)
 32336                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 32337                                  ;	DB	" .. "          ; EXTRA DELIMITER LIST,
 32338                                  ;				; TYPICAL ARE ";", "="
 32339                                  ;				; "," & WHITESPACE ALWAYS
 32340                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 32341                                  ;	DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 32342                                  ;----------------------------------------------------------------------------
 32343                                  
 32344                                  struc $P_PARMS_BLK			;AN000;
 32345 00000000 ????                    .$P_PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 32346 00000002 ??                      .$P_Num_Extra:	     resb 1		;AN000; Number of extra stuff
 32347 00000003 ??                      .$P_Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 32348                                  endstruc 				;AN000;
 32349                                  
 32350                                  $P_Len_PARMS	   equ	4		;AN000;
 32351                                  $P_I_Use_Default   equ	0		;AN000; no extra stuff specified
 32352                                  $P_I_Have_Delim    equ	1		;AN000; extra delimiter specified
 32353                                  $P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 32354                                  
 32355                                  ;----------------------------------------------------------------------------
 32356                                  ; PARMSX LABEL	BYTE
 32357                                  ;	DB	minp,maxp		; MIN, MAX POSITIONAL OPERANDS ALLOWED
 32358                                  ;	DW	CONTROL 		; DESCRIPTION OF POSITIONAL 1
 32359                                  ;	:				; REPEATS maxp-1 TIMES
 32360                                  ;	DB	maxs			; # OF SWITCHES
 32361                                  ;	DW	CONTROL 		; DESCRIPTION OF SWITCH 1
 32362                                  ;	:				; REPEATS maxs-1 TIMES
 32363                                  ;	DB	maxk			; # OF KEYWORD
 32364                                  ;	DW	CONTROL 		; DESCRIPTION OF KEYWORD 1
 32365                                  ;	:				; REPEATS maxk-1 TIMES
 32366                                  ;----------------------------------------------------------------------------
 32367                                  
 32368                                  struc $P_PARMSX_BLK			;AN000;
 32369 00000000 ??                      .$P_MinP: 	 resb 1	 ; 27/04/2023	;AN000; Minimum positional number
 32370 00000001 ??                      .$P_MaxP: 	 resb 1			;AN000; Maximum positional number
 32371 00000002 ??                      .$P_1st_Control: resb 1			;AN000; Address of the 1st CONTROL block
 32372                                  endstruc				;AN000;
 32373                                  
 32374                                  ; 31/03/2023
 32375                                  ;----------------------------------------------------------------------------
 32376                                  ; << Control field definition >>
 32377                                  ;
 32378                                  ;CONTROL   LABEL   BYTE
 32379                                  ;	   DW MATCH_FLAGS	; CONTROLS TYPE MATCHED
 32380                                  ;				; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 32381                                  ;				; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 32382                                  ;				; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 32383                                  ;				; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 32384                                  ;				; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 32385                                  ;				; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 32386                                  ;				; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 32387                                  ;				; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 32388                                  ;				; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 32389                                  ;				; 0010H=IGNORE ":" AT END IN MATCH
 32390                                  ;				; 0002H=REPEATS ALLOWED
 32391                                  ;				; 0001H=OPTIONAL
 32392                                  ;	   DW FUNCTION_FLAGS
 32393                                  ;				; 0001H=CAP RESULT BY FILE TABLE
 32394                                  ;				; 0002H=CAP RESULT BY CHAR TABLE
 32395                                  ;				; 0010H=REMOVE ":" AT END
 32396                                  ; (tm10)			; 0020H=colon is not necessary for switch
 32397                                  ;
 32398                                  ;	   DW RESULT		; RESULT BUFFER
 32399                                  ;	   DW VALUES		; VALUE LISTS
 32400                                  ;	   DB nid		; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 32401                                  ;	   DB "...",0		; IF n >0, KEYWORD 1
 32402                                  ;	   :
 32403                                  ;
 32404                                  ;Note:
 32405                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 32406                                  ;      DATE bit simalteniously.
 32407                                  ;
 32408                                  ;      The parser examins each bit along with the following priority.
 32409                                  ;
 32410                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 32411                                  ;      FILE SPEC -> SIMPLE STRING.
 32412                                  ;
 32413                                  ;
 32414                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 32415                                  ;      in the result buffer is capitalized.
 32416                                  ;
 32417                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 32418                                  ;
 32419                                  ;
 32420                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 32421                                  ;      switch, for example, '/A', then STRING points to;
 32422                                  ;
 32423                                  ;		DB    1 	; number of following synonyms
 32424                                  ;		DB   '/A',0
 32425                                  ;
 32426                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 32427                                  ;
 32428                                  ;		DB    1 	; number of following synonyms
 32429                                  ;		DB   'CODEPAGE=',0
 32430                                  ;
 32431                                  ;
 32432                                  ;    - "..." must consist of upper case characters only because the parser
 32433                                  ;      performs pattern matching after converting input to upper case (by
 32434                                  ;      using the current country upper case table)
 32435                                  ;
 32436                                  ;
 32437                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 32438                                  ;      example /A and /B, the format will be;
 32439                                  ;
 32440                                  ;		DB    2 	; number of following synonyms
 32441                                  ;		DB    '/A',0
 32442                                  ;		DB    '/B',0
 32443                                  ;----------------------------------------------------------------------------
 32444                                  
 32445                                  ;**** Match_Flags
 32446                                  
 32447                                  $P_Num_Val	   equ	8000h		;AN000; Numeric Value
 32448                                  $P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 32449                                  $P_Simple_S	   equ	2000h		;AN000; Simple string
 32450                                  $P_Date_S	   equ	1000h		;AN000; Date string
 32451                                  $P_Time_S	   equ	0800h		;AN000; Time string
 32452                                  $P_Cmpx_S	   equ	0400h		;AN000; Complex string
 32453                                  $P_File_Spc	   equ	0200h		;AN000; File Spec
 32454                                  $P_Drv_Only	   equ	0100h		;AN000; Drive Only
 32455                                  $P_Qu_String	   equ	0080h		;AN000; Quoted string
 32456                                  $P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 32457                                  $P_Repeat	   equ	0002h		;AN000; Repeat allowed
 32458                                  $P_Optional	   equ	0001h		;AN000; Optional
 32459                                  
 32460                                  ;**** Function flags
 32461                                  
 32462                                  $P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 32463                                  $P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 32464                                  $P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 32465                                  $P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 32466                                  
 32467                                  ;-------------------------------- Control block structure
 32468                                  struc $P_CONTROL_BLK
 32469 00000000 ????                    .$P_Match_Flag:	   resw 1		;AN000; Controls type matched
 32470 00000002 ????                    .$P_Function_Flag: resw 1		;AN000; Function should be taken
 32471 00000004 ????                    .$P_Result_Buf:	   resw 1		;AN000; Result buffer address
 32472 00000006 ????                    .$P_Value_List:	   resw 1		;AN000; Value list address
 32473 00000008 ??                      .$P_nid:	   resb 1		;AN000; # of keyword/SW synonyms
 32474 00000009 ??                      .$P_KEYorSW:	   resb 1		;AN000; keyword or sw
 32475                                  endstruc
 32476                                  
 32477                                  ; 31/03/2023
 32478                                  ;----------------------------------------------------------------------------
 32479                                  ;
 32480                                  ;VALUES LABEL	BYTE
 32481                                  ;	DB	nval		; NUMBER OF VALUE DEFINITIONS (0 - 3)
 32482                                  ;	+-
 32483                                  ;	| DB	nrng		; NUMBER OF RANGES
 32484                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF RANGE MATCHED
 32485                                  ;	| +DD	X,Y		; RANGE OF VALUES
 32486                                  ;	|	:
 32487                                  ;	| DB	nnval		; NUMBER OF CHOICES
 32488                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF NUMBER CHOICE MATCHED
 32489                                  ;	| +DD	VALUE		; SPECIFIC CHOICE IF NUMBER
 32490                                  ;	|	:
 32491                                  ;	| DB	nstrval 	; NUMBER OF CHOICES
 32492                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF STRING CHOICE MATCHED
 32493                                  ;	| +DW	STRING		; SPECIFIC CHOICE IF STING
 32494                                  ;	+-	:
 32495                                  ;
 32496                                  ;STRING DB	"...",0		; ASCIIZ STRING IMAGE
 32497                                  ;
 32498                                  ;Note:
 32499                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 32500                                  ;      when no choice lists are provided.
 32501                                  ;
 32502                                  ;    - STRING must consist of upper case characters only because the parser
 32503                                  ;      performs pattern matching after converting input to upper case (by
 32504                                  ;      using the current country upper case table)
 32505                                  ;----------------------------------------------------------------------------
 32506                                  
 32507                                  $P_nval_None	equ 0		;AN000; no value list ID
 32508                                  $P_nval_Range	equ 1		;AN000; range list ID
 32509                                  $P_nval_Value	equ 2		;AN000; value list ID
 32510                                  $P_nval_String	equ 3		;AN000; string list ID
 32511                                  $P_Len_Range	equ 9		;AN000; Length of a range choice(two DD plus one DB)
 32512                                  $P_Len_Value	equ 5		;AN000; Length of a value choice(one DD plus one DB)
 32513                                  $P_Len_String	equ 3		;AN000; Length of a string choice(one DW plus one DB)
 32514                                  $P_No_nrng	equ 0		;AN000; (tm07) no nrng. nnval must not be 0.
 32515                                  
 32516                                  struc $P_VAL_LIST
 32517 00000000 ??                      .$P_NumofList:	resb 1		;AN000; number of following choice
 32518 00000001 ????                    .$P_Val_XL:	resw 1		;AN000; lower word of value
 32519 00000003 ????                    .$P_Val_XH:	resw 1		;AN000; higher word of value
 32520 00000005 ????                    .$P_Val_YL:	resw 1		;AN000; lower word of another value
 32521 00000007 ????                    .$P_Val_YH:	resw 1		;AN000; higher word of another value
 32522                                  endstruc
 32523                                  
 32524                                  ; 31/03/2023
 32525                                  ;----------------------------------------------------------------------------
 32526                                  ;
 32527                                  ;RESULT LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 32528                                  ;	DB	type			; TYPE RETURNED: 0=RESERVED,
 32529                                  ;					;	1=NUMBER, 2=LIST INDEX,
 32530                                  ;					;	3=STRING, 4=COMPLEX,
 32531                                  ;					;	5=FILESPEC, 6=DRIVE
 32532                                  ;					;	7=DATE, 8=TIME
 32533                                  ;					;	9=QUOTED STRING
 32534                                  ;	DB	ITEM_TAG		; MATCHED ITEM TAG
 32535                                  ;
 32536                                  ;	dw	synonym@		; es:@ points to found SYNONYM if provided.
 32537                                  ;
 32538                                  ;       +-
 32539                                  ;       | DD	n			; VALUE IF NUMBER
 32540                                  ;       | or
 32541                                  ;       |	DW i			; INDEX (OFFSET) INTO VALUE LIST
 32542                                  ;       |				; (ES presents Segment address)
 32543                                  ;       | or
 32544                                  ;       |	DD STRING		; OFFSET OF STRING VALUE
 32545                                  ;       | or
 32546                                  ;       |	DB drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 32547                                  ;       | or
 32548                                  ;       |	DW YEAR	   		;(1980-2099)  IN CASE OF DATE
 32549                                  ;       |	DB MONTH   ;(1-12)	 Note: Range check is not performed.
 32550                                  ;       |	DB DATE	   ;(1-31)	 0 is filled when the corresponding field was not specified.
 32551                                  ;       | or
 32552                                  ;       |	DB HOUR	   ;(0-23)	 IN CASE OF TIME
 32553                                  ;       |	DB MINUTES    ;(0-59)	 Note: Range check is not performed .
 32554                                  ;       |	DB SECONDS    ;(0-59)	 0 is filled when the corresponding field was not specified .
 32555                                  ;       |	DB HUNDREDTHS ;(0-99)
 32556                                  ;       +-
 32557                                  ;
 32558                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 32559                                  ;      list.
 32560                                  ;
 32561                                  ;      YEAR: If the input value for the year is less than 100, parser
 32562                                  ;	     adds 1900 to it. For example, when 87 is input to parser for
 32563                                  ;	     the year value, he returns 1987.
 32564                                  ;----------------------------------------------------------------------------
 32565                                  
 32566                                  ;-------------------------------- Result block structure
 32567                                  struc $P_RESULT_BLK;
 32568 00000000 ??                      .$P_Type:	 resb 1		;AN000; Type returned
 32569 00000001 ??                      .$P_Item_Tag:	 resb 1		;AN000; Matched item tag
 32570 00000002 ????                    .$P_SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 32571 00000004 ????????                .$P_Picked_Val:	 resb 4		;AN000; value
 32572                                  endstruc
 32573                                  
 32574                                  ;**** values for the type field in the result block
 32575                                  
 32576                                  $P_EOL		 equ 0		;AN000; End of line
 32577                                  $P_Number	 equ 1		;AN000; Number
 32578                                  $P_List_Idx	 equ 2		;AN000; List Index
 32579                                  $P_String	 equ 3		;AN000; String
 32580                                  $P_Complex	 equ 4		;AN000; Complex
 32581                                  $P_File_Spec	 equ 5		;AN000; File Spec
 32582                                  $P_Drive	 equ 6		;AN000; Drive
 32583                                  $P_Date_F	 equ 7		;AN000; Date
 32584                                  $P_Time_F	 equ 8		;AN000; Time
 32585                                  $P_Quoted_String equ 9		;AN000; Quoted String
 32586                                  
 32587                                  $P_No_Tag	 equ 0FFh	;AN000; No ITEM_TAG found
 32588                                  
 32589                                  ;**** Return code
 32590                                  ;
 32591                                  ; following return code will be returned in the AX register.
 32592                                  
 32593                                  $P_No_Error	 equ 0		;AN000; No error
 32594                                  $P_Too_Many	 equ 1		;AN000; Too many operands
 32595                                  $P_Op_Missing	 equ 2		;AN000; Required operand missing
 32596                                  $P_Not_In_SW	 equ 3		;AN000; Not in switch list provided
 32597                                  $P_Not_In_Key	 equ 4		;AN000; Not in keyword list provided
 32598                                  $P_Out_Of_Range  equ 6		;AN000; Out of range specified
 32599                                  $P_Not_In_Val	 equ 7		;AN000; Not in value list provided
 32600                                  $P_Not_In_Str	 equ 8		;AN000; Not in string list provided
 32601                                  $P_Syntax	 equ 9		;AN000; Syntax error
 32602                                  $P_RC_EOL	 equ -1		;AN000; End of command line
 32603                                  
 32604                                  ;in second byte of $P_Flags, referenced as $P_Flags2:
 32605                                  $P_equ		 equ 01h	;AN000; "=" packed in string buffet
 32606                                  $P_Neg		 equ 02h	;AN000; Negative value
 32607                                  $P_Time12	 equ 04h	;AN000; set when PM is specified
 32608                                  $P_Key_Cmp	 equ 08h	;AN000; set when keyword compare
 32609                                  $P_SW_Cmp	 equ 10h	;AN000; set when switch compare
 32610                                  $P_Extra	 equ 20h	;AN000; set when extra delimiter found
 32611                                  $P_SW		 equ 40h	;AN000; set when switch found (tm08)
 32612                                  $P_Signed	 equ 80h	;AN000; signed numeric specified
 32613                                  
 32614                                  ;-------- Masks
 32615                                  $P_Make_Lower	 equ 20h	;AN000; make lower case character
 32616                                  $P_Make_Upper	 equ 0FFh-$P_Make_Lower ;AN000; make upper case character
 32617                                  
 32618                                  ;-------------
 32619                                  
 32620                                  struc $P_DOS_TBL
 32621 00000000 ??                      .$P_DOS_InfoID:	 resb 1		;AN000; information id for the table
 32622 00000001 ????                    .$P_DOS_TBL_Off: resw 1		;AN000; offset address of the table
 32623 00000003 ????                    .$P_DOS_TBL_Seg: resw 1		;AN000; segment address of the table
 32624                                  endstruc
 32625                                  
 32626                                  $P_DOS_Get_TBL	 equ 65h	;AN000; get uppercase table call
 32627                                  				;AN000; following parameters are set
 32628                                  				;AN000; to get casemap table.
 32629                                  $P_DOSTBL_Def	 equ -1		;AN000; get default
 32630                                  $P_DOSTBL_BL	 equ 5		;AN000; buffer length for Tbl pointer
 32631                                  $P_DOSTBL_File	 equ 4		;AN000; get file uppercase table
 32632                                  $P_DOSTBL_Char	 equ 2		;AN000; get character uppercase table
 32633                                  				; By this call following information
 32634                                  				; is returned.
 32635                                  
 32636                                  ; 03/04/2023
 32637                                  ;-------------------------------- country dependent information
 32638                                  
 32639                                  $P_DOS_Get_CDI	equ 3800h
 32640                                  
 32641                                  struc $P_CDI
 32642 00000000 ????                    .$P_CDI_DateF:	resw 1		;AN000;
 32643 00000002 ????????                .$P_CDI_Money:	resb 4		;AN000;
 32644 00000006 ????                    .$P_CDI_1000:	resb 2		;AN000;
 32645 00000008 ????                    .$P_CDI_Dec:	resb 2		;AN000;
 32646 0000000A ????                    .$P_CDI_DateS:	resb 2		;AN000;
 32647 0000000C ????                    .$P_CDI_TimeS:	resb 2		;AN000;
 32648 0000000E ??                      		resb 1		;AN000;
 32649 0000000F ??                      		resb 1		;AN000;
 32650 00000010 ??                      .$P_CDI_TimeF:	resb 1		;AN000;
 32651 00000011 ????????                		resw 2		;AN000;
 32652 00000015 ????                    		resb 2		;AN000;
 32653 00000017 <res Ah>                		resw 5		;AN000;
 32654                                  endstruc
 32655                                  
 32656                                  $P_Date_MDY	equ 0		;AN000;
 32657                                  $P_Date_DMY	equ 1		;AN000;
 32658                                  $P_Date_YMD	equ 2		;AN000;
 32659                                  
 32660                                  ; ----------------------------
 32661                                  ; (PARSE.ASM, MSDOS 6.0, 1991)
 32662                                  ; ----------------------------
 32663                                  
 32664                                  ;***********************************************************************
 32665                                  ; SysParse;
 32666                                  ;
 32667                                  ;  Function : Parser Entry
 32668                                  ;
 32669                                  ;  Input: DS:SI -> command line
 32670                                  ;	  ES:DI -> parameter block
 32671                                  ;	  psdata_seg -> psdata.inc
 32672                                  ;	  CX = operand ordinal
 32673                                  ;
 32674                                  ;	  Note:  ES is the segment containing all the control blocks defined
 32675                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 32676                                  ;		 is in DS.
 32677                                  ;
 32678                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 32679                                  ;		    invalid value list. But this parser does NOT implement
 32680                                  ;		    this feature. Therefore CY always zero.
 32681                                  ;
 32682                                  ;	   CY = 0   AX = return code
 32683                                  ;		    BL = terminated delimiter code
 32684                                  ;		    CX = new operand ordinal
 32685                                  ;		    SI = set past scaned operand
 32686                                  ;		    DX = selected result buffer
 32687                                  ;
 32688                                  ; Use:	$P_Skip_Delim, $P_Chk_EOL, $P_Chk_Delim, $P_Chk_DBCS
 32689                                  ;	$P_Chk_Swtch, $P_Chk_Pos_Control, $P_Chk_Key_Control
 32690                                  ;	$P_Chk_Sw_Control, $P_Fill_Result
 32691                                  ;
 32692                                  ; Vars: $P_Ordinal(RW), $P_RC(RW), $P_SI_Save(RW), $P_DX(R), $P_Terminator(R)
 32693                                  ;	$P_SaveSI_Cmpx(W), $P_Flags(RW), $P_Found_SYNONYM(R), $P_Save_EOB(W)
 32694                                  ;
 32695                                  ;-------- Modification History -----------------------------------------
 32696                                  ;
 32697                                  ;  4/04/87 : Created by K. K,
 32698                                  ;  4/28/87 : $P_Val_YH assemble error (tm01)
 32699                                  ;	   : JMP SHORT assemble error (tm02)
 32700                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 32701                                  ;  6/12/87 : $P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 32702                                  ;	     DateSW equ 1)	      (tm04)
 32703                                  ;  6/12/87 : $P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 32704                                  ;				      (tm05) in PSDATA.INC
 32705                                  ;  6/12/87 : $P_FileSp_Char and $P_FileSP_Len are missing
 32706                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 32707                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 32708                                  ;	     value-list block	      (tm07)
 32709                                  ;  6/20/87 : Add $P_SW to check if there's an omiting parameter after
 32710                                  ;	     switch (keyword) or not. If there is, backup si for next call
 32711                                  ;	     (tm08)
 32712                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 32713                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 32714                                  ;  6/24/87 : New function flag $P_colon_is_not_necessary for switch
 32715                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 32716                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 32717                                  ;	     in user's routines. $P_Chk_DBCS (tm11)
 32718                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 32719                                  ;					  (tm12)
 32720                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 32721                                  ;					  (tm13)
 32722                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 32723                                  ;					  (tm14)
 32724                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 32725                                  ;					  (tm15)
 32726                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 32727                                  ;
 32728                                  ;  7/24/87 : Quoted strings being returned with quotes.
 32729                                  ;
 32730                                  ;  7/28/87 : Kerry S (;AN018;)
 32731                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 32732                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 32733                                  ;	     affected: $P_Chk_SW_Control.
 32734                                  ;
 32735                                  ;  7/29/87 : Kerry S (;AN019;)
 32736                                  ;	     Now allow the optional bit in match flags for switches.  This
 32737                                  ;	     allows the switch to be encountered with a value or without a
 32738                                  ;	     value and no error is returned.
 32739                                  ;
 32740                                  ;
 32741                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 32742                                  ;  9/14/87   In PROC $P_Get_DecNum, when checking for field separators
 32743                                  ;	     within a date response, instead of checking just for the one
 32744                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 32745                                  ;	     all three chars, "-", "/", and ".". Change $P_Chk_Switch to allow
 32746                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 32747                                  ;
 32748                                  ;  9/1/87  : Kerry S (;AN021)
 32749                                  ;	     In PROC $P_String_Comp, when comparing the switch or keyword on
 32750                                  ;	     the command line with the string in the control block the
 32751                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 32752                                  ;	     on the command line and assuming a match.	This allowed a shorter
 32753                                  ;	     string on the command line than in the synonym list in the control
 32754                                  ;	     block.  I put in a test for a null in the control block so the
 32755                                  ;	     string in the control block must be the same length as the string
 32756                                  ;	     preceeding the colon or equal on the command line.
 32757                                  ;
 32758                                  ;  8/28/87 : Kerry S (;AN022;)
 32759                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 32760                                  ;	     problems for people who included it themselves in a segment other
 32761                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 32762                                  ;	     segment.
 32763                                  ;
 32764                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 32765                                  ;	     in $p_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 32766                                  ;	     into PUSH PSDATA_SEG.  In $P_Get_DecNum PROC, fix AN020
 32767                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 32768                                  ;	     Created FLag, in $P_time_Format PROC, to request the delim in
 32769                                  ;	     BL be used if TIME is being parsed.
 32770                                  ;
 32771                                  ;  9/24/87 : Ed K
 32772                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 32773                                  ;	     invocations with their normally expanded code; made comments
 32774                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 32775                                  ;
 32776                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 32777                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 32778                                  ;	     pointed to by non-existant CONTROL.
 32779                                  ;
 32780                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 32781                                  ;	     A quoted text string can be framed only by double quote.  Remove
 32782                                  ;	     support to frame quoted text string with single quote.
 32783                                  ;	     (apostrophe) $P_SorD_Quote is removed from PSDATA.INC.
 32784                                  ;	     $P_SQuote EQU also removed from PSDATA.INC.  Any references to
 32785                                  ;	     single quote in PROC prologues are left as is for history reasons.
 32786                                  ;
 32787                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 32788                                  ;	     quote chars within a quoted string is supposed to be reported as
 32789                                  ;	     one quote character, but is reported as two quotes.  This changed
 32790                                  ;	     two instructions in PROC $P_Quoted_Str.
 32791                                  ;
 32792                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 32793                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 32794                                  ;
 32795                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 32796                                  ;
 32797                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 32798                                  ;	     psdata buffer should have psdata_seg.
 32799                                  ;
 32800                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 32801                                  ;	     positional missing.
 32802                                  ;
 32803                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 32804                                  ;	     as a line delimiter, should use carriage return.
 32805                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 32806                                  ;
 32807                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 32808                                  ;
 32809                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 32810                                  ;	     endless loop since SI is returned still pointing to start
 32811                                  ;	     of that parm.
 32812                                  ;
 32813                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 32814                                  ;	     Vector to returned string has CS instead of Psdata_Seg, but
 32815                                  ;	     when tried to fix it on previous version, changed similar
 32816                                  ;	     but wrong place.
 32817                                  ;
 32818                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 32819                                  ;	     delimiters between hours, minutes, seconds for time. And period
 32820                                  ;	     and comma are valid delimiters between seconds and 100th second.
 32821                                  ;
 32822                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 32823                                  ;	     in a filespec, then flag an error.
 32824                                  ;
 32825                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 32826                                  ;	     indexed off of the psdata_seg equate instead of the DS register.
 32827                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 32828                                  ;  -->	     local parser data. Why were some references to local data changed
 32829                                  ;	     to do this before, but not all ?????
 32830                                  ;
 32831                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 32832                                  ;
 32833                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, PSDATA_SEG HOSED.
 32834                                  ;
 32835                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 32836                                  ;
 32837                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 32838                                  ;
 32839                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 32840                                  ;	     separator in TIME before hundredths field.
 32841                                  ;
 32842                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 32843                                  ;			strings as keywords.
 32844                                  ;
 32845                                  ;***********************************************************************
 32846                                  
 32847                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32848                                  cmd_parse:
 32849                                  	;call	sysparse
 32850                                  	;retn
 32851                                  
 32852                                  ; -----------------------------------
 32853                                  
 32854                                  	; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32855                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:44E7h
 32856                                  
 32857                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 32858                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4CABh
 32859                                  
 32860                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 32861                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:4B73h
 32862                                  sysparse:
 32863 0000496C 2EC706[BE97]0000        	mov	word [cs:$P_Flags],0	;AC034; Clear all internal flags
 32864 00004973 2E890E[4898]            	mov	[cs:$P_ORIG_ORD],cx	;AN039; ORIGINAL ORDINAL FROM CX
 32865 00004978 2E8926[4A98]            	mov	[cs:$P_ORIG_STACK],sp	;AN039; ORIGINAL VALUE OF STACK FROM SP
 32866 0000497D 2E8936[4C98]            	mov	[cs:$P_ORIG_SI],si	;AN039; ORIGINAL START PARSE POINTER FROM SI
 32867                                  $P_Redo_Time:				;AN039; try to parse time again
 32868 00004982 FC                      	cld				;AN000; confirm forward direction
 32869 00004983 2E890E[B197]            	mov	[cs:$P_ORDINAL],cx      ;AC034; save operand ordinal
 32870                                  	;mov	word [cs:$P_RC],$P_No_Error
 32871 00004988 2EC706[B397]0000        	mov	word [cs:$P_RC],0	;AC034; Assume no error
 32872 0000498F 2EC706[C697]0000        	mov	word [cs:$P_Found_SYNONYM],0
 32873                                  					;AC034; initalize synonym pointer
 32874 00004996 2EC706[B797]0000        	mov	word [cs:$P_DX],0	;AC034; (tm15)
 32875                                  
 32876                                  ;M029 -- Begin changes
 32877                                  ; The table of special chars $P_FileSp_Char should be initialized on every
 32878                                  ;entry to SysParse. This is in the non-checksum region and any program that
 32879                                  ;corrupts this table but does not corrupt the checksum region will leave
 32880                                  ;command.com parsing in an inconsistent state.
 32881                                  ; NB: The special characters string has been hardcoded here. If any change
 32882                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 32883                                  
 32884 0000499D 2EC706[8398]5B5D        	mov	word [cs:$P_FileSp_Char], '[]'	 ; "[]|<>+=;\""
 32885 000049A4 2EC706[8598]7C3C        	mov	word [cs:$P_FileSp_Char+2], '|<'
 32886 000049AB 2EC706[8798]3E2B        	mov	word [cs:$P_FileSp_Char+4], '>+'
 32887 000049B2 2EC706[8998]3D3B        	mov 	word [cs:$P_FileSp_Char+6], '=;'
 32888                                  
 32889                                  ;M029 -- End of changes
 32890                                  
 32891 000049B9 E82809                  	call	$P_Skip_Delim		;AN000; Move si to 1st non white space
 32892 000049BC 7312                    	jnc	short $P_Start		;AN000; If EOL is not encountered, do parse
 32893                                  
 32894                                  ;--------------------------- End of Line
 32895                                  	;mov	ax,$P_RC_EOL		;AN000; set exit code to -1
 32896 000049BE B8FFFF                  	mov	ax,0FFFFh
 32897 000049C1 53                      	push	bx			;AN000;
 32898                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 32899 000049C2 268B1D                  	mov	bx,[es:di]		;AN000; Get the PARMSX address to
 32900                                  	
 32901                                  	;cmp	cl,[es:bx+$P_PARMSX_BLK.$P_MinP]
 32902 000049C5 263A0F                  	cmp	cl,[es:bx]		;AN000; check ORDINAL to see if the minimum
 32903 000049C8 7304                    	jae	short $P_Fin		;AN000; positional found.
 32904                                  
 32905                                  	;mov	ax,2
 32906 000049CA B80200                  	mov	ax,$P_Op_Missing ; 2	;AN000; If no, set exit code to missing operand
 32907                                  	; 27/04/2023
 32908 000049CD F8                      	clc
 32909                                  $P_Fin: 				;AN000;
 32910 000049CE 5B                      	pop	bx			;AN000;
 32911                                  	;jmp	$P_Single_Exit		;AN000; return to the caller
 32912                                  	; 27/04/2023
 32913                                  	; cf = 0
 32914                                  	;clc
 32915 000049CF C3                      	retn
 32916                                  
 32917                                  ;---------------------------
 32918                                  $P_Start:				;AN000;
 32919 000049D0 2E8936[C097]            	mov	[cs:$P_SaveSI_Cmpx],si	;AN000;AC034; save ptr to command line for later use by complex,
 32920 000049D5 53                      	push	bx			;AN000; quoted string or file spec.
 32921 000049D6 57                      	push	di			;AN000;
 32922 000049D7 55                      	push	bp			;AN000;
 32923 000049D8 8D1E[C897]              	lea	bx,$P_STRING_BUF	;AC034; set buffer to copy from command string
 32924 000049DC 2EF606[BF97]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 32925                                  	;test	byte [cs:$P_Flags2],20h	;AC034; 3/9 extra delimiter encountered ?
 32926 000049E2 7543                    	jnz	short $P_Pack_End	;AN000; 3/9 if yes, no need to copy
 32927                                  $P_Pack_Loop:				;AN000;
 32928 000049E4 AC                      	lodsb				;AN000; Pick a operand from buffer
 32929 000049E5 E8AF09                  	call	$P_Chk_Switch		;AN000; Check switch character
 32930 000049E8 723C                    	jc	short $P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 32931                                  
 32932 000049EA E81909                  	call	$P_Chk_EOL		;AN000; Check EOL character
 32933 000049ED 7437                    	je	short $P_Pack_End_BY_EOL ;AN000; need backup si
 32934                                  
 32935 000049EF E84609                  	call	$P_Chk_Delim		;AN000; Check delimiter
 32936 000049F2 7518                    	jne	short $P_PL01 		;AN000; If no, process next byte
 32937                                  
 32938 000049F4 2EF606[BF97]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 32939                                  	;test	byte [cs:$P_Flags2],20h ;AC034; 3/9 If yes and white spec,
 32940 000049FA 7505                    	jnz	short $P_Pack_End_backup_si
 32941                                  					;AN000; (tm08)
 32942 000049FC E8E508                  	call	$P_Skip_Delim		;AN000; skip subsequent white space,too
 32943 000049FF EB26                    	jmp	short $P_Pack_End	;AN000; finish copy by placing NUL at end
 32944                                  
 32945                                  $P_Pack_End_backup_si:			;AN000; (tm08)
 32946 00004A01 2EF606[BF97]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ ; 41h
 32947                                  	;test	byte [cs:$P_Flags2],41h ;AN000;AC034;  (tm08)
 32948 00004A07 741E                    	jz	short $P_Pack_End	;AN000; (tm08)
 32949                                  
 32950 00004A09 4E                      	dec	si			;AN000; (tm08)
 32951 00004A0A EB1B                    	jmp	short $P_Pack_End	;AN025; (tm08)
 32952                                  $P_PL01:				;AN000;
 32953 00004A0C 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 32954                                  	;cmp	al,'='
 32955 00004A0F 3C3D                    	cmp	al,$P_Keyword ; '='	;AN000; if it is equal character,
 32956 00004A11 7506                    	jne	short $P_PL00 		;AN000; then
 32957                                  
 32958 00004A13 2E800E[BF97]01          	or	byte [cs:$P_Flags2],$P_equ
 32959                                  	;or	byte [cs:$P_Flags_2],1	;AC034; remember it in flag
 32960                                  $P_PL00:				;AN000;
 32961 00004A19 43                      	inc	bx			;AN000; ready to see next byte
 32962 00004A1A E8A509                  	call	$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 32963 00004A1D 73C5                    	jnc	short $P_Pack_Loop	;AN000; if no, process to next byte
 32964                                  
 32965 00004A1F AC                      	lodsb				;AN000; if yes, store
 32966 00004A20 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 32967 00004A23 43                      	inc	bx			;AN000; update pointer
 32968 00004A24 EBBE                    	jmp	short $P_Pack_Loop	;AN000; process to next byte
 32969                                  
 32970                                  $P_Pack_End_BY_EOL:			;AN000;
 32971 00004A26 4E                      	dec	si			;AN000; backup si pointer
 32972                                  $P_Pack_End:				;AN000;
 32973 00004A27 2E8936[B597]            	mov	[cs:$P_SI_Save],si	;AC034; save next pointer, SI
 32974                                  	;mov	byte [cs:bx],0
 32975 00004A2C 2EC60700                	mov	byte [cs:bx],$P_NULL	;AN000; put NULL at the end
 32976 00004A30 2E891E[C497]            	mov	[cs:$P_Save_EOB],bx
 32977                                  					;AC034; 3/17/87 keep the address for later use of complex
 32978                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 32979 00004A35 268B1D                  	mov	bx,[es:di]		;AN000; get PARMSX address
 32980 00004A38 8D36[C897]              	lea	si,$P_STRING_BUF	;AC034;
 32981                                  	;cmp	byte [cs:si],'/'
 32982 00004A3C 2E803C2F                	cmp	byte [cs:si],$P_Switch	;AN000; the operand begins w/ switch char ?
 32983 00004A40 7442                    	je	short $P_SW_Manager	;AN000; if yes, process as switch
 32984                                  
 32985 00004A42 2E803C22                	cmp	byte [cs:si],$P_DQuote	;M005;is it a string?
 32986 00004A46 7408                    	je	short $P_Positional_Manager
 32987                                  					;M005;if so, process as one!
 32988 00004A48 2EF606[BF97]01          	test	byte [cs:$P_Flags2],$P_equ
 32989                                  	;test	byte [cs:$P_Flags2],1	;AC034; the operand includes equal char ?
 32990 00004A4E 7556                    	jnz	short $P_Key_Manager	;AN000; if yes, process as keyword
 32991                                  
 32992                                  $P_Positional_Manager:			;AN000; else process as positional
 32993                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 32994 00004A50 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 32995 00004A54 30E4                    	xor	ah,ah			;AN000; ax = maxp
 32996 00004A56 2E3906[B197]            	cmp	[cs:$P_ORDINAL],ax	;AC034; too many positional ?
 32997 00004A5B 7312                    	jae	short $P_Too_Many_Error	;AN000; if yes, set exit code to too many
 32998                                  
 32999 00004A5D 2EA1[B197]              	mov	ax,[cs:$P_ORDINAL]	;AC034; see what the current ordinal
 33000 00004A61 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 33001 00004A63 43                      	inc	bx			;AC035; add '2' to
 33002 00004A64 43                      	inc	bx			;AC035;  BX reg
 33003                                  					;AN000; now bx points to 1st CONTROL
 33004 00004A65 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 33005 00004A67 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 33006 00004A6A E88000                  	call	$P_Chk_Pos_Control	;AN000; Do process for positional
 33007 00004A6D EB61                    	jmp	short $P_Return_to_Caller
 33008                                  					;AN000; and return to the caller
 33009                                  $P_Too_Many_Error:			;AN000;
 33010                                  	;mov	word [cs:$P_RC],1
 33011 00004A6F 2EC706[B397]0100        	mov	word [cs:$P_RC],$P_Too_Many
 33012                                  					;AC034; set exit code
 33013 00004A76 EB58                    	jmp	short $P_Return_to_Caller
 33014                                  					;AN000; and return to the caller
 33015                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 33016                                  %if 0
 33017                                  $P_SW_Manager:				;AN000;
 33018                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 33019                                  	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 33020                                  	xor	ah,ah			;AN000; ax = maxp
 33021                                  	inc	ax			;AN000;
 33022                                  	shl	ax,1			;AN000; ax = (ax+1)*2
 33023                                  	add	bx,ax			;AN000; now bx points to maxs
 33024                                  	mov	cl,[es:bx]		;AN000;
 33025                                  	xor	ch,ch			;AN000; cx = maxs
 33026                                  	or	cx,cx			;AN000; at least one switch ?
 33027                                  	jz	short $P_SW_Not_Found 	;AN000;
 33028                                  	inc	bx			;AN000; now bx points to 1st CONTROL address
 33029                                  %else
 33030                                  $P_get_max_ptr:
 33031 00004A78 268A4701                	mov	al,[es:bx+1]		; [es:bx+$P_PARMSX_BLK.$P_MaxP] ; get maxp
 33032 00004A7C 30E4                    	xor	ah,ah			; ax = maxp
 33033 00004A7E 40                      	inc	ax
 33034 00004A7F D1E0                    	shl	ax,1			; ax = (ax+1)*2
 33035 00004A81 01C3                    	add	bx,ax			; now bx points to maxs
 33036 00004A83 C3                      	retn
 33037                                  
 33038                                  $P_SW_Manager:
 33039 00004A84 E8F1FF                  	call	$P_get_max_ptr
 33040 00004A87 268A0F                  	mov	cl,[es:bx]
 33041 00004A8A 30ED                    	xor	ch,ch			; cx = maxs
 33042                                  					; at least one switch ?
 33043 00004A8C E30F                    	jcxz	$P_SW_Not_Found 	; no
 33044 00004A8E 43                      	inc	bx			; now bx points to 1st CONTROL address
 33045                                  %endif
 33046                                  
 33047                                  $P_SW_Mgr_Loop: 			;AN000;
 33048 00004A8F 53                      	push	bx			;AN000;
 33049 00004A90 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 33050 00004A93 E8B700                  	call	$P_Chk_SW_Control	;AN000; do process for switch
 33051 00004A96 5B                      	pop	bx			;AN000;
 33052 00004A97 7337                    	jnc	short $P_Return_to_Caller
 33053                                  					;AN000; if the CONTROL is for the switch, exit
 33054 00004A99 43                      	inc	bx			;AC035; add '2' to
 33055 00004A9A 43                      	inc	bx			;AC035;  BX reg
 33056                                  					;AN000; else bx points to the next CONTROL
 33057 00004A9B E2F2                    	loop	$P_SW_Mgr_Loop		;AN000; and loop
 33058                                  $P_SW_Not_Found:			;AN000;
 33059                                  	;mov	word [cs:$P_RC],3
 33060 00004A9D 2EC706[B397]0300        	mov	word [cs:$P_RC],$P_Not_In_SW
 33061                                  					;AC034; here no CONTROL for the switch has
 33062 00004AA4 EB2A                    	jmp	short $P_Return_to_Caller0
 33063                                  					;AN000; not been found, means error.
 33064                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 33065                                  %if 0
 33066                                  $P_Key_Manager: 			;AN000;
 33067                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 33068                                  	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 33069                                  	xor	ah,ah			;AN000; ax = maxp
 33070                                  	inc	ax			;AN000;
 33071                                  	shl	ax,1			;AN000; ax = (ax+1)*2
 33072                                  	add	bx,ax			;AN000; now bx points to maxs
 33073                                  	mov	al,[es:bx]		;AN000;
 33074                                  	xor	ah,ah			;AN000; ax = maxs
 33075                                  	shl	ax,1			;AN000;
 33076                                  	inc	ax			;AN000; ax = ax*2+1
 33077                                  	add	bx,ax			;AN000; now bx points to maxk
 33078                                  	mov	cl,[es:bx]		;AN000;
 33079                                  	xor	ch,ch			;AN000; cx = maxk
 33080                                  	or	cx,cx			;AN000; at least one keyword ?
 33081                                  	jz	short $P_Key_Not_Found	;AN000;
 33082                                  	inc	bx			;AN000; now bx points to 1st CONTROL
 33083                                  %else
 33084                                  $P_Key_Manager:
 33085 00004AA6 E8CFFF                  	call	$P_get_max_ptr
 33086 00004AA9 268A07                  	mov	al,[es:bx]
 33087 00004AAC 30E4                    	xor	ah,ah			; ax = maxs
 33088 00004AAE D1E0                    	shl	ax,1
 33089 00004AB0 40                      	inc	ax			; ax = ax*2+1
 33090 00004AB1 01C3                    	add	bx,ax			; now bx points to maxk
 33091 00004AB3 268A0F                  	mov	cl,[es:bx]
 33092 00004AB6 30ED                    	xor	ch,ch			; cx = maxk
 33093                                  					; at least one keyword ?
 33094 00004AB8 E30F                    	jcxz	$P_Key_Not_Found
 33095 00004ABA 43                      	inc	bx			; now bx points to 1st CONTROL
 33096                                  %endif
 33097                                  
 33098                                  $P_Key_Mgr_Loop:			;AN000;
 33099 00004ABB 53                      	push	bx			;AN000;
 33100 00004ABC 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 33101 00004ABF E85A00                  	call	$P_Chk_Key_Control	;AN000; do process for keyword
 33102 00004AC2 5B                      	pop	bx			;AN000;
 33103 00004AC3 730B                    	jnc	short $P_Return_to_Caller
 33104                                  					;AN000; if the CONTROL is for the keyword, exit
 33105 00004AC5 43                      	inc	bx			;AC035; add '2' to
 33106 00004AC6 43                      	inc	bx			;AC035;  BX reg
 33107                                  					;AN000; else bx points to the next CONTROL
 33108 00004AC7 E2F2                    	loop	$P_Key_Mgr_Loop 	;AN000; and loop
 33109                                  $P_Key_Not_Found:			;AN000;
 33110                                  	;mov	word [cs:$P_RC],4
 33111 00004AC9 2EC706[B397]0400        	mov	word [cs:$P_RC],$P_Not_In_Key
 33112                                  					;AC034; here no CONTROL for the keyword has
 33113                                  $P_Return_to_Caller0:
 33114                                  $P_Return_to_Caller:			;AN000; not been found, means error.
 33115 00004AD0 5D                      	pop	bp			;AN000;
 33116 00004AD1 5F                      	pop	di			;AN000;
 33117 00004AD2 5B                      	pop	bx			;AN000;
 33118 00004AD3 2E8B0E[B197]            	mov	cx,[cs:$P_ORDINAL]	;AC034; return next ordinal
 33119 00004AD8 2EA1[B397]              	mov	ax,[cs:$P_RC]		;AC034; return exit code
 33120 00004ADC 2E8B36[B597]            	mov	si,[cs:$P_SI_Save]	;AC034; return next operand pointer
 33121 00004AE1 2E8B16[B797]            	mov	dx,[cs:$P_DX]		;AC034; return result buffer address
 33122 00004AE6 2E8A1E[B997]            	mov	bl,[cs:$P_Terminator]	;AC034; return delimiter code found
 33123                                  $P_Single_Exit: 			;AN000;
 33124 00004AEB F8                      	clc				;AN000;
 33125 00004AEC C3                      	retn				;AN000;
 33126                                  
 33127                                  ;***********************************************************************
 33128                                  ; $P_Chk_Pos_Control
 33129                                  ;
 33130                                  ; Function: Parse CONTROL block for a positional
 33131                                  ;
 33132                                  ; Input:     ES:BX -> CONTROL block
 33133                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 33134                                  ;
 33135                                  ; Output:    None
 33136                                  ;
 33137                                  ; Use:	 $P_Fill_Result, $P_Check_Match_Flags
 33138                                  ;
 33139                                  ; Vars: $P_Ordinal(W), $P_RC(W)
 33140                                  ;***********************************************************************
 33141                                  
 33142                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33143                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4671h
 33144                                  
 33145                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33146                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E35h
 33147                                  
 33148                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33149                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:4CF5h
 33150                                  $P_Chk_Pos_Control:
 33151 00004AED 50                      	push	ax			;AN000;
 33152                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 33153 00004AEE 268B07                  	mov	ax,[es:bx]		;AN000;
 33154                                  	;test	ax,2
 33155 00004AF1 A90200                  	test	ax,$P_Repeat		;AN000; repeat allowed ?
 33156 00004AF4 7505                    	jnz	short $P_CPC00		;AN000; then do not increment ORDINAL
 33157                                  
 33158 00004AF6 2EFF06[B197]            	inc	word [cs:$P_ORDINAL]	;AC034; update the ordinal
 33159                                  $P_CPC00:				;AN000;
 33160                                  	;cmp	byte [cs:si],0
 33161 00004AFB 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; no data ?
 33162 00004AFF 7516                    	jne	short $P_CPC01		;AN000;
 33163                                  
 33164                                  	;test	ax,1
 33165 00004B01 A90100                  	test	ax,$P_Optional		;AN000; yes, then is it optional ?
 33166 00004B04 7509                    	jnz	short $P_CPC02		;AN000;
 33167                                  
 33168 00004B06 2EC706[B397]0200        	mov	word [cs:$P_RC],$P_Op_Missing ; 2
 33169                                  					;AC034; no, then error	 3/17/87
 33170 00004B0D EB0B                    	jmp	short $P_CPC_Exit	;AN000;
 33171                                  $P_CPC02:				;AN000;
 33172                                  	; 27/04/2023
 33173                                  	;push	ax ; *			;AN000;
 33174                                  	;
 33175                                  	;;mov	al,3
 33176                                  	;mov	al,$P_String		;AN000; if it is optional return NULL
 33177                                  	;;mov	ah,0FFh
 33178                                  	;mov	ah,$P_No_Tag		;AN000; no item tag indication
 33179                                  	; 31/03/2023
 33180 00004B0F B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 33181 00004B12 E89500                  	call	$P_Fill_Result		;AN000;
 33182                                  	; 27/04/2023
 33183                                  	;pop	ax ; *			;AN000;
 33184 00004B15 EB03                    	jmp	short $P_CPC_Exit	;AN000;
 33185                                  $P_CPC01:				;AN000;
 33186 00004B17 E81101                  	call	$P_Check_Match_Flags	;AN000;
 33187                                  $P_CPC_Exit:				;AN000;
 33188 00004B1A 58                      	pop	ax			;AN000;
 33189 00004B1B C3                      	retn				;AN000;
 33190                                  
 33191                                  ;***********************************************************************
 33192                                  ; $P_Chk_Key_Control
 33193                                  ;
 33194                                  ; Function: Parse CONTROL block for a keyword
 33195                                  ;
 33196                                  ; Input:     ES:BX -> CONTROL block
 33197                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 33198                                  ;
 33199                                  ; Output:    CY = 1 : not match
 33200                                  ;
 33201                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 33202                                  ;
 33203                                  ; Vars: $P_RC(W), $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 33204                                  ;***********************************************************************
 33205                                  
 33206                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33207                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33208                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33209                                  $P_Chk_Key_Control:			;AN000;
 33210 00004B1C F9                      	stc				;AN000;this logic works when the KeySW
 33211 00004B1D C3                      	retn				;AN000;is reset.
 33212                                  
 33213                                  ;***********************************************************************
 33214                                  ; $P_Search_KEYorSW:
 33215                                  ;
 33216                                  ; Function: Seach specified keyword or switch from CONTROL
 33217                                  ;
 33218                                  ; Input:     ES:BX -> CONTROL block
 33219                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 33220                                  ;
 33221                                  ; Output:    CY = 1 : not match
 33222                                  ;
 33223                                  ; Use:	 $P_String_Comp, $P_MoveBP_NUL, $P_Found_SYNONYM
 33224                                  ;***********************************************************************
 33225                                  
 33226                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33227                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33228                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33229                                  $P_Search_KEYorSW:
 33230 00004B1E 55                      	push	bp			;AN000;
 33231 00004B1F 51                      	push	cx			;AN000;
 33232 00004B20 268A4F08                	mov	cl,[es:bx+$P_CONTROL_BLK.$P_nid]
 33233                                  	;mov	cl,[es:bx+8]		;AN000; Get synonym count
 33234                                  	; 14/06/2023
 33235                                  	;xor	ch,ch			;AN000; and set it to cx
 33236                                  	;or	cx,cx			;AN000; No synonyms specified ?
 33237 00004B24 08C9                    	or	cl,cl
 33238 00004B26 740E                    	jz	short $P_KEYorSW_Not_Found
 33239                                  					;AN000; then indicate not found by CY
 33240 00004B28 268D6F09                	lea	bp,[es:bx+$P_CONTROL_BLK.$P_KEYorSW]
 33241                                  	;lea	bp,[es:bx+9]		;AN000; BP points to the 1st synonym
 33242                                  $P_KEYorSW_Loop:			;AN000;
 33243 00004B2C E8E703                  	call	$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 33244 00004B2F 7308                    	jnc	short $P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 33245 00004B31 E80D00                  	call	$P_MoveBP_NUL		;AN000; else, bp points to the next string
 33246 00004B34 E2F6                    	loop	$P_KEYorSW_Loop 	;AN000; loop nid times
 33247                                  $P_KEYorSW_Not_Found:			;AN000;
 33248 00004B36 F9                      	stc				;AN000; indicate not found in synonym list
 33249 00004B37 EB05                    	jmp	short $P_KEYorSW_Exit	;AN000; and exit
 33250                                  $P_KEYorSW_Found:			;AN000;
 33251 00004B39 2E892E[C697]            	mov	[cs:$P_Found_SYNONYM],bp
 33252                                  					;AC034; set synonym pointer
 33253                                  	; 27/04/2023
 33254                                  	; cf = 0
 33255                                  	;clc				;AN000; indicate found
 33256                                  $P_KEYorSW_Exit:			;AN000;
 33257 00004B3E 59                      	pop	cx			;AN000;
 33258 00004B3F 5D                      	pop	bp			;AN000;
 33259 00004B40 C3                      	retn				;AN000;
 33260                                  
 33261                                  ;***********************************************************************
 33262                                  ; $P_MoveBP_NUL
 33263                                  ;***********************************************************************
 33264                                  
 33265                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33266                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33267                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33268                                  $P_MoveBP_NUL:
 33269                                  $P_MBP_Loop:				;AN000;
 33270                                  	;cmp	byte [es:bp+0],0
 33271 00004B41 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000; Increment BP that points
 33272 00004B46 7403                    	je	short $P_MBP_Exit	;AN000; to the synomym list
 33273 00004B48 45                      	inc	bp			;AN000; until
 33274 00004B49 EBF6                    	jmp	short $P_MBP_Loop	;AN000; NULL encountered.
 33275                                  $P_MBP_Exit:				;AN000;
 33276 00004B4B 45                      	inc	bp			;AN000; bp points to next to NULL
 33277 00004B4C C3                      	retn				;AN000;
 33278                                  
 33279                                  ;***********************************************************************
 33280                                  ; $P_Chk_SW_Control
 33281                                  ;
 33282                                  ; Function: Parse CONTROL block for a switch
 33283                                  ;
 33284                                  ; Input:     ES:BX -> CONTROL block
 33285                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 33286                                  ;
 33287                                  ; Output:    CY = 1 : not match
 33288                                  ;
 33289                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 33290                                  ;
 33291                                  ; Vars:  $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 33292                                  ;***********************************************************************
 33293                                  
 33294                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33295                                  	;
 33296                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33297                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:4E9Ah
 33298                                  
 33299                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33300                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:4D57h
 33301                                  $P_Chk_SW_Control:
 33302 00004B4D 2E800E[BF97]10          	or	byte [cs:$P_Flags2],$P_SW_Cmp
 33303                                  	;or	byte [cs:$P_Flags2],10h	;AC034; Indicate switch for later string comparison
 33304 00004B53 E8C8FF                  	call	$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 33305 00004B56 7251                    	jc	short $P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 33306                                  
 33307 00004B58 2E8026[BF97]EF          	and	byte [cs:$P_Flags2],0FFh-$P_SW_Cmp
 33308                                  	;and	byte [cs:$P_Flags2],0EFh
 33309                                  					;AC034; reset the indicator previously set
 33310 00004B5E 50                      	push	ax			;AN000;       /switch:
 33311 00004B5F 2EA1[C297]              	mov	ax,[cs:$P_KEYorSW_Ptr]	;AC034;	      ^       ^
 33312 00004B63 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 33313 00004B65 2E0106[C097]            	add	[cs:$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 33314 00004B6A 58                      	pop	ax			;AN000;
 33315                                  
 33316 00004B6B 2E8B36[C297]            	mov	si,[cs:$P_KEYorSW_Ptr]	;AC034; set si at the end or colon
 33317                                  	;cmp	byte [cs:si],0
 33318 00004B70 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; any data after colon
 33319 00004B74 7525                    	jne	short $P_CSW00		;AN000; if yes, process match flags
 33320                                  
 33321                                  	;cmp	byte [cs:si],':'
 33322 00004B76 2E807CFF3A              	cmp	byte [cs:si-1],$P_Colon
 33323                                  					;AN000; if no, the switch terminated by colon ?
 33324 00004B7B 7509                    	jne	short $P_Chk_if_data_required
 33325                                  					;AN000; if yes,
 33326                                  
 33327 00004B7D 2EC706[B397]0900        	mov	word [cs:$P_RC],$P_Syntax
 33328                                  	;mov	word [cs:$P_RC],9	;AC034; return syntax error
 33329 00004B84 EB1A                    	jmp	short $P_Chk_SW_Exit	;AN000;
 33330                                  
 33331                                  $P_Chk_if_data_required:		;AN018; no data, no colon
 33332                                  	;cmp	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],0
 33333                                  	; 27/04/2023
 33334 00004B86 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 33335 00004B8A 7414                    	je	short $P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 33336                                  
 33337                                  	;;test	word [es:bx],1 ; $P_Optional
 33338                                  	;test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 33339 00004B8C 26F60701                	test	byte [es:bx],$P_Optional
 33340                                  					;AN019; see if no value is valid
 33341 00004B90 750E                    	jnz	short $P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 33342                                  
 33343 00004B92 2EC706[B397]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 33344                                  	;mov	word [cs:$P_RC],2	;AC034; return required operand missing
 33345 00004B99 EB05                    	jmp	short $P_Chk_SW_Exit	;AN018;
 33346                                  
 33347                                  $P_CSW00:				;AN000;
 33348 00004B9B E88D00                  	call	$P_Check_Match_Flags	;AN000; process match flag
 33349 00004B9E F8                      	clc				;AN000; indicate match
 33350                                  	;jmp	short $P_Chk_SW_Single_Exit
 33351 00004B9F C3                      	retn	; 31/03/2023		;AN000;
 33352                                  	; 31/03/2023
 33353                                  ;$P_Chk_SW_Err0: 			;AN000;
 33354                                  ;	stc				;AN000; not found in switch synonym list
 33355                                  ;	;jmp	short $P_Chk_SW_Single_Exit
 33356                                  ;	retn	; 31/03/2023		;AN000;
 33357                                  	
 33358                                  $P_Chk_SW_Exit: 			;AN000;
 33359 00004BA0 50                      	push	ax			;AN000;
 33360                                  	; 31/03/2023
 33361 00004BA1 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 33362                                  	;;mov	al,3
 33363                                  	;;mov	ah,0FFh
 33364                                  	;mov	al,$P_String		;AN000; set
 33365                                  	;mov	ah,$P_No_Tag		;AN000;    result
 33366 00004BA4 E80300                  	call	$P_Fill_Result		;AN000; 	 buffer
 33367 00004BA7 58                      	pop	ax			;AN000;
 33368 00004BA8 F8                      	clc				;AN000;
 33369                                  	; 31/03/2023
 33370                                  $P_Chk_SW_Err0:
 33371                                  $P_Chk_SW_Single_Exit:			;AN000;
 33372 00004BA9 C3                      	retn				;AN000;
 33373                                  
 33374                                  ;***********************************************************************
 33375                                  ; $P_Fill_Result
 33376                                  ;
 33377                                  ; Function: Fill the result buffer
 33378                                  ;
 33379                                  ; Input:    AH = Item tag
 33380                                  ;	    AL = type
 33381                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 33382                                  ;		  AL = 2: DX has index(offset) into value list
 33383                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 33384                                  ;		  AL = 7: DX has year, CL has month and CH has date
 33385                                  ;		  AL = 8: DL has hours, DH has minutes, CL has secondsn,
 33386                                  ;			  amd CH has hundredths
 33387                                  ;		  AL = else: psdata_seg:SI points to returned string buffer
 33388                                  ;	    ES:BX -> CONTROL block
 33389                                  ;
 33390                                  ; Output:   None
 33391                                  ;
 33392                                  ; Use:	$P_Do_CAPS_String, $P_Remove_Colon, $P_Found_SYNONYM
 33393                                  ;
 33394                                  ; Vars: $P_DX(W)
 33395                                  ;***********************************************************************
 33396                                  
 33397                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33398                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33399                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33400                                  $P_Fill_Result:
 33401 00004BAA 57                      	push	di			;AN000;
 33402 00004BAB 268B7F04                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Result_Buf]
 33403                                  	;mov	di,[es:bx+4]		;AN000; di points to result buffer
 33404 00004BAF 2E893E[B797]            	mov	[cs:$P_DX],di		;AC034; set returned result address
 33405                                  	;mov	[es:di+$P_RESULT_BLK.$P_Type],al
 33406                                  	;;mov	[es:di],al		;AN000; store type
 33407                                  	;mov	[es:di+$P_RESULT_BLK.$P_Item_Tag],ah
 33408                                  	;;mov	[es:di+1],ah		;AN000; store item tag
 33409                                  	; 31/03/2023
 33410 00004BB4 268905                  	mov	[es:di],ax
 33411 00004BB7 50                      	push	ax			;AN000;
 33412 00004BB8 2EA1[C697]              	mov	ax,[cs:$P_Found_SYNONYM]
 33413                                  					;AC034; if yes,
 33414 00004BBC 26894502                	mov	[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr],ax
 33415                                  	;mov	[es:di+2],ax		;AN000;   then set it to the result
 33416 00004BC0 58                      	pop	ax			;AN000;
 33417                                  $P_RLT04:				;AN000;
 33418                                  	;cmp	al,1
 33419 00004BC1 3C01                    	cmp	al,$P_Number		;AN000; if number
 33420 00004BC3 750A                    	jne	short $P_RLT00		;AN000;
 33421                                  $P_RLT02:				;AN000;
 33422 00004BC5 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 33423                                  	;mov	[es:di+4],dx		;AN000; then store 32bit
 33424 00004BC9 26894D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cx
 33425                                  	;mov	[es:di+6],cx		;AN000;	number
 33426 00004BCD EB5A                    	jmp	short $P_RLT_Exit	;AN000;
 33427                                  $P_RLT00:				;AN000;
 33428                                  	;cmp	al,2
 33429 00004BCF 3C02                    	cmp	al,$P_List_Idx		;AN000; if list index
 33430 00004BD1 7506                    	jne	short $P_RLT01		;AN000;
 33431 00004BD3 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 33432                                  	;mov	[es:di+4],dx		;AN000; then store list index
 33433 00004BD7 EB50                    	jmp	short $P_RLT_Exit	;AN000;
 33434                                  $P_RLT01:				;AN000;
 33435                                  	;cmp	al,7
 33436 00004BD9 3C07                    	cmp	al,$P_Date_F ; 7	;AN000; Date format ?
 33437 00004BDB 74E8                    	je	short $P_RLT02		;AN000;
 33438                                  	;cmp	al,8
 33439 00004BDD 3C08                    	cmp	al,$P_Time_F ; 8	;AN000; Time format ?
 33440 00004BDF 74E4                    	je	short $P_RLT02		;AN000;
 33441                                  	;cmp	al,6
 33442 00004BE1 3C06                    	cmp	al,$P_Drive  ; 6	;AN000; drive format ?
 33443 00004BE3 7506                    	jne	short $P_RLT03		;AN000;
 33444                                  
 33445 00004BE5 26885504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dl
 33446                                  	;mov	[es:di+4],dl		;AN000; store drive number
 33447 00004BE9 EB3E                    	jmp	short $P_RLT_Exit	;AN000;
 33448                                  
 33449                                  $P_RLT03:				;AN000;
 33450                                  	;cmp	al,4
 33451 00004BEB 3C04                    	cmp	al,$P_Complex		;AN000; complex format ?
 33452 00004BED 750F                    	jne	short $P_RLT05		;AN000;
 33453                                  
 33454 00004BEF 2EA1[C097]              	mov	ax,[cs:$P_SaveSI_Cmpx]	;AC034; then get pointer in command buffer
 33455 00004BF3 40                      	inc	ax			;AN000; skip left Parentheses
 33456 00004BF4 26894504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],ax
 33457                                  	;mov	[es:di+4],ax		;AN000; store offset
 33458 00004BF8 268C5D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],ds
 33459                                  	;mov	[es:di+6],ds		;AN000; store segment
 33460 00004BFC EB2B                    	jmp	short $P_RLT_Exit	;AN000;
 33461                                  
 33462                                  $P_RLT05:				;AN000;
 33463                                  ;------------------------  AL = 3, 5, or 9
 33464 00004BFE 26897504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],si
 33465                                  	;mov	[es:di+4],si		;AN000; store offset of STRING_BUF
 33466 00004C02 268C4D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cs
 33467                                  	;mov	[es:di+6],cs		;AN031; store segment of STRING_BUF
 33468                                  
 33469 00004C06 50                      	push	ax			;AN000;
 33470 00004C07 26F6470201              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File
 33471                                  	;test	byte [es:bx+2],1	;AN000; need CAPS by file table?
 33472 00004C0C 7404                    	jz	short $P_RLT_CAP00	;AN000;
 33473                                  
 33474                                  	;mov	al,4
 33475 00004C0E B004                    	mov	al,$P_DOSTBL_File ; 4	;AN000; use file upper case table
 33476 00004C10 EB09                    	jmp	short $P_RLT_CAP02	;AN000;
 33477                                  
 33478                                  $P_RLT_CAP00:				;AN000;
 33479 00004C12 26F6470202              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char
 33480                                  	;test	byte [es:bx+2],2	;AN000; need CAPS by char table ?
 33481 00004C17 7405                    	jz	short $P_RLT_CAP01	;AN000;
 33482                                  
 33483                                  	;mov	al,2
 33484 00004C19 B002                    	mov	al,$P_DOSTBL_Char ; 2	;AN000; use character upper case table
 33485                                  $P_RLT_CAP02:				;AN000;
 33486 00004C1B E80C01                  	call	$P_Do_CAPS_String	;AN000;  process CAPS along the table
 33487                                  $P_RLT_CAP01:				;AN000;
 33488 00004C1E 58                      	pop	ax			;AN000;
 33489 00004C1F 26F6470210              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon
 33490                                  	;test	byte [es:bx+2],10h	;AN000; removing colon at end ?
 33491 00004C24 7403                    	jz	short $P_RLT_Exit	;AN000;
 33492                                  
 33493 00004C26 E8DD00                  	call	$P_Remove_Colon 	;AN000; then process it.
 33494                                  $P_RLT_Exit:				;AN000;
 33495 00004C29 5F                      	pop	di			;AN000;
 33496 00004C2A C3                      	retn				;AN000;
 33497                                  
 33498                                  ;***********************************************************************
 33499                                  ; $P_Check_Match_Flags
 33500                                  ;
 33501                                  ; Function:  Check the mutch_flags and make the exit code and set the
 33502                                  ;	     result buffer
 33503                                  ;
 33504                                  ;	    Check for types in this order:
 33505                                  ;		Complex
 33506                                  ;		Date
 33507                                  ;		Time
 33508                                  ;		Drive
 33509                                  ;		Filespec
 33510                                  ;		Quoted String
 33511                                  ;		Simple String
 33512                                  ;
 33513                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 33514                                  ;	     ES:BX -> CONTROL block
 33515                                  ;
 33516                                  ; Output:    None
 33517                                  ;
 33518                                  ; Use:	     $P_Value, P$_SValue, $P_Simple_String, $P_Date_Format
 33519                                  ;	     $P_Time_Format, $P_Complex_Format, $P_File_Foemat
 33520                                  ;	     $P_Drive_Format
 33521                                  ;***********************************************************************
 33522                                  
 33523                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33524                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33525                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33526                                  $P_Check_Match_Flags:
 33527 00004C2B 2EC606[8C98]00          	mov	byte [cs:$P_err_flag],$P_NULL ; 0
 33528                                  					;AN033;AC034;; clear filespec error flag.
 33529 00004C31 50                      	push	ax			;AN000;
 33530                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 33531 00004C32 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 33532 00004C35 09C0                    	or	ax,ax			;AC035; test ax for zero
 33533 00004C37 7518                    	jnz	short $P_Mat		;AN000; (tm12)
 33534 00004C39 50                      	push	ax			;AN000; (tm12)
 33535 00004C3A 53                      	push	bx			;AN000; (tm12)
 33536 00004C3B 52                      	push	dx			;AN000; (tm12)
 33537 00004C3C 57                      	push	di			;AN000; (tm12)
 33538 00004C3D 2EC706[B397]0900        	mov	word [cs:$P_RC],$P_Syntax
 33539                                  	;mov	word [cs:$P_RC],9	;AC034; (tm12)
 33540                                  	; 31/03/2023
 33541 00004C44 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 33542                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; (tm12)
 33543                                  	;mov	al,$P_String ; 3	;AN000; (tm12)
 33544 00004C47 E860FF                  	call	$P_Fill_Result		;AN000; (tm12)
 33545 00004C4A 5F                      	pop	di			;AN000; (tm12)
 33546 00004C4B 5A                      	pop	dx			;AN000; (tm12)
 33547 00004C4C 5B                      	pop	bx			;AN000; (tm12)
 33548 00004C4D 58                      	pop	ax			;AN000; (tm12)
 33549                                  	;jmp	short $P_Bridge 	;AC035; (tm12)
 33550                                  	; 31/03/2023
 33551                                  $P_Bridge:	; 18/04/2023		;AN000;
 33552 00004C4E E99C00                  	jmp	$P_Match_Exit		;AN000; (tm02)
 33553                                  $P_Mat: 				;AN000; (tm12)
 33554                                  $P_Match01:				;AN000;
 33555                                  	;test	ax,1000h
 33556 00004C51 A90010                  	test	ax,$P_Date_S		;AN000; Date string
 33557 00004C54 7412                    	jz	short $P_Match02	;AN000;
 33558 00004C56 2EC706[B397]0000        	mov	word [cs:$P_RC],$P_No_Error
 33559                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 33560 00004C5D E85403                  	call	$P_Date_Format		;AN000; do process
 33561 00004C60 2E833E[B397]09          	cmp	word [cs:$P_RC],$P_Syntax
 33562                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 33563                                  	; 18/04/2023
 33564 00004C66 75E6                    	jne	short $P_Bridge		;AN000;
 33565                                  $P_Match02:				;AN000;
 33566                                  	;test	ax,800h
 33567 00004C68 A90008                  	test	ax,$P_Time_S		;AN000; Time string
 33568 00004C6B 7412                    	jz	short $P_Match03	;AN000;
 33569 00004C6D 2EC706[B397]0000        	mov	word [cs:$P_RC],$P_No_Error
 33570                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 33571 00004C74 E85A04                  	call	$P_Time_Format		;AN000; do process
 33572 00004C77 2E833E[B397]09          	cmp	word [cs:$P_RC],$P_Syntax
 33573                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 33574                                  	;jne	short $P_Bridge		;AN000; (tm09)
 33575                                  	;jmp	short $P_Match03	;AN025; (tm09)
 33576                                  	; 31/03/2023
 33577 00004C7D 756E                    	jne	short $P_Match_Exit
 33578                                  ;$P_Bridge:				;AN000;
 33579                                  	;jmp	short $P_Match_Exit	;AN000; (tm02)
 33580                                  $P_Match03:				;AN000;
 33581                                  	;test	ax,8000h
 33582 00004C7F A90080                  	test	ax,$P_Num_Val		;AN000; Numeric value
 33583 00004C82 7412                    	jz	short $P_Match04	;AN000;
 33584 00004C84 2EC706[B397]0000        	mov	word [cs:$P_RC],$P_No_Error
 33585                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 33586 00004C8B E82701                  	call	$P_Value		;AN000; do process
 33587 00004C8E 2E833E[B397]09          	cmp	word [cs:$P_RC],$P_Syntax
 33588                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 33589 00004C94 7557                    	jne	short $P_Match_Exit	;AN000;
 33590                                  $P_Match04:				;AN000;
 33591                                  	;test	ax,4000h
 33592 00004C96 A90040                  	test	ax,$P_SNum_Val		;AN000; Signed numeric value
 33593 00004C99 7412                    	jz	short $P_Match05	;AN000;
 33594 00004C9B 2EC706[B397]0000        	mov	word [cs:$P_RC],$P_No_Error
 33595                                  					;AC034; assume no error
 33596 00004CA2 E8EC00                  	call	$P_SValue		;AN000; do process
 33597 00004CA5 2E833E[B397]09          	cmp	word [cs:$P_RC],$P_Syntax
 33598                                  					;AC034; if error, examine the next type
 33599 00004CAB 7540                    	jne	short $P_Match_Exit	;AN000;
 33600                                  $P_Match05:				;AN000;
 33601                                  	;test	ax,100h
 33602 00004CAD A90001                  	test	ax,$P_Drv_Only		;AN000; Drive only
 33603 00004CB0 7415                    	jz	short $P_Match06	;AN000;
 33604 00004CB2 2EC706[B397]0000        	mov	word [cs:$P_RC],$P_No_Error
 33605                                  					;AC034; assume no error
 33606 00004CB9 E86205                  	call	$P_File_Format		;AN000; 1st, call file format
 33607 00004CBC E8E305                  	call	$P_Drive_Format 	;AN000; check drive format, next
 33608 00004CBF 2E833E[B397]09          	cmp	word [cs:$P_RC],$P_Syntax
 33609                                  					;AC034; if error, examinee the next type
 33610 00004CC5 7526                    	jne	short $P_Match_Exit	;AN000;
 33611                                  $P_Match06:				;AN000;
 33612                                  	;test	ax,200h
 33613 00004CC7 A90002                  	test	ax,$P_File_Spc		;AN000; File spec
 33614 00004CCA 7412                    	jz	short $P_Match07	;AN000;
 33615 00004CCC 2EC706[B397]0000        	mov	word [cs:$P_RC],$P_No_Error
 33616                                  					;AC034; assume no error
 33617 00004CD3 E84805                  	call	$P_File_Format		;AN000; do process
 33618 00004CD6 2E833E[B397]09          	cmp	word [cs:$P_RC],$P_Syntax
 33619                                  					;AC034; if error, examine the next type
 33620 00004CDC 750F                    	jne	short $P_Match_Exit	;AN000;
 33621                                  $P_Match07:				;AN000;
 33622                                  $P_Match08:				;AN000;
 33623                                  	;test	ax,2000h
 33624 00004CDE A90020                  	test	ax,$P_Simple_S		;AN000; Simple string
 33625 00004CE1 740A                    	jz	short $P_Match09	;AN000;
 33626 00004CE3 2EC706[B397]0000        	mov	word [cs:$P_RC],$P_No_Error
 33627                                  					;AC034; assume no error
 33628 00004CEA E8C501                  	call	$P_Simple_String	;AN000; do process
 33629                                  $P_Match09:				;AN000;
 33630                                  $P_Match_Exit:				;AN000;
 33631 00004CED 2E833E[8C98]01          	cmp	word [cs:$P_err_flag],$P_error_filespec
 33632                                  	;cmp	word [cs:$P_err_flag],1 ;AC034; bad filespec ?
 33633 00004CF3 750F                    	jne	short $P_Match2_Exit	;AN033; no, continue
 33634 00004CF5 2E833E[B397]00          	cmp	word [cs:$P_RC],$P_No_Error
 33635                                  	;cmp	word [cs:$P_RC],0	;AN033;AC034;; check for other errors ?
 33636 00004CFB 7507                    	jne	short $P_Match2_Exit	;AN033; no, continue
 33637 00004CFD 2EC706[B397]0900        	mov	word [cs:$P_RC],$P_Syntax
 33638                                  	;mov	word [cs:$P_RC],9	;AN033;AC034;; set error flag
 33639                                  $P_Match2_Exit: 			;AN033;
 33640 00004D04 58                      	pop	ax			;AN000;
 33641 00004D05 C3                      	retn
 33642                                  
 33643                                  ;***********************************************************************
 33644                                  ; $P_Remove_Colon;
 33645                                  ;
 33646                                  ; Function: Remove colon at end
 33647                                  ;
 33648                                  ; Input:    psdata_seg:SI points to string buffer to be examineed
 33649                                  ;
 33650                                  ; Output:   None
 33651                                  ;
 33652                                  ; Use:	$P_Chk_DBCS
 33653                                  ;***********************************************************************
 33654                                  
 33655                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33656                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33657                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33658                                  $P_Remove_Colon:
 33659 00004D06 50                      	push	ax			;AN000;
 33660 00004D07 56                      	push	si			;AN000;
 33661                                  $P_RCOL_Loop:				;AN000;
 33662 00004D08 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 33663 00004D0B 08C0                    	or	al,al			;AN000; end of string ?
 33664 00004D0D 740F                    	jz	short $P_RCOL_Exit	;AN000; if yes, just exit
 33665                                  
 33666 00004D0F 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; is it colon ?
 33667 00004D11 750E                    	jne	short $P_RCOL00		;AN000;
 33668                                  
 33669                                  	;cmp	byte [cs:si+1],0
 33670 00004D13 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; if so, next is NULL ?
 33671 00004D18 7507                    	jne	short $P_RCOL00		;AN000; no, then next char
 33672                                  
 33673 00004D1A 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; yes, remove colon
 33674                                  	; 31/03/2023
 33675                                  	;jmp	short $P_RCOL_Exit	;AN000; and exit.
 33676                                  $P_RCOL_Exit:
 33677 00004D1E 5E                      	pop	si
 33678 00004D1F 58                      	pop	ax
 33679 00004D20 C3                      	retn
 33680                                  
 33681                                  $P_RCOL00:				;AN000;
 33682 00004D21 E89E06                  	call	$P_Chk_DBCS		;AN000; if not colon, then check if
 33683 00004D24 7301                    	jnc	short $P_RCOL01		;AN000; DBCS leading byte.
 33684                                  
 33685 00004D26 46                      	inc	si			;AN000; if yes, skip trailing byte
 33686                                  $P_RCOL01:				;AN000;
 33687 00004D27 46                      	inc	si			;AN000; si points to next byte
 33688 00004D28 EBDE                    	jmp	short $P_RCOL_Loop	;AN000; loop until NULL encountered
 33689                                  
 33690                                  	; 31/03/2023
 33691                                  ;$P_RCOL_Exit:				;AN000;
 33692                                  	;pop	si			;AN000;
 33693                                  	;pop	ax			;AN000;
 33694                                  	;retn
 33695                                  
 33696                                  ;***********************************************************************
 33697                                  ; $P_Do_CAPS_String;
 33698                                  ;
 33699                                  ; Function: Perform capitalization along with the file case map table
 33700                                  ;	    or character case map table.
 33701                                  ;
 33702                                  ; Input:    AL = 2 : Use character table
 33703                                  ;	    AL = 4 : Use file table
 33704                                  ;	    psdata_seg:SI points to string buffer to be capitalized
 33705                                  ;
 33706                                  ; Output:   None
 33707                                  ;
 33708                                  ; Use:	$P_Do_CAPS_Char, $P_Chk_DBCS
 33709                                  ;***********************************************************************
 33710                                  
 33711                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33712                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33713                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33714                                  $P_Do_CAPS_String:
 33715 00004D2A 56                      	push	si			;AN000;
 33716 00004D2B 52                      	push	dx			;AN000;
 33717 00004D2C 88C2                    	mov	dl,al			;AN000; save info id
 33718                                  $P_DCS_Loop:				;AN000;
 33719 00004D2E 2E8A04                  	mov	al,[cs:si]		;AN000; load character and
 33720 00004D31 E88E06                  	call	$P_Chk_DBCS		;AN000; check if DBCS leading byte
 33721 00004D34 720C                    	jc	short $P_DCS00		;AN000; if yes, do not need CAPS
 33722                                  
 33723 00004D36 08C0                    	or	al,al			;AN000; end of string ?
 33724 00004D38 740C                    	jz	short $P_DCS_Exit	;AN000; then exit.
 33725                                  
 33726 00004D3A E80C00                  	call	$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 33727 00004D3D 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 33728 00004D40 EB01                    	jmp	short $P_DCS01		;AN000; process nexit
 33729                                  $P_DCS00:				;AN000;
 33730 00004D42 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 33731                                  $P_DCS01:				;AN000;
 33732 00004D43 46                      	inc	si			;AN000; si point to next byte
 33733 00004D44 EBE8                    	jmp	short $P_DCS_Loop	;AN000; loop until NULL encountered
 33734                                  $P_DCS_Exit:				;AN000;
 33735 00004D46 5A                      	pop	dx			;AN000;
 33736 00004D47 5E                      	pop	si			;AN000;
 33737 00004D48 C3                      	retn
 33738                                  
 33739                                  ;***********************************************************************
 33740                                  ; $P_Do_CAPS_Char;
 33741                                  ;
 33742                                  ; Function: Perform capitalization along with the file case map table
 33743                                  ;	    or character case map table.
 33744                                  ;
 33745                                  ; Input:    DL = 2 : Use character table
 33746                                  ;	    DL = 4 : Use file table
 33747                                  ;	    AL = character to be capitalized
 33748                                  ;
 33749                                  ; Output:   None
 33750                                  ;
 33751                                  ; Use:	INT 21h /w AH=65h
 33752                                  ;***********************************************************************
 33753                                  
 33754                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33755                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33756                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33757                                  $P_Do_CAPS_Char:
 33758 00004D49 3C80                    	cmp	al,$P_ASCII80	; 80h	;AN000; need upper case table ?
 33759 00004D4B 730B                    	jae	short $P_DCC_Go		;AN000;
 33760                                  
 33761 00004D4D 3C61                    	cmp	al,"a"  ; 61h		;AN000; if no,
 33762 00004D4F 723F                    	jb	short $P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 33763                                  
 33764 00004D51 3C7A                    	cmp	al,"z"  ; 7Ah		;AN000;
 33765 00004D53 773B                    	ja	short $P_CAPS_Ret	;AN000;   if yes, make CAPS
 33766                                  
 33767 00004D55 24DF                    	and	al,$P_Make_Upper ; 0DFh	;AN000;   else do nothing.
 33768                                  	;jmp	short $P_CAPS_Ret	;AN000;
 33769                                  	; 18/04/2023
 33770 00004D57 C3                      	retn
 33771                                  
 33772                                  $P_DCC_Go:				;AN000;
 33773 00004D58 53                      	push	bx			;AN000;
 33774 00004D59 06                      	push	es			;AN000;
 33775 00004D5A 57                      	push	di			;AN000;
 33776                                  	; 18/04/2023
 33777 00004D5B 8D3E[7E98]              	lea	di,$P_File_CAP_Ptr	;AC034;
 33778 00004D5F 80FA04                  	cmp	dl,$P_DOSTBL_File ; 4	;AN000; Use file CAPS table ?
 33779 00004D62 7404                    	je	short $P_DCC00		;AN000;
 33780                                  	; 27/04/2023
 33781 00004D64 8D3E[7998]              	lea	di,$P_Char_CAP_Ptr	;AC034; or use char CAPS table ?
 33782                                  $P_DCC00:				;AN000;
 33783 00004D68 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 33784 00004D6B 7416                    	je	short $P_DCC01		;AN000; if no,
 33785                                  
 33786                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 33787                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 33788                                  ; call, regardless of what base register is currently be defined as PSDATA_SEG.
 33789                                  
 33790 00004D6D 50                      	push	ax			;AN000; get CAPS table thru DOS call
 33791 00004D6E 51                      	push	cx			;AN000;
 33792 00004D6F 52                      	push	dx			;AN000;
 33793 00004D70 0E                      	push	cs			;AC036; pass current base seg into
 33794                                  					;(Note: this used to push CS. BUG...
 33795 00004D71 07                      	pop	es			;AN000;   ES reg, required for
 33796                                  					;get extended country information
 33797                                  	; 31/03/2023
 33798 00004D72 B465                    	mov	ah,$P_DOS_Get_TBL ; 65h	;AN000; get extended CDI
 33799                                  	;mov	ah,65h
 33800 00004D74 88D0                    	mov	al,dl			;AN000; upper case table
 33801                                  	;mov	bx,-1 ; 0FFFFh
 33802                                  	;mov	cx,5
 33803                                  	;mov	dx,-1
 33804 00004D76 BBFFFF                  	mov	bx,$P_DOSTBL_Def ; -1	;AN000; get active CON
 33805 00004D79 B90500                  	mov	cx,$P_DOSTBL_BL  ; 5 	;AN000; buffer length
 33806                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 33807 00004D7C 89DA                    	mov	dx,bx
 33808                                  	;mov	dx,$P_DOSTBL_Def ; -1	;AN000; get for default code page
 33809                                  					;DI already set to point to buffer
 33810 00004D7E CD21                    	int	21h			;AN000; es:di point to buffer that
 33811                                  					;now has been filled in with info
 33812 00004D80 5A                      	pop	dx			;AN000;
 33813 00004D81 59                      	pop	cx			;AN000;
 33814 00004D82 58                      	pop	ax			;AN000;
 33815                                  
 33816                                  $P_DCC01:				;AN000;
 33817                                  
 33818                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 33819                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 33820                                  ; regardless of which base reg is currently the PSDATA_SEG reg.
 33821                                  
 33822                                  	;mov	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 33823                                  	;;mov	bx,[cs:di+1]		;AN000; get offset of table
 33824                                  	;mov	es,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Seg]
 33825                                  	;;mov	es,[cs:di+3]		;AN000; get segment of table
 33826                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 33827                                  	;les	bx,[cs:di+1]
 33828 00004D83 2EC45D01                	les	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 33829                                  	;
 33830 00004D87 43                      	inc	bx			;AC035; add '2' to
 33831 00004D88 43                      	inc	bx			;AC035;  BX reg
 33832                                  					;AN000; skip length field
 33833 00004D89 2C80                    	sub	al,$P_ASCII80 ; 80h	;AN000; make char to index
 33834                                  	;xlat	es:[bx] 		;AN000; perform case map
 33835                                  	; 31/03/2023
 33836 00004D8B 26D7                    	es	xlat
 33837                                  
 33838 00004D8D 5F                      	pop	di			;AN000;
 33839 00004D8E 07                      	pop	es			;AN000;
 33840 00004D8F 5B                      	pop	bx			;AN000;
 33841                                  $P_CAPS_Ret:				;AN000;
 33842 00004D90 C3                      	retn
 33843                                  
 33844                                  ;***********************************************************************
 33845                                  ; $P_Value / $P_SValue
 33846                                  ;
 33847                                  ; Function:  Make 32bit value from psdata_seg:SI and see value list
 33848                                  ;	     and make result buffer.
 33849                                  ;	     $P_SValue is an entry point for the signed value
 33850                                  ;	     and this will simply call $P_Value after the handling
 33851                                  ;	     of the sign character, "+" or "-"
 33852                                  ;
 33853                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 33854                                  ;	     ES:BX -> CONTROL block
 33855                                  ;
 33856                                  ; Output:    None
 33857                                  ;
 33858                                  ; Use:	$P_Fill_Result, $P_Check_OVF
 33859                                  ;
 33860                                  ; Vars: $P_RC(W), $P_Flags(RW)
 33861                                  ;***********************************************************************
 33862                                  
 33863                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33864                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33865                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33866                                  $P_SValue:
 33867 00004D91 50                      	push	ax			;AN000;
 33868                                  	;or	byte [cs:$P_Flags2],80h
 33869 00004D92 2E800E[BF97]80          	or	byte [cs:$P_Flags2],$P_Signed
 33870                                  					;AC034; indicate a signed numeric
 33871                                  	;and	byte [cs:$P_Flags2],0FDh
 33872 00004D98 2E8026[BF97]FD          	and	byte [cs:$P_Flags2],0FFh-$P_Neg
 33873                                  					;AC034; assume positive value
 33874 00004D9E 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 33875 00004DA1 3C2B                    	cmp	al,'+' ; 2Bh
 33876                                  	;cmp	al,$P_Plus ; '+'	;AN000; "+" ?
 33877 00004DA3 740A                    	je	short $P_SVal00		;AN000;
 33878                                  
 33879 00004DA5 3C2D                    	cmp	al,'-' ; 2Dh
 33880                                  	;cmp	al,$P_Minus ; '-'	;AN000; "-" ?
 33881 00004DA7 7507                    	jne	short $P_Sval01		;AN000; else
 33882                                  
 33883 00004DA9 2E800E[BF97]02          	or	byte [cs:$P_Flags2],$P_Neg ; 2
 33884                                  					;AC034; set this is negative value
 33885                                  $P_SVal00:				;AN000;
 33886 00004DAF 46                      	inc	si			;AN000; skip sign char
 33887                                  $P_Sval01:				;AN000;
 33888 00004DB0 E80200                  	call	$P_Value		;AN000; and process value
 33889 00004DB3 58                      	pop	ax			;AN000;
 33890                                  $P_Check_OVF_ok: ; 11/08/2024 - Retro DOS v5.0 COMMAND.COM	
 33891 00004DB4 C3                      	retn				;AN000;
 33892                                  
 33893                                  ;***********************************************************************
 33894                                  
 33895                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33896                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4955h
 33897                                  
 33898                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 33899                                  	; MSDOS 6.2 COMMAND.COM - TRANGROUP:5119h
 33900                                  
 33901                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33902                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:4FCCh
 33903                                  $P_Value:
 33904 00004DB5 50                      	push	ax			;AN000;
 33905 00004DB6 51                      	push	cx			;AN000;
 33906 00004DB7 52                      	push	dx			;AN000;
 33907 00004DB8 56                      	push	si			;AN000;
 33908 00004DB9 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 33909 00004DBB 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 33910 00004DBD 53                      	push	bx			;AN000; save control pointer
 33911                                  
 33912                                  $P_Value_Loop:				;AN000;
 33913 00004DBE 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 33914 00004DC1 08C0                    	or	al,al			;AN000; end of line ?
 33915 00004DC3 7436                    	jz	short $P_Value00	;AN000;
 33916                                  
 33917 00004DC5 E8DF00                  	call	$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 33918 00004DC8 722D                    	jc	short $P_Value_Err0	;AN000;
 33919                                  
 33920                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 33921                                  %if 0
 33922                                  	xor	ah,ah			;AN000;
 33923                                  	mov	bp,ax			;AN000; save binary number
 33924                                  	shl	dx,1			;AN000; to have 2*x
 33925                                  	rcl	cx,1			;AN000; shift left w/ carry
 33926                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33927                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 33928                                  
 33929                                  	mov	bx,dx			;AN000; save low(2*x)
 33930                                  	mov	ax,cx			;AN000; save high(2*x)
 33931                                  	shl	dx,1			;AN000; to have 4*x
 33932                                  	rcl	cx,1			;AN000; shift left w/ carry
 33933                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33934                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 33935                                  
 33936                                  	shl	dx,1			;AN000; to have 8*x
 33937                                  	rcl	cx,1			;AN000; shift left w/ carry
 33938                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33939                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 33940                                  
 33941                                  	add	dx,bx			;AN000; now have 10*x
 33942                                  	adc	cx,ax			;AN000; 32bit ADD
 33943                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33944                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 33945                                  
 33946                                  	add	dx,bp			;AN000; Add the current one degree decimal
 33947                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 33948                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 33949                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 33950                                  
 33951                                  	inc	si			;AN000; update pointer
 33952                                  	jmp	short $P_Value_Loop	;AN000; loop until NULL encountered
 33953                                  %else
 33954 00004DCA 30E4                    	xor	ah,ah
 33955 00004DCC 89C5                    	mov	bp,ax			; save binary number
 33956 00004DCE E81C00                  	call	$P_Check_OVF_shl32	; check Overflow (after shl32)
 33957 00004DD1 89D3                    	mov	bx,dx			; save low(2*x)
 33958 00004DD3 89C8                    	mov	ax,cx			; save high(2*x)
 33959 00004DD5 E81500                  	call	$P_Check_OVF_shl32	; check OverFlow (after shl32)
 33960 00004DD8 E81200                  	call	$P_Check_OVF_shl32	; check OverFlow (after shl32)
 33961 00004DDB 01DA                    	add	dx,bx			; now have 10*x
 33962 00004DDD 11C1                    	adc	cx,ax			; 32bit ADD
 33963 00004DDF E80F00                  	call	$P_Check_OVF_@		; check OverFlow
 33964 00004DE2 01EA                    	add	dx,bp			; Add the current one degree decimal
 33965 00004DE4 83D100                  	adc	cx,0			; if carry, add 1 to high 16bit
 33966 00004DE7 E80700                  	call	$P_Check_OVF_@		; check Overflow
 33967 00004DEA 46                      	inc	si			; update pointer
 33968 00004DEB EBD1                    	jmp	short $P_Value_Loop	; loop until NULL encountered
 33969                                  
 33970                                  $P_Check_OVF_shl32:
 33971 00004DED D1E2                    	shl	dx,1
 33972 00004DEF D1D1                    	rcl	cx,1
 33973                                  $P_Check_OVF_@:
 33974 00004DF1 E8A100                  	call	$P_Check_OVF
 33975                                  	;jc	short $P_Value_Err0_@
 33976                                  	;retn
 33977                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33978 00004DF4 73BE                    	jnc	short $P_Check_OVF_ok
 33979                                  
 33980                                  $P_Value_Err0_@:
 33981                                  	;inc	sp
 33982                                  	;inc	sp
 33983                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 33984 00004DF6 5B                      	pop	bx
 33985                                  %endif
 33986                                  
 33987                                  $P_Value_Err0:				;AN000;
 33988 00004DF7 5B                      	pop	bx			;AN000;
 33989 00004DF8 E98800                  	jmp	$P_Value_Err		;AN000; Bridge
 33990                                  
 33991                                  $P_Value00:				;AN000;
 33992 00004DFB 5B                      	pop	bx			;AN000; restore control pointer
 33993 00004DFC 2EF606[BF97]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2 
 33994                                  					;AC034; here cx,dx = 32bit value
 33995 00004E02 740A                    	jz	short $P_Value01	;AN000; was it negative ?
 33996                                  
 33997 00004E04 F7D1                    	not	cx			;AN000; +
 33998 00004E06 F7D2                    	not	dx			;AN000; |- Make 2's complement
 33999 00004E08 83C201                  	add	dx,1			;AN000; |
 34000 00004E0B 83D100                  	adc	cx,0			;AN000; +
 34001                                  $P_Value01:				;AN000; / nval =0
 34002 00004E0E 268B7706                	mov	si,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 34003                                  	;mov	si,[es:bx+6]		;AN000; si points to value list
 34004 00004E12 268A04                  	mov	al,[es:si]		;AN000; get nval
 34005 00004E15 3C00                    	cmp	al,$P_nval_None ; 0	;AN000; no value list ?
 34006 00004E17 7505                    	jne	short $P_Value02	;AN000;
 34007                                  
 34008                                  	;mov	al,$P_Number	; 1	;AN000; Set type
 34009                                  	;mov	ah,$P_No_Tag	; 0FFh	;AN000; No ITEM_TAG set
 34010                                  	; 31/03/2023
 34011 00004E19 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 34012 00004E1C EB6F                    	jmp	short $P_Value_Exit	;AN000;
 34013                                  
 34014                                  $P_Value02:				;AN000; / nval = 1
 34015 00004E1E 46                      	inc	si			;AN000;
 34016 00004E1F 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 34017 00004E22 3C00                    	cmp	al,$P_No_nrng	; 0	;AN000; (tm07)
 34018 00004E24 745D                    	je	short $P_Value03	;AN000; (tm07)
 34019                                  
 34020 00004E26 46                      	inc	si			;AN000; si points to 1st item_tag
 34021                                  $P_Val02_Loop:				;AN000;
 34022 00004E27 2EF606[BF97]80          	test	byte [cs:$P_Flags2],$P_Signed ; 80h
 34023                                  	;test	byte [cs:$P_Flags2],80h	;AC034;
 34024 00004E2D 751E                    	jnz	short $P_Val02_Sign	;AN000;
 34025                                  
 34026 00004E2F 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 34027                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 34028 00004E33 723B                    	jb	short $P_Val02_Next	;AN000;
 34029 00004E35 7706                    	ja	short $P_Val_In		;AN000;
 34030                                  
 34031 00004E37 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 34032                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 34033 00004E3B 7233                    	jb	short $P_Val02_Next	;AN000;
 34034                                  
 34035                                  $P_Val_In:				;AN000;
 34036 00004E3D 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 34037                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH (tm01)
 34038 00004E41 772D                    	ja	short $P_Val02_Next	;AN000;
 34039 00004E43 7224                    	jb	short $P_Val_Found	;AN000;
 34040                                  
 34041 00004E45 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 34042                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 34043 00004E49 7725                    	ja	short $P_Val02_Next	;AN000;
 34044                                  
 34045 00004E4B EB1C                    	jmp	short $P_Val_Found	;AN000;
 34046                                  
 34047                                  $P_Val02_Sign:				;AN000;
 34048 00004E4D 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 34049                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 34050 00004E51 7C1D                    	jl	short $P_Val02_Next	;AN000;
 34051 00004E53 7F06                    	jg	short $P_SVal_In	;AN000;
 34052                                  
 34053 00004E55 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 34054                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 34055 00004E59 7C15                    	jl	short $P_Val02_Next	;AN000;
 34056                                  
 34057                                  $P_SVal_In:				;AN000;
 34058 00004E5B 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 34059                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH
 34060 00004E5F 7F0F                    	jg	short $P_Val02_Next	;AN000;
 34061 00004E61 7C06                    	jl	short $P_Val_Found	;AN000;
 34062                                  
 34063 00004E63 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 34064                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 34065 00004E67 7F07                    	jg	short $P_Val02_Next	;AN000;
 34066                                  
 34067                                  	;jmp	short $P_Val_Found	;AN000;
 34068                                  	; 27/04/2023
 34069                                  $P_Val_Found:				;AN000;
 34070 00004E69 B001                    	mov	al,$P_Number ; 1	;AN000;
 34071 00004E6B 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 34072 00004E6E EB1D                    	jmp	short $P_Value_Exit	;AN000;
 34073                                  
 34074                                  $P_Val02_Next:				;AN000;
 34075 00004E70 83C609                  	add	si,$P_Len_Range ; 9 	;AN000;
 34076 00004E73 FEC8                    	dec	al			;AN000; loop nrng times in AL
 34077 00004E75 75B0                    	jnz	short $P_Val02_Loop	;AN000;
 34078                                  					; / Not found
 34079 00004E77 2EC706[B397]0600        	mov	word [cs:$P_RC],$P_Out_Of_Range
 34080                                  	;mov	word [cs:$P_RC],6	;AC034;
 34081                                  	
 34082                                  	;mov	al,$P_Number ; 1	;AN000;
 34083                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 34084                                  	; 31/03/2023
 34085 00004E7E B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 34086 00004E81 EB0A                    	jmp	short $P_Value_Exit	;AN000;
 34087                                  
 34088                                  	; 27/04/2023
 34089                                  ;$P_Val_Found:				;AN000;
 34090                                  	;mov	al,$P_Number ; 1	;AN000;
 34091                                  	;mov	ah,[es:si]		;AN000; found ITEM_TAG set
 34092                                  	;jmp	short $P_Value_Exit	;AN000;
 34093                                  
 34094                                  $P_Value03:				;AN000; / nval = 2
 34095                                  $P_Value04:				;AN000; / nval = 3 or else
 34096                                  $P_Value_Err:				;AN000;
 34097 00004E83 2EC706[B397]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 34098                                  					;AC034;
 34099                                  	;mov	al,$P_String ; 3	;AN000; Set type
 34100                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 34101                                  	; 31/03/2023
 34102 00004E8A B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 34103                                  $P_Value_Exit:				;AN000;
 34104 00004E8D E81AFD                  	call	$P_Fill_Result		;AN000;
 34105 00004E90 5E                      	pop	si			;AN000;
 34106 00004E91 5A                      	pop	dx			;AN000;
 34107 00004E92 59                      	pop	cx			;AN000;
 34108 00004E93 58                      	pop	ax			;AN000;
 34109 00004E94 C3                      	retn				;AN000;
 34110                                  
 34111                                  ;***********************************************************************
 34112                                  ; $P_Check_OVF
 34113                                  ;
 34114                                  ; Function:  Check if overflow is occurred with consideration of
 34115                                  ;	     signed or un-signed numeric value
 34116                                  ;
 34117                                  ; Input:     Flag register
 34118                                  ;
 34119                                  ; Output:    CY = 1  :	Overflow
 34120                                  ;
 34121                                  ; Vars:     $P_Flags(R)
 34122                                  ;***********************************************************************
 34123                                  
 34124                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34125                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34126                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 34127                                  $P_Check_OVF:
 34128 00004E95 9C                      	pushf				;AN000;
 34129 00004E96 2EF606[BF97]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2
 34130                                  					;AC034; is it negative value ?
 34131 00004E9C 7502                    	jnz	short $P_COVF		;AN000; if no, check overflow
 34132 00004E9E 9D                      	popf				;AN000; by the CY bit
 34133 00004E9F C3                      	retn				;AN000;
 34134                                  $P_COVF:				;AN000;
 34135 00004EA0 9D                      	popf				;AN000; else,
 34136 00004EA1 7002                    	jo	short $P_COVF00		;AN000; check overflow by the OF
 34137 00004EA3 F8                      	clc				;AN000; indicate it with CY bit
 34138 00004EA4 C3                      	retn				;AN000; CY=0 means no overflow
 34139                                  $P_0099Err:	; 31/03/2023
 34140                                  $P_COVF00:				;AN000;
 34141 00004EA5 F9                      	stc				;AN000; and CY=1 means overflow
 34142                                  $P_0099Err2:	; 31/03/2023
 34143 00004EA6 C3                      	retn				;AN000;
 34144                                  
 34145                                  ;***********************************************************************
 34146                                  ; $P_0099;
 34147                                  ;
 34148                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 34149                                  ;
 34150                                  ; Input:     AL = character code
 34151                                  ;
 34152                                  ; Output:    CY = 1 : AL is not number
 34153                                  ;	     CY = 0 : AL contains binary value
 34154                                  ;***********************************************************************
 34155                                  
 34156                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34157                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34158                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 34159                                  $P_0099:
 34160 00004EA7 3C30                    	cmp	al,"0"                  ;AN000;
 34161                                  	;jb	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 34162                                  	; 31/03/2023
 34163 00004EA9 72FB                    	jb	short $P_0099Err2
 34164                                  
 34165 00004EAB 3C39                    	cmp	al,"9"                  ;AN000;
 34166 00004EAD 77F6                    	ja	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 34167                                  
 34168 00004EAF 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 34169                                  	; 31/03/2023
 34170                                  	;clc				;AN000; indicate no error
 34171 00004EB1 C3                      	retn				;AN000;
 34172                                  	 ;31/03/2023
 34173                                  ;$P_0099Err:				;AN000;
 34174                                  ;	stc				;AN000; indicate error
 34175                                  ;	retn				;AN000;
 34176                                  
 34177                                  ;***********************************************************************
 34178                                  ; $P_Simple_String
 34179                                  ;
 34180                                  ; Function:  See value list for the simple string
 34181                                  ;	     and make result buffer.
 34182                                  ;
 34183                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34184                                  ;	     ES:BX -> CONTROL block
 34185                                  ;
 34186                                  ; Output:    None
 34187                                  ;
 34188                                  ; Use:	$P_Fill_Result, $P_String_Comp
 34189                                  ;
 34190                                  ; Vars: $P_RC(W)
 34191                                  ;***********************************************************************
 34192                                  
 34193                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34194                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34195                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 34196                                  $P_Simple_String:
 34197 00004EB2 50                      	push	ax			;AN000;
 34198 00004EB3 53                      	push	bx			;AN000;
 34199 00004EB4 52                      	push	dx			;AN000;
 34200 00004EB5 57                      	push	di			;AN000;
 34201 00004EB6 268B7F06                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 34202                                  	;mov	di,[es:bx+6]		;AN000; di points to value list
 34203 00004EBA 268A05                  	mov	al,[es:di]		;AN000; get nval
 34204 00004EBD 08C0                    	or	al,al			;AN000; no value list ?
 34205 00004EBF 7502                    	jnz	short $P_Sim00		;AN000; then
 34206                                  	; 31/03/2023
 34207                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 34208 00004EC1 EB48                    	jmp	short $P_Sim_Exit	;AN000; and set result buffer
 34209                                  $P_Sim00:				;AN000;
 34210 00004EC3 3C03                    	cmp	al,$P_nval_String ; 3	;AN000; String choice list provided ?
 34211 00004EC5 753D                    	jne	short $P_Sim01		;AN000; if no, syntax error
 34212                                  
 34213 00004EC7 47                      	inc	di			;AN000;
 34214 00004EC8 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 34215 00004ECB B409                    	mov	ah,$P_Len_Range ; 9	;AN000;
 34216 00004ECD F6E4                    	mul	ah			;AN000;  Skip nrng field
 34217 00004ECF 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 34218 00004ED0 01C7                    	add	di,ax			;AN000; di points to nnval
 34219 00004ED2 268A05                  	mov	al,[es:di]		;AN000; get nnval
 34220 00004ED5 B405                    	mov	ah,$P_Len_Value ; 5	;AN000;
 34221 00004ED7 F6E4                    	mul	ah			;AN000; Skip nnval field
 34222 00004ED9 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 34223 00004EDA 01C7                    	add	di,ax			;AN000; di points to nstrval
 34224 00004EDC 268A05                  	mov	al,[es:di]		;AN000; get nstrval
 34225 00004EDF 47                      	inc	di			;AC035; add '2' to
 34226 00004EE0 47                      	inc	di			;AC035;  DI reg
 34227                                  					;AN000; di points to 1st string in list
 34228                                  $P_Sim_Loop:				;AN000;
 34229 00004EE1 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 34230 00004EE4 E82F00                  	call	$P_String_Comp		;AN000; compare it with operand
 34231 00004EE7 7310                    	jnc	short $P_Sim_Found	;AN000; found on list ?
 34232                                  
 34233 00004EE9 83C703                  	add	di,$P_Len_String ; 3	;AN000; if no, point to next choice
 34234 00004EEC FEC8                    	dec	al			;AN000; loop nstval times in AL
 34235 00004EEE 75F1                    	jnz	short $P_Sim_Loop	;AN000;
 34236                                  					;AN000; / Not found
 34237 00004EF0 2EC706[B397]0800        	mov	word [cs:$P_RC],$P_Not_In_Str
 34238                                  	;mov	[cs:$P_RC],8		;AC034;
 34239                                  	; 31/03/2023
 34240                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 34241 00004EF7 EB12                    	jmp	short $P_Sim_Exit	;AN000;
 34242                                  $P_Sim_Found:				;AN000;
 34243 00004EF9 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 34244 00004EFD B002                    	mov	al,$P_List_Idx	; 2	;AN000;
 34245 00004EFF 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 34246 00004F02 EB0A                    	jmp	short $P_Sim_Exit0	;AN000;
 34247                                  $P_Sim01:				;AN000;
 34248 00004F04 2EC706[B397]0900        	mov	word [cs:$P_RC],$P_Syntax
 34249                                  	;mov	word [cs:$P_RC],9	;AC034;
 34250                                  $P_Sim_Exit:
 34251                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 34252                                  ;$P_Sim_Exit:				;AN000;
 34253                                  	;mov	al,$P_String ; 3	;AN000; Set type
 34254                                  	; 31/03/2023
 34255 00004F0B B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 34256                                  $P_Sim_Exit0:				;AN000;
 34257 00004F0E E899FC                  	call	$P_Fill_Result		;AN000;
 34258 00004F11 5F                      	pop	di			;AN000;
 34259 00004F12 5A                      	pop	dx			;AN000;
 34260 00004F13 5B                      	pop	bx			;AN000;
 34261 00004F14 58                      	pop	ax			;AN000;
 34262 00004F15 C3                      	retn				;AN000;
 34263                                  
 34264                                  ;***********************************************************************
 34265                                  ; $P_String_Comp:
 34266                                  ;
 34267                                  ; Function:  Compare two string
 34268                                  ;
 34269                                  ; Input:     psdata_seg:SI -> 1st string
 34270                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 34271                                  ;	     ES:BX -> CONTROL block
 34272                                  ;
 34273                                  ; Output:    CY = 1 if not match
 34274                                  ;
 34275                                  ; Use:	$P_Chk_DBCS, $P_Do_CAPS_Char
 34276                                  ;
 34277                                  ; Vars: $P_KEYor_SW_Ptr(W), $P_Flags(R). $P_KEYorSW_Ptr
 34278                                  ;***********************************************************************
 34279                                  
 34280                                  	; 01/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34281                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34282                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 34283                                  $P_String_Comp:
 34284 00004F16 50                      	push	ax			;AN000;
 34285 00004F17 55                      	push	bp			;AN000;
 34286 00004F18 52                      	push	dx			;AN000;
 34287 00004F19 56                      	push	si			;AN000;
 34288 00004F1A B202                    	mov	dl,$P_DOSTBL_Char ; 2	;AN000; use character case map table
 34289                                  $P_SCOM_Loop:				;AN000;
 34290 00004F1C 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 34291 00004F1F E8A004                  	call	$P_Chk_DBCS		;AN000; DBCS ?
 34292 00004F22 723C                    	jc	short $P_SCOM00		;AN000; yes,DBCS
 34293                                  
 34294 00004F24 E822FE                  	call	$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 34295                                  	
 34296 00004F27 2EF606[BF97]08          	test	byte [cs:$P_Flags2],$P_Key_Cmp ; 8
 34297                                  					;AC034; keyword search ?
 34298 00004F2D 740D                    	jz	short $P_SCOM04		;AN000;
 34299                                  
 34300                                  	;cmp	al,'=' ; 3Dh
 34301 00004F2F 3C3D                    	cmp	al,$P_Keyword  ;'='	;AN000; "=" is delimiter
 34302 00004F31 751F                    	jne	short $P_SCOM03		;AN000;IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 34303                                  
 34304 00004F33 26807E0100              	cmp	byte [es:bp+1],$P_NULL	;AN021;   at end of keyword string in the control block THEN
 34305 00004F38 7562                    	jne	short $P_SCOM_Differ	;AN021;
 34306                                  
 34307 00004F3A EB13                    	jmp	short $P_SCOM05 	;AN000;   keyword found in synonym list
 34308                                  
 34309                                  $P_SCOM04:				;AN000;
 34310 00004F3C 2EF606[BF97]10          	test	byte [cs:$P_Flags2],$P_SW_Cmp ; 10h
 34311                                  					;AC034; switch search ?
 34312 00004F42 740E                    	jz	short $P_SCOM03		;AN000;
 34313                                  
 34314 00004F44 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; ":" is delimiter, at end of switch on command line
 34315 00004F46 750A                    	jne	short $P_SCOM03		;AN000; continue compares
 34316                                  
 34317 00004F48 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN021; IF at end of switch on command AND
 34318 00004F4D 754D                    	jne	short $P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 34319                                  
 34320                                  $P_SCOM05:				;AN000;   found a match
 34321 00004F4F 46                      	inc	si			;AN000; si points to just after "=" or ":"
 34322 00004F50 EB58                    	jmp	short $P_SCOM_Same	;AN000; exit
 34323                                  
 34324                                  $P_SCOM03:				;AN000;
 34325 00004F52 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 34326 00004F56 751D                    	jne	short $P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 34327                                  
 34328 00004F58 08C0                    	or	al,al			;AN000; end of line
 34329 00004F5A 744E                    	jz	short $P_SCOM_Same	;AN000; if so, exit
 34330                                  
 34331 00004F5C 46                      	inc	si			;AN000; update operand pointer
 34332 00004F5D 45                      	inc	bp			;AN000;    and synonym pointer
 34333 00004F5E EB13                    	jmp	short $P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 34334                                  
 34335                                  $P_SCOM00:				;AN000; Here al is DBCS leading byte
 34336 00004F60 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 34337 00004F64 7536                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different
 34338                                  
 34339 00004F66 46                      	inc	si			;AN000; else, load next byte
 34340 00004F67 2E8A04                  	mov	al,[cs:si]		;AN000; and
 34341 00004F6A 45                      	inc	bp			;AN000;
 34342 00004F6B 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 34343 00004F6F 752B                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different, too
 34344                                  
 34345 00004F71 46                      	inc	si			;AN000; else update operand pointer
 34346 00004F72 45                      	inc	bp			;AN000; 	and synonym pointer
 34347                                  $P_SCOM01:				;AN000;
 34348 00004F73 EBA7                    	jmp	short $P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 34349                                  
 34350                                  $P_SCOM_Differ0:			;AN000;
 34351 00004F75 2EF606[BF97]40          	test	byte [cs:$P_Flags2],$P_SW ; 40h
 34352                                  	;test	byte [cs:$P_Flags2],40h	;AC034;(tm10)
 34353 00004F7B 740E                    	jz	short $P_not_applicable	;AN000;(tm10)
 34354                                  
 34355                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 34356                                  	;;test	word [es:bx+2],20h	;AN000;(tm10)
 34357                                  	; 03/04/2023
 34358 00004F7D 26F6470220              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 34359 00004F82 7407                    	jz	short $P_not_applicable	;AN000;(tm10)
 34360                                  
 34361 00004F84 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000;(tm10)
 34362 00004F89 741F                    	je	short $P_SCOM_Same	;AN025;(tm10)
 34363                                  
 34364                                  $P_not_applicable:			;AN000;(tm10)
 34365                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 34366                                  	;;test	word [es:bx],10h	;AN000; ignore colon option specified ?
 34367                                  	; 03/04/2023
 34368 00004F8B 26F60710                	test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 34369 00004F8F 740B                    	jz	short $P_SCOM_Differ	;AN000; if no, say different.
 34370                                  
 34371 00004F91 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; End up with ":" and
 34372 00004F93 750A                    	jne	short $P_SCOM02		;AN000;    subseqently
 34373                                  
 34374 00004F95 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN000;      NULL ?
 34375                                  	;jne	short $P_SCOM_Differ	;AN000; if no, say different
 34376                                  	;jmp	short $P_SCOM_Same	;AN000; else, say same
 34377                                  	; 01/04/2023
 34378 00004F9A 740E                    	je	short $P_SCOM_Same
 34379                                  $P_SCOM_Differ:
 34380 00004F9C F9                      	stc
 34381 00004F9D EB10                    	jmp	short $P_SCOM_Exit
 34382                                  
 34383                                  $P_SCOM02:				;AN000;
 34384 00004F9F 3C00                    	cmp	al,$P_NULL ; 0		;AN000; end up NULL and :
 34385 00004FA1 75F9                    	jne	short $P_SCOM_Differ	;AN000;
 34386                                  
 34387                                  	;cmp	byte [es:bp],':'
 34388 00004FA3 26807E003A              	cmp	byte [es:bp],$P_Colon	;AN000; if no, say different
 34389                                  	;je	short $p_SCOM_Same	;AN000; else, say same
 34390                                  	; 01/04/2023
 34391 00004FA8 75F2                    	jne	short $P_SCOM_Differ
 34392                                  ;$P_SCOM_Differ: 			;AN000;
 34393                                  	;stc				;AN000; indicate not found
 34394                                  	;jmp	short $P_SCOM_Exit	;AN000;
 34395                                  
 34396                                  $P_SCOM_Same:				;AN000;
 34397 00004FAA 2E8936[C297]            	mov	[cs:$P_KEYorSW_Ptr],si	;AC034; for later use by keyword or switch
 34398                                  	; 01/04/2023
 34399                                  	;clc
 34400                                  	; cf = 0			;AN000; indicate found
 34401                                  $P_SCOM_Exit:				;AN000;
 34402 00004FAF 5E                      	pop	si			;AN000;
 34403 00004FB0 5A                      	pop	dx			;AN000;
 34404 00004FB1 5D                      	pop	bp			;AN000;
 34405 00004FB2 58                      	pop	ax			;AN000;
 34406 00004FB3 C3                      	retn				;AN000;
 34407                                  
 34408                                  ;***********************************************************************
 34409                                  ; $P_Date_Format
 34410                                  ;
 34411                                  ; Function:  Convert a date string to DOS date format for int 21h
 34412                                  ;	     with format validation.
 34413                                  ;
 34414                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34415                                  ;	     ES:BX -> CONTROL block
 34416                                  ;
 34417                                  ; Output:    None
 34418                                  ;
 34419                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum
 34420                                  ;
 34421                                  ; Vars: $P_RC(W), $P_1st_Val(RW), $P_2nd_Val(RW), $P_3rd_Val(RW)
 34422                                  ;***********************************************************************
 34423                                  
 34424                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34425                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34426                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 34427                                  $P_Date_Format:
 34428 00004FB4 50                      	push	ax			;AN000;
 34429 00004FB5 51                      	push	cx			;AN000;
 34430 00004FB6 52                      	push	dx			;AN000;
 34431 00004FB7 56                      	push	si			;AN000;
 34432 00004FB8 53                      	push	bx			;AN000;
 34433 00004FB9 56                      	push	si			;AN000;
 34434 00004FBA E8AA00                  	call	$P_Set_CDI		;AN000; set country dependent information before process
 34435                                  
 34436                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 34437                                  %if 0
 34438                                  	; 03/04/2023
 34439                                  	;pop	si			;AN000;
 34440                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 34441                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 34442                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 34443                                  	xor	si,si
 34444                                  	mov	[cs:$P_1st_Val],si ; 0	;AC034; set initial value
 34445                                  	mov	[cs:$P_2nd_Val],si ; 0	;AC034; set initial value
 34446                                  	; 11/08/2024 
 34447                                  	mov	[cs:$P_3rd_Val],si ; 0	;AC034; set initial value
 34448                                  	pop	si
 34449                                  %else
 34450                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 34451 00004FBD 5E                      	pop	si
 34452 00004FBE B8FFFF                  	mov	ax,0FFFFh ; -1
 34453 00004FC1 2EA3[7198]              	mov	[cs:$P_1st_Val],ax ; -1	; set initial value
 34454 00004FC5 2EA3[7398]              	mov	[cs:$P_2nd_Val],ax ; -1	; set initial value
 34455 00004FC9 2EA3[7598]              	mov	[cs:$P_3rd_Val],ax ; -1	; set initial value
 34456                                  %endif
 34457 00004FCD E8B100                  	call	$P_Get_DecNum		;AN000; get 1st number
 34458                                  	;jc	short $P_DateF_Err0	;AN000;-----------------------+
 34459                                  	; 11/08/2024
 34460 00004FD0 724E                    	jc	short $P_DateF_Error	; ----------------------------+
 34461 00004FD2 2EA3[7198]              	mov	[cs:$P_1st_Val],ax	;AC034;			      |
 34462 00004FD6 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 34463 00004FD8 741A                    	jz	short $P_DateF_YMD	;AN000; 		      |
 34464 00004FDA E8A400                  	call	$P_Get_DecNum		;AN000; get 2nd number	      |
 34465 00004FDD 7241                    	jc	short $P_DateF_Error	;AN000; 		      |
 34466 00004FDF 2EA3[7398]              	mov	[cs:$P_2nd_Val],ax	;AC034;			      |
 34467 00004FE3 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 34468 00004FE5 740D                    	jz	short $P_DateF_YMD	;AN000; 		      |
 34469 00004FE7 E89700                  	call	$P_Get_DecNum		;AN000; get 3rd number	      |
 34470                                  $P_DateF_Err0:				;AN000; Bridge	  <-----------+
 34471 00004FEA 7234                    	jc	short $P_DateF_Error	;AN000;
 34472 00004FEC 2EA3[7598]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 34473 00004FF0 08DB                    	or	bl,bl			;AN000; end of line ?
 34474 00004FF2 752C                    	jnz	short $P_DateF_Error	;AN000;
 34475                                  $P_DateF_YMD:				;AN000;
 34476 00004FF4 2E8B1E[4F98]            	mov	bx,[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]
 34477                                  	;mov	bx,[cs:$P_Country_Info]	;AC034; get date format
 34478 00004FF9 83FB02                  	cmp	bx,$P_Date_YMD ; 2	;AN000;
 34479 00004FFC 7435                    	je	short $P_DateF00	;AN000;
 34480 00004FFE 2EA1[7198]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 34481 00005002 08E4                    	or	ah,ah			;AN000;
 34482 00005004 751A                    	jnz	short $P_DateF_Error	;AN000;
 34483 00005006 88C1                    	mov	cl,al			;AN000; set month
 34484 00005008 2EA1[7398]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 34485 0000500C 08E4                    	or	ah,ah			;AN000; if overflow, error.
 34486 0000500E 7510                    	jnz	short $P_DateF_Error	;AN000;
 34487 00005010 88C5                    	mov	ch,al			;AN000; set date
 34488 00005012 2E8B16[7598]            	mov	dx,[cs:$P_3rd_Val]	;AC034; set year
 34489 00005017 83FB01                  	cmp	bx,$P_Date_DMY ; 1	;AN000; from here format = MDY
 34490 0000501A 7502                    	jne	short $P_DateF01	;AN000; if it is DMY
 34491 0000501C 86E9                    	xchg	ch,cl			;AN000;  then swap M <-> D
 34492                                  $P_DateF01:				;AN000;
 34493 0000501E EB2C                    	jmp	short $P_DateF02	;AN000;
 34494                                  
 34495                                  $P_DateF_Error: 			;AN000;
 34496 00005020 5B                      	pop	bx			;AN000; recover CONTROL block
 34497 00005021 5E                      	pop	si			;AN000; recover string pointer
 34498                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 34499                                  	;mov	al,$P_String ; 3	;AN000; result
 34500                                  	; 03/04/2023
 34501 00005022 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 34502 00005025 E882FB                  	call	$P_Fill_Result		;AN000; buffer
 34503                                  					;AN000; to string
 34504 00005028 2EC706[B397]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 34505                                  					;AC034; indicate syntax error
 34506                                  $P_Date_Format_Exit:			;AN000;
 34507 0000502F 5A                      	pop	dx			;AN000;
 34508 00005030 59                      	pop	cx			;AN000;
 34509 00005031 58                      	pop	ax			;AN000;
 34510 00005032 C3                      	retn				;AN000;
 34511                                  
 34512                                  $P_DateF00:				;AN000; / here format = YMD
 34513 00005033 2E8B16[7198]            	mov	dx,[cs:$P_1st_Val]	;AC034; set year
 34514 00005038 2EA1[7398]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 34515 0000503C 08E4                    	or	ah,ah			;AN000; if overflow, error
 34516 0000503E 75E0                    	jnz	short $P_DateF_Error	;AN000;
 34517                                  
 34518 00005040 88C1                    	mov	cl,al			;AN000; set month
 34519 00005042 2EA1[7598]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 34520 00005046 08E4                    	or	ah,ah			;AN000; if overflow, error
 34521 00005048 75D6                    	jnz	short $P_DateF_Error	;AN000;
 34522 0000504A 88C5                    	mov	ch,al			;AN000; set date
 34523                                  $P_DateF02:				;AN000;
 34524                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 34525                                  %if 0
 34526                                  	cmp	dx,100			;AN000; year is less that 100 ?
 34527                                  	jae	short $P_DateF03	;AN000;
 34528                                  	add	dx,1900 		;AN000; set year 19xx
 34529                                  %else
 34530 0000504C 83FA64                  	cmp	dx,100
 34531 0000504F 730C                    	jnb	short $P_DateF03
 34532 00005051 83FA50                  	cmp	dx,80
 34533 00005054 7303                    	jnb	short $P_DateF02_@
 34534 00005056 83C264                  	add	dx,100
 34535                                  $P_DateF02_@:
 34536 00005059 81C26C07                	add	dx,1900
 34537                                  %endif
 34538                                  $P_DateF03:				;AN000;
 34539 0000505D 5B                      	pop	bx			;AN000; recover CONTROL block
 34540 0000505E 5E                      	pop	si			;AN000; recover string pointer
 34541                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 34542                                  	;mov	al,$P_Date_F ; 7	;AN000; result
 34543                                  	; 03/04/2023
 34544 0000505F B807FF                  	mov	ax,($P_No_Tag<<8)+$P_Date_F
 34545 00005062 E845FB                  	call	$P_Fill_Result		;AN000; buffer
 34546 00005065 EBC8                    	jmp	short $P_Date_Format_Exit
 34547                                  					;AN000;	to Date
 34548                                  
 34549                                  ;***********************************************************************
 34550                                  ; $P_Set_CDI:
 34551                                  ;
 34552                                  ; Function: Read CDI from DOS if it has not been read yet
 34553                                  ;
 34554                                  ; Input:    None
 34555                                  ;
 34556                                  ; Output:   psdata_seg:SI -> CDI
 34557                                  ;
 34558                                  ; Use:	INT 21h w/ AH = 38h
 34559                                  ;***********************************************************************
 34560                                  
 34561                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34562                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34563                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 34564                                  $P_Set_CDI:
 34565                                  	; 18/04/2023
 34566 00005067 8D36[4F98]              	lea	si,$P_Country_Info	;AC034;
 34567                                  	;cmp	word [cs:si+$P_CDI.$P_CDI_DateF],-1 ; $P_NeedToBeRead
 34568 0000506B 2E833CFF                	cmp	word [cs:si],-1 ; $P_NeedToBeRead ; 0FFFFh
 34569                                  					;AN000; already read ?
 34570                                  	;je	short $P_Read_CDI	;AN000;
 34571                                  	;jmp	short $P_Set_CDI_Exit	;AN000; then do nothing
 34572                                  	; 03/04/2023
 34573 0000506F 750F                    	jne	short $P_Set_CDI_Exit
 34574                                  $P_Read_CDI:				;AN000; else read CDI thru DOS
 34575 00005071 1E                      	push	ds			;AN000;
 34576 00005072 52                      	push	dx			;AN000;
 34577 00005073 50                      	push	ax			;AN000;
 34578 00005074 0E                      	push	cs			;AC023;
 34579 00005075 1F                      	pop	ds			;AN000; set segment register
 34580                                  	;mov	ax,3800h
 34581 00005076 B80038                  	mov	ax,$P_DOS_Get_CDI	;AN000; get country information
 34582 00005079 89F2                    	mov	dx,si			;AN000; set offset of CDI in local data area
 34583 0000507B CD21                    	int	21h			;AN000;
 34584 0000507D 58                      	pop	ax			;AN000;
 34585 0000507E 5A                      	pop	dx			;AN000;
 34586 0000507F 1F                      	pop	ds			;AN000;
 34587                                  $P_Set_CDI_Exit:			;AN000;
 34588 00005080 C3                      	retn				;AN000;
 34589                                  
 34590                                  ;***********************************************************************
 34591                                  ; $P_Get_DecNum:
 34592                                  ;
 34593                                  ; Function:  Read a character code from psdata_seg:SI until specified delimiter
 34594                                  ;	     or NULL encountered. And make a decimal number.
 34595                                  ;
 34596                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34597                                  ;
 34598                                  ; Output:    BL = delimiter code or NULL
 34599                                  ;	     AX = Decimal number
 34600                                  ;	     SI advanced to the next number
 34601                                  ;	     CY = 1 : Syntax error, AL = Latest examineed number
 34602                                  ;
 34603                                  ; Use:	$P_0099
 34604                                  ;***********************************************************************
 34605                                  
 34606                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34607                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34608                                  	; 11/08/2024 - Retro DOS v5.0 COMMAND.COM
 34609                                  $P_Get_DecNum:
 34610 00005081 51                      	push	cx			;AN000;
 34611 00005082 52                      	push	dx			;AN000;
 34612 00005083 31C9                    	xor	cx,cx			;AN000; cx will have final value
 34613                                  $P_GetNum_Loop: 			;AN000;
 34614 00005085 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 34615 00005088 08C0                    	or	al,al			;AN000; end of line ?
 34616 0000508A 7438                    	jz	short $P_GetNum00	;AN000; if yes, exit
 34617 0000508C 2E803E[4E98]00          	cmp	byte [cs:$P_Got_Time],0 ;AC034; is this numeric in a time field? ;AC023
 34618 00005092 740B                    	je	short $P_Do_Date_Delims	;AN000; no, go check out Date delimiters ;AC023
 34619                                  
 34620                                  ; Determine which delimiter(s) to check for. Colon & period  or period only
 34621                                  	;cmp	bl,$P_colon_period
 34622 00005094 80FB01                  	cmp	bl,1 ; $P_colon_period	;AN032; ;Time
 34623 00005097 750E                    	jne	short $P_Do_Time_Delim1	;AN032; ;only check for period
 34624                                  
 34625 00005099 3C3A                    	cmp	al,$P_Colon ; ':'	;AN032; ;Is this a valid delimiter ?
 34626 0000509B 742B                    	je	short $P_GetNum01	;AN032; ;yes, exit
 34627                                  
 34628                                  	; 03/04/2023
 34629 0000509D EB08                    	jmp	short $P_Do_Time_Delim1
 34630                                  ;$P_Do_Time_Delim1:			;AN000;
 34631                                  	;cmp	al,$P_Period ; '.'	;;AC032;;AC023;Is this a valid delimiter ?
 34632                                  	;je	short $P_GetNum01	;AC023; yes, exit
 34633                                  	;
 34634                                  	;jmp	short $P_Neither_Delims ;AN023;
 34635                                  
 34636                                  $P_Do_Date_Delims:			;AN000;
 34637                                  ;Regardless of the date delimiter character specified in the country
 34638                                  ;dependent information, check for the presence of any one of these
 34639                                  ;three field delimiters: "-", "/", or ".".
 34640 0000509F 3C2D                    	cmp	al,$P_Minus ;'-'	;AN020;is this a date delimiter character?
 34641 000050A1 7425                    	je	short $P_GetNum01	;AN020;if yes, exit
 34642                                  
 34643 000050A3 3C2F                    	cmp	al,$P_Slash ; '/'	;AN020;is this a date delimiter character?
 34644 000050A5 7421                    	je	short $P_GetNum01	;AN020;if yes, exit
 34645                                  
 34646                                  $P_Do_Time_Delim1:  ; 03/04/2023
 34647 000050A7 3C2E                    	cmp	al,$P_Period ; '.'	;AN020;is this a date delimiter character?
 34648 000050A9 741D                    	je	short $P_GetNum01	;AN000; if yes, exit
 34649                                  
 34650                                  $P_Neither_Delims:			;AN023;
 34651 000050AB E8F9FD                  	call	$P_0099 		;AN000; convert it to binary
 34652 000050AE 721C                    	jc	short $P_GetNum_Exit	;AN000; if error exit
 34653                                  
 34654 000050B0 B400                    	mov	ah,0			;AN000;
 34655 000050B2 91                      	xchg	ax,cx			;AN000;
 34656 000050B3 BA0A00                  	mov	dx,10			;AN000;
 34657 000050B6 F7E2                    	mul	dx			;AN000; ax = ax * 10
 34658 000050B8 09D2                    	or	dx,dx			;AN000; overflow
 34659 000050BA 750F                    	jnz	short $P_GetNum02	;AN000; then exit
 34660                                  
 34661 000050BC 01C8                    	add	ax,cx			;AN000;
 34662 000050BE 720C                    	jc	short $P_GetNum_Exit	;AN000;
 34663                                  
 34664 000050C0 91                      	xchg	ax,cx			;AN000;
 34665 000050C1 46                      	inc	si			;AN000;
 34666 000050C2 EBC1                    	jmp	short $P_GetNum_Loop	;AN000;
 34667                                  
 34668                                  $P_GetNum00:				;AN000;
 34669 000050C4 88C3                    	mov	bl,al			;AN000; set bl to NULL
 34670                                  	;03/04/2023
 34671                                  	; cf=0
 34672                                  	;clc				;AN000; indicate no error
 34673 000050C6 EB04                    	jmp	short $P_GetNum_Exit	;AN000;
 34674                                  
 34675                                  $P_GetNum01:				;AN000;
 34676 000050C8 46                      	inc	si			;AN000; si points to next number
 34677                                  	;03/04/2023
 34678                                  	; cf=0
 34679                                  	;clc				;AN000; indicate no error
 34680 000050C9 EB01                    	jmp	short $P_GetNum_Exit	;AN000;
 34681                                  
 34682                                  $P_GetNum02:				;AN000;
 34683 000050CB F9                      	stc				;AN000; indicate error
 34684                                  $P_GetNum_Exit: 			;AN000;
 34685 000050CC 89C8                    	mov	ax,cx			;AN000;return value
 34686 000050CE 5A                      	pop	dx			;AN000;
 34687 000050CF 59                      	pop	cx			;AN000;
 34688 000050D0 C3                      	retn				;AN000;
 34689                                  
 34690                                  ;***********************************************************************
 34691                                  ; $P_Time_Format
 34692                                  ;
 34693                                  ; Function:  Convert a time string to DOS time format for int 21h
 34694                                  ;	     with format validation.
 34695                                  ;
 34696                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34697                                  ;	     ES:BX -> CONTROL block
 34698                                  ;
 34699                                  ; Output:    None
 34700                                  ;
 34701                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum, $P_Time_2412
 34702                                  ;
 34703                                  ; Vars: $P_RC(W), $P_Flags(R), $P_1st_Val(RW), $P_2nd_Val(RW)
 34704                                  ;	$P_3rd_Val(RW), $P_4th_Val(RW)
 34705                                  ;***********************************************************************
 34706                                  
 34707                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34708                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34709                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 34710                                  $P_Time_Format:				;AN000;
 34711 000050D1 50                      	push	ax			;AN000;
 34712 000050D2 51                      	push	cx			;AN000;
 34713 000050D3 52                      	push	dx			;AN000;
 34714 000050D4 56                      	push	si			;AN000;
 34715 000050D5 53                      	push	bx			;AN000;
 34716 000050D6 56                      	push	si			;AN000;
 34717 000050D7 E88DFF                  	call	$P_Set_CDI		;AN000; Set country independent
 34718                                  					; information before process
 34719                                  	;test	byte [cs:si+11h], 1
 34720 000050DA 2EF6441001              	test	byte [cs:si+$P_CDI.$P_CDI_TimeF],1 
 34721                                  					;AN000; 24 hour system
 34722 000050DF 5E                      	pop	si			;AN000;
 34723 000050E0 7503                    	jnz	short $P_TimeF00	;AN000; if no, means 12 hour system
 34724 000050E2 E8F800                  	call	$P_Time_2412		;AN000; this routine handle "am" "pm"
 34725                                  $P_TimeF00:				;AN000;
 34726                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 34727                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 34728                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 34729                                  	;mov	word [cs:$P_4th_Val],0	;AC034; set initial value
 34730                                  	;mov	byte [cs:$P_Got_Time],1	;AN023;AC034;; use time delimiter
 34731                                  	; 03/04/2023
 34732 000050E5 31DB                    	xor	bx,bx
 34733 000050E7 2E891E[7198]            	mov	[cs:$P_1st_Val],bx ; 0
 34734 000050EC 2E891E[7398]            	mov	[cs:$P_2nd_Val],bx ; 0
 34735 000050F1 2E891E[7598]            	mov	[cs:$P_3rd_Val],bx ; 0
 34736 000050F6 2E891E[7798]            	mov	[cs:$P_4th_Val],bx ; 0
 34737                                  	;inc	bl
 34738                                  	;mov	[cs:$P_Got_Time],bl ; 1
 34739                                  
 34740                                  	;mov	bl,$P_colon_period
 34741                                  	;mov	bl,1 ; $P_colon_period	;AN032; flag, indicates use of
 34742                                  					; delimiters between hours,
 34743                                  					;  minutes,seconds
 34744                                  	; 03/04/2023 - Retro DOS v4.0 COMMAND.COM
 34745 000050FB FEC3                    	inc	bl ; bl = 1
 34746 000050FD 2E881E[4E98]            	mov	[cs:$P_Got_Time],bl ; 1
 34747                                  	;
 34748 00005102 E87CFF                  	call	$P_Get_DecNum		;AN000; get 1st number
 34749                                  	;jc	short $P_TimeF_Err0	;AN000;
 34750                                  	; 12/08/2024
 34751 00005105 725A                    	jc	short $P_TimeF_Error
 34752 00005107 2EA3[7198]              	mov	[cs:$P_1st_Val],ax	;AC034;
 34753 0000510B 08DB                    	or	bl,bl			;AN000; end of line ?
 34754 0000510D 7478                    	jz	short $P_TimeF_Rlt	;AN000;
 34755 0000510F E86FFF                  	call	$P_Get_DecNum		;AN000; get 2nd number
 34756                                  	;jc	short $P_TimeF_Err0	;AC038; if OK
 34757                                  	; 12/08/2024
 34758 00005112 724D                    	jc	short $P_TimeF_Error
 34759 00005114 2EA3[7398]              	mov	[cs:$P_2nd_Val],ax	;AC034;
 34760 00005118 08DB                    	or	bl,bl			;AN000; end of line ?
 34761 0000511A 746B                    	jz	short $P_TimeF_Rlt	;AN000;
 34762 0000511C B302                    	mov	bl,2 ; $P_period_only	;AN032; flag, which to decimal separator
 34763 0000511E E860FF                  	call	$P_Get_DecNum		;AN000; get 3rd number
 34764                                  	;jc	short $P_TimeF_Err0	;AC039; if problem, bridge to error
 34765                                  	; 12/08/2024
 34766 00005121 723E                    	jc	short $P_TimeF_Error
 34767 00005123 2EA3[7598]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 34768 00005127 08DB                    	or	bl,bl			;AN000; end of line ?
 34769 00005129 754F                    	jnz	short $P_Time_4		;AN039; NOT END OF LINE,
 34770                                  					;AN039;   GO TO 4TH NUMBER
 34771                                  	;test	byte [cs:$P_Flags1],$P_Time_Again ; 2
 34772 0000512B 2EF606[BE97]02          	test	byte [cs:$P_Flags1],2 	;AN039; HAS TIME PARSE
 34773                                  					;AN039;    BEEN REPEATED?
 34774 00005131 7554                    	jnz	short $P_TimeF_Rlt	;AN039; yes, this is really
 34775                                  					;AN039;   the end of line
 34776                                  					;AN039; no, time has not been repeated
 34777 00005133 2E8B36[B597]            	mov	si,[cs:$P_SI_Save]	;AN039; get where parser quit
 34778                                  					;AN039;   in command line
 34779 00005138 807CFF2C                	cmp	byte [si-1],$P_Comma ; ','
 34780                                  					;AN039; look at delimiter
 34781                                  					;AN039;   from command line
 34782 0000513C 7549                    	jne	short $P_TimeF_Rlt	;AN039; was not a comma, this is
 34783                                  					;AN039;  really end of line
 34784                                  					;AN039; is comma before hundredths,
 34785                                  					;AN039;   redo TIME
 34786 0000513E C644FF2E                	mov	byte [si-1],$P_Period ; '.' 
 34787                                  					;AN039; change that ambiguous
 34788                                  					;AN039;    comma to a decimal point
 34789                                  					;AN039;     parse can understand
 34790 00005142 2EC706[BE97]0000        	mov	word [cs:$P_Flags],0	;AN039; Clear all internal flags
 34791                                  	;or	byte [cs:$P_Flags1],$P_Time_Again
 34792 00005149 2E800E[BE97]02          	or	byte [cs:$P_Flags1],2	;AN039; indicate TIME
 34793                                  					;AN039; is being repeated
 34794 0000514F 2E8B0E[4898]            	mov	cx,[cs:$P_ORIG_ORD]	;AN039; ORIGINAL ORDINAL FROM CX
 34795 00005154 2E8B26[4A98]            	mov	sp,[cs:$P_ORIG_STACK]	;AN039; ORIGINAL VALUE
 34796                                  					;AN039;   OF STACK FROM SP
 34797 00005159 2E8B36[4C98]            	mov	si,[cs:$P_ORIG_SI]	;AN039; ORIGINAL START
 34798                                  					;AN039;   PARSE POINTER FROM SI
 34799 0000515E E921F8                  	jmp	$P_Redo_Time		;AN039; go try TIME again
 34800                                  
 34801                                  	; 12/08/2024
 34802                                  $P_TimeF_Error: 			;AN000;
 34803                                  $P_TimeF_Err:				;AN000;
 34804 00005161 5B                      	pop	bx			;AN000; recover CONTROL block
 34805 00005162 5E                      	pop	si			;AN000; recover string pointer
 34806                                  	;mov	ah,$P_No_Tag		;AN000; set
 34807                                  	;mov	al,$P_String		;AN000;     result
 34808                                  	; 03/04/2023
 34809 00005163 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 34810 00005166 E841FA                  	call	$P_Fill_Result		;AN000; 	  buffer
 34811                                  					;AN000; to string
 34812 00005169 2EC706[B397]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9	
 34813                                  					;AC034; return syntax error
 34814                                  $P_Time_Format_Exit:			;AN000;
 34815 00005170 2EC606[4E98]00          	mov	byte [cs:$P_Got_Time],0	;AN023;AC034; finished with this time field
 34816 00005176 5A                      	pop	dx			;AN000;
 34817 00005177 59                      	pop	cx			;AN000;
 34818 00005178 58                      	pop	ax			;AN000;
 34819 00005179 C3                      	retn
 34820                                  
 34821                                  $P_Time_4:				;AN039; READY FOR 4TH (HUNDREDTHS) NUMBER
 34822 0000517A E804FF                  	call	$P_Get_DecNum		;AN000; get 4th number
 34823                                  $P_TimeF_Err0:				;AN000; Bridge
 34824 0000517D 72E2                    	jc	short $P_TimeF_Error	;AN000;
 34825                                  	;
 34826 0000517F 2EA3[7798]              	mov	[cs:$P_4th_Val],ax	;AC034;
 34827 00005183 08DB                    	or	bl,bl			;AN000; After hundredth, no data allowed
 34828 00005185 75DA                    	jnz	short $P_TimeF_Error	;AN000; if some, then error
 34829                                  $P_TimeF_Rlt:				;AN000;
 34830 00005187 2EA1[7198]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 34831 0000518B 08E4                    	or	ah,ah			;AN000; if overflow then error
 34832 0000518D 75D2                    	jnz	short $P_TimeF_Err	;AN000;
 34833                                  	;test	byte [cs:$P_Flags1],$P_Time12am ; 1
 34834 0000518F 2EF606[BE97]01          	test	byte [cs:$P_Flags1],1	;AN038;if "am" specified
 34835 00005195 7408                    	jz	short $P_Time_notAM	;AN038;skip if no "AM" specified
 34836                                  					;since "AM" was specified,
 34837 00005197 3C0C                    	cmp	al,12			;AN038: if hour specified as later than noon
 34838 00005199 77C6                    	ja	short $P_TimeF_Err	;AN038; error if "AM" on more than noon
 34839 0000519B 7502                    	jne	short $P_Time_notAM	;AN038; for noon exactly,
 34840 0000519D 30C0                    	xor	al,al			;AN038; set hour = zero
 34841                                  $P_Time_notAM:				;AN038;
 34842                                  	;test	byte [cs:$P_Flags2],$P_Time12
 34843 0000519F 2EF606[BF97]04          	test	byte [cs:$P_Flags2],4	;AC034; if 12 hour system and pm is specified
 34844 000051A5 740C                    	jz	short $P_TimeSkip00	;AN000; then
 34845 000051A7 3C0C                    	cmp	al,12			;AN038; if 12:00 o'clock already
 34846 000051A9 7408                    	je	short $P_TimeSkip00	;AN038; it is PM already
 34847 000051AB 040C                    	add	al,12			;AN000; add 12 hours to make it afternoon
 34848 000051AD 72B2                    	jc	short $P_TimeF_Err	;AN000; if overflow then error
 34849 000051AF 3C18                    	cmp	al,24			;AN038; after adding 12, now cannot be >24
 34850 000051B1 77AE                    	ja	short $P_TimeF_Err	;AN038; if too big, error
 34851                                  $P_TimeSkip00:				;AN000;
 34852 000051B3 88C2                    	mov	dl,al			;AN000; set hour
 34853 000051B5 2EA1[7398]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 34854 000051B9 08E4                    	or	ah,ah			;AN000; if overflow then error
 34855 000051BB 75A4                    	jnz	short $P_TimeF_Err	;AN000;
 34856 000051BD 88C6                    	mov	dh,al			;AN000; set minute
 34857 000051BF 2EA1[7598]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 34858 000051C3 08E4                    	or	ah,ah			;AN000; if overflow then error
 34859 000051C5 759A                    	jnz	short $P_TimeF_Err	;AN000;
 34860 000051C7 88C1                    	mov	cl,al			;AN000; set second
 34861 000051C9 2EA1[7798]              	mov	ax,[cs:$P_4th_Val]	;AC034;
 34862 000051CD 08E4                    	or	ah,ah			;AN000; if overflow then error
 34863 000051CF 7590                    	jnz	short $P_TimeF_Err	;AN000;
 34864 000051D1 88C5                    	mov	ch,al			;AN000; set hundredth
 34865 000051D3 5B                      	pop	bx			;AN000; recover CONTROL block
 34866 000051D4 5E                      	pop	si			;AN000; recover string pointer
 34867                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 34868                                  	;mov	al,$P_Time_F ; 8 	;AN000; result
 34869                                  	; 03/04/2023
 34870 000051D5 B808FF                  	mov	ax,($P_No_Tag<<8)+$P_Time_F
 34871 000051D8 E8CFF9                  	call	$P_Fill_Result		;AN000; buffer
 34872 000051DB EB93                    	jmp	short $P_Time_Format_Exit
 34873                                  					;AN000; to time
 34874                                  
 34875                                  ;***********************************************************************
 34876                                  ; $P_Time_2412:
 34877                                  ;
 34878                                  ; Function:  Remove "a", "p", "am", or "pm" from the end of stinrg
 34879                                  ;
 34880                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34881                                  ;
 34882                                  ; Output:    Set $P_Time12 flag when the string is terminated by "p"
 34883                                  ;	     or "pm"
 34884                                  ;
 34885                                  ; Vars:  $P_Flags(W)
 34886                                  ;***********************************************************************
 34887                                  
 34888                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34889                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34890                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 34891                                  $P_Time_2412:				;AN000;
 34892 000051DD 50                      	push	ax			;AN000;
 34893 000051DE 56                      	push	si			;AN000;
 34894                                  $P_T12_Loop:				;AN000;
 34895 000051DF 2E8A04                  	mov	al,[cs:si]		;AN000; Move
 34896 000051E2 46                      	inc	si			;AN000;     si
 34897 000051E3 08C0                    	or	al,al			;AN000;       to
 34898 000051E5 75F8                    	jnz	short $P_T12_Loop	;AN000; 	end of string
 34899                                  
 34900 000051E7 2E8A44FE                	mov	al,[cs:si-2]		;AN000; get char just before NULL
 34901                                  	;or	al,20h
 34902 000051EB 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 34903 000051ED 3C70                    	cmp	al,"p"                  ;AN000; only "p" of "pm" ?
 34904 000051EF 7425                    	je	short $P_T1200		;AN000;
 34905                                  
 34906 000051F1 3C61                    	cmp	al,"a"                  ;AN000; only "a" of "am" ?
 34907 000051F3 7413                    	je	short $P_T1201		;AN000;
 34908                                  
 34909 000051F5 3C6D                    	cmp	al,"m"                  ;AN000; "m" of "am" or "pm"
 34910 000051F7 751A                    	jne	short $P_T12_Exit	;AN000;
 34911                                  
 34912 000051F9 4E                      	dec	si			;AN000;
 34913 000051FA 2E8A44FE                	mov	al,[cs:si-2]		;AN000;
 34914                                  	;or	al,20h
 34915 000051FE 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 34916 00005200 3C70                    	cmp	al,"p"                  ;AN000; "p" of "pm" ?
 34917 00005202 7412                    	je	short $P_T1200		;AN000;
 34918                                  
 34919 00005204 3C61                    	cmp	al,"a"                  ;AN000; "a" of "am" ?
 34920                                  	;je	short $P_T1201		;AN000; go process "a"
 34921                                  	;jmp	short $P_T12_Exit	;AN000; no special chars found
 34922                                  	; 05/04/2023
 34923 00005206 750B                    	jne	short $P_T12_Exit
 34924                                  
 34925                                  ;$P_T1200:				;AN000; "P" found
 34926                                  	;;or	byte [cs:$P_Flags2],$P_Time12
 34927                                  	;or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 34928                                  	;jmp	short $P_Tclr_chr	;AN038; go clear the special char
 34929                                  
 34930                                  $P_T1201:				;AN000; "A" found
 34931                                  	;or	byte [cs:$P_Flags1],$P_Time12AM
 34932 00005208 2E800E[BE97]01          	or	byte [cs:$P_Flags1],1	;AN038; flag "AM" found
 34933                                  $P_Tclr_chr:				;AN038;
 34934 0000520E 2EC644FE00              	mov	byte [cs:si-2],$P_NULL	;AN000; null out special char
 34935                                  $P_T12_Exit:				;AN000;
 34936 00005213 5E                      	pop	si			;AN000;
 34937 00005214 58                      	pop	ax			;AN000;
 34938 00005215 C3                      	retn				;AN000;
 34939                                  
 34940                                  	; 05/04/2023
 34941                                  $P_T1200:				;AN000; "P" found
 34942                                  	;or	byte [cs:$P_Flags2],$P_Time12
 34943 00005216 2E800E[BF97]04          	or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 34944 0000521C EBF0                    	jmp	short $P_Tclr_chr	;AN038; go clear the special char
 34945                                  
 34946                                  ;***********************************************************************
 34947                                  ; $P_File_Format;
 34948                                  ;
 34949                                  ; Function:  Check if the input string is valid file spec format.
 34950                                  ;	     And set the result buffer.
 34951                                  ;
 34952                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 34953                                  ;	     ES:BX -> CONTROL block
 34954                                  ;
 34955                                  ; Output:    None
 34956                                  ;
 34957                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS, $P_FileSp_Chk
 34958                                  ;
 34959                                  ; Vars: $P_RC(W), $P_SI_Save(W), $P_Terminator(W), $P_SaveSI_Cmpx(R)
 34960                                  ;	$P_SaveSI_Cmpx(R)
 34961                                  ;***********************************************************************
 34962                                  
 34963                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34964                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4DF0h
 34965                                  
 34966                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 34967                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:55B4h
 34968                                  
 34969                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 34970                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:544Ah
 34971                                  $P_File_Format:
 34972 0000521E 50                      	push	ax			;AN000;
 34973 0000521F 57                      	push	di			;AN000;
 34974 00005220 56                      	push	si			;AN000;
 34975 00005221 2E8B3E[C097]            	mov	di,[cs:$P_SaveSI_Cmpx]	;AC034; get user buffer address
 34976 00005226 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 34977 00005229 08C0                    	or	al,al			;AN000; end of line ?
 34978 0000522B 7413                    	je	short $P_FileF_Err	;AN000; if yes, error exit
 34979 0000522D E85D00                  	call	$P_FileSp_Chk		;AN000; else, check if file special character
 34980 00005230 7523                    	jne	short $P_FileF03	;AN000; if yes,
 34981 00005232 2EC606[8C98]01          	mov	byte [cs:$P_err_flag],$P_error_filespec ; 1
 34982                                  					;AN033;AC034;; set error flag- bad char.
 34983 00005238 5E                      	pop	si			;AN033;
 34984 00005239 2EC60400                	mov	byte [cs:si],$P_NULL	;AN033;
 34985 0000523D 5F                      	pop	di			;AN033;
 34986 0000523E EB3E                    	jmp	short $P_FileF02	;AN033;
 34987                                  $P_FileF_Err:				;AN000;
 34988 00005240 5E                      	pop	si			;AN000;
 34989 00005241 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000;
 34990 00005245 5F                      	pop	di			;AN000;
 34991                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 34992                                  	;test	word [es:bx],1		;AN000; is it optional ?
 34993 00005246 26F60701                	test	byte [es:bx],$P_Optional ; 1
 34994 0000524A 7532                    	jnz	short $P_FileF02	;AN000;
 34995 0000524C 2EC706[B397]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 34996                                  	;mov	word [cs:$P_RC],2	;AC034; 3/17/87
 34997 00005253 EB29                    	jmp	short $P_FileF02	;AN000;
 34998                                  $P_FileF03:				;AN000;
 34999 00005255 58                      	pop	ax			;AN000; discard save si
 35000 00005256 56                      	push	si			;AN000; save new si
 35001                                  $P_FileF_Loop1: 			;AN000;
 35002 00005257 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 35003 0000525A 08C0                    	or	al,al			;AN000; end of line ?
 35004 0000525C 741E                    	jz	short $P_FileF_RLT	;AN000;
 35005 0000525E E82C00                  	call	$P_FileSp_Chk		;AN000; File special character ?
 35006 00005261 740B                    	jz	short $P_FileF00	;AN000;
 35007 00005263 E85C01                  	call	$P_Chk_DBCS		;AN000; no, then DBCS ?
 35008 00005266 7302                    	jnc	short $P_FileF01	;AN000;
 35009 00005268 47                      	inc	di			;AN000; if yes, skip next byte
 35010 00005269 46                      	inc	si			;AN000;
 35011                                  $P_FileF01:				;AN000;
 35012 0000526A 47                      	inc	di			;AN000;
 35013 0000526B 46                      	inc	si			;AN000;
 35014 0000526C EBE9                    	jmp	short $P_FileF_Loop1	;AN000;
 35015                                  $P_FileF00:				;AN000;
 35016 0000526E 2EA2[B997]              	mov	[cs:$P_Terminator],al	;AC034;
 35017 00005272 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; update end of string
 35018 00005276 47                      	inc	di			;AN000;
 35019 00005277 2E893E[B597]            	mov	[cs:$P_SI_Save],di	;AC034; update next pointer in command line
 35020                                  $P_FileF_RLT:				;AN000;
 35021 0000527C 5E                      	pop	si			;AN000;
 35022 0000527D 5F                      	pop	di			;AN000;
 35023                                  $P_FileF02:				;AN000;
 35024 0000527E 58                      	pop	ax			;AN000; (tm14)
 35025                                  	;;test	ax,200h
 35026                                  	;test	ax,$P_File_Spc		;AN000; (tm14)
 35027                                  	; 05/04/2023
 35028 0000527F F6C402                  	test	ah,($P_File_Spc>>8)
 35029 00005282 7408                    	jz	short $P_Drv_Only_Exit	;AN000; (tm14)
 35030 00005284 50                      	push	ax			;AN000; (tm14)
 35031                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 35032                                  	;mov	al,$P_File_Spec ; 5 	;AN000;    result
 35033                                  	; 05/04/2023
 35034 00005285 B805FF                  	mov	ax,($P_No_Tag<<8)+$P_File_Spec
 35035 00005288 E81FF9                  	call	$P_Fill_Result		;AN000; 	buffer to file spec
 35036 0000528B 58                      	pop	ax			;AN000;
 35037                                  $P_Drv_Only_Exit:			;AN000; (tm14)
 35038 0000528C C3                      	retn				;AN000;
 35039                                  
 35040                                  ;***********************************************************************
 35041                                  ; $P_FileSp_Chk
 35042                                  ;
 35043                                  ; Function:  Check if the input byte is one of file special characters
 35044                                  ;
 35045                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 35046                                  ;	     AL = character code to be examineed
 35047                                  ;
 35048                                  ; Output:    ZF = 1 , AL is one of special characters
 35049                                  ;***********************************************************************
 35050                                  
 35051                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35052                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35053                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35054                                  $P_FileSp_Chk:
 35055 0000528D 53                      	push	bx			;AN000;
 35056 0000528E 51                      	push	cx			;AN000;
 35057                                  	;lea	bx,[cs:$P_FileSp_Char]	;AC034; special character table
 35058 0000528F 8D1E[8398]              	lea	bx,$P_FileSp_Char ; '[]|<>+=;"'
 35059 00005293 B90900                  	mov	cx,$P_FileSp_Len ; 9
 35060                                  	;mov	cx,9			;AN000; load length of it
 35061                                  $P_FileSp_Loop: 			;AN000;
 35062 00005296 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 35063 00005299 7404                    	je	short $P_FileSp_Exit	;AN000;
 35064 0000529B 43                      	inc	bx			;AN000;
 35065 0000529C E2F8                    	loop	$P_FileSp_Loop		;AN000;
 35066 0000529E 41                      	inc	cx			;AN000; reset ZF
 35067                                  $P_FileSp_Exit: 			;AN000;
 35068 0000529F 59                      	pop	cx			;AN000;
 35069 000052A0 5B                      	pop	bx			;AN000;
 35070 000052A1 C3                      	retn				;AN000;
 35071                                  
 35072                                  ;***********************************************************************
 35073                                  ; $P_Drive_Format;
 35074                                  ;
 35075                                  ; Function:  Check if the input string is valid drive only format.
 35076                                  ;	     And set the result buffer.
 35077                                  ;
 35078                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 35079                                  ;	     ES:BX -> CONTROL block
 35080                                  ;
 35081                                  ; Output:    None
 35082                                  ;
 35083                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS
 35084                                  ;
 35085                                  ; Vars: $P_RC(W)
 35086                                  ;***********************************************************************
 35087                                  
 35088                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35089                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35090                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35091                                  $P_Drive_Format:
 35092 000052A2 50                      	push	ax			;AN000;
 35093 000052A3 52                      	push	dx			;AN000;
 35094 000052A4 2E8A04                  	mov	al,[cs:si]		;AN000;
 35095 000052A7 08C0                    	or	al,al			;AN000; if null string
 35096 000052A9 7436                    	jz	short $P_Drv_Exit	;AN000; do nothing
 35097 000052AB E81401                  	call	$P_Chk_DBCS		;AN000; is it leading byte ?
 35098 000052AE 722A                    	jc	short $P_Drv_Err	;AN000;
 35099                                  	;cmp	word [cs:si+1],3Ah ; $P_Colon  ; ':'
 35100 000052B0 2E837C013A              	cmp	word [cs:si+1],$P_Colon ;AN000; "d", ":", 0  ?
 35101 000052B5 740D                    	je	short $P_DrvF00		;AN000;
 35102                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 35103                                  	;test	word [es:bx],10h	;AN000; colon can be ignored?
 35104 000052B7 26F60710                	test	byte [es:bx],$P_Ig_Colon ; 10h
 35105 000052BB 741D                    	jz	short $P_Drv_Err	;AN000;
 35106 000052BD 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; "d", 0  ?
 35107 000052C2 7516                    	jne	short $P_Drv_Err	;AN000;
 35108                                  $P_DrvF00:				;AN000;
 35109 000052C4 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case
 35110 000052C6 3C61                    	cmp	al,"a" ; 61h            ;AN000; drive letter must
 35111 000052C8 7210                    	jb	short $P_Drv_Err	;AN000; in range of
 35112 000052CA 3C7A                    	cmp	al,"z" ; 7Ah            ;AN000; "a" - "z"
 35113 000052CC 770C                    	ja	short $P_Drv_Err	;AN000; if no, error
 35114 000052CE 2C60                    	sub	al,"a"-1  ; 60h         ;AN000; make text drive to binary drive
 35115 000052D0 88C2                    	mov	dl,al			;AN000; set
 35116                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000;    result
 35117                                  	;mov	al,$P_Drive ; 6		;AN000; 	 buffer
 35118                                  	; 05/04/2023
 35119 000052D2 B806FF                  	mov	ax,($P_No_Tag<<8)+$P_Drive ; 06FFh
 35120 000052D5 E8D2F8                  	call	$P_Fill_Result		;AN000; 	       to drive
 35121 000052D8 EB07                    	jmp	short $P_Drv_Exit	;AN000;
 35122                                  $P_Drv_Err:				;AN000;
 35123 000052DA 2EC706[B397]0900        	mov	word [cs:$P_RC],$P_Syntax
 35124                                  	;mov	word [cs:$P_RC],9	;AC034;
 35125                                  $P_Drv_Exit:				;AN000;
 35126 000052E1 5A                      	pop	dx			;AN000;
 35127 000052E2 58                      	pop	ax			;AN000;
 35128 000052E3 C3                      	retn				;AN000;
 35129                                  
 35130                                  ;***********************************************************************
 35131                                  ; $P_Skip_Delim;
 35132                                  ;
 35133                                  ; Function: Skip delimiters specified in the PARMS list, white space
 35134                                  ;	    and comma.
 35135                                  ;
 35136                                  ; Input:    DS:SI -> Command String
 35137                                  ;	    ES:DI -> Parameter List
 35138                                  ;
 35139                                  ; Output:   CY = 1 if the end of line encounterd
 35140                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 35141                                  ;	    AL = Last examineed character
 35142                                  ;
 35143                                  ; Use:	    $P_Chk_EOL, $P_Chk_Delim,
 35144                                  ;
 35145                                  ; Vars:     $P_Flags(R)
 35146                                  ;***********************************************************************
 35147                                  
 35148                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35149                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35150                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35151                                  $P_Skip_Delim:				;AN000;
 35152                                  $P_Skip_Delim_Loop:			;AN000;
 35153 000052E4 AC                      	lodsb				;AN000;
 35154 000052E5 E81E00                  	call	$P_Chk_EOL		;AN000; is it EOL character ?
 35155 000052E8 7416                    	je	short $P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 35156                                  
 35157 000052EA E84B00                  	call	$P_Chk_Delim		;AN000; is it one of delimiters ?
 35158 000052ED 7514                    	jne	short $P_Skip_Delim_NCY	;AN000; if no, exit w/ CY off
 35159                                  
 35160 000052EF 2EF606[BF97]20          	test	byte [cs:$P_Flags2],$P_Extra
 35161                                  	;test	byte [cs:$P_Flags2],20h ;AC034; extra delim or comma found ?
 35162 000052F5 74ED                    	jz	short $P_Skip_Delim_Loop
 35163                                  					;AN000; if no, loop
 35164 000052F7 2EF606[BF97]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ
 35165                                  	;;test	byte [cs:$P_Flags2],41h	;AC034; /x , or xxx=zzz , (tm08)
 35166                                  	;jz	short $P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 35167                                  	;dec	si ; *			;AN000; backup si for next call (tm08)
 35168                                  	;;jmp	short $P_Exit_At_Extra	;AN000; else exit w/ CY off
 35169                                  	; 05/04/2023
 35170 000052FD 7505                    	jnz	short $P_Skip_Delim_Exit ; cf = 0
 35171                                  $P_Exit_At_Extra:			;AN000;
 35172                                  	; cf = 0
 35173                                  	;clc				;AN000; indicate extra delim
 35174 000052FF C3                      	retn				;AN000;
 35175                                  
 35176                                  $P_Skip_Delim_CY:			;AN000;
 35177 00005300 F9                      	stc				;AN000; indicate EOL
 35178 00005301 EB01                    	jmp	short $P_Skip_Delim_Exit
 35179                                  					;AN000;
 35180                                  $P_Skip_Delim_NCY:			;AN000;
 35181 00005303 F8                      	clc				;AN000; indicate non delim
 35182                                  $P_Skip_Delim_Exit:			;AN000; in this case, need
 35183 00005304 4E                      	dec	si ; *			;AN000;  backup index pointer
 35184 00005305 C3                      	retn				;AN000;
 35185                                  	; 05/04/2023
 35186                                  ;$P_Exit_At_Extra:			;AN000;
 35187                                  	;clc				;AN000; indicate extra delim
 35188                                  	;retn				;AN000;
 35189                                  
 35190                                  ;***********************************************************************
 35191                                  ; $P_Chk_EOL;
 35192                                  ;
 35193                                  ; Function: Check if AL is one of End of Line characters.
 35194                                  ;
 35195                                  ; Input:    AL = character code
 35196                                  ;	    ES:DI -> Parameter List
 35197                                  ;
 35198                                  ; Output:   ZF = 1 if one of End of Line characters
 35199                                  ;***********************************************************************
 35200                                  
 35201                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35202                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35203                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35204                                  $P_Chk_EOL:
 35205 00005306 53                      	push	bx			;AN000;
 35206 00005307 51                      	push	cx			;AN000;
 35207 00005308 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; Carriage return ?
 35208 0000530A 7429                    	je	short $P_Chk_EOL_Exit 	;AN000;
 35209 0000530C 3C00                    	cmp	al,$P_NULL ; 0		;AN000; zero ?
 35210 0000530E 7425                    	je	short $P_Chk_EOL_Exit 	;AN000;
 35211 00005310 26807D0202              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL
 35212                                  	;cmp	byte [es:di+2],2	;AN000; EOL character specified ?
 35213 00005315 721E                    	jb	short $P_Chk_EOL_Exit 	;AN000;
 35214 00005317 31DB                    	xor	bx,bx			;AN000;
 35215 00005319 268A5D03                	mov	bl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 35216                                  	;mov	bl,[es:di+3]		;AN000; get length of delimiter list
 35217 0000531D 83C304                  	add	bx,$P_Len_PARMS; 4 	;AN000; skip it
 35218 00005320 26803900                	cmp	byte [es:bx+di],$P_I_Use_Default
 35219                                  	;cmp	byte [es:bx+di],0	;AN000; No extra EOL character ?
 35220 00005324 740D                    	je	short $P_Chk_EOL_NZ	;AN000;
 35221 00005326 31C9                    	xor	cx,cx			;AN000; Get number of extra chcracter
 35222 00005328 268A09                  	mov	cl,[es:bx+di]		;AN000;
 35223                                  $P_Chk_EOL_Loop:			;AN000;
 35224 0000532B 43                      	inc	bx			;AN000;
 35225 0000532C 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 35226 0000532F 7404                    	je	short $P_Chk_EOL_Exit 	;AN000;
 35227 00005331 E2F8                    	loop	$P_Chk_EOL_Loop 	;AN000;
 35228                                  $P_Chk_EOL_NZ:				;AN000;
 35229 00005333 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; reset ZF
 35230                                  $P_Chk_EOL_Exit:			;AN000;
 35231 00005335 59                      	pop	cx			;AN000;
 35232 00005336 5B                      	pop	bx			;AN000;
 35233 00005337 C3                      	retn				;AN000;
 35234                                  
 35235                                  ;***********************************************************************
 35236                                  ; $P_Chk_Delim;
 35237                                  ;
 35238                                  ; Function: Check if AL is one of delimiter characters.
 35239                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 35240                                  ;	    blanks.
 35241                                  ;
 35242                                  ; Input:    AL = character code
 35243                                  ;	    DS:SI -> Next Character
 35244                                  ;	    ES:DI -> Parameter List
 35245                                  ;
 35246                                  ; Output:   ZF = 1 if one of delimiter characters
 35247                                  ;	    SI points to the next character
 35248                                  ; Vars:  $P_Terminator(W), $P_Flags(W)
 35249                                  ;***********************************************************************
 35250                                  
 35251                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35252                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35253                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35254                                  $P_Chk_Delim:
 35255 00005338 53                      	push	bx			;AN000;
 35256 00005339 51                      	push	cx			;AN000;
 35257 0000533A 2EC606[B997]20          	mov	byte [cs:$P_Terminator],$P_Space ; 20h
 35258                                  					;AC034; Assume terminated by space
 35259 00005340 2E8026[BF97]DF          	and	byte [cs:$P_Flags2],0FFh-$P_Extra ; 0DFh
 35260                                  					;AC034;
 35261 00005346 3C20                    	cmp	al,$P_Space ; 20h ; ' '	;AN000; Space ?
 35262 00005348 7434                    	je	short $P_Chk_Delim_Exit	;AN000;
 35263                                  
 35264 0000534A 3C09                    	cmp	al,$P_TAB ; 09h		;AN000; TAB ?
 35265 0000534C 7430                    	je	short $P_Chk_Delim_Exit	;AN000;
 35266                                  
 35267 0000534E 3C2C                    	cmp	al,$P_Comma  ; ',' 	;AN000; Comma ?
 35268 00005350 742F                    	je	short $P_Chk_Delim_Exit0
 35269                                  					;AN000;
 35270                                  $P_Chk_Delim00: 			;AN000;
 35271 00005352 3C20                    	cmp	al,20h ; $P_DBSP1	;AN000; 1st byte of DBCS Space ?
 35272 00005354 750C                    	jne	short $P_Chk_Delim01	;AN000;
 35273 00005356 803C20                  	cmp	byte [si],20h ; $P_DBSP2
 35274                                  					;AN000; 2nd byte of DBCS Space ?
 35275 00005359 7507                    	jne	short $P_Chk_Delim01	;AN000;
 35276 0000535B B020                    	mov	al,$P_Space ; 20h	;AN000;
 35277 0000535D 46                      	inc	si			;AN000; make si point to next character
 35278 0000535E 38C0                    	cmp	al,al			;AN000; Set ZF
 35279 00005360 EB1C                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 35280                                  
 35281                                  $P_Chk_Delim01: 			;AN000;
 35282                                  	;cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_Delim
 35283 00005362 26807D0201              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],1
 35284                                  	;cmp	byte [es:di+2],1	;AN000; delimiter character specified ?
 35285 00005367 7215                    	jb	short $P_Chk_Delim_Exit	;AN000;
 35286                                  
 35287 00005369 31C9                    	xor	cx,cx			;AN000;
 35288 0000536B 268A4D03                	mov	cl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 35289                                  	;mov	cl,[esi:di+3]		;AN000; get length of delimiter list
 35290                                  	;or	cx,cx			;AN000; No extra Delim character ?
 35291                                  	;jz	short $P_Chk_Delim_NZ	;AN000;
 35292                                  	; 12/08/2024 - PCDOS 7.1 COMMAND.COM
 35293 0000536F E30B                    	jcxz	$P_Chk_Delim_NZ
 35294                                  
 35295 00005371 BB0300                  	mov	bx,$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 35296                                  $P_Chk_Delim_Loop:			;AN000;
 35297 00005374 43                      	inc	bx			;AN000;
 35298 00005375 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 35299 00005378 7407                    	je	short $P_Chk_Delim_Exit0
 35300                                  					;AN000;
 35301 0000537A E2F8                    	loop	$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 35302                                  
 35303                                  $P_Chk_Delim_NZ:			;AN000;
 35304 0000537C 3C20                    	cmp	al,$P_Space ; 20h	;AN000; reset ZF
 35305                                  $P_Chk_Delim_Exit:			;AN000;
 35306 0000537E 59                      	pop	cx			;AN000;
 35307 0000537F 5B                      	pop	bx			;AN000;
 35308 00005380 C3                      	retn				;AN000;
 35309                                  
 35310                                  $P_Chk_Delim_Exit0:			;AN000;
 35311 00005381 2EA2[B997]              	mov	[cs:$P_Terminator],al	;AC034; keep terminated delimiter
 35312 00005385 2EF606[BF97]01          	test	byte [cs:$P_Flags2],$P_equ
 35313                                  	;test	byte [cs:$P_Flags2],1	;AN027;AC034;; if terminating a key=
 35314 0000538B 7506                    	jnz	short $P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 35315                                  
 35316 0000538D 2E800E[BF97]20          	or	byte [cs:$P_Flags2],$P_Extra ; 20h
 35317                                  	;or	byte [cs:$P_Flags2],20h	;AC034; flag terminated extra delimiter or comma
 35318                                  $P_No_Set_Extra:			;AN027;
 35319 00005393 38C0                    	cmp	al,al			;AN000; set ZF
 35320 00005395 EBE7                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 35321                                  
 35322                                  ;***********************************************************************
 35323                                  ; $P_Chk_Switch;
 35324                                  ;
 35325                                  ; Function: Check if AL is the switch character not in first position of
 35326                                  ;	    $P_STRING_BUF
 35327                                  ;
 35328                                  ; Input:    AL = character code
 35329                                  ;	    BX = current pointer within $P_String_Buf
 35330                                  ;	    SI =>next char on command line (following the one in AL)
 35331                                  ;
 35332                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 35333                                  ;		 position, and has no chance of being part of a date string,
 35334                                  ;		 i.e. should be treated as a delimiter.
 35335                                  ;
 35336                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 35337                                  ;		 position, or is a slash but may be part of a date string, i.e.
 35338                                  ;		 should not be treated as a delimiter.
 35339                                  ;
 35340                                  ; Vars:  $P_Terminator(W)
 35341                                  ;
 35342                                  ; Use:	 $P_0099
 35343                                  ;***********************************************************************
 35344                                  
 35345                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35346                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35347                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35348                                  $P_Chk_Switch:
 35349                                  	; 18/04/2023
 35350 00005397 8D2E[C897]              	lea	bp,$P_STRING_BUF	;AN020;AC034; BP=OFFSET of $P_String_Buf even in group addressing
 35351                                  
 35352 0000539B 39EB                    	cmp	bx,bp			;AN000;
 35353 0000539D 7418                    	je	short $P_STRUC_L2	;AN000;
 35354                                  
 35355 0000539F 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 35356 000053A1 7512                    	jne	short $P_STRUC_L5	;AN000;
 35357                                  
 35358 000053A3 F9                      	stc				;AN020;not in first position and is slash, now see if might be in date string
 35359 000053A4 50                      	push	ax			;AN020;save input char
 35360 000053A5 2E8A47FF                	mov	al,[cs:bx-1]		;AN026;AL=char before the current char
 35361 000053A9 E8FBFA                  	call	$P_0099 		;AN020;return carry set if not numeric
 35362 000053AC 7205                    	jc	short $P_STRUC_L7	;AN000;
 35363                                  
 35364 000053AE 8A04                    	mov	al,[si]			;AN020;AL=char after the current char
 35365 000053B0 E8F4FA                  	call	$P_0099			;AN020;return carry set if not numeric
 35366                                  $P_STRUC_L7:				;AN000;
 35367 000053B3 58                      	pop	ax			;AN020;restore AL to input char
 35368                                  	;jmp	short $P_STRUC_L1	;AN000;
 35369                                  	; 18/04/2023
 35370 000053B4 C3                      	retn
 35371                                  
 35372                                  $P_STRUC_L5:				;AN000;
 35373 000053B5 F8                      	clc				;AN020;not a slash
 35374                                  	;jmp	short $P_STRUC_L1	;AN000;
 35375                                  	 ;18/04/2023
 35376 000053B6 C3                      	retn
 35377                                  
 35378                                  $P_STRUC_L2:				;AN000;
 35379 000053B7 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 35380                                  	;jne	short $P_STRUC_L12	;AN000;
 35381                                  	; 18/04/2023
 35382 000053B9 75FA                    	jne	short $P_STRUC_L5
 35383                                  
 35384 000053BB 2E800E[BF97]40          	or	byte [cs:$P_Flags2],$P_SW
 35385                                  	;or	byte [cs:$P_Flags2],40h	;AN020;AC034;;could be valid switch, first char and is slash
 35386                                  	; 18/04/2023
 35387                                  ;$P_STRUC_L12:				;AN000;
 35388                                  	;clc				;AN020;CF=0 indicating first char
 35389                                  $P_STRUC_L1:				;AN000;
 35390 000053C1 C3                      	retn				;AN000;
 35391                                  
 35392                                  ;**************************************************************************
 35393                                  ; $P_Chk_DBCS:
 35394                                  ;
 35395                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 35396                                  ;
 35397                                  ;  Input:
 35398                                  ;	  AL	= Code to be examineed
 35399                                  ;
 35400                                  ;  Output:
 35401                                  ;	  If CF is on then a lead byte of DBCS
 35402                                  ;
 35403                                  ; Use: INT 21h w/AH=63
 35404                                  ;
 35405                                  ; Vars:  $P_DBCSEV_Seg(RW), $P_DBCSEV_Off(RW)
 35406                                  ;***************************************************************************
 35407                                  
 35408                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35409                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35410                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35411                                  $P_Chk_DBCS:
 35412 000053C2 1E                      	push	ds			;AN000;
 35413 000053C3 56                      	push	si			;AN000;
 35414 000053C4 53                      	push	bx			;AN000; (tm11)
 35415 000053C5 2E833E[BC97]00          	cmp	word [cs:$P_DBCSEV_SEG],0
 35416                                  					;AC034; ALREADY SET ?
 35417 000053CB 7527                    	jne	short $P_DBCS00		;AN000;
 35418 000053CD 50                      	push	ax			;AN000;
 35419 000053CE 1E                      	push	ds			;AN000; (tm11)
 35420 000053CF 51                      	push	cx			;AN000;
 35421 000053D0 52                      	push	dx			;AN000;
 35422 000053D1 57                      	push	di			;AN000;
 35423 000053D2 55                      	push	bp			;AN000;
 35424 000053D3 06                      	push	es			;AN000;
 35425 000053D4 31F6                    	xor	si,si			;AN000;
 35426 000053D6 8EDE                    	mov	ds,si			;AN000;
 35427                                  	;mov	ax,$P_DOS_GetEV 	;AN000; GET DBCS EV CALL
 35428 000053D8 B80063                  	mov	ax,6300h
 35429 000053DB CD21                    	int	21h			;AN000;
 35430 000053DD 8CDB                    	mov	bx,ds			;AN000; (tm11)
 35431 000053DF 09DB                    	or	bx,bx			;AN000; (tm11)
 35432 000053E1 07                      	pop	es			;AN000;
 35433 000053E2 5D                      	pop	bp			;AN000;
 35434 000053E3 5F                      	pop	di			;AN000;
 35435 000053E4 5A                      	pop	dx			;AN000;
 35436 000053E5 59                      	pop	cx			;AN000;
 35437 000053E6 1F                      	pop	ds			;AN000; (tm11)
 35438 000053E7 58                      	pop	ax			;AN000;
 35439 000053E8 7424                    	jz	short $P_NON_DBCS	;AN000;
 35440                                  $P_DBCS02:				;AN000;
 35441 000053EA 2E8936[BA97]            	mov	[cs:$P_DBCSEV_OFF],si	;AC034; save EV offset
 35442 000053EF 2E891E[BC97]            	mov	[cs:$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 35443                                  $P_DBCS00:				;AN000;
 35444                                  	;mov	si,[cs:$P_DBCSEV_OFF]	;AC034; load EV offset
 35445                                  	;mov	ds,[cs:$P_DBCSEV_SEG]	;AC034; and segment
 35446                                  	; 12/08/2024 - PCDOS 7.1 COMMAND.COM
 35447 000053F4 2EC53E[BA97]            	lds	di,[cs:$P_DBCSEV_OFF]
 35448                                  $P_DBCS_LOOP:				;AN000;
 35449 000053F9 833C00                  	cmp	word [si],0 		;AN000; zero vector ?
 35450 000053FC 7410                    	je	short $P_NON_DBCS	;AN000; then exit
 35451 000053FE 3A04                    	cmp	al,[si] 		;AN000;
 35452 00005400 7208                    	jb	short $P_DBCS01		;AN000; Check if AL is in
 35453 00005402 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 35454 00005405 7703                    	ja	short $P_DBCS01		;AN000;      the vector
 35455 00005407 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 35456 00005408 EB04                    	jmp	short $P_DBCS_EXIT	;AN000;
 35457                                  $P_DBCS01:				;AN000;
 35458 0000540A 46                      	inc	si			;AC035; add '2' to
 35459 0000540B 46                      	inc	si			;AC035;  SI reg
 35460                                  					;AN000; get next vector
 35461 0000540C EBEB                    	jmp	short $P_DBCS_LOOP	;AN000; loop until zero vector found
 35462                                  
 35463                                  $P_NON_DBCS:				;AN000;
 35464                                  	; 18/04/2023
 35465                                  	; cf=0
 35466                                  	;clc				;AN000; indicate SBCS
 35467                                  $P_DBCS_EXIT:				;AN000;
 35468 0000540E 5B                      	pop	bx			;AN000; (tm11)
 35469 0000540F 5E                      	pop	si			;AN000;
 35470 00005410 1F                      	pop	ds			;AN000;
 35471 00005411 C3                      	retn				;AN000;
 35472                                  
 35473                                  ;============================================================================
 35474                                  ; TPARSE.ASM, MSDOS 6.0, 1991
 35475                                  ;============================================================================
 35476                                  ; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35477                                  
 35478                                  ; ****************************************************************
 35479                                  ; *
 35480                                  ; * ROUTINE:	 CMD_PARSE
 35481                                  ; *
 35482                                  ; * FUNCTION:	 Interface for transient COMMAND to invoke
 35483                                  ; *		 SYSPARSE.
 35484                                  ; *
 35485                                  ; * INPUT:	 inputs to SYSPARSE
 35486                                  ; *
 35487                                  ; * OUTPUT:	 outputs from SYSPARSE
 35488                                  ; *
 35489                                  ; ****************************************************************
 35490                                  
 35491                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35492                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4FF7h
 35493                                  	; 14/06/2023 - Retro DOS v4.2 COMMAND.COM
 35494                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:57BBh
 35495                                  
 35496                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35497                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:5647h
 35498                                  ;cmd_parse:
 35499                                  	;call	sysparse		;AN000;
 35500                                  	;retn				;AN000;
 35501                                  	; 06/04/2023
 35502                                  	;jmp	sysparse
 35503                                  
 35504                                  append_parse:
 35505 00005412 E857F5                  	call	sysparse		;AN010;
 35506 00005415 CB                      	retf				;AN010;
 35507                                  
 35508                                  ;============================================================================
 35509                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 35510                                  ;============================================================================
 35511                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35512                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35513                                  ; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35514                                  
 35515                                  ; ----------------------------
 35516                                  ; MSDOS 6.0, MSGSERV.ASM, 1991
 35517                                  ; ----------------------------
 35518                                  
 35519                                  ;; Replacable parameters are described by a sublist structure
 35520                                  
 35521                                  struc $M_SUBLIST_STRUC		;;AN000;;
 35522 00000000 ??                       .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 35523 00000001 ??                       .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 35524 00000002 ????????                 .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 35525 00000006 ??                       .$M_S_ID:	resb 1		;;AN000;; n of %n
 35526 00000007 ??                       .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 35527 00000008 ??                       .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 35528 00000009 ??                       .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 35529 0000000A ??                       .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 35530                                  endstruc
 35531                                  
 35532                                  ; ---------------------------------------------------------------------------
 35533                                  ; ---------------------------------------------------------------------------
 35534                                  
 35535                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35536                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 4FFFh
 35537                                  
 35538                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35539                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57C3h
 35540                                  
 35541                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35542                                  	; PCDOS 7.1 COMMAND.COM (2003) Transient portion offset 564Fh
 35543                                  
 35544                                  Printf_Init:
 35545 00005416 E80F00                  	call	std_printf
 35546 00005419 CB                      	retf
 35547                                  
 35548                                  Printf_Crlf:
 35549 0000541A E80B00                  	call	std_printf
 35550                                  	;call	CRLF2
 35551                                  	;retn
 35552                                  	; 07/04/2023
 35553 0000541D E957D5                  	jmp	CRLF2
 35554                                  
 35555                                  ;****************************************************************
 35556                                  ;*
 35557                                  ;* ROUTINE:	STD_PRINTF/STD_EPRINTF
 35558                                  ;*
 35559                                  ;* FUNCTION:	Set up to print out a message using SYSDISPMSG.
 35560                                  ;*		Set up substitutions if utility message.  Make
 35561                                  ;*		sure any changes to message variables in TDATA
 35562                                  ;*		are reset to avoid reloading the transient.
 35563                                  ;*
 35564                                  ;* INPUT:	Msg_Disp_Class	-  set to message class
 35565                                  ;*		Msg_Cont_Flag	-  set to control flags
 35566                                  ;*		DS	points to transient segment
 35567                                  ;*
 35568                                  ;*		if utility message:
 35569                                  ;*		DX	points to a block with message number
 35570                                  ;*			(word), number of substitutions (byte),
 35571                                  ;*			followed by substitution list if there
 35572                                  ;*			are substitutions.  If substitutions
 35573                                  ;*			are not in transient segment they must
 35574                                  ;*			be set.
 35575                                  ;*		else
 35576                                  ;*		AX	set to message number
 35577                                  ;*
 35578                                  ;* OUTPUT:	none
 35579                                  ;*
 35580                                  ;****************************************************************
 35581                                  
 35582                                  std_eprintf:
 35583 00005420 C706[8F99]0200          	mov	word [PRINTF_HANDLE],2 		;AC000;Print to STDERR
 35584 00005426 EB06                    	jmp	short new_printf		;AC000;
 35585                                  
 35586                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35587                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 5012h
 35588                                  
 35589                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35590                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 57D6h
 35591                                  
 35592                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35593                                  	; PCDOS 7.1 COMMAND.COM (2003) Transient portion offset 5662h
 35594                                  
 35595                                  std_printf:
 35596 00005428 C706[8F99]0100          	mov	word [PRINTF_HANDLE],1 		;AC000;Print to STDOUT
 35597                                  
 35598                                  new_printf:
 35599 0000542E 50                      	push	ax				;AN000;save registers
 35600 0000542F 53                      	push	bx				;AN000;
 35601 00005430 51                      	push	cx				;AN000;
 35602 00005431 06                      	push	es				;AN000;get local ES
 35603 00005432 1E                      	push	ds				;AN000;
 35604 00005433 07                      	pop	es				;AN000;
 35605 00005434 57                      	push	di				;AN000;
 35606 00005435 56                      	push	si				;AN000;
 35607 00005436 52                      	push	dx				;AN000;
 35608                                  
 35609                                  	; 07/04/2023
 35610                                  	;mov	word [print_err_flag],0		;AN000;
 35611 00005437 31C9                    	xor	cx,cx
 35612 00005439 890E[A79F]              	mov	[print_err_flag],cx ; 0
 35613                                  
 35614 0000543D 89D6                    	mov	si,dx				;AN000;Get offset of message number
 35615 0000543F AD                      	lodsw					;AN000;load message number
 35616                                  	; 15/06/2023
 35617                                  	;push	ax				;AN000;save it
 35618                                  	;lodsb					;AN000;get number of substitutions
 35619                                  	;mov	cl,al				;AN000;set up CX as # of subst
 35620                                  	;; 07/04/2023
 35621                                  	;;xor	ch,ch				;AN000;SI now points to subst list
 35622                                  	;pop	ax				;AN000;get message number back
 35623                                  	; 15/06/2023
 35624 00005440 8A0C                    	mov	cl,[si]
 35625 00005442 46                      	inc	si
 35626                                  
 35627                                  	;cmp	cx,0				;AN000;Any substitutions?
 35628                                  	; 07/04/2023
 35629                                  	;and	cx,cx
 35630                                  	;jz	short ready_to_print		;AN000;No - continue
 35631                                  	; 12/08/2024
 35632 00005443 E35C                    	jcxz	ready_to_print
 35633                                  
 35634 00005445 BF[A99F]                	mov	di,subst_buffer			;AN061; Get address of message subst buffer
 35635 00005448 57                      	push	di				;AN061; save it
 35636 00005449 51                      	push	cx				;AN061; save number of subst
 35637                                  
 35638                                  move_subst:
 35639 0000544A 51                      	push	cx				;AN061;save number of subst
 35640 0000544B 89F3                    	mov	bx,si				;AN061;save start of sublist
 35641                                  	;mov	cx,parm_block_size ; 11		;AN061;get size of sublist
 35642                                  	; 07/04/2023
 35643 0000544D B10B                    	mov	cl,parm_block_size ; 11
 35644 0000544F F3A4                    	rep	movsb				;AN061;move sublist
 35645                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 35646 00005451 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 35647                                  	;test	byte [bx+7],4			;AN061;are we doing date/time?
 35648 00005455 7406                    	jz	short move_subst_cont 		;AN061;no - no need to reset
 35649                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],0
 35650                                  	;mov	word [bx+2],0			;AN061;reset original date or time to 0
 35651 00005457 894F02                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],cx ; 0
 35652                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 35653                                  	;mov	word [bx+4],0			;AN061;
 35654 0000545A 894F04                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cx ; 0
 35655                                  
 35656                                  move_subst_cont:				;AN061;
 35657 0000545D 59                      	pop	cx				;AN061;get number of subst back
 35658 0000545E E2EA                    	loop	move_subst			;AN061;move cx sublists
 35659                                  
 35660 00005460 59                      	pop	cx				;AN061;get number of subst
 35661 00005461 50                      	push	ax				;AN061;save message number
 35662 00005462 803E[D88F]FF            	cmp	byte [msg_disp_class],util_msg_class
 35663                                  	;cmp	byte [msg_disp_class],0FFh	;AN061;Is this a utility message
 35664 00005467 740C                    	je	short check_fix			;AN061;YES - go see if substitutions
 35665                                  	;mov	byte [msg_flag],1 ; ext_msg_class
 35666 00005469 C606[A39F]01            	mov	byte [msg_flag],ext_msg_class	;AN061;set message flag
 35667 0000546E BF[DA8F]                	mov	di,extend_buf_ptr		;AN061; Get address of extended message block
 35668 00005471 31C0                    	xor	ax,ax				;AN061;clear ax register
 35669 00005473 AB                      	stosw					;AN061;clear out message number
 35670 00005474 AA                      	stosb					;AN061;clear out subst count
 35671                                  
 35672                                  check_fix:					;AN061;
 35673 00005475 58                      	pop	ax				;AN061;get message number back
 35674 00005476 5F                      	pop	di				;AN061;get start of sublists
 35675 00005477 89FE                    	mov	si,di				;AN061;get into SI for msgserv
 35676 00005479 89F3                    	mov	bx,si				;AN061;get into BX for addressing
 35677 0000547B 51                      	push	cx				;AN061;save number of subst
 35678                                  
 35679                                  set_subst:					;AN061;store the segment of the subst
 35680 0000547C 837F0400                	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 35681                                  	;cmp	word [bx+4],0			;AN061;was it set already?
 35682 00005480 7509                    	jnz	short subst_seg_set		;AN061;if not 0, don't replace it
 35683 00005482 F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 35684                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 35685                                  	;test	byte [bx+7],4			;AN061;don't replace if date or time
 35686 00005486 7503                    	jnz	short subst_seg_set		;AN061;yes - skip it
 35687 00005488 8C4F04                  	mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cs
 35688                                  	;mov	word [bx+4],cs			;AN061;set segment value
 35689                                  
 35690                                  subst_seg_set:					;AN061;
 35691 0000548B 83C30B                  	add	bx,parm_block_size ; add bx,11	;AN061;go to next sublist
 35692 0000548E E2EC                    	loop	set_subst			;AN061;loop CX times
 35693 00005490 59                      	pop	cx				;AN061;get number of subst back
 35694                                  
 35695 00005491 89F3                    	mov	bx,si				;AN061;get start of sublist to BX
 35696 00005493 817F02[129E]            	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2
 35697                                  	;cmp	word [bx+2],string_ptr_2	;AN061;are we using double indirection?
 35698 00005498 7507                    	jne	short ready_to_print		;AN061;no - we already have address
 35699                                  	; 01/05/2023
 35700 0000549A 8B16[129E]              	mov	dx,[string_ptr_2] 		;AN061;get address in string_ptr_2
 35701 0000549E 895702                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],dx
 35702                                  						;AN061;put it into the subst block
 35703                                  	;mov	[bx+2],dx
 35704                                  
 35705                                  ready_to_print:
 35706 000054A1 8B1E[8F99]              	mov	bx,[PRINTF_HANDLE]		;AN000;get print handle
 35707 000054A5 8A16[D98F]              	mov	dl,[msg_cont_flag]		;AN000;set up control flag
 35708 000054A9 8A36[D88F]              	mov	dh,[msg_disp_class]		;AN000;set up display class
 35709 000054AD C606[D98F]00            	mov	byte [msg_cont_flag],0 ; no_cont_flag
 35710                                  						;AN061;reset flags to avoid
 35711 000054B2 C606[D88F]FF            	mov	byte [msg_disp_class],util_msg_class
 35712                                  	;mov	byte [msg_disp_class],0FFh	;AN061; transient reload
 35713                                  
 35714 000054B7 1E                      	push	ds				;AN026;
 35715 000054B8 06                      	push	es				;AN026;
 35716                                  
 35717 000054B9 E83702                  	call	SYSDISPMSG			;AN000;call Rod
 35718                                  
 35719 000054BC 07                      	pop	es				;AN026; restore registers
 35720 000054BD 1F                      	pop	ds				;AN026;
 35721                                  
 35722 000054BE 7303                    	jnc	short print_success		;AN000; everything went okay
 35723 000054C0 A3[A79F]                	mov	[print_err_flag],ax		;AN000;
 35724                                  
 35725                                  print_success:
 35726 000054C3 5A                      	pop	dx				;AN061;restore dx
 35727 000054C4 5E                      	pop	si				;AN000;restore registers
 35728 000054C5 5F                      	pop	di				;AN000;
 35729 000054C6 07                      	pop	es				;AN000;restore registers
 35730 000054C7 59                      	pop	cx				;AN000;
 35731 000054C8 5B                      	pop	bx				;AN000;
 35732 000054C9 58                      	pop	ax				;AN000;
 35733 000054CA 833E[A79F]00            	cmp	word [print_err_flag],0		;AN000; if an error occurred - handle it
 35734 000054CF 7501                    	jnz	short print_err			;AN000;
 35735                                  
 35736 000054D1 C3                      	retn					;AC000;
 35737                                  
 35738                                  print_err:
 35739 000054D2 0E                      	push	cs
 35740 000054D3 07                      	pop	es
 35741 000054D4 833E[8F99]02            	cmp	word [PRINTF_HANDLE],2 		;AN026;Print to STDERR?
 35742 000054D9 7503                    	jne	short not_stderr		;AN026;no - continue
 35743 000054DB E926AC                  	jmp	TCOMMAND			;AN026;Yes - hopless - just exit
 35744                                  
 35745                                  not_stderr:
 35746 000054DE A1[A79F]                	mov	ax,[print_err_flag]		;AN026;get extended error number back
 35747 000054E1 8E06[639C]              	mov	es,[RESSEG]			; No, set up for error, load the
 35748                                  						;  right error msg, and jmp to cerror.
 35749 000054E5 26F606[1303]FF          	test	byte [es:PipeFlag],-1 ; 0FFh
 35750 000054EB 7408                    	jz	short _go_to_error
 35751 000054ED E8B5DE                  	call	PipeOff
 35752 000054F0 BA[6091]                	mov	dx,PIPEEMES_PTR
 35753 000054F3 EB0B                    	jmp	short print_err_exit		;AC000;
 35754                                  
 35755                                  _go_to_error:
 35756 000054F5 C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class
 35757                                  	;mov	byte [msg_disp_class],1		;AN000; set up extended error msg class
 35758 000054FA BA[DA8F]                	mov	dx,extend_buf_ptr		;AC000; get extended message pointer
 35759 000054FD A3[DA8F]                	mov	[extend_buf_ptr],ax		;AN000; get message number in control block
 35760                                  
 35761                                  print_err_exit: 				;AC000;
 35762 00005500 0E                      	push	cs
 35763 00005501 07                      	pop	es
 35764 00005502 E91FD8                  	jmp	cerror
 35765                                  
 35766                                  ;****************************************************************
 35767                                  ;*
 35768                                  ;* ROUTINE:	TSYSLOADMSG
 35769                                  ;*
 35770                                  ;* FUNCTION:	Interface to call SYSLOADMSG to avoid duplicate
 35771                                  ;*		names since these routines are also used in the
 35772                                  ;*		resident.
 35773                                  ;*
 35774                                  ;* INPUT:	Inputs to SYSLOADMSG
 35775                                  ;*
 35776                                  ;* OUTPUT:	Outputs from SYSLOADMSG
 35777                                  ;*
 35778                                  ;****************************************************************
 35779                                  
 35780                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35781                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35782                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35783                                  TSYSLOADMSG:
 35784 00005505 53                      	push	bx				;AN000;
 35785 00005506 E80800                  	call	SYSLOADMSG			;AN000; call routine
 35786 00005509 5B                      	pop	bx				;AN000;
 35787 0000550A C3                      	retn					;AN000; exit
 35788                                  
 35789                                  ;****************************************************************
 35790                                  ;*
 35791                                  ;* ROUTINE:	TSYSGETMSG
 35792                                  ;*
 35793                                  ;* FUNCTION:	Interface to call SYSGETMSG to avoid duplicate
 35794                                  ;*		names since these routines are also used in the
 35795                                  ;*		resident.
 35796                                  ;*
 35797                                  ;* INPUT:	Inputs to SYSGETMSG
 35798                                  ;*
 35799                                  ;* OUTPUT:	Outputs from SYSGETMSG
 35800                                  ;*
 35801                                  ;****************************************************************
 35802                                  
 35803                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35804                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35805                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35806                                  TSYSGETMSG:
 35807 0000550B 51                      	push	cx				;AN000;
 35808 0000550C E8B500                  	call	SYSGETMSG			;AN000; call routine
 35809 0000550F 59                      	pop	cx				;AN000;
 35810 00005510 C3                      	retn					;AN000; exit
 35811                                  
 35812                                  ;============================================================================
 35813                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 35814                                  ;============================================================================
 35815                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35816                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35817                                  
 35818                                  ; ---------------------------------------------------------------------------
 35819                                  ; MODULE NAME: MSGSERV.SAL
 35820                                  ;
 35821                                  ; DESCRIPTIVE NAME: Message Services SALUT file
 35822                                  ;
 35823                                  ; FUNCTION: This module incorporates all the messages services and
 35824                                  ;	    is called upon at build time to INCLUDE the code requested
 35825                                  ;	    by a utility. Code is requested using the macro MSG_SERVICES.
 35826                                  ;
 35827                                  ; ENTRY POINT: Since this a collection of subroutines, entry point is at
 35828                                  ;	    requested procedure.
 35829                                  ;
 35830                                  ; INPUT: Since this a collection of subroutines, input is dependent on
 35831                                  ;	    function requested.
 35832                                  ;
 35833                                  ; EXIT-NORMAL: In all cases, CARRY FLAG = 0
 35834                                  ;
 35835                                  ; EXIT-ERROR: In all cases, CARRY FLAG = 1
 35836                                  ;
 35837                                  ; INTERNAL REFERENCES: (list of included subroutines)
 35838                                  ;
 35839                                  ;	- SYSLOADMSG
 35840                                  ;	- SYSDISPMSG
 35841                                  ;	- SYSGETMSG
 35842                                  ;
 35843                                  ; EXTERNAL REFERENCES: None
 35844                                  ;
 35845                                  ; NOTES: At build time, some modules must be included. These are only included
 35846                                  ;	 once using assembler switches. Other logic is included at the request
 35847                                  ;	 of the utility.
 35848                                  ;
 35849                                  ;	 COMR and COMT are assembler switches to conditionally assemble code
 35850                                  ;	 for RESIDENT COMMAND.COM and TRANSIENT COMMAND.COM to reduce resident
 35851                                  ;	 storage and multiple EQUates.
 35852                                  ;
 35853                                  ; REVISION HISTORY: Created MAY 1987
 35854                                  ;
 35855                                  ;     Label: DOS - - Message Retriever
 35856                                  ;	     (c) Copyright 1988 Microsoft
 35857                                  ; ---------------------------------------------------------------------------
 35858                                  
 35859                                  ;	Revision History
 35860                                  ;	================
 35861                                  ;
 35862                                  ;	M007	SR	08/24/90	Fixed bug #1818 -- changed
 35863                                  ;				$M_DISPLAY_H_STRING to properly
 35864                                  ;				handle Ctrl-Z being passed
 35865                                  ;
 35866                                  ;	M013	SR	9/12/90	Make SETSTDIO flag false so that all
 35867                                  ;				these routines are no longer assembled.
 35868                                  ;
 35869                                  ;	M016	SR	10/14/90	Bug #3380. Changed SYSLOADMSG so that
 35870                                  ;				CR-LF string also gets reinitialized
 35871                                  ;				on every cycle.
 35872                                  ;
 35873                                  ;	M020	SR	10/26/90	Bug #3380 again. Initialize $M_DIVISOR
 35874                                  ;				& $_MSG_NUM also in SYSLOADMSG.
 35875                                  
 35876                                  ; ---------------------------------------------------------------------------
 35877                                  
 35878                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35879                                  
 35880                                  ;;; Replacable parameters are described by a sublist structure
 35881                                  ;
 35882                                  ;struc $M_SUBLIST_STRUC		;;AN000;;
 35883                                  ; .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 35884                                  ; .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 35885                                  ; .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 35886                                  ; .$M_S_ID:	resb 1		;;AN000;; n of %n
 35887                                  ; .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 35888                                  ; .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 35889                                  ; .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 35890                                  ; .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 35891                                  ;endstruc
 35892                                  
 35893                                  ;; Each class will be defined by this structure.
 35894                                  
 35895                                  struc $M_CLASS_ID		;;AN000;;
 35896 00000000 ??                       .$M_CLS_ID:	  resb 1	;;AN000;; Class identifer
 35897 00000001 ????                     .$M_COMMAND_VER: resw 1	;;AN003;; COMMAND.COM version check
 35898 00000003 ??                       .$M_NUM_CLS_MSG: resb 1	;;AN000;; Total number of message in class
 35899                                   .size:
 35900                                  endstruc
 35901                                  
 35902                                  $M_CLASS_ID_SZ	EQU $M_CLASS_ID.size	;;AN000;;
 35903                                  
 35904                                  ;; Each message will be defined by this structure.
 35905                                  
 35906                                  struc $M_ID			;;AN000;;
 35907 00000000 ????                     .$M_NUM:	resw 1		;;AN000;; Message Number
 35908 00000002 ????                     .$M_TXT_PTR:	resw 1		;;AN000;; Pointer to message text
 35909                                   .size:	
 35910                                  endstruc
 35911                                  
 35912                                  $M_ID_SZ	EQU  $M_ID.size	;;AN000;;
 35913                                  
 35914                                  ; ---------------------------
 35915                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 35916                                  ; ---------------------------
 35917                                  $M_TEMP_BUF_SZ	EQU 64     ;; Size of temporary buffer	 ;AN003;
 35918                                  
 35919                                  ; --------------------------- 
 35920                                  
 35921                                  ; 07/04/2023
 35922                                  $M_NUM_CLS equ 3
 35923                                  
 35924                                  ;; Resident data area definition of variables
 35925                                  
 35926                                  struc $M_RES_ADDRS			;;AN000;;
 35927 00000000 ????????                 .$M_EXT_ERR_ADDRS: resd 1		;;AN000;; Allow pointers to THREE Extended error locations
 35928 00000004 ????????                 .$M_EXT_FILE:	    resd 1		;;AN001;;
 35929 00000008 ????????                 .$M_EXT_COMMAND:   resd 1		;;AN000;;
 35930 0000000C ????????                 .$M_EXT_TERM:	    resd 1		;;AN000;;
 35931 00000010 ????????                 .$M_PARSE_COMMAND: resd 1		;;AN000;;
 35932 00000014 ????????                 .$M_PARSE_ADDRS:   resd 1		;;AN000;; Allow pointers to TWO Parse error locations
 35933 00000018 ????????                 .$M_PARSE_TERM:    resd 1		;;AN000;;
 35934 0000001C ????????                 .$M_CRIT_ADDRS:    resd 1		;;AN000;; Allow pointers to TWO Critical error locations
 35935 00000020 ????????                 .$M_CRIT_COMMAND:  resd 1		;;AN000;;
 35936 00000024 ????????                 .$M_CRIT_TERM:	    resd 1		;;AN000;;
 35937 00000028 ????????                 .$M_DISK_PROC_ADDR: resd 1		;;AN004;; Address of READ_DISK_PROC
 35938 0000002C <res Ch>                 .$M_CLASS_ADDRS:   resd $M_NUM_CLS ; 3	;;AN000;; Allow pointers to specified classes
 35939 00000038 ????????                 .$M_CLS_TERM:	    resd 1		;;AN000;;
 35940 0000003C ????????                 .$M_DBCS_VEC:	    resd 1		;;AN000;; Save DBCS vector
 35941 00000040 ????                     .$M_HANDLE:	    resw 1 		;;AN000;;
 35942 00000042 ??                       .$M_SIZE:	    resb 1		;;AN000;;
 35943 00000043 ????                     .$M_CRLF:	    resb 2  		;;AN004;; CR LF message
 35944 00000045 ??                       .$M_CLASS:	    resb 1		;;AN004;; Saved class
 35945 00000046 ????                     .$M_RETURN_ADDR:   resw 1		;;AN000;;
 35946 00000048 ????                     .$M_MSG_NUM:	    resw 1		;;AN000;;
 35947 0000004A ????                     .$M_DIVISOR:	    resw 1		;;AN000;; Default = 10 (must be a WORD for division)
 35948 0000004C <res 40h>                .$M_TEMP_BUF:	    resb $M_TEMP_BUF_SZ	;;AN000;; Temporary buffer
 35949 0000008C ??                       .$M_BUF_TERM:	    resb 1		;;AN000;;
 35950                                   .size:
 35951                                  endstruc				;;AN000;;
 35952                                  
 35953                                  $M_RES_ADDRS_SZ	EQU $M_RES_ADDRS.size	;;AN000;;
 35954                                  
 35955                                  ;; Important fields of the Get Country Information call
 35956                                  
 35957                                  struc $M_COUNTRY_INFO			;;AN000;; Expected Country infomation
 35958 00000000 <res 4Ch>                .$M_HEADER:	    resb $M_RES_ADDRS_SZ-$M_TEMP_BUF_SZ-1
 35959                                  					;;AN000;; Go past first part of struc
 35960 0000004C ????                     .$M_DATE_FORMAT:   resw 1		;;AN000;; <------- Date Format
 35961 0000004E ??????????               .$M_CURR_SEPARA:   resb 5		;;AN000;;
 35962 00000053 ????                     .$M_THOU_SEPARA:   resb 2		;;AN000;; <------- Thou Separator
 35963 00000055 ????                     .$M_DECI_SEPARA:   resb 2		;;AN000;; <------- Decimal Separator
 35964 00000057 ????                     .$M_DATE_SEPARA:   resb 2		;;AN000;; <------- Date Separator
 35965 00000059 ????                     .$M_TIME_SEPARA:   resb 2		;;AN000;; <------- Time Separator
 35966 0000005B ??                       .$M_CURR_FORMAT:   resb 1		;;AN000;;
 35967 0000005C ??                       .$M_SIG_DIGS_CU:   resb 1		;;AN000;;
 35968 0000005D ??                       .$M_TIME_FORMAT:   resb 1		;;AN000;; <------- Time Format
 35969                                  endstruc				;;AN000;;
 35970                                  
 35971                                  ; ---------------------------------------------------------------------------
 35972                                  
 35973                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35974                                  ;;
 35975                                  ;;	PROC NAME: SYSLOADMSG
 35976                                  ;;
 35977                                  ;;	FUNCTION:
 35978                                  ;;	INPUTS:
 35979                                  ;;
 35980                                  ;;	OUTPUTS:
 35981                                  ;;
 35982                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35983                                  
 35984                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35985                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5107h
 35986                                  
 35987                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 35988                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:58CBh
 35989                                  
 35990                                  	; 12/08/2024 - Retro DOS v5.0 COMMAND.COM
 35991                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:5757h
 35992                                  
 35993                                  ; burada kaldým... 12/08/2024
 35994                                  
 35995                                  SYSLOADMSG:
 35996 00005511 50                      	push	ax				;;AN000;
 35997 00005512 53                      	push	bx				;;AN000;
 35998 00005513 52                      	push	dx				;;AN000;
 35999 00005514 06                      	push	es				;;AN000;
 36000 00005515 57                      	push	di				;;AN000;
 36001 00005516 31C9                    	xor	cx,cx				;;AN000;  Reset to zero
 36002 00005518 8EC1                    	mov	es,cx				;;AN000;
 36003 0000551A 31FF                    	xor	di,di				;;AN000;
 36004 0000551C B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 36005 0000551F B200                    	mov	dl,0 ; DOS_GET_EXTENDED		;;AN000;; Where are the Extended errors in COMMAND.COM
 36006 00005521 CD2F                    	int	2Fh				;;AN000;; Private interface
 36007                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 36008                                  		; DL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)
 36009                                  		; Return: ES:DI -> error table
 36010                                  	
 36011 00005523 8C06[9798]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2],es
 36012                                  	;mov	[$M_RT+10],es			;;AN000;; Move into first avaliable table location
 36013 00005527 893E[9598]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND],di
 36014                                  	;mov	[$M_RT+8],di			;;AN000;;
 36015                                  
 36016 0000552B B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 36017 0000552E B202                    	mov	dl,2 ; DOS_GET_PARSE		;;AN000;; Where are the Parse errors in COMMAND.COM
 36018 00005530 CD2F                    	int	2Fh				;;AN000;; Private interface
 36019                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 36020                                  		; DL = subfunction - get critical/SHARE error table (errors 13h-2Bh)
 36021                                  		; ES:DI -> error table
 36022                                  
 36023 00005532 8C06[9F98]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2],es
 36024                                  	;mov	[$M_RT+18],es			;;AN000;; Move into first avaliable table location
 36025 00005536 893E[9D98]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND],di
 36026                                  	;mov	[$M_RT+16],di			;;AN000;;
 36027                                  
 36028 0000553A B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 36029 0000553D B204                    	mov	dl,4 ; DOS_GET_CRITICAL		;;AN000;; Where are the Critical errors in COMMAND.COM
 36030 0000553F CD2F                    	int	2Fh				;;AN000;; Private interface
 36031                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 36032                                  		; DL = subfunction - get ??? error table
 36033                                  		; ES:DI -> error table
 36034                                  
 36035 00005541 8C06[AF98]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2],es
 36036                                  	;mov	[$M_RT+34],es			;;AN000;; Move into first avaliable table location
 36037 00005545 893E[AD98]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND],di
 36038                                  	;mov	[$M_RT+32],di			;;AN000;;
 36039                                  
 36040 00005549 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 36041 0000554C B206                    	mov	dl,6 ; DOS_GET_FILE		;;AN001;; Where are the FILE dependant in IFSFUNC.EXE
 36042 0000554E CD2F                    	int	2Fh					     ;;AN001;; Private interface
 36043                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 36044                                  		; DL = subfunction - get ??? error table
 36045                                  		; ES:DI -> error table
 36046                                  
 36047 00005550 8C06[9398]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2],es
 36048                                  	;mov	[$M_RT+6],es			;;AN001;; Move into first avaliable table location
 36049 00005554 893E[9198]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE],di
 36050                                  	;mov	[$M_RT+4],di			;;AN001;;
 36051                                  
 36052 00005558 E8583A                  	call	$M_MSGSERV_1			;;AN000;; Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)
 36053                                  						;;AN000;;
 36054 0000555B 8C06[8F98]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2],es
 36055                                  	;mov	[$M_RT+2],es			;;AN000;; Move into first avaliable table location
 36056 0000555F 893E[8D98]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS],di
 36057                                  	;mov	[$M_RT+0],di			;;AN000;;
 36058 00005563 8C06[AB98]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2],es
 36059                                  	;mov	[$M_RT+30],es			;;AN000;; Move into first avaliable table location
 36060 00005567 893E[A998]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS],di
 36061                                  	;mov	[$M_RT+28],di			;;AN000;;
 36062                                  
 36063 0000556B E8633A                  	call	$M_MSGSERV_2			;;AN000;; Get addressibility to MSGSERV CLASS 2 (PARSE Errors)
 36064                                  
 36065 0000556E 8C06[A398]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2],es
 36066                                  	;mov	[$M_RT+22],es			;;AN000;; Move into first avaliable table location
 36067 00005572 893E[A198]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS],di
 36068                                  	;mov	[$M_RT+20],di			;;AN000;;
 36069                                  
 36070 00005576 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 36071 00005579 B208                    	mov	dl,8 ; DOS_GET_ADDR 		;;AN001;; Where is the READ_DISK_PROC in COMMAND.COM
 36072 0000557B CD2F                    	int	2Fh				;;AN001;; Private interface
 36073                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 36074                                  		; DL = subfunction - get ??? error table
 36075                                  		; ES:DI -> error table
 36076                                  
 36077 0000557D 8C06[B798]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2],es
 36078                                  	;mov	[$M_RT+42],es			;;AN001;; Move into first avaliable table location
 36079 00005581 893E[B598]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],di
 36080                                  	;mov	[$M_RT+40],di			;;AN001;;
 36081                                  
 36082                                  ;M016; M020
 36083                                  ; Reinitialize the CR-LF string. Also, reinit the buffer terminator just to
 36084                                  ;be safe. Initialize $M_MSG_NUM and $M_DIVISOR also.
 36085                                  
 36086 00005585 C706[D098]0D0A          	mov	word [$M_RT+$M_RES_ADDRS.$M_CRLF],0A0Dh
 36087                                  	;mov	word [$M_RT+67],0A0Dh		; Reinit CR-LF ;M016
 36088 0000558B C606[1999]24            	mov	byte [$M_RT+$M_RES_ADDRS.$M_BUF_TERM],'$'
 36089                                  	;mov	word [$M_RT+140],'$'		; Reinit buffer end;M016
 36090 00005590 C706[D598]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 36091                                  	;mov	word [$M_RT+72],0		; M020
 36092 00005596 C706[D798]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 36093                                  	;mov	word [$M_RT+74],10		; M020
 36094                                  
 36095                                  	; 07/04/2023 - Retro DOS v4.0 COMMAND.COM
 36096                                  	; --------------------------
 36097                                  	; MSDOS 6.0 SYSMSG.INC, 1991
 36098                                  	; --------------------------
 36099                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP5192h
 36100                                  
 36101                                  	;$M_BUILD_PTRS %$M_NUM_CLS     		;;AN000;; Build all utility classes	
 36102 0000559C E8B139                  	call    $M_CLS_3			; Get addressibility to class F
 36103 0000559F 893E[B998]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS],di
 36104                                  	;mov	[$M_RT+44],di
 36105                                  	
 36106 000055A3 E80600                  	CALL	$M_GET_DBCS_VEC 		;;AN000;; Save the DBCS vector
 36107                                  
 36108                                  	; 15/04/2023
 36109                                  	;clc					;;AN000;; Make sure carry is clear
 36110                                  	;jc	short $MIF20
 36111                                  	
 36112 000055A6 5F                      	pop	di				;;AN000;; Restore REGS
 36113 000055A7 07                      	pop	es				;;AN000;;
 36114 000055A8 5A                      	pop	dx				;;AN000;;
 36115 000055A9 5B                      	pop	bx				;;AN000;;
 36116 000055AA 58                      	pop	ax				;;AN000;;
 36117                                  	;jmp	short $MEN20
 36118                                  	; 15/04/2023
 36119 000055AB C3                      	retn
 36120                                  
 36121                                  	; 15/04/2023
 36122                                  ;$MIF20:
 36123                                  	;add	sp,10				;;AN000;;
 36124                                  	;stc					;;AN000;; Reset carry flag
 36125                                  ;$MEN20:
 36126                                  	;retn					;;AN000;;
 36127                                  
 36128                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36129                                  ;;
 36130                                  ;;  Proc Name:	$M_GET_DBCS_VEC
 36131                                  ;;
 36132                                  ;;  Function:	Get the DBCS vector and save it for later use
 36133                                  ;;
 36134                                  ;;  Inputs:	None
 36135                                  ;;
 36136                                  ;;  Outputs:	None
 36137                                  ;;
 36138                                  ;;  Regs Changed:
 36139                                  ;;
 36140                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36141                                  
 36142                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36143                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36144                                  $M_GET_DBCS_VEC:
 36145 000055AC 50                      	push	ax				;;AN000;; Save character to check
 36146 000055AD 56                      	push	si				;;AN000;;
 36147 000055AE 1E                      	push	ds				;;AN000;;
 36148 000055AF B80063                  	mov	ax,6300h ;DOS_GET_DBCS_INFO	;;AN000;; DOS function to get DBSC environment
 36149 000055B2 CD21                    	int	21h				;;AN000;; Get environment pointer
 36150 000055B4 1E                      	push	ds				;;AN000;; Get environment pointer
 36151 000055B5 07                      	pop	es				;;AN000;; Get environment pointer
 36152 000055B6 1F                      	pop	ds				;;AN000;; Get environment pointer
 36153 000055B7 7208                    	jc	short $MIF23
 36154                                  	
 36155 000055B9 8936[C998]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC],si
 36156                                  	;mov	word [$M_RT+60],si		;;AN000;; Save DBCS Vector
 36157 000055BD 8C06[CB98]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC+2],es
 36158                                  	;mov	word [$M_RT+62],es		;;AN000;;
 36159                                  $MIF23:
 36160 000055C1 5E                      	pop	si				;;AN000;;
 36161 000055C2 58                      	pop	ax				;;AN000;; Retrieve character to check
 36162 000055C3 C3                      	retn					;;AN000;; Return
 36163                                  
 36164                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36165                                  ;;
 36166                                  ;;  Proc Name:	SYSGETMSG
 36167                                  ;;
 36168                                  ;;  Function:	The GET service returns the segment, offset and size of the
 36169                                  ;;		message text to the caller based on a message number.
 36170                                  ;;		The GET function will not display the message thus assumes
 36171                                  ;;		caller will handle replaceable parameters.
 36172                                  ;;
 36173                                  ;;  Inputs:
 36174                                  ;;
 36175                                  ;;  Outputs:
 36176                                  ;;
 36177                                  ;;  Psuedocode:
 36178                                  ;;		Call $M_GET_MSG_ADDRESS
 36179                                  ;;		IF MSG_NUM exists THEN
 36180                                  ;;		   Set DS:SI = MSG_TXT_PTR + 1
 36181                                  ;;		   CARRY_FLAG = 0
 36182                                  ;;		ELSE
 36183                                  ;;		   CARRY_FLAG = 1
 36184                                  ;;		ENDIF
 36185                                  ;;
 36186                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36187                                  
 36188                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36189                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36190                                  
 36191                                  	utility_msg_class equ 0FFh ; 18/04/2023
 36192                                  
 36193                                  SYSGETMSG:
 36194                                  	;; Save registers needed later
 36195 000055C4 50                      	push	ax				;;AN000;; Save changed regs
 36196 000055C5 06                      	push	es				;;AN000;;
 36197 000055C6 57                      	push	di				;;AN000;;
 36198 000055C7 55                      	push	bp				;;AN000;;
 36199                                  
 36200 000055C8 E81400                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 36201 000055CB 720D                    	jc	short $MIF31
 36202                                  	
 36203 000055CD 80FEFF                  	cmp	dh,utility_msg_class ; 0FFh	;;AN000;; Were utility messages requested?
 36204                                  	;clc					;;AN000;;
 36205 000055D0 7404                    	je	short $MIF32			;;AN000;;
 36206                                  	; 15/06/2023
 36207 000055D2 F8                      	clc	
 36208                                  
 36209 000055D3 06                      	push	es				;;AN000;;
 36210                                  	;pop	ds				;;AN000;;
 36211 000055D4 EB01                    	jmp	short $MEN32
 36212                                  $MIF32:
 36213 000055D6 0E                      	push	cs				;;AN000;;			
 36214                                  	;pop	ds				;;AN000;;
 36215                                  $MEN32:
 36216                                  	; 07/04/2023
 36217 000055D7 1F                      	pop	ds
 36218 000055D8 89FE                    	mov	si,di				;;AN000;; Return message in DS:SI
 36219                                  $MIF31:
 36220 000055DA 5D                      	pop	bp				;;AN000;; Restore changed regs
 36221 000055DB 5F                      	pop	di				;;AN000;;
 36222 000055DC 07                      	pop	es				;;AN000;;
 36223 000055DD 58                      	pop	ax				;;AN000;;
 36224 000055DE C3                      	retn					;;AN000;; Return
 36225                                  
 36226                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36227                                  ;;
 36228                                  ;;	PROC NAME: $M_GET_MSG_ADDRESS
 36229                                  ;;
 36230                                  ;;	FUNCTION:  To scan thru classes to return pointer to the message header
 36231                                  ;;	INPUTS:    Access to $M_RES_ADDRESSES
 36232                                  ;;	OUTPUTS:   IF CX = 0 THEN Message was not found
 36233                                  ;;		   IF CX > 1 THEN ES:DI points to the specified message
 36234                                  ;;	REGS CHANGED: ES,DI,CX
 36235                                  ;;
 36236                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36237                                  
 36238                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36239                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36240                                  $M_GET_MSG_ADDRESS:
 36241 000055DF 56                      	push	si				;;AN000;;
 36242 000055E0 53                      	push	bx				;;AN000;;
 36243 000055E1 31F6                    	xor	si,si				;;AN000;; Use SI as an index
 36244 000055E3 31C9                    	xor	cx,cx				;;AN000;; Use CX as an size
 36245                                  $MDO36:
 36246 000055E5 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Were utility messages requested?
 36247 000055E8 7508                    	jne	short $MIF37			;;AN000;; No
 36248                                  
 36249                                  	; 07/04/2023
 36250                                  	;;mov	di,[si+89CAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 36251 000055EA 8BBC[B998]              	mov	di,[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
 36252                                  	;mov	di,[si+$M_RT+44]		;;AN000;; Get address of class
 36253 000055EE 89FB                    	mov	bx,di				;;AN000;;
 36254 000055F0 EB21                    	jmp	short $MEN37
 36255                                  $MIF37:
 36256 000055F2 F6C602                  	test	dh,2 ; parse_err_class		;;AN000;; Were parse errors requested?
 36257 000055F5 7406                    	jz	short $MIF39
 36258                                  	
 36259                                  	; 07/04/2023
 36260                                  	;;les	di,[si+89AEh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 36261 000055F7 C4BC[9D98]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]
 36262                                  	;les	di,[si+$M_RT+16]		;;AN000;; Get address of class
 36263                                  
 36264                                  	; 07/04/2023
 36265                                  	;mov	bx,es ; *			;;AN000;;
 36266 000055FB EB14                    	jmp	short $MEN39
 36267                                  $MIF39:
 36268 000055FD 83F813                  	cmp	ax,19 ; $M_CRIT_LO		;;AN000;; Is this a critical error?
 36269 00005600 720B                    	jnae	short $MIF41  ; jb short $MIF41 ;;AN000;;
 36270                                  
 36271 00005602 83F827                  	cmp	ax,39 ; $M_CRIT_HI		;;AN000;;
 36272 00005605 7706                    	jnbe	short $MIF41  ; ja short $MIF41 ;;AN000;;
 36273                                  
 36274                                  	; 07/04/2023
 36275                                  	;;les	di,[si+89BAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 36276 00005607 C4BC[A998]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]
 36277                                  	;les	di,[si+$M_RT+28]		;;AN000;; Get address of class
 36278                                  	
 36279                                  	; 07/04/2023
 36280                                  	;mov	bx,es ; *			;;AN000;;
 36281 0000560B EB04                    	jmp	short $MEN41
 36282                                  $MIF41:
 36283                                  	; 07/04/2023
 36284                                  	;;les	di,[si+899Eh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 36285 0000560D C4BC[8D98]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]
 36286                                  	;les	di,[si+$M_RT+0]			;;AN000;; Get address of class
 36287                                  	
 36288                                  	; 07/04/2023
 36289                                  	;mov	bx,es ; *			;;AN000;;
 36290                                  $MEN41:
 36291                                  $MEN39:
 36292                                  	; 07/04/2023
 36293 00005611 8CC3                    	mov	bx,es ; *
 36294                                  $MEN37:						;;AN000;;
 36295 00005613 83FBFF                  	cmp	bx,-1 ; $M_TERMINATING_FLAG	;;AN000;; Are we finished all classes?
 36296 00005616 7515                    	jne	short $MIF46			;;AN000;; No
 36297                                  
 36298 00005618 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Was it a UTILITY class?
 36299 0000561B 7503                    	jne	short $MIF47			;;AN000;; No
 36300 0000561D F9                      	stc		     ; **-		;;AN000;; Set the carry flag
 36301                                  	; 07/04/2023
 36302                                  	;jmp	short $MEN47 ; **-
 36303 0000561E EB1B                    	jmp	short $MEN36 ; **-
 36304                                  $MIF47:
 36305 00005620 A3[D598]                	mov	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],ax
 36306                                  	;mov	[$M_RT+72],ax			;;AN000;; Save message number
 36307 00005623 B8FFFF                  	mov	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN000;; Set special message number
 36308 00005626 BD0100                  	mov	bp,1 ; $M_ONE_REPLACE		;;AN000;; Set one replace in message
 36309 00005629 31F6                    	xor	si,si				;;AN000;; Reset the SI index to start again
 36310                                  	; 28/04/2023
 36311                                  	; 07/04/2023
 36312                                  	;clc	; **+				;;AN000;;
 36313                                  ;$MEN47:
 36314                                  	;jmp	short $MEN46 ; ***
 36315 0000562B EB0A                    	jmp	short $MEN47 ; ***
 36316                                  $MIF46:
 36317                                  	;cmp	bx,0 ; $M_CLASS_NOT_EXIST	;;AN000;; Does this class exist?
 36318 0000562D 21DB                    	and	bx,bx ; 0 ?
 36319 0000562F 7403                    	jz	short $MIF51			;;AN000;; No
 36320                                  	
 36321 00005631 E84D00                  	call	$M_FIND_SPECIFIED_MSG		;;AN000;; Try to find the message
 36322                                  $MIF51:
 36323 00005634 83C604                  	add	si,4 ; $M_ADDR_SZ_FAR 		;;AN000;; Get next class
 36324                                  	; 07/04/2023
 36325                                  	;clc					;;AN000;;
 36326                                  ;$MEN46:
 36327                                  	;jc	short $MEN36 ; **- ; **+	;;AN000;;
 36328                                  $MEN47:	; 07/04/2023	; **+
 36329 00005637 09C9                    	or	cx,cx				;;AN000;; Was the message found?
 36330                                  	;jnz	short $MXL2			;;AN000;; Yes
 36331                                  	;jmp	short $MDO36
 36332                                  	; 07/04/2023
 36333 00005639 74AA                    	jz	short $MDO36	
 36334                                  $MXL2:
 36335                                  $MEN36:
 36336 0000563B 9C                      	pushf 					;;AN006;; Save the flag state
 36337                                  	
 36338 0000563C 80FE01                  	cmp	dh,1 ; EXT_ERR_CLASS		;;AN006;; Was an extended error requested?
 36339                                  	;jne	short $MIF56			;;AN006;; No
 36340                                  	; 28/04/2023
 36341 0000563F 752A                    	jne	short $M_MYRET	
 36342                                  
 36343 00005641 52                      	push	dx				;;AN006;; Save all needed registers
 36344 00005642 55                      	push	bp				;;AN006;;
 36345 00005643 51                      	push	cx				;;AN006;;
 36346 00005644 06                      	push	es				;;AN006;;
 36347 00005645 57                      	push	di				;;AN006;;
 36348 00005646 50                      	push	ax				;;AN006;;
 36349                                  
 36350 00005647 B80005                  	mov	ax,500h ; IFSFUNC_INSTALL_CHECK	;;AN006;; Check if IFSFUNC is installed
 36351 0000564A CD2F                    	int	2Fh				;;AN006;;
 36352                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
 36353                                  		; Return: AL = 00h not installed, OK to install
 36354                                  		; 01h not installed, can't install
 36355                                  		; FFh installed
 36356                                  
 36357 0000564C 3CFF                    	cmp	al,0FFh ; IFSFUNC_INSTALLED	;;AN006;; Is it installed?
 36358 0000564E 58                      	pop	ax				;;AN006;; Restore msg number
 36359 0000564F 7513                    	jne	short $MIF57			;;AN006;; No (not installed)
 36360                                  
 36361 00005651 89C3                    	mov	bx,ax				;;AN006;; BX is the extended error number
 36362 00005653 B80205                  	mov	ax,502h ; IFS_GET_ERR_TEXT	;;AN006;; AX is the muliplex number
 36363 00005656 CD2F                    	int	2Fh				;;AN006;; Call IFSFUNC
 36364                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER
 36365                                  
 36366                                  	;jmp	short $MEN57			;;AN006;;
 36367                                  	; 28/04/2023
 36368 00005658 720B                    	jc	short $MEN57
 36369                                  $MIF60:
 36370 0000565A 83C406                  	add	sp,6				;;AN006;; Throw away old pointer
 36371 0000565D E81200                  	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 36372                                  $MEN60:
 36373 00005660 5D                      	pop	bp				;;AN006;; Restore other Regs
 36374 00005661 5A                      	pop	dx				;;AN006;;
 36375                                  $MIF56:
 36376                                  	; 07/04/2023
 36377                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 36378 00005662 EB07                    	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 36379                                  
 36380                                  $MIF57:
 36381 00005664 F9                      	stc					;;AN006;; Carry conditon
 36382                                  $MEN57:
 36383                                  	; 28/04/2023
 36384                                  	;jnc	short $MIF60			;;AN006;;
 36385                                  
 36386 00005665 5F                      	pop	di				;;AN006;;
 36387 00005666 07                      	pop	es				;;AN006;; Restore old pointer
 36388 00005667 59                      	pop	cx				;;AN006;;
 36389 00005668 EBF6                    	jmp	short $MEN60
 36390                                  
 36391                                  ;$MIF60:
 36392                                  ;	add	sp,6				;;AN006;; Throw away old pointer
 36393                                  ;	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 36394                                  ;$MEN60:
 36395                                  ;	pop	bp				;;AN006;; Restore other Regs
 36396                                  ;	pop	dx				;;AN006;;
 36397                                  ;$MIF56:
 36398                                  ;	; 07/04/2023
 36399                                  ;	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 36400                                  ;	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 36401                                  
 36402                                  ; 07/04/2023
 36403                                  ; ---------------------------
 36404                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 36405                                  ; ---------------------------
 36406                                  	; $M_POPF macro
 36407                                  	;jmp	short $+3
 36408                                  m_popf_iret:
 36409 0000566A CF                      	iret
 36410                                  $M_MYRET:
 36411 0000566B 0E                      	push	cs
 36412 0000566C E8FBFF                  	call	m_popf_iret
 36413                                  	;;; end macro	
 36414                                  ; ---------------------------
 36415                                  
 36416 0000566F 5B                      	pop	bx				;;AN000;;
 36417 00005670 5E                      	pop	si				;;AN000;;
 36418 00005671 C3                      	retn					;;AN000;; Return ES:DI pointing to the message
 36419                                  
 36420                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36421                                  
 36422                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36423                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36424                                  $M_SET_LEN_IN_CX:			
 36425 00005672 57                      	push	di				;;AN006;; Save position
 36426 00005673 50                      	push	ax				;;AN006;;
 36427 00005674 B9FFFF                  	mov	cx,-1 ; 65535 ; 0FFFFh		;;AN006;; Set CX for decrements
 36428 00005677 30C0                    	xor	al,al				;;AN006;; Prepare compare register
 36429 00005679 F2AE                    	repne	scasb				;;AN006;; Scan for zero
 36430 0000567B F7D1                    	not	cx				;;AN006;; Change decrement into number
 36431 0000567D 49                      	dec	cx				;;AN006;; Don't include the zero
 36432 0000567E 58                      	pop	ax				;;AN006;;
 36433 0000567F 5F                      	pop	di				;;AN006;; Restore position
 36434 00005680 C3                      	retn					;;AN006;;
 36435                                  
 36436                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36437                                  ;;
 36438                                  ;;	PROC NAME: $M_FIND_SPECIFIED_MSG
 36439                                  ;;
 36440                                  ;;	FUNCTION:  To scan thru message headers until message is found
 36441                                  ;;	INPUTS:    ES:DI points to beginning of msg headers
 36442                                  ;;		   CX contains the number of messages in class
 36443                                  ;;		   DH contains the message class
 36444                                  ;;	OUPUTS:    IF CX = 0 THEN Message was not found
 36445                                  ;;		   IF CX > 1 THEN ES:DI points to header of specified message
 36446                                  ;;
 36447                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36448                                  
 36449                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36450                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36451                                  $M_FIND_SPECIFIED_MSG:
 36452 00005681 83FB01                  	cmp	bx,1				;;AN004;; Do we have an address to CALL?
 36453 00005684 751F                    	jne	short $MIF64
 36454 00005686 833E[B598]FF            	cmp	word [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1
 36455                                  	;cmp	word [$M_RT+40],-1 ; 0FFFFh	;;AN004;; Do we have an address to CALL?
 36456                                  	; 15/06/2023
 36457 0000568B 7418                    	je	short $MIF64
 36458                                  
 36459 0000568D 83F8FF                  	cmp	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN004;; Are we displaying a default Ext Err?
 36460 00005690 750B                    	jne	short $MIF65
 36461                                  	
 36462 00005692 50                      	push	ax				;;AN004;; Reset the special message number
 36463 00005693 A1[D598]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 36464                                  	;mov	ax,[$M_RT+72]			;;AN004;; Get the old message number
 36465 00005696 FF1E[B598]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 36466                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 36467 0000569A 58                      	pop	ax				;;AN004;; Reset the special message number
 36468                                  	; 28/04/2023
 36469 0000569B EB04                    	jmp	short $MEN65
 36470                                  	; 18/04/2023
 36471                                  	;jmp	short $MEN64
 36472                                  $MIF65:
 36473 0000569D FF1E[B598]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 36474                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 36475                                  $MEN65:
 36476                                  	; 28/04/2023
 36477 000056A1 7344                    	jnc	short $MIF75
 36478                                  	;
 36479 000056A3 EB19                    	jmp	short $MEN64 ; $MDO76		;;AN004;;
 36480                                  $MIF64:
 36481 000056A5 31C9                    	xor	cx,cx				;;AN002;; CX = 0 will allow us to
 36482 000056A7 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 36483 000056AA 7406                    	je	short $MIF69
 36484                                  	
 36485 000056AC 268A4D03                	mov	cl,[es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 36486                                  	;mov	cl,[es:di+3]			;;AN001;; Get number of messages in class
 36487 000056B0 EB09                    	jmp	short $MEN69
 36488                                  $MIF69:
 36489                                  	;cmp	[cs:di+$M_CLASS_ID.$M_CLS_ID],dh
 36490                                  	;cmp	[cs:di+0],dh
 36491 000056B2 2E3835                  	cmp	[cs:di],dh			;;AN002;; Check if class still exists at
 36492 000056B5 7504                    	jne	short $MIF71
 36493                                  
 36494 000056B7 2E8A4D03                	mov	cl,[cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 36495                                  	;mov	cl,[cs:di+3]			;;AN000;; Get number of messages in class
 36496                                  $MIF71:						;;AN001;;
 36497                                  $MEN69:
 36498 000056BB 83C704                  	add	di,$M_CLASS_ID_SZ ; add di,4	;;AN000;; Point past the class header
 36499                                  	; 02/05/2023
 36500                                  	;stc					;;AN004;; Flag that we haven't found anything yet
 36501                                  $MEN64:
 36502                                  	;jnc	short $MIF75
 36503                                  	; 28/04/2023
 36504                                  	; (or instruction clears carry flag)
 36505                                  	;clc					;;AN004;; No, reset carry
 36506                                  $MDO76:
 36507 000056BE 09C9                    	or	cx,cx				;;AN000;; Do we have any to check?
 36508 000056C0 7417                    	jz	short $MEN76
 36509                                  
 36510 000056C2 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 36511 000056C5 7405                    	je	short $MIF78
 36512                                  
 36513                                  	;cmp	ax,[es:di+$M_ID.$M_NUM]		;;AN001;; Is this the message requested?
 36514 000056C7 263B05                  	cmp	ax,[es:di]
 36515 000056CA EB03                    	jmp	short $MEN78
 36516                                  $MIF78:
 36517                                  	;cmp	ax,[cs:di+$M_ID.$M_NUM]		;;AN000;; Is this the message requested?
 36518 000056CC 2E3B05                  	cmp	ax,[cs:di]
 36519                                  $MEN78:
 36520                                  	;jne	short $MIF76
 36521                                  	;jmp	short $MSR76
 36522                                  	; 07/04/2023
 36523 000056CF 740B                    	je	short $MSR76 ; *
 36524                                  $MIF76:
 36525 000056D1 49                      	dec	cx				;;AN000;; No, well do we have more to check?
 36526 000056D2 7405                    	jz	short $MEN76
 36527                                  
 36528 000056D4 83C704                  	add	di,$M_ID_SZ ; add di,4		;;AN000;; Yes, skip past msg header
 36529 000056D7 EBE5                    	jmp	short $MDO76			;;AN000;;
 36530                                  $MEN76:
 36531 000056D9 F9                      	stc					;;AN000;;
 36532                                  ;$MSR76:	; 07/04/2023
 36533                                  	;jc	short $MIF86			;;AN000;;
 36534                                  	; 07/04/2023
 36535                                  	;jc	short $MIF91
 36536 000056DA EB11                    	jmp	short $MIF91 ;*
 36537                                  $MSR76:	; 07/04/2023 ; *	
 36538 000056DC 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;; Yes, is it a utility message?
 36539                                  	; 07/04/2023
 36540                                  	;clc					;;AN001;;
 36541 000056DF 7502                    	jne	short $MIF87
 36542                                  
 36543 000056E1 0E                      	push	cs				;;AN000;;
 36544 000056E2 07                      	pop	es				;;AN000;; Return ES:DI pointing to the message
 36545                                  $MIF87:
 36546                                  	;add	di,[es:di+2]
 36547 000056E3 26037D02                	add	di,[es:di+$M_ID.$M_TXT_PTR]     ;;AN000;; Prepare ES:DI pointing to the message
 36548                                  $MIF86:
 36549                                  ;$MIF75:
 36550                                  	; 02/05/2023
 36551                                  	;jc	short $MIF91
 36552                                  $MIF75:	; 28/04/2023
 36553 000056E7 30ED                    	xor	ch,ch				;;AN000;;
 36554 000056E9 268A0D                  	mov	cl,[es:di]			;;AN000;; Move size into CX
 36555 000056EC 47                      	inc	di				;;AN000;; Increment past length
 36556                                  $MIF91:
 36557 000056ED C606[CF98]00            	mov	byte [$M_RT+$M_RES_ADDRS.$M_SIZE],0 ; $M_NULL
 36558                                  	;mov	byte [$M_RT+66],0		;;AN004;; Reset variable
 36559 000056F2 C3                      	retn					;;AN000;; Return
 36560                                  
 36561                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36562                                  ;;
 36563                                  ;;  Proc Name:	SYSDISPMSG
 36564                                  ;;
 36565                                  ;;  Function:	The DISPLAY service will output a defined message to a handle
 36566                                  ;;		requested by the caller. It also provides function to display
 36567                                  ;;		messages when handles are not applicable (ie. DOS function calls
 36568                                  ;;		00h to 0Ah) Replaceable parameters are allowed and are
 36569                                  ;;		defined previous to entry.
 36570                                  ;;
 36571                                  ;;		It is assumes that a PRELOAD function has already determined
 36572                                  ;;		the addressibilty internally to the message retriever services.
 36573                                  ;;  Inputs:
 36574                                  ;;
 36575                                  ;;  Outputs:
 36576                                  ;;
 36577                                  ;;  Psuedocode:
 36578                                  ;;		Save registers needed later
 36579                                  ;;		Get address of the message requested
 36580                                  ;;		IF Message number exists THEN
 36581                                  ;;		  IF replacable parameters were specified THEN
 36582                                  ;;		     Display message with replacable parms
 36583                                  ;;		  ELSE
 36584                                  ;;		     Display string without replacable parms
 36585                                  ;;		  ENDIF
 36586                                  ;;		  IF character input was requested THEN
 36587                                  ;;		     Wait for character input
 36588                                  ;;		  ENDIF
 36589                                  ;;		  Clear CARRY FLAG
 36590                                  ;;		ELSE
 36591                                  ;;		   Set CARRY FLAG
 36592                                  ;;		ENDIF
 36593                                  ;;		Return
 36594                                  ;;
 36595                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36596                                  
 36597                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36598                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5307h
 36599                                  	;
 36600                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36601                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5ACBh
 36602                                  SYSDISPMSG:
 36603                                  	;; Save registers and values needed later
 36604 000056F3 50                      	push	ax				;;AN000;; Save changed REGs
 36605 000056F4 53                      	push	bx				;;AN000;;
 36606 000056F5 51                      	push	cx				;;AN000;;
 36607 000056F6 55                      	push	bp				;;AN000;;
 36608 000056F7 57                      	push	di				;;AN000;; Save pointer to input buffer (offset)
 36609 000056F8 06                      	push	es				;;AN000;; Save pointer to input buffer (segment)
 36610 000056F9 52                      	push	dx				;;AN000;; Save Input/Class request
 36611                                  
 36612 000056FA 89CD                    	mov	bp,cx				;;AN000;; Use BP to hold replace count
 36613 000056FC 891E[CD98]              	mov	[$M_RT+$M_RES_ADDRS.$M_HANDLE],bx
 36614                                  	;mov	[$M_RT+64],bx			;;AN000;; Save handle
 36615 00005700 8836[D298]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS],dh
 36616                                  	;mov	[$M_RT+69],dh			;;AN004;; Save class
 36617                                  
 36618                                  	;; Get address of the message requested
 36619 00005704 E8D8FE                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 36620                                  
 36621 00005707 09C9                    	or	cx,cx				;;AN000;; Was message found?
 36622 00005709 7427                    	jz	short $MIF93
 36623                                  						;;AN000;; Yes, Message address in ES:DI
 36624                                  	
 36625                                  	;; Test if replacable parameters were specified
 36626 0000570B 09ED                    	or	bp,bp				;;AN000;; Were replacable parameters requested
 36627 0000570D 7505                    	jnz	short $MIF94
 36628                                  
 36629                                  	;; Display string without replacable parms
 36630 0000570F E82800                  	call	$M_DISPLAY_STRING		;;AN000;; No, great . . . Display message
 36631 00005712 EB03                    	jmp	short $MEN94
 36632                                  $MIF94:
 36633                                  	;; Display message with replacable parms
 36634 00005714 E88B01                  	call	$M_DISPLAY_MESSAGE		;;AN000;; Display the message with substitutions
 36635                                  $MEN94:
 36636 00005717 7214                    	jc	short $MIF97
 36637 00005719 5A                      	pop	dx				;;AN000;; Get Input/Class request
 36638 0000571A E8FC00                  	call	$M_ADD_CRLF 			;;AN004;; Check if we need to add the CR LF chars.
 36639 0000571D 07                      	pop	es				;;AN000;; Get location of input buffer (if specified)
 36640 0000571E 5F                      	pop	di				;;AN000;;
 36641                                  	
 36642                                  ; 15/06/2023 - MSDOS 5.0
 36643                                  ;	;jmp	short $MEN97 ; ***
 36644                                  ;	; 08/04/2023
 36645                                  ;	;jmp	short $MEN93 ; **
 36646                                  ;
 36647                                  ;	; 08/04/2023
 36648                                  ;;$MEN93:
 36649                                  ;	jc	short $MIF104
 36650                                  
 36651                                  	; 15/06/2023 Retro DOS v4.2 COMMAND.COM
 36652                                   	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5AF7h
 36653                                  
 36654                                  	; MSDOS 6.0 (MSDOS 6.22)
 36655                                  	; Test if character input was requested	;;AN000;;
 36656 0000571F 08D2                    	or	dl,dl
 36657 00005721 7403                    	jz	short $MIF98
 36658                                  	;jz	short $MEN98 ; *
 36659                                  
 36660 00005723 E88E05                  	call	$M_WAIT_FOR_INPUT	; MSDOS 6.0 (to 6.22)
 36661                                  	; cf = 0 ; *
 36662                                  $MIF98:
 36663                                  	;jmp	short $MEN97
 36664                                  	;;jc	short $MIF104 ; *
 36665                                  $MEN98:
 36666                                  ;$MEN97:
 36667 00005726 5D                      	pop	bp				;;AN000;;
 36668 00005727 59                      	pop	cx				;;AN000;;
 36669 00005728 5B                      	pop	bx				;;AN000;;
 36670                                  	; 15/06/2023
 36671                                  	;pop	ax	; MSDOS 5.0		;;AN000;;
 36672 00005729 83C402                  	add	sp,2	; MSDOS 6.0 (to 6.22)
 36673 0000572C C3                      	retn
 36674                                   
 36675                                  $MIF97:
 36676                                  	; 08/04/2023
 36677                                  	;add	sp,6				;;AN000;;
 36678                                  	;stc					;;AN000;; Reset carry flag
 36679                                  ;$MEN97: ; ***
 36680                                  	;jmp	short $MEN93
 36681                                  	; 08/04/2023
 36682                                  	;jmp	short $MIF104
 36683                                  	; 08/04/2023
 36684 0000572D 83C40E                  	add	sp,14 ; 6+8
 36685 00005730 F9                      	stc
 36686 00005731 C3                      	retn
 36687                                  $MIF93:
 36688                                  	; 08/04/2023 - 15/06/2023
 36689                                  	; (wrong pops ?) - correct order: pop dx, pop es, pop di -
 36690                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:533Bh
 36691                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5B06h
 36692 00005732 07                      	pop	es				;;AN000;; Get pointer to input buffer (segment)
 36693 00005733 5F                      	pop	di				;;AN000;; Get base pointer to first sublist (offset)
 36694 00005734 5A                      	pop	dx				;;AN000;; Get base pointer to first sublist (segment)
 36695                                  	;stc	; * 				;;AN000;; Set carry flag
 36696                                  	; 08/04/2023
 36697                                  	;jmp	short $MIF104 ; *
 36698                                  
 36699                                  ;$MEN93: ; **
 36700                                  ;	jc	short $MIF104
 36701                                  ;$MEN97: ; 08/04/2023
 36702                                  ;	pop	bp				;;AN000;;
 36703                                  ;	pop	cx				;;AN000;;
 36704                                  ;	pop	bx				;;AN000;;
 36705                                  ;	pop	ax				;;AN000;;
 36706                                  ;	;jmp	short $MEN104
 36707                                  ;	; 08/04/2023
 36708                                  ;	retn
 36709                                  
 36710                                  $MIF104: ; *
 36711 00005735 83C408                  	add	sp,8				;;AN000;; Eliminate from stack
 36712 00005738 F9                      	stc					;;AN000;;
 36713                                  $MEN104:
 36714 00005739 C3                      	retn					;;AN000;; Return
 36715                                  
 36716                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36717                                  ;;
 36718                                  ;;	PROC NAME: $M_DISPLAY_STRING
 36719                                  ;;
 36720                                  ;;	FUNCTION:  Will display or write string
 36721                                  ;;	INPUTS:    ES:DI points to beginning of message
 36722                                  ;;		   CX contains the length of string to write (if applicable)
 36723                                  ;;	OUTPUTS:   None
 36724                                  ;;	REGS Revised: None
 36725                                  ;;
 36726                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36727                                  
 36728                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36729                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36730                                  $M_DISPLAY_STRING:
 36731 0000573A 50                      	push	ax				;;AN000;;
 36732 0000573B 53                      	push	bx				;;AN000;;
 36733 0000573C 52                      	push	dx				;;AN000;;
 36734 0000573D 8B1E[CD98]              	mov	bx,[$M_RT+$M_RES_ADDRS.$M_HANDLE]
 36735                                  	;mov	bx,[$M_RT+64]			;;AN000;; Retrieve handle
 36736                                  	
 36737 00005741 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE 	;;AN000;; Was there a handle specified?
 36738 00005744 7505                    	jne	short $MIF107
 36739                                  
 36740 00005746 E82600                  	call	$M_DISPLAY_$_STRING		;;AN000;; No, display $ terminated string
 36741 00005749 EB03                    	jmp	short $MEN107
 36742                                  $MIF107:
 36743 0000574B E86E00                  	call	$M_DISPLAY_H_STRING		;;AN000;; Yes, display string to handle
 36744                                  $MEN107:
 36745 0000574E 730D                    	jnc	short $MIF110
 36746                                  	
 36747 00005750 B459                    	mov	ah,59h	; DOS_GET_EXT_ERROR	;;AN000;;
 36748                                  	;mov	bx,0	; DOS_GET_EXT_ERROR_BX	;;AN000;; Get extended error
 36749                                  	; 08/04/2023
 36750 00005752 31DB                    	xor	bx,bx
 36751 00005754 CD21                    	int	21h				;;AN000;;
 36752                                  		; DOS - 3+ - GET EXTENDED ERROR CODE
 36753                                  		; BX = version code (0000h for DOS 3.x)
 36754 00005756 30E4                    	xor	ah,ah				;;AN000;; Clear AH
 36755                                  $MEN110: ; 08/04/2023 ; ***
 36756 00005758 83C406                  	add	sp,6				;;AN000;; Clean up stack
 36757 0000575B F9                      	stc					;;AN000;; Flag that there was an error
 36758                                  	;jmp	short $MEN110 ; ****
 36759                                  	; 08/04/2023
 36760 0000575C C3                      	retn
 36761                                  $MIF110:
 36762                                  	;cmp	bx,$M_NO_HANDLE
 36763 0000575D 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE	;;AN000;; Was there a handle specified?
 36764 00005760 7409                    	je	short $MIF112 ; *  ; cf = 0
 36765 00005762 39C8                    	cmp	ax,cx				;;AN001;; Was it ALL written?
 36766 00005764 7405                    	je	short $MIF113 ; ** ; cf = 0
 36767 00005766 E8A700                  	call	$M_GET_EXT_ERR_39		;;AN001;; Set Extended error
 36768                                  	;add	sp,6				;;AN001;; Clean up stack
 36769                                  	;stc					;;AN001;; Flag that there was an error
 36770                                  	; 08/04/2023
 36771 00005769 EBED                    	jmp	short $MEN110 ; ***
 36772                                  	; 08/04/2023
 36773                                  ;$MIF112:
 36774                                  ;$MEN110: ; ****
 36775                                  	;jc	short $MIF117
 36776                                  $MIF112: ; 08/04/2023	; *
 36777                                  $MIF113:	; **
 36778 0000576B 5A                      	pop	dx				;;AN000;; Restore regs
 36779 0000576C 5B                      	pop	bx				;;AN000;;
 36780 0000576D 58                      	pop	ax				;;AN000;;
 36781                                  $MIF117:
 36782 0000576E C3                      	retn
 36783                                  
 36784                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36785                                  ;;
 36786                                  ;;	PROC NAME: $M_DISPLAY_$_STRING
 36787                                  ;;
 36788                                  ;;	FUNCTION:  Will display a $ terminated string
 36789                                  ;;	INPUTS:    ES:DI points to beginning of message text (not the length)
 36790                                  ;;	OUTPUTS:   None
 36791                                  ;;	REGS USED: AX,DX
 36792                                  ;;
 36793                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36794                                  
 36795                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36796                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36797                                  $M_DISPLAY_$_STRING:
 36798 0000576F 1E                      	push	ds				;;AN000;;
 36799 00005770 06                      	push	es				;;AN000;;
 36800 00005771 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 36801                                  
 36802                                  	; 08/04/2023
 36803 00005772 B402                    	mov	ah,2 ; DOS_DISP_CHAR
 36804                                  
 36805                                  	;cmp	cx,$M_SINGLE_CHAR		;;AN000;; Is this a single character?
 36806 00005774 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR
 36807 00005777 7518                    	jne	short $MIF119			;;AN000;; No
 36808                                  	
 36809                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 36810 00005779 268A15                  	mov	dl,[es:di]			;;AN000;; Get the character
 36811 0000577C CD21                    	int	21h				;;AN000;; Write character
 36812                                  		; DOS - DISPLAY OUTPUT
 36813                                  		; DL = character to send to standard output
 36814 0000577E 1F                      	pop	ds				;;AN000;;
 36815 0000577F 88D0                    	mov	al,dl				;;AN000;; Get the character in AL
 36816 00005781 E8AC00                  	call	$M_IS_IT_DBCS 			;;AN000;; Is this the first byte of a DB character
 36817 00005784 1E                      	push	ds				;;AN000;;
 36818 00005785 06                      	push	es				;;AN000;;
 36819 00005786 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 36820 00005787 7316                    	jnc	short $MIF120 ; *
 36821                                  
 36822 00005789 268A5501                	mov	dl,[es:di+1]			;;AN000;; Get the next character
 36823 0000578D CD21                    	int	21h				;;AN000;; Write character
 36824                                  		; DOS - DISPLAY OUTPUT
 36825                                  		; DL = character to send to standard output
 36826                                  	; 08/04/2023
 36827                                  	;clc					;;AN000;; Clear the DBCS indicator
 36828                                  ;$MIF120:
 36829 0000578F EB0D                    	jmp	short $MEN119
 36830                                  $MIF119:
 36831                                  	; 08/04/2023
 36832                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 36833                                  ;$MDO123:
 36834 00005791 09C9                    	or	cx,cx				;;AN002;; Are there any left to display?
 36835                                  	;jz	short $MEN123
 36836                                  	; 18/04/2023
 36837 00005793 740A                    	jz	short $MIF120 ; cf = 0
 36838                                  $MDO123: ; 08/04/2023
 36839 00005795 268A15                  	mov	dl,[es:di]			;;AN002;; Get the character
 36840 00005798 CD21                    	int	21h				;;AN002;; Display the character
 36841                                  		; DOS - DISPLAY OUTPUT
 36842                                  		; DL = character to send to standard output
 36843 0000579A 47                      	inc	di				;;AN002;; Set pointer to next character
 36844 0000579B 49                      	dec	cx				;;AN002;; Count this character
 36845 0000579C 75F7                    	jnz	short $MDO123
 36846                                  ;$MEN123:
 36847                                  $MEN119:
 36848 0000579E F8                      	clc					;;AN000;;Char functions used don't return carry as error
 36849                                  $MIF120: ; 08/04/2023 ; *
 36850 0000579F 1F                      	pop	ds				;;AN000;;
 36851 000057A0 C3                      	retn
 36852                                  
 36853                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36854                                  ;;
 36855                                  ;; Scan_ctrlZ: This routine looks through the string to be printed and 
 36856                                  ;; truncates it at the Ctrl-Z if any present.
 36857                                  ;;
 36858                                  ;;	ENTRY:	ds:dx = String to be displayed
 36859                                  ;;		cx = number of chars to be displayed
 36860                                  ;;
 36861                                  ;;	EXIT:	cx = number of chars to be displayed
 36862                                  ;;
 36863                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36864                                  
 36865                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36866                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36867                                  scan_ctrlz:
 36868 000057A1 57                      	push	di
 36869 000057A2 50                      	push	ax
 36870 000057A3 06                      	push	es
 36871 000057A4 53                      	push	bx
 36872                                  
 36873 000057A5 89D7                    	mov	di,dx
 36874 000057A7 1E                      	push	ds
 36875 000057A8 07                      	pop	es   			;es:di points at string
 36876                                  
 36877 000057A9 89CB                    	mov	bx,cx			;save current count
 36878                                  
 36879 000057AB B01A                    	mov	al,1Ah	; Ctrl-Z
 36880 000057AD FC                      	cld
 36881 000057AE F2AE                    	repne	scasb			;find first Ctrl-Z
 36882 000057B0 7503                    	jnz	short noCtrlZ		;no CtrlZ found in string
 36883                                  
 36884 000057B2 29CB                    	sub	bx,cx
 36885 000057B4 4B                      	dec	bx			;bx = new count to display
 36886                                  noCtrlZ:
 36887 000057B5 89D9                    	mov	cx,bx			;cx = actual display count
 36888                                  
 36889 000057B7 5B                      	pop	bx
 36890 000057B8 07                      	pop	es
 36891 000057B9 58                      	pop	ax
 36892 000057BA 5F                      	pop	di
 36893                                  $MIF127:	; 08/04/2023
 36894 000057BB C3                      	retn
 36895                                  
 36896                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36897                                  ;;
 36898                                  ;;	PROC NAME: $M_DISPLAY_H_STRING
 36899                                  ;;
 36900                                  ;;	FUNCTION:  Will display a string to a specified handle
 36901                                  ;;	INPUTS:    ES:DI points to beginning of message
 36902                                  ;;		   CX contains the number of bytes to write
 36903                                  ;;		   BX contains the handle to write to
 36904                                  ;;	OUPUTS:    None
 36905                                  ;;	REGS USED: AX,DX
 36906                                  ;;
 36907                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 36908                                  
 36909                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36910                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 36911                                  $M_DISPLAY_H_STRING:
 36912 000057BC 31C0                    	xor	ax,ax			;;AN002;; Set number of bytes written to 0
 36913 000057BE 09C9                    	or	cx,cx			;;AN002;; For performance, don't write if not necessary
 36914 000057C0 74F9                    	jz	short $MIF127
 36915                                  	
 36916 000057C2 1E                      	push	ds			;;AN000;;
 36917 000057C3 06                      	push	es			;;AN000;;
 36918 000057C4 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 36919                                  	
 36920 000057C5 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 36921 000057C7 89FA                    	mov	dx,di			;;AN000;; Pointer to data to write
 36922                                  
 36923 000057C9 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR	;;AN000;; Is this a single character?
 36924 000057CC 7528                    	jne	short $MIF128		;;AN000;; No
 36925                                  
 36926 000057CE CD21                    	int	21h			;;AN000;; Write character
 36927                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 36928                                  		; BX = file handle, CX = number of bytes to writ
 36929                                  
 36930 000057D0 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 36931 000057D1 50                      	push	ax			;;AN000;;
 36932 000057D2 268A05                  	mov	al,[es:di] 		;;AN000;; Get the character
 36933 000057D5 E85800                  	CALL    $M_IS_IT_DBCS		;;AN000;; Is this the first byte of a DB character
 36934 000057D8 58                      	pop	ax			;;AN000;;
 36935 000057D9 1E                      	push	ds			;;AN000;;
 36936 000057DA 06                      	push	es			;;AN000;;
 36937 000057DB 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 36938 000057DC 7306                    	jnc	short $MIF129
 36939                                  	
 36940 000057DE F8                      	clc				;;AN000;; Clear the DBCS indicator
 36941 000057DF B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 36942 000057E1 42                      	inc	dx			;;AN000;; Point to next character
 36943 000057E2 CD21                    	int	21h			;;AN000;; Write character
 36944                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 36945                                  		; BX = file handle, CX = number of bytes to write, 
 36946                                  $MIF129:
 36947                                  ;SR;
 36948                                  ; If the single char happened to be a Ctrl-Z, the dos write would return
 36949                                  ;0 chars written making the caller think there was an error writing. To 
 36950                                  ;avoid this, we check if the single char was a Ctrl-Z and if so, return that
 36951                                  ;the char was written, thus fooling the caller.
 36952                                  
 36953 000057E4 9C                      	pushf				;save flags
 36954 000057E5 26803D1A                	cmp	byte [es:di],1Ah	;is char a Ctrl-Z?
 36955 000057E9 7502                    	jne	short m_popf_j		;no, continue
 36956                                  
 36957 000057EB 89C8                    	mov	ax,cx			;yes, fake as if it was written
 36958                                  m_popf_j:
 36959                                  	; 08/04/2023
 36960                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 36961 000057ED EB01                    	jmp	short m_popf		;restore flags
 36962                                  
 36963                                  ; 07/04/2023
 36964                                  ; ---------------------------
 36965                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 36966                                  ; ---------------------------
 36967                                  	; $M_POPF macro
 36968                                  	;jmp	short $+3
 36969                                  intret:
 36970 000057EF CF                      	iret
 36971                                  m_popf:
 36972 000057F0 0E                      	push	cs
 36973 000057F1 E8FBFF                  	call	intret
 36974                                  	;;; end macro	
 36975                                  ; ---------------------------
 36976                                  
 36977 000057F4 EB18                    	jmp	short $MEN128
 36978                                  
 36979                                  $MIF128:
 36980                                  ;SR;
 36981                                  ; Prescan the string looking for Ctrl-Z. We terminate the message the moment 
 36982                                  ;we hit a Ctrl-Z. cx will contain the number of characters to be printed.
 36983                                  
 36984 000057F6 55                      	push	bp			; M007
 36985 000057F7 51                      	push	cx
 36986 000057F8 E8A6FF                  	call	scan_ctrlz		;cx = count without Ctrl-Z
 36987 000057FB 89CD                    	mov	bp,cx			;store no ^Z count in bp ;M007
 36988 000057FD 59                      	pop	cx			;get old count back ;M007
 36989                                  	
 36990 000057FE CD21                    	int	21h			;;AN000;; Write String at DS:SI to handle
 36991                                  	;jnc	short chk_count		;no error, adjust return count
 36992                                  	;jmp	short m_cnt_ok		;error, return with carry set;M007
 36993                                  	; 08/04/2023
 36994 00005800 720B                    	jc	short m_cnt_ok 
 36995                                  ;M007
 36996                                  ; If we are writing to con and there is a Ctrl-Z in the string, the
 36997                                  ;return count will be much less and if this returns to the caller we can get
 36998                                  ;spurious error messages. We check here if the count returned is same as
 36999                                  ;original count or same as the count if we stop at Ctrl-Z. In the second
 37000                                  ;case, we fake it as if all bytes have been written. If the return count
 37001                                  ;does not match either count, then we had some other disk error (such as
 37002                                  ;insufficient disk space) and we pass it through
 37003                                  
 37004                                  chk_count:
 37005 00005802 39C1                    	cmp	cx,ax			;have all bytes been written?;M007
 37006 00005804 7407                    	je	short m_cnt_ok		;there was an error writing ;M007
 37007 00005806 39C5                    	cmp	bp,ax			;count = Ctrl-Z count? ;M007
 37008 00005808 F8                      	clc				;no error either way ;M007
 37009 00005809 7502                    	jne	short m_cnt_ok		;no, pass it through ;M007
 37010 0000580B 89C8                    	mov	ax,cx			;return old count ;M007
 37011                                  m_cnt_ok:				; M007
 37012 0000580D 5D                      	pop	bp			; M007
 37013                                  $MEN128:
 37014 0000580E 1F                      	pop	ds			;;AN000;;
 37015                                  ;$MIF127: ; 08/04/2023
 37016 0000580F C3                      	retn
 37017                                  
 37018                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37019                                  ;;
 37020                                  ;;	PROC NAME: $M_GET_EXT_ERR_39
 37021                                  ;;
 37022                                  ;;	FUNCTION:  Will set registers for extended error #39
 37023                                  ;;	INPUTS:    None
 37024                                  ;;	OUPUTS:    AX,BX,CX set
 37025                                  ;;	REGS USED:
 37026                                  ;;
 37027                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37028                                  
 37029                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37030                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:542Dh
 37031                                  
 37032                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37033                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5BFAh
 37034                                  
 37035                                  $M_GET_EXT_ERR_39:
 37036 00005810 B82700                  	mov	ax,27h ; EXT_ERR_39	;AN001; Set AX=39
 37037                                  	;mov	bx,(ERROR_CLASS_39 SHR 8) + ACTION_39
 37038 00005813 BB0400                  	mov	bx,4			;AN001; Set BH=1 BL=4
 37039                                  	;mov	ch,LOCUS_39		;AN001; Set CH=1
 37040 00005816 B501                    	mov	ch,1			;AN001;
 37041 00005818 C3                      	retn				;AN001;
 37042                                  
 37043                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37044                                  ;;
 37045                                  ;;	PROC NAME: $M_ADD_CRLF
 37046                                  ;;
 37047                                  ;;	FUNCTION:  Will decide whether to display a CRLF
 37048                                  ;;	INPUTS:    DX contains the Input/Class requested
 37049                                  ;;	OUTPUTS:   None
 37050                                  ;;	REGS Revised: CX,ES,DI
 37051                                  ;;
 37052                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37053                                  
 37054                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37055                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37056                                  $M_ADD_CRLF:
 37057                                  	;cmp	dh,0FFh
 37058 00005819 80FEFF                  	cmp	dh,utility_msg_class	;;AN004;; Is it a utility message?
 37059 0000581C 7411                    	je	short $MIF134		;;AN004;; Yes
 37060 0000581E F6C680                  	test	dh,80h; $M_NO_CRLF_MASK	;;AN004;; Are we to supress the CR LF?
 37061 00005821 750C                    	jnz	short $MIF135
 37062                                  					;;AN004;; No	
 37063 00005823 1E                      	push	ds			;;AN004;;
 37064 00005824 07                      	pop	es			;;AN004;; Set ES to data segment
 37065 00005825 8D3E[D098]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_CRLF]
 37066                                  	;lea	di,[$M_RT+67]		;;AN004;; Point at CRLF message
 37067 00005829 B90200                  	mov	cx,2 ; $M_CRLF_SIZE	;;AN004;; Set the message size
 37068 0000582C E80BFF                  	call	$M_DISPLAY_STRING	;;AN004;; Display the CRLF
 37069                                  $MIF135:
 37070                                  $MIF134:
 37071 0000582F C3                      	retn				;;AN004;; Return
 37072                                  
 37073                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37074                                  ;;
 37075                                  ;;	PROC NAME: $M_IS_IT_DBCS
 37076                                  ;;
 37077                                  ;;	FUNCTION:  Will decide whether character is Single or Double Byte
 37078                                  ;;	INPUTS:    AL contains the byte to be checked
 37079                                  ;;	OUTPUTS:   Carry flag = 0 if byte is NOT in DBCS range
 37080                                  ;;		   Carry flag = 1 if byte IS in DBCS range
 37081                                  ;;	REGS USED: All restored
 37082                                  ;;
 37083                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37084                                  
 37085                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37086                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37087                                  $M_IS_IT_DBCS:
 37088 00005830 06                      	push	es			;;AN000;; Save Extra Segment register
 37089 00005831 57                      	push	di			;;AN000;; Save DI register
 37090                                  
 37091 00005832 C43E[C998]              	les	di,[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]
 37092                                  	;les	di,[$M_RT+60]		;;AN000;;
 37093 00005836 09FF                    	or	di,di			;;AN000;; Was the DBCS vector set?
 37094 00005838 7417                    	jz	short $MIF138		;;AN000;; No
 37095                                  $MDO139:
 37096 0000583A 26833D00                	cmp	word [es:di],0 ; $M_DBCS_TERM
 37097                                  					;;AN000;; Is this the terminating flag?
 37098 0000583E F8                      	clc				;;AN000;;
 37099 0000583F 7410                    	jz	short $MEN139
 37100                                  					;;AN000;; No
 37101 00005841 263A05                  	cmp	al,[es:di]		;;AN000;; Does the character fall in the DBCS range?
 37102 00005844 7207                    	jnae	short $MIF141 ; jb	;;AN000;; No		
 37103 00005846 263A4501                	cmp	al,[es:di+1]		;;AN000;; Does the character fall in the DBCS range?
 37104 0000584A 7701                    	jnbe	short $MIF141 ; ja	;;AN000;; No
 37105                                  					;;AN000;; Yes
 37106 0000584C F9                      	stc				;;AN000;; Set carry flag
 37107                                  $MIF141:
 37108 0000584D 47                      	inc	di			;;AN000;;
 37109 0000584E 47                      	inc	di			;;AN000;;
 37110 0000584F EBE9                    	jmp	short $MDO139		;;AN000;; Go to next vector
 37111                                  $MEN139:
 37112                                  $MIF138:
 37113 00005851 5F                      	pop	di			;;AN000;; Restore DI register
 37114 00005852 07                      	pop	es			;;AN000;; Restore Extra Segment register
 37115 00005853 C3                      	retn				;;AN000;; Return
 37116                                  
 37117                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37118                                  ;;
 37119                                  ;;	PROC NAME: $M_CONVERT2ASC
 37120                                  ;;
 37121                                  ;;	FUNCTION: Convert a binary number to a ASCII string
 37122                                  ;;	INPUTS: DX:AX contains the number to be converted
 37123                                  ;;		$M_RT_DIVISOR contains the divisor
 37124                                  ;;	OUTPUTS: CX contains the number of characters
 37125                                  ;;		Top of stack  --> Last character
 37126                                  ;;				     . . .
 37127                                  ;;		Bot of stack  --> First character
 37128                                  ;;	REGS USED:
 37129                                  ;;
 37130                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37131                                  
 37132                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37133                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37134                                  $M_CONVERT2ASC:
 37135 00005854 8F06[D398]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 37136                                  	;pop	word [$M_RT+70]			;;AN000;; Save Return Address
 37137                                  	
 37138 00005858 31DB                    	xor	bx,bx				;;AN000;; Use BX as a swapping register
 37139 0000585A 93                      	xchg	bx,ax				;;AN000;; Initialize - Low Word in BX
 37140 0000585B 92                      	xchg	ax,dx				;;AN000;;	  - High Word in AX
 37141                                  $MDO145:					;;AN000;; DO UNTIL Low Word becomes zero
 37142 0000585C F736[D798]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 37143                                  	;div	word [$M_RT+74]			;;AN000;; Divide High Word by divisor
 37144 00005860 93                      	xchg	bx,ax				;;AN000;; Setup to divide Low Word using remainder
 37145                                  						;;AN000;;  and save reduced High Word in BX
 37146 00005861 F736[D798]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 37147                                  	;div	word [$M_RT+74]			;;AN000;; Divide Low Word by divisor
 37148                                  
 37149 00005865 83FA09                  	cmp	dx,9				;;AN000;; Make a digit of the remainder
 37150 00005868 7605                    	jna	short $MIF146			;;AN000;; 0-9
 37151 0000586A 80C237                  	add	dl,55	; add dl,37h		;;AN000;; Make A to F ASCII
 37152 0000586D EB03                    	jmp	short $MEN146
 37153                                  $MIF146:
 37154 0000586F 80C230                  	add	dl,'0'				;;AN000;; Make 0 to 9 ASCII
 37155                                  $MEN146:
 37156 00005872 52                      	push	dx				;;AN000;; Save the digit on the stack
 37157 00005873 41                      	inc	cx				;;AN000;; Count that digit
 37158 00005874 09C0                    	or	ax,ax				;;AN000;; Are we done?
 37159 00005876 7504                    	jnz	short $MLL149			;;AN000;; No
 37160 00005878 09DB                    	or	bx,bx				;;AN000;; AX and BX must be ZERO!!
 37161 0000587A 741F                    	jz	short $MEN145 ; * ; ax = 0	;;AN000;; Yes
 37162                                  $MLL149:
 37163 0000587C 83F903                  	cmp	cx,3 ; $M_FIRST_THOU		;;AN000;; Are we at the first thousands mark
 37164                                  ; 28/04/2023
 37165 0000587F 740A                    	je	short $MIF153
 37166                                  ;	jne	short $MIF150			;;AN000;; No
 37167                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 37168                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 37169                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 37170                                  ;	;jne	short $MIF151
 37171                                  ;	; 09/04/2023
 37172                                  ;	jne	short $MEN150
 37173                                  ;						;;AN000;; Yes
 37174                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 37175                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 37176                                  ;	inc	cx				;;AN000;;
 37177                                  ;$MIF151:
 37178                                  ;	jmp	short $MEN150
 37179                                  
 37180                                  $MIF150:
 37181                                  	; 15/06/2023 (6)
 37182                                  	; MSDOS 6.0
 37183                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54ABh 
 37184                                  	;cmp	cx,6 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 37185                                  	; 15/06/2023 (7)
 37186                                  	; MSDOS 6.22
 37187                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C78h 
 37188 00005881 83F907                  	cmp	cx,7 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark	
 37189                                  
 37190                                  ; 28/04/2023
 37191 00005884 7405                    	je	short $MIF153
 37192                                  ;	jne	short $MIF154			;;AN000;; No
 37193                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 37194                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 37195                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 37196                                  ;	;jne	short $MIF155			;;AN000;; No
 37197                                  ;	; 09/04/2023
 37198                                  ;	jne	short $MEN154
 37199                                  ;						;;AN000;; Yes				
 37200                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 37201                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 37202                                  ;	inc	cx				;;AN000;;
 37203                                  ;$MIF155:
 37204                                  ;	jmp	short $MEN154
 37205                                  
 37206                                  $MIF154:
 37207                                  	; 15/06/2023 (9)
 37208                                  	; MSDOS 6.0
 37209                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54BDh 
 37210                                  	;cmp	cx,9 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 37211                                  	; 15/06/2023 (11)
 37212                                  	; MSDOS 6.22
 37213                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C8Ah 
 37214 00005886 83F90B                  	cmp	cx,11 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 37215 00005889 750B                    	jne	short $MIF158			;;AN000;; No  
 37216                                  ; 28/04/2023
 37217                                  $MIF153:
 37218                                  	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 37219 0000588B 807C0A2C                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 37220                                  	;cmp	byte [si+0Ah],',' ; $M_COMMA
 37221 0000588F 7505                    	jne	short $MIF159			;;AN000;; No
 37222                                  						;;AN000;; Yes
 37223 00005891 FF36[E098]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 37224                                  	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 37225 00005895 41                      	inc	cx				;;AN000;;
 37226                                  $MIF159:
 37227                                  $MIF158:
 37228                                  $MEN154:
 37229                                  $MEN150:					;;AN000;;
 37230 00005896 93                      	xchg	ax,bx				;;AN000;; Setup to divide the reduced High Word
 37231                                  						;;AN000;;  and Revised Low Word
 37232 00005897 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 37233                                  	; 28/04/2023
 37234 00005899 EBC1                    	jmp	short $MDO145
 37235                                  ;$MEN145:
 37236                                  	; 28/04/2023
 37237                                  	;xor	ax,ax				;;AN000;; Reset remainder
 37238                                  $MEN145: ; 09/04/2023 ; * ; ax = 0
 37239 0000589B 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 37240 0000589D FF36[D398]              	push	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 37241                                  	;push	word [$M_RT+70]			;;AN000;; Restore Return Address
 37242 000058A1 C3                      	retn					;;AN000;; Return
 37243                                  
 37244                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37245                                  ;;
 37246                                  ;;	PROC NAME: $M_DISPLAY_MESSAGE
 37247                                  ;;
 37248                                  ;;	FUNCTION:  Will display or write entire message (with replacable parameters)
 37249                                  ;;	INPUTS:    ES:DI points to beginning of message
 37250                                  ;;		   DS:SI points to first sublist structure in chain
 37251                                  ;;		   BX contains the handle to write to (if applicable)
 37252                                  ;;		   CX contains the length of string to write (before substitutions)
 37253                                  ;;		   BP contains the count of replacables
 37254                                  ;;
 37255                                  ;;	OUTPUTS:
 37256                                  ;;	REGS USED: All
 37257                                  ;;
 37258                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37259                                  
 37260                                  	; 10/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37261                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54DBh
 37262                                  
 37263                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37264                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:54DBh
 37265                                  
 37266                                  $M_DISPLAY_MESSAGE:
 37267                                  ; $DO						;;AN000;; Note: DS:SI -> message
 37268                                  $MDO165:
 37269 000058A2 31D2                    	xor	dx,dx				;;AN000;; Set size = 0
 37270 000058A4 09C9                    	or	cx,cx				;;AN000;; Are we finished the message yet?
 37271                                  ;; $IF NZ					;;AN000;; No
 37272 000058A6 7421                    	jz	short $MIF166			;;AN000;; Yes
 37273 000058A8 B425                    	mov	ah,"%"				;;AN000;; Prepare to scan for %
 37274 000058AA B000                    	mov	al,0				;;AN004;;
 37275                                  ;; $DO						;;AN000;; Scan through string until %
 37276                                  $MDO167:
 37277 000058AC 263825                  	cmp	byte [es:di],ah			;;AN000;; Is this character NOT a %
 37278                                  ;; $LEAVE E,AND					;;AN000;; No
 37279 000058AF 750A                    	jne	short $MLL168
 37280 000058B1 26386501                	cmp	byte [es:di+1],ah		;;AN000;; Is the next character also a %
 37281                                  ;; $LEAVE NE,AND				;;AN000;; No
 37282 000058B5 7404                    	je	short $MLL168
 37283                                  
 37284 000058B7 38E0                    	cmp	al,ah				;;AN000;; Was the character before a %
 37285                                  ;; $LEAVE NE					;;AN000;; No, GREAT found it
 37286 000058B9 750E                    	jne	short MEN167
 37287                                  $MLL168:
 37288 000058BB 268A05                  	mov	al,[es:di]			;;AN004;; Yes, (to any of the above)
 37289 000058BE E86FFF                  	call	$M_IS_IT_DBCS			;;AN004;; Is this character the first part of a DBCS?
 37290                                  ;;; $IF C					;;AN004;; Yes
 37291 000058C1 7301                    	jnc	short $MIF169
 37292 000058C3 47                      	inc	di				;;AN004;; Increment past second part
 37293                                  ;;; $ENDIF					;;AN004;;
 37294                                  $MIF169:
 37295 000058C4 47                      	inc	di				;;AN000;; Next character in string
 37296 000058C5 42                      	inc	dx				;;AN000;; Size = Size + 1
 37297 000058C6 49                      	dec	cx				;;AN000;; Decrement total size
 37298                                  ;; $ENDDO Z					;;AN000;; Exit scan if we're at the end of the line
 37299 000058C7 75E3                    	jnz	short $MDO167
 37300                                  $MEN167:
 37301                                  ;; $ENDIF					;;AN000;;
 37302                                  $MIF166:
 37303 000058C9 56                      	push	si				;;AN000;; Save beginning of sublists
 37304 000058CA 87CA                    	xchg	cx,dx				;;AN000;; Get size of message to display (tot sz in DX)
 37305 000058CC 09ED                    	or	bp,bp				;;AN000;; Do we have any replacables to do?
 37306                                  ;; $IF NZ					;;AN000;; Yes
 37307 000058CE 7431                    	jz	short $MIF173
 37308 000058D0 4D                      	dec	bp				;;AN000;; Decrement number of replacables
 37309                                  
 37310                                  ;; Search through sublists to find applicable one
 37311                                  
 37312 000058D1 833E[D598]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 37313                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 37314                                  ;;; $IF E					;;AN000;; No
 37315 000058D6 7529                    	jne	short $MIF174
 37316                                  ;;; $SEARCH					;;AN000;;
 37317                                  $MDO175:
 37318                                  	;mov	al,$M_SL.$M_S_ID ;$M_SL=DS:[SI]	;;AN000;; Get ID byte
 37319 000058D8 8A4406                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_ID]
 37320                                  	;mov	al,[si+6]
 37321 000058DB 0430                    	add	al,30h				;;AN000;; Convert to ASCII
 37322                                  	; 28/04/2023					
 37323 000058DD 263A4501                	cmp	al,[es:di+1]			;;AN000;; Is this the right sublist?
 37324                                  ;;; $EXITIF E					;;AN000;;
 37325                                  	;jne	short $MIF175
 37326                                  ;;; $ORELSE					;;AN000;; No
 37327                                  	;jmp	short $MSR175
 37328                                  	; 28/04/2023
 37329 000058E1 741E                    	je	short $MSR175
 37330                                  $MIF175:
 37331 000058E3 3C30                    	cmp	al,30h ; $M_SPECIAL_CASE	;;AN000;; Does this sublist have ID = 0
 37332                                  ;;; $LEAVE E,AND				;;AN000;; Yes
 37333 000058E5 7504                    	jne	short $MLL178
 37334 000058E7 09D2                    	or	dx,dx				;;AN000;; Are we at the end of the message?
 37335                                  ;;; $LEAVE Z					;;AN000;; No
 37336 000058E9 7404                    	jz	short $MEN175
 37337                                  $MLL178:
 37338                                  	;add	si,$M_SL.$M_S_SIZE		;;AN000;; Next SUBLIST
 37339                                  	;add	si,[si+$M_SUBLIST_STRUC.$M_S_SIZE] ; [si+0]
 37340                                  	;;add	si,[si+0]
 37341 000058EB 0334                    	add	si,[si]
 37342                                  ;;; ENDLOOP					;;AN000;; Yes
 37343 000058ED EBE9                    	jmp	short $MDO175
 37344                                  $MEN175:
 37345 000058EF 803E[D298]FF            	cmp	byte [$M_RT+$M_RES_ADDRS.$M_CLASS],utility_msg_class
 37346                                  	;cmp	byte [$M_RT+69],0FFh		;;AN004;; Is it a utility message?
 37347                                  ;;;; $IF E					;;AN004;; Yes
 37348 000058F4 7508                    	jne	short $MIF180
 37349 000058F6 42                      	inc	dx				;;AN000;; Remember to display CR,LF
 37350 000058F7 42                      	inc	dx				;;AN000;;  at the end of the message
 37351 000058F8 49                      	dec	cx				;;AN000;; Adjust message length
 37352 000058F9 49                      	dec	cx				;;AN000;;
 37353 000058FA 4F                      	dec	di				;;AN000;; Adjust ending address of message
 37354 000058FB 4F                      	dec	di				;;AN000;;
 37355                                  ;;;; $ELSE					;;AN004;; No
 37356 000058FC EB03                    	jmp	short $MEN180
 37357                                  $MIF180:
 37358 000058FE BAFFFF                  	mov	dx,-1 				;;AN004;; Set special case
 37359                                  ;;;; $ENDIF					;;AN004;;
 37360                                  $MEN180:
 37361                                  ;;; $ENDSRCH					;;AN000;;
 37362                                  $MSR175:
 37363                                  ;; $ENDIF					;;AN000;;
 37364                                  $MIF174:
 37365                                  ; $ENDIF					;;AN000;;
 37366                                  $MIF173:
 37367                                  ;; Prepare and display this part of message
 37368                                  
 37369 00005901 57                      	push	di				;;AN000;; Save pointer to replace number
 37370 00005902 29CF                    	sub	di,cx				;;AN000;; Determine beginning of string
 37371 00005904 E833FE                  	call	$M_DISPLAY_STRING		;;AN000;; Display string until % (or end)
 37372 00005907 5F                      	pop	di				;;AN000;; Get back pointer to replace number
 37373 00005908 59                      	pop	cx				;;AN000;; Clean up stack in case error
 37374                                  ; $LEAVE C,LONG					;;AN000;; Fail if carry was set
 37375                                  	;jnc	short $MXL3
 37376                                  	;jmp	$MEN165
 37377                                  	; 02/05/2023
 37378 00005909 7214                    	jc	short $MEN165
 37379                                  $MXL3:
 37380 0000590B 51                      	push	cx				;;AN000;;
 37381                                  
 37382                                  ;; Save and reset pointer registers
 37383                                  
 37384 0000590C 89D1                    	mov	cx,dx				;;AN000;; Get the size of the rest of the message
 37385                                  	;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h
 37386 0000590E 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0 ; $M_SPECIAL_CASE-30h
 37387                                  	;cmp	byte [si+6],0 			;;AN000;; Is this the %0 case?
 37388                                  ; $IF NE					;;AN000;; No
 37389 00005912 7412                    	je	short $MIF187			;;AN000;; Yes			
 37390 00005914 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 37391                                  ;; $IF NZ					;;AN000;; No
 37392 00005916 7406                    	jz	short $MIF188			;;AN000;; Yes
 37393 00005918 49                      	dec	cx				;;AN000;; Decrement total size (%)
 37394 00005919 49                      	dec	cx				;;AN000;; Decrement total size (#)
 37395 0000591A 47                      	inc	di				;;AN000;; Go past %
 37396 0000591B 47                      	inc	di				;;AN000;; Go past replace number
 37397                                  ;; $ELSE					;;AN000;; Yes, (Note this will not leave because INC)
 37398                                  	;jmp	short $MEN188
 37399                                  	; 28/04/2023
 37400 0000591C EB15                    	jmp	short $MEN187
 37401                                  $MIF188:
 37402 0000591E 5E                      	pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 37403                                  ;; $ENDIF					;;AN000;; Yes, Note this will not leave because INC
 37404                                  $MEN188:
 37405                                  ; $ELSE 					;;AN000;;
 37406                                  	;jmp	short $MEN187
 37407                                  	; 28/04/2023
 37408                                  	; zf = 1
 37409                                  	;jmp	short $MEN165 
 37410                                  
 37411                                  ; 28/04/2023
 37412                                  $MXL4:
 37413                                  $MLL214:
 37414                                  $MEN165:
 37415 0000591F C706[D598]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 37416                                  	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 37417                                  						;;AN000;; Reset message number to null
 37418 00005925 C3                      	retn					;;AN000;; Return
 37419                                  
 37420                                  $MIF187:
 37421 00005926 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 37422                                  ;; $IF Z					;;AN004;; No
 37423                                  	;jnz	short $MIF192
 37424                                  	;pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 37425                                  ;; $ELSE					;;AN000;; No
 37426                                  	;jmp	short $MEN192
 37427                                  	; 28/04/2023
 37428 00005928 74F4                    	jz	short $MIF188
 37429                                  $MIF192:
 37430 0000592A 83F9FF                  	cmp	cx,-1				;;AN004;; Are we at the end of the message?
 37431                                  ;;; $IF Z					;;AN004;; No
 37432 0000592D 7502                    	jnz	short $MIF194
 37433 0000592F 31C9                    	xor	cx,cx				;;AN004;;
 37434                                  ;;; $ENDIF					;;AN000;;
 37435                                  $MIF194:
 37436 00005931 09FF                    	or	di,di				;;AN004;; Turn ZF off
 37437                                  ;; $ENDIF					;;AN000;;
 37438                                  $MEN192:
 37439                                  ; $ENDIF					;;AN000;; Note this will not leave because INC
 37440                                  $MEN187:
 37441                                  ; $LEAVE Z					;;AN000;;
 37442 00005933 74EA                    	jz	short $MEN165
 37443                                  	;
 37444 00005935 55                      	push	bp				;;AN000;; Save the replace count
 37445 00005936 57                      	push	di				;;AN000;; Save location to complete message
 37446 00005937 06                      	push	es				;;AN000;;
 37447 00005938 51                      	push	cx				;;AN000;; Save size of the rest of the message
 37448 00005939 31C9                    	xor	cx,cx				;;AN000;; Reset CX used for character count
 37449                                  
 37450                                  ;; Determine what action is required on parameter
 37451                                  
 37452 0000593B 833E[D598]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 37453                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 37454                                  ; $IF E						;;AN000;;
 37455 00005940 753B                    	jne	short $MIF199
 37456                                  
 37457                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 37458 00005942 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 37459                                  	;test	byte [si+7],0Fh			;;AN000;;
 37460                                  ;; $IF Z					;;AN000;;
 37461 00005946 7508                    	jnz	short $MIF200
 37462                                  
 37463                                  ;; Character type requested
 37464                                  
 37465                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 37466 00005948 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 37467                                  	;les	di,[si+2]
 37468 0000594B E84801                  	call	$M_CHAR_REPLACE			;;AN000;;
 37469                                  ;; $ELSE					;;AN000;; Get the rest of the message to display
 37470 0000594E EB28                    	jmp	short $MEN200
 37471                                  $MIF200:
 37472                                  ;; ENDIF					;;AN000;;
 37473                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 37474 00005950 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 37475                                  	;test	byte [si+7],0Dh			;;AN000;;
 37476                                  ;; $IF Z,OR					;;AN000;;
 37477 00005954 740C                    	jz	short $MLL202
 37478                                  	;test	byte ptr $M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK
 37479 00005956 F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 37480                                  	;test	byte [si+7],0Eh			;;AN000;;
 37481                                  ;;; $IF Z,OR					;;AN000;;
 37482 0000595A 7406                    	jz	short $MLL202
 37483                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Bin_Hex_Type and $M_TYPE_MASK
 37484 0000595C F644070C                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Ch
 37485                                  	;test	byte [si+7],0Ch			;;AN000;;
 37486                                  ;;;; $IF Z 					;;AN000;;
 37487 00005960 7508                    	jnz	short $MIF202
 37488                                  $MLL202:
 37489                                  
 37490                                  ;; Numeric type requested
 37491                                  
 37492                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 37493 00005962 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 37494                                  	;les	di,[si+2]
 37495 00005965 E85601                  	call	$M_BIN2ASC_REPLACE		;;AN000;;
 37496                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 37497 00005968 EB0E                    	jmp	short $MEN202
 37498                                  $MIF202:
 37499                                  ;;;; ENDIF					;;AN000;;
 37500                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Date_Type and $M_TYPE_MASK
 37501 0000596A F644070B                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Bh
 37502                                  	;test	byte [si+7],0Bh			;;AN000;;
 37503                                  ;;;; $IF E					;;AN000;;
 37504 0000596E 7505                    	jnz	short $MIF204
 37505                                  
 37506                                  ;; Date type requested
 37507                                  
 37508 00005970 E8EC01                  	call	$M_DATE_REPLACE			;;AN000;;
 37509                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 37510 00005973 EB03                    	jmp	short $MEN204
 37511                                  $MIF204:					;;AN000;;
 37512                                  
 37513                                  ;; Time type requested (Default if we have not matched until here)
 37514                                  
 37515 00005975 E89E02                  	call	$M_TIME_REPLACE			;;AN000;;
 37516                                  
 37517                                  ;;;; $ENDIF					;;AN000;;
 37518                                  $MEN204:
 37519                                  ;;; $ENDIF					;;AN000;;
 37520                                  $MEN202:
 37521                                  ;; $ENDIF					;;AN000;;
 37522                                  $MEN200:
 37523                                  
 37524                                  ;; With the replace information of the Stack, display the replaceable field
 37525                                  
 37526 00005978 E85F00                  	call	$M_DISPLAY_REPLACE		;;AN000;; Display the replace
 37527                                  
 37528                                  ;; None of the above - Extended/Parse replace
 37529                                  ; $ELSE 					;;AN000;;
 37530 0000597B EB03                    	jmp	short $MEN199
 37531                                  $MIF199:
 37532 0000597D E81600                  	call	$M_EXT_PAR_REPLACE		;;AN000;;
 37533                                  ; $ENDIF					;;AN000;;
 37534                                  $MEN199:
 37535                                  
 37536                                  ;; We must go back and complete the message after the replacable parameter if there is any left
 37537                                  
 37538                                  ; $IF NC					;;AN000;; IF there was an error displaying then EXIT
 37539 00005980 7207                    	jc	short $MIF211
 37540                                  	;
 37541 00005982 59                      	pop	cx				;;AN000;; Get size of the rest of the message
 37542 00005983 07                      	pop	es				;;AN000;; Get address of the rest of the message
 37543 00005984 5F                      	pop	di				;;AN000;;
 37544 00005985 5D                      	pop	bp				;;AN000;; Get replacment count
 37545 00005986 5E                      	pop	si				;;AN000;; ELSE get address of first sublist structure
 37546                                  ; $ELSE						;;AN000;;
 37547 00005987 EB03                    	jmp	short $MEN211
 37548                                  $MIF211:
 37549 00005989 83C40A                  	add	sp,10				;;AN000;; Clean up stack if error
 37550                                  	; 28/04/2023
 37551                                  	;stc					;;AN000;;
 37552                                  ; $ENDIF					;;AN000;;
 37553                                  $MEN211:
 37554 0000598C 833E[D598]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 37555                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 37556                                  ; $ENDDO NE,OR					;;AN000;;
 37557 00005991 758C                    	jne	short $MLL214
 37558                                  ; $ENDDO C,LONG					;;AN000;; Go back and display the rest of the message
 37559                                  	; 10/04/2023
 37560                                  	;jc	short $MXL4
 37561 00005993 E90CFF                  	jmp	$MDO165
 37562                                  
 37563                                  ; 28/04/2023
 37564                                  ;$MXL4:
 37565                                  ;$MLL214:
 37566                                  ;$MEN165:
 37567                                  ;	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 37568                                  ;	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 37569                                  ;						;;AN000;; Reset message number to null
 37570                                  ;	retn					;;AN000;; Return
 37571                                  
 37572                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37573                                  ;;
 37574                                  ;;	PROC NAME: $M_EXT_PAR_REPLACE
 37575                                  ;;
 37576                                  ;;	FUNCTION:
 37577                                  ;;	INPUTS:
 37578                                  ;;	OUPUTS:
 37579                                  ;;
 37580                                  ;;	REGS USED:
 37581                                  ;;
 37582                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37583                                  
 37584                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37585                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37586                                  
 37587                                  $M_EXT_PAR_REPLACE:
 37588 00005996 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 37589 00005998 A1[D598]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 37590                                  	;mov	ax,[$M_RT+72]			;;AN000;; Prepare for get binary value (LOW)
 37591 0000599B C706[D798]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37592                                  	;mov	word [$M_RT+74],10 ; $M_BASE10	;;AN000;; Set default divisor
 37593 000059A1 E8B0FE                  	call	$M_CONVERT2ASC			;;AN000;;
 37594                                  $MDO215:
 37595 000059A4 58                      	pop	ax				;;AN000;; Get character in register
 37596 000059A5 8887[D998]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 37597                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 37598 000059A9 43                      	inc	bx				;;AN000;; Increase buffer count
 37599 000059AA 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 37600 000059AD 7503                    	jne	short $MIF216			;;AN000;; No
 37601 000059AF E80D00                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37602                                  $MIF216:
 37603 000059B2 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 37604 000059B4 75EE                    	jnz	short $MDO215
 37605                                  
 37606 000059B6 B80D0A                  	mov	ax,0A0Dh ; mov ax,$M_CR_LF	;;AN000;; Move char into the buffer
 37607 000059B9 8987[D998]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],ax
 37608                                  	;;mov	[bx+$M_RT+76],ax		;;AN000;; Move char into the buffer
 37609 000059BD 43                      	inc	bx				;;AN000;; Increase buffer count
 37610 000059BE 43                      	inc	bx				;;AN000;; Increase buffer count
 37611                                  	;call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37612                                  	;retn					;;AN000::
 37613                                  	; 11/04/2023
 37614                                  	;jmp	$M_FLUSH_BUF
 37615                                  
 37616                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37617                                  ;;
 37618                                  ;;	PROC NAME: $M_FLUSH_BUFFER
 37619                                  ;;
 37620                                  ;;	FUNCTION: Display the contents of the temporary buffer
 37621                                  ;;	INPUTS: DI contains the number of bytes to display
 37622                                  ;;	OUTPUTS: BX reset to zero
 37623                                  ;;
 37624                                  ;;	REGS USED:
 37625                                  ;;
 37626                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37627                                  	
 37628                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37629                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:56C8h
 37630                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37631                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5E95h
 37632                                  $M_FLUSH_BUF:
 37633 000059BF 51                      	push	cx				;;AN000;; Save changed regs
 37634 000059C0 06                      	push	es				;;AN000;;
 37635 000059C1 57                      	push	di				;;AN000;;
 37636 000059C2 1E                      	push	ds				;;AN000;; Set ES pointing to buffer
 37637 000059C3 07                      	pop	es				;;AN000;;
 37638 000059C4 89D9                    	mov	cx,bx				;;AN000;; Set number of bytes to display
 37639 000059C6 31DB                    	xor	bx,bx				;;AN000;; Reset buffer counter
 37640 000059C8 8D3E[D998]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 37641                                  	;lea	di,[$M_RT+76]			;;AN000;; Reset buffer location pointer
 37642 000059CC E86BFD                  	call	$M_DISPLAY_STRING		;;AN000;; Display the buffer
 37643 000059CF 7204                    	jc	short $MIF314
 37644 000059D1 5F                      	pop	di				;;AN000;; No, Restore changed regs
 37645 000059D2 07                      	pop	es				;;AN000;;
 37646 000059D3 59                      	pop	cx				;;AN000;;
 37647                                  	;jmp	short $MEN314
 37648                                  	; 11/04/2023
 37649 000059D4 C3                      	retn
 37650                                  $MIF314:
 37651 000059D5 83C406                  	add	sp,6				;;AN000;; Fix stack
 37652 000059D8 F9                      	stc					;;AN000;;
 37653                                  $MEN314:
 37654 000059D9 C3                      	retn					;;AN000;; Return
 37655                                  
 37656                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37657                                  ;;
 37658                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37659                                  
 37660                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37661                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5609h
 37662                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37663                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5DD6h
 37664                                  $M_DISPLAY_REPLACE:
 37665 000059DA 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 37666                                  	;;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h ; 0
 37667 000059DC 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0	
 37668                                  	;cmp	byte [si+6],0			;;AN000;; Is this the special case (convert to ASCII)
 37669 000059E0 7511                    	jne	short $MIF276
 37670                                  	
 37671 000059E2 C787[D998]202D          	mov	word [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],2D20h ; $M_SPACE_HYP
 37672                                  	;mov	word [bx+$M_RT+76],2D20h	;;AN000;; Move in a " -"
 37673                                  	
 37674 000059E8 43                      	inc	bx				;;AN000;; Increment count
 37675 000059E9 43                      	inc	bx				;;AN000;; Increment count
 37676                                  	
 37677 000059EA C687[D998]20            	mov	byte [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],20h ; $M_SPACE
 37678                                  	;mov	byte [bx+$M_RT+76],20h		;;AN000;; Move in a " "
 37679                                  	
 37680 000059EF 43                      	inc	bx				;;AN000;; Increment count
 37681 000059F0 E8CCFF                  	call	$M_FLUSH_BUF			;;AN000;; Write out " - " to prepare for special case
 37682                                  $MIF276:
 37683 000059F3 5D                      	pop	bp				;;AN000;; Remember the return address
 37684 000059F4 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 37685 000059F6 31D2                    	xor	dx,dx				;;AN000;; Use DX for count of parms taken off the stack
 37686                                  
 37687 000059F8 880E[CF98]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl	;;AN000;; Save size to later clear stack
 37688                                  	;mov	[$M_RT+66],cl
 37689                                  	
 37690                                  	;mov	al,byte ptr $M_SL.$M_S_MINW	;;AN000;; Get the minimum width
 37691 000059FC 8A4409                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_MINW]
 37692                                  	;mov	al,[si+9]
 37693                                  	
 37694 000059FF 38C8                    	cmp	al,cl				;;AN000;; Do we need pad chars added?
 37695 00005A01 761E                    	jna	short $MIF278
 37696 00005A03 28C8                    	sub	al,cl				;;AN000;; Calculate how many pad chars are needed.
 37697 00005A05 88C6                    	mov	dh,al				;;AN000;; Save the number of pad characters
 37698                                  	
 37699                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 37700 00005A07 F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 37701                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be right aligned?
 37702 00005A0B 7414                    	jz	short $MIF279			;;AN000;; No
 37703                                  $MDO280:
 37704                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 37705 00005A0D 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 37706                                  	;mov	al,[si+0Ah]
 37707 00005A10 8887[D998]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 37708                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 37709                                  	
 37710 00005A14 43                      	inc	bx				;;AN000;;
 37711 00005A15 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; 64		;;AN000;; Is buffer full?
 37712 00005A18 7503                    	jne	short $MIF281
 37713 00005A1A E8A2FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37714                                  $MIF281:
 37715 00005A1D FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 37716 00005A1F 75EC                    	jnz	short $MDO280
 37717                                  $MIF279:
 37718                                  $MIF278:
 37719                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,$M_UNLIM_W
 37720 00005A21 807C0800                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],0 ; $M_UNLIM_W
 37721                                  	;cmp	byte [si+8],0			;;AN000;; Is maximum width unlimited
 37722 00005A25 740C                    	je	short $MIF286
 37723                                  	
 37724                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,CL	;;AN000;; Will we exceed maximum width?
 37725 00005A27 384C08                  	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],cl
 37726                                  	;;cmp	byte [si+8],cl
 37727 00005A2A 7307                    	jnb	short $MIF287
 37728                                  
 37729                                  	; 03/05/2023
 37730                                  	;;sub	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Calculate how many extra chars
 37731                                  	;sub	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 37732                                  	;;sub	cl,[si+8]
 37733 00005A2C 88CA                    	mov	dl,cl				;;AN000;; Remember how many chars to pop off
 37734                                  	;;mov	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Set new string length
 37735                                  	;mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 37736                                  	;;mov	cl,[si+8]
 37737                                  	; 03/05/2023
 37738 00005A2E 8A4C08                  	mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 37739 00005A31 28CA                    	sub	dl,cl
 37740                                  $MIF287:
 37741                                  $MIF286:
 37742 00005A33 09C9                    	or	cx,cx				;;AN000;;
 37743 00005A35 7424                    	jz	short $MIF290			;;AN000;;
 37744                                  $MDO291:
 37745                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type not $M_TYPE_MASK
 37746 00005A37 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 37747                                  	;test	byte [si+7],0Fh			;;AN000;;
 37748 00005A3B 750C                    	jnz	short $MIF292
 37749                                  
 37750                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 37751 00005A3D F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 37752                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?			 
 37753 00005A41 7406                    	jz	short $MIF292			;;AN000;; No
 37754                                  
 37755 00005A43 268A05                  	mov	al,[es:di]			;;AN000;; Get first character from string
 37756 00005A46 47                      	inc	di				;;AN000;; Next character in string
 37757 00005A47 EB01                    	jmp	short $MEN292
 37758                                  $MIF292:
 37759 00005A49 58                      	pop	ax				;;AN000;; Get character in register
 37760                                  $MEN292:
 37761                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 37762 00005A4A 8887[D998]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 37763                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 37764                                  	; 03/05/2023
 37765 00005A4E 43                      	inc	bx				;;AN000;; Increase buffer count
 37766 00005A4F 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 37767 00005A52 7503                    	jne	short $MIF295			;;AN000;;
 37768 00005A54 E868FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37769                                  $MIF295:
 37770 00005A57 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 37771 00005A59 75DC                    	jnz	short $MDO291
 37772                                  $MIF290:
 37773                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 37774 00005A5B F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 37775                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be left aligned?
 37776 00005A5F 7518                    	jnz	short $MIF299			;;AN000;; Yes
 37777 00005A61 08F6                    	or	dh,dh				;;AN000;; Do we need pad chars added?
 37778 00005A63 7414                    	jz	short $MIF300
 37779                                  $MDO301:
 37780                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 37781 00005A65 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 37782                                  	;mov	al,[si+0Ah]
 37783                                  
 37784                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 37785 00005A68 8887[D998]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 37786                                  	; 03/05/2023
 37787                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 37788                                  
 37789 00005A6C 43                      	inc	bx				;;AN000;;
 37790 00005A6D 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ  ; 64		;;AN000;; Is buffer full?
 37791 00005A70 7503                    	jne	short $MIF302			;;AN000;; No
 37792                                  						;;AN000;; Yes
 37793 00005A72 E84AFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 37794                                  $MIF302:
 37795 00005A75 FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 37796 00005A77 75EC                    	jnz	short $MDO301			;;AN000;;
 37797                                  $MIF300:
 37798                                  $MIF299:
 37799                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 37800 00005A79 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 37801                                  	;test	byte [si+7],0Fh			;;AN000;;
 37802 00005A7D 7506                    	jnz	short $MIF307
 37803                                  	
 37804                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 37805 00005A7F F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 37806                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?
 37807                                  	; 11/04/2023
 37808                                  	;jz	short $MIF307			;;AN000;;
 37809                                  	;jmp	short $MEN307			;;AN000;;
 37810 00005A83 750C                    	jnz	short $MEN307
 37811                                  $MIF307:
 37812 00005A85 08D2                    	or	dl,dl				;;AN000;;
 37813 00005A87 7408                    	jz	short $MIF309			;;AN000;;
 37814                                  $MDO310:
 37815 00005A89 8F06[D398]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 37816                                  	;pop	word [$M_RT+70]			;;AN000;; Clean Up stack using spare variable
 37817 00005A8D FECA                    	dec	dl				;;AN000;; Are we done?
 37818 00005A8F 75F8                    	jnz	short $MDO310
 37819                                  $MIF309:
 37820                                  $MEN307:
 37821 00005A91 E82BFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer for the final time
 37822 00005A94 55                      	push	bp				;;AN000;; Restore the return address
 37823 00005A95 C3                      	retn					;;AN000;;
 37824                                  
 37825                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37826                                  ;;
 37827                                  ;;	PROC NAME: $M_CHAR_REPLACE
 37828                                  ;;
 37829                                  ;;	FUNCTION: Will prepare a single char or ASCIIZ string for replace
 37830                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 37831                                  ;;		ES:DI contains the VALUE from SUBLIST
 37832                                  ;;	OUTPUTS: CX contains number of characters on stack
 37833                                  ;;		 Top of stack  --> Last character
 37834                                  ;;					. . .
 37835                                  ;;		 Bot of stack  --> First character
 37836                                  ;;
 37837                                  ;;	OTHER REGS Revised: AX
 37838                                  ;;
 37839                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37840                                  
 37841                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37842                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37843                                  $M_CHAR_REPLACE:
 37844 00005A96 5D                      	pop	bp				;;AN000;; Save return address
 37845                                  	;test	$M_SL.$M_S_FLAG,not Char_Field_Char and $M_SIZE_MASK
 37846 00005A97 F6440730                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],30h
 37847                                  	;test	byte [si+7],30h			;;AN000;; Was Character specified?
 37848 00005A9B 7512                    	jnz	short $MIF317			;;AN000;; No
 37849 00005A9D 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 37850 00005AA0 50                      	push	ax				;;AN000;; Put it on the stack
 37851 00005AA1 41                      	inc	cx				;;AN000;; Increase the count
 37852 00005AA2 E88BFD                  	call	$M_IS_IT_DBCS			;;AN000;; Is this the first byte of a DB character
 37853 00005AA5 7306                    	jnc	short $MIF318
 37854 00005AA7 268A4501                	mov	al,[es:di+1]			;;AN000;; Get the next character
 37855 00005AAB 50                      	push	ax				;;AN000;; Put it on the stack
 37856 00005AAC F8                      	clc					;;AN000;; Clear the carry
 37857                                  $MIF318:
 37858 00005AAD EB0D                    	jmp	short $MEN317
 37859                                  $MIF317:
 37860                                  $MDO321:
 37861 00005AAF 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 37862 00005AB2 08C0                    	or	al,al				;;AN000;; Is it the NULL?
 37863 00005AB4 7404                    	jz	short $MEN321			;;AN000;; Yes
 37864 00005AB6 47                      	inc	di				;;AN000;; Next character
 37865 00005AB7 41                      	inc	cx				;;AN000;; Increment the count
 37866 00005AB8 EBF5                    	jmp	short $MDO321
 37867                                  $MEN321:
 37868 00005ABA 29CF                    	sub	di,cx				;;AN000;; Set DI at the beginning of the string
 37869                                  $MEN317:
 37870 00005ABC 55                      	push	bp				;;AN000;; Restore return address
 37871 00005ABD C3                      	retn					;;AN000;;	
 37872                                  
 37873                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37874                                  ;;
 37875                                  ;;	PROC NAME: $M_BIN2ASC_REPLACE
 37876                                  ;;
 37877                                  ;;	FUNCTION: Convert a signed or unsigned binary number to an ASCII string
 37878                                  ;;		  and prepare to display
 37879                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 37880                                  ;;		ES:DI contains the VALUE from SUBLIST
 37881                                  ;;	OUTPUTS: CX contains number of characters on stack
 37882                                  ;;		 Top of stack  --> Last character
 37883                                  ;;					. . .
 37884                                  ;;		 Bot of stack  --> First character
 37885                                  ;;	OTHER REGS Revised: BX,DX,AX
 37886                                  ;;
 37887                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 37888                                  
 37889                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37890                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 37891                                  $M_BIN2ASC_REPLACE:
 37892 00005ABE 5D                      	pop	bp				;;AN000;; Save return address
 37893 00005ABF 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 37894 00005AC1 31C0                    	xor	ax,ax				;;AN000;; Prepare for get binary value (LOW)
 37895 00005AC3 C706[D798]1000          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],16 ; $M_BASE16
 37896                                  	;mov	word [$M_RT+74],16  ; $M_BASE16	;;AN000;; Set default divisor
 37897                                  
 37898 00005AC9 31DB                    	xor	bx,bx				;;AN000;; Use BX as the NEG flag (if applicable)
 37899                                  
 37900                                  	;test	$M_SL.$M_S_FLAG,not $M_BYTE and $M_SIZE_MASK
 37901 00005ACB F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 37902                                  	;test	byte [si+7],20h			;;AN000;; Was BYTE specified?		
 37903 00005ACF 7511                    	jnz	short $MIF325			;;AN000;; No
 37904                                  	
 37905 00005AD1 268A05                  	mov	al,[es:di]			;;AN000;; Setup byte in AL
 37906                                  
 37907                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 37908 00005AD4 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 37909                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?
 37910 00005AD8 753D                    	jnz	short $MIF326			;;AN000;; No
 37911                                  			 
 37912 00005ADA A880                    	test	al,10000000b ; 80h		;;AN000;; Is this number negative?
 37913 00005ADC 7433                    	jz	short $MIF327			;;AN000;; No
 37914                                  						;;AN000;; Yes				
 37915                                  	; 12/04/2023
 37916                                  	;inc	bx				;;AN000;; Remember that it was negative
 37917 00005ADE 247F                    	and	al,01111111b			;;AN000;; Make it positive
 37918                                  
 37919                                  	; 12/04/2023 - Retrop DOS v4.0 COMMAND.COM
 37920                                  	;jmp	short $MIF327
 37921 00005AE0 EB2E                    	jmp	short $MIF350 ; inc bx
 37922                                  
 37923                                  ; 12/04/2023
 37924                                  %if 0
 37925                                  
 37926                                  $MIF327:
 37927                                  $MIF335:	; 12/04/2023
 37928                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37929                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37930                                  $MIF326:
 37931                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 37932                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 37933                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 37934                                  	jnz	short $MIF330			;;AN000;; No
 37935                                  						;;AN000;; Yes
 37936                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37937                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37938                                  $MIF330:
 37939                                  	jmp	short $MEN325
 37940                                  
 37941                                  %endif
 37942                                  
 37943                                  $MIF325:
 37944                                  	;test	$M_SL.$M_S_FLAG,not $M_WORD and $M_SIZE_MASK
 37945 00005AE2 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 37946                                  	;test	byte [si+7],10h			;;AN000;; Was WORD specified?
 37947 00005AE6 7513                    	jnz	short $MIF333			;;AN000;; No
 37948                                  						;;AN000;; Yes
 37949 00005AE8 268B05                  	mov	ax,[es:di]			;;AN000;; Setup byte in AL
 37950                                  
 37951                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 37952 00005AEB F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 37953                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 37954 00005AEF 7526                    	jnz	short $MIF334			;;AN000;; No
 37955                                  						;;AN000;; Yes
 37956 00005AF1 F6C480                  	test	ah,10000000b ; 80h		;;AN000;; Is this number negative?
 37957 00005AF4 741B                    	jz	short $MIF335			;;AN000;; No
 37958                                  						;;AN000;; Yes
 37959                                  	; 12/04/2023
 37960                                  	;inc	bx				;;AN000;; Remember that it was negative
 37961 00005AF6 80E47F                  	and	ah,01111111b			;;AN000;; Make it positive
 37962                                  
 37963                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 37964                                  	;jmp	short $MIF335
 37965 00005AF9 EB15                    	jmp	short $MIF350 ; inc bx
 37966                                  
 37967                                  ; 12/04/2023
 37968                                  %if 0
 37969                                  
 37970                                  $MIF335:
 37971                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37972                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37973                                  $MIF334:
 37974                                  	test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK ;;AN000;; Was Signed binary specified?
 37975                                  	jnz	short $MIF338
 37976                                  
 37977                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 37978                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 37979                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 37980                                  	jnz	short $MIF338			;;AN000;; No
 37981                                  						;;AN000;; Yes
 37982                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 37983                                  	;mov	word [$M_RT+74],10		;;AN000;;
 37984                                  $MIF338:
 37985                                  	jmp	short $MEN333			;;AN000;;
 37986                                  %endif
 37987                                  
 37988                                  $MIF333:
 37989 00005AFB 268B05                  	mov	ax,[es:di]			;;AN000;; Setup Double word in DX:AX
 37990 00005AFE 268B5502                	mov	dx,[es:di+2]			;;AN000;;
 37991                                  
 37992                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 37993 00005B02 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 37994                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 37995 00005B06 750F                    	jnz	short $MIF341			;;AN000;; No
 37996                                  						;;AN000;; Yes
 37997 00005B08 F6C680                  	test	dh,10000000b ; 80h		;;AN000;; Is this number negative?
 37998 00005B0B 7404                    	jz	short $MIF342			;;AN000;; No
 37999                                  						;;AN000;; Yes
 38000                                  	; 12/04/2023
 38001                                  	;inc	bx				;;AN000;; Remember that it was negative
 38002 00005B0D 80E67F                  	and	dh,01111111b			;;AN000;; Make it positive
 38003                                  	
 38004                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 38005                                  $MIF350:
 38006 00005B10 43                      	inc	bx
 38007                                  $MIF342:
 38008                                  	; 12/04/2023
 38009                                  $MIF327:
 38010                                  $MIF335:
 38011 00005B11 C706[D798]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 38012                                  	;mov	word [$M_RT+74],10		;;AN000;;
 38013                                  $MIF341:
 38014                                  $MIF326:
 38015                                  	; 18/04/2023
 38016                                  $MIF334:
 38017                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 38018 00005B17 F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 38019                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 38020 00005B1B 7506                    	jnz	short $MIF345			;;AN000;; No
 38021                                  						;;AN000;; Yes
 38022 00005B1D C706[D798]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 38023                                  	;mov	word [$M_RT+74],10		;;AN000;;
 38024                                  
 38025                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38026                                  	; ****************************************
 38027                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5F64h
 38028                                  $MIF345:
 38029                                  	; *** (Disassembled MSDOS 6.22 COMMAND.COM source code.)
 38030                                  $MEN333:
 38031 00005B23 F6440740                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],40h
 38032                                  	;test	byte [si+7],40h		; MSDOS 6.22
 38033                                  				; (Custom/International flag for thousand separator)
 38034 00005B27 7428                    	jz	short $MEN325
 38035 00005B29 50                      	push	ax			; MSDOS 6.22
 38036 00005B2A 52                      	push	dx
 38037 00005B2B B438                    	mov	ah,38h	 ; International
 38038 00005B2D 30C0                    	xor	al,al
 38039 00005B2F 8D16[D998]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38040 00005B33 CD21                    	int	21h		; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 38041                                  				; get current-country info
 38042                                  				; DS:DX -> buffer for returned info
 38043 00005B35 7305                    	jnb	short $MEN341		; (use country depended thousand separator)
 38044 00005B37 C606[E098]2C            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA],','
 38045                                  $MEN341:
 38046 00005B3C 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 38047                                  	;mov	al,[si+0Ah]		; (save pad character)
 38048 00005B3F 89C7                    	mov	di,ax
 38049 00005B41 5A                      	pop	dx
 38050 00005B42 58                      	pop	ax
 38051 00005B43 C6440A2C                	mov	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','  ; $M_COMMA
 38052                                  	;mov	byte [si+0Ah],','	; (comma is needed for converting procedure)
 38053 00005B47 E80AFD                  	call	$M_CONVERT2ASC
 38054 00005B4A 89F8                    	mov	ax,di
 38055 00005B4C 88440A                  	mov	[si+$M_SUBLIST_STRUC.$M_S_PAD],al
 38056                                  	;mov	[si+0Ah],al		; (restore pad character)
 38057 00005B4F EB03                    	jmp	short $MEN345		; MSDOS 6.22
 38058                                  	; *** (end of disassembled MSDOS 6.22 COMMAND.COM source code porehion) 
 38059                                  	; ****************************************
 38060                                  ;$MIF345:
 38061                                  ;$MEN333:
 38062                                  $MEN325:
 38063 00005B51 E800FD                  	call	$M_CONVERT2ASC			;;AN000;; Convert to ASCII string
 38064                                  $MEN345: 	; 15/06/2023 - MSDOS 6.22
 38065 00005B54 09DB                    	or	bx,bx				;;AN000;; Was number negative?
 38066 00005B56 7405                    	jz	short $MIF349			;;AN000;; No
 38067                                  						;;AN000;; Yes
 38068 00005B58 31D2                    	xor	dx,dx				;;AN000;;
 38069 00005B5A B22D                    	mov	dl,'-'	; $M_NEG_SIGN		;;AN000;; Put "-" on the stack with the number
 38070 00005B5C 52                      	push	dx				;;AN000;;
 38071                                  $MIF349:
 38072 00005B5D 55                      	push	bp				;;AN000;; Restore return address
 38073 00005B5E C3                      	retn					;;AN000;; Return
 38074                                  
 38075                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38076                                  ;;
 38077                                  ;;	PROC NAME: $M_DATE_REPLACE
 38078                                  ;;
 38079                                  ;;	FUNCTION: Convert a date to a decimal ASCII string using current
 38080                                  ;;		  country format and prepare to display
 38081                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 38082                                  ;;		ES:DI points at VALUE from SUBLIST
 38083                                  ;;	OUTPUTS: CX contains number of characters on stack
 38084                                  ;;		 Top of stack  --> Last character
 38085                                  ;;					. . .
 38086                                  ;;		 Bot of stack  --> First character
 38087                                  ;;	OTHER REGS Revised: DX,AX
 38088                                  ;;
 38089                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38090                                  
 38091                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38092                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38093                                  $M_DATE_REPLACE:
 38094 00005B5F 5D                      	pop	bp				;;AN000;; Save return address
 38095                                  
 38096 00005B60 C706[D798]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 38097                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 38098                                  	
 38099 00005B66 E86700                  	call	$M_GET_DATE			;;AN000;; Set date format/separator in $M_RT
 38100                                  						;;AN000;; All O.K.?
 38101 00005B69 31D2                    	xor	dx,dx				;;AN000;; Reset DX value
 38102                                  	; 12/04/2023
 38103                                  	;xor	ax,ax				;;AN000;; Reset AX value
 38104                                  	
 38105                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0
 38106                                  	;;cmp	word [$M_RT+76],0		;;AN000;; USA Date Format
 38107                                  	;jne	short $MIF351
 38108                                  	; 12/04/2023
 38109 00005B6B A1[D998]                	mov	ax,[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 38110 00005B6E 09C0                    	or	ax,ax
 38111 00005B70 751D                    	jnz	short $MIF351
 38112                                  
 38113 00005B72 E87200                  	call	$M_YEAR				;;AN000;; Get Year
 38114 00005B75 E88100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 38115                                  
 38116 00005B78 FF36[E498]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 38117                                  	;push	word [$M_RT+87]			;;AN000;;
 38118                                  	
 38119 00005B7C 41                      	inc	cx				;;AN000;; Increment count
 38120 00005B7D 31C0                    	xor	ax,ax				;;AN000;; Reset AX value
 38121                                  
 38122 00005B7F 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 38123                                  	;mov	al,[si+5]			;;AN000;; Get Day
 38124 00005B82 E87400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 38125                                  	
 38126 00005B85 FF36[E498]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 38127                                  	;push	word [$M_RT+87]			;;AN000;;
 38128                                  
 38129 00005B89 41                      	inc	cx				;;AN000;; Increment count
 38130 00005B8A 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 38131                                  	;mov	al,[si+4]			;;AN000;; Get Month
 38132                                  	; 12/04/2023
 38133                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 38134 00005B8D EB3C                    	jmp	short $MIF354 ; **
 38135                                  $MIF351:
 38136                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],1
 38137                                  	;;cmp	word [$M_RT+76],1		;;AN000;; EUROPE Date Format
 38138                                  	;jne	short $MIF353
 38139                                  	; 12/04/2023
 38140                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 38141 00005B8F 48                      	dec	ax 
 38142 00005B90 751D                    	jnz	short $MIF352 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] <> 1
 38143                                  
 38144 00005B92 E85200                  	call	$M_YEAR				;;AN000;; Get Year
 38145 00005B95 E86100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 38146                                  
 38147 00005B98 FF36[E498]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 38148                                  	;push	word [$M_RT+87]			;;AN000;;
 38149                                  	
 38150 00005B9C 41                      	inc	cx				;;AN000;; Increment count
 38151 00005B9D 31C0                    	xor	ax,ax				;;AN000;; Reset AX
 38152                                  
 38153 00005B9F 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 38154                                  	;mov	al,[si+4]			;;AN000;; Get Month
 38155 00005BA2 E85400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 38156                                  
 38157 00005BA5 FF36[E498]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 38158                                  	;push	word [$M_RT+87]			;;AN000;;
 38159                                  
 38160 00005BA9 41                      	inc	cx				;;AN000;;
 38161                                  	      
 38162 00005BAA 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 38163                                  	;mov	al,[si+5]			;;AN000;; Get Day
 38164                                  
 38165                                  	; 12/04/2023
 38166                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 38167 00005BAD EB1C                    	jmp	short $MIF354 ; **
 38168                                  	; 12/04/2023
 38169                                  $MIF352:
 38170                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]-1 ; *
 38171 00005BAF 48                      	dec	ax
 38172                                  	;jz	short $MIF353 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] = 2
 38173                                  	;xor	ax,ax
 38174                                  	;jmp	short $MIF355
 38175                                  	; 12/04/2023
 38176 00005BB0 751C                    	jnz	short $MIF355
 38177                                  $MIF353:
 38178                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],2
 38179                                  	;;cmp	word [$M_RT+76],2		;;AN000;; JAPAN Date Format
 38180                                  	;jne	short $MIF355
 38181                                  
 38182 00005BB2 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 38183                                  	;mov	al,[si+5]			;;AN000;; Get Day
 38184 00005BB5 E84100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 38185                                  	
 38186 00005BB8 FF36[E498]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 38187                                  	;push	word [$M_RT+87]			;;AN000;;
 38188                                  
 38189 00005BBC 41                      	inc	cx				;;AN000;;
 38190                                  
 38191 00005BBD 8A4404                  	 mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 38192                                  	;mov	al,[si+4]			;;AN000;; Get Month
 38193 00005BC0 E83600                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 38194                                  	
 38195 00005BC3 FF36[E498]              	 push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 38196                                  	;push	word [$M_RT+87]			;;AN000;;
 38197                                  	
 38198 00005BC7 41                      	inc	cx				;;AN000;;
 38199                                  
 38200 00005BC8 E81C00                  	call	$M_YEAR				;;AN000;; Get Year
 38201                                  	; 12/04/2023
 38202                                  $MIF354:
 38203 00005BCB E82B00                  	call	$M_CONVERTDATE	; **		;;AN000;; Convert it to an ASCII string
 38204                                  $MIF355:
 38205 00005BCE 55                      	push	bp				;;AN000;; Restore return address
 38206 00005BCF C3                      	retn					;;AN000;; Return
 38207                                  
 38208                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38209                                  ;;
 38210                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38211                                  
 38212                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38213                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38214                                  $M_GET_DATE:
 38215                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 38216                                  	;mov	al,0 				;;AN000;; Get current country info
 38217                                  	; 12/04/2023
 38218 00005BD0 B80038                  	mov	ax,3800h
 38219                                  	;
 38220 00005BD3 8D16[D998]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38221                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 38222 00005BD7 CD21                    	int	21h				;;AN000;;
 38223 00005BD9 730B                    	jnc	short $MIF357
 38224                                  	;
 38225 00005BDB C706[D998]0000          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0 ; $M_DEF_DATE_FORM
 38226                                  	;mov	word [$M_RT+76+0],0		;;AN000;; Set default date format (BH)
 38227 00005BE1 C606[E498]2D            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-' ; $M_DEF_DATE_SEP
 38228                                  	;mov	byte [$M_RT+87],'-'		;;AN000;; Set default date separator (BL)
 38229                                  $MIF357:
 38230 00005BE6 C3                      	retn					;;AN000;;
 38231                                  
 38232                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38233                                  ;;
 38234                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38235                                  
 38236                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38237                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38238                                  $M_YEAR:
 38239 00005BE7 8B4402                  	mov	ax,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 38240                                  	;mov	ax,[si+2]			;;AN000;; Get Year
 38241                                  
 38242                                  	;test	$M_SL.$M_S_FLAG,Date_MDY_4 and $M_DATE_MASK
 38243 00005BEA F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 38244                                  	;test	byte [si+7],10h			;;AN000;; Was Month/Day/Year (2 Digits) specified?
 38245 00005BEE 7508                    	jnz	short $MIF359			;;AN000;; No
 38246                                  						;;AN000;; Yes
 38247 00005BF0 83F863                  	cmp	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 38248 00005BF3 7603                    	jna	short $MIF360			;;AN000;;
 38249 00005BF5 B86300                  	mov	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 38250                                  $MIF360:
 38251                                  $MIF359:
 38252 00005BF8 C3                      	retn					;;AN000;;
 38253                                  
 38254                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38255                                  ;;
 38256                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38257                                  
 38258                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38259                                  $M_CONVERTDATE:
 38260                                  $M_CONVERTTIME: ; *!*!  ; 12/04/2023
 38261 00005BF9 8F06[D998]              	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38262                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 38263 00005BFD 880E[CF98]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 38264                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 38265 00005C01 E850FC                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 38266 00005C04 49                      	dec	cx				;;AN000;; Test if size only grew by 1
 38267 00005C05 3A0E[CF98]              	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 38268 00005C09 7505                    	jne	short $MIF363			;;AN000;; No
 38269 00005C0B B83000                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 38270 00005C0E 50                      	push	ax				;;AN000;; Save it
 38271 00005C0F 41                      	inc	cx				;;AN000;; Count it
 38272                                  $MIF363:
 38273 00005C10 41                      	inc	cx				;;AN000;; Restore CX
 38274 00005C11 FF36[D998]              	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38275                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 38276 00005C15 C3                      	retn
 38277                                  
 38278                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38279                                  ;;
 38280                                  ;;	PROC NAME: $M_TIME_REPLACE
 38281                                  ;;
 38282                                  ;;	FUNCTION: Convert a time to a decimal ASCII string
 38283                                  ;;		  and prepare to display
 38284                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 38285                                  ;;		ES:DI points at VALUE from SUBLIST
 38286                                  ;;	OUTPUTS: CX contains number of characters on stack
 38287                                  ;;		 Top of stack  --> Last character
 38288                                  ;;					. . .
 38289                                  ;;		 Bot of stack  --> First character
 38290                                  ;;	REGS USED: BP,CX,AX
 38291                                  ;;
 38292                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38293                                  
 38294                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38295                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM							     ;;
 38296                                  $M_TIME_REPLACE:
 38297 00005C16 5D                      	pop	bp				;;AN000;; Save return address
 38298                                  
 38299 00005C17 C706[D798]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 38300                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 38301                                  
 38302 00005C1D E87800                  	call	$M_GET_TIME			;;AN000;; All O.K.?
 38303                                  
 38304                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 38305 00005C20 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1
 38306                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 38307 00005C24 741A                    	jz	short $MIF365			;;AN000;; No
 38308                                  						;;AN000;; Yes
 38309 00005C26 803E[EA98]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 38310                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 38311 00005C2B 7513                    	jne	short $MIF366			;;AN000;; No
 38312                                  						;;AN000;; Yes
 38313 00005C2D 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 38314                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 38315 00005C30 3C0C                    	cmp	al,12				;;AN000;; Is hour 12 or less?
 38316 00005C32 7C04                    	jl	short $MLL367 ; jnge		;;AN000;; Yes	
 38317 00005C34 3C17                    	cmp	al,23				;;AN000;; Is hour 24 or greater?
 38318 00005C36 7E04                    	jng	short $MIF367 ; jle		;;AN000;; No
 38319                                  $MLL367:
 38320 00005C38 B061                    	mov	al,'a'	; $M_AM			;;AN000;;
 38321                                  	;push	ax				;;AN000;; Push an "a" to represent AM.
 38322                                  	;inc	cx				;;AN000;;
 38323                                  	;jmp	short $MEN367			;;AN000;;
 38324                                  	; 12/04/2023
 38325 00005C3A EB02                    	jmp	short $MEN367 ; *
 38326                                  $MIF367:
 38327 00005C3C B070                    	mov	al,'p'	; $M_PM			;;AN000;;
 38328                                  $MEN367:	; * ; 12/04/2023
 38329 00005C3E 50                      	push	ax				;;AN000;; Push an "p" to represent PM.
 38330 00005C3F 41                      	inc	cx				;;AN000;;
 38331                                  ;$MEN367:
 38332                                  $MIF366:
 38333                                  $MIF365:					;;AN000;;
 38334 00005C40 31C0                    	xor	ax,ax				;;AN000;;
 38335 00005C42 31D2                    	xor	dx,dx				;;AN000;;
 38336                                  	
 38337                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 38338 00005C44 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 38339                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 38340 00005C48 740B                    	jz	short $MIF372			;;AN000;;
 38341                                  
 38342 00005C4A 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 38343                                  	;mov	al,[si+5]			;;AN000;; Get Hundreds
 38344 00005C4D E8A9FF                  	call	$M_CONVERTTIME			;;AN000;;
 38345                                  
 38346 00005C50 FF36[E298]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]
 38347                                  	;push	word [$M_RT+85]			;;AN000;;
 38348 00005C54 41                      	inc	cx				;;AN000;;
 38349                                  $MIF372:
 38350                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 38351 00005C55 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 38352                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 38353 00005C59 7506                    	jnz	short $MLL374			;;AN000;; No
 38354                                  
 38355                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSS_Cty AND $M_SIZE_MASK
 38356 00005C5B F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 38357                                  	;test	byte [si+7],10h			;;AN000;; Was Hour/Min/Sec (12 Hour) specified?
 38358 00005C5F 740B                    	jz	short $MIF374			;;AN000;; No
 38359                                  $MLL374:
 38360 00005C61 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 38361                                  	;mov	al,[si+4]			;;AN000;; Get Seconds
 38362 00005C64 E892FF                  	call	$M_CONVERTTIME			;;AN000;;
 38363                                  
 38364 00005C67 FF36[E698]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 38365                                  	;push	word [$M_RT+89]			;;AN000;;
 38366 00005C6B 41                      	inc	cx				;;AN000;;
 38367                                  $MIF374:	;;  Do Hour/Min (12 Hour)
 38368 00005C6C 8A4403                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+1]
 38369                                  	;mov	al,[si+3]			;;AN000;; Get Minutes
 38370 00005C6F E887FF                  	call	$M_CONVERTTIME			;;AN000;;
 38371                                  
 38372 00005C72 FF36[E698]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 38373                                  	;push	word [$M_RT+89]			;;AN000;;
 38374 00005C76 41                      	inc	cx				;;AN000;;
 38375                                  
 38376 00005C77 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 38377                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 38378                                  
 38379                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 38380 00005C7A F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1 
 38381                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 38382 00005C7E 7413                    	jz	short $MIF376			;;AN000;; No
 38383                                  
 38384 00005C80 803E[EA98]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 38385                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 38386 00005C85 750C                    	jne	short $MIF377			;;AN000;; No
 38387                                  
 38388 00005C87 3C0D                    	cmp	al,13				;;AN000;; Is hour less than 12?
 38389 00005C89 7C02                    	jnge	short $MIF378 ; jl
 38390 00005C8B 2C0C                    	sub	al,12				;;AN000;; Set to a 12 hour value
 38391                                  $MIF378:
 38392                                  	;cmp	al,0				;;AN000;; Is hour less than 12?
 38393                                  	;jne	short $MIF380			;;AN000;; No
 38394                                  	; 12/04/2023
 38395 00005C8D 20C0                    	and	al,al
 38396 00005C8F 7502                    	jnz	short $MIF380	
 38397 00005C91 B00C                    	mov	al,12				;;AN000;; Set to a 12 hour value
 38398                                  $MIF380:
 38399                                  $MIF377:
 38400                                  $MIF376:
 38401 00005C93 E8BEFB                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to ASCII
 38402 00005C96 55                      	push	bp				;;AN000;; Restore return address
 38403 00005C97 C3                      	retn					;;AN000;; Return
 38404                                  
 38405                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38406                                  ;;
 38407                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38408                                  
 38409                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38410                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38411                                  $M_GET_TIME:
 38412                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 38413                                  	;mov	al,0 				;;AN000;; Get current country info
 38414                                  	; 12/04/2023
 38415 00005C98 B80038                  	mov	ax,3800h
 38416                                  	;
 38417 00005C9B 8D16[D998]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38418                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 38419 00005C9F CD21                    	int	21h				;;AN000;;
 38420 00005CA1 7310                    	jnc	short $MIF384
 38421                                  
 38422 00005CA3 C706[EA98]0100          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],1 ; $M_DEF_TIME_FORM
 38423                                  	;mov	word [$M_RT+93],1		;;AN000;; Set default time format (BH)
 38424 00005CA9 C606[E698]3A            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],':' ; $M_DEF_TIME_SEP
 38425                                  	;mov	byte [$M_RT+89],':'		;;AN000;; Set default time separator (BL)
 38426 00005CAE C606[E298]2E            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],'.' ; $M_DEF_DECI_SEP
 38427                                  	;mov	byte [$M_RT+85],'.'		;;AN000;; Set default time separator (BL)		
 38428                                  $MIF384:
 38429 00005CB3 C3                      	retn					;;AN000;;
 38430                                  
 38431                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38432                                  ;;
 38433                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38434                                  
 38435                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38436                                  
 38437                                  ; 12/04/2023 
 38438                                  ;; ($M_CONVERTTIME is same with $M_CONVERTDATE)
 38439                                  %if 0
 38440                                  $M_CONVERTTIME:
 38441                                  $M_CONVERTDATE: ; *!*!  ; 12/04/2023
 38442                                  	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38443                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 38444                                  	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 38445                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 38446                                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 38447                                  	dec	cx				;;AN000;; Test if size only grew by 1
 38448                                  	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 38449                                  	jne	short $MIF386			;;AN000;; No
 38450                                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 38451                                  	push	ax				;;AN000;; Save it
 38452                                  	inc	cx				;;AN000;; Count itount it
 38453                                  $MIF386:
 38454                                  	inc	cx				;;AN000;; Restore CX
 38455                                  	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 38456                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 38457                                  	retn
 38458                                  %endif
 38459                                  
 38460                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38461                                  ;;
 38462                                  ;;	PROC NAME: $M_WAIT_FOR_INPUT
 38463                                  ;;
 38464                                  ;;	FUNCTION:  To accept keyed input and return extended key value
 38465                                  ;;		   in AX register
 38466                                  ;;	INPUTS:    DL contains the DOS function requested for input
 38467                                  ;;	OUTPUTS:   AX contains the extended key value that was read
 38468                                  ;;	REGS USED:
 38469                                  ;;
 38470                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 38471                                  
 38472                                  	; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38473                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6123h
 38474                                  $M_WAIT_FOR_INPUT:
 38475 00005CB4 51                      	push	cx				;;AN000;; Save CX
 38476 00005CB5 52                      	push	dx				;;AN000;; Save DX
 38477 00005CB6 1E                      	push	ds				;;AN000;; Save Data segment
 38478                                  
 38479 00005CB7 80FAC0                  	cmp	dl,0C0h ; DOS_CLR_KEYB_BUF_MASK	;;AN001;; Are we to clear the keyboard buffer?
 38480 00005CBA 7608                    	jna	short $MIF388	; jbe		;;AN001;; No,
 38481                                  						;;AN001;; Yes,
 38482 00005CBC 88D0                    	mov	al,dl				;;AN001;; Mov function into AL
 38483 00005CBE 240F                    	and	al,0Fh	; LOW_NIB_MASK		;;AN001;; Mask out the C in high nibble
 38484 00005CC0 B40C                    	mov	ah,0Ch	; DOS_CLR_KEYB_BUF 	;;AN001;; Set input function
 38485 00005CC2 EB02                    	jmp	short $MEN388
 38486                                  $MIF388:
 38487 00005CC4 88D4                    	mov	ah,dl				;;AN000;; Put DOS function in AH
 38488                                  $MEN388:
 38489 00005CC6 06                      	push	es				;;AN000;; Get output buffer segment
 38490 00005CC7 1F                      	pop	ds				;;AN000;;
 38491 00005CC8 89FA                    	mov	dx,di				;;AN000;; Get output buffer offset in case needed
 38492 00005CCA CD21                    	int	21h				;;AN000;; Get keyboard input
 38493 00005CCC 1F                      	pop	ds				;;AN000;;
 38494 00005CCD 80FA0A                  	cmp	dl,0Ah	; DOS_BUF_KEYB_INP	;;AN000;;
 38495                                  	;clc					;;AN000;;
 38496 00005CD0 7412                    	je	short $MIF391
 38497 00005CD2 E85BFB                  	call	$M_IS_IT_DBCS			;;AN000;; Is this character DBCS?
 38498 00005CD5 730B                    	jnc	short $MIF392
 38499 00005CD7 88C1                    	mov	cl,al				;;AN000;; Save first character
 38500 00005CD9 88D4                    	mov	ah,dl				;;AN001;; Get back function
 38501 00005CDB CD21                    	int	21h				;;AN000;; Get keyboard input
 38502 00005CDD 88CC                    	mov	ah,cl				;;AN000;; Retreive first character  AX = xxxx
 38503 00005CDF F8                      	clc					;;AN000;; Clear carry condition
 38504 00005CE0 EB02                    	jmp	short $MEN392
 38505                                  $MIF392:
 38506 00005CE2 B400                    	mov	ah,0				;;AN000;; AX = 00xx where xx is SBCS
 38507                                  $MEN392:
 38508                                  $MIF391:
 38509                                  	;jc	short $MIF396 ; 15/06/2023
 38510 00005CE4 5A                      	pop	dx				;;AN000;;
 38511 00005CE5 59                      	pop	cx				;;AN000;;
 38512                                  	;jmp	short $MEN396
 38513 00005CE6 C3                      	retn
 38514                                  
 38515                                  	; 15/06/2023
 38516                                  ;$MIF396:
 38517                                  	;add	sp,4				;;AN000;;
 38518                                  	;stc					;;AN000;; Reset carry flag
 38519                                  ;$MEN396:
 38520                                  	;retn					;;AN000;; Return
 38521                                  
 38522                                  ; ----------------------------
 38523                                  ; MSDOS 6.0, TPRINTF.ASM, 1991
 38524                                  ; ----------------------------
 38525                                  ; include msgdcl.inc
 38526                                  ; ----------------------------
 38527                                  
 38528                                  ;============================================================================
 38529                                  ; HIGHLOAD.INC, MSDOS 6.0, 1992
 38530                                  ;============================================================================
 38531                                  ; 15/06/2023 - Retro DOS v4.2 COMMAND.COM
 38532                                  
 38533                                  ;****************************************************************************
 38534                                  ;
 38535                                  ; This file contains routines needed to parse and implement user-given
 38536                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 38537                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 38538                                  ; the variables in highvar.inc, for use by the rest of the routines.
 38539                                  ;
 38540                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 38541                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 38542                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 38543                                  ;    DH/LH module opts
 38544                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 38545                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 38546                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 38547                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 38548                                  ; available during the load.
 38549                                  ;
 38550                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 38551                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 38552                                  ; upper-memory block which was not specified by the user... in addition, if
 38553                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 38554                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 38555                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 38556                                  ; free any UMBs so allocated.
 38557                                  ;
 38558                                  ; When a device driver loads, there is the additional problem of allocating its
 38559                                  ; initial load site; this should be restricted to the first UMB specified on
 38560                                  ; the command-line.  The function FreezeUM temporarily allocates all remaining
 38561                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 38562                                  ; UMB.  Then the initial allocation may be made, and a call to UnFreeze will
 38563                                  ; return any so-allocated memory elements to FREE, for the true load.  Note
 38564                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 38565                                  ;
 38566                                  ;****************************************************************************
 38567                                  
 38568                                  ;___PROCEDURES_______________________________________________________________
 38569                                  ;
 38570                                  ;   AddrToUmb   - converts a segment address in AX to its appropriate UMB #
 38571                                  ;   BigFree     - makes ES:0 point to the largest free MCB in UMB given as AL
 38572                                  ;   FixMem      - scans the UM chain and concatenates adjacent free MCBs
 38573                                  ;   FreezeUM    - Marks FROZEN all UM elements now FREE, save those in load UMB
 38574                                  ;   GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 38575                                  ;   GetLoadUMB  - Returns the load UMB number in AL (-1 if not specified)
 38576                                  ;   GetSize     - Returns the UMB in AL's minimum size (0 if not specified)
 38577                                  ;   GetXNum     - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 38578                                  ;   HideUMBs    - links UMBs and hides upper-memory as appropriate
 38579                                  ;   InitVar     - initializes all the variables used in ParseVar and HideUMBs
 38580                                  ;   NextMCB     - moves an MCB pointer forward to the next MCB
 38581                                  ;   ParseVar    - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 38582                                  ;   PrTable     - produces a printout of the variables in highvar.inc
 38583                                  ;   StoLoadSize - Overrides the load UMB minimum size with what's in AX
 38584                                  ;   StoLoadUMB  - Overrides the load UMB number with what's in AL
 38585                                  ;   UmbHead     - returns in AX the address of the first UMB block (0x9FFF)
 38586                                  ;   UnFreeze    - Marks FROZEN elements as FREE
 38587                                  ;
 38588                                  ;___VARIABLES________________________________________________________________
 38589                                  ;
 38590                                  ;   gnradix     - After a call to GetXNum, is 16 or 10, depending on the # read
 38591                                  ;
 38592                                  ;   Internal:
 38593                                  ;___PROCEDURES_______________________________________________________________
 38594                                  ;
 38595                                  ;   convUMB     - checks after GetXNum to convert an address to a UMB number
 38596                                  ;   findUMB     - makes ES:0 point to the first MCB in UMB given as AL
 38597                                  ;   fm_link     - links UMBs not already linked in
 38598                                  ;   fm_unlink   - unlinks UMBs if fm_umb is set to 0
 38599                                  ;   frezMCB     - marks as 8+FROZEN the MCB at ES:0
 38600                                  ;   hideMCB     - marks as HIDDEN the MCB at ES:0
 38601                                  ;   hideUMB     - marks as HIDDEN all FREE elements in UMB passed as AL
 38602                                  ;   hideUMB?    - hides as appropriate the UMB in CL
 38603                                  ;   hl_unlink   - unlinks UMBs if fm_umb is set to 0; restores strategy too
 38604                                  ;   incArgc     - increments fm_argc, for use with LH command-line parsing
 38605                                  ;   isEOL       - returns with ZF set iff AL contains CR or LF, or 0
 38606                                  ;   isFreeMCB   - returns with ZF set if current MCB (ES:0) is FREE
 38607                                  ;   isFrozMCB   - returns with ZF set if current MCB (ES:0) is FROZEN
 38608                                  ;   isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 38609                                  ;   isSysMCB    - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 38610                                  ;   isTiny      - returns with ZF set if user didn't specify /S
 38611                                  ;   isWhite     - returns with ZF set iff AL contains whitespace (or "=")
 38612                                  ;   loadLow     - returns AL==0 if UMB0 == 0, else AL==1
 38613                                  ;   mul32       - multiplies the number in DX:AX by gnradix
 38614                                  ;   parseL      - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 38615                                  ;   setUMBs     - links umbs and sets allocation strategy for a load
 38616                                  ;   shrinkMCB   - breaks an MCB into two pieces, the lowest one's size==AX
 38617                                  ;   stowSiz     - marks a given UMB as having a given minimum size
 38618                                  ;   stowUMB     - marks a given UMB as used, if it hasn't been so marked before
 38619                                  ;   toDigit     - converts a character-digit to its binary counterpart
 38620                                  ;   toPara      - divides DX:AX by 16; result in AX only
 38621                                  ;   toUpper     - accepts one argument (probly a register), and upper-cases it.
 38622                                  ;   unHideMCB   - marks as FREE the MCB at ES:0
 38623                                  ;   unMarkUMB   - marks a given UMB as unused, even if previously marked used
 38624                                  ;
 38625                                  ;****************************************************************************
 38626                                  
 38627                                  ;DOS_CHECK_STRATEGY equ 5800h ; Int 21h, Func 58h, Svc 0 = check alloc strat
 38628                                  ;DOS_SET_STRATEGY   equ 5801h ; Int 21h, Func 58h, Svc 1 = set alloc strategy
 38629                                  ;DOS_CHECK_UMBLINK  equ 5802h ; Int 21h, Func 58h, Svc 2 = check link state
 38630                                  ;DOS_SET_UMBLINK    equ 5803h ; Int 21h, Func 58h, Svc 3 = set link state
 38631                                  ;DOS_GET_DOS_LISTS  equ   52h ; Int 21h, Func 52h = return list of lists
 38632                                  ;DOS_UMB_HEAD       equ   8Ch ; Offset from ES (after func52h) to get UMBHead
 38633                                  
 38634                                  ; -----------------------------------------------------------------------------
 38635                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 38636                                  ; -----------------------------------------------------------------------------
 38637                                  ; ENTRY:       None
 38638                                  ; EXIT:        Variables listed in highvar.inc are initialized
 38639                                  ; ERROR EXIT:  None
 38640                                  ; USES:        Flags, variables in highvar.inc
 38641                                  ; -----------------------------------------------------------------------------
 38642                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 38643                                  ; are largely ignored, but it is initialized nonetheless.
 38644                                  ; -----------------------------------------------------------------------------
 38645                                  
 38646                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38647                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:615Fh
 38648                                  InitVar:	; proc	near
 38649                                  	;push	ax
 38650                                  	;push	cx
 38651                                  	;push	di
 38652 00005CE7 06                      	push	es ; * es = ds
 38653 00005CE8 8E06[639C]              	mov	es,[RESSEG]		;Point ES into appropriate data segment
 38654 00005CEC 31C0                    	xor	ax,ax
 38655                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 38656                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 38657 00005CEE 26A3[3005]              	mov	[es:fInHigh],ax ; 16/06/2023
 38658 00005CF2 26A3[3205]              	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 38659 00005CF6 26C606[3405]FF          	mov	byte [es:UmbLoad],0FFh ;UNSPECIFIED
 38660                                  					;Later is the # of the 1st spec'd UMB
 38661 00005CFC 26A2[3705]              	mov	[es:fm_argc],al		;Start with zero args having been read
 38662                                  
 38663 00005D00 FC                      	cld
 38664                                  
 38665 00005D01 B91000                  	mov	cx,16 ; MAXUMB		;For each entry
 38666 00005D04 BF[5E04]                	mov	di,UmbUsed		;on the UmbUsed array,
 38667 00005D07 F3AA                    	rep	stosb			;	Store 0
 38668                                  
 38669                                  	;mov	cx,16 ; MAXUMB		;Okay... for each entry
 38670 00005D09 B110                    	mov	cl,16
 38671 00005D0B BF[6E04]                	mov	di,UmbSize		;on the UmbSize array,
 38672 00005D0E F3AB                    	rep	stosw			;	Store 0
 38673                                  
 38674 00005D10 07                      	pop	es ; * es = ds
 38675                                  	;pop	di
 38676                                  	;pop	cx
 38677                                  	;pop	ax
 38678 00005D11 C3                       	retn
 38679                                  
 38680                                  ;InitVar endp
 38681                                  
 38682                                  ; -----------------------------------------------------------------------------
 38683                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 38684                                  ; -----------------------------------------------------------------------------
 38685                                  ; ENTRY   : None
 38686                                  ; EXIT    : None
 38687                                  ; ERROR   : None
 38688                                  ; USES    : Flags, fm_umb, fm_strat
 38689                                  ; -----------------------------------------------------------------------------
 38690                                  
 38691                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38692                                  FixMem:
 38693                                  	;push	ax
 38694                                  	;push	bx
 38695                                  	;push	cx
 38696                                  	;push	dx
 38697 00005D12 06                      	push	es
 38698                                  
 38699 00005D13 E84900                  	call	fm_link			; Link in UMBs
 38700                                  
 38701 00005D16 E82302                  	call	UmbHead			; Get first upper-memory MCB address (0x9FFF)
 38702 00005D19 723F                    	jc	short fmX		; (if couldn't get it, leave now).
 38703                                  
 38704 00005D1B 8EC0                    	mov	es,ax			; It returns in AX, so move it to ES.
 38705                                  
 38706                                  ; - Walk MCB Chain ------------------------------------------------------------
 38707                                  
 38708 00005D1D 31D2                    	xor	dx,dx			; We're keeping the address of the last MCB
 38709 00005D1F 89D1                    	mov 	cx,dx			; in CX... and the last owner
 38710 00005D21 42                      	inc	dx			; in dx as we go through the loop:
 38711                                  
 38712                                  ; ------------------------------------------
 38713                                  ; FM10--DX  = last MCB's owner's PSP address
 38714                                  ;       CX  = last MCB's address (segment)
 38715                                  ; ------------------------------------------
 38716                                  
 38717                                  fm10:	
 38718 00005D22 26A00000                	mov	al,[es:arena_signature]	; if 'Z', don't repeat loop
 38719                                  	;mov	al,[es:0]
 38720 00005D26 268B1E0100              	mov	bx,[es:arena_owner]	; if not zero, do nothing
 38721                                  	;mov	bx,[es:1]
 38722 00005D2B 09D3                    	or	bx,dx			; dx was owner of previous MCB
 38723 00005D2D 7516                    	jnz	short fm30		; If not both zero, don't cat.
 38724                                  
 38725                                  ; - Coalesce memory blocks at ES:00 and CX:00 ---------------------------------
 38726                                  
 38727                                  fm20:	
 38728 00005D2F 268B1E0300              	mov	bx,[es:arena_size]	; Grab this block's Size,
 38729                                  	;mov	bx,[es:3]
 38730 00005D34 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 38731 00005D36 26A20000                	mov	[es:arena_signature], al ; & move the SECOND sig here
 38732                                  	;mov	[es:0],al
 38733                                  
 38734 00005D3A 26031E0300              	add	bx,[es:arena_size]	; Size += first MCB's size
 38735                                  	;add	bx,1			; And add one for the header
 38736 00005D3F 43                      	inc	bx
 38737 00005D40 26891E0300              	mov	[es:arena_size],bx	; Write the size
 38738                                  
 38739                                  	; ---------------------------------------------------------------------
 38740                                  fm30:	
 38741 00005D45 8CC1                    	mov	cx,es			; Put this address on the stack
 38742 00005D47 268B160100              	mov	dx,[es:arena_owner]	; And remember its owner
 38743                                  	;mov	dx,[es:1]
 38744                                  
 38745                                  	;NextMCB es,bx			; Move to the next MCB
 38746                                  	
 38747 00005D4C 8CC3                    	mov	bx,es
 38748                                  	;add	bx,[es:3]
 38749 00005D4E 26031E0300              	add	bx,[es:arena_size]
 38750 00005D53 43                      	inc	bx
 38751 00005D54 8EC3                    	mov	es,bx
 38752                                  
 38753                                  	;cmp	al,'Z'	; cmp al,5Ah
 38754 00005D56 3C5A                    	cmp	al,arena_signature_end
 38755 00005D58 75C8                    	jnz	short fm10		; If signature != 'Z', there are more.
 38756                                  fmX:	
 38757 00005D5A E81900                  	call	fm_unlink		; Unlink UMBs
 38758                                  
 38759 00005D5D 07                      	pop	es
 38760                                  	;pop	dx
 38761                                  	;pop	cx
 38762                                  	;pop	bx
 38763                                  	;pop	ax
 38764 00005D5E C3                      	retn
 38765                                  
 38766                                  ; -----------------------------------------------------------------------------
 38767                                  ; 16/06/2023
 38768                                  
 38769                                  ;INT 21h - DOS 5+ - GET OR SET UMB LINK STATE
 38770                                  ; .......................................................
 38771                                  ;     AH = 58h
 38772                                  ;     AL = subfunction
 38773                                  ;	02h get UMB link state
 38774                                  ;	    Return:
 38775                                  ;		AL = current link state
 38776                                  ;		  00h - UMBs not part of DOS memory chain
 38777                                  ;		  01h - UMBs in DOS memory chain
 38778                                  ;	03h set UMB link state
 38779                                  ;	    BX = new link state
 38780                                  ;		0000h - remove UMBs from DOS memory chain
 38781                                  ;		0001h - add UMBs to DOS memory chain
 38782                                  ;
 38783                                  ;Return: CF clear if successful
 38784                                  ;	CF set on error
 38785                                  ;	AX = error code (01h) (see #01680)
 38786                                  ; .......................................................
 38787                                  
 38788                                  ; -----------------------------------------------------------------------------
 38789                                  ;*** fm_link - links UMBs not already linked in
 38790                                  ; -----------------------------------------------------------------------------
 38791                                  ; ENTRY:    None
 38792                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 38793                                  ; ERROR:    None
 38794                                  ; USES:     AX, BX, fm_umb
 38795                                  ; -----------------------------------------------------------------------------
 38796                                  
 38797                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38798                                  fm_link:
 38799 00005D5F B80258                  	mov	ax,5802h ; DOS_CHECK_UMBLINK
 38800 00005D62 CD21                    	int	21h			; Current link-state is now in al
 38801                                  
 38802                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 38803                                  
 38804                                  	;push	es
 38805                                  	;mov	es,[RESSEG]
 38806                                  	;mov	[es:fm_umb],al
 38807                                  	;pop	es
 38808 00005D64 1E                      	push	ds
 38809 00005D65 8E1E[639C]              	mov	ds,[RESSEG]
 38810 00005D69 A2[3505]                	mov	[fm_umb],al
 38811 00005D6C 1F                      	pop	ds
 38812                                  
 38813 00005D6D B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 38814 00005D70 BB0100                  	mov	bx,1
 38815 00005D73 CD21                    	int	21h
 38816 00005D75 C3                      	retn
 38817                                  
 38818                                  ; -----------------------------------------------------------------------------
 38819                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 38820                                  ; -----------------------------------------------------------------------------
 38821                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 38822                                  ; EXIT:     None
 38823                                  ; ERROR:    None
 38824                                  ; USES:     AX, BX
 38825                                  ; -----------------------------------------------------------------------------
 38826                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38827                                  fm_unlink:
 38828 00005D76 31DB                    	xor	bx,bx
 38829                                  	
 38830                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 38831                                  
 38832 00005D78 1E                      	push    ds
 38833 00005D79 8E1E[639C]              	mov     ds,[RESSEG]
 38834 00005D7D 8A1E[3505]              	mov     bl,[fm_umb]
 38835 00005D81 1F                      	pop     ds
 38836                                  	
 38837 00005D82 B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 38838 00005D85 CD21                    	int	21h			; so just use that, and call int 21h
 38839 00005D87 C3                      	retn
 38840                                  
 38841                                  ; -----------------------------------------------------------------------------
 38842                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 38843                                  ; laid out in highvar.inc
 38844                                  ; -----------------------------------------------------------------------------
 38845                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 38846                                  ; EXIT:     ES:SI points to first character in child program name
 38847                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 38848                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 38849                                  ; -----------------------------------------------------------------------------
 38850                                  ; Error codes (in AX if carry set on return):
 38851                                  ;
 38852                                  
 38853                                  ;PV_InvArg	equ	1	; Invalid argument passed
 38854                                  ;PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 38855                                  ;PV_InvSwt	equ	3	; Unrecognized switch passed
 38856                                  
 38857                                  ;
 38858                                  ; This routine exects ES:SI to point to a string much like the following:
 38859                                  ;    "/S/L:1,200;2 module options"
 38860                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 38861                                  ; required, though that's what this routine is supposed to parse.
 38862                                  ;
 38863                                  
 38864                                  ;optS		equ	'S'	; /S
 38865                                  ;optL		equ	'L'	; /L:...
 38866                                  
 38867                                  ;
 38868                                  ; -----------------------------------------------------------------------------
 38869                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 38870                                  ; a command-line for spawning a child process. For a typical LH command, say,
 38871                                  ;     lh /l:1,1000;2 print/d:lpt2
 38872                                  ; the arguments would look like (one per line):
 38873                                  ;     lh
 38874                                  ;     /l
 38875                                  ;     1
 38876                                  ;     1000
 38877                                  ;     2
 38878                                  ;     print
 38879                                  ;     /d
 38880                                  ;     :lpt2
 38881                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 38882                                  ; arg was the filename. So, inside this routine, we keep a running counter
 38883                                  ; of the number of arguments LH will need to skip in order to get to the
 38884                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 38885                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 38886                                  ; for:
 38887                                  ;    Each /L
 38888                                  ;    Each /S (there should be only one)
 38889                                  ;    Each UMB number (they follow ":" or ";")
 38890                                  ;    Each UMB size   (they follow ",")
 38891                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 38892                                  ; "print". Note that InitVar initializes fm_argc to zero.
 38893                                  ; -----------------------------------------------------------------------------
 38894                                  
 38895                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38896                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6216h
 38897                                  ParseVar:	; proc	near
 38898                                  	;push	di
 38899                                  	;push	ds ; *
 38900                                  	;push	es
 38901                                  	;
 38902                                  	; 16/06/2023
 38903                                  	; es = ds (from 'ParseLhCmd')
 38904                                  	;push	es		; Make DS:SI point to it, as well as ES:SI
 38905                                  	;pop	ds		; (regardless if we're in devhigh or loadhigh)
 38906                                  	
 38907 00005D88 FC                      	cld
 38908                                  
 38909                                  ; ------------------------------------------------
 38910                                  ; PV10--ES:SI = any whitespace on the command-line
 38911                                  ; ------------------------------------------------
 38912                                  
 38913                                  pv10:	
 38914 00005D89 AC                      	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 38915 00005D8A E8A800                  	call	isWhite
 38916 00005D8D 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 38917 00005D8F 3C2F                    	cmp	al,'/' ; SWTCH
 38918 00005D91 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 38919                                  
 38920 00005D93 4E                      	dec	si		; Backup--it's now "odule options", and we need
 38921 00005D94 F8                      	clc			; that "m" we just read (or whatever it is).
 38922 00005D95 EB2C                    	jmp	short pvX	; Then return with carry clear == we're done.
 38923                                  pv20:
 38924 00005D97 AC                      	lodsb			; Just read 'S' or 'L', hopefully
 38925                                  
 38926                                  	;toUpper al		; So we make it upper-case, and...
 38927 00005D98 24DF                    	and	al,0DFh
 38928                                  
 38929 00005D9A 3C53                    	cmp	al,'S' ; optS	; just read 'S'?
 38930 00005D9C 7510                    	jne	short pv30
 38931                                  
 38932 00005D9E E87E00                  	call	incArgc		; If it's /S, it's another arg for LH to skip.
 38933                                  
 38934                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 38935                                  
 38936                                  	;push	es
 38937                                  	;mov	es,[RESSEG]
 38938                                  	;mov	byte [es:fUmbTiny],1
 38939                                  	;pop	es
 38940 00005DA1 1E                      	push	ds
 38941 00005DA2 8E1E[639C]              	mov	ds,[RESSEG]
 38942 00005DA6 C606[3105]01            	mov	byte [fUmbTiny],1
 38943 00005DAB 1F                      	pop	ds
 38944                                  
 38945 00005DAC EBDB                    	jmp	short pv10	; possibly even "/L...".
 38946                                  pv30:	
 38947 00005DAE 3C4C                    	cmp	al,'L' ; optL	; If it's not 'L' either, then it's a bad
 38948 00005DB0 750B                    	jne	short pvE1	; switch!
 38949                                  
 38950 00005DB2 E86A00                  	call	incArgc		; If it's /L, it's another arg for LH to skip.
 38951                                  
 38952 00005DB5 E80C00                  	call	parseL
 38953 00005DB8 73CF                    	jnc	short pv10	; If no carry, go back and look for more
 38954                                  
 38955 00005DBA 4E                      	dec	si		; Else, back up and exit.
 38956 00005DBB EB03                    	jmp	short pvErr	; AX has already been set by parseL
 38957                                  pvE1:	
 38958 00005DBD B80300                  	mov	ax,3 ; PV_InvSwt
 38959                                  				; Unrecognized switch passed
 38960                                  pvErr:
 38961 00005DC0 4E                      	dec	si
 38962 00005DC1 4E                      	dec	si
 38963 00005DC2 F9                      	stc
 38964                                  pvX:	
 38965                                  	;pop	es
 38966                                  	;pop	ds ; *
 38967                                  	;pop	di
 38968 00005DC3 C3                      	retn
 38969                                  
 38970                                  ;ParseVar endp
 38971                                  
 38972                                  ; -----------------------------------------------------------------------------
 38973                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 38974                                  ; -----------------------------------------------------------------------------
 38975                                  ; ENTRY:    ES:SI points to colon
 38976                                  ; EXIT:     ES:SI points to first character not parsed
 38977                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 38978                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 38979                                  ; -----------------------------------------------------------------------------
 38980                                  ; If the string here is terminated with anything other than whitespace or a
 38981                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 38982                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 38983                                  ; makes sure the app /L: is reported as being the culprit.
 38984                                  ; -----------------------------------------------------------------------------
 38985                                  
 38986                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 38987                                  parseL:
 38988 00005DC4 AC                      	lodsb
 38989 00005DC5 3C3A                    	cmp	al,':'		; Make sure they did /L:
 38990 00005DC7 754A                    	jne	short plE1	; If they didn't, return with carry set.
 38991                                  
 38992                                  ; ------------------------------------------
 38993                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 38994                                  ; ------------------------------------------
 38995                                  
 38996                                  pl10:
 38997 00005DC9 E8FD00                  	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 38998 00005DCC 724B                    	jc	short plE2	; And error if it's a bad number.
 38999 00005DCE E8C801                  	call	convUMB		; Convert any address to a UMB number
 39000                                  
 39001 00005DD1 88C1                    	mov	cl,al	; !*	; Remember the UMB number
 39002 00005DD3 E88300                  	call	stowUMB		; Mark this UMB # as used;
 39003 00005DD6 7241                    	jc	short plE2	; If it was already marked, it'll error
 39004                                  
 39005 00005DD8 E84400                  	call	incArgc		; Each UMB number is another arg for LH to skip
 39006                                  
 39007 00005DDB AC                      	lodsb
 39008 00005DDC 3C3B                    	cmp	al,';'		; Did "umb;" ?
 39009 00005DDE 74E9                    	je	short pl10	; Yep: go back and get another UMB.
 39010                                  
 39011 00005DE0 E85200                  	call	isWhite		; Did "umb " ?
 39012 00005DE3 7439                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 39013                                  
 39014 00005DE5 E84200                  	call	isEOL		; Did "umb" ?
 39015 00005DE8 7433                    	jz	short plSwX	; If so, backup and exit like everything's ok
 39016                                  
 39017 00005DEA 3C2F                    	cmp	al,'/' ; SWTCH	; Did "umb/" ? (as in, "/L:1,100;2/S")
 39018 00005DEC 742F                    	je	short plSwX	; If so, back up ES:SI one character and return
 39019                                  
 39020 00005DEE 3C2C                    	cmp	al,','		; Did "umb," ?
 39021 00005DF0 7521                    	jne	short plE1	; Just what the heck DID they do? Return error.
 39022                                  
 39023                                  ; --- Read a size -------------------------------------------------------------
 39024                                  
 39025 00005DF2 E8D400                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 39026 00005DF5 721C                    	jc	short plE1	; And error if it's a bad size.
 39027                                  
 39028 00005DF7 E83401                  	call	toPara		; Convert from bytes to paragraphs
 39029                                  
 39030 00005DFA E88600                  	call	stowSiz		; CL still has the UMB number for this routine
 39031                                  
 39032 00005DFD E81F00                  	call	incArgc		; Each UMB size is another arg for LH to skip
 39033                                  
 39034 00005E00 AC                      	lodsb
 39035 00005E01 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 39036 00005E03 74C4                    	je	short pl10		;
 39037                                  
 39038 00005E05 E82D00                  	call	isWhite		; Did it end with whitespace?
 39039 00005E08 7414                    	jz	short plX	; If so, we're done here--go back.
 39040                                  
 39041 00005E0A E81D00                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 39042 00005E0D 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 39043                                  
 39044 00005E0F 3C2F                    	cmp	al,'/' ; SWTCH	; Did they do "umb,size/" ?
 39045 00005E11 740A                    	je	short plSwX	; If so, again, we're done here.
 39046                                  plE1:	
 39047 00005E13 B80100                  	mov	ax,1 ; PV_InvArg
 39048                                  				; If not, we don't know WHAT they did...
 39049 00005E16 4E                      	dec	si
 39050 00005E17 F9                      	stc
 39051 00005E18 C3                      	retn
 39052                                  plE2:
 39053                                  	; cf = 1 
 39054 00005E19 B80200                  	mov	ax,2 ; PV_BadUMB
 39055                                  				; In this case, they've specified a UMB twice
 39056                                  	;stc
 39057 00005E1C C3                      	retn
 39058                                  plSwX:
 39059 00005E1D 4E                      	dec	si		; If we hit a '/' character, back up one char
 39060                                  				; so the whitespace checker will see it too.
 39061                                  plX:
 39062                                  	; cf = 0
 39063                                  	;clc			; Then just return with carry clear, so
 39064 00005E1E C3                      	retn			; ParseVar will go about its business.
 39065                                  
 39066                                  ; -----------------------------------------------------------------------------
 39067                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 39068                                  ; -----------------------------------------------------------------------------
 39069                                  ; ENTRY:    None
 39070                                  ; EXIT:     None
 39071                                  ; ERROR:    None
 39072                                  ; USES:     fm_argc, flags
 39073                                  ; -----------------------------------------------------------------------------
 39074                                  
 39075                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39076                                  incArgc:
 39077                                  	;push	ax
 39078                                  
 39079                                  	;;getdata al,fm_argc	; Obtain previous value of fm_argc,
 39080                                  	;
 39081                                  	;push	ds		; getdata (macro)
 39082                                  	;			; getdata al, fm_argc
 39083                                  	;mov	ds,[RESSEG]
 39084                                  	;mov	al,[fm_argc]	; Obtain previous value of fm_argc,
 39085                                  	;pop	ds
 39086                                  	;
 39087                                  	;inc	al		; Increment it,
 39088                                  	;
 39089                                  	;;putdata fm_argc,al	; And store it right back.
 39090                                  	;
 39091                                  	;push	es		; putdata (macro)
 39092                                  	;			; putdata fm_argc, al
 39093                                  	;mov	es,[RESSEG]
 39094                                  	;mov	[es:fm_argc],al	; and store it right back.
 39095                                  	;pop	es
 39096                                  
 39097                                  	; 16/06/2023
 39098 00005E1F 1E                      	push	ds
 39099 00005E20 8E1E[639C]              	mov	ds,[RESSEG]
 39100 00005E24 FE06[3705]              	inc	byte [fm_argc]	; increment fm_argc
 39101 00005E28 1F                      	pop	ds
 39102                                  
 39103                                  	;pop	ax
 39104 00005E29 C3                      	retn
 39105                                  
 39106                                  ; -----------------------------------------------------------------------------
 39107                                  ;*** isEOL - returns with ZF set iff AL contains CR or LF, or 0
 39108                                  ; -----------------------------------------------------------------------------
 39109                                  ; ENTRY:    AL contains character to test
 39110                                  ; EXIT:     ZF set if AL contains CR or LF, or 0
 39111                                  ; ERROR:    None
 39112                                  ; USES:     ZF
 39113                                  ; -----------------------------------------------------------------------------
 39114                                  
 39115                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39116                                  isEOL:
 39117                                  	;cmp	al,0		; Null-terminator
 39118 00005E2A 20C0                    	and	al,al
 39119 00005E2C 7406                    	jz	short ieX
 39120 00005E2E 3C0D                    	cmp	al,0Dh ; CR	; Carriage Return
 39121 00005E30 7402                    	je	short ieX
 39122 00005E32 3C0A                    	cmp	al,0Ah ; LF	; LineFeed
 39123                                  ieX:
 39124 00005E34 C3                      	retn
 39125                                  
 39126                                  
 39127                                  ; -----------------------------------------------------------------------------
 39128                                  ;*** isWhite - returns with ZF set iff AL contains whitespace (or "=")
 39129                                  ; -----------------------------------------------------------------------------
 39130                                  ; ENTRY:    AL contains character to test
 39131                                  ; EXIT:     ZF set if AL contains space, tab, or equals
 39132                                  ; ERROR:    None
 39133                                  ; USES:     ZF
 39134                                  ; -----------------------------------------------------------------------------
 39135                                  
 39136                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39137                                  isWhite:
 39138 00005E35 3C20                    	cmp	al,' '		; Space
 39139 00005E37 7406                    	je	short iwX
 39140 00005E39 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 39141 00005E3B 7402                    	je	short iwX
 39142 00005E3D 3C09                    	cmp	al,09h ; TAB	; Tab
 39143                                  iwX:
 39144 00005E3F C3                      	retn
 39145                                  
 39146                                  ; -----------------------------------------------------------------------------
 39147                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 39148                                  ; -----------------------------------------------------------------------------
 39149                                  ; ENTRY:    AL contains UMB number
 39150                                  ; EXIT:     None
 39151                                  ; ERROR:    None
 39152                                  ; USES:     Flags, variables in highvar.inc
 39153                                  ; -----------------------------------------------------------------------------
 39154                                  
 39155                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39156                                  unMarkUMB:
 39157                                  	;;pushreg <ax,bx,di,es>
 39158                                  	;push	ax ; ***
 39159                                  	
 39160                                  	;push	bx ; **
 39161                                  	
 39162                                  	;push	di
 39163                                  	;push	es
 39164 00005E40 1E                      	push	ds ; *	
 39165                                  
 39166                                  	;;dataseg es
 39167                                  	;mov	es,[RESSEG]
 39168                                  
 39169 00005E41 8E1E[639C]              	mov	ds,[RESSEG] ; *
 39170                                  	
 39171                                  	;xor	ah,ah ; 0
 39172                                  	;mov	bx,ax
 39173                                  	;mov	byte [es:bx+UmbUsed],0
 39174                                  	;mov	[bx+UmbUsed],ah ; marks the UMB as unused
 39175 00005E45 88C3                    	mov	bl,al
 39176 00005E47 30FF                    	xor	bh,bh ; 0	
 39177 00005E49 88BF[5E04]              	mov	[bx+UmbUsed],bh ; 0 ; **
 39178                                  
 39179                                  	;cmp	[es:UmbLoad],al
 39180                                  	;jnz	short umu10
 39181 00005E4D 3806[3405]              	cmp	[UmbLoad],al
 39182 00005E51 7504                    	jne	short umu10
 39183                                  
 39184                                  	;mov	byte [es:UmbLoad],0
 39185                                  	;mov	[UmbLoad],ah	; If unmarked the load UMB, load into convent.
 39186 00005E53 883E[3405]              	mov	[UmbLoad],bh ; 0 ; **
 39187                                  umu10:	
 39188 00005E57 1F                      	pop	ds ; *
 39189                                  	;;popreg <es,di,bx,ax>
 39190                                  	;pop	es
 39191                                  	;pop	di
 39192                                  	
 39193                                  	;pop	bx ; **
 39194                                  	
 39195                                  	;pop	ax ; ***
 39196                                  
 39197                                  	;;normseg es
 39198                                  	
 39199 00005E58 C3                      	retn
 39200                                  
 39201                                  ; -----------------------------------------------------------------------------
 39202                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 39203                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 39204                                  ; listed in the /L:... chain.  If it's the first one specified, it sets UmbLoad
 39205                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 39206                                  ; -----------------------------------------------------------------------------
 39207                                  ; ENTRY:    AL contains UMB number, as specified by the user
 39208                                  ; EXIT:     None
 39209                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 39210                                  ; USES:     AX, Flags, variables in highvar.inc
 39211                                  ; -----------------------------------------------------------------------------
 39212                                  
 39213                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39214                                  stowUMB:
 39215 00005E59 3C10                    	cmp	al,16 ; MAXUMB
 39216 00005E5B 7202                    	jb	short su10
 39217 00005E5D F9                      	stc
 39218 00005E5E C3                      	retn			; Ooops-- UMB>=MAXUMB
 39219                                  su10:
 39220                                  	;pushreg <bx,di,si,ds,es>
 39221                                  	;dataseg es		; Point ES into appropriate data segment
 39222                                  	;dataseg ds		; Point DS into appropriate data segment
 39223                                  
 39224                                  	;push	bx ; **
 39225                                  	
 39226                                  	;push	di
 39227                                  	;push	si
 39228                                  
 39229 00005E5F 1E                      	push	ds ; *
 39230                                  
 39231                                  	;push	es
 39232                                  	;mov	es,[RESSEG]
 39233 00005E60 8E1E[639C]              	mov	ds,[RESSEG]
 39234                                  
 39235 00005E64 803E[3405]FF            	cmp	byte [UmbLoad],0FFh ; UNSPECIFIED
 39236                                  				; If this, we haven't been here before
 39237 00005E69 7503                    	jne	short su20
 39238 00005E6B A2[3405]                	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 39239                                  su20:	
 39240 00005E6E 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 39241 00005E70 740F                    	jz	short su30	; that we should do here.
 39242                                  
 39243                                  	;mov	bl,al
 39244                                  	;xor	bh,bh
 39245                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 39246 00005E72 30E4                    	xor	ah,ah
 39247 00005E74 89C3                    	mov	bx,ax
 39248 00005E76 B001                    	mov	al,1
 39249                                  
 39250                                  	;xchg	[es:bx+UmbUsed],al
 39251 00005E78 8687[5E04]              	xchg	[bx+UmbUsed],al
 39252                                  
 39253 00005E7C 08C0                    	or	al,al		; If it was already 1, then al==1... and that
 39254 00005E7E 7401                    	jz	short su30	; means an error.
 39255                                  
 39256 00005E80 F9                      	stc			; OOOPS! This one's been used before. :(
 39257                                  su30:	
 39258                                  	;popreg	<es,ds,si,di,bx>
 39259                                  	;normseg ds
 39260                                  	;normseg es
 39261                                  	;retn
 39262                                  
 39263                                  	;pop	es
 39264                                  	
 39265 00005E81 1F                      	pop	ds ; *
 39266                                  	
 39267                                  	;pop	si
 39268                                  	;pop	di
 39269                                  	
 39270                                  	;pop	bx ; **
 39271                                  
 39272 00005E82 C3                      	retn
 39273                                  
 39274                                  ; -----------------------------------------------------------------------------
 39275                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 39276                                  ; -----------------------------------------------------------------------------
 39277                                  ; ENTRY:    CL contains UMB number, AX contains size
 39278                                  ; EXIT:     None
 39279                                  ; ERROR:    None
 39280                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 39281                                  ; -----------------------------------------------------------------------------
 39282                                  	
 39283                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39284                                  stowSiz:
 39285                                  	;pushreg <bx,di,es>
 39286                                  	;dataseg es		; Point ES into appropriate data seg
 39287                                  
 39288                                  	;push	bx ; **
 39289                                  	
 39290                                  	;push	di
 39291                                  	;push	es
 39292                                  	;mov	es,[RESSEG]
 39293 00005E83 1E                      	push	ds ; *
 39294 00005E84 8E1E[639C]              	mov	ds,[RESSEG]
 39295                                  
 39296 00005E88 88CB                    	mov	bl,cl		; Now bl==UMB number, AX==size
 39297 00005E8A B700                    	mov	bh,0		;     bx==UMB number, AX==size
 39298 00005E8C D0E3                    	shl	bl,1		;     bx==offset into array, AX=size
 39299                                  	;mov	[es:bx+UmbSize],ax
 39300 00005E8E 8987[6E04]              	mov	[bx+UmbSize],ax	; Store the size
 39301                                  
 39302 00005E92 1F                      	pop	ds ; *
 39303                                  
 39304                                  	;popreg	<es,di,bx>
 39305                                  	;normseg es		; Return ES to where it was
 39306                                  
 39307                                  	;pop	es
 39308                                  	;pop	di
 39309                                  	
 39310                                  	;pop	bx ; **
 39311                                  
 39312 00005E93 C3                      	retn
 39313                                  
 39314                                  ; -----------------------------------------------------------------------------
 39315                                  ;*** toDigit - converts a character-digit to its binary counterpart
 39316                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 39317                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).  A-F
 39318                                  ; are considered valid iff gnradix is 16.
 39319                                  ; -----------------------------------------------------------------------------
 39320                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 39321                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 39322                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 39323                                  ; USES:     CL, Flags
 39324                                  ; -----------------------------------------------------------------------------
 39325                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 39326                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 39327                                  ; will be 10 or 16.
 39328                                  ; -----------------------------------------------------------------------------
 39329                                  
 39330                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39331                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6358h
 39332                                  gnradix:
 39333 00005E94 0000                    	dw	0		; Must be a word--16x16 multiplication
 39334                                  
 39335                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39336                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:635Ah
 39337                                  toDigit:
 39338                                  	;cmp	word [gnradix],16
 39339 00005E96 803E[945E]10            	cmp	byte [gnradix],16
 39340 00005E9B 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 39341                                  
 39342 00005E9D 80F961                  	cmp	cl,'a'
 39343 00005EA0 7209                    	jb	short td10
 39344 00005EA2 80F966                  	cmp	cl,'f'
 39345 00005EA5 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 39346 00005EA7 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 39347                                  ;	clc			; <- CLC is implicit from last SUB
 39348 00005EAA C3                      	retn
 39349                                  td10:
 39350 00005EAB 80F941                  	cmp	cl,'A'
 39351 00005EAE 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 39352 00005EB0 80F946                  	cmp	cl,'F'
 39353 00005EB3 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 39354 00005EB5 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 39355                                  ;	clc			; <- CLC is implicit from last SUB
 39356                                  tdErr:
 39357 00005EB8 C3                      	retn
 39358                                  td20:
 39359 00005EB9 80F930                  	cmp	cl,'0'		; If less than zero,
 39360                                  	;jb	short tdE	; Done.
 39361 00005EBC 72FA                    	jb	short tdErr ; cf = 1
 39362 00005EBE 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 39363 00005EC1 7704                    	ja	short tdE	; Done.
 39364 00005EC3 80E930                  	sub	cl,'0'	  ; 30h	; Okay--make '0'==0 and return.
 39365                                  ;	clc			; <- CLC is implicit from last SUB
 39366 00005EC6 C3                      	retn
 39367                                  tdE:
 39368 00005EC7 F9                      	stc
 39369 00005EC8 C3                      	retn
 39370                                  
 39371                                  ; -----------------------------------------------------------------------------
 39372                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 39373                                  ; -----------------------------------------------------------------------------
 39374                                  ; ENTRY:    ES:SI points to an ascii string to scan
 39375                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 39376                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 39377                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 39378                                  ; -----------------------------------------------------------------------------
 39379                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 39380                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 39381                                  ; will be 10 or 16.
 39382                                  ; -----------------------------------------------------------------------------
 39383                                  
 39384                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 39385                                  GetXNum:
 39386                                  	;pushreg <bx,cx,ds>
 39387                                  	
 39388                                  	;push	bx ; **
 39389 00005EC9 51                      	push	cx ; *
 39390                                  	
 39391                                  	;push	ds
 39392                                  
 39393 00005ECA FC                      	cld
 39394 00005ECB 31C0                    	xor	ax,ax
 39395 00005ECD 31DB                    	xor	bx,bx
 39396 00005ECF 31C9                    	xor	cx,cx
 39397 00005ED1 31D2                    	xor	dx,dx		; Start with 0 (makes sense)
 39398                                  
 39399                                  	;mov	word [gnradix],10 ; And default to a radix of 10 (dec)
 39400 00005ED3 C606[945E]0A            	mov	byte [gnradix],10
 39401                                  
 39402 00005ED8 268A0C                  	mov	cl,[es:si]	; Now AX=0, BX=0, CH=0/CL=char, DX=0
 39403 00005EDB E8B8FF                  	call	toDigit
 39404 00005EDE 722D                    	jc	short gxnE	; If it's not a digit, leave now.
 39405                                  
 39406 00005EE0 08C9                    	or	cl,cl
 39407 00005EE2 7515                    	jnz	short gxn20	; Doesn't have '0x'
 39408 00005EE4 268A4C01                	mov	cl,[es:si+1]
 39409 00005EE8 80F978                  	cmp	cl,'x'		; Either 'x'...
 39410 00005EEB 7405                    	je	short gxn10
 39411 00005EED 80F958                  	cmp	cl,'X'		; ...or 'X' means it's hexadecimal
 39412 00005EF0 7507                    	jne	short gxn20
 39413                                  
 39414                                  gxn10:
 39415                                  	;mov	word [gnradix],16
 39416 00005EF2 C606[945E]10            	mov	byte [gnradix],16
 39417 00005EF7 46                      	inc	si		; Since we read "0x", march over it.
 39418 00005EF8 46                      	inc	si
 39419                                  
 39420                                  ; ------------------------------------------------------
 39421                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 39422                                  ;        DX:AX = current total
 39423                                  ;        BX    = 0
 39424                                  ;        CH    = 0
 39425                                  ; ------------------------------------------------------
 39426                                  
 39427                                  gxn20:
 39428 00005EF9 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 39429 00005EFC 46                      	inc	si
 39430                                  
 39431 00005EFD E896FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 39432 00005F00 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 39433                                  
 39434 00005F02 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 39435 00005F05 7206                    	jc	short gxnX	; (if it's too big, error out)
 39436                                  
 39437 00005F07 01C8                    	add	ax,cx		; Add the digit
 39438 00005F09 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 if last add wrapped
 39439                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 39440                                  	;jmp	short gxn20
 39441 00005F0B 73EC                    	jnc	short gxn20
 39442                                  gxnE:
 39443                                  	; cf = 1
 39444                                  	;stc			; In this case, we need to set the carry
 39445                                  	;jmp	short gxnX	; and leave--there were no digits given.
 39446                                  ;gxnQ:
 39447                                  	;dec	si		; Don't read in the offensive character.
 39448                                  	;clc			; And clear carry, so they know it's okay.
 39449                                  gxnX:
 39450                                  	;popreg	<ds,cx,bx>
 39451                                  
 39452                                  	;pop	ds
 39453                                  
 39454 00005F0D 59                      	pop	cx ; *
 39455                                  	;pop	bx ; **
 39456                                  
 39457 00005F0E C3                      	retn
 39458                                  gxnQ:
 39459 00005F0F 4E                      	dec	si
 39460 00005F10 F8                      	clc
 39461 00005F11 EBFA                    	jmp	short gxnX
 39462                                  
 39463                                  ; -----------------------------------------------------------------------------
 39464                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 39465                                  ; -----------------------------------------------------------------------------
 39466                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 39467                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 39468                                  ; ERROR:   Carry set if number was too large
 39469                                  ; USES:    Flags, AX, DX
 39470                                  ; -----------------------------------------------------------------------------
 39471                                  
 39472                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39473                                  mul32:
 39474 00005F13 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 39475 00005F14 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 39476 00005F16 F726[945E]              	mul	word [gnradix]	; DX=?,      AX=new:hi, TOS=old:lo, BX=0
 39477 00005F1A 7210                    	jc	short m32E	; Too big?
 39478                                  
 39479 00005F1C 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 39480 00005F1E 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig,   BX=0
 39481                                  
 39482 00005F1F 87D3                    	xchg	dx,bx		; DX=0,      AX=old:lo, TOS=orig,   BX=new:hi
 39483 00005F21 F726[945E]              	mul	word [gnradix]	; DX=carry,  AX=new:lo, TOS=orig,   BX=new:hi
 39484 00005F25 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 39485 00005F27 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=carry
 39486 00005F29 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig,   BX=0
 39487 00005F2B C3                      	retn
 39488                                  m32E:
 39489 00005F2C 58                      	pop	ax
 39490 00005F2D C3                      	retn
 39491                                  
 39492                                  ; -----------------------------------------------------------------------------
 39493                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 39494                                  ; -----------------------------------------------------------------------------
 39495                                  ; ENTRY:   DX:AX = the number to be divided
 39496                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 39497                                  ; ERROR:   None
 39498                                  ; USES:    Flags, AX, DX
 39499                                  ; -----------------------------------------------------------------------------
 39500                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 39501                                  ;       can't ensure a 386 host machine. Sorry.
 39502                                  ; -----------------------------------------------------------------------------
 39503                                  
 39504                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39505                                  toPara:
 39506 00005F2E 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 39507                                  
 39508 00005F2F B104                    	mov	cl,4		;
 39509 00005F31 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 39510 00005F33 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 39511 00005F34 B10C                    	mov	cl,12
 39512 00005F36 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 39513 00005F38 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 39514                                  
 39515 00005F3A 59                      	pop	cx
 39516 00005F3B C3                      	retn
 39517                                  
 39518                                  ; -----------------------------------------------------------------------------
 39519                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 39520                                  ; -----------------------------------------------------------------------------
 39521                                  ; ENTRY:  Nothing
 39522                                  ; EXIT:   AX contains 0x9FFF for most systems
 39523                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 39524                                  ; USES:   Flags, AX
 39525                                  ; -----------------------------------------------------------------------------
 39526                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 39527                                  ; to be precise, before a UMB provider is around.  In this event, the pointer
 39528                                  ; is always set to 0xFFFF; it changes once a provider is around.  On most
 39529                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 39530                                  ; -----------------------------------------------------------------------------
 39531                                  
 39532                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39533                                  UmbHead:
 39534                                  	;pushreg <si,ds,es>
 39535                                  	
 39536                                  	;push	si
 39537                                  	;push	ds
 39538                                  	;push	es
 39539                                  
 39540 00005F3C B452                    	mov	ah,52h	; DOS_GET_DOS_LISTS
 39541                                  					; Call int 21h, function 52h...
 39542 00005F3E CD21                    	int	21h
 39543                                  			; DOS - 2+ internal - GET LIST OF LISTS
 39544                                  			; Return: ES:BX -> DOS list of lists
 39545                                  
 39546                                  	;mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 39547 00005F40 26A18C00                	mov	ax,[es:8Ch]
 39548 00005F44 83F8FF                  	cmp	ax,0FFFFh
 39549                                  	;je	short uhE		; If it's 0xFFFF, it's an error...
 39550                                  
 39551                                  	;clc				; Else, it isn't (CLC done by prev cmp)
 39552                                  	;jmp	short uhX
 39553                                  	; 17/06/2023
 39554 00005F47 F5                      	cmc	; cf = 0 <--> cf = 1
 39555                                  uhE:
 39556                                  	;stc
 39557                                  uhX:	
 39558                                  	;popreg	<es,ds,si>
 39559                                  	
 39560                                  	;pop	es
 39561                                  	;pop	ds
 39562                                  	;pop	si
 39563                                  
 39564 00005F48 C3                      	retn
 39565                                  
 39566                                  ; -----------------------------------------------------------------------------
 39567                                  ;*** isSysMCB - sets ZF iff ES points to an MCB owned by "SC" + (8 or 9)
 39568                                  ; -----------------------------------------------------------------------------
 39569                                  ; ENTRY:  ES:0 should point to a valid MCB
 39570                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 39571                                  ; USES:   Flags
 39572                                  ; -----------------------------------------------------------------------------
 39573                                  
 39574                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39575                                  isSysMCB:
 39576                                  	;push	ax
 39577                                  	
 39578                                  	;mov	ax,[es:1]
 39579 00005F49 26A10100                	mov	ax,[es:arena_owner]	; Check the owner...
 39580 00005F4D 83F808                  	cmp	ax,8 ; SystemPSPOwner	; 8 (for US OR Japan) is valid
 39581 00005F50 7405                    	jz	short ism10
 39582 00005F52 83F809                  	cmp	ax,9 ; JapanPSPOwner	; 9 (for Japan) is valid
 39583                                  	;jz	short ism10
 39584                                  	;jmp	short ismX		; Anything else isn't.
 39585 00005F55 7507                    	jnz	short ismX
 39586                                  ism10:
 39587                                  	;mov	ax,[es:8]
 39588 00005F57 26A10800                	mov	ax,[es:arena_name]	; Check the name...
 39589 00005F5B 3D5343                  	cmp	ax,'SC' ; cmp ax,4353h
 39590                                  ismX:
 39591                                  	;pop	ax
 39592 00005F5E C3                      	retn
 39593                                  
 39594                                  ; -----------------------------------------------------------------------------
 39595                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 39596                                  ; -----------------------------------------------------------------------------
 39597                                  ; ENTRY:  AX contains a segment address
 39598                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 39599                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 39600                                  ; USES:   Flags, AX
 39601                                  ; -----------------------------------------------------------------------------
 39602                                  ; An address in the following areas is treated as:
 39603                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 39604                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 39605                                  ;      ...
 39606                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 39607                                  ; -----------------------------------------------------------------------------
 39608                                  
 39609                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39610                                  AddrToUmb:
 39611                                  	;pushreg <cx,dx,es>
 39612                                  	
 39613                                  	;push	cx
 39614                                  	;push	dx
 39615 00005F5F 06                      	push	es
 39616                                  
 39617 00005F60 89C2                    	mov	dx,ax		; DX = address to search for
 39618                                  
 39619 00005F62 E8D7FF                  	call	UmbHead		; AX = first segment
 39620 00005F65 722B                    	jc	short atuE	; If it couldn't get it, error out.
 39621                                  
 39622                                  	;mov	es,ax ; *	; ES = first UMB segment
 39623 00005F67 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 39624                                  
 39625                                  ; ----------------------------------------
 39626                                  ; ATU10--ES - Current MCB address
 39627                                  ;        DX - Address given for conversion
 39628                                  ;        CX - Current UMB #
 39629                                  ; ----------------------------------------
 39630                                  
 39631                                  	; 17/06/2023
 39632                                  atu10:
 39633 00005F69 8EC0                    	mov	es,ax ; *
 39634                                  ;atu10:
 39635                                  	;mov	ax,es
 39636 00005F6B 39D0                            cmp	ax,dx		; Present segment >= given segment?
 39637 00005F6D 7326                    	jae	short atuX	; Yep--done.
 39638                                  
 39639 00005F6F E8D7FF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 39640 00005F72 7501                    	jnz	short atu20
 39641                                  
 39642 00005F74 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 39643                                  atu20:
 39644                                  	;mov	al,[es:0]
 39645 00005F75 26A00000                	mov	al,[es:arena_signature]
 39646                                  	;cmp	al,'Z' ; 5Ah
 39647 00005F79 3C5A                    	cmp	al,arena_signature_end
 39648 00005F7B 740A                    	je	short atu30	; 'Z' means this was the last MCB... that's it.
 39649                                  
 39650                                  	;NextMCB es,ax
 39651 00005F7D 8CC0                    	mov	ax,es
 39652                                  	;add	ax,[es:3]	; NextMCB (macro)
 39653 00005F7F 2603060300              	add	ax,[es:arena_size]
 39654 00005F84 40                      	inc	ax
 39655                                  	;mov	es,ax ; * ; 17/06/2023
 39656 00005F85 EBE2                    	jmp	short atu10
 39657                                  
 39658                                  ; -----------------------------------------------------------------------------
 39659                                  ; if we get to atu30, they specified a number that was past the last MCB.
 39660                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 39661                                  ; -----------------------------------------------------------------------------
 39662                                  
 39663                                  atu30:
 39664 00005F87 8CC0                    	mov	ax,es
 39665                                  	;add	ax,[es:3]
 39666 00005F89 2603060300              	add	ax,[es:arena_size]
 39667 00005F8E 39D0                    	cmp	ax,dx		; Present >= given?
 39668 00005F90 7303                    	jae	short atuX	; Yep! It _was_ inside.
 39669                                  atuE:
 39670 00005F92 31C9                    	xor	cx,cx		; Else, fall through with UMB # == -1
 39671 00005F94 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 39672                                  atuX:	
 39673 00005F95 89C8                    	mov	ax,cx		; Return the UMB number in AX
 39674                                  	
 39675                                  	;popreg	<es,dx,cx>
 39676                                  
 39677 00005F97 07                      	pop	es
 39678                                  	;pop	dx
 39679                                  	;pop	cx
 39680                                  	
 39681 00005F98 C3                      	retn
 39682                                  
 39683                                  ; -----------------------------------------------------------------------------
 39684                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 39685                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 39686                                  ; address rather than a UMB number... and use that address to look up a UMB.
 39687                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 39688                                  ; -----------------------------------------------------------------------------
 39689                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 39690                                  ; EXIT:   AX will contain a UMB number
 39691                                  ; ERROR:  None
 39692                                  ; USES:   Flags, AX
 39693                                  ; -----------------------------------------------------------------------------
 39694                                  
 39695                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39696                                  convUMB:
 39697                                  	;cmp	word [gnradix],16
 39698 00005F99 803E[945E]10            	cmp	byte [gnradix],16
 39699 00005F9E 7509                    	jne	short cu10	; If it didn't read in hex, it's not an address
 39700 00005FA0 E8BCFF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 39701 00005FA3 83F8FF                  	cmp	ax,0FFFFh
 39702 00005FA6 7501                    	jne	short cu10
 39703 00005FA8 40                      	inc	ax ; ax = 0	; If too high, ignore it (make it conventional)
 39704                                  cu10:
 39705 00005FA9 C3                      	retn
 39706                                  
 39707                                  ; -----------------------------------------------------------------------------
 39708                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 39709                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 39710                                  ; of the usual HIGH_FIRST.  See the code.
 39711                                  ; -----------------------------------------------------------------------------
 39712                                  ; ENTRY:  None
 39713                                  ; EXIT:   None
 39714                                  ; ERROR:  None
 39715                                  ; USES:   Flags, fm_umb, fm_strat
 39716                                  ; -----------------------------------------------------------------------------
 39717                                  
 39718                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39719                                  setUMBs:
 39720                                  	;pushreg <ax,bx>
 39721                                  	
 39722                                  	;push	ax
 39723                                  	;push	bx
 39724                                  
 39725 00005FAA E8B2FD                  	call	fm_link
 39726                                  
 39727 00005FAD B80058                  	mov	ax,5800h ; DOS_CHECK_STRATEGY
 39728 00005FB0 CD21                    	int	21h
 39729                                  
 39730                                  	;putdata fm_strat,al	; Store the current strategy for later restore
 39731                                  
 39732                                  	;push	es
 39733                                  	;mov	es,[RESSEG]
 39734                                  	;mov	[es:fm_strat],al ; store the current strategy
 39735                                  	;pop	es
 39736 00005FB2 1E                      	push	ds ; *
 39737 00005FB3 8E1E[639C]              	mov	ds,[RESSEG]
 39738 00005FB7 A2[3605]                	mov	[fm_strat],al
 39739                                  	;pop	ds ; *
 39740                                  
 39741 00005FBA 83E07F                  	and	ax,007Fh	; 0000.0000.0111.1111 == All that other stuff
 39742 00005FBD 50                      	push	ax ; **		; Watch this carefully...
 39743                                  
 39744 00005FBE E80C00                  	call	loadLow		; returns al==0 if load low, al==1 if loadhigh
 39745 00005FC1 D0C8                    	ror	al,1		; Shift that to al==0 or al==0x80
 39746                                  
 39747 00005FC3 5B                      	pop	bx ; **		; ...pushed as AX above
 39748                                  	
 39749 00005FC4 1F                      	pop	ds ; *
 39750                                  	
 39751 00005FC5 08C3                    	or	bl,al		; Now we have 0000.0000.?111.1111 in BX;
 39752                                  
 39753 00005FC7 B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 39754                                  				; with ? ==1 if load highfirst. Perfect!
 39755 00005FCA CD21                    	int	21h
 39756                                  
 39757                                  	;popreg	<bx,ax>
 39758                                  
 39759                                  	;pop	bx
 39760                                  	;pop	ax
 39761                                  
 39762 00005FCC C3                      	retn
 39763                                  
 39764                                  ; -----------------------------------------------------------------------------
 39765                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 39766                                  ; -----------------------------------------------------------------------------
 39767                                  ; ENTRY:  None
 39768                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 39769                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 39770                                  ; ERROR:  None
 39771                                  ; USES:   Flags, fm_strat, fm_umb
 39772                                  ; -----------------------------------------------------------------------------
 39773                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 39774                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 39775                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 39776                                  ; such that the load UMB is too small, and shouldn't be used.
 39777                                  ; -----------------------------------------------------------------------------
 39778                                  
 39779                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39780                                  loadLow:
 39781                                  	;push	ds ; *	
 39782                                  	
 39783                                  	;dataseg ds		; Point DS into appropriate data segment
 39784                                  	;mov	ds,[RESSEG]
 39785                                  
 39786                                  	; * ; ds = [RESSEG] from 'setUMBs') ; 17/06/2023
 39787                                  
 39788 00005FCD A0[3405]                	mov	al,[UmbLoad]
 39789 00005FD0 3CFF                    	cmp	al,0FFh ; UNSPECIFIED
 39790 00005FD2 7503                    	jne	short ll10
 39791                                  
 39792                                  	;mov	al,1		; Return with AL==1 && STC if no UMBs specified
 39793 00005FD4 F9                      	stc
 39794                                  	;jmp	short llX
 39795 00005FD5 EB04                    	jmp	short lly ; 17/06/2023
 39796                                  ll10:
 39797 00005FD7 08C0                    	or	al,al		; AL=the load UMB: Is it == 0?
 39798 00005FD9 7402                    	jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 39799                                  	; cf= 0
 39800                                  
 39801                                  	;mov	al,1
 39802                                  	;clc	
 39803                                  lly:		; 17/06/2023
 39804 00005FDB B001                    	mov	al,1
 39805                                  llX:
 39806                                  	;pop	ds ; *		; Return DS to where it was
 39807                                  	
 39808                                  	;normseg ds		;
 39809                                  	
 39810 00005FDD C3                      	retn
 39811                                  
 39812                                  ; -----------------------------------------------------------------------------
 39813                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 39814                                  ; -----------------------------------------------------------------------------
 39815                                  ; ENTRY:  None
 39816                                  ; EXIT:   None
 39817                                  ; ERROR:  None
 39818                                  ; USES:   Flags, fm_strat, fm_umb
 39819                                  ; -----------------------------------------------------------------------------
 39820                                  
 39821                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39822                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:64D0h
 39823                                  HideUMBs:
 39824                                  	;pushreg <ax,cx,ds,es>
 39825                                  	
 39826                                  	;push	ax
 39827                                  	;push	cx
 39828                                  	;push	ds
 39829                                  	;push	es
 39830                                  
 39831 00005FDE E8EF01                  	call	UmbTest		; See if we REALLY linked in anything...
 39832 00005FE1 7236                    	jc	short husX	; ...if not, there's nothing for us to do.
 39833                                  
 39834 00005FE3 E82CFD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 39835 00005FE6 E8C1FF                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 39836                                  
 39837                                  	;putdata fInHigh,1	; Remember that we're now running high
 39838                                  	;push	es
 39839                                  	;mov	es,[RESSEG]
 39840                                  	;mov	byte [es:fInHigh], 1
 39841                                  	;			; remember that we're now running high
 39842                                  	;pop	es
 39843 00005FE9 1E                      	push	ds
 39844 00005FEA 8E1E[639C]              	mov	ds,[RESSEG]
 39845 00005FEE C606[3005]01            	mov	byte [fInHigh], 1
 39846 00005FF3 1F                      	pop	ds
 39847                                  
 39848 00005FF4 E82300                  	call	GetLoadUMB	; See if they gave us a list to leave free
 39849 00005FF7 3CFF                    	cmp	al,0FFh	; UNSPECIFIED
 39850                                  				; If they didn't,
 39851 00005FF9 741E                    	je	short husX	; then we shouldn't do this loop:
 39852                                  
 39853 00005FFB 31C9                    	xor	cx,cx
 39854                                  
 39855                                  ; -----------------------------------------------
 39856                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 39857                                  ; -----------------------------------------------
 39858                                  
 39859                                  hus10:
 39860 00005FFD 41                      	inc	cx		; For each UMB:
 39861 00005FFE 83F910                  	cmp	cx,16 ; MAXUMB
 39862 00006001 730C                    	jae	short hus20
 39863                                  
 39864 00006003 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 39865                                  	; 17/06/2023
 39866                                  	;push	es
 39867 00006005 E8A900                  	call	findumb		; valid range of UMBs)
 39868                                  	;pop	es		; push/pop: trash what findumb finds.  :-)
 39869 00006008 7205                    	jc	short hus20
 39870                                  
 39871 0000600A E87901                  	call	hideUMB?	; hide what we need to hide.
 39872                                  
 39873 0000600D EBEE                    	jmp	short hus10
 39874                                  hus20:
 39875 0000600F E80800                  	call	GetLoadUMB	; Now check if they offered /L:0
 39876 00006012 08C0                    	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 39877 00006014 7503                    	jnz	short husX	; If not, we're done.
 39878                                  
 39879 00006016 E8E701                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 39880                                  husX:
 39881                                  	;popreg	<es,ds,cx,ax>
 39882                                  	
 39883                                  	;pop	es
 39884                                  	;pop	ds
 39885                                  	;pop	cx
 39886                                  	;pop	ax
 39887                                  
 39888 00006019 C3                      	retn
 39889                                  
 39890                                  ; -----------------------------------------------------------------------------
 39891                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 39892                                  ; -----------------------------------------------------------------------------
 39893                                  ; ENTRY:  None
 39894                                  ; EXIT:   AL == load UMB
 39895                                  ; ERROR:  None
 39896                                  ; USES:   Flags, AX
 39897                                  ; -----------------------------------------------------------------------------
 39898                                  
 39899                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39900                                  GetLoadUMB:
 39901                                  	;getdata al,UmbLoad
 39902                                  
 39903 0000601A 1E                      	push    ds
 39904 0000601B 8E1E[639C]              	mov     ds,[RESSEG]   ; getdata (macro)
 39905 0000601F A0[3405]                	mov     al,[UmbLoad]
 39906 00006022 1F                      	pop     ds
 39907                                  
 39908 00006023 C3                      	retn
 39909                                  
 39910                                  ; -----------------------------------------------------------------------------
 39911                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 39912                                  ; -----------------------------------------------------------------------------
 39913                                  ; ENTRY:  AL == a UMB number
 39914                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 39915                                  ; ERROR:  None
 39916                                  ; USES:   Flags, AX
 39917                                  ; -----------------------------------------------------------------------------
 39918                                  
 39919                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39920                                  GetSize:
 39921                                  	;pushreg <bx,si,ds>
 39922                                  	;push	bx
 39923                                  	;push	si
 39924 00006024 1E                      	push	ds
 39925                                  	
 39926                                  	;dataseg ds
 39927 00006025 8E1E[639C]              	mov	ds,[RESSEG]
 39928                                  
 39929 00006029 30E4                    	xor	ah,ah			;    ax==UMB
 39930                                  	;mov	bx,offset UmbSize
 39931 0000602B BB[6E04]                	mov	bx,UmbSize		;    bx==array
 39932 0000602E D0E0                    	shl	al,1	                ;    ax==offset
 39933                                  	;add	ax,bx			;    ax==element index
 39934                                  	;mov	si,ax			; ds:si==element index
 39935                                  	;lodsw				;    ax==size
 39936 00006030 01C3                    	add	bx,ax
 39937 00006032 8B07                    	mov	ax,[bx]
 39938                                  
 39939                                  	;popreg	<ds,si,bx>
 39940 00006034 1F                      	pop	ds
 39941                                  	;pop	si
 39942                                  	;pop	bx
 39943                                  
 39944                                  	;normseg ds
 39945 00006035 C3                      	retn
 39946                                  
 39947                                  ; -----------------------------------------------------------------------------
 39948                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 39949                                  ; -----------------------------------------------------------------------------
 39950                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 39951                                  ; EXIT:     None; free elements in UMB marked as hidden
 39952                                  ; ERROR:    None
 39953                                  ; USES:     Flags
 39954                                  ; -----------------------------------------------------------------------------
 39955                                  
 39956                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 39957                                  hideUMB:
 39958                                  	;pushreg <ax,es>
 39959                                  	
 39960                                  	;push	ax
 39961                                  	;push	es
 39962                                  
 39963 00006036 E87800                  	call	findumb		; Returns with carry if err, else ES == MCB
 39964 00006039 7221                    	jc	short huX
 39965                                  
 39966                                  ; ------------------------------------------------
 39967                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 39968                                  ;            we're not in the same UMB, so exit.
 39969                                  ; ------------------------------------------------
 39970                                  
 39971                                  hu10:
 39972 0000603B E80BFF                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 39973 0000603E 741C                    	jz	short huX	; If it is, we've finished the UMB.
 39974 00006040 E82800                  	call	isFreeMCB	; Returns with ZF set if owner is 0
 39975 00006043 7503                    	jnz	short hu20
 39976                                  
 39977 00006045 E82A00                  	call	hideMCB
 39978                                  hu20:
 39979                                  	;mov	al,[es:0]
 39980 00006048 26A00000                	mov	al,[es:arena_signature]
 39981                                  	;cmp	al,'Z'
 39982 0000604C 3C5A                    	cmp	al,arena_signature_end
 39983 0000604E 740C                    	je	short huX	; 'Z' means this was the last MCB... that's it.
 39984                                  
 39985                                  	;NextMCB es,ax		; Go on forward.
 39986                                  
 39987 00006050 8CC0                     	mov	ax,es		; NextMCB (macro)
 39988                                  	;add	ax,[es:3]
 39989 00006052 2603060300              	add	ax,[es:arena_size]
 39990 00006057 40                      	inc	ax
 39991 00006058 8EC0                    	mov	es,ax
 39992                                  
 39993 0000605A EBDF                    	jmp	short hu10
 39994                                  huX:
 39995                                  	;popreg	<es,ax>
 39996                                  	
 39997                                  	;pop	es
 39998                                  	;pop	ax
 39999                                  
 40000 0000605C C3                      	retn
 40001                                  
 40002                                  ; -----------------------------------------------------------------------------
 40003                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 40004                                  ; -----------------------------------------------------------------------------
 40005                                  ; ENTRY:    None
 40006                                  ; EXIT:     ZF set if user DIDN'T specify /S
 40007                                  ; ERROR:    None
 40008                                  ; USES:     Flags
 40009                                  ; -----------------------------------------------------------------------------
 40010                                  
 40011                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40012                                  isTiny:
 40013 0000605D 50                      	push	ax
 40014                                  
 40015                                  	;getdata al,fUmbTiny
 40016 0000605E 1E                      	push    ds
 40017 0000605F 8E1E[639C]              	mov     ds,[RESSEG]   ; getdata (macro)
 40018 00006063 A0[3105]                	mov     al,[fUmbTiny]
 40019 00006066 1F                      	pop     ds
 40020                                  
 40021 00006067 08C0                    	or	al,al
 40022 00006069 58                      	pop	ax
 40023 0000606A C3                      	retn
 40024                                  
 40025                                  ; -----------------------------------------------------------------------------
 40026                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 40027                                  ; -----------------------------------------------------------------------------
 40028                                  ; ENTRY:    ES:0 should point to an MCB
 40029                                  ; EXIT:     ZF set if MCB is free, else !ZF
 40030                                  ; ERROR:    None
 40031                                  ; USES:     Flags
 40032                                  ; -----------------------------------------------------------------------------
 40033                                  
 40034                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40035                                  isFreeMCB:
 40036                                  	;or	word [es:1],0
 40037 0000606B 26830E010000            	or	word [es:arena_owner],0
 40038 00006071 C3                      	retn
 40039                                  
 40040                                  ; -----------------------------------------------------------------------------
 40041                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 40042                                  ; -----------------------------------------------------------------------------
 40043                                  ; ENTRY:    ES:0 should point to an MCB
 40044                                  ; EXIT:     None; MCB marked as HIDDEN
 40045                                  ; ERROR:    None
 40046                                  ; USES:     None
 40047                                  ; -----------------------------------------------------------------------------
 40048                                  
 40049                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40050                                  hideMCB:
 40051                                  	;mov	word [es:1],8
 40052 00006072 26C70601000800          	mov	word [es:arena_owner],8 ; SystemPSPOwner
 40053                                  	;mov	word [es:8],4948h     ; 'HIDDEN  ' 
 40054 00006079 26C70608004849          	mov	word [es:arena_name+0], 'HI' ; 4948h
 40055 00006080 26C7060A004444          	mov	word [es:arena_name+2], 'DD' ; 4444h
 40056 00006087 26C7060C00454E          	mov	word [es:arena_name+4], 'EN' ; 4E45h
 40057                                  	;mov	word [es:14],2020h
 40058 0000608E 26C7060E002020          	mov	word [es:arena_name+6], '  ' ; 2020h 
 40059 00006095 C3                      	retn
 40060                                  
 40061                                  ; -----------------------------------------------------------------------------
 40062                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 40063                                  ; -----------------------------------------------------------------------------
 40064                                  ; ENTRY:    ES:0 should point to an MCB
 40065                                  ; EXIT:     None; MCB marked as FREE
 40066                                  ; ERROR:    None
 40067                                  ; USES:     None
 40068                                  ; -----------------------------------------------------------------------------
 40069                                  
 40070                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40071                                  unHideMCB:
 40072                                  	;push	ax
 40073                                  	;mov	word [es:1],0
 40074 00006096 26C70601000000          	mov	word [es:arena_owner],0 ; FreePSPOwner
 40075 0000609D B82020                  	mov	ax, '  '  ; mov ax,2020h
 40076                                  	;mov	[es:8],ax
 40077 000060A0 26A30800                	mov	[es:arena_name+0],ax
 40078 000060A4 26A30A00                	mov	[es:arena_name+2],ax
 40079 000060A8 26A30C00                	mov	[es:arena_name+4],ax
 40080                                  	;mov	[es:14],ax
 40081 000060AC 26A30E00                	mov	[es:arena_name+6],ax
 40082                                  	;pop	ax
 40083 000060B0 C3                      	retn
 40084                                  
 40085                                  ; -----------------------------------------------------------------------------
 40086                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 40087                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 40088                                  ; -----------------------------------------------------------------------------
 40089                                  ; ENTRY:    AL should be to a valid UMB number
 40090                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 40091                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 40092                                  ; USES:     Flags, ES
 40093                                  ; -----------------------------------------------------------------------------
 40094                                  
 40095                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40096                                  findumb:
 40097                                  	;pushreg <ax,cx,dx>
 40098                                  	
 40099                                  	;push	ax
 40100 000060B1 51                      	push	cx
 40101 000060B2 52                      	push	dx
 40102                                  
 40103 000060B3 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 40104                                  
 40105 000060B5 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 40106                                  
 40107 000060B7 E882FE                  	call	UmbHead		; Returns first UMB segment in AX
 40108                                  
 40109 000060BA 8EC0                    	mov	es,ax
 40110 000060BC 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 40111                                  
 40112                                  ; ---------------------------------------------
 40113                                  ; FU10--CX - This UMB number; 0 == conventional
 40114                                  ;       DX - The UMB number they're looking for
 40115                                  ;       ES - The current MCB address
 40116                                  ; ---------------------------------------------
 40117                                  
 40118                                  fu10:	
 40119 000060BE 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 40120 000060C0 741B                    	je	short fuX	; searching for--so exit.
 40121                                  
 40122 000060C2 E884FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 40123 000060C5 7501                    	jnz	short fu20
 40124                                  
 40125 000060C7 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 40126                                  fu20:
 40127                                  	;mov	al,[es:0]
 40128 000060C8 26A00000                	mov	al,[es:arena_signature]
 40129                                  	;cmp	al,'Z'
 40130 000060CC 3C5A                    	cmp	al,arena_signature_end
 40131 000060CE 740C                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 40132                                  
 40133                                  	;NextMCB es,ax		; Go on forward.
 40134                                  
 40135 000060D0 8CC0                     	mov	ax,es		; NextMCB (macro)
 40136                                  	;add	ax,[es:3]
 40137 000060D2 2603060300              	add	ax,[es:arena_size]
 40138 000060D7 40                      	inc	ax
 40139 000060D8 8EC0                    	mov	es,ax
 40140                                  
 40141 000060DA EBE2                    	jmp	short fu10
 40142                                  fuE:
 40143 000060DC F9                      	stc
 40144                                  fuX:
 40145                                  	;popreg	<dx,cx,ax>	; The address is already in ES.
 40146                                  	
 40147 000060DD 5A                      	pop	dx
 40148 000060DE 59                      	pop	cx
 40149                                  	
 40150                                  	;pop	ax
 40151 000060DF C3                      	retn
 40152                                  
 40153                                  ; -----------------------------------------------------------------------------
 40154                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 40155                                  ; -----------------------------------------------------------------------------
 40156                                  ; ENTRY:    AL should be to a valid UMB number
 40157                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 40158                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 40159                                  ; USES:     Flags, ES
 40160                                  ; -----------------------------------------------------------------------------
 40161                                  
 40162                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40163                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6624h
 40164                                  BigFree:
 40165                                  	;pushreg <bx,cx>
 40166                                  	
 40167                                  	;push	bx
 40168 000060E0 51                      	push	cx
 40169                                  
 40170 000060E1 E8CDFF                  	call	findumb			; Returns with CF if err, else ES==MCB
 40171 000060E4 7239                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 40172                                  
 40173 000060E6 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 40174 000060E8 31C9                    	xor	cx,cx			; Size of largest free MCB
 40175                                  
 40176                                  ; ---------------------------------------------
 40177                                  ; BF10--ES - Current MCB address
 40178                                  ;       BX - Address of largest free MCB so far
 40179                                  ;       CX - Size of largest free MCB so far
 40180                                  ; ---------------------------------------------
 40181                                  
 40182                                  bf10:
 40183 000060EA E85CFE                  	call	isSysMCB		; If we've left the MCB, we're done.
 40184 000060ED 7427                    	jz	short bf30
 40185                                  
 40186 000060EF E879FF                  	call	isFreeMCB		; Returns with ZF set if owner is 0
 40187 000060F2 750E                    	jnz	short bf20
 40188                                  
 40189                                  	;cmp	cx,[es:3]
 40190 000060F4 263B0E0300              	cmp	cx,[es:arena_size]	; Compare sizes...
 40191 000060F9 7F07                    	jg	short bf20		; Unless we're bigger,
 40192                                  
 40193 000060FB 8CC3                    	mov	bx,es			; Store this new element's address,
 40194                                  	;mov	cx,[es:3]
 40195 000060FD 268B0E0300              	mov	cx,[es:arena_size]	; and its size.
 40196                                  bf20:
 40197                                  	;mov	al,[es:0]
 40198 00006102 26A00000                	mov	al,[es:arena_signature]
 40199                                  	;cmp	al,'Z'  ; 5Ah
 40200 00006106 3C5A                    	cmp	al,arena_signature_end
 40201 00006108 740C                    	je	short bf30		; 'Z' means this was the last MCB.
 40202                                  
 40203                                  	;NextMCB es,ax			; Go on forward.
 40204                                  
 40205 0000610A 8CC0                    	mov	ax,es 
 40206                                  	;add	ax,[es:3]
 40207 0000610C 2603060300              	add	ax,[es:arena_size]
 40208 00006111 40                      	inc	ax
 40209 00006112 8EC0                    	mov	es,ax
 40210                                  
 40211 00006114 EBD4                    	jmp	short bf10
 40212                                  bf30:
 40213 00006116 8EC3                    	mov	es,bx			; Return the address
 40214 00006118 89C8                    	mov	ax,cx			; Return the size
 40215 0000611A 09DB                    	or	bx,bx
 40216 0000611C 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 40217                                  bfE:
 40218 0000611E F9                      	stc
 40219                                  bfX:
 40220                                  	;popreg	<cx,bx>
 40221                                  
 40222 0000611F 59                      	pop	cx
 40223                                  	;pop	bx
 40224                                  
 40225 00006120 C3                      	retn
 40226                                  
 40227                                  ; -----------------------------------------------------------------------------
 40228                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 40229                                  ; -----------------------------------------------------------------------------
 40230                                  ; ENTRY:    AL should be to a valid UMB number
 40231                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 40232                                  ; ERROR:    None
 40233                                  ; USES:     Flags
 40234                                  ; -----------------------------------------------------------------------------
 40235                                  
 40236                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40237                                  isSpecified:
 40238                                  	;push	ax
 40239                                  
 40240 00006121 30FF                    	xor	bh,bh
 40241 00006123 88C3                    	mov	bl,al
 40242                                  
 40243                                  	;getdata al,DS:UmbUsed[bx]
 40244                                  
 40245 00006125 1E                      	push	ds
 40246 00006126 8E1E[639C]              	mov	ds,[RESSEG]
 40247 0000612A 8A87[5E04]              	mov	al,[bx+UmbUsed]
 40248 0000612E 1F                      	pop     ds
 40249                                  
 40250 0000612F 08C0                    	or	al,al		; Sets ZF if al==0 (ie, if unspecified)
 40251                                  
 40252                                  	;pop	ax
 40253 00006131 C3                      	retn
 40254                                  
 40255                                  ; -----------------------------------------------------------------------------
 40256                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 40257                                  ; -----------------------------------------------------------------------------
 40258                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 40259                                  ; EXIT:     None; MCB broken if carry clear
 40260                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 40261                                  ; USES:     Flags
 40262                                  ; -----------------------------------------------------------------------------
 40263                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 40264                                  ; the specified new size, the split is useless; if it's onnly 0x10 bytes, that
 40265                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 40266                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 40267                                  ; minimum for performing a split.
 40268                                  ; -----------------------------------------------------------------------------
 40269                                  
 40270                                  ;MIN_SPLIT_SIZE	equ 20h
 40271                                  
 40272                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40273                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:667Ah
 40274                                  shrinkMCB:
 40275                                  	;pushreg <bx,cx,es>
 40276                                  
 40277                                  	;push	bx
 40278 00006132 51                      	push	cx ; *
 40279 00006133 26                      	psuh	es ; **
 40280                                  
 40281 00006134 89C3                    	mov	bx,ax			; Move things around... and
 40282 00006136 8CC0                    	mov	ax,es			; save this one for later.
 40283                                  
 40284 00006138 268B0E0300              	mov	cx,[es:arena_size]
 40285 0000613D 83E920                  	sub	cx,32 ; sub cx,MIN_SPLIT_SIZE
 40286                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 40287                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 40288 00006140 39D9                    	cmp	cx,bx
 40289 00006142 723E                    	jb	short smE ; cf = 1 (***)
 40290                                  
 40291                                  	;mov	dl,[es:0]
 40292 00006144 268A160000              	mov	dl,[es:arena_signature]
 40293                                  
 40294                                  	;;mov	cx,[es:3]
 40295                                  	;mov	cx,[es:arena_size] ; *!
 40296                                  
 40297 00006149 26891E0300              	mov	[es:arena_size],bx
 40298                                  	;mov	byte [es:0],'M' ; 4Dh
 40299 0000614E 26C60600004D            	mov	byte [es:arena_signature],'M'
 40300                                  
 40301 00006154 01D8                    	add	ax,bx
 40302 00006156 40                      	inc	ax
 40303 00006157 8EC0                    	mov	es,ax			; Move to new arena area
 40304                                  
 40305                                  	;mov	ax,cx ; !*
 40306 00006159 26A10300                	mov	ax,[es:arena_size] ; *!
 40307 0000615D 29D8                    	sub	ax,bx
 40308 0000615F 48                      	dec	ax			; And prepare the new size
 40309                                  
 40310                                  	;mov	[es:0],dl
 40311 00006160 2688160000              	mov	[es:arena_signature],dl
 40312                                  	;;mov	word [es:1],0
 40313                                  	;mov	word [es:arena_owner],0
 40314                                  	;mov	[es:3],ax
 40315 00006165 26A30300                	mov	[es:arena_size],ax
 40316 00006169 B82020                  	mov	ax,'  ' ; mov ax,2020h
 40317                                  	;mov	[es:8],ax
 40318 0000616C 26A30800                	mov	[es:arena_name+0],ax
 40319 00006170 26A30A00                	mov	[es:arena_name+2],ax
 40320 00006174 26A30C00                	mov	[es:arena_name+4],ax
 40321                                  	;mov	[es:14],ax
 40322 00006178 26A30E00                	mov	[es:arena_name+6],ax
 40323                                  
 40324                                  	;clc
 40325 0000617C 31C0                    	xor	ax,ax
 40326 0000617E 26A30100                	mov	[es:arena_owner],ax ; 0
 40327                                  	; cf = 0
 40328                                  	;jmp	short smX
 40329                                  smE:
 40330                                  	;stc	 ; cf = 1 (***)
 40331                                  smX:
 40332                                  	;popreg	<es,cx,bx>
 40333 00006182 07                      	pop	es ; **
 40334 00006183 59                      	pop	cx ; *
 40335 00006184 5B                      	pop	bx
 40336                                  
 40337 00006185 C3                      	retn
 40338                                  
 40339                                  ; -----------------------------------------------------------------------------
 40340                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 40341                                  ; -----------------------------------------------------------------------------
 40342                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 40343                                  ; EXIT:     None; UMB is hidden as necessary
 40344                                  ; ERROR:    None
 40345                                  ; USES:     Flags, AX, CX
 40346                                  ; -----------------------------------------------------------------------------
 40347                                  ; PRIMARY LOGIC:
 40348                                  ;
 40349                                  ; If the UMB is specified in the DH/LH statement, then:
 40350                                  ;    If the largest free segment is too small (check specified size), then:
 40351                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 40352                                  ;    Else, if largest free segment is LARGER than specified size, then:
 40353                                  ;       If /S was given on the command-line, then:
 40354                                  ;          Break that element into two pieces
 40355                                  ;          Set a flag that we're shrinking
 40356                                  ;       Endif
 40357                                  ;    Endif
 40358                                  ; Endif
 40359                                  ; If the UMB is NOT specified (or was removed by the above):
 40360                                  ;    Hide all free elements in the UMB
 40361                                  ;    If the flag that we're shrinking was set, then:
 40362                                  ;       UN-hide the lower portion of the shrunken UMB
 40363                                  ;    ENDIF
 40364                                  ; ENDIF
 40365                                  ; -----------------------------------------------------------------------------
 40366                                  
 40367                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40368                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:66D7h
 40369                                  hideUMB?:
 40370                                  	;pushreg <bx,dx,es>
 40371                                  
 40372                                  	;push	bx
 40373                                  	;push	dx
 40374                                  	;push	es
 40375                                  
 40376 00006186 88C8                    	mov	al,cl
 40377 00006188 E896FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 40378                                  	;jz	short hu?20
 40379                                  	; 17/06/2023
 40380 0000618B 7432                    	jz	short hu?25 ; *
 40381                                  
 40382 0000618D 88C8                    	mov	al,cl		; Retrieve the size of the largest
 40383 0000618F E84EFF                  	call	BigFree		; free element in AX; put its address in ES
 40384                                  	;jc	short hu?20	; Oops. Errors mean skip this part.
 40385                                  	; 17/06/2023
 40386 00006192 723B                    	jc	short hu?X ; **
 40387                                  
 40388 00006194 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 40389 00006195 88C8                    	mov	al,cl		; Retrieve the user's specified
 40390 00006197 E88AFE                  	call	GetSize		; minimum size for this umb (into AX)
 40391 0000619A 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 40392                                  
 40393 0000619B 09C0                    	or	ax,ax		; If they didn't specify one,
 40394                                  	;jz	short hu?20	; Skip over all this.
 40395                                  	; 17/06/2023
 40396 0000619D 7530                    	jnz	short hu?X ; **
 40397                                  
 40398 0000619F 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 40399 000061A1 7607                    	jbe	short hu?10
 40400                                  
 40401 000061A3 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 40402 000061A5 E898FC                  	call	unMarkUMB
 40403                                  	;jmp	short hu?20 ; ***
 40404                                  	; 17/06/2023
 40405                                  	; ('isSpecified' would return with ZF=1) ; ***
 40406 000061A8 EB15                    	jmp	short hu?25
 40407                                  hu?10:
 40408 000061AA E8B0FE                  	call	isTiny		; Returns ZF clear if user specified /S
 40409                                  	;jz	short hu?20
 40410                                  	; 17/06/2023
 40411                                  	; ('isSpecified' would return with ZF=0) ; **
 40412 000061AD 7420                    	jz	short hu?X
 40413                                  
 40414 000061AF E880FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 40415                                  	;jc	short hu?20	; Ah... if didn't shrink after all, skip this:
 40416                                  	; 17/06/2023
 40417                                  	; ('isSpecified' would return with ZF=0) ; **
 40418 000061B2 721B                    	jc	short hu?X
 40419                                  
 40420 000061B4 8CC2                    	mov	dx,es
 40421 000061B6 EB09                    	jmp	short hu?30	; Skip the spec check.. we wanna hide this one.
 40422                                  hu?20:
 40423                                  	;mov	al,cl
 40424 000061B8 89C8                    	mov	ax,cx
 40425 000061BA E864FF                  	call	isSpecified	; If they specified this UMB, we're done...
 40426 000061BD 7510                    	jnz	short hu?X ; **	; so leave.
 40427                                  hu?25:	; 17/06/2023 ; *
 40428 000061BF 31D2                    	xor	dx,dx
 40429                                  hu?30:
 40430 000061C1 88C8                    	mov	al,cl
 40431                                  
 40432 000061C3 E870FE                  	call	hideUMB		; Hides everything in UMB #al
 40433                                  
 40434 000061C6 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 40435 000061C8 7405                    	jz	short hu?X	; So we should leave.
 40436                                  
 40437 000061CA 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 40438 000061CC E8C7FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 40439                                  hu?X:
 40440                                  	;popreg	<es,dx,bx>
 40441                                  
 40442                                  	;pop	es
 40443                                  	;pop	dx
 40444                                  	;pop	bx
 40445                                  
 40446 000061CF C3                      	retn
 40447                                  
 40448                                  ; -----------------------------------------------------------------------------
 40449                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 40450                                  ; -----------------------------------------------------------------------------
 40451                                  ; ENTRY:    None
 40452                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 40453                                  ; ERROR:    None
 40454                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 40455                                  ; -----------------------------------------------------------------------------
 40456                                  
 40457                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40458                                  UmbTest:
 40459                                  	;pushreg <ax,bx,ds,es>
 40460                                  	
 40461                                  	;push	ax
 40462                                  	;push	bx
 40463                                  	;push	ds
 40464                                  	;push	es
 40465                                  
 40466 000061D0 E88CFB                  	call	fm_link		; Link in UMBs (if not already linked)
 40467 000061D3 E80600                  	call	WalkMem		; Check to see if they're really linked
 40468 000061D6 9C                      	pushf			; And remember what we found out
 40469 000061D7 E89CFB                  	call	fm_unlink	; Unlink UMBs (if WE have linked 'em)
 40470 000061DA 9D                      	popf			; And restore what we found out.
 40471                                  
 40472                                  	;popreg	<es,ds,bx,ax>
 40473                                  	
 40474                                  	;pop	es
 40475                                  	;pop	ds
 40476                                  	;pop	bx
 40477                                  	;pop	ax
 40478                                  	
 40479 000061DB C3                      	retn
 40480                                  
 40481                                  ; -----------------------------------------------------------------------------
 40482                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 40483                                  ; -----------------------------------------------------------------------------
 40484                                  ; ENTRY:    None
 40485                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 40486                                  ; ERROR:    None
 40487                                  ; USES:     Flags
 40488                                  ; -----------------------------------------------------------------------------
 40489                                  
 40490                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40491                                  WalkMem:
 40492                                  	;pushreg <ax,bx,es>
 40493                                  	
 40494                                  	;push	ax
 40495                                  	;push	bx
 40496 000061DC 06                      	push	es
 40497                                  
 40498 000061DD B452                    	mov	ah,52h ; DOS_GET_DOS_LISTS
 40499                                  				; Call int 21h, function 52h...
 40500 000061DF CD21                    	int	21h
 40501                                  
 40502 000061E1 268B47FE                	mov	ax,[es:bx-2]
 40503                                  	;mov	es,ax ; *
 40504                                  
 40505                                  ; ------------------------------
 40506                                  ; UM10: ES = Current MCB pointer
 40507                                  ; ------------------------------
 40508                                  
 40509                                  um10:	
 40510 000061E5 8EC0                    	mov	es,ax ; *
 40511                                  
 40512                                  	;mov	al,[es:0]
 40513 000061E7 26A00000                	mov	al,[es:arena_signature]
 40514                                  	;cmp	al,'Z' ; 5Ah
 40515 000061EB 3C5A                    	cmp	al,arena_signature_end
 40516 000061ED 740A                    	je	short um20	; If signature == 'Z', hay no more.
 40517                                  
 40518                                  	;NextMCB es,bx		; Move to the next MCB
 40519                                  	
 40520                                  	;mov	bx,es
 40521                                  	;;add	bx,[es:3]
 40522                                  	;add	bx,[es:arena_size]
 40523                                  	;inc	bx
 40524                                  	;mov	es,bx
 40525 000061EF 8CC0                    	mov	ax,es
 40526 000061F1 2603060300              	add	ax,[es:arena_size]
 40527 000061F6 40                      	inc	ax
 40528                                  	;mov	es,ax ; *
 40529                                  
 40530 000061F7 EBEC                    	jmp	short um10	; And restart the loop.
 40531                                  um20:
 40532 000061F9 8CC0                    	mov	ax,es
 40533 000061FB 3DFF9F                  	cmp	ax,9FFFh	; This sets CF if ax < 9FFF.
 40534                                  
 40535                                  	;popreg	<es,bx,ax>
 40536 000061FE 07                      	pop	es
 40537                                  	;pop	bx
 40538                                  	;pop	ax
 40539                                  
 40540 000061FF C3                      	retn
 40541                                  
 40542                                  ; -----------------------------------------------------------------------------
 40543                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 40544                                  ; -----------------------------------------------------------------------------
 40545                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 40546                                  ; EXIT:     None
 40547                                  ; ERROR:    None
 40548                                  ; USES:     AX, BX
 40549                                  ; -----------------------------------------------------------------------------
 40550                                  
 40551                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 40552                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:681Ch
 40553                                  hl_unlink:
 40554 00006200 1E                      	push	ds ; *
 40555                                  
 40556 00006201 30FF                    	xor	bh,bh
 40557                                  	;getdata bl,fm_umb	; Restore original link-state
 40558                                  
 40559                                  	;push	ds
 40560 00006203 8E1E[639C]              	mov	ds,[RESSEG]
 40561 00006207 8A1E[3505]              	mov	bl,[fm_umb]	; Restore original link-state
 40562                                  	;pop	ds
 40563                                  	
 40564 0000620B B80358                  	mov	ax,5803h ; DOS_SET_UMBLINK
 40565 0000620E CD21                    	int	21h
 40566                                  
 40567 00006210 30FF                    	xor	bh,bh
 40568                                  
 40569                                  	;getdata bl,fm_strat	; Restore original mem-alloc strategy
 40570                                  
 40571                                  	;push	ds
 40572                                  	;mov	ds,[RESSEG]
 40573 00006212 8A1E[3605]              	mov	bl,[fm_strat]	;Restore original mem-alloc strategy
 40574                                  	;pop	ds
 40575                                  
 40576 00006216 B80158                  	mov	ax,5801h ; DOS_SET_STRATEGY
 40577 00006219 CD21                    	int	21h
 40578                                  
 40579 0000621B 1F                      	pop	ds ; *
 40580                                  
 40581 0000621C C3                      	retn
 40582                                  
 40583                                  ;============================================================================
 40584                                  ; LOADHIGH.ASM, MSDOS 6.0, 1991
 40585                                  ;============================================================================
 40586                                  ; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40587                                  
 40588                                  ; This is a new module added to support loading programs into UMBs provided
 40589                                  ; by DOS 5.0. 
 40590                                  ; ---------------------------------------------------------------------------
 40591                                  ; Usage:
 40592                                  ;
 40593                                  ; LOADHIGH [/L:umb[,size][;umb[,size]]*] <filespec>
 40594                                  ;
 40595                                  ; <filespec> has to be a filename that is not wildcarded.
 40596                                  
 40597                                  ; ---------------------------------------------------------------------------
 40598                                  ;
 40599                                  ;	Revision History
 40600                                  ;	================
 40601                                  ;
 40602                                  ;	M009	SR	08/01/90	Set flags to indicate that we are
 40603                                  ;				loading and high and also remember
 40604                                  ;				current UMB state.
 40605                                  ;
 40606                                  ;	M016	SR	08/09/90	Give special error message on attempt
 40607                                  ;				to loadhigh batch files and invalid
 40608                                  ;				filename on Loadhigh command line.
 40609                                  ;
 40610                                  ;	M039	SR	11/19/90	Bug #4270. Copy all the whitespaces
 40611                                  ;				after the program name also as part
 40612                                  ;				of the command line being passed to
 40613                                  ;				the program to be invoked.
 40614                                  ;
 40615                                  ; ---------------------------------------------------------------------------
 40616                                  
 40617                                  ; ---------------------------------------------------------------------------
 40618                                  ;
 40619                                  ;	include highload.inc		; Grab code for ParseVar and such
 40620                                  
 40621                                  iCmdLine	equ	81h		; PSP:81h points to command-line
 40622                                  
 40623                                  ;
 40624                                  ; ---------------------------------------------------------------------------
 40625                                  
 40626                                  ;****	LoadHigh -- Main routine for Loadhigh command
 40627                                  ;
 40628                                  ;	ENTRY	Command line tail is at PSP:iCmdLine terminated by 0dh
 40629                                  ;		CS = DS = SS = TRANGROUP
 40630                                  ;
 40631                                  ;	EXIT	None
 40632                                  ;
 40633                                  ;	USED	ax, bx, cx, dx, si, di, es
 40634                                  ;
 40635                                  ;	ERROR EXITS
 40636                                  ;		Message pointers are setup at the error locations and then
 40637                                  ;	we jump back to CERROR which is the transient error recycle point.
 40638                                  ;	Apart from parse errors, the other errors handled are too many
 40639                                  ;	switches anf invalid filenames.
 40640                                  ;
 40641                                  ;	EFFECTS
 40642                                  ;		The allocation strategy and the state of the arena chain are
 40643                                  ;	put in the requested state according to the given options. If a 
 40644                                  ;	filename is also given, it is executed as well.
 40645                                  ; ---------------------------------------------------------------------------
 40646                                  
 40647                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40648                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5927h
 40649                                  
 40650                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40651                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:683Fh
 40652                                  LoadHigh:
 40653 0000621D 1E                      	push	ds
 40654 0000621E 07                      	pop	es
 40655                                  	
 40656                                  	; 16/06/2023
 40657                                  	;call	SkipLhDelims	; MSDOS 5.0 !
 40658                                  
 40659                                  ;Get command tail to be passed to the program. This includes any whitespace
 40660                                  ;chars between the program name and its parameters as well.
 40661                                  ;On return, ds:si points at the start of the command tail.
 40662                                  
 40663                                  	; 16/06/2023
 40664                                  	;push	si		; MSDOS 5.0 !
 40665 0000621F E81300                  	call	ParseLhCmd
 40666                                  	;pop	si		; MSDOS 5.0 !	
 40667 00006222 720E                    	jc	short LhErr
 40668                                  	
 40669 00006224 E86500                  	call	SetupCmdLine		;setup pgm's command line
 40670                                  
 40671 00006227 E88700                  	call	SetupPath		;setup path for file
 40672 0000622A 7206                    	jc	short LhErr		;file not found
 40673                                  
 40674                                  ;Set allocation strategy to HighFirst and link in UMBs for exec. This will
 40675                                  ;be reset after return from the Exec
 40676                                  ;We will also set a resident flag to indicate that UMBs were activated for
 40677                                  ;the Exec. On return from the Exec, this flag will be used to deactivate UMBs
 40678                                  
 40679 0000622C E8AFFD                  	call	HideUMBs		;prepare upper-memory for load
 40680                                  
 40681 0000622F E9FBCA                  	jmp	LH_EXECUTE		;go and exec file ;M051
 40682                                  
 40683                                  LhErr:
 40684                                  ;The error message has been setup at this stage
 40685                                  
 40686 00006232 E9EFCA                  	jmp	cerror			;print error message and recycle 
 40687                                  
 40688                                  ; ---------------------------------------------------------------------------
 40689                                  					
 40690                                  ;*** 	ParseLhCmd - parses any command-line options
 40691                                  ;
 40692                                  ;	ENTRY	None
 40693                                  ;
 40694                                  ;	EXIT	Carry clear -- command line parsed successfully
 40695                                  ;		Carry set -- appropriate error message setup
 40696                                  ;
 40697                                  ;	USED	ax, si
 40698                                  ;
 40699                                  ;	EFFECTS
 40700                                  ;		Options set up (see highvar.inc)
 40701                                  ;		Filename to be executed setup
 40702                                  ;
 40703                                  ;	ParseLhCmd calls InitVar to initialize data filled in by ParseVar,
 40704                                  ;	then calls ParseVar itself to actually parse the commmand-line.  On
 40705                                  ;	return from ParseVar, DS:SI will point to the beginning of the child
 40706                                  ;	module's name on the command-line; thus it calls LhCopyFilename to
 40707                                  ;	prepare the command-line for that program.
 40708                                  ; ---------------------------------------------------------------------------
 40709                                  
 40710                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40711                                  %if 0
 40712                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40713                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5944h
 40714                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 40715                                  	; 11/06/2023
 40716                                  ParseLhCmd:
 40717                                  	;mov	si,81h
 40718                                  	mov	si,iCmdLine	;ds:si points at command line
 40719                                  
 40720                                  	mov	word [COMSW],0
 40721                                  	mov	di,Parse_LoadHi
 40722                                  	xor	cx,cx
 40723                                  	call	Parse_With_Msg
 40724                                  
 40725                                  	; 11/06/2023
 40726                                  	;cmp	ax,0FFFFh ; -1
 40727                                  	;jz	short PLhCmd2
 40728                                  	;cmp	ax,0
 40729                                  	;jnz	short PLhCmd1
 40730                                  	; 11/06/2023
 40731                                  	inc	ax ; cmp ax,-1
 40732                                  	jz	short PLhCmd2 ; 0FFFFh -> 0
 40733                                  	dec	ax ; cmp ax,0
 40734                                  	jnz	short PLhCmd1 ; 1 -> 0
 40735                                  	; ax = 0
 40736                                  
 40737                                  	mov	bx,dx
 40738                                  	; 14/04/2023
 40739                                  	;call	LhCopyFilename
 40740                                  	;; 13/04/2023
 40741                                  	;;;jc	short PLhCmd2  ; !!! jmp short PLhCmd2 !!!
 40742                                  	;;jmp	short PLhCmd2
 40743                                  	;retn
 40744                                  	; 14/04/2023
 40745                                  	jmp	short LhCopyFilename
 40746                                  PLhCmd1:
 40747                                  	stc
 40748                                  PLhCmd2:
 40749                                  	retn
 40750                                  %endif
 40751                                  
 40752                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40753                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6857h
 40754                                  	; MSDOS 6.0
 40755                                  ParseLhCmd:
 40756                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 40757                                  	
 40758                                  	;mov	si,81h
 40759 00006235 BE8100                  	mov	si,iCmdLine	;ds:si points at command line
 40760                                  
 40761                                  	; es = ds (from 'LoadHigh') 
 40762                                  	;push	es		;Store ES 'cause we're gonna change it:
 40763                                  
 40764                                  	;push	ds
 40765                                  	;pop	es		;Make sure es:si points to cmd line as well
 40766                                  
 40767 00006238 E8ACFA                  	call	InitVar		;Initialize data for ParseVar
 40768                                  
 40769 0000623B E84AFB                  	call	ParseVar	;And parse the command line
 40770                                  
 40771                                  	;pop	es		;Restore ES now; we're done with it.
 40772                                  
 40773 0000623E 7317                    	jnc	short plcC	;If no error, continue on our way.
 40774                                  
 40775 00006240 83F802                  	cmp	ax,2 ; PV_BadUMB
 40776                                  				;Bad UMB passed?
 40777 00006243 7505                    	jne	short plc10
 40778                                  	;mov	dx,offset TRANGROUP:LhBadUMB_Ptr
 40779 00006245 BA[D592]                	mov	dx,LhBadUMB_Ptr
 40780 00006248 F9                      	stc
 40781 00006249 C3                      	retn
 40782                                  plc10:	
 40783                                  	;mov	dx,offset TRANGROUP:LhInvSwt_Ptr
 40784 0000624A BA[D292]                	mov	dx,LhInvSwt_Ptr
 40785 0000624D 83F803                  	cmp	ax,3 ; PV_InvSwt
 40786                                  				;Unrecognized switch passed?
 40787 00006250 7403                    	je	short plc20
 40788                                  	;mov	dx,offset TRANGROUP:LhInvArg_Ptr
 40789 00006252 BA[CC92]                	mov	dx,LhInvArg_Ptr
 40790                                  plc20:
 40791 00006255 F9                      	stc
 40792 00006256 C3                      	retn
 40793                                  plcC:
 40794                                  	;call	LhCopyFilename	;copy filename into our buffer
 40795                                  	;retn			;Return-- carry=status
 40796                                  	; 16/06/2023
 40797                                  	;jmp	short LhCopyFilename
 40798                                  
 40799                                  ; ---------------------------------------------------------------------------
 40800                                  
 40801                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40802                                  
 40803                                  ; ---------------------------------------------------------------------------
 40804                                  ; HIGHlOAD.INC, MSDOS 6.0, 1992
 40805                                  ; ---------------------------------------------------------------------------
 40806                                  
 40807                                  	; 13/04/2023
 40808                                  	; MSDOS 5.0 COMMAND.COM only !
 40809                                  	; (Procedure names are not from original Microsoft source code!)
 40810                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 40811                                  ;set_strategy:
 40812                                  	;mov	ax,5800h	; DOS_CHECK_STRATEGY
 40813                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40814                                  	;		; AL = function code: get allocation strategy
 40815                                  	;mov	bx,ax
 40816                                  	;or	bx,80h
 40817                                  	;mov	ax,5801h	; DOS_SET_STRATEGY
 40818                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40819                                  	;		; AL = function code: set allocation strategy
 40820                                  	;retn
 40821                                  
 40822                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 40823                                  ;set_umblink:
 40824                                  	;mov	ax,5803h	; DOS_SET_UMBLINK
 40825                                  	;mov	bx,1
 40826                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40827                                  	;		; AL = function code: (DOS 5beta) set UMB link state
 40828                                  	;retn
 40829                                  
 40830                                  ; ---------------------------------------------------------------------------
 40831                                  
 40832                                  ;***	LhCopyFilename -- copy filename from command line to buffer
 40833                                  ;
 40834                                  ;	ENTRY	ds:si points at primary argument (filename)
 40835                                  ;
 40836                                  ;	EXIT	Carry set -- filename has wildcards. In this event, DX will
 40837                                  ;				already contain an appropriate error number.
 40838                                  ;		Carry clear -- filename has been copied as needed; DS:SI
 40839                                  ;				points to first character (most likely space)
 40840                                  ;				after filename.
 40841                                  ;
 40842                                  ;	USED	ax, si
 40843                                  ;
 40844                                  ;	EFFECTS
 40845                                  ;		ExecPath contains the filename
 40846                                  ;
 40847                                  ; If there are any wildcards in the filename, then we have an error
 40848                                  ; ---------------------------------------------------------------------------
 40849                                  
 40850                                  ; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40851                                  %if 0
 40852                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40853                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5984h
 40854                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 40855                                  LhCopyFilename:
 40856                                  	push	ds
 40857                                  	push	si
 40858                                  	push	di
 40859                                  	lds	si,[bx+4]
 40860                                  	mov	di,EXECPATH
 40861                                  lhcpfn1:
 40862                                  	lodsb
 40863                                  	cmp	al,2Ah ; '*'
 40864                                  	jz	short lhfilerr
 40865                                  	cmp	al,3Fh ; '?'
 40866                                  	jz	short lhfilerr
 40867                                  	stosb
 40868                                  	or	al,al
 40869                                  	jnz	short lhcpfn1
 40870                                  	; 14/04/2023
 40871                                  	; cf = 0
 40872                                  	;clc
 40873                                  lhfilerr2:
 40874                                  	pop	di
 40875                                  	pop	si
 40876                                  	pop	ds
 40877                                  	retn
 40878                                  lhfilerr:
 40879                                  	mov	dx,LhInvFil_Ptr
 40880                                  	stc
 40881                                  	jmp	short lhfilerr2
 40882                                  
 40883                                  %endif
 40884                                  
 40885                                  	; 16/06/2023 - Retro DOS v4.2 COMMAND.COM
 40886                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6881h
 40887                                  	; MSDOS 6.0
 40888                                  LhCopyFilename:
 40889                                  	;assume	ds:TRANGROUP, es:TRANGROUP
 40890                                  
 40891                                  	;mov	di,offset TRANGROUP:ExecPath
 40892 00006257 BF[8B9B]                	mov	di,EXECPATH
 40893                                  
 40894                                  	;mov	cx,0	; Copied zero characters
 40895 0000625A 29C9                    	sub	cx,cx
 40896                                  ;@@:
 40897                                  lhcpfn1:
 40898 0000625C AC                      	lodsb
 40899 0000625D 3C2A                    	cmp	al,'*'			;wildcard?
 40900 0000625F 7421                    	je	short lhfilerr		;yes, error
 40901 00006261 3C3F                    	cmp	al,'?'			;wildcard?
 40902 00006263 741D                    	je	short lhfilerr		;yes, error
 40903                                  
 40904 00006265 3C0D                    	cmp	al,0Dh			;carriage return?
 40905                                  	;jz	@f
 40906 00006267 7410                    	je	short lhcpfn2
 40907 00006269 3C2F                    	cmp	al,'/' ; SwitChar	;'/'?
 40908                                  	;jz	@f
 40909 0000626B 740C                    	je	short lhcpfn2
 40910 0000626D 08C0                    	or	al,al			;EOS?
 40911                                  	;jz	@f
 40912 0000626F 7408                    	jz	short lhcpfn2
 40913 00006271 3C20                    	cmp	al,' '			;Space?
 40914                                  	;jz	@f
 40915 00006273 7404                    	je	short lhcpfn2
 40916                                  	
 40917                                  	;or	al,al
 40918                                  	;;jz	@f
 40919                                  	;je	short lhcpfn2	
 40920                                  
 40921 00006275 AA                      	stosb				;store char
 40922 00006276 41                      	inc	cx			;And remember that we did one more
 40923                                  	;jmp	short @b
 40924 00006277 EBE3                    	jmp	short lhcpfn1
 40925                                  ;@@:
 40926                                  lhcpfn2:
 40927 00006279 30C0                    	xor	al,al			;Indicate EOS reached
 40928 0000627B AA                      	stosb				;store char
 40929                                  
 40930 0000627C 09C9                    	or	cx,cx			;If we didn't copy any characters,
 40931 0000627E 7407                    	jz	short lhmissing	; they didn't give a filename.
 40932                                  
 40933 00006280 4E                      	dec	si			;Move back to the delimiting character
 40934                                  	; cf = 0
 40935                                  	;clc				;And indicate no error occurred
 40936 00006281 C3                      	retn
 40937                                  lhfilerr:
 40938                                  	;mov	dx,offset TRANGROUP:LhInvFil_Ptr
 40939 00006282 BA[C692]                	mov	dx,LhInvFil_Ptr		;"Invalid Filename" ; M016
 40940 00006285 F9                      	stc
 40941 00006286 C3                      	retn
 40942                                  lhmissing:
 40943                                  	;mov	dx,offset TRANGROUP:ReqParmMiss
 40944 00006287 BA[CF92]                	mov	dx,ReqParmMiss		;"Required parm missing"
 40945 0000628A F9                      	stc
 40946 0000628B C3                      	retn
 40947                                  
 40948                                  ; ---------------------------------------------------------------------------
 40949                                  	
 40950                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 40951                                  %if 0
 40952                                  	; 14/04/2023
 40953                                  	; 13/04/2023
 40954                                  	; MSDOS 5.0 COMMAND.COM only !
 40955                                  	; (Procedure name is not from original Microsoft source code!)
 40956                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 40957                                  set_strategy:
 40958                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 40959                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40960                                  			; AL = function code: get allocation strategy
 40961                                  	mov	bx,ax
 40962                                  	or	bx,80h
 40963                                  	mov	ax,5801h	; DOS_SET_STRATEGY
 40964                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 40965                                  			; AL = function code: set allocation strategy
 40966                                  	retn
 40967                                  
 40968                                  ; ---------------------------------------------------------------------------
 40969                                  
 40970                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 40971                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59A6h
 40972                                  	; MSDOS 5.0 COMMAND.COM only !
 40973                                  	; (Procedure name is not from original Microsoft source code!)
 40974                                  SkipLhDelims:
 40975                                  	mov	si,81h
 40976                                  	call	scanoff
 40977                                  stfn1:
 40978                                  	lodsb
 40979                                  	call	DELIM
 40980                                  	jz	short stfn2
 40981                                  	cmp	al,0Dh
 40982                                  	jz	short stfn2
 40983                                  	cmp	al,[SWITCHAR]
 40984                                  	jnz	short stfn1
 40985                                  stfn2:
 40986                                  	dec	si
 40987                                  	retn
 40988                                  
 40989                                  %endif
 40990                                  
 40991                                  ; ---------------------------------------------------------------------------
 40992                                  
 40993                                  ;***	SetupCmdLine -- prepare command line for the program
 40994                                  ;
 40995                                  ;	ENTRY	{es/ds}:si = points just after the end of the child program
 40996                                  ;
 40997                                  ;	EXIT	None
 40998                                  ;
 40999                                  ;	USED
 41000                                  ;
 41001                                  ;	EFFECTS		
 41002                                  ;		The rest of the command line following the pgm name is 
 41003                                  ;	moved to the top of the command line buffer (at TRANGROUP:81h)
 41004                                  ;	and a new command line length is put in
 41005                                  ; ---------------------------------------------------------------------------
 41006                                  
 41007                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41008                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59BEh
 41009                                  
 41010                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41011                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68BEh
 41012                                  SetupCmdLine:
 41013                                  	;mov	di,81h
 41014 0000628C BF8100                  	mov	di,iCmdLine
 41015 0000628F 30C9                    	xor	cl,cl
 41016 00006291 FEC9                    	dec	cl			;just CR means count = 0
 41017                                  SetCmdL1:
 41018 00006293 AC                      	lodsb
 41019 00006294 AA                      	stosb
 41020 00006295 FEC1                    	inc	cl			;update count
 41021                                  	
 41022                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41023                                  	; MSDOS 6.0
 41024                                  	; 14/04/2023
 41025                                  	; * ; MSDOS 6.0 only !
 41026 00006297 08C0                    	or	al,al	; *
 41027 00006299 7404                    	jz	short SetCmdL2 ; *
 41028                                  	
 41029 0000629B 3C0D                    	cmp	al,0Dh			;carriage return?
 41030 0000629D 75F4                    	jnz	short SetCmdL1		;no, continue storing
 41031                                  SetCmdL2:
 41032 0000629F 26880E8000              	mov	[es:80h],cl		;store new cmd line length
 41033 000062A4 C3                      	retn
 41034                                  
 41035                                  ; ---------------------------------------------------------------------------
 41036                                  
 41037                                  ;***	LhSetupErrMsg -- Sets up error messages
 41038                                  ;
 41039                                  ;	ENTRY	ax = error message number
 41040                                  ;
 41041                                  ;	EXIT	None
 41042                                  ;
 41043                                  ;	USED	dx
 41044                                  ;
 41045                                  ;	EFFECTS
 41046                                  ;		Everything setup to display error message
 41047                                  ; ---------------------------------------------------------------------------
 41048                                  	
 41049                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41050                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41051                                  LhSetupErrMsg:
 41052 000062A5 C606[D88F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 41053 000062AA BA[DA8F]                	mov	dx,extend_buf_ptr
 41054 000062AD A3[DA8F]                	mov	[extend_buf_ptr],ax
 41055 000062B0 C3                      	retn
 41056                                  
 41057                                  ; ---------------------------------------------------------------------------
 41058                                  
 41059                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 41060                                  %if 0
 41061                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41062                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59DFh
 41063                                  	; MSDOS 5.0 COMMAND.COM only !
 41064                                  	; (Procedure name is not from original Microsoft source code!)
 41065                                  check_umblink:
 41066                                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 41067                                  	int	21h 	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 41068                                  			 ; AL = function code: get allocation strategy
 41069                                  	mov	bl,al
 41070                                  	mov	ax,5802h	; DOS_CHECK_UMBLINK
 41071                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 41072                                  			; AL = function code: (DOS 5beta) get UMB link state
 41073                                  	mov	bh,al
 41074                                  	xchg	ax,bx
 41075                                  	rol	al,1
 41076                                  	and	al,1
 41077                                  	shl	ah,1
 41078                                  	or	al,ah
 41079                                  	retn
 41080                                  
 41081                                  ; ---------------------------------------------------------------------------
 41082                                  
 41083                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41084                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59F7h
 41085                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 41086                                  HideUMBs:
 41087                                  	push	ds
 41088                                  	call	check_umblink
 41089                                  	mov	ds,[RESSEG]
 41090                                  	mov	[fInHigh],al
 41091                                  	or	byte [fInHigh],80h
 41092                                  	pop	ds
 41093                                  	call	set_strategy
 41094                                  	;call	set_umblink
 41095                                  	;retn
 41096                                  	; 14/04/023
 41097                                  	;jmp	short set_umblink
 41098                                  
 41099                                  ; ---------------------------------------------------------------------------
 41100                                  
 41101                                  	; 14/04/2023
 41102                                  	; 13/04/2023
 41103                                  	; MSDOS 5.0 COMMAND.COM only !
 41104                                  	; (Procedure name is not from original Microsoft source code!)
 41105                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 41106                                  set_umblink:
 41107                                  	mov	ax,5803h	; DOS_SET_UMBLINK
 41108                                  	mov	bx,1
 41109                                  	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 41110                                  			; AL = function code: (DOS 5beta) set UMB link state
 41111                                  	retn
 41112                                  %endif
 41113                                  
 41114                                  ; ---------------------------------------------------------------------------
 41115                                  
 41116                                  ;***	SetupPath -- Do path search for the file to be executed
 41117                                  ;
 41118                                  ;	ENTRY	None
 41119                                  ;
 41120                                  ;	EXIT	Carry set if file not found or not executable file
 41121                                  ;
 41122                                  ;	EFFECTS
 41123                                  ;		ExecPath contains the full path of the file to be executed
 41124                                  ; ---------------------------------------------------------------------------
 41125                                  
 41126                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41127                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A0Fh
 41128                                  
 41129                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41130                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:68E3h
 41131                                  SetupPath:
 41132                                  
 41133                                  ;Juggle around the argv pointers to make argv[1] into argv[0]. This is 
 41134                                  ;because the path search routine that we are about to invoke expects the
 41135                                  ;filename to search for to be argv[0].
 41136                                  ;
 41137                                  ;If our new argv[0] starts with a switcharacter, it's an option... skip right
 41138                                  ;over it by doing the whole move again (smaller, of course, this time).
 41139                                  
 41140                                  
 41141                                  	;mov	ax,arg.argvcnt		;total number of arguments
 41142                                  	; 14/04/2023
 41143                                  	;mov	ax,[ARG_ARGVCNT]
 41144 000062B1 A1[80A2]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 41145                                  
 41146 000062B4 48                      	dec	ax			;less one - skip "LoadHigh"
 41147                                  	;mov	bx,SIZE Argv_ele
 41148 000062B5 BB0B00                  	mov	bx,ARGV_ELE.SIZE ; 11
 41149                                  	;mov	bx,11
 41150 000062B8 F7E3                    	mul	bx			;dx:ax = size of argument lists
 41151                                  
 41152                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 41153                                  	; --------------------------------------
 41154                                  	; MSDOS 6.0
 41155                                  
 41156                                  	;getdata cl,fm_argc		;CL = number of arguments to skip
 41157 000062BA 1E                      	push	ds              ; getdata (macro)
 41158 000062BB 8E1E[639C]              	mov	ds,[RESSEG]
 41159 000062BF 8A0E[3705]              	mov	cl,[fm_argc]
 41160 000062C3 1F                      	pop	ds
 41161                                  	
 41162 000062C4 FEC1                    	inc	cl			;Skip one arg, to get over "lh"
 41163                                  
 41164                                  ;Move argv[1]..argv[n] to argv[0]..argv[n-1]. Here, AX == the overall size
 41165                                  ;of the argument lists.
 41166                                  
 41167                                  argloop:
 41168 000062C6 E31B                    	jcxz	argdone			;If we've finished copying args, leave.
 41169                                  
 41170 000062C8 49                      	dec	cx			;One less time we'll go through this.
 41171                                  
 41172 000062C9 50                      	push	ax			;Copy ( size of remaining list ) bytes
 41173 000062CA 51                      	push	cx			;And remember how many args there were
 41174                                  
 41175                                  	; --------------------------------------
 41176                                  
 41177                                  	; 14/04/2023
 41178 000062CB 89C1                    	mov	cx,ax			;size to move
 41179                                  
 41180                                  	;mov	di,offset TRANGROUP:Arg	;Copy TO argv[0]
 41181                                  	;mov	di,ARG_ARGV ;mov di,[ARG+ARG_UNIT.argv] ; mov di,[ARG]
 41182 000062CD BF[C09F]                	mov	di,ARG	
 41183 000062D0 89FE                    	mov	si,di			;
 41184                                  	;add	si,SIZE Argv_ele	;Copy FROM argv[1]
 41185 000062D2 83C60B                  	add	si,ARGV_ELE.SIZE ; 11
 41186                                  	
 41187                                  	; 14/04/2023
 41188                                  	;mov	cx,ax
 41189                                  
 41190 000062D5 FC                      	cld
 41191 000062D6 F3A4                    	rep	movsb			;Move the argument list
 41192                                  	
 41193                                  	;dec	arg.argvcnt		;Fake one less argument, and
 41194                                  	;dec	word [ARG_ARGVCNT]
 41195 000062D8 FF0E[80A2]              	dec	word [ARG+ARG_UNIT.argvcnt]
 41196                                  
 41197                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 41198                                  	; --------------------------------------
 41199                                  	; MSDOS 6.0
 41200                                  	
 41201                                  	;sub	ax,ARGV_ELE.SIZE ; 11	;there's one argument we don't copy.
 41202                                  
 41203 000062DC 59                      	pop	cx
 41204 000062DD 58                      	pop	ax			;Restore the size of the arg list
 41205                                  	; 17/06/2023
 41206                                  	;jmp	short argloop
 41207                                  	
 41208                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41209 000062DE 83E80B                  	sub	ax,ARGV_ELE.SIZE ; 11
 41210 000062E1 77E3                    	ja	short argloop
 41211                                  	; --------------------------------------
 41212                                  	
 41213                                  ; Done moving... argv[0] is now the child program's name, and [1] its first arg
 41214                                  
 41215                                  	; 17/06/2023
 41216                                  argdone:
 41217 000062E3 E8BAD2                  	call	path_search		;look in the path
 41218                                  
 41219                                  ;ax = 0, no file found
 41220                                  ;ax < 4, batch file found -- cant be executed
 41221                                  ;ax = 4,8 => .com or .exe file found
 41222                                  
 41223 000062E6 09C0                    	or	ax,ax			;any file found?
 41224 000062E8 740B                    	jz	short no_exec_file	;no, error
 41225                                  
 41226 000062EA 83F804                  	cmp	ax,4			;executable file?
 41227                                  	;jl	short no_exec_bat	;no, indicate fail ; M016
 41228                                  	;clc
 41229                                  	;retn
 41230                                  	; 14/04/2023
 41231 000062ED 7201                    	jb	short no_exec_bat
 41232 000062EF C3                      	retn 
 41233                                  
 41234                                  no_exec_bat:
 41235 000062F0 BA[C392]                	mov	dx,NoExecBat_Ptr	;Setup message ptr ; M016
 41236 000062F3 EB06                    	jmp	short lhsp_errret	;return error; M016
 41237                                  
 41238                                  no_exec_file:
 41239 000062F5 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 41240 000062F8 E8AAFF                  	call	LhSetupErrMsg		;setup error message
 41241                                  lhsp_errret:				; M016
 41242 000062FB F9                      	stc
 41243 000062FC C3                      	retn
 41244                                  
 41245                                  ;============================================================================
 41246                                  ; COMMAND.SKL (MESSAGE.SKL), BUILDMSG.C, MSDOS 6.0, 1991
 41247                                  ;============================================================================
 41248                                  ; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41249                                  
 41250                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A44h
 41251                                  
 41252                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41253                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6930h
 41254                                  
 41255                                  	; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 41256                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:67ADh
 41257                                  
 41258                                  ; ---------------------------------------------------------------------------
 41259                                  ; Class 3 message table/structure
 41260                                  ; ---------------------------------------------------------------------------
 41261                                  
 41262                                  $M_CLASS_3_STRUC:
 41263 000062FD FF                      	db 0FFh			; $M_CLASS_ID (Class identifer)
 41264                                  	;dw 5			; $M_COMMAND_VER (COMMAND.COM version)
 41265                                  	;db 162			; Total number of messages
 41266                                  	; 17/06/2023
 41267                                  	;dw 1606h		; MSDOS 6.22 COMMAND.COM (hb=22,lb=6)
 41268                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
 41269 000062FE 070A                    	dw 0A07h  ; PCDOS 7.1 COMMAND.COM
 41270                                  	;db 187			; Total number of messages
 41271                                  	; 02/08/2024
 41272 00006300 B7                      	db 183	; PCDOS 7.1 COMMAND.COM
 41273                                  $M_ID_3_1:
 41274                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:5A48h)
 41275 00006301 FC03                    	dw 1020			; Message Number = 1020
 41276                                  	;dw MSG_1020-$+2 ; 288h	; Message offset from message number (5A48h+0288h=5CD0h)
 41277                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41278 00006303 DC02                    	dw MSG_1020-$+2 ; 2ECh	; Message offset from message number (6934h+02ECh=6C20h)
 41279                                  			; 732	; 67B1h+2DCh=6A8Dh ; 06/08/2024 - PCDOS 7.1 COMMAND.COM 
 41280                                  $M_ID_3_2:
 41281 00006305 F703                    	dw 1015			; Message Number = 1015
 41282                                  	;dw MSG_1015-$+2 ; 294h ; Message offset from message number (5A4Ch+0294h=5CE0h)
 41283                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41284 00006307 E802                    	dw MSG_1015-$+2 ; 2F8h	; Message offset from message number (6938h+02F8h=6C30h)
 41285                                  			; 744	; 67B5h+2E8h=6A9Dh ; 06/08/2024 - PCDOS 7.1 COMMAND.COM 
 41286                                  $M_ID_3_3:	; 26/04/2023
 41287                                  			; 17/06/2023
 41288                                  			   ; 06/08/2024
 41289 00006309 EC030803                	dw 1004,MSG_1004-$ ; 776	
 41290 0000630D 02041E03                	dw 1026,MSG_1026-$ ; 798
 41291 00006311 07042E03                	dw 1031,MSG_1031-$ ; 814
 41292 00006315 0B043903                	dw 1035,MSG_1035-$ ; 825
 41293 00006319 26044403                	dw 1062,MSG_1062-$ ; 836
 41294 0000631D 04044F03                	dw 1028,MSG_1028-$ ; 847
 41295 00006321 15046D03                	dw 1045,MSG_1045-$ ; 877
 41296 00006325 11048603                	dw 1041,MSG_1041-$ ; 902
 41297 00006329 1204A403                	dw 1042,MSG_1042-$ ; 932
 41298                                  $M_ID_3_12:
 41299 0000632D 1304BB03                	dw 1043,MSG_1043-$ ; 955
 41300 00006331 EA03D703                	dw 1002,MSG_1002-$ ; 983
 41301 00006335 EB03FB03                	dw 1003,MSG_1003-$ ; 1019
 41302 00006339 EF031304                	dw 1007,MSG_1007-$ ; 1043
 41303 0000633D F0032A04                	dw 1008,MSG_1008-$ ; 1066
 41304 00006341 F1033C04                	dw 1009,MSG_1009-$ ; 1084
 41305 00006345 F2034D04                	dw 1010,MSG_1010-$ ; 1101
 41306 00006349 F3036904                	dw 1011,MSG_1011-$ ; 1129
 41307                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 41308                                  %if 1
 41309 0000634D F4038004                	dw 1012,MSG_1012-$ ; 1152
 41310                                  %endif
 41311 00006351 F6039904                	dw 1014,MSG_1014-$ ; 1177
 41312 00006355 F803A604                	dw 1016,MSG_1016-$ ; 1190
 41313 00006359 F903CC04                	dw 1017,MSG_1017-$ ; 1228
 41314 0000635D FA03ED04                	dw 1018,MSG_1018-$ ; 1261
 41315                                  $M_ID_3_24:
 41316 00006361 FB03FD04                	dw 1019,MSG_1019-$ ; 1277
 41317 00006365 FD030505                	dw 1021,MSG_1021-$ ; 1285
 41318 00006369 FE031F05                	dw 1022,MSG_1022-$ ; 1311
 41319 0000636D FF034205                	dw 1023,MSG_1023-$ ; 1346
 41320 00006371 00046A05                	dw 1024,MSG_1024-$ ; 1386
 41321 00006375 01047D05                	dw 1025,MSG_1025-$ ; 1405
 41322 00006379 03049105                	dw 1027,MSG_1027-$ ; 1425
 41323 0000637D 0504AE05                	dw 1029,MSG_1029-$ ; 1454
 41324 00006381 0604BC05                	dw 1030,MSG_1030-$ ; 1468
 41325 00006385 0804C705                	dw 1032,MSG_1032-$ ; 1479
 41326 00006389 0904DB05                	dw 1033,MSG_1033-$ ; 1499
 41327 0000638D 0A04ED05                	dw 1034,MSG_1034-$ ; 1517
 41328 00006391 0C04FF05                	dw 1036,MSG_1036-$ ; 1535
 41329 00006395 0D041006                	dw 1037,MSG_1037-$ ; 1552
 41330 00006399 0E041D06                	dw 1038,MSG_1038-$ ; 1565
 41331 0000639D 0F042C06                	dw 1039,MSG_1039-$ ; 1580
 41332                                  $M_ID_3_40:
 41333 000063A1 10046506                	dw 1040,MSG_1040-$ ; 1637
 41334 000063A5 14047406                	dw 1044,MSG_1044-$ ; 1652
 41335 000063A9 16048406                	dw 1046,MSG_1046-$ ; 1668
 41336 000063AD 1704B706                	dw 1047,MSG_1047-$ ; 1719
 41337 000063B1 1804CC06                	dw 1048,MSG_1048-$ ; 1740
 41338 000063B5 1904DA06                	dw 1049,MSG_1049-$ ; 1754
 41339 000063B9 1A04E006                	dw 1050,MSG_1050-$ ; 1760
 41340 000063BD 1B04FB06                	dw 1051,MSG_1051-$ ; 1787
 41341 000063C1 1C040807                	dw 1052,MSG_1052-$ ; 1800
 41342 000063C5 1D041B07                	dw 1053,MSG_1053-$ ; 1819
 41343 000063C9 1E043D07                	dw 1054,MSG_1054-$ ; 1853
 41344                                  $M_ID_3_51:
 41345 000063CD 1F046007                	dw 1055,MSG_1055-$ ; 1888
 41346 000063D1 20046A07                	dw 1056,MSG_1056-$ ; 1898
 41347 000063D5 21047507                	dw 1057,MSG_1057-$ ; 1909
 41348 000063D9 23047E07                	dw 1059,MSG_1059-$ ; 1918
 41349 000063DD 24047F07                	dw 1060,MSG_1060-$ ; 1919
 41350 000063E1 25047F07                	dw 1061,MSG_1061-$ ; 1919
 41351 000063E5 27049507                	dw 1063,MSG_1063-$ ; 1941
 41352 000063E9 28049407                	dw 1064,MSG_1064-$ ; 1940
 41353 000063ED 29049307                	dw 1065,MSG_1065-$ ; 1939
 41354 000063F1 2A049207                	dw 1066,MSG_1066-$ ; 1938
 41355 000063F5 2B049107                	dw 1067,MSG_1067-$ ; 1937
 41356 000063F9 2C048F07                	dw 1068,MSG_1068-$ ; 1935
 41357 000063FD 2D049807                	dw 1069,MSG_1069-$ ; 1944
 41358 00006401 2E049807                	dw 1070,MSG_1070-$ ; 1944
 41359 00006405 2F049707                	dw 1071,MSG_1071-$ ; 1943
 41360 00006409 30049607                	dw 1072,MSG_1072-$ ; 1942
 41361                                  $M_ID_3_67:
 41362 0000640D 31049C07                	dw 1073,MSG_1073-$ ; 1948
 41363 00006411 3204A207                	dw 1074,MSG_1074-$ ; 1954
 41364 00006415 3304A807                	dw 1075,MSG_1075-$ ; 1960
 41365 00006419 3404AA07                	dw 1076,MSG_1076-$ ; 1962
 41366 0000641D 3504A907                	dw 1077,MSG_1077-$ ; 1961
 41367 00006421 3604AD07                	dw 1078,MSG_1078-$ ; 1965
 41368 00006425 3704C407                	dw 1079,MSG_1079-$ ; 1988
 41369 00006429 3804CB07                	dw 1080,MSG_1080-$ ; 1995
 41370 0000642D 3904DD07                	dw 1081,MSG_1081-$ ; 2013
 41371                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41372 00006431 3A040408                	dw 1082,MSG_1082-$ ; 2052	
 41373 00006435 3B040C08                	dw 1083,MSG_1083-$ ; 2060	
 41374                                  	;
 41375 00006439 3C040B08                	dw 1084,MSG_1084-$ ; 2059
 41376 0000643D 42041708                	dw 1090,MSG_1090-$ ; 2071
 41377 00006441 43042108                	dw 1091,MSG_1091-$ ; 2081
 41378 00006445 44042B08                	dw 1092,MSG_1092-$ ; 2091
 41379 00006449 45043508                	dw 1093,MSG_1093-$ ; 2101
 41380 0000644D 46044608                	dw 1094,MSG_1094-$ ; 2118
 41381 00006451 47045F08                	dw 1095,MSG_1095-$ ; 2143
 41382 00006455 48047808                	dw 1096,MSG_1096-$ ; 2168
 41383                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41384 00006459 4904A508                	dw 1097,MSG_1097-$ ; 2213
 41385 0000645D 4A04BE08                	dw 1098,MSG_1098-$ ; 2238
 41386 00006461 4B04D708                	dw 1099,MSG_1099-$ ; 2263
 41387 00006465 4C04E908                	dw 1100,MSG_1100-$ ; 2281
 41388                                  
 41389                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41390                                  %if 0
 41391                                  	dw 1101,MSG_1101-$ ; 2302
 41392                                  	dw 1102,MSG_1102-$ ; 2313
 41393                                  %endif
 41394 00006469 4F040B09                	dw 1103,MSG_1103-$ ; 2315
 41395 0000646D 50042209                	dw 1104,MSG_1104-$ ; 2338
 41396                                  
 41397                                  	; TRANGROUP:6AA8h ; MSDOS 6.22
 41398                                  	; TRANGROUP:6921h ; PCDOS 7.1
 41399                                  
 41400 00006471 51042209                	dw 1105,MSG_1105-$ ; 2338  ; TRANGROUP:7243h ; PCDOS 7.1
 41401                                  
 41402                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41403                                  %if 1
 41404 00006475 52042909                	dw 1106,MSG_1106-$ ; 2345
 41405                                  %endif
 41406                                  
 41407                                  ;$M_ID_3_84:
 41408                                  $M_ID_3_95: ; 17/06/2023	
 41409 00006479 B0043709                	dw 1200,MSG_1200-$ ; 2359
 41410 0000647D 14053409                	dw 1300,MSG_1300-$ ; 2356
 41411 00006481 2805B709                	dw 1320,MSG_1320-$ ; 2487
 41412 00006485 2905F309                	dw 1321,MSG_1321-$ ; 2547
 41413 00006489 3C05600A                	dw 1340,MSG_1340-$ ; 2656
 41414 0000648D 3D05B80A                	dw 1341,MSG_1341-$ ; 2744
 41415 00006491 3E05170B                	dw 1342,MSG_1342-$ ; 2839
 41416 00006495 5005A50B                	dw 1360,MSG_1360-$ ; 2981
 41417 00006499 7805BD0B                	dw 1400,MSG_1400-$ ; 3005
 41418 0000649D 7905560C                	dw 1401,MSG_1401-$ ; 3158
 41419 000064A1 7A05BB0C                	dw 1402,MSG_1402-$ ; 3259
 41420 000064A5 7B052E0D                	dw 1403,MSG_1403-$ ; 3374
 41421 000064A9 7C056A0D                	dw 1404,MSG_1404-$ ; 3434 ; TRANGROUP:6ADCh ; MSDOS 6.22
 41422                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41423 000064AD 7D05DB0D                	dw 1405,MSG_1405-$ ; 3547 ; TRANGROUP:6AE0h ; MSDOS 6.22
 41424                                  		     ; 06/08/2024 ; TRANGROUP:695Dh ; PCDOS 7.1 
 41425 000064B1 7E054A0E                	dw 1406,MSG_1406-$ ; 3658
 41426 000064B5 7F05890E                	dw 1407,MSG_1407-$ ; 3721 ; (MSG_1404 for MSDOS 5.0 COMMAND.COM)
 41427                                  	;
 41428 000064B9 8C050D0F                	dw 1420,MSG_1420-$ ; 3853
 41429 000064BD A005940F                	dw 1440,MSG_1440-$ ; 3988
 41430 000064C1 A105B70F                	dw 1441,MSG_1441-$ ; 4023
 41431                                  ;$M_ID_3_100:
 41432                                  $M_ID_3_114: ; 17/06/2023
 41433 000064C5 B4053710                	dw 1460,MSG_1460-$ ; 4151
 41434 000064C9 B5059810                	dw 1461,MSG_1461-$ ; 4248
 41435 000064CD B6051811                	dw 1462,MSG_1462-$ ; 4376
 41436 000064D1 C8056411                	dw 1480,MSG_1480-$ ; 4452
 41437 000064D5 C9050012                	dw 1481,MSG_1481-$ ; 4608
 41438 000064D9 CA054A12                	dw 1482,MSG_1482-$ ; 4682
 41439 000064DD CB05A212                	dw 1483,MSG_1483-$ ; 4770
 41440 000064E1 CC051D13                	dw 1484,MSG_1484-$ ; 4893
 41441 000064E5 CD059613                	dw 1485,MSG_1485-$ ; 5014
 41442 000064E9 CE052814                	dw 1486,MSG_1486-$ ; 5160
 41443 000064ED CF05B414                	dw 1487,MSG_1487-$ ; 5300
 41444 000064F1 D0050F15                	dw 1488,MSG_1488-$ ; 5391
 41445                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41446 000064F5 D1059E15                	dw 1489,MSG_1489-$ ; 5534
 41447                                  
 41448                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41449                                  %if 0
 41450                                  	dw 1490,MSG_1490-$ ; 5505
 41451                                  	dw 1491,MSG_1491-$ ; 5529
 41452                                  	dw 1492,MSG_1492-$ ; 5608
 41453                                  	dw 1493,MSG_1493-$ ; 5751
 41454                                  	dw 1494,MSG_1494-$ ; 5770
 41455                                  %endif
 41456                                  
 41457                                  ;$M_ID_3_112:
 41458                                  $M_ID_3_132: ; 17/06/2023
 41459 000064F9 DC05EB15                	dw 1500,MSG_1500-$ ; 5611
 41460 000064FD F0052616                	dw 1520,MSG_1520-$ ; 5670
 41461 00006501 04066016                	dw 1540,MSG_1540-$ ; 5728
 41462 00006505 0506BA16                	dw 1541,MSG_1541-$ ; 5818
 41463 00006509 06062217                	dw 1542,MSG_1542-$ ; 5922
 41464 0000650D 18065A17                	dw 1560,MSG_1560-$ ; 5978
 41465 00006511 19068E17                	dw 1561,MSG_1561-$ ; 6030
 41466 00006515 1A060718                	dw 1562,MSG_1562-$ ; 6151
 41467 00006519 1B063318                	dw 1563,MSG_1563-$ ; 6195
 41468 0000651D 1C065A18                	dw 1564,MSG_1564-$ ; 6234
 41469 00006521 1D069418                	dw 1565,MSG_1565-$ ; 6292
 41470 00006525 1E06C518                	dw 1566,MSG_1566-$ ; 6341
 41471 00006529 1F06EE18                	dw 1567,MSG_1567-$ ; 6382
 41472 0000652D 20066419                	dw 1568,MSG_1568-$ ; 6500
 41473 00006531 2C06AD19                	dw 1580,MSG_1580-$ ; 6573
 41474                                  ;$M_ID_3_127:
 41475                                  $M_ID_3_147: ; 17/06/2023
 41476 00006535 4006F119                	dw 1600,MSG_1600-$ ; 6641
 41477 00006539 41060A1A                	dw 1601,MSG_1601-$ ; 6666
 41478 0000653D 42065A1A                	dw 1602,MSG_1602-$ ; 6746
 41479 00006541 5406F71A                	dw 1620,MSG_1620-$ ; 6903
 41480 00006545 55064B1B                	dw 1621,MSG_1621-$ ; 6987
 41481 00006549 5606C91B                	dw 1622,MSG_1622-$ ; 7113
 41482 0000654D 6806111C                	dw 1640,MSG_1640-$ ; 7185
 41483 00006551 6906421C                	dw 1641,MSG_1641-$ ; 7234
 41484 00006555 7C06C21C                	dw 1660,MSG_1660-$ ; 7362
 41485 00006559 9006051D                	dw 1680,MSG_1680-$ ; 7429
 41486 0000655D A406271D                	dw 1700,MSG_1700-$ ; 7463
 41487 00006561 B806D51D                	dw 1720,MSG_1720-$ ; 7637
 41488 00006565 CC06241E                	dw 1740,MSG_1740-$ ; 7716
 41489 00006569 CD067C1E                	dw 1741,MSG_1741-$ ; 7804
 41490 0000656D E006EB1E                	dw 1760,MSG_1760-$ ; 7915
 41491 00006571 F406341F                	dw 1780,MSG_1780-$ ; 7988
 41492                                  ;$M_ID_3_143:
 41493                                  $M_ID_3_163: ; 17/06/2023
 41494 00006575 08079C1F                	dw 1800,MSG_1800-$ ; 8092
 41495 00006579 0907E61F                	dw 1801,MSG_1801-$ ; 8166
 41496 0000657D 1C073A20                	dw 1820,MSG_1820-$ ; 8250
 41497 00006581 1D077E20                	dw 1821,MSG_1821-$ ; 8318
 41498 00006585 30070521                	dw 1840,MSG_1840-$ ; 8453
 41499 00006589 44074C21                	dw 1860,MSG_1860-$ ; 8524
 41500 0000658D 4507A321                	dw 1861,MSG_1861-$ ; 8611
 41501 00006591 4607E621                	dw 1862,MSG_1862-$ ; 8678
 41502 00006595 47076022                	dw 1863,MSG_1863-$ ; 8800
 41503 00006599 4807FF22                	dw 1864,MSG_1864-$ ; 9959
 41504 0000659D 49076223                	dw 1865,MSG_1865-$ ; 9058
 41505 000065A1 4A07C923                	dw 1866,MSG_1866-$ ; 9161
 41506 000065A5 58072D24                	dw 1880,MSG_1880-$ ; 9261
 41507 000065A9 5907A124                	dw 1881,MSG_1881-$ ; 9377
 41508 000065AD 5A071B25                	dw 1882,MSG_1882-$ ; 9499
 41509 000065B1 5B076E25                	dw 1883,MSG_1883-$ ; 9582
 41510 000065B5 6C070D26                	dw 1900,MSG_1900-$ ; 9741
 41511 000065B9 80075226                	dw 1920,MSG_1920-$ ; 9810
 41512 000065BD 81077E26                	dw 1921,MSG_1921-$ ; 9854
 41513                                  ;$M_ID_3_162:
 41514                                  $M_ID_3_182: ; 17/06/2023
 41515 000065C1 82071327                	dw 1922,MSG_1922-$ ; 10003
 41516                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 41517 000065C5 8307C627                	dw 1923,MSG_1923-$ ; 10182
 41518 000065C9 84074828                	dw 1924,MSG_1924-$ ; 10312
 41519 000065CD 8507C028                	dw 1925,MSG_1925-$ ; 10432
 41520 000065D1 8607BF28                	dw 1926,MSG_1926-$ ; 10431
 41521                                  $M_ID_3_187:	; 17/06/2023
 41522 000065D5 8707                    	dw 1927	; 19/06/2023	; Message Number = 1927
 41523 000065D7 1329                    	dw MSG_1927-$+2	; 10515	; Message offset from message number
 41524                                  		; MSDOS 6.22	; (Msg addr: 6C1Ch+2A1Eh = TRANGROUP:963Ah)
 41525                                  ; 06/08/2024	; PCDOS 7.1	; (Msg addr: 6A85h+2913h = TRANGROUP:9398h)
 41526                                  
 41527                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41528                                  %if 1
 41529                                  $M_ID_3_183:
 41530 000065D9 53046A29                	dw 1107,MSG_1107-$ ; 10602 *
 41531                                  			; (Msg addr: 6A89h+296Ah = TRANGROUP:96F3h)	
 41532                                  %endif
 41533                                  
 41534                                  ; ---------------------------------------------------------------------------
 41535                                  ; Class 3 messages
 41536                                  ; ---------------------------------------------------------------------------
 41537                                  	
 41538                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 41539                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5CD0h
 41540                                  
 41541                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41542                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:6C20h
 41543                                  
 41544                                  	; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 41545                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:6A8Dh
 41546                                  
 41547                                  MSG_1020:	; COMMON4
 41548 000065DD 0F                      	db 15	; (MSG_1015-MSG_1020)-1
 41549 000065DE 253120627974657320-     	db '%1 bytes free',0Dh,0Ah
 41549 000065E7 667265650D0A       
 41550                                  MSG_1015:	; COMMON18
 41551 000065ED 23                      	db 35
 41552 000065EE 46696C652063616E6E-     	db 'File cannot be copied onto itself',0Dh,0Ah
 41552 000065F7 6F7420626520636F70-
 41552 00006600 696564206F6E746F20-
 41552 00006609 697473656C660D0A   
 41553                                  MSG_1004:	; COMMON20
 41554 00006611 19                      	db 25
 41555 00006612 496E73756666696369-     	db 'Insufficient disk space',0Dh,0Ah
 41555 0000661B 656E74206469736B20-
 41555 00006624 73706163650D0A     
 41556                                  MSG_1026:	; COMMON22
 41557 0000662B 13                      	db 19
 41558 0000662C 496E76616C69642063-     	db 'Invalid code page',0Dh,0Ah
 41558 00006635 6F646520706167650D-
 41558 0000663E 0A                 
 41559                                  MSG_1031:	; COMMON23
 41560 0000663F 0E                      	db 14
 41561 00006640 496E76616C69642064-     	db 'Invalid date',0Dh,0Ah
 41561 00006649 6174650D0A         
 41562                                  MSG_1035:	; COMMON24
 41563 0000664E 0E                      	db 14
 41564 0000664F 496E76616C69642074-     	db 'Invalid time',0Dh,0Ah
 41564 00006658 696D650D0A         
 41565                                  MSG_1062:	; COMMON25
 41566 0000665D 0E                      	db 14
 41567 0000665E 496E76616C69642070-     	db 'Invalid path',0Dh,0Ah
 41567 00006667 6174680D0A         
 41568                                  MSG_1028:	; COMMON28
 41569 0000666C 21                      	db 33
 41570 0000666D 507265737320616E79-     	db 'Press any key to continue . . .',0Dh,0Ah
 41570 00006676 206B657920746F2063-
 41570 0000667F 6F6E74696E7565202E-
 41570 00006688 202E202E0D0A       
 41571                                  MSG_1045:	; COMMON32
 41572 0000668E 1C                      	db 28
 41573 0000668F 556E61626C6520746F-     	db 'Unable to create directory',0Dh,0Ah
 41573 00006698 206372656174652064-
 41573 000066A1 69726563746F72790D-
 41573 000066AA 0A                 
 41574                                  MSG_1041:	; COMMON33
 41575 000066AB 21                      	db 33
 41576 000066AC 566F6C756D6520696E-     	db 'Volume in drive %1 has no label',0Dh,0Ah
 41576 000066B5 206472697665202531-
 41576 000066BE 20686173206E6F206C-
 41576 000066C7 6162656C0D0A       
 41577                                  MSG_1042:	; COMMON34
 41578 000066CD 1A                      	db 26
 41579 000066CE 566F6C756D6520696E-     	db 'Volume in drive %1 is %2',0Dh,0Ah
 41579 000066D7 206472697665202531-
 41579 000066E0 2069732025320D0A   
 41580                                  MSG_1043:	; COMMON36
 41581 000066E8 1F                      	db 31  ; (MSG_1002-MSG_1043)-1
 41582 000066E9 566F6C756D65205365-     	db 'Volume Serial Number is %1-%2',0Dh,0Ah
 41582 000066F2 7269616C204E756D62-
 41582 000066FB 65722069732025312D-
 41582 00006704 25320D0A           
 41583                                  MSG_1002:
 41584 00006708 27                              db 39
 41585 00006709 4475706C6963617465-     	db 'Duplicate file name or file not found',0Dh,0Ah
 41585 00006712 2066696C65206E616D-
 41585 0000671B 65206F722066696C65-
 41585 00006724 206E6F7420666F756E-
 41585 0000672D 640D0A             
 41586                                  MSG_1003:
 41587 00006730 1B                      	db 27
 41588 00006731 496E76616C69642070-     	db 'Invalid path or file name',0Dh,0Ah
 41588 0000673A 617468206F72206669-
 41588 00006743 6C65206E616D650D0A 
 41589                                  MSG_1007:
 41590 0000674C 1A                      	db 26
 41591 0000674D 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
 41591 00006756 7669726F6E6D656E74-
 41591 0000675F 2073706163650D0A   
 41592                                  MSG_1008:
 41593 00006767 15                      	db 21
 41594 00006768 46696C652063726561-     	db 'File creation error',0Dh,0Ah
 41594 00006771 74696F6E206572726F-
 41594 0000677A 720D0A             
 41595                                  MSG_1009:
 41596 0000677D 14                      	db 20  ; (MSG_1010-MSG_1009)-1
 41597 0000677E 42617463682066696C-     	db 'Batch file missing',0Dh,0Ah
 41597 00006787 65206D697373696E67-
 41597 00006790 0D0A               
 41598                                  MSG_1010:
 41599 00006792 1F                      	db 31
 41600 00006793 0D0A                    	db 0Dh,0Ah
 41601 00006795 496E73657274206469-     	db 'Insert disk with batch file',0Dh,0Ah
 41601 0000679E 736B20776974682062-
 41601 000067A7 617463682066696C65-
 41601 000067B0 0D0A               
 41602                                  MSG_1011:
 41603 000067B2 1A                      	db 26
 41604 000067B3 42616420636F6D6D61-     	db 'Bad command or file name',0Dh,0Ah
 41604 000067BC 6E64206F722066696C-
 41604 000067C5 65206E616D650D0A   
 41605                                  
 41606                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 41607                                  %if 1
 41608                                  MSG_1012:
 41609 000067CD 1C                      	db 28
 41610 000067CE 5245585820696E7465-     	db 'REXX interpreter not found',0Dh,0Ah	
 41610 000067D7 72707265746572206E-
 41610 000067E0 6F7420666F756E640D-
 41610 000067E9 0A                 
 41611                                  %endif
 41612                                  
 41613                                  MSG_1014:	; EXTEND5
 41614 000067EA 10                      	db 16
 41615 000067EB 416363657373206465-     	db 'Access denied ',0Dh,0Ah
 41615 000067F4 6E696564200D0A     
 41616                                  MSG_1016:
 41617 000067FB 29                      	db 41
 41618 000067FC 436F6E74656E74206F-     	db 'Content of destination lost before copy',0Dh,0Ah
 41618 00006805 662064657374696E61-
 41618 0000680E 74696F6E206C6F7374-
 41618 00006817 206265666F72652063-
 41618 00006820 6F70790D0A         
 41619                                  MSG_1017:
 41620 00006825 24                      	db 36
 41621 00006826 496E76616C69642066-     	db 'Invalid filename or file not found',0Dh,0Ah
 41621 0000682F 696C656E616D65206F-
 41621 00006838 722066696C65206E6F-
 41621 00006841 7420666F756E640D0A 
 41622                                  MSG_1018:
 41623 0000684A 13                      	db 19
 41624 0000684B 25312066696C652873-     	db '%1 file(s) copied',0Dh,0Ah
 41624 00006854 2920636F706965640D-
 41624 0000685D 0A                 
 41625                                  MSG_1019:
 41626 0000685E 0B                      	db 11
 41627 0000685F 25312066696C652873-     	db '%1 file(s) '
 41627 00006868 2920               
 41628                                  MSG_1021:	; EXTEND15
 41629 0000686A 1D                      	db 29
 41630 0000686B 496E76616C69642064-     	db 'Invalid drive specification',0Dh,0Ah
 41630 00006874 726976652073706563-
 41630 0000687D 696669636174696F6E-
 41630 00006886 0D0A               
 41631                                  MSG_1022:
 41632 00006888 26                      	db 38
 41633 00006889 436F64652070616765-     	db 'Code page %1 not prepared for system',0Dh,0Ah
 41633 00006892 202531206E6F742070-
 41633 0000689B 726570617265642066-
 41633 000068A4 6F722073797374656D-
 41633 000068AD 0D0A               
 41634                                  MSG_1023:
 41635 000068AF 2B                      	db 43
 41636 000068B0 436F64652070616765-     	db 'Code page %1 not prepared for all devices',0Dh,0Ah
 41636 000068B9 202531206E6F742070-
 41636 000068C2 726570617265642066-
 41636 000068CB 6F7220616C6C206465-
 41636 000068D4 76696365730D0A     
 41637                                  MSG_1024:
 41638 000068DB 16                      	db 22
 41639 000068DC 41637469766520636F-     	db 'Active code page: %1',0Dh,0Ah
 41639 000068E5 646520706167653A20-
 41639 000068EE 25310D0A           
 41640                                  MSG_1025:
 41641 000068F2 17                      	db 23
 41642 000068F3 4E4C5346554E43206E-     	db 'NLSFUNC not installed',0Dh,0Ah
 41642 000068FC 6F7420696E7374616C-
 41642 00006905 6C65640D0A         
 41643                                  MSG_1027:
 41644 0000690A 20                      	db 32
 41645 0000690B 43757272656E742064-     	db 'Current drive is no longer valid'
 41645 00006914 72697665206973206E-
 41645 0000691D 6F206C6F6E67657220-
 41645 00006926 76616C6964         
 41646                                  MSG_1029:
 41647 0000692B 11                      	db 17
 41648 0000692C 4C6162656C206E6F74-     	db 'Label not found',0Dh,0Ah
 41648 00006935 20666F756E640D0A   
 41649                                  MSG_1030:
 41650 0000693D 0E                      	db 14
 41651 0000693E 53796E746178206572-     	db 'Syntax error',0Dh,0Ah
 41651 00006947 726F720D0A         
 41652                                  MSG_1032:
 41653 0000694C 17                      	db 23
 41654 0000694D 43757272656E742064-     	db 'Current date is %1 %2',0Dh,0Ah
 41654 00006956 617465206973202531-
 41654 0000695F 2025320D0A         
 41655                                  MSG_1033:
 41656 00006964 15                      	db 21
 41657 00006965 53756E4D6F6E547565-     	db 'SunMonTueWedThuFriSat'
 41657 0000696E 576564546875467269-
 41657 00006977 536174             
 41658                                  MSG_1034:
 41659 0000697A 15                      	db 21
 41660 0000697B 456E746572206E6577-     	db 'Enter new date (%1): '
 41660 00006984 206461746520282531-
 41660 0000698D 293A20             
 41661                                  MSG_1036:
 41662 00006990 14                      	db 20
 41663 00006991 43757272656E742074-     	db 'Current time is %1',0Dh,0Ah
 41663 0000699A 696D65206973202531-
 41663 000069A3 0D0A               
 41664                                  MSG_1037:
 41665 000069A5 10                      	db 16
 41666 000069A6 456E746572206E6577-     	db 'Enter new time: '
 41666 000069AF 2074696D653A20     
 41667                                  MSG_1038:
 41668 000069B6 12                              db 18
 41669 000069B7 2C2020202044656C65-     	db ',    Delete (Y/N)?'
 41669 000069C0 74652028592F4E293F 
 41670                                  MSG_1039:
 41671 000069C9 3C                              db 60
 41672 000069CA 416C6C2066696C6573-     	db 'All files in directory will be deleted!',0Dh,0Ah
 41672 000069D3 20696E206469726563-
 41672 000069DC 746F72792077696C6C-
 41672 000069E5 2062652064656C6574-
 41672 000069EE 6564210D0A         
 41673 000069F3 41726520796F752073-     	db 'Are you sure (Y/N)?'
 41673 000069FC 7572652028592F4E29-
 41673 00006A05 3F                 
 41674                                  
 41675                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 41676                                  %if 0
 41677                                  MSG_1040:
 41678                                  	db 20
 41679                                  	db 'MS-DOS Version %1.%2'
 41680                                  %else
 41681                                  MSG_1040:
 41682 00006A06 12                      	db 18
 41683 00006A07 504320444F53205665-     	db 'PC DOS Version 7.1'
 41683 00006A10 7273696F6E20372E31 
 41684                                  %endif
 41685                                  
 41686                                  MSG_1044:
 41687 00006A19 13                      	db 19
 41688 00006A1A 496E76616C69642064-     	db 'Invalid directory',0Dh,0Ah
 41688 00006A23 69726563746F72790D-
 41688 00006A2C 0A                 
 41689                                  MSG_1046:
 41690 00006A2D 36                      	db 54
 41691 00006A2E 496E76616C69642070-     	db 'Invalid path, not directory,',0Dh,0Ah
 41691 00006A37 6174682C206E6F7420-
 41691 00006A40 6469726563746F7279-
 41691 00006A49 2C0D0A             
 41692 00006A4C 6F7220646972656374-     	db 'or directory not empty',0Dh,0Ah
 41692 00006A55 6F7279206E6F742065-
 41692 00006A5E 6D7074790D0A       
 41693                                  MSG_1047:
 41694 00006A64 18                      	db 24
 41695 00006A65 4D7573742073706563-     	db 'Must specify ON or OFF',0Dh,0Ah
 41695 00006A6E 696679204F4E206F72-
 41695 00006A77 204F46460D0A       
 41696                                  MSG_1048:
 41697 00006A7D 11                      	db 17
 41698 00006A7E 4469726563746F7279-     	db 'Directory of %1',0Dh,0Ah
 41698 00006A87 206F662025310D0A   
 41699                                  MSG_1049:
 41700 00006A8F 09                      	db 9
 41701 00006A90 4E6F20506174680D0A      	db 'No Path',0Dh,0Ah
 41702                                  MSG_1050:
 41703 00006A99 1E                      	db 30
 41704 00006A9A 496E76616C69642064-     	db 'Invalid drive in search path',0Dh,0Ah
 41704 00006AA3 7269766520696E2073-
 41704 00006AAC 656172636820706174-
 41704 00006AB5 680D0A             
 41705                                  MSG_1051:
 41706 00006AB8 10                      	db 16
 41707 00006AB9 496E76616C69642064-     	db 'Invalid device',0Dh,0Ah
 41707 00006AC2 65766963650D0A     
 41708                                  MSG_1052:
 41709 00006AC9 16                      	db 22
 41710 00006ACA 464F522063616E6E6F-     	db 'FOR cannot be nested',0Dh,0Ah
 41710 00006AD3 74206265206E657374-
 41710 00006ADC 65640D0A           
 41711                                  MSG_1053:
 41712 00006AE0 25                      	db 37
 41713 00006AE1 496E7465726D656469-     	db 'Intermediate file error during pipe',0Dh,0Ah
 41713 00006AEA 6174652066696C6520-
 41713 00006AF3 6572726F7220647572-
 41713 00006AFC 696E6720706970650D-
 41713 00006B05 0A                 
 41714                                  MSG_1054:
 41715 00006B06 26                      	db 38
 41716 00006B07 43616E6E6F7420646F-     	db 'Cannot do binary reads from a device',0Dh,0Ah
 41716 00006B10 2062696E6172792072-
 41716 00006B19 656164732066726F6D-
 41716 00006B22 206120646576696365-
 41716 00006B2B 0D0A               
 41717                                  
 41718                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:6205h)
 41719                                  	; 17/06/2023
 41720                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7155h)
 41721                                  	; 06/08/2024
 41722                                  	; (PCDOS 7.1 COMMAND.COM - TRANGROUP:6FDDh)
 41723                                  MSG_1055:
 41724 00006B2D 0D                      	db 13
 41725 00006B2E 425245414B20697320-     	db 'BREAK is %1',0Dh,0Ah
 41725 00006B37 25310D0A           
 41726                                  MSG_1056:
 41727 00006B3B 0E                      	db 14
 41728 00006B3C 564552494659206973-     	db 'VERIFY is %1',0Dh,0Ah
 41728 00006B45 2025310D0A         
 41729                                  MSG_1057:
 41730 00006B4A 0C                      	db 12
 41731 00006B4B 4543484F2069732025-     	db 'ECHO is %1',0Dh,0Ah
 41731 00006B54 310D0A             
 41732                                  MSG_1059:
 41733 00006B57 04                      	db 4
 41734 00006B58 6F666600                	db 'off',0
 41735                                  MSG_1060:
 41736 00006B5C 03                      	db 3
 41737 00006B5D 6F6E00                  	db 'on',0
 41738                                  MSG_1061:
 41739 00006B60 19                      	db 25
 41740 00006B61 4572726F7220777269-     	db 'Error writing to device',0Dh,0Ah
 41740 00006B6A 74696E6720746F2064-
 41740 00006B73 65766963650D0A     
 41741                                  MSG_1063:
 41742 00006B7A 02                      	db 2
 41743 00006B7B 2531                    	db '%1'
 41744                                  MSG_1064:
 41745 00006B7D 02                      	db 2
 41746 00006B7E 2531                    	db '%1'
 41747                                  MSG_1065:
 41748 00006B80 02                      	db 2
 41749 00006B81 2531                    	db '%1'
 41750                                  MSG_1066:
 41751 00006B83 02                      	db 2
 41752 00006B84 2531                    	db '%1'
 41753                                  MSG_1067:
 41754 00006B86 01                      	db 1
 41755 00006B87 09                      	db 9
 41756                                  MSG_1068:
 41757                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 41758                                  %if 0
 41759                                  	db 10
 41760                                  	db ' <DIR>    '
 41761                                  %else
 41762 00006B88 0C                      	db 12
 41763 00006B89 203C4449523E202020-     	db ' <DIR>      '
 41763 00006B92 202020             
 41764                                  %endif
 41765                                  MSG_1069:
 41766 00006B95 03                      	db 3
 41767 00006B96 082008                  	db 8, 20h, 8
 41768                                  MSG_1070:	; CRLF
 41769 00006B99 02                      	db 2
 41770 00006B9A 0D                      	db 0Dh
 41771 00006B9B 0A                      	db 0Ah
 41772                                  MSG_1071:
 41773 00006B9C 02                      	db 2
 41774 00006B9D 2531                    	db '%1'
 41775                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 41776                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:71C5h
 41777                                  MSG_1072:
 41778                                  	;db 8
 41779                                  	;db 'mm-dd-yy'
 41780 00006B9F 09                      	db 9
 41781 00006BA0 6D6D2D64642D797900      	db 'mm-dd-yy',0
 41782                                  MSG_1073:
 41783                                  	;db 8
 41784                                  	;db 'dd-mm-yy'
 41785 00006BA9 09                      	db 9
 41786 00006BAA 64642D6D6D2D797900      	db 'dd-mm-yy',0
 41787                                  MSG_1074:
 41788                                  	;db 8
 41789                                  	;db 'yy-mm-dd'
 41790 00006BB3 09                      	db 9
 41791 00006BB4 79792D6D6D2D646400      	db 'yy-mm-dd',0
 41792                                  MSG_1075:
 41793 00006BBD 05                      	db 5
 41794 00006BBE 2531202532              	db '%1 %2'
 41795                                  MSG_1076:
 41796 00006BC3 02                      	db 2
 41797 00006BC4 2531                    	db '%1'
 41798                                  MSG_1077:
 41799 00006BC6 07                      	db 7
 41800 00006BC7 20253120202532          	db ' %1  %2'
 41801                                  MSG_1078:
 41802 00006BCE 1A                      	db 26
 41803 00006BCF 4469726563746F7279-     	db 'Directory already exists',0Dh,0Ah
 41803 00006BD8 20616C726561647920-
 41803 00006BE1 6578697374730D0A   
 41804                                  MSG_1079:
 41805 00006BE9 0A                      	db 10
 41806 00006BEA 25312062797465730D-     	db '%1 bytes',0Dh,0Ah
 41806 00006BF3 0A                 
 41807                                  MSG_1080:
 41808 00006BF4 15                      	db 21
 41809 00006BF5 546F74616C2066696C-     	db 'Total files listed:',0Dh,0Ah
 41809 00006BFE 6573206C6973746564-
 41809 00006C07 3A0D0A             
 41810                                  MSG_1081:
 41811 00006C0A 2A                      	db 42
 41812 00006C0B 284572726F72206F63-     	db '(Error occurred in environment variable)',0Dh,0Ah
 41812 00006C14 63757272656420696E-
 41812 00006C1D 20656E7669726F6E6D-
 41812 00006C26 656E74207661726961-
 41812 00006C2F 626C65290D0A       
 41813                                  	;
 41814                                  ; 06/08/2024 -Retro DOS 5.0 COMMAND.COM
 41815                                  %if 0
 41816                                  	; 17/06/2023 - Retro DOS 4.2 COMMAND.COM
 41817                                  MSG_1082:
 41818                                          db 7
 41819                                  	db ' [Y/N]?'
 41820                                  %else
 41821                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 41822                                  MSG_1082:
 41823 00006C35 0B                              db 11
 41824 00006C36 205B592C4E2C455343-     	db ' [Y,N,ESC]?'
 41824 00006C3F 5D3F               
 41825                                  %endif
 41826                                  	;
 41827                                  MSG_1083:
 41828 00006C41 02                      	db 2
 41829 00006C42 594E                    	db 'YN'
 41830                                  	;
 41831                                  MSG_1084:
 41832 00006C44 0F                      	db 15
 41833 00006C45 28636F6E74696E7569-     	db '(continuing %1)'
 41833 00006C4E 6E6720253129       
 41834                                  MSG_1090:
 41835 00006C54 0D                      	db 13
 41836 00006C55 5265766973696F6E20-     	db 'Revision %1',0Dh,0Ah
 41836 00006C5E 25310D0A           
 41837                                  MSG_1091:
 41838 00006C62 0D                      	db 13
 41839 00006C63 444F5320697320696E-     	db 'DOS is in ROM'
 41839 00006C6C 20524F4D           
 41840                                  MSG_1092:
 41841 00006C70 0D                      	db 13
 41842 00006C71 444F5320697320696E-     	db 'DOS is in HMA'
 41842 00006C7A 20484D41           
 41843                                  MSG_1093:
 41844 00006C7E 14                      	db 20
 41845 00006C7F 444F5320697320696E-     	db 'DOS is in low memory'
 41845 00006C88 206C6F77206D656D6F-
 41845 00006C91 7279               
 41846                                  MSG_1094:
 41847 00006C93 1C                      	db 28
 41848 00006C94 43616E6E6F74204C6F-     	db 'Cannot Loadhigh batch file',0Dh,0Ah
 41848 00006C9D 616468696768206261-
 41848 00006CA6 7463682066696C650D-
 41848 00006CAF 0A                 
 41849                                  MSG_1095:
 41850 00006CB0 1C                      	db 28
 41851 00006CB1 4C6F6164486967683A-     	db 'LoadHigh: Invalid filename',0Dh,0Ah
 41851 00006CBA 20496E76616C696420-
 41851 00006CC3 66696C656E616D650D-
 41851 00006CCC 0A                 
 41852                                  MSG_1096:
 41853 00006CCD 30                      	db 48
 41854 00006CCE 43616E6E6F74206F70-     	db 'Cannot open specified country information file',0Dh,0Ah
 41854 00006CD7 656E20737065636966-
 41854 00006CE0 69656420636F756E74-
 41854 00006CE9 727920696E666F726D-
 41854 00006CF2 6174696F6E2066696C-
 41854 00006CFB 650D0A             
 41855                                  
 41856                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41857                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7320h
 41858                                  MSG_1097:
 41859 00006CFE 1C                      	db 28
 41860 00006CFF 4C6F6164486967683A-     	db 'LoadHigh: Invalid argument',0Dh,0Ah
 41860 00006D08 20496E76616C696420-
 41860 00006D11 617267756D656E740D-
 41860 00006D1A 0A                 
 41861                                  MSG_1098:
 41862 00006D1B 1C                      	db 28
 41863 00006D1C 526571756972656420-     	db 'Required parameter missing',0Dh,0Ah
 41863 00006D25 706172616D65746572-
 41863 00006D2E 206D697373696E670D-
 41863 00006D37 0A                 
 41864                                  MSG_1099:
 41865 00006D38 15                      	db 21
 41866 00006D39 556E7265636F676E69-     	db 'Unrecognized switch',0Dh,0Ah
 41866 00006D42 7A6564207377697463-
 41866 00006D4B 680D0A             
 41867                                  MSG_1100:
 41868 00006D4E 25                      	db 37
 41869 00006D4F 412062616420554D42-     	db 'A bad UMB number has been specified',0Dh,0Ah
 41869 00006D58 206E756D6265722068-
 41869 00006D61 6173206265656E2073-
 41869 00006D6A 70656369666965640D-
 41869 00006D73 0A                 
 41870                                  
 41871                                  ; 02/08/2024 - PCDOS 7.1 COMMAND.COM
 41872                                  %if 0
 41873                                  MSG_1101:
 41874                                  	db 14
 41875                                  	db '  %1.%2 to 1.0'
 41876                                  MSG_1102:
 41877                                  	db 57
 41878                                  	db '                 %1.%2 to 1.0 average compression ratio',0Dh,0Ah
 41879                                  %endif
 41880                                  
 41881                                  MSG_1103:
 41882 00006D74 1A                      	db 26
 41883 00006D75 4F7665727772697465-     	db 'Overwrite %1 (Yes/No/All)?'
 41883 00006D7E 20253120285965732F-
 41883 00006D87 4E6F2F416C6C293F   
 41884                                  MSG_1104:
 41885 00006D8F 03                      	db 3
 41886 00006D90 59                      _Y_es:	db 'Y'
 41887 00006D91 4E                      _N_o:	db 'N'
 41888 00006D92 41                      _A_ll:	db 'A'
 41889                                  
 41890                                  ; 02/08/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 41891                                  %if 0
 41892                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:73FEh)
 41893                                  MSG_1105:
 41894                                  	db 4
 41895                                  	db '    '
 41896                                  %else
 41897                                  	; 03/08/2024
 41898                                  MSG_1105:
 41899 00006D93 0A                      	db 10
 41900 00006D94 203C4449523E202020-     	db ' <DIR>    '
 41900 00006D9D 20                 
 41901                                  
 41902                                  	; (PCDOS 7.1 COMMAND.COM - TRANGROUP:724Eh)
 41903                                  MSG_1106:
 41904 00006D9E 11                      	db 17
 41905 00006D9F 2531204B2062797465-     	db '%1 K bytes free',0Dh,0Ah
 41905 00006DA8 7320667265650D0A   
 41906                                  %endif
 41907                                  
 41908                                  	; ((MSDOS 5.0 COMMAND.COM - TRANGROUP:63C2h))
 41909                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7403h)
 41910                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:7260h
 41911                                  MSG_1200:
 41912 00006DB0 00                      	db 0	; /? unimplemented
 41913                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7404h)
 41914                                  MSG_1300:
 41915 00006DB1 86                      	db 134
 41916 00006DB2 53657473206F722063-     	db 'Sets or clears extended CTRL+C checking.',0Dh,0Ah
 41916 00006DBB 6C6561727320657874-
 41916 00006DC4 656E64656420435452-
 41916 00006DCD 4C2B4320636865636B-
 41916 00006DD6 696E672E0D0A       
 41917 00006DDC 0D0A                    	db 0Dh,0Ah
 41918 00006DDE 425245414B205B4F4E-     	db 'BREAK [ON | OFF]',0Dh,0Ah
 41918 00006DE7 207C204F46465D0D0A 
 41919 00006DF0 0D0A                    	db 0Dh,0Ah
 41920 00006DF2 547970652042524541-     	db 'Type BREAK without a parameter to display the current BREAK setting.',0Dh,0Ah
 41920 00006DFB 4B20776974686F7574-
 41920 00006E04 206120706172616D65-
 41920 00006E0D 74657220746F206469-
 41920 00006E16 73706C617920746865-
 41920 00006E1F 2063757272656E7420-
 41920 00006E28 425245414B20736574-
 41920 00006E31 74696E672E0D0A     
 41921                                  MSG_1320:
 41922 00006E38 3F                      	db 63
 41923 00006E39 446973706C61797320-     	db 'Displays or sets the active code page number.',0Dh,0Ah
 41923 00006E42 6F7220736574732074-
 41923 00006E4B 686520616374697665-
 41923 00006E54 20636F646520706167-
 41923 00006E5D 65206E756D6265722E-
 41923 00006E66 0D0A               
 41924 00006E68 0D0A                    	db 0Dh,0Ah
 41925 00006E6A 43484350205B6E6E6E-     	db 'CHCP [nnn]',0Dh,0Ah
 41925 00006E73 5D0D0A             
 41926 00006E76 0D0A                    	db 0Dh,0Ah
 41927                                  MSG_1321:
 41928 00006E78 70                      	db 112
 41929 00006E79 20206E6E6E20202053-     	db '  nnn   Specifies a code page number.',0Dh,0Ah
 41929 00006E82 706563696669657320-
 41929 00006E8B 6120636F6465207061-
 41929 00006E94 6765206E756D626572-
 41929 00006E9D 2E0D0A             
 41930 00006EA0 0D0A                    	db 0Dh,0Ah
 41931 00006EA2 547970652043484350-     	db 'Type CHCP without a parameter to display the active code page number.',0Dh,0Ah
 41931 00006EAB 20776974686F757420-
 41931 00006EB4 6120706172616D6574-
 41931 00006EBD 657220746F20646973-
 41931 00006EC6 706C61792074686520-
 41931 00006ECF 61637469766520636F-
 41931 00006ED8 64652070616765206E-
 41931 00006EE1 756D6265722E0D0A   
 41932                                  MSG_1340:
 41933 00006EE9 5B                      	db 91
 41934 00006EEA 446973706C61797320-     	db 'Displays the name of or changes the current directory.',0Dh,0Ah
 41934 00006EF3 746865206E616D6520-
 41934 00006EFC 6F66206F7220636861-
 41934 00006F05 6E6765732074686520-
 41934 00006F0E 63757272656E742064-
 41934 00006F17 69726563746F72792E-
 41934 00006F20 0D0A               
 41935 00006F22 0D0A                    	db 0Dh,0Ah
 41936 00006F24 4348444952205B6472-     	db 'CHDIR [drive:][path]',0Dh,0Ah
 41936 00006F2D 6976653A5D5B706174-
 41936 00006F36 685D0D0A           
 41937 00006F3A 43484449525B2E2E5D-     	db 'CHDIR[..]',0Dh,0Ah
 41937 00006F43 0D0A               
 41938                                  MSG_1341:
 41939 00006F45 62                      	db 98
 41940 00006F46 4344205B6472697665-     	db 'CD [drive:][path]',0Dh,0Ah
 41940 00006F4F 3A5D5B706174685D0D-
 41940 00006F58 0A                 
 41941 00006F59 43445B2E2E5D0D0A        	db 'CD[..]',0Dh,0Ah
 41942 00006F61 0D0A                    	db 0Dh,0Ah
 41943 00006F63 20202E2E2020205370-     	db '  ..   Specifies that you want to change to the parent directory.'
 41943 00006F6C 656369666965732074-
 41943 00006F75 68617420796F752077-
 41943 00006F7E 616E7420746F206368-
 41943 00006F87 616E676520746F2074-
 41943 00006F90 686520706172656E74-
 41943 00006F99 206469726563746F72-
 41943 00006FA2 792E               
 41944 00006FA4 0D0A                    	db 0Dh,0Ah
 41945 00006FA6 0D0A                    	db 0Dh,0Ah
 41946                                  MSG_1342:
 41947 00006FA8 91                      	db 145
 41948 00006FA9 547970652043442064-     	db 'Type CD drive: to display the current directory in the specified '
 41948 00006FB2 726976653A20746F20-
 41948 00006FBB 646973706C61792074-
 41948 00006FC4 68652063757272656E-
 41948 00006FCD 74206469726563746F-
 41948 00006FD6 727920696E20746865-
 41948 00006FDF 207370656369666965-
 41948 00006FE8 6420               
 41949 00006FEA 64726976652E0D0A        	db 'drive.',0Dh,0Ah
 41950 00006FF2 547970652043442077-     	db 'Type CD without parameters to display the current drive and directory.',0Dh,0Ah
 41950 00006FFB 6974686F7574207061-
 41950 00007004 72616D657465727320-
 41950 0000700D 746F20646973706C61-
 41950 00007016 792074686520637572-
 41950 0000701F 72656E742064726976-
 41950 00007028 6520616E6420646972-
 41950 00007031 6563746F72792E0D0A 
 41951                                  MSG_1360:
 41952 0000703A 1B                      	db 27
 41953 0000703B 436C65617273207468-     	db 'Clears the screen.',0Dh,0Ah
 41953 00007044 652073637265656E2E-
 41953 0000704D 0D0A               
 41954 0000704F 0D0A                    	db 0Dh,0Ah
 41955 00007051 434C530D0A              	db 'CLS',0Dh,0Ah
 41956                                  MSG_1400:
 41957                                  	;db 145
 41958                                  	;db 'Copies one or more files to another location.',0Dh,0Ah
 41959                                  	;db 0Dh,0Ah
 41960                                  	;db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 41961                                  	;db '  [/A | /B]] [/V]',0Dh,0Ah
 41962                                  	;db 0Dh,0Ah
 41963                                  	
 41964                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41965                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:76A9h)
 41966                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 41967                                  	; (PCDOS 7.1 COMMAND.COM - TRANGROUP:7506h)
 41968                                  
 41969 00007056 9C                      	db 156 ; 19/06/2023	
 41970 00007057 436F70696573206F6E-     	db 'Copies one or more files to another location.',0Dh,0Ah
 41970 00007060 65206F72206D6F7265-
 41970 00007069 2066696C657320746F-
 41970 00007072 20616E6F7468657220-
 41970 0000707B 6C6F636174696F6E2E-
 41970 00007084 0D0A               
 41971 00007086 0D0A                    	db 0Dh,0Ah
 41972 00007088 434F5059205B2F4120-     	db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 41972 00007091 7C202F425D20736F75-
 41972 0000709A 726365205B2F41207C-
 41972 000070A3 202F425D205B2B2073-
 41972 000070AC 6F75726365205B2F41-
 41972 000070B5 207C202F425D205B2B-
 41972 000070BE 202E2E2E5D5D205B64-
 41972 000070C7 657374696E6174696F-
 41972 000070D0 6E0D0A             
 41973 000070D3 20205B2F41207C202F-     	db '  [/A | /B]] [/V] [/Y | /-Y]',0Dh,0Ah
 41973 000070DC 425D5D205B2F565D20-
 41973 000070E5 5B2F59207C202F2D59-
 41973 000070EE 5D0D0A             
 41974 000070F1 0D0A                    	db 0Dh,0Ah
 41975                                  MSG_1401:
 41976 000070F3 68                      	db 104
 41977 000070F4 2020736F7572636520-     	db '  source       Specifies the file or files to be copied.',0Dh,0Ah
 41977 000070FD 202020202020537065-
 41977 00007106 636966696573207468-
 41977 0000710F 652066696C65206F72-
 41977 00007118 2066696C657320746F-
 41977 00007121 20626520636F706965-
 41977 0000712A 642E0D0A           
 41978 0000712E 20202F412020202020-     	db '  /A           Indicates an ASCII text file.',0Dh,0Ah
 41978 00007137 202020202020496E64-
 41978 00007140 69636174657320616E-
 41978 00007149 204153434949207465-
 41978 00007152 78742066696C652E0D-
 41978 0000715B 0A                 
 41979                                  MSG_1402:
 41980 0000715C 76                      	db 118
 41981 0000715D 20202F422020202020-     	db '  /B           Indicates a binary file.',0Dh,0Ah
 41981 00007166 202020202020496E64-
 41981 0000716F 696361746573206120-
 41981 00007178 62696E617279206669-
 41981 00007181 6C652E0D0A         
 41982 00007186 202064657374696E61-     	db '  destination  Specifies the directory and/or filename for the new file(s).',0Dh,0Ah
 41982 0000718F 74696F6E2020537065-
 41982 00007198 636966696573207468-
 41982 000071A1 65206469726563746F-
 41982 000071AA 727920616E642F6F72-
 41982 000071B3 2066696C656E616D65-
 41982 000071BC 20666F722074686520-
 41982 000071C5 6E65772066696C6528-
 41982 000071CE 73292E0D0A         
 41983                                  MSG_1403:	
 41984                                  	;db 65  ;  MSDOS 5.0
 41985                                  	; 17/06/2023
 41986 000071D3 3F                      	db 63 ; MSDOS 6.22	
 41987 000071D4 20202F562020202020-     	db '  /V           Verifies that new files are written correctly.',0Dh,0Ah
 41987 000071DD 202020202020566572-
 41987 000071E6 696669657320746861-
 41987 000071EF 74206E65772066696C-
 41987 000071F8 657320617265207772-
 41987 00007201 697474656E20636F72-
 41987 0000720A 726563746C792E0D0A 
 41988                                  	;db 0Dh,0Ah ; MSDOS 5.0
 41989                                  
 41990                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 41991                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7866h
 41992                                  MSG_1404:
 41993 00007213 74                              db 116
 41994 00007214 20202F592020202020-     	db '  /Y           Suppresses prompting to confirm you want to overwrite an',0Dh,0Ah
 41994 0000721D 202020202020537570-
 41994 00007226 707265737365732070-
 41994 0000722F 726F6D7074696E6720-
 41994 00007238 746F20636F6E666972-
 41994 00007241 6D20796F752077616E-
 41994 0000724A 7420746F206F766572-
 41994 00007253 777269746520616E0D-
 41994 0000725C 0A                 
 41995 0000725D 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 41995 00007266 202020202020657869-
 41995 0000726F 7374696E6720646573-
 41995 00007278 74696E6174696F6E20-
 41995 00007281 66696C652E0D0A     
 41996                                  MSG_1405:
 41997 00007288 72                      	db 114
 41998 00007289 20202F2D5920202020-     	db '  /-Y          Causes prompting to confirm you want to overwrite an',0Dh,0Ah
 41998 00007292 202020202020436175-
 41998 0000729B 7365732070726F6D70-
 41998 000072A4 74696E6720746F2063-
 41998 000072AD 6F6E6669726D20796F-
 41998 000072B6 752077616E7420746F-
 41998 000072BF 206F76657277726974-
 41998 000072C8 6520616E0D0A       
 41999 000072CE 202020202020202020-     	db '               existing destination file.',0Dh,0Ah
 41999 000072D7 202020202020657869-
 41999 000072E0 7374696E6720646573-
 41999 000072E9 74696E6174696F6E20-
 41999 000072F2 66696C652E0D0A     
 42000 000072F9 0D0A                    	db 0Dh,0Ah
 42001                                  MSG_1406:
 42002 000072FB 42                      	db 66
 42003 000072FC 546865207377697463-     	db 'The switch /Y may be preset in the COPYCMD environment variable.',0Dh,0Ah
 42003 00007305 68202F59206D617920-
 42003 0000730E 626520707265736574-
 42003 00007317 20696E207468652043-
 42003 00007320 4F5059434D4420656E-
 42003 00007329 7669726F6E6D656E74-
 42003 00007332 207661726961626C65-
 42003 0000733B 2E0D0A             
 42004                                  
 42005                                  ;MSG_1404: ; MSDOS 5.0 (TRANGROUP:681Ch)
 42006                                  	   ; MSDOS 6.22	(TRANGROUP:7991h)
 42007                                  MSG_1407:  ; PCDOS 7.1	(TRANGROUP:77EEh)
 42008 0000733E 87                      	db 135
 42009 0000733F 546F20617070656E64-     	db 'To append files, specify a single file for destination, but multiple files',0Dh,0Ah
 42009 00007348 2066696C65732C2073-
 42009 00007351 706563696679206120-
 42009 0000735A 73696E676C65206669-
 42009 00007363 6C6520666F72206465-
 42009 0000736C 7374696E6174696F6E-
 42009 00007375 2C20627574206D756C-
 42009 0000737E 7469706C652066696C-
 42009 00007387 65730D0A           
 42010 0000738B 666F7220736F757263-     	db 'for source (using wildcards or file1+file2+file3 format).',0Dh,0Ah
 42010 00007394 6520287573696E6720-
 42010 0000739D 77696C646361726473-
 42010 000073A6 206F722066696C6531-
 42010 000073AF 2B66696C65322B6669-
 42010 000073B8 6C653320666F726D61-
 42010 000073C1 74292E0D0A         
 42011                                  MSG_1420:
 42012 000073C6 8A                      	db 138
 42013 000073C7 4368616E6765732074-     	db 'Changes the terminal device used to control your system.',0Dh,0Ah
 42013 000073D0 6865207465726D696E-
 42013 000073D9 616C20646576696365-
 42013 000073E2 207573656420746F20-
 42013 000073EB 636F6E74726F6C2079-
 42013 000073F4 6F7572207379737465-
 42013 000073FD 6D2E0D0A           
 42014 00007401 0D0A                    	db 0Dh,0Ah
 42015 00007403 435454592064657669-     	db 'CTTY device',0Dh,0Ah
 42015 0000740C 63650D0A           
 42016 00007410 0D0A                    	db 0Dh,0Ah
 42017 00007412 202064657669636520-     	db '  device   The terminal device you want to use, such as COM1.',0Dh,0Ah
 42017 0000741B 202054686520746572-
 42017 00007424 6D696E616C20646576-
 42017 0000742D 69636520796F752077-
 42017 00007436 616E7420746F207573-
 42017 0000743F 652C20737563682061-
 42017 00007448 7320434F4D312E0D0A 
 42018                                  MSG_1440:
 42019                                  	;db 45
 42020                                  	;db 'Displays or sets the date.',0Dh,0Ah
 42021                                  	;db 0Dh,0Ah
 42022                                  	;db 'DATE [date]',0Dh,0Ah
 42023                                  	;db 0Dh,0Ah
 42024                                  
 42025                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42026                                  %if 0
 42027                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42028                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:7AA4h)
 42029                                  	db 93
 42030                                  	db 'Displays or sets the date.',0Dh,0Ah
 42031                                  	db 0Dh,0Ah
 42032                                  	db 'DATE [mm-dd-yy]',0Dh,0Ah
 42033                                  	db 0Dh,0Ah
 42034                                  	db '  mm-dd-yy    Sets the date you specify.',0Dh,0Ah
 42035                                  	db 0Dh,0Ah
 42036                                  %else
 42037                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42038                                  	; (PCDOS 7.1 COMMAND.COM - TRANGROUP:7901h)
 42039 00007451 26                      	db 38
 42040 00007452 446973706C61797320-     	db 'Displays or sets the date.',0Dh,0Ah
 42040 0000745B 6F7220736574732074-
 42040 00007464 686520646174652E0D-
 42040 0000746D 0A                 
 42041 0000746E 0D0A                    	db 0Dh,0Ah
 42042 00007470 444154450D0A            	db 'DATE',0Dh,0Ah
 42043 00007476 0D0A                    	db 0Dh,0Ah	
 42044                                  %endif
 42045                                  
 42046                                  MSG_1441:
 42047 00007478 83                      	db 131
 42048 00007479 547970652044415445-     	db 'Type DATE without parameters to display the current date setting and',0Dh,0Ah
 42048 00007482 20776974686F757420-
 42048 0000748B 706172616D65746572-
 42048 00007494 7320746F2064697370-
 42048 0000749D 6C6179207468652063-
 42048 000074A6 757272656E74206461-
 42048 000074AF 74652073657474696E-
 42048 000074B8 6720616E640D0A     
 42049 000074BF 612070726F6D707420-     	db 'a prompt for a new one.  Press ENTER to keep the same date.',0Dh,0Ah
 42049 000074C8 666F722061206E6577-
 42049 000074D1 206F6E652E20205072-
 42049 000074DA 65737320454E544552-
 42049 000074E3 20746F206B65657020-
 42049 000074EC 7468652073616D6520-
 42049 000074F5 646174652E0D0A     
 42050                                  MSG_1460:	
 42051 000074FC 64                      	db 100
 42052 000074FD 44656C65746573206F-     	db 'Deletes one or more files.',0Dh,0Ah
 42052 00007506 6E65206F72206D6F72-
 42052 0000750F 652066696C65732E0D-
 42052 00007518 0A                 
 42053 00007519 0D0A                    	db 0Dh,0Ah
 42054 0000751B 44454C205B64726976-     	db 'DEL [drive:][path]filename [/P]',0Dh,0Ah
 42054 00007524 653A5D5B706174685D-
 42054 0000752D 66696C656E616D6520-
 42054 00007536 5B2F505D0D0A       
 42055 0000753C 4552415345205B6472-     	db 'ERASE [drive:][path]filename [/P]',0Dh,0Ah
 42055 00007545 6976653A5D5B706174-
 42055 0000754E 685D66696C656E616D-
 42055 00007557 65205B2F505D0D0A   
 42056 0000755F 0D0A                    	db 0Dh,0Ah
 42057                                  MSG_1461:
 42058 00007561 83                      	db 131
 42059 00007562 20205B64726976653A-     	db '  [drive:][path]filename  Specifies the file(s) to delete.  Specify multiple',0Dh,0Ah
 42059 0000756B 5D5B706174685D6669-
 42059 00007574 6C656E616D65202053-
 42059 0000757D 706563696669657320-
 42059 00007586 7468652066696C6528-
 42059 0000758F 732920746F2064656C-
 42059 00007598 6574652E2020537065-
 42059 000075A1 63696679206D756C74-
 42059 000075AA 69706C650D0A       
 42060 000075B0 202020202020202020-     	db '                          files by using wildcards.',0Dh,0Ah
 42060 000075B9 202020202020202020-
 42060 000075C2 202020202020202066-
 42060 000075CB 696C65732062792075-
 42060 000075D4 73696E672077696C64-
 42060 000075DD 63617264732E0D0A   
 42061                                  MSG_1462:
 42062 000075E5 4F                      	db 79
 42063 000075E6 20202F502020202020-     	db '  /P                      Prompts for confirmation before deleting each file.',0Dh,0Ah
 42063 000075EF 202020202020202020-
 42063 000075F8 202020202020202050-
 42063 00007601 726F6D70747320666F-
 42063 0000760A 7220636F6E6669726D-
 42063 00007613 6174696F6E20626566-
 42063 0000761C 6F72652064656C6574-
 42063 00007625 696E67206561636820-
 42063 0000762E 66696C652E0D0A     
 42064                                  
 42065                                  ; 17/06/2023
 42066                                  %if 0	; MSDOS 5.0 DIR Help messages
 42067                                  
 42068                                  MSG_1480:
 42069                                  	db 162
 42070                                  	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 42071                                  	db 0Dh,0Ah
 42072                                  	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attributes]]',0Dh,0Ah
 42073                                  	db '  [/O[[:]sortorder]] [/S] [/B] [/L]',0Dh,0Ah
 42074                                  	db 0Dh,0Ah
 42075                                  MSG_1481:
 42076                                  	db 93
 42077                                  	db '  [drive:][path][filename]',0Dh,0Ah
 42078                                  	db '              Specifies drive, directory, and/or files to list.',0Dh,0Ah
 42079                                  MSG_1482:
 42080                                  	db 97
 42081                                  	db '  /P          Pauses after each screenful of information.',0Dh,0Ah
 42082                                  	db '  /W          Uses wide list format.',0Dh,0Ah
 42083                                  MSG_1483:	
 42084                                  	db 122
 42085                                  	db '  /A          Displays files with specified attributes.',0Dh,0Ah
 42086                                  	db '  attributes   D  Directories                R  Read-only files',0Dh,0Ah
 42087                                  MSG_1484:
 42088                                  	db 191
 42089                                  	db '               H  Hidden files               A  Files ready for archiving',0Dh,0Ah
 42090                                  	db '               S  System files               -  Prefix meaning "not"',0Dh,0Ah
 42091                                  	db '  /O          List by files in sorted order.',0Dh,0Ah
 42092                                  MSG_1485:
 42093                                  	db 155
 42094                                  	db '  sortorder    N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 42095                                  	db '               E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 42096                                  MSG_1486:
 42097                                  	db 150
 42098                                  	db '               G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 42099                                  	db '  /S          Displays files in specified directory and all subdirectories.',0Dh,0Ah
 42100                                  MSG_1487:
 42101                                  	db 102
 42102                                  	db '  /B          Uses bare format (no heading information or summary).',0Dh,0Ah
 42103                                  	db '  /L          Uses lowercase.',0Dh,0Ah
 42104                                  	db 0Dh,0Ah
 42105                                  MSG_1488:
 42106                                  	db 146
 42107                                  	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 42108                                  	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 42109                                  %endif
 42110                                  
 42111                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42112                                  %if 0
 42113                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42114                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:7CBFh
 42115                                  MSG_1480:
 42116                                  	db 137
 42117                                  	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 42118                                  	db 0Dh,0Ah
 42119                                  	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attribs]] [/O[[:]sortord]]',0Dh,0Ah
 42120                                  MSG_1481:
 42121                                  	db 30
 42122                                  	db '    [/S] [/B] [/L] [/C[H]]',0Dh,0Ah
 42123                                  	db 0Dh,0Ah
 42124                                  MSG_1482:
 42125                                  	db 80
 42126                                  	db '  [drive:][path][filename]   Specifies drive, directory, and/or files to list.',0Dh,0Ah
 42127                                  MSG_1483:
 42128                                  	db 89
 42129                                  	db '  /P      Pauses after each screenful of information.',0Dh,0Ah
 42130                                  	db '  /W      Uses wide list format.',0Dh,0Ah
 42131                                  MSG_1484:
 42132                                  	db 126
 42133                                  	db '  /A      Displays files with specified attributes.',0Dh,0Ah
 42134                                  	db '  attribs   D  Directories   R  Read-only files         H  Hidden files',0Dh,0Ah
 42135                                  MSG_1485:
 42136                                  	db 123
 42137                                  	db '            S  System files  A  Files ready to archive  -  Prefix meaning "not"',0Dh,0Ah
 42138                                  	db '  /O      List by files in sorted order.',0Dh,0Ah
 42139                                  MSG_1486:
 42140                                  	db 149
 42141                                  	db '  sortord   N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 42142                                  	db '            E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 42143                                  MSG_1487:
 42144                                  	db 70
 42145                                  	db '            G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 42146                                  MSG_1488:
 42147                                  	db 127
 42148                                  	db '            C  By compression ratio (smallest first)',0Dh,0Ah
 42149                                  	db '  /S      Displays files in specified directory and all subdirectories.',0Dh,0Ah
 42150                                  MSG_1489:
 42151                                  	db 65
 42152                                  	db '  /B      Uses bare format (no heading information or summary).',0Dh,0Ah
 42153                                  
 42154                                  MSG_1490:
 42155                                  	db 27
 42156                                  	db '  /L      Uses lowercase.',0Dh,0Ah
 42157                                  MSG_1491:
 42158                                  	db 82
 42159                                  	db '  /C[H]   Displays file compression ratio; /CH uses host allocation unit size.',0Dh,0Ah
 42160                                  	db 0Dh,0Ah
 42161                                  MSG_1492:
 42162                                  	db 146
 42163                                  	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 42164                                  	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 42165                                  MSG_1493:
 42166                                  	db 22
 42167                                  	db '    [/S] [/B] [/L]',0Dh,0Ah
 42168                                  	db 0Dh,0Ah
 42169                                  MSG_1494:
 42170                                  	db 29
 42171                                  	db '  /L      Uses lowercase.',0Dh,0Ah
 42172                                  	db 0Dh,0Ah
 42173                                  %else
 42174                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42175                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:7AE5h
 42176                                  MSG_1480:
 42177 00007635 9F                      	db 159
 42178 00007636 446973706C61797320-     	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 42178 0000763F 61206C697374206F66-
 42178 00007648 2066696C657320616E-
 42178 00007651 642073756264697265-
 42178 0000765A 63746F726965732069-
 42178 00007663 6E2061206469726563-
 42178 0000766C 746F72792E0D0A     
 42179 00007673 0D0A                    	db 0Dh,0Ah
 42180 00007675 444952205B64726976-     	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attribs]] [/O[[:]sortord]]',0Dh,0Ah
 42180 0000767E 653A5D5B706174685D-
 42180 00007687 5B66696C656E616D65-
 42180 00007690 5D205B2F505D205B2F-
 42180 00007699 575D205B2F415B5B3A-
 42180 000076A2 5D617474726962735D-
 42180 000076AB 5D205B2F4F5B5B3A5D-
 42180 000076B4 736F72746F72645D5D-
 42180 000076BD 0D0A               
 42181 000076BF 202020205B2F535D20-     	db '    [/S] [/B] [/L]',0Dh,0Ah
 42181 000076C8 5B2F425D205B2F4C5D-
 42181 000076D1 0D0A               
 42182 000076D3 0D0A                    	db 0Dh,0Ah
 42183                                  MSG_1481:
 42184 000076D5 4D                      	db 77
 42185 000076D6 20205B64726976653A-     	db '  [drive:][path][filename]   Specifies drive, directory, and files to list.',0Dh,0Ah
 42185 000076DF 5D5B706174685D5B66-
 42185 000076E8 696C656E616D655D20-
 42185 000076F1 202053706563696669-
 42185 000076FA 65732064726976652C-
 42185 00007703 206469726563746F72-
 42185 0000770C 792C20616E64206669-
 42185 00007715 6C657320746F206C69-
 42185 0000771E 73742E0D0A         
 42186                                  MSG_1482:
 42187 00007723 5B                      	db 91
 42188 00007724 20202F502020202020-     	db '  /P      Pauses after each full screen of information.',0Dh,0Ah
 42188 0000772D 205061757365732061-
 42188 00007736 667465722065616368-
 42188 0000773F 2066756C6C20736372-
 42188 00007748 65656E206F6620696E-
 42188 00007751 666F726D6174696F6E-
 42188 0000775A 2E0D0A             
 42189 0000775D 20202F572020202020-     	db '  /W      Uses wide list format.',0Dh,0Ah
 42189 00007766 205573657320776964-
 42189 0000776F 65206C69737420666F-
 42189 00007778 726D61742E0D0A     
 42190                                  MSG_1483:
 42191 0000777F 7E                      	db 126
 42192 00007780 20202F412020202020-     	db '  /A      Displays files with specified attributes.',0Dh,0Ah
 42192 00007789 20446973706C617973-
 42192 00007792 2066696C6573207769-
 42192 0000779B 746820737065636966-
 42192 000077A4 696564206174747269-
 42192 000077AD 62757465732E0D0A   
 42193 000077B5 202061747472696273-     	db '  attribs   D  Directories   R  Read-only files         H  Hidden files',0Dh,0Ah
 42193 000077BE 202020442020446972-
 42193 000077C7 6563746F7269657320-
 42193 000077D0 202052202052656164-
 42193 000077D9 2D6F6E6C792066696C-
 42193 000077E2 657320202020202020-
 42193 000077EB 202048202048696464-
 42193 000077F4 656E2066696C65730D-
 42193 000077FD 0A                 
 42194                                  MSG_1484:
 42195 000077FE 7C                      	db 124
 42196 000077FF 202020202020202020-     	db '            S  System files  A  Files ready to archive  -  Prefix meaning "not"',0Dh,0Ah
 42196 00007808 202020532020537973-
 42196 00007811 74656D2066696C6573-
 42196 0000781A 202041202046696C65-
 42196 00007823 732072656164792074-
 42196 0000782C 6F2061726368697665-
 42196 00007835 20202D202050726566-
 42196 0000783E 6978206D65616E696E-
 42196 00007847 6720226E6F74220D0A 
 42197 00007850 20202F4F2020202020-     	db '  /O      Lists by files in sorted order.',0Dh,0Ah
 42197 00007859 204C69737473206279-
 42197 00007862 2066696C657320696E-
 42197 0000786B 20736F72746564206F-
 42197 00007874 726465722E0D0A     
 42198                                  MSG_1485:
 42199 0000787B 95                      	db 149
 42200 0000787C 2020736F72746F7264-     	db '  sortord   N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 42200 00007885 2020204E2020427920-
 42200 0000788E 6E616D652028616C70-
 42200 00007897 686162657469632920-
 42200 000078A0 202020202020532020-
 42200 000078A9 42792073697A652028-
 42200 000078B2 736D616C6C65737420-
 42200 000078BB 6669727374290D0A   
 42201 000078C3 202020202020202020-     	db '            E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 42201 000078CC 202020452020427920-
 42201 000078D5 657874656E73696F6E-
 42201 000078DE 2028616C7068616265-
 42201 000078E7 746963292020442020-
 42201 000078F0 427920646174652026-
 42201 000078F9 2074696D6520286561-
 42201 00007902 726C69657374206669-
 42201 0000790B 727374290D0A       
 42202                                  MSG_1486:
 42203 00007911 8F                      	db 143
 42204 00007912 202020202020202020-     	db '            G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 42204 0000791B 20202047202047726F-
 42204 00007924 757020646972656374-
 42204 0000792D 6F7269657320666972-
 42204 00007936 7374202020202D2020-
 42204 0000793F 50726566697820746F-
 42204 00007948 207265766572736520-
 42204 00007951 6F726465720D0A     
 42205 00007958 20202F532020202020-     	db '  /S      Displays files in specified directory and all subdirectories.',0Dh,0Ah
 42205 00007961 20446973706C617973-
 42205 0000796A 2066696C657320696E-
 42205 00007973 207370656369666965-
 42205 0000797C 64206469726563746F-
 42205 00007985 727920616E6420616C-
 42205 0000798E 6C2073756264697265-
 42205 00007997 63746F726965732E0D-
 42205 000079A0 0A                 
 42206                                  MSG_1487:
 42207 000079A1 5E                      	db 94
 42208 000079A2 20202F422020202020-     	db '  /B      Uses bare format (no heading information or summary).',0Dh,0Ah
 42208 000079AB 205573657320626172-
 42208 000079B4 6520666F726D617420-
 42208 000079BD 286E6F206865616469-
 42208 000079C6 6E6720696E666F726D-
 42208 000079CF 6174696F6E206F7220-
 42208 000079D8 73756D6D617279292E-
 42208 000079E1 0D0A               
 42209 000079E3 20202F4C2020202020-     	db '  /L      Uses lowercase.',0Dh,0Ah
 42209 000079EC 2055736573206C6F77-
 42209 000079F5 6572636173652E0D0A 
 42210 000079FE 0D0A                    	db 0Dh,0Ah
 42211                                  MSG_1488:
 42212 00007A00 92                      	db 146
 42213 00007A01 537769746368657320-     	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 42213 00007A0A 6D6179206265207072-
 42213 00007A13 6573657420696E2074-
 42213 00007A1C 686520444952434D44-
 42213 00007A25 20656E7669726F6E6D-
 42213 00007A2E 656E74207661726961-
 42213 00007A37 626C652E20204F7665-
 42213 00007A40 72726964650D0A     
 42214 00007A47 707265736574207377-     	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 42214 00007A50 697463686573206279-
 42214 00007A59 20707265666978696E-
 42214 00007A62 6720616E7920737769-
 42214 00007A6B 746368207769746820-
 42214 00007A74 2D202868797068656E-
 42214 00007A7D 292D2D666F72206578-
 42214 00007A86 616D706C652C202F2D-
 42214 00007A8F 572E0D0A           
 42215                                  MSG_1489:
 42216 00007A93 50                      	db 80
 42217 00007A94 546F2072656D6F7665-     	db 'To remove the commas from the DIR output, use the NO_SEP environment variable.',0Dh,0Ah
 42217 00007A9D 2074686520636F6D6D-
 42217 00007AA6 61732066726F6D2074-
 42217 00007AAF 686520444952206F75-
 42217 00007AB8 747075742C20757365-
 42217 00007AC1 20746865204E4F5F53-
 42217 00007ACA 455020656E7669726F-
 42217 00007AD3 6E6D656E7420766172-
 42217 00007ADC 6961626C652E0D0A   
 42218                                  %endif
 42219                                  
 42220                                  MSG_1500:
 42221 00007AE4 3E                      	db 62
 42222 00007AE5 517569747320746865-     	db 'Quits the COMMAND.COM program (command interpreter).',0Dh,0Ah
 42222 00007AEE 20434F4D4D414E442E-
 42222 00007AF7 434F4D2070726F6772-
 42222 00007B00 616D2028636F6D6D61-
 42222 00007B09 6E6420696E74657270-
 42222 00007B12 7265746572292E0D0A 
 42223 00007B1B 0D0A                    	db 0Dh,0Ah
 42224 00007B1D 455849540D0A            	db 'EXIT',0Dh,0Ah
 42225                                  MSG_1520:
 42226 00007B23 3D                      	db 61
 42227 00007B24 437265617465732061-     	db 'Creates a directory.',0Dh,0Ah
 42227 00007B2D 206469726563746F72-
 42227 00007B36 792E0D0A           
 42228 00007B3A 0D0A                    	db 0Dh,0Ah
 42229 00007B3C 4D4B444952205B6472-     	db 'MKDIR [drive:]path',0Dh,0Ah
 42229 00007B45 6976653A5D70617468-
 42229 00007B4E 0D0A               
 42230 00007B50 4D44205B6472697665-     	db 'MD [drive:]path',0Dh,0Ah
 42230 00007B59 3A5D706174680D0A   
 42231                                  MSG_1540:
 42232 00007B61 5D                      	db 93
 42233 00007B62 446973706C61797320-     	db 'Displays or sets a search path for executable files.',0Dh,0Ah
 42233 00007B6B 6F7220736574732061-
 42233 00007B74 207365617263682070-
 42233 00007B7D 61746820666F722065-
 42233 00007B86 786563757461626C65-
 42233 00007B8F 2066696C65732E0D0A 
 42234 00007B98 0D0A                    	db 0Dh,0Ah
 42235 00007B9A 50415448205B5B6472-     	db 'PATH [[drive:]path[;...]]',0Dh,0Ah
 42235 00007BA3 6976653A5D70617468-
 42235 00007BAC 5B3B2E2E2E5D5D0D0A 
 42236 00007BB5 50415448203B0D0A        	db 'PATH ;',0Dh,0Ah
 42237 00007BBD 0D0A                    	db 0Dh,0Ah
 42238                                  MSG_1541:
 42239 00007BBF 6B                      	db 107
 42240 00007BC0 547970652050415448-     	db 'Type PATH ; to clear all search-path settings and direct PC DOS to search',0Dh,0Ah
 42240 00007BC9 203B20746F20636C65-
 42240 00007BD2 617220616C6C207365-
 42240 00007BDB 617263682D70617468-
 42240 00007BE4 2073657474696E6773-
 42240 00007BED 20616E642064697265-
 42240 00007BF6 637420504320444F53-
 42240 00007BFF 20746F207365617263-
 42240 00007C08 680D0A             
 42241 00007C0B 6F6E6C7920696E2074-     	db 'only in the current directory.',0Dh,0Ah
 42241 00007C14 68652063757272656E-
 42241 00007C1D 74206469726563746F-
 42241 00007C26 72792E0D0A         
 42242                                  MSG_1542:
 42243 00007C2B 3B                      	db 59
 42244 00007C2C 547970652050415448-     	db 'Type PATH without parameters to display the current path.',0Dh,0Ah
 42244 00007C35 20776974686F757420-
 42244 00007C3E 706172616D65746572-
 42244 00007C47 7320746F2064697370-
 42244 00007C50 6C6179207468652063-
 42244 00007C59 757272656E74207061-
 42244 00007C62 74682E0D0A         
 42245                                  MSG_1560:
 42246 00007C67 37                      	db 55
 42247 00007C68 4368616E6765732074-     	db 'Changes the PC DOS command prompt.',0Dh,0Ah
 42247 00007C71 686520504320444F53-
 42247 00007C7A 20636F6D6D616E6420-
 42247 00007C83 70726F6D70742E0D0A 
 42248 00007C8C 0D0A                    	db 0Dh,0Ah
 42249 00007C8E 50524F4D5054205B74-     	db 'PROMPT [text]',0Dh,0Ah
 42249 00007C97 6578745D0D0A       
 42250 00007C9D 0D0A                    	db 0Dh,0Ah
 42251                                  MSG_1561:
 42252 00007C9F 7C                      	db 124
 42253 00007CA0 202074657874202020-     	db '  text    Specifies a new command prompt.',0Dh,0Ah
 42253 00007CA9 205370656369666965-
 42253 00007CB2 732061206E65772063-
 42253 00007CBB 6F6D6D616E64207072-
 42253 00007CC4 6F6D70742E0D0A     
 42254 00007CCB 0D0A                    	db 0Dh,0Ah
 42255 00007CCD 50726F6D7074206361-     	db 'Prompt can be made up of normal characters and the following special codes:',0Dh,0Ah
 42255 00007CD6 6E206265206D616465-
 42255 00007CDF 207570206F66206E6F-
 42255 00007CE8 726D616C2063686172-
 42255 00007CF1 61637465727320616E-
 42255 00007CFA 642074686520666F6C-
 42255 00007D03 6C6F77696E67207370-
 42255 00007D0C 656369616C20636F64-
 42255 00007D15 65733A0D0A         
 42256 00007D1A 0D0A                    	db 0Dh,0Ah
 42257                                  MSG_1562:
 42258 00007D1C 2F                      	db 47
 42259 00007D1D 202024512020203D20-     	db '  $Q   = (equal sign)',0Dh,0Ah
 42259 00007D26 28657175616C207369-
 42259 00007D2F 676E290D0A         
 42260 00007D34 202024242020202420-     	db '  $$   $ (dollar sign)',0Dh,0Ah
 42260 00007D3D 28646F6C6C61722073-
 42260 00007D46 69676E290D0A       
 42261                                  MSG_1563:
 42262 00007D4C 2A                      	db 42
 42263 00007D4D 202024542020204375-     	db '  $T   Current time',0Dh,0Ah
 42263 00007D56 7272656E742074696D-
 42263 00007D5F 650D0A             
 42264 00007D62 202024442020204375-     	db '  $D   Current date',0Dh,0Ah
 42264 00007D6B 7272656E7420646174-
 42264 00007D74 650D0A             
 42265                                  MSG_1564:
 42266 00007D77 3D                      	db 61
 42267 00007D78 202024502020204375-     	db '  $P   Current drive and path',0Dh,0Ah
 42267 00007D81 7272656E7420647269-
 42267 00007D8A 766520616E64207061-
 42267 00007D93 74680D0A           
 42268 00007D97 202024562020204D53-     	db '  $V   MS-DOS version number',0Dh,0Ah
 42268 00007DA0 2D444F532076657273-
 42268 00007DA9 696F6E206E756D6265-
 42268 00007DB2 720D0A             
 42269                                  MSG_1565:
 42270 00007DB5 34                      	db 52
 42271 00007DB6 2020244E2020204375-     	db '  $N   Current drive',0Dh,0Ah
 42271 00007DBF 7272656E7420647269-
 42271 00007DC8 76650D0A           
 42272 00007DCC 202024472020203E20-     	db '  $G   > (greater-than sign)',0Dh,0Ah
 42272 00007DD5 28677265617465722D-
 42272 00007DDE 7468616E207369676E-
 42272 00007DE7 290D0A             
 42273                                  MSG_1566:
 42274 00007DEA 2C                      	db 44
 42275 00007DEB 2020244C2020203C20-     	db '  $L   < (less-than sign)',0Dh,0Ah
 42275 00007DF4 286C6573732D746861-
 42275 00007DFD 6E207369676E290D0A 
 42276 00007E06 202024422020207C20-     	db '  $B   | (pipe)',0Dh,0Ah
 42276 00007E0F 2870697065290D0A   
 42277                                  MSG_1567:
 42278 00007E17 79                      	db 121
 42279 00007E18 202024482020204261-     	db '  $H   Backspace (erases previous character)',0Dh,0Ah
 42279 00007E21 636B73706163652028-
 42279 00007E2A 657261736573207072-
 42279 00007E33 6576696F7573206368-
 42279 00007E3C 61726163746572290D-
 42279 00007E45 0A                 
 42280 00007E46 202024452020204573-     	db '  $E   Escape code (ASCII code 27)',0Dh,0Ah
 42280 00007E4F 6361706520636F6465-
 42280 00007E58 202841534349492063-
 42280 00007E61 6F6465203237290D0A 
 42281 00007E6A 2020245F2020204361-     	db '  $_   Carriage return and linefeed',0Dh,0Ah
 42281 00007E73 727269616765207265-
 42281 00007E7C 7475726E20616E6420-
 42281 00007E85 6C696E65666565640D-
 42281 00007E8E 0A                 
 42282 00007E8F 0D0A                    	db 0Dh,0Ah
 42283                                  MSG_1568:
 42284 00007E91 4C                      	db 76
 42285 00007E92 547970652050524F4D-     	db 'Type PROMPT without parameters to reset the prompt to the default setting.',0Dh,0Ah
 42285 00007E9B 505420776974686F75-
 42285 00007EA4 7420706172616D6574-
 42285 00007EAD 65727320746F207265-
 42285 00007EB6 736574207468652070-
 42285 00007EBF 726F6D707420746F20-
 42285 00007EC8 746865206465666175-
 42285 00007ED1 6C742073657474696E-
 42285 00007EDA 672E0D0A           
 42286                                  MSG_1580:
 42287 00007EDE 47                      	db 71
 42288 00007EDF 52656D6F7665732028-     	db 'Removes (deletes) a directory.',0Dh,0Ah
 42288 00007EE8 64656C657465732920-
 42288 00007EF1 61206469726563746F-
 42288 00007EFA 72792E0D0A         
 42289 00007EFF 0D0A                    	db 0Dh,0Ah
 42290 00007F01 524D444952205B6472-     	db 'RMDIR [drive:]path',0Dh,0Ah
 42290 00007F0A 6976653A5D70617468-
 42290 00007F13 0D0A               
 42291 00007F15 5244205B6472697665-     	db 'RD [drive:]path',0Dh,0Ah
 42291 00007F1E 3A5D706174680D0A   
 42292                                  MSG_1600:
 42293 00007F26 1C                      	db 28
 42294 00007F27 52656E616D65732061-     	db 'Renames a file or files.',0Dh,0Ah
 42294 00007F30 2066696C65206F7220-
 42294 00007F39 66696C65732E0D0A   
 42295 00007F41 0D0A                    	db 0Dh,0Ah
 42296                                  MSG_1601:
 42297 00007F43 53                      	db 83
 42298 00007F44 52454E414D45205B64-     	db 'RENAME [drive:][path]filename1 filename2',0Dh,0Ah
 42298 00007F4D 726976653A5D5B7061-
 42298 00007F56 74685D66696C656E61-
 42298 00007F5F 6D65312066696C656E-
 42298 00007F68 616D65320D0A       
 42299 00007F6E 52454E205B64726976-     	db 'REN [drive:][path]filename1 filename2',0Dh,0Ah
 42299 00007F77 653A5D5B706174685D-
 42299 00007F80 66696C656E616D6531-
 42299 00007F89 2066696C656E616D65-
 42299 00007F92 320D0A             
 42300 00007F95 0D0A                    	db 0Dh,0Ah
 42301                                  MSG_1602:
 42302                                  	;db 77
 42303                                  	;db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 42304                                  
 42305                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42306                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:8697h
 42307                                  
 42308                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42309                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:8447h
 42310                                  MSG_1602:
 42311 00007F97 A0                      	db 160
 42312 00007F98 4E6F74652074686174-     	db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 42312 00007FA1 20796F752063616E6E-
 42312 00007FAA 6F7420737065636966-
 42312 00007FB3 792061206E65772064-
 42312 00007FBC 72697665206F722070-
 42312 00007FC5 61746820666F722079-
 42312 00007FCE 6F7572206465737469-
 42312 00007FD7 6E6174696F6E206669-
 42312 00007FE0 6C652E0D0A         
 42313 00007FE5 0D0A                    	db 0Dh,0Ah
 42314 00007FE7 557365204D4F564520-     	db 'Use MOVE to rename a directory, or to move files from one directory to another.',0Dh,0Ah
 42314 00007FF0 746F2072656E616D65-
 42314 00007FF9 206120646972656374-
 42314 00008002 6F72792C206F722074-
 42314 0000800B 6F206D6F7665206669-
 42314 00008014 6C65732066726F6D20-
 42314 0000801D 6F6E65206469726563-
 42314 00008026 746F727920746F2061-
 42314 0000802F 6E6F746865722E0D0A 
 42315                                  MSG_1620:
 42316 00008038 57                      	db 87
 42317                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42318                                  %if 0
 42319                                  	db 'Displays, sets, or removes MS-DOS environment variables.',0Dh,0Ah
 42320                                  %else
 42321 00008039 446973706C6179732C-     	db 'Displays, sets, or removes PC DOS environment variables.',0Dh,0Ah
 42321 00008042 20736574732C206F72-
 42321 0000804B 2072656D6F76657320-
 42321 00008054 504320444F5320656E-
 42321 0000805D 7669726F6E6D656E74-
 42321 00008066 207661726961626C65-
 42321 0000806F 732E0D0A           
 42322                                  %endif
 42323 00008073 0D0A                    	db 0Dh,0Ah
 42324 00008075 534554205B76617269-     	db 'SET [variable=[string]]',0Dh,0Ah
 42324 0000807E 61626C653D5B737472-
 42324 00008087 696E675D5D0D0A     
 42325 0000808E 0D0A                    	db 0Dh,0Ah
 42326                                  MSG_1621:
 42327 00008090 81                      	db 129
 42328 00008091 20207661726961626C-     	db '  variable  Specifies the environment-variable name.',0Dh,0Ah
 42328 0000809A 652020537065636966-
 42328 000080A3 696573207468652065-
 42328 000080AC 6E7669726F6E6D656E-
 42328 000080B5 742D7661726961626C-
 42328 000080BE 65206E616D652E0D0A 
 42329 000080C7 2020737472696E6720-     	db '  string    Specifies a series of characters to assign to the variable.',0Dh,0Ah
 42329 000080D0 202020537065636966-
 42329 000080D9 696573206120736572-
 42329 000080E2 696573206F66206368-
 42329 000080EB 617261637465727320-
 42329 000080F4 746F2061737369676E-
 42329 000080FD 20746F207468652076-
 42329 00008106 61726961626C652E0D-
 42329 0000810F 0A                 
 42330 00008110 0D0A                    	db 0Dh,0Ah
 42331                                  MSG_1622:
 42332 00008112 4B                      	db 75
 42333 00008113 547970652053455420-     	db 'Type SET without parameters to display the current environment variables.',0Dh,0Ah
 42333 0000811C 776974686F75742070-
 42333 00008125 6172616D6574657273-
 42333 0000812E 20746F20646973706C-
 42333 00008137 617920746865206375-
 42333 00008140 7272656E7420656E76-
 42333 00008149 69726F6E6D656E7420-
 42333 00008152 7661726961626C6573-
 42333 0000815B 2E0D0A             
 42334                                  MSG_1640:
 42335                                  	;db 52
 42336                                  	;db 'Displays or sets the system time.',0Dh,0Ah
 42337                                  	;db 0Dh,0Ah
 42338                                  	;db 'TIME [time]',0Dh,0Ah
 42339                                  	;db 0Dh,0Ah
 42340                                  
 42341                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42342                                  %if 0
 42343                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42344                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:885Eh)
 42345                                  	db 45
 42346                                  	db 'Displays or sets the time.',0Dh,0Ah
 42347                                  	db 0Dh,0Ah
 42348                                  	db 'TIME [time]',0Dh,0Ah
 42349                                  	db 0Dh,0Ah
 42350                                  %else
 42351                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42352                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:860Eh
 42353 0000815E 34                      	db 52
 42354 0000815F 446973706C61797320-     	db 'Displays or sets the system time.',0Dh,0Ah
 42354 00008168 6F7220736574732074-
 42354 00008171 68652073797374656D-
 42354 0000817A 2074696D652E0D0A   
 42355 00008182 0D0A                    	db 0Dh,0Ah
 42356 00008184 54494D45205B74696D-     	db 'TIME [time]',0Dh,0Ah
 42356 0000818D 655D0D0A           
 42357 00008191 0D0A                    	db 0Dh,0Ah
 42358                                  %endif
 42359                                  
 42360                                  MSG_1641:
 42361 00008193 83                      	db 131
 42362 00008194 547970652054494D45-     	db 'Type TIME with no parameters to display the current time setting and a prompt',0Dh,0Ah
 42362 0000819D 2077697468206E6F20-
 42362 000081A6 706172616D65746572-
 42362 000081AF 7320746F2064697370-
 42362 000081B8 6C6179207468652063-
 42362 000081C1 757272656E74207469-
 42362 000081CA 6D652073657474696E-
 42362 000081D3 6720616E6420612070-
 42362 000081DC 726F6D70740D0A     
 42363 000081E3 666F722061206E6577-     	db 'for a new one.  Press ENTER to keep the same time.',0Dh,0Ah
 42363 000081EC 206F6E652E20205072-
 42363 000081F5 65737320454E544552-
 42363 000081FE 20746F206B65657020-
 42363 00008207 7468652073616D6520-
 42363 00008210 74696D652E0D0A     
 42364                                  MSG_1660:
 42365 00008217 46                      	db 70
 42366 00008218 446973706C61797320-     	db 'Displays the contents of a text file.',0Dh,0Ah
 42366 00008221 74686520636F6E7465-
 42366 0000822A 6E7473206F66206120-
 42366 00008233 746578742066696C65-
 42366 0000823C 2E0D0A             
 42367 0000823F 0D0A                    	db 0Dh,0Ah
 42368 00008241 54595045205B647269-     	db 'TYPE [drive:][path]filename',0Dh,0Ah
 42368 0000824A 76653A5D5B70617468-
 42368 00008253 5D66696C656E616D65-
 42368 0000825C 0D0A               
 42369                                  MSG_1680:
 42370 0000825E 25                      	db 37
 42371                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42372                                  %if 0
 42373                                  	db 'Displays the MS-DOS version.',0Dh,0Ah
 42374                                  %else
 42375 0000825F 446973706C61797320-     	db 'Displays the PC DOS version.',0Dh,0Ah
 42375 00008268 74686520504320444F-
 42375 00008271 532076657273696F6E-
 42375 0000827A 2E0D0A             
 42376                                  %endif
 42377 0000827D 0D0A                    	db 0Dh,0Ah
 42378 0000827F 5645520D0A              	db 'VER',0Dh,0Ah
 42379                                  MSG_1700:
 42380 00008284 B1                      	db 177
 42381                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42382                                  %if 0
 42383                                  	db 'Tells MS-DOS whether to verify that your files are written correctly to a',0Dh,0Ah
 42384                                  	db 'disk.',0Dh,0Ah
 42385                                  %else
 42386 00008285 54656C6C7320504320-     	db 'Tells PC DOS whether to verify that your files are written correctly to a',0Dh,0Ah
 42386 0000828E 444F53207768657468-
 42386 00008297 657220746F20766572-
 42386 000082A0 696679207468617420-
 42386 000082A9 796F75722066696C65-
 42386 000082B2 732061726520777269-
 42386 000082BB 7474656E20636F7272-
 42386 000082C4 6563746C7920746F20-
 42386 000082CD 610D0A             
 42387 000082D0 6469736B2E0D0A          	db 'disk.',0Dh,0Ah
 42388                                  %endif
 42389 000082D7 0D0A                    	db 0Dh,0Ah
 42390 000082D9 564552494659205B4F-     	db 'VERIFY [ON | OFF]',0Dh,0Ah
 42390 000082E2 4E207C204F46465D0D-
 42390 000082EB 0A                 
 42391 000082EC 0D0A                    	db 0Dh,0Ah
 42392 000082EE 547970652056455249-     	db 'Type VERIFY without a parameter to display the current VERIFY setting.',0Dh,0Ah
 42392 000082F7 465920776974686F75-
 42392 00008300 74206120706172616D-
 42392 00008309 6574657220746F2064-
 42392 00008312 6973706C6179207468-
 42392 0000831B 652063757272656E74-
 42392 00008324 205645524946592073-
 42392 0000832D 657474696E672E0D0A 
 42393                                  MSG_1720:
 42394 00008336 52                      	db 82
 42395 00008337 446973706C61797320-     	db 'Displays the disk volume label and serial number, if they exist.',0Dh,0Ah
 42395 00008340 746865206469736B20-
 42395 00008349 766F6C756D65206C61-
 42395 00008352 62656C20616E642073-
 42395 0000835B 657269616C206E756D-
 42395 00008364 6265722C2069662074-
 42395 0000836D 686579206578697374-
 42395 00008376 2E0D0A             
 42396 00008379 0D0A                    	db 0Dh,0Ah
 42397 0000837B 564F4C205B64726976-     	db 'VOL [drive:]',0Dh,0Ah
 42397 00008384 653A5D0D0A         
 42398                                  MSG_1740:
 42399 00008389 5B                      	db 91
 42400 0000838A 43616C6C73206F6E65-     	db 'Calls one batch program from another.',0Dh,0Ah
 42400 00008393 206261746368207072-
 42400 0000839C 6F6772616D2066726F-
 42400 000083A5 6D20616E6F74686572-
 42400 000083AE 2E0D0A             
 42401 000083B1 0D0A                    	db 0Dh,0Ah
 42402 000083B3 43414C4C205B647269-     	db 'CALL [drive:][path]filename [batch-parameters]',0Dh,0Ah
 42402 000083BC 76653A5D5B70617468-
 42402 000083C5 5D66696C656E616D65-
 42402 000083CE 205B62617463682D70-
 42402 000083D7 6172616D6574657273-
 42402 000083E0 5D0D0A             
 42403 000083E3 0D0A                    	db 0Dh,0Ah
 42404                                  MSG_1741:
 42405 000083E5 72                      	db 114
 42406 000083E6 202062617463682D70-     	db '  batch-parameters   Specifies any command-line information required by the',0Dh,0Ah
 42406 000083EF 6172616D6574657273-
 42406 000083F8 202020537065636966-
 42406 00008401 69657320616E792063-
 42406 0000840A 6F6D6D616E642D6C69-
 42406 00008413 6E6520696E666F726D-
 42406 0000841C 6174696F6E20726571-
 42406 00008425 756972656420627920-
 42406 0000842E 7468650D0A         
 42407 00008433 202020202020202020-     	db '                     batch program.',0Dh,0Ah
 42407 0000843C 202020202020202020-
 42407 00008445 202020626174636820-
 42407 0000844E 70726F6772616D2E0D-
 42407 00008457 0A                 
 42408                                  MSG_1760:
 42409 00008458 4C                      	db 76
 42410 00008459 5265636F7264732063-     	db 'Records comments (remarks) in a batch file or CONFIG.SYS.',0Dh,0Ah
 42410 00008462 6F6D6D656E74732028-
 42410 0000846B 72656D61726B732920-
 42410 00008474 696E20612062617463-
 42410 0000847D 682066696C65206F72-
 42410 00008486 20434F4E4649472E53-
 42410 0000848F 59532E0D0A         
 42411 00008494 0D0A                    	db 0Dh,0Ah
 42412 00008496 52454D205B636F6D6D-     	db 'REM [comment]',0Dh,0Ah
 42412 0000849F 656E745D0D0A       
 42413                                  MSG_1780:
 42414 000084A5 6B                      	db 107
 42415 000084A6 53757370656E647320-     	db 'Suspends processing of a batch program and displays the message "'
 42415 000084AF 70726F63657373696E-
 42415 000084B8 67206F662061206261-
 42415 000084C1 7463682070726F6772-
 42415 000084CA 616D20616E64206469-
 42415 000084D3 73706C617973207468-
 42415 000084DC 65206D657373616765-
 42415 000084E5 2022               
 42416 000084E7 507265737320616E79-     	db 'Press any',0Dh,0Ah
 42416 000084F0 0D0A               
 42417 000084F2 6B657920746F20636F-     	db 'key to continue...."',0Dh,0Ah
 42417 000084FB 6E74696E75652E2E2E-
 42417 00008504 2E220D0A           
 42418 00008508 0D0A                    	db 0Dh,0Ah
 42419 0000850A 50415553450D0A          	db 'PAUSE',0Dh,0Ah
 42420                                  MSG_1800:
 42421 00008511 4D                      	db 77
 42422 00008512 446973706C61797320-     	db 'Displays messages, or turns command-echoing on or off.',0Dh,0Ah
 42422 0000851B 6D657373616765732C-
 42422 00008524 206F72207475726E73-
 42422 0000852D 20636F6D6D616E642D-
 42422 00008536 6563686F696E67206F-
 42422 0000853F 6E206F72206F66662E-
 42422 00008548 0D0A               
 42423 0000854A 0D0A                    	db 0Dh,0Ah
 42424 0000854C 20204543484F205B4F-     	db '  ECHO [ON | OFF]',0Dh,0Ah
 42424 00008555 4E207C204F46465D0D-
 42424 0000855E 0A                 
 42425                                  MSG_1801:
 42426 0000855F 57                      	db 87
 42427 00008560 20204543484F205B6D-     	db '  ECHO [message]',0Dh,0Ah
 42427 00008569 6573736167655D0D0A 
 42428 00008572 0D0A                    	db 0Dh,0Ah
 42429 00008574 54797065204543484F-     	db 'Type ECHO without parameters to display the current echo setting.'
 42429 0000857D 20776974686F757420-
 42429 00008586 706172616D65746572-
 42429 0000858F 7320746F2064697370-
 42429 00008598 6C6179207468652063-
 42429 000085A1 757272656E74206563-
 42429 000085AA 686F2073657474696E-
 42429 000085B3 672E               
 42430 000085B5 0D0A                    	db 0Dh,0Ah
 42431                                  MSG_1820:
 42432 000085B7 47                      	db 71
 42433                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42434                                  %if 0
 42435                                  	db 'Directs MS-DOS to a labelled line in a batch program.',0Dh,0Ah
 42436                                  %else
 42437 000085B8 446972656374732050-     	db 'Directs PC DOS to a labelled line in a batch program.',0Dh,0Ah
 42437 000085C1 4320444F5320746F20-
 42437 000085CA 61206C6162656C6C65-
 42437 000085D3 64206C696E6520696E-
 42437 000085DC 206120626174636820-
 42437 000085E5 70726F6772616D2E0D-
 42437 000085EE 0A                 
 42438                                  %endif
 42439 000085EF 0D0A                    	db 0Dh,0Ah
 42440 000085F1 474F544F206C616265-     	db 'GOTO label',0Dh,0Ah
 42440 000085FA 6C0D0A             
 42441 000085FD 0D0A                    	db 0Dh,0Ah
 42442                                  MSG_1821:
 42443 000085FF 8A                      	db 138
 42444 00008600 20206C6162656C2020-     	db '  label   Specifies a text string used in the batch program as a label.',0Dh,0Ah
 42444 00008609 205370656369666965-
 42444 00008612 732061207465787420-
 42444 0000861B 737472696E67207573-
 42444 00008624 656420696E20746865-
 42444 0000862D 206261746368207072-
 42444 00008636 6F6772616D20617320-
 42444 0000863F 61206C6162656C2E0D-
 42444 00008648 0A                 
 42445 00008649 0D0A                    	db 0Dh,0Ah
 42446 0000864B 596F75207479706520-     	db 'You type a label on a line by itself, beginning with a colon.',0Dh,0Ah
 42446 00008654 61206C6162656C206F-
 42446 0000865D 6E2061206C696E6520-
 42446 00008666 627920697473656C66-
 42446 0000866F 2C20626567696E6E69-
 42446 00008678 6E6720776974682061-
 42446 00008681 20636F6C6F6E2E0D0A 
 42447                                  MSG_1840:
 42448 0000868A 4A                      	db 74
 42449 0000868B 4368616E6765732074-     	db 'Changes the position of replaceable parameters in a batch file.',0Dh,0Ah
 42449 00008694 686520706F73697469-
 42449 0000869D 6F6E206F6620726570-
 42449 000086A6 6C61636561626C6520-
 42449 000086AF 706172616D65746572-
 42449 000086B8 7320696E2061206261-
 42449 000086C1 7463682066696C652E-
 42449 000086CA 0D0A               
 42450 000086CC 0D0A                    	db 0Dh,0Ah
 42451 000086CE 53484946540D0A          	db 'SHIFT',0Dh,0Ah
 42452                                  MSG_1860:
 42453 000086D5 5A                      	db 90
 42454 000086D6 506572666F726D7320-     	db 'Performs conditional processing in batch programs.',0Dh,0Ah
 42454 000086DF 636F6E646974696F6E-
 42454 000086E8 616C2070726F636573-
 42454 000086F1 73696E6720696E2062-
 42454 000086FA 617463682070726F67-
 42454 00008703 72616D732E0D0A     
 42455 0000870A 0D0A                    	db 0Dh,0Ah
 42456 0000870C 4946205B4E4F545D20-     	db 'IF [NOT] ERRORLEVEL number command',0Dh,0Ah
 42456 00008715 4552524F524C455645-
 42456 0000871E 4C206E756D62657220-
 42456 00008727 636F6D6D616E640D0A 
 42457                                  MSG_1861:
 42458 00008730 46                      	db 70
 42459 00008731 4946205B4E4F545D20-     	db 'IF [NOT] string1==string2 command',0Dh,0Ah
 42459 0000873A 737472696E67313D3D-
 42459 00008743 737472696E67322063-
 42459 0000874C 6F6D6D616E640D0A   
 42460 00008754 4946205B4E4F545D20-     	db 'IF [NOT] EXIST filename command',0Dh,0Ah
 42460 0000875D 45584953542066696C-
 42460 00008766 656E616D6520636F6D-
 42460 0000876F 6D616E640D0A       
 42461 00008775 0D0A                    	db 0Dh,0Ah
 42462                                  MSG_1862:
 42463 00008777 7D                      	db 125
 42464                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42465                                  %if 0
 42466                                  	db '  NOT               Specifies that MS-DOS should carry out the command only',0Dh,0Ah
 42467                                  %else
 42468 00008778 20204E4F5420202020-     	db '  NOT               Specifies that PC DOS should carry out the command only',0Dh,0Ah
 42468 00008781 202020202020202020-
 42468 0000878A 202053706563696669-
 42468 00008793 657320746861742050-
 42468 0000879C 4320444F532073686F-
 42468 000087A5 756C64206361727279-
 42468 000087AE 206F75742074686520-
 42468 000087B7 636F6D6D616E64206F-
 42468 000087C0 6E6C790D0A         
 42469                                  %endif
 42470 000087C5 202020202020202020-     	db '                    if the condition is false.',0Dh,0Ah
 42470 000087CE 202020202020202020-
 42470 000087D7 202069662074686520-
 42470 000087E0 636F6E646974696F6E-
 42470 000087E9 2069732066616C7365-
 42470 000087F2 2E0D0A             
 42471                                  MSG_1863:
 42472 000087F5 A2                      	db 162
 42473 000087F6 20204552524F524C45-     	db '  ERRORLEVEL number Specifies a true condition if the last program run returned',0Dh,0Ah
 42473 000087FF 56454C206E756D6265-
 42473 00008808 722053706563696669-
 42473 00008811 657320612074727565-
 42473 0000881A 20636F6E646974696F-
 42473 00008823 6E2069662074686520-
 42473 0000882C 6C6173742070726F67-
 42473 00008835 72616D2072756E2072-
 42473 0000883E 657475726E65640D0A 
 42474 00008847 202020202020202020-     	db '                    '
 42474 00008850 202020202020202020-
 42474 00008859 2020               
 42475 0000885B 616E20657869742063-     	db 'an exit code equal to or greater than the number specified.',0Dh,0Ah
 42475 00008864 6F646520657175616C-
 42475 0000886D 20746F206F72206772-
 42475 00008876 656174657220746861-
 42475 0000887F 6E20746865206E756D-
 42475 00008888 626572207370656369-
 42475 00008891 666965642E0D0A     
 42476                                  MSG_1864:
 42477 00008898 66                      	db 102
 42478 00008899 2020636F6D6D616E64-     	db '  command           Specifies the command to carry out if the condition is',0Dh,0Ah
 42478 000088A2 202020202020202020-
 42478 000088AB 202053706563696669-
 42478 000088B4 65732074686520636F-
 42478 000088BD 6D6D616E6420746F20-
 42478 000088C6 6361727279206F7574-
 42478 000088CF 206966207468652063-
 42478 000088D8 6F6E646974696F6E20-
 42478 000088E1 69730D0A           
 42479 000088E5 202020202020202020-     	db '                    met.',0Dh,0Ah
 42479 000088EE 202020202020202020-
 42479 000088F7 20206D65742E0D0A   
 42480                                  MSG_1865:
 42481 000088FF 6A                      	db 106
 42482 00008900 2020737472696E6731-     	db '  string1==string2  Specifies a true condition if the specified text strings',0Dh,0Ah
 42482 00008909 3D3D737472696E6732-
 42482 00008912 202053706563696669-
 42482 0000891B 657320612074727565-
 42482 00008924 20636F6E646974696F-
 42482 0000892D 6E2069662074686520-
 42482 00008936 737065636966696564-
 42482 0000893F 207465787420737472-
 42482 00008948 696E67730D0A       
 42483 0000894E 202020202020202020-     	db '                    match.',0Dh,0Ah
 42483 00008957 202020202020202020-
 42483 00008960 20206D617463682E0D-
 42483 00008969 0A                 
 42484                                  MSG_1866:
 42485 0000896A 67                      	db 103
 42486 0000896B 202045584953542066-     	db '  EXIST filename    Specifies a true condition if the specified filename',0Dh,0Ah
 42486 00008974 696C656E616D652020-
 42486 0000897D 202053706563696669-
 42486 00008986 657320612074727565-
 42486 0000898F 20636F6E646974696F-
 42486 00008998 6E2069662074686520-
 42486 000089A1 737065636966696564-
 42486 000089AA 2066696C656E616D65-
 42486 000089B3 0D0A               
 42487 000089B5 202020202020202020-     	db '                    exists.',0Dh,0Ah
 42487 000089BE 202020202020202020-
 42487 000089C7 20206578697374732E-
 42487 000089D0 0D0A               
 42488                                  MSG_1880:
 42489 000089D2 77                      	db 119
 42490 000089D3 52756E732061207370-     	db 'Runs a specified command for each file in a set of files.',0Dh,0Ah
 42490 000089DC 656369666965642063-
 42490 000089E5 6F6D6D616E6420666F-
 42490 000089EE 722065616368206669-
 42490 000089F7 6C6520696E20612073-
 42490 00008A00 6574206F662066696C-
 42490 00008A09 65732E0D0A         
 42491 00008A0E 0D0A                    	db 0Dh,0Ah
 42492 00008A10 464F52202576617269-     	db 'FOR %variable IN (set) DO command [command-parameters]',0Dh,0Ah
 42492 00008A19 61626C6520494E2028-
 42492 00008A22 7365742920444F2063-
 42492 00008A2B 6F6D6D616E64205B63-
 42492 00008A34 6F6D6D616E642D7061-
 42492 00008A3D 72616D65746572735D-
 42492 00008A46 0D0A               
 42493 00008A48 0D0A                    	db 0Dh,0Ah
 42494                                  MSG_1881:
 42495 00008A4A 7D                      	db 125
 42496 00008A4B 202025766172696162-     	db '  %variable  Specifies a replaceable parameter.',0Dh,0Ah
 42496 00008A54 6C6520205370656369-
 42496 00008A5D 666965732061207265-
 42496 00008A66 706C61636561626C65-
 42496 00008A6F 20706172616D657465-
 42496 00008A78 722E0D0A           
 42497 00008A7C 202028736574292020-     	db '  (set)      Specifies a set of one or more files.  Wildcards may be used.',0Dh,0Ah
 42497 00008A85 202020205370656369-
 42497 00008A8E 666965732061207365-
 42497 00008A97 74206F66206F6E6520-
 42497 00008AA0 6F72206D6F72652066-
 42497 00008AA9 696C65732E20205769-
 42497 00008AB2 6C646361726473206D-
 42497 00008ABB 617920626520757365-
 42497 00008AC4 642E0D0A           
 42498                                  MSG_1882:
 42499 00008AC8 56                      	db 86
 42500 00008AC9 2020636F6D6D616E64-     	db '  command    Specifies the command to carry out for each file.',0Dh,0Ah
 42500 00008AD2 202020205370656369-
 42500 00008ADB 666965732074686520-
 42500 00008AE4 636F6D6D616E642074-
 42500 00008AED 6F206361727279206F-
 42500 00008AF6 757420666F72206561-
 42500 00008AFF 63682066696C652E0D-
 42500 00008B08 0A                 
 42501 00008B09 2020636F6D6D616E64-     	db '  command-parameters',0Dh,0Ah
 42501 00008B12 2D706172616D657465-
 42501 00008B1B 72730D0A           
 42502                                  MSG_1883:
 42503 00008B1F A2                      	db 162
 42504 00008B20 202020202020202020-     	db '             Specifies parameters or switches for the specified command.',0Dh,0Ah
 42504 00008B29 202020205370656369-
 42504 00008B32 666965732070617261-
 42504 00008B3B 6D6574657273206F72-
 42504 00008B44 207377697463686573-
 42504 00008B4D 20666F722074686520-
 42504 00008B56 737065636966696564-
 42504 00008B5F 20636F6D6D616E642E-
 42504 00008B68 0D0A               
 42505 00008B6A 0D0A                    	db 0Dh,0Ah
 42506 00008B6C 546F20757365207468-     	db 'To use the FOR command in a batch program, specify %%variable instead of',0Dh,0Ah
 42506 00008B75 6520464F5220636F6D-
 42506 00008B7E 6D616E6420696E2061-
 42506 00008B87 206261746368207072-
 42506 00008B90 6F6772616D2C207370-
 42506 00008B99 656369667920252576-
 42506 00008BA2 61726961626C652069-
 42506 00008BAB 6E7374656164206F66-
 42506 00008BB4 0D0A               
 42507 00008BB6 257661726961626C65-     	db '%variable.',0Dh,0Ah
 42507 00008BBF 2E0D0A             
 42508                                  MSG_1900:
 42509                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42510                                  %if 0
 42511                                  	; MSDOS 6.22 COMMAND.COM
 42512                                  	db 23
 42513                                  	db 'Reserved command name',0Dh,0Ah
 42514                                  %else
 42515                                  	; PCDOS 7.1 COMMAND.COM
 42516 00008BC2 48                      	db 72
 42517 00008BC3 52657475726E732061-     	db 'Returns a fully qualified filename.',0Dh,0Ah
 42517 00008BCC 2066756C6C79207175-
 42517 00008BD5 616C69666965642066-
 42517 00008BDE 696C656E616D652E0D-
 42517 00008BE7 0A                 
 42518 00008BE8 0D0A                    	db 0Dh,0Ah
 42519 00008BEA 545255454E414D4520-     	db 'TRUENAME [drive:][path]filename',0Dh,0Ah
 42519 00008BF3 5B64726976653A5D5B-
 42519 00008BFC 706174685D66696C65-
 42519 00008C05 6E616D650D0A       
 42520                                  %endif
 42521                                  MSG_1920:
 42522 00008C0B 2F                      	db 47
 42523 00008C0C 4C6F61647320612070-     	db 'Loads a program into the upper memory area.',0Dh,0Ah
 42523 00008C15 726F6772616D20696E-
 42523 00008C1E 746F20746865207570-
 42523 00008C27 706572206D656D6F72-
 42523 00008C30 7920617265612E0D0A 
 42524 00008C39 0D0A                    	db 0Dh,0Ah
 42525                                  MSG_1921:
 42526                                  	;db 88
 42527                                  	;db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 42528                                  	;db 'LH [drive:][path]filename [parameters]',0Dh,0Ah
 42529                                  	;db 0Dh,0Ah
 42530                                  
 42531                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42532                                  %if 0
 42533                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42534                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9303h
 42535                                  	db 157
 42536                                  	db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 42537                                  	db 'LOADHIGH [/L:region1[,minsize1][;region2[,minsize2]...] [/S]]',0Dh,0Ah
 42538                                  	db '         [drive:][path]filename [parameters]',0Dh,0Ah
 42539                                  	db 0Dh,0Ah
 42540                                  %else
 42541                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42542                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:90EBh
 42543 00008C3B 98                      	db 152
 42544 00008C3C 4C4F41444849474820-     	db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 42544 00008C45 5B64726976653A5D5B-
 42544 00008C4E 706174685D66696C65-
 42544 00008C57 6E616D65205B706172-
 42544 00008C60 616D65746572735D0D-
 42544 00008C69 0A                 
 42545 00008C6A 4C4F41444849474820-     	db 'LOADHIGH [/L:region1[,minsize1][;region2[,minsize2]...]]',0Dh,0Ah
 42545 00008C73 5B2F4C3A726567696F-
 42545 00008C7C 6E315B2C6D696E7369-
 42545 00008C85 7A65315D5B3B726567-
 42545 00008C8E 696F6E325B2C6D696E-
 42545 00008C97 73697A65325D2E2E2E-
 42545 00008CA0 5D5D0D0A           
 42546 00008CA4 202020202020202020-     	db '         [drive:][path]filename [parameters]',0Dh,0Ah
 42546 00008CAD 5B64726976653A5D5B-
 42546 00008CB6 706174685D66696C65-
 42546 00008CBF 6E616D65205B706172-
 42546 00008CC8 616D65746572735D0D-
 42546 00008CD1 0A                 
 42547 00008CD2 0D0A                    	db 0Dh,0Ah	
 42548                                  %endif
 42549                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:8111h)
 42550                                  ;MSG_1922: 	; MSDOS 5.0 COMMAND.COM
 42551                                  	;db 113
 42552                                  	;db '  parameters   Specifies any command-line information required by the',0Dh,0Ah
 42553                                  	;db '               program you want to load.',0Dh,0Ah
 42554                                  
 42555                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42556                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:93A1h
 42557                                  MSG_1922:
 42558 00008CD4 B6                      	db 182
 42559 00008CD5 2F4C3A726567696F6E-     	db '/L:region1[,minsize1][;region2[,minsize2]]...',0Dh,0Ah
 42559 00008CDE 315B2C6D696E73697A-
 42559 00008CE7 65315D5B3B72656769-
 42559 00008CF0 6F6E325B2C6D696E73-
 42559 00008CF9 697A65325D5D2E2E2E-
 42559 00008D02 0D0A               
 42560 00008D04 202020202020202020-     	db '            Specifies the region(s) of memory into which to load',0Dh,0Ah
 42560 00008D0D 202020537065636966-
 42560 00008D16 696573207468652072-
 42560 00008D1F 6567696F6E28732920-
 42560 00008D28 6F66206D656D6F7279-
 42560 00008D31 20696E746F20776869-
 42560 00008D3A 636820746F206C6F61-
 42560 00008D43 640D0A             
 42561 00008D46 202020202020202020-     	db '            the program.  Region1 specifies the number of the first',0Dh,0Ah
 42561 00008D4F 202020746865207072-
 42561 00008D58 6F6772616D2E202052-
 42561 00008D61 6567696F6E31207370-
 42561 00008D6A 656369666965732074-
 42561 00008D73 6865206E756D626572-
 42561 00008D7C 206F66207468652066-
 42561 00008D85 697273740D0A       
 42562                                  MSG_1923:
 42563 00008D8B 85                      	db 133
 42564 00008D8C 202020202020202020-     	db '            memory region; minsize1 specifies the minimum size, if',0Dh,0Ah
 42564 00008D95 2020206D656D6F7279-
 42564 00008D9E 20726567696F6E3B20-
 42564 00008DA7 6D696E73697A653120-
 42564 00008DB0 737065636966696573-
 42564 00008DB9 20746865206D696E69-
 42564 00008DC2 6D756D2073697A652C-
 42564 00008DCB 2069660D0A         
 42565 00008DD0 202020202020202020-     	db '            any, for region1.  Region2 and minsize2 specify the',0Dh
 42565 00008DD9 202020616E792C2066-
 42565 00008DE2 6F7220726567696F6E-
 42565 00008DEB 312E2020526567696F-
 42565 00008DF4 6E3220616E64206D69-
 42565 00008DFD 6E73697A6532207370-
 42565 00008E06 656369667920746865-
 42565 00008E0F 0D                 
 42566 00008E10 0A                      	db 0Ah
 42567                                  MSG_1924:
 42568                                  ; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42569                                  %if 0
 42570                                  	db 127
 42571                                  	db '            number and minimum size of the second region, if any.',0Dh,0Ah
 42572                                  	db '            You can specify as many regions as you want.',0Dh,0Ah
 42573                                  	db 0Dh,0Ah
 42574                                  MSG_1925:
 42575                                  	db 131
 42576                                  	db '/S          Shrinks a UMB to its minimum size while the program',0Dh,0Ah
 42577                                  	db '            is loading.  /S is normally used only by MemMaker.',0Dh,0Ah
 42578                                  	db 0Dh,0Ah
 42579                                  %else
 42580 00008E11 7B                      	db 123
 42581 00008E12 202020202020202020-     	db '            number and minimum size of the second region, if any.',0Dh,0Ah
 42581 00008E1B 2020206E756D626572-
 42581 00008E24 20616E64206D696E69-
 42581 00008E2D 6D756D2073697A6520-
 42581 00008E36 6F6620746865207365-
 42581 00008E3F 636F6E642072656769-
 42581 00008E48 6F6E2C20696620616E-
 42581 00008E51 792E0D0A           
 42582 00008E55 202020202020202020-     	db '            You can specify as many regions as you want.'
 42582 00008E5E 202020596F75206361-
 42582 00008E67 6E2073706563696679-
 42582 00008E70 206173206D616E7920-
 42582 00008E79 726567696F6E732061-
 42582 00008E82 7320796F752077616E-
 42582 00008E8B 742E               
 42583                                  MSG_1925:
 42584 00008E8D 02                      	db 2
 42585 00008E8E 0D0A                    	db 0Dh,0Ah
 42586                                  %endif
 42587                                  MSG_1926:
 42588 00008E90 57                      	db 87
 42589 00008E91 5B64726976653A5D5B-     	db '[drive:][path]filename',0Dh,0Ah
 42589 00008E9A 706174685D66696C65-
 42589 00008EA3 6E616D650D0A       
 42590 00008EA9 202020202020202020-     	db '            Specifies the location and name of the program.',0Dh,0Ah
 42590 00008EB2 202020537065636966-
 42590 00008EBB 69657320746865206C-
 42590 00008EC4 6F636174696F6E2061-
 42590 00008ECD 6E64206E616D65206F-
 42590 00008ED6 66207468652070726F-
 42590 00008EDF 6772616D2E0D0A     
 42591 00008EE6 0D0A                    	db 0Dh,0Ah
 42592                                  
 42593                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42594                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:963Ah
 42595                                  
 42596                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42597                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9398h
 42598                                  MSG_1927:
 42599 00008EE8 5A                      	db 90
 42600 00008EE9 706172616D65746572-     	db 'parameters  Specifies any command-line information required by',0Dh,0Ah
 42600 00008EF2 732020537065636966-
 42600 00008EFB 69657320616E792063-
 42600 00008F04 6F6D6D616E642D6C69-
 42600 00008F0D 6E6520696E666F726D-
 42600 00008F16 6174696F6E20726571-
 42600 00008F1F 75697265642062790D-
 42600 00008F28 0A                 
 42601 00008F29 202020202020202020-     	db '            the program.',0Dh,0Ah
 42601 00008F32 202020746865207072-
 42601 00008F3B 6F6772616D2E0D0A   
 42602                                  
 42603                                  	; 02/08/2024 - Retro DOS v5.0 COMMAND.COM
 42604                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:96F3h
 42605                                  MSG_1107:
 42606 00008F43 0C                      	db 12
 42607 00008F44 2531204B2062797465-     	db '%1 K bytes',0Dh,0Ah
 42607 00008F4D 730D0A             
 42608                                  
 42609                                  ; ---------------------------------------------------------------------------
 42610                                  
 42611                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42612                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8183h
 42613                                  
 42614                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42615                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9695h
 42616                                  
 42617                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42618                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:9400h
 42619                                  
 42620                                  ; --------------- S U B R O U T I N E ---------------------------------------
 42621                                  
 42622                                  $M_CLS_3:
 42623 00008F50 0E                      	push	cs		; CLASS_F
 42624 00008F51 07                      	pop	es
 42625 00008F52 8D3E[FD62]              	lea	di,$M_CLASS_3_STRUC ; LEA DI,$M_CLASS_3_STRUC
 42626                                  	; 15/04/2023
 42627                                  	;add	cx,10053	; ADD CX,$-$M_CLASS_3_STRUC ; 8189h-5A44h
 42628                                  	; 17/06/2023
 42629                                  	;add	cx,11627	; ADD CX,$-$M_CLASS_3_STRUC ; 969Bh-6930h
 42630                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42631                                  	;add	cx,11353	; ADD CX,$-$M_CLASS_3_STRUC ; 9406h-67ADh
 42632 00008F56 81C1592C                	add	cx,$-$M_CLASS_3_STRUC
 42633 00008F5A C3                      	retn
 42634                                  
 42635                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42636                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:818Eh
 42637                                  
 42638                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42639                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96A0h
 42640                                  
 42641                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42642                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:940Bh
 42643                                  
 42644                                  ; ---------------------------------------------------------------------------
 42645                                  ; Class 1 messages
 42646                                  ; ---------------------------------------------------------------------------
 42647                                  	
 42648                                  $M_CLASS_1_STRUC:
 42649 00008F5B 01                      	db 1			; $M_CLASS_ID
 42650                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 42651                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42652                                  	;dw 1606h  ; MSDOS 6.22 COMMAND.COM
 42653                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
 42654 00008F5C 070A                    	dw 0A07h  ; PCDOS 7.10 COMMAND.COM
 42655 00008F5E 04                      	db 4			; Class_1_MessageCount
 42656                                  $M_ID_1_1:
 42657 00008F5F 0200                    	dw 2			; Message Number = 2
 42658 00008F61 1000                    	dw EXTEND2-$+2 ; 10h	; Message offset from message number
 42659                                  $M_ID_1_2:
 42660 00008F63 0300                    	dw 3			; Message Number = 3
 42661 00008F65 1B00                    	dw EXTEND3-$+2 ; 1Bh	; Message offset from message number
 42662                                  $M_ID_1_3:
 42663 00008F67 0800                    	dw 8			; Message Number = 8
 42664 00008F69 2600                    	dw EXTEND8-$+2 ; 26h	; Message offset from message number
 42665                                  $M_ID_1_4:
 42666 00008F6B FFFF                    	dw 0FFFFh		; Message Number = -1
 42667 00008F6D 3600                    	dw EXTEND999-$+2 ; 36h	; Message offset from message number
 42668                                  
 42669                                  ; ---------------------------------------------------------------------------
 42670                                  
 42671                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81A2h
 42672                                  EXTEND2:
 42673 00008F6F 0E                      	db 14
 42674 00008F70 46696C65206E6F7420-     	db 'File not found'
 42674 00008F79 666F756E64         
 42675                                  EXTEND3:
 42676 00008F7E 0E                      	db 14
 42677 00008F7F 50617468206E6F7420-     	db 'Path not found'
 42677 00008F88 666F756E64         
 42678                                  EXTEND8:
 42679 00008F8D 13                      	db 19
 42680 00008F8E 496E73756666696369-     	db 'Insufficient memory'
 42680 00008F97 656E74206D656D6F72-
 42680 00008FA0 79                 
 42681                                  EXTEND999:
 42682 00008FA1 11                      	db 17
 42683 00008FA2 457874656E64656420-     	db 'Extended Error %1'
 42683 00008FAB 4572726F72202531   
 42684                                  
 42685                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42686                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81E6h
 42687                                  
 42688                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42689                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:96F8h
 42690                                  
 42691                                  ; --------------- S U B R O U T I N E ---------------------------------------
 42692                                  $M_MSGSERV_1:
 42693 00008FB3 0E                      	push	cs
 42694 00008FB4 07                      	pop	es
 42695 00008FB5 8D3E[5B8F]              	lea	di,$M_CLASS_1_STRUC
 42696                                  	; 15/04/2023
 42697                                  	;add	cx,94		; $-$M_CLASS_1_STRUC ; 81ECh-818Eh
 42698                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 42699                                  				; 96FEh-96A0h = 5Eh = 94
 42700                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42701                                  	;add	cx,94 ; Retro DOS v5.0 COMMAND.COM
 42702 00008FB9 C3                      	retn
 42703                                  
 42704                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42705                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F0h
 42706                                  
 42707                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42708                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9702h
 42709                                  
 42710                                  ; ---------------------------------------------------------------------------
 42711                                  ; Class 2 messages
 42712                                  ; ---------------------------------------------------------------------------
 42713                                  	
 42714                                  $M_CLASS_2_STRUC:
 42715 00008FBA 02                      	db 2			; $M_CLASS_ID
 42716                                  	;dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 42717                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42718                                  	;dw 1606h  ; MSDOS 6.22 COMMAND.COM
 42719                                  	; 21/07/2024 - Retro DOS v5.0 COMMAND.COM
 42720 00008FBB 070A                    	dw 0A07h  ; PCDOS 7.10 COMMAND.COM
 42721 00008FBD 01                      	db 1			; Class_2_MessageCount
 42722                                  $M_ID_2_1:
 42723 00008FBE FFFF                    	dw 0FFFFh		; Message Number = -1
 42724 00008FC0 0400                    	dw PARSE999-$+2 ; 4	; Message offset from message number
 42725                                  ; ---------------------------------------------------------------------------
 42726                                  
 42727                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F8h
 42728                                  PARSE999:
 42729 00008FC2 0E                      	db 14
 42730 00008FC3 506172736520457272-     	db 'Parse Error %1'
 42730 00008FCC 6F72202531         
 42731                                  
 42732                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42733                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8207h
 42734                                  
 42735                                  	; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42736                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9719h
 42737                                  
 42738                                  	; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42739                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:9484h
 42740                                  
 42741                                  ; --------------- S U B R O U T I N E ---------------------------------------
 42742                                  $M_MSGSERV_2:
 42743 00008FD1 0E                      	push	cs
 42744 00008FD2 07                      	pop	es
 42745 00008FD3 8D3E[BA8F]              	lea	di,$M_CLASS_2_STRUC
 42746                                  	; 15/04/2023
 42747                                  	;add	cx,29		; $-$M_CLASS_2_STRUC ; 820Dh-81F0h
 42748                                  			; 17/06/2023 MSDOS 6.22 COMMAND.COM
 42749                                  				; 971Fh-9702h = 1Dh = 29
 42750                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 42751                                  	;add	cx,29 ; Retro DOS v5.0 COMMAND.COM
 42752 00008FD7 C3                      	retn
 42753                                  
 42754                                  ;============================================================================
 42755                                  ; TRANMSG.ASM, MSDOS 6.0, 1991
 42756                                  ;============================================================================
 42757                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 42758                                  ; 17/06/2023 - Retro DOS v4.2 COMMAND.COM
 42759                                  ; 06/08/2024 - Retro DOS v5.0 COMMAND.COM
 42760                                  
 42761                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8211h
 42762                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9723h
 42763                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:948Eh
 42764                                  
 42765                                  ;****************************************************
 42766                                  ;* TRANSIENT MESSAGE POINTERS & SUBSTITUTION BLOCKS *
 42767                                  ;****************************************************
 42768                                  
 42769                                  msg_disp_class:
 42770 00008FD8 FF                      	db	util_msg_class ; 0FFh
 42771                                  msg_cont_flag:
 42772 00008FD9 00                      	db	no_cont_flag ; 0
 42773                                  
 42774                                  ;  extended error string output
 42775                                  extend_buf_ptr:
 42776 00008FDA 0000                    	dw	0			;AN000;set to no message
 42777                                  extend_buf_sub:
 42778 00008FDC 00                      	db	0			;AN000;set to no substitutions
 42779 00008FDD 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42780 00008FDE 00                      	db	0			;AN000;reserved
 42781                                  extend_buf_off:
 42782 00008FDF [129E]                  	dw	string_ptr_2		;AN000;offset of arg
 42783                                  extend_buf_seg:
 42784 00008FE1 0000                    	dw	0			;AN000;segment of arg
 42785 00008FE3 00                      	db	0			;AN000;first subst
 42786 00008FE4 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 42787 00008FE5 80                      	db	128			;AN000;maximum width
 42788 00008FE6 00                      	db	0			;AN000;minimum width
 42789 00008FE7 20                      	db	blank ; 20h		;AN000;pad character
 42790                                  
 42791                                  ;  "Duplicate file name or file not found"
 42792                                  RENERR_PTR:
 42793 00008FE8 EA03                    	dw	1002			;AN000;message number
 42794 00008FEA 00                      	db	no_subst ; 0		;AN000;number of subst
 42795                                  
 42796                                  ;  "Invalid path or file name"
 42797                                  BADCPMES_PTR:
 42798 00008FEB EB03                    	dw	1003			;AN000;message number
 42799 00008FED 00                      	db	no_subst ; 0		;AN000;number of subst
 42800                                  
 42801                                  ;  "Insufficient disk space"
 42802                                  NOSPACE_PTR:
 42803 00008FEE EC03                    	dw	1004			;AN000;message number
 42804 00008FF0 00                      	db	no_subst ; 0		;AN000;number of subst
 42805                                  
 42806                                  ;  "Out of environment space"
 42807                                  ENVERR_PTR:
 42808 00008FF1 EF03                    	dw	1007			;AN000;message number
 42809 00008FF3 00                      	db	no_subst ; 0		;AN000;number of subst
 42810                                  
 42811                                  ;  "File creation error"
 42812                                  FULLDIR_PTR:
 42813 00008FF4 F003                    	dw	1008			;AN000;message number
 42814 00008FF6 00                      	db	no_subst ; 0		;AN000;number of subst
 42815                                  
 42816                                  ;  "Batch file missing",13,10
 42817                                  BADBAT_PTR:
 42818 00008FF7 F103                    	dw	1009			;AN000;message number
 42819 00008FF9 00                      	db	no_subst ; 0		;AN000;number of subst
 42820                                  
 42821                                  ;  "Insert disk with batch file",13,10
 42822                                  NEEDBAT_PTR:
 42823 00008FFA F203                    	dw	1010			;AN000;message number
 42824 00008FFC 00                      	db	no_subst ; 0		;AN000;number of subst
 42825                                  
 42826                                  ;  "Bad command or file name",13,10
 42827                                  BADNAM_PTR:
 42828 00008FFD F303                    	dw	1011			;AN000;message number
 42829 00008FFF 00                      	db	no_subst ; 0		;AN000;number of subst
 42830                                  
 42831                                  ; 04/08/2024 - PCDOS 7.1 COMMAND.COM
 42832                                  %if 1
 42833                                  ; "REXX interpreter not found",13,10
 42834                                  REXXNOTF_PTR:
 42835 00009000 F403                    	dw	1012
 42836 00009002 00                      	db	no_subst ; 0
 42837                                  %endif
 42838                                  
 42839                                  ;  "Access denied",13,10
 42840                                  ACCDEN_PTR:
 42841 00009003 F603                    	dw	1014			;AN000;message number
 42842 00009005 00                      	db	no_subst ; 0		;AN000;number of subst
 42843                                  
 42844                                  ;  "File cannot be copied onto itself",13,10
 42845                                  OVERWR_PTR:
 42846 00009006 F703                    	dw	1015			;AN000;message number
 42847 00009008 00                      	db	no_subst ; 0		;AN000;number of subst
 42848                                  
 42849                                  ;  "Content of destination lost before copy",13,10
 42850                                  LOSTERR_PTR:
 42851 00009009 F803                    	dw	1016			;AN000;message number
 42852 0000900B 00                      	db	no_subst ; 0		;AN000;number of subst
 42853                                  
 42854                                  ;  "Invalid filename or file not found",13,10
 42855                                  INORNOT_PTR:
 42856 0000900C F903                    	dw	1017			;AN000;message number
 42857 0000900E 00                      	db	no_subst		;AN000;number of subst
 42858                                  
 42859                                  ;  "%1 File(s) copied",13,10
 42860                                  copied_ptr:
 42861 0000900F FA03                    	dw	1018			;AN000;message number
 42862 00009011 01                      	db	1			;AN000;number of subst
 42863 00009012 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42864 00009013 00                      	db	0			;AN000;reserved
 42865 00009014 [149E]                  	dw	Copy_num		;AN000;offset of arg
 42866 00009016 0000                    	dw	0			;AN000;segment of arg
 42867 00009018 01                      	db	1			;AN000;first subst
 42868 00009019 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 42869                                  					;AN000;binary to decimal
 42870 0000901A 09                      	db	9			;AN000;maximum width
 42871 0000901B 09                      	db	9			;AN000;minimum width
 42872 0000901C 20                      	db	blank ; 20h		;AN000;pad character
 42873                                  
 42874                                  ;  "%1 File(s) "
 42875                                  dirmes_ptr:
 42876 0000901D FB03                    	dw	1019			;AN000;message number
 42877 0000901F 01                      	db	1			;AN000;number of subst
 42878 00009020 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42879 00009021 00                      	db	0			;AN000;reserved
 42880 00009022 [179E]                  	dw	Dir_Num			;AN000;offset of arg
 42881 00009024 0000                    	dw	0			;AN000;segment of arg
 42882 00009026 01                      	db	1			;AN000;first subst
 42883                                  	; MSDOS 5.0 COMMAND.COM
 42884                                  	;db	0A1h ; Right_Align+Unsgn_Bin_Word
 42885                                  	; 17/06/2023
 42886                                  ;screen_f_3:
 42887 00009027 E1                      	db	0E1h ; MSDOS 6.22 COMMAND.COM
 42888                                  					;AN000;binary to decimal
 42889 00009028 09                      	db	9			;AN000;maximum width
 42890 00009029 09                      	db	9			;AN000;minimum width
 42891 0000902A 20                      	db	blank ; 20h		;AN000;pad character
 42892                                  
 42893                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 42894                                  %if 0
 42895                                  ;  "%1 bytes free",13,10
 42896                                  bytmes_ptr:
 42897                                  	dw	1020			;AN000;message number
 42898                                  	db	1			;AN000;number of subst
 42899                                  	db	parm_block_size ; 11	;AN000;size of sublist
 42900                                  	db	0			;AN000;reserved
 42901                                  	dw	Bytes_Free		;AN000;offset of arg
 42902                                  	dw	0			;AN000;segment of arg
 42903                                  	db	1			;AN000;first subst
 42904                                  	; MSDOS 5.0 COMMAND.COM
 42905                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 42906                                  	; 17/06/2023
 42907                                  screen_f_6:
 42908                                  	db	0F1h			;AN000;long binary to decimal
 42909                                  	; MSDOS 5.0 COMMAND.COM
 42910                                  	;db	28			;AN000;maximum width
 42911                                  	;db	28			;AN000;minimum width
 42912                                  	; 17/06/2023
 42913                                  screen_f_7:
 42914                                  	db	32 ; MSDOS 6.22 COMMAND.COM
 42915                                  	db	32
 42916                                  
 42917                                  	db	blank ; 20h		;AN000;pad character
 42918                                  %else
 42919                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 42920                                  	; PCDOS 7.1 COMMAND.COM
 42921                                  dirmes_w_ptr:
 42922 0000902B FB03                    	dw	1019
 42923 0000902D 01                      	db	1
 42924 0000902E 0B                      	db	11
 42925 0000902F 00                      	db	0
 42926 00009030 [179E]                  	dw	Dir_Num
 42927 00009032 0000                    	dw	0
 42928 00009034 01                      	db	1
 42929 00009035 F1                      	db	0F1h			; long binary to decimal
 42930 00009036 0A                      	db	10
 42931 00009037 0A                      	db	10
 42932 00009038 20                      	db	20h
 42933                                  dirmes2_ptr:
 42934 00009039 FB03                    	dw	1019
 42935 0000903B 01                      	db	1
 42936 0000903C 0B                      	db	11
 42937 0000903D 00                      	db	0
 42938 0000903E [179E]                  	dw	Dir_Num
 42939 00009040 0000                    	dw	0
 42940 00009042 01                      	db	1
 42941 00009043 B1                      	db	0B1h			; Right_Align+Unsgn_Bin_DWord
 42942 00009044 09                      	db	9
 42943 00009045 09                      	db	9
 42944 00009046 20                      	db	20h
 42945                                  bytmes1_ptr:
 42946 00009047 FC03                    	dw	1020
 42947 00009049 01                      	db	1
 42948 0000904A 0B                      	db	11
 42949 0000904B 00                      	db	0
 42950 0000904C [199E]                  	dw	Bytes_Free
 42951 0000904E 0000                    	dw	0
 42952 00009050 01                      	db	1
 42953 00009051 F1                      	db	0F1h			; long binary to decimal
 42954 00009052 1E                      	db	30			; maximum width
 42955 00009053 1E                      	db	30			; minimum width
 42956 00009054 20                      	db	20h			; blank
 42957                                  bytmes2_ptr:
 42958 00009055 FC03                    	dw	1020
 42959 00009057 01                      	db	1
 42960 00009058 0B                      	db	11
 42961 00009059 00                      	db	0
 42962 0000905A [199E]                  	dw 	Bytes_Free
 42963 0000905C 0000                    	dw	0
 42964 0000905E 01                      	db	1
 42965 0000905F F1                      	db	0F1h			; long binary to decimal
 42966 00009060 21                      	db	33			; maximum width
 42967 00009061 21                      	db	33			; minimum width
 42968 00009062 20                      	db	20h			; pad
 42969                                  bytmes_n_ptr:
 42970 00009063 FC03                    	dw	1020
 42971 00009065 01                      	db	1
 42972 00009066 0B                      	db	11			; parm_block_size
 42973 00009067 00                      	db	0
 42974 00009068 [199E]                  	dw	Bytes_Free
 42975 0000906A 0000                    	dw	0
 42976 0000906C 01                      	db	1
 42977 0000906D B1                      	db	0B1h			; Right_Align+Unsgn_Bin_DWord
 42978 0000906E 1C                      	db	28
 42979 0000906F 1C                      	db	28
 42980 00009070 20                      	db	20h
 42981                                  %endif
 42982                                  
 42983                                  ;  "Invalid drive specification",13,10
 42984                                  baddrv_ptr:
 42985 00009071 FD03                    	dw	1021			;AN000;message number
 42986 00009073 00                      	db	no_subst ; 0		;AN000;number of subst
 42987                                  
 42988                                  ;  "Code page %1 not prepared for system",13,10
 42989                                  cp_not_set_ptr:
 42990 00009074 FE03                    	dw	1022			;AN000;message number
 42991 00009076 01                      	db	1			;AN000;number of subst
 42992 00009077 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 42993 00009078 00                      	db	0			;AN000;reserved
 42994 00009079 [0C9E]                  	dw	system_cpage		;AN000;offset of arg
 42995 0000907B 0000                    	dw	0			;AN000;segment of arg
 42996 0000907D 01                      	db	1			;AN000;first subst
 42997 0000907E A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 42998                                  					;AN000;binary to decimal
 42999 0000907F 05                      	db	5			;AN000;maximum width
 43000 00009080 01                      	db	1			;AN000;minimum width
 43001 00009081 20                      	db	blank ; 20h		;AN000;pad character
 43002                                  
 43003                                  ;  "Code page %1 not prepared for all devices",13,10
 43004                                  cp_not_all_ptr:
 43005 00009082 FF03                    	dw	1023			;AN000;message number
 43006 00009084 01                      	db	1			;AN000;number of subst
 43007 00009085 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 43008 00009086 00                      	db	0			;AN000;reserved
 43009 00009087 [0C9E]                  	dw	system_cpage		;AN000;offset of arg
 43010 00009089 0000                    	dw	0			;AN000;segment of arg
 43011 0000908B 01                      	db	1			;AN000;first subst
 43012 0000908C A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 43013                                  					;AN000;binary to decimal
 43014 0000908D 05                      	db	5			;AN000;maximum width
 43015 0000908E 01                      	db	1			;AN000;minimum width
 43016 0000908F 20                      	db	blank ; 20h		;AN000;pad character
 43017                                  
 43018                                  ;  "Active code page: %1",13,10
 43019                                  cp_active_ptr:
 43020 00009090 0004                    	dw	1024			;AN000;message number
 43021 00009092 01                      	db	1			;AN000;number of subst
 43022 00009093 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43023 00009094 00                      	db	0			;AN000;reserved
 43024 00009095 [0C9E]                  	dw	system_cpage		;AN000;offset of arg
 43025 00009097 0000                    	dw	0			;AN000;segment of arg
 43026 00009099 01                      	db	1			;AN000;first subst
 43027 0000909A A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 43028                                  					;AN000;binary to decimal
 43029 0000909B 05                      	db	5			;AN000;maximum width
 43030 0000909C 01                      	db	1			;AN000;minimum width
 43031 0000909D 20                      	db	blank ; 20h		;AN000;pad character
 43032                                  
 43033                                  ;  "NLSFUNC not installed",13,10
 43034                                  NLSFUNC_PTR:
 43035 0000909E 0104                    	dw	1025			;AN000;message number
 43036 000090A0 00                      	db	no_subst ; 0		;AN000;number of subst
 43037                                  
 43038                                  ;  "Invalid code page",13,10
 43039                                  INV_CODE_PAGE:
 43040 000090A1 0204                    	dw	1026			;AN000;message number
 43041 000090A3 00                      	db	no_subst ; 0		;AN000;number of subst
 43042                                  
 43043                                  ;  "Current drive is no longer valid"
 43044                                  BADCURDRV:
 43045 000090A4 0304                    	dw	1027			;AN000;message number
 43046 000090A6 00                      	db	no_subst ; 0		;AN000;number of subst
 43047                                  
 43048                                  ;  "Press any key to continue"
 43049                                  PAUSEMES_PTR:
 43050 000090A7 0404                    	dw	1028			;AN000;message number
 43051 000090A9 00                      	db	no_subst ; 0		;AN000;number of subst
 43052                                  
 43053                                  ;  "Label not found",13,10
 43054                                  BADLAB_PTR:
 43055 000090AA 0504                    	dw	1029			;AN000;message number
 43056 000090AC 00                      	db	no_subst ; 0		;AN000;number of subst
 43057                                  
 43058                                  ;  "Syntax error",13,10
 43059                                  SYNTMES_PTR:
 43060 000090AD 0604                    	dw	1030			;AN000;message number
 43061 000090AF 00                      	db	no_subst ; 0		;AN000;number of subst
 43062                                  
 43063                                  ;  "Invalid date",13,10
 43064                                  BADDAT_PTR:
 43065 000090B0 0704                    	dw	1031			;AN000;message number
 43066 000090B2 00                      	db	no_subst ; 0		;AN000;number of subst
 43067                                  
 43068                                  ;  "Current date is %1 %2",13,10
 43069                                  CurDat_Ptr:
 43070 000090B3 0804                    	dw	1032			;AN000;message number
 43071 000090B5 02                      	db	2			;AN000;number of subst
 43072 000090B6 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43073 000090B7 00                      	db	0			;AN000;reserved
 43074 000090B8 [06A4]                  	dw	Arg_Buf			;AN000;offset of arg
 43075 000090BA 0000                    	dw	0			;AN000;segment of arg
 43076 000090BC 01                      	db	1			;AN000;first subst
 43077 000090BD 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43078 000090BE 03                      	db	3			;AN000;maximum width
 43079 000090BF 03                      	db	3			;AN000;minimum width
 43080 000090C0 20                       	db	blank ; 20h		;AN000;pad character
 43081 000090C1 0B                      	db	parm_block_size 	;AN000;size of sublist
 43082 000090C2 00                      	db	0			;AN000;reserved
 43083                                  CurDat_yr:
 43084 000090C3 0000                    	dw	0			;AN000;year
 43085                                  CurDat_mo_day:
 43086 000090C5 0000                    	dw	0			;AN000;month,day
 43087 000090C7 02                      	db	2			;AN000;second subst
 43088 000090C8 34                      	db	34h ; DATE_MDY_4	;AN000;date
 43089 000090C9 0A                      	db	10			;AN000;maximum width
 43090 000090CA 0A                      	db	10			;AN000;minimum width
 43091 000090CB 20                      	db	blank ; 20h		;AN000;pad character
 43092                                  
 43093                                  ;  "SunMonTueWedThuFriSat"
 43094                                  WeekTab:
 43095 000090CC 0904                    	dw	1033			;AN000;message number
 43096 000090CE 00                      	db	no_subst ; 0		;AN000;number of subst
 43097                                  
 43098                                  ;  "Enter new date (%1):"
 43099                                  
 43100                                  NewDat_Ptr:
 43101 000090CF 0A04                    	dw	1034			;AN000;message number
 43102 000090D1 01                      	db	1			;AN000;number of subst
 43103 000090D2 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43104 000090D3 00                      	db	0			;AN000;reserved
 43105                                  NewDat_Format:
 43106 000090D4 0000                    	dw	0			;AN000;offset of replacement
 43107 000090D6 0000                    	dw	0			;AN000;segment of arg
 43108 000090D8 01                      	db	1			;AN000;first subst
 43109 000090D9 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43110 000090DA 08                      	db	8			;AN000;maximum width
 43111 000090DB 08                      	db	8			;AN000;minimum width
 43112 000090DC 20                      	db	blank ; 20h		;AN000;pad character
 43113                                  
 43114                                  ;  "Invalid time",13,10
 43115                                  
 43116                                  BadTim_Ptr:
 43117 000090DD 0B04                    	dw	1035			;AN000;message number
 43118 000090DF 00                      	db	no_subst ; 0		;AN000;number of subst
 43119                                  
 43120                                  ;  "Current time is %1",13,10
 43121                                  CurTim_Ptr:
 43122 000090E0 0C04                    	dw	1036			;AN000;message number
 43123 000090E2 01                      	db	1			;AN000;number of subst
 43124 000090E3 0B                      	db	parm_block_size 	;AN000;size of sublist
 43125 000090E4 00                      	db	0			;AN000;reserved
 43126                                  CurTim_hr_min:
 43127 000090E5 0000                    	dw	0			;AN000;hours,minutes
 43128                                  CurTim_Sec_hn:
 43129 000090E7 0000                    	dw	0			;AN000;seconds,hundredths
 43130 000090E9 01                      	db	1			;AN000;first subst
 43131 000090EA A5                      	db	0A5h ; Right_Align+TIME_HHMMSSHH_Cty
 43132                                  					;AC059;time
 43133 000090EB 0C                      	db	12			;AC059;maximum width
 43134 000090EC 0C                      	db	12			;AC059;minimum width
 43135 000090ED 20                      	db	blank ; 20h		;AN000;pad character
 43136                                  
 43137                                  ;  "Enter new time:"
 43138                                  NewTim_Ptr:
 43139 000090EE 0D04                    	dw	1037			;AN000;message number
 43140 000090F0 00                      	db	no_subst ; 0		;AN000;number of subst
 43141                                  
 43142                                  ;  ",    Delete (Y/N)?",13,10
 43143                                  Del_Y_N_Ptr:
 43144 000090F1 0E04                    	dw	1038			;AN000;message number
 43145 000090F3 00                      	db	no_subst ; 0		;AN000;number of subst
 43146                                  
 43147                                  ;  "All files in directory will be deleted!",13,10
 43148                                  ;  "Are you sure (Y/N)?",13,10
 43149                                  SureMes_Ptr:
 43150 000090F4 0F04                    	dw	1039			;AN000;message number
 43151 000090F6 00                      	db	no_subst ; 0		;AN000;number of subst
 43152                                  
 43153                                  ;  "Microsoft DOS Version %1.%2",13,10
 43154                                  VerMes_Ptr:
 43155 000090F7 1004                    	dw	1040			;AN000;message number
 43156                                  
 43157                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 43158                                  %if 0
 43159                                  	db	2			;AN000;number of subst
 43160                                  	db	parm_block_size ; 11 	;AN000;size of sublist
 43161                                  	db	0			;AN000;reserved
 43162                                  	dw	Major_Ver_Num		;AN000;offset of arg
 43163                                  	dw	0			;AN000;segment of arg
 43164                                  	db	1			;AN000;first subst
 43165                                  	db	0A1h ; Right_Align+Unsgn_Bin_Word
 43166                                  					;AN000;binary to decimal
 43167                                  	db	1			;AN000;maximum width
 43168                                  	db	1			;AN000;minimum width
 43169                                  	db	blank ; 20h		;AN000;pad character
 43170                                  	db	parm_block_size ; 11	;AN000;size of sublist
 43171                                  	db	0			;AN000;reserved
 43172                                  	dw	Minor_Ver_Num	;AN000;offset of arg
 43173                                  	dw	0			;AN000;segment of arg
 43174                                  	db	2			;AN000;second subst
 43175                                  	db	0A1h ; Right_Align+Unsgn_Bin_Word
 43176                                  					;AN000;binary to decimal
 43177                                  	db	2			;AN000;maximum width
 43178                                  	db	2			;AN000;minimum width
 43179                                  	db	'0' ; 30h		;AN000;pad character
 43180                                  %else
 43181 000090F9 00                      	db	0	; no_subst
 43182                                  %endif
 43183                                  
 43184                                  ;  "Volume in drive %1 has no label",13,10
 43185                                  VolMes_Ptr_2:
 43186 000090FA 1104                    	dw	1041			;AN000;message number
 43187 000090FC 01                      	db	1			;AN000;number of subst
 43188 000090FD 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 43189 000090FE 00                      	db	0			;AN000;reserved
 43190 000090FF [239E]                  	dw	vol_drv			;AN000;offset of drive
 43191 00009101 0000                    	dw	0			;AN000;segment of arg
 43192 00009103 01                      	db	1			;AN000;first subst
 43193 00009104 00                      	db	0 ; Char_field_Char 	;AN000;character
 43194 00009105 80                      	db	128			;AN000;maximum width
 43195 00009106 01                      	db	1			;AN000;minimum width
 43196 00009107 20                      	db	blank ; 20h		;AN000;pad character
 43197                                  
 43198                                  ;  "Volume in drive %1 is %2",13,10
 43199                                  VolMes_Ptr:
 43200 00009108 1204                    	dw	1042			;AN000;message number
 43201 0000910A 02                      	db	2			;AN000;number of subst
 43202 0000910B 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43203 0000910C 00                      	db	0			;AN000;reserved
 43204 0000910D [239E]                  	dw	vol_drv			;AN000;offset of drive
 43205 0000910F 0000                    	dw	0			;AN000;segment of arg
 43206 00009111 01                      	db	1			;AN000;first subst
 43207 00009112 00                      	db	00000000b		;AN000;character
 43208 00009113 80                      	db	128			;AN000;maximum width
 43209 00009114 01                      	db	1			;AN000;minimum width
 43210 00009115 20                      	db	blank ; 20h		;AN000;pad character
 43211 00009116 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43212 00009117 00                      	db	0			;AN000;reserved
 43213 00009118 [DC9C]                  	dw	CHARBUF			;AN000;offset of string
 43214 0000911A 0000                    	dw	0			;AN000;segment of arg
 43215 0000911C 02                      	db	2			;AN000;second subst
 43216 0000911D 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43217 0000911E 80                      	db	128			;AN000;maximum width
 43218 0000911F 01                      	db	1			;AN000;minimum width
 43219 00009120 20                      	db	blank ; 20h		;AN000;pad character
 43220                                  
 43221                                  ;  "Volume Serial Number is %1-%2",13,10
 43222                                  VolSerMes_Ptr:
 43223 00009121 1304                    	dw	1043			;AN000;message number
 43224 00009123 02                      	db	2			;AN000;number of subst
 43225 00009124 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 43226 00009125 00                      	db	0			;AN000;reserved
 43227 00009126 [8D9F]                  	dw	vol_serial+2		;AN000;offset of serial
 43228 00009128 0000                    	dw	0			;AN000;segment of arg
 43229 0000912A 01                      	db	1			;AN000;first subst
 43230 0000912B A3                      	db	0A3h ; Right_Align+Bin_Hex_Word 
 43231                                  					;AN000;binary to hex
 43232 0000912C 04                      	db	4			;AN000;maximum width
 43233 0000912D 04                      	db	4			;AN000;minimum width
 43234 0000912E 30                      	db	'0' ; 30h		;AN000;pad character
 43235 0000912F 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43236 00009130 00                      	db	0			;AN000;reserved
 43237 00009131 [8B9F]                  	dw	vol_serial		;AN000;offset of serial
 43238 00009133 0000                    	dw	0			;AN000;segment of arg
 43239 00009135 02                      	db	2			;AN000;second subst
 43240 00009136 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word
 43241                                  					;AN000;binary to hex
 43242 00009137 04                      	db	4			;AN000;maximum width
 43243 00009138 04                      	db	4			;AN000;minimum width
 43244 00009139 30                      	db	'0' ; 30h		;AN000;pad character
 43245                                  
 43246                                  ;  "Invalid directory",13,10
 43247                                  badcd_ptr:
 43248 0000913A 1404                    	dw	1044			;AN000;message number
 43249 0000913C 00                      	db	no_subst ; 0		;AN000;number of subst
 43250                                  
 43251                                  ;  "Unable to create directory",13,10
 43252                                  badmkd_ptr:
 43253 0000913D 1504                    	dw	1045			;AN000;message number
 43254 0000913F 00                      	db	no_subst ; 0		;AN000;number of subst
 43255                                  
 43256                                  ;  "Invalid path, not directory,",13,10
 43257                                  ;  "or directory not empty",13,10
 43258                                  badrmd_ptr:
 43259 00009140 1604                    	dw	1046			;AN000;message number
 43260 00009142 00                      	db	no_subst ; 0		;AN000;number of subst
 43261                                  
 43262                                  ;  "Must specify ON or OFF",13,10
 43263                                  bad_on_off_ptr:
 43264 00009143 1704                    	dw	1047			;AN000;message number
 43265 00009145 00                      	db	no_subst ; 0		;AN000;number of subst
 43266                                  
 43267                                  ;  "Directory of %1",13,10
 43268                                  dirhead_ptr:
 43269 00009146 1804                    	dw	1048			;AN000;message number
 43270 00009148 01                      	db	1			;AN000;number of subst
 43271 00009149 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 43272 0000914A 00                      	db	0			;AN000;reserved
 43273 0000914B [AB9D]                  	dw	BWDBUF			;AN000;offset of arg
 43274 0000914D 0000                    	dw	0			;AN000;segment of arg
 43275 0000914F 01                      	db	1			;AN000;first subst
 43276 00009150 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43277 00009151 80                      	db	128			;AN000;maximum width
 43278 00009152 00                      	db	0			;AN000;minimum width
 43279 00009153 20                      	db	blank ; 20h		;AN000;pad character
 43280                                  
 43281                                  ;  "No Path",13,10
 43282                                  NULLPATH_PTR:
 43283 00009154 1904                    	dw	1049			;AN000;message number
 43284 00009156 00                      	db	no_subst ; 0		;AN000;number of subst
 43285                                  
 43286                                  ;  "Invalid drive in search path",13,10
 43287                                  BADPMES_PTR:
 43288 00009157 1A04                    	dw	1050			;AN000;message number
 43289 00009159 00                      	db	no_subst ; 0		;AN000;number of subst
 43290                                  
 43291                                  ;  "Invalid device",13,10
 43292                                  BADDEV_PTR:
 43293 0000915A 1B04                    	dw	1051			;AN000;message number
 43294 0000915C 00                      	db	no_subst ; 0		;AN000;number of subst
 43295                                  
 43296                                  ;  "FOR cannot be nested",13,10
 43297                                  FORNESTMES_PTR:
 43298 0000915D 1C04                    	dw	1052			;AN000;message number
 43299 0000915F 00                      	db	no_subst ; 0		;AN000;number of subst
 43300                                  
 43301                                  ;  "Intermediate file error during pipe",13,10
 43302                                  PIPEEMES_PTR:
 43303 00009160 1D04                    	dw	1053			;AN000;message number
 43304 00009162 00                      	db	no_subst ; 0		;AN000;number of subst
 43305                                  
 43306                                  ;  "Cannot do binary reads from a device",13,10
 43307                                  INBDEV_PTR:
 43308 00009163 1E04                    	dw	1054			;AN000;message number
 43309 00009165 00                      	db	no_subst ; 0		;AN000;number of subst
 43310                                  
 43311                                  ;  "BREAK is %1",13,10
 43312                                  CtrlcMes_Ptr:
 43313 00009166 1F04                    	dw	1055			;AN000;message number
 43314 00009168 01                      	db	1			;AN000;number of subst
 43315 00009169 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43316 0000916A 00                      	db	0			;AN000;reserved
 43317 0000916B 0000                    	dw	0			;AN000;offset of on/off (new)
 43318 0000916D 0000                    	dw	0			;AN000;segment of arg
 43319 0000916F 01                      	db	1			;AN000;first subst
 43320 00009170 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43321 00009171 80                      	db	128			;AN000;maximum width
 43322 00009172 01                      	db	1			;AN000;minimum width
 43323 00009173 20                      	db	blank ; 20h		;AN000;pad character
 43324                                  
 43325                                  ;  "VERIFY is %1",13,10
 43326                                  VeriMes_Ptr:
 43327 00009174 2004                    	dw	1056			;AN000;message number
 43328 00009176 01                      	db	1			;AN000;number of subst
 43329 00009177 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43330 00009178 00                      	db	0			;AN000;reserved
 43331 00009179 0000                    	dw	0			;AN000;offset of on/off (new)
 43332 0000917B 0000                    	dw	0			;AN000;segment of arg
 43333 0000917D 01                      	db	1			;AN000;first subst
 43334 0000917E 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43335 0000917F 80                      	db	128			;AN000;maximum width
 43336 00009180 01                      	db	1			;AN000;minimum width
 43337 00009181 20                      	db	blank ; 20h		;AN000;pad character
 43338                                  
 43339                                  ;  "ECHO is %1",13,10
 43340                                  EchoMes_Ptr:
 43341 00009182 2104                    	dw	1057			;AN000;message number
 43342 00009184 01                      	db	1			;AN000;number of subst
 43343 00009185 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43344 00009186 00                      	db	0			;AN000;reserved
 43345 00009187 0000                    	dw	0			;AN000;offset of on/off (new)
 43346 00009189 0000                    	dw	0			;AN000;segment of arg
 43347 0000918B 01                      	db	1			;AN000;first subst
 43348 0000918C 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43349 0000918D 80                      	db	128			;AN000;maximum width
 43350 0000918E 01                      	db	1			;AN000;minimum width
 43351 0000918F 20                      	db	blank ; 20h		;AN000;pad character
 43352                                  
 43353                                  ;  "off"
 43354                                  OFFMES_PTR:
 43355 00009190 2304                    	dw	1059			;AN000;message number
 43356 00009192 00                      	db	no_subst		;AN000;number of subst
 43357                                  ;  "on"
 43358                                  ONMES_PTR:
 43359 00009193 2404                    	dw	1060			;AN000;message number
 43360 00009195 00                      	db	no_subst ; 0		;AN000;number of subst
 43361                                  
 43362                                  ;  "Error writing to device",13,10
 43363                                  DEVWMES_PTR:
 43364 00009196 2504                    	dw	1061			;AN000;message number
 43365 00009198 00                      	db	no_subst ; 0		;AN000;number of subst
 43366                                  
 43367                                  ;  "Invalid path",13,10
 43368                                  INVAL_PATH_PTR:
 43369 00009199 2604                    	dw	1062			;AN000;message number
 43370 0000919B 00                      	db	no_subst ; 0		;AN000;number of subst
 43371                                  
 43372                                  ;  unformatted string output
 43373                                  arg_buf_ptr:
 43374 0000919C 2704                    	dw	1063			;AN000;message number
 43375 0000919E 01                      	db	1			;AN000;number of subst
 43376 0000919F 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43377 000091A0 00                      	db	0			;AN000;reserved
 43378 000091A1 [06A4]                  	dw	Arg_Buf 		;AN000;offset of arg
 43379 000091A3 0000                    	dw	0			;AN000;segment of arg
 43380 000091A5 01                      	db	1			;AN000;first subst
 43381 000091A6 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43382 000091A7 80                      	db	128			;AN000;maximum width
 43383 000091A8 00                      	db	0			;AN000;minimum width
 43384 000091A9 20                      	db	blank ; 20h		;AN000;pad character
 43385                                  
 43386                                  ;  file name output
 43387                                  file_name_ptr:
 43388 000091AA 2804                    	dw	1064			;AN000;message number
 43389 000091AC 01                      	db	1			;AN000;number of subst
 43390 000091AD 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43391 000091AE 00                      	db	0			;AN000;reserved
 43392 000091AF [919E]                  	dw	SrcBuf			;AN000;offset of arg
 43393 000091B1 0000                    	dw	0			;AN000;segment of arg
 43394 000091B3 01                      	db	1			;AN000;first subst
 43395 000091B4 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43396 000091B5 80                      	db	128			;AN000;maximum width
 43397 000091B6 00                      	db	0			;AN000;minimum width
 43398 000091B7 20                      	db	blank ; 20h		;AN000;pad character
 43399                                  
 43400                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 43401                                  %if 0
 43402                                  
 43403                                  ;  file size output for dir
 43404                                  disp_file_size_ptr:
 43405                                  	dw	1065			;AN000;message number
 43406                                  	db	1			;AN000;number of subst
 43407                                  	db	parm_block_size ; 11 	;AN000;size of sublist
 43408                                  	db	0			;AN000;reserved
 43409                                  	dw	File_Size_Low		;AN000;offset of arg
 43410                                  	dw	0			;AN000;segment of arg
 43411                                  	db	1			;AN000;first subst
 43412                                  	; MSDOS 5.0 COMMAND.COM
 43413                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 43414                                  	; 17/06/2023
 43415                                  screen_f_1:
 43416                                  	db	0F1h ; MSDOS 6.22 COMMAND.COM
 43417                                  					;AN000;long binary to decimal
 43418                                  	; MSDOS 5.0 COMMAND.COM
 43419                                  	;db	10			;AN000;maximum width
 43420                                  	;db	10			;AN000;minimum width
 43421                                  screen_f_2:
 43422                                  	db	14 ; MSDOS 6.22 COMMAND.COM		
 43423                                  	db	14
 43424                                  	
 43425                                  	db	blank ; 20h		;AN000;pad character
 43426                                  %else
 43427                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43428                                  	; PCDOS 7.1 COMMAND.COM
 43429                                  disp_file_size_ptr:
 43430 000091B8 2904                    	dw	1065
 43431 000091BA 01                      	db	1
 43432 000091BB 0B                      	db	11
 43433 000091BC 00                      	db	0
 43434 000091BD [0E9E]                  	dw	File_Size_Low
 43435 000091BF 0000                    	dw	0
 43436 000091C1 01                      	db	1
 43437 000091C2 F1                      	db	0F1h
 43438 000091C3 0C                      	db	12
 43439 000091C4 0C                      	db	12
 43440 000091C5 20                      	db	20h
 43441                                  disp_file_size_w_ptr:
 43442 000091C6 2904                    	dw	1065
 43443 000091C8 01                      	db	1
 43444 000091C9 0B                      	db	11
 43445 000091CA 00                      	db	0
 43446 000091CB [0E9E]                  	dw	File_Size_Low
 43447 000091CD 0000                    	dw	0
 43448 000091CF 01                      	db	1
 43449 000091D0 F1                      	db	0F1h			; long binary to decimal
 43450 000091D1 0E                      	db	14
 43451 000091D2 0E                      	db	14
 43452 000091D3 20                      	db	20h
 43453                                  disp_file_size_n_ptr:
 43454 000091D4 2904                    	dw	1065
 43455 000091D6 01                      	db	1
 43456 000091D7 0B                      	db	11
 43457 000091D8 00                      	db	0
 43458 000091D9 [0E9E]                  	dw	File_Size_Low
 43459 000091DB 0000                    	dw	0
 43460 000091DD 01                      	db	1
 43461 000091DE B1                      	db	0B1h			; Right_Align+Unsgn_Bin_DWord
 43462 000091DF 0A                      	db	10
 43463 000091E0 0A                      	db	10
 43464 000091E1 20                      	db	20h
 43465                                  %endif
 43466                                  
 43467                                  ;  unformatted string output
 43468                                  ; %s
 43469                                  string_buf_ptr:
 43470 000091E2 2A04                    	dw	1066			;AN000;message number
 43471 000091E4 01                      	db	1			;AN000;number of subst
 43472 000091E5 0B                      	db	parm_block_size 	;AN000;size of sublist
 43473 000091E6 00                      	db	0			;AN000;reserved
 43474 000091E7 [129E]                  	dw	string_ptr_2		;AN000;offset of arg
 43475 000091E9 0000                    	dw	0			;AN000;segment of arg
 43476 000091EB 01                      	db	1			;AN000;first subst
 43477 000091EC 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43478 000091ED 80                      	db	128			;AN000;maximum width
 43479 000091EE 00                      	db	0			;AN000;minimum width
 43480 000091EF 20                      	db	blank ; 20h		;AN000;pad character
 43481 000091F0 00                      	db	0			;AN000;
 43482                                  
 43483                                  ;  tab character
 43484                                  tab_ptr:
 43485 000091F1 2B04                    	dw	1067			;AN000;message number
 43486 000091F3 00                      	db	no_subst ; 0		;AN000;number of subst
 43487                                  
 43488                                  ;  " <DIR>   "
 43489                                  dmes_ptr:
 43490 000091F4 2C04                    	dw	1068			;AN000;message number
 43491 000091F6 00                      	db	no_subst ; 0		;AN000;number of subst
 43492                                  
 43493                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 43494                                  space_4_ptr :
 43495 000091F7 5104                    	dw	1105 
 43496 000091F9 00                      	db	no_subst ; 0
 43497                                  
 43498                                  ;  destructive back space
 43499                                  dback_ptr:
 43500 000091FA 2D04                    	dw	1069			;AN000;message number
 43501 000091FC 00                      	db	no_subst ; 0		;AN000;number of subst
 43502                                  
 43503                                  ;  carriage return / line feed
 43504                                  acrlf_ptr:
 43505 000091FD 2E04                    	dw	1070			;AN000;message number
 43506 000091FF 00                      	db	no_subst ; 0		;AN000;number of subst
 43507                                  
 43508                                  ;  "mm-dd-yy"
 43509                                  usadat_ptr:
 43510 00009200 3004                    	dw	1072			;AN000;message number
 43511 00009202 00                      	db	no_subst ; 0		;AN000;number of subst
 43512                                  
 43513                                  ;  "dd-mm-yy"
 43514                                  eurdat_ptr:
 43515 00009203 3104                    	dw	1073			;AN000;message number
 43516 00009205 00                      	db	no_subst ; 0		;AN000;number of subst
 43517                                  
 43518                                  ;  "yy-mm-dd"
 43519                                  japdat_ptr:
 43520 00009206 3204                    	dw	1074			;AN000;message number
 43521 00009208 00                      	db	no_subst ; 0		;AN000;number of subst
 43522                                  
 43523                                  ;  date string for prompt
 43524                                  promptdat_ptr:
 43525 00009209 3304                    	dw	1075			;AN000;message number
 43526 0000920B 02                      	db	2			;AN000;number of subst
 43527 0000920C 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43528 0000920D 00                      	db	0			;AN000;reserved
 43529 0000920E [06A4]                  	dw	Arg_Buf			;AN000;offset of arg
 43530 00009210 0000                    	dw	0			;AN000;segment of arg
 43531 00009212 01                      	db	1			;AN000;first subst
 43532 00009213 10                      	db	10h ; Char_field_ASCIIZ ;AN000;character string
 43533 00009214 03                      	db	3			;AN000;maximum width
 43534 00009215 03                      	db	3			;AN000;minimum width
 43535 00009216 20                       	db	blank ; 20h		;AN000;pad character
 43536 00009217 0B                      	db	parm_block_size  ; 11	;AN000;size of sublist
 43537 00009218 00                      	db	0			;AN000;reserved
 43538                                  promptDat_yr:
 43539 00009219 0000                    	dw	0			;AN000;year
 43540                                  promptDat_moday:
 43541 0000921B 0000                    	dw	0			;AN000;month,day
 43542 0000921D 02                      	db	2			;AN000;second subst
 43543 0000921E 34                       	db	34h ; DATE_MDY_4	;AN000;date
 43544 0000921F 0A                      	db	10			;AN000;maximum width
 43545 00009220 08                      	db	8			;AN000;minimum width
 43546 00009221 20                      	db	blank ; 20h		;AN000;pad character
 43547                                  
 43548                                  ;  Time for prompt
 43549                                  promtim_ptr:
 43550 00009222 3404                    	dw	1076			;AN000;message number
 43551 00009224 01                      	db	1			;AN000;number of subst
 43552 00009225 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43553 00009226 00                      	db	0			;AN000;reserved
 43554                                  PromTim_hr_min:
 43555 00009227 0000                    	dw	0			;AN000;hours,minutes
 43556                                  PromTim_Sec_hn:
 43557 00009229 0000                    	dw	0			;AN000;seconds,hundredths
 43558 0000922B 01                      	db	1			;AN000;first subst
 43559 0000922C A6                      	db	0A6h ; Right_Align+TIME_HHMMSSHH_24
 43560                                  					;AC013;time
 43561 0000922D 0B                      	db	11			;AN000;maximum width
 43562 0000922E 0B                      	db	11			;AC013;minimum width
 43563 0000922F 20                      	db	blank ; 20h		;AN000;pad character
 43564                                  
 43565                                  ;  Date and time for DIR
 43566                                  dirdattim_ptr:
 43567 00009230 3504                    	dw	1077			;AN000;message number
 43568 00009232 02                      	db	2			;AN000;number of subst
 43569 00009233 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43570 00009234 00                      	db	0			;AN000;reserved
 43571                                  DirDat_Yr:
 43572 00009235 0000                    	dw	0			;AN000;year
 43573                                  DirDat_Mo_Day:
 43574 00009237 0000                    	dw	0			;AN000;month,day
 43575 00009239 01                      	db	1			;AN000;first subst
 43576                                  DirDat_form:	; 03/08/2024 - PCDOS 7.1
 43577 0000923A A4                      	db	0A4h ; Right_Align+DATE_MDY_2
 43578                                  					;AN000;date
 43579                                  DirDat_width:	; 03/08/2024 - PCDOS 7.1	
 43580 0000923B 0A                      	db	10			;AN000;maximum width
 43581 0000923C 08                      	db	8			;AN000;minimum width
 43582 0000923D 20                      	db	blank ; 20h		;AN000;pad character
 43583 0000923E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43584 0000923F 00                      	db	0			;AN000;reserved
 43585                                  DirTim_Hr_Min:
 43586 00009240 0000                    	dw	0			;AN000;hours,minutes
 43587                                  DirTim_Sec_hn:
 43588 00009242 0000                    	dw	0			;AN000;seconds,hundredths
 43589 00009244 02                      	db	2			;AN000;second subst
 43590 00009245 85                      	db	85h ; Right_align+TIME_HHMM_Cty
 43591                                  					;AN000;time
 43592 00009246 06                      	db	6			;AN000;maximum width
 43593 00009247 06                      	db	6			;AN000;minimum width
 43594 00009248 20                      	db	blank ; 20h		;AN000;pad character
 43595                                  
 43596                                  ;  "Directory already exists"
 43597                                  MD_EXISTS_PTR:
 43598 00009249 3604                    	dw	1078			;AN000;message number
 43599 0000924B 00                      	db	no_subst		;AN000;number of subst
 43600                                  
 43601                                  ;  "%1 bytes",13,10
 43602                                  
 43603                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 43604                                  %if 0
 43605                                  bytes_ptr:
 43606                                  	dw	1079			; message number
 43607                                  	db	1			; number of subst
 43608                                  	db	parm_block_size ; 11	; size of sublist
 43609                                  	db	0			; reserved
 43610                                  	dw	FileSiz			; offset of arg
 43611                                  	dw	0			; segment of arg
 43612                                  	db	1			; first subst
 43613                                  	; MSDOS 5.0 COMMAND.COM
 43614                                  	;db	0B1h ; Right_Align+Unsgn_Bin_DWord
 43615                                  	; 17/06/2023
 43616                                  screen_f_4:
 43617                                  	db	0F1h ; MSDOS 6.22 COMMAND.COM
 43618                                  					; long binary to decimal
 43619                                  	; MSDOS 5.0 COMMAND.COM
 43620                                  	;db	10			; maximum width
 43621                                  	;db	10			; minimum width
 43622                                  screen_f_5:
 43623                                  	db	14 ; MSDOS 6.22 COMMAND.COM
 43624                                  	db	14	
 43625                                  	db	blank ; 20h		; pad character
 43626                                  %else
 43627                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43628                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:9718h
 43629                                  bytes_ptr:
 43630 0000924C 3704                    	dw	1079
 43631 0000924E 01                      	db	1
 43632 0000924F 0B                      	db	11
 43633 00009250 00                      	db	0
 43634 00009251 [949C]                  	dw	FileSiz
 43635 00009253 0000                    	dw	0
 43636 00009255 01                      	db	1
 43637 00009256 F1                      	db	0F1h
 43638 00009257 0C                      	db	12
 43639 00009258 0C                      	db	12
 43640 00009259 20                      	db	20h
 43641                                  bytes_w_tr:
 43642 0000925A 3704                    	dw	1079
 43643 0000925C 01                      	db	1
 43644 0000925D 0B                      	db	11
 43645 0000925E 00                      	db	0
 43646 0000925F [949C]                  	dw	FileSiz
 43647 00009261 0000                    	dw	0
 43648 00009263 01                      	db	1
 43649 00009264 F1                      	db	0F1h
 43650 00009265 0E                      	db	14
 43651 00009266 0E                      	db	14
 43652 00009267 20                      	db	20h
 43653                                  bytes_n_ptr:
 43654 00009268 3704                    	dw	1079
 43655 0000926A 01                      	db	1
 43656 0000926B 0B                      	db	11
 43657 0000926C 00                      	db	0
 43658 0000926D B1                      	db	0B1h
 43659 0000926E A0                      	db	160
 43660 0000926F 00                      	db	0
 43661 00009270 00                      	db	0
 43662 00009271 01                      	db	1
 43663 00009272 B1                      	db	0B1h
 43664 00009273 0A                      	db	10
 43665 00009274 0A                      	db	10
 43666 00009275 20                      	db	20h
 43667                                  kbytes_ptr:
 43668 00009276 5304                    	dw	1107
 43669 00009278 01                      	db	1
 43670 00009279 0B                      	db	11
 43671 0000927A 00                      	db	0
 43672 0000927B B1                      	db	0B1h
 43673 0000927C A0                      	db	160
 43674 0000927D 00                      	db	0
 43675 0000927E 00                      	db	0
 43676 0000927F 01                      	db	1
 43677 00009280 F1                      	db	0F1h
 43678 00009281 0E                      	db	14
 43679 00009282 0E                      	db	14
 43680 00009283 20                      	db	20h
 43681                                  kybytes_n_ptr:
 43682 00009284 5304                    	dw	1107
 43683 00009286 01                      	db	1
 43684 00009287 0B                      	db	11
 43685 00009288 00                      	db	0
 43686 00009289 [949C]                  	dw	FileSiz
 43687 0000928B 0000                    	dw	0
 43688 0000928D 01                      	db	1
 43689 0000928E B1                      	db	0B1h
 43690 0000928F 0A                      	db	10
 43691 00009290 0A                      	db	10
 43692 00009291 20                      	db	20h
 43693                                  %endif
 43694                                  
 43695                                  ;  "Total:",13,10
 43696                                  total_ptr:
 43697 00009292 3804                    	dw	1080			; message number
 43698 00009294 00                      	db	no_subst ; 0		; number of subst
 43699                                  
 43700                                  ;  "Error parsing environment variable:",13,10
 43701                                  errparsenv_ptr:
 43702 00009295 3904                    	dw	1081			; message number
 43703 00009297 00                      	db	no_subst ; 0		; number of subst
 43704                                  
 43705                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 43706                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:996Ah)
 43707                                  cox_Y_quest_ptr:
 43708 00009298 3A04                    	dw	1082
 43709 0000929A 00                      	db	no_subst ; 0
 43710                                  cox_Y_answ_ptr:
 43711 0000929B 3B04                    	dw	1083
 43712 0000929D 00                      	db	no_subst ; 0
 43713                                  
 43714                                  ;  "(continuing %1)",13,10
 43715                                  dircont_ptr:
 43716 0000929E 3C04                    	dw	1084			;AN000;message number
 43717 000092A0 01                      	db	1			;AN000;number of subst
 43718 000092A1 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 43719 000092A2 00                      	db	0			;AN000;reserved
 43720 000092A3 [AB9D]                  	dw	BWDBUF			;AN000;offset of arg
 43721 000092A5 0000                    	dw	0			;AN000;segment of arg
 43722 000092A7 01                      	db	1			;AN000;first subst
 43723 000092A8 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 43724 000092A9 80                      	db	128			;AN000;maximum width
 43725 000092AA 00                      	db	0			;AN000;minimum width
 43726 000092AB 20                      	db	blank ; 20h		;AN000;pad character
 43727                                  
 43728                                  ;  "Revision %1",CR,LF
 43729                                  dosrev_ptr:
 43730 000092AC 4204                    	dw	1090
 43731 000092AE 01                      	db	1			; one substitution
 43732 000092AF 0B                      	db	parm_block_size ; 11
 43733 000092B0 00                      	db	0
 43734 000092B1 [219E]                  	dw	One_Char_Val		; ptr to char
 43735 000092B3 0000                    	dw	0			; segment addr?
 43736 000092B5 01                      	db	1			; 1st substitution
 43737 000092B6 00                      	db	0 ; CHAR_FIELD_CHAR	; character
 43738 000092B7 01                      	db	1			; max width
 43739 000092B8 01                      	db	1			; min width
 43740 000092B9 20                      	db	blank ; 20h		; pad char
 43741                                  
 43742                                  ;  "DOS is in ROM"
 43743                                  DosRom_Ptr:
 43744 000092BA 4304                    	dw	1091
 43745 000092BC 00                      	db	no_subst ; 0		
 43746                                  
 43747                                  ;  "DOS is in HMA"
 43748                                  DosHma_Ptr:
 43749 000092BD 4404                    	dw	1092
 43750 000092BF 00                      	db	no_subst ; 0		
 43751                                  
 43752                                  ;  "DOS is in low memory"
 43753                                  DosLow_Ptr:
 43754 000092C0 4504                    	dw	1093
 43755 000092C2 00                      	db	no_subst ; 0		
 43756                                  
 43757                                  ;  "Cannot Loadhigh batch file" ;M016
 43758                                  NoExecBat_Ptr:
 43759 000092C3 4604                    	dw	1094			; M016
 43760 000092C5 00                      	db	no_subst ; 0		; M016
 43761                                  
 43762                                  ;  "LoadHigh: Invalid filename" ; M016
 43763                                  LhInvFil_Ptr:
 43764 000092C6 4704                    	dw	1095			; M016
 43765 000092C8 00                      	db	no_subst ; 0		; M016
 43766                                  
 43767                                  ;  "Could not open specified country information file" ; M045
 43768                                  NoCntry_Ptr:
 43769 000092C9 4804                    	dw	1096			; M045
 43770 000092CB 00                      	db	no_subst ; 0		; M045
 43771                                  
 43772                                  ; 15/04/2023
 43773                                  ; MSDOS 6.0 COMMAND.COM only !
 43774                                  ; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 43775                                  ;%if 0
 43776                                  
 43777                                  ;* The next four errors emulate those reported by the normal parse
 43778                                  ;  mechanism, with a little more accurate wording; that parser has been
 43779                                  ;  replaced with a custom routine (ParseVar) for LoadHigh and DeviceHigh.
 43780                                  ;  These errors aren't normally generated by LoadHigh except by the normal
 43781                                  ;  parser, so they've been added here.
 43782                                  
 43783                                  ;  "LoadHigh: Invalid argument"
 43784                                  LhInvArg_Ptr:
 43785 000092CC 4904                    	dw	1097
 43786 000092CE 00                      	db	no_subst ; 0		
 43787                                  
 43788                                  ;  "Required parameter missing"
 43789                                  ReqParmMiss:
 43790 000092CF 4A04                    	dw	1098
 43791 000092D1 00                      	db	no_subst ; 0		
 43792                                  
 43793                                  ;  "Unrecognized switch"
 43794                                  LhInvSwt_Ptr:
 43795 000092D2 4B04                    	dw	1099
 43796 000092D4 00                      	db	no_subst ; 0		
 43797                                  
 43798                                  ;  "A bad UMB number has been specified"
 43799                                  LhBadUMB_Ptr:
 43800 000092D5 4C04                    	dw	1100
 43801 000092D7 00                      	db	no_subst ; 0
 43802                                  ;%endif	
 43803                                  
 43804                                  ; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43805                                  %if 0
 43806                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 43807                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99AAh
 43808                                  
 43809                                  DirCompRatio_Ptr:
 43810                                  	dw	1101			;message number
 43811                                  	db	2			;number of subst
 43812                                  	db	parm_block_size ; 11	;size of sublist
 43813                                  	db	0			;reserved
 43814                                  	dw	Dir_CRatio_1		;offset of arg
 43815                                  	dw	0			;segment of arg
 43816                                  	db	1			;first subst
 43817                                  	db	91h			;format
 43818                                  	db	2			;maximum width
 43819                                  	db	2			;minimum width
 43820                                  	db	blank ; 20h		;pad character
 43821                                  	db	parm_block_size  ; 11	;size of sublist
 43822                                  	db	0			; reserved
 43823                                  	dw	Dir_CRatio_2		;offset of arg
 43824                                  	dw	0			;segment of arg
 43825                                  	db	2			;second subst
 43826                                  	db	11h			;format
 43827                                  	db	1			;maximum width
 43828                                  	db	1			;minimum width
 43829                                  	db	blank ; 20h		;pad character
 43830                                  
 43831                                  AveCompRatio_Ptr:
 43832                                  	dw	1102			;message number
 43833                                  	db	2			;number of subst
 43834                                  	db	parm_block_size ; 11	;size of sublist
 43835                                  	db	0			;reserved
 43836                                  	dw	Dir_CRatio_1		;offset of arg
 43837                                  	dw	0			;segment of arg
 43838                                  	db	1			;first subst
 43839                                  	db	91h			;format
 43840                                  	db	2			;maximum width
 43841                                  	db	2			;minimum width
 43842                                  	db	blank ; 20h		;pad character
 43843                                  	db	parm_block_size  ; 11	;size of sublist
 43844                                  	db	0			; reserved
 43845                                  	dw	Dir_CRatio_2		;offset of arg
 43846                                  	dw	0			;segment of arg
 43847                                  	db	2			;second subst
 43848                                  	db	11h			;format
 43849                                  	db	1			;maximum width
 43850                                  	db	1			;minimum width
 43851                                  	db	blank ; 20h		;pad character
 43852                                  %else
 43853                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43854                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:97A4h
 43855                                  kbytesf_ptr:
 43856 000092D8 5204                    	dw	1106
 43857 000092DA 01                      	db	1
 43858 000092DB 0B                      	db	11
 43859 000092DC 00                      	db	0
 43860 000092DD [199E]                  	dw	Bytes_Free
 43861 000092DF 0000                    	dw	0
 43862 000092E1 01                      	db	1
 43863 000092E2 F1                      	db	0F1h			; long binary to decimal
 43864 000092E3 1E                      	db	30
 43865 000092E4 1E                      	db	30
 43866 000092E5 20                      	db	20h
 43867                                  kbytesf_n_ptr:
 43868 000092E6 5204                    	dw	1106
 43869 000092E8 01                      	db	1
 43870 000092E9 0B                      	db	11
 43871 000092EA 00                      	db	0
 43872 000092EB [199E]                  	dw	Bytes_Free
 43873 000092ED 0000                    	dw	0
 43874 000092EF 01                      	db	1
 43875 000092F0 B1                      	db	0B1h			; Right_Align+Unsgn_Bin_DWord
 43876 000092F1 1C                      	db	28
 43877 000092F2 1C                      	db	28
 43878 000092F3 20                      	db	20h
 43879                                  %endif
 43880                                  
 43881                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 43882                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8483h
 43883                                  
 43884                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 43885                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99DCh
 43886                                  
 43887                                  	; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43888                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:97C0h
 43889                                  
 43890                                  ; ---------------------------------------------------------------------------
 43891                                  
 43892                                  PATH_TEXT:
 43893 000092F4 504154483D              	db	"PATH="
 43894                                  PROMPT_TEXT:
 43895 000092F9 50524F4D50543D          	db	"PROMPT="
 43896                                  COMSPECSTR:
 43897 00009300 434F4D535045433D        	db	"COMSPEC="
 43898                                  DirEnvVar:
 43899 00009308 444952434D443D          	db	"DIRCMD="		; DIR's environment variable
 43900                                  
 43901                                  ; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 43902                                  ; PCDOS 7.1 COMMAND.COM
 43903                                  %if 1
 43904                                  no_sep_text:
 43905 0000930F 4E4F5F5345503D          	db	'NO_SEP='	; 1 = do not use commas as num separator
 43906                                  %endif
 43907                                  
 43908                                  ;============================================================================
 43909                                  ; TDATA.ASM, MSDOS 6.0, 1991
 43910                                  ;============================================================================
 43911                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 43912                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 43913                                  
 43914                                  	; 15/04/2023
 43915 00009316 00                      	db	0
 43916 00009317 90                      align 2
 43917                                  
 43918                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:849Eh
 43919                                  ; ---------------------------------------------------------------------------
 43920                                  	; 18/06/2023
 43921                                  	;db	0
 43922                                  
 43923                                  ; Lists of help message numbers for internal commands and /?
 43924                                  
 43925                                  	; 18/06/2023
 43926                                  ;;NoHelpMsgs:
 43927                                  	;dw	1200,0		;M014
 43928                                  
 43929                                  	; 18/06/2023
 43930                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:99F7h
 43931                                  
 43932                                  BreakHelpMsgs:
 43933 00009318 14050000                	dw	1300,0
 43934                                  ChcpHelpMsgs:
 43935 0000931C 280529050000            	dw	1320,1321,0
 43936                                  CdHelpMsgs:
 43937 00009322 3C053D053E050000        	dw	1340,1341,1342,0
 43938                                  ClsHelpMsgs:
 43939 0000932A 50050000                	dw	1360,0
 43940                                  CopyHelpMsgs:
 43941                                  	;dw	1400,1401,1402,1403,1404,0
 43942                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 43943 0000932E 780579057A057B057C-     	dw	1400,1401,1402,1403,1404,1405,1406,1407,0
 43943 00009337 057D057E057F050000 
 43944                                  CttyHelpMsgs:
 43945 00009340 8C050000                	dw	1420,0
 43946                                  DateHelpMsgs:
 43947 00009344 A005A1050000            	dw	1440,1441,0
 43948                                  DelHelpMsgs:
 43949 0000934A B405B505B6050000        	dw	1460,1461,1462,0
 43950                                  DirHelpMsgs:
 43951 00009352 C805C905CA05CB05CC-     	dw	1480,1481,1482,1483,1484,1485,1486,1487,1488
 43951 0000935B 05CD05CE05CF05D005 
 43952                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 43953                                  	; MSDOS 6.0 COMMAND.COM
 43954                                  	;dw	1489,1490,1491,1492
 43955                                  	; 06/08/2024 - Retro DOS v5.0 (PCDOS 7.1) COMMAND.COM 
 43956 00009364 D105                    	dw	1489	
 43957 00009366 0000                    	dw	0
 43958                                  ExitHelpMsgs:
 43959 00009368 DC050000                	dw	1500,0
 43960                                  MdHelpMsgs:
 43961 0000936C F0050000                	dw	1520,0
 43962                                  PathHelpMsgs:
 43963 00009370 0406050606060000        	dw	1540,1541,1542,0
 43964                                  PromptHelpMsgs:
 43965 00009378 180619061A061B061C-     	dw	1560,1561,1562,1563,1564,1565,1566,1567,1568,0
 43965 00009381 061D061E061F062006-
 43965 0000938A 0000               
 43966                                  RdHelpMsgs:
 43967 0000938C 2C060000                	dw	1580,0
 43968                                  RenHelpMsgs:
 43969 00009390 4006410642060000        	dw	1600,1601,1602,0
 43970                                  SetHelpMsgs:
 43971 00009398 5406550656060000        	dw	1620,1621,1622,0
 43972                                  TimeHelpMsgs:
 43973 000093A0 680669060000            	dw	1640,1641,0
 43974                                  TypeHelpMsgs:
 43975 000093A6 7C060000                	dw	1660,0
 43976                                  VerHelpMsgs:
 43977 000093AA 90060000                	dw	1680,0
 43978                                  VerifyHelpMsgs:
 43979 000093AE A4060000                	dw	1700,0
 43980                                  VolHelpMsgs:
 43981 000093B2 B8060000                	dw	1720,0
 43982                                  CallHelpMsgs:
 43983 000093B6 CC06CD060000            	dw	1740,1741,0	;M014
 43984                                  RemHelpMsgs:
 43985 000093BC E0060000                	dw	1760,0		;M014
 43986                                  PauseHelpMsgs:
 43987 000093C0 F4060000                	dw	1780,0		;M014
 43988                                  EchoHelpMsgs:
 43989 000093C4 080709070000            	dw	1800,1801,0	;M014
 43990                                  GotoHelpMsgs:
 43991 000093CA 1C071D070000            	dw	1820,1821,0	;M014
 43992                                  ShiftHelpMsgs:
 43993 000093D0 30070000                	dw	1840,0		;M014
 43994                                  IfHelpMsgs:
 43995 000093D4 440745074607470748-     	dw	1860,1861,1862,1863,1864,1865,1866,0	;M014
 43995 000093DD 0749074A070000     
 43996                                  ForHelpMsgs:
 43997 000093E4 580759075A075B0700-     	dw	1880,1881,1882,1883,0 ;M014
 43997 000093ED 00                 
 43998                                  TruenameHelpMsgs:
 43999 000093EE 6C070000                	 dw	1900,0		;M014
 44000                                  LoadhighHelpMsgs:
 44001 000093F2 800781078207            	dw	1920,1921,1922
 44002                                  	; 17/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM 
 44003                                  	; MSDOS 6.0 COMMAND.COM
 44004 000093F8 830784078507860787-     	dw	1923,1924,1925,1926,1927 ;M014
 44004 00009401 07                 
 44005 00009402 0000                    	dw	0
 44006                                  
 44007                                  ; 03/08/2024 - Retro DOS v5.0 COMMAND.COM
 44008                                  %if 1
 44009                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:98CEh
 44010                                  twospacechars:
 44011 00009404 202000                  	db	'  ',0
 44012                                  %endif
 44013                                  
 44014                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8578h
 44015                                  CLSSTRING:
 44016 00009407 041B5B324A              	db	4,1Bh,"[2J"		; ANSI Clear screen
 44017                                  
 44018                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:98D6h
 44019                                  PROMPT_TABLE:
 44020 0000940C 42                      	db	"B"
 44021 0000940D [AA21]                  	dw	Print_B
 44022 0000940F 44                      	db	"D"
 44023 00009410 [093B]                  	dw	PRINT_DATE
 44024 00009412 45                      	db	"E"
 44025 00009413 [9E21]                  	dw	PRINT_ESC
 44026 00009415 47                      	db	"G"
 44027 00009416 [A221]                  	dw	PRINT_G
 44028 00009418 48                      	db	"H"
 44029 00009419 [5D21]                  	dw	PRINT_BACK
 44030 0000941B 4C                      	db	"L"
 44031 0000941C [A621]                  	dw	PRINT_L
 44032 0000941E 4E                      	db	"N"
 44033 0000941F [BB21]                  	dw	PRINT_DRIVE
 44034 00009421 50                      	db	"P"
 44035 00009422 [C321]                  	dw	build_dir_for_prompt
 44036 00009424 51                      	db	"Q"
 44037 00009425 [6321]                  	dw	PRINT_EQ
 44038                                  	;
 44039                                  	; 06/08/2024 - PCDOS 7.1 COMMAND.COM
 44040 00009427 52                      	db	"R"
 44041 00009428 [6721]                  	dw	PRINT_R ; PRINT Return code, [Retcode]
 44042                                  	;
 44043 0000942A 54                      	db	"T"
 44044 0000942B [BD33]                  	dw	PRINT_TIME
 44045 0000942D 56                      	db	"V"
 44046 0000942E [D620]                  	dw	PRINT_VERSION
 44047 00009430 5F                      	db	"_"
 44048 00009431 [7729]                  	dw	CRLF2
 44049 00009433 24                      	db	"$"
 44050 00009434 [AC21]                  	dw	PRINT_CHAR
 44051 00009436 00                      	db	0			; NUL TERMINATED
 44052                                  
 44053                                  ; Table of IF conditionals
 44054                                  IFTAB:
 44055 00009437 034E4F54                	db	3,"NOT"			; First byte is count
 44056 0000943B [F80B]                  	dw	IFNOT
 44057 0000943D 0A4552524F524C4556-     	db	10,"ERRORLEVEL"
 44057 00009446 454C               
 44058 00009448 [B70C]                  	dw	IFERLEV
 44059 0000944A 054558495354            	db	5,"EXIST"
 44060 00009450 [4C0C]                  	dw	IFEXISTS
 44061 00009452 00                      	db	0
 44062                                  
 44063                                  	; 06/08/2024
 44064                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:991Dh
 44065                                  
 44066                                  ; Table for internal command names
 44067                                  COMTAB:
 44068 00009453 0344495203              	db	3,"DIR",fSwitchAllowed+fCheckDrive ; 3
 44069 00009458 [8011]                  	dw	CATALOG			; In TCMD1.ASM
 44070 0000945A [5293]                  	dw	DirHelpMsgs
 44071                                  
 44072 0000945C 0443414C4C02            	db	4,"CALL",fSwitchAllowed	; 2
 44073 00009462 [2C0D]                  	dw	_$CALL			; In TBATCH2.ASM
 44074 00009464 [B693]                  	dw	CallHelpMsgs
 44075                                  
 44076 00009466 044348435002            	db	4,"CHCP",fSwitchAllowed ; 2
 44077 0000946C [0624]                  	dw	CHCP			; In TCMD2B.ASM
 44078 0000946E [1C93]                  	dw	ChcpHelpMsgs
 44079                                  
 44080 00009470 0652454E414D4503        	db	6,"RENAME",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 44081 00009478 [8C1D]                  	dw	CRENAME			; In TCMD1.ASM
 44082 0000947A [9093]                  	dw	RenHelpMsgs
 44083                                  
 44084 0000947C 0352454E03              	db	3,"REN",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 44085 00009481 [8C1D]                  	dw	CRENAME			; In TCMD1.ASM
 44086 00009483 [9093]                  	dw	RenHelpMsgs
 44087                                  	
 44088 00009485 05455241534503          	db	5,"ERASE",fSwitchAllowed+fCheckDrive	; 3
 44089 0000948C [0A1D]                  	dw	ERASE			; In TCMD1.ASM
 44090 0000948E [4A93]                  	dw	DelHelpMsgs
 44091                                  	
 44092 00009490 0344454C03              	db	3,"DEL",fSwitchAllowed+fCheckDrive	; 3
 44093 00009495 [0A1D]                  	dw	ERASE			; In TCMD1.ASM
 44094 00009497 [4A93]                  	dw	DelHelpMsgs
 44095                                  	
 44096 00009499 045459504503            	db	4,"TYPE",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 44097 0000949F [331E]                  	dw	TYPEFIL			; In TCMD1.ASM
 44098 000094A1 [A693]                  	dw	TypeHelpMsgs
 44099                                  	
 44100 000094A3 0352454D06              	db	3,"REM",fSwitchAllowed+fLimitHelp	; 6
 44101 000094A8 [0401]                  	dw	TCOMMAND		; In TCODE.ASM
 44102 000094AA [BC93]                  	dw	RemHelpMsgs
 44103                                  	
 44104 000094AC 04434F505903            	db	4,"COPY",fSwitchAllowed+fCheckDrive	; 3
 44105 000094B2 [563B]                  	dw	COPY			; In COPY.ASM
 44106 000094B4 [2E93]                  	dw	CopyHelpMsgs
 44107                                  	
 44108 000094B6 05504155534506          	db	5,"PAUSE",fSwitchAllowed+fLimitHelp	; 6
 44109 000094BD [FE1C]                  	dw	PAUSE			; In TCMD1.ASM
 44110 000094BF [C093]                  	dw	PauseHelpMsgs
 44111                                  	
 44112 000094C1 044441544502            	db	4,"DATE",fSwitchAllowed	; 2
 44113 000094C7 [CD32]                  	dw	DATE			; In TPIPE.ASM
 44114 000094C9 [4493]                  	dw	DateHelpMsgs
 44115                                  	
 44116 000094CB 0454494D4502            	db	4,"TIME",fSwitchAllowed ; 2		;AC018; P3903
 44117 000094D1 [2D33]                  	dw	CTIME			; In TPIPE.ASM
 44118 000094D3 [A093]                  	dw	TimeHelpMsgs
 44119                                  	
 44120 000094D5 0356455202              	db	3,"VER",fSwitchAllowed ; 2
 44121 000094DA [6020]                  	dw	VERSION			; In TCMD2.ASM
 44122 000094DC [AA93]                  	dw	VerHelpMsgs
 44123                                  	
 44124 000094DE 03564F4C03              	db	3,"VOL",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 44125 000094E3 [611F]                  	dw	VOLUME			; In TCMD1.ASM
 44126 000094E5 [B293]                  	dw	VolHelpMsgs
 44127                                  	
 44128 000094E7 02434403                	db	2,"CD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 44129 000094EB [3A28]                  	dw	_$CHDIR			; In TENV.ASM
 44130 000094ED [2293]                  	dw	CdHelpMsgs
 44131                                  	
 44132 000094EF 05434844495203          	db	5,"CHDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 44133 000094F6 [3A28]                  	dw	_$CHDIR			; In TENV.ASM
 44134 000094F8 [2293]                  	dw	CdHelpMsgs
 44135                                  	
 44136 000094FA 024D4403                	db	2,"MD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 44137 000094FE [A028]                  	dw	_$MKDIR			; In TENV.ASM
 44138 00009500 [6C93]                  	dw	MdHelpMsgs
 44139                                  	
 44140 00009502 054D4B44495203          	db	5,"MKDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 44141 00009509 [A028]                  	dw	_$MKDIR			; In TENV.ASM
 44142 0000950B [6C93]                  	dw	MdHelpMsgs
 44143                                  	
 44144 0000950D 02524403                	db	2,"RD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 44145 00009511 [E528]                  	dw	_$RMDIR			; In TENV.ASM
 44146 00009513 [8C93]                  	dw	RdHelpMsgs
 44147                                  	
 44148 00009515 05524D44495203          	db	5,"RMDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 44149 0000951C [E528]                  	dw	_$RMDIR			; In TENV.ASM
 44150 0000951E [8C93]                  	dw	RdHelpMsgs
 44151                                  	
 44152 00009520 05425245414B02          	db	5,"BREAK",fSwitchAllowed ; 2		;AC018; P3903
 44153 00009527 [533A]                  	dw	CNTRLC			; In TUCODE.ASM
 44154 00009529 [1893]                  	dw	BreakHelpMsgs
 44155                                  	
 44156 0000952B 0656455249465902        	db	6,"VERIFY",fSwitchAllowed ; 2		;AC018; P3903
 44157 00009533 [953A]                  	dw	VERIFY			; In TUCODE.ASM
 44158 00009535 [AE93]                  	dw	VerifyHelpMsgs
 44159                                  	
 44160 00009537 0353455406              	db	3,"SET",fSwitchAllowed+fLimitHelp ; 6
 44161 0000953C [A425]                  	dw	ADD_NAME_TO_ENVIRONMENT	; In TENV.ASM
 44162 0000953E [9893]                  	dw	SetHelpMsgs
 44163                                  	
 44164 00009540 0650524F4D505406        	db	6,"PROMPT",fSwitchAllowed+fLimitHelp ; 6
 44165 00009548 [8A25]                  	dw	ADD_PROMPT		; In TENV.ASM
 44166 0000954A [7893]                  	dw	PromptHelpMsgs
 44167                                  	
 44168 0000954C 045041544802            	db	4,"PATH",fSwitchAllowed ; 2
 44169 00009552 [2A22]                  	dw	PATH			; In TCMD2.ASM
 44170 00009554 [7093]                  	dw	PathHelpMsgs
 44171                                  	
 44172 00009556 044558495400            	db	4,"EXIT",0
 44173 0000955C [FB24]                  	dw	_$EXIT			; In TCMD2.ASM
 44174 0000955E [6893]                  	dw	ExitHelpMsgs
 44175                                  	
 44176 00009560 044354545903            	db	4,"CTTY",fCheckDrive+fSwitchAllowed ; 3
 44177 00009566 [6823]                  	dw	CTTY			; In TCMD2.ASM
 44178 00009568 [4093]                  	dw	CttyHelpMsgs
 44179                                  	
 44180 0000956A 044543484F06            	db	4,"ECHO",fSwitchAllowed+fLimitHelp ; 6
 44181 00009570 [1A3A]                  	dw	_ECHO			; In TUCODE.ASM
 44182 00009572 [C493]                  	dw	EchoHelpMsgs
 44183                                  	
 44184 00009574 04474F544F06            	db	4,"GOTO",fSwitchAllowed+fLimitHelp
 44185 0000957A [600D]                  	dw	_GOTO			; In TBATCH.ASM
 44186 0000957C [CA93]                  	dw	GotoHelpMsgs
 44187                                  	
 44188 0000957E 05534849465402          	db	5,"SHIFT",fSwitchAllowed ; 2
 44189 00009585 [E50C]                  	dw	_SHIFT			; In TBATCH.ASM
 44190 00009587 [D093]                  	dw	ShiftHelpMsgs
 44191                                  	
 44192 00009589 02494606                	db	2,"IF",fSwitchAllowed+fLimitHelp ; 6
 44193 0000958D [910B]                  	dw	_$IF			; In TBATCH.ASM
 44194 0000958F [D493]                  	dw	IfHelpMsgs
 44195                                  	
 44196 00009591 03464F5206              	db	3,"FOR",fSwitchAllowed+fLimitHelp ; 6
 44197 00009596 [1910]                  	dw	_$FOR			; In TBATCH.ASM
 44198 00009598 [E493]                  	dw	ForHelpMsgs
 44199                                  	
 44200 0000959A 03434C5300              	db	3,"CLS",0
 44201 0000959F [CF22]                  	dw	CLS			; In TCMD2.ASM
 44202 000095A1 [2A93]                  	dw	ClsHelpMsgs
 44203                                  	
 44204 000095A3 08545255454E414D45-     	db	8,"TRUENAME",fSwitchAllowed+fCheckDrive	;AN000; P3903 changed
 44204 000095AC 03                 
 44205 000095AD [8424]                  	dw	TRUENAME		;AN000;
 44206 000095AF [EE93]                  	dw	TruenameHelpMsgs
 44207                                  	
 44208 000095B1 084C4F414448494748-     	db	8,"LOADHIGH",fSwitchAllowed ; 2	; M003
 44208 000095BA 02                 
 44209 000095BB [1D62]                  	dw	LoadHigh		; In loadhi.asm ; M003
 44210 000095BD [F293]                  	dw	LoadhighHelpMsgs	; M003
 44211                                  	
 44212 000095BF 024C4802                	db	2,"LH",fSwitchAllowed ; 2 ; Short form; M003
 44213 000095C3 [1D62]                  	dw	LoadHigh		; In loadhi.asm ; M003
 44214 000095C5 [F293]                  	dw	LoadhighHelpMsgs	; M003
 44215                                  	
 44216 000095C7 00                      	db	0			; Terminate command table
 44217                                  
 44218                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8736h
 44219                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:9A92h ; 06/08/2024
 44220                                  
 44221 000095C8 2E434F4D                comext:	db	".COM"
 44222 000095CC 2E455845                exeext:	db	".EXE"
 44223 000095D0 2E424154                batext:	db	".BAT"
 44224                                  
 44225                                  switch_list:
 44226                                  	; MSDOS 5.0 (& 6.0) COMMAND.COM
 44227                                  	;db	"?VBAPW"		; flags we can recognize
 44228                                  	; 18/06/2023
 44229                                  	; MSDOS 6.22 COMMAND.COM
 44230 000095D4 2D593F5642415057        	db	"-Y?VBAPW" ; PCDOS 7.1 COMMAND.COM ; 06/08/2024
 44231                                  
 44232                                  AttrLtrs:
 44233 000095DC 524853764441            	db	"RHSvDA"		; attribute letters for DIR
 44234                                  
 44235                                  ;	Attribute letters in AttrLtrs must appear in the order that
 44236                                  ;	attribute bits occur in the attribute byte returned by
 44237                                  ;	directory searches, starting with bit 0.
 44238                                  ;	The volume label attribute is lowercased to keep it from
 44239                                  ;	being matched (by an uppercase comparison).
 44240                                  
 44241                                  OrderLtrs:
 44242                                  	; MSDOS 5.0
 44243                                  	;db	"NEDSG"			; sort order letters for DIR
 44244                                  	; 18/06/2023
 44245                                  	; MSDOS 6.0 COMMAND.COM
 44246                                  	;db	"NEDSGC"		; sort order letters for DIR
 44247                                  	; 06/08/2024
 44248                                  	; PCDOS 7.1 COMMAND.COM
 44249 000095E2 4E45445347              	db	"NEDSG"
 44250                                  
 44251                                  ;	Sort order letters stand for file name, extension,
 44252                                  ;	date/time, size, grouped (directory files before others),
 44253                                  ;	and compression ratio. DIR routines rely on the specific
 44254                                  ;	order of the letters in this list.
 44255                                  
 44256                                  comspec_flag:
 44257 000095E7 00                      	db	0                       ;AN071;
 44258                                  
 44259                                  BATBUFLEN:
 44260 000095E8 2000                    	dw	BatLen ; 32
 44261                                  
 44262                                  ; *****************************************************
 44263                                  ; EMG 4.00
 44264                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 44265                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 44266                                  ; *****************************************************
 44267                                  
 44268                                  ; COMMON PARSE BLOCKS
 44269                                  
 44270                                  ; Indicates no value list for PARSE.
 44271                                  
 44272                                  NO_VALUES:
 44273 000095EA 0000                    	dw	0			;AN000;  no values
 44274                                  
 44275                                  NULL_VALUE_LIST:  ; for unvalidated value
 44276 000095EC 00                       	db	0                       ; no value lists
 44277                                  
 44278                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44279                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8759h
 44280                                  
 44281                                  ; PARSE control block for a required file specification (upper cased)
 44282                                  
 44283                                  FILE_REQUIRED:
 44284 000095ED 0002                    	dw	0200h			;AN000;  filespec - required
 44285 000095EF 0100                    	dw	1			;AN000;  capitalize - file table
 44286 000095F1 [5BA6]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 44287 000095F3 [EA95]                  	dw	NO_VALUES		;AN000;
 44288 000095F5 00                      	db	0			;AN000;  no keywords
 44289                                  
 44290                                  ; PARSE control block for an optional file specification (upper cased)
 44291                                  ; or drive number
 44292                                  
 44293                                  FILE_OPTIONAL:
 44294 000095F6 0103                    	dw	0301h			;AN000;  filespec or drive number
 44295                                  					;	 optional
 44296 000095F8 0100                    	dw	1			;AN000;  capitalize - file table
 44297 000095FA [5BA6]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 44298 000095FC [EA95]                  	dw	NO_VALUES		;AN000;
 44299 000095FE 00                      	db	0			;AN000;  no keywords
 44300                                  
 44301                                  ; PARSE control block for an optional file specification (upper cased)
 44302                                  
 44303                                  FILE_OPTIONAL2:
 44304 000095FF 0102                    	dw	0201h                   ;AN000;  filespec optional
 44305 00009601 0100                    	dw	1                       ;AN000;  capitalize - file table
 44306 00009603 [5BA6]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 44307 00009605 [EA95]                  	dw	NO_VALUES		;AN000;
 44308 00009607 00                      	db	0			;AN000;  no keywords
 44309                                  
 44310                                  ; PARSE control block for an optional /P switch
 44311                                  
 44312                                  SLASH_P_SWITCH:
 44313 00009608 0000                    	dw	0			;AN000;  no match flags
 44314 0000960A 0200                    	dw	2			;AN000;  capitalize - char table
 44315 0000960C [5BA6]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 44316 0000960E [EA95]                  	dw	NO_VALUES		;AN000;
 44317 00009610 01                      	db	1			;AN000;  1 keyword
 44318                                  SLASH_P_SYN:
 44319 00009611 2F5000                  	db	"/P",0                  ;AN000;  /P switch
 44320                                  
 44321                                  ; PARSE BLOCK FOR BREAK, VERIFY, ECHO
 44322                                  
 44323                                  ; The following parse control block can be used for any command which
 44324                                  ; needs only the optional "ON" and "OFF" keywords as operands. Allows
 44325                                  ; the equal sign as an additional delimiter. Returns verified result
 44326                                  ; in PARSE1_OUTPUT. Currently used for the BREAK, VERIFY, and ECHO
 44327                                  ; internal commands.
 44328                                  
 44329                                  PARSE_BREAK:
 44330 00009614 [1796]                  	dw	BREAK_PARMS		;AN000;
 44331 00009616 00                      	db	0			;AN032; no extra delimiter
 44332                                  
 44333                                  BREAK_PARMS:
 44334 00009617 0001                    	db	0,1			;AN000;  1 positional parm
 44335 00009619 [1D96]                  	dw	BREAK_CONTROL1		;AN000;
 44336 0000961B 00                      	db	0			;AN000;  no switches
 44337 0000961C 00                      	db	0			;AN000;  no keywords
 44338                                  
 44339                                  BREAK_CONTROL1:
 44340 0000961D 0120                    	dw	2001h			;AN000;  string value - optional
 44341 0000961F 0200                    	dw	2			;AN000;  capitalize - char table
 44342 00009621 [5BA6]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 44343 00009623 [2696]                  	dw	BREAK_VALUES		;AN000;
 44344 00009625 00                      	db	0			;AN000;  no keywords
 44345                                  
 44346                                  BREAK_VALUES:
 44347 00009626 03                      	db	3			;AN000;
 44348 00009627 00                      	db	0			;AN000;  no ranges
 44349 00009628 00                      	db	0			;AN000;  no numeric values
 44350 00009629 02                      	db	2			;AN000;  2 string values
 44351 0000962A 00                      	db	0			;AN000;  returned if ON
 44352 0000962B [3096]                  	dw	BREAK_ON		;AN000;  point to ON string
 44353 0000962D 66                      	db	'f'                     ;AN000;  returned if OFF
 44354 0000962E [3396]                  	dw	BREAK_OFF		;AN000;  point to OFF string
 44355                                  
 44356                                  BREAK_ON:
 44357 00009630 4F4E00                  	db	"ON",0                  ;AN000;
 44358                                  BREAK_OFF:
 44359 00009633 4F464600                	db	"OFF",0                 ;AN000;
 44360                                  
 44361                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44362                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:87A3h
 44363                                  
 44364                                  ; PARSE BLOCK FOR CHCP
 44365                                  
 44366                                  ; The following parse control block can be used for any command which
 44367                                  ; needs only one optional three digit decimal parameter for operands.
 44368                                  ; Returns verified result in PARSE1_OUTPUT. Currently used for the
 44369                                  ; CHCP internal command.
 44370                                  
 44371                                  CHCP_MINVAL	EQU	100			;AN000;
 44372                                  CHCP_MAXVAL	EQU	999			;AN000;
 44373                                  
 44374                                  PARSE_CHCP:
 44375 00009637 [3A96]                  	dw	CHCP_PARMS			;AN000;
 44376 00009639 00                      	db	0				;AN000;  no extra delimiter
 44377                                  CHCP_PARMS:
 44378 0000963A 0001                    	db	0,1				;AN000;  1 positional parm
 44379 0000963C [4096]                  	dw	CHCP_CONTROL1			;AN000;
 44380 0000963E 00                      	db	0				;AN000;  no switches
 44381 0000963F 00                      	db	0				;AN000;  no keywords
 44382                                  
 44383                                  CHCP_CONTROL1:
 44384 00009640 0180                    	dw	8001h				;AN000;  numeric value - optional
 44385 00009642 0000                    	dw	0				;AN000;  no function flags
 44386 00009644 [5BA6]                  	dw	PARSE1_OUTPUT			;AN000;  result buffer
 44387 00009646 [4996]                  	dw	CHCP_VALUES			;AN000;
 44388 00009648 00                      	db	0				;AN000;  no keywords
 44389                                  
 44390                                  CHCP_VALUES:
 44391 00009649 01                      	db	1				;AN000;
 44392 0000964A 01                      	db	1				;AN000;  1 range
 44393 0000964B 01                      	db	1				;AN000;  returned if result
 44394 0000964C 64000000E7030000        	dd	CHCP_MINVAL,CHCP_MAXVAL		;AN000;  minimum & maximum value
 44395 00009654 00                      	db	0				;AN000;  no numeric values
 44396 00009655 00                      	db	0				;AN000;  no string values
 44397                                  
 44398                                  ; PARSE BLOCK FOR DATE
 44399                                  
 44400                                  ; The following parse control block can be used for any command which
 44401                                  ; needs only an optional date string as an operand. Returns unverified
 44402                                  ; result in DATE_OUTPUT. Currently used for the DATE internal command.
 44403                                  
 44404                                  PARSE_DATE:
 44405 00009656 [5996]                  	dw	DATE_PARMS			;AN000;
 44406 00009658 00                      	db	0				;AN000;  no extra delimiter
 44407                                  DATE_PARMS:
 44408 00009659 0001                    	db	0,1				;AN000;  1 positional parm
 44409 0000965B [5F96]                  	dw	DATE_CONTROL1			;AN000;
 44410 0000965D 00                      	db	0				;AN000;  no switches
 44411 0000965E 00                      	db	0				;AN000;  no keywords
 44412                                  
 44413                                  DATE_CONTROL1:
 44414 0000965F 0110                    	dw	1001h				;AN000;  date - optional
 44415 00009661 0000                    	dw	0				;AN000;  no function flags
 44416 00009663 [63A6]                  	dw	DATE_OUTPUT			;AN000;  result buffer
 44417 00009665 [EA95]                  	dw	NO_VALUES			;AN000;
 44418 00009667 00                      	db	0				;AN000;  no keywords
 44419                                  
 44420                                  ; PARSE BLOCK FOR TIME
 44421                                  
 44422                                  ; The following parse control block can be used for any command which
 44423                                  ; needs only an optional time string as an operand. Returns unverified
 44424                                  ; result in TIME_OUTPUT. Currently used for the TIME internal command.
 44425                                  
 44426                                  PARSE_TIME:
 44427 00009668 [6B96]                  	dw	TIME_PARMS			;AN000;
 44428 0000966A 00                      	db	0				;AN000;  no extra delimiter
 44429                                  TIME_PARMS:
 44430 0000966B 0001                    	db	0,1				;AN000;  1 positional parm
 44431 0000966D [7196]                  	dw	TIME_CONTROL1			;AN000;
 44432 0000966F 00                      	db	0				;AN000;  no switches
 44433 00009670 00                      	db	0				;AN000;  no keywords
 44434                                  
 44435                                  TIME_CONTROL1:
 44436 00009671 0108                    	dw	0801h				;AN000;  TIME - optional
 44437 00009673 0000                    	dw	0				;AN000;  no function flags
 44438 00009675 [6BA6]                  	dw	TIME_OUTPUT			;AN000;  result buffer
 44439 00009677 [EA95]                  	dw	NO_VALUES			;AN000;
 44440 00009679 00                      	db	0				;AN000;  no keywords
 44441                                  
 44442                                  ; PARSE BLOCK FOR VOL
 44443                                  
 44444                                  ; The following parse control block can be used for any command which
 44445                                  ; needs only an optional drive letter as an operand.  Returns unverified
 44446                                  ; drive number (one based) in DRIVE_OUTPUT. Currently used for the VOL
 44447                                  ; internal command.
 44448                                  
 44449                                  PARSE_VOL:
 44450 0000967A [7D96]                  	dw	VOL_PARMS			;AN000;
 44451 0000967C 00                      	db	0				;AN000;  no extra delimiter
 44452                                  VOL_PARMS:
 44453 0000967D 0001                    	db	0,1				;AN000;  1 positional parm
 44454 0000967F [8396]                  	dw	DRIVE_CONTROL1			;AN000;
 44455 00009681 00                      	db	0				;AN000;  no switches
 44456 00009682 00                      	db	0				;AN000;  no keywords
 44457                                  
 44458                                  DRIVE_CONTROL1:
 44459 00009683 0101                    	dw	0101h				;AN000;  DRIVE - optional
 44460 00009685 0100                    	dw	1				;AN000;  capitalize - file table
 44461 00009687 [73A6]                  	dw	DRIVE_OUTPUT			;AN000;  result buffer
 44462 00009689 [EA95]                  	dw	NO_VALUES			;AN000;
 44463 0000968B 00                      	db	0				;AN000;  no keywords
 44464                                  
 44465                                  ; PARSE BLOCK FOR MKDIR, RMDIR, TYPE
 44466                                  
 44467                                  ; The following parse control block can be used for any command which
 44468                                  ; needs only one required file specification as an operand. Returns a
 44469                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 44470                                  ; for the MKDIR, RMDIR, and TYPE internal commands.
 44471                                  
 44472                                  PARSE_MRDIR:
 44473 0000968C [8F96]                  	dw	MRDIR_PARMS			;AN000;
 44474 0000968E 00                      	db	0				;AN000;  no extra delimiter
 44475                                  MRDIR_PARMS:
 44476 0000968F 0101                    	db	1,1				;AN000;  1 positional parm
 44477 00009691 [ED95]                  	dw	FILE_REQUIRED			;AN000;
 44478 00009693 00                      	db	0				;AN000;  no switches
 44479 00009694 00                      	db	0				;AN000;  no keywords
 44480                                  
 44481                                  ; PARSE BLOCK FOR CHDIR, TRUENAME
 44482                                  
 44483                                  ; The following parse control block can be used for any command which
 44484                                  ; needs only one optional file specification an operand. Returns a
 44485                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 44486                                  ; for the CHDIR and TRUENAME internal commands.
 44487                                  
 44488                                  PARSE_CHDIR:
 44489 00009695 [9896]                  	dw	CHDIR_PARMS			;AN000;
 44490 00009697 00                      	db	0				;AN000;  no extra delimiter
 44491                                  CHDIR_PARMS:
 44492 00009698 0001                    	db	0,1				;AN000;  1 positional parm
 44493 0000969A [F695]                  	dw	FILE_OPTIONAL			;AN000;
 44494 0000969C 00                      	db	0				;AN000;  no switches
 44495 0000969D 00                      	db	0				;AN000;  no keywords
 44496                                  
 44497                                  ; PARSE BLOCK FOR ERASE
 44498                                  
 44499                                  ; The following parse control block is used for the DEL/ERASE internal
 44500                                  ; commands. This command has one required file specification and an
 44501                                  ; optional switch (/p) as operands. The verified switch or unverified
 44502                                  ; file specification is returned in PARSE1_OUTPUT.
 44503                                  
 44504                                  PARSE_ERASE:
 44505 0000969E [A196]                  	dw	ERASE_PARMS			;AN000;
 44506 000096A0 00                      	db	0				;AN000;  no extra delimiter
 44507                                  
 44508                                  ERASE_PARMS:
 44509 000096A1 0101                    	db	1,1				;AN000;  1 positional parm
 44510 000096A3 [ED95]                  	dw	FILE_REQUIRED			;AN000;
 44511 000096A5 01                      	db	1				;AN000;  1 switch
 44512 000096A6 [0896]                  	dw	SLASH_P_SWITCH			;AN000;
 44513 000096A8 00                      	db	0				;AN000;  no keywords
 44514                                  
 44515                                  ; PARSE BLOCK FOR DIR
 44516                                  
 44517                                  ; The following parse control block is used for the DIR internal command.
 44518                                  ; This command has one optional file specification and several optional
 44519                                  ; switches. Switches, switch values, and the filespec are returned in 
 44520                                  ; PARSE1_OUTPUT.
 44521                                  ;
 44522                                  ; Switches are /a[value], /-a, /o[value], /-o, /s, /-s, /?, /b, /-b,
 44523                                  ; /w, /-w, /p, and /-p. The string values for /a and /o are optional,
 44524                                  ; do not require colons, and are not checked against a value list.
 44525                                  ;
 44526                                  ; Switch /h has been removed from the DIR command	;M008
 44527                                  ; Switch /? is no longer handled internally		;M008
 44528                                  ;
 44529                                  ; A list of pointers to all the switch synonyms is provided here to
 44530                                  ; help identify which switch has been matched.
 44531                                  
 44532                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 44533                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8815h
 44534                                  
 44535                                  PARSE_DIR:
 44536 000096A9 [AC96]                  	dw	DIR_PARMS
 44537 000096AB 00                      	db	0			; no extra delimiters
 44538                                  DIR_PARMS:
 44539 000096AC 0001                    	db	0,1			; 1 optional positional param
 44540 000096AE [FF95]                  	dw	FILE_OPTIONAL2
 44541 000096B0 02                      	db	2			; 2 kinds of switches
 44542 000096B1 [B696]                  	dw	DIR_SW_VALUED
 44543 000096B3 [C896]                  	dw	DIR_SW_UNVALUED
 44544 000096B5 00                      	db	0			; no keywords
 44545                                  
 44546                                  DIR_SW_VALUED:
 44547 000096B6 0120                    	dw	2001h			; optional string value
 44548 000096B8 2100                    	dw	21h			; optional colon; capitalize 
 44549 000096BA [5BA6]                  	dw	PARSE1_OUTPUT		; result buffer
 44550 000096BC [EC95]                  	dw	NULL_VALUE_LIST		; don't validate value
 44551                                  
 44552                                  	; 18/06/2023
 44553                                  	;db	2
 44554                                  
 44555                                  ; MSDOS 6.0 COMMAND.COM
 44556                                  ;ifdef DBLSPACE_HOOKS
 44557                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44558 000096BE 03                      	db	3		; 3 'synonyms'
 44559                                  ;else
 44560                                  ;	db	2		; 2 'synonyms'
 44561                                  ;endif
 44562                                  
 44563                                  DIR_SW_A:
 44564 000096BF 2F4100                  	db	"/A",0
 44565                                  DIR_SW_O:
 44566 000096C2 2F4F00                  	db	"/O",0
 44567                                  
 44568                                  ; MSDOS 6.0 COMMAND.COM
 44569                                  ;ifdef DBLSPACE_HOOKS
 44570                                  	; 18/06/2023
 44571                                  DIR_SW_C:
 44572 000096C5 2F4300                  	db	"/C",0
 44573                                  ;endif
 44574                                  
 44575                                  DIR_SW_UNVALUED:
 44576 000096C8 0000                    	dw	0			; no value
 44577 000096CA 0000                    	dw	0			; no format functions
 44578 000096CC [5BA6]                  	dw	PARSE1_OUTPUT		; result buffer
 44579 000096CE [EA95]                  	dw	NO_VALUES
 44580                                  
 44581                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 44582                                  	;;db	12
 44583                                  	
 44584                                  	; 18/06/2023
 44585                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8839h
 44586                                  	;db	14		; 14 'synonyms' !?
 44587                                  
 44588                                  ; MSDOS 6.0 COMMAND.COM
 44589                                  ;ifdef DBLSPACE_HOOKS
 44590                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44591                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DB0h
 44592 000096D0 0D                      	db	13		; 13 'synonyms'
 44593                                  ;else
 44594                                  ;	db	12		; 12 'synonyms'
 44595                                  ;endif
 44596                                  
 44597                                  DIR_SW_NEG_A:
 44598 000096D1 2F2D4100                	db	"/-A",0
 44599                                  DIR_SW_NEG_O:
 44600 000096D5 2F2D4F00                	db	"/-O",0
 44601                                  DIR_SW_S:
 44602 000096D9 2F5300                  	db	"/S",0
 44603                                  DIR_SW_NEG_S:
 44604 000096DC 2F2D5300                	db	"/-S",0
 44605                                  DIR_SW_B:
 44606 000096E0 2F4200                  	db	"/B",0
 44607                                  DIR_SW_NEG_B:
 44608 000096E3 2F2D4200                	db	"/-B",0
 44609                                  DIR_SW_W:
 44610 000096E7 2F5700                  	db	"/W",0
 44611                                  DIR_SW_NEG_W:
 44612 000096EA 2F2D5700                	db	"/-W",0
 44613                                  DIR_SW_P:
 44614 000096EE 2F5000                  	db	"/P",0
 44615                                  DIR_SW_NEG_P:
 44616 000096F1 2F2D5000                	db	"/-P",0
 44617                                  DIR_SW_L:
 44618 000096F5 2F4C00                  	db	"/L",0		;M010
 44619                                  DIR_SW_NEG_L:
 44620 000096F8 2F2D4C00                	db	"/-L",0 	;M010
 44621                                  
 44622                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44623                                  ; MSDOS 6.0 COMMAND.COM (DBLSPACE_HOOKS)
 44624                                  DIR_SW_NEG_C:
 44625 000096FC 2F2D4300                	db	"/-C",0
 44626                                  
 44627                                  ; Here's a list of pointers to DIR's switch synonyms, for easier
 44628                                  ; identification. Order is critical - DIR routines rely on the
 44629                                  ; specific order in this list. Negated options appear at odd 
 44630                                  ; positions in the list, and simple on/off options appear first.
 44631                                  
 44632                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44633                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9DE0h
 44634                                  Dir_Sw_Ptrs:			; list of ptrs to switch synonyms
 44635                                  	; 18/06/2023
 44636                                  	; MSDOS 6.0 COMMAND.COM ; *
 44637 00009700 [FC96]                  	dw	DIR_SW_NEG_C	; * 
 44638                                  Dir_Sw_Ptrs_2:
 44639 00009702 [C596]                  	dw	DIR_SW_C	; *
 44640                                  	; MSDOS 5.0 COMMAND.COM	
 44641                                  ;Dir_Sw_Ptrs:
 44642 00009704 [EA96]                  	dw	DIR_SW_NEG_W
 44643                                  ;Dir_Sw_Ptrs_2:
 44644 00009706 [E796]                  	dw	DIR_SW_W
 44645 00009708 [F196]                  	dw	DIR_SW_NEG_P
 44646 0000970A [EE96]                  	dw	DIR_SW_P
 44647 0000970C [DC96]                  	dw	DIR_SW_NEG_S
 44648 0000970E [D996]                  	dw	DIR_SW_S
 44649 00009710 [E396]                  	dw	DIR_SW_NEG_B
 44650 00009712 [E096]                  	dw	DIR_SW_B
 44651 00009714 [F896]                  	dw	DIR_SW_NEG_L	;M010
 44652 00009716 [F596]                  	dw	DIR_SW_L	;M010
 44653 00009718 [D596]                  	dw	DIR_SW_NEG_O
 44654 0000971A [C296]                  	dw	DIR_SW_O
 44655 0000971C [D196]                  	dw	DIR_SW_NEG_A
 44656 0000971E [BF96]                  	dw	DIR_SW_A
 44657                                  
 44658                                  ; PARSE BLOCK FOR RENAME
 44659                                  
 44660                                  ; The following parse control block can be used for any command which
 44661                                  ; needs only two required file specifications as operands. Returns
 44662                                  ; pointers to the unverified string in PARSE1_OUTPUT.
 44663                                  ; Currently used for the RENAME internal command.
 44664                                  
 44665                                  PARSE_RENAME:
 44666 00009720 [2397]                  	dw	RENAME_PARMS		;AN000;
 44667 00009722 00                      	db	0			;AN000;  no extra delimiter
 44668                                  RENAME_PARMS:
 44669 00009723 0202                    	db	2,2			;AN000;  2 positional parms
 44670 00009725 [ED95]                  	dw	FILE_REQUIRED		;AN000;
 44671 00009727 [ED95]                  	dw	FILE_REQUIRED		;AN000;
 44672 00009729 00                      	db	0			;AN000;  no switches
 44673 0000972A 00                      	db	0			;AN000;  no keywords
 44674                                  
 44675                                  ; PARSE BLOCK FOR CTTY
 44676                                  
 44677                                  ; The following parse control block can be used for any command which
 44678                                  ; needs one required device name as an operand. Returns a pointer to
 44679                                  ; unverified string in PARSE1_OUTPUT. Currently used for the CTTY
 44680                                  ; internal command.
 44681                                  
 44682                                  PARSE_CTTY:
 44683 0000972B [2E97]                  	dw	CTTY_PARMS		;AN000;
 44684 0000972D 00                      	db	0			;AN000;  no extra delimiter
 44685                                  CTTY_PARMS:
 44686 0000972E 0101                    	db	1,1			;AN000;  1 positional parm
 44687 00009730 [3497]                  	dw	CTTY_CONTROL1		;AN000;
 44688 00009732 00                      	db	0			;AN000;  no switches
 44689 00009733 00                      	db	0			;AN000;  no keywords
 44690                                  CTTY_CONTROL1:
 44691 00009734 0020                    	dw	2000h			;AN000;  string value - required
 44692 00009736 1100                    	dw	11h			;AN000;  capitalize - file table
 44693                                  					;AN000;  remove colon at end
 44694 00009738 [5BA6]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 44695 0000973A [EA95]                  	dw	NO_VALUES		;AN000;
 44696 0000973C 00                      	db	0			;AN000;  no keywords
 44697                                  
 44698                                  ; PARSE BLOCK FOR VER
 44699                                  
 44700                                  ; The following parse control block can be used for any command which
 44701                                  ; needs an optional switch "/debug". Currently used for the VER command.
 44702                                  
 44703                                  PARSE_VER:
 44704 0000973D [4097]                  	dw	VER_PARMS
 44705 0000973F 00                      	db	0			; no extra delimiters
 44706                                  VER_PARMS:
 44707 00009740 0000                    	db	0,0			; no positional parameters
 44708                                  ; 20/07/2024 - Retro DOS v5 COMMAND.COM
 44709                                  %if 0	; PCDOS 7.1 (& MSDOS 5.0-6.22) COMMAND.COM 
 44710                                  	db	1			; one switch
 44711                                  	dw	SLASH_R
 44712                                  %else
 44713                                  	; 20/07/2024 - Retro DOS v4-v5 COMMAND.COM
 44714 00009742 02                      	db	2
 44715 00009743 [4897]                  	dw	SLASH_R
 44716 00009745 [5497]                  	dw	SLASH_T ; Retro DOS v4-v5 COMMAND.COM switch
 44717                                  %endif
 44718 00009747 00                      	db	0			; no keywords
 44719                                  SLASH_R:
 44720 00009748 0000                    	dw	0			; no values
 44721 0000974A 0200                    	dw	2			; capitalize by filename table
 44722 0000974C [5BA6]                  	dw	PARSE1_OUTPUT		; result buffer
 44723 0000974E [EA95]                  	dw	NO_VALUES		; no values
 44724 00009750 01                      	db	1			; one synonym
 44725                                  SLASH_R_SYN:
 44726 00009751 2F5200                  	db	"/R",0
 44727                                  
 44728                                  ; 20/07/2024 - Retro DOS v5 COMMAND.COM
 44729                                  %if 1
 44730                                  SLASH_T:
 44731 00009754 0000                    	dw	0			; no values
 44732 00009756 0200                    	dw	2			; capitalize by filename table
 44733 00009758 [5BA6]                  	dw	PARSE1_OUTPUT		; result buffer
 44734 0000975A [EA95]                  	dw	NO_VALUES		; no values
 44735 0000975C 01                      	db	1			; one synonym
 44736                                  SLASH_T_SYN:
 44737 0000975D 2F5400                  	db	"/T",0
 44738                                  %endif
 44739                                  
 44740                                  ; M003 ; Start of changes for LoadHigh support
 44741                                  
 44742                                  ;Parse Control Block for LOADHIGH command
 44743                                  
 44744                                  Parse_LoadHi:
 44745 00009760 [6397]                  	dw	LoadHi_Parms		;extended parm table
 44746 00009762 00                      	db	0			;no extra delimiters
 44747                                  
 44748                                  LoadHi_Parms:
 44749 00009763 0101                    	db	1,1			;min. 1 parm, max. 1 parm
 44750 00009765 [ED95]                  	dw	FILE_REQUIRED		;control struc for filename
 44751 00009767 00                      	db	0			;no switches
 44752 00009768 00                      	db	0			;no keywords
 44753                                  
 44754                                  ; M003 ; End of changes for LoadHigh support
 44755                                  
 44756                                  TempVarName:
 44757 00009769 54454D503D00            	db	"TEMP=",0
 44758                                  
 44759                                  	; 16/04/2023 - Retro DOS v4.0 (MSDOS 5.0) COMMAND.COM
 44760                                  ;TRANDATAEND:		; TRANGROUP:88C2h
 44761                                  
 44762                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 44763                                  copycmd:
 44764 0000976F 434F5059434D443D        	db 'COPYCMD='
 44765                                  
 44766                                  ; 06/08/2024 - Retro DOS v5.0 - PCDOS 7.1 COMMAND.COM
 44767                                  %if 0
 44768                                  sCVFRoot:
 44769                                  	db '\DBLSPACE.'
 44770                                  %else
 44771                                  	; 06/08/2024
 44772                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:9C3Eh
 44773                                  REXX_EXE:
 44774 00009777 524558582E45584500      	db 'REXX.EXE',0		
 44775                                  %endif
 44776                                  
 44777                                  ; ----------------------------------------------------------------------------
 44778                                  ; 20/07/2024 - Retro DOS v5.0 COMMAND.COM
 44779                                  %if 1
 44780 00009780 0D0A                    RD5CMD_VER_MSG: db 0Dh, 0Ah
 44781 00009782 526574726F20444F53-     		db 'Retro DOS v5 COMMAND.COM'
 44781 0000978B 20763520434F4D4D41-
 44781 00009794 4E442E434F4D       
 44782 0000979A 0D0A                    		db 0Dh, 0Ah 
 44783 0000979C 32303234202D204572-     		db '2024 - Erdogan Tan'
 44783 000097A5 646F67616E2054616E 
 44784 000097AE 0D0A                    		db 0Dh,0Ah
 44785 000097B0 24                      		db '$'
 44786                                  %endif
 44787                                  ; ----------------------------------------------------------------------------
 44788                                  
 44789                                  	; 18/06/2023
 44790                                  	; MSDOS 6.22 COMMAND.COM
 44791                                  TRANDATAEND:		; TRANGROUP:9E53h
 44792                                  
 44793                                  ;============================================================================
 44794                                  ; PSDATA.INC, MSDOS 6.0, 1991
 44795                                  ;============================================================================
 44796                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44797                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44798                                  
 44799                                  ; 18/04/2023
 44800                                  TRANSPACESTART:
 44801                                  
 44802                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:88C2h
 44803                                  	
 44804                                  	; 18/06/2023
 44805                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9E53h
 44806                                  
 44807                                  ;********************** Local Data *************************************
 44808                                  
 44809                                  $P_ORDINAL:
 44810 000097B1 0000                    	dw	0		;AN000; Operand ordinal save area
 44811                                  $P_RC:
 44812 000097B3 0000                    	dw	0		;AN000; Return code from parser
 44813                                  $P_SI_Save:
 44814 000097B5 0000                    	dw	0		;AN000; Pointer of command buffer
 44815                                  $P_DX:
 44816 000097B7 0000                    	dw	0		;AN000; Return result buffer address
 44817                                  $P_Terminator:
 44818 000097B9 00                      	db	0		;AN000; Terminator code (ASCII)
 44819                                  $P_DBCSEV_OFF:
 44820 000097BA 0000                    	dw	0		;AN000; Offset of DBCS EV
 44821                                  $P_DBCSEV_SEG:
 44822 000097BC 0000                    	dw	0		;AN000; Segment of DBCS EV
 44823                                  $P_Flags:			;AN000; Parser internal flags
 44824                                  $P_Flags1:
 44825 000097BE 00                      	db	0		;AN038; to reference first byte flags
 44826                                  $P_Flags2:
 44827 000097BF 00                      	db	0		;AN038; to reference second byte flags only
 44828                                  $P_SaveSI_Cmpx:
 44829 000097C0 0000                    	dw	0		;AN000; save si for later use by complex
 44830                                  $P_KEYorSW_Ptr:
 44831 000097C2 0000                    	dw	0		;AN000; points next to "=" or ":" code
 44832                                  $P_Save_EOB:
 44833 000097C4 0000                    	dw	0		;AN000; save pointer to EOB
 44834                                  $P_Found_SYNONYM:
 44835 000097C6 0000                    	dw	0		;AN000; es:@ points to found synonym
 44836                                  $P_STRING_BUF:
 44837 000097C8 00<rep 80h>             	times  128 db 0		;AN000; Pick a operand from command line
 44838                                  $P_ORIG_ORD:
 44839 00009848 0000                    	dw	0		;AN039; ORIGINAL ORDINAL FROM CX
 44840                                  $P_ORIG_STACK:
 44841 0000984A 0000                    	dw	0		;AN039; ORIGINAL VALUE OF STACK FROM SP
 44842                                  $P_ORIG_SI:
 44843 0000984C 0000                    	dw	0		;AN039; ORIGINAL START PARSE POINTER FROM SI
 44844                                  $P_Got_Time:
 44845 0000984E 00                      	db	0		;AN023; if 1, use Time delimiters
 44846                                  $P_Country_Info:
 44847 0000984F FFFF                    	dw	-1 ; 0FFFFh
 44848 00009851 00<rep 20h>             	times	32 db 0	
 44849                                  $P_1st_Val:
 44850 00009871 0000                    	dw	0		;AN000; used when process date or time
 44851                                  $P_2nd_Val:
 44852 00009873 0000                    	dw	0		;AN000; used when process date or time
 44853                                  $P_3rd_Val:
 44854 00009875 0000                    	dw	0		;AN000; used when process date or time
 44855                                  $P_4th_Val:
 44856 00009877 0000                    	dw	0		;AN000; used when process date or time
 44857                                  $P_Char_CAP_Ptr:
 44858 00009879 FF                      	db	0FFh		;AN000; info id
 44859 0000987A 0000                    	dw	0		;AN000; offset	of char case map table
 44860 0000987C 0000                    	dw	0		;AN000; segment of char case map table
 44861                                  $P_File_CAP_Ptr:
 44862 0000987E FF                      	db	0FFh		;AN000; info id
 44863 0000987F 0000                    	dw	0		;AN000; offset	of file case map table
 44864 00009881 0000                    	dw	0		;AN000; segment of file case map table
 44865                                  
 44866                                  	; 18/04/2023
 44867                                  ;M029
 44868                                  ;!!!WARNING!!!
 44869                                  ; In routine SYSPARSE (parse.asm), $P_FileSp_Char is reinitialized using 
 44870                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 44871                                  ;changes need to be made in SYSPARSE
 44872                                  
 44873                                  $P_FileSp_Char:
 44874 00009883 5B5D7C3C3E2B3D3B22      	db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 44875                                  $P_FileSp_Len equ $-$P_FileSp_Char ;AN000;
 44876                                  
 44877                                  ;filespec error flag
 44878                                  $P_err_flag:
 44879 0000988C 00                      	db	0		;AN033; flag set if filespec parsing error
 44880                                  				;AN033;  was detected.
 44881                                  
 44882                                  ;============================================================================
 44883                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 44884                                  ;============================================================================
 44885                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44886                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44887                                  
 44888                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:899Eh
 44889                                  
 44890                                  	; 18/06/2023
 44891                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9F2Fh
 44892                                  
 44893                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 44894                                  ;;
 44895                                  ;; STRUCTURE: $M_RES_ADDRS
 44896                                  ;;
 44897                                  ;; Resident data area definition of variables
 44898                                  ;;
 44899                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 44900                                  
 44901                                  $M_RT:
 44902 0000988D 00<rep 8Dh>             	times $M_RES_ADDRS_SZ db 0   ; times 141 db 0
 44903                                  
 44904                                  ;============================================================================
 44905                                  ; COPYRIGHT.INC, MSDOS 6.0, 1993
 44906                                  ;============================================================================
 44907                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44908                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44909                                  
 44910                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8A2Bh
 44911                                  ; ---------------------------------------------------------------------------
 44912                                  ;;M00 - changed to DOS 5.0 copyright - MD 9 Jul 90
 44913                                  ;;M031 - changed copyright to 1991
 44914                                  ;;9/16 - changed version to 6.0 and copyright to 1992
 44915                                  ;;9/21 - Added international translations, language passed through COUNTRY macro
 44916                                  ;;B49,50 - changed version to 6 and copyright to 1993
 44917                                  ; ---------------------------------------------------------------------------
 44918                                  	
 44919                                  	; 18/06/2023
 44920                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:9FBCh
 44921                                  ;ifdef USA
 44922                                  MsDosVer6_CCopy:
 44923                                  	; MSDOS 6.0
 44924                                  	;db	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
 44925                                  	; 18/06/2023
 44926                                  	; MSDOS 6.22
 44927 0000991A 4D5320444F53205665-     	db	"MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp "
 44927 00009923 7273696F6E20362028-
 44927 0000992C 4329436F7079726967-
 44927 00009935 687420313938312D31-
 44927 0000993E 393934204D6963726F-
 44927 00009947 736F667420436F7270-
 44927 00009950 20                 
 44928 00009951 4C6963656E73656420-     	db	"Licensed Material - Property of Microsoft "
 44928 0000995A 4D6174657269616C20-
 44928 00009963 2D2050726F70657274-
 44928 0000996C 79206F66204D696372-
 44928 00009975 6F736F667420       
 44929 0000997B 416C6C207269676874-     	db	"All rights reserved "
 44929 00009984 732072657365727665-
 44929 0000998D 6420               
 44930                                  ;endif
 44931                                  
 44932                                  ; ---------------------------------------------------------------------------
 44933                                  ; 18/06/2023
 44934                                  ; 15/04/2023
 44935                                  ;MsDosVer5_CCopy:
 44936                                  	;db	"MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp "
 44937                                  	;db	"Licensed Material - Property of Microsoft "
 44938                                  	;db	"All rights reserved "
 44939                                  ; ---------------------------------------------------------------------------
 44940                                  ; 15/04/2023
 44941                                  	; 16/04/2023 - 21/04/2023
 44942                                  	;db 	0
 44943                                  	;db	0Dh,0Ah
 44944                                  	;db	'Retro DOS v4.0 (& v4.1) COMMAND.COM '
 44945                                  	;db	0
 44946                                  	;db	'by Erdogan Tan - 05/05/2023'
 44947                                  	;db	0
 44948                                  
 44949                                  	; 19/06/2023
 44950                                  	; 18/06/2023
 44951                                  	;db 	0
 44952                                  	;db	0Dh,0Ah
 44953                                  	;db	'Retro DOS v4.2 COMMAND.COM '
 44954                                  	;db	0
 44955                                  	;db	'by Erdogan Tan - 19/6/2023'
 44956                                  	;db	0
 44957                                  
 44958                                  ;============================================================================
 44959                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 44960                                  ;============================================================================
 44961                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44962                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44963                                  
 44964                                  PRINTF_HANDLE:
 44965 0000998F 0000                    	dw	0		;AC000;
 44966                                  
 44967                                  ;============================================================================
 44968                                  ; TSPC.ASM, MSDOS 6.0, 1991
 44969                                  ;============================================================================
 44970                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 44971                                  ; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 44972                                  
 44973                                  ;TITLE	COMMAND Transient Uninitialized DATA
 44974                                  
 44975                                  ;The TRANSPACE segment contains variable data that is considered
 44976                                  ;volatile between command cycles, and therefore is not included in the
 44977                                  ;transient checksum area. Contents of these variables MUST be
 44978                                  ;initialized before use, and must not be relied upon from command
 44979                                  ;cycle to command cycle.
 44980                                  ;
 44981                                  ;No constant data values should be stored here.
 44982                                  
 44983                                  ; ---------------------------------------------------------------------------
 44984                                  ; START OF UNITIALIZED DATA
 44985                                  ; ---------------------------------------------------------------------------
 44986                                  
 44987                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8AA5h
 44988                                  
 44989                                  	; 18/06/2023
 44990                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A033h
 44991                                  
 44992 00009991 00<rep 57h>             SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 44993 000099E8 00<rep 57h>             TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 44994 00009A3F 00<rep 83h>             UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 44995 00009AC2 00<rep 83h>             COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 44996 00009B45 00<rep 46h>             USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 44997 00009B8B 00<rep 83h>             EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 44998 00009C0E 00<rep 53h>             RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 44999                                  
 45000                                  ; Variables passed up from resident	; in the Resident portion: (initial values)	
 45001                                  HEADCALL:
 45002 00009C61 0000                    	dw 0			; TRANVARS  (dw THEADFIX)
 45003 00009C63 0000                    RESSEG:	dw 0			; MYSEG     (dw 0) 	 	
 45004 00009C65 0000                    TPA:	dw 0			; LTPA	    (dw 0)	
 45005                                  SWITCHAR:
 45006 00009C67 00                      	db 0			; RSWITCHAR (db '-')
 45007                                  DIRCHAR:
 45008 00009C68 00                      	db 0			; RDIRCHAR  (db '/')
 45009                                  EXEC_ADDR:
 45010 00009C69 00000000                	dd 0			; 	    (dw EXT_EXEC)	 
 45011                                  				; MYSEG1    (dw 0)	
 45012                                  RCH_ADDR:
 45013 00009C6D 00000000                	dd 0			;	    (dw TREMCHECK) 	
 45014                                  				; MYSEG2    (dw 0)	
 45015 00009C71 0000                    	dw 0			; RESTEST   (dw 0)	
 45016                                  TRAN_TPA:
 45017 00009C73 0000                    	dw 0			; RES_TPA   (dw 0)	
 45018                                  
 45019 00009C75 00                      CHKDRV:	db 0
 45020                                  IFNOTFLAG:
 45021                                  FILTYP:
 45022 00009C76 00                      RDEOF:	db 0			; Misc flags
 45023 00009C77 00                      CURDRV:	db 0
 45024                                  PARM1:
 45025 00009C78 00                      Concat:	db 0
 45026                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 45027                                  %if 1
 45028                                  notzerofile:
 45029 00009C79 00                      	db 0			; (if 1, destination file size is not zero) 			
 45030                                  %endif
 45031                                  PARM2:
 45032 00009C7A 00                      ArgC:	db 0
 45033 00009C7B 0000                    COMSW:	dw 0			; Switches between command and 1st arg
 45034 00009C7D 0000                    ARG1S:	dw 0			; Switches between 1st and 2nd arg
 45035                                  ARG2S:				; Switches after 2nd arg		
 45036                                  DestSwitch:
 45037 00009C7F 0000                    	dw 0
 45038                                  ARGTS:
 45039                                  AllSwitch:
 45040 00009C81 0000                    	dw 0			; ALL switches except for COMSW
 45041 00009C83 00                      CFLAG:	db 0
 45042                                  DestClosed:
 45043                                  SPECDRV:
 45044 00009C84 00                      	db 0
 45045 00009C85 0000                    BYTCNT:	dw 0			; Size of buffer between RES and TRANS
 45046                                  
 45047                                  ; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 45048                                  ;ifdef DBLSPACE_HOOKS
 45049                                  savBytCnt: ; MSDOS 6.0
 45050 00009C87 0000                    	dw 0
 45051                                  ;endif
 45052                                  	
 45053 00009C89 0000                    NXTADD:	dw 0
 45054                                  FRSTSRCH:
 45055 00009C8B 00                      	db 0
 45056                                  ; 15/04/2023
 45057                                  LeftOnLine:
 45058 00009C8C 00                      	db 0			; entries left on line u.b. DIR
 45059                                  PerLine:
 45060 00009C8D 00                      	db 0			; entries/line u.b. DIR
 45061 00009C8E 00                      LINCNT:	db 0
 45062 00009C8F 00                      LINLEN:	db 0
 45063                                  LeftOnPage:
 45064 00009C90 0000                    	dw 0			; lines left on page u.b. DIR
 45065                                  FileCnt:
 45066 00009C92 0000                    	dw 0			; file count u.b. DIR
 45067                                  FileSiz:
 45068 00009C94 00000000                	dd 0			; file size u.b. DIR
 45069                                  
 45070                                  ; 31/07/2024 - PCDOS 7.1 COMMAND.COM - TRANGROUP:A0B5h
 45071                                  %if 1
 45072 00009C98 00000000                	dd 0
 45073 00009C9C 00                      narrow:	db 0
 45074                                  nocommas:
 45075 00009C9D 00                      	db 0
 45076                                  yeardigit4:
 45077 00009C9E 00                      	db 0
 45078                                  bfree_not_kilo:
 45079 00009C9F 00                      	db 0
 45080                                  efs_buffer:
 45081 00009CA0 000000000000000000-     	db 44 dup(0)  ; times 44 db 0
 45081 00009CA9 000000000000000000-
 45081 00009CB2 000000000000000000-
 45081 00009CBB 000000000000000000-
 45081 00009CC4 0000000000000000   
 45082                                  efs_drive:
 45083 00009CCC 433A5C00                	db 'C:\',0
 45084                                  %endif
 45085                                  
 45086                                  ; Note: keep FileCntTotal through csecUsedTotal together!
 45087                                  
 45088                                  FileCntTotal:
 45089 00009CD0 00000000                	dd 0			; total file count u.b. DIR
 45090                                  FileSizTotal:
 45091 00009CD4 00000000                	dd 0			; total file size u.b. DIR
 45092                                  
 45093                                  ; 31/07/2024 - Retro DOS v5.0 COMMAND.COM
 45094                                  %if 1
 45095                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:A0F5h
 45096 00009CD8 00000000                	dd 0
 45097                                  %else
 45098                                  	; 18/06/2023 - Retro DOS v4.2 (MSDOS 6.22) COMMAND.COM
 45099                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A33Fh
 45100                                  	; MSDOS 6.0
 45101                                  ;ifdef DBLSPACE_HOOKS
 45102                                  ccluUsed:
 45103                                  	dw 0			; count of DOS clusters used
 45104                                  ccluUsedDir:
 45105                                  	dw 0			
 45106                                  ccluUsedTotal:
 45107                                  	dw 0			
 45108                                  csecUsed:
 45109                                  	dd 0			; count of comp sectors used
 45110                                  csecUsedDir:
 45111                                  	dd 0			
 45112                                  csecUsedTotal:
 45113                                  	dd 0			
 45114                                  
 45115                                  ; Note:  keep FileCntTotal through csecUsedTotal together!
 45116                                  
 45117                                  fhCVF:
 45118                                  	dw 0			; Compressed Volume File handle
 45119                                  szCVF:
 45120                                  	times	16 db 0		; "X:\\12345678.123\0"
 45121                                  MDBPB:
 45122                                  	;MD_BPB	<>		; Extended MagicDrv BPB
 45123                                  	times	64 db 0
 45124                                  csecPerCluster:
 45125                                  	db 0			; sectors/cluster for ratio calc
 45126                                  fUseHostSize:
 45127                                  	db 0			; NZ if using host cluster size
 45128                                  cFATEntries:
 45129                                  	dw 0			; # FAT entries in buffers
 45130                                  entInBuf:
 45131                                  	dw 0			; 1st entry # in FAT buffers
 45132                                  segFATBuf:
 45133                                  	dw 0			; seg of DOS & MD FAT buffers
 45134                                  pbufDOSFAT:
 45135                                  	dw 0			; off of DOS FAT buffer
 45136                                  pbufMDFAT:
 45137                                  	dw 0			; off of MD FAT buffer
 45138                                  bufDOSFAT:
 45139                                  	;times (cRES_FAT_ENTRIES*2) db 0
 45140                                  	times 64 db 0	 	; small DOS FAT buffer
 45141                                  bufMDFAT:
 45142                                  	;times (cRES_FAT_ENTRIES*4) db 0
 45143                                  	times 128 db 0		; small MD FAT buffer
 45144                                  ;endif
 45145                                  %endif
 45146                                  
 45147                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8DAFh
 45148                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A46Fh
 45149                                  	; 31/07/2024
 45150                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:A0F9h
 45151                                  CHARBUF:
 45152 00009CDC 00<rep 50h>             	times	80 db 0		;line byte character buffer for xenix write
 45153                                  DESTFCB2:
 45154 00009D2C 00                      IDLEN:	db 0
 45155 00009D2D 00<rep 8h>              ID:	times	8  db 0
 45156 00009D35 00<rep 3h>              COM:	times	3  db 0 
 45157 00009D38 00<rep 25h>             DEST:	times	37 db 0
 45158                                  DESTNAME:
 45159 00009D5D 00<rep Bh>              	times	11 db 0
 45160                                  DESTDIR:
 45161                                  DestFcb:
 45162 00009D68 00<rep 43h>             	times DIRSTRLEN db 0 ; 67 ; Directory for PATH searches
 45163                                  GOTOLEN: ; word
 45164                                  BWDBUF:  ; byte
 45165                                  EXEFCB:  ; word
 45166 00009DAB 00<rep 46h>             DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 45167                                  
 45168                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 45169                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 45170                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 45171                                  DIRBUF_FDATE   equ DIRBUF+32  ; word	
 45172                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 45173                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 45174                                  
 45175                                  	; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 45176                                  
 45177                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 45178                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A584h
 45179                                  SDIRBUF:
 45180 00009DF1 00<rep Ch>              	times 12 db 0	
 45181                                  _Bits:
 45182 00009DFD 0000                    	dw 0
 45183                                  PathCnt:
 45184 00009DFF 0000                    	dw 0
 45185                                  PathPos:
 45186 00009E01 0000                    	dw 0
 45187 00009E03 0000                    PathSw:	dw 0
 45188                                  AttrSpecified:
 45189 00009E05 00                      	db 0			; attribute bits u.b. DIR
 45190                                  AttrSelect:
 45191 00009E06 00                      	db 0			; attribute bits u.b. DIR
 45192 00009E07 00                      comma:	db 0			; flag set if +,, occurs
 45193                                  plus_comma:
 45194 00009E08 00                      	db 0			; flag set if +,, occurs
 45195                                  DirFlag:
 45196 00009E09 00                       	db 0			;AN015; set when pathcrunch called from DIR
 45197                                  parse_last:
 45198 00009E0A 0000                    	dw 0			;AN018; used to hold parsing position
 45199                                  system_cpage:
 45200 00009E0C 0000                    	dw 0			;AC001; used for CHCP variable
 45201                                  
 45202                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 45203                                  %if 0
 45204                                  Arg_Buf:
 45205                                  	times 128 db 0	
 45206                                  %endif
 45207                                  
 45208                                  File_Size_Low:
 45209 00009E0E 0000                    	dw 0	
 45210                                  File_Size_High:
 45211 00009E10 0000                    	dw 0		
 45212                                  string_ptr_2:
 45213 00009E12 0000                    	dw 0	
 45214                                  Copy_num:
 45215 00009E14 0000                    	dw 0
 45216                                  cpyflag:
 45217 00009E16 00                      	db 0
 45218                                  Dir_Num:
 45219 00009E17 0000                    	dw 0
 45220                                  
 45221                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 45222                                  %if 0
 45223                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 45224                                  	; MSDOS 6.0
 45225                                  ;ifdef DBLSPACE_HOOKS
 45226                                  Dir_CRatio_1:
 45227                                  	db 0
 45228                                  Dir_CRatio_2:
 45229                                  	db 0
 45230                                  ;endif
 45231                                  %endif
 45232                                  
 45233                                  Bytes_Free:
 45234 00009E19 00000000                	dd 0
 45235                                  
 45236                                  Major_Ver_Num:
 45237 00009E1D 0000                    	dw 0
 45238                                  Minor_Ver_Num:
 45239 00009E1F 0000                    	dw 0
 45240                                  
 45241                                  One_Char_Val:
 45242 00009E21 00                      	db 0
 45243 00009E22 00                      	db 0
 45244                                  vol_drv:
 45245 00009E23 00                      	db 0
 45246                                  ROM_CALL:
 45247 00009E24 00                      	db 0			; flag for rom function
 45248 00009E25 0000                    ROM_IP:	dw 0
 45249 00009E27 0000                    ROM_CS:	dw 0
 45250                                  
 45251                                  DestVars:
 45252                                  DestIsDir:
 45253 00009E29 00                      	db 0
 45254                                  DestSiz:
 45255 00009E2A 00                      	db 0
 45256                                  DestTail:
 45257 00009E2B 0000                    	dw 0
 45258                                  DestInfo:
 45259 00009E2D 00                      	db 0
 45260                                  DestBuf:
 45261 00009E2E 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 45262                                  EndDestBuf:
 45263                                  DESTHAND:
 45264 00009E85 0000                    	dw 0
 45265                                  DESTISDEV:
 45266 00009E87 00                      	db 0
 45267                                  FIRSTDEST:
 45268 00009E88 00                      	db 0
 45269                                  MELCOPY:
 45270 00009E89 00                      	db 0
 45271                                  MELSTART:
 45272 00009E8A 0000                    	dw 0
 45273                                  SrcVars:
 45274                                  SrcIsDir:
 45275 00009E8C 00                      	db 0
 45276 00009E8D 00                      SrcSiz:	db 0
 45277                                  SrcTail:
 45278 00009E8E 0000                    	dw 0
 45279                                  SrcInfo:
 45280 00009E90 00                      	db 0
 45281                                  SrcBuf:
 45282 00009E91 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 45283                                  SRCHAND:
 45284 00009EE8 0000                    	dw 0
 45285                                  SRCISDEV:
 45286 00009EEA 00                      	db 0
 45287                                  ScanBuf:
 45288 00009EEB 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 45289                                  
 45290 00009F42 0000                    SRCPT:	dw 0
 45291                                  INEXACT:
 45292 00009F44 00                      	db 0
 45293                                  NOWRITE:
 45294 00009F45 00                      	db 0
 45295                                  BINARY:
 45296 00009F46 00                      	db 0
 45297                                  WRITTEN:
 45298 00009F47 0000                    	dw 0
 45299                                  TERMREAD:
 45300 00009F49 00                      	db 0
 45301 00009F4A 00                      ASCII:	db 0
 45302 00009F4B 00                      PLUS:	db 0
 45303 00009F4C 00                      objcnt:	db 0			; Used in copy
 45304 00009F4D 0000                    CPDATE:	dw 0
 45305 00009F4F 0000                    CPTIME:	dw 0
 45306                                  
 45307                                  OFilePtr_Lo:
 45308 00009F51 0000                    	dw 0			; original file ptr for COPY when
 45309                                  OFilePtr_Hi:
 45310 00009F53 0000                    	dw 0			; 1st source is also destination
 45311                                  zflag:	; 10/08/2024 - PCDOS 7.1 COMMAND.COM
 45312 00009F55 00                      OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 45313                                  
 45314                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 45315                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0A76Bh
 45316                                  cox_sublist_buff:
 45317 00009F56 00<rep Bh>              	times 11 db 0
 45318                                  cox_y_override:
 45319 00009F61 00                      	db 0
 45320                                  cox_dest_file:
 45321 00009F62 00                      	db 0
 45322                                  cox_src_file:
 45323 00009F63 00                      	db 0
 45324                                  
 45325                                  	; (MSDOS 6.22 COMMAND.COM - TRANGROUP:0A779h)
 45326                                  BATHAND:
 45327 00009F64 0000                    	dw 0			; Batch handle
 45328                                  STARTEL:
 45329 00009F66 0000                    	dw 0
 45330 00009F68 00                      ELCNT:	db 0
 45331 00009F69 00                      ELPOS:	db 0
 45332                                  
 45333                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 45334                                  ; MSDOS 5.0
 45335                                  SKPDEL:
 45336                                  	; 18/06/2023
 45337 00009F6A 00                      	db 0	; MSDOS 6.22 (& MSDOS 5.0)  	
 45338 00009F6B 00<rep Bh>              SOURCE:	times 11 db 0
 45339                                  
 45340                                  ext_entered:
 45341 00009F76 00                      	db 0			;AN005;
 45342                                  
 45343                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:90BCh
 45344                                  
 45345                                  Display_Ioctl:
 45346 00009F77 00                      	db 0			;AN000; info level
 45347 00009F78 00                      	db 0			;AN000; reserved
 45348 00009F79 0E00                    	dw crt_ioctl_ln		;AN000; length of data
 45349 00009F7B 0000                    	dw 0			;AN000; control flags
 45350                                  display_mode:
 45351 00009F7D 00                      	db 0			;AN000; display mode, colors
 45352 00009F7E 00                      	db 0			;AN000; reserved
 45353 00009F7F 0000                    	dw 0			;AN023; colors
 45354 00009F81 0000                    	dw 0			;AN000; display width (PELS)
 45355 00009F83 0000                    	dw 0			;AN000; display length (PELS)
 45356                                  display_width:
 45357 00009F85 0000                    	dw 0			;AN000; display width
 45358                                  LinPerPag:
 45359 00009F87 1900                    	dw LINESPERPAGE	; 25	;AN000; display length (default to linesperpage)
 45360                                  
 45361                                  vol_ioctl_buf:			;AN000; buffer for ioctl volume label/serial call
 45362 00009F89 0000                    	dw 0			;AN000; info level
 45363                                  vol_serial:
 45364 00009F8B 00000000                	dd 0			;AN000; volume serial number
 45365                                  vol_label:
 45366 00009F8F 20<rep Bh>              	times 11 db 20h ; " "	;AN000; volume label - init to blanks
 45367 00009F9A 20<rep 8h>              	times 8  db 20h ; " "	;AN000; file system type
 45368                                  
 45369                                  expand_star:
 45370 00009FA2 00                      	db 0
 45371                                  
 45372                                  msg_flag:
 45373 00009FA3 00                      	db 0			;AN022; flag set if non-utility message issued
 45374                                  Msg_Numb:
 45375 00009FA4 0000                    	dw 0			;AN022; set with extended error message issued
 45376                                  append_exec:
 45377 00009FA6 00                      	db 0			;AN041; set if internal append executed
 45378                                  print_err_flag:
 45379 00009FA7 0000                    	dw 0			;AN000; flag set if error during sysdispmsg
 45380                                  subst_buffer:
 45381 00009FA9 00<rep 16h>             	times parm_block_size*2 db 0 ; times 22 db 0 
 45382                                  				;AN061;
 45383                                  ; 15/04/2023
 45384 00009FBF 00                      KPARSE:	db 0	; 3/3/KK	
 45385                                  
 45386                                  ; Data declarations taken out of parse.asm
 45387                                  
 45388                                  ; MSDOS 6.0
 45389                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 45390                                  ;argbufptr	dw	?		; index for argv[].argpointer
 45391                                  ;tpbuf		db	128 DUP (?)	; temporary buffer
 45392                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 45393                                  ;comptr		dw	?		; ptr into combuf
 45394                                  
 45395                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9105h
 45396                                  
 45397                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 45398                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0A7D5h
 45399                                  ARG:
 45400                                  ARG_ARGV:
 45401                                  ARGV0_ARGPOINTER:
 45402 00009FC0 0000                    	dw 0	; ARGV[0]
 45403                                  ARGV0_ARG_FLAGS:
 45404 00009FC2 00                      	db 0
 45405                                  ARGV0_ARGSTARTEL:
 45406 00009FC3 0000                    	dw 0
 45407                                  ARGV0_ARGLEN:
 45408 00009FC5 0000                    	dw 0
 45409                                  ARGV0_ARGSW_WORD:
 45410 00009FC7 0000                    	dw 0
 45411                                  ARGV0_OCOMPTR:
 45412 00009FC9 0000                    	dw 0
 45413                                  ARGV1_ARGPOINTER:
 45414 00009FCB 0000                    	dw 0	; ARGV[1]	
 45415 00009FCD 00<rep 5h>              	times 5 db 0
 45416                                  ARGV1_ARGSW_WORD:
 45417 00009FD2 0000                    	dw 0
 45418 00009FD4 0000                    	dw 0
 45419                                  ARGV2_ARGPOINTER:
 45420 00009FD6 0000                    	dw 0	; ARGV[2]
 45421 00009FD8 00<rep 5h>              	times 5 db 0
 45422                                  ARGV2_ARGSW_WORD:
 45423 00009FDD 0000                    	dw 0
 45424 00009FDF 0000                    	dw 0
 45425 00009FE1 00<rep 29Fh>            	times 671 db 0  ; ARGV[3] to ARGV[63]
 45426                                  ARG_ARGVCNT:
 45427 0000A280 0000                    	dw 0
 45428                                  ARG_ARGSWINFO:
 45429 0000A282 0000                    	dw 0
 45430                                  ARG_ARGBUF:
 45431                                  	;times 256 dw 0	; times ARGBLEN dw 0 
 45432                                  	; 27/07/2024 PCDOS 7.1 COMMAND.COM
 45433 0000A284 0000<rep 80h>           	times 128 dw 0	; times ARGBLEN dw 0 
 45434                                  ARG_ARGFORCOMBUF:
 45435 0000A384 00<rep 80h>             	times 128 db 0  ; times COMBUFLEN db 0 
 45436                                  
 45437                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9649h
 45438                                  	; 18/06/2023
 45439                                  	; MSDOS 6.22 COMMAND.COM (1994) Transient portion offset 0AD19h
 45440                                  	; 03/08/2024
 45441                                  	; PCDOS 7.1 COMMAND.COM (2003) Transient portion offset 0A823h
 45442                                  ARGBUF_PTR:
 45443 0000A404 0000                    	dw 0			; index for argv[].argpointer
 45444                                  TPBUF:				; temporary buffer
 45445                                  Arg_Buf: ; 03/08/2024 - PCDOS 7.1 COMMAND.COM	
 45446 0000A406 00<rep 80h>             	times 128 db 0
 45447                                  LASTARG:
 45448 0000A486 0000                    	dw 0			; point at which to accumulate switch info
 45449 0000A488 0000                    COMPTR:	dw 0			; ptr into combuf
 45450                                  
 45451                                  ; Data declarations taken out of path.asm
 45452                                  ;fbuf	find_buf	<>		; dma buffer for findfirst/findnext
 45453                                  ;pathinfo	DW	3 DUP (?)	; ES, SI(old), and SI(new) of user path
 45454                                  ;psep_char	DB	?		; '/' or '\'
 45455                                  ;search_best	DB	(?)		; best code, best filename so far
 45456                                  ;fname_max_len	equ	13
 45457                                  ;search_best_buf DB	fname_max_len DUP (?)
 45458                                  ;search_curdir_buf DB	64 DUP (?)	; a place for CurDir info, if successful
 45459                                  ;search_error	DW	(?)		; address of error message to be printed
 45460                                  
 45461                                  FINDBUFLEN equ FIND_BUF.size ; 43
 45462                                  
 45463                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 96CFh
 45464                                  
 45465                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 45466                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AD9Fh
 45467                                  
 45468 0000A48A 00<rep 2Bh>             FBUF:	times FINDBUFLEN db 0	; times 43 db 0
 45469                                  FBUF_PNAME equ FBUF+30		; packed name, 13 bytes
 45470                                  pathinfo:
 45471                                  ;pathinfo_0:
 45472 0000A4B5 0000                    	dw 0
 45473                                  ;pathinfo_2:
 45474 0000A4B7 0000                    	dw 0
 45475                                  ;pathinfo_4:
 45476 0000A4B9 0000                    	dw 0
 45477                                  psep_char:
 45478 0000A4BB 00                      	db 0
 45479                                  search_best:
 45480 0000A4BC 00                      	db 0
 45481                                  FNAME_MAX_LEN equ 13
 45482                                  search_best_buf:
 45483 0000A4BD 00<rep Dh>              	times FNAME_MAX_LEN db 0 ; times 13 db 0
 45484                                  search_curdir_buf:
 45485 0000A4CA 00<rep 40h>             	times 64 db 0
 45486                                  search_error:
 45487 0000A50A 0000                    	dw 0
 45488                                  
 45489                                  ; Data declarations taken out of tbatch.asm
 45490                                  
 45491                                  ;if_not_count	DW	?
 45492                                  ;
 45493                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 45494                                  ;
 45495                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 45496                                  
 45497                                  ; 31/03/2023
 45498                                  ;STACK:	;LABEL	WORD
 45499                                  
 45500                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9751h
 45501                                  
 45502                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 45503                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AE21h
 45504                                  
 45505                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 45506                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AE21
 45507                                  IF_NOT_COUNT:
 45508 0000A50C 0000                    	dw 0
 45509                                  
 45510                                  align 2	; 18/06/2023
 45511                                  
 45512 0000A50E 00<rep 100h>            	times 256 db 0 
 45513                                  
 45514                                  	; 16/04/2023
 45515                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:9854h
 45516                                  
 45517                                  	; 18/06/2023 - Retro DOS v4.2 COMMAND.COM
 45518                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0AF24h
 45519                                  STACK:
 45520                                  
 45521                                  ;INTERNATVARS	internat_block <>
 45522                                  ;	db	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 45523                                  
 45524                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9854h
 45525                                  INTERNATVARS:
 45526                                  		; (24+8 = 32 bytes)
 45527                                  DATE_TIME_FORMAT:
 45528 0000A60E 0000                    	dw 0			; 0-USA, 1-EUR, 2-JAP
 45529                                  CURRENCY_SYM:
 45530 0000A610 0000000000              	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 45531                                  THOUS_SEP:
 45532 0000A615 0000                    	db 0,0			; Thousands separator 2 bytes
 45533                                  DECIMAL_SEP:
 45534 0000A617 0000                    	db 0,0			; Decimal separator 2 bytes
 45535                                  DATE_SEP:
 45536 0000A619 0000                    	db 0,0			; Date separator 2 bytes
 45537                                  TIME_SEP:
 45538 0000A61B 0000                    	db 0,0			; Time separator 2 bytes	
 45539                                  BIT_FIELD:
 45540 0000A61D 00                      	db 0			; Bit values
 45541                                  				;   Bit 0 = 0 if currency symbol first
 45542                                  				;	  = 1 if currency symbol last
 45543                                  				;   Bit 1 = 0 if No space after currency symbol
 45544                                  				;	  = 1 if space after currency symbol
 45545                                  CURRENCY_CENTS:
 45546 0000A61E 00                      	db 0			; Number of places after currency dec point
 45547                                  TIME_24:
 45548 0000A61F 00                      	db 0			; 1 if 24 hour time, 0 if 12 hour time
 45549                                  MAP_CALL:
 45550 0000A620 00000000                	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 45551                                  				; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 45552                                  				;  in pieces.
 45553                                  DATA_SEP:
 45554 0000A624 0000                    	db 0,0			; Data list separator character		
 45555                                  
 45556 0000A626 00<rep 8h>              	times 8 db 0
 45557                                  
 45558                                  ; Max size of the block returned by the INTERNATIONAL call
 45559                                  
 45560                                  INTERNAT_BLOCK_SIZE EQU	32
 45561                                  
 45562                                  ;;	Buffer for DOS function 64h (Get extended country information)
 45563                                  ;;	subfunctions 2, 4, 6, or 7:
 45564                                  ;
 45565                                  ;CountryPtrInfo	label	byte
 45566                                  ;CountryPtrId	db	?
 45567                                  ;CountryPtr	dd	?
 45568                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 45569                                  	
 45570                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9874h
 45571                                  CountryPtrInfo:
 45572                                  CountryPtrId:	
 45573 0000A62E 00                      	db 0
 45574                                  CountryPtr:
 45575 0000A62F 00000000                	dd 0
 45576                                  
 45577                                  OldCtrlCHandler:
 45578 0000A633 00000000                	dd 0			; previous int 23 vector		
 45579                                  
 45580                                  BATLEN equ 32
 45581                                  
 45582                                  BATBUFPOS:
 45583 0000A637 0000                    	dw 0			; integer position in buffer of next byte
 45584                                  
 45585 0000A639 00<rep 20h>             BATBUF:	times BATLEN db 0 ; times 32 db 0
 45586                                  BATBUFEND:
 45587 0000A659 0000                    	dw 0
 45588                                  
 45589                                  ; 03/08/2024 - PCDOS 7.1 COMMAND.COM
 45590                                  %if 0
 45591                                  TypeFilSiz:
 45592                                  	dd 0			; stores size of file to be typed
 45593                                  %endif
 45594                                  
 45595                                  ; *****************************************************
 45596                                  ; EMG 4.00
 45597                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 45598                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 45599                                  ; *****************************************************
 45600                                  ;
 45601                                  ; COMMON PARSE OUTPUT BLOCKS
 45602                                  
 45603                                  ; Common output blocks for PARSE number, complex, or string values.
 45604                                  
 45605                                  PARSE1_OUTPUT:
 45606                                  PARSE1_TYPE:
 45607 0000A65B 00                      	db 0			;AN000;  type
 45608                                  PARSE1_CODE:
 45609 0000A65C 00                      	db 0			;AN000;  return value
 45610                                  PARSE1_SYN:
 45611 0000A65D 0000                    	dw 0			;AN000;  es offset of synonym
 45612                                  PARSE1_ADDR:
 45613 0000A65F 00000000                	dd 0			;AN000;  numeric value / address
 45614                                  				;	 of string value
 45615                                  
 45616                                  ;  Common output block for PARSE date strings.
 45617                                  
 45618                                  DATE_OUTPUT:
 45619                                  DATE_TYPE:
 45620 0000A663 00                      	db 0			;AN000;  type
 45621 0000A664 00                      	db 0			;AN000;  return value
 45622 0000A665 0000                    	dw 0			;AN000;  es offset of synonym
 45623                                  DATE_YEAR:
 45624 0000A667 0000                    	dw 0			;AN000;  year
 45625                                  DATE_MONTH:
 45626 0000A669 00                      	db 0			;AN000;  month
 45627                                  DATE_DAY:
 45628 0000A66A 00                      	db 0			;AN000;  day
 45629                                  
 45630                                  ;  Common output block for PARSE time strings.
 45631                                  
 45632                                  TIME_OUTPUT:
 45633                                  TIME_TYPE:
 45634 0000A66B 00                      	db 0			;AN000;  type
 45635 0000A66C 00                      	db 0			;AN000;  return value
 45636 0000A66D 0000                    	dw 0			;AN000;  es offset of synonym
 45637                                  TIME_HOUR:
 45638 0000A66F 00                      	db 0			;AN000;  hour
 45639                                  TIME_MINUTES:
 45640 0000A670 00                      	db 0			;AN000;  minutes
 45641                                  TIME_SECONDS:
 45642 0000A671 00                      	db 0			;AN000;  seconds
 45643                                  TIME_FRACTION:
 45644 0000A672 00                      	db 0			;AN000;  hundredths
 45645                                  
 45646                                  ;  Common output block for PARSE drive specifier (one based drive number).
 45647                                  
 45648                                  DRIVE_OUTPUT:
 45649                                  DRIVE_TYPE:
 45650 0000A673 00                      	db 0			;AN000;  type
 45651                                  DRIVE_VALUE:
 45652 0000A674 00                      	db 0			;AN000;  return value
 45653 0000A675 0000                    	dw 0			;AN000;  es offset of synonym
 45654                                  DRIVE_NUMBER:
 45655 0000A677 00                      	db 0			;AN000;  drive number
 45656 0000A678 000000                  	db 0,0,0		;AN000;  reserved
 45657                                  
 45658                                  	; 18/04/2023
 45659                                  	; 16/04/2023
 45660                                  ;TRANSPACEEND:	; 98C5h
 45661                                  		; End of MSDOS 5.0 COMMAND.COM (1991) Transient portion
 45662                                  
 45663                                  	; 18/06/2023
 45664                                  ;TRANSPACEEND:	; 0AF95h 
 45665                                  		; End of MSDOS 6.22 COMMAND.COM (1994) Transient portion
 45666                                  
 45667                                  ; ----------------------------------------------------------------------------
 45668                                  ; 18/06/2023
 45669                                  ; 20/04/2023
 45670                                  TRANSPACEEND equ ($-TRANSIENTSTART)	; Transient portion size
