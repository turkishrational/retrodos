     1                                  ; ****************************************************************************
     2                                  ; COMMAND.COM (MSDOS 5.0 Command Interpreter) - RETRO DOS v4.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update:  13/08/2024 (v5.0 - 2024 optimization)
     5                                  ;		15/06/2023 (v5.0) ((Previous: 20/10/2018 COMMAND.COM v3.3))
     6                                  ; ----------------------------------------------------------------------------
     7                                  ; Beginning: 21/04/2018 (COMMAND.COM v2.11) - 11/09/2018 (COMMAND.COM v3.30)
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15 (2.11)
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	    ((nasm command5.s -l command5.lst -o COMMAND.COM)) 	
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Derived from 'COMMAND.ASM' file of MSDOS 2.11 (IBM PCDOS v2.11) source code
    14                                  ; by Microsoft, 18/08/1983
    15                                  ; ****************************************************************************
    16                                  ; Modified from 'COMMAND3.S' (MSDOS 3.3 COMMAND.COM) source code
    17                                  ; in NASM syntax (by Erdogan Tan), 20/10/2018
    18                                  ; ----------------------------------------------------------------------------
    19                                  ;; 11/09/2018 - Erdogan Tan
    20                                  ; (Note: I haven't got MSDOS 3.3 COMMAND.COM src files; so, I need to continue
    21                                  ; by using disassembled COMMAND.COM -v3.30- and MSDOS 6.0 OS source files.)
    22                                  ; ----------------------------------------------------------------------------
    23                                  ; MSDOS 6.0 source files:
    24                                  ;;============================================================================
    25                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    26                                  ; (MSDOS 3.30 COMMAND.COM) output in TASM syntax (11/09/2018..29/09/2018)
    27                                  ;;============================================================================
    28                                  ;
    29                                  ; COMMAND.COM v6.0 source files:
    30                                  ;      command1.asm, command2.asm, rucode.asm, stub.asm, rdata.asm, init.asm,
    31                                  ;      iparse.asm, uinit.asm, tcode.asm, tbatch.asm, tbatch2.asm, tfor.asm,
    32                                  ;      dir.asm, cratio.asm, tcmd1b.asm, tcmd2a.asm, tcmd2b.asm, tenv.asm,
    33                                  ;      tenv2.asm, tmisc1.asm, tmisc2.asm, tpipe.asm, parse2.asm, path1.asm,
    34                                  ;      path2.asm, tucode.asm, copy.asm, copypr1.asm, copypr2.asm, cparse.asm,
    35                                  ;      tparse.asm, tprintf.asm, loadhi.asm, tdata.asm, tspc.asm
    36                                  ;
    37                                  ; COMMAND.COM v2.11 source files:
    38                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    39                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    40                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    41                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    42                                  ;
    43                                  ; ----------------------------------------------------------------------------
    44                                  ; 09/01/2023 - COMMAND.COM v5.0 (Multi Section Binary File Format)
    45                                  
    46                                  ;============================================================================
    47                                  ; SYSCALL.INC, MSDOS 6.0, 1991
    48                                  ;============================================================================
    49                                  ; 21/09/2018 - Retro DOS v3.0
    50                                  
    51                                  ;	SCCSID = @(#)syscall.asm	1.1 85/04/10
    52                                  ;BREAK <system call definitions>
    53                                  
    54                                  ;
    55                                  ;	Microsoft Confidential
    56                                  ;	Copyright (C) Microsoft Corporation 1991
    57                                  ;	All Rights Reserved.
    58                                  ;
    59                                  
    60                                  ;SUBTTL	system call definitions
    61                                  ;PAGE
    62                                  
    63                                  Abort				EQU 0	;  0	  0
    64                                  STD_CON_INPUT			EQU 1	;  1	  1
    65                                  Std_Con_Output			EQU 2	;  2	  2
    66                                  Std_Aux_Input			EQU 3	;  3	  3
    67                                  Std_Aux_Output			EQU 4	;  4	  4
    68                                  Std_Printer_Output		EQU 5	;  5	  5
    69                                  Raw_Con_IO			EQU 6	;  6	  6
    70                                  RAW_CON_INPUT			EQU 7	;  7	  7
    71                                  Std_Con_Input_No_Echo		EQU 8	;  8	  8
    72                                  STD_CON_STRING_OUTPUT		EQU 9	;  9	  9
    73                                  Std_Con_String_Input		EQU 10	; 10	  A
    74                                  Std_Con_Input_Status		EQU 11	; 11	  B
    75                                  STD_CON_INPUT_FLUSH		EQU 12	; 12	  C
    76                                  DISK_RESET			EQU 13	; 13	  D
    77                                  Set_Default_Drive		EQU 14	; 14	  E
    78                                  FCB_Open			EQU 15	; 15	  F
    79                                  FCB_Close			EQU 16	; 16	 10
    80                                  Dir_Search_First		EQU 17	; 17	 11
    81                                  Dir_Search_Next 		EQU 18	; 18	 12
    82                                  FCB_Delete			EQU 19	; 19	 13
    83                                  FCB_Seq_Read			EQU 20	; 20	 14
    84                                  FCB_Seq_Write			EQU 21	; 21	 15
    85                                  FCB_Create			EQU 22	; 22	 16
    86                                  FCB_Rename			EQU 23	; 23	 17
    87                                  GET_DEFAULT_DRIVE		EQU 25	; 25	 19
    88                                  Set_DMA 			EQU 26	; 26	 1A
    89                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
    90                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
    91                                  ;									   ;
    92                                  Get_Default_DPB 		EQU 31	; 31	 1F
    93                                  ;									   ;
    94                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
    95                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
    96                                  FCB_Random_Read 		EQU 33	; 33	 21
    97                                  FCB_Random_Write		EQU 34	; 34	 22
    98                                  Get_FCB_File_Length		EQU 35	; 35	 23
    99                                  Get_FCB_Position		EQU 36	; 36	 24
   100                                  SET_INTERRUPT_VECTOR		EQU 37	; 37	 25
   101                                  Create_Process_Data_Block	EQU 38	; 38	 26
   102                                  FCB_Random_Read_Block		EQU 39	; 39	 27
   103                                  FCB_Random_Write_Block		EQU 40	; 40	 28
   104                                  Parse_File_Descriptor		EQU 41	; 41	 29
   105                                  Get_Date			EQU 42	; 42	 2A
   106                                  Set_Date			EQU 43	; 43	 2B
   107                                  Get_Time			EQU 44	; 44	 2C
   108                                  Set_Time			EQU 45	; 45	 2D
   109                                  SET_VERIFY_ON_WRITE		EQU 46	; 46	 2E
   110                                  ; Extended functionality group
   111                                  Get_DMA 			EQU 47	; 47	 2F
   112                                  GET_VERSION			EQU 48	; 48	 30
   113                                  Keep_Process			EQU 49	; 49	 31
   114                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   115                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   116                                  ;									   ;
   117                                  Get_DPB 			EQU 50	; 50	 32
   118                                  ;									   ;
   119                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   120                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   121                                  Set_CTRL_C_Trapping		EQU 51	; 51	 33
   122                                  Get_InDOS_Flag			EQU 52	; 52	 34
   123                                  Get_Interrupt_Vector		EQU 53	; 53	 35
   124                                  Get_Drive_Freespace		EQU 54	; 54	 36
   125                                  CHAR_OPER			EQU 55	; 55	 37
   126                                  International			EQU 56	; 56	 38
   127                                  ;   Directory Group
   128                                  MKDir				EQU 57	; 57	 39
   129                                  RMDir				EQU 58	; 58	 3A
   130                                  CHDir				EQU 59	; 59	 3B
   131                                  ;   File Group
   132                                  Creat				EQU 60	; 60	 3C
   133                                  OPEN				EQU 61	; 61	 3D
   134                                  CLOSE				EQU 62	; 62	 3E
   135                                  READ				EQU 63	; 63	 3F
   136                                  Write				EQU 64	; 64	 40
   137                                  Unlink				EQU 65	; 65	 41
   138                                  LSEEK				EQU 66	; 66	 42
   139                                  CHMod				EQU 67	; 67	 43
   140                                  IOCTL				EQU 68	; 68	 44
   141                                  XDUP				EQU 69	; 69	 45
   142                                  XDup2				EQU 70	; 70	 46
   143                                  Current_Dir			EQU 71	; 71	 47
   144                                  ;    Memory Group
   145                                  ALLOC				EQU 72	; 72	 48
   146                                  DEALLOC				EQU 73	; 73	 49
   147                                  SETBLOCK			EQU 74	; 74	 4A
   148                                  ;    Process Group
   149                                  Exec				EQU 75	; 75	 4B
   150                                  EXIT				EQU 76	; 76	 4C
   151                                  WAITPROCESS			EQU 77	; 77	 4D
   152                                  Find_First			EQU 78	; 78	 4E
   153                                  ;   Special Group
   154                                  Find_Next			EQU 79	; 79	 4F
   155                                  ; SPECIAL SYSTEM GROUP
   156                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   157                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   158                                  ;									   ;
   159                                  SET_CURRENT_PDB 		EQU 80	; 80	 50
   160                                  GET_CURRENT_PDB 		EQU 81	; 81	 51
   161                                  Get_In_Vars			EQU 82	; 82	 52
   162                                  SetDPB				EQU 83	; 83	 53
   163                                  ;									   ;
   164                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   165                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   166                                  Get_Verify_On_Write		EQU 84	; 84	 54
   167                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   168                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   169                                  ;									   ;
   170                                  Dup_PDB 			EQU 85	; 85	 55
   171                                  ;									   ;
   172                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   173                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   174                                  Rename				EQU 86	; 86	 56
   175                                  File_Times			EQU 87	; 87	 57
   176                                  AllocOper			EQU 88	; 88	 58
   177                                  ; Network extention system calls
   178                                  GetExtendedError		EQU 89	; 89	 59
   179                                  CreateTempFile			EQU 90	; 90	 5A
   180                                  CreateNewFile			EQU 91	; 91	 5B
   181                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
   182                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   183                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   184                                  ;									   ;
   185                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
   186                                  					;	    CloseByName, CloseUser,
   187                                  					;	    CloseUserProcess,
   188                                  					;	    GetOpenFileList
   189                                  ;									   ;
   190                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   191                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   192                                  UserOper			EQU 94	; 94	 5E Get and Set
   193                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
   194                                  xNameTrans			EQU 96	; 96	 60
   195                                  PathParse			EQU 97	; 97	 61
   196                                  GetCurrentPSP			EQU 98	; 98	 62
   197                                  Hongeul 			EQU 99	; 99	 63
   198                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
   199                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   200                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   201                                  ;									   ;
   202                                  Set_Printer_Flag		EQU 100 ; 100	 64
   203                                  ;									   ;
   204                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   205                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   206                                  GetExtCntry			EQU 101 ; 101	 65
   207                                  GetSetCdPg			EQU 102 ; 102	 66
   208                                  ExtHandle			EQU 103 ; 103	 67
   209                                  Commit				EQU 104 ; 104	 68
   210                                  GetSetMediaID			EQU 105 ; 105	 69
   211                                  IFS_IOCTL			EQU 107 ; 107	 6B
   212                                  ExtOpen 			EQU 108 ; 108	 6C
   213                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   214                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   215                                  ;                                                                          ;
   216                                  ;ifdef ROMEXEC
   217                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
   218                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
   219                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
   220                                  ;endif
   221                                  ;                                                                          ;
   222                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   223                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   224                                  ;
   225                                  ;
   226                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
   227                                  OEM_C1				EQU 249 ; 249	 F9
   228                                  OEM_C2				EQU 250 ; 250	 FA
   229                                  OEM_C3				EQU 251 ; 251	 FB
   230                                  OEM_C4				EQU 252 ; 252	 FC
   231                                  OEM_C5				EQU 253 ; 253	 FD
   232                                  OEM_C6				EQU 254 ; 254	 FE
   233                                  OEM_C7				EQU 255 ; 255	 FF
   234                                  
   235                                  ;============================================================================
   236                                  ; DOSSYM.INC, MSDOS 6.0, 1991
   237                                  ;============================================================================
   238                                  ; 21/09/2018 - Retro DOS v3.0
   239                                  
   240                                  ;BREAK <Control character definitions>
   241                                  
   242                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   243                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   244                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   245                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   246                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   247                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   248                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   249                                  c_HT	    EQU     09h 	; ^I ASCII tab
   250                                  
   251                                  ;============================================================================
   252                                  ; DIRENT.INC, MSDOS 6.0, 1991
   253                                  ;============================================================================
   254                                  ; 21/09/2018 - Retro DOS v3.0
   255                                  
   256                                  ;Break <Directory entry>
   257                                  
   258                                  ;	NOTE:  These offsets are also used in the DTA for
   259                                  ;	extended FCB SearchFirst/Next. DIR_NAME lines up
   260                                  ;	with the FCB filename field, and the rest of the
   261                                  ;	DIR_ENTRY fields follow. -DavidOls
   262                                  
   263                                  ;**	DIRENT.INC - FAT Directory Entry Definition
   264                                  ;
   265                                  ;	+---------------------------+
   266                                  ;	|  (12 BYTE) filename/ext   |	    0	    0
   267                                  ;	+---------------------------+
   268                                  ;	|     (BYTE) attributes     |	    11	    B
   269                                  ;	+---------------------------+
   270                                  ;	|    (10 BYTE) reserved     |	    12	    C
   271                                  ;	+---------------------------+
   272                                  ;	| (WORD) time of last write |	    22	    16
   273                                  ;	+---------------------------+
   274                                  ;	| (WORD) date of last write |	    24	    18
   275                                  ;	+---------------------------+
   276                                  ;	|   (WORD) First cluster    |	    26	    1A
   277                                  ;	+---------------------------+
   278                                  ;	|     (DWORD) file size     |	    28	    1C
   279                                  ;	+---------------------------+
   280                                  ;
   281                                  ;   First byte of filename  = E5 -> free directory entry
   282                                  ;			    = 00 -> end of allocated directory
   283                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   284                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   285                                  ;
   286                                  
   287                                  STRUC DIR_ENTRY
   288 00000000 <res Bh>                .DIR_NAME:	RESB  11	; file name
   289 0000000B ??                      .DIR_ATTR:	RESB  1		; attribute bits
   290 0000000C ????                    .DIR_CODEPG:	RESW  1		; code page DOS 4.00
   291 0000000E ????                    .DIR_EXTCLUSTER: RESW 1		; extended attribute starting cluster
   292 00000010 ??                      .DIR_ATTR2:	RESB  1		; reserved
   293 00000011 ??????????              .DIR_PAD:	RESB  5		; reserved for expansion
   294 00000016 ????                    .DIR_TIME:	RESW  1		; time of last write
   295 00000018 ????                    .DIR_DATE:	RESW  1		; date of last write
   296 0000001A ????                    .DIR_FIRST:	RESW  1		; first allocation unit of file
   297 0000001C ????                    .DIR_SIZE_L:	RESW  1		; low 16 bits of file size
   298 0000001E ????                    .DIR_SIZE_H:	RESW  1		; high 16 bits of file size
   299                                  .size:
   300                                  
   301                                  ;	    Caution: An extended FCB SearchFirst/Next on a network
   302                                  ;	    drive under Novell Netware 286 or 386 returns the time/date
   303                                  ;	    in the SIZE fields for subdirectory files. Ordinarily,
   304                                  ;	    this field is zero for subdirectory files.
   305                                  
   306                                  ENDSTRUC
   307                                  
   308                                  ATTR_READ_ONLY	equ	 1h
   309                                  ATTR_HIDDEN	equ	 2h
   310                                  ATTR_SYSTEM	equ	 4h
   311                                  ATTR_VOLUME_ID	equ	 8h
   312                                  ATTR_DIRECTORY	equ	10h
   313                                  ATTR_ARCHIVE	equ	20h
   314                                  ATTR_DEVICE	equ	40h	; This is a VERY special bit.
   315                                  				;   NO directory entry on a disk EVER
   316                                  				;   has this bit set. It is set non-zero
   317                                  				;   when a device is found by GETPATH
   318                                  
   319                                  ATTR_ALL	equ	ATTR_HIDDEN+ATTR_SYSTEM+ATTR_DIRECTORY
   320                                  				; OR of hard attributes for FINDENTRY
   321                                  
   322                                  ATTR_IGNORE	equ	ATTR_READ_ONLY+ATTR_ARCHIVE+ATTR_DEVICE
   323                                  				; ignore this(ese) attribute(s) during
   324                                  				; search first/next
   325                                  
   326                                  ATTR_CHANGEABLE equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_SYSTEM+ATTR_ARCHIVE
   327                                  				; changeable via CHMOD
   328                                  
   329                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   330                                  
   331                                  ;============================================================================
   332                                  ; ERROR.INC, MSDOS 6.0, 1991
   333                                  ;============================================================================
   334                                  ; 21/09/2018 - Retro DOS v3.0
   335                                  
   336                                  ;**	ERROR.INC - DOS Error Codes
   337                                  ;
   338                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
   339                                  ;    return error codes through AX.	If an error occurred then
   340                                  ;    the carry bit will be set and the error code is in AX.	If no error
   341                                  ;    occurred then the carry bit is reset and AX contains returned info.
   342                                  ;
   343                                  ;    Since the set of error codes is being extended as we extend the operating
   344                                  ;    system, we have provided a means for applications to ask the system for a
   345                                  ;    recommended course of action when they receive an error.
   346                                  ;
   347                                  ;    The GetExtendedError system call returns a universal error, an error
   348                                  ;    location and a recommended course of action.	The universal error code is
   349                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
   350                                  ;    is issued.
   351                                  
   352                                  
   353                                  ;	2.0 error codes
   354                                  
   355                                  error_invalid_function		EQU	1
   356                                  ERROR_FILE_NOT_FOUND		EQU	2
   357                                  ERROR_PATH_NOT_FOUND		EQU	3
   358                                  ERROR_TOO_MANY_OPEN_FILES	EQU	4
   359                                  ERROR_ACCESS_DENIED		EQU	5
   360                                  error_invalid_handle		EQU	6
   361                                  error_arena_trashed		EQU	7
   362                                  ERROR_NOT_ENOUGH_MEMORY 	EQU	8
   363                                  error_invalid_block		EQU	9
   364                                  error_bad_environment		EQU	10
   365                                  ERROR_BAD_FORMAT		EQU	11
   366                                  error_invalid_access		EQU	12
   367                                  ERROR_INVALID_DATA		EQU	13
   368                                  ;**** reserved			EQU	14	; *****
   369                                  error_invalid_drive		EQU	15
   370                                  error_current_directory 	EQU	16
   371                                  error_not_same_device		EQU	17
   372                                  ERROR_NO_MORE_FILES		EQU	18
   373                                  
   374                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
   375                                  
   376                                  ERROR_WRITE_PROTECT		EQU	19
   377                                  error_bad_unit			EQU	20
   378                                  error_not_ready 		EQU	21
   379                                  error_bad_command		EQU	22
   380                                  error_CRC			EQU	23
   381                                  error_bad_length		EQU	24
   382                                  error_Seek			EQU	25
   383                                  error_not_DOS_disk		EQU	26
   384                                  error_sector_not_found		EQU	27
   385                                  error_out_of_paper		EQU	28
   386                                  error_write_fault		EQU	29
   387                                  error_read_fault		EQU	30
   388                                  ERROR_GEN_FAILURE		EQU	31
   389                                  
   390                                  ;	the new 3.0 error codes reported through INT 24
   391                                  
   392                                  error_sharing_violation 	EQU	32
   393                                  error_lock_violation		EQU	33
   394                                  error_wrong_disk		EQU	34
   395                                  ERROR_FCB_UNAVAILABLE		EQU	35
   396                                  ERROR_SHARING_BUFFER_EXCEEDED	EQU	36
   397                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00	;AN000;
   398                                  error_handle_EOF		EQU	38    ; DOS 4.00	;AN000;
   399                                  ERROR_HANDLE_DISK_FULL		EQU	39    ; DOS 4.00	;AN000;
   400                                  
   401                                  ;	New OEM network-related errors are 50-79
   402                                  
   403                                  error_not_supported		EQU	50
   404                                  
   405                                  error_net_access_denied		EQU	65	;M028
   406                                  
   407                                  ;	End of INT 24 reportable errors
   408                                  
   409                                  error_file_exists		EQU	80
   410                                  error_DUP_FCB			EQU	81	; *****
   411                                  error_cannot_make		EQU	82
   412                                  error_FAIL_I24			EQU	83
   413                                  
   414                                  ;	New 3.0 network related error codes
   415                                  
   416                                  error_out_of_structures 	EQU	84
   417                                  error_Already_assigned		EQU	85
   418                                  error_invalid_password		EQU	86
   419                                  error_invalid_parameter 	EQU	87
   420                                  error_NET_write_fault		EQU	88
   421                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00	;AN000;
   422                                  
   423                                  ;============================================================================
   424                                  ; DEVSYM.INC, MSDOS 6.0, 1991
   425                                  ;============================================================================
   426                                  ; 22/09/2018 - Retro DOS v3.0
   427                                  
   428                                  ;**	DevSym.inc - Device Symbols
   429                                  
   430                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   431                                  
   432                                  STRUC SYSDEV
   433 00000000 ????????                .NEXT:	RESD 1			;POINTER TO NEXT DEVICE HEADER
   434 00000004 ????                    .ATT:	RESW 1			;ATTRIBUTES OF THE DEVICE
   435 00000006 ????                    .STRAT:	RESW 1			;STRATEGY ENTRY POINT
   436 00000008 ????                    .INT:	RESW 1			;INTERRUPT ENTRY POINT
   437 0000000A ????????????????        .NAME:	RESB 8			;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   438                                  .size:
   439                                  ENDSTRUC
   440                                  
   441                                  ; 24/09/2018
   442                                  DEVTYP	EQU   8000H	; BIT 15 - 1  IF CHAR, 0 IF BLOCK
   443                                  
   444                                  ;============================================================================
   445                                  ; CURDIR.INC, MSDOS 6.0, 1991
   446                                  ;============================================================================
   447                                  ; 21/09/2018 - Retro DOS v3.0
   448                                  
   449                                  DIRSTRLEN	EQU	64+3	; Max length in bytes of directory strings
   450                                  
   451                                  ;============================================================================
   452                                  ; COMEQU.ASM, MSDOS 6.0, 1991
   453                                  ;============================================================================
   454                                  ; 21/09/2018 - Retro DOS v3.0
   455                                  
   456                                  ;/*
   457                                  ; *                      Microsoft Confidential
   458                                  ; *                      Copyright (C) Microsoft Corporation 1991
   459                                  ; *                      All Rights Reserved.
   460                                  ; */
   461                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   462                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   463                                  ;*************************************
   464                                  ; COMMAND EQUs which are not switch dependant
   465                                  
   466                                  ;		include	curdir.inc	; to get DIRSTRLEN
   467                                  ;		Note dossym.inc must already have been included!
   468                                  
   469                                  GET_COMMAND_STATE	equ	5500h	; check for existing COMMAND
   470                                  GET_ROMCOMMAND_STATE	equ	5501h	; check for existing ROM COMMAND
   471                                  
   472                                  SYM		EQU	">"
   473                                  
   474                                  LINESPERPAGE	EQU	25		;AC000; default lines per page
   475                                  
   476                                  NORMPERLIN	EQU	1
   477                                  WIDEPERLIN	EQU	5
   478                                  COMBUFLEN	EQU	128		; Length of commmand buffer
   479                                  BatLen		EQU	32		; buffer for batch files
   480                                  YES_ECHO	EQU	1		; echo line
   481                                  NO_ECHO 	EQU	0		; don't echo line
   482                                  No_Echo_Char	EQU	"@"             ; don't echo line if this is first char
   483                                  call_in_progress EQU	1		; indicate we're in the CALL command
   484                                  length_call	EQU	4		; length of CALL
   485                                  max_nest	EQU    10		; max # levels of batch nesting allowed
   486                                  FAIL_ALLOWED	EQU    00001000b	; critical error
   487                                  RETRY_ALLOWED	EQU    00010000b	; critical error
   488                                  IGNORE_ALLOWED	EQU    00100000b	; critical error
   489                                  nullcommand	EQU     1		; no command on command line
   490                                  END_OF_LINE	EQU    -1		;AN000; end of line return from parser
   491                                  END_OF_LINE_OUT EQU	0		;AN000; end of line for output
   492                                  END_OF_LINE_IN	EQU	0Dh		;AN000; end of line for input
   493                                  result_number	EQU	1		;AN000; number returned from parser
   494                                  result_string	EQU	3		;AN000; string returned from parser
   495                                  RESULT_FILESPEC EQU	5		;AN000; filespec returned from parser
   496                                  result_drive	EQU	6		;AN000; drive returned from parser
   497                                  result_date	EQU	7		;AN000; date returned from parser
   498                                  result_time	EQU	8		;AN000; time returned from parser
   499                                  RESULT_NO_ERROR EQU	0		;AN000; no error returned from parser
   500                                  no_cont_flag	EQU	0		;AN000; no control flags for message
   501                                  util_msg_class	EQU	-1		;AN000; message class for utility
   502                                  ext_msg_class	EQU	1		;AN000; message class for extended error
   503                                  parse_msg_class EQU	2		;AN000; message class for parse error
   504                                  crit_msg_class	EQU	3		;AN000; message class for critical error
   505                                  ext_crlf_class	EQU	081h		;AN054; message class for extended error with no CRLF
   506                                  colon_char	EQU	":"             ;AN000; colon character
   507                                  crt_ioctl_ln	EQU	14		;AN000; default length of data for display ioctl
   508                                  text_mode	EQU	1		;AN000; text mode return from ioctl
   509                                  get_generic	EQU	07Fh		;AN000; generic ioctl - get device info
   510                                  set_crit_dev	EQU	0100H		;AN000; device attribute for critical error on I/0
   511                                  mult_ansi	EQU	01Ah		;AC064; multiplex for ansi.sys
   512                                  mult_shell_get	EQU	01902h		;AC065; multiplex for Shell - get next command
   513                                  mult_shell_brk	EQU	01903h		;AN000; multiplex for Shell - ^C batch check
   514                                  shell_action	equ	0FFh		;AN000; SHELL - return for taking SHELL specific action
   515                                  bat_not_open	EQU	-1		;AN000; batch handle will be set to this if not open
   516                                  bat_open_handle EQU	19		;AN000; handle will be in this position in JFN table
   517                                  Ptr_seg_pos	equ	7		;AN000; Offset from start of message block for subst segment
   518                                  Ptr_off_pos	equ	5		;AN000; Offset from start of message block for subst offset
   519                                  %define Parm_off_pos	word [2]	;AN000; Offset from start of subst list for subst offset
   520                                  parm_block_size equ	11		;AN000; size of message subst block
   521                                  blank		equ	" "             ;AN000; blank character
   522                                  no_subst	equ	0		;AN000; no substitutions for messages
   523                                  one_subst	equ	1		;AN000; one substitution for messages
   524                                  no_handle_out	equ	-1		;AN000; use function 1 thru 12 for message retriever
   525                                  res_subst	equ	2		;AN000; offset from start of message definition to number of subst
   526                                  read_open_mode	equ   0000000000000000b ;AN024; extended open mode for read
   527                                  deny_write	equ   0000000000100000b	; deny write sharing mode ;M031
   528                                  deny_none	equ   0000000001000000b	; deny none sharing mode ;Myyy	
   529                                  read_open_flag	equ   0000000100000001b ;AN000; extended open flags for read
   530                                  write_open_mode equ   0000000000000001b ;AN024; extended open mode for read
   531                                  write_open_flag equ   0000000100000001b ;AN000; extended open flags for read
   532                                  creat_open_flag equ   0000000100010010b ;AN000; extended open flags for read
   533                                  capital_A	equ	'A'             ;AC000;
   534                                  vbar		equ	'|'             ;AC000;
   535                                  labracket	equ	'<'             ;AC000;
   536                                  rabracket	equ	'>'             ;AC000;
   537                                  dollar		equ	'$'             ;AC000;
   538                                  lparen		equ	'('             ;AC000;
   539                                  rparen		equ	')'             ;AC000;
   540                                  nullrparen	equ	29h		;AC000;
   541                                  in_word 	equ	4E49h		;AC000; 'NI'  ('IN' backwards)
   542                                  do_word 	equ	4F44h		;AC000; 'OD'  ('DO' backwards)
   543                                  star		equ	'*'             ;AC000;
   544                                  plus_chr	equ	'+'             ;AC000;
   545                                  small_a 	equ	'a'             ;AC000;
   546                                  small_z 	equ	'z'             ;AC000;
   547                                  dot_chr 	equ	'.'             ;AC000;
   548                                  tab_chr 	equ	9		;AN032;
   549                                  equal_chr	equ	'='             ;AN032;
   550                                  semicolon	equ	';'             ;AN049;
   551                                  dot_qmark	equ	2e3fh		;AC000; '.?'
   552                                  dot_colon	equ	2e3ah		;AC000; '.:'
   553                                  capital_n	equ	0		;AC000; result from Y/N call if N entered
   554                                  capital_y	equ	1		;AC000; result from Y/N call if Y entered
   555                                  AppendInstall	equ	0B700H		;AN020; append install check
   556                                  AppendDOS	equ	0B702H		;AN020; append DOS version check
   557                                  AppendGetState	equ	0B706H		;AN020; append get current state
   558                                  AppendSetState	equ	0B707H		;AN020; append set current state
   559                                  AppendTruename	equ	0B711H		;AN042; Get file's real location for Batch
   560                                  search_attr	equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_DIRECTORY  ;AC042;
   561                                  
   562                                  ;*************************************
   563                                  ;* PARSE ERROR MESSAGES
   564                                  ;*************************************
   565                                  
   566                                  MoreArgs_Ptr	equ	1		;AN000;"Too many parameters" message number
   567                                  LessArgs_Ptr	equ	2		;AN000;"Required parameter missing" message number
   568                                  BadSwt_Ptr	equ	3		;AN000;"Invalid switch" message number
   569                                  BadParm_Ptr	equ	10		;AN000;"Invalid parameter" message number
   570                                  
   571                                  ;*************************************
   572                                  ;* EQUATES FOR MESSAGE RETRIEVER
   573                                  ;*************************************
   574                                  
   575                                  GET_EXTENDED_MSG	EQU	0	;AN000;  get extended message address
   576                                  SET_EXTENDED_MSG	EQU	1	;AN000;  set extended message address
   577                                  GET_PARSE_MSG		EQU	2	;AN000;  get parse message address
   578                                  SET_PARSE_MSG		EQU	3	;AN000;  set parse message address
   579                                  GET_CRITICAL_MSG	EQU	4	;AN000;  get critical message address
   580                                  SET_CRITICAL_MSG	EQU	5	;AN000;  set critical message address
   581                                  MESSAGE_2F		EQU	46	;AN000;  minor code for message retriever
   582                                  
   583                                  ;*********************************
   584                                  ;* EQUATES FOR INT 10H
   585                                  ;*********************************
   586                                  
   587                                  VIDEO_IO_INT		EQU	10H	;AN000;  equate for int 10h
   588                                  SET_VIDEO_MODE		EQU	0	;AN000;  set video mode
   589                                  SET_CURSOR_POSITION	EQU	2	;AN000;  set new cursor position
   590                                  SCROLL_VIDEO_PAGE	EQU	6	;AN000;  scroll active page up
   591                                  VIDEO_ATTRIBUTE 	EQU	7	;AN000;  attribute to be used on blank line
   592                                  SET_COLOR_PALETTE	EQU	11	;AN000;  set color for video
   593                                  GET_VIDEO_STATE 	EQU	15	;AN000;  get current video state
   594                                  VIDEO_ALPHA		EQU	3	;AN000;  alpha video is 3 or below
   595                                  VIDEO_BW		EQU	7	;AN000;  mode for 80X25 black & white
   596                                  
   597                                  AltPipeChr	equ	"|"             ; alternate pipe character
   598                                  
   599                                  FCB		equ	5Ch
   600                                  
   601                                  STRUC VARSTRUC
   602 00000000 ??                      .ISDIR:		RESB	1
   603 00000001 ??                      .SIZ:		RESB	1
   604 00000002 ????                    .TTAIL:		RESW	1
   605 00000004 ??                      .INFO:		RESB	1
   606 00000005 <res 57h>               .BUF:		RESB	DIRSTRLEN + 20
   607                                  .size:
   608                                  ENDSTRUC
   609                                  ;
   610                                  ; Flags for internal command parsing
   611                                  ;
   612                                  fCheckDrive	equ	00000001b	; validate drive letter
   613                                  fSwitchAllowed	equ	00000010b	; switches allowed
   614                                  fLimitHelp	equ	00000100b	; /? must appear alone
   615                                  
   616                                  ;
   617                                  ; Test switches
   618                                  ;
   619                                  fParse		EQU	0001h		; display results of parseline
   620                                  
   621                                  ;
   622                                  ; Batch segment structure
   623                                  ;
   624                                  ;   BYTE    type of segment
   625                                  ;   BYTE    echo state of parent on entry to batch file
   626                                  ;   WORD    segment of last batch file
   627                                  ;   WORD    segment for FOR command
   628                                  ;   BYTE    FOR flag state on entry to batch file
   629                                  ;   DWORD   offset for next line
   630                                  ;   10 WORD pointers to parameters. -1 is empty parameter
   631                                  ;   ASCIZ   file name (with . and ..)
   632                                  ;   BYTES   CR-terminated parameters
   633                                  ;   BYTE    0 flag to indicate end of parameters
   634                                  ;
   635                                  
   636                                  BATCHTYPE   equ 0
   637                                  
   638                                  STRUC BATCHSEGMENT
   639 00000000 ??                      .BatType:	RESB	1		; signature
   640 00000001 ??                      .BatEchoFlag:	RESB	1		; G state of echo
   641                                  ; MSDOS 5.0 (& 6.0) - 11/01/2023
   642 00000002 ??                      .BatchEOF:	RESB	1		; records if EOF reached on file
   643 00000003 ????                    .BatLast: 	RESW	1		; G segment of last batch file
   644 00000005 ????                    .BatForPtr:	RESW	1		; G segment for FOR command
   645 00000007 ??                      .BatForFlag:	RESB	1		; G state of FOR
   646 00000008 ????????                .BatSeek:	RESD	1		; lseek position of next char
   647 0000000C <res 14h>               .BatParm:	RESW	10		; pointers to parameters
   648 00000020 ??                      .BatFile:	RESB	1		; beginning of batch file name
   649                                  .SIZE:
   650                                  ENDSTRUC
   651                                  
   652                                  ANULL		equ	0		; terminates an argv string
   653                                  ARGMAX		equ	64		; max args on a command line
   654                                  ;ARGBLEN 	equ	2*128		; 1char each plus term NUL
   655                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM ;*
   656                                  ARGBLEN 	equ	2*64
   657                                  tplen		equ	64		; max size of one argument
   658                                  arg_cnt_error	equ	1		; number of args > MAXARG
   659                                  arg_buf_ovflow	equ	2		; overflowed argbuffer
   660                                  
   661                                  STRUC ARGV_ELE				; elements in the argv array
   662 00000000 ????                    .argpointer:	RESW	1		; pointer to the argstring
   663 00000002 ??                      .argflags:	RESB	1		; cparse flags for this argstring
   664 00000003 ????                    .argstartel:	RESW	1		; the result of cparse's [STARTEL]
   665 00000005 ????                    .arglen:	RESW	1		; cparse's char count + one (for null)
   666 00000007 ????                    .argsw_word:	RESW	1		; any switches after this? what kinds?
   667 00000009 ????                    .arg_ocomptr:	RESW	1		; pointer into original command string
   668                                  .SIZE:	; 11 ; 27/07/2024
   669                                  ENDSTRUC
   670                                  
   671                                  STRUC ARG_UNIT
   672 00000000 <res 2C0h>              .argv:		RESB	ARGMAX * ARGV_ELE.SIZE
   673 000002C0 ????                    .argvcnt:	RESW	1		; number of arguments
   674 000002C2 ????                    .argswinfo:	RESW	1		; Switch information for entire line
   675 000002C4 <res 100h>              .argbuf:	RESW	ARGBLEN		; storage for argv strings
   676 000003C4 <res 80h>               .argforcombuf:	RESB	COMBUFLEN	; Original for loop command string
   677                                  .SIZE:	; 1092 ; 27/07/2024 ; (it was 1348 in MSDOS 5.0-6.22 COMMAND.COM) ;*
   678                                  ENDSTRUC
   679                                  
   680                                  ; Equates for initialization
   681                                  ;
   682                                  INITINIT	equ	01h		; initialization in progress
   683                                  INITSPECIAL	equ	02h		; in initialization time/date routine
   684                                  INITCTRLC	equ	04h		; already in ^C handler
   685                                  
   686                                  ;============================================================================
   687                                  ;  INTNAT.INC, MSDOS 6.0, 1991
   688                                  ;============================================================================
   689                                  ; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   690                                  
   691                                  ; Current structure of the data returned by the international call
   692                                  
   693                                  struc INTERNAT_BLOCK
   694 00000000 ????                    .date_tim_format: resw 1		; 0-USA, 1-EUR, 2-JAP
   695 00000002 ??????????              .currency_sym:	resb 5			; Currency Symbol 5 bytes
   696 00000007 ????                    .thous_sep:	resb 2			; Thousands separator 2 bytes
   697 00000009 ????                    .decimal_sep:	resb 2			; Decimal separator 2 bytes
   698 0000000B ????                    .date_sep:	resb 2			; Date separator 2 bytes
   699 0000000D ????                    .time_sep:	resb 2			; Decimal separator 2 bytes
   700 0000000F ??                      .bit_field:	resb 1			; Bit values
   701                                  					;   Bit 0 = 0 if currency symbol first
   702                                  					;	  = 1 if currency symbol last
   703                                  					;   Bit 1 = 0 if No space after currency symbol
   704                                  					;	  = 1 if space after currency symbol
   705                                  .currency_cents:
   706 00000010 ??                      		resb 1			; Number of places after currency dec point
   707 00000011 ??                      .time_24:	resb 1			; 1 if 24 hour time, 0 if 12 hour time
   708 00000012 ????????                .map_call:	resw 2			; Address of case mapping call (DWORD)
   709                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
   710                                  					;  in pieces.
   711 00000016 ??                      .data_sep:	resb 1			; Data list separator character
   712 00000017 ??                      		resb 1
   713                                  endstruc
   714                                  
   715                                  ; Max size of the block returned by the INTERNATIONAL call
   716                                  
   717                                  internat_block_max equ 32
   718                                  
   719                                  ;============================================================================
   720                                  ; FIND.INC (MSDOS 3.3, 1987) - REDIRSYM.INC (MSDOS 6.0, 1991) 
   721                                  ;============================================================================
   722                                  ; 13/10/2018 - Retro DOS v3.0
   723                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   724                                  
   725                                  ;Break	<find first/next buffer>
   726                                  
   727                                  	; MSDOS 3.3 & MSDOS 6.0
   728                                  
   729                                  struc FIND_BUF
   730 00000000 ??                      .DRIVE:	    resb 1	; drive of search
   731 00000001 <res Bh>                .NAME:	    resb 11	; formatted name
   732 0000000C ??                      .SATTR:	    resb 1	; attribute of search
   733 0000000D ????                    .LASTENT:   resw 1	; LastEnt
   734 0000000F ????                    .DIRSTART:  resw 1	; DirStart
   735 00000011 ????????                .NETID:	    resb 4	; Reserved for NET
   736 00000015 ??                      .ATTR:	    resb 1	; attribute found
   737 00000016 ????                    .TIMR:	    resw 1	; time
   738 00000018 ????                    .DATE:	    resw 1	; date
   739 0000001A ????                    .SIZE_L:    resw 1	; low(size)
   740 0000001C ????                    .SIZE_H:    resw 1	; high(size)
   741 0000001E <res Dh>                .PNAME:	    resb 13	; packed name
   742                                  .size:
   743                                  endstruc
   744                                  
   745                                  ;=============================================================================
   746                                  ; PDB.INC, MSDOS 6.0, 1991
   747                                  ;=============================================================================
   748                                  ; 24/09/2018 - Retro DOS v3.0 (08/07/2018, 'msdos3.s')
   749                                  
   750                                  ;**	Process data block (otherwise known as program header)
   751                                  
   752                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   753                                  ;	can be rearranged here, ever. Reserved areas are probably safe
   754                                  ;	for use.
   755                                  
   756                                  FILPERPROC	EQU     20
   757                                  
   758                                  struc PDB	; Process_data_block
   759 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   760 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   761 00000004 ??                                      resb 1
   762 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   763 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   764 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   765 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   766 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   767 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   768 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   769 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   770 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   771 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   772 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   773 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   774 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   775 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   776 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   777 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   778 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   779 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   780                                  				;  an extended FCB
   781                                  ;endstruc 	; MSDOS 3.3
   782                                  	  	; MSDOS 6.0
   783 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   784 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   785 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   786 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   787                                  endstruc
   788                                  
   789                                  ;=============================================================================
   790                                  ; VERSIONA.INC, MSDOS 6.0, 1991
   791                                  ;=============================================================================
   792                                  ; 24/09/2018 - Retro DOS v3.0
   793                                  
   794                                  ;major_version	equ 6		; Major DOS version
   795                                  ;minor_version	equ 0		; Minor DOS Version
   796                                  
   797                                  ;expected_version    equ     (MINOR_VERSION SHL 8)+MAJOR_VERSION
   798                                  
   799                                  ; MSDOS 3.3 COMMAND.COM
   800                                  ;MAJOR_VERSION	EQU 3
   801                                  ;MINOR_VERSION	EQU 30
   802                                  
   803                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
   804                                  MAJOR_VERSION	EQU 5		; Major DOS version
   805                                  MINOR_VERSION	EQU 0		; Minor DOS version
   806                                  
   807                                  EXPECTED_VERSION EQU (MINOR_VERSION<<8)+MAJOR_VERSION	
   808                                  
   809                                  ;-----------------------------------------------------------------------------
   810                                  ; 21/09/2018
   811                                  ;-----------------------------------------------------------------------------
   812                                  ; Retro DOS v3.0 NOTE:  
   813                                  ;	Following source code is as disassembled code of MSDOS 3.3 COMMAND.COM
   814                                  ;	with minor modifications which are done by me (Erdogan Tan).
   815                                  ;	.. but comments and descriptions are from MSDOS 6.0 COMMAND.COM
   816                                  ;	source code files (written by using MASM syntax).
   817                                  ;-----------------------------------------------------------------------------
   818                                  ; All of this Retro DOS 3.0 (2018) source code has been written by using
   819                                  ; NASM (2.11) x86 assembly language/compiler syntax.	
   820                                  ;----------------------------------------------------------------------------- 	
   821                                  
   822                                  ;=============================================================================
   823                                  ; COMMAND1.ASM, MSDOS 6.0, 1991
   824                                  ;=============================================================================
   825                                  ; 21/09/2018 - Retro DOS v3.0
   826                                  
   827                                  ;	page ,132
   828                                  ;	title	COMMAND - resident code for COMMAND.COM
   829                                  ;	name	COMMAND
   830                                  
   831                                  ;/*
   832                                  ; *                      Microsoft Confidential
   833                                  ; *                      Copyright (C) Microsoft Corporation 1991
   834                                  ; *                      All Rights Reserved.
   835                                  ; */
   836                                  
   837                                  ;*****************************************************************************
   838                                  ;
   839                                  ; MODULE:	       COMMAND.COM
   840                                  ;
   841                                  ; DESCRIPTIVE NAME:    Default DOS command interpreter
   842                                  ;
   843                                  ; FUNCTION:	       This version of COMMAND is divided into three distinct
   844                                  ;		       parts.  First is the resident portion, which includes
   845                                  ;		       handlers for interrupts	23H (Cntrl-C), 24H (fatal
   846                                  ;		       error), and 2EH (command line execute); it also has
   847                                  ;		       code to test and, if necessary, reload the transient
   848                                  ;		       portion. Following the resident is the init code, which
   849                                  ;		       is overwritten after use.  Then comes the transient
   850                                  ;		       portion, which includes all command processing (whether
   851                                  ;		       internal or external).  The transient portion loads at
   852                                  ;		       the end of physical memory, and it may be overlayed by
   853                                  ;		       programs that need as much memory as possible. When the
   854                                  ;		       resident portion of command regains control from a user
   855                                  ;		       program, a check sum is performed on the transient
   856                                  ;		       portion to see if it must be reloaded.  Thus programs
   857                                  ;		       which do not need maximum memory will save the time
   858                                  ;		       required to reload COMMAND when they terminate.
   859                                  ;
   860                                  ; ENTRY POINT:	       PROGSTART
   861                                  ;
   862                                  ; INPUT:	       command line at offset 81H
   863                                  ;
   864                                  ; EXIT_NORMAL:	       No exit from root level command processor.  Can exit
   865                                  ;		       from a secondary command processor via the EXIT
   866                                  ;		       internal command.
   867                                  ;
   868                                  ; EXIT_ERROR:	       Exit to prior command processor if possible, otherwise
   869                                  ;		       hang the system.
   870                                  ;
   871                                  ; INTERNAL REFERENCES:
   872                                  ;
   873                                  ;     ROUTINES:        See the COMMAND Subroutine Description Document
   874                                  ;		       (COMMAND.DOC)
   875                                  ;
   876                                  ;     DATA AREAS:      See the COMMAND Subroutine Description Document
   877                                  ;		       (COMMAND.DOC)
   878                                  ;
   879                                  ; EXTERNAL REFERENCES:
   880                                  ;
   881                                  ;      ROUTINES:       none
   882                                  ;
   883                                  ;      DATA AREAS:     none
   884                                  ;
   885                                  ;*****************************************************************************
   886                                  ;
   887                                  ;			      REVISION HISTORY
   888                                  ;			      ----------------
   889                                  ;
   890                                  ; DOS 1.00 to DOS 3.30
   891                                  ; --------------------------
   892                                  ; SEE REVISION LOG IN COPY.ASM ALSO
   893                                  ;
   894                                  ; REV 1.17
   895                                  ;    05/19/82  Fixed bug in BADEXE error (relocation error must return to
   896                                  ;	       resident since the EXELOAD may have overwritten the transient.
   897                                  ;
   898                                  ; REV 1.18
   899                                  ;    05/21/82  IBM version always looks on drive A
   900                                  ;	       MSVER always looks on default drive
   901                                  ;
   902                                  ; REV 1.19
   903                                  ;    06/03/82  Drive spec now entered in command line
   904                                  ;    06/07/82  Added VER command (print DOS version number) and VOL command
   905                                  ;	       (print volume label)
   906                                  ;
   907                                  ; REV 1.20
   908                                  ;    06/09/82  Prints "directory" after directories
   909                                  ;    06/13/82  MKDIR, CHDIR, PWD, RMDIR added
   910                                  ;
   911                                  ; REV 1.50
   912                                  ;	       Some code for new 2.0 DOS, sort of HACKey.  Not enough time to
   913                                  ;	       do it right.
   914                                  ;
   915                                  ; REV 1.70
   916                                  ;	       EXEC used to fork off new processes
   917                                  ;
   918                                  ; REV 1.80
   919                                  ;	       C switch for single command execution
   920                                  ;
   921                                  ; REV 1.90
   922                                  ;	       Batch uses XENIX
   923                                  ;
   924                                  ; Rev 2.00
   925                                  ;	       Lots of neato stuff
   926                                  ;	       IBM 2.00 level
   927                                  ;
   928                                  ; Rev 2.01
   929                                  ;	       'D' switch for date time suppression
   930                                  ;
   931                                  ; Rev 2.02
   932                                  ;	       Default userpath is NUL rather than BIN
   933                                  ;		       same as IBM
   934                                  ;	       COMMAND split into pieces
   935                                  ;
   936                                  ; Rev 2.10
   937                                  ;	       INTERNATIONAL SUPPORT
   938                                  ;
   939                                  ; Rev 2.50
   940                                  ;	       all the 2.x new stuff -MU
   941                                  ;
   942                                  ; Rev 3.30     (Ellen G)
   943                                  ;	       CALL internal command (TBATCH2.ASM)
   944                                  ;	       CHCP internal command (TCMD2B.ASM)
   945                                  ;	       INT 24H support of abort, retry, ignore, and fail prompt
   946                                  ;	       @ sign suppression of batch file line
   947                                  ;	       Replaceable environment value support in batch files
   948                                  ;	       INT 2FH calls for APPEND
   949                                  ;	       Lots of PTR fixes!
   950                                  ;
   951                                  ; Beyond 3.30 to forever  (Ellen G)
   952                                  ; ----------------------
   953                                  ;
   954                                  ; A000 DOS 4.00  -	Use SYSPARSE for internal commands
   955                                  ;			Use Message Retriever services
   956                                  ;			/MSG switch for resident extended error msg
   957                                  ;			Convert to new capitalization support
   958                                  ;			Better error recovery on CHCP command
   959                                  ;			Code page file tag support
   960                                  ;			TRUENAME internal command
   961                                  ;			Extended screen line support
   962                                  ;			/P switch on DEL/ERASE command
   963                                  ;			Improved file redirection error recovery
   964                                  ;	(removed)	Improved batch file performance
   965                                  ;			Unconditional DBCS support
   966                                  ;			Volume serial number support
   967                                  ;	(removed)	COMMENT=?? support
   968                                  ;
   969                                  ; A001	PTM P20 	Move system_cpage from TDATA to TSPC
   970                                  ;
   971                                  ; A002	PTM P74 	Fix PRESCAN so that redirection symbols do not
   972                                  ;			require delimiters.
   973                                  ;
   974                                  ; A003	PTM P5,P9,P111	Included in A000 development
   975                                  ;
   976                                  ; A004	PTM P86 	Fix IF command to turn off piping before
   977                                  ;			executing
   978                                  ;
   979                                  ; A005	DCR D17 	If user specifies an extension on the command
   980                                  ;			line search for that extension only.
   981                                  ;
   982                                  ; A006	DCR D15 	New message for MkDir - "Directory already
   983                                  ;			exists"
   984                                  ;
   985                                  ; A007	DCR D2		Change CTTY so that a write is done before XDUP
   986                                  ;
   987                                  ; A008	PTM P182	Change COPY to set default if invalid function
   988                                  ;			returned from code page call.
   989                                  ;
   990                                  ; A009	PTM P179	Add CRLF to invalid disk change message
   991                                  ;
   992                                  ; A010	DCR D43 	Allow APPEND to do a far call to SYSPARSE in
   993                                  ;			transient COMMAND.
   994                                  ;
   995                                  ; A011	DCR D130	Change redirection to overwrite an EOF mark
   996                                  ;			before appending to a file.
   997                                  ;
   998                                  ; A012	PTM P189	Fix redirection error recovery.
   999                                  ;
  1000                                  ; A013	PTM P330	Change date format
  1001                                  ;
  1002                                  ; A014	PTM P455	Fix echo parsing
  1003                                  ;
  1004                                  ; A015	PTM P517	Fix DIR problem with * vs *.
  1005                                  ;
  1006                                  ; A016	PTM P354	Fix extended error message addressing
  1007                                  ;
  1008                                  ; A017	PTM P448	Fix appending to 0 length files
  1009                                  ;
  1010                                  ; A018	PTM P566,P3903	Fix parse error messages to print out parameter
  1011                                  ;			the parser fails on. Fail on duplicate switches.
  1012                                  ;
  1013                                  ; A019	PTM P542	Fix device name to be printed correctly during
  1014                                  ;			critical error
  1015                                  ;
  1016                                  ; A020	DCR D43 	Set append state off while in DIR
  1017                                  ;
  1018                                  ; A021	PTM P709	Fix CTTY printing ascii characters.
  1019                                  ;
  1020                                  ; A022	DCR D209	Enhanced error recovery
  1021                                  ;
  1022                                  ; A023	PTM P911	Fix ANSI.SYS IOCTL structure.
  1023                                  ;
  1024                                  ; A024	PTM P899	Fix EXTOPEN open modes.
  1025                                  ;
  1026                                  ; A025	PTM P922	Fix messages and optimize PARSE switches
  1027                                  ;
  1028                                  ; A026	DCR D191	Change redirection error recovery support.
  1029                                  ;
  1030                                  ; A027	PTM P991	Fix so that KAUTOBAT & AUTOEXEC are terminated
  1031                                  ;			with a carriage return.
  1032                                  ;
  1033                                  ; A028	PTM P1076	Print a blank line before printing invalid
  1034                                  ;			date and invalid time messages.
  1035                                  ;
  1036                                  ; A029	PTM P1084	Eliminate calls to parse_check_eol in DATE
  1037                                  ;			and TIME.
  1038                                  ;
  1039                                  ; A030	DCR D201	New extended attribute format.
  1040                                  ;
  1041                                  ; A031	PTM P1149	Fix DATE/TIME add blank before prompt.
  1042                                  ;
  1043                                  ; A032	PTM P931	Fix =ON, =OFF for BREAK, VERIFY, ECHO
  1044                                  ;
  1045                                  ; A033	PTM P1298	Fix problem with system crashes on ECHO >""
  1046                                  ;
  1047                                  ; A034	PTM P1387	Fix COPY D:fname+,, to work
  1048                                  ;
  1049                                  ; A035	PTM P1407	Fix so that >> (appending) to a device does
  1050                                  ;			do a read to determine eof.
  1051                                  ;
  1052                                  ; A036	PTM P1406	Use 69h instead of 44h to get volume serial
  1053                                  ;			so that ASSIGN works correctly.
  1054                                  ;
  1055                                  ; A037	PTM P1335	Fix COMMAND /C with FOR
  1056                                  ;
  1057                                  ; A038	PTM P1635	Fix COPY so that it doesn't accept /V /V
  1058                                  ;
  1059                                  ; A039	DCR D284	Change invalid code page tag from -1 to 0.
  1060                                  ;
  1061                                  ; A040	PTM P1787	Fix redirection to cause error when no file is
  1062                                  ;			specified.
  1063                                  ;
  1064                                  ; A041	PTM P1705	Close redirected files after internal APPEND
  1065                                  ;			executes.
  1066                                  ;
  1067                                  ; A042	PTM P1276	Fix problem of APPEND paths changes in batch
  1068                                  ;			files causing loss of batch file.
  1069                                  ;
  1070                                  ; A043	PTM P2208	Make sure redirection is not set up twice for
  1071                                  ;			CALL'ed batch files.
  1072                                  ;
  1073                                  ; A044	PTM P2315	Set switch on PARSE so that 0ah is not used
  1074                                  ;			as an end of line character
  1075                                  ;
  1076                                  ; A045	PTM P2560	Make sure we don't lose parse, critical error,
  1077                                  ;			and extended message pointers when we EXIT if
  1078                                  ;			COMMAND /P is the top level process.
  1079                                  ;
  1080                                  ; A046	PTM P2690	Change COPY message "fn File not found" to
  1081                                  ;			"File not found - fn"
  1082                                  ;
  1083                                  ; A047	PTM P2819	Fix transient reload prompt message
  1084                                  ;
  1085                                  ; A048	PTM P2824	Fix COPY path to be upper cased.  This was broken
  1086                                  ;			when DBCS code was added.
  1087                                  ;
  1088                                  ; A049	PTM P2891	Fix PATH so that it doesn't accept extra characters
  1089                                  ;			on line.
  1090                                  ;
  1091                                  ; A050	PTM P3030	Fix TYPE to work properly on files > 64K
  1092                                  ;
  1093                                  ; A051	PTM P3011	Fix DIR header to be compatible with prior releases.
  1094                                  ;
  1095                                  ; A052	PTM P3063,P3228 Fix COPY message for invalid filename on target.
  1096                                  ;
  1097                                  ; A053	PTM P2865	Fix DIR to work in 40 column mode.
  1098                                  ;
  1099                                  ; A054	PTM P3407	Code reduction and critical error on single line
  1100                                  ;	PTM P3672	(Change to single parser exported under P3407)
  1101                                  ;
  1102                                  ; A055	PTM P3282	Reset message service variables in INT 23h to fix
  1103                                  ;			problems with breaking out of INT 24h
  1104                                  ;
  1105                                  ; A056	PTM P3389	Fix problem of environment overlaying transient.
  1106                                  ;
  1107                                  ; A057	PTM P3384	Fix COMMAND /C so that it works if there is no space
  1108                                  ;			before the "string".  EX: COMMAND /CDIR
  1109                                  ;
  1110                                  ; A058	PTM P3493	Fix DBCS so that CPARSE eats second character of
  1111                                  ;			DBCS switch.
  1112                                  ;
  1113                                  ; A059	PTM P3394	Change the TIME command to right align the display of
  1114                                  ;			the time.
  1115                                  ;
  1116                                  ; A060	PTM P3672	Code reduction - change PARSE and EXTENDED ERROR
  1117                                  ;			messages to be disk based.  Only keep them if /MSG
  1118                                  ;			is used.
  1119                                  ;
  1120                                  ; A061	PTM P3928	Fix so that transient doesn't reload when breaking
  1121                                  ;			out of internal commands, due to substitution blocks
  1122                                  ;			not being reset.
  1123                                  ;
  1124                                  ; A062	PTM P4079	Fix segment override for fetching address of environment
  1125                                  ;			of parent copy of COMMAND when no COMSPEC exists in
  1126                                  ;			secondary copy of environment.	Change default slash in
  1127                                  ;			default comspec string to backslash.
  1128                                  ;
  1129                                  ; A063	PTM P4140	REDIRECTOR and IFSFUNC changed interface for getting
  1130                                  ;			text for critical error messages.
  1131                                  ;
  1132                                  ; A064	PTM P4934	Multiplex number for ANSI.SYS changed due to conflict
  1133                                  ;	5/20/88 	with Microsoft product already shipped.
  1134                                  ;
  1135                                  ; A065	PTM P4935	Multiplex number for SHELL changed due to conflict
  1136                                  ;	 5/20/88	with Microsoft product already shipped.
  1137                                  ;
  1138                                  ; A066	PTM P4961	DIR /W /P scrolled first line off the screen in some
  1139                                  ;	 5/24/88	cases; where the listing would barely fit without the
  1140                                  ;			header and space remaining.
  1141                                  ;
  1142                                  ; A067	PTM P5011	For /E: values of 993 to 1024 the COMSPEC was getting
  1143                                  ;	 6/6/88 	trashed.  Turns out that the SETBLOCK for the new
  1144                                  ;			environment was putting a "Z block" marker in the old
  1145                                  ;			environment.  The fix is to move to the old environment
  1146                                  ;			to the new environment before doing the SETBLOCK.
  1147                                  ;
  1148                                  ; A068  PTM P5568       IR79754 APPEND /x:on not working properly with DIR/VOL
  1149                                  ;        09/19/88       because the check for APPEND needed to be performed
  1150                                  ;                       before the DIR's findfirst.
  1151                                  ;
  1152                                  ; A069  PTM P5726       IR80540 COMSPEC_flag not properly initialized and
  1153                                  ;        10/30/88       executed.  Causing AUSTIN problem testing LAN/DW4 re-
  1154                                  ;                       loading trans w/new comspec with no user change comspec.
  1155                                  ;
  1156                                  ; A070  PTM P5734       IR80484 Batch file causes sys workspace to be corrupted.
  1157                                  ;        11/05/88       Expansion of environment variables into batch line of
  1158                                  ;                       128 chars was not being counted and "%" which should be
  1159                                  ;                       ignored were being counted.
  1160                                  ;
  1161                                  ; A071  PTM P5854       IR82061 Invalid COMMAND.COM when Word Perfect, Prompt
  1162                                  ;        03/02/89       used.  Comspec_flag was not in protected data file be-
  1163                                  ;                       ing included in checksum and was being overwritten by
  1164                                  ;                       WP.  Moved var from Tspc to Tdata so Trans would reload.
  1165                                  ;                       Also removed fix A069 (because flag now protected).
  1166                                  ;
  1167                                  ; C001  VERSION 4.1     Add new internal command - SERVICE - to display the DOS
  1168                                  ;        07/25/89       version and CSD version in U.S. date format.  Files
  1169                                  ;                       changed - TRANMSG,.SKL,COMMAND1,TDATA,TCMD2A,USA.MSG
  1170                                  ;
  1171                                  ;***********************************************************************************
  1172                                  
  1173                                  ;
  1174                                  ;	Revision History
  1175                                  ;	================
  1176                                  ;
  1177                                  ;	M021	SR	08/23/90	Fixed Ctrl-C handler to handle Ctrl-C
  1178                                  ;					at init time (date/time prompt)
  1179                                  ;
  1180                                  
  1181                                  ;
  1182                                  ;.xcref
  1183                                  ;.xlist
  1184                                  ;	include dossym.inc		; basic DOS symbol set
  1185                                  ;	include syscall.inc		; DOS function names
  1186                                  ;	include comsw.asm		; build version info
  1187                                  ;	include comequ.asm		; common command.com symbols
  1188                                  ;	include resmsg.equ		; resident message names
  1189                                  ;
  1190                                  ;	include comseg.asm		;segment ordering
  1191                                  ;.list
  1192                                  ;.cref
  1193                                  
  1194                                  ;CODERES segment public byte
  1195                                  ;CODERES ends
  1196                                  ;
  1197                                  ;DATARES 	segment public byte
  1198                                  ;		extrn	AccDen:byte
  1199                                  ;		extrn	Batch:word
  1200                                  ;		extrn	EchoFlag:byte
  1201                                  ;		extrn	ExeBad:byte
  1202                                  ;		extrn	ExecEMes:byte
  1203                                  ;		extrn	ExecErrSubst:byte
  1204                                  ;		extrn	ExtCom:byte
  1205                                  ;		extrn	ForFlag:byte
  1206                                  ;		extrn	IfFlag:byte
  1207                                  ;		extrn	InitFlag:BYTE
  1208                                  ;		extrn	Nest:word
  1209                                  ;		extrn	PipeFlag:byte
  1210                                  ;		extrn	RBadNam:byte
  1211                                  ;		extrn	RetCode:word
  1212                                  ;		extrn	SingleCom:word
  1213                                  ;		extrn	TooBig:byte
  1214                                  ;
  1215                                  ;		extrn	OldDS:word
  1216                                  ;
  1217                                  ;DATARES 	ends
  1218                                  ;
  1219                                  ;
  1220                                  ;INIT		segment public para
  1221                                  ;		extrn	ConProc:near
  1222                                  ;		extrn	Init_Contc_SpecialCase:near
  1223                                  ;INIT		ends
  1224                                  
  1225                                  ; 09/01/2023 - Erdogan Tan - Istanbul
  1226                                  ; --------------------------------------
  1227                                  ; 'command5.s' source code reference(s):
  1228                                  
  1229                                  ;	1) MSDOS 6.0 COMMAND.COM source files
  1230                                  ;	2) Disassembled MSDOS 5.0 COMMAND.COM - 11/11/1991 - 47845 bytes  
  1231                                  ;	   (Disassembler: HEX-RAYS IDA Pro Freeware Version 5.0)
  1232                                  ; ----------------------------------------------------------------------				 	 	
  1233                                  
  1234                                  ; ----------------------------------------------------------------------------
  1235                                  ; START OF RESIDENT PORTION
  1236                                  ; ----------------------------------------------------------------------------
  1237                                  ; SEGMENT - DATARES
  1238                                  ; ----------------------------------------------------------------------------
  1239                                  
  1240                                  section .RESGROUP ; vstart=100h  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) 
  1241                                  
  1242                                  ; 09/01/2023 - Retro DOS v4.0 (Modified COMMAND.COM v5.0)
  1243                                  
  1244                                  ; ----------------------------------------------------------------------------
  1245                                  ; STUB.ASM - MSDOS 6.0 - 1991
  1246                                  ; ----------------------------------------------------------------------------
  1247                                  
  1248                                  ;This file contains the low memory stub for command.com which hooks all the
  1249                                  ;entry points into the resident command.com and directs the calls to the
  1250                                  ;appropriate routines in the resident code which may be located in HIMEM. 
  1251                                  ;
  1252                                  ;The stub has been made part of the resident data and will always
  1253                                  ;be duplicated on every invocation of command.com. However, the only stubs
  1254                                  ;that actually hook the interrupt vectors belong to either the first 
  1255                                  ;command.com or to any other command.com executed with the /p switch. 
  1256                                  ;
  1257                                  ;The stub also keeps track of the current active data segment. The 
  1258                                  ;INIT code of each command.com updates this variable via an int 2fh mechanism
  1259                                  ;with its own data segment. The INIT code also updates a pointer in its data
  1260                                  ;segment to the previous resident data segment. Whenever a command.com exits,
  1261                                  ;the exit code picks up the previous data segment pointer from the current
  1262                                  ;data segment and patches it into the CurResDataSeg variable in the stub.
  1263                                  ;
  1264                                  ;Right now the stub does not bother about A20 switching. We assume
  1265                                  ;A20 is always on. It just does a far jump to the resident code with the 
  1266                                  ;value of the current data segment in one of the registers. A20 toggle 
  1267                                  ;support maybe added as a future enhancement, if the need is felt.
  1268                                  
  1269                                  	; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1270                                  
  1271                                  	[ORG 100H]
  1272                                  
  1273                                  	; 21/09/2018 - Retro DOS v3.0
  1274                                  StartCode:
  1275 00000000 E9FD13                  	jmp	ConProc	; 10/01/2023 
  1276                                  
  1277                                  	; 09/01/2023
  1278                                  
  1279                                  ; Make following table word-aligned, and at the same time, provide a
  1280                                  ; signature that sysinit can use to (attempt to) validate the interpreter
  1281                                  
  1282                                  	;db	0	; MSDOS 5.0 COMMAND.COM - DATARESRES:0103h
  1283 00000003 50                      	db      ((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
  1284                                  
  1285                                  ;All the entry points declared below are patched in at INIT time with the
  1286                                  ;proper segment and offset values after the resident code segment has been
  1287                                  ;moved to its final location
  1288                                  
  1289                                  ;!!!WARNING!!!
  1290                                  ; All the dword ptrs from Int2f_Entry till MsgRetrv_Entry should be contiguous
  1291                                  ;because the init routine 'Patch_stub' (in init.asm) relies on this to patch
  1292                                  ;in the correct segments and offsets
  1293                                  
  1294                                  Int2f_Entry:
  1295 00000004 [1713]                  	dw	MsgInt2fHandler		; Address of int 2fh handler
  1296 00000006 0000                    	dw	0
  1297                                  Int2e_Entry:
  1298 00000008 [730D]                  	dw	Int_2e			; Address of int 2eh handler
  1299 0000000A 0000                    	dw	0
  1300                                  Ctrlc_Entry:
  1301 0000000C [330C]                  	dw	ContC			; Address of Ctrl-C handler
  1302 0000000E 0000                    	dw	0
  1303                                  CritErr_Entry:
  1304 00000010 [3410]                  	dw	DSKERR			; Address of critical error handler
  1305 00000012 0000                    	dw	0
  1306                                  
  1307                                  Exec_Entry:
  1308 00000014 00000000                	dd	0			; Entry from transient to Ext_Exec
  1309                                  RemCheck_Entry:
  1310 00000018 00000000                	dd	0			; Entry from transient to TRemCheck
  1311                                  TrnLodCom1_Entry:
  1312 0000001C 00000000                	dd	0			; Entry from transient to LodCom1
  1313                                  LodCom_Entry:
  1314 00000020 00000000                	dd	0			; Entry after exit from command.com
  1315                                  MsgRetrv_Entry:
  1316 00000024 00000000                	dd	0			; Entry from external to MsgRetriever
  1317                                  HeadFix_Entry:
  1318 00000028 00000000                	dd	0			; Entry from trans to HeadFix
  1319                                  UMBOff_Entry:
  1320 0000002C 00000000                	dd	0			; Entry from here to UMBOff routine; M003
  1321                                  XMMCallAddr:
  1322 00000030 00000000                	dd	0			; Call address for XMM functions
  1323                                  ComInHMA:
  1324 00000034 00                      	db	0			; Flags if command.com in HMA
  1325                                  
  1326                                  Int2f_Trap:
  1327                                  	;sti	; 19/04/2023 (MSDOS 5.0 COMMAND.COM - RESGROUP:0135h)
  1328 00000035 E86400                  	call	CheckA20
  1329 00000038 1E                      	push	ds			; push current ds value
  1330 00000039 0E                      	push	cs			; push resident data segment value
  1331                                  	;jmp	cs:Int2f_Entry
  1332 0000003A 2EFF2E[0400]            	jmp	far [cs:Int2f_Entry]
  1333                                  
  1334                                  Int2e_Trap:
  1335 0000003F FB                      	sti
  1336 00000040 E85900                  	call	CheckA20
  1337 00000043 1E                      	push	ds			; push current ds value
  1338 00000044 0E                      	push	cs			; push resident data segment value
  1339                                  	;jmp	cs:Int2e_Entry
  1340 00000045 2EFF2E[0800]            	jmp	far [cs:Int2e_Entry]
  1341                                  
  1342                                  Ctrlc_Trap:
  1343 0000004A FB                      	sti
  1344 0000004B E84E00                  	call	CheckA20
  1345 0000004E 1E                      	push	ds			; push current ds value
  1346 0000004F 0E                      	push	cs			; push resident data segment value
  1347                                  	;jmp	cs:Ctrlc_Entry
  1348 00000050 2EFF2E[0C00]            	jmp	far [cs:Ctrlc_Entry]
  1349                                  
  1350                                  CritErr_Trap:
  1351 00000055 FB                      	sti
  1352 00000056 E84300                  	call	CheckA20
  1353 00000059 1E                      	push	ds			; push current ds value
  1354 0000005A 0E                      	push	cs			; push resident data segment value
  1355                                  	;jmp	cs:CritErr_Entry
  1356 0000005B 2EFF2E[1000]            	jmp	far [cs:CritErr_Entry]
  1357                                  
  1358                                  Exec_Trap:
  1359 00000060 E83900                  	call	CheckA20
  1360 00000063 1E                      	push	ds			; push current ds value
  1361 00000064 0E                      	push	cs			; push resident data segment value
  1362                                  	;jmp	cs:Exec_Entry
  1363 00000065 2EFF2E[1400]            	jmp	far [cs:Exec_Entry]
  1364                                  
  1365                                  RemCheck_Trap:
  1366 0000006A E82F00                  	call	CheckA20
  1367 0000006D 1E                      	push	ds			; push current ds value
  1368 0000006E 0E                      	push	cs			; push resident data segment value
  1369                                  	;jmp	cs:RemCheck_Entry
  1370 0000006F 2EFF2E[1800]            	jmp	far [cs:RemCheck_Entry]
  1371                                  
  1372                                  TrnLodCom1_Trap:
  1373 00000074 E82500                  	call	CheckA20
  1374 00000077 1E                      	push	ds			; push current ds value
  1375 00000078 0E                      	push	cs			; push resident data segment value
  1376                                  	;jmp	cs:TrnLodCom1_Entry
  1377 00000079 2EFF2E[1C00]            	jmp	far [cs:TrnLodCom1_Entry]
  1378                                  
  1379                                  LodCom_Trap:
  1380 0000007E E81B00                  	call	CheckA20
  1381 00000081 1E                      	push	ds			; push current ds value
  1382 00000082 0E                      	push	cs			; push resident data segment value
  1383                                  	;jmp	cs:LodCom_Entry
  1384 00000083 2EFF2E[2000]            	jmp	far [cs:LodCom_Entry]
  1385                                  
  1386                                  MsgRetrv_Trap:
  1387 00000088 E81100                  	call	CheckA20
  1388 0000008B 1E                      	push	ds			; push current ds value
  1389 0000008C 0E                      	push	cs			; push resident data segment value
  1390                                  	;jmp	cs:MsgRetrv_Entry
  1391 0000008D 2EFF2E[2400]            	jmp	far [cs:MsgRetrv_Entry]
  1392                                  
  1393                                  HeadFix_Trap:
  1394 00000092 E80700                  	call	CheckA20
  1395 00000095 1E                      	push	ds			; push current ds value
  1396 00000096 0E                      	push	cs			; push resident data segment value
  1397                                  	;jmp	cs:HeadFix_Entry
  1398 00000097 2EFF2E[2800]            	jmp	far [cs:HeadFix_Entry]
  1399                                  
  1400                                  ; ----------------------------------------------------------------------------
  1401                                  
  1402                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1403                                  %if 0
  1404                                  	; 09/01/2023
  1405                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:019Dh
  1406                                  
  1407                                  	; 05/06/2023
  1408                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:019Ch
  1409                                  CheckA20:
  1410                                  	pushf				; save current flags
  1411                                  	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1412                                  	jz	short A20_on		; no, jump to resident
  1413                                  
  1414                                  	call	QueryA20
  1415                                  	jnc	short A20_on		; A20 is on, jump to resident
  1416                                  
  1417                                  	call	EnableA20		; turn A20 on
  1418                                  A20_on:
  1419                                  	popf				; flags have to be unchanged
  1420                                  	retn
  1421                                  %else
  1422                                  	; 18/07/2024
  1423                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1424                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1425                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:01FFh
  1426                                  CheckA20:
  1427 0000009C 9C                      	pushf				; save current flags
  1428 0000009D 2E803E[3400]00          	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1429 000000A3 741A                    	jz	short A20_on		; no, jump to resident
  1430                                  	; 18/07/2024
  1431 000000A5 50                      	push	ax
  1432 000000A6 53                      	push	bx
  1433                                  QueryA20:
  1434                                  	;mov	ah,7
  1435 000000A7 B407                    	mov	ah,XMM_QUERY_A20
  1436                                  	;call	cs:XMMCallAddr
  1437 000000A9 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1438 000000AE 09C0                    	or	ax,ax
  1439                                  	; 16/04/2023
  1440 000000B0 750B                    	jnz	short QA20_ON		; A20 is on, jump to resident
  1441                                  	; 18/07/2024
  1442                                  EnableA20:
  1443                                  	;mov	ah,5
  1444 000000B2 B405                    	mov	ah,XMM_LOCAL_ENABLE_A20	; turn A20 on
  1445                                  	;call	cs:XMMCallAddr
  1446 000000B4 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1447 000000B9 09C0                    	or	ax,ax
  1448 000000BB 7404                    	jz	short XMMerror		; AX = 0 fatal error
  1449                                  QA20_ON:
  1450 000000BD 5B                      	pop	bx
  1451 000000BE 58                      	pop	ax
  1452                                  A20_on:
  1453 000000BF 9D                      	popf				; flags have to be unchanged
  1454 000000C0 C3                      	retn
  1455                                  ;If we get an error, we just loop forever
  1456                                  XMMerror:
  1457 000000C1 EBFE                    	jmp	short XMMerror
  1458                                  %endif
  1459                                  
  1460                                  ; ----------------------------------------------------------------------------
  1461                                  
  1462                                  ; M005; This is a far jump to the actual int 2fh entry point. The renormalized
  1463                                  ; M005; int 2fh cs:ip points here. We hardcode a far jump here to the int 2fh
  1464                                  ; M005; handler. Note that we have to hardcode a jump and we cannot use any
  1465                                  ; M005; pointers because our cs is going to be different. The segment to
  1466                                  ; M005; jump to is patched in at init time. (in init.asm)
  1467                                  
  1468                                  Carousel_i2f_Hook:			; M005
  1469 000000C3 EA                      	db	0EAh			; far jump opcode; M005
  1470 000000C4 [3500]                  	dw	Int2f_Trap ; DATARES	; int 2fh offset ; M005
  1471 000000C6 0000                    	dw	0			; int 2fh segment; M005
  1472                                  
  1473                                  ; ----------------------------------------------------------------------------
  1474                                  
  1475                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1476                                  %if 0
  1477                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1478                                  QueryA20:
  1479                                  	push	bx
  1480                                  	push	ax
  1481                                  	;mov	ah,7
  1482                                  	mov	ah,XMM_QUERY_A20
  1483                                  	;call	cs:XMMCallAddr
  1484                                  	call	far [cs:XMMCallAddr]
  1485                                  	or	ax,ax
  1486                                  	pop	ax
  1487                                  	pop	bx
  1488                                  	; 16/04/2023
  1489                                  	jnz	short QA20_ON	; cf = 0	; AX = 1 => ON
  1490                                  	stc					; OFF
  1491                                  	;retn
  1492                                  QA20_ON:
  1493                                  	;clc					; ON
  1494                                  	retn
  1495                                  %endif
  1496                                  
  1497                                  ; ----------------------------------------------------------------------------
  1498                                  
  1499                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1500                                  %if 0
  1501                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1502                                  EnableA20:
  1503                                  	push	bx
  1504                                  	push	ax
  1505                                  	;mov	ah,5
  1506                                  	mov	ah,XMM_LOCAL_ENABLE_A20
  1507                                  	;call	cs:XMMCallAddr
  1508                                  	call	far [cs:XMMCallAddr]
  1509                                  	or	ax,ax
  1510                                  	jz	short XMMerror			; AX = 0 fatal error
  1511                                  	pop	ax
  1512                                  	pop	bx
  1513                                  	retn
  1514                                  ;If we get an error, we just loop forever
  1515                                  XMMerror:
  1516                                  	jmp	short XMMerror
  1517                                  %endif
  1518                                  
  1519                                  ; -----------------------------------------------------------------------------
  1520                                  
  1521                                  HV_Extern   equ	1
  1522                                  HV_LoadHigh equ	1
  1523                                  HV_Stub	    equ	1
  1524                                  
  1525                                  	; 09/01/2023 - Retro DOS v4.0 (& 4.1)
  1526                                  
  1527                                  ;The Exec call has to be issued from the data segment. The reason for this 
  1528                                  ;is TSRs. When a TSR does a call to terminate and stay resident, the call
  1529                                  ;returns with all registers preserved and so all our segment registers are
  1530                                  ;still set up. However, if the TSR unloads itself later on, it still 
  1531                                  ;comes back here. In this case the segment registers and the stack are
  1532                                  ;not set up and random things can happen. The only way to setup all the 
  1533                                  ;registers is to use the cs value and this can only be done when we are in
  1534                                  ;the data segment ourselves. So, this piece of code had to be moved from
  1535                                  ;the code segment to the data segment.
  1536                                  
  1537                                  Issue_Exec_Call:
  1538 000000C8 CD21                    	int 	21h
  1539                                  
  1540                                  ;We disable interrupts while changing the stack because there is a bug in 
  1541                                  ;some old 8088 processors where interrupts are let through while ss & sp
  1542                                  ;are being changed.
  1543                                  
  1544 000000CA FA                      	cli
  1545 000000CB 0E                      	push	cs
  1546 000000CC 17                      	pop	ss
  1547                                  	;mov	sp,53Eh ; MSDOS 5.0 COMMAND.COM RESGROUP:01DFh
  1548                                  	;mov	sp,offset DATARES:RStack ; stack is set up
  1549 000000CD BC[2004]                	mov	sp,RStack		; stack is set up
  1550                                  	
  1551                                  	; 20/04/2023
  1552                                  	;sti
  1553                                  	;push	cs
  1554                                  	;pop	ds			; ds = DATARES
  1555                                  
  1556                                  ; M009; Restore UMB state to that before Exec
  1557                                  
  1558                                  	;pushf				;    This call frees HIDDEN umb's,
  1559                                  	;call	UnHideUMBs		; <- restores the memory-allocation
  1560                                  	;popf				;    strategy and link state, as app.
  1561                                  
  1562                                  	; 09/01/2023 - Retro DOS v4.0
  1563                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:01E2h
  1564                                  	; ----------------------
  1565 000000D0 FB                      	sti
  1566                                  	
  1567 000000D1 0E                      	push    cs
  1568 000000D2 1F                      	pop     ds
  1569 000000D3 9C                      	pushf
  1570                                  	;mov	al,[cs:fInHigh]
  1571                                  	; 18/04/2023
  1572 000000D4 A0[2204]                	mov	al,[fInHigh]
  1573 000000D7 A880                    	test	al,80h
  1574 000000D9 7406                    	jz      short uhu10
  1575 000000DB 247F                    	and     al,7Fh
  1576                                  	;;call	cs:UMBOff_Entry
  1577                                  	;call	far [cs:UMBOff_Entry]
  1578 000000DD FF1E[2C00]              	call	far [UMBOff_Entry]
  1579                                  uhu10:
  1580                                  	;and	byte [cs:fInHigh],7Fh
  1581                                  	; 18/04/2023
  1582 000000E1 8026[2204]7F            	and	byte [fInHigh],7Fh
  1583 000000E6 9D                      	popf
  1584                                  	; ----------------------
  1585                                  
  1586                                  ;We now jump to the stub trap which returns us to the resident code. All
  1587                                  ;flags are preserved by the stub code.
  1588                                  
  1589 000000E7 E976FF                  	jmp	Exec_Trap
  1590                                  
  1591                                  ; ----------------------------------------------------------------------------
  1592                                  ; RDATA.ASM, MSDOS 6.0, 1992
  1593                                  ; ----------------------------------------------------------------------------
  1594                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1595                                  
  1596                                  ;***	Message substitution blocks
  1597                                  
  1598                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:01FFh (DATARES:01FFh)
  1599                                  
  1600                                  ;BlkDevErrSubst	label	byte
  1601                                  ;BlkDevErrRw	subst	<STRING,>		; "reading" or "writing"
  1602                                  ;		subst	<CHAR,DATARES:DrvLet>	; block device drive letter
  1603                                  
  1604 000000EA 02                      BlkDevErrSubst: db	2
  1605 000000EB 0000                    BlkDevErrRw:	dw	0
  1606 000000ED 01                      		db	1
  1607 000000EE [F000]                  		dw	DrvLet
  1608                                  
  1609 000000F0 41                      DrvLet:		db	'A'			; drive letter
  1610                                  
  1611                                  
  1612                                  ;CharDevErrSubst label	byte
  1613                                  ;CharDevErrRw	subst	<STRING,>		 ; "reading" or "writing"
  1614                                  ;CharDevErrDev	subst	<STRING,DATARES:DevName> ; character device name
  1615                                  
  1616 000000F1 02                      CharDevErrSubst: db	2
  1617 000000F2 0000                    CharDevErrRw:	dw	0
  1618 000000F4 02                      		db	2
  1619 000000F5 [0301]                  		dw	DevName
  1620                                  
  1621                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0318h
  1622                                  ;DevName:	times 8 db 0  ; db 8 dup (?),0	; device name, asciiz
  1623                                  ;		db	0
  1624                                  
  1625                                  ;NeedVolSubst	label	byte
  1626                                  ;		subst	<STRING,DATARES:VolName> ; volume name
  1627                                  ;		subst	<HEX,DATARES:VolSer+2>	 ; hi word of serial #
  1628                                  ;		subst	<HEX,DATARES:VolSer>	 ; lo word of serial #
  1629                                  
  1630 000000F7 02                      NeedVolSubst:	db	2
  1631 000000F8 [0001]                  		dw	VolName
  1632 000000FA 03                      		db	3
  1633 000000FB [0E01]                  		dw	VolSer+2
  1634 000000FD 03                      		db	3
  1635 000000FE [0C01]                  		dw	VolSer
  1636                                  
  1637                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0321h
  1638                                  	; NOTE:	VolName and VolSer must be adjacent
  1639                                  ;VolName:	times 11 db 0 ; db 11 dup (?),0	; volume name
  1640                                  		; 18/07/2024
  1641 00000100 000000                  VolName:	db	3 dup(0)
  1642 00000103 0000000000000000        DevName:	db	8 dup(0)
  1643                                  	
  1644 0000010B 00                      		db	0
  1645 0000010C 00000000                VolSer:		dd	0			; volume serial #
  1646                                  
  1647 00000110 00                      CDevAt:		db	0
  1648                                  
  1649                                  ;BadFatSubst	label	byte
  1650                                  ;		subst	<CHAR,DATARES:DrvLet>	; drive letter
  1651                                  
  1652 00000111 01                      BadFatSubst:	db	1
  1653 00000112 [F000]                  		dw	DrvLet
  1654                                  
  1655                                  ;PutBackSubst	label	byte
  1656                                  ;PutBackComSpec	subst	<STRING,>		  ; comspec string
  1657                                  ;		subst	<CHAR,DATARES:PutBackDrv> ; drive to put it in
  1658                                  
  1659 00000114 02                      PutBackSubst:	db	2
  1660 00000115 0000                    PutBackComSpec:	dw	0
  1661 00000117 01                      		db	1
  1662 00000118 [1A01]                  		dw	PutBackDrv
  1663                                  
  1664 0000011A 20                      PutBackDrv:	db	' '			; drive letter
  1665                                  
  1666                                  ;ExecErrSubst	subst	<STRING,DATARES:SafePathBuffer>
  1667                                  
  1668 0000011B 02                      ExecErrSubst:	db	2
  1669 0000011C [4B03]                  		dw	SafePathBuffer
  1670                                  
  1671 0000011E 00000000                NeedVol:	dd	0	; ptr to volume name from get ext err
  1672 00000122 00                      ErrType: 	db	0	; critical error message style, 0=old, 1=new
  1673                                  
  1674 00000123 00000000                Int_2e_Ret:	dd	0	; magic command executer return address
  1675 00000127 0000                    Save_Pdb:	dw	0
  1676 00000129 0000                    Parent:		dw	0
  1677 0000012B 00000000                OldTerm:	dd	0
  1678 0000012F 0000                    ErrCd_24:	dw	0
  1679 00000131 0000                    Handle01:	dw	0
  1680 00000133 00                      Loading:	db	0
  1681 00000134 0000                    Batch:		dw	0	; assume no batch mode initially
  1682                                  
  1683                                  ;;;;SR;
  1684                                  ;;;; This flag has been added for a gross hack introduced in batch processing. 
  1685                                  ;;;;We use it to indicate that this batch file has no CR-LF before EOF and that
  1686                                  ;;;;we need to fake the CR-LF for the line to be properly processed
  1687                                  ;;;;
  1688                                  ;;;BatchEOF:	db	0
  1689                                  
  1690                                  	; Bugbug: ComSpec should be 64+3+12+1?
  1691                                  	; What's this comspec_end about?
  1692 00000136 00<rep 40h>             ComSpec:	times 64 db 0 ; db 64 dup (0)
  1693 00000176 0000                    ComSpec_End:	dw	0
  1694                                  
  1695                                  ;Trans		label	dword
  1696                                  ;		dw	TRANGROUP:Command
  1697                                  
  1698                                  Trans:		;dw	12Ch
  1699                                  		; MSDOS 5.0 COMMAND.COM RESGROUP:0296h (DATARES:0296h)
  1700 00000178 [2C01]                  		dw	COMMAND ; 16/04/2023
  1701 0000017A 0000                    TrnSeg:		dw	0
  1702                                  
  1703 0000017C 00                      TrnMvFlg:	db	0	; set if transient portion has been moved
  1704                                  
  1705 0000017D 00                      In_Batch:	db	0	; set if we are in batch processing mode
  1706 0000017E 00                      Batch_Abort:	db	0	; set if user wants to abort from batch mode
  1707                                  
  1708 0000017F 00                      ComDrv:		db	0	; drive spec to load autoexec and command
  1709 00000180 0000                    MemSiz:		dw	0
  1710 00000182 0000                    Sum:		dw	0
  1711 00000184 01                      ExtCom:		db	1	; for init, pretend just did an external
  1712 00000185 0000                    RetCode: 	dw	0
  1713 00000187 00                      Crit_Err_Info:	db	0	; hold critical error flags for r,i,f
  1714                                  
  1715                                  
  1716                                  ; The echo flag needs to be pushed and popped around pipes and batch files.
  1717                                  ; We implement this as a bit queue that is shr/shl for push and pop.
  1718                                  
  1719 00000188 01                      EchoFlag:	db	00000001b ; low bit true => echo commands
  1720 00000189 01                      Suppress:	db	1	; used for echo, 1=echo line
  1721 0000018A 0000                    Io_Save: 	dw	0
  1722 0000018C 00                      RestDir: 	db	0
  1723 0000018D 00                      PermCom: 	db	0	; true => permanent command
  1724                                  ;SemiPermCom:	dw      -1	; MSDOS 6.0 COMMAND.COM 
  1725                                  				; true => semi-permanent command (/K)
  1726 0000018E 0000                    SingleCom:	dw	0	; true => single command version
  1727 00000190 FFFF                    VerVal:		dw	-1
  1728 00000192 00                      fFail:		db	0	; true => fail all int 24s
  1729 00000193 00                      IfFlag:		db	0	; true => IF statement in progress
  1730                                  
  1731 00000194 00                      ForFlag: 	db	0	; true => FOR statement in progress
  1732 00000195 0000                    ForPtr:		dw	0
  1733                                  
  1734 00000197 0000                    Nest:		dw	0	; nested batch file counter
  1735 00000199 00                      Call_Flag:	db	0	; no CALL (batch command) in progress
  1736 0000019A 00                      Call_Batch_Flag: db	0
  1737 0000019B 0000                    Next_Batch:	dw	0	; address of next batch segment
  1738 0000019D 00                      NullFlag:	db	0	; flag if no command on command line
  1739 0000019E 00<rep 5h>              FUCase_Addr:	times 5 db 0 ; db 5 dup (0)
  1740                                  				; buffer for file ucase address
  1741                                  ; Bugbug: don't need crit_msg_ anymore?
  1742                                  
  1743 000001A3 0000                    Crit_Msg_Off:	dw	0	; saved critical error message offset
  1744 000001A5 0000                    Crit_Msg_Seg:	dw	0	; saved critical error message segment
  1745 000001A7 0000                    Dbcs_Vector_Addr: dw	0	; DBCS vector offset
  1746 000001A9 0000                    		 dw	0	; DBCS vector segment
  1747 000001AB 0000                    Append_State:	dw	0	; current state of append
  1748                                  				;  (if Append_Flag is set)
  1749 000001AD 00                      Append_Flag:	db	0	; set if append state is valid
  1750 000001AE 00                      Re_Out_App:	db	0
  1751 000001AF 00<rep 50h>             Re_OutStr:	times 64+3+13 db 0 ; db 64+3+13 dup (?)
  1752                                  
  1753                                  ; We flag the state of COMMAND in order to correctly handle the ^Cs at
  1754                                  ; various times. Here is the breakdown:
  1755                                  ;
  1756                                  ;   INITINIT	We are in the init code.
  1757                                  ;   INITSPECIAL We are in the date/time prompt
  1758                                  ;   INITCTRLC	We are handling a ^C already.
  1759                                  ;
  1760                                  ; If we get a ^C in the initialization but not in the date/time prompt, we
  1761                                  ; ignore the ^C. This is so the system calls work on nested commands.
  1762                                  ;
  1763                                  ; If we are in the date/time prompt at initialization, we stuff the user's
  1764                                  ; input buffer with a CR to pretend an empty response.
  1765                                  ;
  1766                                  ; If we are already handling a ^C, we set the carry bit and return to the user
  1767                                  ; (ourselves). We can then detect the carry set and properly retry the
  1768                                  ; operation.
  1769                                  
  1770                                  InitFlag:	;db	1
  1771 000001FF 01                      		db	INITINIT
  1772                                  
  1773                                  ; Note: these two bytes are referenced as a word
  1774 00000200 00                      PipeFlag:	db	0
  1775 00000201 00                      PipeFiles:	db	0
  1776                                  
  1777                                  ; (rdata.asm, msdos 6.0, 1992)
  1778                                  ; ----------------------------------------------------------------------------
  1779                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:0320h (DATARES:0320h)
  1780                                  
  1781                                  
  1782                                  ;;SR
  1783                                  ;; Pipe1 & Pipe2 now need to store full-fledged pathnames
  1784                                  ;;
  1785                                  ;
  1786                                  ;; Bugbug: can we find any way around maintaining these
  1787                                  ;; large buffers?
  1788                                  ;
  1789                                  ;Pipe1		db	67+12 dup (?)
  1790                                  ;Pipe2		db	67+12 dup (?)
  1791                                  ;
  1792                                  ;PipePtr 	dw	?
  1793                                  ;
  1794                                  ;PipeStr 	db	129 dup (?)
  1795                                  ;
  1796                                  ;EndPipe	label	byte	; marks end of buffers; M004
  1797                                  ;
  1798                                  ;;SR;
  1799                                  ;; We can move our EndInit code into above buffers. This way, the code will
  1800                                  ;;automatically be discarded after init.
  1801                                  ;;
  1802                                  ;; M004; We overlap our code with the Pipe buffers located above by changing
  1803                                  ;; M004; the origin.
  1804                                  ;;
  1805                                  ;	ORG	Pipe1	; M004
  1806                                  ;
  1807                                  ;; Bugbug: really need a procedure header for EndInit, describing
  1808                                  ;; what it expects, what it does.
  1809                                  ;
  1810                                  
  1811                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  1812                                  
  1813                                  Pipe1	equ	EndInit
  1814                                  Pipe2	equ	Pipe1+67+12
  1815                                  PipePtr	equ	Pipe2+67+12
  1816                                  PipeStr	equ	PipePtr+2
  1817                                  EndPipe	equ	PipeStr+129	; EndInit+289
  1818                                  
  1819                                  ; Bugbug: really need a procedure header for EndInit, describing
  1820                                  ; what it expects, what it does.
  1821                                  
  1822                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0320h 
  1823                                  
  1824                                  EndInit:
  1825 00000202 1E                      	push	ds
  1826 00000203 06                      	push	es		; save segments
  1827 00000204 0E                      	push	cs
  1828 00000205 1F                      	pop	ds		
  1829                                  	;assume	ds:RESGROUP
  1830                                  
  1831                                  ; M004; Save size of transient here before INIT segment is deallocated
  1832                                  
  1833 00000206 8B16[7E1C]              	mov	dx,[TrnSize]		; M004
  1834                                  ;M027
  1835                                  ; These variables are also defined in the INIT segment and need to be saved
  1836                                  ;before we resize
  1837                                  ;
  1838 0000020A A1[721C]                	mov	ax,[OldEnv]	; Old Environment seg ;M027
  1839 0000020D 8B1E[6E1C]              	mov	bx,[EnvSiz]	; Size of new environment ;M027
  1840 00000211 8B0E[741C]              	mov	cx,[UsedEnv]	; Size of old environment ;M027
  1841 00000215 50                      	push	ax		; Save all these values ;M027
  1842 00000216 53                      	push	bx		; M027
  1843 00000217 51                      	push	cx		; M027
  1844                                  
  1845                                  
  1846                                  ; Bugbug: push ds, pop es here.
  1847                                  	;mov	bx,ds
  1848                                  	;mov	es,bx		; es = RESGROUP
  1849                                  	; 09/01/2023
  1850 00000218 1E                      	push	ds
  1851 00000219 07                      	pop	es
  1852                                  
  1853                                  ;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  1854                                  ; code + data for low COMMAND
  1855                                  
  1856 0000021A 8B1E[A103]              	mov	bx,[ResSize]	; Total size of resident
  1857 0000021E B44A                    	mov	ah,4Ah
  1858                                  	;mov	ah,SETBLOCK
  1859 00000220 CD21                    	int	21h		; Set block to resident size
  1860                                  
  1861                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  1862                                  		; ES = segment address of block to change
  1863                                  		; BX = new size in paragraphs
  1864                                  
  1865                                  ;We check if this is for autoexec.bat (PermCom = 1). If so, we then
  1866                                  ;allocate a new batch segment, copy the old one into new batchseg and free
  1867                                  ;the old batchseg. Remember that the old batchseg was allocated on top of the
  1868                                  ;transient and we will leave a big hole if TSRs are loaded by autoexec.bat
  1869                                  ;
  1870                                  ; Bugbug: also describe why we alloc & copy batch seg BEFORE environment.
  1871                                  	
  1872 00000222 803E[8D01]01            	cmp	byte [PermCom],1 ; permanent command.com?
  1873 00000227 7530                    	jne	short adjust_env ; no, do not free batchseg
  1874                                  
  1875 00000229 833E[3401]00            	cmp	word [Batch],0	 ; was there a valid batchseg?
  1876 0000022E 7429                    	je	short adjust_env ; no, dont juggle
  1877                                  
  1878                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0Fh)/16 ; batchseg size
  1879                                  	; 21/01/2023
  1880 00000230 BB0400                  	mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  1881                                  	;mov	bx,4	; 09/01/2023
  1882                                  			; (MSDOS 5.0 COMMAND COM RESGROUP:0350h)
  1883 00000233 B448                    	mov	ah,48h
  1884                                  	;mov	ah,ALLOC
  1885 00000235 CD21                    	int	21h
  1886                                  
  1887                                  		; DOS - 2+ - ALLOCATE MEMORY
  1888                                  		; BX = number of 16-byte paragraphs desired
  1889                                  
  1890                                  ; Bugbug: I just had a thought. If DOS or SHARE or somebody leaves
  1891                                  ; a hole, the batch segment COULD already be in the ideal place. We
  1892                                  ; could be making it worse! We're second-guessing where memory
  1893                                  ; allocations go, which might not be such a great idea. Is there
  1894                                  ; a strategy, short of doing something even worse like diddling
  1895                                  ; arena headers, where we can minimize the possibility of fragmentation
  1896                                  ; under all cases? Hmm..
  1897                                  	
  1898 00000237 7220                    	jc	short adjust_env ; no memory, use old batchseg
  1899                                  
  1900 00000239 8EC0                    	mov	es,ax		 ; es = New batch segment
  1901 0000023B 31FF                    	xor	di,di
  1902 0000023D 31F6                    	xor	si,si
  1903                                  
  1904 0000023F 1E                      	push	ds
  1905 00000240 8E1E[3401]              	mov	ds,[Batch]	 ; ds = Old Batch Segment
  1906                                  	;assume	ds:nothing
  1907                                  	;mov	cx,SIZE BatchSegment
  1908                                  	; 23/01/2023
  1909                                  	;mov	cx,BATCHSEGMENT.SIZE
  1910                                  	;;mov	cx,33	; 09/01/2023
  1911                                  	;		; (MSDOS 5.0 COMMAND COM RESGROUP:0364h)
  1912                                  	;
  1913                                  	;add	cx,16		 ; for the filename
  1914                                  	; 20/04/2023
  1915 00000244 B93100                  	mov	cx,BATCHSEGMENT.SIZE+16
  1916                                  
  1917                                  	; Bugbug: 16? Shouldn't this be a common equate or something?
  1918                                  	; It's sure be bad if we copied more bytes than the batch segment
  1919                                  	; holds!
  1920                                  	
  1921 00000247 FC                      	cld
  1922 00000248 F3A4                    	rep	movsb
  1923 0000024A 1F                      	pop	ds
  1924                                  	;assume	ds:RESGROUP
  1925                                  
  1926 0000024B 8CC1                    	mov	cx,es		; save new batch segment 
  1927 0000024D 8E06[3401]              	mov	es,[Batch]
  1928 00000251 B449                    	mov	ah,49h
  1929                                  	;mov	ah,DEALLOC
  1930 00000253 CD21                    	int	21h		; free the old batch segment
  1931                                  
  1932                                  	; Bugbug: should we check for error?
  1933                                  
  1934 00000255 890E[3401]              	mov	[Batch],cx	; store new batch segment address
  1935                                  
  1936                                  adjust_env:
  1937 00000259 59                      	pop	cx		; cx = size of old env ;M027
  1938 0000025A 5B                      	pop	bx		; bx = size of new env needed ;M027
  1939 0000025B 5D                      	pop	bp		; bp = old env seg ;M027
  1940                                  
  1941                                  ;Allocate the correct size for the environment
  1942                                  
  1943 0000025C B448                    	mov	ah,48h
  1944                                  	;mov	ah,ALLOC
  1945 0000025E CD21                    	int	21h		; get memory
  1946 00000260 7264                    	jc	short nomem_err	; out of memory,signal error
  1947                                  	
  1948                                  	; Bugbug: why not continue, leaving environment where it is?
  1949                                  
  1950 00000262 A3[2703]                	mov	[EnvirSeg],ax	; Store new environment segment
  1951                                  	;;mov	[ds:2Ch],ax
  1952                                  	;mov	[2Ch],ax
  1953                                  	;mov	[PDB_Environ],ax ; Put new env seg in PSP
  1954 00000265 A32C00                  	mov	[PDB.ENVIRON],ax
  1955 00000268 8EC0                    	mov	es,ax		; es = address of allocated memory
  1956                                  	;assume	es:nothing
  1957                                  
  1958                                  ;Copy the environment to the newly allocated segment
  1959                                  
  1960 0000026A 1E                      	push	ds
  1961 0000026B 8EDD                    	mov	ds,bp		; ds = Old environment segment
  1962                                  	;assume	ds:nothing
  1963                                  
  1964 0000026D 31F6                    	xor	si,si
  1965 0000026F 89F7                    	mov	di,si		; Start transfer from 0
  1966                                  
  1967 00000271 FC                      	cld
  1968 00000272 F3A4                    	rep	movsb		; Do the copy
  1969                                  
  1970 00000274 1F                      	pop	ds		; ds = RESGROUP
  1971                                  	;assume	ds:RESGROUP
  1972                                  
  1973                                  ; We have to free the old environment block if it was allocated by INIT
  1974                                  
  1975                                  ; Bugbug: is this only for the case when we were NOT passed an environment,
  1976                                  ; or does it also apply to passed environments?
  1977                                  
  1978                                  ;M036
  1979                                  ; Free up old env segment always because this is a copy passed by Exec and
  1980                                  ; takes up memory that is never used
  1981                                  
  1982                                  ;M044
  1983                                  ; Go back to the old strategy of not freeing the environment. Freeing it leaves
  1984                                  ; a hole behind that Ventura does not like. Basically, Ventura gives strange
  1985                                  ; errors if it gets a memory alloc that it is below its load segment. The
  1986                                  ; freed environment creates a large enough hole for some of its allocs to fit
  1987                                  ; in
  1988                                  
  1989                                  	;cmp	byte [AllocedEnv],0 ; has env been allocated by INIT?
  1990                                          ;je	short no_free	    ; no, do not free it
  1991                                  	; 21/01/2023
  1992                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0398h
  1993 00000275 803E[521C]00            	cmp	byte [AllocedEnv],0 ; flag - old environment segment
  1994 0000027A 7506                    	jne	short no_free 
  1995                                  
  1996 0000027C 8EC5                    	mov	es,bp
  1997 0000027E B449                    	mov	ah,49h
  1998                                  	;mov	ah,DEALLOC
  1999 00000280 CD21                    	int	21h		    ; Free it
  2000                                  no_free:
  2001                                  
  2002                                  ; M004; Start of changes
  2003                                  
  2004                                  ; Move the transient now. We will allocate the biggest block available
  2005                                  ; now and move the transient to the top of the block. We will then
  2006                                  ; deallocate this block. When the resident starts executing, it will
  2007                                  ; hopefully allocate this block again and find the transient intact.
  2008                                  
  2009 00000282 C606[7C01]01            	mov	byte [TrnMvFlg],1 ; Indicate that transient has been moved
  2010 00000287 06                      	push	es
  2011                                  	;;mov	si,offset ResGroup:TranStart
  2012                                  	; 09/01/2023
  2013                                  	;mov	si,2320h	; MSDOS 5.0 COMMAND.COM RESGROUP:03ABh
  2014 00000288 BE0022                  	mov	si,TRANSTART	; (End of the resident portion)
  2015                                  	;mov	di,0
  2016 0000028B 31FF                    	xor	di,di ; 0
  2017                                  	;;mov	cx,offset TranGroup:TranSpaceEnd ; size to move
  2018                                  	;mov	cx,98C5h
  2019 0000028D B97395                  	mov	cx,TRANSPACEEND
  2020                                  	
  2021                                  ; Find the largest block available
  2022                                  
  2023 00000290 BBFFFF                  	mov	bx,0FFFFh
  2024 00000293 B448                    	mov	ah,48h
  2025                                  	;mov	ah,ALLOC
  2026 00000295 CD21                    	int	21h
  2027                                  
  2028                                  ; dx = size of transient saved previously 
  2029                                  
  2030 00000297 39D3                    	cmp	bx,dx		; enough memory?
  2031 00000299 722B                    	jb	short nomem_err	; not enough memory for transient
  2032                                  
  2033 0000029B B448                    	mov	ah,48h
  2034                                  	;mov	ah,ALLOC
  2035 0000029D CD21                    	int	21h		; get the largest block
  2036 0000029F 7225                    	jc	short nomem_err	; something is really screwed up
  2037                                  
  2038 000002A1 50                      	push	ax		; save memory address
  2039 000002A2 01D8                    	add	ax,bx		; ax = top of my memory block
  2040 000002A4 29D0                    	sub	ax,dx		; less size of transient
  2041 000002A6 A3[7A01]                	mov	[TrnSeg],ax	; save transient segment
  2042 000002A9 8EC0                    	mov	es,ax		;
  2043 000002AB 58                      	pop	ax		; restore our seg addr
  2044                                  
  2045                                  ; Everything is set for a move. We need to move in the reverse direction to
  2046                                  ; make sure we dont overwrite ourselves while copying
  2047                                  
  2048 000002AC 01CE                    	add	si,cx
  2049 000002AE 4E                      	dec	si
  2050 000002AF 01CF                    	add	di,cx
  2051 000002B1 4F                      	dec	di
  2052 000002B2 FD                      	std
  2053 000002B3 F3A4                    	rep	movsb
  2054 000002B5 FC                      	cld
  2055                                  
  2056                                  ; Now we have to free up this block so that resident can get hold of it
  2057                                  
  2058 000002B6 8EC0                    	mov	es,ax
  2059 000002B8 B449                    	mov	ah,49h
  2060                                  	;mov	ah,DEALLOC
  2061 000002BA CD21                    	int	21h		; release the memory block
  2062                                  
  2063                                  ; M004; End of changes
  2064                                  
  2065                                  	;mov	InitFlag,FALSE	; indicate INIT is done
  2066                                  	; 09/01/2023
  2067 000002BC C606[FF01]00            	mov	byte [InitFlag],0	
  2068                                  
  2069 000002C1 07                      	pop	es
  2070 000002C2 1F                      	pop	ds
  2071                                  	;assume	ds:nothing
  2072                                  	
  2073                                  	; Bugbug: did we need to save & restore seg reg's during EndInit?
  2074                                  	
  2075 000002C3 E9B8FD                  	jmp	LodCom_Trap	; allocate transient
  2076                                  
  2077                                  nomem_err:
  2078                                  
  2079                                  ;We call the error routine which will never return. It will either exit
  2080                                  ;with an error ( if not the first COMMAND ) or just hang after an error 
  2081                                  ;message ( if first COMMAND )
  2082                                  
  2083 000002C6 E9F518                  	jmp	Alloc_error
  2084                                  
  2085                                  ;EndCodeInit:	; label	byte		; M004
  2086                                  
  2087                                  	; 16/04/2023
  2088                                  	EndCodeInit equ $
  2089                                  
  2090                                  ;; M004; Check if the EndInit code will fit into the Pipe buffers above.
  2091                                  ;; M004; If not, we signal an assembly error
  2092                                  ;
  2093                                  ;IF2
  2094                                  ;	IF ($ GT EndPipe)
  2095                                  ;		.err
  2096                                  ;		%out	"ENDINIT CODE TOO BIG"
  2097                                  ;	ENDIF
  2098                                  ;ENDIF
  2099                                  
  2100                                  ;; M004; Set the origin back to what it was at the end of the buffers
  2101                                  ;;
  2102                                  ;		ORG	EndPipe		; M004
  2103                                  
  2104                                  ; 09/01/2023
  2105                                  
  2106                                  ; MSDOS 5.0 COMMAND.COM - CODERES:03EDh
  2107                                  ;	times 84 db 0	; db (EndPipe-EndCodeInit) dup(0)
  2108                                  
  2109                                  ; 16/04/2023
  2110                                  	FillBytes equ EndPipe - EndCodeInit
  2111                                  
  2112                                  ;%if EndCodeInit<EndPipe ; if (EndCodeInit < (EndInit+289))
  2113                                  ; 16/04/2023
  2114                                  %if FillBytes>0
  2115                                  	;times EndPipe - EndCodeInit db 0
  2116 000002C9 00<rep 5Ah>             	times FillBytes db 0
  2117                                  %endif
  2118                                  
  2119                                  ; 09/01/2023 - Retrodos v4.0 (& v4.1)
  2120                                  ; MSDOS 5.0 COMMAND.COM - CODERES:0441h ; EndInit+289
  2121                                  
  2122                                  ;InPipePtr	dw	offset DATARES:Pipe1	; 320h
  2123                                  ;OutPipePtr	dw	offset DATARES:Pipe2	; 36Fh
  2124                                  
  2125 00000323 [0202]                  InPipePtr:	dw	Pipe1 ; 320h for MSDOS 5.0 COMMAND.COM
  2126 00000325 [5102]                  OutPipePtr:	dw	Pipe2 ; 36Fh for MSDOS 5.0 COMMAND.COM
  2127                                  
  2128                                  Exec_Block:	; label	byte	; the data block for exec calls
  2129 00000327 0000                    EnvirSeg:	dw	0
  2130                                  Com_Ptr:	; label	dword
  2131 00000329 8000                    		dw	80h	; point at unformatted parameters
  2132 0000032B 0000                    		dw	0
  2133                                  Com_Fcb1:	; label	dword
  2134 0000032D 5C00                    		dw	5Ch
  2135 0000032F 0000                    		dw	0
  2136                                  Com_Fcb2:	; label	dword
  2137 00000331 6C00                    		dw	6Ch
  2138 00000333 0000                    		dw	0
  2139                                  
  2140                                  ; variables passed to transient
  2141                                  TranVars:	; label	byte
  2142                                  		;dw	offset DATARES:HeadFix_Trap
  2143 00000335 [9200]                  		dw	HeadFix_Trap
  2144 00000337 0000                    MySeg:		dw	0	; put our own segment here
  2145 00000339 0000                    LTpa:		dw	0	; will store tpa segment here
  2146 0000033B 2F                      RSwitChar:	db	"/"
  2147 0000033C 5C                      RDirChar:	db	"\"
  2148                                  		;dw	offset DATARES:Issue_Exec_Call
  2149 0000033D [C800]                  		dw	Issue_Exec_Call
  2150 0000033F 0000                    MySeg1:		dw	0
  2151                                  		;dw	offset DATARES:RemCheck_Trap
  2152 00000341 [6A00]                  		dw	RemCheck_Trap
  2153 00000343 0000                    MySeg2:		dw	0
  2154 00000345 0000                    ResTest: 	dw	0
  2155 00000347 0000                    Res_Tpa:	dw	0	; original tpa (not rounded to 64k)
  2156                                  TranVarEnd:	; label	byte
  2157                                  
  2158 00000349 0000                    OldErrNo:	dw	0
  2159                                  
  2160                                  ;* NOTE: MsgBuffer and SafePathBuffer use the same memory.
  2161                                  ;  MsgBuffer is only used while a command is being executed.
  2162                                  ;  SafePathBuffer is no longer needed, since it is used for
  2163                                  ;  unsuccessful program launches.
  2164                                  
  2165                                  MsgBuffer:	; label	byte	; buffer for messages from disk
  2166                                  SafePathBuffer: ; label	byte	; resident pathname for EXEC
  2167                                  	;Bugbug: Why so big a buffer?
  2168                                  		;db	64+3+13 dup (0)	; path + 'd:\' 'file.ext' + null
  2169 0000034B 00<rep 50h>             		times	64+3+13 db 0		
  2170                                  
  2171                                  LENMSGORPATHBUF	equ $ - MsgBuffer
  2172                                  
  2173 0000039B 00000000                Int2fHandler:	dd	0	; address of next int 2f handler
  2174 0000039F 0000                    ResMsgEnd:	dw	0	; holds offset of msg end (end of resident)
  2175                                  
  2176                                  ;SR;
  2177                                  ; The three vars below have been added for a pure COMMAND.COM
  2178                                  
  2179 000003A1 0000                    ResSize:	dw	0
  2180                                  
  2181                                  ;SR;
  2182                                  ; Moved the stack here from the code segment
  2183                                  ;
  2184                                  ; bugbug: Why this odd stack size? And what should stack size be?
  2185                                  	
  2186                                  		;db	(80h - 3) dup (?)
  2187 000003A3 90                      align 2
  2188 000003A4 00<rep 7Ch>             		times	124 db 0		
  2189                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:053Eh (offset RStack)
  2190                                  RStack:		; label	word
  2191 00000420 0000                    OldDS:		dw	0	; keeps old ds value when jumping to
  2192                                  				; resident code segments
  2193                                  ;LoadHiFlg	db	0	; Flag set to 1 if UMB loading enabled ; M003
  2194                                  
  2195                                  ; include highvar.inc		; Add variables for 6.0 loadhigh functionality
  2196                                  ; -------------------------------
  2197                                  
  2198                                  ; fInHigh  - Is set to 1 during HideUMBs(), and back to zero in UnHideUMBs().
  2199                                  ; fUmbTiny - Is set to 1 if the user has specified /S on the command line.
  2200                                  ; SegLoad  - Segment address for first UMB specified; set automatically.
  2201                                  ; UmbLoad  - The load UMB number; for example, this is 3 if the user has
  2202                                  ;            given a command-line like "/L:3,500;4"
  2203                                  ; UmbUsed  - An array of characters, each of which is 1 if the UMB
  2204                                  ;            matching its index number was specified on the command-line;
  2205                                  ;            for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
  2206                                  ;            will be set to 1. All others will be set to 0.
  2207                                  ; UmbSize  - An array of words, each of which is interpreted as a size
  2208                                  ;            specified by the user for a UMB (in the above example, all
  2209                                  ;            elements would be zero save UmbSize[3], which would be 500.
  2210                                  ; fm_umb   - Set to the old UMB link-state (0x80 or 0x00)
  2211                                  ; fm_strat - Set to the old memory-allocation strategy (0$00000???)
  2212                                  ; fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
  2213                                  ;            for details).
  2214                                  
  2215                                  ; - MSDOS 6.0 COMMAND.COM -
  2216                                  ;; To keep track of which UMBs were specified on the DH/LH command lines, and
  2217                                  ;; to keep track of the minimum sizes given for each, there're two arrays kept
  2218                                  ;; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
  2219                                  ;; big. 16 should be around 14 too many for most users, so there's no expected
  2220                                  ;; space problem (it's just such a nice round number, eh?).
  2221                                  
  2222                                  ;MAXUMB	equ	16
  2223                                  
  2224                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2225                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0540h (DATARES:0540h)
  2226                                  
  2227 00000422 00                      fInHigh:	db	0
  2228                                  
  2229                                  ; MSDOS 6.0 COMMAND.COM
  2230                                  ;fUmbTiny:	db	0
  2231                                  ;SegLoad:	dw	0
  2232                                  ;UmbLoad:	db	0
  2233                                  ;UmbUsed:	db	times MAXUMB db 0 ; db MAXUMB dup (?)
  2234                                  ;UmbSize:	dw	times MAXUMB dw 0 ; dw MAXUMB dup (?)
  2235                                  ;fm_umb:	db	0
  2236                                  ;fm_strat:	db	0
  2237                                  ;fm_argc:	db	0
  2238                                  
  2239                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
  2240                                  ; UmbLoad is set to the UMB number given.
  2241                                  
  2242                                  ;*** MESSAGES
  2243                                  ;    and other translatable text
  2244                                  
  2245                                  ; include comrmsg.inc	; M00
  2246                                  ; ------------------------------
  2247                                  
  2248                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2249                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0541h (DATARES:0541h)
  2250                                  
  2251 00000423 41                      ABORT_CHAR:	db 'A'
  2252 00000424 52                      RETRY_CHAR:	db 'R'
  2253 00000425 49                      IGNORE_CHAR:	db 'I'
  2254 00000426 46                      FAIL_CHAR:	db 'F'
  2255 00000427 59                      YES_CHAR:	db 'Y'
  2256 00000428 4E                      NO_CHAR:	db 'N'
  2257 00000429 05                      REQ_ABORT:	db 5
  2258 0000042A 41626F7274              		db 'Abort'
  2259 0000042F 07                      REQ_RETRY:	db 7
  2260 00000430 2C205265747279          		db ', Retry'
  2261 00000437 08                      REQ_IGNORE:	db 8
  2262 00000438 2C2049676E6F7265        		db ', Ignore'
  2263 00000440 06                      REQ_FAIL:	db 6
  2264 00000441 2C204661696C            		db ', Fail'
  2265 00000447 01                      REQ_END:	db 1
  2266 00000448 3F                      		db '?'
  2267 00000449 08                      MREAD:		db 8
  2268 0000044A 72656164696E6700        		db 'reading', 0
  2269 00000452 08                      MWRITE:		db 8
  2270 00000453 77726974696E6700        		db 'writing', 0
  2271 0000045B 0E                      MDRIVE:		db 14
  2272 0000045C 202531206472697665-     		db ' %1 drive %2',0Dh,0Ah
  2272 00000465 2025320D0A         
  2273 0000046A 0F                      MDEVICE:	db 15
  2274 0000046B 202531206465766963-     		db ' %1 device %2',0Dh,0Ah
  2274 00000474 652025320D0A       
  2275 0000047A 26                      MVOLSERIAL:	db 38
  2276 0000047B 506C6561736520696E-     		db 'Please insert volume %1 serial %2-%3',0Dh,0Ah
  2276 00000484 7365727420766F6C75-
  2276 0000048D 6D6520253120736572-
  2276 00000496 69616C2025322D2533-
  2276 0000049F 0D0A               
  2277 000004A1 25                      BADFATMSG:	db 37
  2278 000004A2 46696C6520616C6C6F-     		db 'File allocation table bad, drive %1',0Dh,0Ah
  2278 000004AB 636174696F6E207461-
  2278 000004B4 626C65206261642C20-
  2278 000004BD 64726976652025310D-
  2278 000004C6 0A                 
  2279 000004C7 15                      COMBAD:		db 21
  2280 000004C8 496E76616C69642043-     		db 'Invalid COMMAND.COM',0Dh,0Ah
  2280 000004D1 4F4D4D414E442E434F-
  2280 000004DA 4D0D0A             
  2281 000004DD 21                      PUTBACKMSG:	db 33
  2282 000004DE 496E73657274206469-     		db 'Insert disk with %1 in drive %2',0Dh,0Ah
  2282 000004E7 736B20776974682025-
  2282 000004F0 3120696E2064726976-
  2282 000004F9 652025320D0A       
  2283 000004FF 21                      PROMPT:		db 33
  2284 00000500 507265737320616E79-     		db 'Press any key to continue . . .',0Dh,0Ah
  2284 00000509 206B657920746F2063-
  2284 00000512 6F6E74696E7565202E-
  2284 0000051B 202E202E0D0A       
  2285 00000521 1C                      ENDBATMES:	db 28
  2286 00000522 0D0A                    		db 0Dh,0Ah
  2287 00000524 5465726D696E617465-     		db 'Terminate batch job (Y/N)?'
  2287 0000052D 206261746368206A6F-
  2287 00000536 622028592F4E293F   
  2288 0000053E 13                      EXECEMES:	db 19
  2289 0000053F 43616E6E6F74206578-     		db 'Cannot execute %1',0Dh,0Ah
  2289 00000548 65637574652025310D-
  2289 00000551 0A                 
  2290 00000552 13                      EXEBAD:		db 19
  2291 00000553 4572726F7220696E20-     		db 'Error in EXE file',0Dh,0Ah
  2291 0000055C 4558452066696C650D-
  2291 00000565 0A                 
  2292 00000566 22                      TOOBIG:		db 34
  2293 00000567 50726F6772616D2074-     		db 'Program too big to fit in memory',0Dh,0Ah
  2293 00000570 6F6F2062696720746F-
  2293 00000579 2066697420696E206D-
  2293 00000582 656D6F72790D0A     
  2294 00000589 16                      NOHANDMES:	db 22
  2295 0000058A 0D0A                    		db 0Dh,0Ah
  2296 0000058C 4E6F20667265652066-     		db 'No free file handles'
  2296 00000595 696C652068616E646C-
  2296 0000059E 6573               
  2297 000005A0 1A                      RBADNAM:	db 26
  2298 000005A1 42616420436F6D6D61-     		db 'Bad Command or file name',0Dh,0Ah
  2298 000005AA 6E64206F722066696C-
  2298 000005B3 65206E616D650D0A   
  2299                                  ACCDENIED:	; 14/01/2023
  2300                                  		; 10/01/2023
  2301                                  ACCDEN:		;db 14
  2302                                  		;db 'Access denied '
  2303                                  		; 19/07/2024 - PCDOS 7.1
  2304 000005BB 0D                      		db 13
  2305 000005BC 416363657373206465-     		db 'Access denied'
  2305 000005C5 6E696564           
  2306 000005C9 19                      BMEMMES:	db 25
  2307 000005CA 0D0A4D656D6F727920-     		db 0Dh,0Ah,'Memory allocation error'
  2307 000005D3 616C6C6F636174696F-
  2307 000005DC 6E206572726F72     
  2308 000005E3 26                      HALTMES:	db 38
  2309 000005E4 0D0A                    		db 0Dh,0Ah
  2310 000005E6 43616E6E6F74206C6F-     		db 'Cannot load COMMAND, system halted',0Dh,0Ah
  2310 000005EF 616420434F4D4D414E-
  2310 000005F8 442C2073797374656D-
  2310 00000601 2068616C7465640D0A 
  2311 0000060A 21                      FRETMES:	db 33
  2312 0000060B 0D0A                    		db 0Dh,0Ah,
  2313 0000060D 43616E6E6F74207374-     		db 'Cannot start COMMAND, exiting',0Dh,0Ah
  2313 00000616 61727420434F4D4D41-
  2313 0000061F 4E442C206578697469-
  2313 00000628 6E670D0A           
  2314 0000062C 2E                      PATRICIDE:	db 46
  2315 0000062D 0D0A                    		db 0Dh,0Ah
  2316 0000062F 546F70206C6576656C-     		db 'Top level process aborted, cannot continue'
  2316 00000638 2070726F6365737320-
  2316 00000641 61626F727465642C20-
  2316 0000064A 63616E6E6F7420636F-
  2316 00000653 6E74696E7565       
  2317 00000659 0D0A                    		db 0Dh,0Ah
  2318 0000065B 02                      NEWLINE:	db 2
  2319 0000065C 0D0A                    		db 0Dh, 0Ah
  2320                                  
  2321                                  ; 10/01/2023
  2322                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:077Dh
  2323                                  
  2324 0000065E [420B]                  MsgPtrLists:	dw EXTMSGPTRS		; extended error messages
  2325 00000660 0100                    		dw 1
  2326 00000662 [FD08]                  		dw PARSMSGPTRS		; parse	error messages
  2327 00000664 0100                    		dw 1
  2328 00000666 [420B]                  		dw EXTMSGPTRS		; critical error messages
  2329 00000668 0100                    		dw 1
  2330 0000066A 0000                    		dw 0			; File system error messages
  2331 0000066C 0000                    		dw 0			; are not supported.
  2332 0000066E [8800]                  		dw MsgRetrv_Trap	; disk retriever routine
  2333 00000670 0000                    MySeg3:		dw 0			; segment of retriever routine
  2334                                  
  2335                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0791h
  2336                                  
  2337 00000672 13                      CRMSG0:		db 19
  2338 00000673 57726974652070726F-     		db 'Write protect error'
  2338 0000067C 74656374206572726F-
  2338 00000685 72                 
  2339 00000686 0C                      CRMSG1:		db 12
  2340 00000687 496E76616C69642075-     		db 'Invalid unit'
  2340 00000690 6E6974             
  2341 00000693 09                      CRMSG2:		db 9
  2342 00000694 4E6F74207265616479      		db 'Not ready'
  2343 0000069D 16                      CRMSG3:		db 22
  2344 0000069E 496E76616C69642064-     		db 'Invalid device request'
  2344 000006A7 657669636520726571-
  2344 000006B0 75657374           
  2345 000006B4 0A                      CRMSG4:		db 10
  2346 000006B5 44617461206572726F-     		db 'Data error'
  2346 000006BE 72                 
  2347 000006BF 21                      CRMSG5:		db 33
  2348 000006C0 496E76616C69642064-     		db 'Invalid device request parameters'
  2348 000006C9 657669636520726571-
  2348 000006D2 756573742070617261-
  2348 000006DB 6D6574657273       
  2349 000006E1 0A                      CRMSG6:		db 10
  2350 000006E2 5365656B206572726F-     		db 'Seek error'
  2350 000006EB 72                 
  2351 000006EC 12                      CRMSG7:		db 18
  2352 000006ED 496E76616C6964206D-     		db 'Invalid media type'
  2352 000006F6 656469612074797065 
  2353 000006FF 10                      CRMSG8:		db 16
  2354 00000700 536563746F72206E6F-     		db 'Sector not found'
  2354 00000709 7420666F756E64     
  2355 00000710 1A                      CRMSG9:		db 26
  2356 00000711 5072696E746572206F-     		db 'Printer out of paper error'
  2356 0000071A 7574206F6620706170-
  2356 00000723 6572206572726F72   
  2357 0000072B 11                      CRMSG10:	db 17
  2358 0000072C 577269746520666175-     		db 'Write fault error'
  2358 00000735 6C74206572726F72   
  2359 0000073D 10                      CRMSG11:	db 16
  2360 0000073E 52656164206661756C-     		db 'Read fault error'
  2360 00000747 74206572726F72     
  2361 0000074E 0F                      CRMSG12:	db 15
  2362 0000074F 47656E6572616C2066-     		db 'General failure'
  2362 00000758 61696C757265       
  2363 0000075E 11                      CRMSG13:	db 17
  2364 0000075F 53686172696E672076-     		db 'Sharing violation'
  2364 00000768 696F6C6174696F6E   
  2365 00000770 0E                      CRMSG14:	db 14
  2366 00000771 4C6F636B2076696F6C-     		db 'Lock violation'
  2366 0000077A 6174696F6E         
  2367 0000077F 13                      CRMSG15:	db 19
  2368 00000780 496E76616C69642064-     		db 'Invalid disk change'
  2368 00000789 69736B206368616E67-
  2368 00000792 65                 
  2369 00000793 0F                      CRMSG16:	db 15
  2370 00000794 46434220756E617661-     		db 'FCB unavailable'
  2370 0000079D 696C61626C65       
  2371 000007A3 19                      CRMSG17:	db 25
  2372 000007A4 53797374656D207265-     		db 'System resource exhausted'
  2372 000007AD 736F75726365206578-
  2372 000007B6 68617573746564     
  2373 000007BD 12                      CRMSG18:	db 18
  2374 000007BE 436F64652070616765-     		db 'Code page mismatch'
  2374 000007C7 206D69736D61746368 
  2375 000007D0 0C                      CRMSG19:	db 12
  2376 000007D1 4F7574206F6620696E-     		db 'Out of input'
  2376 000007DA 707574             
  2377 000007DD 17                      CRMSG20:	db 23
  2378 000007DE 496E73756666696369-     		db 'Insufficient disk space'
  2378 000007E7 656E74206469736B20-
  2378 000007F0 7370616365         
  2379                                  
  2380                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0914h
  2381                                  
  2382 000007F5 [7206]                  CRITMSGPTRS:	dw CRMSG0
  2383 000007F7 [8606]                  		dw CRMSG1
  2384 000007F9 [9306]                  		dw CRMSG2
  2385 000007FB [9D06]                  		dw CRMSG3
  2386 000007FD [B406]                  		dw CRMSG4
  2387 000007FF [BF06]                  		dw CRMSG5
  2388 00000801 [E106]                  		dw CRMSG6
  2389 00000803 [EC06]                  		dw CRMSG7
  2390 00000805 [FF06]                  		dw CRMSG8
  2391 00000807 [1007]                  		dw CRMSG9
  2392 00000809 [2B07]                  		dw CRMSG10
  2393 0000080B [3D07]                  		dw CRMSG11
  2394 0000080D [4E07]                  		dw CRMSG12
  2395 0000080F [5E07]                  		dw CRMSG13
  2396 00000811 [7007]                  		dw CRMSG14
  2397 00000813 [7F07]                  		dw CRMSG15
  2398 00000815 [9307]                  		dw CRMSG16
  2399 00000817 [A307]                  		dw CRMSG17
  2400 00000819 [BD07]                  		dw CRMSG18
  2401 0000081B [D007]                  		dw CRMSG19
  2402 0000081D [DD07]                  		dw CRMSG20
  2403                                  
  2404                                  		; 14/01/2023
  2405                                  DataresEnd:	; MSDOS 5.0 COMMAND.COM - DATARES:093Eh (RESGROUP:093Eh)
  2406                                  
  2407 0000081F 13                      PAERRMSG0:	db 19
  2408 00000820 546F6F206D616E7920-     		db 'Too many parameters'
  2408 00000829 706172616D65746572-
  2408 00000832 73                 
  2409 00000833 1A                      PAERRMSG1:	db 26
  2410 00000834 526571756972656420-     		db 'Required parameter missing'
  2410 0000083D 706172616D65746572-
  2410 00000846 206D697373696E67   
  2411 0000084E 0E                      PAERRMSG2:	db 14
  2412 0000084F 496E76616C69642073-     		db 'Invalid switch'
  2412 00000858 7769746368         
  2413 0000085D 0F                      PAERRMSG3:	db 15
  2414 0000085E 496E76616C6964206B-     		db 'Invalid keyword'
  2414 00000867 6579776F7264       
  2415 0000086D 01                      PAERRMSG4:	db 1
  2416 0000086E 20                      		db 20h
  2417 0000086F 24                      PAERRMSG5:	db 36
  2418 00000870 506172616D65746572-     		db 'Parameter value not in allowed range'
  2418 00000879 2076616C7565206E6F-
  2418 00000882 7420696E20616C6C6F-
  2418 0000088B 7765642072616E6765 
  2419                                  PAERRMSG6:	; 10/01/2023
  2420 00000894 1B                      PAERRMSG7:	db 27
  2421 00000895 506172616D65746572-     		db 'Parameter value not allowed'
  2421 0000089E 2076616C7565206E6F-
  2421 000008A7 7420616C6C6F776564 
  2422                                  ;PAERRMSG7:	db 27
  2423                                  ;		db 'Parameter value not allowed'
  2424 000008B0 1C                      PAERRMSG8:	db 28
  2425 000008B1 506172616D65746572-     		db 'Parameter format not correct'
  2425 000008BA 20666F726D6174206E-
  2425 000008C3 6F7420636F72726563-
  2425 000008CC 74                 
  2426 000008CD 11                      PAERRMSG9:	db 17
  2427 000008CE 496E76616C69642070-     		db 'Invalid parameter'
  2427 000008D7 6172616D65746572   
  2428 000008DF 1D                      PAERRMSG10:	db 29
  2429 000008E0 496E76616C69642070-     		db 'Invalid parameter combination'
  2429 000008E9 6172616D6574657220-
  2429 000008F2 636F6D62696E617469-
  2429 000008FB 6F6E               
  2430                                  
  2431                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0A38h
  2432                                  
  2433 000008FD [1F08]                  PARSMSGPTRS:	dw PAERRMSG0
  2434 000008FF [3308]                  		dw PAERRMSG1
  2435 00000901 [4E08]                  		dw PAERRMSG2
  2436 00000903 [5D08]                  		dw PAERRMSG3
  2437 00000905 [6D08]                  		dw PAERRMSG4
  2438 00000907 [6F08]                  		dw PAERRMSG5
  2439 00000909 [9408]                  		dw PAERRMSG6
  2440 0000090B [9408]                  		dw PAERRMSG7
  2441 0000090D [B008]                  		dw PAERRMSG8
  2442 0000090F [CD08]                  		dw PAERRMSG9
  2443 00000911 [DF08]                  		dw PAERRMSG10
  2444                                  ; 21/04/2023
  2445                                  NUMPARSMSGS equ ($-PARSMSGPTRS)>>1 ; 14/01/2023
  2446                                  
  2447 00000913 10                      INVLFUNCT:	db 16
  2448 00000914 496E76616C69642066-     		db 'Invalid function'
  2448 0000091D 756E6374696F6E     
  2449 00000924 0E                      FNOTFOUND:	db 14
  2450 00000925 46696C65206E6F7420-     		db 'File not found'
  2450 0000092E 666F756E64         
  2451 00000933 0E                      PNOTFOUND:	db 14
  2452 00000934 50617468206E6F7420-     		db 'Path not found'
  2452 0000093D 666F756E64         
  2453 00000942 13                      TOOMANYOF:	db 19
  2454 00000943 546F6F206D616E7920-     		db 'Too many open files'
  2454 0000094C 6F70656E2066696C65-
  2454 00000955 73                 
  2455                                  ; 14/01/2023
  2456                                  ;ACCDEN:	; 10/01/2023
  2457                                  ;ACCDENIED:	db 14
  2458                                  ;		db 'Access denied '
  2459 00000956 0E                      INVHANDLE:	db 14
  2460 00000957 496E76616C69642068-     		db 'Invalid handle'
  2460 00000960 616E646C65         
  2461 00000965 1F                      MEMCBDEST:	db 31
  2462 00000966 4D656D6F727920636F-     		db 'Memory control blocks destroyed'
  2462 0000096F 6E74726F6C20626C6F-
  2462 00000978 636B73206465737472-
  2462 00000981 6F796564           
  2463 00000985 13                      INSUFFMEM:	db 19
  2464 00000986 496E73756666696369-     		db 'Insufficient memory'
  2464 0000098F 656E74206D656D6F72-
  2464 00000998 79                 
  2465 00000999 1C                      INVMEMBLA:	db 28
  2466 0000099A 496E76616C6964206D-     		db 'Invalid memory block address'
  2466 000009A3 656D6F727920626C6F-
  2466 000009AC 636B20616464726573-
  2466 000009B5 73                 
  2467 000009B6 13                      INVENVIRO:	db 19
  2468 000009B7 496E76616C69642045-     		db 'Invalid Environment'
  2468 000009C0 6E7669726F6E6D656E-
  2468 000009C9 74                 
  2469 000009CA 0E                      INVFORMAT:	db 14
  2470 000009CB 496E76616C69642066-     		db 'Invalid format'
  2470 000009D4 6F726D6174         
  2471 000009D9 1A                      INVFNPARM:	db 26
  2472 000009DA 496E76616C69642066-     		db 'Invalid function parameter'
  2472 000009E3 756E6374696F6E2070-
  2472 000009EC 6172616D65746572   
  2473 000009F4 0C                      INVLDDATA:	db 12
  2474 000009F5 496E76616C69642064-     		db 'Invalid data'
  2474 000009FE 617461             
  2475 00000A01 1B                      INVDRVSPC:	db 27
  2476 00000A02 496E76616C69642064-     		db 'Invalid drive specification'
  2476 00000A0B 726976652073706563-
  2476 00000A14 696669636174696F6E 
  2477 00000A1D 23                      ATRCURDIR:	db 35
  2478 00000A1E 417474656D70742074-     		db 'Attempt to remove current directory'
  2478 00000A27 6F2072656D6F766520-
  2478 00000A30 63757272656E742064-
  2478 00000A39 69726563746F7279   
  2479 00000A41 0F                      NOTSAMDEV:	db 15
  2480 00000A42 4E6F742073616D6520-     		db 'Not same device'
  2480 00000A4B 646576696365       
  2481 00000A51 0D                      NOMOREFIL:	db 13
  2482 00000A52 4E6F206D6F72652066-     		db 'No more files'
  2482 00000A5B 696C6573           
  2483 00000A5F 0B                      FILEXISTS:	db 11
  2484 00000A60 46696C652065786973-     		db 'File exists'
  2484 00000A69 7473               
  2485 00000A6B 1B                      CANTMKDIR:	db 27
  2486 00000A6C 43616E6E6F74206D61-     		db 'Cannot make directory entry'
  2486 00000A75 6B6520646972656374-
  2486 00000A7E 6F727920656E747279 
  2487 00000A87 0E                      FAILINT24:	db 14
  2488 00000A88 4661696C206F6E2049-     		db 'Fail on INT 24'
  2488 00000A91 4E54203234         
  2489 00000A96 15                      TOOMANYRD:	db 21
  2490 00000A97 546F6F206D616E7920-     		db 'Too many redirections'
  2490 00000AA0 726564697265637469-
  2490 00000AA9 6F6E73             
  2491 00000AAC 15                      DUPLREDIR:	db 21
  2492 00000AAD 4475706C6963617465-     		db 'Duplicate redirection'
  2492 00000AB6 207265646972656374-
  2492 00000ABF 696F6E             
  2493 00000AC2 10                      INVPASSWD:	db 16
  2494 00000AC3 496E76616C69642070-     		db 'Invalid password'
  2494 00000ACC 617373776F7264     
  2495 00000AD3 11                      INVLDPARM:	db 17
  2496 00000AD4 496E76616C69642070-     		db 'Invalid parameter'
  2496 00000ADD 6172616D65746572   
  2497 00000AE5 12                      NETDATFAU:	db 18
  2498 00000AE6 4E6574776F726B2064-     		db 'Network data fault'
  2498 00000AEF 617461206661756C74 
  2499 00000AF8 21                      FNOSUPNET:	db 33
  2500 00000AF9 46756E6374696F6E20-     		db 'Function not supported by network'
  2500 00000B02 6E6F7420737570706F-
  2500 00000B0B 72746564206279206E-
  2500 00000B14 6574776F726B       
  2501 00000B1A 27                      RSCNOTINS:	db 39
  2502 00000B1B 526571756972656420-     		db 'Required system component not installed'
  2502 00000B24 73797374656D20636F-
  2502 00000B2D 6D706F6E656E74206E-
  2502 00000B36 6F7420696E7374616C-
  2502 00000B3F 6C6564             
  2503                                  
  2504                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0C8Ch
  2505                                  
  2506 00000B42 [1309]                  EXTMSGPTRS:	dw INVLFUNCT
  2507 00000B44 [2409]                  		dw FNOTFOUND
  2508 00000B46 [3309]                  		dw PNOTFOUND
  2509 00000B48 [4209]                  		dw TOOMANYOF
  2510 00000B4A [BB05]                  		dw ACCDENIED
  2511 00000B4C [5609]                  		dw INVHANDLE
  2512 00000B4E [6509]                  		dw MEMCBDEST
  2513 00000B50 [8509]                  		dw INSUFFMEM
  2514 00000B52 [9909]                  		dw INVMEMBLA
  2515 00000B54 [B609]                  		dw INVENVIRO
  2516 00000B56 [CA09]                  		dw INVFORMAT
  2517 00000B58 [D909]                  		dw INVFNPARM
  2518 00000B5A [F409]                  		dw INVLDDATA
  2519 00000B5C 0000                    		dw 0
  2520 00000B5E [010A]                  		dw INVDRVSPC
  2521 00000B60 [1D0A]                  		dw ATRCURDIR
  2522 00000B62 [410A]                  		dw NOTSAMDEV
  2523 00000B64 [510A]                  		dw NOMOREFIL
  2524 00000B66 [7206]                  		dw CRMSG0
  2525 00000B68 [8606]                  		dw CRMSG1
  2526 00000B6A [9306]                  		dw CRMSG2
  2527 00000B6C [9D06]                  		dw CRMSG3
  2528 00000B6E [B406]                  		dw CRMSG4
  2529 00000B70 [BF06]                  		dw CRMSG5
  2530 00000B72 [E106]                  		dw CRMSG6
  2531 00000B74 [EC06]                  		dw CRMSG7
  2532 00000B76 [FF06]                  		dw CRMSG8
  2533 00000B78 [1007]                  		dw CRMSG9
  2534 00000B7A [2B07]                  		dw CRMSG10
  2535 00000B7C [3D07]                  		dw CRMSG11
  2536 00000B7E [4E07]                  		dw CRMSG12
  2537 00000B80 [5E07]                  		dw CRMSG13
  2538 00000B82 [7007]                  		dw CRMSG14
  2539 00000B84 [7F07]                  		dw CRMSG15
  2540 00000B86 [9307]                  		dw CRMSG16
  2541 00000B88 [A307]                  		dw CRMSG17
  2542 00000B8A [BD07]                  		dw CRMSG18
  2543 00000B8C [D007]                  		dw CRMSG19
  2544 00000B8E [DD07]                  		dw CRMSG20
  2545 00000B90 0000<rep 28h>           		times 40 dw 0	; db 80 dup(0)
  2546 00000BE0 [5F0A]                  		dw FILEXISTS
  2547 00000BE2 0000                    		dw 0
  2548 00000BE4 [6B0A]                  		dw CANTMKDIR
  2549 00000BE6 [870A]                  		dw FAILINT24
  2550 00000BE8 [960A]                  		dw TOOMANYRD
  2551 00000BEA [AC0A]                  		dw DUPLREDIR
  2552 00000BEC [C20A]                  		dw INVPASSWD
  2553 00000BEE [D30A]                  		dw INVLDPARM
  2554 00000BF0 [E50A]                  		dw NETDATFAU
  2555 00000BF2 [F80A]                  		dw FNOSUPNET
  2556 00000BF4 [1A0B]                  		dw RSCNOTINS
  2557                                  ; ----------------------------------------------------------------------------
  2558                                  	; 17/04/2023
  2559                                  ExtMsgEnd:
  2560                                  
  2561                                  ; 21/04/2023
  2562                                  NUMEXTMSGS equ ($-EXTMSGPTRS)>>1 ; 14/01/2023
  2563                                  
  2564                                  ; ----------------------------------------------------------------------------
  2565                                  
  2566                                  ; 20/04/2023
  2567                                  
  2568 00000BF6 90<rep Ah>              align 16
  2569                                  
  2570                                  ; ----------------------------------------------------------------------------
  2571                                  
  2572                                  ; 10/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2573                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0D40h (CODERES:0000h)
  2574                                  
  2575                                  ; ----------------------------------------------------------------------------
  2576                                  ; SEGMENT - CODERES
  2577                                  ; ----------------------------------------------------------------------------
  2578                                  
  2579                                  ; 11/01/2023
  2580                                  RCODE_START:	
  2581                                  
  2582                                  ; ----------------------------------------------------------------------------
  2583                                  ;***	EXEC error handling
  2584                                  ;
  2585                                  ;	COMMAND has issued an EXEC system call and it has returned an error.
  2586                                  ;	We examine the error code and select an appropriate message.
  2587                                  ; --------------------------
  2588                                  ;	Bugbug:	optimize reg usage in following code? Careful of DX!
  2589                                  ;	Condense the error scan?
  2590                                  ;	RBADNAM is checked by transient, no need here?
  2591                                  ;	Move below Ext_Exec.
  2592                                  ; ----------------------------------------------------------------------------
  2593                                  
  2594                                  Exec_Err:
  2595                                  ;SR;
  2596                                  ; ds,es are setup when the transient jumps to Ext_Exec. So segment regs are
  2597                                  ; in order here
  2598                                  
  2599                                  ;	Bugbug:	can we use byte compares here?
  2600                                  ;	Might be able to use byte msg#s, too.
  2601                                  
  2602                                  ;	Store errors in a 3 or 4 byte table. Msg #s in another.
  2603                                  ;	Speed not high priority here.
  2604                                  
  2605                                  ;	Move this to transient.
  2606                                  
  2607                                  	; 10/01/2023
  2608                                  
  2609                                  	;mov	bx,RBADNAM	; offset DATARES:RBadNam
  2610 00000C00 BA[A005]                	mov	dx,RBADNAM
  2611 00000C03 3C02                    	cmp	al,ERROR_FILE_NOT_FOUND ; 2
  2612 00000C05 741B                    	je	short GotExecEMes		; bad command
  2613                                  	;mov	bx,TOOBIG	; offset DATARES:TooBig
  2614 00000C07 BA[6605]                	mov	dx,TOOBIG
  2615 00000C0A 3C08                    	cmp	al,ERROR_NOT_ENOUGH_MEMORY ; 8
  2616 00000C0C 7414                    	je	short GotExecEMes		; file not found
  2617                                  	;mov	bx,EXEBAD	; offset DATARES:ExeBad
  2618 00000C0E BA[5205]                	mov	dx,EXEBAD
  2619 00000C11 3C0B                    	cmp	al,ERROR_BAD_FORMAT ; 11 ; 0Bh
  2620 00000C13 740D                    	je	short GotExecEMes		; bad exe file
  2621                                  	;mov	bx,ACCDEN	; offset DATARES:AccDen
  2622 00000C15 BA[BB05]                	mov	dx,ACCDEN
  2623 00000C18 3C05                    	cmp	al,ERROR_ACCESS_DENIED ; 5
  2624 00000C1A 7406                    	je	short GotExecEMes		; access denied
  2625                                  
  2626                                  Default_Message:
  2627                                  	;mov	bx,EXECEMES	; offset DATARES:ExecEMes
  2628 00000C1C BA[3E05]                	mov	dx,EXECEMES
  2629                                  						; default message
  2630 00000C1F BE[1B01]                	mov	si,ExecErrSubst ; offset DATARES:ExecErrSubst
  2631                                  						; get address of subst block
  2632                                  GotExecEMes:
  2633                                  	;mov	dx,bx				; DX = ptr to msg
  2634 00000C22 E85006                  	call	RPrint ; invoke	RPrint
  2635 00000C25 EB09                    	jmp	short NoExec
  2636                                  
  2637                                  ; ----------------------------------------------------------------------------
  2638                                  ;***	EXEC call
  2639                                  ;
  2640                                  ;	The transient has set up everything for an EXEC system call.
  2641                                  ;	For cleanliness, we issue the EXEC here in the resident 
  2642                                  ;	so that we may be able to recover cleanly upon success.
  2643                                  ;
  2644                                  ;	CS,DS,ES,SS = DATARES seg addr
  2645                                  ; ----------------------------------------------------------------------------
  2646                                  
  2647                                  Ext_Exec:
  2648                                  ;SR;
  2649                                  ; The words put on the stack by the stub will be popped off when we finally
  2650                                  ;jump to LodCom (by LodCom).
  2651                                  
  2652                                  	; 10/01/2023
  2653                                  	;int	21h			; do the exec
  2654                                  	; 10/01/2023 - MSDOS 5.0 COMMAND.COM - RESGROUP:0D69h (CODERES:0029h)
  2655                                  Exec_Ret:
  2656 00000C27 72D7                    	jc	short Exec_Err		; exec failed
  2657                                  
  2658                                  ;	The exec has completed. Retrieve the exit code.
  2659                                  
  2660                                  Exec_Wait:
  2661 00000C29 B44D                    	mov	ah,4Dh
  2662                                  	;mov	ah,WAITPROCESS ; 4Dh	; get errorlevel
  2663 00000C2B CD21                    	int	21h			; get the return code
  2664                                  	;mov	[cs:RetCode],ax
  2665                                  	; 11/01/2023
  2666 00000C2D A3[8501]                	mov	[RetCode],ax
  2667                                  
  2668                                  ;	See if we can reload the transient. The external command
  2669                                  ;	may have overwritten part of the transient.
  2670                                  
  2671                                  NoExec:
  2672                                  ;SR;
  2673                                  ; ds = es = ss = DATARES when we jump to LodCom
  2674                                  ;
  2675 00000C30 E97701                  	jmp	LodCom
  2676                                  
  2677                                  ; ----------------------------------------------------------------------------
  2678                                  ;***	Int 23 (ctrl-c) handler
  2679                                  ;
  2680                                  ;	This is the default system INT 23 handler. All processes
  2681                                  ;	(including COMMAND) get it by default. There are some
  2682                                  ;	games that are played: We ignore ^C during most of the
  2683                                  ;	INIT code. This is because we may perform an ALLOC and
  2684                                  ;	diddle the header! Also, if we are prompting for date/time
  2685                                  ;	in the init code, we are to treat ^C as empty responses.
  2686                                  ; ---------------------------
  2687                                  ;	Bugbug:	put init ctrl-c handling in init module.
  2688                                  ; ----------------------------------------------------------------------------
  2689                                  
  2690                                  ;SR;
  2691                                  ;The stub has pushed the previous ds and DATARES onto the stack. We get
  2692                                  ;both these values off the stack now
  2693                                  ;
  2694                                  ;ContC	proc	far
  2695                                  
  2696                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  2697                                  
  2698                                  	; 11/01/2023 - Retro DOS v5.40 COMMAND.COM
  2699                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:0D75h (CODERES:0035h)
  2700                                  ContC:
  2701 00000C33 1F                      	pop	ds			; ds = DATARES
  2702                                  ;	assume	ds:DATARES
  2703                                  ;;	pop	word [OldDS]		; OldDS = old ds
  2704                                  
  2705 00000C34 F606[FF01]01            	test	byte [InitFlag],INITINIT ; 1
  2706                                  	;test	byte [cs:INITFLAG],INITINIT ; 1	; in initialization?
  2707 00000C39 740D                    	jz	short NotAtInit		; no
  2708 00000C3B F606[FF01]02            	test	byte [InitFlag],INITSPECIAL ; 2 
  2709                                  	;test	byte [cs:INITFLAG],INITSPECIAL ; 2 ; doing special stuff?
  2710 00000C40 7404                    	jz	short CmdIret		; no, ignore ^C
  2711 00000C42 1F                      	pop	ds			; restore before jumping; M021
  2712                                  	;jmp	RESGROUP:Init_ContC_SpecialCase ; Yes, go handle it
  2713 00000C43 E9E80D                  	jmp	init_contc_specialcase
  2714                                  CmdIret:
  2715                                  ;SR;
  2716                                  ; Restore ds to its previous value
  2717                                  ;
  2718                                  
  2719                                  ;;	mov	ds,[OLdDS]		;
  2720 00000C46 1F                      	pop	ds
  2721 00000C47 CF                      	iret				; yes, ignore the ^C
  2722                                  
  2723                                  NotAtInit:
  2724 00000C48 F606[FF01]04            	test	byte [InitFlag],INITCTRLC ; 4
  2725                                  	;test	byte [cs:INITFLAG],INITCTRLC ; 4 ; are we already in a ^C?
  2726 00000C4D 7411                    	jz	short NotInit 		; nope too.
  2727                                  
  2728                                  ;*	We are interrupting ourselves in this ^C handler. We need
  2729                                  ;	to set carry and return to the user sans flags only if the
  2730                                  ;	system call was a 1-12 one. Otherwise, we ignore the ^C.
  2731                                  
  2732                                  	;cmp	ah,1
  2733                                  	;jb	short CmdIret
  2734                                  	; 19/07/2024
  2735 00000C4F 84E4                    	test	ah,ah
  2736 00000C51 74F3                    	jz	short CmdIret
  2737                                  
  2738 00000C53 80FC0C                  	cmp	ah,12
  2739 00000C56 77EE                    	ja	short CmdIret
  2740                                  
  2741 00000C58 1F                      	pop	ds			;restore ds to old value
  2742 00000C59 83C406                  	add	sp,6			; remove int frame
  2743 00000C5C F9                      	stc
  2744                                  
  2745                                  ;;	mov	ds,[OldDS]		;restore ds to its old value
  2746 00000C5D CA0200                  	retf	2			; remove those flags...
  2747                                  
  2748                                  NotInit:
  2749                                  
  2750                                  ;*	We have now received a ^C for some process (maybe ourselves
  2751                                  ;	but not at INIT).
  2752                                  ;	
  2753                                  ;	Note that we are running on the user's stack!!! Bad news if
  2754                                  ;	any of the system calls below go and issue another INT
  2755                                  ;	24... Massive stack overflow! Another bad point is that
  2756                                  ;	SavHand will save an already saved handle, thus losing a
  2757                                  ;	possible redirection...
  2758                                  ;	
  2759                                  ;	All we need to do is set the flag to indicate nested ^C. 
  2760                                  ;	The above code will correctly flag the ^C diring the
  2761                                  ;	message output and prompting while ignoring the ^C the rest
  2762                                  ;	of the time.
  2763                                  ;	
  2764                                  ;	Clean up: flush disk. If we are in the middle of a batch
  2765                                  ;	file, we ask if he wants to terminate it. If he does, then
  2766                                  ;	we turn off all internal flags and let the DOS abort.
  2767                                  
  2768 00000C60 800E[FF01]04            	or	byte [InitFlag],INITCTRLC ; 4
  2769                                  	;or	byte [cs:INITFLAG],INITCTRLC ; 4 ; nested ^c is on
  2770 00000C65 FB                      	sti
  2771                                  
  2772                                  ;	push	cs			; el yucko! change the user's ds!!
  2773                                  ;	pop	ds
  2774                                  
  2775                                  ;	assume	ds:RESGROUP
  2776                                  
  2777 00000C66 58                      	pop	ax			; discard the old ds value
  2778                                  
  2779 00000C67 A1[8E01]                	mov	ax,[SingleCom]
  2780 00000C6A 09C0                    	or	ax,ax
  2781 00000C6C 7506                    	jnz	short NoReset
  2782 00000C6E 50                      	push	ax
  2783 00000C6F B40D                    	mov	ah,DISK_RESET ; 0Dh
  2784 00000C71 CD21                    	int	21h			; reset disks in case files were open
  2785 00000C73 58                      	pop	ax
  2786                                  
  2787                                  NoReset:
  2788                                  
  2789                                  ;	In the generalized version of FOR, PIPE and BATCH, we would
  2790                                  ;	walk the entire active list and free each segment. Here,
  2791                                  ;	we just free the single batch segment.
  2792                                  
  2793 00000C74 F706[3401]FFFF          	test	word [Batch],-1 ; 0FFFFh
  2794 00000C7A 7451                    	jz	short ContCTerm
  2795 00000C7C 09C0                    	or	ax,ax
  2796 00000C7E 754D                    	jnz	short ContCTerm
  2797 00000C80 E88402                  	call	SavHand
  2798 00000C83 E89203                  	call	AskEnd			; ask if user wants to end batch
  2799                                  
  2800                                  ;	If the carry flag is clear, we do NOT free up the batch file
  2801                                  
  2802 00000C86 733F                    	jnc	short ContBatch
  2803 00000C88 8A0E[8801]              	mov	cl,[EchoFlag]		; get current echo flag
  2804 00000C8C 53                      	push	bx
  2805                                  
  2806                                  ClearBatch:
  2807 00000C8D 8E06[3401]              	mov	es,[Batch]		; get batch segment
  2808                                  	;mov	di,20h
  2809                                  	; 06/06/2023 (BugFix)
  2810 00000C91 BF2000                  	mov	di,BATCHSEGMENT.BatFile ; get offset of batch file name
  2811                                  	; MSDOS 5.0 & MSDOS 6.0 (ES:5)
  2812                                  	;mov	bx,es:BatForPtr		; get old FOR segment
  2813 00000C94 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
  2814                                  	; MSDOS 3.3 ([ES:4])
  2815                                  	;mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:4] ; get old FOR segment
  2816                                  	;
  2817                                  	; 19/07/2024
  2818                                  	;cmp	bx,0			; is a FOR in progress
  2819                                  	;je	short No_Bat_For	; no - don't deallocate
  2820 00000C99 85DB                    	test	bx,bx
  2821 00000C9B 7408                    	jz	short No_Bat_For
  2822                                  
  2823 00000C9D 06                      	push	es			;
  2824 00000C9E 8EC3                    	mov	es,bx			; yes - free it up...
  2825 00000CA0 B449                    	mov	ah,49h
  2826                                  	;mov	ah,DEALLOC ; 49h	;
  2827 00000CA2 CD21                    	int	21h			;
  2828 00000CA4 07                      	pop	es			; restore to batch segment
  2829                                  
  2830                                  No_Bat_For:
  2831                                  	;mov	cl,[es:1]
  2832 00000CA5 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag] ; get old echo flag
  2833                                  	;mov	bx,[es:3]
  2834 00000CAA 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast] ; get old batch segment
  2835 00000CAF B449                    	mov	ah,49h
  2836                                  	;mov	ah,DEALLOC ; 49h	; free it up...
  2837 00000CB1 CD21                    	int	21h
  2838 00000CB3 891E[3401]              	mov	[Batch],bx		; get ready to deallocate next batch
  2839 00000CB7 FF0E[9701]              	dec	word [Nest]		; is there another batch file?
  2840 00000CBB 75D0                    	jnz	short ClearBatch	; keep going until no batch file
  2841                                  
  2842                                  ;	We are terminating a batch file; restore the echo status
  2843                                  
  2844                                  ;Shell_Bat_Cont: 			; continue batch for SHELL
  2845 00000CBD 5B                      	pop	bx
  2846 00000CBE 880E[8801]              	mov	[EchoFlag],cl		; reset echo status
  2847                                  	; 29/05/2018
  2848 00000CC2 C606[0002]00            	mov	byte [PipeFlag],0	; turn off pipeflag
  2849                                  
  2850                                  ContBatch:
  2851 00000CC7 E8A805                  	call	crlf			; print out crlf before returning
  2852 00000CCA E86302                  	call	RestHand
  2853                                  
  2854                                  ;	Yes, we are terminating. Turn off flags and allow the DOS to abort.
  2855                                  
  2856                                  ContCTerm:
  2857 00000CCD 31C0                    	xor	ax,ax			; indicate no read
  2858 00000CCF 89C5                    	mov	bp,ax
  2859                                  
  2860                                  ;	The following resetting of the state flags is good for the
  2861                                  ;	generalized batch processing.
  2862                                  
  2863 00000CD1 A2[9301]                	mov	[IfFlag],al		; turn off iffing
  2864 00000CD4 A2[9401]                	mov	[ForFlag],al		; turn off for processing
  2865 00000CD7 E81C00                  	call	ResPipeOff
  2866 00000CDA 3906[8E01]              	cmp	[SingleCom],ax		; see if we need to set SingleCom
  2867 00000CDE 7406                    	jz	short NoSetSing
  2868 00000CE0 C706[8E01]FFFF          	mov	word [SingleCom],-1	; cause termination on 
  2869                                  					;  pipe, batch, for
  2870                                  NoSetSing:
  2871                                  
  2872                                  ;	If we are doing an internal command, go through the reload process.
  2873                                  ;	If we are doing an external, let DOS abort the process.
  2874                                  ;	In both cases, we are now done with the ^C processing.
  2875                                  
  2876 00000CE6 8026[FF01]FB            	and	byte [InitFlag],~INITCTRLC ; 0FBh
  2877 00000CEB 3806[8401]              	cmp	[ExtCom],al
  2878 00000CEF 7503                    	jnz	short DoDAb		; internal ^c
  2879 00000CF1 E94501                  	jmp	LodCom1
  2880                                  DoDAb:
  2881 00000CF4 F9                      	stc				; tell dos to abort
  2882                                  
  2883                                  ;SR;
  2884                                  ;We dont need to restore ds here because we are forcing DOS to do an abort
  2885                                  ;by setting carry and leaving flags on the stack
  2886                                  
  2887 00000CF5 CB                      	retf				; Leave flags on stack
  2888                                  
  2889                                  ;ContC	endp
  2890                                  
  2891                                  ;SR;
  2892                                  ;ds = DATARES on entry. This routine is called from DskErr and LodCom1 and
  2893                                  ;both have ds = DATARES
  2894                                  
  2895                                  	; 11/01/2023
  2896                                  ResPipeOff:
  2897 00000CF6 50                      	push	ax
  2898 00000CF7 31C0                    	xor	ax,ax
  2899                                  	;xchg	al,[cs:PIPEFLAG]
  2900 00000CF9 8606[0002]              	xchg	al,[PipeFlag]
  2901 00000CFD 08C0                    	or	al,al
  2902 00000CFF 7404                    	jz	short NoPipePop
  2903                                  	;shr	byte [cs:ECHOFLAG],1
  2904 00000D01 D02E[8801]              	shr	byte [EchoFlag],1
  2905                                  NoPipePop:
  2906 00000D05 58                      	pop	ax
  2907 00000D06 C3                      	retn
  2908                                  
  2909                                  ;CODERES ends
  2910                                  
  2911                                  ;=============================================================================
  2912                                  ; COMMAND2.ASM, MSDOS 6.0, 1991
  2913                                  ;=============================================================================
  2914                                  ; 21/09/2018 - Retro DOS v3.0
  2915                                  
  2916                                  ;	title	COMMAND2 - resident code for COMMAND.COM part II
  2917                                  ;	name	COMMAND2
  2918                                  
  2919                                  ;/*
  2920                                  ; *                      Microsoft Confidential
  2921                                  ; *                      Copyright (C) Microsoft Corporation 1991
  2922                                  ; *                      All Rights Reserved.
  2923                                  ; */
  2924                                  
  2925                                  ;
  2926                                  ;	Revision History
  2927                                  ;	================
  2928                                  ;
  2929                                  ; M038	SR  11/5/90	Changed stuff for Novell RPL. These guys cannot
  2930                                  ;			reserve memory by changing int 12h and then give it
  2931                                  ;			back to DOS by changing arenas in autoexec.bat.
  2932                                  ;			This makes command.com reload transient and this
  2933                                  ;			cannot be done at this stage.
  2934                                  ;
  2935                                  
  2936                                  ;CODERES segment public byte
  2937                                  
  2938                                  ;*	If we cannot allocate enough memory for the transient or there
  2939                                  ;	was some other allocation error, we display a message and
  2940                                  ;	then die.
  2941                                  
  2942                                  ;SR;
  2943                                  ; We will have to make sure that at this entry point and at FatalC, 
  2944                                  ;ds = DATARES. All jumps to these points are made from only within this file
  2945                                  ;and so we should be able to do this
  2946                                  
  2947                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2948                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0E4Bh (CODERES:010Bh)
  2949                                  
  2950                                  	;assume	ds:DATARES
  2951                                  BadMemErr:
  2952 00000D07 BA[C905]                	mov	dx,BMEMMES			; DX = ptr to msg
  2953                                  FatalC:
  2954                                  	; 12/01/2023
  2955                                  ;;	push	cs
  2956                                  ;;	pop	ds
  2957                                  ;;	assume	ds:ResGroup
  2958                                  ;	invoke	RPrint
  2959                                  
  2960                                  	; 12/01/2023
  2961                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  2962 00000D0A E86805                  	call	RPrint
  2963                                  
  2964                                  	; MSDOS 3.3
  2965                                  	;call	RDISPMSG
  2966                                  
  2967                                  ;	If this is NOT a permanent (top-level) COMMAND, then we exit;
  2968                                  ;	we can't do anything else!
  2969                                  
  2970 00000D0D 803E[8D01]00            	cmp	byte [PermCom],0
  2971 00000D12 7410                    	je	short FatalRet
  2972                                  
  2973                                  ;	We are a permanent command. If we are in the process of the
  2974                                  ;	magic interrupt (Singlecom) then exit too.
  2975                                  
  2976 00000D14 833E[8E01]00            	cmp	word [SingleCom],0		; if PermCom and SingleCom
  2977 00000D19 7509                    	jne	short FatalRet			; must take int_2e exit
  2978                                  
  2979                                  ;	Permanent command. We can't do ANYthing except halt.
  2980                                  
  2981 00000D1B BA[E305]                	mov	dx,HALTMES			; DX = ptr to msg
  2982                                  	;invoke	RPrint
  2983                                  	; 12/01/2023	
  2984                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  2985 00000D1E E85405                  	call	RPrint	
  2986                                  	; MSDOS 3.3
  2987                                  	;call	RDISPMSG
  2988 00000D21 FB                      	sti
  2989                                  Stall:
  2990 00000D22 EBFE                    	jmp	short Stall			; crash the system nicely
  2991                                  
  2992                                  FatalRet:
  2993 00000D24 BA[0A06]                	mov	dx,FRETMES			; DX = ptr to msg
  2994                                  	;call	RDISPMSG
  2995                                  	; 12/01/2023	
  2996 00000D27 E84B05                  	call	RPrint	
  2997                                  FatalRet2:
  2998 00000D2A 803E[8D01]00            	cmp	byte [PermCom],0		; if we get here and PermCom,
  2999 00000D2F 7517                    	jne	short Ret_2e			; must be int_2e
  3000                                  
  3001                                  ;	Bugbug:	this is where we'd want to unhook int 2F, *if* we
  3002                                  ;	were a non-permanent COMMAND that had hooked it! (Just in 
  3003                                  ;	case we decide to do that.)
  3004                                  
  3005 00000D31 A1[2901]                	mov	ax,[Parent]
  3006                                  	;mov	[16h],ax
  3007 00000D34 A31600                  	mov	[PDB.PARENT_PID],ax	; mov [cs:16h],ax
  3008 00000D37 A1[2B01]                	mov	ax,[OldTerm]
  3009                                  	;mov	[0Ah],ax
  3010 00000D3A A30A00                  	mov	[PDB.EXIT],ax		; mov [cs:0Ah],ax
  3011 00000D3D A1[2D01]                	mov	ax,[OldTerm+2]
  3012                                  	;mov	[0Ch],ax
  3013 00000D40 A30C00                  	mov	[PDB.EXIT+2],ax 	; mov [cs:0Ch],ax
  3014 00000D43 B8004C                  	mov	ax,4C00h
  3015                                  	;mov	ax,(EXIT<<8) ; 4C00h		; return to lower level
  3016 00000D46 CD21                    	int	21h
  3017                                  Ret_2e:
  3018                                  ;SR;
  3019                                  ; We will ensure that ds = DATARES for all entries to this place
  3020                                  ;
  3021                                  
  3022                                  ;;	push	cs
  3023                                  ;;	pop	ds
  3024                                  ;;	assume	ds:resgroup,es:nothing,ss:nothing
  3025                                    	
  3026                                  ;	assume	ds:DATARES
  3027                                  
  3028                                  	;PUSH	CS
  3029                                  	;POP	DS
  3030                                  
  3031 00000D48 C706[8E01]0000          	mov	word [SingleCom],0	; turn off SingleCom
  3032 00000D4E 8E06[4703]              	mov	es,[Res_Tpa]
  3033                                  	;mov	ah,49h	; 12/01/2023
  3034 00000D52 B449                    	mov	ah,DEALLOC
  3035 00000D54 CD21                    	int	21h			; free up space used by transient
  3036 00000D56 8B1E[2701]              	mov	bx,[Save_Pdb]
  3037 00000D5A B450                    	mov	ah,50h
  3038                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3039 00000D5C CD21                    	int	21h			; current process is user
  3040 00000D5E A1[8501]                	mov	ax,[RetCode]
  3041 00000D61 803E[8401]00            	cmp	byte [ExtCom],0
  3042 00000D66 7502                    	jne	short GotECode
  3043 00000D68 31C0                    	xor	ax,ax			; internals always return 0
  3044                                  GotECode:
  3045 00000D6A C606[8401]01            	mov	byte [ExtCom],1		; force external
  3046                                  
  3047                                  ;SR; This is actually returning to the caller. However, the old code had
  3048                                  ;ds = RESGROUP so I guess we can keep ds = DATARES for us.
  3049                                  ;Yes, int 2eh can corrupt all registers so we are ok.
  3050                                  
  3051                                  	; 12/01/2023
  3052 00000D6F FF2E[2301]              	jmp	far [Int_2e_Ret]	; "iret"
  3053                                  
  3054                                  ;***	Int_2e, magic command executer
  3055                                  
  3056                                  Int_2e:
  3057                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  3058                                  ;SR;
  3059                                  ;We are going to come here from the stub with the old ds and DATARES value
  3060                                  ;pushed on the stack in that order. Pick up this stuff off the stack
  3061                                  
  3062                                  	; 12/01/2023 - Retro DOS v4.0 COMMAND.COM
  3063                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0EB7h (CODERES:0177h)
  3064                                  
  3065 00000D73 1F                      	pop	ds			; ds = DATARES
  3066                                  	;assume	ds:DATARES
  3067 00000D74 58                      	pop	ax
  3068                                  ;	;pop	ds:OldDS 		; Save old value of ds
  3069                                  
  3070                                  	;pop	word [cs:Int_2e_Ret]
  3071                                  	;pop	word [cs:Int_2e_Ret+2]	; store return address
  3072                                  	;pop	ax			; chuck flags
  3073 00000D75 8F06[2301]              	pop	word [Int_2e_Ret]
  3074 00000D79 8F06[2501]              	pop	word [Int_2e_Ret+2]
  3075                                  	
  3076 00000D7D 83C402                  	add	sp,2
  3077                                  
  3078                                  ;;	push	cs
  3079                                  ;;	pop	es
  3080                                  
  3081 00000D80 1E                      	push	ds
  3082 00000D81 07                      	pop	es			; es = DATARES
  3083                                  ;	;mov	ds,OldDS
  3084 00000D82 8ED8                    	mov	ds,ax
  3085                                  	;assume	ds:nothing		; ds = old value
  3086                                  
  3087 00000D84 BF8000                  	mov	di,80h
  3088 00000D87 B94000                  	mov	cx,64
  3089                                  ;	Bugbug:	cld
  3090 00000D8A F3A5                    	rep	movsw
  3091 00000D8C B451                    	mov	ah,51h
  3092                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3093 00000D8E CD21                    	int	21h			; get user's header
  3094                                  	; 12/01/2023
  3095 00000D90 26891E[2701]            	mov	[es:Save_Pdb],bx
  3096                                  	;mov	[cs:Save_Pdb],bx
  3097 00000D95 B450                    	mov	ah,50h
  3098                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3099                                  
  3100                                  ;;	mov	bx,cs
  3101                                  ;SR;
  3102                                  ;Set ds = DATARES because BadMemErr expects this
  3103                                  
  3104                                  	; 12/01/2023
  3105 00000D97 06                      	push	es
  3106 00000D98 1F                      	pop	ds
  3107                                  	;assume	ds:DATARES
  3108                                  
  3109 00000D99 8CDB                    	mov	bx,ds			; es = our PSP now
  3110                                  	;mov	bx,cs
  3111                                  
  3112 00000D9B CD21                    	int	21h			; current process is me
  3113                                  	;mov	word [cs:SingleCom],81h
  3114                                  	;mov	byte [cs:ExtCom],1	; make sure this case forced
  3115                                  	; 12/01/2023
  3116 00000D9D C706[8E01]8100          	mov	word [SingleCom],81h
  3117 00000DA3 C606[8401]01            	mov	byte [ExtCom],1		; make sure this case forced
  3118                                  
  3119                                  ;SR;
  3120                                  ;We can enter LodCom directly after a command shell is terminated or we
  3121                                  ;can fall thru from above. When we enter directly from the stub, the stack
  3122                                  ;has the old ds value and the data seg value on the stack, so that ds can
  3123                                  ;be properly set. To fake this, we push dummy values here.
  3124                                  
  3125                                  	; 12/01/2023
  3126 00000DA8 1E                      	push	ds			; old value of ds
  3127 00000DA9 1E                      	push	ds			; data seg value, ds = DATARES
  3128                                  LodCom: 				; termination handler
  3129 00000DAA 1F                      	pop	ds			; ds = DATARES
  3130                                  	;assume	ds:DATARES
  3131 00000DAB 83C402                  	add	sp,2
  3132                                  ;	;pop	OldDS			; store old ds
  3133                                  	;cmp	ExtCom,0
  3134 00000DAE 803E[8401]00            	cmp	byte [ExtCom],0
  3135                                  	;cmp	byte [cs:ExtCom],0
  3136                                  	;jne	short @f	 	; internal cmd - memory allocated
  3137                                  	; 16/04/2023
  3138 00000DB3 7503                    	jne	short LodCom0 ; 24/09/2018
  3139 00000DB5 E98100                  	jmp	LodCom1
  3140                                  	;je	short LodCom1 ; 25/09/2018	
  3141                                  ;@@:
  3142                                  LodCom0: ; 24/09/2018
  3143 00000DB8 BBFFFF                  	mov	bx,0FFFFh
  3144 00000DBB B448                    	mov	ah,48h	; 12/01/2023
  3145                                  	;mov	ah,ALLOC ; 48h	
  3146 00000DBD CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  3147                                  				; BX = number of 16-byte paragraphs desired
  3148 00000DBF E80A00                  	call	SetSize
  3149 00000DC2 83C020                  	add	ax,20h
  3150 00000DC5 39C3                    	cmp	bx,ax
  3151 00000DC7 730B                    	jnb	short MemOk		; > 512 byte buffer - good enough
  3152                                  BadMemErrJ:
  3153 00000DC9 E93BFF                  	jmp	BadMemErr		; not enough memory
  3154                                  
  3155                                  ;***	SetSize - get transient size in paragraphs
  3156                                  
  3157                                  SetSize:
  3158                                  	; 12/01/2023
  3159                                  	;;mov	ax,offset TRANGROUP:TranSpaceEnd + 15
  3160                                  	;mov	ax,98D4h		; MSDOS 5.0 COMMAND.COM
  3161 00000DCC B88295                  	mov	ax,TRANSPACEEND+15	; mov AX,4D6Bh ; MSDOS 3.3
  3162 00000DCF B104                    	mov	cl,4
  3163 00000DD1 D3E8                    	shr	ax,cl
  3164 00000DD3 C3                      	retn
  3165                                  
  3166                                  MemOk:
  3167                                  	;assume	ds:DATARES		;we have set ds = DATARES 
  3168                                  
  3169 00000DD4 B448                    	mov	ah,48h
  3170                                  	;mov	ah,ALLOC  ; 48h
  3171 00000DD6 CD21                    	int	21h
  3172 00000DD8 72EF                    	jc	short BadMemErrJ	; memory arenas probably trashed
  3173                                  	;mov	byte [cs:ExtCom],0
  3174                                  	;mov	[cs:Res_Tpa],ax
  3175                                  	; 12/01/2023
  3176 00000DDA C606[8401]00            	mov	byte [ExtCom],0		; flag not to alloc again
  3177 00000DDF A3[4703]                	mov	[Res_Tpa],ax		; save current tpa segment
  3178                                  
  3179 00000DE2 2500F0                  	and	ax,0F000h
  3180 00000DE5 050010                  	add	ax,1000h		; round up to next 64k boundary
  3181 00000DE8 7212                    	jc	short Bad_Tpa		; memory wrap if carry set
  3182                                  
  3183                                  ;	Make sure that new boundary is within allocated range
  3184                                  
  3185                                  	;mov	dx,[cs:Res_Tpa]
  3186                                  	; 12/01/2023
  3187 00000DEA 8B16[4703]              	mov	dx,[Res_Tpa]
  3188 00000DEE 01DA                    	add	dx,bx			; compute maximum address
  3189 00000DF0 39C2                    	cmp	dx,ax			; is 64k address out of range?
  3190 00000DF2 7608                    	jbe	short Bad_Tpa
  3191                                  
  3192                                  ;	Must have 64K of usable space.
  3193                                  
  3194 00000DF4 29C2                    	sub	dx,ax			; compute the usable space
  3195 00000DF6 81FA0010                	cmp	dx,1000h		; is space >= 64k ?
  3196 00000DFA 7303                    	jae	short LTpaSet
  3197                                  Bad_Tpa:
  3198                                  	;mov	ax,[cs:Res_Tpa]
  3199                                  	; 12/01/2023
  3200 00000DFC A1[4703]                	mov	ax,[Res_Tpa]
  3201                                  LTpaSet:
  3202                                  	;mov	[cs:LTPA],ax
  3203                                  	;mov	ax,[cs:Res_Tpa]
  3204                                  	; 12/01/2023
  3205 00000DFF A3[3903]                	mov	[LTpa],ax		; usable tpa is 64k buffer aligned
  3206 00000E02 A1[4703]                	mov	ax,[Res_Tpa]		; actual tpa is buffer allocated
  3207 00000E05 01C3                    	add	bx,ax
  3208                                  	;mov	[cs:MemSiz],bx
  3209 00000E07 891E[8001]              	mov	[MemSiz],bx
  3210 00000E0B E8BEFF                  	call	SetSize
  3211 00000E0E 29C3                    	sub	bx,ax
  3212                                  
  3213                                  	; MSDOS 6.0
  3214                                  
  3215                                  ;M038; Start of changes
  3216                                  ;Changes for Novell RPL. These guys reserve memory for themselves by
  3217                                  ;reducing int 12h size and add this memory to the system at autoexec time by
  3218                                  ;running a program that changes arenas. This changes the largest block that
  3219                                  ;command.com gets and so changes the transient segment. So, command.com does
  3220                                  ;a checksum at the wrong address and thinks that the transient is destroyed
  3221                                  ;and tries to reload it. At this point, no Comspec is defined and so the
  3222                                  ;reload fails, hanging the system. To get around this we just copy the
  3223                                  ;transient from the previous address to the new address(if changed) and
  3224                                  ;then let command.com do the checksum. So, if the transient area is not
  3225                                  ;corrupted, there will not be any reload. In Novell's case, the transient
  3226                                  ;is not really corrupted and so this should work.
  3227                                  
  3228                                  	; 12/01/2023
  3229                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0F5Ah (CODERES:021Ah)
  3230                                  
  3231 00000E10 3B1E[7A01]              	cmp	bx,[TrnSeg]		; Segment still the same?
  3232 00000E14 7423                    	je	short LodCom1		; yes, dont copy
  3233                                  
  3234                                  ;Check if the new segment is above or below the current move. If the new
  3235                                  ;segment is above (i.e new block is larger than previous block), then we
  3236                                  ;have to move in the reverse direction
  3237                                  
  3238                                  	;mov	cx,98C5h
  3239 00000E16 B97395                  	mov	cx,TRANSPACEEND		; cx = length to move
  3240 00000E19 7707                    	ja	short mov_down		; new seg > old seg, reverse move
  3241 00000E1B 31F6                    	xor	si,si			; normal move
  3242 00000E1D 89F7                    	mov	di,si
  3243 00000E1F FC                      	cld
  3244 00000E20 EB06                    	jmp	short copy_trans
  3245                                  mov_down:
  3246 00000E22 89CE                    	mov	si,cx			; reverse move, start from end
  3247 00000E24 4E                      	dec	si
  3248 00000E25 89F7                    	mov	di,si
  3249 00000E27 FD                      	std
  3250                                  copy_trans:
  3251 00000E28 1E                      	push	ds
  3252 00000E29 06                      	push	es
  3253 00000E2A 8EC3                    	mov	es,bx			; dest segment
  3254 00000E2C 8E1E[7A01]              	mov	ds,[TrnSeg]		; source segment
  3255                                  	;assume	ds:nothing
  3256                                  
  3257 00000E30 F3A4                    	rep	movsb			; copy transient
  3258 00000E32 FC                      	cld
  3259 00000E33 07                      	pop	es
  3260 00000E34 1F                      	pop	ds
  3261                                  	;assume	ds:DATARES
  3262                                  
  3263                                  ;M038; End of changes
  3264                                  
  3265                                  	;mov	[cs:TrnSeg],bx		; new location of transient
  3266                                  	; 12/01/2023
  3267 00000E35 891E[7A01]              	mov	[TrnSeg],bx
  3268                                  
  3269                                  LodCom1:
  3270                                  ;;	mov	ax,cs
  3271                                  ;;	mov	ss,ax
  3272                                  ;SR; At this point ds = DATARES which is where the stack is located
  3273                                  
  3274                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3275                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3276 00000E39 8CD8                    	mov	ax,ds
  3277 00000E3B 8ED0                    	mov	ss,ax
  3278                                  	;assume	ss:DATARES
  3279                                  	;;mov	sp,offset DATARES:RStack
  3280                                  	;mov	sp,53Eh
  3281 00000E3D BC[2004]                	mov	sp,RStack
  3282                                  
  3283                                  ;;	mov	ds,ax
  3284                                  
  3285                                  	;assume	ds:DATARES
  3286                                  	
  3287                                  	; MSDOS 3.3
  3288                                  	;mov	ax,cs
  3289                                  	;mov	ss,ax
  3290                                  	;mov	sp,RSTACK
  3291                                  	;mov	ds,ax
  3292                                  
  3293 00000E40 E87B00                  	call	HeadFix			; close files, restore stdin, stdout
  3294 00000E43 31ED                    	xor	bp,bp			; flag command ok
  3295 00000E45 B8FFFF                  	mov	ax,-1
  3296 00000E48 8706[9001]              	xchg	ax,[VerVal]
  3297 00000E4C 83F8FF                  	cmp	ax,-1
  3298 00000E4F 7404                    	je	short NoSetVer
  3299 00000E51 B42E                    	mov	ah,2Eh
  3300                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh ; AL has correct value
  3301 00000E53 CD21                    	int	21h 		; DOS - SET VERIFY FLAG
  3302                                  				; DL = 00h, AL = 01h VERIFY on / 00h VERIFY off
  3303                                  NoSetVer:
  3304 00000E55 833E[8E01]FF            	cmp	word [SingleCom],-1
  3305 00000E5A 7503                    	jne	short NoSng
  3306 00000E5C E9CBFE                  	jmp	FatalRet2		; we have finished the single command
  3307                                  NoSng:
  3308 00000E5F E87201                  	call	ChkSum			; check the transient
  3309                                  	;cmp	dx,[Sum]
  3310                                  	;je	short HavCom		; transient ok
  3311                                  	; 12/01/2023
  3312 00000E62 7412                    	jz	short HavCom
  3313                                  Bogus_Com:
  3314 00000E64 C606[3301]01            	mov	byte [Loading],1	; flag DskErr routine
  3315 00000E69 E81E01                  	call	LoadCom
  3316                                  ChkSame:
  3317 00000E6C E86501                  	call	ChkSum
  3318                                  	;cmp	dx,[Sum]
  3319                                  	;je	short HavCom		; same command
  3320                                  	; 12/01/2023
  3321 00000E6F 7405                    	jz	short HavCom
  3322                                  Also_Bogus:
  3323 00000E71 E85801                  	call	WrongCom
  3324 00000E74 EBF6                    	jmp	short ChkSame
  3325                                  
  3326                                  	; 12/01/2023
  3327                                  ;HavCom:
  3328                                  ;	; 25/09/2018
  3329                                  ;	mov     ax,(CHAR_OPER*256) ; 3700h
  3330                                  ;	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  3331                                  ;			; Return: AL = FFh unsupported subfunction
  3332                                  ;			; DL = current switch character
  3333                                  ;	mov     [RSWITCHAR],dl
  3334                                  ;	cmp     dl,'/'
  3335                                  ;	jnz     short USESLASH
  3336                                  ;	;mov	cl,'\'
  3337                                  ;	;mov	[RDIRCHAR],cl
  3338                                  ;	mov	byte [RDIRCHAR],'\'
  3339                                  ;USESLASH:
  3340                                  
  3341                                  HavCom:
  3342                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3343 00000E76 C606[3301]00            	mov	byte [Loading],0		; flag to DskErr
  3344                                  	;;mov	si,offset DATARES:TranVars
  3345                                  	;mov	si,453h		; MSDOS 5.0 COMMAND.COM
  3346 00000E7B BE[3503]                	mov	si,TranVars
  3347                                  	;;mov	di,offset TRANGROUP:HeadCall
  3348                                  	;mov	di,8D75h	; MSDOS 5.0 COMMAND.COM
  3349 00000E7E BF[A38A]                	mov	di,HEADCALL
  3350 00000E81 8E06[7A01]              	mov	es,[TrnSeg]
  3351 00000E85 FC                      	cld
  3352                                  	;mov	cx,467h		; MSDOS 5.0 COMMAND.COM	
  3353 00000E86 B9[4903]                	mov	cx,TranVarEnd
  3354 00000E89 29F1                    	sub	cx,si
  3355 00000E8B F3A4                    	rep	movsb			; transfer info to transient
  3356 00000E8D A1[8001]                	mov	ax,[MemSiz]
  3357 00000E90 A30200                  	mov	[PDB.BLOCK_LEN],ax ; mov [ds:2],ax ; adjust my own header
  3358                                  
  3359                                  ;***	TJmp - jump-off to transient
  3360                                  ;
  3361                                  ;	Public label so debugger can find this spot.
  3362                                  
  3363                                  TJmp:	; 12/01/2023
  3364 00000E93 FF2E[7801]              	jmp	far [Trans]		; jmp dword ptr Trans
  3365                                  
  3366                                  ;***	TRemCheck - far version of RemCheck for transient
  3367                                  
  3368                                  TRemCheck:
  3369                                  	; 12/01/2023
  3370 00000E97 1F                      	pop	ds			; ds = DATARES
  3371 00000E98 83C402                  	add	sp,2			; discard old value of ds
  3372                                  
  3373 00000E9B E80100                  	call	RemCheck
  3374 00000E9E CB                      	retf
  3375                                  
  3376                                  ;***	RemCheck
  3377                                  ;
  3378                                  ;	ENTRY	AL = drive (0=default, 1=A, ...)
  3379                                  ;
  3380                                  ;	EXIT	ZR set if removeable media
  3381                                  ;		ZR clear if fixed media
  3382                                  ;
  3383                                  ;	USED	none
  3384                                  
  3385                                  	; 12/01/2023
  3386                                  RemCheck:
  3387 00000E9F 50                      	push	ax
  3388 00000EA0 53                      	push	bx
  3389 00000EA1 89C3                    	mov	bx,ax
  3390 00000EA3 B80844                  	mov	ax,4408h
  3391                                  	;mov	ax,(IOCTL<<8)+8 ; 4408h
  3392 00000EA6 CD21                    	int	21h		; DOS - 2+ - IOCTL -
  3393 00000EA8 7304                    	jnc	short rcCont		
  3394                                  
  3395                                  ;	If an error occurred, assume the media is non-removable.
  3396                                  ;	AX contains the non-zero error code from the int 21, so
  3397                                  ;	'or ax,ax; sets non-zero. This behavior makes network drives
  3398                                  ;	appear to be non-removable.				
  3399                                  					
  3400 00000EAA 09C0                    	or	ax,ax			
  3401 00000EAC EB05                    	jmp	short ResRegs
  3402                                  rcCont:
  3403 00000EAE 83E001                  	and	ax,1
  3404 00000EB1 F7D0                    	not	ax
  3405                                  ResRegs:
  3406 00000EB3 5B                      	pop	bx
  3407 00000EB4 58                      	pop	ax
  3408 00000EB5 C3                      	retn
  3409                                  
  3410                                  ;***	THeadFix
  3411                                  ;
  3412                                  ;	Far version of HeadFix, called from transient.
  3413                                  
  3414                                  THeadFix:
  3415                                  	; 12/01/2023
  3416 00000EB6 1F                      	pop	ds			; ds = DATARES
  3417 00000EB7 83C402                  	add	sp,2			; discard old ds value on stack
  3418                                  
  3419 00000EBA E80100                  	call	HeadFix
  3420 00000EBD CB                      	retf
  3421                                  
  3422                                  ;***	HeadFix
  3423                                  
  3424                                  	; 12/01/2023
  3425                                  HeadFix:
  3426 00000EBE E83101                  	call	SetVect			; set vectors to our values
  3427                                  
  3428                                  ;	Clean up header
  3429                                  
  3430                                  ;	Bugbug:	optimize:
  3431                                  ;	mov	word ptr ds:Pdb_Jfn_Table,cx  instead of separate bytes
  3432                                  
  3433 00000EC1 31DB                    	xor	bx,bx			; BX = handle = 0
  3434 00000EC3 8B0E[8A01]              	mov	cx,[Io_Save]		; CX = original stdin, stdout
  3435                                  	;mov	dx,[18h] 
  3436 00000EC7 8B161800                	mov	dx,[PDB.JFN_TABLE]	; DX = current stdin, stdout
  3437 00000ECB 38D1                    	cmp	cl,dl
  3438 00000ECD 7408                    	je	short Chk1		; stdin matches
  3439 00000ECF B43E                    	mov	ah,3Eh
  3440                                  	;mov	ah,CLOSE  ; 3Eh
  3441 00000ED1 CD21                    	int	21h			; close stdin
  3442                                  	;mov	[18h],cl
  3443 00000ED3 880E1800                	mov	[PDB.JFN_TABLE],cl	; restore stdin
  3444                                  Chk1:
  3445 00000ED7 43                      	inc	bx			; BX = handle = 1
  3446 00000ED8 38F5                    	cmp	ch,dh			
  3447 00000EDA 7408                    	je	short ChkOtherHand	; stdout matches
  3448 00000EDC B43E                    	mov	ah,3Eh
  3449                                  	;mov	ah,CLOSE
  3450 00000EDE CD21                    	int	21h			; close stdout
  3451                                  	;mov	[19h],ch
  3452 00000EE0 882E1900                	mov	[PDB.JFN_TABLE+1],ch	; restore stdout
  3453                                  ChkOtherHand:
  3454 00000EE4 83C304                  	add	bx,4			; skip handles 2,3,4
  3455 00000EE7 B90F00                  	mov	cx,FILPERPROC-5	; 15	; CX = # handles to close
  3456                                  					; (handles 0-4 already done)
  3457                                  CloseLoop:
  3458 00000EEA B43E                    	mov	ah,3Eh
  3459                                  	;mov	ah,CLOSE ; 3Eh
  3460 00000EEC CD21                    	int	21h			; close each handle
  3461 00000EEE 43                      	inc	bx			; BX = next handle
  3462 00000EEF E2F9                    	loop	CloseLoop
  3463                                  
  3464                                  	; MSDOS 6.0
  3465                                  ;	Bugbug:	since this is for transient code, move it there
  3466                                  	
  3467                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3468                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:103Dh)
  3469                                  
  3470                                  ;	M012: remove this CS -> DS. Must've been missed during
  3471                                  ;	purification.
  3472                                  ;;	push	ds			; save data segment
  3473                                  ;;	push	cs			; get local segment into DS
  3474                                  ;;	pop	ds			;
  3475 00000EF1 803E[AD01]FF            	cmp	byte [Append_Flag],-1	; do we need to reset APPEND?
  3476 00000EF6 750E                    	jne	short Append_Fix_End	; no - just exit
  3477 00000EF8 B807B7                  	mov	ax,0B707h
  3478                                  	;mov	ax,AppendSetState	; set the state of Append
  3479 00000EFB 8B1E[AB01]              	mov	bx,[Append_State] 	; back to the original state
  3480 00000EFF CD2F                    	int	2Fh			;
  3481 00000F01 C606[AD01]00            	mov	byte [Append_Flag],0	; set append flag to invalid
  3482                                  Append_Fix_End: 			;
  3483                                  ;;	pop	ds			; get data segment back
  3484 00000F06 C3                      	retn
  3485                                  
  3486                                  	; MSDOS 3.3
  3487                                  	;retn
  3488                                  
  3489                                  ;***	SavHand - save current program's stdin/out & set to our stderr
  3490                                  ;
  3491                                  ;	ENTRY	nothing
  3492                                  ;
  3493                                  ;	EXIT	nothing
  3494                                  ;
  3495                                  ;	USED	flags
  3496                                  ;
  3497                                  ;	EFFECTS
  3498                                  ;	  Handle01 = current program's stdin,stdout JFN entries
  3499                                  ;	  current program's stdin,stdout set to our stderr
  3500                                  ;
  3501                                  
  3502                                  ;SR;
  3503                                  ; Changed ds = DATARES. We need it to access our JFN_Table
  3504                                  ; Called from ContC ( ds = DATARES ) and DskErr ( ds = DATARES ).
  3505                                  
  3506                                  SavHand:
  3507                                  	;assume	ds:DATARES,es:NOTHING,ss:NOTHING
  3508                                  
  3509                                  	; 12/01/2023
  3510                                  	;push	ds ; MSDOS 3.3
  3511                                  
  3512 00000F07 53                      	push	bx			;preserve registers
  3513 00000F08 50                      	push	ax
  3514                                  	; 12/01/2023
  3515 00000F09 06                      	push	es
  3516 00000F0A 1E                      	push	ds			; save DATARES value
  3517                                  
  3518 00000F0B B451                    	mov	ah,51h
  3519                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3520 00000F0D CD21                    	int	21h			; BX = user's header seg addr
  3521 00000F0F 8EDB                    	mov	ds,bx			; DS = user's header seg addr
  3522                                  	;lds	bx,[34h]	
  3523 00000F11 C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to JFN table
  3524 00000F15 8B07                    	mov	ax,[bx]			; AX = stdin,stdout JFN's
  3525                                  	; 12/01/2023
  3526 00000F17 07                      	pop	es			; es = DATARES
  3527 00000F18 06                      	push	es			; save it back on stack
  3528 00000F19 26A3[3101]              	mov	[es:Handle01],ax	; save user's stdin, stdout
  3529                                  	;mov	[cs:HANDLE01],ax
  3530                                  
  3531                                  ;SR;
  3532                                  ; Use es to address Handle01 & our JFN_Table
  3533                                  
  3534                                  	; 12/01/2023
  3535                                  	;mov	al,[es:1Ah]
  3536 00000F1D 26A01A00                	mov	al,[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr
  3537                                  	;mov	al,[cs:PDB.JFN_TABLE+2] ; mov al,[cs:1Ah]
  3538 00000F21 88C4                    	mov	ah,al			; AH = COMMAND stderr
  3539 00000F23 8907                    	mov	[bx],ax			; set user's stdin/out to our stderr
  3540                                  	; 12/01/2023
  3541 00000F25 1F                      	pop	ds			; restore registers
  3542 00000F26 07                      	pop	es
  3543 00000F27 58                      	pop	ax
  3544 00000F28 5B                      	pop	bx
  3545                                  	;pop	ds ; MSDOS 3.3
  3546 00000F29 C3                      	retn
  3547                                  
  3548                                  	;assume	ds:DATARES
  3549                                  GetComDsk2:
  3550 00000F2A E81F00                  	call	GetComDsk
  3551 00000F2D E909FF                  	jmp	LodCom1			; memory already allocated
  3552                                  
  3553                                  RestHand:
  3554 00000F30 1E                      	push	ds
  3555 00000F31 53                      	push	bx			; restore stdin, stdout to user
  3556 00000F32 50                      	push	ax
  3557                                  	; 12/01/2023
  3558 00000F33 B451                    	mov	ah,51h
  3559                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3560 00000F35 CD21                    	int	21h			; point to user's header
  3561 00000F37 A1[3101]                	mov	ax,[Handle01]
  3562 00000F3A 8EDB                    	mov	ds,bx
  3563                                  	;assume ds:NOTHING
  3564                                  	;lds	bx,[34h] 
  3565 00000F3C C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to jfn table
  3566 00000F40 8907                    	mov	[bx],ax			; stuff his old 0 and 1
  3567 00000F42 58                      	pop	ax
  3568 00000F43 5B                      	pop	bx
  3569 00000F44 1F                      	pop	ds
  3570 00000F45 C3                      	retn
  3571                                  
  3572                                  	;assume ds:DATARES,ss:DATARES
  3573                                  Hopeless:
  3574 00000F46 BA[C704]                	mov	dx,COMBAD
  3575 00000F49 E9BEFD                  	jmp	FatalC
  3576                                  
  3577                                  GetComDsk:
  3578 00000F4C A0[7F01]                	mov	al,[ComDrv]
  3579 00000F4F E84DFF                  	call	RemCheck
  3580 00000F52 75F2                    	jnz	short Hopeless		; non-removable media
  3581                                  GetComDsk3:
  3582 00000F54 81FA[C704]              	cmp	dx,COMBAD		; cmp dx,offset DATARES:ComBad
  3583 00000F58 7503                    	jne	short GetComDsk4
  3584                                  	;;mov	dx,offset DATARES:ComBad ; DX = ptr to msg
  3585                                  	; 12/01/2023
  3586                                  	;mov	dx,COMBAD ; (MSDOS 5.0 COMMAND.COM - RESGROUP:10A6h)
  3587                                  	;invoke	RPrint			; say COMMAND is invalid
  3588 00000F5A E81803                  	call	RPrint
  3589                                  	;call	RDISPMSG
  3590                                  
  3591                                  GetComDsk4:
  3592                                  
  3593                                  ;	Bugbug:	there's always a drive here? No need to check?
  3594                                  
  3595 00000F5D 803E[1A01]00            	cmp	byte [PutBackDrv],0	; is there a drive in the comspec?
  3596 00000F62 7509                    	jne	short Users_Drive	; yes - use it
  3597 00000F64 B419                    	mov	ah,19h
  3598                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h ; use default drive
  3599 00000F66 CD21                    	int	21h
  3600 00000F68 0441                    	add	al,"A"                  ; convert to ascii
  3601 00000F6A A2[1A01]                	mov	[PutBackDrv],al		; put in message to print out
  3602                                  
  3603                                  Users_Drive:
  3604                                  	; 12/01/2023
  3605                                  	; MSDOS 6.0
  3606 00000F6D BA[DD04]                	mov	dx,PUTBACKMSG		; prompt for diskette
  3607                                  	;mov	si,offset DATARES:PutBackSubst
  3608                                  	;invoke	RPrint
  3609 00000F70 BE[1401]                	mov	si,PutBackSubst		; containing COMMAND
  3610 00000F73 E8FF02                  	call	RPrint
  3611                                  	;mov	dx,offset DATARES:Prompt
  3612                                  	;invoke	RPrint
  3613 00000F76 BA[FF04]                	mov	dx,PROMPT		; "Press any key"
  3614 00000F79 E8F902                  	call	RPrint
  3615                                  
  3616                                  	; MSDOS 3.3
  3617                                  	;mov	dx,PUTBACKMSG		; prompt for diskette
  3618                                  	;call	RDISPMSG
  3619                                  	;mov	dx,[PUTBACKSUBSTPTR]
  3620                                  	;mov	si,[COMSPEC_END]
  3621                                  	;mov	byte [si+1],'$'
  3622                                  	;call	RDISPMSG
  3623                                  	;mov	byte [si+1],0
  3624                                  	;mov	dx,PROMPT
  3625                                  	;call	RDISPMSG
  3626                                  
  3627                                  	;call	GetRawFlushedByte
  3628                                  	;retn
  3629                                  	; 12/01/2023
  3630                                  	;jmp	short GetRawFlushedByte
  3631                                  
  3632                                  ;***	GetRawFlushedByte - flush world and get raw input
  3633                                  
  3634                                  GetRawFlushedByte:
  3635                                  	; 12/01/2023
  3636 00000F7C B8070C                  	mov	ax,0C07h
  3637                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT ; 0C07h
  3638 00000F7F CD21                    	int	21h			; get char without testing or echo
  3639 00000F81 B8000C                  	mov	ax,0C00h
  3640                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + 0 ; 0C00h
  3641 00000F84 CD21                    	int	21h
  3642                                  
  3643                                  ;	Bugbug:	get rid of this return and the following retz.
  3644                                  
  3645                                  LoadCom_retn:
  3646 00000F86 C3                      	retn
  3647                                  
  3648                                  	; 21/04/2023
  3649                                  TryDoOpen:
  3650 00000F87 E8C2FF                  	call	GetComDsk
  3651                                  	;jmp	short LoadCom
  3652                                  
  3653                                  ;***	LoadCom - load in transient
  3654                                  
  3655                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3656                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:10DAh - CODERES:039Ah)
  3657                                  
  3658                                  LoadCom:
  3659                                  	;assume	ds:DATARES
  3660                                  	
  3661 00000F8A 45                      	inc	bp				; flag command read
  3662                                  
  3663 00000F8B BA[3601]                	mov	dx,ComSpec
  3664 00000F8E B8003D                  	mov	ax,3D00h
  3665                                  	;mov	ax,OPEN<<8	; 3D00h
  3666 00000F91 CD21                    	int	21h				; open command.com
  3667 00000F93 730B                    	jnc	short ReadCom
  3668                                  	;cmp	ax,4
  3669 00000F95 83F804                  	cmp	ax,ERROR_TOO_MANY_OPEN_FILES
  3670 00000F98 75ED                    	jnz	short TryDoOpen
  3671 00000F9A BA[8905]                	mov	dx,NOHANDMES
  3672 00000F9D E96AFD                  	jmp	FatalC				; will never find a handle
  3673                                  
  3674                                  	; 21/04/2023
  3675                                  ;TryDoOpen:
  3676                                  	;call	GetComDsk
  3677                                  	;jmp	short LoadCom
  3678                                  
  3679                                  ReadCom:
  3680 00000FA0 89C3                    	mov	bx,ax				; BX = handle
  3681                                  	;mov	dx,offset RESGROUP:TranStart
  3682 00000FA2 BA0022                  	mov	dx,TRANSTART
  3683 00000FA5 31C9                    	xor	cx,cx				; CX:DX = seek loc
  3684 00000FA7 B80042                  	mov	ax,4200h
  3685                                  	;mov	ax,LSEEK<<8	; 4200h
  3686 00000FAA CD21                    	int	21h
  3687 00000FAC 7210                    	jc	short WrongCom1
  3688                                  	; 12/01/2023
  3689                                  	;;mov	cx,offset TRANGROUP:TranSpaceEnd - 100h
  3690                                  	;mov	cx,97C5h		 ; MSDOS 5.0 COMMAND.COM
  3691 00000FAE B97394                  	mov	cx,TRANSPACEEND-100h ; 4C5Ch (for original MSDOS 3.3!)
  3692 00000FB1 1E                      	push	ds
  3693 00000FB2 8E1E[7A01]              	mov	ds,[TrnSeg]
  3694                                  	;assume	ds:NOTHING
  3695 00000FB6 BA0001                  	mov	dx,100h
  3696 00000FB9 B43F                    	mov	ah,3Fh
  3697                                  	;mov	ah,READ	; 3Fh	
  3698 00000FBB CD21                    	int     21h	; DOS - 2+ - READ FROM FILE WITH HANDLE
  3699                                  			; BX = file handle, CX = number of bytes to read
  3700                                  			; DS:DX -> buffer
  3701 00000FBD 1F                      	pop	ds
  3702                                  	;assume	ds:DATARES
  3703                                  WrongCom1:
  3704 00000FBE 9C                      	pushf
  3705 00000FBF 50                      	push	ax
  3706 00000FC0 B43E                    	mov	ah,3Eh
  3707                                  	;mov	ah,CLOSE ; 3Eh
  3708 00000FC2 CD21                    	int	21h			; close command.com
  3709 00000FC4 58                      	pop	ax
  3710 00000FC5 9D                      	popf
  3711 00000FC6 7204                    	jc	short WrongCom		; error on read
  3712 00000FC8 39C8                    	cmp	ax,cx
  3713                                  	;retz				; size matched
  3714 00000FCA 74BA                    	jz	short LoadCom_retn
  3715                                  WrongCom:
  3716 00000FCC BA[C704]                	mov	dx,COMBAD
  3717 00000FCF E87AFF                  	call	GetComDsk
  3718 00000FD2 EBB6                    	jmp	short LoadCom		; try again
  3719                                  
  3720                                  ;***	ChkSum - compute transient checksum
  3721                                  
  3722                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3723                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1129h
  3724                                  ChkSum:
  3725 00000FD4 1E                      	push	ds
  3726 00000FD5 8E1E[7A01]              	mov	ds,[TrnSeg]
  3727 00000FD9 BE0001                  	mov	si,100h
  3728                                  	;;mov	cx,offset TRANGROUP:TranDataEnd - 100h
  3729                                  	;mov	cx,87C2h
  3730 00000FDC B9[F084]                	mov	cx,TRANDATAEND-100h	; 3E44h (for original MSDOS 3.3!)
  3731                                  Check_Sum:
  3732 00000FDF FC                      	cld
  3733 00000FE0 D1E9                    	shr	cx,1
  3734 00000FE2 31D2                    	xor	dx,dx
  3735                                  Chk:
  3736 00000FE4 AD                      	lodsw
  3737 00000FE5 01C2                    	add	dx,ax
  3738 00000FE7 83D200                  	adc	dx,0
  3739 00000FEA E2F8                    	loop	Chk
  3740                                  
  3741                                  	; 04/05/2023
  3742 00000FEC 1F                      	pop	ds
  3743                                  
  3744                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3745 00000FED 3B16[8201]              	cmp	dx,[Sum]
  3746                                  
  3747                                  	;pop	ds ; 04/05/2023
  3748 00000FF1 C3                      	retn
  3749                                  
  3750                                  ;***	SetVect - set interrupt vectors
  3751                                  
  3752                                  SetVect:
  3753                                  	;mov	dx,offset DATARES:LodCom_Trap 
  3754                                  	; 12/01/2023
  3755 00000FF2 BA[7E00]                	mov	dx,LodCom_Trap
  3756                                  	;mov	dx,LODCOM ; MSDOS 3.3
  3757 00000FF5 B82225                  	mov	ax,2522h
  3758                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8) | 22h  ; 2522h
  3759 00000FF8 89160A00                	mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  3760 00000FFC 8C1E0C00                	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  3761 00001000 CD21                    	int	21h
  3762                                  	;mov	dx,offset DATARES:Ctrlc_Trap
  3763 00001002 BA[4A00]                	mov	dx,Ctrlc_Trap
  3764                                  	;mov	dx,CONTC ; MSDOS 3.3
  3765 00001005 FEC0                    	inc	al	; 23h
  3766 00001007 CD21                    	int	21h
  3767                                  	;mov	dx,offset DATARES:CritErr_Trap
  3768 00001009 BA[5500]                	mov	dx,CritErr_Trap
  3769                                  	;mov	dx,CRITERR ; MSDOS 3.3
  3770 0000100C FEC0                    	inc	al	; 24h
  3771 0000100E CD21                    	int	21h
  3772 00001010 C3                      	retn
  3773                                  
  3774                                  	; MSDOS 6.0
  3775                                  ;;SR;
  3776                                  ;We have this to take care of the extra values pushed on the stack by
  3777                                  ;the stub before jumping to LodCom1. We set up ds here and then jump to
  3778                                  ;Lodcom1
  3779                                  
  3780                                  ;public	TrnLodCom1
  3781                                  	; 12/01/2023
  3782                                  TrnLodCom1:
  3783 00001011 1F                      	pop	ds			; ds = DATARES
  3784 00001012 83C402                  	add	sp,2
  3785                                  ;	pop	ds:OldDS
  3786 00001015 E921FE                  	jmp	LodCom1
  3787                                  
  3788                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3789                                  
  3790                                  %if 0
  3791                                  
  3792                                  ;***	EndInit - end up initialization sequence
  3793                                  ;
  3794                                  ;	Move the environment to a newly allocated segment.
  3795                                  
  3796                                  	; MSDOS 3.3
  3797                                  ENDINIT:
  3798                                  	push	ds			; save segments
  3799                                  	push	es			;
  3800                                  	push	cs			; get resident segment to DS
  3801                                  	pop	ds			;
  3802                                  	;assume	ds:RESGROUP
  3803                                  	mov	cx,[USEDENV]		; get number of bytes to move
  3804                                  	mov	es,[ENVIRSEG]		; get target environment segment
  3805                                  	;assume	es:NOTHING
  3806                                  
  3807                                  	cmp	byte [RESETENV],1	; do we need to setblock to env end?
  3808                                  	jne	short NO_RESET 		; no - we already did it
  3809                                  	mov	bx,[ENVSIZ]		; BX = size of environ in paragraphs
  3810                                  	push	es			; save environment - just to be sure
  3811                                  	mov	ah,SETBLOCK  ; 4Ah	;
  3812                                  	int	21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  3813                                  				; ES = segment address of block to change
  3814                                  				; BX = new size in paragraphs
  3815                                  	pop	es
  3816                                  
  3817                                  NO_RESET:
  3818                                  	mov	[PDB.ENVIRON],es ; mov [ds:2Ch],es ; put new environment in my header
  3819                                  	mov	ds,[OLDENV]		; source environment segment
  3820                                  	;assume	ds:NOTHING
  3821                                  	xor	si,si			; set up offsets to start of segments
  3822                                  	xor	di,di
  3823                                  	cld
  3824                                  	rep	movsb			; move it
  3825                                  	xor	ax,ax
  3826                                  	stosb				; make sure it ends with double-null
  3827                                  
  3828                                  	;mov	[cs:InitFlag],FALSE	; turn off init flag
  3829                                  	pop	es
  3830                                  	pop	ds
  3831                                  	jmp	LODCOM			; allocate transient
  3832                                  
  3833                                  	; MSDOS 6.0
  3834                                  
  3835                                  ;The init code has been changed to take care of the new way in which the
  3836                                  ;environment segment is allocated.
  3837                                  ;NB: We can use all the init variables at this point because they are all in
  3838                                  ;RESGROUP
  3839                                  ;Bugbug: The above approach will not work for ROMDOS
  3840                                  
  3841                                  ;IF 0
  3842                                  ;
  3843                                  ;EndInit:
  3844                                  ;	push	ds
  3845                                  ;	push	es			;save segments
  3846                                  ;	push	cs
  3847                                  ;	pop	ds		
  3848                                  ;	assume	ds:RESGROUP
  3849                                  ;;
  3850                                  ;; AllocedEnv flag signals whether it is a passed environment or not
  3851                                  ;;
  3852                                  ;	mov	bx,ds
  3853                                  ;	mov	es,bx			;es = RESGROUP
  3854                                  ;;
  3855                                  ;;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  3856                                  ;; code + data for low COMMAND
  3857                                  ;;
  3858                                  ;	mov	bx,ResSize		;Total size of resident
  3859                                  ;	mov	ah,SETBLOCK
  3860                                  ;	int	21h			;Set block to resident size
  3861                                  ;;
  3862                                  ;;Allocate the correct size for the environment
  3863                                  ;;
  3864                                  ;	mov	bx,EnvSiz		;bx = env size in paras
  3865                                  ;	mov	ah,ALLOC
  3866                                  ;	int	21h			;get memory
  3867                                  ;	jc	nomem_err		;out of memory,signal error
  3868                                  ;
  3869                                  ;	mov	EnvirSeg,ax		;Store new environment segment
  3870                                  ;	mov	ds:PDB_Environ,ax		;Put new env seg in PSP
  3871                                  ;	mov	es,ax			;es = address of allocated memory
  3872                                  ;	assume	es:nothing
  3873                                  ;
  3874                                  ;;
  3875                                  ;;Copy the environment to the newly allocated segment
  3876                                  ;;
  3877                                  ;	mov	cx,UsedEnv		;number of bytes to move
  3878                                  ;
  3879                                  ;	push	ds
  3880                                  ;	mov	ds,OldEnv		;ds = Old environment segment
  3881                                  ;	assume	ds:nothing
  3882                                  ;
  3883                                  ;	xor	si,si
  3884                                  ;	mov	di,si			;Start transfer from 0
  3885                                  ;
  3886                                  ;	cld
  3887                                  ;	rep	movsb			;Do the copy
  3888                                  ;
  3889                                  ;	xor	ax,ax			
  3890                                  ;	stosb				;Make it end with double-null
  3891                                  ;
  3892                                  ;	pop	ds			;ds = RESGROUP
  3893                                  ;	assume	ds:RESGROUP
  3894                                  ;;
  3895                                  ;;We have to free the old environment block if it was allocated by INIT
  3896                                  ;;
  3897                                  ;	cmp     AllocedEnv,0            ;has env been allocated by INIT?
  3898                                  ;	je      no_free                 ;no, do not free it
  3899                                  ;
  3900                                  ;	mov	ax,OldEnv		;Get old environment
  3901                                  ;	mov	es,ax
  3902                                  ;	mov	ah,DEALLOC	
  3903                                  ;	int	21h			;Free it
  3904                                  ;no_free:
  3905                                  ;	mov	InitFlag,FALSE		;indicate INIT is done
  3906                                  ;	
  3907                                  ;	pop	es
  3908                                  ;	pop	ds
  3909                                  ;	assume	ds:nothing
  3910                                  ;	
  3911                                  ;	jmp	LodCom			;allocate transient
  3912                                  ;
  3913                                  ;nomem_err:
  3914                                  ;;
  3915                                  ;;We call the error routine which will never return. It will either exit
  3916                                  ;;with an error ( if not the first COMMAND ) or just hang after an error 
  3917                                  ;;message ( if first COMMAND )
  3918                                  ;;
  3919                                  ;
  3920                                  ;	call	Alloc_error
  3921                                  ;ENDIF
  3922                                  ;
  3923                                  ;CODERES ends
  3924                                  
  3925                                  ;	This TAIL segment is used to produce a PARA aligned label in
  3926                                  ;	the resident group which is the location where the transient
  3927                                  ;	segments will be loaded initial.
  3928                                  
  3929                                  ;TAIL		segment public para
  3930                                  ;
  3931                                  ;		org	0
  3932                                  ;TranStart	label	word
  3933                                  ;		public	TranStart
  3934                                  ;
  3935                                  ;TAIL		ends
  3936                                  ;
  3937                                  
  3938                                  ;	This TAIL segment is used to produce a PARA aligned label in
  3939                                  ;	the transient group which is the location where the exec
  3940                                  ;	segments will be loaded initial.
  3941                                  ;
  3942                                  ;	Bugbug:	Is TRANTAIL used anymore?
  3943                                  
  3944                                  ;TRANTAIL	segment public para
  3945                                  ;
  3946                                  ;		org	0
  3947                                  ;ExecStart   	label   word
  3948                                  ;
  3949                                  ;TRANTAIL    	ends
  3950                                  
  3951                                  %endif ; 12/01/2023
  3952                                  
  3953                                  ;=============================================================================
  3954                                  ; RUCODE.ASM, MSDOS 6.0, 1991
  3955                                  ;=============================================================================
  3956                                  ; 22/09/2018 - Retro DOS v3.0
  3957                                  
  3958                                  ;	title	Localizable code for resident COMMAND
  3959                                  
  3960                                  	;assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  3961                                  
  3962                                  ; ----------------------------------------------------------------------------
  3963                                  ;***	AskEnd - ask user to confirm batch file termination
  3964                                  ;
  3965                                  ;	Confirm with user before freeing batch ...
  3966                                  ;
  3967                                  ;	ENTRY	nothing
  3968                                  ;
  3969                                  ;	EXIT	CY = set if batch termination is confirmed
  3970                                  ;
  3971                                  ;		CY = clear if batch should continue
  3972                                  ;
  3973                                  ;	USED	AX,DX,...
  3974                                  ;
  3975                                  ;	Bugbug:	move this to transient, copy to batch segment.
  3976                                  ;	Bugbug:	or move it to command1 1st.
  3977                                  ;
  3978                                  ;	Bugbug: No_Char and Yes_Char should be constants.
  3979                                  ; ----------------------------------------------------------------------------
  3980                                  
  3981                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3982                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1169h (CODERES:0429h)
  3983                                  
  3984                                  AskEnd:
  3985                                  	;assume	ds:DATARES
  3986                                  
  3987 00001018 BA[2105]                	mov	dx,ENDBATMES			; DX = message #
  3988 0000101B E85702                  	call	RPrint
  3989                                  	;call	RDISPMSG  ; MSDOS 3.3
  3990 0000101E B8010C                  	mov	ax,0C01h
  3991                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT  ;0C01h
  3992 00001021 CD21                    	int     21h             ; DOS - CLEAR KEYBOARD BUFFER
  3993                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
  3994 00001023 E8E802                  	call	CharToUpper			; change to upper case
  3995 00001026 3A06[2804]              	cmp	al,[NO_CHAR]
  3996 0000102A 7407                    	je	short aeRet			; answer is no (CY is clear)
  3997 0000102C 3A06[2704]              	cmp	al,[YES_CHAR]
  3998 00001030 75E6                    	jne	short AskEnd			; invalid response, try again
  3999 00001032 F9                      	stc					; answer is yes
  4000                                  aeRet:	
  4001 00001033 C3                      	retn
  4002                                  
  4003                                  ; ----------------------------------------------------------------------------
  4004                                  ;***	DskErr - critical error handler
  4005                                  ;
  4006                                  ;	Default critical error handler unless user intercepts int 24h.
  4007                                  ;
  4008                                  ;	ENTRY	int 24h
  4009                                  ;
  4010                                  ;	EXIT
  4011                                  ;
  4012                                  ;	USED
  4013                                  ;
  4014                                  ;	EFFECTS
  4015                                  ; ----------------------------------------------------------------------------
  4016                                  
  4017                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4018                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1185h (CODERES:0445h)
  4019                                  
  4020                                  ;SR; 
  4021                                  ;The stub is going to push the old ds value and the resident data segment
  4022                                  ;onto the stack in that order. Get it off the stack
  4023                                  
  4024                                  ;DskErr	proc	far
  4025                                  DSKERR:
  4026                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  4027                                  	; 12/01/2023
  4028 00001034 1F                      	pop	ds			; ds = DATARES
  4029                                  	;assume ds:DATARES
  4030 00001035 8F06[2004]              	pop	word [OldDS]		; save old ds value
  4031                                  
  4032                                  ;CRITERR: ; MSDOS 3.3
  4033 00001039 FB                      	sti
  4034                                  	; 12/01/2023
  4035                                  	;push	ds ; 25/09/2018
  4036 0000103A 06                      	push	es
  4037 0000103B 56                      	push	si
  4038 0000103C 51                      	push	cx
  4039 0000103D 57                      	push	di
  4040 0000103E 51                      	push	cx
  4041 0000103F 50                      	push	ax
  4042                                  
  4043 00001040 1E                      	push	ds			;save our data segment
  4044                                  	;push	cs ; 25/09/2018
  4045 00001041 07                      	pop	es			;es = DATARES
  4046                                  
  4047 00001042 8EDD                    	mov	ds,bp
  4048                                  	;assume	ds:nothing
  4049                                  
  4050                                  	;mov	ax,[si].SDEVATT
  4051 00001044 8B4404                  	mov	ax,[si+SYSDEV.ATT] ; mov ax,[si+4]	
  4052 00001047 268826[1001]            	mov	[es:CDevAt],ah
  4053                                  
  4054                                  	;push	cs
  4055                                  	;pop	es
  4056                                  
  4057 0000104C BF[0301]                	mov	di,DevName
  4058 0000104F B90800                  	mov	cx,8
  4059                                  	;add	si,SDEVNAME  ; add si,10
  4060 00001052 83C60A                  	add	si,SYSDEV.NAME	; save device name (even for block device)
  4061                                  				
  4062 00001055 FC                      	cld
  4063 00001056 F3A4                    	rep	movsb
  4064 00001058 58                      	pop	ax
  4065 00001059 59                      	pop	cx
  4066 0000105A 5F                      	pop	di
  4067                                  
  4068                                  ;	Stack still contains DS and ES.
  4069                                  
  4070                                  ;SR;
  4071                                  ;We need ds = DATARES for SavHand
  4072                                  
  4073                                  	 ;12/01/2023
  4074 0000105B 06                      	push	es
  4075 0000105C 1F                      	pop	ds
  4076                                  	;assume	ds:DATARES
  4077                                  
  4078                                  	;invoke	SavHand		; save user's stdin/out, set to our stderr
  4079 0000105D E8A7FE                  	call	SavHand
  4080                                  
  4081                                  	; 12/01/2023
  4082                                  	; 25/09/2018
  4083                                  	;;push	cs
  4084                                  	;push	es
  4085                                  	;pop	ds		; set up local data segment
  4086                                  	;assume	ds:resgroup
  4087                                  
  4088 00001060 52                      	push	dx
  4089 00001061 E80E02                  	call	crlf
  4090 00001064 5A                      	pop	dx
  4091                                  
  4092                                  ;	Bugbug:	rename Crit_Err_Info to CritErrAH?
  4093                                  
  4094 00001065 8826[8701]              	mov	[Crit_Err_Info],ah	; save critical error flags
  4095                                  
  4096                                  ;	Compute and save ASCII drive letter (nonsense for char devices)
  4097                                  
  4098 00001069 0441                    	add	al,'A'
  4099 0000106B A2[F000]                	mov	[DrvLet],al
  4100                                  
  4101                                  ;	Bugbug:	These labels are awful. Change, especially 'NoHardE'.
  4102                                  
  4103 0000106E F6C480                  	test	ah,80h
  4104 00001071 740A                    	jz	short NoHardE		; it's a disk-device error
  4105 00001073 F606[1001]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4106 00001078 7503                    	jnz	short NoHardE		; it's a character device
  4107 0000107A E9E801                  	jmp	FatErr			; it's a FAT error
  4108                                  
  4109                                  NoHardE:
  4110 0000107D BE[4904]                	mov	si,MREAD		; SI = "read" msg #
  4111 00001080 F6C401                  	test	ah,1
  4112 00001083 7403                    	jz	short SavMes		; it's a read error
  4113 00001085 BE[5204]                	mov	si,MWRITE		; SI = "write" msg #
  4114                                  SavMes:
  4115 00001088 893E[4903]              	mov	[OldErrNo],di		; save critical error code
  4116                                  
  4117                                  ;	Bugbug:	don't need to save/restore all here?
  4118                                  
  4119 0000108C 06                      	push	es
  4120                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4121                                  	;push	ds			; GetExtendedError likes to STOMP
  4122                                  	; 12/01/2023
  4123                                  	; (all registers are changed -in dos service- except bp) *
  4124                                  	;push	bp
  4125                                  	; 19/07/2024
  4126                                  	;push	si
  4127                                  	;push	dx
  4128 0000108D 51                      	push	cx
  4129 0000108E 53                      	push	bx
  4130                                  	; 05/06/2023
  4131 0000108F B459                    	mov	ah,59h ; *
  4132                                  	;mov	ah,GetExtendedError ; 59h ; get extended error info
  4133 00001091 CD21                    	int	21h
  4134 00001093 5B                      	pop	bx
  4135 00001094 59                      	pop	cx
  4136                                  	; 19/07/2024
  4137                                  	;pop	dx
  4138                                  	;pop	si
  4139                                  	; 12/01/2023
  4140                                  	;pop	bp
  4141                                  	; 19/07/2024
  4142                                  	;pop	ds
  4143 00001095 893E[1E01]              	mov	[NeedVol],di		; save possible ptr to volume label
  4144 00001099 8C06[2001]              	mov	[NeedVol+2],es
  4145 0000109D 07                      	pop	es
  4146                                  
  4147                                  ;	Bugbug:	AX has extended error code, so no need to zero AH?
  4148                                  
  4149                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4150                                  	;xor	ah,ah
  4151 0000109E 89C7                    	mov	di,ax			; DI = error code
  4152                                  
  4153                                  ; Bugbug: somewhat obsolete documentation?
  4154                                  ;
  4155                                  ; DI is now the correct error code. Classify things to see what we are
  4156                                  ; allowed to report. We convert DI into a 0-based index into a message table.
  4157                                  ; This presumes that the int 24 errors (oldstyle) and new errors (sharing and
  4158                                  ; the like) are contiguous.
  4159                                  
  4160                                  ;	Bugbug:	simplify following code by cmp'ing instead of sub'ing.
  4161                                  ;	Check use of ErrCd_24, though.
  4162                                  
  4163 000010A0 83EF13                  	sub	di,ERROR_WRITE_PROTECT ; 13h
  4164 000010A3 7303                    	jae	short HavCod
  4165                                  
  4166                                  ;	Bugbug:	wouldn't it be better to display the original error msg,
  4167                                  ;	even though it's not a critical error?
  4168                                  
  4169 000010A5 BF0C00                  	mov	di,ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT ; mov di,0Ch
  4170                                  
  4171                                  ; DI now has the mapped error code. Old style errors are:
  4172                                  ;   FOOBAR <read|writ>ing drive ZZ.
  4173                                  ; New style errors are:
  4174                                  ;   FOOBAR
  4175                                  ; We need to figure out which the particular error belongs to.
  4176                                  
  4177                                  HavCod:
  4178 000010A8 C606[2201]00            	mov	byte [ErrType],0	; assume old style
  4179 000010AD 83FF10                  	cmp	di,ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT  ; cmp di,10h
  4180 000010B0 7405                    	je	short SetStyle
  4181 000010B2 83FF11                  	cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4182 000010B5 7504                    	jne	short GotStyle
  4183                                  
  4184                                  SetStyle:
  4185                                  ;	Bugbug:	use INC
  4186                                  	;mov	byte [ErrType],1		; must be new type
  4187 000010B7 FE06[2201]              	inc	byte [ErrType] ; Retro DOS v3.0 COMMAND.COM - 22/09/2018
  4188                                  
  4189                                  GotStyle:
  4190 000010BB 893E[2F01]              	mov	[ErrCd_24],di
  4191                                  	; 12/01/2023
  4192                                  	; 25/09/2018
  4193                                  	; MSDOS 6.0
  4194 000010BF 83FF14                  	cmp	di,ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT ; cmp di,14h
  4195                                  	; MSDOS 3.3
  4196                                  	;cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4197                                  
  4198                                  						; If the error message is unknown
  4199 000010C2 7641                    	jbe	short NormalError		;  redirector, continue. Otherwise,
  4200                                  
  4201                                  ; We do not know how to handle this error. Ask IFSFUNC if she knows
  4202                                  ; how to handle things
  4203                                  
  4204                                  ;input to IFSFUNC:    AL=1
  4205                                  ;		      BX=extended error number
  4206                                  ;
  4207                                  ;output from IFSFUNC: AL=error type (0 or 1)
  4208                                  ;			 0=<message> error (read/writ)ing (drive/device) xxx
  4209                                  ;			   Abort, Retry, Ignore
  4210                                  ;			 1=<message>
  4211                                  ;			   Abort, Retry, Ignore
  4212                                  ;		      ES:DI=pointer to message text
  4213                                  ;		      carry set=>no message
  4214                                  
  4215 000010C4 89C7                    	mov	di,ax			; retrieve correct extended error...
  4216 000010C6 B80005                  	mov	ax,0500h		; is the redir there?
  4217 000010C9 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
  4218                                  			; Return: AL = 00h not installed, OK to install
  4219                                  			; 01h not installed, can't install
  4220                                  			; FFh installed
  4221 000010CB 3CFF                    	cmp	al,0FFh
  4222 000010CD 7529                    	jne	short NoHandler		; no, go to NoHandler
  4223                                  
  4224                                  	; 12/01/2023
  4225                                  	; MSDOS 6.0
  4226 000010CF 53                      	push	bx
  4227 000010D0 89FB                    	mov	bx,di			; get ErrType and ptr to error msg
  4228 000010D2 B80105                  	mov	ax,0501h
  4229 000010D5 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4230 000010D7 5B                      	pop	bx 
  4231 000010D8 721E                    	jc	short NoHandler
  4232                                  	
  4233                                  	; MSDOS 3.3
  4234                                  	;mov     ax,di
  4235                                  	;mov     ah,5
  4236                                  	;int     2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4237                                  	;jc      short NOHANDLER
  4238                                  
  4239                                  ;	Bugbug:	need to record error type?
  4240                                  
  4241 000010DA A2[2201]                	mov	[ErrType],al
  4242                                  
  4243 000010DD 1E                      	push	ds
  4244 000010DE 06                      	push	es
  4245 000010DF 1F                      	pop	ds
  4246 000010E0 89FA                    	mov	dx,di
  4247 000010E2 B9FFFF                  	mov	cx,-1			; find end of msg
  4248 000010E5 30C0                    	xor	al,al
  4249                                  
  4250 000010E7 FC                      	cld
  4251 000010E8 F2AE                    	repnz	scasb
  4252                                  
  4253                                  ;	Bugbug:	we can do better than this.
  4254                                  
  4255                                  	;mov	byte [di-1],'$'
  4256                                  	; 19/07/2024
  4257 000010EA 4F                      	dec	di
  4258 000010EB C60524                  	mov	byte [di],'$'
  4259                                  	
  4260                                  	;CALL	RDISPMSG ; MSDOS 3.3
  4261                                  	
  4262 000010EE B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9	; print the message
  4263 000010F0 CD21                    	int	21h
  4264                                  
  4265                                  	;mov	byte [di-1],0			; restore terminal byte
  4266                                  	; 19/07/2024
  4267 000010F2 C60500                  	mov	byte [di],0
  4268                                  
  4269 000010F5 1F                      	pop	ds				; clean up and continue
  4270 000010F6 EB15                    	jmp	short CheckErrType
  4271                                  
  4272                                  ;*	Redir isn't available or doesn't recognize the error.
  4273                                  ;	Restore regs to unextended error.
  4274                                  
  4275                                  NoHandler:
  4276 000010F8 C606[2201]00            	mov	byte [ErrType],0
  4277                                  ;	Bugbug:	won't this break, since we add error_write_protect back in?
  4278 000010FD 8B3E[4903]              	mov	di,[OldErrNo]
  4279 00001101 893E[2F01]              	mov	[ErrCd_24],di
  4280                                  
  4281                                  NormalError:
  4282                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4283                                  	; MSDOS 6.0
  4284 00001105 83C713                  	add	di,ERROR_WRITE_PROTECT
  4285 00001108 87FA                    	xchg	di,dx			; may need dx later
  4286 0000110A E88101                  	call	RPrintCrit		; print error type
  4287                                  
  4288                                  	; MSDOS 3.3
  4289                                  	;shl     di,1
  4290                                  	;mov     di,[CRMSGTBL+di]
  4291                                  	;xchg    di,dx
  4292                                  	;call    RDISPMSG
  4293                                  
  4294                                  CheckErrType:
  4295 0000110D 803E[2201]00            	cmp	byte [ErrType],0	; Check error style...
  4296 00001112 7405                    	je	short ContOld
  4297 00001114 E85B01                  	call	crlf			; if new style then done printing
  4298 00001117 EB31                    	jmp	short Ask
  4299                                  
  4300                                  ContOld:
  4301                                  	; 12/01/2023
  4302                                  	; MSDOS 6.0
  4303 00001119 46                      	inc	si			; DS:SI = ptr to asciiz string
  4304                                  
  4305                                  ;	Bugbug:	combine some of the following two sections?
  4306                                  
  4307                                  	; 12/01/2023
  4308 0000111A F606[1001]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4309                                  	;test	byte [CDevAt],DEVTYP shr 8 ; 80h
  4310 0000111F 740F                    	jz	short BlkErr
  4311                                  	;;mov	dx,offset DATARES:CharDevErr	; DX = ptr to device message
  4312                                  	;mov	dx,ChardevErr
  4313 00001121 BA[6A04]                	mov	dx,MDEVICE
  4314                                  	;mov	[CharDevErrRw.SubstPtr],si	; point to read/write string
  4315 00001124 8936[F200]              	mov	[CharDevErrRw],si
  4316                                  	;mov	si,offset DATARES:CharDevErrSubst; SI = ptr to subst block
  4317 00001128 BE[F100]                	mov	si,CharDevErrSubst
  4318                                  
  4319 0000112B E84701                  	call	RPrint				; print the message
  4320 0000112E EB1A                    	jmp	short Ask			; don't ralph on command
  4321                                  
  4322                                  	; 12/01/2023
  4323                                  	; MSDOS 3.3
  4324                                  	;mov	dx,ERRMES
  4325                                  	;call	RDISPMSG
  4326                                  	;mov	dx,si
  4327                                  	;call	RDISPMSG
  4328                                  	;
  4329                                  	;test	byte [CDevAt],80h
  4330                                  	;jz	short BLKERR
  4331                                  	;mov	dx,CHARDEVERR	; " device "
  4332                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4333                                  	;int	21h		; DOS - PRINT STRING
  4334                                  	;			; DS:DX -> string terminated by "$"
  4335                                  	;jmp	short ASK
  4336                                  
  4337                                  BlkErr:
  4338                                  	; 12/01/2023
  4339                                  	; MSDOS 6.0
  4340                                  	;;mov	dx,offset DATARES:BlkDevErr	; DX = error msg #
  4341                                  	;mov	dx,BlkDevErr
  4342 00001130 BA[5B04]                	mov	dx,MDRIVE
  4343                                  	;mov	[BlkDevErrRw.SubstPtr],si	; "reading","writing" ptr
  4344 00001133 8936[EB00]              	mov	[BlkDevErrRw],si
  4345                                  	;mov	si,offset DATARES:BlkDevErrSubst ; SI = ptr to subst block
  4346 00001137 BE[EA00]                	mov	si,BlkDevErrSubst
  4347 0000113A E83801                  	call	RPrint
  4348                                  
  4349                                  	; MSDOS 3.3
  4350                                  	;mov	dx,BLKDEVERR
  4351                                  	;call	RDISPMSG
  4352                                  
  4353 0000113D 803E[3301]00            	cmp	byte [Loading],0
  4354 00001142 7406                    	jz	short Ask
  4355 00001144 E8E9FD                  	call	RestHand
  4356 00001147 E9E0FD                  	jmp	GetComDsk2		; if error loading COMMAND, re-prompt
  4357                                  Ask:
  4358 0000114A 833E[2F01]0F            	cmp	word [ErrCd_24],15	; error 15 has an extra message
  4359 0000114F 751E                    	jne	short Not15		; not error 15
  4360                                  
  4361                                  ;*	For error 15, tell the user which volume/serial # are needed.
  4362                                  
  4363 00001151 51                      	push	cx
  4364                                  
  4365                                  ;	Bugbug:	does this push/pop need to be done?
  4366                                  
  4367 00001152 1E                      	push	ds
  4368 00001153 07                      	pop	es
  4369 00001154 C536[1E01]              	lds	si,[NeedVol]
  4370                                  	;assume	ds:NOTHING
  4371 00001158 57                      	push	di
  4372 00001159 BF[0001]                	mov	di,VolName
  4373                                  	; 12/01/2023
  4374                                  	; MSDOS 6.0
  4375 0000115C B91000                  	mov	cx,16			; copy volume name & serial #
  4376                                  	; MSDOS 3.3
  4377                                  	;mov	cx,11			; copy volume name
  4378 0000115F FC                      	cld
  4379 00001160 F3A4                    	rep	movsb
  4380 00001162 5F                      	pop	di
  4381 00001163 06                      	push	es
  4382 00001164 1F                      	pop	ds
  4383 00001165 59                      	pop	cx
  4384                                  	;assume	ds:DATARES
  4385                                  	; 12/01/2023
  4386                                  	; MSDOS 6.0
  4387                                  	;mov	dx,offset DATARES:NeedVolMsg	; DX = ptr to msg
  4388                                  	;mov	si,offset DATARES:NeedVolSubst	; DS:SI = ptr to subst block
  4389                                  	;mov	dx,NeedVolMsg
  4390 00001166 BA[7A04]                	mov	dx,MVOLSERIAL
  4391 00001169 BE[F700]                	mov	si,NeedVolSubst
  4392 0000116C E80601                  	call	RPrint
  4393                                  
  4394                                  	; MSDOS 3.3
  4395                                  	;mov	dx,NEEDVOLMSG
  4396                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4397                                  	;int	21h		; DOS - PRINT STRING
  4398                                  	;			; DS:DX -> string terminated by "$"
  4399                                  Not15:
  4400                                  ;*	Print abort, retry, ignore, fail message.
  4401                                  ;	Print only options that are valid.
  4402                                  
  4403                                  ;	Bugbug:	sizzle this.
  4404                                  
  4405                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4406 0000116F BA[2904]                	mov	dx,REQ_ABORT
  4407 00001172 E80001                  	call	RPrint
  4408                                  	;call	RDISPMSG
  4409 00001175 F606[8701]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED  ; 10h
  4410 0000117A 7406                    	jz	short Try_Ignore
  4411 0000117C BA[2F04]                	mov	dx,REQ_RETRY
  4412 0000117F E8F300                  	call	RPrint
  4413                                  	;call	RDISPMSG
  4414                                  Try_Ignore:
  4415 00001182 F606[8701]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h
  4416 00001187 7406                    	jz	short Try_Fail
  4417 00001189 BA[3704]                	mov	dx,REQ_IGNORE
  4418 0000118C E8E600                  	call	RPrint
  4419                                  	;call	RDISPMSG
  4420                                  Try_Fail:
  4421 0000118F F606[8701]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED   ; 08h
  4422 00001194 7406                    	jz	short Term_Question
  4423 00001196 BA[4004]                	mov	dx,REQ_FAIL
  4424 00001199 E8D900                  	call	RPrint
  4425                                  	;call	RDISPMSG
  4426                                  Term_Question:
  4427 0000119C BA[4704]                	mov	dx,REQ_END
  4428 0000119F E8D300                  	call	RPrint
  4429                                  	;call	RDISPMSG
  4430                                  
  4431                                  ;	If the /f switch was given, we fail all requests.
  4432                                  
  4433 000011A2 F606[9201]FF            	test	byte [fFail],-1
  4434 000011A7 741B                    	jz	short DoPrompt
  4435 000011A9 B403                    	mov	ah,3				; signal fail
  4436 000011AB E9A800                  	jmp	EExit
  4437                                  
  4438                                  	; 16/04/2023
  4439                                  Abort_Process:
  4440 000011AE F606[FF01]01            	test	byte [InitFlag],INITINIT ; 1	; COMMAND init interrupted?
  4441 000011B3 745D                    	jz	short AbortCont			; no, handle it normally
  4442 000011B5 803E[8D01]00            	cmp	byte [PermCom],0		; are we top level process?
  4443 000011BA 744B                    	jz	short JustExit			; yes, just exit
  4444                                  
  4445 000011BC BA[2C06]                	mov	dx,PATRICIDE			; no, load ptr to error msg
  4446                                  	; 12/01/2023
  4447 000011BF E8B300                  	call	RPrint				; print it
  4448                                  	;call	RDISPMSG
  4449                                  DeadInTheWater:
  4450 000011C2 EBFE                    	jmp	short DeadInTheWater		; loop until the user reboots
  4451                                  
  4452                                  DoPrompt:
  4453                                  	; 12/01/2023
  4454 000011C4 B8010C                  	mov	ax,0C01h
  4455                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT ; 0C01h
  4456 000011C7 CD21                    	int	21h				; get response
  4457                                  
  4458 000011C9 E8A600                  	call	crlf
  4459 000011CC E83F01                  	call	CharToUpper			; convert to upper case
  4460 000011CF B400                    	mov	ah,0				; return code for ignore
  4461 000011D1 F606[8701]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h ; is ignore allowed?
  4462 000011D6 7406                    	jz	short User_Retry
  4463 000011D8 3A06[2504]              	cmp	al,[IGNORE_CHAR]		; ignore?
  4464                                  	;jz	short EExitJ
  4465                                  	; 16/04/2023
  4466 000011DC 7478                    	jz	short EExit
  4467                                  
  4468                                  ;	Bugbug:	optimize following code.
  4469                                  
  4470                                  User_Retry:
  4471 000011DE FEC4                    	inc	ah				; return code for retry
  4472 000011E0 F606[8701]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED ; 10h ; is retry allowed?
  4473 000011E5 7406                    	jz	short User_Abort
  4474 000011E7 3A06[2404]              	cmp	al,[RETRY_CHAR]			; retry?
  4475                                  	;jz	short EExitJ
  4476                                  	; 16/04/2023
  4477 000011EB 7469                    	jz	short EExit
  4478                                  User_Abort:
  4479 000011ED FEC4                    	inc	ah				; return code for abort
  4480                                  						;  (abort always allowed)
  4481 000011EF 3A06[2304]              	cmp	al,[ABORT_CHAR]			; abort?
  4482 000011F3 74B9                    	jz	short Abort_Process		; exit user program
  4483 000011F5 FEC4                    	inc	ah				; return code for fail
  4484 000011F7 F606[8701]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED ; 08h ; is fail allowed?
  4485 000011FC 7406                    	jz	short AskJ
  4486 000011FE 3A06[2604]              	cmp	al,[FAIL_CHAR]			; fail?
  4487                                  	;jz	short EExitJ
  4488                                  	; 16/04/2023
  4489 00001202 7452                    	jz	short EExit
  4490                                  AskJ:
  4491 00001204 E943FF                  	jmp	Ask
  4492                                  
  4493                                  	; 12/01/2023
  4494                                  ;EExitJ:
  4495                                  	;jmp	short EExit
  4496                                  
  4497                                  JustExit:
  4498                                  	;assume	ds:DATARES
  4499                                  	; 12/01/2023
  4500 00001207 A1[2901]                	mov	ax,[Parent]			; load real parent pid
  4501                                  	;mov	[16h],ax
  4502 0000120A A31600                  	mov	[PDB.PARENT_PID],ax		; put it back where it belongs
  4503 0000120D B8FF4C                  	mov	ax,4CFFh
  4504                                  	;mov	ax,(EXIT<<8) | 255 ; 4CFFh
  4505 00001210 CD21                    	int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
  4506                                  				; AL = exit code
  4507                                  AbortCont:
  4508 00001212 F606[7D01]FF            	test	byte [In_Batch],-1		; Are we accessing a batch file?
  4509 00001217 7405                    	jz	short Not_Batch_Abort
  4510 00001219 C606[7E01]01            	mov	byte [Batch_Abort],1		; set flag for abort
  4511                                  
  4512                                  Not_Batch_Abort:
  4513 0000121E 8A16[0002]              	mov	dl,[PipeFlag]
  4514 00001222 E8D1FA                  	call	ResPipeOff
  4515 00001225 08D2                    	or	dl,dl
  4516 00001227 740D                    	je	short CheckForA
  4517 00001229 833E[8E01]00            	cmp	word [SingleCom],0
  4518 0000122E 7406                    	je	short CheckForA
  4519 00001230 C706[8E01]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4520                                  
  4521                                  CheckForA:
  4522 00001236 833E[2F01]00            	cmp	word [ErrCd_24],0		; write protect?
  4523 0000123B 7407                    	je	short abortfor
  4524 0000123D 833E[2F01]02            	cmp	word [ErrCd_24],2		; drive not ready?
  4525 00001242 7512                    	jne	short EExit			; don't abort the FOR
  4526                                  
  4527                                  abortfor:
  4528 00001244 C606[9401]00            	mov	byte [ForFlag],0		; abort a FOR in progress
  4529 00001249 833E[8E01]00            	cmp	word [SingleCom],0
  4530 0000124E 7406                    	je	short EExit
  4531 00001250 C706[8E01]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4532                                  
  4533                                  EExit:
  4534 00001256 88E0                    	mov	al,ah
  4535 00001258 89FA                    	mov	dx,di
  4536                                  RestHd:
  4537 0000125A E8D3FC                  	call    RestHand
  4538 0000125D 59                      	pop	cx
  4539 0000125E 5E                      	pop	si				; restore registers
  4540 0000125F 07                      	pop	es
  4541                                  
  4542                                  	; 12/01/2023	
  4543                                  	; MSDOS 6.0
  4544                                  ;;	pop	ds
  4545                                  ;SR;
  4546                                  ;ds has to be got from the variable we saved it in
  4547                                  
  4548 00001260 8E1E[2004]               	mov	ds,[OldDS]			; restore old value of ds
  4549                                  
  4550                                  ;	pop	ds
  4551                                  ;	assume	ds:nothing
  4552                                  
  4553                                  	; MSDOS 3.3
  4554                                  	;pop	ds
  4555                                  
  4556 00001264 CF                      	iret
  4557                                  
  4558                                  FatErr:
  4559                                  	; 12/01/2023
  4560                                  	; MSDOS 6.0
  4561                                  	;mov	dx,offset DATARES:BadFatMsg
  4562                                  	;mov	si,offset DATARES:BadFatSubst
  4563 00001265 BA[A104]                	mov	dx,BADFATMSG
  4564 00001268 BE[1101]                	mov	si,BadFatSubst
  4565 0000126B E80700                  	call	RPrint
  4566                                  
  4567                                  	; MSDOS 3.3
  4568                                  	;mov	dx,BADFATMSG
  4569                                  	;call	RDISPMSG
  4570                                  	;mov	dx,BLKDEVERR
  4571                                  	;call	RDISPMSG
  4572                                  
  4573 0000126E B002                    	mov	al,2				; abort
  4574 00001270 EBE8                    	jmp	short RestHd
  4575                                  
  4576                                  ;DskErr	endp
  4577                                  
  4578                                  	; MSDOS 6.0
  4579                                  ; ----------------------------------------------------------------------------
  4580                                  ;***	RPrint - print message
  4581                                  ;***	Crlf - display cr/lf
  4582                                  ;
  4583                                  ;	ENTRY	DS:DX = ptr to count byte, followed by message text
  4584                                  ;		DS:SI = ptr to 1st substitution block for this msg, if any
  4585                                  ;		variable fields related to substitution blocks are set
  4586                                  ;
  4587                                  ;	EXIT	nothing
  4588                                  ;
  4589                                  ;	USED	flags
  4590                                  ;
  4591                                  ;	EFFECTS
  4592                                  ;	  Message is displayed on stdout.
  4593                                  ;
  4594                                  ;	NOTE
  4595                                  ;	  Number of substitutions (%1, %2,...) in message text must not
  4596                                  ;	  be greater than number of substition blocks present.
  4597                                  ; ----------------------------------------------------------------------------
  4598                                  
  4599                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4600                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:13D1h (CODERES:0691h)
  4601                                  
  4602                                  crlf: 
  4603                                  	;mov	dx,offset DATARES:Newlin ; cheap newline
  4604                                  	; 14/01/2023
  4605 00001272 BA[5B06]                	mov	dx,NEWLINE
  4606                                  
  4607                                  ;RPrint	proc
  4608                                  ;
  4609                                  ;	assume	ds:DATARES,ss:DATARES
  4610                                  ;
  4611                                  	; 14/01/2023
  4612                                  RPrint:
  4613                                  
  4614                                  ;	Bugbug:	do we need to save all reg's?
  4615                                  
  4616 00001275 56                      	push	si			; preserve registers
  4617 00001276 50                      	push	ax
  4618 00001277 53                      	push	bx
  4619 00001278 51                      	push	cx
  4620 00001279 52                      	push	dx
  4621                                  
  4622 0000127A 89F3                    	mov	bx,si			; DS:BX = ptr to subst block
  4623 0000127C 89D6                    	mov	si,dx			; DS:SI = ptr to count byte
  4624 0000127E AC                      	lodsb				; AL = message length
  4625                                  					; DS:SI = ptr to message text
  4626 0000127F 31C9                    	xor	cx,cx
  4627 00001281 88C1                    	mov	cl,al			; CX = message length
  4628 00001283 E303                    	jcxz	rpRet
  4629                                  
  4630 00001285 E81900                  	call	RDispMsg
  4631                                  
  4632 00001288 5A                      rpRet:	pop	dx
  4633 00001289 59                      	pop	cx
  4634 0000128A 5B                      	pop	bx
  4635 0000128B 58                      	pop	ax
  4636 0000128C 5E                      	pop	si
  4637 0000128D C3                      	retn
  4638                                  
  4639                                  ;RPrint	endp
  4640                                  
  4641                                  	; 14/01/2023
  4642                                  ;	; MSDOS 3.3
  4643                                  ;CRLF:
  4644                                  ;	mov     dx,NEWLIN
  4645                                  ;
  4646                                  ;RDISPMSG: ; Display message/text
  4647                                  ;	; DS:DX = ($ terminated) Message/Text address 
  4648                                  ;	push    ax
  4649                                  ;	mov     ah,STD_CON_STRING_OUTPUT ; 9
  4650                                  ;	clc
  4651                                  ;	int     21h             ; DOS - PRINT STRING
  4652                                  ;				; DS:DX -> string terminated by "$"
  4653                                  ;	pop     ax
  4654                                  ;	retn
  4655                                  
  4656                                  
  4657                                  	; MSDOS 6.0
  4658                                  ; ----------------------------------------------------------------------------
  4659                                  ;***	RPrintCrit - print critical error message
  4660                                  ;
  4661                                  ;	ENTRY	DX = extended error # (19-39)
  4662                                  ;
  4663                                  ;	EXIT	nothing
  4664                                  ;
  4665                                  ;	USED	flags
  4666                                  ;
  4667                                  ;	EFFECTS
  4668                                  ;	  Message is displayed on stdout
  4669                                  ; ----------------------------------------------------------------------------
  4670                                  
  4671                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4672                                  
  4673                                  ;RPrintCrit	proc
  4674                                  ;	assume	ds:DATARES,ss:DATARES
  4675                                  
  4676                                  	; 14/01/2023
  4677                                  RPrintCrit:
  4678 0000128E 52                      	push	dx			; preserve DX
  4679 0000128F 87DA                    	xchg	bx,dx			; BX = extended error #
  4680                                  					; DX = saved BX
  4681 00001291 83EB13                  	sub	bx,19			; BX = critical error index, from 0
  4682 00001294 D1E3                    	shl	bx,1			; BX = offset in word table
  4683 00001296 8B9F[F507]              	mov	bx,[bx+CRITMSGPTRS]	; BX = ptr to error msg
  4684 0000129A 87DA                    	xchg	bx,dx			; DX = ptr to error msg
  4685                                  					; BX = restored
  4686 0000129C E8D6FF                  	call	RPrint			; print the message
  4687 0000129F 5A                      	pop	dx			; restore DX
  4688 000012A0 C3                      	retn
  4689                                  
  4690                                  ;RPrintCrit	endp
  4691                                  
  4692                                  ; ----------------------------------------------------------------------------
  4693                                  ;***	RDispMsg - display message
  4694                                  ;
  4695                                  ;	Display message, with substitutions, for RPrint.
  4696                                  ;
  4697                                  ;	ENTRY	DS:SI = ptr to message text
  4698                                  ;		CX = message length
  4699                                  ;		DS:BX = ptr to substitution block, if any
  4700                                  ;
  4701                                  ;	EXIT	nothing
  4702                                  ;
  4703                                  ;	USED	AX,CX,DX,SI
  4704                                  ; ----------------------------------------------------------------------------
  4705                                  
  4706                                  ;RDispMsg	proc
  4707                                  ;	assume	ds:DATARES,ss:DATARES
  4708                                  
  4709                                  RDispMsg:
  4710                                  	; 14/01/2023
  4711                                  rdNextChar:
  4712 000012A1 AC                      	lodsb				; AL = next char
  4713 000012A2 3C25                    	cmp	al,'%'
  4714 000012A4 7511                    	jne	short rdOutChar		; not a substitution
  4715 000012A6 8A14                    	mov	dl,[si]			; DL = possible '1' - '9'
  4716 000012A8 80EA31                  	sub	dl,'1'			; DL = 0 - 8 = '1' - '9'
  4717 000012AB 80FA09                  	cmp	dl,9
  4718 000012AE 7307                    	jae	short rdOutChar		; not a substitution
  4719                                  
  4720                                  ;*	A substitution code %1 - %9 has been encountered.
  4721                                  ;	DL = 0-8, indicating %1-%9
  4722                                  ;	DS:BX = ptr to substitution block
  4723                                  
  4724 000012B0 E80D00                  	call	SubstMsg		; display the substitution
  4725 000012B3 46                      	inc	si			; SI = ptr past %n
  4726 000012B4 49                      	dec	cx			; count extra character in %n
  4727 000012B5 EB06                    	jmp	short rdCharDone
  4728                                  
  4729                                  ;*	Normal character output.
  4730                                  
  4731                                  rdOutChar:
  4732 000012B7 88C2                    	mov	dl,al			; DL = char
  4733 000012B9 B402                    	mov	ah,2			; AH = DOS Character Output code
  4734 000012BB CD21                    	int	21h			; call DOS
  4735                                  rdCharDone:
  4736 000012BD E2E2                    	loop	rdNextChar
  4737 000012BF C3                      	retn
  4738                                  
  4739                                  ;RDispMsg	endp
  4740                                  
  4741                                  ; ----------------------------------------------------------------------------
  4742                                  ;***	SubstMsg - display message substitution
  4743                                  ;
  4744                                  ;	Display a substitution string within a message.
  4745                                  ;	Substitution can be a char, an ASCIIZ string, or
  4746                                  ;	a word to be displayed as hex digits.
  4747                                  ;
  4748                                  ;	ENTRY	DL = substitution index 0-8 (for codes %1-%9)
  4749                                  ;		DS:BX = ptr to substitution block
  4750                                  ;
  4751                                  ;	EXIT	nothing
  4752                                  ;
  4753                                  ;	USED	AX,DX
  4754                                  ; ----------------------------------------------------------------------------
  4755                                  
  4756                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4757                                  
  4758                                  ;SubstMsg	proc
  4759                                  ;	assume	ds:DATARES,ss:DATARES
  4760                                  	
  4761                                  	; 14/01/2023
  4762                                  SubstMsg:
  4763 000012C0 53                      	push	bx			; preserve BX
  4764 000012C1 51                      	push	cx			; preserve CX
  4765                                  
  4766                                  	;mov	al,size SUBST		; AL = size of substitution block
  4767 000012C2 B003                    	mov	al,3
  4768 000012C4 F6E2                    	mul	dl			; AX = offset of desired subst block
  4769 000012C6 01C3                    	add	bx,ax			; DS:BX = ptr to desired subst block
  4770                                  
  4771                                  	;mov	al,[bx].SubstType	; AX = substitution type flag
  4772 000012C8 8A07                    	mov	al,[bx]
  4773                                  	;mov	bx,[bx].SubstPtr	; BX = ptr to char, str, or hex value
  4774 000012CA 8B5F01                  	mov	bx,[bx+1]
  4775                                  
  4776                                  ;	AL = 1, 2, or 3 for char, string, or hex type
  4777                                  
  4778 000012CD FEC8                    	dec	al
  4779 000012CF 7428                    	jz	short smChar
  4780 000012D1 FEC8                    	dec	al
  4781 000012D3 742C                    	jz	short smStr
  4782                                  
  4783                                  ;*	Hex number substitution.
  4784                                  
  4785                                  	;mov	ax,ds:[bx]		; AX = word value
  4786 000012D5 8B07                    	mov	ax,[bx]
  4787 000012D7 B90400                  	mov	cx,4			; CX = # digits to display
  4788                                  smDigit:
  4789 000012DA D1C0                    	rol	ax,1
  4790 000012DC D1C0                    	rol	ax,1
  4791 000012DE D1C0                    	rol	ax,1
  4792 000012E0 D1C0                    	rol	ax,1			; AL<3:0> = next digit
  4793                                  
  4794 000012E2 50                      	push	ax			; save other digits
  4795 000012E3 240F                    	and	al,0Fh			; AL = binary digit
  4796 000012E5 0430                    	add	al,'0'			; AL = ascii digit if 0-9
  4797 000012E7 3C39                    	cmp	al,'9'
  4798 000012E9 7602                    	jbe	short smDigit09		; it's 0-9
  4799                                  	;add	al,7
  4800 000012EB 0407                    	add	al,('A' - '0') - 10	; AL = ascii digit A-F
  4801                                  smDigit09:
  4802 000012ED 88C2                    	mov	dl,al			; DL = ascii digit
  4803 000012EF B402                    	mov	ah,2
  4804 000012F1 CD21                    	int	21h			; output the ascii digit
  4805 000012F3 58                      	pop	ax			; restore all digits
  4806                                  
  4807 000012F4 E2E4                    	loop	smDigit
  4808                                  	;jmp	short smRet
  4809                                  	; 14/01/2023
  4810                                  smRet:	
  4811 000012F6 59                      	pop	cx
  4812 000012F7 5B                      	pop	bx
  4813 000012F8 C3                      	retn
  4814                                  
  4815                                  ;*	Char substitution.
  4816                                  
  4817                                  smChar:
  4818                                  	;mov	dl,ds:[bx]		; DL = char to output
  4819 000012F9 8A17                    	mov	dl,[bx]
  4820 000012FB B402                    	mov	ah,2
  4821 000012FD CD21                    	int	21h
  4822 000012FF EBF5                    	jmp	short smRet
  4823                                  
  4824                                  ;*	String substitution.
  4825                                  
  4826                                  smStr:
  4827                                  	;mov	dl,ds:[bx]		; DL = next char
  4828 00001301 8A17                    	mov	dl,[bx]
  4829 00001303 08D2                    	or	dl,dl
  4830 00001305 74EF                    	jz	short smRet		; null char - we're done
  4831 00001307 B402                    	mov	ah,2
  4832 00001309 CD21                    	int	21h			; display char
  4833 0000130B 43                      	inc	bx			; DS:BX = ptr to next char
  4834 0000130C EBF3                    	jmp	short smStr
  4835                                  
  4836                                  ;smRet:	pop	cx
  4837                                  ;	pop	bx
  4838                                  ;	retn
  4839                                  
  4840                                  ;SubstMsg	endp
  4841                                  
  4842                                  	; MSDOS 6.0
  4843                                  ; ----------------------------------------------------------------------------
  4844                                  ;***	CharToUpper - convert character to uppercase
  4845                                  ;
  4846                                  ;	ENTRY	AL = char
  4847                                  ;
  4848                                  ;	EXIT	AL = uppercase char
  4849                                  ;
  4850                                  ;	USED	AX
  4851                                  ; ----------------------------------------------------------------------------
  4852                                  
  4853                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4854                                  
  4855                                  ;CharToUpper	proc
  4856                                  ;	assume	ds:DATARES
  4857                                  CharToUpper:
  4858 0000130E 50                      	push	ax		; put char on stack as arg to int 2F
  4859 0000130F B81312                  	mov	ax,1213h	; AX = DOS int 2F 'Convert Char to Uppercase'
  4860 00001312 CD2F                    	int	2Fh
  4861 00001314 44                      	inc	sp		; throw away old char on stack
  4862 00001315 44                      	inc	sp
  4863 00001316 C3                      	retn
  4864                                  
  4865                                  ;CharToUpper	endp
  4866                                  
  4867                                  	; 14/01/2023
  4868                                  ;	; MSDOS 3.3
  4869                                  ;CHARTOUPPER:
  4870                                  ;	cmp	al,80h
  4871                                  ;	jb	short CHARTOUPPER1
  4872                                  ;	sub	al,80h
  4873                                  ;	push	ds
  4874                                  ;	push	bx
  4875                                  ;	lds	bx,[UPPERCASETBL]
  4876                                  ;	add	bx,2
  4877                                  ;	xlat
  4878                                  ;	pop	bx
  4879                                  ;	pop	ds
  4880                                  ;	jmp	short CHARTOUPPER_RETN
  4881                                  ;CHARTOUPPER1:
  4882                                  ;	cmp	al,'a'
  4883                                  ;	jb	short CHARTOUPPER_RETN
  4884                                  ;	cmp	al,'z'
  4885                                  ;	ja	short CHARTOUPPER_RETN
  4886                                  ;	sub	al,20h
  4887                                  ;CHARTOUPPER_RETN:
  4888                                  ;	retn
  4889                                  
  4890                                  ;public	EndCode
  4891                                  ;EndCode label byte
  4892                                  
  4893                                  	; MSDOS 6.0
  4894                                  ; ----------------------------------------------------------------------------
  4895                                  ;***	MsgInt2fHandler - int 2f handler for message retrieval
  4896                                  ;
  4897                                  ;	ENTRY	If we handle it -
  4898                                  ;		  AX = ((MULTDOS shl 8) or MESSAGE_2F) = 122Eh
  4899                                  ;		  DL = operation =
  4900                                  ;		     0 = get extended error messages
  4901                                  ;		     1 = set extended error messages
  4902                                  ;		     2 = get parse error messages
  4903                                  ;		     3 = set parse error messages
  4904                                  ;		     4 = get critical error messages
  4905                                  ;		     5 = set critical error messages
  4906                                  ;		     6 = get file system error messages
  4907                                  ;		     7 = set file system error messages
  4908                                  ;		     8 = get disk retriever routine
  4909                                  ;		     9 = set disk retriever routine
  4910                                  ;		  ES:DI = address for 'set' operations
  4911                                  ;
  4912                                  ;	EXIT	ES:DI = ptr to list of message ptrs, for 'get' operations
  4913                                  ;
  4914                                  ;	NOTE
  4915                                  ;	  This handler replaces the one that used to reside in DOS.
  4916                                  ;	  'Set' operations are ignored.
  4917                                  ;	  'File system error messages' are not supported.
  4918                                  ; ----------------------------------------------------------------------------
  4919                                  
  4920                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4921                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1478h (CODERES:0738h)
  4922                                  ;SR;
  4923                                  ;At the int 2fh entry point we push the old ds value and the resident data
  4924                                  ;segment address. Get them off the stack
  4925                                  
  4926                                  ;MsgInt2fHandler proc	far
  4927                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  4928                                  
  4929                                  	; 14/01/2023
  4930                                  MsgInt2fHandler:
  4931 00001317 1F                      	pop	ds			; ds = DATARES
  4932                                  	;assume	ds:DATARES
  4933                                  ;	pop	word [OldDS]		; save old value of ds
  4934                                  
  4935 00001318 3D2E12                  	cmp	ax,122Eh
  4936                                  	;cmp	ax,(MULTDOS<<8)|MESSAGE_2F
  4937                                  	;;cmp	ax,(MULTDOS shl 8) or MESSAGE_2F
  4938 0000131B 742A                    	je	short miOurs		; it's ours
  4939                                  
  4940                                  ;ifndef ROMDOS
  4941                                  	;cmp	ax,5500h
  4942 0000131D 3D0055                  	cmp	ax,GET_COMMAND_STATE	; is it first COMMAND query?
  4943                                  ;else
  4944                                  ;	cmp	ax,GET_ROMCOMMAND_STATE	; is it first ROM COMMAND query?
  4945                                  ;endif	;ROMDOS
  4946 00001320 741C                    	je	short fcOurs
  4947                                  
  4948                                  ;SR;
  4949                                  ;We cannot do a far jump any more because cs cannot be used. Push the cs:ip
  4950                                  ;onto the stack and do a far return to jump to the next 2fh handler. 
  4951                                  ;Our old ds is on the stack. We need to restore it but we cannot lose the
  4952                                  ;current value of ds as it points at the data segment. So we do some kinky
  4953                                  ;stack manipulations.
  4954                                  
  4955 00001322 50                      	push	ax
  4956 00001323 50                      	push	ax			; create 2 words on stack for retf
  4957                                  
  4958 00001324 55                      	push	bp
  4959 00001325 50                      	push	ax
  4960                                  
  4961 00001326 89E5                    	mov	bp,sp			; bp can be used to address stack
  4962                                  
  4963                                  ;Swap the old ds value with the second dummy word on the stack. Now, we can
  4964                                  ;do a 'pop ds' at the end to restore our ds
  4965                                  
  4966 00001328 8B4608                  	mov	ax,[bp+8]		; ax = old ds value
  4967 0000132B 894604                  	mov	[bp+4],ax
  4968                                  	
  4969                                  	;mov	ax,word ptr ds:Int2fHandler+2
  4970 0000132E A1[9D03]                	mov	ax,[Int2fHandler+2]
  4971 00001331 894608                  	mov	[bp+8],ax		; put segment address
  4972                                  	;mov	ax,word ptr ds:Int2fHandler
  4973 00001334 A1[9B03]                	mov	ax,[Int2fHandler]
  4974 00001337 894606                  	mov	[bp+6],ax		; put offset address
  4975                                  
  4976 0000133A 58                      	pop	ax
  4977 0000133B 5D                      	pop	bp
  4978 0000133C 1F                      	pop	ds
  4979                                  
  4980 0000133D CB                      	retf				; chain on to next handler
  4981                                  
  4982                                  ;;	jmp	Int2fHandler		; hand off to next 2f handler
  4983                                  
  4984                                  fcOurs:
  4985                                  
  4986                                  ;We have to clear ax, and return in ds:si a pointer to the stub jump table
  4987                                  
  4988 0000133E 58                      	pop	ax			; discard ds currently on stack
  4989 0000133F 1E                      	push	ds			; store our data segment
  4990                                  
  4991                                  	;mov	si,offset DATARES:Int2f_Entry ; start of table
  4992 00001340 BE[0400]                	mov	si,Int2f_Entry
  4993                                  
  4994 00001343 31C0                    	xor	ax,ax			; indicate COMMAND present
  4995 00001345 EB11                    	jmp	short miRet		; return to caller
  4996                                  
  4997                                  miOurs:
  4998 00001347 F6C201                  	test	dl,1
  4999 0000134A 750C                    	jnz	short miRet		; ignore 'set' operations
  5000                                  
  5001 0000134C 53                      	push	bx			; preserve BX
  5002 0000134D 89D3                    	mov	bx,dx
  5003 0000134F 30FF                    	xor	bh,bh			; BX = index in word table
  5004 00001351 D1E3                    	shl	bx,1			; BX = index in dword table
  5005                                  	;les	di,MsgPtrLists[bx]	; ES:DI = ptr to msg ptr list
  5006 00001353 C4BF[5E06]              	les	di,[bx+MsgPtrLists]
  5007 00001357 5B                      	pop	bx			; restore BX
  5008                                  miRet:
  5009                                  ;	mov	ds,[OldDS]		; restore ds
  5010 00001358 1F                      	pop	ds
  5011                                  	;assume	ds:nothing
  5012                                  
  5013 00001359 CF                      	iret
  5014                                  
  5015                                  ;MsgInt2fHandler endp
  5016                                  
  5017                                  	; MSDOS 6.0
  5018                                  ; ----------------------------------------------------------------------------
  5019                                  ;***	MsgRetriever - message retrieval routine for utilities
  5020                                  ;
  5021                                  ;	Address of this routine is passed to utility programs via 
  5022                                  ;	message services int 2f. We try to find the desired message
  5023                                  ;	in memory or in our disk image.
  5024                                  ;
  5025                                  ;	ENTRY	AX = message #
  5026                                  ;		DI = offset in RESGROUP of msg ptr list
  5027                                  ;		ComSpec = asciiz pathname to our disk image
  5028                                  ;
  5029                                  ;	EXIT	CY clear for success
  5030                                  ;		ES:DI = ptr to count byte, followed by message text
  5031                                  ;
  5032                                  ;		CY set for failure
  5033                                  ;		ES,DI undefined
  5034                                  ;
  5035                                  ;	USED	flags
  5036                                  ;
  5037                                  ;	NOTE
  5038                                  ;	  The message # in AX is used to compute an offset into
  5039                                  ;	  the message ptr list pointed to by DI. The lists must
  5040                                  ;	  start with message # 1 and proceed through consecutive
  5041                                  ;	  message #'s.  
  5042                                  ;
  5043                                  ;	  It is assumed that the msg ptr list is either ParsMsgPtrs or
  5044                                  ;	  ExtMsgPtrs. We use NUMPARSEMSGS and NUMEXTMSGS to check for
  5045                                  ;	  valid message #.  ;M033
  5046                                  ;
  5047                                  ;	  List positions with no corresponding message text are
  5048                                  ;	  indicated by null pointers, which this routine detects.
  5049                                  ; ----------------------------------------------------------------------------
  5050                                  
  5051                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5052                                  
  5053                                  ;SR; This routine will be called directly by the utilities. So, we have
  5054                                  ; trap for it in the stub. The stub pushes the old value of ds and the 
  5055                                  ; DATARES value on the stack. We get them off the stack to setup ds here
  5056                                  
  5057                                  ;MsgRetriever	proc	far
  5058                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5059                                  
  5060                                  	; 14/01/2023
  5061                                  MsgRetriever:
  5062 0000135A 1F                      	pop	ds			; ds = DATARES
  5063                                  	;assume	ds:DATARES
  5064                                  ;	pop	word [OldDS]		; save old ds
  5065                                  
  5066 0000135B 50                      	push	ax			; preserve registers
  5067 0000135C 53                      	push	bx
  5068 0000135D 51                      	push	cx
  5069 0000135E 52                      	push	dx
  5070 0000135F 56                      	push	si
  5071                                  
  5072                                  ;;	push	ds
  5073                                  ;;	push	cs
  5074                                  ;;	pop	ds			; DS = DATARES seg addr
  5075                                  ;;	assume	ds:RESGROUP
  5076                                  ;;	push	cs
  5077                                  
  5078 00001360 1E                      	push	ds			; get es from ds
  5079 00001361 07                      	pop	es			; ES = DATARES seg addr
  5080                                  
  5081                                  ;	Begin modification M033.
  5082                                  
  5083                                  ;	Make sure msg # is valid.
  5084                                  ;	Assume msg ptr list is either ParsMsgPtrs or ExtMsgPtrs.
  5085                                  
  5086                                  	;mov	bx,11
  5087 00001362 BB0B00                  	mov	bx,NUMPARSMSGS		; BX = # parse error msgs in list
  5088                                  	;cmp	di,offset DATARES:ParsMsgPtrs
  5089 00001365 81FF[FD08]              	cmp	di,PARSMSGPTRS
  5090 00001369 7403                    	je	short chkmsgnum		; it's ParsMsgPtrs
  5091                                  	;mov	bx,90
  5092 0000136B BB5A00                  	mov	bx,NUMEXTMSGS		; BX = # extended error msgs in list
  5093                                  chkmsgnum:
  5094 0000136E 39C3                    	cmp	bx,ax
  5095 00001370 725A                    	jc	short mrRet		; msg # too high, return carry
  5096                                  
  5097                                  ;	Msg # is valid.
  5098                                  
  5099                                  ;	End modification M033.
  5100                                  
  5101 00001372 48                      	dec	ax
  5102 00001373 D1E0                    	shl	ax,1			; AX = offset into msg ptr list
  5103 00001375 01C7                    	add	di,ax			; DI = ptr to msg ptr
  5104                                  
  5105 00001377 81FF[9F03]              	cmp	di,ResMsgEnd
  5106 0000137B 7247                    	jb	short mrInMem		; ptr (and message) in memory
  5107                                  
  5108                                  ;*	Retrieve message from disk (or ROM) image.
  5109                                  ;	Read once to get the ptr to the message, then again for the message.
  5110                                  
  5111                                  ;ifndef	ROMDOS
  5112                                  	; 14/01/2023
  5113                                  	;mov	si,offset DATARES:ComSpec	; DS:SI = ptr to pathname
  5114 0000137D BE[3601]                	mov	si,ComSpec
  5115 00001380 BA0100                  	mov	dx,1 ; EXT_EXISTS_OPEN		; DX = 'open existing file'
  5116 00001383 BB0020                  	mov	bx,2000h ; INT_24_ERROR		; BX = 'fail on crit error'
  5117 00001386 B8006C                  	mov	ax,6C00h
  5118                                  	;mov	ax,ExtOpen shl 8		; AX = 'Extended Open File'
  5119 00001389 CD21                    	int	21h				; call DOS
  5120 0000138B 723F                    	jc	short mrRet			; return failure
  5121                                  
  5122 0000138D 89C3                    	mov	bx,ax				; BX = file handle
  5123 0000138F 89FA                    	mov	dx,di				; DX = ptr to msg ptr
  5124 00001391 31F6                    	xor	si,si				; SI = read count
  5125                                  mrRead:
  5126 00001393 81EA0001                	sub	dx,100h				; DX = LSW of file offset
  5127 00001397 31C9                    	xor	cx,cx				; CX = MSW of file offset
  5128 00001399 B80042                  	mov	ax,4200h
  5129                                  	;mov	ax,LSEEK shl 8			; AX = 'Set File Pointer'
  5130 0000139C CD21                    	int	21h				; call DOS
  5131 0000139E 721A                    	jc	short mrCloseFile		; handle error
  5132                                  
  5133                                  	;mov	dx,offset DATARES:MsgBuffer	; DS:DX = input buffer
  5134 000013A0 BA[4B03]                	mov	dx,MsgBuffer
  5135 000013A3 B94000                  	mov	cx,64				; CX = # bytes to read
  5136 000013A6 B43F                    	mov	ah,3Fh
  5137                                  	;mov	ah,READ				; AH = 'Read File'
  5138 000013A8 CD21                    	int	21h				; call DOS
  5139 000013AA 720E                    	jc	short mrCloseFile		; handle error
  5140                                  
  5141 000013AC 09F6                    	or	si,si				; (CY cleared)
  5142 000013AE 750A                    	jnz	short mrCloseFile		; 2nd time thru - we're done
  5143 000013B0 46                      	inc	si				; mark one read done
  5144 000013B1 8B16[4B03]              	mov	dx,[MsgBuffer]			; DX = ptr to message
  5145 000013B5 09D2                    	or	dx,dx
  5146 000013B7 75DA                    	jnz	short mrRead			; go read the message
  5147 000013B9 F9                      	stc					; null ptr found- no msg
  5148                                  
  5149                                  mrCloseFile:
  5150 000013BA 9C                      	pushf				; save success/failure (CY)
  5151 000013BB B43E                    	mov	ah,3Eh
  5152                                  	;mov	ah,CLOSE		; AH = 'Close File'
  5153 000013BD CD21                    	int	21h			; call DOS
  5154                                  ;	Bugbug: should we avoid this popf?
  5155 000013BF 9D                      	popf				; CY = success/failure
  5156 000013C0 89D7                    	mov	di,dx			; ES:DI = ptr to msg, if successful
  5157 000013C2 EB08                    	jmp	short mrRet		; we're done
  5158                                  
  5159                                  ;else	;ROMDOS
  5160                                  ;
  5161                                  ;;	DI = ptr to msg ptr
  5162                                  ;
  5163                                  ;	mov	si,di			; SI = ptr to msg ptr
  5164                                  ;	sub	si,100h			; SI = offset into image of msg ptr
  5165                                  ;	mov	cx,2			; CX = # bytes to copy from image
  5166                                  ;
  5167                                  ;;	ASSUME ES:NOTHING is still in effect.
  5168                                  ;
  5169                                  ;	push	ds
  5170                                  ;	pop	es				; ES = DATARES seg addr
  5171                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to buffer
  5172                                  ;	invoke	LoadFromROM			; copy msg ptr from ROM
  5173                                  ;	mov	si,word ptr MsgBuffer		; SI = ptr to message
  5174                                  ;	or	si,si
  5175                                  ;	jz	mrNoMsg			; null ptr- no message text
  5176                                  ;
  5177                                  ;	sub	si,100h			; SI = offset into image of msg
  5178                                  ;	mov	cx,64			; CX = # bytes to copy from image
  5179                                  ;	mov	di,offset DATARES:MsgBuffer
  5180                                  ;	invoke	LoadFromROM
  5181                                  ;	clc					; success
  5182                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to msg
  5183                                  ;	jmp	short mrRet
  5184                                  ;
  5185                                  ;mrNoMsg:
  5186                                  ;	stc
  5187                                  ;	jmp	short mrRet
  5188                                  ;
  5189                                  ;;;	mov	ax,COMMAND_SEG-10h	; AX = seg addr of COMMAND image
  5190                                  ;;;	mov	es,ax			; ES:DI = ptr to msg ptr in image
  5191                                  ;	assume	es:NOTHING
  5192                                  ;
  5193                                  ;endif	;ROMDOS
  5194                                  
  5195                                  ;*	Message ptr is in memory.
  5196                                  ;	If ptr is in memory, assume message is in memory (/msg).
  5197                                  
  5198                                  mrInMem:
  5199                                  	; 14/01/2023
  5200 000013C4 268B3D                  	mov	di,[es:di]		; ES:DI = ptr to msg
  5201 000013C7 09FF                    	or	di,di			; (CY cleared)
  5202 000013C9 7501                    	jnz	short mrRet		; found message
  5203 000013CB F9                      	stc				; null ptr found - no message
  5204                                  mrRet:	
  5205 000013CC 5E                      	pop	si			; restore all registers
  5206 000013CD 5A                      	pop	dx
  5207 000013CE 59                      	pop	cx
  5208 000013CF 5B                      	pop	bx
  5209 000013D0 58                      	pop	ax
  5210                                  
  5211                                  ;	mov	ds,[OldDS]		; restore ds
  5212 000013D1 1F                      	pop	ds
  5213                                  	;assume	ds:nothing
  5214                                  
  5215 000013D2 CB                      	retf	; 21/04/2023
  5216                                  
  5217                                  ;MsgRetriever endp
  5218                                  
  5219                                  ; M003; Start of changes for UMB support
  5220                                  
  5221                                  ; ----------------------------------------------------------------------------
  5222                                  ;***	Lh_OffUnlink -- Restore allocation strat and link state
  5223                                  ;
  5224                                  ;	ENTRY	al = Saved alloc strat and link state
  5225                                  ;			b0 = 1 if alloc strat to restore is HighFirst
  5226                                  ;			b1 = 1 if link state to restore is Linked
  5227                                  ;
  5228                                  ;	EXIT	None
  5229                                  ;
  5230                                  ;	USED	ax, bx, cx
  5231                                  ; ----------------------------------------------------------------------------
  5232                                  
  5233                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5234                                  
  5235                                  ;public	Lh_OffUnlink
  5236                                  Lh_OffUnlink:	; proc	far
  5237                                  	; 14/01/2023
  5238 000013D3 88C5                    	mov	ch,al
  5239 000013D5 88C1                    	mov	cl,al
  5240                                  	;;mov	ax,(ALLOCOPER shl 8) OR 0
  5241                                  	;mov	ax,(ALLOCOPER<<8)
  5242 000013D7 B80058                  	mov	ax,5800h
  5243 000013DA CD21                    	int	21h
  5244 000013DC 89C3                    	mov	bx,ax
  5245 000013DE D0C9                    	ror	cl,1				; b7 = HighFirst bit
  5246 000013E0 80E180                  	and	cl,80h				; mask off b6-b0
  5247 000013E3 80E37F                  	and	bl,7fh				; mask off HighFirst bit
  5248 000013E6 08CB                    	or	bl,cl				; set HighFirst bit state
  5249                                  	;;mov	ax,(ALLOCOPER shl 8) OR 1
  5250                                  	;mov	ax,(ALLOCOPER<<8)|1
  5251 000013E8 B80158                  	mov	ax,5801h
  5252 000013EB CD21                    	int	21h				; set alloc strat
  5253                                  
  5254 000013ED 88EB                    	mov	bl,ch
  5255 000013EF D0EB                    	shr	bl,1
  5256 000013F1 30FF                    	xor	bh,bh				; bx = linkstate
  5257                                  	;mov	ax,(ALLOCOPER shl 8) OR 3
  5258                                  	;mov	ax,(ALLOCOPER<<8)|3
  5259 000013F3 B80358                  	mov	ax,5803h
  5260 000013F6 CD21                    	int	21h				; set linkstate
  5261                                  
  5262 000013F8 CB                      	retf
  5263                                  
  5264                                  ;Lh_OffUnlink endp
  5265                                  
  5266                                  ; M003; End of changes for UMB support
  5267                                  
  5268                                  ;public	EndCode
  5269                                  ; 14/01/2023
  5270                                  ;EndCode: ; label byte
  5271                                  ; 06/06/2023
  5272                                  ; 16/04/2023
  5273                                  EndCode equ ($-StartCode)+100h
  5274                                  ; 06/06/2023
  5275                                  ;EndCode equ $-StartCode	
  5276                                  
  5277                                  ;CODERES ends
  5278                                  ;	end
  5279                                  
  5280                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5281                                  
  5282 000013F9 00<rep 7h>              	times	(((EndCode+15)>>4)<<4)-EndCode db 0
  5283                                  
  5284                                  ;align 16
  5285                                  
  5286                                  ;=============================================================================
  5287                                  ; INIT.ASM, MSDOS 6.0 (COMMAND.COM), 1991
  5288                                  ;=============================================================================
  5289                                  ; 22/09/2018 - Retro DOS v3.0 ('command3.s')
  5290                                  
  5291                                  ; INIT.ASM (MSDOS 2.11 COMMAND.COM, Retro DOS v2.0, 30/04/2018)
  5292                                  
  5293                                  ;TITLE   COMMAND Initialization
  5294                                  
  5295                                  ;ENVIRONSIZ EQU  0A0H		; Must agree with values in ENVIRONMENT segment
  5296                                  ;ENVIRONSIZ2 EQU 092H
  5297                                  ;MAX_COMSPEC EQU ENVIRONSIZ2 ; = 146  ; 22/09/2018
  5298                                  
  5299                                  ; UINIT.ASM, MSDOS 6.0, 1991
  5300                                  ; 23/09/2018
  5301                                  ENVBIG	EQU 32768		;AN000; maximum environment size
  5302                                  ; 14/01/2023
  5303                                  ;ENVSML	EQU 160			;AN000; minimum environment size
  5304                                  
  5305                                  ; ----------------------------------------------------------------------------
  5306                                  
  5307                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5308                                  
  5309                                  ; (MSDOS 5.0 COMMAND.COM -initial- Environment Structure size)
  5310                                  ENVIRONSIZ equ 160
  5311                                  ENVSML	equ 256	; minimum environment size
  5312                                  ;MAX_COMSPEC equ ENVIRONSIZ - Env_ComSpec
  5313                                  MAX_COMSPEC equ 146
  5314                                  ECOMSPEC equ 14
  5315                                  
  5316                                  ; 14/01/2023
  5317                                  TAB_CHAR equ 09h
  5318                                  SPACE_CHAR equ 20h	
  5319                                  
  5320                                  ; (MSDOS 6.22 COMMAND.COM -initial- Environment Structure size)
  5321                                  ;ENVIRONSIZ equ 180	; SIZE Environment 
  5322                                  
  5323                                  ;----------------------------------------------------
  5324                                  ; MSDOS 6.0 - ENVDATA.ASM - 1991
  5325                                  ;----------------------------------------------------
  5326                                  ;Environment Struc	; Default COMMAND environment
  5327                                  ;
  5328                                  ;Env_PathString  db	"path="
  5329                                  ;Env_PathSpec	 db	"c:\msdos"
  5330                                  ;                db	0
  5331                                  ;Env_PrmptString db	"prompt="
  5332                                  ;Env_PrmptSpec   db	"$p$g"
  5333                                  ;                db	0
  5334                                  ;Env_ComString   db	"comspec="
  5335                                  ;Env_ComSpec     db	"\command.com"
  5336                                  ;		 db	134 dup (0)
  5337                                  ;
  5338                                  ;Environment ends
  5339                                  ;----------------------------------------------------
  5340                                  
  5341                                  ;-----------------------------------------------------------------------------
  5342                                  
  5343                                  ;-----------------------------------------------------------------------------
  5344                                  ; START OF INIT PORTION
  5345                                  ; This code is deallocated after initialization.
  5346                                  ;-----------------------------------------------------------------------------
  5347                                  
  5348                                  ;INIT	SEGMENT PUBLIC PARA
  5349                                  
  5350                                  ; 	EXTRN   HEADER:BYTE
  5351                                  ;	EXTRN   BADCOMLKMES:BYTE
  5352                                  
  5353                                  ;	PUBLIC  CONPROC
  5354                                  
  5355                                  ;ASSUME  CS:RESGROUP,DS:RESGROUP,ES:RESGROUP,SS:RESGROUP
  5356                                  
  5357                                          ;ORG 0
  5358                                  ;ZERO = $
  5359                                  	; 23/09/2018
  5360                                  ZERO equ $	; Offset 0E30h for original MSDOS 3.3 COMMAND.COM
  5361                                  
  5362                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5363                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1560h (CODERES:0820h)
  5364                                  ConProc:
  5365                                  	;mov	sp,offset ResGroup:RStack	; must be first instruction
  5366 00001400 BC[2004]                	mov	sp,RStack
  5367                                  
  5368                                  ; We need to set the PSP to us right at start because Carousel needs
  5369                                  ; to be lied to and it does not set PSP when it transfers control to
  5370                                  ; us after loading us as an overlay. By setting PSP, we ensure that
  5371                                  ; command.com is also not lied to.
  5372                                  
  5373                                  	; 14/01/2023
  5374                                  	; MSDOS 6.0
  5375 00001403 B450                            mov	ah,50h
  5376                                  	;mov	ah,SET_CURRENT_PDB
  5377 00001405 8CC3                            mov	bx,es
  5378 00001407 CD21                            int	21h
  5379                                  
  5380                                  	; 14/01/2023
  5381 00001409 B430                    	mov	ah,30h 
  5382                                  	;mov	ax,GET_VERSION<<8 ; 30h
  5383                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5384                                  	;mov	ax,3000h
  5385 0000140B CD21                    	int	21h
  5386                                  	;;cmp	ax,EXPECTED_VERSION ; 1E03h
  5387                                  	;cmp	ax,5
  5388 0000140D 83F805                  	cmp	ax,EXPECTED_VERSION ; 0005h
  5389 00001410 7411                    	je	short okdos			; DOS version is ok
  5390                                  
  5391 00001412 BA[181D]                	mov	dx,BADVERMSG			; DX = ptr to msg
  5392 00001415 E85DFE                  	call	RPrint
  5393                                  
  5394                                  	; MSDOS 3.3
  5395                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  5396                                  	;int	21h             ; DOS - PRINT STRING
  5397                                  				; DS:DX -> string terminated by "$"
  5398 00001418 8CC0                    	mov	ax,es
  5399 0000141A 2639061600              	cmp	[es:PDB.PARENT_PID],ax
  5400                                  	;cmp	[es:16h],ax			; if COMMAND is own parent,
  5401                                  Here:	
  5402 0000141F 74FE                    	jz	short Here			;  loop forever
  5403                                  	
  5404 00001421 CD20                    	int	20h				; otherwise, exit
  5405                                  okdos:
  5406                                  	; 23/09/2018
  5407                                  
  5408                                  ;  Calculate and save the end of the INIT segment (which is also
  5409                                  ;  the beginning of TRANGROUP).
  5410                                  
  5411                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5412                                  	; MSDOS 3.3
  5413                                  	;mov	ah,65h
  5414                                  	;mov	al,2
  5415                                  	;mov	dx,-1
  5416                                  	;mov	bx,-1
  5417                                  	;mov	cx,5
  5418                                  	;mov	di,UCASE_ADDR
  5419                                  	;int	21h	; AH = 65h : GET EXTENDED COUNTRY INFORMATION (DOS 3.3+)
  5420                                  	;		; AL = 02h : Get pointer to character translation table
  5421                                  	;		; BX = code page (-1 = current global code page)
  5422                                  	;		; DX = country ID (-1 = current country)
  5423                                  	;		; CX = amount of data to return
  5424                                  	;; ES:DI = pointer to output buffer
  5425                                  	;; Buffer offset :
  5426                                  	;;	00h -  byte,  country Id
  5427                                  	;;  	01h -  dword, pointer to uppercase table	
  5428                                  
  5429                                  	; 14/01/2023
  5430                                  	; MSDOS 6.0 (& MSDOS 3.3)
  5431                                    	;mov	dx,232Fh     ; MSDOS 5.0 COMMAND.COM
  5432 00001423 BA0F22                  	mov	dx,TRANSTART+15			; get end of init code
  5433                                  	; 27/09/2018
  5434                                  	;mov	dx,TRANSTART ; (paragraph aligned address)
  5435 00001426 B104                    	mov	cl,4				; change to paragraphs
  5436 00001428 D3EA                            shr	dx,cl				;
  5437 0000142A 8CC8                            mov     ax,cs                           ; get current segment
  5438 0000142C 01D0                            add     ax,dx                           ; calculate segment of end of init
  5439 0000142E A3[7C1C]                        mov     [initend],ax			; save this
  5440                                  
  5441                                  	; 14/01/2023
  5442                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1591h 
  5443                                  
  5444                                  ;  Check for /? on the command line. If found, display help text and exit.
  5445                                  ;  NOTE: this routine may terminate the program, never returning.
  5446                                  
  5447 00001431 E86A06                  	call	CheckHelp
  5448                                  
  5449                                  ; We have to patch the segment values for the various interrupt entry points.
  5450                                  ; This is because we need to have the default addresses of the handlers in our
  5451                                  ; stub before the relocation is done. These values will then be changed once
  5452                                  ; the resident is relocated
  5453                                  
  5454 00001434 E8A507                  	call	patch_segs
  5455                                  
  5456                                  ;  Turn APPEND off during initialization processing
  5457                                  
  5458                                  	; 14/01/2023
  5459 00001437 B800B7                  	mov     ax,0B700h
  5460                                  	;mov	ax,APPENDINSTALL                ; see if append installed
  5461 0000143A CD2F                    	int	2Fh				;
  5462                                  	;cmp	al,0				; append installed?
  5463 0000143C 08C0                    	or	al,al
  5464 0000143E 7418                    	jz	short set_msg_addr		; no - continue
  5465                                  	
  5466 00001440 B802B7                  	mov	ax,0B702h
  5467                                  	;mov	ax,APPENDDOS			; see if append DOS version right
  5468 00001443 CD2F                    	int	2Fh				;
  5469                                  	;cmp	ax,-1				; append version correct?
  5470                                  	;jne	short set_msg_addr		; no - continue
  5471 00001445 40                      	inc	ax ; -1 -> 0
  5472 00001446 7510                    	jnz	short set_msg_addr        
  5473                                  	
  5474 00001448 B806B7                  	mov     ax,0B706h
  5475                                  	;mov	ax,APPENDGETSTATE               ; Get the state of Append
  5476 0000144B CD2F                    	int	2Fh				;
  5477 0000144D 891E[AB01]                      mov     [Append_State],bx		; save append state
  5478                                         
  5479 00001451 31DB                    	xor	bx,bx                           ; clear out state
  5480 00001453 B807B7                  	mov	ax,0B707h
  5481                                  	;mov	ax,APPENDSETSTATE               ; Set the state of Append
  5482 00001456 CD2F                    	int	2Fh				; set everything off
  5483                                  
  5484                                  set_msg_addr:
  5485                                  	; 14/01/2023
  5486                                  	;;mov	di,offset resgroup:DataresEnd 	; get address of resident end
  5487                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:15BAh) 
  5488                                  	;mov	di,093Eh  ; mov di,PAERRMSG0 ; MSDOS 5.0 COMMAND.COM
  5489 00001458 BF[1F08]                	mov	di,DataresEnd
  5490 0000145B 893E[9F03]              	mov	[ResMsgEnd],di			; save it
  5491                                  
  5492 0000145F E88C07                          call    get_XMMAddr                     ; get XMM call address
  5493                                  
  5494                                  ; Check if this is the first instance of command.com. If not, we just exit
  5495                                  ; this routine without moving any code.
  5496                                  ; After the int 2fh, ds:si points at the resident jump table in the previous
  5497                                  ; stub. We just have to copy this over
  5498                                  	
  5499                                  ;ifndef ROMDOS
  5500 00001462 B80055                  	mov	ax,5500h
  5501                                  	;mov	ax,GET_COMMAND_STATE	
  5502                                  ;else
  5503                                  ;	mov	ax,GET_ROMCOMMAND_STATE	
  5504                                  ;endif ; ROMDOS
  5505                                  
  5506 00001465 CD2F                    	int	2Fh	;  (Int 2Fh/AX=5500h - DOS 5+ - COMMAND.COM INTERFACE)
  5507                                  	;assume	ds:nothing
  5508                                  
  5509                                  	; 03/05/2023
  5510                                  	; Return:
  5511                                  	;   AX = 0000h if an instance of COMMAND.COM is already running
  5512                                  	;   DS:SI -> entry point table
  5513                                  
  5514                                  	; (si = offset Int2f_Entry)  ; (('MsgInt2fHandler:', 'fcOurs:'))
  5515                                  
  5516 00001467 09C0                    	or	ax,ax
  5517 00001469 750C                    	jnz	short first_com			; this is the first instance
  5518                                  
  5519                                  	; 14/01/2023
  5520 0000146B 268936[BC20]            	mov	[es:ResJmpTable],si		; save old stub jump table
  5521 00001470 268C1E[BE20]            	mov	[es:ResJmpTable+2],ds
  5522 00001475 EB06                    	jmp	short init_cntry
  5523                                  
  5524                                  first_com:
  5525 00001477 26C606[C020]01          	mov	byte [es:FirstCom],1		; indicate first command.com
  5526                                  
  5527                                  init_cntry:
  5528                                  	; 14/01/2023
  5529 0000147D 06                      	push	es
  5530 0000147E 1F                      	pop	ds
  5531                                  	;assume	ds:RESGROUP
  5532                                  
  5533 0000147F B465                    	mov	ah,65h
  5534                                  	;mov	ah,GETEXTCNTRY			; get extended country info
  5535 00001481 B004                    	mov	al,4				; get file ucase table
  5536 00001483 BAFFFF                  	mov	dx,-1				;
  5537                                  	;mov	bx,-1				;
  5538 00001486 89D3                    	mov	bx,dx
  5539 00001488 B90500                  	mov	cx,5				; number of bytes we want
  5540                                  	;mov	di,offset resgroup:FUCase_Addr	; buffer for address
  5541 0000148B BF[9E01]                	mov	di,FUCase_Addr
  5542 0000148E CD21                    	int	21h
  5543                                  		; DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
  5544                                  		; AL = function -
  5545                                  
  5546                                  ;	Bugbug:	conditionalize dbcs_vector stuff?
  5547                                  
  5548 00001490 1E                      	push	ds				;
  5549 00001491 B80063                  	mov	ax,6300h
  5550                                  	;mov	ax,(ECS_CALL shl 8) or GETLEADBTBL ;
  5551 00001494 CD21                    	int	21h				;
  5552                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
  5553                                  			
  5554 00001496 8CDB                    	mov	bx,ds				; get segment to bx
  5555 00001498 1F                      	pop	ds				;
  5556 00001499 8936[A701]              	mov	[Dbcs_Vector_Addr],si		; save address of
  5557 0000149D 891E[A901]              	mov	[Dbcs_Vector_Addr+2],bx		; dbcs vector
  5558                                  
  5559                                  	;mov	ax,[16h]
  5560 000014A1 A11600                  	mov	ax,[PDB.PARENT_PID]
  5561                                  				; mov ax,ds:16h	; Init PARENT so we can exit
  5562 000014A4 A3[2901]                	mov	[Parent],ax			;  correctly.
  5563 000014A7 A10A00                  	mov	ax,[PDB.EXIT]   ; mov ax,ds:0Ah
  5564 000014AA A3[2B01]                	mov	[OldTerm],ax
  5565 000014AD A10C00                  	mov	ax,[PDB.EXIT+2] ; mov ax,ds:0Ch
  5566 000014B0 A3[2D01]                	mov	[OldTerm+2],ax
  5567                                  
  5568                                  	; 14/01/2023
  5569                                  	;;;mov	ax,offset ResGroup:EndCode + 15
  5570                                  	;;mov	ax,1569h	; MSDOS 5.0 COMMAND.COM
  5571                                  	;mov	ax,EndCode+15
  5572                                  	;;mov	ax,INITSTART+15 ; 24/09/2018
  5573                                  	; 14/01/2023
  5574                                  	;mov	cl,4				; ax = size of resident part of
  5575                                  	;shr	ax,cl				;  command in paragraphs. Add
  5576                                  	;mov	cx,cs				;  this to CS and you get the
  5577                                  	;add	ax,cx				;  segment of the TPA.
  5578                                  
  5579 000014B3 8CC8                    	mov	ax,cs
  5580 000014B5 055001                  	add	ax,(EndCode+15)>>4
  5581                                  	
  5582 000014B8 A3[4703]                	mov     [Res_Tpa],ax			; Temporarily save the TPA segment
  5583 000014BB 2500F0                  	and     ax,0F000h
  5584 000014BE 050010                  	add     ax,1000h			; Round up to next 64K boundary
  5585 000014C1 7303                    	jnc     short TpaSet			; Memory wrap if carry set
  5586 000014C3 A1[4703]                	mov     ax,[Res_Tpa]
  5587                                  TpaSet:
  5588 000014C6 A3[3903]                	mov	[LTpa],ax			; Good enough for the moment
  5589                                  	;mov	ax,[2]
  5590 000014C9 A10200                  	mov	ax,[PDB.BLOCK_LEN]		; ax = # of paras given to command
  5591                                  
  5592 000014CC 8C1E[3F03]              	mov	[MySeg1],ds			; These 3 variables are used as part of
  5593 000014D0 8C1E[4303]              	mov	[MySeg2],ds			;  3 long ptrs that the transient will
  5594 000014D4 8C1E[3703]              	mov	[MySeg],ds			;  use to call resident routines.
  5595                                  	; 19/04/2023
  5596                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1641h
  5597 000014D8 8C1E[7006]              	mov	[MySeg3],ds			; segment of msg retriever routine 
  5598                                  
  5599 000014DC A3[8001]                	mov	[MemSiz],ax			; Needed for execing other programs
  5600                                  
  5601                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5602                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1648h
  5603                                  
  5604                                  ; First reallocate the COMMAND size to its memory image
  5605                                  	
  5606 000014DF 50                      	push	ax    
  5607                                    	;;;mov	bx,2320h  ; MSDOS 5.0 COMMAND.COM
  5608                                  	;;mov	bx,offset RESGROUP:TranStart    ;
  5609                                  	;mov	bx,TRANSTART
  5610                                  	;;add	bx,98C5h  ; MSDOS 5.0 COMMAND.COM
  5611                                          ;add	bx,offset TRANGROUP:TranSpaceEnd;
  5612                                  	;add	bx,15 ; *			; round up the size
  5613                                  
  5614                                  	; 03/05/2023
  5615                                  	;;mov	bx,TRANSTART+15 ; * ; 14/01/2023
  5616                                  	;;add	bx,TRANSPACEEND
  5617                                  	; 06/06/2023
  5618                                  	;mov	bx,TRANSTART+TRANSPACEEND+15 
  5619                                          ;mov	cl,4				;
  5620                                          ;shr	bx,cl				; size of command.com
  5621 000014E0 BB780B                  	mov	bx,(TRANSTART+TRANSPACEEND+15)>>4
  5622                                  	
  5623 000014E3 B44A                    	mov	ah,4Ah
  5624                                  	;mov	ah,SETBLOCK			; free all memory above pgm
  5625 000014E5 CD21                            int     21h				;
  5626 000014E7 58                              pop     ax				;
  5627                                  	
  5628                                  ; Compute maximum size of environment
  5629                                  
  5630                                  	;;mov	word [ENVMAX],69 ; = (160/16)+(973/16)-1 ; (11EEh-0E30h+0Fh/10h) = 3Ch
  5631                                          ;mov	word [ENVMAX],((ENVIRONSIZ+15)/16) + ((ENVMAXIMUM-ZERO+15)/16) - 1
  5632                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5633                                  	;mov	word [EnvMax],81	; 10+72-1  ; MSDOS 5.0 COMMAND.COM
  5634                                  	;mov	word [EndMax],90	; 12+79-1  ; MSDOS 6.22 COMMAND.COM	
  5635 000014E8 C706[701C]4C00          	mov	word [EnvMax],((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1
  5636                                  ;
  5637                                  ; Compute minimum size of environment
  5638                                  ;
  5639                                  	;;mov	word [EnvSiz],10 ; = 160/16	; MSDOS 3.3 COMMAND.COM
  5640                                  	;mov	word [EnvSiz],16 ; = 256/16	; MSDOS 5.0 COMMAND.COM
  5641 000014EE C706[6E1C]1000          	mov	word [EnvSiz],ENVSML/16 ; 256/16
  5642                                  
  5643                                  	;;mov	dx,offset TranGroup:Transpaceend + 15 ; dx = size of transient
  5644                                  	;mov	dx,98D4h	 ; MSDOS 5.0 COMMAND.COM
  5645                                  	; 06/06/2023
  5646                                  	;mov	dx,TRANSPACEEND+15 ; 4D5Ch+0Fh (for MSDOS 3.3 COMMAND.COM)
  5647                                  	;mov	cl,4				;  in paragraphs.
  5648                                  	;shr	dx,cl
  5649 000014F4 BA5809                  	mov	dx,(TRANSPACEEND+15)>>4
  5650 000014F7 8916[7E1C]                      mov     [TrnSize],dx			; save size of transient in paragraphs
  5651                                  
  5652 000014FB 29D0                    	sub	ax,dx				; max seg addr - # para's needed for transient
  5653 000014FD A3[7A01]                	mov	[TrnSeg],ax			;  = seg addr to load the transient at.
  5654                                  	;mov	ax,[2Ch]
  5655 00001500 A12C00                  	mov	ax,[PDB.ENVIRON]		; ax = environment segment
  5656                                  
  5657                                  	; 14/01/2023
  5658                                          ; MSDOS 6.0
  5659                                  	;mov	[EnvirSeg],ax
  5660                                          
  5661                                  	; 21/01/2023
  5662 00001503 09C0                    	or	ax,ax				; if there is no environment segment,
  5663 00001505 7406                    	jz	short buildenv			; make one
  5664                                    
  5665                                  	; 21/01/2023
  5666                                  	; MSDOS 3.3 & MSDOS 5.0
  5667                                  	;inc	byte [CHUCKENV]
  5668 00001507 FE06[521C]              	inc	byte [AllocedEnv]		; Flag - old environment segment
  5669                                  	
  5670                                  	; MSDOS 3.3 & MSDOS 5.0
  5671 0000150B EB03                    	jmp	short environpassed
  5672                                  	; MSDOS 6.0
  5673                                          ;cmp	byte [FirstCom],0		; if this is the first command.com,
  5674                                  	;je	short environpassed		; do a merge job (make sure COMSPEC exists)
  5675                                  
  5676                                  	; MSDOS 6.0
  5677                                  
  5678                                  ; We allocate a buffer here just large enough to hold the 'PATH=' and
  5679                                  ; the COMSPEC. After parsing, we will allocate an environment of the right
  5680                                  ; size and free this buffer. We need this buffer because we no longer have an
  5681                                  ; ENVIRONMENT segment but need a place to store the COMSPEC which can be
  5682                                  ; given on the command line before we know the environment size. This routine
  5683                                  ; will not return in case of an allocation error. It will either exit or hang
  5684                                  ; depending on whether or not this is the first COMMAND.COM or not.
  5685                                  
  5686                                  	; 14/01/2023
  5687                                  buildenv:
  5688 0000150D E87206                  	call	alloc_env                       ; try to allocate buffer
  5689                                  environpassed:
  5690                                  	; 14/01/2023 - MSDOS 5.0 COMMAND.COM
  5691 00001510 A3[2703]                	mov	[EnvirSeg],ax
  5692                                  	;
  5693 00001513 8EC0                    	mov	es,ax                           ; and it load into es.
  5694                                  	;assume	es:nothing
  5695                                  
  5696                                  gottheenvir:
  5697                                  
  5698                                  ; Initialize the command drive
  5699                                  
  5700                                  ; 14/01/2023
  5701                                  %if 0
  5702                                  	; MSDOS 3.3
  5703                                  BUILDENV:
  5704                                          ;mov	ax,offset RESGROUP:PATHSTRING	; Figure environment pointer
  5705                                  	mov	ax,PATHSTRING ; "PATH="
  5706                                  	mov	cl,4
  5707                                  	shr	ax,cl
  5708                                  	mov	dx,ds
  5709                                  	add	ax,dx
  5710                                  ENVIRONPASSED:
  5711                                          mov	[ENVIRSEG],ax
  5712                                          MOV     es,ax
  5713                                  
  5714                                          ;mov	ax,CHAR_OPER<<8
  5715                                          mov	ax,CHAR_OPER*256 ; 3700h
  5716                                  	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  5717                                  			; Return: AL = FFh unsupported subfunction
  5718                                  			; DL = current switch character
  5719                                          mov	[RSWITCHAR],dl
  5720                                  
  5721                                          ;CMP	dl,'/'
  5722                                  	cmp	dl,[slash_chr]
  5723                                          jnz	short IUSESLASH
  5724                                  
  5725                                  	;mov	al,'\'
  5726                                   	mov	al,[bslash_chr]
  5727                                  	mov	[COMSPECT],al
  5728                                  
  5729                                  	cmp	byte [CHUCKENV],0
  5730                                  	jnz	short IUSESLASH
  5731                                  
  5732                                          ;mov	ES:[ECOMSPEC-10h],'\'
  5733                                  	; 30/04/2018
  5734                                  	;mov	byte [ES:(ECOMSPEC-ENVIRONMENT)],'\' ; [ES:0Eh]
  5735                                  	; 23/09/2018
  5736                                  	mov	byte [ES:(ECOMSPEC-ENVIRONMENT)],al ; mov es:0Eh,al
  5737                                  gottheenvir:
  5738                                  IUSESLASH:
  5739                                  
  5740                                  ; Initialize the command drive
  5741                                  
  5742                                  %endif
  5743                                  	; 14/01/2023
  5744                                  	; MSDOS 3.3 & MSDOS 6.0
  5745 00001515 B419                    	mov	ah,19h
  5746                                  	;mov	ah,GET_DEFAULT_DRIVE	; 19h
  5747 00001517 CD21                    	int	21h
  5748 00001519 FEC0                    	inc	al
  5749 0000151B A2[7F01]                	mov	[ComDrv],al
  5750                                  
  5751                                          ;mov	al,byte ptr ds:[FCB]	; al = default drive number for command
  5752 0000151E A05C00                          mov	al,[FCB]
  5753 00001521 08C0                    	or	al,al
  5754 00001523 7426                    	jz	short nocomdrv		; no drive specified
  5755                                  
  5756 00001525 B43A                    	mov	ah,':'
  5757 00001527 A2[7F01]                	mov	[ComDrv],al
  5758 0000152A 0440                    	add	al,40h			; convert number to uppercase character
  5759                                  
  5760 0000152C FD                      	std
  5761                                  
  5762                                  	; MSDOS 6.0
  5763                                  	;cmp	byte [AllocedEnv],0	; if a new environment is being built,
  5764                                  	;je	short notwidenv		;  move the default comspec string in it
  5765                                  	; 14/01/2023
  5766                                  	; MSDOS 5.0 COMMAND.COM
  5767                                  	;mov	di,[ComspOffset]
  5768                                          ;cmp	byte [es:di+1],':'	; drive specifier already exist?
  5769                                          ;je	short notwidenv		; yes, must have been inherited that way
  5770                                  
  5771                                  	; MSDOS 3.3
  5772                                  	;cmp	byte [CHUCKENV],0
  5773                                  	;jne	short NOTWIDENV
  5774                                  	; 21/01/2021
  5775                                  	; MSDOS 5.0 - COMMAND.COM - RESGROUP:16A5h
  5776 0000152D 803E[521C]00             	cmp	byte [AllocedEnv],0
  5777 00001532 7713                    	ja	short notwidenv
  5778                                  
  5779 00001534 1E                        	push	ds			;  2 bytes to make room for a drivespec.
  5780 00001535 06                      	push	es			;  the drivespec is in ax and is copied
  5781 00001536 1F                      	pop	ds			;  on to the front of the string.
  5782                                  
  5783                                  	; MSDOS 6.0
  5784                                          ;lea	si,[di+MAX_COMSPEC-3]	
  5785                                          ;lea	di,[di+MAX_COMSPEC-1]
  5786                                  
  5787                                  	; 21/01/2023
  5788                                  	; 14/01/2023
  5789                                  	; MSDOS 5.0 COMMAND.COM
  5790                                  	; MSDOS 3.3
  5791                                  	; 23/09/2018
  5792                                  	; 30/04/2018
  5793                                  	;mov	di,159
  5794                                  	;;MOV	DI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-1-10H
  5795                                  	;mov	di,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-1 ; mov di,9Fh
  5796 00001537 BF9F00                  	mov	di,ENVIRONSIZ-1 ; 21/01/2023
  5797                                  	;mov	si,157
  5798                                  	;;MOV	SI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-3-10H
  5799                                          ;mov	si,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-3 ; mov si,9Dh 
  5800 0000153A BE9D00                  	mov	si,ENVIRONSIZ-3 ; 21/01/2023 	
  5801                                  	;mov	cx,144
  5802                                  	;MOV	CX,ENVIRONSIZ2-2 ; mov cx,90h
  5803 0000153D B99000                          mov	cx,MAX_COMSPEC-2 ; 144
  5804                                  
  5805 00001540 F3A4                    	rep	movsb
  5806 00001542 1F                      	pop	ds
  5807                                  
  5808                                  	; MSDOS 6.0
  5809                                  	;mov	word ptr es:[di-1],ax
  5810                                  
  5811                                  	; MSDOS 3.3
  5812                                  	;mov	[es:0Eh],ax
  5813                                  	;;;MOV	WORD PTR ES:[ECOMSPEC-10H],AX
  5814                                  	;;MOV	[es:(ECOMSPEC-ENVIRONMENT)],ax	; mov [es:0Eh],ax
  5815                                  	; 14/01/2023
  5816 00001543 26A30E00                	mov	[es:ECOMSPEC],ax ; mov [es:0Eh],ax
  5817                                  
  5818                                  	; MSDOS 3.3 & MSDOS 6.0
  5819                                  notwidenv:
  5820 00001547 FC                      	cld
  5821 00001548 A3[341C]                	mov	[AUTOBAT],ax ; ":\AUTOEXEC.BAT"
  5822                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  5823                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C3h)
  5824                                  	;mov	[KAUTOBAT],ax
  5825                                  nocomdrv:
  5826 0000154B E8A4FA                  	call	SetVect        ; Set the vectors
  5827                                  
  5828                                  ; parsing starts here
  5829                                  
  5830                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  5831                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C9h)
  5832                                  	; MSDOS 6.0
  5833 0000154E 0E                      	push	cs
  5834 0000154F 0E                      	push	cs
  5835 00001550 1F                      	pop	ds
  5836 00001551 07                      	pop	es
  5837                                  	;assume ds:ResGroup,es:ResGroup
  5838                                  
  5839                                  ; 14/01/2023
  5840                                  %if 0	
  5841                                  	; MSDOS 3.3
  5842                                  	mov	si,80h		; get command line
  5843                                  	lodsb			; get length of line
  5844                                  	mov	cl,al
  5845                                  	xor	ch,ch		; cx = length of command line
  5846                                  
  5847                                  ; insure that the command line correctly ends with a cr
  5848                                  
  5849                                  	add	si,cx		; go to end of command line	
  5850                                  	mov	byte [si], 0Dh	; insert a carriage return
  5851                                  
  5852                                  	mov	si,81h		; Start of parms
  5853                                  CHKARG:
  5854                                          jcxz	COMRETURNSJ     ; No parameters
  5855                                          dec	cx
  5856                                  	lodsb
  5857                                  CHECKSWITCHCHR:
  5858                                  	;cmp	al,' '
  5859                                  	cmp	al,[SPACE_CHR]	 ;Skip blank spaces
  5860                                  	jz	short CHKARG
  5861                                  	cmp	al,9		; Skip TAB characters
  5862                                  	jz	short CHKARG
  5863                                  	cmp	al,[RSWITCHAR]	; Switch?
  5864                                  	jz	short PARSE_CONT ; Yes, get the char after the switch
  5865                                  	jmp	CHKOTHERARGS	; No
  5866                                  
  5867                                  %endif
  5868                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  5869                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:16CDh - CODERES:098Dh)
  5870                                  	; MSDOS 6.0
  5871                                  
  5872 00001552 BE8000                  	mov	si,80h				; get command line
  5873 00001555 AC                      	lodsb					; get length of line
  5874 00001556 89F7                    	mov	di,si				; get line position in di
  5875 00001558 30E4                    	xor	ah,ah				; ax = length of command line
  5876                                  
  5877                                  ; insure that the command line correctly ends with a cr
  5878                                  
  5879 0000155A 01C7                    	add	di,ax				; go to end of command line
  5880 0000155C C6050D                          mov	byte [di],0Dh			; insert a carriage return
  5881 0000155F 31C9                    	xor	cx,cx				; clear cx
  5882 00001561 890E[141D]                      mov	[num_positionals],cx		; initialize positionals
  5883                                  
  5884                                  ; Scan the command line looking for the parameters
  5885                                  
  5886                                  Parse_command_line:
  5887                                  	;mov	di,offset ResGroup:Parse_Command; Get address of parse_command
  5888 00001565 BF[861C]                	mov	di,PARSE_COMMAND
  5889 00001568 8B0E[141D]              	mov	cx,[num_positionals]		; Get number of positionals
  5890 0000156C 31D2                    	xor	dx,dx				; clear dx
  5891 0000156E 8936[161D]                      mov	[old_parse_ptr],si		; save position before calling parser
  5892                                  	;call	dword ptr Init_Parse
  5893 00001572 FF1E[7A1C]              	call	far [Init_Parse]		; call parser
  5894 00001576 890E[141D]                      mov     [num_positionals],cx		; Save number of positionals
  5895                                  	; 29/01/2023
  5896                                  	;;cmp	ax,END_OF_LINE ; 0FFFFh ; -1 	; are we at end of line?
  5897                                          ;cmp	ax,-1
  5898                                  	;jne	short t1
  5899                                  	; 10/06/2023
  5900 0000157A 40                      	inc	ax	 ; cmp ax,-1
  5901 0000157B 7503                    	jnz	short t1 ; 0FFFFh -> 0
  5902                                  	; ax = 0
  5903 0000157D E9FB01                  	jmp     ArgsDone                        ; yes - exit
  5904                                  t1:	
  5905                                  	;;cmp	ax,RESULT_NO_ERROR ; 0		; did an error occur
  5906                                  	;;cmp	ax,0
  5907                                  	;and	ax,ax
  5908                                  	; 10/06/2023
  5909 00001580 48                      	dec	ax  ; cmp ax,0
  5910 00001581 7447                    	jz	short parse_cont  ; 1 -> 0	; no - continue
  5911                                  
  5912                                  ; Before issuing error message - make sure switch is not /C
  5913                                  
  5914                                  parse_line_error:
  5915                                  	; 14/01/2023
  5916                                  	;push	si				; save line position
  5917                                  	;push	ax				; save error number
  5918                                  	;cmp	ax,3
  5919 00001583 83F803                  	cmp	ax,BadSwt_Ptr ; 3		; Was error invalid switch?
  5920                                          ;jnz	short parse_line_error_disp	; No - just issue message
  5921 00001586 752A                    	jne	short parse_line_error_disp2
  5922 00001588 56                      	push	si ; **				; save line position
  5923 00001589 50                      	push	ax ; *				; save error number
  5924 0000158A 89F7                    	mov	di,si				; Get terminating pointer in DI
  5925 0000158C 8B36[161D]                      mov     si,[old_parse_ptr]		; Get starting pointer in SI
  5926                                  
  5927                                  init_chk_delim:
  5928 00001590 39FE                    	cmp	si,di				; at end of parsed parameter?
  5929 00001592 741C                            je	short parse_line_error_disp	; Yes - just display message
  5930 00001594 AC                      	lodsb					;
  5931 00001595 3C20                    	cmp	al,20h ; ' ' ; 16/04/2023
  5932                                  	;cmp	al,space_chr ; 14/01/2023
  5933                                  	;;cmp	al,[space]			; Skip blank spaces
  5934 00001597 74F7                    	je	short init_chk_delim		;
  5935                                  	;cmp	al,9
  5936 00001599 3C09                    	cmp	al,tab_chr ; 9			; Skip tab characters
  5937 0000159B 74F3                    	je	short init_chk_delim		;
  5938                                  
  5939 0000159D 3A06[3B03]              	cmp	al,[RSwitChar]	; '/'		; Switch?
  5940 000015A1 750D                            jne	short parse_line_error_disp	; No - just issue message
  5941 000015A3 AC                      	lodsb					; Get the char after the switch
  5942                                  
  5943 000015A4 E86804                  	call	iupconv 			; upper case it
  5944                                  
  5945                                  	;cmp	al,[scswitch]	; 'C'		; it is /C?
  5946                                          ;jne	short check_k_too ; MSDOS 6.0	;
  5947                                  	;16/04/2023
  5948 000015A7 3C43                    	cmp	al,'C' ; scswitch
  5949 000015A9 7505                    	jne	short parse_line_error_disp  ; MSDOS 5.0 COMMAND.COM
  5950 000015AB 5A                      	pop	dx ; *				; even up stack
  5951 000015AC 5A                      	pop	dx ; **				; even up stack
  5952 000015AD E99800                  	jmp	SetSSwitch			; Yes - go set COMMAND /C
  5953                                  
  5954                                  	; MSDOS 6.0
  5955                                  ;check_k_too:
  5956                                  	;cmp	al,[skswitch]	; 'K'		; it is /K?
  5957                                          ;jne	short parse_line_error_disp	;
  5958                                  	;pop	dx ; *				; even up stack
  5959                                  	;pop	dx ; **				; even up stack
  5960                                          ;jmp	SetKSwitch			; Yes - go set COMMAND /K
  5961                                  
  5962                                  parse_line_error_disp:
  5963                                  	; 14/01/2023
  5964 000015B0 58                      	pop	ax ; *				; restore error number
  5965 000015B1 5E                      	pop	si ; **				; restore line position
  5966                                  parse_line_error_disp2:
  5967 000015B2 89C2                    	mov	dx,ax				; get message number
  5968 000015B4 E8FC03                  	call	RPrintParse
  5969 000015B7 E8B8FC                  	call	crlf
  5970 000015BA EBA9                            jmp     short Parse_command_line        ; continue parsing
  5971                                  
  5972                                  ; 16/04/2023
  5973                                  %if 1
  5974                                  SetMSwitch:
  5975                                          ;cmp	byte [ext_msg],1
  5976 000015BC 803E[811C]01            	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  5977                                  	; 16/04/2023
  5978                                  	;jnz	short setMswitchok		; no - set it
  5979                                  	;;mov	ax,1
  5980                                  	;mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  5981                                  	;jmp	parse_line_error                ; go issue error message
  5982                                  	; 16/04/2023
  5983 000015C1 744F                    	je	short parse_line_error_j
  5984                                  setMswitchok:
  5985                                          ;mov	byte [ext_msg],1
  5986 000015C3 C606[811C]01            	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  5987                                  	; 06/06/2023
  5988 000015C8 EB9B                    	jmp	short Parse_command_line	; keep parsing
  5989                                  %endif
  5990                                  
  5991                                  parse_cont:
  5992                                  
  5993                                  ; 15/01/2023
  5994                                  %if 0
  5995                                  	; MSDOS 3.3
  5996                                  
  5997                                  ; See if a switch was entered
  5998                                  
  5999                                  	jcxz	COMRETURNSJ
  6000                                  	dec	cx
  6001                                  	lodsb
  6002                                  	or	al,20h		; Lower case
  6003                                  	cmp	al,'f'		; FAIL switch
  6004                                  	jnz     short CHECKPSWITCH
  6005                                  %endif
  6006                                  
  6007                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6008                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:173Ch - CODERES:09FCh)
  6009                                  	; MSDOS 6.0
  6010                                  
  6011                                  ; See if a switch was entered
  6012                                  ;
  6013                                  ; Bugbug: See if Comnd1_Syn can be moved into a reg. before the compare
  6014                                  
  6015 000015CA 813E[0D1D][BD1C]        	cmp	word [COMND1_SYN],COMMAND_F_SYN ; was /F entered?
  6016 000015D0 742A                    	je	short SetFSwitch		; yes go set fail switch
  6017 000015D2 813E[0D1D][B11C]        	cmp	word [COMND1_SYN],COMMAND_P_SYN ; was /P entered?
  6018 000015D8 7431                    	je	short SetPSwitch		; yes go set up PERMCOM
  6019 000015DA 813E[0D1D][C91C]        	cmp	word [COMND1_SYN],COMMAND_D_SYN ; was /D entered?
  6020 000015E0 7453                    	je	short SetDSwitch		; yes go set date switch
  6021 000015E2 813E[0D1D][EE1C]        	cmp	word [COMND1_SYN],COMMAND_C_SYN ; was /C entered?
  6022 000015E8 745E                    	je	short SetSSwitch		; yes go set up SINGLECOM
  6023                                  	; MSDOS 6.0 only!
  6024                                  	;cmp	word [COMND1_SYN],COMMAND_K_SYN ; was /K entered?
  6025                                          ;je	short SetKSwitch		; yes go set up SINGLECOM
  6026 000015EA 813E[0D1D][D51C]        	cmp	word [COMND1_SYN],COMMAND_E_SYN ; was /E entered?
  6027 000015F0 7467                    	je	short SetESwitch		; yes go set up environment
  6028 000015F2 813E[0D1D][FA1C]        	cmp	word [COMND1_SYN],COMMAND_M_SYN	; was /MSG entered?
  6029                                  	;je	short SetMSwitchjmp		; yes go set up message flag
  6030                                  	; 15/01/2023
  6031 000015F8 74C2                    	je	short SetMSwitch 
  6032 000015FA EB7B                    	jmp	ChkOtherArgs		; Must be something else
  6033                                  
  6034                                  	; MSDOS 6.0
  6035                                  ;SetMSwitchjmp:
  6036                                  	;jmp	SetMSwitch
  6037                                  	
  6038                                  	; MSDOS 6.0
  6039                                  SetFSwitch:
  6040 000015FC 803E[9201]FF            	cmp	byte [fFail],-1		; has fail switch been set?
  6041                                  	; 16/04/2023
  6042                                  	;jne	short failok		; no - set it
  6043                                  	;;mov	ax,1
  6044                                  	;mov	ax,MoreArgs_Ptr         ; set up too many arguments
  6045                                          ;jmp	parse_line_error        ; go issue error 
  6046                                  	; 16/04/2023
  6047 00001601 740F                    	je	short parse_line_error_j
  6048                                  
  6049                                  	; MSDOS 3.3 & MSDOS 6.0
  6050                                  failok:
  6051 00001603 C606[9201]FF            	mov	byte [fFail],-1		; fail all INT 24s.
  6052                                  	; MSDOS 3.3
  6053                                  	;jmp	short CHKARG
  6054                                  	; MSDOS 6.0
  6055 00001608 E95AFF                  	jmp	Parse_command_line
  6056                                  
  6057                                  ;CHECKPSWITCH:
  6058                                  	;;cmp	al,'p'			; Permanent COMMAND switch
  6059                                  	;cmp	al,[letter_p]
  6060                                          ;jnz	short CHECKDSWITCH
  6061                                  
  6062                                  SetPSwitch:
  6063                                  
  6064                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6065                                  ; termination address.
  6066                                  
  6067                                  	; MSDOS 6.0
  6068 0000160B 803E[8D01]00            	cmp	byte [PermCom],0	; has /p switch been set?
  6069 00001610 7406                    	jz	short permcomok		; no - set it
  6070                                  	; 16/04/2023
  6071                                  parse_line_error_j:
  6072                                          ;mov	ax,1
  6073 00001612 B80100                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6074 00001615 E96BFF                          jmp	parse_line_error	; go issue error 
  6075                                  
  6076                                  permcomok:
  6077                                  	; MSDOS 3.3 & MSDOS 6.0
  6078 00001618 FE06[8D01]              	inc	byte [PermCom]
  6079                                  	;mov	word [OLDTERM],LODCOM
  6080 0000161C C706[2B01][7E00]        	mov	word [OldTerm],LodCom_Trap
  6081                                  	;mov	[OLDTERM+2],ds
  6082 00001622 8C1E[2D01]              	mov	[OldTerm+2],ds
  6083                                  
  6084                                  ; make sure that we display the date and time. if the flag was not
  6085                                  ; initialized, set it to indicate yes, do prompt.
  6086                                  
  6087                                  	; MSDOS 3.3
  6088                                  	;cmp	byte [PRDATTM],-1
  6089                                  	;jnz	short CHKARG
  6090                                  	;mov	byte [PRDATTM],0
  6091                                  	;jmp	short CHKARG
  6092                                  
  6093                                  	; MSDOS 6.0
  6094 00001626 803E[451C]FF            	cmp	byte [PRDATTM],-1
  6095 0000162B 7505                    	jne	short Parse_command_line_jmp
  6096 0000162D C606[451C]00            	mov	byte [PRDATTM],0
  6097                                  Parse_command_line_jmp:
  6098 00001632 E930FF                  	jmp     Parse_command_line	; keep parsing
  6099                                  
  6100                                  ;COMRETURNSJ:
  6101                                  ;	; MSDOS 3.3
  6102                                  ;	JMP	ARGSDONE
  6103                                  
  6104                                  ;CHECKDSWITCH:
  6105                                  	;;cmp	al,'d'
  6106                                          ;cmp	al,[letter_d]
  6107                                  	;jnz	short CHECKCSWITCH
  6108                                  
  6109                                  SetDSwitch:
  6110                                  
  6111                                  ; Flag no date/time prompting.
  6112                                  
  6113                                  	; MSDOS 6.0
  6114 00001635 803E[831C]00            	cmp	byte [dswitch],0	; has /D switch been set?
  6115                                  	; 16/04/2023
  6116                                  	;jz	short setdateok		; no - set it
  6117                                          ;;mov	ax,1
  6118                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6119                                          ;jmp	parse_line_error	; go issue error message
  6120                                  	; 16/04/2023
  6121 0000163A 75D6                    	jnz	short parse_line_error_j
  6122                                  setdateok:
  6123 0000163C FE06[831C]              	inc	byte  [dswitch]		; indicate /D entered
  6124                                  
  6125                                  	; MSDOS 3.3 & MSDOS 6.0
  6126 00001640 C606[451C]01                    mov	byte [PRDATTM],1	; User explicitly says no date time
  6127                                  	; MSDOS 3.3
  6128                                  	;jmp	short CHKARG
  6129                                  	; MSDOS 6.0
  6130 00001645 E91DFF                  	jmp     Parse_command_line	; continue parsing
  6131                                  
  6132                                  	; 15/01/2023
  6133                                  	; MSDOS 6.0 
  6134                                  ;SetKSwitch:
  6135                                  	;mov	byte [SemiPermCom],0
  6136                                  	;jmp	short SetSorKSwitch
  6137                                  
  6138                                  ;CHECKCSWITCH:
  6139                                  	;;cmp	al,'c'
  6140                                  	;cmp	al,[letter_c]
  6141                                          ;jnz	short CHECKESWITCH
  6142                                  
  6143                                  SetSSwitch:
  6144                                  ;SETCSWITCH:
  6145                                  
  6146                                  ; Set up pointer to command line, flag no date/time and turn off SingleCom.
  6147                                  
  6148 00001648 C606[8D01]00            	mov	byte [PermCom],0	; A SingleCom must not be a PermCom
  6149                                  ;SetSorKSwitch:
  6150 0000164D 8936[8E01]              	mov	[SingleCom],si		; Point to the rest of the command line
  6151 00001651 C606[451C]01            	mov	byte [PRDATTM],1	; no date or time either, explicit
  6152                                  ;COMRETURNSJ: ; 24/09/2018
  6153 00001656 E92201                  	jmp     ArgsDone
  6154                                  
  6155                                  ;CHECKESWITCH:
  6156                                  	;cmp	al,'e'
  6157                                  	;jnz	short CHKARG
  6158                                  
  6159                                  ; Look for environment-size setting switch
  6160                                  
  6161                                  ; The environment size is represented in decimal bytes and is
  6162                                  ; converted into paragraphs (rounded up to the next paragraph).
  6163                                  
  6164                                  SetESwitch:
  6165                                  	; MSDOS 6.0
  6166 00001659 803E[821C]00            	cmp	byte [eswitch],0	; has environment size switch been set?
  6167                                  	; 16/04/2023
  6168                                  	;jz	short eswitchok		; no - set it
  6169                                  	;;mov	ax,1
  6170                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6171                                          ;jmp	parse_line_error	; go issue error message
  6172                                  	; 16/04/2023
  6173 0000165E 75B2                    	jnz	short parse_line_error_j
  6174                                  eswitchok:
  6175 00001660 FE06[821C]              	inc	byte [eswitch]		; indicate /E entered
  6176                                  
  6177                                  ; 15/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6178                                  %if 0
  6179                                  	; 23/09/2018 - Retro DOS v3.0
  6180                                  
  6181                                  	; MSDOS 3.3
  6182                                  	; (COMMAND.COM offset 0FC5h)
  6183                                  ESWITCHOK:
  6184                                  	jcxz    CHKARG
  6185                                  	dec     cx
  6186                                  	lodsb
  6187                                  	cmp     al,':'
  6188                                  	jnz     short CHECKSWITCHCHR
  6189                                  	xor     bx,bx
  6190                                  	mov     ax,bx
  6191                                  GETENVSIZE:
  6192                                  	jcxz    SETENVSIZE
  6193                                  	dec     cx
  6194                                  	lodsb
  6195                                  	cmp     al,'0'
  6196                                  	jb      short NOTDECIMALCHR
  6197                                  	cmp     al,'9'
  6198                                  	ja      short NOTDECIMALCHR
  6199                                  	sub     al,'0'
  6200                                  	mov     dx,bx
  6201                                  	shl     dx,1
  6202                                  	shl     dx,1   ; dx = 4*bx
  6203                                  	add     bx,dx  ; bx = 5*bx
  6204                                  	shl     bx,1   ; bx = 10*bx
  6205                                  	add     bx,ax
  6206                                  	jmp     short GETENVSIZE
  6207                                  
  6208                                  NOTDECIMALCHR:
  6209                                  	;cmp	al,' '
  6210                                  	cmp	al,[SPACE_CHAR]
  6211                                  	jz      short CHECKENVSIZE
  6212                                  	;cmp	al,'/'
  6213                                  	cmp     al,[RSWITCHAR]
  6214                                  	jz      short CHECKENVSIZE
  6215                                  
  6216                                  CHECKNEXTECHR:
  6217                                  	jcxz    INVENVSIZE
  6218                                  	dec     cx
  6219                                  	lodsb
  6220                                  	;cmp	al,' '
  6221                                  	cmp     al,[SPACE_CHR]
  6222                                  	jz      short ENVSIZESPC
  6223                                  	;cmp	al,'/'
  6224                                  	cmp     al,[RSWITCHAR]
  6225                                  	jnz     short CHECKNEXTECHR
  6226                                  
  6227                                  ENVSIZESPC:
  6228                                  	dec     si
  6229                                  	inc     cx
  6230                                  	jmp     short INVENVSIZE
  6231                                  	
  6232                                  	;nop
  6233                                  
  6234                                  CHECKENVSIZE: 
  6235                                  	dec     si
  6236                                  	inc     cx
  6237                                  
  6238                                  SETENVSIZE:
  6239                                  	;mov	word [ENVSIZ],2048	; Maximum environment size (32KB)
  6240                                  	mov	word [ENVSIZ],ENVBIG/16
  6241                                  	cmp     bx,32768
  6242                                  	ja      short INVENVSIZE
  6243                                  	;mov	word [ENVSIZ],10	; Minimum environment size (160 bytes)
  6244                                  	mov	word [ENVSIZ],ENVSML/16
  6245                                  	cmp     bx,160
  6246                                  	jb      short INVENVSIZE
  6247                                  	add     bx,15
  6248                                  	shr     bx,1
  6249                                  	shr     bx,1
  6250                                  	shr     bx,1
  6251                                  	shr     bx,1
  6252                                  	mov	[ENVSIZ],bx		; EnvSiz is in paragraphs
  6253                                  	jmp     short NEXTCH2
  6254                                  
  6255                                  	;nop
  6256                                  
  6257                                  INVENVSIZE:
  6258                                  	mov     dx,BADENVSIZMSG ; "Invalid environment size specified\r\n$"
  6259                                  	mov     ah,STD_CON_STRING_OUTPUT ; 9
  6260                                  	int     21h             ; DOS - PRINT STRING
  6261                                  				; DS:DX -> string terminated by "$"
  6262                                  NEXTCH2:
  6263                                  	; (MSDOS 3.3 COMMAND.COM, offset 1041h)
  6264                                  	jmp     CHKARG
  6265                                  
  6266                                  	;jmp	ARGSDONE
  6267                                  
  6268                                  %endif
  6269                                  	; 15/01/2023
  6270                                  	; MSDOS 6.0
  6271                                  	;mov	di,offset ResGroup:Comnd1_Addr	; get number returned
  6272 00001664 BF[0F1D]                        mov	di,COMND1_ADDR
  6273 00001667 8B1D                    	mov     bx,[di]				; into bx
  6274                                  
  6275 00001669 83C30F                  	add	bx,0Fh				; Round up to next paragraph
  6276 0000166C B104                    	mov	cl,4				; convert to pargraphs
  6277 0000166E D3EB                    	shr	bx,cl				; by right 4
  6278                                  
  6279 00001670 891E[6E1C]              	mov	[EnvSiz],bx			; EnvSiz is in paragraphs
  6280 00001674 E9EEFE                  	jmp	Parse_command_line		; continue parsing command line
  6281                                  
  6282                                  ; 16/04/2023
  6283                                  %if 0
  6284                                  SetMSwitch:
  6285                                          ;cmp	byte [ext_msg],1
  6286                                  	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6287                                  	jnz	short setMswitchok		; no - set it
  6288                                  	;mov	ax,1
  6289                                  	mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6290                                  	jmp	parse_line_error                ; go issue error message
  6291                                  setMswitchok:
  6292                                          ;mov	byte [ext_msg],1
  6293                                  	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6294                                  	jmp	Parse_command_line              ; keep parsing
  6295                                  %endif
  6296                                  
  6297                                  ;ArgsDoneJ:
  6298                                  	;jmp	ArgsDone
  6299                                  
  6300                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6301                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:181Dh - CODERES:0ADDh)
  6302                                  	
  6303                                  ChkOtherArgs:
  6304                                  
  6305                                  ; We have a non-switch character here.
  6306                                  
  6307                                  	; MSDOS 6.0
  6308 00001677 1E                      	push	ds ; ****			;
  6309 00001678 56                      	push	si ; *** 			; save place in command line
  6310 00001679 C536[0F1D]              	lds	si,[COMND1_ADDR]		; get address of filespec
  6311                                  	;assume	ds:nothing			;
  6312                                  
  6313 0000167D 89F2                    	mov	dx,si				; put in dx also
  6314 0000167F B8023D                  	mov	ax,3D02h
  6315                                  	;mov	ax,(OPEN shl 8) or 2            ; Read and write
  6316 00001682 CD21                    	int	21h
  6317 00001684 7260                    	jc	short ChkSrchSpec		; Wasn't a file
  6318 00001686 89C3                    	mov	bx,ax
  6319 00001688 B80044                  	mov	ax,4400h
  6320                                  	;mov	ax,IOCTL shl 8
  6321 0000168B CD21                    	int	21h
  6322 0000168D F6C280                  	test	dl,80h
  6323 00001690 7506                    	jnz	short IsaDevice
  6324                                  BadSetCon:
  6325 00001692 B43E                    	mov	ah,3Eh
  6326                                  	;mov	ah,CLOSE		; Close initial handle, wasn't a device
  6327 00001694 CD21                    	int	21h
  6328 00001696 EB4E                    	jmp	short ChkSrchSpec
  6329                                  
  6330                                  ; 15/01/2023
  6331                                  %if 0
  6332                                  	; MSDOS 3.3
  6333                                  	; (COMMAND.COM offset 1047h)
  6334                                          dec	si
  6335                                  	inc	cx
  6336                                  	mov	dx,si
  6337                                  	push	cx ; **
  6338                                  	push	si ; *
  6339                                  CONTRLOOP:
  6340                                  	lodsb
  6341                                  	dec	cx
  6342                                  	;cmp	al,' '
  6343                                  	cmp	al,[SPACE_CHR]
  6344                                  	jz	short SETCDEV
  6345                                  	cmp	al,9
  6346                                  	jz	short SETCDEV
  6347                                  	jcxz	SETCDEVA
  6348                                  	jmp	short CONTRLOOP
  6349                                  
  6350                                  SETCDEVA:
  6351                                          inc	si
  6352                                  SETCDEV:
  6353                                  	mov	byte [SI-1],0
  6354                                          ;mov	ax,(OPEN SHL 8) OR 2  ; Read and write
  6355                                          mov	ax,(OPEN*256) | 2 ; 3D02h
  6356                                          int     21h	; DOS - 2+ - OPEN DISK FILE WITH HANDLE
  6357                                  			; DS:DX -> ASCIZ filename
  6358                                  			; AL = access mode
  6359                                  			; 2 - read & write
  6360                                          jc	short CHKSRCHSPEC	; Wasn't a file
  6361                                          mov	bx,ax
  6362                                          ;mov	ax,IOCTL shl 8
  6363                                          mov     ax,IOCTL*256 ; 4400h
  6364                                  	int     21h	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
  6365                                  			; BX = file or device handle
  6366                                          test	dl,80H
  6367                                  	jnz	short ISADEVICE
  6368                                  BADSETCON: ; MSDOS 6.0
  6369                                  	mov	ah,CLOSE ; 3Eh	; Close initial handle, wasn't a device
  6370                                          int     21h	; DOS - 2+ - CLOSE A FILE WITH HANDLE
  6371                                  			; BX = file handle
  6372                                          JMP     short CHKSRCHSPEC
  6373                                  %endif
  6374                                  	;nop
  6375                                  
  6376                                  	; 15/01/2023
  6377                                  IsaDevice:
  6378                                  	; MSDOS 3.3 & MSDOS 6.0
  6379 00001698 30F6                    	xor	dh,dh
  6380 0000169A 80CA03                  	or	dl,3				; Make sure has CON attributes
  6381                                  	;mov	ax,(IOCTL shl 8) or 1
  6382 0000169D B80144                  	mov	ax,(IOCTL*256)|1 ; 4401h
  6383 000016A0 CD21                    	int	21h
  6384                                  	;
  6385                                  	; 15/01/2023
  6386 000016A2 72EE                    	jc	short BadSetCon	; MSDOS 6.0 (& 5.0)
  6387                                  	; 25/09/2018
  6388                                  	;pop	dx ; *
  6389                                  	;pop	dx ; **
  6390                                  	;
  6391                                  	;jc	short BADSETCON	; MSDOS 6.0	; Can't set attributes - quit
  6392                                  	
  6393 000016A4 89DA                    	mov	dx,bx				; Save new handle
  6394                                  
  6395                                  	; MSDOS 6.0
  6396 000016A6 26803E[C120]01          	cmp	byte [es:DevFlag],1
  6397 000016AC 742A                    	jz	short DevErr
  6398                                  
  6399                                  	; MSDOS 3.3
  6400                                          ;pop	bx ; *				; Throw away saved SI
  6401                                          ;pop	bx ; **				; Throw away saved CX
  6402                                  
  6403                                  	; MSDOS 3.3 & MSDOS 6.0
  6404 000016AE 51                      	push	cx ; **
  6405 000016AF B90300                  	mov	cx,3
  6406 000016B2 31DB                    	xor	bx,bx
  6407                                  
  6408                                  	; 15/01/2023
  6409                                  rcclloop:
  6410 000016B4 B43E                    	mov	ah,3Eh
  6411                                  	;mov	ah,CLOSE ; 3Eh
  6412 000016B6 CD21                    	int	21h
  6413 000016B8 43                      	inc	bx
  6414 000016B9 E2F9                    	loop	rcclloop
  6415                                  
  6416 000016BB 89D3                    	mov	bx,dx				; New device handle
  6417 000016BD B445                    	mov	ah,45h
  6418                                  	;mov	ah,XDUP ; 45h
  6419 000016BF CD21                    	int	21h				; Dup to 0
  6420 000016C1 B445                    	mov	ah,45h
  6421                                  	;mov	ah,XDUP
  6422 000016C3 CD21                    	int	21h				; Dup to 1
  6423 000016C5 B445                    	mov	ah,45h
  6424                                  	;mov	ah,XDUP
  6425 000016C7 CD21                    	int	21h				; Dup to 2
  6426 000016C9 B43E                    	mov	ah,3Eh
  6427                                  	;mov	ah,CLOSE
  6428 000016CB CD21                    	int	21h				; Close initial handle
  6429                                  	
  6430 000016CD 59                      	pop	cx ; **
  6431                                  	
  6432                                  	; MSDOS 6.0
  6433 000016CE 5E                      	pop	si ; ***			; restore position of command line
  6434 000016CF 1F                      	pop	ds ; ****			;
  6435                                  
  6436                                  ; Register the fact that we already have redirected the output
  6437                                  ; and can not do it again
  6438                                  
  6439 000016D0 26FE06[C120]            	inc	byte [es:DevFlag]		
  6440 000016D5 E98DFE                  	jmp	Parse_command_line		; continue parsing
  6441                                  
  6442                                  	; MSDOS 3.3
  6443                                  	;jcxz	ARGSDONEJ2
  6444                                  	;jmp	CHKARG
  6445                                  
  6446                                  	; MSDOS 6.0
  6447                                  DevErr:
  6448 000016D8 5E                      	pop	si ; ***
  6449 000016D9 1F                      	pop	ds ; ****
  6450 000016DA BA0100                  	mov	dx,1
  6451 000016DD E8D302                          call	RPrintParse                     ; "Too many parameters"
  6452 000016E0 E88FFB                          call	crlf
  6453 000016E3 E97FFE                  	jmp	Parse_command_line
  6454                                  
  6455                                  ChkSrchSpec:				; Not a device, so must be directory spec
  6456                                  	; MSDOS 6.0
  6457 000016E6 26803E[C220]01                  cmp	byte [es:PathFlag],1		; already set COMSPEC?
  6458 000016EC 74EA                            jz	short DevErr			; yes, error
  6459                                  	
  6460 000016EE 26FE06[C220]                    inc	byte [es:PathFlag]		; mark that we have a path
  6461                                  
  6462                                  ; We have to override the passed environment. Allocate a buffer for use now.
  6463                                  ; This buffer will later be replaced by a proper environment
  6464                                  
  6465                                  	; 15/01/2023 - Retro DOS v4.0 COMMAND.COM
  6466                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1899h
  6467 000016F3 36A1[2703]              	mov	ax,[ss:EnvirSeg]
  6468                                  	
  6469                                  	; MSDOS 6.0
  6470                                  	;call	alloc_env                       ; environment buffer
  6471                                  
  6472                                  	; 15/01/2023
  6473                                  	; MSDOS 5.0
  6474 000016F7 36803E[521C]01          	cmp	byte [ss:AllocedEnv],1
  6475 000016FD 36C606[521C]00          	mov	byte [ss:AllocedEnv],0
  6476 00001703 7507                    	jne     short env_alloced
  6477 00001705 E87A04                  	call	alloc_env
  6478 00001708 36A3[2703]              	mov	[ss:EnvirSeg],ax
  6479                                  
  6480                                  env_alloced:
  6481                                  	; MSDOS 5.0 & MSDOS 6.0
  6482 0000170C 8EC0                    	mov	es,ax
  6483                                  	;assume	es:nothing
  6484 0000170E 56                      	push	si ; **				; remember location of file
  6485 0000170F 31C9                    	xor	cx,cx				; clear cx for counting
  6486                                  	
  6487                                  	; 15/01/2023
  6488                                  countloop:
  6489 00001711 AC                      	lodsb					; get a character
  6490 00001712 41                      	inc	cx				; increment counter
  6491                                          ;;cmp	al,0
  6492                                  	;cmp	al,END_OF_LINE_OUT              ; are we at end of line?
  6493                                  	;jne	short countloop			; no - keep counting
  6494 00001713 08C0                    	or	al,al	
  6495 00001715 75FA                    	jnz	short countloop
  6496                                  
  6497                                  	;;;;mov	al,[Space]
  6498                                  	;;;mov	al,[ss:Space] ; 15/01/2023 - MSDOS 5.0 COMMAND.COM
  6499                                  	;;mov	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6500                                  	; 16/04/2023
  6501                                  	;mov	al,20h ; ' ' 
  6502 00001717 4E                      	dec	si				; move back one
  6503                                          ;mov	[si],al				; put a space at end of line
  6504 00001718 C60420                  	mov	byte [si],20h ; ' ' ; space_chr
  6505                                  
  6506                                  ; We now know how long the new pathspec for command.com is. Time to
  6507                                  ; figure out how long the current COMSPEC setting is, and then to move
  6508                                  ; all the environment data up, throwing that COMSPEC setting away, and
  6509                                  ; preparing to append the new COMSPEC. ComspOffset (the offset of
  6510                                  ; where the filespec exists in the environment) is updated as well.
  6511                                  
  6512                                  	; MSDOS 6.0 COMMAND.COM
  6513                                  	;push	cx                              ;
  6514                                          ;mov	cx,ENVBIG                       ;
  6515                                          ;mov	di,ComspOffset                  ; get location of COMSPEC
  6516                                          ;mov	al,0                            ;
  6517                                          ;repne	scasb                           ; find the end of COMSPEC
  6518                                          ;mov	si,di                           ;
  6519                                  ;comp_endenv:                                   ;
  6520                                          ;scasb                                  ; end of env?
  6521                                          ;je	got_endenv                      ; yes
  6522                                          ;repne	scasb                           ;
  6523                                          ;jmp	comp_endenv                     ;
  6524                                  ;got_endenv:                                    ;
  6525                                          ;mov    cx,di                           ;
  6526                                          ;sub    cx,si                           ;
  6527                                          ;mov    di,ComspOffset                  ;
  6528                                          ;sub    di,ComspStrLen                  ;
  6529                                          ;push   ds                              ;
  6530                                          ;push   es                              ;
  6531                                          ;pop    ds                              ;
  6532                                          ;rep    movsb                           ;
  6533                                          ;dec    di                              ; copy in new COMSPEC=
  6534                                          ;push   cs                              ;
  6535                                          ;pop    ds                              ;
  6536                                          ;assume ds:ResGroup                     ;
  6537                                          ;mov    si,offset RESGROUP:ComspString  ;
  6538                                          ;mov    cx,ComspStrLen                  ;
  6539                                          ;rep    movsb                           ;
  6540                                          ;mov    ComspOffset,di                  ;
  6541                                          ;pop    ds                              ;
  6542                                          ;assume ds:nothing                      ;
  6543                                          ;pop    cx                              ;
  6544                                  	;
  6545                                          ;pop    si                              ; get new comspec location back
  6546                                  
  6547                                  	; MSDOS 3.3 COMMAND.COM
  6548                                  	;mov	byte [CHUCKENV],0		; If search specified -- no inheritance
  6549                                  	;mov	ax,PATHSTRING	; "PATH="	; Figure environment pointer
  6550                                  	;mov	cl,4
  6551                                  	;shr	ax,cl
  6552                                  	;mov	dx,ds
  6553                                  	;add	ax,dx
  6554                                  	;mov	[ENVIRSEG],ax
  6555                                  	;mov	es,ax
  6556                                  	;;mov	al,' '
  6557                                  	;mov	al,[SPACE_CHR]
  6558                                  	;mov	[si-1],al
  6559                                  	;pop	si ; **				; Remember location
  6560                                  	;pop	cx ; *				; and count
  6561                                  	;;mov	di,[ECOMLOC]
  6562                                  	;mov	di,[COMSPOFFSET]
  6563                                  
  6564                                  	; 15/01/2023
  6565                                  	; MSDOS 5.0 COMMAND.COM
  6566 0000171B 5E                      	pop	si ; **
  6567                                  	;mov	di,14
  6568 0000171C BF0E00                  	mov	di,ECOMSPEC ; mov di,0Eh
  6569                                  
  6570                                  ComtrLoop:
  6571                                  	; MSDOS 3.3 & MSDOS 6.0
  6572 0000171F AC                      	lodsb
  6573 00001720 49                      	dec	cx
  6574                                  	;;;;cmp	al,' '
  6575                                  	;;;cmp	al,[space_chr]
  6576                                  	;;cmp	al,[ss:Space] ;  MSDOS 5.0 COMMAND.COM
  6577                                  	;cmp	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6578                                  	; 16/04/2023
  6579 00001721 3C20                    	cmp	al,20h ; ' ' ; space_chr
  6580 00001723 7405                    	je	short SetComsr
  6581                                  	; MSDOS 3.3
  6582                                  	;cmp	al,9
  6583                                  	;je	short SetComsr
  6584                                  	; MSDOS 3.3 & MSDOS 6.0
  6585 00001725 AA                      	stosb
  6586 00001726 E302                    	jcxz	SetComsr
  6587 00001728 EBF5                    	jmp	short ComtrLoop
  6588                                  
  6589                                  SetComsr:
  6590                                  	; 15/01/2023
  6591                                  	; MSDOS 6.0
  6592 0000172A 51                      	push	cx ; **
  6593 0000172B 0E                      	push	cs				; Get local segment
  6594 0000172C 1F                      	pop	ds				;
  6595                                  	;assume	ds:ResGroup			;
  6596 0000172D 1E                      	push	ds ; *
  6597                                  	;mov	si,offset ResGroup:ComSpect
  6598 0000172E BE[261C]                	mov	si,COMSPECT
  6599 00001731 B90E00                  	mov	cx,14
  6600 00001734 268A45FF                	mov	al,[es:di-1]
  6601 00001738 3A06[3C03]              	cmp	al,[RDirChar]
  6602 0000173C 7502                    	jne	short iNotRoot
  6603 0000173E 46                      	inc	si				; Don't make a double /
  6604 0000173F 49                      	dec	cx
  6605                                  	
  6606                                  	; MSDOS 3.3
  6607                                  	;push	si
  6608                                  	;push	cx
  6609                                  	;push	ds
  6610                                  	;mov	si,COMSPECT ; "/COMMAND.COM"
  6611                                  	;mov	cx,14
  6612                                  	;mov	al,[es:di-1]
  6613                                  	;call	PATHCHRCMPR
  6614                                  	;jnz	short INOTROOT			
  6615                                  	;inc	si				; Don't make a double /
  6616                                  	;dec	cx
  6617                                  
  6618                                  iNotRoot:
  6619                                  	; MSDOS 3.3 & MSDOS 6.0
  6620 00001740 F3A4                    	rep	movsb
  6621                                  
  6622                                  	;;mov	dx,[ECOMLOC]			; Now lets make sure its good!
  6623                                          ;mov	dx,[ComspOffset] ; [COMSPOFFSET]
  6624                                  	; 15/01/2023
  6625                                  	;mov	dx,14
  6626 00001742 BA0E00                  	mov	dx,ECOMSPEC ; mov dx,0Eh
  6627                                  
  6628 00001745 06                      	push	es
  6629 00001746 1F                      	pop	ds
  6630                                  	;;mov	ax,OPEN shl 8
  6631                                  	;mov	ax,OPEN*256 ; 3D00h
  6632 00001747 B8003D                  	mov	ax,3D00h ; 15/01/2023
  6633 0000174A CD21                    	int	21h				; Open COMMAND.COM
  6634 0000174C 1F                      	pop	ds ; *
  6635 0000174D 720E                    	jc	short SetComsrBad		; No COMMAND.COM here
  6636 0000174F 89C3                    	mov	bx,ax				; Handle
  6637 00001751 B43E                    	mov	ah,3Eh ; 15/01/2023
  6638                                  	;mov	ah,CLOSE ; 3Eh
  6639 00001753 CD21                    	int	21h				; Close COMMAND.COM
  6640                                  SetComsrRet:
  6641                                  	; 15/01/2023
  6642 00001755 59                      	pop	cx ; **
  6643 00001756 5E                      	pop	si ; ***
  6644                                  
  6645                                  	; MSDOS 6.0
  6646 00001757 1F                      	pop	ds ; ****			;
  6647                                  	;assume	ds:ResGroup			;
  6648                                  	;
  6649 00001758 0E                      	push	cs				; Make sure local ES is
  6650 00001759 07                      	pop	es				;  restored
  6651 0000175A E908FE                  	jmp	Parse_command_line		; continue parsing command line
  6652                                  
  6653                                  	; MSDOS 3.3
  6654                                  ;ARGSDONEJ2:
  6655                                  	;jcxz	ARGSDONE
  6656                                  	;jmp	CHKARG
  6657                                  
  6658                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6659                                  SetComsrBad:
  6660                                  	; MSDOS 3.3 & MSDOS 6.0
  6661                                  	;mov	dx,offset ResGroup:BadComlkMsg	; dx = ptr to msg
  6662 0000175D BA[AA1D]                	mov	dx,BADCOMLKMES
  6663                                  
  6664                                  ;	Note: we're about to make a near call to TriageError, which
  6665                                  ;	lives in a different segment and group. Some linkers will
  6666                                  ;	generate a warning like "Possible fix-up overflow". We're
  6667                                  ;	ok, though, because we all fit in 64 KB and, at init time,
  6668                                  ;	we're still all together.
  6669                                  
  6670                                  	; 16/01/2023
  6671                                  	TRIAGEERROR equ TRANSTART+TriageError
  6672                                  	;(MSDOS 5.0 COMMAND.COM, 2320h+2D92h)
  6673                                  
  6674                                  	;call	50B2h
  6675 00001760 E8(7A4E)                	call	TRIAGEERROR	; TRIAGEERROR procedure is at offset 354Eh
  6676                                  				; in original MSDOS 3.3 COMMAND.COM
  6677                                  
  6678                                  			; TriageError procedure is at offset 50B2h
  6679                                  			; in original MSDOS 5.0 COMMAND.COM	
  6680 00001763 83F841                  	cmp	ax,65
  6681 00001766 7503                    	jne	short doprt
  6682                                  	;mov	dx,offset ResGroup:BadComaccMsg	; dx = ptr to msg
  6683 00001768 BA[D31D]                	mov	dx,BADCOMACCMSG
  6684                                  doprt:
  6685 0000176B E807FB                  	call	RPrint
  6686                                  	;mov	si,offset ResGroup:ComSpect
  6687 0000176E BE[261C]                	mov     si,COMSPECT ; "\COMMAND.COM"
  6688                                  	;;mov	di,[ECOMLOC]
  6689                                  	;mov	di,[COMSPOFFSET] ; [ComspOffset]
  6690                                  	; 16/01/2023
  6691 00001771 BF0E00                  	mov	di,ECOMSPEC ; mov di,0Eh
  6692 00001774 B90E00                  	mov	cx,14
  6693 00001777 F3A4                    	rep	movsb				; get my default back
  6694                                  
  6695 00001779 EBDA                    	jmp	short SetComsrRet
  6696                                  
  6697                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6698                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1927h (CODERES:0BE7h)
  6699                                  ArgsDone:
  6700                                  	; MSDOS 6.0
  6701 0000177B 8E06[2703]              	mov	es,[EnvirSeg]			; get environment back
  6702                                  	;assume	es:nothing			;
  6703                                  
  6704                                  	; MSDOS 3.3 & MSDOS 6.0
  6705 0000177F 803E[8D01]00                    cmp	byte [PermCom],0
  6706 00001784 742E                            jz	short ComReturns
  6707                                  
  6708 00001786 06                      	push	es				; Save environment pointer
  6709 00001787 B450                    	mov	ah,50h
  6710                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  6711 00001789 8CDB                    	mov	bx,ds
  6712 0000178B 8EC3                    	mov	es,bx
  6713 0000178D CD21                    	int	21h				; current process is me
  6714 0000178F BF0A00                  	mov	di,PDB.EXIT ; mov di,0Ah	; Diddle the addresses in my header
  6715                                  	;;mov	ax,offset RESGROUP:LODCOM
  6716                                  	;mov	ax,LODCOM
  6717                                  	; 16/01/2023
  6718 00001792 B8[7E00]                	mov	ax,LodCom_Trap
  6719 00001795 AB                              stosw
  6720 00001796 8CD8                            mov	ax,ds
  6721 00001798 AB                              stosw
  6722                                  	;;mov	ax,offset RESGROUP:CONTC
  6723                                  	;mov	ax,CONTC
  6724                                  	; 16/01/2023
  6725 00001799 B8[4A00]                	mov	ax,Ctrlc_Trap
  6726 0000179C AB                              stosw
  6727 0000179D 8CD8                            mov	ax,ds
  6728 0000179F AB                              stosw
  6729                                  	;;mov	ax,offset DATARES:CritErr_Trap  ; MSDOS 6.0
  6730                                  	;mov	ax,CRITERR
  6731                                  	; 16/01/2023
  6732 000017A0 B8[5500]                	mov	ax,CritErr_Trap
  6733 000017A3 AB                      	stosw
  6734 000017A4 8CD8                    	mov     ax,ds
  6735 000017A6 AB                      	stosw
  6736                                  	;;mov	word ptr ds:16h,ds
  6737                                  	;mov	word ptr ds:[Pdb_Parent_Pid],ds ; Parent is me forever
  6738 000017A7 8C1E1600                	mov	[PDB.PARENT_PID],ds
  6739                                          ;;mov	dx,offset RESGROUP:Int_2e
  6740                                  	;mov	dx,Int_2e
  6741                                          ; 16/01/2023
  6742 000017AB BA[3F00]                	mov	dx,Int2e_Trap
  6743 000017AE B82E25                  	mov	ax,252Eh
  6744                                  	;;mov	ax,(SET_INTERRUPT_VECTOR SHL 8) OR 2Eh
  6745                                  	;mov	ax,(SET_INTERRUPT_VECTOR*256) | 2Eh ; 252Eh
  6746 000017B1 CD21                    	int     21h	; DOS - SET INTERRUPT VECTOR
  6747                                  			; AL = interrupt number
  6748                                  			; DS:DX = new vector to be used for specified interrupt
  6749 000017B3 07                              pop	es				; Remember environment
  6750                                  	
  6751                                  ComReturns:
  6752                                          ;mov	ax,word ptr ds:Pdb_Parent_Pid
  6753 000017B4 A11600                  	mov	ax,[PDB.PARENT_PID] ; mov ax,ds:16h
  6754                                  	; 16/01/2023
  6755 000017B7 A3[2901]                	mov	[Parent],ax			; Save parent
  6756                                          ;mov	word ptr ds:Pdb_Parent_Pid,ds 	; Parent is me
  6757 000017BA 8C1E1600                        mov	[PDB.PARENT_PID],ds ; mov word ptr ds:16h,ds
  6758                                          ;mov	ax,word ptr ds:PDB_Jfn_Table
  6759 000017BE A11800                          mov	ax,[PDB.JFN_TABLE] ; mov ax,ds:18h
  6760 000017C1 A3[8A01]                        mov	[Io_Save],ax		; Get the default stdin and out
  6761 000017C4 8C1E[2B03]                      mov	[Com_Ptr+2],ds		; Set all these to resident
  6762 000017C8 8C1E[2F03]                      mov	[Com_Fcb1+2],ds
  6763 000017CC 8C1E[3303]              	mov	[Com_Fcb2+2],ds
  6764                                          ;mov	di,offset ResGroup:ComSpec
  6765 000017D0 BF[3601]                        mov	di,ComSpec
  6766                                  
  6767                                  	;;mov	si,[ECOMLOC]
  6768                                  	; 16/01/2023
  6769                                  	;mov	si,[ComspOffset]
  6770 000017D3 BE0E00                  	mov	si,ECOMSPEC ; mov si,0Eh
  6771 000017D6 803E[521C]00            	cmp	byte [AllocedEnv],0 ; MSDOS 6.0
  6772                                          ;cmp	byte [CHUCKENV],0 ; MSDOS 3.3
  6773                                  	
  6774 000017DB 8CD8                    	mov	ax,ds				; Xchg es,ds
  6775 000017DD 06                      	push	es
  6776 000017DE 1F                      	pop	ds
  6777 000017DF 8EC0                    	mov	es,ax
  6778                                  
  6779                                  	;jne	short CopyComsp ; MSDOS 6.0
  6780                                  	; 16/01/2023	
  6781 000017E1 7417                    	je	short CopyComsp ; MSDOS 5.0
  6782                                  	;je	short COPYCOMSP	; MSDOS 3.3	; All set up for copy
  6783                                  
  6784 000017E3 0E                              push	cs
  6785 000017E4 1F                              pop	ds
  6786                                  
  6787                                          ;mov	si,offset ResGroup:ComspString
  6788 000017E5 BE[591C]                	mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  6789 000017E8 06                      	push	es
  6790 000017E9 57                      	push	di
  6791 000017EA E8D701                  	call	IfindE
  6792 000017ED 89FE                    	mov	si,di
  6793 000017EF 06                      	push	es
  6794 000017F0 1F                      	pop	ds
  6795 000017F1 5F                      	pop	di
  6796 000017F2 07                      	pop	es
  6797 000017F3 7305                            jnc	short CopyComsp
  6798                                  
  6799                                  	; MSDOS 6.0
  6800                                  ComSpecNofnd:
  6801                                  	;mov	si,offset ResGroup:ComspString
  6802                                  	;add	si,ComspStrLen
  6803                                  	;push	cs
  6804                                  	;pop	ds
  6805                                  
  6806                                  	; 21/01/2023
  6807                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:19A1h
  6808                                  	;mov	si,0Eh
  6809 000017F5 BE0E00                  	mov	si,ECOMSPEC
  6810 000017F8 0E                      	push	cs
  6811 000017F9 1F                      	pop	ds	
  6812                                  
  6813                                  	; 21/01/2023
  6814                                  ;COMSPECNOFND:
  6815                                  	; MSDOS 3.3
  6816                                          ;;mov	si,[es:ECOMLOC]
  6817                                          ;mov	si,[es:COMSPOFFSET]
  6818                                  	;;add	si,offset RESGROUP:PATHSTRING
  6819                                          ;add	si,PATHSTRING ; "PATH="
  6820                                  	;push	cs
  6821                                  	;pop	ds
  6822                                  
  6823                                  CopyComsp:
  6824                                  	; 21/01/2023
  6825                                  ;COPYCOMSP:
  6826                                  	; MSDOS 3.3 & MSDOS 6.0
  6827                                  	;;mov	es:PutBackComSpec.SubstPtr,di
  6828                                  	;mov	[es:PUTBACKSUBSTPTR],di		; Save ptr to beginning of comspec path
  6829 000017FA 26893E[1501]            	mov	[es:PutBackComSpec],di
  6830 000017FF 807C013A                	cmp	byte [si+1],':'			; Is there a drive specifier in comspec
  6831 00001803 7506                    	jne	short CopyComspLoop		; If not, do not skip over first 2 bytes
  6832                                  	;;add	es:PutBackComSpec.SubstPtr,2
  6833                                  	;add	word [es:PUTBACKSUBSTPTR],2
  6834 00001805 268306[1501]02          	add	word [es:PutBackComSpec],2
  6835                                  CopyComspLoop:
  6836 0000180B AC                      	lodsb
  6837 0000180C AA                      	stosb
  6838 0000180D 08C0                    	or	al,al
  6839 0000180F 75FA                    	jnz	short CopyComspLoop
  6840                                  
  6841 00001811 26893E[7601]            	mov	[es:ComSpec_End],di		; Save ptr to end of comspec path
  6842 00001816 26FF0E[7601]            	dec	word [es:ComSpec_End]
  6843 0000181B 268A26[7F01]            	mov	ah,[es:ComDrv]
  6844 00001820 80C440                  	add	ah,'A'-1 ; 40h
  6845 00001823 268826[1A01]            	mov	[es:PutBackDrv],ah		; save drive letter
  6846                                  
  6847                                  	; -------------------------------
  6848                                  
  6849                                  ; 21/01/2023 - Retro DOS v4.0 COMMAND.COM
  6850                                  %if 0
  6851                                  
  6852                                  	; MSDOS 3.3
  6853                                  	push	cs
  6854                                          pop	ds
  6855                                          ;mov	bx,offset RESGROUP:DATARESEND + 15
  6856                                  	mov	bx,DATARESEND+15
  6857                                          mov	cl,4
  6858                                          shr	bx,cl
  6859                                          MOV     AH,SETBLOCK ; 4Ah
  6860                                          int	21h			; Shrink me to the resident only
  6861                                  
  6862                                  ENVMAXIMUM:   ; offset 11EEh for MSDOS 3.3 COMMAND.COM     
  6863                                  
  6864                                  	mov	byte [TRNMVFLG], 1
  6865                                  	push	es ; *
  6866                                  	mov	si,TRANSTART
  6867                                  	mov	di,0
  6868                                  	mov	es,[TrnSeg]
  6869                                  	;mov	cx,4D5Ch
  6870                                  	mov	cx,TRANSPACEEND ; 4D5Ch for MSDOS 3.3 COMMAND.COM
  6871                                  	push	cx
  6872                                  	mov	ax,cx
  6873                                  	add	ax,si
  6874                                  	mov	cl,4
  6875                                  	shr	ax,cl
  6876                                  	inc	ax
  6877                                  	mov	cx,ds
  6878                                  	add	ax,cx
  6879                                  	cmp	ax,[TrnSeg]
  6880                                  	pop	cx
  6881                                  	jb	short MOV_DOWN
  6882                                  
  6883                                  	call	LOADCOM
  6884                                  	jmp	short ICHKSUM
  6885                                  
  6886                                  MOV_DOWN:
  6887                                  	add     si,cx
  6888                                  	dec     si
  6889                                  	add     di,cx
  6890                                  	dec     di
  6891                                  	std
  6892                                  	rep	movsb
  6893                                  	cld
  6894                                  
  6895                                  ICHKSUM:
  6896                                  	; 24/09/2018
  6897                                  ;
  6898                                  ; Compute checksum right now before we can get corrupted and save it
  6899                                  ;
  6900                                  	; MSDOS 6.0
  6901                                  	;mov	si,offset RESGROUP:TranStart
  6902                                  	;add	si,100h
  6903                                  	;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  6904                                  	;
  6905                                  	;cld
  6906                                  	;shr	cx,1
  6907                                  	;xor	dx,dx
  6908                                  ;Ichksum:
  6909                                  	;lodsw
  6910                                  	;add	dx,ax
  6911                                  	;adc	dx,0
  6912                                  	;loop	Ichksum
  6913                                  	;
  6914                                          ;mov	Sum,dx			; store checksum
  6915                                  
  6916                                  	; MSDOS 3.3
  6917                                  	pop     es ; *
  6918                                  	call    CHKSUM
  6919                                  	mov     [SUM],dx
  6920                                  
  6921                                  	; MSDOS 3.3 & MSDOS 6.0
  6922                                          cmp     byte [PRDATTM],0	;
  6923                                          jnz     short NOBATCHSEG	; don't do autoexec or date time
  6924                                  ;
  6925                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  6926                                  ;
  6927                                  	; BATCHSEGMENT.SIZE = 32 for MSDOS 3.3 (= 33 for MSDOS 6.0)
  6928                                  	;mov	bx,3
  6929                                  	mov	bx,(BATCHSEGMENT.SIZE+15+1+0Fh)/16 ; (32+15+1+0Fh)/16 = 3
  6930                                          mov     ah,ALLOC ; 48h		;
  6931                                  	int     21h	; DOS - 2+ - ALLOCATE MEMORY
  6932                                  			; BX = number of 16-byte paragraphs desired
  6933                                  	jc      short NOBATCHSEG	; didn't allocate - pretend no batch
  6934                                          mov     [BATCH],ax		; save batch segment
  6935                                  
  6936                                  NOBATCHSEG:
  6937                                  
  6938                                  %endif
  6939                                  	; -------------------------------
  6940                                  
  6941                                  	; 21/01/2023 - Retrro DOS v4.0 (& v4.1) COMMAND.COM
  6942                                  	
  6943                                  	; MSDOS 6.0
  6944 00001828 E81002                  	call	setup_for_messages		; set up parse and extended error messages
  6945                                  
  6946                                  ; The routine below sets up the exact resident size of COMMAND. If this is not
  6947                                  ; the first COMMAND, then the resident code is not duplicated and the resident
  6948                                  ; size is just the data. If we are the first COMMAND, it checks if we are to
  6949                                  ; be loaded into HIMEM. If not, then the resident size includes the code and
  6950                                  ; the data otherwise it is just the data.
  6951                                   
  6952 0000182B E8A702                  	call	Setup_res_end			; put resident size in ResSize
  6953                                  
  6954 0000182E 0E                      	push	cs
  6955 0000182F 1F                      	pop	ds
  6956                                  	;assume	ds:RESGROUP
  6957                                  
  6958                                  ;Public EnvMaximum
  6959                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6960                                  EnvMaximum:	; MSDOS 5.0 COMMAND.COM - RESGROUP:19DCh
  6961                                  
  6962                                  	; 21/01/2023
  6963                                  	; MSDOS 6.0
  6964                                  	;;mov	si,offset RESGROUP:TranStart
  6965                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM
  6966                                  	;mov	si,TRANSTART
  6967                                  	;add	si,100h
  6968                                  	; 23/04/2023
  6969 00001830 BE0023                  	mov	si,TRANSTART+100h
  6970                                  
  6971                                  	;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  6972                                  	;mov	cx,87C2h	; MSDOS 5.0 COMMAND.COM
  6973 00001833 B9[F084]                	mov	cx,TRANDATAEND-100h
  6974                                  
  6975 00001836 FC                      	cld
  6976 00001837 D1E9                    	shr	cx,1
  6977 00001839 31D2                    	xor	dx,dx
  6978                                  Ichksum:
  6979 0000183B AD                      	lodsw
  6980 0000183C 01C2                    	add	dx,ax
  6981 0000183E 83D200                  	adc	dx,0
  6982 00001841 E2F8                    	loop	Ichksum
  6983                                  
  6984 00001843 8916[8201]                      mov	[Sum],dx			; store checksum
  6985                                  
  6986 00001847 803E[451C]00                    cmp     byte [PRDATTM],0
  6987 0000184C 750C                            jne	short NoBatchSeg		; don't do autoexec or date time
  6988                                  	
  6989                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  6990                                  
  6991                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0fh)/16
  6992                                  	; 21/01/2023
  6993                                  	;mov	bx,4
  6994 0000184E BB0400                          mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  6995 00001851 B448                    	mov	ah,48h
  6996                                  	;mov	ah,ALLOC                        ;
  6997 00001853 CD21                            int	21h                             ;
  6998 00001855 7203                    	jc	short NoBatchSeg		; didn't allocate - pretend no batch
  6999 00001857 A3[3401]                        mov	[Batch],ax			; save batch segment
  7000                                  
  7001                                  NoBatchSeg:
  7002                                  
  7003                                  ; 21/01/2023
  7004                                  %if 0
  7005                                  	; MSDOS 3.3
  7006                                  	mov     bx,0FFFFh ; 65535
  7007                                  	mov     ah,ALLOC ; 48h
  7008                                  	int     21h	; DOS - 2+ - ALLOCATE MEMORY
  7009                                  			; BX = number of 16-byte paragraphs desired
  7010                                  	sub     bx,[TRNSIZE]
  7011                                  	sub     bx,128
  7012                                  	mov     [ENVMAX],bx
  7013                                  
  7014                                  	cmp     bx,4096
  7015                                  	jb      short ALLOCENVIRSEG
  7016                                  	mov     bx,4096-1		; max. allowed environment size
  7017                                  	mov     [ENVMAX],bx
  7018                                  
  7019                                  ALLOCENVIRSEG:
  7020                                  	mov     ah,ALLOC ; 48h
  7021                                  	int     21h	; DOS - 2+ - ALLOCATE MEMORY
  7022                                  			; BX = number of 16-byte paragraphs desired
  7023                                  	mov     bx,[ENVIRSEG]		; get old environment segment
  7024                                  	mov     [OLDENV],bx		; save it	
  7025                                  	mov     word [USEDENV],0	; initialize environment size counter
  7026                                  	mov     ds,bx
  7027                                  	mov     [ss:ENVIRSEG], ax	; save new environment segment
  7028                                  	mov     es,ax
  7029                                  	xor     si,si
  7030                                  	mov     di,si
  7031                                  	mov     bx,[ss:ENVMAX]
  7032                                  	shl     bx,1
  7033                                  	shl     bx,1
  7034                                  	shl     bx,1
  7035                                  	shl     bx,1
  7036                                  	mov     [ss:ENVMAX],bx		; convert envmax to bytes
  7037                                  	dec     bx			; dec by one to leave room for double 0
  7038                                  	xor     dx,dx			; use dx to indicate that there was
  7039                                  					; no environment size error.
  7040                                  
  7041                                  NXSTR:
  7042                                  	call    GETSTRLEN		; get the size of the current env string
  7043                                  
  7044                                  	push    ds
  7045                                  	push    cs
  7046                                  	pop     ds
  7047                                  	add     [USEDENV],cx		; add the string length to env size
  7048                                  	pop     ds
  7049                                  	cmp     cx,1			; end of environment was encountered.
  7050                                  	je      short ENVEXIT
  7051                                  	sub     bx,cx
  7052                                  	jnb     short OKCPYSTR		; can't fit in all of enviroment.
  7053                                  	inc     dx			; out of env space msg must be displayed
  7054                                  	jmp     short ENVEXIT
  7055                                  
  7056                                  	;nop
  7057                                  
  7058                                  OKCPYSTR:
  7059                                  	jmp     short NXSTR
  7060                                  
  7061                                  ENVEXIT: 
  7062                                  	push    cs
  7063                                  	pop     ds
  7064                                  	or      dx, dx			; dx will be non-zero if error
  7065                                  	jz      short ENVNOERR
  7066                                  	mov     dx,OUTENVMSG		; dx = ptr to msg
  7067                                  	call    RPRINT
  7068                                  
  7069                                  %endif
  7070                                  
  7071                                  	; 21/01/2023
  7072                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7073 0000185A 8B1E[2703]              	mov	bx,[EnvirSeg]			; get old environment segment
  7074 0000185E 891E[721C]              	mov	[OldEnv],bx			; save it
  7075 00001862 C706[741C]0000          	mov	word [UsedEnv],0		; initialize env size counter
  7076 00001868 8EDB                    	mov	ds,bx
  7077                                  	;assume	ds:nothing
  7078                                  	
  7079 0000186A 31F6                    	xor	si,si
  7080 0000186C 89F7                    	mov	di,si
  7081                                  
  7082                                  ; This is the maximum allowed size for the environment
  7083                                  
  7084                                  	; 21/01/2023
  7085                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1A1Eh
  7086                                  	;mov	bx,4096 - 1 ; 0FFFh		; max. allowed env. size
  7087                                  	;;mov	[ss:EnvMax],bx
  7088                                  	;shl	bx,1
  7089                                  	;shl	bx,1
  7090                                  	;shl	bx,1
  7091                                  	;shl	bx,1
  7092 0000186E BBF0FF                  	mov	bx,(4096-1)<<4 ; mov bx,0FFF0h
  7093 00001871 36891E[701C]            	mov	[ss:EnvMax], bx			; convert envmax to bytes
  7094 00001876 4B                      	dec	bx				; dec by one to leave room for double 0
  7095 00001877 31D2                    	xor	dx,dx				; use dx to indicate that there was
  7096                                  						; no environment size error.
  7097                                  ;public NxtStr
  7098                                  NxtStr:
  7099 00001879 E81E01                  	call	GetStrLen			; get the size of the current env string
  7100                                  
  7101                                  ;Bugbug: Can use ss here to address UsedEnv
  7102                                  
  7103 0000187C 1E                      	push	ds                              ; get addressability to environment
  7104 0000187D 0E                              push	cs                              ;                       counter
  7105 0000187E 1F                              pop	ds                              ;
  7106                                  	;assume	ds:ResGroup
  7107 0000187F 010E[741C]                      add	[UsedEnv],cx			; add the string length to env size
  7108 00001883 1F                      	pop	ds                              ;
  7109                                  	;assume	ds:nothing
  7110                                  	
  7111 00001884 83F901                  	cmp	cx,1				; end of environment was encountered.
  7112 00001887 7405                    	je	short EnvExit
  7113 00001889 29CB                    	sub	bx,cx
  7114                                  	;jae	short OkCpyStr			; can't fit in all of enviroment.
  7115                                  	; 21/01/2023
  7116 0000188B 73EC                    	jae	short NxtStr
  7117 0000188D 42                      	inc	dx				; out of env space msg must be displayed
  7118                                  	;jmp	short EnvExit
  7119                                  
  7120                                  ;OkCpyStr:
  7121                                  	;jmp	short NxtStr
  7122                                  
  7123                                  EnvExit:
  7124 0000188E 0E                      	push	cs
  7125 0000188F 1F                      	pop	ds
  7126                                  	;assume	ds:ResGroup
  7127 00001890 09D2                    	or	dx,dx				; dx will be non-zero if error
  7128 00001892 7406                    	jz	short EnvNoErr
  7129                                  	;mov	dx,offset ResGroup:OutEnvMsg	; dx = ptr to msg
  7130 00001894 BA[301D]                	mov	dx,OUTENVMSG
  7131 00001897 E8DBF9                  	call 	RPrint
  7132                                  EnvNoErr:
  7133 0000189A A1[6E1C]                	mov	ax,[EnvSiz]			; env size previously set
  7134 0000189D B104                    	mov	cl,4
  7135 0000189F D3E0                    	shl	ax,cl				; get size in bytes
  7136 000018A1 3B06[741C]              	cmp	ax,[UsedEnv]			; is it a new env?
  7137 000018A5 7706                    	ja	short st_envsize		; yes, store the size
  7138 000018A7 A1[741C]                	mov	ax,[UsedEnv]
  7139 000018AA 83C00F                  	add	ax,15				; round up
  7140                                  st_envsize:	
  7141 000018AD D3E8                    	shr	ax,cl
  7142 000018AF A3[6E1C]                	mov	[EnvSiz],ax			; store env size needed(paras)
  7143                                  
  7144                                  ;if MSVER
  7145                                  	;cmp	SingleCom,0
  7146                                  	;jnz	nophead 			; don't print header if SingleCom
  7147                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7148                                  	;call	RPrint
  7149                                  ;nophead:
  7150                                  ;endif
  7151                                  
  7152                                  ; 21/01/2023
  7153                                  %if 0
  7154                                  	; MSDOS 3.3
  7155                                  ENVNOERR:
  7156                                  	mov     cx,[ENVMAX]
  7157                                  	sub     cx,bx			; current environment size in bytes
  7158                                  	add     cx,16			; add memory arena to the size
  7159                                  	shr     cx,1
  7160                                  	shr     cx,1
  7161                                  	shr     cx,1
  7162                                  	shr     cx,1			; convert current env size to paragraphs
  7163                                  	cmp     cx,[ENVSIZ]		; compare with env size previously set
  7164                                  	;jb	short SET_ENVSIZE
  7165                                  	jna	short SET_ENVSIZE  ; 24/09/2018 - Retro DOS v3.0
  7166                                  	mov     [ENVSIZ],cx		; store env size needed (paragraphs)
  7167                                  
  7168                                  SET_ENVSIZE:
  7169                                  	mov     bx,[ENVSIZ]
  7170                                  	mov     ax,es
  7171                                  	add     ax,bx			; get end segment of environemnt
  7172                                  	cmp     ax,[INITEND]		; compare with init code end segment
  7173                                  	ja      short NOPHEAD
  7174                                  					; free unused paragraghs		
  7175                                  	mov     ax,es
  7176                                  	mov     bx,[INITEND]
  7177                                  	sub     bx,ax
  7178                                  	;mov	byte [RESETENV],1  ; 24/09/2018
  7179                                  	mov	word [RESETENV],1	; environment segment reset sign
  7180                                  
  7181                                  NOPHEAD:
  7182                                  	; MSDOS 3.3
  7183                                  	mov     ah,SETBLOCK ; 4Ah
  7184                                  	int     21h	; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  7185                                  			; ES = segment address of block to change
  7186                                  			; BX = new size in paragraphs
  7187                                  %endif
  7188                                  	; 21/01/2023
  7189                                  
  7190                                  	; MSDOS 3.3 & 6.0
  7191 000018B2 833E[3401]00            	cmp     word [Batch],0		; did we set up a batch segment?
  7192 000018B7 7503                    	jnz     short DoDate		; yes - go initialize it
  7193 000018B9 E99300                  	jmp     NoDttm			; don't do autoexec or date time
  7194                                  
  7195                                  DoDate:
  7196                                  
  7197                                  ; allocate batch segment for d:/autoexec.bat + no arguments
  7198                                  
  7199 000018BC A1[3401]                	mov	ax,[Batch]		; get batch segment
  7200 000018BF C606[8801]03            	mov	byte [EchoFlag],3	; set batch echo
  7201 000018C4 C706[9701]0100          	mov	word [Nest],1		; set nest flag to 1 batch
  7202 000018CA 8EC0                    	mov	es,ax
  7203                                  
  7204                                  ; initialize the segment
  7205                                  
  7206 000018CC 31FF                    	xor	di,di
  7207                                  	;;mov	al,0
  7208                                  	;mov	al,BATCHTYPE ; 0
  7209                                  	; 06/06/2023
  7210 000018CE 31C0                    	xor	ax,ax
  7211 000018D0 AA                      	stosb
  7212                                  	;mov	al,1			; initialize echo for batch exit
  7213                                  	;inc	al
  7214                                  	; 22/07/2024
  7215 000018D1 40                      	inc	ax
  7216 000018D2 AA                      	stosb
  7217                                  
  7218                                  ; Hosebag! This guy does not use the struct fields to init the BatchSegment
  7219                                  
  7220                                  	;xor	ax,ax			; initialize to zero
  7221                                  	; 06/06/2023
  7222                                  	;dec	al ; ax = 0
  7223                                  	; 22/07/2024
  7224 000018D3 48                      	dec	ax
  7225                                  
  7226                                  	; 21/01/2023
  7227 000018D4 AA                      	stosb	; MSDOS 6.0 		; clear out BatchEOF
  7228                                  
  7229 000018D5 AB                      	stosw				; batch segment of last job - batlast
  7230 000018D6 AB                      	stosw				; segment for FOR
  7231 000018D7 AA                      	stosb				; FOR flag
  7232 000018D8 AB                      	stosw				; position in file - batseek
  7233 000018D9 AB                      	stosw
  7234                                  
  7235                                  ; clean out the parameters
  7236                                  
  7237                                  	;mov	ax,-1			; initialize to no parameters
  7238                                  	; 06/06/2023
  7239 000018DA 48                      	dec	ax ; ax = -1
  7240                                  
  7241 000018DB B90A00                  	mov	cx,10
  7242 000018DE F3AB                    	rep	stosw
  7243                                  
  7244                                  ; decide whether we should grab the default drive
  7245                                  
  7246 000018E0 803E[341C]00            	cmp	byte [AUTOBAT],0 ; ":\AUTOEXEC.BAT"
  7247 000018E5 7509                    	jne	short NoAutSet
  7248 000018E7 B419                    	mov	ah,19h	; 21/01/2023
  7249                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  7250 000018E9 CD21                    	int	21h
  7251                                  	;;add	al,'A'
  7252                                  	;add	al,[letter_A] ; Ucasea
  7253                                  	;add	al,[ucasea] ; 21/01/2023
  7254                                  	; 21/01/2023
  7255 000018EB 0441                    	add	al,'A'
  7256 000018ED A2[341C]                	mov	[AUTOBAT],al
  7257                                  	; 21/01/2023
  7258                                  	;mov	[KAUTOBAT],al
  7259                                  NoAutSet:
  7260                                  
  7261                                  ; copy in the batch file name (including nul)
  7262                                  
  7263                                  	;mov	si,offset ResGroup:AutoBat
  7264 000018F0 BE[341C]                	mov	si,AUTOBAT
  7265 000018F3 B90800                  	mov	cx,8
  7266 000018F6 F3A5                    	rep	movsw
  7267                                  	; 23/04/2023
  7268 000018F8 A4                      	movsb	; MSDOS 6.0		; move in carriage return to terminate string
  7269                                  
  7270                                  	;mov	dx,offset ResGroup:AutoBat
  7271 000018F9 BA[341C]                	mov     dx,AUTOBAT ; ":\AUTOEXEC.BAT"
  7272                                  
  7273                                  	;;mov	ax,OPEN shl 8
  7274 000018FC B8003D                  	mov	ax,3D00h ; 21/01/2023
  7275                                  	;mov	ax,OPEN*256 ; 3D00h  ; open for read
  7276 000018FF CD21                    	int	21h			; see if autoexec.bat exists
  7277 00001901 7208                    	jc	short noabat
  7278 00001903 89C3                    	mov	bx,ax
  7279 00001905 B43E                    	mov	ah,3Eh ; 21/01/2023
  7280                                  	;mov	ah,CLOSE  ; 3Eh
  7281 00001907 CD21                    	int	21h
  7282 00001909 EB51                    	jmp	short Drv0		; go process autoexec
  7283                                  
  7284                                  noabat:
  7285 0000190B 50                      	push	ax
  7286 0000190C E89400                  	call	Setup_Seg
  7287 0000190F A3[501C]                	mov	[triage_add+2],ax
  7288 00001912 58                      	pop	ax
  7289 00001913 FF1E[4E1C]              	call	far [triage_add]	; get extended error
  7290 00001917 83F841                  	cmp	ax,65			; network access denied?
  7291                                  	;jne	short OPENERR		; no - go deallocate batch
  7292                                  	; 21/01/2023
  7293                                  	;je	short AccDenErr
  7294 0000191A 7506                    	jne	short OpenErr
  7295                                  
  7296                                  	; 21/01/2023
  7297                                  ;_ACCDENERROR:					; yes - put out message
  7298                                  ;	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7299                                  ;	mov	dx,ACCDENERR
  7300                                  ;	call	RPRINT
  7301                                  
  7302                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7303                                  
  7304                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7305                                  
  7306                                  ; 21/01/2023
  7307                                  %if 0
  7308                                  
  7309                                  ; If AUTOEXEC.BAT is not found, then check for KAUTOEXE.BAT. Changed
  7310                                  ; by Ellen to check only when in Korea. The country information
  7311                                  ; returned will overlay the old parse data area, but we don't care
  7312                                  ; since we won't need the parse information or country information.
  7313                                  ; We only care about the country code returned in BX.
  7314                                  
  7315                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1AE7h
  7316                                  
  7317                                  	;mov	dx,offset ResGroup:Internat_Info ; set up internat vars
  7318                                  	mov	dx,INTERNAT_INFO
  7319                                  	mov	ax,3800h
  7320                                  	;mov	ax,INTERNATIONAL<<8
  7321                                  	;;mov	ax,INTERNATIONAL shl 8		; get country dependent info
  7322                                  	int	21h				;
  7323                                  	jc	short NoKabat 			; error - don't bother with it
  7324                                  	cmp	bx,52h
  7325                                  	;cmp	bx,KOREA_COUNTRY_CODE		; are we speaking korean?
  7326                                  	jne	short OpenErr 			; no, don't check for kautoexe
  7327                                  
  7328                                  	;mov	di,BatFile			; 3/3/kk
  7329                                  	mov	di,20h
  7330                                  	;mov	si,offset ResGroup:KautoBat	; another trial to do	3/3/kk
  7331                                  	mov	si,KAUTOBAT
  7332                                  	mov	cx,8				; auto execution for the 3/3/kk
  7333                                  	rep	movsw				; non-english country	3/3/kk
  7334                                  	movsb					; move in carraige return to terminate string
  7335                                  	;mov	dx,offset ResGroup:KautoBat	; 3/3/kk
  7336                                  	mov	dx,KAUTOBAT
  7337                                  	mov	ax,3D00h
  7338                                  	;mov	ax,OPEN<<8
  7339                                  	;;mov	ax,OPEN shl 8			; 3/3/kk
  7340                                  	int	21h				; see if kautoexe.bat exists  3/3/kk
  7341                                  	jc	short NoKabat 			; 3/3/kk
  7342                                  	mov	bx,ax				; 3/3/kk
  7343                                  	mov	ah,3Eh
  7344                                  	;mov	ah,CLOSE			; 3/3/kk
  7345                                  	int	21h				; 3/3/kk
  7346                                  	jmp	short Drv0			; 3/3/kk
  7347                                  
  7348                                  NoKabat:					; 3/3/kk
  7349                                  	call	far [triage_add]		; get extended error
  7350                                  	cmp	ax,65				; network access denied?
  7351                                  	jnz	short OpenErr 			; no - go deallocate batch
  7352                                  
  7353                                  %endif
  7354                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7355                                  
  7356                                  AccDenErr:					; yes - put out message
  7357                                  	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7358 0000191C BA[BB05]                	mov	dx,ACCDEN
  7359 0000191F E853F9                  	call	RPrint
  7360                                  OpenErr:
  7361                                  ;OPENERR:
  7362 00001922 8E06[3401]              	mov	es,[Batch]		; not found--turn off batch job
  7363 00001926 B449                    	mov	ah,49h
  7364                                  	;mov	ah,DEALLOC ; 49h
  7365 00001928 CD21                    	int	21h
  7366 0000192A C706[3401]0000          	mov	word [Batch],0		; after dealloc in case of ^c
  7367 00001930 C606[8801]01            	mov	byte [EchoFlag],1
  7368 00001935 C706[9701]0000          	mov	word [Nest],0		; indicate no batch in progress
  7369                                  
  7370                                  ;DoDttm:
  7371                                  	;mov	ax,offset TranGroup:Datinit
  7372 0000193B B8[612E]                	mov	ax,DATINIT
  7373 0000193E A3[461C]                	mov	[INITADD],ax
  7374                                  
  7375                                  	; MSDOS 6.0
  7376                                  ;;M004;;mov	ax,TrnSeg	
  7377                                  ;
  7378                                  ; M004; We cant use TrnSeg now because it is not initialized. We now that
  7379                                  ; M004; the transient starts on a para boundary at the label TranStart.
  7380                                  ; M004; We use TranStart to get the start of the transient segment.
  7381                                  
  7382                                  	; 21/01/2023
  7383                                  	;mov	ax,offset RESGROUP:TranStart	; M004
  7384                                  	;;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7385                                  	; 06/06/2023
  7386                                  	;mov	ax,TRANSTART
  7387                                  	;mov	cl,4				; M004
  7388                                  	;shr	ax,cl				; get relative seg ; M004
  7389                                  	; 06/06/2023
  7390 00001941 B82002                  	mov	ax,TRANSTART>>4	
  7391                                  
  7392 00001944 8CC9                    	mov	cx,cs
  7393 00001946 01C8                    	add	ax,cx				; ax = transient seg ; M004
  7394                                  
  7395                                  	; 21/01/2023
  7396                                  	; MSDOS 3.3
  7397                                  	; 25/09/2018
  7398                                  	;mov     ax,[TrnSeg]	; COMMAND.COM (MSDOS 3.3) - Offset 1387h
  7399                                  
  7400                                  	; MSDOS 3.3 & MSDOS 6.0
  7401 00001948 A3[481C]                	mov	[INITADD+2],ax
  7402                                  	;call	dword ptr InitAdd
  7403 0000194B FF1E[461C]              	call	far [INITADD]
  7404                                  
  7405                                  NoDttm:
  7406                                  	; MSDOS 6.0
  7407                                  	; 21/01/2023
  7408                                  ;Copyright:
  7409                                  	;public	Copyright
  7410                                  ;	Bugbug:	remove Copyright label.
  7411                                  
  7412                                  ;if IBMVER
  7413 0000194F 833E[8E01]00            	cmp	word [SingleCom],0
  7414 00001954 7506                    	jnz	short Drv0			; don't print header if SingleCom
  7415                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7416 00001956 BA[4B1D]                	mov	dx,COPYRIGHTMSG
  7417 00001959 E819F9                  	call	RPrint
  7418                                  ;endif
  7419                                  	; 21/01/2023
  7420                                  	; MSDOS 3.3
  7421                                  	;cmp	word [SingleCom],0	; don't print header if SingleCom
  7422                                  	;jnz	short DRV0
  7423                                  	;mov	dx,HEADERPTR	; dx = ptr to msg
  7424                                  	;call	RPRINT
  7425                                  ;DRV0:
  7426                                  	; MSDOS 3.3
  7427                                  	;mov	byte [INITFLAG],0
  7428                                  	;jmp	ENDINIT
  7429                                  
  7430                                  	; 21/01/2023
  7431                                  	; MSDOS 6.0
  7432                                  Drv0:						; Reset APPEND state
  7433 0000195C 1E                      	push	ds				; save data segment
  7434 0000195D 0E                      	push	cs				; Get local segment into DS
  7435 0000195E 1F                      	pop	ds				;
  7436 0000195F B807B7                  	mov	ax,0B707h ; 21/01/2023
  7437                                  	;mov	ax,APPENDSETSTATE		; Set the state of Append
  7438 00001962 8B1E[AB01]              	mov	bx,[Append_State] 		;  back to the original state
  7439 00001966 CD2F                    	int	2Fh				;
  7440 00001968 1F                      	pop	ds				; get data segment back
  7441                                  
  7442                                  ;Check FirstCom set previously to see if this is the first instance of
  7443                                  ;command.com. If not, we do not move command.com. Instead, we copy over the
  7444                                  ;jump table from the previous stub to the current stub.
  7445                                  
  7446 00001969 803E[C020]01            	cmp	byte [FirstCom],1		; first command.com?
  7447 0000196E 7424                    	jz	short move_code			; yes, move it
  7448                                  
  7449 00001970 06                      	push	es
  7450 00001971 1E                      	push	ds
  7451                                  
  7452 00001972 1E                      	push	ds
  7453 00001973 07                      	pop	es
  7454                                  	;mov	di,offset DATARES:Int2f_Entry
  7455 00001974 BF[0400]                	mov	di,Int2f_Entry	
  7456                                  
  7457                                  	;mov	ds,[es:ResJmpTable+2]		; get segment address
  7458                                  	;mov	si,[es:ResJmpTable]		; get offset address
  7459                                  	; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7460 00001977 26C536[BC20]            	lds	si,[es:ResJmpTable]
  7461                                  
  7462                                  	;mov	cx,11
  7463                                  	;;mov 	cx,NUM_RELOC_ENTRIES 		; number of dword ptrs
  7464                                  	;shl	cx,1
  7465                                  	;shl	cx,1				; size of table in bytes
  7466                                  	; 21/01/2023
  7467 0000197C B92C00                  	mov	cx,44				; size of table in bytes
  7468                                  
  7469 0000197F FC                      	cld
  7470 00001980 F3A4                    	rep	movsb				; copy the jump table
  7471                                  
  7472                                  ;Check if the resident code is in HMA. We assume that it is in HMA if its 
  7473                                  ;code segment > 0f000h. If in HMA, we set the ComInHMA flag
  7474                                  
  7475 00001982 26817DFE00F0            	cmp	word [es:di-2],0F000h		; is resident code in HMA?
  7476 00001988 7206                    	jb	short res_low			; no, dont set flag
  7477                                  
  7478 0000198A 26C606[3400]01          	mov	byte [es:ComInHMA],1		; indicate code in HMA
  7479                                  res_low:
  7480 00001990 1F                      	pop	ds
  7481 00001991 07                      	pop	es
  7482 00001992 EB03                    	jmp	short finish_init
  7483                                  
  7484                                  ;Now, we can move the resident code to its final location, either to HIMEM
  7485                                  ;or to overlay the messages in the data segment if the user has not used the
  7486                                  ;/msg switch.
  7487                                  
  7488                                  move_code:
  7489 00001994 E88501                  	call	Move_res_code			; move the code
  7490                                  
  7491                                  finish_init:
  7492                                  	;jmp	RESGROUP:EndInit 		; finish initializing
  7493 00001997 E968E8                  	jmp	EndInit
  7494                                  
  7495                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7496                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1BA8h (CODERES:0E68h)
  7497                                  
  7498                                  GetStrLen:
  7499                                  ;	Get length of string pointed to by DS:SI. Length includes NULL.
  7500                                  ;	Length is returned in CX
  7501                                  
  7502                                  	; MSDOS 3.3 & MSDOS 6.0
  7503 0000199A 31C9                    	xor	cx,cx
  7504                                  NxtChar:
  7505 0000199C AC                      	lodsb
  7506 0000199D 41                      	inc	cx
  7507 0000199E 08C0                    	or	al,al
  7508 000019A0 75FA                    	jnz	short NxtChar
  7509 000019A2 C3                      	retn
  7510                                  
  7511                                  	; 29/01/2023
  7512                                  Setup_Seg:
  7513                                  
  7514                                  ; If the transient has been loaded in TranSeg, then we need to use that
  7515                                  ; segment for calls to routines in the transient area. Otherwise, the current
  7516                                  ; code segment is used
  7517                                  ; Segment returned in AX.
  7518                                  
  7519                                  	; MSDOS 3.3 & MSDOS 6.0
  7520 000019A3 A1[7A01]                	mov	ax,[TrnSeg]
  7521 000019A6 803E[7C01]01            	cmp	byte [TrnMvFlg],1	; Has transient portion been moved
  7522 000019AB 7405                    	je	short setup_end
  7523                                  
  7524                                  ;06/06/2023
  7525                                  %if 0
  7526                                  	push	bx
  7527                                  	mov	bx,cs
  7528                                  	;mov	ax,offset ResGroup:TranStart
  7529                                  	;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7530                                  	; 06/06/2023
  7531                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7532                                  	;mov	ax,TRANSTART
  7533                                  	;shr	ax,1
  7534                                  	;shr	ax,1
  7535                                  	;shr	ax,1
  7536                                  	;shr	ax,1
  7537                                  	; 29/01/2023
  7538                                  	mov	ax,TRANSTART>>4
  7539                                  	add	ax,bx
  7540                                  	pop	bx
  7541                                  %endif
  7542                                  	; 06/06/2023
  7543 000019AD 8CC8                    	mov	ax,cs
  7544 000019AF 052002                  	add	ax,TRANSTART>>4
  7545                                  
  7546                                  setup_end:
  7547 000019B2 C3                      	retn
  7548                                  
  7549                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7550                                  ;RPRINT:
  7551                                  	; MSDOS 3.3
  7552                                  	;push    ax
  7553                                  	;call    SETUP_SEG
  7554                                  	;mov     [PRINTADD+2], ax
  7555                                  	;;call	dword ptr PRINTADD
  7556                                  	;call	far [PRINTADD]
  7557                                  	;pop     ax
  7558                                  	;retn
  7559                                  
  7560                                  	; 29/01/2023
  7561                                  	; MSDOS 6.0
  7562                                  ;***	RPrintParse - display parse error message
  7563                                  ;
  7564                                  ;	ENTRY	DX = parse error #
  7565                                  ;
  7566                                  ;	EXIT	nothing
  7567                                  ;
  7568                                  ;	USED	flags
  7569                                  ;
  7570                                  ;	EFFECTS
  7571                                  ;	  Message is displayed on stdout.
  7572                                  
  7573                                  RPrintParse:	;proc
  7574                                  	;assume	ds:ResGroup,ss:ResGroup
  7575                                  
  7576 000019B3 52                      	push	dx				; preserve DX
  7577 000019B4 87DA                    	xchg	bx,dx				; bx = parse error #
  7578                                  						; dx = saved BX
  7579 000019B6 4B                      	dec	bx				; bx = parse error index, from 0
  7580 000019B7 D1E3                    	shl	bx,1				; bx = offset in word table
  7581                                  	;mov	bx,ParsMsgPtrs[bx]		; bx = ptr to error msg
  7582 000019B9 8B9F[FD08]              	mov	bx,[bx+PARSMSGPTRS]
  7583 000019BD 87DA                    	xchg	bx,dx				; dx = ptr to error msg
  7584                                  						; bx = restored
  7585 000019BF E8B3F8                  	call	RPrint				; print the message
  7586 000019C2 5A                      	pop	dx				; restore DX
  7587 000019C3 C3                      	retn
  7588                                  
  7589                                  ;RPrintParse	endp
  7590                                  
  7591                                  	; 29/01/2023
  7592                                  ;PATHCHRCMPR:
  7593                                  	; MSDOS 3.3
  7594                                  	;push	dx
  7595                                  	;mov	dl,[slash_chr]
  7596                                  	;;cmp	byte [RSWITCHAR],'/'
  7597                                          ;cmp	[RSWITCHAR],dl
  7598                                  	;je	short RNOSLASHT
  7599                                  	;;cmp	al,'/'
  7600                                  	;cmp	al,dl
  7601                                  	;je	short RET41 ; zf = 1 
  7602                                  ;RNOSLASHT:
  7603                                          ;;cmp	al,'\'
  7604                                  	;cmp	al,[bslash_chr]
  7605                                  ;RET41:
  7606                                  	;pop	dx
  7607                                  	;retn
  7608                                  
  7609                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7610                                  IfindE:
  7611                                  	; MSDOS 3.3 & MSDOS 6.0
  7612 000019C4 E80300                  	call	ifind				; find the name
  7613                                  	;jc	short ifind2			; carry means not found
  7614                                  	;jmp	short Iscasb1 			; scan for = sign
  7615                                  	; 29/01/2023
  7616 000019C7 733A                    	jnc	short Iscasb1
  7617                                  ifind2:
  7618 000019C9 C3                      	retn
  7619                                  
  7620                                  	; 29/01/2023
  7621                                  
  7622                                  ; on return of find1, es:di points to beginning of name
  7623                                  
  7624                                  ifind:
  7625 000019CA FC                      	cld
  7626 000019CB E82700                  	call	Icount0				; cx = length of name
  7627 000019CE 8E06[2703]              	mov	es,[EnvirSeg]
  7628 000019D2 31FF                    	xor	di,di
  7629                                  ifind1:
  7630 000019D4 51                      	push	cx
  7631 000019D5 56                      	push	si
  7632 000019D6 57                      	push	di
  7633                                  ifind11:
  7634 000019D7 AC                      	lodsb
  7635 000019D8 E83400                  	call	iupconv
  7636 000019DB 47                      	inc	di
  7637 000019DC 263A45FF                	cmp	al,[es:di-1]
  7638 000019E0 7502                    	jnz	short ifind12
  7639 000019E2 E2F3                    	loop	ifind11
  7640                                  ifind12:
  7641 000019E4 5F                      	pop	di
  7642 000019E5 5E                      	pop	si
  7643 000019E6 59                      	pop	cx
  7644 000019E7 74E0                    	jz	short ifind2
  7645 000019E9 51                      	push	cx
  7646 000019EA E81A00                  	call	Iscasb2 			; scan for a nul
  7647 000019ED 59                      	pop	cx
  7648                                  	;cmp	byte [es:di],0
  7649                                  	;jnz	short ifind1
  7650                                  	;stc					; indicate not found
  7651 000019EE 26803D01                	cmp	byte [es:di],1
  7652 000019F2 73E0                    	jnb	short ifind1
  7653                                  	; cf=1					; indicate not found
  7654                                  ;ifind2:
  7655 000019F4 C3                      	retn
  7656                                  
  7657                                  	; 29/01/2023
  7658                                  Icount0:
  7659 000019F5 1E                      	push	ds
  7660 000019F6 07                      	pop	es
  7661 000019F7 89F7                    	mov	di,si
  7662                                  
  7663 000019F9 57                      	push	di				; count number of chars until "="
  7664 000019FA E80600                  	call	Iscasb1
  7665                                  	; 25/09/2018
  7666                                  	;jmp	short Icountx
  7667                                  	;push	di				; count number of chars until nul
  7668                                  	;call	Iscasb2
  7669                                  ;Icountx:
  7670 000019FD 59                      	pop	cx
  7671 000019FE 29CF                    	sub	di,cx
  7672 00001A00 87F9                    	xchg	di,cx
  7673 00001A02 C3                      	retn
  7674                                  
  7675                                  Iscasb1:
  7676                                  	; 29/01/2023
  7677 00001A03 B03D                    	mov	al,"="
  7678                                  	;mov	al,[equalsign] ; [equal_sign]	; scan for an =
  7679 00001A05 EB02                    	jmp	short Iscasbx
  7680                                  Iscasb2:
  7681 00001A07 30C0                    	xor	al,al				; scan for a nul
  7682                                  Iscasbx:
  7683 00001A09 B90001                  	mov	cx,256 ; 100h
  7684 00001A0C F2AE                    	repnz	scasb
  7685 00001A0E C3                      	retn
  7686                                  
  7687                                  	; 29/01/2023
  7688                                  ;IUPCONV:
  7689                                  	; MSDOS 3.3
  7690                                          ;;cmp	al,"a"
  7691                                  	;cmp	al,[letter_a]
  7692                                          ;jb	short IRET22
  7693                                          ;;cmp	al,"z"
  7694                                          ;cmp	al,[letter_z]
  7695                                  	;ja	short IRET22
  7696                                          ;sub	al,20h			; Lower-case changed to upper-case
  7697                                  ;IRET22:
  7698                                  	;retn
  7699                                  
  7700                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7701                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C32h
  7702                                  
  7703                                  	; MSDOS 6.0
  7704                                  ; *****************************************************************
  7705                                  ; *
  7706                                  ; * ROUTINE:	 IUPCONV    (ADDED BY EMG 4.00)
  7707                                  ; *
  7708                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
  7709                                  ; *		 the character in AL from the file upper case table
  7710                                  ; *		 in DOS if character if above ascii 128, else
  7711                                  ; *		 subtracts 20H if between "a" and "z".
  7712                                  ; *
  7713                                  ; * INPUT:	 DS	      set to resident
  7714                                  ; *		 AL	      char to be upper cased
  7715                                  ; *		 FUCASE_ADDR  set to the file upper case table
  7716                                  ; *
  7717                                  ; * OUTPUT:	 AL	      upper cased character
  7718                                  ; *
  7719                                  ; *****************************************************************
  7720                                  
  7721                                  iupconv:	;proc	near				
  7722                                  	;assume	ds:ResGroup			;
  7723                                  
  7724 00001A0F 3C80                    	cmp	al,80h				; see if char is > ascii 128
  7725 00001A11 7210                    	jb	short other_fucase		; no - upper case math
  7726 00001A13 2C80                    	sub	al,80h				; only upper 128 chars in table
  7727 00001A15 1E                      	push	ds				;
  7728 00001A16 53                      	push	bx				;
  7729                                  	;lds	bx,dword ptr FUCase_Addr+1	; get table address
  7730 00001A17 C51E[9F01]              	lds     bx,[FUCase_Addr+1]
  7731 00001A1B 83C302                  	add	bx,2				; skip over first word
  7732                                  	;xlat	ds:byte ptr [bx]		; convert to upper case
  7733 00001A1E D7                      	xlat
  7734 00001A1F 5B                      	pop	bx				;
  7735 00001A20 1F                      	pop	ds				;
  7736 00001A21 EB0A                    	jmp	short iupconv_end		; we finished - exit
  7737                                  
  7738                                  other_fucase:					;
  7739                                  	;cmp	al,[lcasea] ; [letter_a]	; if between "a" and "z",
  7740 00001A23 3C61                    	cmp	al,'a'
  7741 00001A25 7206                    	jb	short iupconv_end		;     subtract 20h to get
  7742                                  	;cmp	al,[lcasez] ; [letter_z]	; upper case equivalent.
  7743 00001A27 3C7A                    	cmp	al,'z'
  7744 00001A29 7702                    	ja	short iupconv_end		;
  7745 00001A2B 2C20                    	sub	al,20h				; Change lower-case to upper
  7746                                  iupconv_end:					;
  7747 00001A2D C3                      	retn
  7748                                  
  7749                                  ;iupConv endp
  7750                                  
  7751                                  	; 29/01/2023
  7752                                  init_contc_specialcase:
  7753                                  	; MSDOS 3.3 & MSDOS 6.0
  7754                                  						; This routine is called if control-C
  7755 00001A2E 83C406                  	add	sp,6				;  is type during the date/time prompt
  7756 00001A31 56                      	push	si				;  at initialization time.  The desired
  7757 00001A32 89D6                    	mov	si,dx				;  response is to make it look like the
  7758 00001A34 C74401000D              	mov	word [si+1],0D00h		;  user typed <CR> by "popping" the
  7759 00001A39 5E                      	pop	si				;  INT 21h stuff off the stack, putting
  7760 00001A3A CF                      	iret					;  a <CR> in the user's buffer, and
  7761                                  						;  returning directly to the user.
  7762                                  						; In this case the user is TCODE.
  7763                                  
  7764                                  ; ----------------------------------------------------------------------------
  7765                                  
  7766                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7767                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C62h (CODERES:0F22h)
  7768                                  
  7769                                  	; MSDOS 6.0
  7770                                  ; ****************************************************************
  7771                                  ; *
  7772                                  ; * ROUTINE:	 Setup_for_messages
  7773                                  ; *
  7774                                  ; * FUNCTION:	 Sets up system for PARSE and EXTENDED ERROR
  7775                                  ; *		 messages as follows:
  7776                                  ; *
  7777                                  ; *		 IF /P and /MSG are entered
  7778                                  ; *		    keep PARSE and EXTENDED ERRORS in memory
  7779                                  ; *		 ELSE IF /P is entered
  7780                                  ; *		    use PARSE and EXTENDED ERRORS on disk
  7781                                  ; *		    remove PARSE ERRORS from memory
  7782                                  ; *		 ELSE
  7783                                  ; *		    remove PARSE ERRORS from memory
  7784                                  ; *		 ENDIF
  7785                                  ; *
  7786                                  ; * INPUT:	 PERMCOM	Set up with user input
  7787                                  ; *		 EXT_MSG	Set up with user input
  7788                                  ; *		 System set up to retain PARSE ERRORS
  7789                                  ; *
  7790                                  ; * OUTPUT:	 registers unchanged
  7791                                  ; *
  7792                                  ; ****************************************************************
  7793                                  
  7794                                  setup_for_messages: ;proc near		
  7795                                  
  7796 00001A3B 53                      	push	bx
  7797 00001A3C 1E                      	push	ds				; save data segment
  7798 00001A3D 06                      	push	es				; save environment segment
  7799 00001A3E 50                      	push	ax				;
  7800 00001A3F 52                      	push	dx				;
  7801 00001A40 57                      	push	di				;
  7802 00001A41 8CC8                    	mov	ax,cs				; get local segment to ES and DS
  7803 00001A43 8ED8                    	mov	ds,ax				;
  7804 00001A45 8EC0                    	mov	es,ax				;
  7805                                  
  7806 00001A47 803E[8D01]00            	cmp	byte [PermCom],0		; was permcom set?
  7807 00001A4C 743C                    	jz	short no_permcom		; No - don't worry about messages
  7808                                  
  7809                                  ;*	We're permanent. Install our message services int 2f handler.
  7810                                  
  7811 00001A4E 06                      	push	es
  7812                                  	;mov	ax,(GET_INTERRUPT_VECTOR shl 8) or 2Fh
  7813 00001A4F B82F35                  	mov	ax,352Fh
  7814 00001A52 CD21                    	int	21h
  7815                                  			; DOS - 2+ - GET INTERRUPT VECTOR
  7816                                  			; AL = interrupt number
  7817                                  			; Return: ES:BX = value of interrupt vector
  7818 00001A54 891E[9B03]              	mov	[Int2fHandler],bx
  7819 00001A58 8C06[9D03]              	mov	[Int2fHandler+2],es
  7820 00001A5C 07                      	pop	es
  7821                                  
  7822                                  ;	DS = RESGROUP seg addr
  7823                                  
  7824                                  ; M005; We will not hook int 2fh on any command.com other than the first.
  7825                                  ; M005; Carousel loads as a permanent command.com and when we exit Carousel,
  7826                                  ; M005; it just wipes our arena out. So, int 2fh is still hooked and the
  7827                                  ; M005; first int 2fh call after exit from Carousel (from the DOS terminate
  7828                                  ; M005; call) goes off into space.
  7829                                  
  7830 00001A5D 803E[C020]00            	cmp	byte [FirstCom],0		; M005
  7831 00001A62 7416                    	je	short no_msg_hook		; M005
  7832                                  ;
  7833                                  ; M005; !!!SLIMIEST CAROUSEL HACK OFF ALL!!!
  7834                                  ; M005; Carousel plays around with the interrupt vector tables. He saves it
  7835                                  ; M005; before loading a new command.com. Then, it takes hold of the current
  7836                                  ; M005; command.com's PSP and then looks at all interrupt vectors whose
  7837                                  ; M005; segment matches the command.com PSP and then updates these segments
  7838                                  ; M005; to the new command.com's PSP in his saved vector table. Whenever we
  7839                                  ; M005; we pop into his menu, he puts this saved table into the vector table.
  7840                                  ; M005; If we now quit, Carousel just wipes out command.com's arena and then
  7841                                  ; M005; issues a terminate. Unfortunately, the int 2fh vector is pointing at
  7842                                  ; M005; the command.com that was wiped out and so the next int 2fh call will
  7843                                  ; M005; bomb. To prevent Carousel from doing this clever(1**$$#) patching, we
  7844                                  ; M005; renormalize our int 2fh pointer so that its cs is not the same as the
  7845                                  ; M005; command.com PSP. Now, he does no such patching and our int 2fh vector
  7846                                  ; M005; remains nice and happy. The renormalized pointer points at a far 
  7847                                  ; M005; jump to the actual int 2fh entry point.
  7848                                  ;
  7849 00001A64 1E                      	push	ds				; M005
  7850                                  	;mov	dx,offset DATARES:Carousel_i2f_Hook ; M005
  7851 00001A65 BA[C300]                	mov     dx,Carousel_i2f_Hook
  7852 00001A68 83EA10                  	sub	dx,10h				; renormalize offset; M005
  7853 00001A6B 8CD8                    	mov	ax,ds				; M005
  7854 00001A6D 40                      	inc	ax				; Relocated cs ; M005
  7855 00001A6E 8ED8                    	mov	ds,ax				; M005
  7856                                  	;mov	ax,(SET_INTERRUPT_VECTOR shl 8) or 2Fh
  7857 00001A70 B82F25                  	mov	ax,252Fh
  7858 00001A73 CD21                    	int	21h
  7859                                  			; DOS - SET INTERRUPT VECTOR
  7860                                  			; AL = interrupt number
  7861                                  			; DS:DX = new vector to be used for specified interrupt
  7862 00001A75 1F                      	pop	ds				; M005
  7863                                  	;mov	word ptr Carousel_i2f_Hook+3,ds	; M005
  7864 00001A76 8C1E[C600]              	mov	[Carousel_i2f_Hook+3],ds
  7865                                  						; patch in the cs for jump
  7866                                  no_msg_hook:					; M005
  7867 00001A7A 803E[811C]01            	cmp	byte [ext_msg],1 ; SET_EXTENDED_MSG
  7868 00001A7F 7516                    	jne	short permcom_end		; no /msg - exit
  7869                                  
  7870                                  permcom_slash_msg:				; Keep messages in memory
  7871                                  	;mov	di,offset ResGroup:ExtMsgEnd 	; get address of resident end
  7872 00001A81 BF[F60B]                	mov     di,ExtMsgEnd
  7873 00001A84 893E[9F03]              	mov	[ResMsgEnd],di			; save it
  7874 00001A88 EB0D                    	jmp	short permcom_end		; exit
  7875                                  
  7876                                  no_permcom:					
  7877                                  	;cmp	byte [ext_msg],SET_EXTENDED_MSG	; was /msg specified?
  7878 00001A8A 803E[811C]01            	cmp	byte [ext_msg],1
  7879 00001A8F 7506                    	jne	short permcom_end		; no - no error
  7880                                  	;mov	dx,LessArgs_Ptr			; get message number for "Required parameter missing"
  7881 00001A91 BA0200                  	mov	dx,2
  7882 00001A94 E81CFF                  	call	RPrintParse
  7883                                  
  7884                                  permcom_end:
  7885 00001A97 5F                      	pop	di				;
  7886 00001A98 5A                      	pop	dx				;
  7887 00001A99 58                      	pop	ax				;
  7888 00001A9A 07                      	pop	es				; get environment back
  7889 00001A9B 1F                      	pop	ds				;
  7890 00001A9C 5B                      	pop	bx
  7891                                  
  7892 00001A9D C3                      	retn					;
  7893                                  
  7894                                  ;setup_for_messages	endp
  7895                                  
  7896                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7897                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1CC5h
  7898                                  
  7899                                  	; MSDOS 6.0
  7900                                  
  7901                                  ;***	CheckHelp - print help text and exit if /? is on command line
  7902                                  ;
  7903                                  ;	ENTRY	command-line tail at 81h
  7904                                  ;
  7905                                  ;	EXIT	return if /? not found
  7906                                  ;		terminate if /? found
  7907                                  ;
  7908                                  ;	USED	AX,BX,CX,DX,SI,DI
  7909                                  ;
  7910                                  ;	EFFECTS	Help text displayed if /? found on command line
  7911                                  
  7912                                  CheckHelp:	; proc
  7913                                  	;assume	cs:RESGROUP,ds:RESGROUP,es:RESGROUP,ss:RESGROUP
  7914                                  
  7915 00001A9E BE8100                  	mov	si,81h			; DS:SI = ptr to command-line tail
  7916                                  	;mov	di,offset RESGROUP:Parse_Command
  7917 00001AA1 BF[861C]                	mov	di,PARSE_COMMAND
  7918                                  					; ES:DI = ptr to primary parse block
  7919 00001AA4 31C9                    	xor	cx,cx			; CX = # positional param's found
  7920 00001AA6 31D2                    	xor	dx,dx			; DX will be ptr to result buffer
  7921                                  chParse:
  7922                                  	;call	dword ptr Init_Parse
  7923 00001AA8 FF1E[7A1C]              	call	far [Init_Parse]	; call system parser
  7924                                  
  7925                                  	;;cmp	ax,END_OF_LINE
  7926                                  	;cmp	ax,-1 ; 0FFFFh	
  7927                                  	;je	short chRet		; end of command line, no /? found
  7928                                  	;;cmp	ax,RESULT_NO_ERROR
  7929                                  	;;cmp	ax,0
  7930                                  	;;je	short chWhich		; valid syntax element found
  7931                                  	;;jmp	short chParse		; go parse more
  7932                                  	;and	ax,ax ; cmp ax,0
  7933                                  	;jnz	short chParse ; jne
  7934                                  	; 10/06/2023
  7935 00001AAC 40                      	inc	ax	; cmp ax,-1
  7936 00001AAD 7413                    	jz	short chRet   ; 0FFFFh -> 0
  7937 00001AAF 48                      	dec	ax	; cmp ax,0
  7938 00001AB0 75F6                    	jnz	short chParse ; 1 -> 0
  7939                                  	; ax = 0
  7940                                  chWhich:
  7941                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_?_Syn
  7942 00001AB2 813E[0D1D][081D]        	cmp     word [COMND1_SYN],COMMAND_?_SYN ; "/?"
  7943 00001AB8 7409                    	je	short chHelp		; /? found - display help & exit
  7944                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_C_Syn
  7945 00001ABA 813E[0D1D][EE1C]        	cmp     word [COMND1_SYN],COMMAND_C_SYN ; "/C"
  7946                                  	;je	short chRet		; /c found - ignore rest of line
  7947                                  	; 29/01/2023
  7948 00001AC0 75E6                    	jne	short chParse
  7949                                  	; MSDOS 6.0
  7950                                          ;;cmp	Comnd1_Syn,offset RESGROUP:Command_K_Syn
  7951                                        	;cmp	word [COMND1_SYN],COMMAND_K_SYN ; "/K"
  7952                                  	;je	short chRet		; /k found - ignore rest of line
  7953                                  	;jmp	short chParse		; anything else - ignore, keep looking
  7954                                  chRet:
  7955 00001AC2 C3                      	retn
  7956                                  chHelp:
  7957                                  	;mov	si,offset RESGROUP:HelpMsgs	; SI = ptr to msg ptr list
  7958 00001AC3 BE[9220]                	mov	si,HelpMsgs
  7959                                  chHelpNext:
  7960 00001AC6 AD                      	lodsw					; AX = ptr to msg
  7961 00001AC7 09C0                    	or	ax,ax
  7962 00001AC9 7407                    	jz	short chHelpDone		; end of list - all done
  7963 00001ACB 89C2                    	mov	dx,ax				; DX = ptr to msg
  7964 00001ACD E8A5F7                  	call	RPrint				; display msg
  7965 00001AD0 EBF4                    	jmp	short chHelpNext		; go do next msg
  7966                                  
  7967                                  chHelpDone:
  7968 00001AD2 CD20                    	int	20h				; terminate program
  7969                                  ;chRet:
  7970 00001AD4 C3                      	retn
  7971                                  
  7972                                  ;CheckHelp	endp
  7973                                  
  7974                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7975                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D03h
  7976                                  
  7977                                  	; MSDOS 6.0
  7978                                  
  7979                                  ;***** Setup_res_end -- This routine determines the resident size of COMMAND.
  7980                                  ;
  7981                                  ; It determines based on 2 factors:
  7982                                  ;	1. Is this is the first COMMAND?
  7983                                  ;	2. Is COMMAND to be loaded into HIMEM?
  7984                                  ;   The strategy works as follows:
  7985                                  ;
  7986                                  ;	if (First COMMAND)
  7987                                  ;	then if (COMMAND in HIMEM)
  7988                                  ;		ResSize = resident_data;
  7989                                  ;	     else
  7990                                  ;		ResSize = resident_data + resident_code;
  7991                                  ;	else
  7992                                  ;	   ResSize = resident_data;
  7993                                  ;
  7994                                  ; Int 2fh calls have been added to determine whether or not we are the first
  7995                                  ; COMMAND and whether DOS is in HIMEM.
  7996                                  ;
  7997                                  ;	ENTRY: ResMsgEnd = resident size of data in paras
  7998                                  ;
  7999                                  ;	EXIT:  ResSize = resident size in low memory
  8000                                  ;
  8001                                  ;	REGISTERS AFFECTED: ax,cx,dx
  8002                                  ;
  8003                                  
  8004                                  GET_HMA_ADDR	equ	4A02h
  8005                                  
  8006                                  Setup_res_end:	;proc near
  8007                                  	
  8008 00001AD5 1E                      	push	ds
  8009 00001AD6 8CC8                    	mov	ax,cs
  8010 00001AD8 8ED8                    	mov	ds,ax				;ds = RESGROUP
  8011                                  	;assume	ds:RESGROUP
  8012                                  
  8013 00001ADA 8B0E[9F03]              	mov	cx,[ResMsgEnd]			;set resident size = data
  8014                                  
  8015                                  ;ifndef	ROMDOS
  8016                                  
  8017                                  ;M042 -- Begin changes
  8018                                  ;If messages are to be kept behind, we need to round up the messages to
  8019                                  ;the next para boundary. This is because we have a dummy segment between the
  8020                                  ;data and the resident code segment so that the code segment starts on a
  8021                                  ;para boundary
  8022                                  
  8023                                  	;cmp	cx,offset RESGROUP:ExtMsgEnd	;messages to be resident?
  8024 00001ADE 81F9[F60B]              	cmp	cx,ExtMsgEnd
  8025 00001AE2 7506                    	jne	short calc_res			;no, continue
  8026 00001AE4 83C10F                  	add	cx,15				;round up
  8027 00001AE7 83E1F0                  	and	cx,0FFF0h
  8028                                  calc_res:
  8029                                  
  8030                                  ;M042 -- End changes
  8031                                  
  8032                                  	; 18/07/2024
  8033                                  	;xor	ax,ax
  8034                                         	
  8035 00001AEA 803E[C020]01            	cmp	byte [FirstCom],1		;is it first command.com?
  8036                                  	;jne	short not_first			;no, do not keep code
  8037                                  	; 06/06/2023
  8038 00001AEF 751A                    	jne	short not_first2
  8039                                  
  8040                                  ;We issue a version check call with al=01 to detect if DOS is in HMA. If so,
  8041                                  ;bit 4 of dh is set
  8042                                  
  8043 00001AF1 53                      	push	bx
  8044 00001AF2 51                      	push	cx
  8045                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ;is DOS in HIMEM? ;M013
  8046 00001AF3 B80633                  	mov	ax,3306h
  8047 00001AF6 CD21                    	int	21h
  8048                                  		; DOS - 5+ Get TRUE Version Number
  8049                                  		; (BL major, BH minor, DL revision, DH flags)
  8050 00001AF8 59                      	pop	cx
  8051                                  
  8052                                  ;bugbug: remove version check after testing
  8053                                  
  8054 00001AF9 80FB05                  	cmp	bl,5				;bl has true version ; M013
  8055 00001AFC 7207                    	jb	short oldver
  8056                                  
  8057 00001AFE 31C0                    	xor	ax,ax
  8058 00001B00 80E610                  	and	dh,10h				;is DOS in HMA ; M013
  8059                                  	;pop	bx
  8060                                  	;jnz	short not_first			;DOS in HIMEM, code not
  8061                                  						;	resident
  8062                                  	; 29/01/2023
  8063 00001B03 7503                    	jnz	short not_first_pop
  8064                                  oldver:
  8065                                  	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8066                                  	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8067                                  	; 06/06/2023
  8068                                  	; 29/01/2023
  8069                                  	;mov	ax,EndCode-(RCODE_START+100h) ; 23/04/2023
  8070                                  	; 03/05/2023
  8071 00001B05 B8(F908)                	mov	ax,EndCode-RCODE_START	; 06/06/2023
  8072                                  
  8073                                  not_first_pop:
  8074                                  	; 29/01/2023
  8075 00001B08 5B                      	pop	bx
  8076                                  
  8077                                  not_first:
  8078                                  
  8079                                  ;Note that ax = 0 (side effect of int 2fh), if the code is not to be retained
  8080                                  
  8081 00001B09 01C1                    	add	cx,ax
  8082                                  
  8083                                  not_first2:	; 06/06/2023
  8084                                  
  8085                                  ;endif	;not ROMDOS
  8086                                  
  8087 00001B0B 83C10F                  	add	cx,15				;round up to next para
  8088 00001B0E D1E9                    	shr	cx,1
  8089 00001B10 D1E9                    	shr	cx,1
  8090 00001B12 D1E9                    	shr	cx,1
  8091 00001B14 D1E9                    	shr	cx,1				;ax = para size of res code
  8092 00001B16 890E[A103]              	mov	[ResSize],cx			;store resident size
  8093                                  
  8094 00001B1A 1F                      	pop	ds
  8095                                  	;assume	ds:nothing
  8096 00001B1B C3                      	retn
  8097                                  
  8098                                  ;ifndef	ROMDOS
  8099                                  
  8100                                  ;bugbug: remove this code (for version independent COMMAND) after testing
  8101                                  
  8102                                  	; 29/01/2023
  8103                                  ;oldver:
  8104                                  ;	pop	bx
  8105                                  ;	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8106                                  ;	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8107                                  ;	; 29/01/2023
  8108                                  ;	mov	ax,EndCode-RCODE_START
  8109                                  ;	jmp	short not_first
  8110                                  
  8111                                  ;endif	;not ROMDOS
  8112                                  
  8113                                  ;setup_res_end	endp
  8114                                  
  8115                                  ;ifndef	ROMDOS
  8116                                  
  8117                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8118                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8119                                  
  8120                                  	; MSDOS 6.0
  8121                                  ;*** Move_res_code -- This routine moves the resident code to its final 
  8122                                  ; location. We check if DOS is in HIMEM. If so, we try to load ourselves
  8123                                  ; in HIMEM. If we fail, then we remain low and update ResSize to reflect
  8124                                  ; the correct resident size. When remaining low, we have to check if we 
  8125                                  ; need to overlay the messages part of the data segment which is determined
  8126                                  ; by the /msg switch.
  8127                                  ;
  8128                                  ;	ENTRY: ResMsgEnd = end of resident data
  8129                                  ;
  8130                                  ;	EXIT:  The resident code is either up high or in its final location
  8131                                  ;		down low.
  8132                                  ;
  8133                                  ;	REGISTERS AFFECTED: ax,bx,cx,dx,si,di
  8134                                  	
  8135                                  Move_res_code:	;proc near
  8136                                  
  8137 00001B1C 1E                      	push	ds
  8138 00001B1D 06                      	push	es
  8139                                  
  8140 00001B1E 8CC8                    	mov	ax,cs
  8141 00001B20 8ED8                    	mov	ds,ax
  8142                                  	;assume	ds:RESGROUP
  8143                                  
  8144                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ; M013
  8145 00001B22 B80633                  	mov	ax,3306h
  8146 00001B25 CD21                    	int	21h				;DOS in HIMEM?
  8147                                  		; DOS - 5+ Get TRUE Version Number
  8148                                  		; (BL major, BH minor, DL revision, DH flags)
  8149                                  
  8150 00001B27 80E610                  	and	dh,10h				; M013
  8151 00001B2A 750E                    	jnz	short move_high			;yes, move code high
  8152                                  
  8153                                  ;Check if messages have been discarded or not
  8154                                  
  8155                                  load_low:
  8156 00001B2C 1E                      	push	ds
  8157 00001B2D 07                      	pop	es				;es = RESGROUP
  8158 00001B2E 8B3E[9F03]              	mov	di,[ResMsgEnd]			;end offset in DATARES
  8159                                  	;;mov	bx,offset RESGROUP:ExtMsgEnd	;end offset of messages
  8160                                  	;mov	bx,ExtMsgEnd
  8161                                  	; 29/01/2023
  8162 00001B32 81FF[F60B]              	cmp	di,ExtMsgEnd
  8163                                  	;cmp	di,bx				;are messages to be kept?
  8164 00001B36 7431                    	je	short no_move			;yes, dont move code
  8165                                  
  8166 00001B38 EB37                    	jmp	short setup_move		;es:di points at dest.
  8167                                  
  8168                                  move_high:
  8169                                  
  8170                                  ;We have to call DOS to get the load address in HIMEM for COMMAND
  8171                                  ;We pass in bx the number of bytes we need
  8172                                  
  8173                                  	;mov	bx,offset CODERES:EndCode
  8174                                  	; 29/01/2023
  8175                                  	;;mov	bx,81Ah ; MSDOS 5.0 COMMAND.COM
  8176                                  	; 06/06/2023
  8177                                  	;mov	bx,EndCode-(RCODE_START+100h) ; 23/04/2023 ; 06/06/2023
  8178                                  	; 03/05/2023
  8179 00001B3A BB(F908)                	mov	bx,EndCode-RCODE_START ; 06/06/2023
  8180                                  
  8181                                  ;M030;
  8182                                  ; Set di=0ffffh so that we load low in case no one answers this int 2fh
  8183                                  
  8184 00001B3D BFFFFF                  	mov	di,0FFFFh			;DT - in case no-one handles
  8185                                  						;this ; M030
  8186 00001B40 B8024A                  	mov	ax,GET_HMA_ADDR ; 4A02h
  8187 00001B43 CD2F                    	int	2Fh
  8188                                  
  8189                                  ;If the offset = 0xffff, then no HMA available
  8190                                  
  8191 00001B45 83FFFF                  	cmp	di,0FFFFh			;HMA available?
  8192 00001B48 C606[3400]01            	mov	byte [ComInHMA],1		;assume command.com in HMA
  8193 00001B4D 7522                    	jne	short setup_move		;no error, es:di = memory
  8194                                  
  8195                                  	;mov	byte [ComInHMA],0		;could not load in HMA
  8196                                  	; 29/01/2023	
  8197 00001B4F FE0E[3400]              	dec	byte [ComInHMA] ; 1 -> 0
  8198                                  
  8199                                  ;Zero means that we do not have enough HIMEM. Remain low and update
  8200                                  ;ResSize to reflect this
  8201                                  
  8202 00001B53 8B0E[9F03]              	mov	cx,[ResMsgEnd]			;size of data in bytes
  8203                                  	;;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8204                                  	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8205                                  	;mov	ax,EndCode-RCODE_START
  8206                                  	;add	cx,ax
  8207                                  	; 06/06/2023
  8208                                  	; 29/01/2023
  8209                                  	;add	cx,(EndCode-(RCODE_START+100h))+15 ; 23/04/2023 ; 06/06/2023
  8210                                  	;add	cx,15				;round up to next para
  8211                                  	; 03/05/2023
  8212 00001B57 81C1(0809)              	add	cx,(EndCode-RCODE_START)+15 ; 06/06/2023
  8213 00001B5B D1E9                    	shr	cx,1
  8214 00001B5D D1E9                    	shr	cx,1
  8215 00001B5F D1E9                    	shr	cx,1
  8216 00001B61 D1E9                    	shr	cx,1				;ax = para size of res code
  8217 00001B63 890E[A103]              	mov	[ResSize],cx			;store resident size
  8218 00001B67 EBC3                    	jmp	short load_low			;let code remain low
  8219                                  
  8220                                  no_move:
  8221                                  	; 05/05/2023
  8222                                  	;mov	cl,4
  8223 00001B69 83C70F                  	add	di,0Fh
  8224 00001B6C 83E7F0                  	and	di,0FFF0h			;round it to a para offset
  8225 00001B6F EB0B                    	jmp	short patch_up
  8226                                  
  8227                                  setup_move:
  8228                                  	;mov	si,offset RESGROUP:StartCode
  8229                                  	; 03/05/2023
  8230 00001B71 BE[000C]                	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8231                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8232                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8233                                  	;mov	cx,81Ah ; MSDOS 5.0 COMMAND.COM
  8234                                  	; 06/06/2023
  8235                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8236                                  	; 03/05/2023
  8237 00001B74 B9(F908)                	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8238                                  
  8239 00001B77 FC                      	cld
  8240 00001B78 57                      	push	di				;need di for patching offset
  8241 00001B79 F3A4                    	rep	movsb
  8242 00001B7B 5F                      	pop	di
  8243                                  
  8244                                  patch_up:
  8245 00001B7C E84200                  	call	patch_stub
  8246 00001B7F 07                      	pop	es
  8247 00001B80 1F                      	pop	ds
  8248                                  	;assume	ds:nothing
  8249 00001B81 C3                      	retn
  8250                                  
  8251                                  ;Move_res_code endp
  8252                                  
  8253                                  ;else	;ROMDOS
  8254                                  ;
  8255                                  ;;***	Move_res_code - ROMDOS version - locate ROM resident
  8256                                  ;
  8257                                  ;Move_res_code	proc
  8258                                  ;
  8259                                  ;	push	es
  8260                                  ;
  8261                                  ;	invoke	FindROMRes		; ES:DI = ptr to ROM resident code
  8262                                  ;	call	patch_stub
  8263                                  ;
  8264                                  ;	pop	es
  8265                                  ;	ret
  8266                                  ;
  8267                                  ;Move_res_code	endp
  8268                                  ;
  8269                                  ;	assume	ds:NOTHING		; to match ending assume above
  8270                                  ;
  8271                                  ;endif	;ROMDOS
  8272                                  
  8273                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8274                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8275                                  
  8276                                  	; MSDOS 6.0
  8277                                  ;*** Alloc_env -- This routine allocates the temporary environment for the
  8278                                  ; Init code to initialize the COMSPEC. This is not a complete environment. 
  8279                                  ; Later on, at EndInit time, a proper sized environment is allocated and
  8280                                  ; the contents of this temporary environment are copied to it. This routine
  8281                                  ; will not be called in case a valid environment is passed to command.com
  8282                                  ;
  8283                                  ;       ENTRY:  FirstCom and initial EnvirSeg set
  8284                                  ;
  8285                                  ;       EXIT:   ax = EnvirSeg = segment of newly allocated environment segment
  8286                                  ;
  8287                                  ;       REGISTERS AFFECTED: ax,bx,cx,dx
  8288                                  
  8289                                  alloc_env:	;proc near
  8290                                  	;assume ds:nothing
  8291                                  	
  8292 00001B82 1E                              push    ds
  8293 00001B83 06                      	push	es
  8294 00001B84 56                      	push	si
  8295 00001B85 57                      	push	di
  8296                                  
  8297                                  ; 29/01/2023 - MSDOS 6.0 COMMAND.COM
  8298                                  %if 0
  8299                                          push    ss
  8300                                          pop     ds
  8301                                  	;assume ds:RESGROUP
  8302                                  
  8303                                          mov     ax,[EnvirSeg]
  8304                                  
  8305                                          cmp	byte [AllocedEnv],0
  8306                                          je	short alloc_cont
  8307                                          jmp     alloc_done
  8308                                  
  8309                                  alloc_cont:
  8310                                          sub     di,di                           ; default start
  8311                                          ;mov	bx,SIZE Environment             ; default size needed
  8312                                  	; 29/01/2023
  8313                                  	mov	bx,ENVIRONSIZ
  8314                                  
  8315                                          cmp	byte [FirstCom],0		; first COMMAND.COM?
  8316                                          je	short alloc_seg			; no
  8317                                  
  8318                                  ;   Check EnvirSeg; if non-zero, then scan it for PATH and COMSPEC;
  8319                                  ;   Record their respective locations and do not add the default vars.
  8320                                  
  8321                                  	or      ax,ax
  8322                                  	jz	short alloc_new			; no previous environment
  8323                                  
  8324                                          mov     es,ax
  8325                                  	;assume es:nothing
  8326                                  
  8327                                  _find_path:
  8328                                          mov     al,0
  8329                                          sub     di,di
  8330                                  comp_path:
  8331                                          scasb                                   ; end of env?
  8332                                  	je	short _find_prompt		; yes
  8333                                          dec     di
  8334                                          mov     cx,PathStrLen ; mov cx,5 ; "PATH="
  8335                                          ;mov	si,offset RESGROUP:PathString
  8336                                  	mov	si,PathString	
  8337                                          repe    cmpsb
  8338                                          je	short got_path
  8339                                          mov	cx,256
  8340                                          repne   scasb                           ; find next NULL
  8341                                          jmp     short comp_path
  8342                                  
  8343                                  got_path:
  8344                                          mov	byte [PathString],0		; don't add it
  8345                                  
  8346                                  _find_prompt:
  8347                                          sub     di,di
  8348                                  comp_prompt:
  8349                                  	scasb                                   ; end of env?
  8350                                  	je	short find_comspec		; yes
  8351                                  	dec     di
  8352                                  	mov     cx,PrmptStrLen2 ; mov cx,7
  8353                                  	;mov	si,offset RESGROUP:PrmptString
  8354                                  	mov	si,PrmptString
  8355                                          repe    cmpsb
  8356                                          je	short got_prompt
  8357                                          mov     cx,256
  8358                                          repne   scasb                           ; find next NULL
  8359                                          jmp	short comp_prompt
  8360                                  
  8361                                  got_prompt:
  8362                                  	mov	byte [PrmptString],0		; don't add it
  8363                                  
  8364                                  find_comspec:
  8365                                          sub     di,di
  8366                                  comp_comspec:
  8367                                          scasb                                   ; end of env?
  8368                                          je	short got_envend		; yes
  8369                                          dec     di
  8370                                          mov	cx,ComspStrLen ; mov cx,8
  8371                                  	;mov	si,offset RESGROUP:ComspString
  8372                                  	mov	si,ComspString
  8373                                          repe    cmpsb
  8374                                          je	short got_comspec
  8375                                          mov     cx,256
  8376                                          repne   scasb                           ; find next NULL
  8377                                          jmp	short comp_comspec
  8378                                  
  8379                                  got_comspec:
  8380                                          mov     [ComspOffset],di
  8381                                  
  8382                                  find_envend:
  8383                                          sub     di,di
  8384                                          mov     cx,ENVBIG                       ; max env size
  8385                                  comp_envend:
  8386                                          dec     cx                              ;
  8387                                          scasb                                   ; end of env?
  8388                                          je	short got_envend		; yes
  8389                                          repne   scasb
  8390                                          jmp	short comp_envend
  8391                                  
  8392                                  got_envend:
  8393                                          dec     di
  8394                                          lea     bx,[di+SIZE Environment]        ; add room for the basics
  8395                                  
  8396                                  ;   We want to fall through to alloc_new and set up default
  8397                                  ;   path and prompt ONLY IF this is the first process;  in all other
  8398                                  ;   cases, we assume it is a bad idea to try editing the user's environment
  8399                                  
  8400                                          push    ds
  8401                                          ;mov	ds,ds:[PDB_Parent_Pid]
  8402                                          mov	ds,[PDB.PARENT_PID]
  8403                                  	;cmp	ds:[PDB_Parent_Pid],0           ; is parent's parent pid field 0?
  8404                                  	cmp	word [PDB.PARENT_PID],0
  8405                                  	pop     ds
  8406                                          jne	short alloc_seg			; no, we're not the first process
  8407                                                                                  ; so don't muck with the env.
  8408                                  alloc_new:
  8409                                  	inc	byte [AllocedEnv]		; note we have virgin env.
  8410                                  
  8411                                  alloc_seg:
  8412                                  
  8413                                  ; Allocate default environment size
  8414                                  
  8415                                          mov     cx,bx                           ; save byte-granular size in CX
  8416                                          add     bx,15
  8417                                          shr     bx,1
  8418                                          shr     bx,1
  8419                                          shr     bx,1
  8420                                          shr     bx,1                            ; BX = # paras
  8421                                  	mov	ah,ALLOC
  8422                                  	int	21h
  8423                                          jnc	short init_ok
  8424                                          jmp     init_nomem                      ; insufficient memory, error
  8425                                  
  8426                                  ; If a previous environment existed (ie, DI != 0), then copy it into
  8427                                  ; the new buffer
  8428                                  
  8429                                  init_ok:
  8430                                  	mov	es,ax
  8431                                  	;assume	es:nothing                      ; es = temp env segment
  8432                                  
  8433                                  	or      di,di
  8434                                          jz	short copy_path
  8435                                  
  8436                                          push    cx
  8437                                          push    ds
  8438                                          mov     ds,[EnvirSeg]
  8439                                          ;assume ds:nothing
  8440                                          sub     si,si
  8441                                          mov     cx,di
  8442                                          sub     di,di
  8443                                          rep     movsb
  8444                                          pop     ds
  8445                                          ;assume ds:RESGROUP
  8446                                          pop     cx
  8447                                          sub     cx,di
  8448                                  
  8449                                  copy_path:
  8450                                  
  8451                                  ; First clear out (the rest of) the buffer
  8452                                  
  8453                                          push    di
  8454                                          sub     ax,ax
  8455                                          rep     stosb
  8456                                          pop     di
  8457                                  
  8458                                  ; Initialize the path string (PATH=) first
  8459                                  
  8460                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8461                                  	mov	si,PathString
  8462                                          cmp     byte [si],al			; add it?
  8463                                          je	short init_prompt		; no
  8464                                  	;mov	cx,PathStrLen+1                 ;
  8465                                  	mov	cx,6 ; db "PATH=",0
  8466                                          rep     movsb                           ;
  8467                                          cmp     [AllocedEnv],al			; virgin env?
  8468                                          je	short init_prompt		; no
  8469                                  
  8470                                  ; Establish a more reasonable default for the PATH
  8471                                  
  8472                                  	;mov	ah,GET_DEFAULT_DRIVE
  8473                                  	mov	ah,19h
  8474                                  	int	21h
  8475                                          add     al,'A'                          ; convert to letter
  8476                                          mov     [DefPathString],al              ;
  8477                                          mov     [DefPath2String],al             ; now our default paths are complete
  8478                                  
  8479                                          mov     dl,0                            ; get dir for default drive
  8480                                          push    ds                              ;
  8481                                          push    es                              ;
  8482                                          pop     ds                              ;
  8483                                          mov     byte [di],'\'			;
  8484                                          lea     si,[di+1]                       ; set DS:SI -> available space
  8485                                  	;mov	ah,Current_Dir                  ;
  8486                                          mov	ah,47h
  8487                                  	int     21h                             ;
  8488                                          pop     ds                              ;
  8489                                  
  8490                                  	;mov	cx,DefPathStrLen+1              ;
  8491                                  	mov	cx,9 ; db "C:\MSDOS",0
  8492                                  	;mov	dx,offset RESGROUP:DefPathString
  8493                                  	mov	dx,DefPathString 
  8494                                  	mov	si,dx                           ;
  8495                                          ;mov	ah,CHDir                        ;
  8496                                          mov	ah,3Bh
  8497                                  	int     21h                             ;
  8498                                          jnc	short init_setpath		; DefPathString exists!
  8499                                  
  8500                                  	;mov	cx,DefPath2StrLen+1		;
  8501                                          mov	cx,7 ; db "C:\DOS",0
  8502                                  	;mov	dx,offset RESGROUP:DefPath2String
  8503                                  	mov	dx,DefPath2String
  8504                                          mov     si,dx                           ;
  8505                                          ;mov	ah,CHDir                        ;
  8506                                          mov	ah,3Bh
  8507                                          int     21h                             ;
  8508                                          jc	short init_prompt		; DefPath2String doesn't exist
  8509                                  
  8510                                  init_setpath:
  8511                                          mov     dx,di                           ; success
  8512                                          push    ds                              ; so restore prev dir
  8513                                          push    es                              ;
  8514                                          pop     ds                              ; DS:DX -> prev dir
  8515                                          ;mov	ah,CHDir                        ;
  8516                                          mov	ah,3Bh
  8517                                          int     21h                             ;
  8518                                          pop     ds                              ;
  8519                                  
  8520                                          dec     di                              ; then copy in DefPathString
  8521                                          rep     movsb                           ; DS:SI -> "C:\\DOS\0"
  8522                                  
  8523                                  ; Initialize the default prompt
  8524                                  
  8525                                  init_prompt:
  8526                                          push    di                              ;
  8527                                          sub     ax,ax                           ;
  8528                                          mov     cx,64                           ; insure any data read in
  8529                                          rep     stosb                           ; from Current_Dir is zapped
  8530                                          pop     di                              ;
  8531                                  
  8532                                  	cmp	[AllocedEnv],al			; virgin env?
  8533                                          je	short init_comspec		; no
  8534                                          ;mov	si,offset RESGROUP:PrmptString  ; DS:SI -> "PROMPT=$P$G\0"
  8535                                          mov	si,PrmptString
  8536                                  	cmp     [si],al				; add it?
  8537                                          je      short init_comspec		; no
  8538                                  	;mov	cx,PrmptStrLen+1                ;
  8539                                          mov	cl,12  ; db "PROMPT=$P$G",0
  8540                                  	rep     movsb                           ;
  8541                                  
  8542                                  ; Initialize the Comspec string
  8543                                  
  8544                                  init_comspec:
  8545                                          cmp	[ComspOffset],ax		; add it?
  8546                                          jne	short init_done			; no
  8547                                          lea     ax,[di+ComspStrLen]             ;
  8548                                          mov	[ComspOffset],ax		;
  8549                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8550                                          mov	si,ComspString
  8551                                  	;mov	cx,ComspStrLen2+1               ;
  8552                                          mov	cx,21 ; db "COMSPEC=\COMMAND.COM",0
  8553                                  	rep     movsb                           ;
  8554                                  
  8555                                  init_done:
  8556                                          mov     ax,es                           ; return env seg in ax
  8557                                          mov     [EnvirSeg],ax			; save env seg
  8558                                          inc	byte [AllocedEnv]		; remember that *we* alloced it
  8559                                  %endif
  8560                                  
  8561                                  ; 29/01/2023 - MSDOS 5.0 COMMAND.COM (RESGROUP:1DC4h)
  8562                                  %if 1
  8563                                  	;mov	bx,10
  8564 00001B86 BB0A00                  	mov	bx,ENVIRONSIZ>>4 ; 160/16
  8565 00001B89 B448                    	mov	ah,48h
  8566 00001B8B CD21                    	int	21h    	; DOS - 2+ - ALLOCATE MEMORY
  8567                                  			; BX = number of 16-byte paragraphs desired
  8568 00001B8D 722C                    	jc	short init_nomem
  8569                                  
  8570                                  init_ok:
  8571 00001B8F 8EC0                    	mov	es,ax
  8572                                  	;assume	es:nothing                      ; es = temp env segment
  8573                                  
  8574 00001B91 31FF                    	xor	di,di
  8575 00001B93 89F8                    	mov	ax,di
  8576                                  	;mov	cx,160	
  8577 00001B95 B9A000                          mov     cx,ENVIRONSIZ
  8578 00001B98 F3AA                            rep	stosb
  8579                                  
  8580                                  init_pathstr:
  8581                                  
  8582                                  ; Initialize the path string (PATH=) first
  8583                                  
  8584 00001B9A 16                      	push	ss
  8585 00001B9B 1F                      	pop	ds
  8586                                  
  8587                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8588 00001B9C BE[531C]                	mov	si,PathString
  8589 00001B9F BF0000                  	mov	di,0
  8590                                  init_cp_pathstr:
  8591 00001BA2 AC                      	lodsb
  8592 00001BA3 AA                      	stosb
  8593 00001BA4 08C0                    	or	al,al
  8594 00001BA6 75FA                    	jnz	short init_cp_pathstr
  8595                                  
  8596                                  ; Initialize the Comspec string
  8597                                  
  8598                                  init_comspec:
  8599                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8600 00001BA8 BE[591C]                        mov	si,ComspString
  8601                                  	; 05/05/2023
  8602 00001BAB BF0600                  	mov	di,6
  8603                                  init_cp_compstr:
  8604 00001BAE AC                      	lodsb
  8605 00001BAF AA                      	stosb
  8606 00001BB0 08C0                    	or	al,al
  8607 00001BB2 75FA                    	jnz	short init_cp_compstr
  8608                                  
  8609                                  init_done:
  8610 00001BB4 8CC0                            mov     ax,es                           ; return env seg in ax
  8611                                          ;mov	[EnvirSeg],ax			; save env seg
  8612                                          ;inc	byte [AllocedEnv]		; remember that *we* alloced it
  8613                                  %endif	
  8614                                  
  8615                                  	; 29/01/2023
  8616                                  alloc_done:
  8617 00001BB6 5F                      	pop	di
  8618 00001BB7 5E                      	pop	si
  8619 00001BB8 07                      	pop	es
  8620 00001BB9 1F                              pop     ds
  8621                                  	;assume	ds:nothing
  8622 00001BBA C3                      	retn
  8623                                  
  8624                                  	; 29/01/2023
  8625                                  init_nomem:
  8626                                  
  8627                                  ;We call the error routine from here. This routine never returns. It either
  8628                                  ;terminates COMMAND with error( if it is not the first invocation ) or hangs
  8629                                  ;the system ( if it is the first COMMAND.COM ).
  8630                                  
  8631 00001BBB E80000                  	call	Alloc_error
  8632                                  
  8633                                  ;Alloc_env	endp
  8634                                  
  8635                                  ;*** Alloc_error: This routine just jumps to the actual label where we 
  8636                                  ; check if this is a permanent or secondary command.com and take the 
  8637                                  ; appropriate action.
  8638                                  ;
  8639                                  ;	ENTRY:	ds = RESGROUP = DATARES
  8640                                  ;
  8641                                  ;	EXIT:	None - does not return
  8642                                  ;
  8643                                  ;	REGISTERS AFFECTED: Does not matter
  8644                                  ;
  8645                                  
  8646                                  ;public Alloc_error
  8647                                  Alloc_error:	;proc	near
  8648                                  
  8649                                  	;jmp	RESGROUP:BadMemErr
  8650                                  	; 29/01/2023
  8651 00001BBE E946F1                  	jmp	BadMemErr	
  8652                                  	
  8653                                  ;Alloc_error	endp
  8654                                  
  8655                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8656                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1DFFh
  8657                                  
  8658                                  	; MSDOS 6.0
  8659                                  ;*** Patch_stub -- This routine patches in the segment and offset values in
  8660                                  ; the stub table of the various entry points in the resident code segment.
  8661                                  ; Some of them are interrupt entry points and some of them are entries from
  8662                                  ; the transient to the resident code segment.
  8663                                  ;
  8664                                  ;	ENTRY:	ds = RESGROUP
  8665                                  ;		es:di = segment:offset of final location of resident code
  8666                                  ;
  8667                                  ;	EXIT:	All segments and offsets patched into the stub table
  8668                                  ;
  8669                                  ;	REGISTERS AFFECTED: ax, bx, cx, dx, si, di
  8670                                  
  8671                                  patch_stub:	;proc near
  8672                                  	;assume	ds:RESGROUP
  8673                                  	
  8674 00001BC1 06                      	push	es
  8675                                  
  8676 00001BC2 8CC3                    	mov	bx,es			;bx = resident code segment
  8677 00001BC4 89FA                    	mov	dx,di
  8678                                  	;mov	di,offset DATARES:Int2f_Entry
  8679 00001BC6 BF[0400]                	mov	di,Int2f_Entry
  8680                                  	;mov	si,offset RESGROUP:Reloc_Table
  8681 00001BC9 BE[A620]                	mov	si,Reloc_Table
  8682 00001BCC 1E                      	push	ds
  8683 00001BCD 07                      	pop	es			;es = RESGROUP = DATARES
  8684                                  
  8685                                  ;bx:dx = segment:offset of resident code segment
  8686                                  ;es:di = entry point table in stub
  8687                                  ;ds:si = offset table in INIT segment -- offsets of code entry points now
  8688                                  
  8689                                  	;mov	cx,NUM_RELOC_ENTRIES	;number of entry points
  8690 00001BCE B90B00                  	mov	cx,11 ; MSDOS 5.0 COMMAND.COM
  8691                                  patchlp:
  8692 00001BD1 AD                      	lodsw				;get current offset
  8693 00001BD2 01D0                    	add	ax,dx			;offset it by code seg location 
  8694 00001BD4 AB                      	stosw				;store offset
  8695 00001BD5 89D8                    	mov	ax,bx			
  8696 00001BD7 AB                      	stosw				;store segment 
  8697 00001BD8 E2F7                    	loop	patchlp
  8698                                  
  8699 00001BDA 07                      	pop	es
  8700 00001BDB C3                      	retn
  8701                                  
  8702                                  ;Patch_stub	endp
  8703                                  
  8704                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8705                                  
  8706                                  	; MSDOS 6.0
  8707                                  ;*** Patch_segs -- This routine patches the segment values in the dword 
  8708                                  ; pointers that the stub uses to jump to the actual handler. These values 
  8709                                  ; are temporarily needed to handle these interrupts if they occur before
  8710                                  ; the resident is relocated to its final position and all the addresses of
  8711                                  ; the handlers have been updated.
  8712                                  ;
  8713                                  ;	ENTRY:	es = PSP segment = code segment
  8714                                  ;
  8715                                  ;	EXIT:	Current segment values patched into the jump table in the
  8716                                  ;		stub.
  8717                                  ;
  8718                                  ;	REGISTERS AFFECTED: ax, cx, di
  8719                                  
  8720                                  patch_segs:	;proc near
  8721                                  
  8722                                  	;mov	di,offset RESGROUP:Int2f_Entry
  8723 00001BDC BF[0400]                	mov	di,Int2f_Entry 
  8724 00001BDF B90400                  	mov	cx,4			;we have to patch 4 handlers
  8725 00001BE2 83C702                  	add	di,2
  8726 00001BE5 8CC0                    	mov	ax,es
  8727                                  pseglp:
  8728 00001BE7 AB                      	stosw				;store the segment value
  8729 00001BE8 83C702                  	add	di,2			;skip the next offset value
  8730 00001BEB E2FA                    	loop	pseglp
  8731                                  
  8732 00001BED C3                      	retn
  8733                                  
  8734                                  ;Patch_segs	endp
  8735                                  
  8736                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8737                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E2Ch
  8738                                  
  8739                                  	; MSDOS 6.0
  8740                                  ;*** get_XMMAddr -- This routine gets the call address for the XMM driver
  8741                                  ; by issuing the appropriate int 2fh. This is stored in a stub variable 
  8742                                  ; and is used by the stub when we have to jump to the resident in HMA
  8743                                  ;
  8744                                  ;	ENTRY:	ds = RESGROUP
  8745                                  ;
  8746                                  ;	EXIT:	XMMCallAddr = XMM driver far call address
  8747                                  ;
  8748                                  ;	REGISTERS AFFECTED:
  8749                                  ;
  8750                                  
  8751                                  get_XMMAddr:	;proc near
  8752                                  	;assume	ds:RESGROUP
  8753                                  
  8754 00001BEE 06                      	push	es
  8755                                  
  8756                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK
  8757 00001BEF B80043                  	mov	ax,4300h
  8758 00001BF2 CD2F                    	int	2Fh
  8759                                  		; - Multiplex - XMS - INSTALLATION CHECK
  8760                                  		; Return: AL = 80h XMS driver installed
  8761                                  		; AL <> 80h no driver
  8762 00001BF4 3C80                    	cmp	al,80h			; Q: installed
  8763 00001BF6 750D                    	jne	short cXMMexit		; N: set error, quit
  8764                                  ;
  8765                                  ; get the XMM control functions entry point, save it, we
  8766                                  ; need to call it later.
  8767                                  ;
  8768                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR
  8769 00001BF8 B81043                  	mov	ax,4310h
  8770 00001BFB CD2F                    	int	2Fh
  8771                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
  8772                                  		; Return: ES:BX -> driver entry point
  8773                                  
  8774 00001BFD 891E[3000]              	mov	[XMMCallAddr], bx
  8775 00001C01 8C06[3200]              	mov	[XMMCallAddr+2],es
  8776                                  cXMMexit:
  8777 00001C05 07                      	pop	es
  8778 00001C06 C3                      	retn				; done
  8779                                  
  8780                                  ;get_XMMAddr	endp
  8781                                  
  8782                                  ;=============================================================================
  8783                                  ; UNINIT.ASM, MSDOS 6.0, 1991
  8784                                  ;=============================================================================
  8785                                  ; 24/09/2018 - Retro DOS v3.0
  8786                                  
  8787                                  ; (30/04/2018 - Retro DOS v2.0, MSDOS 2.11 COMMAND.COM)
  8788                                  
  8789                                  ; TITLE	COMMAND Initialization messages
  8790                                  
  8791                                  ;INIT	SEGMENT PUBLIC PARA
  8792                                  
  8793                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8794                                  
  8795                                  	; 25/09/2018
  8796                                  	; (15 bytes filler)
  8797 00001C07 00                      	db 0
  8798                                  	;db "25/9/2018 ETAN"
  8799                                  	; 15/06/2023
  8800                                  	;db "15/6/2023 ETAN"	
  8801                                  	; 31/07/2024
  8802 00001C08 33312F372F32303234-     	db "31/7/2024 ETAN"
  8802 00001C11 204554414E         
  8803 00001C16 00                      	db 0
  8804                                  
  8805                                  ; 30/01/2023
  8806                                  %if 0
  8807                                  	; MSDOS 3.3 COMMAND.COM - offset 145Eh
  8808                                  	;dw 0
  8809                                  COPYRIGHTMSG:	; MSDOS 3.3 COMMAND.COM - offset 1460h
  8810                                  	db 0Dh,0Ah
  8811                                  	db 0Dh,0Ah
  8812                                  	db 'Microsoft(R) MS-DOS(R)  Version 3.30'
  8813                                  	db 0Dh,0Ah
  8814                                  	db '             (C)Copyright Microsoft Corp 1981-1987               '
  8815                                  	db ' ',0Dh,0Ah
  8816                                  	db '                                                   ',
  8817                                  	db 0Dh,0Ah,0
  8818                                  
  8819                                  	times 43 db 20h
  8820                                  
  8821                                  _152Fh:	db 'Specified COMMAND search directory bad',0Dh,0Ah,0
  8822                                  BADCOMLKMES:
  8823                                  	dw _152Fh
  8824                                  
  8825                                  _155Ah:	db 'Specified COMMAND search directory bad access denied',0Dh,0Ah,0
  8826                                  BADCOMACCMSG:
  8827                                  	dw _155Ah
  8828                                  
  8829                                  _1593h:	db 'Access denied',0Dh,0Ah,0
  8830                                  ACCDENERR:
  8831                                  	dw _1593h
  8832                                  
  8833                                  _15A5h:	db 'Out of environment space',0Dh,0Ah,0
  8834                                  OUTENVMSG:
  8835                                  	dw _15A5h
  8836                                  
  8837                                  BADVERMSG:
  8838                                  	db 'Incorrect DOS version',0Dh,0Ah,'$'
  8839                                  
  8840                                  BADENVSIZMSG:
  8841                                  	db 'Invalid environment size specified',0Dh,0Ah,'$'
  8842                                  
  8843                                  HEADERPTR:
  8844                                  	dw COPYRIGHTMSG
  8845                                  %endif
  8846                                  
  8847                                  ; 30/01/2023
  8848                                  ;align 16
  8849                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8850                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E50h 
  8851                                  ICONDEV:
  8852 00001C17 2F4445562F                      db '/DEV/'
  8853 00001C1C 434F4E000000000000      	db 'CON',0,0,0,0,0,0	; Room for 8 char device	
  8854                                  BADCSPFL:
  8855 00001C25 00                      	db 0
  8856                                  COMSPECT:
  8857 00001C26 5C434F4D4D414E442E-     	db '\COMMAND.COM',0
  8857 00001C2F 434F4D00           
  8858 00001C33 00                      	db 0
  8859                                  AUTOBAT:
  8860 00001C34 003A5C4155544F4558-     	db 0,':\AUTOEXEC.BAT',0,0Dh
  8860 00001C3D 45432E424154000D   
  8861                                  ;KAUTOBAT:
  8862                                  	;db 0,':\KAUTOEXEC.BAT',0,0Dh 
  8863                                  PRDATTM:
  8864 00001C45 FF                      	db -1 ; 0FFh		; Init not to prompt for date time
  8865                                  INITADD:
  8866 00001C46 00000000                	dd 0
  8867                                  print_add:
  8868 00001C4A [BF4D]                  	dw Printf_Init
  8869 00001C4C 0000                    	dw 0
  8870                                  triage_add:
  8871 00001C4E [A12C]                  	dw Triage_Init
  8872 00001C50 0000                    	dw 0
  8873                                  ;CHUCKENV:
  8874                                  AllocedEnv:
  8875 00001C52 00                      	db 0
  8876                                  
  8877                                  ; 30/01/2023 - MSDOS 3.3
  8878                                  ;COMSPOFFSET:
  8879                                  ;ECOMLOC:
  8880                                  ;	;dw 0Eh
  8881                                  ;	;dw offset ENVIRONMENT:ECOMSPEC-10h
  8882                                  ;	dw ECOMSPEC-ENVIRONMENT ; 30/04/2018	
  8883                                  ;COMSPSTRING:
  8884                                  ;	db 'COMSPEC='
  8885                                  
  8886                                  ; 30/01/2023 - MSDOS 5.0 & MSDOS 6.0
  8887                                  PathString:
  8888 00001C53 504154483D00            	db 'PATH=',0
  8889                                  PathStrLen equ $-PathString-1
  8890                                  ; MSDOS 6.0
  8891                                  ;DefPathString:
  8892                                  ;	db 'C:\MSDOS',0
  8893                                  ;DefPathStrLen equ  $-DefPathString-1
  8894                                  ;DefPath2String:
  8895                                  ;	db 'C:\DOS',0
  8896                                  ;DefPath2StrLen equ $-DefPath2String-1
  8897                                  ;
  8898                                  ;PrmptString:
  8899                                  ;	db 'PROMPT=$P$G',0
  8900                                  ;PrmptStrLen equ $-PrmptString-1
  8901                                  ;PrmptStrLen2 equ 7		; length of PROMPT=
  8902                                  ;ComspOffset:
  8903                                  ;	dw 0
  8904                                  ComspString:
  8905 00001C59 434F4D535045433D5C-     	db 'COMSPEC=\COMMAND.COM',0
  8905 00001C62 434F4D4D414E442E43-
  8905 00001C6B 4F4D00             
  8906                                  ComspStrLen equ 8		; length of COMSPEC=
  8907                                  ComspStrLen2 equ $-ComspString-1
  8908                                  				; length of full COMSPEC
  8909                                  	; 29/01/2023
  8910                                  ;equal_sign:
  8911                                  ;equalsign:
  8912                                  ;	db '='
  8913                                  ;letter_a:
  8914                                  ;lcasea:
  8915                                  ;	db 'a'
  8916                                  ;letter_z:
  8917                                  ;lcasez:
  8918                                  ;	db 'z'
  8919                                  	; 30/01/2023
  8920                                  ;;slash_chr:
  8921                                  ;;	db '/'
  8922                                  ;;bslash_chr:
  8923                                  ;;	db '\'
  8924                                  ;space_chr:
  8925                                  ;;space:
  8926                                  ;	db 20h
  8927                                  ;;letter_p:
  8928                                  ;;	db 'p'
  8929                                  ;;letter_d:
  8930                                  ;;	db 'd'
  8931                                  ;;letter_c:
  8932                                  ;;	db 'c'
  8933                                  	; 16/04/2023
  8934                                  ; MSDOS 5.0 & MSDOS 6.0
  8935                                  ;scswitch:
  8936                                  ;	db 'C'		; Single command
  8937                                  ;;skswitch:
  8938                                  ;	db 'K' ; MSDOS 6.0
  8939                                  ;;letter_A:
  8940                                  ;ucasea: ; 21/01/2023 
  8941                                  ;	db 'A'
  8942                                  
  8943                                  	; 30/01/2023
  8944                                  EnvSiz:
  8945 00001C6E 0000                    	dw 0		; size user wants to allocate
  8946                                  EnvMax:
  8947 00001C70 0000                    	dw 0		; maximum size allowed
  8948                                  OldEnv:
  8949 00001C72 0000                    	dw 0		; envirseg at initialization
  8950                                  UsedEnv:
  8951 00001C74 0000                    	dw 0		; amount of envirseg used
  8952                                  	; MSDOS 5.0 & MSDOS 6.0
  8953                                  PARS_MSG_OFF:
  8954 00001C76 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE OFFSET
  8955                                  PARS_MSG_SEG:
  8956 00001C78 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE SEGMENT
  8957                                  
  8958                                  ;Do not separate the following two words. Used to call transient PARSE routine
  8959                                  
  8960                                  Init_Parse:
  8961                                  	;dw 4FFBh	; MSDOS 5.0 COMMAND.COM (TRANGROUP:APPEND_PARSE)
  8962                                  init_p:
  8963 00001C7A [BB4D]                  	dw append_parse
  8964                                  initend:
  8965 00001C7C 0000                    	dw 0		; segment address of end of init
  8966                                  TrnSize:
  8967 00001C7E 0000                    	dw 0		; size of transient in paragraphs
  8968                                  
  8969                                  ; 23/07/2024 - Retro DOS v4.1 (& 4.0) COMMAND.COM
  8970                                  ;%if 0
  8971                                  resetenv:
  8972                                  	;dw 0		; set if we need to setblck env at endinit
  8973                                  	; 23/07/2024
  8974 00001C80 00                      	db 0
  8975                                  ;%endif
  8976                                  
  8977                                  ext_msg:
  8978 00001C81 00                      	db 0		; set if /MSG switch entered
  8979                                  eswitch:
  8980 00001C82 00                      	db 0		; set if /e was entered
  8981                                  dswitch:
  8982 00001C83 00                      	db 0		; set if /d was entered
  8983                                  parsemes_ptr:
  8984 00001C84 0000                    	dw 0		; word to store parse error number
  8985                                  
  8986                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8987                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1ED6h 
  8988                                  
  8989                                  	; MSDOS 6.0 (UINIT.ASM, 1991)
  8990                                  ;  The following parse control block is used for COMMAND. This block is
  8991                                  ;  used for parsing during initialization. The syntax for COMMAND is:
  8992                                  ;  COMMAND [/?] [d:][path][/P][/F][/D][/E:xxxxx][/MSG][/C executable]
  8993                                  ;
  8994                                  ;  Anything on the command line after the /C switch will be passed to the
  8995                                  ;  executable command, so if /C is used, it must be specified last. The
  8996                                  ;  /MSG switch can only be specified if the /P switch is specified.
  8997                                  ;
  8998                                  ;  The /? switch causes help text to be displayed. Any other options
  8999                                  ;  on the command line are ignored. Command.com will not load if /?
  9000                                  ;  is specified.
  9001                                  
  9002                                  INTERNAT_INFO:		; used for country info after parsing is completed
  9003                                  PARSE_COMMAND:
  9004 00001C86 [891C]                  	dw COMMAND_PARMS
  9005 00001C88 00                      	db 0			; no extra delimiter
  9006                                  COMMAND_PARMS:
  9007 00001C89 0002                    	db 0,2			; 1 positional parm
  9008 00001C8B [9F1C]                  	dw COMMAND_FILE
  9009 00001C8D [9F1C]                  	dw COMMAND_FILE
  9010                                          ; MSDOS 5.0
  9011 00001C8F 07                      	db 7			; 7 switches
  9012                                  	; MSDOS 6.0
  9013                                  	;db 8 			; 8 switches
  9014 00001C90 [A81C]                  	dw COMMAND_SWITCH1
  9015 00001C92 [B41C]                  	dw COMMAND_SWITCH2
  9016 00001C94 [C01C]                  	dw COMMAND_SWITCH3
  9017 00001C96 [CC1C]                  	dw COMMAND_SWITCH4
  9018 00001C98 [E51C]                  	dw COMMAND_SWITCH5
  9019 00001C9A [F11C]                  	dw COMMAND_SWITCH6
  9020 00001C9C [FF1C]                  	dw COMMAND_SWITCH7
  9021                                  	;dw COMMAND_SWITCH8 ; MSDOS 6.0
  9022 00001C9E 00                      	db 0			; no keywords
  9023                                  
  9024                                  COMMAND_FILE:
  9025 00001C9F 0102                    	dw 0201h		; filespec - optional
  9026 00001CA1 0100                    	dw 1			; capitalize - file table
  9027 00001CA3 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9028 00001CA5 [131D]                  	dw NO_VAL 		;
  9029 00001CA7 00                      	db 0			; no keywords
  9030                                  
  9031                                  COMMAND_SWITCH1:
  9032 00001CA8 0000                    	dw 0			; no match flags
  9033 00001CAA 0200                    	dw 2			; capitalize by char table
  9034 00001CAC [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9035 00001CAE [131D]                  	dw NO_VAL 		;
  9036 00001CB0 01                      	db 1			; 1 keyword
  9037                                  COMMAND_P_SYN:
  9038 00001CB1 2F5000                  	db '/P',0		; /P switch
  9039                                  
  9040                                  COMMAND_SWITCH2:
  9041 00001CB4 0000                    	dw 0			; no match flags
  9042 00001CB6 0200                    	dw 2			; capitalize by char table
  9043 00001CB8 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9044 00001CBA [131D]                  	dw NO_VAL 		;
  9045 00001CBC 01                      	db 1			; 1 keyword
  9046                                  COMMAND_F_SYN:
  9047 00001CBD 2F4600                  	db '/F',0		; /F switch
  9048                                  
  9049                                  COMMAND_SWITCH3:
  9050 00001CC0 0000                    	dw 0			; no match flags
  9051 00001CC2 0200                    	dw 2			; capitalize by char table
  9052 00001CC4 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9053 00001CC6 [131D]                  	dw NO_VAL 		;
  9054 00001CC8 01                      	db 1			; 1 keyword
  9055                                  COMMAND_D_SYN:
  9056 00001CC9 2F4400                  	db '/D',0		; /D switch
  9057                                  
  9058                                  COMMAND_SWITCH4:
  9059 00001CCC 0080                    	dw 8000h		; numeric value - required
  9060 00001CCE 0000                    	dw 0			; no function flags
  9061 00001CD0 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9062 00001CD2 [D81C]                  	dw COMMAND_E_VAL	; pointer to value list
  9063 00001CD4 01                      	db 1			; 1 keyword
  9064                                  COMMAND_E_SYN:
  9065 00001CD5 2F4500                  	db '/E',0		; /E switch
  9066                                  
  9067                                  COMMAND_E_VAL:
  9068 00001CD8 01                      	db 1			;
  9069 00001CD9 01                      	db 1			; 1 range
  9070 00001CDA 01                      	db 1			; returned if result
  9071                                  	;dd ENVSML,ENVBIG	; minimum & maximum value
  9072                                  	; MSDOS 5.0 COMMAND.COM
  9073                                  	; (RESGROUP:1F2Bh)
  9074 00001CDB A0000000                	dd 160	 ; ENVSML
  9075 00001CDF 00800000                	dd 32768 ; ENVBIG
  9076 00001CE3 00                      	db 0			; no numeric values
  9077 00001CE4 00                      	db 0			; no string values
  9078                                  
  9079                                  COMMAND_SWITCH5:
  9080 00001CE5 0000                    	dw 0			; no match flags
  9081 00001CE7 0200                    	dw 2			; capitalize by char table
  9082 00001CE9 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9083 00001CEB [131D]                  	dw NO_VAL 		;
  9084 00001CED 01                      	db 1			; 1 keyword
  9085                                  COMMAND_C_SYN:
  9086 00001CEE 2F4300                  	db '/C',0		; /C switch
  9087                                  
  9088                                  COMMAND_SWITCH6:
  9089 00001CF1 0000                    	dw 0			; no match flags
  9090 00001CF3 0200                    	dw 2			; capitalize by char table
  9091 00001CF5 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9092 00001CF7 [131D]                  	dw NO_VAL 		;
  9093 00001CF9 01                      	db 1			; 1 keyword
  9094                                  COMMAND_M_SYN:
  9095 00001CFA 2F4D534700              	db '/MSG',0		; /MSG switch
  9096                                  
  9097                                  COMMAND_SWITCH7:
  9098 00001CFF 0000                    	dw 0			; no match flags
  9099 00001D01 0200                    	dw 2			; capitalize by char table
  9100 00001D03 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9101 00001D05 [131D]                  	dw NO_VAL 		;
  9102 00001D07 01                      	db 1			; 1 keyword
  9103                                  COMMAND_?_SYN:
  9104 00001D08 2F3F00                  	db '/?',0 		; /? switch
  9105                                  
  9106                                  	; MSDOS 6.0
  9107                                  ;COMMAND_SWITCH8:
  9108                                  ;	dw 0			; no match flags
  9109                                  ;	dw 2			; capitalize by char table
  9110                                  ;	dw COMND1_OUTPUT	; result buffer
  9111                                  ;	dw NO_VAL 		;
  9112                                  ;	db 1			; 1 keyword
  9113                                  ;COMMAND_K_SYN:
  9114                                  ;	db '/K',0		; /K switch
  9115                                  
  9116                                  COMND1_OUTPUT:
  9117                                  COMND1_TYPE:
  9118 00001D0B 00                      	db 0			; type
  9119                                  COMND1_CODE:
  9120 00001D0C 00                      	db 0			; return value
  9121                                  COMND1_SYN:
  9122 00001D0D 0000                    	dw 0			; synonym pointer
  9123                                  COMND1_ADDR:
  9124 00001D0F 00000000                	dd 0			; numeric value / address
  9125                                  				; of string value
  9126                                  NO_VAL:
  9127 00001D13 00                      	db 0			; no values
  9128                                  num_positionals:
  9129 00001D14 0000                    	dw 0			; counter for positionals
  9130                                  old_parse_ptr:
  9131 00001D16 0000                    	dw 0			; SI position before calling parser
  9132                                  
  9133                                  	; 30/01/2023
  9134                                  ;***	INITIALIZATION MESSAGES
  9135                                  ;	-------------------------
  9136                                  ;	include	comimsg.inc	;M00
  9137                                  ;-----------------------------------------------------------------------------	
  9138                                  
  9139                                  BADVERMSG:
  9140 00001D18 17                      	db 23
  9141 00001D19 496E636F7272656374-     	db 'Incorrect DOS version',0Dh,0Ah
  9141 00001D22 20444F532076657273-
  9141 00001D2B 696F6E0D0A         
  9142                                  OUTENVMSG:
  9143 00001D30 1A                      	db 26
  9144 00001D31 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
  9144 00001D3A 7669726F6E6D656E74-
  9144 00001D43 2073706163650D0A   
  9145                                  COPYRIGHTMSG:
  9146 00001D4B 5E                      	db 94
  9147 00001D4C 0D0A                    	db 0Dh,0Ah
  9148 00001D4E 0D0A                    	db 0Dh,0Ah
  9149 00001D50 4D6963726F736F6674-     	db 'Microsoft(R) MS-DOS(R) Version 5.00',0Dh,0Ah
  9149 00001D59 285229204D532D444F-
  9149 00001D62 532852292056657273-
  9149 00001D6B 696F6E20352E30300D-
  9149 00001D74 0A                 
  9150 00001D75 202020202020202020-     	db '             (C)Copyright Microsoft Corp 1981-1991.',0Dh,0Ah
  9150 00001D7E 20202020284329436F-
  9150 00001D87 70797269676874204D-
  9150 00001D90 6963726F736F667420-
  9150 00001D99 436F72702031393831-
  9150 00001DA2 2D313939312E0D0A   
  9151                                  BADCOMLKMES:
  9152 00001DAA 28                      	db 40
  9153 00001DAB 537065636966696564-     	db 'Specified COMMAND search directory bad',0Dh,0Ah
  9153 00001DB4 20434F4D4D414E4420-
  9153 00001DBD 736561726368206469-
  9153 00001DC6 726563746F72792062-
  9153 00001DCF 61640D0A           
  9154                                  BADCOMACCMSG:
  9155 00001DD3 36                      	db 54
  9156 00001DD4 537065636966696564-     	db 'Specified COMMAND search directory bad '
  9156 00001DDD 20434F4D4D414E4420-
  9156 00001DE6 736561726368206469-
  9156 00001DEF 726563746F72792062-
  9156 00001DF8 616420             
  9157 00001DFB 616363657373206465-     	db 'access denied',0Dh,0Ah
  9157 00001E04 6E6965640D0A       
  9158                                  HELPMSG1:
  9159 00001E0A 3C                      	db 60
  9160 00001E0B 537461727473206120-     	db 'Starts a new instance of the MS-DOS command interpreter.',0Dh,0Ah
  9160 00001E14 6E657720696E737461-
  9160 00001E1D 6E6365206F66207468-
  9160 00001E26 65204D532D444F5320-
  9160 00001E2F 636F6D6D616E642069-
  9160 00001E38 6E7465727072657465-
  9160 00001E41 722E0D0A           
  9161 00001E45 0D0A                    	db 0Dh,0Ah
  9162                                  HELPMSG2:
  9163 00001E47 46                      	db 70
  9164 00001E48 434F4D4D414E44205B-     	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P] [/C string] [/MSG]'
  9164 00001E51 5B64726976653A5D70-
  9164 00001E5A 6174685D205B646576-
  9164 00001E63 6963655D205B2F453A-
  9164 00001E6C 6E6E6E6E6E5D205B2F-
  9164 00001E75 505D205B2F43207374-
  9164 00001E7E 72696E675D205B2F4D-
  9164 00001E87 53475D             
  9165 00001E8A 0D0A                    	db 0Dh,0Ah
  9166 00001E8C 0D0A                    	db 0Dh,0Ah
  9167                                  HELPMSG3:
  9168 00001E8E 48                              db 72
  9169 00001E8F 20205B64726976653A-     	db '  [drive:]path    Specifies the directory containing COMMAND.COM '
  9169 00001E98 5D7061746820202020-
  9169 00001EA1 537065636966696573-
  9169 00001EAA 207468652064697265-
  9169 00001EB3 63746F727920636F6E-
  9169 00001EBC 7461696E696E672043-
  9169 00001EC5 4F4D4D414E442E434F-
  9169 00001ECE 4D20               
  9170 00001ED0 66696C652E0D0A          	db 'file.',0Dh,0Ah
  9171                                  HELPMSG4:
  9172 00001ED7 4D                      	db 77
  9173 00001ED8 202064657669636520-     	db '  device          Specifies the device to use for command input and '
  9173 00001EE1 202020202020202020-
  9173 00001EEA 537065636966696573-
  9173 00001EF3 207468652064657669-
  9173 00001EFC 636520746F20757365-
  9173 00001F05 20666F7220636F6D6D-
  9173 00001F0E 616E6420696E707574-
  9173 00001F17 20616E6420         
  9174 00001F1C 6F75747075742E0D0A      	db 'output.',0Dh,0Ah
  9175                                  HELPMSG5:
  9176 00001F25 45                      	db 69
  9177 00001F26 20202F453A6E6E6E6E-     	db '  /E:nnnnn        Sets the initial environment size to nnnnn bytes.'
  9177 00001F2F 6E2020202020202020-
  9177 00001F38 536574732074686520-
  9177 00001F41 696E697469616C2065-
  9177 00001F4A 6E7669726F6E6D656E-
  9177 00001F53 742073697A6520746F-
  9177 00001F5C 206E6E6E6E6E206279-
  9177 00001F65 7465732E           
  9178 00001F69 0D0A                    	db 0Dh,0Ah
  9179                                  HELPMSG6:
  9180 00001F6B 4D                      	db 77
  9181 00001F6C 20202F502020202020-     	db '  /P              Makes the new command interpreter permanent '
  9181 00001F75 202020202020202020-
  9181 00001F7E 4D616B657320746865-
  9181 00001F87 206E657720636F6D6D-
  9181 00001F90 616E6420696E746572-
  9181 00001F99 707265746572207065-
  9181 00001FA2 726D616E656E7420   
  9182 00001FAA 2863616E2774206578-     	db '(can',27h,'t exit).',0Dh,0Ah
  9182 00001FB3 6974292E0D0A       
  9183                                  HELPMSG7:
  9184 00001FB9 50                      	db 80
  9185 00001FBA 20202F432073747269-     	db '  /C string       Carries out the command specified by string, and '
  9185 00001FC3 6E6720202020202020-
  9185 00001FCC 43617272696573206F-
  9185 00001FD5 75742074686520636F-
  9185 00001FDE 6D6D616E6420737065-
  9185 00001FE7 636966696564206279-
  9185 00001FF0 20737472696E672C20-
  9185 00001FF9 616E6420           
  9186 00001FFD 7468656E2073746F70-     	db 'then stops.',0Dh,0Ah
  9186 00002006 732E0D0A           
  9187                                  HELPMSG8:
  9188 0000200A 4E                      	db 78
  9189 0000200B 20202F4D5347202020-     	db '  /MSG            Specifies that all error messages be stored in '
  9189 00002014 202020202020202020-
  9189 0000201D 537065636966696573-
  9189 00002026 207468617420616C6C-
  9189 0000202F 206572726F72206D65-
  9189 00002038 737361676573206265-
  9189 00002041 2073746F7265642069-
  9189 0000204A 6E20               
  9190 0000204C 6D656D6F72792E2059-     	db 'memory. You',0Dh,0Ah
  9190 00002055 6F750D0A           
  9191                                  HELPMSG9:
  9192 00002059 38                      	db 56
  9193 0000205A 202020202020202020-     	db '                  need to specify /P with this switch.',0Dh,0Ah
  9193 00002063 202020202020202020-
  9193 0000206C 6E65656420746F2073-
  9193 00002075 706563696679202F50-
  9193 0000207E 207769746820746869-
  9193 00002087 73207377697463682E-
  9193 00002090 0D0A               
  9194                                  HelpMsgs:
  9195 00002092 [0A1E]                          dw HELPMSG1
  9196 00002094 [471E]                  	dw HELPMSG2
  9197 00002096 [8E1E]                  	dw HELPMSG3
  9198 00002098 [D71E]                  	dw HELPMSG4
  9199 0000209A [251F]                  	dw HELPMSG5
  9200 0000209C [6B1F]                  	dw HELPMSG6
  9201 0000209E [B91F]                  	dw HELPMSG7
  9202 000020A0 [0A20]                  	dw HELPMSG8
  9203 000020A2 [5920]                  	dw HELPMSG9
  9204                                  
  9205                                  	; 23/04/2023
  9206 000020A4 0000                    	dw 0
  9207                                  
  9208                                  ;-----------------------------------------------------------------------------
  9209                                  
  9210                                  ;SR;
  9211                                  ; This table of offsets is used by the init code to calculate the new offsets
  9212                                  ;for these labels after the resident code has been relocated
  9213                                  
  9214                                  ;Reloc_Table:
  9215                                  	;dw offset CODERES:MsgInt2fHandler
  9216                                  	;dw offset CODERES:Int_2e
  9217                                  	;dw offset CODERES:ContC
  9218                                  	;dw offset CODERES:DskErr
  9219                                  	;dw offset CODERES:Exec_Ret
  9220                                  	;dw offset CODERES:TRemCheck
  9221                                  	;dw offset CODERES:TrnLodCom1
  9222                                  	;dw offset CODERES:LodCom
  9223                                  	;dw offset CODERES:MsgRetriever
  9224                                  	;dw offset CODERES:THeadFix
  9225                                  	;dw offset CODERES:Lh_OffUnlink	; M003
  9226                                  
  9227                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9228                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:22F6h
  9229                                  
  9230                                  Reloc_Table:			          ; MSDOS 5.0 CODERES address
  9231 000020A6 1707                    	dw MsgInt2fHandler - RCODE_START  ; 738h
  9232 000020A8 7301                    	dw Int_2e - RCODE_START		  ; 177h	
  9233 000020AA 3300                    	dw ContC - RCODE_START		  ; 035h
  9234 000020AC 3404                    	dw DSKERR - RCODE_START		  ; 445h
  9235 000020AE 2700                    	dw Exec_Ret - RCODE_START	  ; 029h
  9236 000020B0 9702                    	dw TRemCheck - RCODE_START	  ; 2A3h
  9237 000020B2 1104                    	dw TrnLodCom1 - RCODE_START	  ; 422h
  9238 000020B4 AA01                    	dw LodCom - RCODE_START		  ; 1AEh
  9239 000020B6 5A07                    	dw MsgRetriever - RCODE_START	  ; 77Bh
  9240 000020B8 B602                    	dw THeadFix - RCODE_START	  ; 2C2h
  9241 000020BA D307                    	dw Lh_OffUnlink - RCODE_START	  ; 7F4h
  9242                                  
  9243                                  NUM_RELOC_ENTRIES equ ($-Reloc_Table)/2
  9244                                  
  9245                                  ResJmpTable:
  9246 000020BC 00000000                	dd 0			; stores prev stub jump table addr
  9247                                  FirstCom:
  9248 000020C0 00                      	db 0			; flag set if first command.com
  9249                                  DevFlag:
  9250 000020C1 00                      	db 0
  9251                                  PathFlag:
  9252 000020C2 00                      	db 0
  9253                                  
  9254                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:2313h
  9255                                  	;times 13 db 0
  9256                                  
  9257                                  ; 30/01/2023
  9258                                  coderes_end equ $
  9259                                  
  9260                                  ;INIT	ENDS
  9261                                  
  9262                                  ;	END
  9263                                  
  9264                                  ;-----------------------------------------------------------------------------
  9265                                  ; 14/10/2018 (Retro DOS v3.0 COMMAND.COM Signature)
  9266                                  ;-----------------------------------------------------------------------------
  9267                                  
  9268                                  ;db	"Retro DOS v3.0 COMMAND.COM by Erdogan Tan [2018]"
  9269                                  	; 30/01/2023
  9270 000020C3 00                      db	0
  9271                                  ;db	"Retro DOS v4.0 COMMAND.COM by Erdogan Tan [2023]"
  9272 000020C4 526574726F20444F53-     db	"Retro DOS v4 COMMAND.COM by Erdogan Tan [2024]" ; 21/07/2024	
  9272 000020CD 20763420434F4D4D41-
  9272 000020D6 4E442E434F4D206279-
  9272 000020DF 204572646F67616E20-
  9272 000020E8 54616E205B32303234-
  9272 000020F1 5D                 
  9273 000020F2 00                      db	0
  9274                                  
  9275                                  ;-----------------------------------------------------------------------------
  9276                                  ; 24/09/2018 (Retro DOS v3.0 COMMAND)
  9277                                  ;-----------------------------------------------------------------------------
  9278                                  
  9279                                  ;TAIL    SEGMENT PUBLIC PARA
  9280                                  ;        ORG     0
  9281                                  ;TRANSTART LABEL WORD
  9282                                  ;TAIL    ENDS
  9283                                  
  9284                                  ;ALIGN 16  ; 25/09/2018
  9285                                  
  9286                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9287                                  
  9288                                  numbertodiv equ ($-StartCode)+100h ; 16/04/2023
  9289                                  numbertomod equ (numbertodiv % 16)
  9290                                  
  9291                                  %if numbertomod>0 & numbertomod<16
  9292 000020F3 00<rep Dh>              	times (16-numbertomod) db 0
  9293                                  %endif
  9294                                  
  9295                                  ; 30/01/2023
  9296                                  ;TRANSTART:
  9297                                  
  9298                                  ; 21/04/2018 (Retro DOS v2.0 COMMAND)
  9299                                  ;	times	128 db 0	
  9300                                  
  9301                                  ;-----------------------------------------------------------------------------
  9302                                  ; SEGMENT - TRANSCODE
  9303                                  ;-----------------------------------------------------------------------------
  9304                                  
  9305                                  ;TRANGROUP: ; 21/04/2018
  9306                                  
  9307                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9308                                  ;-----------------------------------------------------------------------------
  9309                                  
  9310                                  ; MSDOS 3.3 COMMAND.COM Transient Portion Addresses
  9311                                  
  9312                                  ; 21/04/2018 - Retro DOS v2.0
  9313                                  ; transcom.s (COMMAND.COM source file 2 of 2) code/data addresses 
  9314                                  ; (these values must be changed when transcom.s source code is changed
  9315                                  ; and data offsets are changed)
  9316                                  ;
  9317                                  ; 30/04/2018
  9318                                  ; 29/04/2018
  9319                                  
  9320                                  ; 24/09/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9321                                  ;COMMAND      EQU  012CH
  9322                                  ;DATINIT      EQU  2091H
  9323                                  ;HEADCALL     EQU  428FH
  9324                                  ;TRANSPACEEND EQU  4D5CH
  9325                                  ;TRANDATAEND  EQU  3F44H
  9326                                  
  9327                                  ; 29/04/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9328                                  ;TRIAGE_INIT  EQU  1F15H
  9329                                  ;PRINTF_INIT  EQU  34E0H 
  9330                                  
  9331                                  ;GETEXTERRNUM EQU  1EEEH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr	
  9332                                  
  9333                                  ;TPA	EQU  4293H
  9334                                  ;TRNLEN	EQU  04D6H
  9335                                  
  9336                                  ; 20/10/2018 - Retro DOS v3.0 COMMAND.COM transient portion addresses
  9337                                  ;COMMAND      EQU  012CH
  9338                                  ;DATINIT      EQU  206FH
  9339                                  ;HEADCALL     EQU  426FH
  9340                                  ; 09/01/2023
  9341                                  ;TRANSPACEEND EQU  4D3CH
  9342                                  ;TRANDATAEND  EQU  3F24H
  9343                                  ;TRIAGE_INIT  EQU  1EF3H
  9344                                  ;PRINTF_INIT  EQU  34BFH 
  9345                                  ;
  9346                                  ;GETEXTERRNUM EQU  1ECCH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr
  9347                                  
  9348                                  ;-----------------------------------------------------------------------------
  9349                                  ; ARENA.INC, MSDOS 6.0, 1991
  9350                                  ;-----------------------------------------------------------------------------
  9351                                  ; 13/10/2018 - Retro DOS 3.0
  9352                                  ; 17/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9353                                  
  9354                                  ;BREAK <Memory arena structure>
  9355                                  
  9356                                  ; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  9357                                  
  9358                                  ; arena item
  9359                                  
  9360                                  struc ARENA
  9361 00000000 ??                        .signature:	resb 1		; 4D for valid item, 5A for last item
  9362 00000001 ????                      .owner:	resw 1		; owner of arena item
  9363 00000003 ????                      .size:	resw 1		; size in paragraphs of item
  9364                                  endstruc
  9365                                  
  9366                                  ;-----------------------------------------------------------------------------
  9367                                  ;START OF TRANSIENT PORTION
  9368                                  ;This code is loaded at the end of memory and may be overwritten by
  9369                                  ;memory-intensive user programs.
  9370                                  ;-----------------------------------------------------------------------------
  9371                                  
  9372                                  ; 16/04/2023
  9373                                  TRANSTART EQU ($-StartCode)+100h ; 18/04/2023
  9374                                  ; 29/09/2018
  9375                                  ; 31/01/2023 
  9376                                  ;TRANSTART:		; Offset 1660h in original MSDOS 3.3 COMMAND.COM
  9377                                  			; 09/01/2023
  9378                                  			; Offset 2320h in original MSDOS 5.0 COMMAND.COM
  9379                                  
  9380                                  ; 25/09/2018
  9381                                  ; (original MSDOS 3.3 COMMAND.COM TRIAGEERROR offset address)
  9382                                  ;
  9383                                  ; 'GET_EXT_ERR_NUMBER' ('TRIAGEERROR') procedure is at offset 354Eh 
  9384                                  ; in MSDOS 3.3 COMMAND.COM (It is at offset 1EEEh in transient porsion).	 	
  9385                                  ;
  9386                                  ;TRIAGEERROR EQU TRANSTART+GETEXTERRNUM-100H
  9387                                  ;
  9388                                  ;
  9389                                  ;COMTRANS:
  9390                                  ;
  9391                                  ; 20/10/2018 - Retro DOS v3.0	
  9392                                  ;INCBIN	"TRANCOM3.BIN"
  9393                                  ;
  9394                                  ;COMLEN	EQU $-COMTRANS ; End of COMMAND load.
  9395                                  ;
  9396                                  ; 29/04/2018
  9397                                  ;BSS_SIZE EQU TRANSPACEEND-TRANDATAEND	
  9398                                  ;
  9399                                  ;TIMES BSS_SIZE db 0
  9400                                  ;
  9401                                  ;COMLEN	EQU $-COMTRANS ; 30/04/2018
  9402                                  
  9403                                  ;COMMANDCOMSIZE equ $ - 100h
  9404                                  
  9405                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9406                                  ; ============================================================================
  9407                                  ; --- ('trancom5.s', 31/01/2023 - modified from 'trancom3.s', 20/10/2018) ----
  9408                                  ; ============================================================================
  9409                                  
  9410                                  ; ----------------------------------------------------------------------------
  9411                                  ; START OF TRANSIENT PORTION
  9412                                  ; ----------------------------------------------------------------------------
  9413                                  ; SEGMENT - TRANSCODE
  9414                                  ; ----------------------------------------------------------------------------
  9415                                  
  9416                                  ; 18/04/2023
  9417                                  section .TRANGROUP  vstart=0  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) 
  9418                                  
  9419                                  ; 18/04/2023
  9420                                  ;-----------------------------------------------------------------------------
  9421                                  ; TRANSCODE segment offset 0
  9422                                  TRANSIENTSTART:
  9423                                  
  9424                                  	; 31/01/2023
  9425 00000000 00<rep 100h>            	times 256 db 0		; Allow for 100H parameter area
  9426                                  
  9427                                  ;============================================================================
  9428                                  ; TCODE.ASM, MSDOS 6.0, 1991
  9429                                  ;============================================================================
  9430                                  ; 12/10/2018 - Retro DOS v3.0
  9431                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1)
  9432                                  
  9433                                  ;[ORG 100h]
  9434                                  
  9435                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0100h
  9436                                  
  9437                                  ; ---------------------------------------------------------------------------
  9438                                  		
  9439                                  		; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9440                                  		; (TRANGROUP:0100h)
  9441                                  SETDRV:
  9442 00000100 B40E                    	mov	ah,0Eh
  9443                                  	;mov	ah,SET_DEFAULT_DRIVE ; 0Eh
  9444 00000102 CD21                    	int	21h	; DOS -	SELECT DISK
  9445                                  			; DL = new default drive number
  9446                                  			;		(0 = A, 1 = B, ..)
  9447                                  			; Return: AL = number of logical drives
  9448                                  
  9449                                  ; ---------------------------------------------------------------------------
  9450                                  
  9451                                  ; TCOMMAND is the recycle point in COMMAND. Nothing is known here.
  9452                                  ; No registers (CS:IP) no flags, nothing.
  9453                                  
  9454                                  TCOMMAND:
  9455 00000104 2E8E1E[A58A]            	mov	ds,[cs:RESSEG]
  9456 00000109 B8FFFF                  	mov	ax,-1
  9457 0000010C 8706[9001]              	xchg	ax,[VerVal]
  9458 00000110 83F8FF                  	cmp	ax,-1
  9459 00000113 7404                    	je	short NOSETVER2
  9460 00000115 B42E                    	mov	ah,2Eh
  9461                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh
  9462 00000117 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
  9463                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
  9464                                  NOSETVER2:
  9465 00000119 2EFF1E[A38A]            	call	far [cs:HEADCALL]   ; Make sure header fixed
  9466 0000011E 31ED                    	xor	bp,bp		    ; Flag transient not read
  9467 00000120 833E[8E01]FF            	cmp	word [SingleCom],-1
  9468 00000125 7505                    	jne	short COMMAND
  9469                                  _$EXITPREP:
  9470 00000127 0E                      	push	cs
  9471 00000128 1F                      	pop	ds
  9472 00000129 E92020                  	jmp	_$EXIT		; Have finished the single command
  9473                                  
  9474                                  ; ---------------------------------------------------------------------------
  9475                                  ;
  9476                                  ; Main entry point from resident portion.
  9477                                  ;
  9478                                  ;   If BP <> 0, then we have just loaded transient portion otherwise we are
  9479                                  ;   just beginning the processing of another command.
  9480                                  ;
  9481                                  ; ---------------------------------------------------------------------------
  9482                                  
  9483                                  ; We are not always sure of the state of the world at this time. We presume
  9484                                  ; worst case and initialize the relevant registers: segments and stack.
  9485                                  
  9486                                  COMMAND:
  9487 0000012C FC                      	cld
  9488 0000012D 8CC8                    	mov	ax,cs
  9489 0000012F FA                      	cli
  9490 00000130 8ED0                    	mov	ss,ax
  9491                                  	;mov	sp,offset TRANGROUP:STACK
  9492                                  				; 07/06/2023
  9493 00000132 BC[0295]                	mov	sp,STACK	; 09854h for MSDOS 5.0 COMMAND.COM
  9494                                  				; 0AF24h for MSDOS 6.22 COMMAND.COM
  9495 00000135 FB                      	sti
  9496                                  		
  9497 00000136 8EC0                    	mov	es,ax
  9498                                  		
  9499                                  	; MSDOS 6.0
  9500 00000138 8ED8                    	mov	ds,ax		;AN000; set DS to transient
  9501                                  	;ASSUME	ES:TRANGROUP,DS:TRANGROUP ;AC000;
  9502                                  	;invoke	TSYSLOADMSG	;AN000; preload messages
  9503                                  	; 31/01/2023
  9504 0000013A E8714D                  	call	TSYSLOADMSG
  9505 0000013D C606[9A8D]00            	mov	byte [append_exec],0 ;AN041; set internal append state off
  9506                                  
  9507                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9508                                  	;mov	ds,[ss:RESSEG]
  9509                                  	; 31/01/2023
  9510 00000142 8E1E[A58A]              	mov	ds,[RESSEG]
  9511 00000146 36C606[8188]80          	mov	byte [ss:UCOMBUF],128 ; Init UCOMBUF	
  9512 0000014C 36C606[0489]80          	mov	byte [ss:COMBUF],128  ; Init COMBUF (Autoexec doing DATE)
  9513                                  
  9514                                  ; If we have just loaded the transient, then we do NOT need to initialize the
  9515                                  ; command buffer. ????  DO WE NEED TO RESTORE THE USERS DIRECTORY ????
  9516                                  ; I guess not: the only circumstances in which we reload the command processor
  9517                                  ; is after a transient program execution. In this case, we let the current
  9518                                  ; directory lie where it may.
  9519                                  
  9520 00000152 09ED                    	or	bp,bp		; See if just read
  9521 00000154 7409                    	jz	short TESTRDIR	; Not read, check user directory
  9522 00000156 36C706[8288]010D        	mov	word [ss:UCOMBUF+1],0D01h ; Reset buffer
  9523 0000015D EB17                    	jmp	short NOSETBUF
  9524                                  TESTRDIR:
  9525 0000015F 803E[8C01]00            	cmp	byte [RestDir],0
  9526 00000164 7410                    	jz	short NOSETBUF	; User directory OK
  9527 00000166 1E                      	push	ds
  9528                                  
  9529                                  ; We have an unusual situation to handle. The user *may* have changed his
  9530                                  ; directory as a result of an internal command that got aborted. Restoring it
  9531                                  ; twice may not help us: the problem may never go away. We just attempt it
  9532                                  ; once and give up.
  9533                                  
  9534 00000167 C606[8C01]00            	mov	byte [RestDir],0 ; Flag users dirs OK
  9535                                  
  9536                                  	; Restore users directory
  9537 0000016C 0E                      	push	cs
  9538 0000016D 1F                      	pop	ds
  9539 0000016E BA[8789]                	mov	dx,USERDIR1
  9540 00000171 B43B                    	mov	ah,3Bh
  9541                                  	;mov	ah,CHDir ; 3Bh
  9542 00000173 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
  9543                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
  9544 00000175 1F                      	pop	ds
  9545                                  NOSETBUF:
  9546 00000176 803E[0102]00            	cmp	byte [PipeFiles],0
  9547 0000017B 740A                    	jz	short NOPCLOSE	; Don't bother if they don't exist
  9548 0000017D 803E[0002]00            	cmp	byte [PipeFlag],0
  9549 00000182 7503                    	jnz	short NOPCLOSE	; Don't del if still piping
  9550 00000184 E8662B                  	call	PIPEDEL
  9551                                  NOPCLOSE:
  9552                                  	;mov	byte [0BE9h],0	; MSDOS 3.3
  9553                                  	; 31/01/2023
  9554 00000187 C606[8401]00            	mov	byte [ExtCom],0 ; Flag internal command
  9555 0000018C 8CC8                    	mov	ax,cs		; Get segment we're in
  9556 0000018E 8ED8                    	mov	ds,ax
  9557 00000190 50                      	push	ax
  9558                                  			; 07/06/2023 (INTERNATVARS addr = STACK addr)
  9559 00000191 BA[0295]                	mov	dx,INTERNATVARS ; 09854h for MSDOS 5.0 COMMAND.COM
  9560                                  				; 0AF24h for MSDOS 6.22 COMMAND.COM
  9561 00000194 B80038                  	mov	ax,3800h
  9562                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
  9563 00000197 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
  9564                                  			; get current-country info
  9565                                  			; DS:DX	-> buffer for returned info
  9566 00000199 58                      	pop	ax
  9567 0000019A 2B06[A78A]              	sub	ax,[TPA]	; AX=size of TPA in paragraphs
  9568 0000019E 53                      	push	bx
  9569 0000019F BB1000                  	mov	bx,16
  9570 000001A2 F7E3                    	mul	bx		; DX:AX=size of TPA in bytes
  9571 000001A4 5B                      	pop	bx
  9572 000001A5 09D2                    	or	dx,dx		; See if over 64K
  9573 000001A7 7403                    	jz	short SAVSIZ	; OK if not
  9574 000001A9 B8FFFF                  	mov	ax,-1		; If so, limit to 65535 bytes
  9575                                  SAVSIZ:
  9576                                  
  9577                                  ; AX is the number of bytes free in the buffer between the resident and the
  9578                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
  9579                                  
  9580 000001AC 3D0002                  	cmp	ax,512
  9581 000001AF 7603                    	jbe	short GOTSIZE
  9582                                  	;and	ax,~1FFh
  9583 000001B1 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FF
  9584                                  GOTSIZE:
  9585 000001B4 A3[C68A]                	mov	[BYTCNT],ax	; Max no. of bytes that can be buffered
  9586 000001B7 8E1E[A58A]              	mov	ds,[RESSEG]	; All batch work must use resident seg.
  9587                                  
  9588 000001BB F606[8801]01            	test	byte [EchoFlag],1 
  9589 000001C0 741E                    	jz	short GETCOM	; Don't do the CRLF
  9590 000001C2 E8072B                  	call	SINGLETEST
  9591 000001C5 7219                    	jb	short GETCOM
  9592 000001C7 F606[0002]FF            	test	byte [PipeFlag],0FFh ; -1
  9593 000001CC 7512                    	jnz	short GETCOM
  9594                                  				; G  Don't print prompt in FOR
  9595 000001CE F606[9401]FF            	test	byte [ForFlag],0FFh ; -1
  9596 000001D3 750B                    	jnz	short GETCOM
  9597                                  				; G  Don't print prompt if in batch
  9598 000001D5 F706[3401]FFFF          	test	word [Batch],0FFFFh ; -1
  9599 000001DB 7503                    	jnz	short GETCOM
  9600 000001DD E8F123                  	call	CRLF2
  9601                                  GETCOM:
  9602 000001E0 C606[9901]00            	mov	byte [Call_Flag],0 ; G Reset call flags
  9603 000001E5 C606[9A01]00            	mov	byte [Call_Batch_Flag],0
  9604 000001EA B419                    	mov	ah,19h
  9605                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  9606 000001EC CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
  9607 000001EE 36A2[B98A]              	mov	[ss:CURDRV],al
  9608 000001F2 F606[0002]FF            	test	byte [PipeFlag],0FFh ; -1 ; Pipe has highest presedence
  9609 000001F7 7403                    	jz	short NOPIPE
  9610 000001F9 E9BC2B                  	jmp	PIPEPROC	; Continue the pipeline
  9611                                  NOPIPE:
  9612 000001FC F606[8801]01            	test	byte [EchoFlag],1
  9613 00000201 7417                    	jz	short NOPDRV	; No prompt if echo off
  9614 00000203 E8C62A                  	call	SINGLETEST
  9615 00000206 7212                    	jb	short NOPDRV
  9616 00000208 F606[9401]FF            	test	byte [ForFlag],0FFh ; G  Don't print prompt in FOR	
  9617 0000020D 750B                    	jnz	short NOPDRV
  9618 0000020F F706[3401]FFFF          	test	word [Batch],0FFFFh ; G  Don't print prompt if in batch
  9619 00000215 750D                    	jnz	short TESTFORBAT
  9620 00000217 E8791B                  	call	PRINT_PROMPT	; Prompt the user
  9621                                  NOPDRV:
  9622 0000021A F606[9401]FF            	test	byte [ForFlag],0FFh ; FOR has next highest precedence
  9623 0000021F 7403                    	jz	short TESTFORBAT
  9624 00000221 E9B70B                  	jmp	FORPROC		; Continue the FOR
  9625                                  
  9626                                  TESTFORBAT:
  9627 00000224 36C606[508A]00          	mov	byte [ss:RE_INSTR],0 ; Turn redirection back off	
  9628 0000022A C606[AF01]00            	mov	byte [Re_OutStr],0  ; [0C09h] for MSDOS 3.3 
  9629 0000022F C606[AE01]00            	mov	byte [Re_Out_App],0 ; [0C08h] for MSDOS 3.3
  9630 00000234 C606[9301]00            	mov	byte [IfFlag],0	; no more ifs...
  9631 00000239 F706[3401]FFFF          	test	word [Batch],0FFFFh ; Batch has lowest precedence
  9632 0000023F 7441                    	jz	short ISNOBAT
  9633                                  
  9634                                  	; 31/01/2023
  9635                                  
  9636                                  	; MSDOS 6.0
  9637                                  
  9638                                  ;	Bugbug:	MULT_SHELL_GET no longer used?
  9639                                  
  9640 00000241 06                      	push	es			;AN000; save ES
  9641 00000242 1E                      	push	ds			;AN000; save DS
  9642                                  	;mov	ax,mult_shell_get	;AN000; check to see if SHELL has command
  9643                                  	; 05/02/2023
  9644 00000243 B80219                  	mov	ax,1902h
  9645 00000246 8E06[3401]              	mov	es,[Batch]		;AN000; get batch segment
  9646                                  	;mov	di,20h
  9647 0000024A BF2000                  	mov	di,BATCHSEGMENT.BatFile	;AN000; get batch file name
  9648 0000024D 0E                      	push	cs			;AN000; get local segment to DS
  9649 0000024E 1F                      	pop	ds			;AN000;
  9650                                  	;mov	dx,offset trangroup:combuf ;AN000; pass communications buffer
  9651 0000024F BA[0489]                	mov	dx,COMBUF
  9652 00000252 CD2F                    	int	2Fh			;AN000; call the shell
  9653                                  		; - Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE
  9654                                  		; ES:DI -> ASCIZ full filename of current batch file, with at least the
  9655                                  		; final filename element uppercased
  9656                                  		; DS:DX -> buffer for results
  9657                                  	;cmp	al,0FFh
  9658 00000254 3CFF                    	cmp	al,shell_action 	;AN000; does shell have a commmand?
  9659 00000256 1F                      	pop	ds			;AN000; restore DS
  9660 00000257 07                      	pop	es			;AN000; restore ES
  9661 00000258 7424                    	jz	short JDOCOM1		;AN000; yes - go process command
  9662                                  
  9663                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9664 0000025A 1E                      	push	ds
  9665 0000025B E81603                  	call	READBAT			; Continue BATCH
  9666 0000025E 1F                      	pop	ds
  9667 0000025F C606[9D01]00            	mov	byte [NullFlag],0	;G reset no command flag
  9668 00000264 F706[3401]FFFF          	test	word [Batch],0FFFFh
  9669 0000026A 7512                    	jnz	short JDOCOM1		;G if batch still in progress continue
  9670 0000026C 8B1E[9B01]              	mov	bx,[Next_Batch]
  9671                                  	; 31/01/2023
  9672 00000270 09DB                    	or	bx,bx
  9673                                  	;cmp	bx,0			;G see if there is a new batch file
  9674 00000272 740A                    	jz	short JDOCOM1		;G no - go do command
  9675 00000274 891E[3401]              	mov	[Batch],bx		;G get segment of next batch file
  9676 00000278 C706[9B01]0000          	mov	word [Next_Batch],0	;G reset next batch
  9677                                  JDOCOM1:
  9678 0000027E 0E                      	push	cs
  9679 0000027F 1F                      	pop	ds
  9680 00000280 EB55                    	jmp	short DOCOM1
  9681                                  ISNOBAT:
  9682 00000282 833E[8E01]00            	cmp	word [SingleCom],0
  9683 00000287 741C                    	jz	short REGCOM
  9684                                  	;mov	si,[SEMIPERMCOM] ;  MSDOS 6.0
  9685 00000289 BEFFFF                  	mov	si,0FFFFh 	 ;  MSDOS 3.3 & MSDOS 5.0
  9686 0000028C 8736[8E01]              	xchg	si,[SingleCom]
  9687 00000290 BF[0689]                	mov	di,COMBUF+2
  9688 00000293 31C9                    	xor	cx,cx
  9689                                  SINGLELOOP:
  9690 00000295 AC                      	lodsb
  9691 00000296 AA                      	stosb
  9692 00000297 41                      	inc	cx
  9693 00000298 3C0D                    	cmp	al,0Dh
  9694 0000029A 75F9                    	jnz	short SINGLELOOP
  9695 0000029C 49                      	dec	cx
  9696 0000029D 0E                      	push	cs
  9697 0000029E 1F                      	pop	ds
  9698 0000029F 880E[0589]              	mov	[COMBUF+1],cl
  9699                                  
  9700                                  ; do NOT issue a trailing CRLF...
  9701                                  
  9702 000002A3 EB32                    	jmp	short DOCOM1
  9703                                  
  9704                                  	;nop
  9705                                  
  9706                                  	; 31/01/2023 - Retro DOS v4.0 COMMAND.COM
  9707                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:02A6h
  9708                                  
  9709                                  ; We have a normal command.  
  9710                                  ; Printers are a bizarre quantity. Sometimes they are a stream and
  9711                                  ; sometimes they aren't. At this point, we automatically close all spool
  9712                                  ; files and turn on truncation mode.
  9713                                  
  9714                                  REGCOM:
  9715                                  	;mov	ax,(ServerCall shl 8) + 9
  9716                                  	; 31/01/2023
  9717 000002A5 B8095D                  	mov	ax,5D09h
  9718                                  	;mov	ax,(SERVERCALL<<8)+9
  9719 000002A8 CD21                    	int	21h	; DOS -	3.1+ internal -	FLUSH REDIRECTED PRINTER OUTPUT
  9720                                  	;mov	ax,(ServerCall shl 8) + 8
  9721 000002AA B8085D                  	mov	ax,5D08h
  9722                                  	;mov	ax,(SERVERCALL<<8)+8
  9723 000002AD B201                    	mov	dl,1
  9724 000002AF CD21                    	int	21h	; DOS -	3.1+ internal -	SET REDIRECTED PRINTER MODE
  9725                                  			; DL = 00h redirected output is	combined
  9726                                  			;      01h redirected output placed in separate	jobs
  9727                                  			; start	new print job now
  9728 000002B1 0E                      	push	cs
  9729 000002B2 1F                      	pop	ds	; Need local segment to point to buffer
  9730 000002B3 BA[8188]                	mov	dx,UCOMBUF
  9731                                  
  9732                                  	; MSDOS 6.0
  9733                                  ;	Try to read interactive command line via DOSKey.
  9734                                  ;	If that fails, use DOS Buffered Keyboard Input.
  9735                                  
  9736                                  	; 31/01/2023
  9737 000002B6 B81048                  	mov	ax,4810h	; AX = DOSKey Read Line function
  9738 000002B9 CD2F                    	int	2Fh
  9739 000002BB 09C0                    	or	ax,ax
  9740 000002BD 7404                    	jz	short GOTCOM	; DOSKey gave us a command line
  9741                                  
  9742 000002BF B40A                    	mov	ah,0Ah
  9743                                  	;mov	ah,Std_Con_String_Input	; AH = DOS Buffered Keyboard Input
  9744 000002C1 CD21                    	int	21h	; DOS -	BUFFERED KEYBOARD INPUT
  9745                                  			; DS:DX	-> buffer
  9746                                  GOTCOM:
  9747 000002C3 8A0E[8188]              	mov	cl,[UCOMBUF]
  9748 000002C7 30ED                    	xor	ch,ch
  9749 000002C9 83C103                  	add	cx,3
  9750 000002CC BE[8188]                	mov	si,UCOMBUF
  9751 000002CF BF[0489]                	mov	di,COMBUF
  9752 000002D2 F3A4                    	rep	movsb		; Transfer it to the cooked buffer
  9753                                  DOCOM:
  9754 000002D4 E8FA22                  	call	CRLF2
  9755                                  DOCOM1:
  9756 000002D7 E87E26                  	call	PRESCAN		; Cook the input buffer
  9757 000002DA 7406                    	jz	short NOPIPEPROC
  9758 000002DC E9582A                  	jmp	PIPEPROCSTRT	; Fire up the pipe
  9759                                  
  9760                                  NULLCOMJ:
  9761 000002DF E9FA00                  	jmp	NULLCOM
  9762                                  
  9763                                  NOPIPEPROC:
  9764 000002E2 E8502D                  	call	PARSELINE
  9765 000002E5 730B                    	jnb	short OKPARSE	; user error? or maybe we goofed?
  9766                                  BADPARSE:
  9767 000002E7 0E                      	push	cs
  9768 000002E8 1F                      	pop	ds
  9769 000002E9 BA[1F7F]                	mov	dx,BADNAM_PTR	; 31/01/2023
  9770 000002EC E8DA4A                  	call	std_eprintf
  9771 000002EF E912FE                  	jmp	TCOMMAND
  9772                                  
  9773                                  OKPARSE:
  9774                                  	;test	byte [ARGV0_ARG_FLAGS],2
  9775                                  	;test	byte [ARG+ARGV_ELE.argflags],2 ; wildcard
  9776                                  	; 01/02/2023
  9777 000002F2 F606[B68D]02            	test	byte [ARG+ARGV_ELE.argflags],2
  9778 000002F7 75EE                    	jnz	short BADPARSE	; ambiguous commands not allowed
  9779                                  	;cmp	word [ARG_ARGVCNT],0  ; there WAS a command, wasn't there?
  9780 000002F9 833E[7490]00            	cmp	word [ARG+ARG_UNIT.argvcnt],0
  9781 000002FE 74DF                    	jz	short NULLCOMJ
  9782                                  	;cmp	word [ARGV0_ARGLEN],0 ; probably an unnecessary check...
  9783 00000300 833E[B98D]00            	cmp	word [ARG+ARGV_ELE.arglen],0
  9784 00000305 74D8                    	jz	short NULLCOMJ	; guarantees argv[0] at least x<NULL>
  9785                                  
  9786 00000307 BE[0689]                	mov	si,COMBUF+2
  9787 0000030A BF[2F8B]                	mov	di,IDLEN
  9788                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9789                                  				; Make FCB with blank scan-off
  9790                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9791 0000030D B80129                  	mov	ax,2901h
  9792 00000310 CD21                    	int	21h	; DOS -	PARSE FILENAME
  9793                                  			; DS:SI	-> string to parse
  9794                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9795                                  			; AL = bit mask	to control parsing
  9796                                  	;mov	bx,[ARG_ARGV]
  9797 00000312 8B1E[B48D]              	mov	bx,[ARG+ARG_UNIT.argv] ; mov bx,[ARG]
  9798 00000316 807F013A                	cmp	byte [bx+1],':'	; was a drive specified?
  9799 0000031A 751B                    	jne	short DRVGD	; no, use default of zero...
  9800 0000031C 8A17                    	mov	dl,[bx]		; pick-up drive letter
  9801                                  	;mov	dl,[bx+ARGV_ELE.argpointer] ; mov dl,[bx+0]
  9802                                  	;and	dl,~20h
  9803 0000031E 80E2DF                  	and	dl,0DFh		; uppercase the sucker
  9804                                  	;sub	dl,[CAPITAL_A]	; convert it to a drive number, A=0
  9805                                  	; 31/01/2023
  9806 00000321 80EA41                  	sub	dl,'A'
  9807 00000324 3CFF                    	cmp	al,-1		; See what PARSE said about our drive letter.
  9808 00000326 740C                    	je	short DRVBADJ	; It was invalid.
  9809                                  	;mov	di,[ARGV0_ARGSTARTEL]
  9810 00000328 8B3E[B78D]              	mov	di,[ARG+ARGV_ELE.argstartel]
  9811 0000032C 803D00                  	cmp	byte [di],0	; is there actually a command there?
  9812 0000032F 7506                    	jne	short DRVGD	; if not, we have:  "d:", "d:\", "d:/"
  9813 00000331 E9CCFD                  	jmp	SETDRV		; and set drive to new drive spec
  9814                                  DRVBADJ:
  9815 00000334 E92325                  	jmp	DRVBAD
  9816                                  DRVGD:
  9817 00000337 8A05                    	mov	al,[di]
  9818 00000339 A2[C58A]                	mov	[SPECDRV],al
  9819 0000033C B020                    	mov	al,' '
  9820 0000033E B90900                  	mov	cx,9
  9821 00000341 47                      	inc	di
  9822 00000342 F2AE                    	repne	scasb		; Count number of letters in command name
  9823 00000344 B008                    	mov	al,8
  9824 00000346 28C8                    	sub	al,cl
  9825 00000348 A2[2F8B]                	mov	[IDLEN],al	; IDLEN is truly the length
  9826 0000034B BF8100                  	mov	di,81h
  9827 0000034E 56                      	push	si
  9828 0000034F BE[0689]                	mov	si,COMBUF+2	; Skip over all leading delims
  9829 00000352 E88922                  	call	scanoff
  9830                                  
  9831                                  	; 01/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9832                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0356h
  9833                                  
  9834                                  	; MSDOS 6.0
  9835                                  ;SR;
  9836                                  ; We are going to skip over the first char always. The logic is that the
  9837                                  ;command tail can never start from the first character. The code below is 
  9838                                  ;trying to figure out the command tail and copy it to the command line 
  9839                                  ;buffer in the PSP. However, if the first character happens to be a switch
  9840                                  ;character and the user given command line is a full 128 bytes, we try to
  9841                                  ;copy 128 bytes to the PSP while it can take only 127 chars. This extra
  9842                                  ;char overwrites the code and leads to a crash on future commands.
  9843                                  
  9844 00000355 46                      	inc	si ;  MSDOS 6.0
  9845                                  DO_SKIPCOM:
  9846 00000356 AC                      	lodsb			; move command line pointer over
  9847 00000357 E88C22                  	call	DELIM		; pathname -- have to do it ourselves
  9848 0000035A 740A                    	jz	short DO_SKIPPED ; 'cause parse_file_descriptor is dumb
  9849 0000035C 3C0D                    	cmp	al,0Dh		; can't always depend on argv[0].arglen
  9850 0000035E 7406                    	jz	short DO_SKIPPED ; to be the same length as the user-
  9851 00000360 3A06[A98A]              	cmp	al,[SWITCHAR]	; specified command string
  9852 00000364 75F0                    	jnz	short DO_SKIPCOM 
  9853                                  DO_SKIPPED:
  9854 00000366 4E                      	dec	si
  9855 00000367 31C9                    	xor	cx,cx
  9856                                  COMTAIL:
  9857 00000369 AC                      	lodsb
  9858 0000036A AA                      	stosb			; Move command tail to 80h
  9859 0000036B 3C0D                    	cmp	al,0Dh
  9860 0000036D E0FA                    	loopne	COMTAIL
  9861 0000036F 4F                      	dec	di
  9862 00000370 89FD                    	mov	bp,di
  9863 00000372 F6D1                    	not	cl
  9864 00000374 880E8000                	mov	[80h],cl
  9865 00000378 5E                      	pop	si
  9866                                  ;-----
  9867                                  ; Some of these comments are sadly at odds with this brave new code.
  9868                                  ;-----
  9869                                  ; If the command has 0 parameters must check here for
  9870                                  ; any switches that might be present.
  9871                                  ; SI -> first character after the command.
  9872                                  
  9873                                  	;mov	di,arg.argv[0].argsw_word
  9874                                  	;mov	di,[ARGV0_ARGSW_WORD]
  9875 00000379 8B3E[BB8D]              	mov	di,[ARG+ARGV_ELE.argsw_word]
  9876 0000037D 893E[BC8A]              	mov	[COMSW],di	; ah yes, the old addressing mode problem...
  9877                                  	;mov	SI,arg.argv[1 * SIZE argv_ele].argpointer  
  9878                                  				; s = argv[1];
  9879                                  	;mov	si,[ARGV1_ARGPOINTER]
  9880 00000381 8B36[BF8D]              	mov	si,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]
  9881 00000385 09F6                    	or	si,si		;   if (s == NULL)
  9882 00000387 7502                    	jnz	short DOPARSE	;	s = bp; (buffer end)
  9883 00000389 89EE                    	mov	si,bp
  9884                                  DOPARSE:
  9885 0000038B BF5C00                  	mov	di,FCB ; 5Ch
  9886                                  	;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9887                                  	; 01/02/2023
  9888 0000038E B80129                  	mov	ax,2901h
  9889                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9890 00000391 CD21                    	int	21h	; DOS -	PARSE FILENAME
  9891                                  			; DS:SI	-> string to parse
  9892                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9893                                  			; AL = bit mask	to control parsing
  9894 00000393 A2[BA8A]                	mov	[PARM1],al	; Save result of parse
  9895                                  	;mov	di,arg.argv[1*SIZE argv_ele].argsw_word
  9896                                  	;mov	di,[ARGV1_ARGSW_WORD]
  9897 00000396 8B3E[C68D]              	mov	di,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]
  9898 0000039A 893E[BE8A]              	mov	[ARG1S],di
  9899                                  	;mov	si,arg.argv[2*SIZE argv_ele].argpointer    
  9900                                  				; s = argv[2];
  9901                                  	;mov	si,[ARGV2_ARGPOINTER]
  9902 0000039E 8B36[CA8D]              	mov	si,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argpointer]
  9903 000003A2 09F6                    	or	si,si		; if (s == NULL)
  9904 000003A4 7502                    	jnz	short DOPARSE2
  9905 000003A6 89EE                    	mov	si,bp		;     s = bp; (buffer end)
  9906                                  DOPARSE2:			
  9907 000003A8 BF6C00                  	mov	di,FCB+10h ; 6Ch
  9908                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9909 000003AB B80129                  	mov	ax,2901h
  9910                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9911 000003AE CD21                    	int	21h	; DOS -	PARSE FILENAME
  9912                                  			; DS:SI	-> string to parse
  9913                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9914                                  			; AL = bit mask	to control parsing
  9915 000003B0 A2[BB8A]                	mov	[PARM2],al	; Save result
  9916                                  	;mov	di,[ARGV2_ARGSW_WORD]
  9917                                  	;mov	di,arg.argv[2*SIZE argv_ele].argsw_word
  9918 000003B3 8B3E[D18D]              	mov	di,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]
  9919 000003B7 893E[C08A]              	mov	[ARG2S],di
  9920                                  	;mov	di,[ARGV0_ARGSW_WORD]
  9921                                  	;mov	di,arg.argv[0].argsw_word
  9922 000003BB 8B3E[BB8D]              	mov	di,[ARG+ARGV_ELE.argsw_word]
  9923 000003BF F7D7                    	not	di		; ARGTS doesn't include the flags
  9924                                  	;and	di,[ARG_ARGSWINFO] ; from COMSW...
  9925                                  	;and	di,arg.argswinfo	
  9926 000003C1 233E[7690]              	and	di,[ARG+ARG_UNIT.argswinfo]
  9927 000003C5 893E[C28A]              	mov	[ARGTS],di
  9928                                  
  9929 000003C9 A0[2F8B]                	mov	al,[IDLEN]
  9930 000003CC 8A16[C58A]              	mov	dl,[SPECDRV]
  9931 000003D0 08D2                    	or	dl,dl		; if a drive was specified...
  9932 000003D2 7505                    	jnz	short EXTERNALJ1 ; it MUST be external, by this time
  9933 000003D4 FEC8                    	dec	al		; (I don't know why -- old code did it)
  9934 000003D6 E9D423                  	jmp	FNDCOM		; otherwise, check internal com table
  9935                                  EXTERNALJ1:
  9936 000003D9 E9D624                  	jmp	EXTERNAL
  9937                                  NULLCOM:
  9938 000003DC 8E1E[A58A]              	mov	ds,[RESSEG]
  9939 000003E0 F706[3401]FFFF          	test	word [Batch],0FFFFh ; -1 ;G Are we in a batch file?
  9940 000003E6 7405                    	jz	short NOSETFLAG	  ;G only set flag if in batch
  9941 000003E8 C606[9D01]01            	mov	byte [NullFlag],1 ;G set flag to indicate no command
  9942                                  	;mov	byte [NullFlag],nullcommand ; 1
  9943                                  NOSETFLAG:
  9944 000003ED 833E[8E01]FF            	cmp	word [SingleCom],0FFFFh ; -1
  9945 000003F2 7403                    	je	short EXITJ
  9946 000003F4 E9E9FD                  	jmp	GETCOM
  9947                                  EXITJ:
  9948 000003F7 E92DFD                  	jmp	_$EXITPREP
  9949                                  
  9950                                  ;============================================================================
  9951                                  ; MSHALO.ASM, MSDOS 6.0, 1991
  9952                                  ;============================================================================
  9953                                  ; 12/10/2018 - Retro DOS v3.0
  9954                                  
  9955                                  ; 05/02/2023 - Retro DOS v5.0 (& v4.1) COMMAND.COM
  9956                                  
  9957                                  ;	SCCSID = @(#)ibmhalo.asm	1.1 85/04/10
  9958                                  ;   On 2K (800h) boundaries beginning at address C0000h and ending at EF800h
  9959                                  ;   there is a header that describes a block of rom program.  This header
  9960                                  ;   contains information needed to initialize a module and to provide PCDOS
  9961                                  ;   with a set of reserved names for execution.
  9962                                  ;
  9963                                  ;   This header has the following format:
  9964                                  ;
  9965                                  ;   rom_header	STRUC
  9966                                  ;	Signature1  DB	55h
  9967                                  ;	Signature2  DB	AAh
  9968                                  ;	rom_length  DB	?		; number of 512 byte pieces
  9969                                  ;	init_jmp    DB	3 dup (?)
  9970                                  ;	name_list   name_struc <>
  9971                                  ;   rom_header	ENDS
  9972                                  ;
  9973                                  ;   name_struc	STRUC
  9974                                  ;	name_len    DB	?
  9975                                  ;	name_text   DB	? DUP (?)
  9976                                  ;	name_jmp    DB	3 DUP (?)
  9977                                  ;   name_struc	ENDS
  9978                                  ;
  9979                                  ;   The name list is a list of names that are reserved by a particular section
  9980                                  ;   of a module.  This list of names is terminated by a null name (length
  9981                                  ;   is zero).
  9982                                  ;
  9983                                  ;   Consider now, the PCDOS action when a user enters a command:
  9984                                  ;
  9985                                  ;	COMMAND.COM has control.
  9986                                  ;	o   If location FFFFEh has FDh then
  9987                                  ;	o	Start scanning at C0000h, every 800h for a byte 55h followed
  9988                                  ;		    by AAh, stop scan if we get above or = F0000H
  9989                                  ;	o	When we've found one, compare the name entered by the user
  9990                                  ;		    with the one found in the rom.  If we have a match, then
  9991                                  ;		    set up the environment for execution and do a long jump
  9992                                  ;		    to the near jump after the found name.
  9993                                  ;	o	If no more names in the list, then continue scanning the module
  9994                                  ;		    for more 55h followed by AAh.
  9995                                  ;	o   We get to this point only if there is no matching name in the
  9996                                  ;		rom.  We now look on disk for the command.
  9997                                  ;
  9998                                  ;   This gives us the flexibility to execute any rom cartridge without having
  9999                                  ;   to 'hard-code' the name of the cartridge into PCDOS.  Rom modules that
 10000                                  ;   want to be invisible to the DOS should not have any names in their lists
 10001                                  ;   (i.e. they have a single null name).
 10002                                  ;
 10003                                  ;   Consider a new release of BASIC, say, that patches bugs in the ROM version.
 10004                                  ;   Clearly this version will be available on disk.  How does a user actually
 10005                                  ;   invoke this new BASIC??  He cannot call it BASIC on the disk because the
 10006                                  ;   EXEC loader will execute the ROM before it even looks at the disk!	Only
 10007                                  ;   solution:
 10008                                  ;
 10009                                  ;   o	Keep things consistent and force the user to have his software named
 10010                                  ;	differently from the ROM names (BASIC1, BASIC2, etc).
 10011                                  
 10012                                  struc ROM_HEADER
 10013 00000000 ??                          .signature1: resb 1
 10014 00000001 ??                          .signature2: resb 1
 10015 00000002 ??                          .rom_length: resb 1
 10016 00000003 ??????                      .init_jmp:	 resb 3
 10017 00000006 ??                          .name_list:	 resb 1
 10018                                      .size:
 10019                                  endstruc
 10020                                  
 10021                                  struc NAME_STRUC
 10022 00000000 ??                          .name_len:	resb 1
 10023 00000001 ??                          .name_text:	resb 1
 10024 00000002 ??????                      .name_jmp:	resb 3
 10025                                      .size:	
 10026                                  endstruc
 10027                                  
 10028                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 03D1h
 10029                                  
 10030                                  ; =============== S U B	R O U T	I N E =======================================
 10031                                  
 10032                                  ;ASSUME	CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
 10033                                  
 10034                                  ; 05/02/2023
 10035                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:03FBh
 10036                                  
 10037                                  ; Check for IBM PC Jr rom cartrides. DS:DX is a pointer to name
 10038                                  
 10039                                  ROM_SCAN:
 10040 000003FA 06                      	push	es
 10041 000003FB 56                      	push	si
 10042 000003FC 57                      	push	di
 10043 000003FD 51                      	push	cx
 10044 000003FE 50                      	push	ax
 10045 000003FF 53                      	push	bx
 10046                                  
 10047                                  	; check for PC Jr signature in rom
 10048                                  
 10049 00000400 B800F0                  	mov	ax,0F000h
 10050 00000403 8EC0                    	mov	es,ax
 10051 00000405 26803EFEFFFD            	cmp	byte [es:0FFFEh],0FDh
 10052 0000040B 7408                    	je	short SCAN_IT
 10053                                  NO_ROM:
 10054 0000040D F8                      	clc
 10055                                  ROM_RET:
 10056 0000040E 5B                      	pop	bx
 10057 0000040F 58                      	pop	ax
 10058 00000410 59                      	pop	cx
 10059 00000411 5F                      	pop	di
 10060 00000412 5E                      	pop	si
 10061 00000413 07                      	pop	es
 10062 00000414 C3                      	retn
 10063                                  
 10064                                  	; start scanning at C000h
 10065                                  SCAN_IT:
 10066 00000415 B800C0                  	mov	ax,0C000h
 10067                                  SCAN_ONE:
 10068 00000418 8EC0                    	mov	es,ax
 10069 0000041A 31FF                    	xor	di,di
 10070                                  
 10071                                  	; check for a valid header
 10072                                  SCAN_MODULE:
 10073 0000041C 26813D55AA              	cmp	word [es:di],0AA55h
 10074 00000421 740A                    	je	short SCAN_LIST
 10075 00000423 058000                  	add	ax,80h
 10076                                  SCAN_END:
 10077 00000426 3D00F0                  	cmp	ax,0F000h
 10078 00000429 72ED                    	jb	short SCAN_ONE
 10079 0000042B EBE0                    	jmp	short NO_ROM
 10080                                  
 10081                                  	; trundle down list of names
 10082                                  SCAN_LIST:
 10083                                  	;mov	bl,[es:di+2]	; number of 512-byte jobbers
 10084 0000042D 268A5D02                	mov	bl,[es:di+ROM_HEADER.rom_length]
 10085 00000431 30FF                    	xor	bh,bh		; nothing in the high byte
 10086 00000433 D1E3                    	shl	bx,1
 10087 00000435 D1E3                    	shl	bx,1		; number of paragraphs
 10088 00000437 83C37F                  	add	bx,7Fh
 10089 0000043A 83E380                  	and	bx,0FF80h	; round to 2k	
 10090                                  	;mov	di,6
 10091                                  	; 05/05/2023
 10092 0000043D BF0600                  	mov	di,ROM_HEADER.name_list
 10093                                  	;nop
 10094                                  SCAN_NAME:
 10095 00000440 268A0D                  	mov	cl,[es:di]	; length of name
 10096 00000443 47                      	inc	di		; point to name
 10097 00000444 30ED                    	xor	ch,ch
 10098 00000446 09C9                    	or	cx,cx		; zero length name
 10099 00000448 7504                    	jnz	short SCAN_TEST	; nope... compare
 10100 0000044A 01D8                    	add	ax,bx		; yep, skip to next block
 10101 0000044C EBD8                    	jmp	short SCAN_END
 10102                                  
 10103                                  	; compare a single name
 10104                                  SCAN_TEST:
 10105 0000044E 89D6                    	mov	si,dx
 10106 00000450 46                      	inc	si
 10107 00000451 F3A6                    	repe cmpsb		 ; compare name
 10108 00000453 7407                    	jz	short SCAN_FOUND ; success!
 10109                                  SCAN_NEXT:
 10110 00000455 01CF                    	add	di,cx		; failure, next name piece
 10111 00000457 83C703                  	add	di,3
 10112 0000045A EBE4                    	jmp	short SCAN_NAME
 10113                                  
 10114                                  	; found a name. save entry location
 10115                                  SCAN_FOUND:	
 10116 0000045C 803C3F                  	cmp	byte [si],'?'
 10117 0000045F 7405                    	je	short SCAN_SAVE
 10118 00000461 803C20                  	cmp	byte [si],' '
 10119 00000464 75EF                    	jne	short SCAN_NEXT
 10120                                  SCAN_SAVE:
 10121 00000466 2E8C06[2A8C]            	mov	[cs:ROM_CS],es
 10122 0000046B 2E893E[288C]            	mov	[cs:ROM_IP],di
 10123 00000470 F9                      	stc
 10124 00000471 EB9B                    	jmp	short ROM_RET
 10125                                  
 10126                                  ; ---------------------------------------------------------------------------
 10127                                  
 10128                                  ; execute a rom-placed body of code. allocate largest block
 10129                                  
 10130                                  ROM_EXEC:
 10131 00000473 BBFFFF                  	mov	bx,0FFFFh
 10132                                  	; 05/02/2023
 10133 00000476 B448                    	mov	ah,48h
 10134                                  	;mov	ah,ALLOC ; 48h
 10135 00000478 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10136                                  			; BX = number of 16-byte paragraphs desired
 10137 0000047A B448                    	mov	ah,48h
 10138                                  	;mov	ah,ALLOC ; 48h
 10139 0000047C CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10140                                  			; BX = number of 16-byte paragraphs desired
 10141 0000047E 53                      	push	bx
 10142 0000047F 50                      	push	ax
 10143                                  
 10144                                  	; set terminate addresses
 10145                                  
 10146 00000480 B82225                  	mov	ax,2522h
 10147                                  	;;mov	ax,(set_interrupt_vector SHL 8) + int_terminate
 10148                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE
 10149 00000483 1E                      	push	ds
 10150 00000484 2E8E1E[A58A]            	mov	ds,[cs:RESSEG]
 10151                                  	;mov	dx,offset RESGROUP:EXEC_WAIT
 10152                                  	;mov	dx,131h ; MSDOS 3.3
 10153                                  	; 05/02/2023
 10154                                  	;mov	dx,0D6Bh ; MSDOS 5.0
 10155 00000489 BA[290C]                	mov	dx,Exec_Wait
 10156 0000048C CD21                    	int	21h	; DOS -	SET INTERRUPT VECTOR
 10157                                  			; AL = interrupt number
 10158                                  			; DS:DX	= new vector to	be used	for specified interrupt
 10159 0000048E 8CDA                    	mov	dx,ds
 10160 00000490 8EC2                    	mov	es,dx
 10161 00000492 1F                      	pop	ds
 10162                                  		
 10163                                  	; and create program header and dup all jfn's
 10164                                  
 10165 00000493 5A                      	pop	dx
 10166 00000494 B455                    	mov	ah,55h
 10167                                  	;mov	ah,DUP_PDB ; 55h
 10168 00000496 CD21                    	int	21h	; DOS -	2+ internal - CREATE PSP
 10169                                  			; DX = segment number at which to set up PSP
 10170                                  			; SI = (DOS 3+)	value to place in memory size field at DX:[0002h]
 10171                                  		
 10172                                  	; set up dma address
 10173                                  
 10174 00000498 8EDA                    	mov	ds,dx
 10175 0000049A BA8000                  	mov	dx,80h
 10176 0000049D B41A                    	mov	ah,1Ah
 10177                                  	;mov	ah,Set_DMA ; 1Ah
 10178 0000049F CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 10179                                  			; DS:DX	-> disk	transfer buffer
 10180                                  
 10181                                  	; copy in environment info
 10182                                  
 10183 000004A1 26A1[2703]              	mov	ax,[es:EnvirSeg]
 10184                                  	;mov	[2Ch],ax
 10185 000004A5 A32C00                  	mov	[PDB.ENVIRON],ax
 10186                                  
 10187                                  	; set up correct size of block
 10188                                  
 10189 000004A8 5B                      	pop	bx		; BX has size, DS has segment
 10190 000004A9 8CDA                    	mov	dx,ds
 10191 000004AB 01DA                    	add	dx,bx
 10192                                  	;mov	[2],dx
 10193 000004AD 89160200                	mov	[PDB.BLOCK_LEN],dx
 10194                                  
 10195                                  	; change ownership of block
 10196                                  
 10197 000004B1 8CDA                    	mov	dx,ds
 10198 000004B3 4A                      	dec	dx
 10199 000004B4 8EDA                    	mov	ds,dx
 10200 000004B6 42                      	inc	dx	
 10201                                  	;mov	[1],dx
 10202 000004B7 89160100                	mov	[ARENA.owner],dx
 10203 000004BB 8EDA                    	mov	ds,dx
 10204                                  
 10205                                  	; set up correct stack
 10206                                  
 10207 000004BD 81FB0010                	cmp	bx,1000h
 10208 000004C1 7202                    	jb	short GOT_STACK
 10209 000004C3 31DB                    	xor	bx,bx
 10210                                  GOT_STACK:
 10211 000004C5 B104                    	mov	cl,4
 10212 000004C7 D3E3                    	shl	bx,cl
 10213 000004C9 8CDA                    	mov	dx,ds
 10214 000004CB 8ED2                    	mov	ss,dx
 10215 000004CD 89DC                    	mov	sp,bx
 10216 000004CF 31C0                    	xor	ax,ax
 10217 000004D1 50                      	push	ax
 10218                                  
 10219                                  	; set up initial registers and go to the guy
 10220                                  
 10221 000004D2 F7D0                    	not	ax
 10222 000004D4 2EFF36[2A8C]            	push	word [cs:ROM_CS]
 10223 000004D9 2EFF36[288C]            	push	word [cs:ROM_IP]
 10224 000004DE 8EC2                    	mov	es,dx
 10225 000004E0 CB                      	retf	; far return
 10226                                  
 10227                                  ;============================================================================
 10228                                  ; TBATCH.ASM, MSDOS 6.0, 1991
 10229                                  ;============================================================================
 10230                                  ; 12/10/2018 - Retro DOS v3.0
 10231                                  
 10232                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 04B9h
 10233                                  
 10234                                  ; =============== S U B	R O U T	I N E =======================================
 10235                                  
 10236                                  ;Break	<PromptBat - Open or wait for batch file>
 10237                                  
 10238                                  ; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10239                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:04E2h
 10240                                  
 10241                                  ; Open the batch file. If we cannot find the batch file. If the media is
 10242                                  ; changeable, we prompt for the change. Otherwise, we terminate the batch
 10243                                  ; file. Leave segment registers alone.
 10244                                  
 10245                                  PROMPTBAT:
 10246 000004E1 E84808                  	call	BATOPEN
 10247 000004E4 7201                    	jc	short PROMPTBAT1
 10248 000004E6 C3                      	retn
 10249                                  PROMPTBAT1:
 10250                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10251                                  	; MSDOS 6.0 COMMAND.COM
 10252 000004E7 83FA02                  	cmp	dx,ERROR_FILE_NOT_FOUND ;AN022; Ask for diskette if file not found
 10253 000004EA 740A                    	je	short BAT_REMCHECK	;AN022;
 10254 000004EC 83FA03                  	cmp	dx,ERROR_PATH_NOT_FOUND ;AN022; Ask for diskette if path not found
 10255 000004EF 7405                    	je	short BAT_REMCHECK	;AN022; Otherwise, issue message and exit
 10256                                  	;invoke	output_batch_name	;AN022; set up batch name in bwdbuf
 10257 000004F1 E83500                  	call	output_batch_name
 10258 000004F4 EB13                    	jmp	short BATDIE		;AN022;
 10259                                  
 10260                                  	; 05/02/2023
 10261                                  	; MSDOS 3.3 COMMAND.COM
 10262                                  	;cmp	dx,ACCDENPTR
 10263                                  	;jz	short BATDIE
 10264                                  
 10265                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10266                                  BAT_REMCHECK:				;AN022; Go see if media is removable
 10267 000004F6 2EFF1E[AF8A]            	call	far [cs:RCH_ADDR]	; DX has error number
 10268 000004FB 7417                    	jz	short ASKFORBAT		; Media is removable
 10269                                  
 10270                                  ; The media is not changeable. Turn everything off.
 10271                                  
 10272 000004FD E83D0B                  	call	FOROFF
 10273 00000500 E8652A                  	call	PipeOff
 10274 00000503 A2[9301]                	mov	[IfFlag],al	; No If in progress.	
 10275 00000506 BA[197F]                	mov	dx,BADBAT_PTR
 10276                                  BATDIE:
 10277 00000509 E8F003                  	call	BATCHOFF
 10278 0000050C 0E                      	push	cs
 10279 0000050D 1F                      	pop	ds
 10280                                  	;invoke	std_eprintf	;AC022; display message ;  MSDOS 6.0
 10281                                  	; 05/02/2023
 10282 0000050E E8B848                  	call	std_eprintf	; MSDOS 6.0
 10283                                  	;call	STD_PRINTF	; MSDOS 3.3
 10284                                  
 10285                                  ; TCOMMAND resets the stack. This is the equivalent of a non-local goto.
 10286                                  
 10287 00000511 E9F0FB                  	jmp	TCOMMAND
 10288                                  
 10289                                  ; Ask the user to reinsert the batch file
 10290                                  
 10291                                  ASKFORBAT:
 10292 00000514 1E                      	push	ds
 10293 00000515 0E                      	push	cs
 10294 00000516 1F                      	pop	ds
 10295                                  
 10296                                  	; MSDOS 6.0
 10297                                  	;mov	dx,offset TRANGROUP:NEEDBAT_ptr  ;AN022;
 10298 00000517 BA[1C7F]                	mov	dx,NEEDBAT_PTR
 10299                                  	;invoke	std_eprintf	 	;Prompt for batch file on stderr
 10300                                  	; 05/02/2023
 10301 0000051A E8AC48                  	call	std_eprintf
 10302                                  	;mov	dx,offset trangroup:pausemes_ptr
 10303 0000051D BA[8E7F]                	mov	dx,PAUSEMES_PTR
 10304                                  	;invoke std_eprintf		;AN000; get second part of message
 10305 00000520 E8A648                  	call	std_eprintf
 10306                                  					;AN000; print it to stderr
 10307                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10308                                  	;call	STD_EPRINTF
 10309 00000523 E82E00                  	call	GETKEYSTROKE
 10310 00000526 1F                      	pop	ds
 10311 00000527 EBB8                    	jmp	short PROMPTBAT
 10312                                  
 10313                                  
 10314                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10315                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:052Ah
 10316                                  
 10317                                  	; MSDOS 6.0
 10318                                  ;****************************************************************
 10319                                  ;*
 10320                                  ;* ROUTINE:	Output_batch_name
 10321                                  ;*
 10322                                  ;* FUNCTION:	Sets up batch name to be printed on extended error
 10323                                  ;*
 10324                                  ;* INPUT:	DX - extended error number
 10325                                  ;*
 10326                                  ;* OUTPUT:	Ready to call print routine
 10327                                  ;*
 10328                                  ;****************************************************************
 10329                                  ;
 10330                                  ;public	output_batch_name		;AN022;
 10331                                  
 10332                                  output_batch_name:	;proc near	;AN022;
 10333                                  
 10334 00000529 1E                      	push	ds			;AN022; save resident segment
 10335 0000052A 8E1E[3401]              	mov	ds,[Batch]		;AN022; get batch file segment
 10336                                  	;assume	DS:nothing		;AN022;
 10337                                  	;;mov	SI,BatFile		;AN022; get offset of batch file
 10338                                  	; 05/02/2023
 10339                                  	;mov	si,20h
 10340                                  	; 24/04/2023
 10341 0000052E BE2000                  	mov	si,BATCHSEGMENT.BatFile
 10342                                  	;invoke	dstrlen 		;AN022; get length of string
 10343 00000531 E83827                  	call	dstrlen
 10344                                  	;mov	di,offset Trangroup:bwdbuf
 10345                                  					;AN022; target for batch name
 10346 00000534 BF[AE8B]                	mov	di,BWDBUF
 10347 00000537 F3A4                    	rep	movsb			;AN022; move the name
 10348                                  
 10349 00000539 0E                      	push	cs			;AN022; get local segment
 10350 0000053A 1F                      	pop	ds			;AN022;
 10351                                  	;assume	DS:trangroup		;AN022;
 10352                                  	; 05/02/2023
 10353 0000053B 8916[FC7E]              	mov	[extend_buf_ptr],dx	;AN022; put message number in block
 10354                                  	;mov	byte [msg_disp_class],1
 10355 0000053F C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class
 10356                                  					;AN022; set up extended error msg class
 10357                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 10358 00000544 BA[FC7E]                	mov	dx,extend_buf_ptr	
 10359                                  					;AN022; get extended message pointer
 10360                                  	;mov	string_ptr_2,offset trangroup:bwdbuf 
 10361 00000547 C706[158C][AE8B]        	mov	word [string_ptr_2],BWDBUF	
 10362                                  					;AN022; point to substitution
 10363                                  	;mov	byte [extend_buf_sub],1
 10364 0000054D C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst
 10365                                  					;AN022; set up for one subst
 10366 00000552 1F                      	pop	ds			;AN022; restore data segment
 10367 00000553 C3                      	retn				;AN022; return
 10368                                  
 10369                                  ;output_batch_name    endp		;AN022;
 10370                                  
 10371                                  
 10372                                  ; =============== S U B	R O U T	I N E =======================================
 10373                                  
 10374                                  ;Break	<GetKeystroke - get a keystroke and flush queue>
 10375                                  
 10376                                  ; Read the next keystroke. Since there may be several characters in the queue
 10377                                  ; after the one we ask for (function keys/Kanji), we need to flush the queue
 10378                                  ; AFTER waiting.
 10379                                  
 10380                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10381                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0555h
 10382                                  
 10383                                  GETKEYSTROKE:
 10384                                  	; 05/02/2023
 10385                                  	; MSDOS 3.3
 10386                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_NO_ECHO
 10387                                  	;;mov	ax,0C08h
 10388                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT_NO_ECHO
 10389                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10390                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10391                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10392                                  	;;mov	ax,0C00h
 10393                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)+0
 10394                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10395                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10396                                  	;retn
 10397                                  
 10398                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10399                                  	; MSDOS 6.0
 10400 00000554 52                      	push	dx			;AN000;  3/3/KK
 10401                                  	;mov	ax,(ECS_call SHL 8) OR GetInterimMode
 10402                                  					;AN000;  3/3/KK
 10403 00000555 B80263                  	mov	ax,6302h
 10404 00000558 CD21                    	int	21h			;AN000;  3/3/KK
 10405                                  		; DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE
 10406                                  	
 10407 0000055A 52                      	push	dx			;AN000;  save interim state 3/3/KK
 10408                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10409                                  					;AN000;  3/3/KK
 10410 0000055B B80163                  	mov	ax,6301h
 10411 0000055E B201                    	mov	dl,1
 10412                                  	;mov	dl,InterimMode		;AN000;  3/3/KK
 10413 00000560 CD21                    	int	21h			;AN000;  3/3/KK
 10414                                  		; DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE
 10415                                  		; DL = new mode
 10416                                  		; 00h return only full characters on DOS keyboard input functions
 10417                                  		; 01h return partially-formed characters also
 10418                                  	
 10419                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo
 10420 00000562 B8080C                  	mov	ax,0C08h
 10421 00000565 CD21                    	int	21h			; Get character with KB buffer flush
 10422                                  		; DOS - CLEAR KEYBOARD BUFFER
 10423                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10424                                  
 10425                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10426 00000567 B8000C                  	mov	ax,0C00h
 10427 0000056A CD21                    	int	21h
 10428                                  		; DOS - CLEAR KEYBOARD BUFFER
 10429                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10430                                  
 10431                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10432                                  					;AN000;  3/3/KK
 10433 0000056C B80163                  	mov	ax,6301h
 10434 0000056F 5A                      	pop	dx			;AN000;  restore interim state 3/3/KK
 10435 00000570 CD21                    	int	21h			;AN000;  3/3/KK
 10436 00000572 5A                      	pop	dx			;AN000;  3/3/KK
 10437                                  	
 10438 00000573 C3                      	retn
 10439                                  
 10440                                  ; =============== S U B	R O U T	I N E =======================================
 10441                                  
 10442                                  ; Break	<ReadBat - read 1 line from batch file>
 10443                                  
 10444                                  ; ReadBat - read a single line from the batch file. 
 10445                                  ; Perform all substitutions as appropriate.
 10446                                  
 10447                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10448                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0575h
 10449                                  
 10450                                  READBAT:
 10451                                  	;ASSUME	DS:ResGroup,ES:TranGroup
 10452                                  		
 10453                                  	;mov	byte [Suppress],1
 10454                                  				; initialize line suppress status
 10455 00000574 C606[8901]01            	mov	byte [Suppress],YES_ECHO
 10456 00000579 F606[7E01]FF            	test	byte [Batch_Abort],-1 ; 0FFh
 10457 0000057E 751F                    	jnz	short TRYING_TO_ABORT
 10458 00000580 C606[7D01]01            	mov	byte [In_Batch],1 ; set flag to indicate batch job
 10459                                  
 10460                                  	; MSDOS 6.0
 10461                                  
 10462                                  ;M037; Start of changes
 10463                                  ; We check here if we have set the flag indicating that the batchfile is at
 10464                                  ;EOF. In this case, we do not want to continue with the normal processing.
 10465                                  ;We call GetBatByt once more so that the batch segment gets freed up, the
 10466                                  ;batch file gets closed etc. and then return as if everything is done.
 10467                                  
 10468                                  	; 05/02/2023
 10469 00000585 1E                      	push	ds
 10470 00000586 8E1E[3401]              	mov	ds,[Batch]
 10471                                  	;cmp	byte [2],0
 10472 0000058A 803E020000              	cmp	byte [BATCHSEGMENT.BatchEOF],0
 10473                                  				; are we at EOF in batchfile
 10474 0000058F 1F                      	pop	ds
 10475 00000590 740A                    	jz	short CONTBAT	; no, continue normal processing
 10476                                  	;invoke	GetBatByt	; frees up batchseg
 10477 00000592 E8D303                  	call	GETBATBYT
 10478 00000595 26A2[0689]              	mov	[es:COMBUF+2],al
 10479                                  				; stuff CR into command buffer
 10480                                  				; as a dummy command
 10481                                  	;;invoke CrLf2		; print a CR-LF
 10482                                  	;call	CRLF2
 10483                                  	;;return		; done batch processing
 10484                                  	;retn
 10485                                  	; 24/04/2023
 10486 00000599 E93520                  	jmp	CRLF2
 10487                                  
 10488                                  ;M037; End of changes
 10489                                  		
 10490                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10491                                  CONTBAT:
 10492 0000059C E842FF                  	call	PROMPTBAT
 10493                                  
 10494                                  TRYING_TO_ABORT:
 10495 0000059F BF[0689]                	mov	di,COMBUF+2
 10496                                  
 10497                                  ; Save position and try to scan for first non delimiter.
 10498                                  
 10499                                  TESTNOP:
 10500 000005A2 8CD8                    	mov	ax,ds
 10501 000005A4 8E1E[3401]              	mov	ds,[Batch]
 10502 000005A8 FF360800                	push	word [BATCHSEGMENT.BatSeek]
 10503 000005AC FF360A00                	push	word [BATCHSEGMENT.BatSeek+2]
 10504                                  				; save current location.
 10505 000005B0 8ED8                    	mov	ds,ax
 10506 000005B2 E84B06                  	call	SKIPDELIM	; skip to first non-delim
 10507                                  
 10508                                  ; If the first non-delimiter is not a : (label), we reseek back to the
 10509                                  ; beginning and read the line.
 10510                                  
 10511 000005B5 3C3A                    	cmp	al,':'		; is it a label?
 10512 000005B7 59                      	pop	cx
 10513 000005B8 5A                      	pop	dx		; restore position in bat file
 10514 000005B9 7431                    	jz	short NOPLINE	; yes, resync everything.
 10515 000005BB F706[3401]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10516 000005C1 7438                    	jz	short RDBAT	; no, go read batch file
 10517                                  
 10518                                  	;cmp	al,'@'
 10519 000005C3 3C40                    	cmp	al,No_Echo_Char	; see if user wants to suppress line
 10520 000005C5 7507                    	jne	short SET_BAT_POS ; no - go and set batch file position
 10521                                  	;mov	byte [Suppress],0
 10522 000005C7 C606[8901]00            	mov	byte [Suppress],NO_ECHO ; yes set flag to indicate
 10523 000005CC EB2D                    	jmp	short RDBAT	; go read batch file
 10524                                  	;nop
 10525                                  SET_BAT_POS:
 10526 000005CE 1E                      	push	ds
 10527 000005CF 8E1E[3401]              	mov	ds,[Batch]
 10528                                  	;mov	[8],dx
 10529 000005D3 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; reseek back to beginning
 10530                                  	;mov	[10],cx
 10531 000005D7 890E0A00                	mov	[BATCHSEGMENT.BatSeek+2],cx
 10532 000005DB 1F                      	pop	ds
 10533                                  	;;mov	ax,(LSEEK SHL 8) + 0
 10534                                  	; 05/02/2023
 10535 000005DC B80042                  	mov	ax,4200h
 10536                                  	;mov	ax,(LSEEK*256) ; 4200h ; ; seek back
 10537 000005DF CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 10538                                  			; AL = method: offset from beginning of	file
 10539                                  	;mov	word [cs:BATBUFPOS],0FFFFh
 10540                                  	; 24/04/2023
 10541                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:05E3h
 10542 000005E1 26C706[2B95]FFFF        	mov	word [es:BATBUFPOS],-1; 0FFFFh
 10543                                  	;mov	word [cs:BATBUFPOS],-1 ; nuke batch buffer position
 10544 000005E8 31C9                    	xor	cx,cx		; Initialize line length to zero
 10545 000005EA EB0F                    	jmp	short RDBAT
 10546                                  
 10547                                  	;nop
 10548                                  
 10549                                  ; The first non-delimiter is a :. This line is not echoed and is ignored.
 10550                                  ; We eat characters until a CR is seen.
 10551                                  
 10552                                  NOPLINE:
 10553 000005EC E80501                  	call	SKIPTOEOL
 10554 000005EF E87603                  	call	GETBATBYT	; eat trailing LF
 10555                                  	;test	word [Batch],0FFFFh
 10556 000005F2 F706[3401]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10557 000005F8 75A8                    	jnz	short TESTNOP	; no, go get another line
 10558                                  READBAT_RETN:			; Hit EOF
 10559 000005FA C3                      	retn
 10560                                  
 10561                                  ; ---------------------------------------------------------------------------
 10562                                  
 10563                                  ; Read a line into the buffer pointed to by ES:DI. If any %s are seen in the
 10564                                  ; input, we are to consider two special cases:
 10565                                  ;
 10566                                  ;   %0 to %9	These represent replaceable parameters from the batch segment
 10567                                  ;   %sym%	This is a symbol from the environment
 10568                                  
 10569                                  RDBAT:
 10570 000005FB E86A03                  	call	GETBATBYT
 10571 000005FE 41                      	inc	cx		; Inc the line length
 10572                                  
 10573                                  	; 05/02/2023
 10574                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0601h
 10575 000005FF E8BD1D                  	call	testkanj
 10576 00000602 740C                    	jz	short RDBAT1
 10577                                  	;cmp	cx,127
 10578 00000604 83F97F                  	cmp	cx,COMBUFLEN-1
 10579 00000607 7350                    	jnb	short TOOLONG
 10580 00000609 AA                      	stosb
 10581 0000060A E85B03                  	call    GETBATBYT
 10582 0000060D 41                      	inc	cx
 10583 0000060E EB0A                    	jmp	short SAVBATBYT
 10584                                  RDBAT1:
 10585 00000610 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10586 00000614 7343                    	jnb	short TOOLONG	   ; Yes - handle it, handle it
 10587                                  
 10588                                  ; See if we have a parameter character.
 10589                                  
 10590 00000616 3C25                    	cmp	al,'%'		; Check for parameter
 10591 00000618 7449                    	je	short NEEDPARM
 10592                                  
 10593                                  ; no parameter character. Store it as usual and see if we are done.
 10594                                  
 10595                                  SAVBATBYT:
 10596 0000061A AA                      	stosb			; End of line found?
 10597 0000061B 3C0D                    	cmp	al,0Dh
 10598 0000061D 75DC                    	jne	short RDBAT	; no, go for more
 10599                                  
 10600                                  ; We have read in an entire line. 
 10601                                  ; Decide whether we should echo the command line or not.
 10602                                  
 10603                                  FOUND_EOL:
 10604 0000061F 81EF[0789]              	sub	di,COMBUF+3
 10605 00000623 89F8                    	mov	ax,di		; remember that we've not counted the CR
 10606 00000625 26A2[0589]              	mov	[es:COMBUF+1],al
 10607                                  				; Set length of line
 10608 00000629 E83C03                  	call	GETBATBYT	; Eat linefeed
 10609 0000062C E8E906                  	call	BATCLOSE
 10610 0000062F 803E[8901]00            	cmp	byte [Suppress],NO_ECHO ; 0
 10611 00000634 7407                    	jz	short RESET
 10612 00000636 F606[8801]01            	test	byte [EchoFlag],1  ; To echo or not to echo, that is the
 10613 0000063B 7504                    	jnz	short TRY_NEXTFLAG ; question. (Profound, huh?)
 10614                                  RESET:
 10615 0000063D 0E                      	push	cs
 10616 0000063E 1F                      	pop	ds		; Go back to local segment
 10617 0000063F 74B9                    	jz	short READBAT_RETN ; no echoing here...
 10618                                  TRY_NEXTFLAG:
 10619 00000641 803E[9D01]01            	cmp	byte [NullFlag],nullcommand ; 1
 10620                                  				;G was there a command last time?
 10621 00000646 7403                    	jz	short NO_CRLF_PRINT
 10622                                  				;G no - don't print crlf
 10623 00000648 E8861F                  	call	CRLF2		;G Print out prompt
 10624                                  NO_CRLF_PRINT:
 10625 0000064B E84517                  	call	PRINT_PROMPT
 10626 0000064E 0E                      	push	cs		;G change data segment
 10627 0000064F 1F                      	pop	ds
 10628 00000650 BA[0689]                	mov	dx,COMBUF+2	; get command line for echoing
 10629 00000653 E8D41F                  	call	CRPRINT
 10630                                  	;call	CRLF2
 10631                                  	;retn
 10632                                  	; 06/02/2023
 10633 00000656 E9781F                  	jmp	CRLF2
 10634                                  
 10635                                  ; The line was too long. Eat remainder of input text up until the CR
 10636                                  
 10637                                  TOOLONG:
 10638 00000659 3C0D                    	cmp	al,0Dh		; Has the end of the line been reached?
 10639 0000065B 7403                    	jz	short LTLCONT	; Yes, continue
 10640 0000065D E89400                  	call	SKIPTOEOL	; Eat remainder of line	
 10641                                  LTLCONT:
 10642 00000660 AA                      	stosb			; Terminate the command
 10643 00000661 EBBC                    	jmp	short FOUND_EOL	; Go process the valid part of the line
 10644                                  
 10645                                  ; We have found a parameter lead-in character. Check for the 0-9 case first
 10646                                  
 10647                                  NEEDPARM:
 10648 00000663 E80203                  	call	GETBATBYT	; get next character
 10649 00000666 3C25                    	cmp	al,'%'		; Check for two consecutive %
 10650 00000668 74B0                    	je	short SAVBATBYT	; if so, replace with a single %
 10651 0000066A 3C0D                    	cmp	al,0Dh		; Check for end-of-line
 10652 0000066C 74AC                    	je	short SAVBATBYT	; yes, treat it normally
 10653                                  
 10654                                  ; We have found %<something>. If the <something> is in the range 0-9, we
 10655                                  ; retrieve the appropriate parameter from the batch segment. Otherwise we
 10656                                  ; see if the <something> has a terminating % and then look up the contents
 10657                                  ; in the environment.
 10658                                  
 10659                                  PAROK:
 10660 0000066E 2C30                    	sub	al,'0'
 10661 00000670 7239                    	jb	short NEEDENV	; look for parameter in the environment
 10662 00000672 3C09                    	cmp	al,9
 10663 00000674 7735                    	ja	short NEEDENV
 10664                                  
 10665                                  ; We have found %<number>. This is taken from the parameters in the
 10666                                  ; allocated batch area.
 10667                                  
 10668 00000676 98                      	cbw
 10669 00000677 89C3                    	mov	bx,ax		; move index into AX
 10670 00000679 D1E3                    	shl	bx,1		; convert word index into byte ptr
 10671 0000067B 06                      	push	es
 10672 0000067C 8E06[3401]              	mov	es,[Batch]
 10673                                  
 10674                                  ; The structure of the batch area is:
 10675                                  ;
 10676                                  ;   BYTE    type of segment
 10677                                  ;   DWORD   offset for next line
 10678                                  ;   10 WORD pointers to parameters. -1 is empty parameter
 10679                                  ;   ASCIZ   file name (with . and ..)
 10680                                  ;   BYTES   CR-terminated parameters
 10681                                  ;   BYTE    0 flag to indicate end of parameters
 10682                                  ;
 10683                                  ; Get pointer to BX'th argument
 10684                                  
 10685                                  	;;mov	si,[es:bx+0Bh]
 10686                                  	; 05/02/2023
 10687                                  	;mov	si,[es:bx+0Ch] 	; MSDOS 5.0 COMMAND.COM
 10688 00000680 268B770C                	mov	si,[es:bx+BATCHSEGMENT.BatParm]
 10689 00000684 07                      	pop	es
 10690                                  
 10691                                  ; Is there a parameter here?
 10692                                  
 10693 00000685 83FEFF                  	cmp	si,-1		; Check if parameter exists
 10694 00000688 7503                    	jnz	short YES_THERE_IS ; Yes go get it
 10695 0000068A E96EFF                  	jmp	RDBAT		; Ignore if it doesn't
 10696                                  
 10697                                  ; Copy in the found parameter from batch segment
 10698                                  
 10699                                  YES_THERE_IS:
 10700 0000068D 1E                      	push	ds
 10701 0000068E 8E1E[3401]              	mov	ds,[Batch]
 10702 00000692 49                      	dec	cx		; Don't count '%' in line length
 10703                                  COPYPARM:
 10704 00000693 AC                      	lodsb			; From resident segment
 10705 00000694 3C0D                    	cmp	al,0Dh		; Check for end of parameter
 10706 00000696 740F                    	je	short ENDPARAM
 10707 00000698 41                      	inc	cx		; Inc the line length
 10708 00000699 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10709 0000069D 7303                    	jnb	short LINETOOL	; Yes - handle it, handle it
 10710 0000069F AA                      	stosb
 10711 000006A0 EBF1                    	jmp	short COPYPARM
 10712                                  
 10713                                  ; We have copied up to the limit. Stop copying and eat remainder of batch
 10714                                  ; line. We need to make sure that the tooLong code isn't fooled into
 10715                                  ; believing that we are at EOL. Clobber AL too.
 10716                                  
 10717                                  LINETOOL:
 10718 000006A2 30C0                    	xor	al,al
 10719 000006A4 1F                      	pop	ds
 10720 000006A5 EBB2                    	jmp	short TOOLONG
 10721                                  
 10722                                  ; We have copied in an entire parameter. Go back for more
 10723                                  
 10724                                  ENDPARAM:
 10725 000006A7 1F                      	pop	ds
 10726 000006A8 E950FF                  	jmp	RDBAT
 10727                                  
 10728                                  ; We have found % followed by something other than 0-9. We presume that there
 10729                                  ; will be a following % character. In between is an environment variable that
 10730                                  ; we will fetch and replace in the batch line with its value.
 10731                                  
 10732                                  NEEDENV:
 10733                                  	; MSDOS 6.0 COMMAND.COM
 10734                                  	; 05/02/2023 
 10735 000006AB 49                      	dec     cx 		;AN070; Don't count "%"
 10736                                  
 10737                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10738 000006AC 1E                      	push	ds
 10739 000006AD 57                      	push	di
 10740                                  				; temp spot for name
 10741 000006AE BF[308B]                	mov	di,ID
 10742 000006B1 0430                    	add	al,'0'		; reconvert character
 10743 000006B3 AA                      	stosb			; store it in appropriate place
 10744                                  
 10745                                  ; loop getting characters until the next % is found or until EOL
 10746                                  
 10747                                  GETENV1:
 10748 000006B4 E8B102                  	call	GETBATBYT	; get the byte
 10749 000006B7 AA                      	stosb			; store it
 10750 000006B8 3C0D                    	cmp	al,0Dh		; EOL?
 10751 000006BA 7514                    	jne	short GETENV15	; no, see if it the term char
 10752                                  
 10753                                  ; The user entered a string with a % but no trailing %. We copy the string.
 10754                                  
 10755 000006BC 26C645FF00              	mov	byte [es:di-1],0 ; nul terminate the string
 10756 000006C1 BE[308B]                	mov	si,ID 		; point to buffer
 10757 000006C4 5F                      	pop	di		; point to line buffer
 10758 000006C5 0E                      	push	cs
 10759 000006C6 1F                      	pop	ds
 10760 000006C7 E88B02                  	call	STRCPY
 10761                                  	; 05/02/2023
 10762 000006CA 72D6                    	jc	short LINETOOL	;  MSDOS 6.0 COMMAND.COM
 10763                                  	; 24/04/2023
 10764                                  	;dec	di  		;  MSDOS 3.3 COMMAND.COM	
 10765 000006CC 1F                      	pop	ds
 10766 000006CD E94AFF                  	jmp	SAVBATBYT
 10767                                  GETENV15:
 10768 000006D0 3C25                    	cmp	al,'%'		; terminating %?
 10769 000006D2 75E0                    	jne	short GETENV1	; no, go suck out more characters
 10770                                  
 10771                                  ; M017 - following DEC is wrong, because we replace the % with a = here.
 10772                                  ; This was the source of bug #1.
 10773                                  ;	dec	cx		;AN070; Don't count "%"
 10774                                  
 10775 000006D4 B03D                    	mov	al,'='		; terminate  with =
 10776 000006D6 268845FF                	mov	[es:di-1],al
 10777                                  
 10778                                  ; ID now either has a =-terminated string which we are to find in the
 10779                                  ; environment or a non =-terminated string which will not be found in the
 10780                                  ; environment.
 10781                                  
 10782                                  GETENV2:
 10783 000006DA BE[308B]                	mov	si,ID
 10784 000006DD 0E                      	push	cs
 10785 000006DE 1F                      	pop	ds		; DS:SI points to name
 10786 000006DF 51                      	push	cx
 10787 000006E0 E8321C                  	call	find_name_in_environment
 10788 000006E3 59                      	pop	cx
 10789 000006E4 06                      	push	es
 10790 000006E5 1F                      	pop	ds
 10791 000006E6 0E                      	push	cs
 10792 000006E7 07                      	pop	es
 10793 000006E8 89FE                    	mov	si,di
 10794 000006EA 5F                      	pop	di		; get back pointer to command line
 10795                                  
 10796                                  ; If the parameter was not found, there is no need to perform any replacement.
 10797                                  ; We merely pretend that we've copied the parameter.
 10798                                  
 10799 000006EB 7203                    	jc	short GETENV6
 10800                                  
 10801                                  ; ES:DI points to command line being built
 10802                                  ; DS:SI points either to nul-terminated environment object AFTER =
 10803                                  
 10804 000006ED E86502                  	call	STRCPY		; (let RdBat handle overflow)
 10805                                  	; 24/04/2022
 10806                                  	;dec	di 		; MSDOS 3.3 COMMAND.COM
 10807                                  GETENV6:
 10808 000006F0 1F                      	pop	ds
 10809 000006F1 E907FF                  	jmp	RDBAT		; go back to batch file
 10810                                  
 10811                                  ; =============== S U B	R O U T	I N E =======================================
 10812                                  
 10813                                  ;   SkipToEOL - read from batch file until end of line
 10814                                  
 10815                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10816                                  SKIPTOEOL:
 10817 000006F4 F706[3401]FFFF          	test	word [Batch],-1 ; 0FFFFh
 10818                                  	;jnz	short SKIPTOEOL1  	
 10819                                  	;retn			; no batch file in effect
 10820                                  	
 10821 000006FA 7407                    	jz	short SKIPTOEOL2 ; Retro DOS v3.0 COMMAND.COM
 10822                                  SKIPTOEOL1:
 10823 000006FC E86902                  	call	GETBATBYT
 10824 000006FF 3C0D                    	cmp	al,0Dh		; eol character?
 10825 00000701 75F1                    	jnz	short SKIPTOEOL	; no, go eat another
 10826                                  SKIPTOEOL2:
 10827 00000703 C3                      	retn
 10828                                  
 10829                                  ; =============== S U B	R O U T	I N E =======================================
 10830                                  
 10831                                  ;Break	<Allocate and deallocate the transient portion>
 10832                                  
 10833                                  ; Free Transient. Modify ES,AX,flags
 10834                                  
 10835                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10836                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0708h
 10837                                  FREE_TPA:
 10838 00000704 06                      	push	es
 10839 00000705 8E06[A58A]              	mov	es,[RESSEG]
 10840 00000709 268E06[4703]            	mov	es,[es:Res_Tpa]
 10841 0000070E B449                    	mov	ah,49h
 10842                                  	;mov	ah,DEALLOC ; 49h
 10843 00000710 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 10844                                  			; ES = segment address of area to be freed
 10845 00000712 07                      	pop	es
 10846 00000713 C3                      	retn
 10847                                  
 10848                                  ; =============== S U B	R O U T	I N E =======================================
 10849                                  
 10850                                  ; Allocate transient. Modify AX,BX,DX,flags
 10851                                  
 10852                                  	; 06/02/2023
 10853                                  ALLOC_TPA:
 10854 00000714 06                      	push	es
 10855 00000715 8E06[A58A]              	mov	es,[RESSEG]
 10856 00000719 BBFFFF                  	mov	bx,0FFFFh 	; Re-allocate the transient	
 10857 0000071C B448                    	mov	ah,48h
 10858                                  	;mov	ah,ALLOC ; 48h
 10859 0000071E CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10860                                  			; BX = number of 16-byte paragraphs desired
 10861 00000720 53                      	push	bx	  	; Save size of block
 10862 00000721 B448                    	mov	ah,48h
 10863                                  	;mov	ah,ALLOC ; 48h
 10864 00000723 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10865                                  			; BX = number of 16-byte paragraphs desired
 10866                                  
 10867                                  ; Attempt to align TPA on 64K boundary
 10868                                  
 10869 00000725 5B                      	pop	bx		; Restore size of block
 10870 00000726 26A3[4703]              	mov	[es:Res_Tpa],ax
 10871                                  				; Save segment to beginning of block
 10872 0000072A A3[B58A]                	mov	[TRAN_TPA],ax
 10873                                  
 10874                                  ; Is the segment already aligned on a 64K boundary
 10875                                  
 10876 0000072D 89C2                    	mov	dx,ax		; Save segment
 10877 0000072F 25FF0F                  	and	ax,0FFFh	; Test if above boundary
 10878 00000732 7507                    	jnz	short CALC_TPA
 10879 00000734 89D0                    	mov	ax,dx
 10880 00000736 2500F0                  	and	ax,0F000h	; Test if multiple of 64K
 10881 00000739 7523                    	jnz	short NOROUND
 10882                                  CALC_TPA:
 10883 0000073B 89D0                    	mov	ax,dx
 10884 0000073D 2500F0                  	and	ax,0F000h
 10885 00000740 050010                  	add	ax,1000h	; Round up to next 64K boundary
 10886 00000743 7219                    	jc	short NOROUND	; Memory wrap if carry set
 10887                                  
 10888                                  ; Make sure that new boundary is within allocated range
 10889                                  
 10890 00000745 268B16[4703]            	mov	dx,[es:Res_Tpa]
 10891 0000074A 01DA                    	add	dx,bx		; Compute maximum address
 10892 0000074C 39C2                    	cmp	dx,ax		; Is 64K address out of range?
 10893 0000074E 720E                    	jb	short NOROUND
 10894                                  
 10895                                  ; Make sure that we won't overwrite the transient
 10896                                  
 10897 00000750 8CCB                    	mov	bx,cs		; CS is beginning of transient
 10898 00000752 39C3                    	cmp	bx,ax
 10899 00000754 7208                    	jb	short NOROUND
 10900                                  
 10901                                  ; The area from the 64K boundary to the beginning of the transient must
 10902                                  ; be at least 64K.
 10903                                  
 10904 00000756 29C3                    	sub	bx,ax
 10905                                  	;cmp	bx,4096
 10906 00000758 81FB0010                	cmp	bx,1000h	; Size greater than 64K?	
 10907 0000075C 7304                    	jnb	short ROUNDDONE
 10908                                  NOROUND:
 10909 0000075E 26A1[4703]              	mov	ax,[es:Res_Tpa]
 10910                                  ROUNDDONE:
 10911 00000762 26A3[3903]              	mov	[es:LTpa],ax	; Re-compute everything
 10912 00000766 A3[A78A]                	mov	[TPA],ax
 10913 00000769 89C3                    	mov	bx,ax
 10914 0000076B 8CC8                    	mov	ax,cs
 10915 0000076D 29D8                    	sub	ax,bx
 10916 0000076F 53                      	push	bx
 10917 00000770 BB1000                  	mov	bx,16
 10918 00000773 F7E3                    	mul	bx
 10919 00000775 5B                      	pop	bx
 10920 00000776 09D2                    	or	dx,dx
 10921 00000778 7403                    	jz	short SAVSIZ2
 10922 0000077A B8FFFF                  	mov	ax,-1
 10923                                  SAVSIZ2:
 10924                                  
 10925                                  ; AX is the number of bytes free in the buffer between the resident and the
 10926                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 10927                                  
 10928 0000077D 3D0002                  	cmp	ax,512
 10929 00000780 7603                    	jbe	short GOTSIZE2
 10930                                  	;and	ax,~1FFh
 10931 00000782 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FFh
 10932                                  GOTSIZE2:
 10933 00000785 A3[C68A]                	mov	[BYTCNT],ax
 10934 00000788 07                      	pop	es
 10935 00000789 C3                      	retn
 10936                                  
 10937                                  ; =============== S U B	R O U T	I N E =======================================
 10938                                  
 10939                                  ;Break	<BatCom - enter a batch file>
 10940                                  
 10941                                  ; The exec search has determined that the user has requested a batch file for
 10942                                  ; execution. We parse the arguments, create the batch segment, and signal
 10943                                  ; batch processing.
 10944                                  
 10945                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10946                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:078Eh
 10947                                  BATCOM:	
 10948                                  
 10949                                  ;ASSUME	DS:TRANGROUP, ES:NOTHING
 10950                                  
 10951                                  ; Batch parameters are read with ES set to segment of resident part
 10952                                  
 10953                                  	; MSDOS 6.0
 10954 0000078A 8E06[A58A]              	mov	es,[RESSEG]
 10955                                  	;ASSUME	ES:RESGROUP
 10956                                  	;cmp	byte [es:Call_Batch_Flag],1
 10957 0000078E 26803E[9A01]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 10958                                  					;AN043; If in CALL,
 10959 00000794 7403                    	jz	short skip_ioset	;AN043; redirection was already set up
 10960                                  	;invoke	IOSET			; Set up any redirection
 10961 00000796 E8E423                  	call	IOSET
 10962                                  skip_ioset:				;AN043;
 10963 00000799 E868FF                  	call	FREE_TPA		; G
 10964                                  	;cmp	byte [es:Call_Batch_Flag],1
 10965 0000079C 26803E[9A01]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 10966 000007A2 7403                    	jz	short GETECHO 		; G if we're in a call, don't execute
 10967                                  
 10968                                  	; 12/02/2023
 10969                                  	; MSDOS 3.3
 10970                                  	;call	IOSET
 10971                                  	;mov	es,[RESSEG]
 10972                                  	;call	FREE_TPA
 10973                                  	;;cmp	byte [es:CALL_BATCH_FLAG],1
 10974                                  	;cmp	byte [es:CALL_BATCH_FLAG],call_in_progress
 10975                                  	;jz	short GETECHO		; G if we're in a call, don't execute
 10976                                  
 10977                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10978                                  
 10979                                  ; Since BATCH has lower precedence than PIPE or FOR. If a new BATCH file is
 10980                                  ; being started it MUST be true that no FOR or PIPE is currently in progress.
 10981                                  ; Don't execute if in call
 10982                                  
 10983 000007A4 E89608                  	call	FOROFF
 10984                                  GETECHO:
 10985 000007A7 E8BE27                  	call	PipeOff
 10986 000007AA 26A0[8801]              	mov	al,[es:EchoFlag]	; preserve echo state for chaining
 10987 000007AE 2401                    	and	al,1			; Save current echo state
 10988                                  
 10989 000007B0 50                      	push	ax
 10990 000007B1 31C0                    	xor	ax,ax
 10991 000007B3 26F706[3401]FFFF        	test	word [es:Batch],-1 	; Are we in a batch file?
 10992 000007BA 7414                    	jz	short LEAVEBAT	   	; No, nothing to save
 10993 000007BC 26A1[3401]              	mov	ax,[es:Batch] 		; Get current batch segment
 10994                                  	;cmp	byte [es:Call_Batch_Flag],1
 10995 000007C0 26803E[9A01]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 10996 000007C6 7408                    	jz	short LEAVEBAT
 10997                                  
 10998                                  ;  We are in a chained batch file, save batlast from previous batch segment
 10999                                  ;  so that if we're in a CALL, we will return to the correct batch file.
 11000                                  
 11001 000007C8 06                      	push	es
 11002 000007C9 8EC0                    	mov	es,ax		; Get current batch segment
 11003                                  	;mov	ax,[es:02h] ; MSDOS 3.3 COMMAND.COM
 11004                                  				; Get previous batch segment
 11005                                  	; 12/02/2023
 11006                                  	;mov	ax,[es:03h] ; MSDOS 6.0 (&5.0) COMMAND.COM	
 11007 000007CB 26A10300                	mov	ax,[es:BATCHSEGMENT.BatLast]
 11008 000007CF 07                      	pop	es
 11009                                  LEAVEBAT:
 11010 000007D0 50                      	push	ax		; Keep segment until new one created
 11011                                  	;cmp	byte [es:Call_Batch_Flag],1
 11012 000007D1 26803E[9A01]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11013 000007D7 7403                    	jz	short STARTBAT
 11014 000007D9 E82001                  	call	BATCHOFF
 11015                                  
 11016                                  ; Find length of batch file
 11017                                  
 11018                                  STARTBAT:
 11019 000007DC 26C606[9A01]00          	mov	byte [es:Call_Batch_Flag],0 ; Reset call flag
 11020 000007E2 BE[CD89]                	mov	si,EXECPATH
 11021                                  
 11022                                  	; 12/02/2023
 11023                                  	; MSDOS 6.0
 11024 000007E5 B811B7                  	mov	ax,0B711h
 11025                                  	;mov	ax,AppendTruename
 11026                                  				;AN042; Get the real path where the batch file
 11027 000007E8 CD2F                    	int	2Fh		;AN042;    was found with APPEND
 11028 000007EA B44E                    	mov	ah,4Eh
 11029                                  	;mov	ah,Find_First	;AN042; The find_first will return it
 11030 000007EC 89F2                    	mov	dx,si		;AN042; Get the string
 11031 000007EE B91300                  	mov	cx,13h
 11032                                  	;mov	cx,search_attr	;AN042; filetypes to search for
 11033 000007F1 CD21                    	int	21h		;AN042;
 11034                                  
 11035                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11036 000007F3 E87624                  	call	dstrlen
 11037                                  ;
 11038                                  ; Allocate batch area:
 11039                                  ;   BYTE    type of segment
 11040                                  ;   WORD    segment of last batch file
 11041                                  ;   WORD    segment for FOR command
 11042                                  ;   BYTE    FOR flag state on entry to batch file
 11043                                  ;   DWORD   offset for next line
 11044                                  ;   10 WORD pointers to parameters.  -1 is empty parameter
 11045                                  ;   ASCIZ   file name (with . and ..)
 11046                                  ;   BYTES   CR-terminated parameters
 11047                                  ;   BYTE    0 flag to indicate end of parameters
 11048                                  ;
 11049                                  ; We allocate the maximum size for the command line and use setblock to shrink
 11050                                  ; later when we've squeezed out the extra
 11051                                  ;
 11052 000007F6 89CB                    	mov	bx,cx		; length of file name.
 11053                                  	;add	bx,190	; MSDOS 3.3 (BATCHSEGMENT struc size = 32)
 11054                                  	; 12/02/2023
 11055                                  	;add	bx,191	; MSDOS 6.0 (BATCHSEGMENT struc size = 33) 
 11056                                  	; 25/04/2023
 11057 000007F8 81C3BF00                	add	bx,15+BATCHSEGMENT.SIZE+COMBUFLEN+15
 11058                                  					; structure + max len + round up
 11059 000007FC 51                      	push	cx
 11060 000007FD B104                    	mov	cl,4
 11061 000007FF D3EB                    	shr	bx,cl		; convert to paragraphs
 11062 00000801 53                      	push	bx		; Save size of batch segment
 11063 00000802 B448                    	mov	ah,48h
 11064                                  	;mov	ah,ALLOC ; 48h ; Allocate batch segment
 11065 00000804 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11066                                  				; BX = number of 16-byte paragraphs desired
 11067 00000806 5B                      	pop	bx		; Get size of batch segment
 11068                                  
 11069                                  ; This should *NEVER* return an error. The transient is MUCH bigger than
 11070                                  ; the batch segment. This may not be true, however, in a multitasking system.
 11071                                  ; G This error will occur with nesting of batch files. We also need to
 11072                                  ; G make sure that we don't overlay the transient.
 11073                                  
 11074 00000807 7221                    	jc	short MEM_ERROR	;G not enough memory - exit
 11075                                  
 11076 00000809 50                      	push	ax		;G save batch segment
 11077 0000080A 01D8                    	add	ax,bx		;G get end of batch segment
 11078 0000080C 83C020                  	add	ax,20h		;G add some tpa work area
 11079 0000080F 8CCB                    	mov	bx,cs		;G get the transient segment
 11080                                  
 11081                                  	; MSDOS 6.0
 11082                                  ; M006; We cant check just for above. If the batchseg goes into a UMB, the
 11083                                  ; M006; batchseg is always above the transient. We need to change this code
 11084                                  ; M006; to only check for an overlap
 11085                                  
 11086                                  	;;mov	dx,offset TRANGROUP:TranSpaceEnd ; M006
 11087                                  	; 12/02/2023
 11088                                  	;;mov	dx,98C5h ; MSDOS 5.0 COMMAND.COM
 11089                                  	;mov	dx,TRANSPACEEND		
 11090                                  	;add	dx,15		;round up para; M006
 11091 00000811 BA8295                  	mov	dx,TRANSPACEEND+15
 11092                                  
 11093 00000814 D3EA                    	shr	dx,cl		;para size of transient; M006
 11094 00000816 01DA                    	add	dx,bx		;dx = top of transient; M006
 11095                                  
 11096 00000818 39D8                    	cmp	ax,bx		; M006
 11097 0000081A 7211                    	jb	short ENOUGH_MEM
 11098                                  				; Batchseg below transient
 11099                                  				; enough memory ; M006
 11100 0000081C 39D0                    	cmp	ax,dx		; M006
 11101 0000081E 770D                    	ja	short ENOUGH_MEM	
 11102                                  				; Batchseg above transient
 11103                                  				; enough memory ; M006
 11104                                  
 11105                                  ; M006; Batchseg overlaps transient -- insufficient memory
 11106                                  
 11107 00000820 58                      	pop	ax		; restore ax; M006
 11108                                  
 11109                                  	; 12/02/2023
 11110                                  	; MSDOS 3.3
 11111                                  ; M006;	cmp	ax,bx		;G do we end before the transient
 11112                                  ; M006;	pop	ax		;G get batch segment back
 11113                                  ; M006;	jb	short ENOUGH_MEM ;G we have enough memory - continue
 11114                                  
 11115                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11116 00000821 06                      	push	es		;G no we're hitting the transient
 11117 00000822 8EC0                    	mov	es,ax
 11118 00000824 B80049                  	mov	ax,4900h
 11119                                  	;mov	ax,DEALLOC*256 ; 4900h ;G deallocate the batch segment
 11120 00000827 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11121                                  			; ES = segment address of area to be freed
 11122 00000829 07                      	pop	es
 11123                                  MEM_ERROR:
 11124 0000082A E9B800                  	jmp	NO_MEMORY	;G Set up for message and exit
 11125                                  
 11126                                  ENOUGH_MEM:
 11127                                  	; 12/02/2023 - Retro DOS v4.0 COMMAND.COM
 11128                                  	; MSDOS 6.0
 11129 0000082D 58                      	pop	ax		; restore ax; M006
 11130                                  
 11131                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11132 0000082E 26A3[3401]              	mov	[es:Batch],ax
 11133 00000832 E8DFFE                  	call	ALLOC_TPA
 11134                                  
 11135                                  ; Initialize batch segment
 11136                                  
 11137 00000835 5A                      	pop	dx		; length of name
 11138 00000836 58                      	pop	ax		;G get saved batch segment back
 11139 00000837 26FF06[9701]            	inc	word [es:Nest]	;G increment # batch files in progress
 11140 0000083C 06                      	push	es
 11141 0000083D 268E06[3401]            	mov	es,[es:Batch]
 11142                                  	;mov	byte [ES:0],0
 11143                                  				; signal batch file type
 11144 00000842 26C606000000            	mov	byte [es:BATCHSEGMENT.BatType],BATCHTYPE ; 0
 11145                                  	;;mov	[es:2],ax	; MSDOS 3.3
 11146                                  				;G save segment of last batch file
 11147                                  	;mov	[es:3],ax	; MSDOS 6.0
 11148 00000848 26A30300                	mov	[es:BATCHSEGMENT.BatLast],ax
 11149 0000084C 1E                      	push	ds
 11150 0000084D 8E1E[A58A]              	mov	ds,[RESSEG]	;G set to resident data
 11151                                  
 11152 00000851 31C0                    	xor	ax,ax
 11153 00000853 8A1E[9401]              	mov	bl,[ForFlag]	;G get the current FOR state
 11154                                  	;;mov	[es:6],bl	; MSDOS 3.3
 11155                                  				;G save it in the batch segment
 11156                                  	;mov	[es:7],bl	; MSDOS 6.0 	
 11157 00000857 26881E0700              	mov	[es:BATCHSEGMENT.BatForFlag],bl
 11158 0000085C F6C3FF                  	test	bl,-1		;G are we in a FOR?
 11159 0000085F 7406                    	jz	short FOR_NOT_ON ;G no, for segment set to 0	
 11160                                  	;mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11161                                  	;mov	byte [ForFlag],0 ;G reset forflag
 11162                                  	; 26/07/2024
 11163 00000861 A2[9401]                	mov	[ForFlag],al ; 0
 11164 00000864 A1[9501]                	mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11165                                  FOR_NOT_ON:
 11166                                  	;;mov	[es:4],ax	; MSDOS 3.3
 11167                                  				;G save FOR segment in batch segment
 11168                                  	;mov	[es:5],ax	; MSDOS 6.0		
 11169 00000867 26A30500                	mov	[es:BATCHSEGMENT.BatForPtr],ax	
 11170 0000086B 31C0                    	xor	ax,ax
 11171 0000086D A3[9501]                	mov	[ForPtr],ax	;G make sure for segment is not active
 11172 00000870 8A1E[8801]              	mov	bl,[EchoFlag]
 11173 00000874 1F                      	pop	ds
 11174                                  	;mov	[es:1],bl 
 11175                                  				 ;G save echo state of parent
 11176 00000875 26881E0100              	mov	[es:BATCHSEGMENT.BatEchoFlag],bl
 11177                                  ;SR;
 11178                                  ; Initialize the new BatchEOF flag we have added to 0
 11179                                  
 11180                                  	; MSDOS 6.0
 11181                                  	;mov	byte [es:2],0
 11182 0000087A 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 11183                                  
 11184                                  	;mov	[es:08h],ax  ; MSDOS 6.0
 11185 00000880 26A30800                	mov	[es:BATCHSEGMENT.BatSeek],ax ; point to beginning of file
 11186                                  	;mov	[es:0Ah],ax  ; MSDOS 6.0	
 11187 00000884 26A30A00                	mov	[es:BATCHSEGMENT.BatSeek+2],ax
 11188                                  
 11189                                  ; Initialize pointers
 11190                                  
 11191 00000888 48                      	dec	ax		; put -1 into AX
 11192                                  	;;mov	di,0Bh  ; MSDOS 3.3
 11193                                  				; point to parm area
 11194                                  	;mov	di,0Ch	; MSDOS 6.0
 11195 00000889 BF0C00                  	mov	di,BATCHSEGMENT.BatParm
 11196 0000088C 89FB                    	mov	bx,di
 11197 0000088E B90A00                  	mov	cx,10
 11198 00000891 F3AB                    	rep stosw		; Init to no parms
 11199                                  
 11200                                  ; Move in batch file name
 11201                                  
 11202 00000893 89D1                    	mov	cx,dx
 11203 00000895 F3A4                    	rep	movsb
 11204                                  
 11205                                  ; Now copy the command line into batch segment, parsing the arguments along
 11206                                  ; the way. Segment will look like this:
 11207                                  ;
 11208                                  ;   <arg0>CR<arg1>CR...<arg9>CR<arg10>CR...<ARGn>CR 0
 11209                                  ;
 11210                                  ; or, in the case of fewer arguments:
 11211                                  ;
 11212                                  ;   <arg0>CR<arg1>CR...<arg6>CR CR CR ... CR 0
 11213                                  
 11214 00000897 BE[0689]                	mov	si,COMBUF+2
 11215                                  	;mov	cx,10		; at most 10 arguments
 11216                                  	; 07/06/2023
 11217 0000089A B10A                    	mov	cl,10
 11218                                  EACHPARM:
 11219 0000089C E83F1D                  	call	scanoff		; skip to argument
 11220                                  
 11221                                  ; AL is first non-delimiter. DS:SI points to char = AL
 11222                                  
 11223 0000089F 3C0D                    	cmp	al,0Dh		; end of road?
 11224 000008A1 741D                    	jz	short HAVPARM	; yes, no more arguments
 11225                                  
 11226                                  ; If CX = 0 then we have stored the most parm we can. Skip store
 11227                                  
 11228 000008A3 E306                    	jcxz	MOVPARM		; Only first 10 parms get pointers
 11229                                  
 11230                                  ; Go into allocated piece and stick in new argument pointer.
 11231                                  
 11232 000008A5 26893F                  	mov	[es:bx],di	; store batch pointer
 11233 000008A8 83C302                  	add	bx,2		; advance arg counter
 11234                                  
 11235                                  ; Move the parameter into batch segment
 11236                                  
 11237                                  MOVPARM:
 11238 000008AB AC                      	lodsb			; get byte
 11239 000008AC E8371D                  	call	DELIM		; if delimiter
 11240 000008AF 7407                    	jz	short ENDPARM	; then done with parm
 11241 000008B1 AA                      	stosb			; store byte
 11242 000008B2 3C0D                    	cmp	al,0Dh		; if CR then not delimiter
 11243 000008B4 740A                    	jz	short HAVPARM	; but end of parm list, finish
 11244 000008B6 EBF3                    	jmp	short MOVPARM
 11245                                  
 11246                                  ; We have copied a parameter up until the first separator.
 11247                                  ; Terminate it with CR.
 11248                                  
 11249                                  ENDPARM:
 11250 000008B8 B00D                    	mov	al,0Dh
 11251 000008BA AA                      	stosb
 11252 000008BB E3DF                    	jcxz	EACHPARM	; if no parameters, don't dec
 11253 000008BD 49                      	dec	cx		; remember that we've seen one.	
 11254 000008BE EBDC                    	jmp	short EACHPARM
 11255                                  
 11256                                  ; We have parsed the entire line. Terminate the arg list
 11257                                  
 11258                                  HAVPARM:
 11259 000008C0 30C0                    	xor	al,al		; Nul terminate the parms
 11260 000008C2 AA                      	stosb
 11261                                  
 11262                                  ; Now we know EXACTLY how big the BATCH segment is. Round up size (from DI)
 11263                                  ; into paragraphs and setblock to the appropriate size
 11264                                  
 11265 000008C3 8D5D0F                  	lea	bx,[di+15]
 11266 000008C6 B104                    	mov	cl,4
 11267 000008C8 D3EB                    	shr	bx,cl
 11268 000008CA B44A                    	mov	ah,4Ah
 11269                                  	;mov	ah,SETBLOCK ; 4Ah
 11270 000008CC CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 11271                                  			; ES = segment address of block	to change
 11272                                  			; BX = new size	in paragraphs
 11273 000008CE 07                      	pop	es
 11274 000008CF 06                      	push	es
 11275 000008D0 1F                      	pop	ds		; Simply batch FCB setup
 11276 000008D1 833E[8E01]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 11277 000008D6 7506                    	jne	short NOBATSING
 11278 000008D8 C706[8E01]F0FF          	mov	word [SingleCom],0FFF0h ; Flag single command BATCH job
 11279                                  
 11280                                  NOBATSING:
 11281                                  
 11282                                  ; Enter the batch file with the current echo state
 11283                                  
 11284 000008DE 58                      	pop	ax		; Get original echo state
 11285 000008DF A2[8801]                	mov	[EchoFlag],al	; restore it
 11286 000008E2 E91FF8                  	jmp	TCOMMAND
 11287                                  
 11288                                  ; The following is executed if there isn't enough memory for batch segment
 11289                                  
 11290                                  NO_MEMORY:
 11291 000008E5 5A                      	pop	dx		; even up our stack 
 11292 000008E6 58                      	pop	ax
 11293 000008E7 58                      	pop	ax
 11294 000008E8 E829FE                  	call	ALLOC_TPA	; reallocate memory
 11295                                  
 11296                                  	; 12/02/2023
 11297                                  	; MSDOS 3.3
 11298                                  	;mov	dx,INSFMEMMESPTR
 11299                                  	;jmp	CERROR
 11300                                  
 11301                                  	; MSDOS 6.0
 11302                                  	;mov	byte [msg_disp_class],1
 11303 000008EB C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class
 11304                                  				;AN000; set up extended error msg class
 11305                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 11306 000008F0 BA[FC7E]                	mov	dx,extend_buf_ptr
 11307                                  	;			;AC000; get extended message pointer
 11308                                  	;mov	word [extend_buf_ptr],8
 11309 000008F3 C706[FC7E]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 11310                                  				;AN000; get message number in control block
 11311 000008F9 E95620                  	jmp	cerror		;g print error message and go...
 11312                                  
 11313                                  ; =============== S U B	R O U T	I N E =======================================
 11314                                  
 11315                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11316                                  BATCHOFF:
 11317 000008FC 50                      	push	ax
 11318 000008FD 06                      	push	es
 11319 000008FE 1E                      	push	ds
 11320 000008FF 53                      	push	bx
 11321                                  
 11322 00000900 2E8E06[A58A]            	mov	es,[cs:RESSEG]
 11323                                  	;mov	ds,[cs:RESSEG]
 11324                                  	; 26/07/2024
 11325 00000905 06                      	push	es
 11326 00000906 1F                      	pop	ds
 11327                                  
 11328 00000907 A1[3401]                	mov	ax,[Batch]	; Free the batch segment
 11329 0000090A 09C0                    	or	ax,ax
 11330 0000090C 7442                    	jz	short NOTFREE
 11331                                  
 11332 0000090E 06                      	push	es
 11333 0000090F 8EC0                    	mov	es,ax
 11334 00000911 F606[8801]01            	test	byte [EchoFlag],1
 11335                                  				;G Is echo on?
 11336 00000916 7505                    	jnz	short ECHO_LAST_LINE
 11337                                  				;G Yes - echo last line in file
 11338                                  	;mov	byte [SUPPRESS],0
 11339 00000918 C606[8901]00            	mov	byte [Suppress],NO_ECHO
 11340                                  				;G no - don't echo last line in file	
 11341                                  ECHO_LAST_LINE:
 11342                                  	;mov	bl,[es:1]
 11343 0000091D 268A1E0100              	mov	bl,[es:BATCHSEGMENT.BatEchoFlag]
 11344                                  				; G get echo state
 11345 00000922 881E[8801]              	mov	[EchoFlag],bl
 11346                                  				; G  and restore it
 11347                                  	;;mov	bx,[es:4]  ; MSDOS 3.3
 11348                                  	;mov	bx,[es:5]  ; MSDOS 6.0
 11349 00000926 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr]
 11350                                  				;G Get FOR segment
 11351 0000092B 891E[9501]              	mov	[ForPtr],bx	;G  and restore it
 11352                                  	;;mov	bl,[es:6]  ; MSDOS 3.3
 11353                                  	;mov	bl,[es:7]  ; MSDOS 6.0	
 11354 0000092F 268A1E0700              	mov	bl,[es:BATCHSEGMENT.BatForFlag]
 11355                                  				;G Get FOR flag
 11356 00000934 881E[9401]              	mov	[ForFlag],bl
 11357                                  				;G  and restore it
 11358                                  	;;mov	bx,[es:2] ; MSDOS 3.3
 11359                                  	;mov	bx,[es:3] ; MSDOS 6.0	
 11360 00000938 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 11361                                  				;G  Get old batch segment
 11362                                  
 11363 0000093D B449                    	mov	ah,49h
 11364                                  	;mov	ah,DEALLOC ; 49h
 11365 0000093F CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11366                                  			; ES = segment address of area to be freed
 11367 00000941 07                      	pop	es
 11368 00000942 891E[9B01]              	mov	[Next_Batch],bx	;G reset batch segment	
 11369 00000946 26FF0E[9701]            	dec	word [es:Nest]
 11370 0000094B 31C0                    	xor	ax,ax
 11371 0000094D A3[3401]                	mov	[Batch],ax	; No batch in progress
 11372                                  NOTFREE:
 11373 00000950 5B                      	pop	bx
 11374 00000951 1F                      	pop	ds
 11375 00000952 07                      	pop	es
 11376 00000953 58                      	pop	ax
 11377 00000954 C3                      	retn
 11378                                  
 11379                                  ; =============== S U B	R O U T	I N E =======================================
 11380                                  
 11381                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11382                                  
 11383                                  ; StrCpy - copy string, checking count in CX against COMBUFLEN
 11384                                  ;	Entry : DS:SI ==> source string
 11385                                  ;		ES:DI ==> destination string
 11386                                  ;		CX = current length of destination string
 11387                                  ;	Exit  : string copied, CX updated, Carry set if length limit exceeded
 11388                                  
 11389                                  	; 12/02/2023	
 11390                                  	; MSDOS 3.3
 11391                                  ;STRCPY:
 11392                                  	;push	ax
 11393                                  ;CCYCLE:
 11394                                  	;lodsb
 11395                                  	;stosb
 11396                                  	;or	al,al
 11397                                  	;jnz	short CCYCLE
 11398                                  	;pop	ax
 11399                                  	;retn
 11400                                  
 11401                                  ;Procedure StrCpy,NEAR
 11402                                  
 11403                                  	; 12/02/2023
 11404                                  	; MSDOS 6.0
 11405                                  STRCPY:
 11406 00000955 50                      	push	ax
 11407                                  ccycle:
 11408 00000956 AC                      	lodsb
 11409 00000957 41                      	inc	cx
 11410                                  	;cmp	cx,128
 11411 00000958 81F98000                	cmp	cx,COMBUFLEN
 11412                                  	;jb	short ccopy
 11413                                  	;stc			; set carry to signal error
 11414                                  	;jmp	short ccend
 11415                                  	; 12/02/2023
 11416 0000095C F5                      	cmc
 11417 0000095D 7205                    	jc	short ccend
 11418                                  ccopy:
 11419 0000095F AA                      	stosb
 11420 00000960 08C0                    	or	al,al
 11421 00000962 75F2                    	jnz	short ccycle
 11422                                  ccend:
 11423 00000964 49                      	dec	cx		; discount extra byte
 11424 00000965 4F                      	dec	di		; back up pointer
 11425 00000966 58                      	pop	ax
 11426 00000967 C3                      	retn			; return carry clear
 11427                                  
 11428                                  ;EndProc StrCpy
 11429                                  
 11430                                  ;============================================================================
 11431                                  ; TBATCH2.ASM, MSDOS 6.0, 1991
 11432                                  ;============================================================================
 11433                                  ; 12/10/2018 - Retro DOS v3.0
 11434                                  
 11435                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0892h
 11436                                  
 11437                                  ; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11438                                  
 11439                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 0977h
 11440                                  
 11441                                  ; =============== S U B	R O U T	I N E =======================================
 11442                                  
 11443                                  ;Break	<GetBatByt - retrieve a byte from the batch file>
 11444                                  
 11445                                  ; Get one byte from the batch file and return it in AL. End-of-file returns
 11446                                  ; <CR> and ends batch mode. DS must be set to resident segment.
 11447                                  ; AH, DX destroyed.
 11448                                  
 11449                                  GETBATBYT:
 11450 00000968 53                      	push	bx
 11451 00000969 51                      	push	cx
 11452 0000096A 1E                      	push	ds
 11453 0000096B F606[7E01]FF            	test	byte [Batch_Abort],-1
 11454                                  	;jnz	short BATEOF
 11455                                  	; 14/02/2023
 11456 00000970 7403                    	jz	short getbatbyt1
 11457 00000972 E9D100                  	jmp	BATEOF
 11458                                  getbatbyt1:
 11459 00000975 F706[3401]FFFF          	test	word [Batch],-1
 11460                                  	;jz	short BATEOF
 11461                                  	; 14/02/2023
 11462 0000097B 7503                    	jnz	short getbatbyt2
 11463 0000097D E9C600                  	jmp	BATEOF
 11464                                  getbatbyt2:
 11465 00000980 06                      	push	es
 11466 00000981 8E06[3401]              	mov	es,[Batch]
 11467                                  
 11468                                  	; MSDOS 6.0
 11469                                  ;M020;
 11470                                  ;Check if we have already reached EOF (BatchEOF flag set. Then, we do not
 11471                                  ;try to read from the batchfile again.
 11472                                  
 11473                                  	;cmp	byte [es:2],0
 11474 00000985 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11475                                  				;already reached EOF?	;M020
 11476 0000098B 7403                    	jz	short not_eof	;no, read batch file	;M020
 11477 0000098D E99C00                  	jmp	At_EOF		;yes, no more reads	;M020
 11478                                  not_eof:						;M020
 11479                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11480                                  	;add	word [es:8],1	; MSDOS 6.0
 11481 00000990 268306080001            	add	word [es:BATCHSEGMENT.BatSeek],1
 11482                                  	;adc	word [es:10],0	; MSDOS 6.0
 11483 00000996 2683160A0000            	adc	word [es:BATCHSEGMENT.BatSeek+2],0
 11484 0000099C 07                      	pop	es
 11485                                  
 11486                                  ; See if we have bytes buffered...
 11487                                  
 11488 0000099D 8CC8                    	mov	ax,cs
 11489 0000099F 8ED8                    	mov	ds,ax
 11490 000009A1 8B1E[2B95]              	mov	bx,[BATBUFPOS]
 11491 000009A5 83FBFF                  	cmp	bx,-1
 11492 000009A8 7540                    	jnz	short UNBUF
 11493                                  
 11494                                  ; There are no bytes in the buffer. Let's try to fill it up.
 11495                                  
 11496 000009AA BA[2D95]                	mov	dx,BATBUF
 11497 000009AD 8B0E[4384]              	mov	cx,[BATBUFLEN] ; max to read.
 11498 000009B1 8B1E[598D]              	mov	bx,[BATHAND]
 11499                                  	; 14/02/2023
 11500 000009B5 B43F                    	mov	ah,3Fh
 11501                                  	;mov	ah,READ ; 3Fh	; Get one more byte from batch file
 11502 000009B7 CD21                    	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 11503                                  			; BX = file handle,CX = number	of bytes to read
 11504                                  			; DS:DX	-> buffer
 11505                                  	; MSDOS 6.0
 11506 000009B9 7321                    	jnc	short bat_read_ok	;AN022; if no error - continue
 11507                                  	;invoke	get_ext_error_number	;AN022; get the error
 11508 000009BB E83213                  	call	get_ext_error_number
 11509 000009BE 1E                      	push	ds			;AN022; save local segment
 11510 000009BF 8E1E[A58A]              	mov	ds,[RESSEG]		;AN022; get resident segment
 11511                                  	;assume ds:resgroup		;AN022;
 11512 000009C3 89C2                    	mov	dx,ax			;AN022; put error in DX
 11513                                  	;invoke	output_batch_name	;AN022; set up to print the error
 11514 000009C5 E861FB                  	call	output_batch_name
 11515 000009C8 1F                      	pop	ds			;AN022;
 11516                                  	;assume	ds:trangroup		;AN022;
 11517                                  	;invoke	std_eprintf		;AN022; print out the error
 11518 000009C9 E8FD43                  	call	std_eprintf
 11519                                  	;mov	byte ptr combuf+2,end_of_line_in
 11520 000009CC C606[0689]0D            	mov	byte [COMBUF+2],END_OF_LINE_IN ; 0Dh
 11521                                  	;				;AN022; terminate the batch line for parsing
 11522                                  	;mov	byte ptr combuf+3,end_of_line_out 
 11523 000009D1 C606[0789]00            	mov	byte [COMBUF+3],END_OF_LINE_OUT ; 0
 11524                                  	;				;AN022; terminate the batch line for output
 11525                                  ;M020;
 11526                                  ;Old bug! We jump to BatEof from here without ds=RESGROUP. Probably, this
 11527                                  ;error is never hit (and it shouldn't be)
 11528                                  
 11529 000009D6 8E1E[A58A]              	mov	ds,[RESSEG]		; ds = RESGROUP ; M020
 11530 000009DA EB6A                    	jmp	short BATEOF		;AN022; terminate the batch file
 11531                                  bat_read_ok:				;AN022;
 11532                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11533 000009DC 89C1                    	mov	cx,ax
 11534                                  	;jcxz	TURN_OFF ; MSDOS 3.3
 11535                                  	; 14/02/2023
 11536 000009DE E320                    	jcxz	BATEOFDS ; MSDOS 6.0
 11537 000009E0 890E[4D95]              	mov	[BATBUFEND],cx
 11538 000009E4 31DB                    	xor	bx,bx
 11539 000009E6 891E[2B95]              	mov	[BATBUFPOS],bx
 11540                                  
 11541                                  	; Buffered bytes!
 11542                                  UNBUF:
 11543 000009EA 8A87[2D95]              	mov	al,[BATBUF+bx]		; get next byte
 11544 000009EE 43                      	inc	bx
 11545 000009EF 3B1E[4D95]              	cmp	bx,[BATBUFEND]		; beyond end of buffer?
 11546 000009F3 7203                    	jb	short SETBUFPOS
 11547 000009F5 BBFFFF                  	mov	bx,-1
 11548                                  SETBUFPOS:
 11549 000009F8 891E[2B95]              	mov	[BATBUFPOS],bx
 11550 000009FC 3C1A                    	cmp	al,1Ah			; ^Z for termination?
 11551 000009FE 7575                    	jne	short GETBYTEDONE
 11552                                  
 11553                                  ;We get here only when we hit an EOF
 11554                                  	
 11555                                  	; MSDOS 6.0
 11556                                  BATEOFDS:
 11557                                  ;SR;
 11558                                  ; HACK!!! A massive hack being put in here to get batch processing to work
 11559                                  ;properly on EOF. Previously, a CR was returned and batch processing turned
 11560                                  ;off the moment we hit an EOF. Unfortunately, if the last line had no CR-LF,
 11561                                  ;batch processing is turned off before the last line is processed and so 
 11562                                  ;this line would never be executed. 
 11563                                  ;   	To fix this, a new flag BatchEOF has been introduced. This flag is
 11564                                  ;set to 4 if there is no CR-LF before the EOF -- this is determined by looking
 11565                                  ;at the buffer contents. If there is no LF ( we assume that presence of LF
 11566                                  ;indicated a CR-LF combination), then we set BatchEOF to 4 and return a 
 11567                                  ;fake CR to the caller. This decrements BatchEOF. On the next call to this
 11568                                  ;routine, BatchEOF is decremented to 2 and a fake lF is returned. On the 
 11569                                  ;third call, BatchEOF becomes zero and batch processing is turned off,
 11570                                  ;now that the last line has been processed. If the EOF is the first char read into the buffer 
 11571                                  ;during this call, and there was a CR-LF previously, we are going to fake
 11572                                  ;another redundant CR-LF. There is no work-around I can think of.
 11573                                  ; 	I would love to restructure this entire routine and its caller to
 11574                                  ;make the flow really easy to understand but I guess this will have to wait.
 11575                                  ;
 11576 00000A00 06                      	push	es
 11577 00000A01 8E06[A58A]              	mov	es,[RESSEG]
 11578                                  ;SR;
 11579                                  ; If we had already set the BatchEOF flag on a previous call (BatchEOF == 2
 11580                                  ;or BatchEOF == 1 now), then do not do the LF check.
 11581                                  ;
 11582 00000A05 268E06[3401]            	mov	es,[es:Batch]
 11583                                  	;cmp	byte [es:2],0
 11584 00000A0A 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11585 00000A10 7516                    	jnz	short crpresent
 11586                                  
 11587                                  	;inc	byte [es:2]
 11588 00000A12 26FE060200              	inc	byte [es:BATCHSEGMENT.BatchEOF]
 11589                                  					;match the dec following
 11590 00000A17 8B1E[4D95]              	mov	bx,[BATBUFEND]
 11591 00000A1B 80BF[2C95]0A            	cmp	byte [bx+BATBUF-1],0Ah	;was a LF present?
 11592 00000A20 7406                    	je	short crpresent		;yes, no need to fake it
 11593                                  
 11594                                  	;add	byte [es:2],3
 11595 00000A22 268006020003            	add	byte [es:BATCHSEGMENT.BatchEOF],3
 11596                                  					;BatchEOF == 4 to fake CR-LF
 11597                                  crpresent:
 11598                                  ;;	;pop	es
 11599                                  
 11600                                  	;ASSUME	DS:TranGroup
 11601                                  	; 14/02/2023
 11602 00000A28 8E1E[A58A]              	mov	ds,[RESSEG]
 11603                                  	;ASSUME	DS:ResGroup
 11604                                  ;SR;
 11605                                  ; The shift operation is done here to replace the decrement. This is because
 11606                                  ;we can jump to this label directly from above when bogus calls are made to
 11607                                  ;this routine even after batch processing is turned off. The shift ensures
 11608                                  ;maintains the following invariance : 4 -> 2; 2 -> 1 ; 1 -> 0; 0 -> 0. Thus,
 11609                                  ;it is used as a decrement and also as a NOP to just fall through on bogus 
 11610                                  ;calls.
 11611                                  ;	We turn batch processing off if BatchEOF == 1 or BatchEOF == 0.
 11612                                  ;BatchEOF == 1 when we fall through from BatEOFDS and BatchEOF == 0 on a 
 11613                                  ;direct jump to BATEOF. If BatchEOF == 4, we return a fake CR-LF without 
 11614                                  ;turning batch processing off.
 11615                                  
 11616                                  At_EOF:					;new label added ;M020
 11617                                  	;shr	byte [es:2],1
 11618 00000A2C 26D02E0200              	shr	byte [es:BATCHSEGMENT.BatchEOF],1
 11619                                  					;decrement the flag
 11620 00000A31 7412                    	jz	short turn_off		;zero,turn batch off
 11621                                  	;cmp	byte [es:2],1
 11622 00000A33 26803E020001            	cmp	byte [es:BATCHSEGMENT.BatchEOF],1				
 11623 00000A39 7405                    	jz	short ret_lf		;BatchEOF was 2, return LF
 11624                                  ;
 11625                                  ;BatchEOF == 4, indicates return fake CR now and fake LF next.
 11626                                  ;
 11627 00000A3B B00D                    	mov	al,0Dh			;return fake CR.
 11628 00000A3D 07                      	pop	es
 11629 00000A3E EB35                    	jmp	short GETBYTEDONE
 11630                                  ret_lf:
 11631 00000A40 B00A                    	mov	al,0Ah			;return fake LF
 11632 00000A42 07                      	pop	es
 11633 00000A43 EB30                    	jmp	short GETBYTEDONE		
 11634                                  turn_off:
 11635 00000A45 07                      	pop	es
 11636                                  ;BATEOF:
 11637                                  	; MSDOS 3.3
 11638                                  ;TURN_OFF:
 11639                                  	;mov	ds,[RESSEG]
 11640                                  
 11641                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11642                                  BATEOF:
 11643 00000A46 E8B3FE                  	call	BATCHOFF
 11644 00000A49 E8CC02                  	call	BATCLOSE
 11645                                  
 11646                                  ;;;	mov	BatchEOF,0	;make sure BatchEOF = 0
 11647                                  
 11648                                  ;SR; BugBug
 11649                                  ; There is a good reason why this carriage return is being returned here. 
 11650                                  ;This was part of the old code, thanks to some brain-damaged coding. Because,
 11651                                  ;of the way the caller is structured, a fake CR has to be returned again on
 11652                                  ;EOF to ensure the termination of the caller's loop. If echo is on, this
 11653                                  ;results in an extra linefeed after the batchfile is run if the last line of
 11654                                  ;the batchfile already had a CR-LF. 
 11655                                  ;NB: Do not confuse this with the faked CR. The fake CR-LF was to mark
 11656                                  ;the end-of-line. This CR is to mark the end-of-file.
 11657                                  
 11658 00000A4C B00D                    	mov	al,0Dh			; If end-of-file, then end of line
 11659 00000A4E F606[7E01]FF            	test	byte [Batch_Abort],-1
 11660 00000A53 C606[7E01]00            	mov	byte [Batch_Abort],0
 11661 00000A58 7407                    	jz	short CONT_GET_BYT
 11662 00000A5A BF[0689]                	mov	di,COMBUF+2		; reset pointer to beginning of buffer
 11663 00000A5D 31C9                    	xor	cx,cx			; zero line length
 11664 00000A5F EB14                    	jmp	short GETBYTEDONE
 11665                                  CONT_GET_BYT:
 11666 00000A61 833E[8E01]F0            	cmp	word [SingleCom],0FFF0h ; See if we need to set SINGLECOM
 11667 00000A66 750D                    	jne	short GETBYTEDONE
 11668 00000A68 833E[9701]00            	cmp	word [Nest],0		;G See if we have nested batch files
 11669 00000A6D 7506                    	jnz	short GETBYTEDONE	;G Yes - don't exit just yet
 11670 00000A6F C706[8E01]FFFF          	mov	word [SingleCom],0FFFFh	; -1 ; Cause termination
 11671                                  GETBYTEDONE:
 11672 00000A75 1F                      	pop	ds
 11673 00000A76 59                      	pop	cx
 11674 00000A77 5B                      	pop	bx
 11675 00000A78 C3                      	retn
 11676                                  
 11677                                  ; ---------------------------------------------------------------------------
 11678                                  
 11679                                  ;break	<$If - conditional execution>
 11680                                  
 11681                                  	; 17/04/2023
 11682                                  ;IFERRORP:
 11683                                  ;	pop	ax
 11684                                  ;IFERROR:
 11685                                  ;	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 11686                                  ;FORERROR:
 11687                                  ;	mov	dx,SYNTMES_PTR
 11688                                  ;	jmp	cerror
 11689                                  
 11690                                  ; ---------------------------------------------------------------------------
 11691                                  
 11692                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11693                                  _$IF:
 11694                                  	; MSDOS 6.0
 11695                                  ; Turn off any pipes in progress.
 11696 00000A79 1E                      	push	ds			;AN004; save local DS
 11697 00000A7A 8E1E[A58A]              	mov	ds,[RESSEG]		;AN004; get resident segment
 11698                                  	;assume	ds:resgroup		;AN004;
 11699 00000A7E 803E[0102]00            	cmp	byte [PipeFiles],0	;AN004; Only turn off if present.
 11700 00000A83 7403                    	jz	short IFNoPipe		;AN004; no pipe - continue
 11701                                  	;invoke	PipeDel 		;AN004; turn off piping
 11702 00000A85 E86522                  	call	PIPEDEL	
 11703                                  IFNoPipe:				;AN004;
 11704 00000A88 1F                      	pop	ds			;AN004; get local DS back
 11705                                  	;assume	ds:trangroup		;AN004;
 11706                                  
 11707                                  	; MSDOS 3.3 (&MSDOS 6.0)
 11708 00000A89 C606[B88A]00            	mov	byte [IFNOTFLAG],0
 11709 00000A8E C706[0094]0000          	mov	word [IF_NOT_COUNT],0
 11710 00000A94 BE8100                  	mov	si,81h
 11711                                  IFREENT:
 11712 00000A97 E8441B                  	call	scanoff
 11713 00000A9A 3C0D                    	cmp	al,0Dh
 11714 00000A9C 743C                    	je	short IFERROR
 11715 00000A9E 89F5                    	mov	bp,si
 11716 00000AA0 BF[9482]                	mov	di,IFTAB		; Prepare to search if table	
 11717                                  	;mov	ch,0
 11718                                  	; 17/04/2023
 11719 00000AA3 30ED                    	xor	ch,ch
 11720                                  IFINDCOM:
 11721 00000AA5 89EE                    	mov	si,bp
 11722 00000AA7 8A0D                    	mov	cl,[di]
 11723 00000AA9 47                      	inc	di
 11724 00000AAA E33E                    	jcxz	IFSTRING
 11725 00000AAC EB02                    	jmp	short FIRSTCOMP
 11726                                  IFCOMP:
 11727 00000AAE 7510                    	jnz	short IF_DIF
 11728                                  FIRSTCOMP:
 11729 00000AB0 AC                      	lodsb
 11730 00000AB1 268A25                  	mov	ah,[es:di]
 11731 00000AB4 47                      	inc	di
 11732 00000AB5 38E0                    	cmp	al,ah
 11733 00000AB7 7405                    	je	short IFLP
 11734 00000AB9 80CC20                  	or	ah,20h			; Try lower case
 11735 00000ABC 38E0                    	cmp	al,ah
 11736                                  IFLP:
 11737 00000ABE E2EE                    	loop	IFCOMP
 11738                                  IF_DIF:
 11739 00000AC0 9F                      	lahf
 11740 00000AC1 01CF                    	add	di,cx			; Bump to next position without affecting flags
 11741 00000AC3 8B1D                    	mov	bx,[di]			; Get handler address
 11742 00000AC5 47                      	inc	di
 11743 00000AC6 47                      	inc	di
 11744 00000AC7 9E                      	sahf
 11745 00000AC8 75DB                    	jnz	short IFINDCOM
 11746 00000ACA AC                      	lodsb
 11747 00000ACB 3C0D                    	cmp	al,0Dh
 11748                                  IFERRJ:
 11749 00000ACD 740B                    	jz	short IFERROR
 11750 00000ACF E8141B                  	call	DELIM
 11751 00000AD2 75D1                    	jnz	short IFINDCOM
 11752 00000AD4 E8071B                  	call	scanoff
 11753 00000AD7 FFE3                    	jmp	bx
 11754                                  
 11755                                  	; 17/04/2023
 11756                                  IFERRORP:
 11757 00000AD9 58                      	pop	ax
 11758                                  IFERROR:
 11759                                  	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 11760                                  FORERROR:
 11761 00000ADA BA[947F]                	mov	dx,SYNTMES_PTR
 11762 00000ADD E9721E                  	jmp	cerror
 11763                                  
 11764                                  IFNOT:
 11765 00000AE0 F616[B88A]              	not	byte [IFNOTFLAG]
 11766 00000AE4 FF06[0094]              	inc	word [IF_NOT_COUNT]
 11767 00000AE8 EBAD                    	jmp	short IFREENT
 11768                                  
 11769                                  ; We are comparing two strings for equality. First, find the end of the
 11770                                  ; first string.
 11771                                  
 11772                                  IFSTRING:
 11773 00000AEA 56                      	push	si			; save away pointer for later compare
 11774 00000AEB 31C9                    	xor	cx,cx			; count of chars in first string
 11775                                  FIRST_STRING:
 11776 00000AED AC                      	lodsb				; get character
 11777 00000AEE 3C0D                    	cmp	al,0Dh			; end of line?
 11778 00000AF0 74E7                    	jz	short IFERRORP		; yes => error
 11779 00000AF2 E8F11A                  	call	DELIM			; is it a delimiter?
 11780 00000AF5 7403                    	jz	short EQUAL_CHECK 	; yes, go find equal sign
 11781 00000AF7 41                      	inc	cx			; remember 1 byte for the length
 11782 00000AF8 EBF3                    	jmp	short FIRST_STRING 	; go back for more
 11783                                  EQUAL_CHECK:
 11784 00000AFA 3C3D                    	cmp	al,'='			; is char we have an = sign?
 11785 00000AFC 7407                    	je	short EQUAL_CHECK2 	; yes, go find second one.
 11786 00000AFE 3C0D                    	cmp	al,0Dh			; end of line?
 11787 00000B00 74D7                    	je	short IFERRORP		; yes, syntax error
 11788 00000B02 AC                      	lodsb				; get next char
 11789 00000B03 EBF5                    	jmp	short EQUAL_CHECK
 11790                                  
 11791                                  ; The first = has been found. The next char had better be an = too.
 11792                                  
 11793                                  EQUAL_CHECK2:
 11794 00000B05 AC                      	lodsb				; get potential = char
 11795 00000B06 3C3D                    	cmp	al,'='			; is it good?	
 11796                                  	;jnz	short IFERRPJ		; no, error
 11797                                  	; 17/04/2023
 11798 00000B08 75CF                    	jne	short IFERRORP
 11799                                  
 11800                                  ; Find beginning of second string.
 11801                                  
 11802 00000B0A E8D11A                  	call	scanoff
 11803 00000B0D 3C0D                    	cmp	al,0Dh
 11804                                  	;jz	short IFERRPJ
 11805                                  	; 17/04/2023
 11806 00000B0F 74C8                    	je	short IFERRORP
 11807 00000B11 5F                      	pop	di
 11808                                  
 11809                                  ; DS:SI points to second string
 11810                                  ; CX has number of chars in first string
 11811                                  ; ES:DI points to first string
 11812                                  
 11813 00000B12 F3A6                    	repe	cmpsb
 11814 00000B14 7414                    	jz	short MATCH		; match found!
 11815                                  
 11816                                  ; No match. Let's find out what was wrong. The character that did not match
 11817                                  ; has been advanced over. Let's back up to it.
 11818                                  
 11819 00000B16 4E                      	dec	si
 11820                                  
 11821                                  ; If it is EOL, then syntax error
 11822                                  
 11823 00000B17 803C0D                  	cmp	byte [si],0Dh
 11824                                  	;jz	short IFERRJ
 11825                                  	; 17/04/2023
 11826 00000B1A 74BE                    	je	short IFERROR
 11827                                  
 11828                                  ; Advance pointer over remainder of unmatched text to next delimiter
 11829                                  
 11830                                  SKIPSTRINGEND:
 11831 00000B1C AC                      	lodsb
 11832                                  NOTMATCH:
 11833 00000B1D 3C0D                    	cmp	al,0Dh
 11834                                  IFERRORJ2:
 11835                                  	;jz	short IFERRJ
 11836                                  	; 17/04/2023
 11837 00000B1F 74B9                    	jz	short IFERROR
 11838 00000B21 E8C21A                  	call	DELIM
 11839 00000B24 75F6                    	jnz	short SKIPSTRINGEND
 11840                                  
 11841                                  ; Signal that we did NOT have a match
 11842                                  
 11843 00000B26 B0FF                    	mov	al,-1
 11844 00000B28 EB37                    	jmp	short IFRET
 11845                                  
 11846                                  	; 17/04/2023
 11847                                  ;IFERRPJ:
 11848                                  	;jmp	IFERRORP
 11849                                  
 11850                                  ; The compare succeeded. Was the second string longer than the first?
 11851                                  ; We do this by seeing if the next char is a delimiter.
 11852                                  
 11853                                  MATCH:
 11854 00000B2A AC                      	lodsb
 11855 00000B2B E8B81A                  	call	DELIM
 11856 00000B2E 75ED                    	jnz	short NOTMATCH ; not same.
 11857 00000B30 30C0                    	xor	al,al
 11858 00000B32 EB2D                    	jmp	short IFRET
 11859                                  
 11860                                  ; ---------------------------------------------------------------------------
 11861                                  
 11862                                  IFEXISTS:
 11863                                  
 11864                                  IFEXIST_ATTR	EQU	ATTR_HIDDEN+ATTR_SYSTEM  ; 2+4 = 6
 11865                                  
 11866                                  ;MOREDELIM:
 11867 00000B34 AC                      	lodsb
 11868 00000B35 E8AE1A                  	call	DELIM
 11869 00000B38 75FA                    	jnz	short IFEXISTS
 11870                                  	;jnz	short MOREDELIM
 11871                                  
 11872 00000B3A BA[AE8B]                	mov	dx,DIRBUF
 11873 00000B3D B8001A                  	mov	ax,1A00h
 11874                                  	;mov	ax,Set_DMA*256 ; 1A00h
 11875 00000B40 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 11876                                  			; DS:DX	-> disk	transfer buffer
 11877 00000B42 BB0200                  	mov	bx,2	; if(0) [|not](|1) exist[1|2] file(2|3)
 11878 00000B45 031E[0094]              	add	bx,[IF_NOT_COUNT]
 11879                                  	;mov	ax,ARG_ARGV
 11880                                  	;mov	ax,ARG+ARG_UNIT.argv
 11881 00000B49 B8[B48D]                	mov	ax,ARG
 11882 00000B4C E8FF25                  	call	argv_calc		; convert arg index to pointer
 11883 00000B4F 8B17                    	mov	dx,[bx]
 11884                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 11885                                  	;mov	cx,6
 11886 00000B51 B90600                  	mov	cx,IFEXIST_ATTR ; filetypes to search for
 11887 00000B54 B8004E                  	mov	ax,4E00h
 11888                                  	;mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 11889 00000B57 CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 11890                                  			; CX = search attributes
 11891                                  			; DS:DX	-> ASCIZ filespec
 11892                                  			; (drive,path, and wildcards allowed)
 11893 00000B59 7204                    	jc	short IF_EX_C ; carry is how to determine error
 11894 00000B5B 30C0                    	xor	al,al
 11895 00000B5D EB02                    	jmp	short IFRET
 11896                                  
 11897                                  	;nop
 11898                                  IF_EX_C:
 11899 00000B5F B0FF                    	mov	al,-1			; false 'n' fall through...
 11900                                  IFRET:
 11901 00000B61 F606[B88A]FF            	test	byte [IFNOTFLAG],-1 ; 0FFh
 11902 00000B66 7402                    	jz	short REALTEST
 11903 00000B68 F6D0                    	not	al
 11904                                  REALTEST:
 11905 00000B6A 08C0                    	or	al,al
 11906 00000B6C 7403                    	jz	short IFTRUE
 11907 00000B6E E993F5                  	jmp	TCOMMAND
 11908                                  
 11909                                  IFTRUE:
 11910 00000B71 E86A1A                  	call	scanoff
 11911 00000B74 89F1                    	mov	cx,si
 11912 00000B76 81E98100                	sub	cx,81h
 11913 00000B7A 280E8000                	sub	[80h],cl
 11914 00000B7E 8A0E8000                	mov	cl,[80h]
 11915 00000B82 880E[0589]              	mov	[COMBUF+1],cl
 11916 00000B86 BF[0689]                	mov	di,COMBUF+2
 11917 00000B89 FC                      	cld
 11918 00000B8A F3A4                    	rep	movsb
 11919 00000B8C B00D                    	mov	al,0Dh
 11920 00000B8E AA                      	stosb
 11921                                  
 11922                                  ; Signal that an IF was done. 
 11923                                  ; This prevents the redirections from getting lost.
 11924                                  
 11925 00000B8F 1E                      	push	ds
 11926 00000B90 8E1E[A58A]              	mov	ds,[RESSEG]
 11927 00000B94 C606[9301]FF            	mov	byte [IfFlag],-1
 11928 00000B99 1F                      	pop	ds
 11929                                  
 11930                                  ; Go do the command
 11931                                  
 11932 00000B9A E93AF7                  	jmp	DOCOM1
 11933                                  
 11934                                  ; ---------------------------------------------------------------------------
 11935                                  
 11936                                  IFERRORJ3:
 11937 00000B9D EB80                    	jmp	IFERRORJ2
 11938                                  
 11939                                  IFERLEV:
 11940 00000B9F B70A                    	mov	bh,10
 11941 00000BA1 30DB                    	xor	bl,bl
 11942                                  GETNUMLP:
 11943 00000BA3 AC                      	lodsb
 11944 00000BA4 3C0D                    	cmp	al,0Dh
 11945 00000BA6 74F5                    	je	short IFERRORJ3
 11946 00000BA8 E83B1A                  	call	DELIM
 11947 00000BAB 740C                    	jz	short GOTNUM
 11948 00000BAD 2C30                    	sub	al,'0'
 11949 00000BAF 86C3                    	xchg	al,bl
 11950 00000BB1 F6E7                    	mul	bh
 11951 00000BB3 00D8                    	add	al,bl
 11952 00000BB5 86C3                    	xchg	al,bl
 11953 00000BB7 EBEA                    	jmp	short GETNUMLP
 11954                                  GOTNUM:
 11955 00000BB9 1E                      	push	ds
 11956 00000BBA 8E1E[A58A]              	mov	ds,[RESSEG]
 11957 00000BBE 8A26[8501]              	mov	ah,[RetCode]
 11958 00000BC2 1F                      	pop	ds
 11959 00000BC3 30C0                    	xor	al,al
 11960 00000BC5 38DC                    	cmp	ah,bl
 11961 00000BC7 7398                    	jnb	short IFRET
 11962 00000BC9 FEC8                    	dec	al
 11963 00000BCB EB94                    	jmp	short IFRET
 11964                                  
 11965                                  ; ---------------------------------------------------------------------------
 11966                                  
 11967                                  ; Shift the parameters in the batch structure by 1 and set up the new argument.
 11968                                  ; This is a NOP if no batch in progress.
 11969                                  
 11970                                  _SHIFT:
 11971 00000BCD 8E1E[A58A]              	mov	ds,[RESSEG]
 11972 00000BD1 A1[3401]                	mov	ax,[Batch]		; get batch pointer
 11973 00000BD4 09C0                    	or	ax,ax			; in batch mode?
 11974 00000BD6 7501                    	jnz	short SHIFT1		; yes, operate in batch segment	
 11975                                  SHIFT_RETN:				; no, done.
 11976 00000BD8 C3                      	retn
 11977                                  SHIFT1:
 11978 00000BD9 8EC0                    	mov	es,ax
 11979 00000BDB 8ED8                    	mov	ds,ax
 11980                                  
 11981                                  ; Now move the batch args down by 1 word
 11982                                  
 11983                                  	;;mov	di,0Bh ; MSDOS 3.3 COMMAND.COM
 11984                                  	;mov	di,0Ch ; MSDOS 5.0 COMMAND.COM
 11985 00000BDD BF0C00                  	mov	di,BATCHSEGMENT.BatParm ; point to parm table
 11986 00000BE0 8D7502                  	lea	si,[di+2]		; make source = dest + 2
 11987 00000BE3 B90900                  	mov	cx,9			; move 9 parameters
 11988 00000BE6 F3A5                    	rep	movsw			; SHIFT down
 11989                                  
 11990                                  ; If the last parameter (the one not moved) is empty (= -1) then we are done.
 11991                                  ; We have copied it into the previous position.
 11992                                  
 11993 00000BE8 833DFF                  	cmp	word [di],-1	; if last one was not in use then
 11994 00000BEB 74EB                    	je	short SHIFT_RETN ; No new parm
 11995                                  
 11996                                  ; This last pointer is NOT nul. Get it and scan to find the next argument.
 11997                                  ; Assume, first, that there is no next argument.
 11998                                   
 11999 00000BED 8B35                    	mov	si,[di]
 12000 00000BEF C705FFFF                	mov	word [di],-1		; Assume no parm
 12001                                  
 12002                                  ; The parameters are CR separated. Scan for end of this parm.
 12003                                  
 12004                                  SKIPCRLP:
 12005 00000BF3 AC                      	lodsb
 12006 00000BF4 3C0D                    	cmp	al,0Dh
 12007 00000BF6 75FB                    	jne	short SKIPCRLP
 12008                                  
 12009                                  ; We are now pointing at next arg. If it is 0 (end of original line) then we
 12010                                  ; are finished. There are no more parms and the pointer has been previously
 12011                                  ; initialized to indicate it.
 12012                                  
 12013 00000BF8 803C00                  	cmp	byte [si],0
 12014 00000BFB 74DB                    	jz	short SHIFT_RETN 	; End of parms
 12015 00000BFD 8935                    	mov	[di],si			; Pointer to next parm as %9
 12016 00000BFF C3                      	retn
 12017                                  
 12018                                  ; =============== S U B	R O U T	I N E =======================================
 12019                                  
 12020                                  ; Skip delim reads bytes from the batch file until a non-delimiter is seen.
 12021                                  ; returns char in AL, carry set -> eof
 12022                                  
 12023                                  SKIPDELIM:
 12024 00000C00 F706[3401]FFFF          	test	word [Batch],-1		; batch file empty. OOPS!
 12025 00000C06 740A                    	jz	short SKIPERR
 12026 00000C08 E85DFD                  	call	GETBATBYT		; get a char
 12027 00000C0B E8D819                  	call	DELIM			; check for ignoreable chars
 12028 00000C0E 74F0                    	jz	short SKIPDELIM		; ignore this char.
 12029 00000C10 F8                      	clc
 12030 00000C11 C3                      	retn
 12031                                  SKIPERR:
 12032 00000C12 F9                      	stc
 12033                                  GOTO_RETN:
 12034 00000C13 C3                      	retn
 12035                                  
 12036                                  ; ---------------------------------------------------------------------------
 12037                                  
 12038                                  ;  CALL is an internal command that transfers control to a .bat, .exe, or
 12039                                  ;  .com file. This routine strips the CALL off the command line, sets
 12040                                  ;  the CALL_FLAG to indicate a call in progress, and returns control to
 12041                                  ;  DOCOM1 in TCODE to reprocess the command line and execute the file
 12042                                  ;  being CALLed.
 12043                                  
 12044                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12045                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0C27h
 12046                                  _$CALL:
 12047                                  
 12048                                  ;  strip off CALL from command line
 12049                                  
 12050                                  	;ASSUME DS:trangroup,ES:trangroup
 12051                                  
 12052 00000C14 56                      	push	si
 12053 00000C15 57                      	push	di
 12054 00000C16 50                      	push	ax
 12055 00000C17 51                      	push	cx
 12056 00000C18 BE[0689]                	mov	si,COMBUF+2
 12057 00000C1B E8C019                  	call	scanoff			;get to first non-delimeter
 12058                                  	;add	si,4
 12059 00000C1E 83C604                  	add	si,length_call		;point to char past CALL
 12060 00000C21 BF[0689]                	mov	di,COMBUF+2
 12061                                  	;mov	cx,124		
 12062 00000C24 B97C00                  	mov	cx,COMBUFLEN-length_call 
 12063                                  					;get length of buffer
 12064 00000C27 F3A4                    	rep	movsb			;move it
 12065 00000C29 59                      	pop	cx
 12066 00000C2A 58                      	pop	ax
 12067 00000C2B 5F                      	pop	di
 12068 00000C2C 5E                      	pop	si
 12069                                  
 12070                                  ;  set call flag to indicate call in progress
 12071                                  
 12072 00000C2D 1E                      	push	ds
 12073 00000C2E 8E1E[A58A]              	mov	ds,[RESSEG]
 12074 00000C32 C606[9901]01            	mov	byte [Call_Flag],call_in_progress ; 1
 12075 00000C37 C606[9A01]01            	mov	byte [Call_Batch_Flag],call_in_progress ; 1
 12076                                  
 12077                                  ; Turn off any pipes in progress.
 12078                                  
 12079 00000C3C 803E[0102]00            	cmp	byte [PipeFiles],0 	; Only turn off if present.
 12080 00000C41 7403                    	jz	short _NOPIPE
 12081 00000C43 E8A720                  	call	PIPEDEL
 12082                                  _NOPIPE:
 12083 00000C46 1F                      	pop	ds
 12084 00000C47 C3                      	retn
 12085                                  
 12086                                  ; ---------------------------------------------------------------------------
 12087                                  
 12088                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12089                                  _GOTO:
 12090 00000C48 8E1E[A58A]              	mov	ds,[RESSEG]
 12091 00000C4C F706[3401]FFFF          	test	word [Batch],-1	; If not in batch mode, a nop
 12092 00000C52 74BF                    	jz	short GOTO_RETN
 12093 00000C54 31D2                    	xor	dx,dx
 12094 00000C56 1E                      	push	ds
 12095 00000C57 8E1E[3401]              	mov	ds,[Batch]
 12096                                  	;mov	[8],dx	; MSDOS 5.0 COMMAND.COM
 12097 00000C5B 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; Back to start
 12098                                  	;mov	[10],dx	; MSDOS 5.0 COMMAND.COM
 12099 00000C5F 89160A00                	mov	[BATCHSEGMENT.BatSeek+2],dx ; Back to start
 12100                                  
 12101                                  	; MSDOS 6.0
 12102                                  ;M037
 12103                                  ; Clear EOF indicator because we have reseeked to the beginning of the file.
 12104                                  ;
 12105 00000C63 C606020000              	mov	byte [BATCHSEGMENT.BatchEOF],0
 12106                                  					; clear eof indicator ;M037
 12107                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12108 00000C68 1F                      	pop	ds
 12109                                  GOTOOPEN:
 12110 00000C69 E875F8                  	call	PROMPTBAT
 12111                                  	;mov	di,5Dh
 12112 00000C6C BF5D00                  	mov	di,FCB+1		; Get the label
 12113 00000C6F B90B00                  	mov	cx,11
 12114 00000C72 B020                    	mov	al,' '
 12115 00000C74 F2AE                    	repne	scasb
 12116 00000C76 7501                    	jnz	short NOINC
 12117 00000C78 41                      	inc	cx
 12118                                  NOINC:
 12119 00000C79 83E90B                  	sub	cx,11
 12120 00000C7C F7D9                    	neg	cx
 12121                                  	;mov	[cs:GOTOLEN],cx
 12122                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12123 00000C7E 26890E[AE8B]            	mov	[es:GOTOLEN],cx	; MSDOS 5.0 (& 6.0)
 12124                                  
 12125                                  ; At beginning of file. Skip to first non-delimiter char
 12126                                  
 12127 00000C83 E87AFF                  	call	SKIPDELIM
 12128 00000C86 721C                    	jb	short BADGOTO
 12129 00000C88 3C3A                    	cmp	al,':'
 12130 00000C8A 7426                    	jz	short CHKLABEL
 12131                                  LABLKLP:				; Look for the label
 12132 00000C8C E8D9FC                  	call	GETBATBYT
 12133 00000C8F 3C0A                    	cmp	al,0Ah
 12134 00000C91 7509                    	jne	short LABLKTST
 12135                                  
 12136                                  ; At beginning of line. Skip to first non-delimiter char
 12137                                  
 12138 00000C93 E86AFF                  	call	SKIPDELIM
 12139 00000C96 720C                    	jb	short BADGOTO
 12140 00000C98 3C3A                    	cmp	al,':'
 12141 00000C9A 7416                    	je	short CHKLABEL
 12142                                  LABLKTST:
 12143 00000C9C F706[3401]FFFF          	test	word [Batch],0FFFFh ; -1
 12144 00000CA2 75E8                    	jnz	short LABLKLP
 12145                                  BADGOTO:
 12146 00000CA4 E87100                  	call	BATCLOSE
 12147                                  
 12148                                  	; MSDOS 6.0
 12149                                  ;SR;
 12150                                  ; At this point we are terminating without freeing up any nested batch 
 12151                                  ;segments i.e if the error occurred within a called batch file. This routine
 12152                                  ;will traverse the linked list of batch segments and free all of them.
 12153                                  ;
 12154 00000CA7 E8BB00                  	call	free_batch		; free up nested batch segments
 12155                                  
 12156                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12157 00000CAA 0E                      	push	cs
 12158 00000CAB 1F                      	pop	ds
 12159 00000CAC BA[917F]                	mov	dx,BADLAB_PTR
 12160 00000CAF E9A01C                  	jmp	cerror
 12161                                  
 12162                                  ; Found the :.	Skip to first non-delimiter char
 12163                                  
 12164                                  CHKLABEL:
 12165 00000CB2 E84BFF                  	call	SKIPDELIM
 12166 00000CB5 72ED                    	jb	short BADGOTO
 12167 00000CB7 BF5D00                  	mov	di,FCB+1 ; 5Dh
 12168                                  	;mov	cx,[cs:GOTOLEN]
 12169                                  	; 14/02/2023
 12170 00000CBA 268B0E[AE8B]            	mov	cx,[es:GOTOLEN]	 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12171 00000CBF EB05                    	jmp	short GOTBYTE
 12172                                  
 12173                                  NEXTCHRLP:
 12174 00000CC1 51                      	push	cx
 12175 00000CC2 E8A3FC                  	call	GETBATBYT
 12176 00000CC5 59                      	pop	cx
 12177                                  GOTBYTE:
 12178                                  	; 18/03/2023
 12179                                  	; 14/02/2023
 12180                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CD9h
 12181 00000CC6 E8F616                  	call	testkanj
 12182 00000CC9 7413                    	jz	short NOTKANJ1
 12183 00000CCB 263A05                  	cmp	al,[es:di]
 12184 00000CCE 75CC                    	jne	short LABLKTST
 12185 00000CD0 47                      	inc	di
 12186 00000CD1 49                      	dec	cx
 12187 00000CD2 E3C8                    	jcxz	LABLKTST
 12188 00000CD4 51                      	push	cx
 12189 00000CD5 E890FC                  	call	GETBATBYT
 12190 00000CD8 59                      	pop	cx
 12191 00000CD9 263A05                  	cmp	al,[es:di]
 12192 00000CDC EB0C                    	jmp	short KNEXTLABCHR
 12193                                  NOTKANJ1:
 12194                                  	; 14/02/2023
 12195                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CF1h
 12196 00000CDE 0C20                    	or	al,20h
 12197 00000CE0 263A05                  	cmp	al,[es:di]
 12198                                  	;jne	short TRYUPPER
 12199                                  	;jmp	short NEXTLABCHR
 12200                                  	; 25/04/2023
 12201 00000CE3 7407                    	je	short NEXTLABCHR 
 12202                                  TRYUPPER:
 12203 00000CE5 2C20                    	sub	al,20h
 12204 00000CE7 263A05                  	cmp	al,[es:di]
 12205                                  KNEXTLABCHR:
 12206 00000CEA 75B0                    	jnz	short LABLKTST
 12207                                  NEXTLABCHR:
 12208 00000CEC 47                      	inc	di
 12209 00000CED E2D2                    	loop	NEXTCHRLP
 12210 00000CEF E876FC                  	call	GETBATBYT
 12211                                  	; 14/02/2023
 12212 00000CF2 26833E[AE8B]08          	cmp	word [es:GOTOLEN],8 ;  MSDOS 5.0 (& 6.0) COMMAND.COM
 12213                                  	;cmp	word [cs:GOTOLEN],8 ; Is the label at least 8 chars long?
 12214 00000CF8 7D04                    	jge	short GOTOCONT	; Yes, then the next char doesn't matter
 12215 00000CFA 3C20                    	cmp	al,' '
 12216 00000CFC 779E                    	ja	short LABLKTST
 12217                                  GOTOCONT:
 12218 00000CFE 3C0D                    	cmp	al,0Dh
 12219 00000D00 7407                    	je	short SKIPLFEED
 12220                                  TONEXTBATLIN:
 12221 00000D02 E863FC                  	call	GETBATBYT
 12222 00000D05 3C0D                    	cmp	al,0Dh
 12223 00000D07 75F9                    	jne	short TONEXTBATLIN
 12224                                  SKIPLFEED:
 12225 00000D09 E85CFC                  	call	GETBATBYT
 12226                                  
 12227                                  	; MSDOS 6.0
 12228                                  ;SR;
 12229                                  ; The BatchEOF flag is set in GetBatByt to indicate that we are faking a 
 12230                                  ;CR-LF for the last line. On a goto, this flag has to be cleared, because
 12231                                  ;BatchEOF == 1 now, after returning a CR-LF. The next call to GetBatByt
 12232                                  ;to get the EOF has not been made yet because we encountered the Goto. On
 12233                                  ;all other cases, EOF will be hit while trying to read the next line and
 12234                                  ;we are fine. I know, I know, what a massive hack from hell!! God help us!!
 12235                                  ;
 12236 00000D0C 06                      	push	es
 12237 00000D0D 8E06[3401]              	mov	es,[Batch]
 12238 00000D11 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 12239                                  					;invalidate fake CR-LF flag
 12240 00000D17 07                      	pop	es
 12241                                  
 12242                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12243                                  	;call	BATCLOSE
 12244                                  	;retn
 12245                                  	; 14/02/2023
 12246                                  	;jmp	short BATCLOSE
 12247                                  
 12248                                  ; =============== S U B	R O U T	I N E =======================================
 12249                                  
 12250                                  BATCLOSE:
 12251 00000D18 2E8B1E[598D]            	mov	bx,[cs:BATHAND]
 12252 00000D1D 83FB05                  	cmp	bx,5
 12253 00000D20 7204                    	jb	short CLOSERETURN
 12254                                  	; 14/02/2023
 12255 00000D22 B43E                    	mov	ah,3Eh
 12256                                  	;mov	ah,CLOSE ; 3Eh
 12257 00000D24 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 12258                                  			; BX = file handle
 12259                                  CLOSERETURN:
 12260 00000D26 C606[7D01]00            	mov	byte [In_Batch],0 ; reset flag	
 12261 00000D2B C3                      	retn
 12262                                  
 12263                                  ; =============== S U B	R O U T	I N E =======================================
 12264                                  
 12265                                  ; Open the BATCH file, If open fails, AL is drive of batch file (A=1)
 12266                                  ; Also, fills internal batch buffer. If access denied, then AX = -1
 12267                                  
 12268                                  	; 14/02/2023
 12269                                  BATOPEN:
 12270 00000D2C 1E                      	push	ds
 12271 00000D2D 8E1E[3401]              	mov	ds,[Batch]
 12272                                  	;;mov	dx,1Fh	; MSDOS 3.3 COMMAND.COM
 12273                                  	;mov	dx,20h	; MSDOS 5.0 COMMAND.COM
 12274 00000D31 BA2000                  	mov	dx,BATCHSEGMENT.BatFile
 12275 00000D34 B8003D                  	mov	ax,3D00h
 12276                                  	;mov	ax,(OPEN<<8) ; 3D00h ; Open the batch file
 12277 00000D37 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 12278                                  			; DS:DX	-> ASCIZ filename
 12279                                  			; AL = access mode
 12280                                  			; 0 - read
 12281 00000D39 721C                    	jc	short SETERRDL
 12282                                  	;mov	dx,[8]
 12283 00000D3B 8B160800                	mov	dx,[BATCHSEGMENT.BatSeek]
 12284                                  	;mov	cx,[10]
 12285 00000D3F 8B0E0A00                	mov	cx,[BATCHSEGMENT.BatSeek+2]
 12286 00000D43 1F                      	pop	ds
 12287                                  	;mov	[cs:BATHAND],ax
 12288 00000D44 26A3[598D]              	mov	[es:BATHAND],ax ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12289 00000D48 89C3                    	mov	bx,ax
 12290 00000D4A B80042                  	mov	ax,4200h
 12291                                  	;mov	ax,(LSEEK<<8) ; 4200h ; Go to the right spot
 12292 00000D4D CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 12293                                  			; AL = method: offset from beginning of	file
 12294                                  
 12295                                  	;mov	word [cs:BATBUFPOS],-1 ; 0FFFFh
 12296                                  					; nuke batch buffer position
 12297 00000D4F 26C706[2B95]FFFF        	mov	word [es:BATBUFPOS],-1 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12298                                  BATOPEN_RETN:
 12299 00000D56 C3                      	retn
 12300                                  
 12301                                  SETERRDL:
 12302 00000D57 89D3                    	mov	bx,dx
 12303                                  	; MSDOS 6.0
 12304                                  	;invoke	get_ext_error_number 	;AN022; get the extended error
 12305                                  	; 14/02/2023
 12306 00000D59 E8940F                  	call	get_ext_error_number
 12307 00000D5C 89C2                    	mov	dx,ax		     	;AN022; save extended error in DX
 12308                                  
 12309                                  	; MSDOS 3.3
 12310                                  	;mov	dx,INSERTDSKPTR
 12311                                  	;call	GET_EXT_ERR_NUMBER
 12312                                  
 12313                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12314 00000D5E 8A07                    	mov	al,[bx]			; Get drive spec
 12315 00000D60 2C40                    	sub	al,'@'			; A = 1
 12316 00000D62 1F                      	pop	ds
 12317 00000D63 F9                      	stc				; SUB mucked over carry
 12318 00000D64 C3                      	retn
 12319                                  
 12320                                  ; =============== S U B	R O U T	I N E =======================================
 12321                                  
 12322                                  ;Free_batch : This routine traverses the linked batch segments freeing all
 12323                                  ;the batch and FOR segments until all of them are freed. It also restores
 12324                                  ;the old state of the EchoFlag.
 12325                                  ;
 12326                                  ;	ENTRY:	ds = RESGROUP
 12327                                  ;
 12328                                  ;	EXIT: 	All batch & FOR segments freed.
 12329                                  ;		EchoFlag restored to old state before batch process.
 12330                                  ;
 12331                                  ;	REGISTERS AFFECTED: bx, cx
 12332                                  
 12333                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12334                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0D7Eh
 12335                                  
 12336                                  free_batch: ;proc near
 12337                                  	;assume	ds:RESGROUP,es:nothing
 12338                                  
 12339 00000D65 06                      	push	es
 12340 00000D66 8B1E[9B01]              	mov	bx,[Next_Batch]
 12341 00000D6A 09DB                    	or	bx,bx
 12342 00000D6C 7431                    	jz	short fb_ret
 12343                                  _ClearBatch:
 12344 00000D6E 8EC3                    	mov	es,bx			; get batch segment
 12345                                  	;mov	bx,es:BatForPtr		; get old FOR segment
 12346 00000D70 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
 12347                                  	;cmp	bx,0			; is a FOR in progress
 12348                                  	; 27/07/2024
 12349 00000D75 21DB                    	and	bx,bx
 12350 00000D77 7408                    	jz	short no_bat_for	; no - don't deallocate
 12351 00000D79 06                      	push	es			;
 12352 00000D7A 8EC3                    	mov	es,bx			; yes - free it up...
 12353 00000D7C B449                    	mov	ah,49h
 12354                                  	;mov	ah,DEALLOC		;
 12355 00000D7E CD21                    	int	21h			;
 12356 00000D80 07                      	pop	es			; restore to batch segment
 12357                                  no_bat_for:
 12358                                  	;mov	cl,[es:1]
 12359 00000D81 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag]
 12360                                  					; get old echo flag
 12361                                  	;mov	bx,[es:3]
 12362 00000D86 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 12363                                  					; get old batch segment
 12364 00000D8B B449                    	mov	ah,49h
 12365                                  	;mov	ah,DEALLOC		; free it up...
 12366 00000D8D CD21                    	int	21h
 12367                                  	; 14/02/2023
 12368                                  	;mov	[Batch],bx		; get ready to deallocate next batch
 12369 00000D8F FF0E[9701]              	dec	word [Nest]		; is there another batch file?
 12370 00000D93 75D9                    	jnz	short _ClearBatch	; keep going until no batch file
 12371                                  	
 12372 00000D95 880E[8801]              	mov	[EchoFlag],cl		;restore echo status
 12373 00000D99 C706[3401]0000          	mov	word [Batch],0		;no batch process in progress
 12374                                  fb_ret:
 12375 00000D9F 07                      	pop	es
 12376 00000DA0 C3                      	ret
 12377                                  
 12378                                  ;free_batch endp
 12379                                  
 12380                                  ;============================================================================
 12381                                  ; TFOR.ASM, MSDOS 6.0, 1991
 12382                                  ;============================================================================
 12383                                  ; 10/10/2018 - Retro DOS v3.0
 12384                                  
 12385                                  ; All batch proccessing has DS set to segment of resident portion
 12386                                  ;ASSUME DS:RESGROUP,ES:TRANGROUP
 12387                                  
 12388                                  ; MSDOS 3.3 COMMAND.COM, transient portion/segment offset 0BE9h
 12389                                  
 12390                                  ; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12391                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:0DBFh
 12392                                  
 12393                                  ; ---------------------------------------------------------------------------
 12394                                  
 12395                                  	; 15/02/2023
 12396                                  FORTERM:
 12397                                  	; MSDOS 6.0
 12398 00000DA1 0E                      	push	cs			;AN037; Get local segment into
 12399 00000DA2 1F                      	pop	ds			;AN037;  DS, ES
 12400 00000DA3 0E                      	push	cs			;AN037;
 12401 00000DA4 07                      	pop	es			;AN037;
 12402                                  
 12403                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12404 00000DA5 E89502                  	call	FOROFF
 12405                                  	;mov	ds,[cs:RESSEG]
 12406 00000DA8 268E1E[A58A]            	mov	ds,[es:RESSEG] ; 15/02/2023 - MSDOS 5.0
 12407 00000DAD 813E[8E01]00FF          	cmp	word [SingleCom],0FF00h
 12408 00000DB3 750F                    	jne	short BAT_CRLF
 12409 00000DB5 833E[9701]00            	cmp	word [Nest],0		;See if we have nested batch files
 12410 00000DBA 7508                    	jne	short BAT_CRLF		;Yes - don't exit just yet
 12411 00000DBC C706[8E01]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause a terminate
 12412 00000DC2 EB12                    	jmp	short NOFORP2
 12413                                  BAT_CRLF:
 12414 00000DC4 F606[8801]01            	test	byte [EchoFlag],1 	; Is echo on?
 12415 00000DC9 740B                    	jz	short NOFORP2		; no - exit
 12416 00000DCB F706[3401]FFFF          	test	word [Batch],-1 ; 0FFFFh
 12417                                  					; print CRLF if in batch
 12418 00000DD1 7403                    	jz	short NOFORP2
 12419 00000DD3 E8FB17                  	call	CRLF2
 12420                                  NOFORP2:
 12421 00000DD6 E92BF3                  	jmp	TCOMMAND
 12422                                  
 12423                                  ; ---------------------------------------------------------------------------
 12424                                  
 12425                                  ;------
 12426                                  ;   For-loop processing. For loops are of the form:
 12427                                  ;	    for %<loop-variable> in (<list>) do <command>
 12428                                  ; where <command> may contain references of the form %<variable>, which are
 12429                                  ; later substituted with the items in <list>. The for-loop structure is
 12430                                  ; set-up by the procedure '$for'; successive calls to 'forproc' execute
 12431                                  ; <command> once for each item in <list>. All of the information needed for
 12432                                  ; loop processing is stored on a piece of memory gotten from 'alloc'. This
 12433                                  ; structure is actually fairly large, on the order of 700 bytes, and includes
 12434                                  ; a complete copy of the original command-line structure as parsed by
 12435                                  ; 'parseline', loop control variables, and a dma buffer for the
 12436                                  ; 'FindFirst/FindNext' expansion of wildcard filenames in <list>. When loop
 12437                                  ; processing has completed, this chunk of memory is returned to the system.
 12438                                  ;
 12439                                  ;   All of the previously defined variables, in 'datares', used for loop
 12440                                  ; processing may be erased. Only one, (DW) ForPtr, need be allocated.
 12441                                  ;
 12442                                  ;   The error message, 'for_alloc_mes', should be moved into the file
 12443                                  ; containing all of the other error messages.
 12444                                  ;
 12445                                  ;   Referencing the allocated for-loop structure is a little tricky.
 12446                                  ; At the moment, a byte is defined as part of a new segment, 'for_segment'.
 12447                                  ; When 'forproc' actually runs, ES and DS are set to point to the base of the
 12448                                  ; new chunk of memory.	References to this byte, 'f', thus assemble correctly
 12449                                  ; as offsets of ES or DS. 'f' would not be necessary, except that the
 12450                                  ; assembler translates an instruction such as 'mov AX, [for_minarg]' as an
 12451                                  ; immediate move of the offset of 'for_minarg' into AX. In other words, in
 12452                                  ; terms of PDP-11 mnemonics, the assembler ACTUALLY assembles
 12453                                  ;	mov  AX, #for_minarg 	; AX := 02CA (for example)
 12454                                  ; instead of
 12455                                  ;	mov  AX, for_minarg	; AX := [02CA] (contents of 02CA)
 12456                                  ; By using 'f', we pretend that we are actually referencing an allocated
 12457                                  ; structure, and the assembler coughs up the code we want. Notice that it
 12458                                  ; doesn't matter whether we put brackets around the location or not -- the
 12459                                  ; assembler is "smart" enough to know that we want an address instead of the
 12460                                  ; contents of that location.
 12461                                  ;
 12462                                  ;   Finally, there now exists the potential to easily implement nested loops.
 12463                                  ; One method would be to have a link field in each for-structure pointing to
 12464                                  ; its parent.  Variable references that couldn't be resolved in the local
 12465                                  ; frame would cause a search of prior frames. For-structures would still be
 12466                                  ; allocated and released in exactly the same fashion. The only limit on the
 12467                                  ; number of nested loops would be memory size (although at 700 bytes a pop,
 12468                                  ; memory wouldn't last THAT long). Alternately, a small structure could be
 12469                                  ; maintained in the resident data area. This structure would be an array of
 12470                                  ; control-variable names and pointers to for-structure blocks. This would
 12471                                  ; greatly speed up the resolution of non-local variable references. However,
 12472                                  ; since space in the resident is precious, we would have to compromise on a
 12473                                  ; "reasonable" level of nesting -- 10, 16, 32 levels, whatever. For-structure
 12474                                  ; allocation and de-allocation would have to be modified slightly to take this
 12475                                  ; new structure into account.
 12476                                  ;
 12477                                  ;   Oops, just one more thing. Forbuf need not be a part of the for-structure.
 12478                                  ; It could just as well be one structure allocated in 'transpace'. Actually,
 12479                                  ; it may be easier to allocate it as part of 'for_segment'.
 12480                                  ;------
 12481                                  		; include fordata.asm
 12482                                  
 12483                                  ; Data structure definitions included by tfor.asm
 12484                                  
 12485                                  struc FOR_INFO
 12486 00000000 <res 444h>                .FOR_ARGS:	  resb  ARG_UNIT.SIZE	; argv[] structure 
 12487 00000444 ??                        .FOR_COM_START: resb  1		; beginning of <command>
 12488 00000445 ????                      .FOR_EXPAND:	  resw  1		; * or ? item in <list>?
 12489 00000447 ????                      .FOR_MINARG:	  resw  1		; beginning of <list>
 12490 00000449 ????                      .FOR_MAXARG:	  resw  1		; end of <list>
 12491 0000044B <res 80h>                 .FORBUF:	  resw  64		; temporary buffer
 12492 000004CB <res 80h>                 .FORDMA:	  resw  64		; FindFirst/Next buffer
 12493 0000054B ??                        .FOR_VAR:	  resb  1		; loop control variable
 12494                                    .size:
 12495                                  endstruc
 12496                                  					; ARG_UNIT.SIZE = 1348 (544h)
 12497                                  					; ARG_UNIT.SIZE = 1092 ; 27/07/2024
 12498                                  _$FOR_EXIT:
 12499 00000DD9 EBC6                    	jmp	short FORTERM		; exceeding maxarg means all done
 12500                                  
 12501                                  ; ---------------------------------------------------------------------------
 12502                                  
 12503                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12504                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12505                                  	;	     & Retro DOS v4.1 COMMAND.COM (2024 modification)
 12506                                  FORPROC:
 12507 00000DDB A1[9501]                	mov	ax,[ForPtr]
 12508 00000DDE 8ED8                    	mov	ds,ax
 12509 00000DE0 8EC0                    	mov	es,ax			; operate in for-info area
 12510                                  	;;mov	dx,5CBh	; MSDOS 5.0 & 6.22
 12511                                  	;mov	dx,4CBh ; PCDOS 7.1 ; 27/07/2024
 12512 00000DE2 BACB04                  	mov	dx,FOR_INFO.FORDMA	; 1348+1+2+2+2+128 = 1483 = 5CBh
 12513                                  		; PCDOS 7.1 COMMAND.COM ; 1092+1+2+2+2+128 = 1227 = 4CBh
 12514 00000DE5 B8001A                  	mov	ax,1A00h
 12515                                  	;mov	ax,Set_DMA*256 ; 1A00h
 12516 00000DE8 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 12517                                  			; DS:DX	-> disk	transfer buffer
 12518                                  FOR_BEGIN:
 12519                                  	;;cmp	word [545h],0
 12520                                  	;cmp	word [445h] ; 27/07/2024
 12521 00000DEA 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12522 00000DEF 7404                    	jz	short FOR_BEGIN1
 12523                                  					; non-zero for_expand equals FALSE
 12524                                  	;;inc	word [547h]
 12525                                  	;inc	word [447h] ; 27/07/2024
 12526 00000DF1 FF064704                	inc	word [FOR_INFO.FOR_MINARG]
 12527                                  FOR_BEGIN1:
 12528                                  	;mov	bx,[447h] ; 27/07/2024
 12529 00000DF5 8B1E4704                	mov	bx,[FOR_INFO.FOR_MINARG] ; current item in <list> to examine
 12530                                  	;cmp	bx,[449h] ; 27/07/2024
 12531 00000DF9 3B1E4904                	cmp	bx,[FOR_INFO.FOR_MAXARG]
 12532 00000DFD 7FDA                     	jg	short _$FOR_EXIT	; exceeding maxarg means all done
 12533                                  	;mov	ax,0
 12534 00000DFF B80000                  	mov	ax,FOR_INFO.FOR_ARGS ; 0 
 12535 00000E02 E84923                  	call	argv_calc		; compute argv[x] address
 12536                                  	;mov	cx,[bx+3]
 12537 00000E05 8B4F03                  	mov	cx,[bx+ARGV_ELE.argstartel]
 12538 00000E08 8B17                    	mov	dx,[bx]
 12539                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 12540                                  	;test	byte [bx+2],4		; Is there a path separator in this arg?
 12541 00000E0A F6470204                	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 12542 00000E0E 7512                    	jnz	short FORSUB		; Yes, argstartel should be correct
 12543 00000E10 8B37                    	mov	si,[bx]
 12544                                  	;mov	si,[bx+ARGV_ELE.argpointer]
 12545                                  
 12546                                  	;mov	al,[cs:LPAREN]
 12547                                  	; 15/02/2023
 12548                                  	; MSDOS 6.0 (& 5.0) COMMAND.com
 12549                                  	;mov	al,'('	; mov al,lparen
 12550                                  	;cmp	[si-1],	al		; If the current token is the first
 12551                                  	; 27/07/2024
 12552 00000E12 807CFF28                	cmp	byte [si-1],'('
 12553 00000E16 750A                    	jne	short FORSUB		;  one in the list and originally had
 12554 00000E18 41                      	inc	cx			;  the opening paren as its first char,
 12555                                  					;  the argstartel ptr needs to be
 12556                                  					;  advanced passed it before the prefix
 12557                                  					;  length is computed.
 12558                                  	;mov	al,':'
 12559                                  	;cmp	[si+1],	al		; If the token begins with "(d:",
 12560                                  	; 27/07/2024
 12561 00000E19 807C013A                	cmp	byte [si+1],':'
 12562 00000E1D 7503                    	jne	short FORSUB		;  argstartel has to be moved over the
 12563 00000E1F 83C102                  	add	cx,2			;  rest of the prefix as well.
 12564                                  FORSUB:
 12565 00000E22 29D1                    	sub	cx,dx			; compute length of pathname prefix
 12566                                  	;;cmp	word [545h],0
 12567                                  	;cmp	word [445h],0 ; 27/07/2024
 12568 00000E24 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12569                                  					; are we still expanding a name?
 12570 00000E29 7416                    	jz	short FOR_FIND_NEXT
 12571                                  					; if so, get next matching filename
 12572                                  	;test	byte [bx+2],2
 12573 00000E2B F6470202                	test	byte [bx+ARGV_ELE.argflags],2 ; wildcard
 12574 00000E2F 7505                    	jnz	short FOR_FIND_FIRST
 12575                                  					; should we expand THIS (new) arg?
 12576                                  	;mov	cx,[bx+5]
 12577                                  					; else, just copy all of it directly
 12578 00000E31 8B4F05                  	mov	cx,[bx+ARGV_ELE.arglen]
 12579 00000E34 EB1D                    	jmp	short FOR_SMOOSH
 12580                                  
 12581                                  	;nop
 12582                                  	; 15/02/2023
 12583                                  FOR_FIND_FIRST:
 12584 00000E36 51                      	push	cx
 12585 00000E37 31C9                    	xor	cx,cx
 12586 00000E39 B8004E                  	mov	ax,4E00h
 12587                                  	;mov	ax,Find_First*256 ; 4E00h
 12588 00000E3C CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 12589                                  			; CX = search attributes
 12590                                  			; DS:DX	-> ASCIZ filespec
 12591                                  			; (drive,path, and wildcards allowed)
 12592 00000E3E 59                      	pop	cx
 12593 00000E3F EB05                    	jmp	short FOR_RESULT
 12594                                  
 12595                                  	;nop
 12596                                  FOR_FIND_NEXT:
 12597 00000E41 B8004F                  	mov	ax,4F00h
 12598                                  	;mov	ax,Find_Next*256 ;4F00h
 12599 00000E44 CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 12600                                  			; [DTA]	= data block from
 12601                                  			; last AH = 4Eh/4Fh call
 12602                                  FOR_RESULT:
 12603 00000E46 B8FFFF                  	mov	ax,-1 ; 0FFFFh		; assume worst case
 12604 00000E49 7201                    	jc	short FOR_CHECK
 12605                                  	; 15/02/2023
 12606 00000E4B 40                      	inc	ax ; ax = 0
 12607                                  	;mov	ax,0			; Find* returns 0 for SUCCESS
 12608                                  FOR_CHECK:				; record success of findfirst/next
 12609                                  	;;mov	[545h],ax
 12610                                  	;mov	[445h],ax ; 27/07/2024
 12611 00000E4C A34504                  	mov	[FOR_INFO.FOR_EXPAND],ax
 12612 00000E4F 09C0                    	or	ax,ax			; anything out there?
 12613 00000E51 7597                    	jnz	short FOR_BEGIN		; if not, try next arg
 12614                                  FOR_SMOOSH:
 12615                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 12616 00000E53 8B37                    	mov	si,[bx] 		; copy argv[arg][0,CX] into destbuf
 12617                                  	;;mov	di,54Bh	; MSDOS 5.0 & 6.22 COMMAND.COM
 12618                                  	;mov	di,44Bh ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12619 00000E55 BF4B04                  	mov	di,FOR_INFO.FORBUF	; some days this will be the entire
 12620 00000E58 F3A4                    	rep	movsb			; arg, some days just the path prefix
 12621                                  					
 12622 00000E5A 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12623                                  					; if we're not expanding, we can
 12624 00000E5F 7509                    	jnz	short FOR_MAKE_COM 	; skip the following
 12625                                  	; 15/02/2023
 12626                                  	;;mov	si,05E9h ; MSDOS 3.3 & 5.0 & 6.22 COMMAND.COM ; 27/07/2024
 12627                                  	; 27/07/2024
 12628                                  	;mov	si,04E9h ; PCDOS 7.1 COMMAND.COM
 12629 00000E61 BEE904                  	mov	si,FOR_INFO.FORDMA+FIND_BUF.PNAME ; 14/10/2018
 12630                                  FOR_MORE:
 12631                                  	;cmp	byte [si],0		; tack on matching filename
 12632                                  	;jz	short FOR_MAKE_COM
 12633                                  	;movsb
 12634                                  	;jnz	short FOR_MORE
 12635                                  	; 25/04/2023
 12636 00000E64 AC                      	lodsb
 12637 00000E65 AA                      	stosb
 12638 00000E66 08C0                    	or	al,al
 12639 00000E68 75FA                    	jnz	short FOR_MORE
 12640                                  FOR_MAKE_COM:
 12641                                  	; 25/04/2023
 12642                                  	;xor	al,al			; tack a null byte onto the end
 12643                                  	;stosb				; of the substitute string
 12644 00000E6A 31C9                    	xor	cx,cx			; character count for command line
 12645 00000E6C F7D1                    	not	cx			; negate it -- take advantage of loopnz
 12646 00000E6E 31DB                    	xor	bx,bx			; argpointer
 12647 00000E70 BF[0689]                	mov	di,COMBUF+2
 12648                                  	; 15/02/2023
 12649                                  	;;mov	bl,[544h] ; MSDOS 5.0-6.22 ; 27/07/2024
 12650                                  	; 27/07/2024
 12651                                  	;mov	bl,[444h] ; PCDOS 7.1 COMMAND.COM 
 12652 00000E73 8A1E4404                	mov	bl,[FOR_INFO.FOR_COM_START] ; argindex
 12653                                  	;;mov	dh,[64Bh]
 12654                                  	;mov	dh,[54Bh] ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12655 00000E77 8A364B05                	mov	dh,[FOR_INFO.FOR_VAR]
 12656                                  					; %<for-var> is replaced by [forbuf]
 12657 00000E7B 0E                      	push	cs			; time to form the <command> string
 12658 00000E7C 07                      	pop	es
 12659                                  	;assume ES:trangroup
 12660                                  	;mov	ax,FOR_INFO.FOR_ARGS
 12661 00000E7D B80000                  	mov	ax,0			; translate offset to pointer
 12662 00000E80 E8CB22                  	call	argv_calc
 12663                                  	;mov	si,[bx+9]
 12664 00000E83 8B7709                  	mov	si,[bx+ARGV_ELE.arg_ocomptr]
 12665                                  					; mov ptr passed beginning space
 12666 00000E86 46                      	inc	si
 12667                                  FOR_MAKE_LOOP:
 12668 00000E87 8A04                    	mov	al,[si]			; the <command> arg, byte by byte
 12669 00000E89 46                      	inc	si
 12670 00000E8A 3C25                    	cmp	al,'%'			; looking for %<control-variable>
 12671 00000E8C 7514                    	jne	short FOR_STOSB 	; no % ... add byte to string
 12672 00000E8E 3834                    	cmp	[si],dh			; got the right <variable>?
 12673 00000E90 7510                    	jnz	short FOR_STOSB		; got a %, but wrong <variable>
 12674 00000E92 46                      	inc	si			; skip over <for-variable>
 12675                                  
 12676 00000E93 56                      	push	si
 12677                                  	; 15/02/2023
 12678                                  	;;mov	si,54Bh	; MSDOS 5.0-6.22 ; 27/07/2024
 12679                                  	; 27/07/2024
 12680                                  	;mov	si,44Bh ; PCDOS 7.1 COMMAND.COM
 12681 00000E94 BE4B04                  	mov	si,FOR_INFO.FORBUF
 12682                                  					; substitute the <item> for <variable>
 12683                                  					; to make a final <command> to execute
 12684                                  SLOOP:					
 12685 00000E97 AC                      	lodsb				; grab all those <item> bytes, and
 12686 00000E98 AA                      	stosb				; add 'em to the <command> string,
 12687 00000E99 08C0                    	or	al,al			; until we run into a null
 12688 00000E9B E0FA                    	loopne	SLOOP
 12689 00000E9D 4F                      	dec	di			; adjust length and <command> pointer
 12690 00000E9E 41                      	inc	cx			; so we can overwrite the null
 12691 00000E9F 5E                      	pop	si
 12692 00000EA0 EBE5                    	jmp	short FOR_MAKE_LOOP
 12693                                  					; got back for more <command> bytes
 12694                                  FOR_STOSB:
 12695 00000EA2 AA                      	stosb				; take a byte from the <command> arg
 12696 00000EA3 49                      	dec	cx			; and put it into the <command> to be
 12697                                  					; executed (and note length, too)
 12698 00000EA4 3C0D                    	cmp	al,0Dh
 12699 00000EA6 75DF                    	jne	short FOR_MAKE_LOOP	; If not done, loop.
 12700                                  FOR_MADE_COM:
 12701 00000EA8 F6D1                    	not	cl
 12702                                  	;mov	[cs:COMBUF+1],cl
 12703                                  	;mov	ds,[cs:RESSEG]
 12704                                  	; 15/02/2023 - Retro DOS v4.0 COMMAND.COM
 12705                                  	; MSDOS 5.0 COMMAND.COM
 12706 00000EAA 26880E[0589]            	mov	[es:COMBUF+1],cl
 12707 00000EAF 268E1E[A58A]            	mov	ds,[es:RESSEG]
 12708                                  	;assume DS:resgroup
 12709 00000EB4 F606[8801]01            	test	byte [EchoFlag],1 	; shall we echo this <command>, dearie?
 12710 00000EB9 742F                    	jz	short NOECHO3
 12711                                  	;cmp	byte [NullFlag],nullcommand
 12712 00000EBB 803E[9D01]01            	cmp	byte [NullFlag],1 	;G was there a command last time?
 12713 00000EC0 7403                    	jz	short NO_CRLF_PR  	;G no - don't print crlf
 12714                                  
 12715 00000EC2 E80C17                  	call	CRLF2		  	;G Print out prompt
 12716                                  NO_CRLF_PR:
 12717 00000EC5 C606[9D01]00            	mov	byte [NullFlag],0 	;G reset no command flag
 12718 00000ECA 0E                      	push	cs
 12719 00000ECB 1F                      	pop	ds
 12720 00000ECC 57                      	push	di
 12721 00000ECD E8C30E                  	call	PRINT_PROMPT	  	;G Prompt the user
 12722 00000ED0 5F                      	pop	di
 12723                                  
 12724 00000ED1 26C645FF00              	mov	byte [es:di-1],0  	; yeah, PRINT it out...	
 12725 00000ED6 C706[158C][0689]        	mov	word [string_ptr_2],COMBUF+2
 12726                                  	; 17/04/2023
 12727 00000EDC BA[C380]                	mov	dx,string_buf_ptr
 12728 00000EDF E8EF3E                  	call	std_printf
 12729 00000EE2 26C645FF0D              	mov	byte [es:di-1],0Dh
 12730 00000EE7 E9EAF3                  	jmp	DOCOM		  	; run silent, run deep...
 12731                                  NOECHO3:
 12732 00000EEA C606[9D01]00            	mov	byte [NullFlag],0
 12733 00000EEF 0E                      	push	cs
 12734 00000EF0 1F                      	pop	ds
 12735 00000EF1 E9E3F3                  	jmp	DOCOM1
 12736                                  
 12737                                  FORNESTERRJ:				; no multi-loop processing... yet!
 12738 00000EF4 E84601                  	call	FOROFF
 12739 00000EF7 E92901                  	jmp	FORNESTERR
 12740                                  
 12741                                  ; ---------------------------------------------------------------------------
 12742                                  
 12743                                  FORERRORJ:
 12744 00000EFA E9DDFB                  	jmp	FORERROR
 12745                                  
 12746                                  ; ---------------------------------------------------------------------------
 12747                                  
 12748                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F24h
 12749                                  
 12750                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12751                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0FFEh
 12752                                  
 12753                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12754                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1040h
 12755                                  _$FOR:
 12756 00000EFD 8E06[A58A]              	mov	es,[RESSEG]
 12757 00000F01 26803E[9401]00          	cmp	byte [es:ForFlag],0 ; is another one already running?
 12758 00000F07 75EB                    	jnz	short FORNESTERRJ   ; if flag is set.... boom!
 12759                                  
 12760                                  ; Turn off any pipes in progress.
 12761                                  
 12762 00000F09 26803E[0102]00          	cmp	byte [es:PipeFiles],0 ; Only turn off if present.
 12763 00000F0F 7403                    	jz	short NO_PIPE
 12764 00000F11 E8D91D                  	call	PIPEDEL
 12765                                  NO_PIPE:
 12766 00000F14 31D2                    	xor	dx,dx			; counter (0 <= DX < argvcnt)
 12767 00000F16 E8F400                  	call	NEXTARG			; move to next argv[n]
 12768 00000F19 72DF                    	jc	short FORERRORJ		; no more args -- bad forloop
 12769 00000F1B 3C25                    	cmp	al,'%'			; next arg MUST start with '%'...
 12770 00000F1D 75DB                    	jne	short FORERRORJ
 12771 00000F1F 89C5                    	mov	bp,ax			; save forloop variable
 12772 00000F21 AC                      	lodsb
 12773 00000F22 08C0                    	or	al,al			; and MUST end immediately...
 12774 00000F24 75D4                    	jnz	short FORERRORJ
 12775 00000F26 E8E400                  	call	NEXTARG			; let's make sure the next arg is 'in'
 12776 00000F29 72CF                    	jb	short FORERRORJ
 12777                                  	;and	ax,0DFDFh
 12778 00000F2B 25DFDF                  	and	ax,~2020h		; uppercase the letters
 12779                                  	; 15/02/2023
 12780                                  	;cmp	ax,4E49h  	; MSDOS 5.0
 12781                                  	;cmp	ax,[IN_WORD] 	; MSDOS 3.3
 12782                                  	;cmp	ax,in_word	; MSDOS 5.0
 12783 00000F2E 3D494E                  	cmp	ax,'IN'
 12784 00000F31 75C7                    	jnz	short FORERRORJ
 12785 00000F33 AC                      	lodsb
 12786                                  
 12787                                  	; 15/02/2023
 12788                                  	; MSDOS 3.3
 12789                                  	;or	al,al			; it, too, must end right away
 12790                                  	;jz	short CHECKLPAREN
 12791                                  	;cmp	al,[LPAREN]
 12792                                  	;jnz	short FORERRORJ
 12793                                  	;;add	word [bx+ARGV_ELE.argpointer],2 ; add word [bx+0],2
 12794                                  	;add	word [bx],2
 12795                                  	;;add	word [bx+9],2
 12796                                  	;add	word [bx+ARGV_ELE.arg_ocomptr],2
 12797                                  	;;sub	word [bx+5],2
 12798                                  	;sub	word [bx+ARGV_ELE.arglen],2
 12799                                  	;mov	ax,[si-1]
 12800                                  	;jmp	short LPCHECK
 12801                                  
 12802                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12803                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Bh
 12804                                  
 12805                                  	; MSDOS 6.0
 12806                                  ; Compaq bug fix -- exit from this loop on error
 12807                                  
 12808 00000F34 08C0                    	or	al,al
 12809 00000F36 75C2                    	jne	short FORERRORJ		; jump on error
 12810                                  
 12811                                  ;	je	short CHECKLPAREN
 12812                                  ;
 12813                                  ; Not null. Perhaps there are no spaces between this and the (:
 12814                                  ;   FOR %i in(foo bar...
 12815                                  ; Check for the Lparen here
 12816                                  ;
 12817                                  ;;	cmp	al,lparen
 12818                                  ;;	jnz	short FORERRORJ
 12819                                  ;
 12820                                  ; The token was in(... We strip off the "in" part to simulate a separator
 12821                                  ; being there in the first place.
 12822                                  ;
 12823                                  ;;	add	word [bx+ARGV_ELE.argpointer],2 ; advance source pointer
 12824                                  ;;	add	word [bx+ARGV_ELE.arg_ocomptr],2
 12825                                  ;;						; advance original string
 12826                                  ;;	sub	word [bx+ARGV_ELE.arglen],2 	; decrement the appropriate length
 12827                                  ;
 12828                                  ; SI now points past the in(.  Simulate a nextarg call that results in the
 12829                                  ; current value.
 12830                                  ;
 12831                                  ;;	mov	ax,[si-1]		; get lparen and next char
 12832                                  ;;	jmp	short LPCHECK
 12833                                  ;
 12834                                  ; end of Compaq bug fix
 12835                                  
 12836                                  ; ---------------------------------------------------------------------------
 12837                                  
 12838                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12839                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Fh
 12840                                  
 12841                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12842                                  CHECKLPAREN:
 12843 00000F38 E8D200                  	call	NEXTARG			; lparen delimits beginning of <list>
 12844 00000F3B 72BD                    	jc	short FORERRORJ
 12845                                  LPCHECK:
 12846                                  	; 15/02/2023
 12847                                  	; MSDOS 5.0 (% MSDOS 6.0)
 12848                                  	;;cmp	al,[LPAREN]
 12849                                  	;cmp	al,lparen
 12850 00000F3D 3C28                    	cmp	al,'('
 12851 00000F3F 75B9                    	jne	short FORERRORJ
 12852 00000F41 80FC00                  	cmp	ah,0
 12853 00000F44 7410                    	je	short FOR_PAREN_TOKEN
 12854                                  	;;cmp	ah,[RPAREN]		; special case:  null list
 12855                                  	;cmp	ah,rparen
 12856 00000F46 80FC29                  	cmp	ah,')'
 12857 00000F49 7503                    	jne	short FOR_LIST_NOT_EMPTY
 12858 00000F4B E953FE                  	jmp	FORTERM
 12859                                  FOR_LIST_NOT_EMPTY:
 12860                                  	;inc	word [bx+ARGV_ELE.argpointer] ; inc word [bx+0]
 12861 00000F4E FF07                    	inc	word [bx]		; Advance ptr past "("
 12862                                  	;dec	word [bx+5]		; Adjust the rest of this argv entry
 12863 00000F50 FF4F05                  	dec	word [bx+ARGV_ELE.arglen] ; to agree.
 12864 00000F53 46                      	inc	si			; Inc si so check for ")" works
 12865 00000F54 EB0D                    	jmp	short FOR_LIST
 12866                                  
 12867                                  	;nop
 12868                                  FOR_PAREN_TOKEN:
 12869 00000F56 E8B400                  	call	NEXTARG			; what have we in our <list>?
 12870 00000F59 729F                    	jc	short FORERRORJ
 12871                                  	; 15/02/2023
 12872                                  	;;;cmp	ax,[RPAREN+1]
 12873                                  	;;cmp	ax,[NULLRPAREN]		; special case:  null list
 12874                                  	;cmp	ax,nullrparen
 12875 00000F5B 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 12876 00000F5E 7503                    	jne	short FOR_LIST
 12877 00000F60 E93EFE                  	jmp	FORTERM
 12878                                  
 12879                                  ;FORERORJJ:
 12880                                  	;jmp	FORERROR
 12881                                  
 12882                                  FOR_LIST:				; skip over rest of <list>
 12883 00000F63 89D1                    	mov	cx,dx			; first arg of <list>
 12884                                  
 12885                                  SKIP_LIST:
 12886                                  	;add	si,[bx+5]
 12887 00000F65 037705                  	add	si,[bx+ARGV_ELE.arglen]
 12888 00000F68 83EE03                  	sub	si,3			; si = ptr to last char of token
 12889                                  	; 15/02/2023
 12890                                  	;;mov	al,[RPAREN]
 12891                                  	;mov	al,rparen
 12892 00000F6B B029                    	mov	al,')'
 12893 00000F6D 3804                    	cmp	[si],al			; Is this the last element in <list>
 12894 00000F6F 7408                    	je	short FOR_END_LIST 	; Yes, exit loop.
 12895 00000F71 E89900                  	call	NEXTARG			; No, get next arg <list>
 12896                                  	;jc	short FORERORJJ		; If no more and no rparen, error.
 12897                                  	;jmp	short SKIP_LIST
 12898                                  	; 15/02/2023
 12899 00000F74 73EF                    	jnc	short SKIP_LIST
 12900                                  
 12901                                  	; 15/02/2023
 12902                                  FORERORJJ:
 12903 00000F76 E961FB                  	jmp	FORERROR
 12904                                  
 12905                                  FOR_END_LIST:
 12906 00000F79 89D7                    	mov	di,dx			; record position of last arg in <list>
 12907 00000F7B C60400                  	mov	byte [si],0		; Zap the rparen
 12908                                  	; 15/02/2023
 12909                                  	;;;cmp	ax,[RPAREN+1]
 12910                                  	;;cmp	ax,[NULLRPAREN] 	; Was this token only a rparen
 12911                                  	;cmp	ax,nullparen
 12912 00000F7E 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 12913 00000F81 7401                    	je	short FOR_DO		; Yes, continue
 12914 00000F83 47                      	inc	di			; No, inc position of last arg
 12915                                  FOR_DO:
 12916 00000F84 E88600                  	call	NEXTARG			; now we had BETTER find a 'do'...
 12917 00000F87 72ED                    	jc	short FORERORJJ
 12918                                  	;and	ax,0DFDFh
 12919 00000F89 25DFDF                  	and	ax,~2020h		; uppercase the letters
 12920                                  	; 15/02/2023
 12921                                  	;;cmp	ax,[DO_WORD]
 12922                                  	;cmp	ax,do_word ; 4F44h
 12923 00000F8C 3D444F                  	cmp	ax,'DO'	 ; 4F44h
 12924 00000F8F 75E5                    	jne	short FORERORJJ
 12925 00000F91 AC                      	lodsb
 12926 00000F92 08C0                    	or	al,al			; and it had BETTER be ONLY a 'do'...
 12927 00000F94 75E0                    	jnz	short FORERORJJ
 12928                                  		
 12929 00000F96 E87400                  	call	NEXTARG			; on to the beginning of <command>
 12930 00000F99 72DB                    	jc	short FORERORJJ		; null <command> not legal
 12931                                  
 12932 00000F9B 50                      	push	ax
 12933 00000F9C 53                      	push	bx
 12934 00000F9D 51                      	push	cx
 12935 00000F9E 52                      	push	dx			; preserve registers against disaster
 12936 00000F9F 57                      	push	di
 12937 00000FA0 56                      	push	si
 12938 00000FA1 55                      	push	bp
 12939 00000FA2 E85FF7                  	call	FREE_TPA		; need to make free memory, first
 12940 00000FA5 E89500                  	call	FOROFF
 12941                                  	;mov	bx,264
 12942 00000FA8 BB0801                  	mov	bx,FOR_INFO.size-ARG_UNIT.SIZE
 12943 00000FAB E8C524                  	call	SAVE_ARGS		; extra bytes needed for for-info
 12944 00000FAE 9C                      	pushf
 12945 00000FAF 26A3[9501]              	mov	[es:ForPtr],ax
 12946 00000FB3 E85EF7                  	call	ALLOC_TPA		; ALLOC_TPA clobbers registers...
 12947 00000FB6 9D                      	popf
 12948 00000FB7 5D                      	pop	bp
 12949 00000FB8 5E                      	pop	si
 12950 00000FB9 5F                      	pop	di
 12951 00000FBA 5A                      	pop	dx
 12952 00000FBB 59                      	pop	cx
 12953 00000FBC 5B                      	pop	bx
 12954 00000FBD 58                      	pop	ax
 12955 00000FBE 723C                    	jc	short FOR_ALLOC_ERR
 12956                                  
 12957 00000FC0 06                      	push	es			; save resgroup seg...
 12958 00000FC1 26FF36[9501]            	push	word [es:ForPtr]
 12959 00000FC6 07                      	pop	es
 12960                                  	;assume es:for_segment
 12961 00000FC7 49                      	dec	cx			; forproc wants min pointing before
 12962 00000FC8 4F                      	dec	di			; first arg, max right at last one
 12963                                  	; 15/02/2023
 12964                                  	;;mov	[547h],cx
 12965                                  	; 27/07/2024
 12966                                  	;mov	[447h],cx ; PCDOS 7.1 COMMAND.COM
 12967 00000FC9 26890E4704              	mov	[es:FOR_INFO.FOR_MINARG],cx
 12968                                  	;;mov	[549h],di
 12969                                  	;mov	[449h],di ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 12970 00000FCE 26893E4904              	mov	[es:FOR_INFO.FOR_MAXARG],di
 12971                                  	;;mov	[544h],dl
 12972                                  	;mov	[444h],dl ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 12973 00000FD3 2688164404              	mov	[es:FOR_INFO.FOR_COM_START],dl
 12974                                  	;;mov	word [545h],0FFFFh ; -1
 12975                                  	;mov	[445h],0FFFFh ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 12976 00000FD8 26C7064504FFFF          	mov	word [es:FOR_INFO.FOR_EXPAND],-1
 12977                                  					; non-zero means FALSE
 12978 00000FDF 89E8                    	mov	ax,bp
 12979                                  	;;mov	[64Bh],ah
 12980                                  	;mov	[54Bh],ah ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12981 00000FE1 2688264B05              	mov	[es:FOR_INFO.FOR_VAR],ah
 12982 00000FE6 07                      	pop	es
 12983                                  	;assume es:resgroup
 12984 00000FE7 26FE06[9401]            	inc	byte [es:ForFlag]
 12985 00000FEC 26833E[8E01]FF          	cmp	word [es:SingleCom],-1
 12986 00000FF2 7507                    	jne	short FOR_RET
 12987 00000FF4 26C706[8E01]00FF        	mov	word [es:SingleCom],0FF00h
 12988                                  FOR_RET:
 12989 00000FFB C3                      	retn
 12990                                  
 12991                                  FOR_ALLOC_ERR:
 12992                                  	; 15/02/2023
 12993                                  	; MSDOS 3.3
 12994                                  	;mov	dx,INSFMEMMESPTR
 12995                                  	;jmp	CERROR
 12996                                  
 12997                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12998                                  	; MSDOS 6.0
 12999                                  	;mov	byte [msg_disp_class],1
 13000 00000FFC C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class
 13001                                  					;AN000; set up extended error msg class
 13002                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 13003 00001001 BA[FC7E]                	mov	dx,extend_buf_ptr
 13004                                  					;AC000; get extended message pointer
 13005                                  	;mov	word [extend_buf_ptr],8
 13006 00001004 C706[FC7E]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 13007                                  					;AN000; get message number in control block
 13008 0000100A E94519                  	jmp	cerror
 13009                                  
 13010                                  
 13011                                  ; =============== S U B	R O U T	I N E =======================================
 13012                                  
 13013                                  NEXTARG:
 13014 0000100D 42                      	inc	dx			; next argv[n]
 13015                                  	;cmp	dx,[ARG_ARGVCNT]
 13016 0000100E 3B16[7490]              	cmp	dx,[ARG+ARG_UNIT.argvcnt]
 13017                                  					; make sure we don't run off end
 13018 00001012 7D0D                    	jge	short NEXTARG_ERR 	;  of argv[]...	
 13019 00001014 89D3                    	mov	bx,dx
 13020                                  	;mov	ax,ARG_ARGV
 13021                                  	;mov	ax,ARG+ARG_UNIT.argv
 13022 00001016 B8[B48D]                	mov	ax,ARG
 13023 00001019 E83221                  	call	argv_calc		; convert array index to pointer
 13024 0000101C 8B37                    	mov	si,[bx]			; load pointer to argstring
 13025                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 13026 0000101E AD                      	lodsw				; and load first two chars
 13027 0000101F F8                      	clc
 13028 00001020 C3                      	retn
 13029                                  NEXTARG_ERR:
 13030 00001021 F9                      	stc
 13031 00001022 C3                      	retn
 13032                                  
 13033                                  ; ---------------------------------------------------------------------------
 13034                                  
 13035                                  FORNESTERR:
 13036 00001023 1E                      	push	ds
 13037 00001024 8E1E[A58A]              	mov	ds,[RESSEG]
 13038                                  	;ASSUME DS:RESGROUP
 13039 00001028 BA[5A80]                	mov	dx,FORNESTMES_PTR
 13040 0000102B 813E[8E01]00FF          	cmp	word [SingleCom],0FF00h
 13041 00001031 7506                    	jne	short NOFORP3
 13042 00001033 C706[8E01]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause termination
 13043                                  NOFORP3:
 13044 00001039 1F                      	pop	ds
 13045 0000103A E91519                  	jmp	cerror
 13046                                  
 13047                                  ; =============== S U B	R O U T	I N E =======================================
 13048                                  
 13049                                  ; General routine called to free the for segment. We also clear the forflag
 13050                                  ; too. Change no registers.
 13051                                  
 13052                                  FOROFF:
 13053 0000103D 50                      	push	ax
 13054 0000103E 06                      	push	es
 13055 0000103F 2E8E06[A58A]            	mov	es,[cs:RESSEG]
 13056 00001044 26A1[9501]              	mov	ax,[es:ForPtr]
 13057 00001048 09C0                    	or	ax,ax
 13058 0000104A 7408                    	jz	short FREEDONE
 13059 0000104C 06                      	push	es
 13060 0000104D 8EC0                    	mov	es,ax
 13061                                  	; 15/02/2023
 13062 0000104F B449                    	mov	ah,49h
 13063                                  	;mov	ah,DEALLOC ; 49h
 13064 00001051 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 13065                                  			; ES = segment address of area to be freed
 13066 00001053 07                      	pop	es
 13067                                  FREEDONE:
 13068 00001054 26C706[9501]0000        	mov	word [es:ForPtr],0
 13069 0000105B 26C606[9401]00          	mov	byte [es:ForFlag],0
 13070 00001061 07                      	pop	es
 13071 00001062 58                      	pop	ax
 13072 00001063 C3                      	retn
 13073                                  
 13074                                  ;============================================================================
 13075                                  ; TCMD1A.ASM, MSDOS 6.0, 1991
 13076                                  ;============================================================================
 13077                                  ; 09/10/2018 - Retro DOS v3.0
 13078                                  
 13079                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0ECBh
 13080                                  
 13081                                  ; ---------------------------------------------------------------------------
 13082                                  
 13083                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13084                                  
 13085                                  %if 0
 13086                                  
 13087                                  ; The DIR command displays the contents of a directory.
 13088                                  ;
 13089                                  ; ****************************************************************
 13090                                  ; *
 13091                                  ; * ROUTINE:	 CATALOG - display file(s) in directory
 13092                                  ; *
 13093                                  ; * FUNCTION:	 PARSE command line for drive, file, or path name.
 13094                                  ; *		 DIR allows two switches, /P (pause) and /W (wide).
 13095                                  ; *		 If an error occurs issue and error message and
 13096                                  ; *		 transfer control to CERROR.
 13097                                  ; *
 13098                                  ; * INPUT:	 command line at offset 81H
 13099                                  ; *
 13100                                  ; * OUTPUT:	 none
 13101                                  ; *
 13102                                  ; ****************************************************************
 13103                                  
 13104                                  CATALOG:
 13105                                  	; MSDOS 3.3
 13106                                  
 13107                                  	;mov	ax,ARG_ARGV
 13108                                  	;mov	ax,ARG+ARG_UNIT.argv
 13109                                  	mov	ax,ARG
 13110                                  	mov	dx,0FFFFh
 13111                                  	xor	cx,cx
 13112                                  	xor	si,si
 13113                                  DIR1:
 13114                                  	;cmp	cx,[ARG_ARGVCNT]
 13115                                  	cmp	cx,[ARG+ARG_UNIT.argvcnt]
 13116                                  	jnb	short DIR6 ; No more arguments
 13117                                  	mov	bx,cx
 13118                                  	call	ARGV_CALC
 13119                                  	;or	si,[bx+7]
 13120                                  	or	si,[bx+ARGV_ELE.argsw_word]
 13121                                  	test	si,7FFCh  ; test si,~8003
 13122                                  	jnz	short DIR2  ; /A,/B,/V switches (are invalid)
 13123                                  	;test	byte [bx+2],1
 13124                                  	test	byte [bx+ARGV_ELE.argflags],sw_flag  ; 1
 13125                                  	jz	short DIR3
 13126                                  	jmp	short DIR5
 13127                                  DIR2:
 13128                                  	mov	dx,BADPARMPTR
 13129                                  	jmp	CERROR
 13130                                  DIR3:
 13131                                  	or	cx,cx
 13132                                  	jnz	short DIR4	
 13133                                  	;cmp	word [bx+5],3
 13134                                  	cmp	word [bx+ARGV_ELE.arglen],3
 13135                                  	jz	short DIR5
 13136                                  	;add	word [bx+ARGV_ELE.argpointer],3 ; add word [bx+0],3
 13137                                  	add	word [bx],3
 13138                                  	;add	word [bx+9],3
 13139                                  	add	word [bx+ARGV_ELE.arg_ocomptr],3
 13140                                  	;add	word [bx+3],3
 13141                                  	add	word [bx+ARGV_ELE.argstartel],3
 13142                                  	;sub	word [bx+5],3
 13143                                  	sub	word [bx+ARGV_ELE.arglen],3
 13144                                  DIR4:
 13145                                  	cmp	dx,0FFFFh
 13146                                  	jnz	short DIR2
 13147                                  	mov	dx,bx
 13148                                  DIR5:
 13149                                  	inc	cx
 13150                                  	jmp	short DIR1
 13151                                  DIR6:
 13152                                  	mov	[COMSW],si
 13153                                  	push	dx
 13154                                  	xor	al,al
 13155                                  	cmp	dx,0FFFFh
 13156                                  	jz	short DIR7
 13157                                  	mov	bx,dx
 13158                                  	;mov	di,[bx+ARGV_ELE.argpointer]  ;mov di,[bx+0]
 13159                                  	mov	di,[bx]
 13160                                  	cmp	byte [di+1],':'
 13161                                  	jnz	short DIR7
 13162                                  	mov	al,[di]
 13163                                  	or	al,20h		; Lowercase drive name	
 13164                                  	sub	al,'a'-1 ; 60h  ; Convert to drive number (0,1..)
 13165                                  DIR7:
 13166                                  	;mov	[5CH],al
 13167                                  	mov	[FCB],al
 13168                                  	call	OKVOLARG
 13169                                  	mov	al,'?'		; *.* is default file spec.
 13170                                  	;mov	di,5Dh
 13171                                  	mov	di,FCB+1
 13172                                  	mov	cx,11
 13173                                  	rep stosb
 13174                                  
 13175                                  ; Begin by processing any switches that may have been specified.
 13176                                  ; BITS will contain any information about switches that was
 13177                                  ; found when the command line was parsed.
 13178                                  
 13179                                  	mov	ax,[COMSW]	; Get switches from command
 13180                                  	mov	[_BITS],ax	; initialize switches
 13181                                  	mov	word [COMSW],0	; initialize flags
 13182                                  	mov	byte [LINPERPAG],23 ; Set default for lines per page
 13183                                  	;test	al,1
 13184                                  	test	al,SWITCHW	; /W ?
 13185                                  	;mov	al,1
 13186                                  	mov	al,NORMPERLIN
 13187                                  	jz	short DIR8
 13188                                  	;mov	al,5
 13189                                  	mov	al,WIDEPERLIN
 13190                                  DIR8:
 13191                                  	mov	[LINLEN],al	; Set number of entries per line
 13192                                  	mov	[LINCNT],al
 13193                                  	mov	word [FILECNT],0 ; Keep track of how many files found
 13194                                  	mov	dx,DIRBUF
 13195                                  	mov	ah,Set_DMA ; 1Ah
 13196                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13197                                  			; DS:DX	-> disk	transfer buffer
 13198                                  	;mov	dl,[5Ch]
 13199                                  	mov	dl,[FCB]
 13200                                  	call	SAVUDIR
 13201                                  	pop	bx
 13202                                  	cmp	bx,0FFFFh
 13203                                  	jz	short DIR9
 13204                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13205                                  	mov	dx,[bx]
 13206                                  
 13207                                  ; The user may have specified a device. Search for the path and see if the
 13208                                  ; attributes indicate a device.
 13209                                  
 13210                                  	mov	ah,Find_First ; 4Eh
 13211                                  	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13212                                  			; CX = search attributes
 13213                                  			; DS:DX	-> ASCIZ filespec
 13214                                  			; (drive,path, and wildcards allowed)
 13215                                  	jc	short DIR10
 13216                                  			; Check device atrribute..
 13217                                  	;test	byte [DIRBUF_ATTRIB2],40h
 13218                                  	;test	byte [DIRBUF_ATTRIB2],ATTR_DEVICE
 13219                                  	; 14/10/2018
 13220                                  	;test	byte [DIRBUF+21],40h
 13221                                  	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 13222                                  	jz	short DIR10	; no, go do normal operation
 13223                                  	mov	word [COMSW],-2 ; 0FFFEh  ; Signal device
 13224                                  DIR9:
 13225                                  	jmp	short DOHEADER
 13226                                  DIR10:
 13227                                  	;mov	dx,[bx+ARGV_ELE.argpointer]
 13228                                  	mov	dx,[bx]
 13229                                  	mov	ah,CHDir ; 3Bh
 13230                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13231                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13232                                  	jnc	short DOHEADER
 13233                                  	;mov	si,[bx+3]
 13234                                  	mov	si,[bx+ARGV_ELE.argstartel]
 13235                                  	cmp	dx,si
 13236                                  	jz	short DIR_NO_DRIVE
 13237                                  	xor	cl,cl
 13238                                  	xchg	cl,[si]
 13239                                  	mov	ah,CHDir ; 3Bh
 13240                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13241                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13242                                  	xchg	cl,[si]
 13243                                  	jnc	short DIR_NO_DRIVE
 13244                                  	mov	al,[si-1]
 13245                                  	call	PATHCHRCMP
 13246                                  	jnz	short DIR11
 13247                                  	mov	al,[si-2]
 13248                                  	call	PATHCHRCMP
 13249                                  	jz	short DIR12
 13250                                  	xchg	cl,[si-1]
 13251                                  	mov	ah,CHDir ; 3Bh
 13252                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13253                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13254                                  	xchg	cl,[si-1]
 13255                                  	jnc	short DIR_NO_DRIVE
 13256                                  DIR11:
 13257                                  	mov	ch,':'
 13258                                  	cmp	ch,[si-1]
 13259                                  	jnz	short DIR12
 13260                                  	;mov	cx,[bx+ARGV_ELE.argpointer] ; mov cx,[bx+0]
 13261                                  	mov	cx,[bx]
 13262                                  	xchg	cx,si
 13263                                  	sub	cx,si
 13264                                  	cmp	cx,2
 13265                                  	jz	short DIR_NO_DRIVE
 13266                                  DIR12:
 13267                                  	mov	dx,BADCDPTR
 13268                                  	;test	byte [bx+2],4
 13269                                  	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 13270                                  	jnz	short DIRERROR
 13271                                  DIRNF:
 13272                                  	mov	dx,FNOTFOUNDPTR
 13273                                  DIRERROR:
 13274                                  	jmp	CERROR
 13275                                  DIR_NO_DRIVE:
 13276                                  	cmp	word [si],'..'
 13277                                  	jnz	short DOREALPARSE
 13278                                  	cmp	byte [si+2],0
 13279                                  	jnz	short DOREALPARSE
 13280                                  	inc	word [COMSW]
 13281                                  	jmp	short DOHEADER
 13282                                  DOREALPARSE:
 13283                                  	mov	di,FCB ; 5Ch	
 13284                                  	;mov	ax,290Eh
 13285                                  	mov	ax,(Parse_File_Descriptor<<8)|0Eh
 13286                                  	int	21h	; DOS -	PARSE FILENAME
 13287                                  			; DS:SI	-> string to parse
 13288                                  			; ES:DI	-> buffer to fill with unopened	FCB
 13289                                  			; AL = bit mask	to control parsing
 13290                                  	cmp	byte [si],0
 13291                                  	jz	short DOHEADER
 13292                                  	dec	word [COMSW]
 13293                                  DOHEADER:
 13294                                  		
 13295                                  ; Display the header
 13296                                  
 13297                                  	push	bx
 13298                                  	call	BUILD_DIR_STRING
 13299                                  	mov	dx,DIRBUF
 13300                                  	mov	[VOL_DIR],dx
 13301                                  	mov	dx,DIRHEADPTR
 13302                                  	call	PRINTF_CRLF
 13303                                  	pop	bx
 13304                                  	cmp	bx,0FFFFh
 13305                                  	jz	short DOSEARCH
 13306                                  
 13307                                  ; If there were chars left after parse or device, then invalid file name
 13308                                  
 13309                                  	cmp	word [COMSW],0
 13310                                  	jz	short DOSEARCH	; nothing left; good parse
 13311                                  	jl	short DIRNFFIX	; not .. => error file not found
 13312                                  	call	RESTUDIR
 13313                                  	mov	dx,BADCDPTR
 13314                                  	jmp	CERROR		; was .. => error directory not found
 13315                                  DIRNFFIX:
 13316                                  	call	RESTUDIR
 13317                                  	jmp	short DIRNF
 13318                                  
 13319                                  ; We are assured that everything is correct. Let's go and search. Use
 13320                                  ; attributes that will include finding directories. Perform the first search
 13321                                  ; and reset our directory afterward.
 13322                                  
 13323                                  DOSEARCH:
 13324                                  	;mov	byte [55h],0FFh
 13325                                  	mov	byte [FCB-7],0FFh
 13326                                  	;mov	byte [5Bh],10h
 13327                                  	mov	byte [FCB-1],10h
 13328                                  
 13329                                  ; Caution! Since we are using an extended FCB, we will *also* be returning
 13330                                  ; the directory information as an extended FCB. We must bias all fetches into
 13331                                  ; DIRBUF by 8 (Extended FCB part + drive)
 13332                                  
 13333                                  	mov	ah,Dir_Search_First ; 11h
 13334                                  	mov	dx,FCB-7 ; 55h
 13335                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 13336                                  			; DS:DX	-> FCB
 13337                                  
 13338                                  ; Restore the user's directory. We preserve, though, the return from the
 13339                                  ; previous system call for later checking.
 13340                                  
 13341                                  FOUND_FIRST_FILE:
 13342                                  	push	ax		; save return state
 13343                                  	call	RESTUDIR	; restore user's dir	
 13344                                  	pop	ax		; get return state back
 13345                                  
 13346                                  ; Main scanning loop. Entry has AL = Search first/next error code. Test for
 13347                                  ; no more.
 13348                                  
 13349                                  DIRSTART:
 13350                                  	inc	al		; 0FFh = file not found
 13351                                  	jnz	short DISPLAY	; Either an error or we are finished
 13352                                  	jmp	CHKCNT
 13353                                  DISPLAY:
 13354                                  	inc	word [FILECNT]	; Keep track of how many we find
 13355                                  	mov	si,DIRBUF+8	; SI -> information returned by sys call
 13356                                  	;call	SHONAME
 13357                                  	call	DISPLAYNAME
 13358                                  	;test	byte [_BITS],1
 13359                                  	test	byte [_BITS],SWITCHW ; W switch set?
 13360                                  	jz	short DIRTEST	; If so, no size, date, or time
 13361                                  	jmp	NEXENT
 13362                                  DIRTEST:
 13363                                  	;test	byte [DIRBUF_ATTRIB1],10h
 13364                                  	; 14/10/2018
 13365                                  	;test	byte [DIRBUF_ATTRIB1],ATTR_DIRECTORY
 13366                                  	;test	byte [DIRBUF+19],10h
 13367                                  	test	byte [DIRBUF+8+DIR_ENTRY.DIR_ATTR],ATTR_DIRECTORY
 13368                                  	jz	short FILEENT
 13369                                  	mov	dx,DMESPTR
 13370                                  	call	STD_PRINTF
 13371                                  	jmp	short NOFSIZ
 13372                                  FILEENT:
 13373                                  	;mov	dx,[DIRBUF_FSIZ_L]
 13374                                  	;mov	dx,[DIRBUF+36]
 13375                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_L]
 13376                                  	mov	[FILESIZE_L],dx
 13377                                  	;mov	dx,[DIRBUF_FSIZ_H]
 13378                                  	;mov	dx,[DIRBUF+38]
 13379                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_H]
 13380                                  	mov	[FILESIZE_H],dx
 13381                                  	mov	dx,FSIZEMESPTR
 13382                                  	call	STD_PRINTF	; Print size of file
 13383                                  NOFSIZ:
 13384                                  	;mov	ax,[DIRBUF_FDATE]  ; Get date
 13385                                  	;mov	ax,[DIRBUF+32]
 13386                                  	mov	ax,[DIRBUF+8+DIR_ENTRY.DIR_DATE]
 13387                                  	or	ax,ax
 13388                                  	jz	short NEXENT	; Skip if no date
 13389                                  	mov	di,CHARBUF
 13390                                  	push	ax
 13391                                  	mov	ax,'  '
 13392                                  	stosw
 13393                                  	pop	ax
 13394                                  	mov	bx,ax
 13395                                  	and	ax,1Fh		; Get day
 13396                                  	mov	dl,al
 13397                                  	mov	ax,bx
 13398                                  	mov	cl,5
 13399                                  	shr	ax,cl		; Align month
 13400                                  	and	al,0Fh		; Get month
 13401                                  	mov	dh,al
 13402                                  	mov	cl,bh
 13403                                  	shr	cl,1		; Align year
 13404                                  	xor	ch,ch
 13405                                  	add	cx,80		; Relative 1980
 13406                                  	cmp	cl,100
 13407                                  	jb	short MILLENIUM
 13408                                  	sub	cl,100
 13409                                  MILLENIUM:
 13410                                  	call	DATE_CXDX
 13411                                  	;mov	cx,[DIRBUF_FTIME]
 13412                                  	;mov	cx,[DIRBUF+30]
 13413                                  	mov	cx,[DIRBUF+8+DIR_ENTRY.DIR_TIME]
 13414                                  	jcxz	PRBUF		; Time field present?
 13415                                  	mov	ax,2020h
 13416                                  	stosw
 13417                                  	shr	cx,1
 13418                                  	shr	cx,1
 13419                                  	shr	cx,1
 13420                                  	shr	cl,1
 13421                                  	shr	cl,1		; Hours in CH, minutes in CL
 13422                                  	mov	bl,[TIME_24]
 13423                                  	or	bl,80h		; Tell P_TIME called from DIR
 13424                                  	call	P_TIME		; Don't care about DX, never used with DIR
 13425                                  PRBUF:
 13426                                  	xor	ax,ax
 13427                                  	stosb
 13428                                  	mov	dx,CHARBUF
 13429                                  	mov	[STRING_PTR_2],dx
 13430                                  	mov	dx,STRINGBUF2PTR
 13431                                  	call	STD_PRINTF
 13432                                  NEXENT:
 13433                                  	dec	byte [LINCNT]
 13434                                  	jnz	short SAMLIN
 13435                                  NEXLIN:
 13436                                  	mov	al,[LINLEN]
 13437                                  	mov	[LINCNT],al
 13438                                  	call	CRLF2
 13439                                  	dec	byte [LINPERPAG]
 13440                                  	jnz	short SCROLL
 13441                                  	;test	byte [_BITS],2
 13442                                  	test	byte [_BITS],SWITCHP ; P switch present?
 13443                                  	jz	short SCROLL	; If not, just continue
 13444                                  	mov	byte [LINPERPAG],23
 13445                                  	call	PAUSE
 13446                                  	jmp	short SCROLL
 13447                                  SAMLIN:
 13448                                  	mov	dx,TABPTR	; Output a tab
 13449                                  	call	STD_PRINTF
 13450                                  SCROLL:
 13451                                  	mov	ah,Dir_Search_Next ; 12h
 13452                                  	;mov	dx,55h
 13453                                  	mov	dx,FCB-7	; DX -> Unopened FCB
 13454                                  	int	21h	; DOS -	SEARCH NEXT USING FCB
 13455                                  			; DS:DX	-> FCB
 13456                                  			; Return: AL = status
 13457                                  	jmp	DIRSTART
 13458                                  CHKCNT:
 13459                                  	test	word [FILECNT],0FFFFh ; -1
 13460                                  	jnz	short TRAILER
 13461                                  	jmp	DIRNF
 13462                                  TRAILER:
 13463                                  	mov	al,[LINLEN]
 13464                                  	cmp	al,[LINCNT]
 13465                                  	jz	short MMESSAGE
 13466                                  	call	CRLF2
 13467                                  MMESSAGE:
 13468                                  	mov	dx,DIRMESPTR
 13469                                  	mov	si,[FILECNT]
 13470                                  	mov	[DIR_NUM],si
 13471                                  	call	STD_PRINTF
 13472                                  DTFREE:
 13473                                  	mov	ah,GET_DRIVE_FREESPACE ; 36h
 13474                                  	;mov	dl,[5Ch]
 13475                                  	mov	dl,[FCB]
 13476                                  	int	21h	; DOS -	2+ - GET DISK SPACE
 13477                                  			; DL = drive code (0 = default,	1 = A,2 = B,etc.)
 13478                                  	cmp	ax,-1
 13479                                  	jnz	short DTFREE1
 13480                                  DTRET:
 13481                                  	retn
 13482                                  DTFREE1:
 13483                                  	mul	cx
 13484                                  	mul	bx
 13485                                  	mov	[BYTES_FREE],ax
 13486                                  	mov	[BYTES_FREE+2],dx
 13487                                  	mov	dx,BYTEMESPTR
 13488                                  	jmp	STD_PRINTF
 13489                                  
 13490                                  ; =============== S U B	R O U T	I N E =======================================
 13491                                  
 13492                                  SHONAME:
 13493                                  DISPLAYNAME:
 13494                                  	; MSDOS 3.3
 13495                                  	mov	di,CHARBUF
 13496                                  	mov	cx,8
 13497                                  	rep	movsb
 13498                                  	mov	al,' '
 13499                                  	stosb
 13500                                  	mov	cx,3
 13501                                  	rep	movsb
 13502                                  	xor	ax,ax
 13503                                  	stosb
 13504                                  	push	dx
 13505                                  	mov	dx,CHARBUF
 13506                                  	mov	[STRING_PTR_2],dx
 13507                                  	mov	dx,STRINGBUF2PTR
 13508                                  	call	STD_PRINTF
 13509                                  	pop	dx
 13510                                  	retn
 13511                                  
 13512                                  %endif
 13513                                  
 13514                                  ;============================================================================
 13515                                  ; DIR.ASM, MSDOS 6.0, 1991
 13516                                  ;============================================================================
 13517                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13518                                  
 13519                                  	; MSDOS 6.0
 13520                                  %if 0
 13521                                  
 13522                                  ;***	DIR.ASM - DIR internal command
 13523                                  
 13524                                  comment	% =================================================================
 13525                                  
 13526                                  This module replaces TCMD1A.ASM.  The old module was titled 
 13527                                  "PART4 COMMAND Transient routines".
 13528                                  
 13529                                  From residual documentation, I surmise that TCMD.ASM originally
 13530                                  contained the internal commands DIR, PAUSE, ERASE, TYPE, VOL, and
 13531                                  VER.  The file seems to have been successively split:
 13532                                  
 13533                                    TCMD -> TCMD1,TCMD2 -> TCMD1A,TCMD1B,TCMD2A,TCMD2B
 13534                                  
 13535                                  TCMD1A.ASM contained only the DIR command.
 13536                                  
 13537                                  Usage:
 13538                                  ------
 13539                                  
 13540                                  DIR <filespec> /w /p /b /s /l /c /o<sortorder> /a<attriblist>
 13541                                  
 13542                                  DIR /?
 13543                                  
 13544                                  
 13545                                  <filespec> may include any or none of:  drive; directory path;
 13546                                             wildcarded filename.  If drive or directory path are
 13547                                  	   omitted, the current defaults are used.  If the
 13548                                  	   file name or extension is omitted, wildcards are
 13549                                  	   assumed.
 13550                                  
 13551                                  /w	Wide listing format.  Files are displayed in compressed
 13552                                  	'name.ext' format.  Subdirectory files are enclosed in
 13553                                  	brackets, '[dirname]'.
 13554                                  
 13555                                  /p	Paged, or prompted listing.  A screenful is displayed
 13556                                  	at a time.  The name of the directory being listed appears
 13557                                  	at the top of each page.
 13558                                  
 13559                                  	Bugbug:  pages nead to be uniform length..?
 13560                                  
 13561                                  /b	Bare listing format.  Turns off /w or /p.  Files are 
 13562                                  	listed in compressed 'name.ext' format, one per line,
 13563                                  	without additional information.  Good for making batch
 13564                                  	files or for piping.  When used with /s, complete
 13565                                  	pathnames are listed.
 13566                                  
 13567                                  /s	Descend subdirectory tree.  Performs command on current
 13568                                  	or specified directory, then for each subdirectory below
 13569                                  	that directory.  Directory header and footer is displayed
 13570                                  	for each directory where matching files are found, unless
 13571                                  	used with /b.  /b suppresses headers and footers.
 13572                                  
 13573                                  	Tree is explored depth first, alphabetically within the
 13574                                  	same level.
 13575                                  
 13576                                  	Bugbug:  hidden directories aren't searched.
 13577                                  
 13578                                  /l	Display file names, extensions and paths in lowercase.	;M010
 13579                                  
 13580                                  /c	Display file compression ratio, if the file is on a MagicDrv
 13581                                  	compressed volume.
 13582                                  
 13583                                  /o	Sort order.  /o alone sorts by default order (dirs-first, name,
 13584                                  	extension).  A sort order may be specified after /o.  Any of
 13585                                  	the following characters may be used: nedsgc (name, extension,
 13586                                  	date/time, size, group-dirs-first, compression ratio).	Placing
 13587                                  	a '-' before any letter causes a downward sort on that field.
 13588                                  	E.g., /oe-d means sort first by extension in alphabetical order,
 13589                                  	then within each extension sort by date and time in reverse
 13590                                  	chronological order.
 13591                                  
 13592                                  /a	Attribute selection.  Without /a, hidden and system files
 13593                                  	are suppressed from the listing.  With /a alone, all files
 13594                                  	are listed.  An attribute list may follow /a, consisting of
 13595                                  	any of the following characters:  hsdar (hidden, system,
 13596                                  	directory, archive, read-only).  A '-' before any letter
 13597                                  	means 'not' that attribute.  E.g., /ar-d means files that
 13598                                  	are marked read-only and are not directory files.  Note
 13599                                  	that hidden or system files may be included in the listing.
 13600                                  	They are suppressed without /a but are treated like any other
 13601                                  	attribute with /a.
 13602                                  
 13603                                  /?	Help listing.  Display DIR useage information.	;M008;Handled externally
 13604                                  
 13605                                  /h has been removed.					;M008
 13606                                  
 13607                                  DIRCMD	An environment variable named DIRCMD is parsed before the
 13608                                  	DIR command line.  Any command line options may be specified
 13609                                  	in DIRCMD, and become defaults.  /? will be ignored in DIRCMD.
 13610                                  	A filespec may be specified in DIRCMD and will be used unless
 13611                                  	a filespec is specified on the command line.  Any switch
 13612                                  	specified in DIRCMD may be overridden on the command line.
 13613                                  	If the original DIR default action is desired for a particular
 13614                                  	switch, the switch letter may be preceded by a '-' on the
 13615                                  	command line.  E.g.,
 13616                                  
 13617                                  	  /-w	use long listing format
 13618                                  	  /-p	don't page the listing
 13619                                  	  /-b	don't use bare format
 13620                                  	  /-s	don't descend subdirectory tree
 13621                                  	  /-o	display files in disk order
 13622                                  	  /-a	suppress hidden and system files
 13623                                  
 13624                                  Notes:
 13625                                  ------
 13626                                  
 13627                                  For sorted listings, file entries are loaded into the TPA buffer, which
 13628                                  is usually about 64K in size.  This allows sorts of up to 3000 files at
 13629                                  a time.  Each entry takes up 21 bytes in the buffer (see EntryStruc below).
 13630                                  The byte after the last entry is 0FFh.  The first byte of each entry is
 13631                                  a flag byte which is made zero when the entry is loaded, and made one
 13632                                  when the entry is used.
 13633                                  
 13634                                  Revision History
 13635                                  ================
 13636                                  M01	md	7/13/90 	Use ROM BIOS data area to obtain screen height
 13637                                  				in the absence of ANSI.SYS
 13638                                  
 13639                                  M007	sa	8/1/90		Allow /p/b combination
 13640                                  
 13641                                  M008	sa	8/1/90		Remove /h parameter.  Eliminate code used
 13642                                  				to internally handle /? message.
 13643                                  
 13644                                  M010	sa	8/5/90		Add support for /l (lowercase) option.
 13645                                  
 13646                                  M011	sa	8/5/90		Patch up bug where MS-DOS does not load the
 13647                                  				first FCB with the drive number when the drive
 13648                                  				letter in the command line is preceded by a
 13649                                  				switch.  Now dir manually loads the drive
 13650                                  				number after parsing.
 13651                                  
 13652                                  M018	md	8/12/90 	Increment the screen height by 1 when obtained
 13653                                  				from the ROM BIOS.
 13654                                  
 13655                                  M023	sa	8/31/90		Prevent DIR from failing if it encounters
 13656                                  				a subdirectory having len(pathname)>MAXPATH.
 13657                                  				Just skip over that subdirectory.
 13658                                  
 13659                                  M028	dbo	9/24/90		When country=US, sort by strict character
 13660                                  				byte value, rather than collating table.
 13661                                  				This to match MS-DOS Shell's sort order.
 13662                                  
 13663                                  ========================================================================= %
 13664                                  
 13665                                  %endif
 13666                                  
 13667                                  ; 16/02/2023
 13668                                  
 13669                                  NUM_DIR_SWS	equ	14	; # of dir switch synonyms in Dir_Sw_Ptrs list
 13670                                  
 13671                                  ;OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 13672                                  ;
 13673                                  ;		on/off bit record for /l, /b, /s, /p, /w, /c options
 13674                                  ;		(order is hard-coded; see OnOffSw)
 13675                                  ;		Inmem is set when entries are loaded in memory.
 13676                                  
 13677                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13678                                  mask.wide  equ 1
 13679                                  mask.pagd  equ 2
 13680                                  mask.subd  equ 4
 13681                                  mask.bare  equ 8
 13682                                  mask.lcase equ 16
 13683                                  mask.inmem equ 32
 13684                                  ;
 13685                                  mask.dev    equ 1
 13686                                  mask.baddir equ 2	
 13687                                  
 13688                                  NUM_ATTR_LTRS	equ	6	; length of attribute letter list
 13689                                  
 13690                                  NUM_ORDER_LTRS	equ	5	; length of sort order letter list
 13691                                  
 13692                                  ;ResultBuffer	struc		; structure of parse result buffer
 13693                                  ;ValueType	db	?
 13694                                  ;ValueTag	db	?
 13695                                  ;SynPtr		dw	?
 13696                                  ;ValuePtr	dd	?
 13697                                  ;ResultBuffer	ends
 13698                                  
 13699                                  ;ErrorRec	record	baddir:1,dev:1
 13700                                  ;
 13701                                  ;		Error bits are:
 13702                                  ;		  Invalid directory format
 13703                                  ;		  File is device
 13704                                  
 13705                                  ;EntryStruc	struc			; our private directory entry structure
 13706                                  ;used		db	?		; =0 until entry used, then =1
 13707                                  ;filename	db	8 dup (?)	; filename
 13708                                  ;fileext	db	3 dup (?)	; extension
 13709                                  ;fileattr	db	?		; file attributes
 13710                                  ;filetime	dw	?		; file time
 13711                                  ;filedate	dw	?		; file date
 13712                                  ;filesize	dd	?		; file size
 13713                                  ;EntryStruc	ends
 13714                                  
 13715                                  ;shove	macro	val		; hose-bag 8086 doesn't push immediate
 13716                                  ;	mov	ax,val		; invisible, dangerous use of AX!
 13717                                  ;	push	ax
 13718                                  ;	endm
 13719                                  
 13720                                  ;	public	Catalog		; our entry point
 13721                                  ;
 13722                                  ;	break	<DIR (Catalog) principal routines>
 13723                                  ;
 13724                                  ;	assume	cs:TRANGROUP,ds:TRANGROUP,es:nothing,ss:TRANGROUP
 13725                                  ; ---------------------------------------------------------------------------
 13726                                  ;	Bugbug:	Each routine should start with it's own ASSUME.
 13727                                  
 13728                                  ;----------------------------------------------------------------------------
 13729                                  ;----------------------------------------------------------------------------
 13730                                  
 13731                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13732                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:108Dh
 13733                                  
 13734                                  ;***	Catalog - DIR command main routine
 13735                                  ;
 13736                                  ;	ENTRY	FCB #1 in PSP has drive# from cmd-line or default
 13737                                  ;		Cmd-line tail text is at 81h, terminated by 0Dh
 13738                                  ;		CS, DS, ES, SS = TRANGROUP seg addr
 13739                                  ;		Tpa = TPA buffer seg addr
 13740                                  ;		BytCnt = # bytes in TPA buffer
 13741                                  ;
 13742                                  ;	EXIT	nothing
 13743                                  ;
 13744                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 13745                                  ;
 13746                                  ;	ERROR EXITS
 13747                                  ;
 13748                                  ;	  Errors are handled by setting up error message pointers
 13749                                  ;	   for Std_EPrintf and jumping to CError. Syntax errors in
 13750                                  ;	   the environment variable, however, are handled by printing
 13751                                  ;	   an error message and continuing.
 13752                                  ;
 13753                                  ;	EFFECTS
 13754                                  ;
 13755                                  ;	  Directory listing is displayed (on standard output).
 13756                                  ;	  APPEND is disabled. HeadFix routine is expected to
 13757                                  ;	   restore APPEND state.
 13758                                  ;	  Working directory may be changed. The user's default
 13759                                  ;	   directory is saved and flagged for restoration by RestUDir
 13760                                  ;	   during COMMAND cycle.
 13761                                  ;	  Lots of variables may be changed in TRANSPACE segment.
 13762                                  ;
 13763                                  ;	NOTES
 13764                                  ;
 13765                                  ;	  ES = TRANGROUP seg addr except when used to address the
 13766                                  ;	   the TPA buffer, where directory entries are loaded from disk.
 13767                                  
 13768                                  	; 16/02/2023
 13769                                  CATALOG:
 13770 00001064 E8A400                  	call	SetDefaults
 13771 00001067 E8C800                  	call	ParseEnvironment
 13772 0000106A E8E000                  	call	ParseCmdLine
 13773 0000106D 7303                    	jnc	short catalog1	; no parse error
 13774 0000106F E99600                  	jmp	catErr		; error msg is set up
 13775                                  catalog1:
 13776 00001072 E80901                  	call	SetOptions
 13777 00001075 E8DF00                  	call	SetCollatingTable
 13778                                  
 13779                                  ;	Drive # to operate on has already been placed in FCB by
 13780                                  ;	COMMAND preprocessing. OkVolArg & PathCrunch depend on that.
 13781                                  
 13782                                  	;;;test	Bits,mask bare
 13783                                  	;;test 	word [_Bits],8
 13784                                  	;test	byte [_Bits],8
 13785 00001078 F606[008C]08            	test	byte [_Bits],mask.bare
 13786 0000107D 750A                    	jnz	short catalog2	; don't display volume info for /b
 13787                                  	;invoke	OkVolArg	; find & display volume info
 13788 0000107F E8E00B                  	call	OkVolArg
 13789                                  	;sub	byte [LeftOnpage],2
 13790 00001082 832E[CF8A]02            	sub	word [LeftOnPage],2
 13791                                  				; record display lines used by volume info
 13792 00001087 EB14                    	jmp	short catCrunch
 13793                                  
 13794                                  ;	OkVolArg side effects:
 13795                                  ;	APPEND is disabled;
 13796                                  ;	DTA established at DirBuf;
 13797                                  ;	Filename fields in FCB are wildcarded.
 13798                                  
 13799                                  catalog2:
 13800                                  ;	OkVolArg wasn't executed, so we have to do these ourselves.
 13801                                  
 13802                                  	;invoke	DisAppend	; disable APPEND
 13803 00001089 E8A30B                  	call	DisAppend
 13804                                  
 13805                                  	;mov	dx,offset TRANGROUP:DirBuf
 13806 0000108C BA[AE8B]                	mov	dx,DIRBUF
 13807 0000108F B41A                    	mov	ah,1Ah
 13808                                  	;mov	ah,Set_DMA
 13809 00001091 CD21                    	int	21h		; set DTA
 13810                                  
 13811                                  
 13812                                  	;mov	di,FCB	; 5Ch	; ES:DI = ptr to FCB
 13813                                  	;inc	di		; ES:DI = ptr to filename field of FCB
 13814                                  	; 28/07/2024
 13815 00001093 BF5D00                  	mov	di,FCB+1 ; 5Dh
 13816 00001096 B03F                    	mov	al,'?'		; AL = wildcard character
 13817 00001098 B90B00                  	mov	cx,11
 13818 0000109B F3AA                    	rep	stosb		; wildcard filename field
 13819                                  
 13820                                  catCrunch:
 13821 0000109D E83901                  	call	CrunchPath	; crunch pathname to get directory and filename
 13822 000010A0 7230                    	jc	short catRecErr	; handle recorded or extended error
 13823                                  
 13824                                  ;	User's directory has been saved, we've changed to specified directory.
 13825                                  ;	ComSw = error bits for later use
 13826                                  ;	FCB contains parsed filename
 13827                                  
 13828                                  	;cmp	byte [COMSW],0
 13829 000010A2 833E[BC8A]00            	cmp	word [COMSW],0
 13830 000010A7 7529                    	jne	short catRecErr	; handle recorded error
 13831                                  
 13832 000010A9 E88701                  	call	InstallCtrlC	; install control-C handler
 13833 000010AC E8CD08                  	call	ZeroTotals	; zero grand totals
 13834 000010AF E84304                  	call	ListDir		; list main directory
 13835 000010B2 7244                    	jc	short catExtErr
 13836                                  
 13837                                  	;;;test	Bits,mask subd
 13838                                  	;;test	word [_Bits],4
 13839                                  	;test	byte [_Bits],4
 13840 000010B4 F606[008C]04            	test	byte [_Bits],mask.subd
 13841 000010B9 7405                    	jz	short catalog3	; subdirectories option not set
 13842 000010BB E88D01                  	call	ListSubds	; list subdirectories
 13843 000010BE 7238                    	jc	short catExtErr
 13844                                  catalog3:
 13845                                  ;	Check if any files were found.
 13846                                  
 13847                                  	;;;test	Bits,mask bare
 13848                                  	;;test	word [_Bits],8
 13849                                  	;test	byte [_Bits],8
 13850 000010C0 F606[008C]08            	test	byte [_Bits],mask.bare
 13851 000010C5 750A                    	jnz	short catRet	; don't bother for bare format
 13852                                  
 13853 000010C7 A1[D78A]                	mov	ax,[FileCntTotal]
 13854 000010CA 09C0                    	or	ax,ax
 13855 000010CC 7417                    	jz	short catNoFiles ; no files found
 13856                                  
 13857 000010CE E8A702                  	call	DisplayTotals	; display trailing grand totals
 13858                                  	;jmp	short catRet	; all done
 13859                                  	; 25/04/2023
 13860                                  catRet:
 13861 000010D1 C3                      	retn
 13862                                  
 13863                                  catRecErr:
 13864                                  
 13865                                  ;	ComSw may have error bit set. If not, do extended error.
 13866                                  
 13867                                  	;;;test	ComSw,mask dev
 13868                                  	;;test	word [COMSW],1
 13869                                  	;test	byte [COMSW],1
 13870 000010D2 F606[BC8A]01            	test	byte [COMSW],mask.dev
 13871 000010D7 750C                    	jnz	short catNoFiles 
 13872                                  				; filename is device, respond 'file not found'
 13873                                  	;;test	ComSw,mask baddir
 13874                                  	;;test	word [COMSW],2
 13875                                  	;test	byte [COMSW],2
 13876 000010D9 F606[BC8A]02            	test	byte [COMSW],mask.baddir
 13877 000010DE 7418                    	jz	short catExtErr	; no ComSw error bits, must be extended error
 13878                                  	;mov	dx,offset TRANGROUP:BadCd_Ptr
 13879                                  				; invalid directory
 13880 000010E0 BA[3780]                	mov	dx,badcd_ptr
 13881 000010E3 EB23                    	jmp	short catErr
 13882                                  
 13883                                  catNoFiles:
 13884                                  
 13885                                  ;	Display header and force 'file not found' message.
 13886                                  
 13887 000010E5 E81107                  	call	DisplayHeader
 13888 000010E8 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 13889 000010EB C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 13890 000010F0 BA[FC7E]                	mov	dx,extend_buf_ptr
 13891 000010F3 A3[FC7E]                	mov	[extend_buf_ptr],ax
 13892 000010F6 EB10                    	jmp	short catErr
 13893                                  
 13894                                  catExtErr:
 13895                                  
 13896                                  ;	DOS has returned an error status. Get the extended error#, and
 13897                                  ;	set up an error message, changing 'No more files' error 
 13898                                  ;	to 'File not found' error.
 13899                                  
 13900 000010F8 E8E50B                  	call	Set_Ext_Error_Msg
 13901 000010FB 833E[FC7E]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 13902 00001100 7506                    	jne	short catalog4  ; catErr
 13903 00001102 C706[FC7E]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 13904                                  catalog4:
 13905                                  
 13906                                  ;	Error exit. Error message information has been set up
 13907                                  ;	for Std_EPrintf.
 13908                                  
 13909                                  catErr:
 13910 00001108 E94718                  	jmp	cerror		; go to COMMAND error recycle point
 13911                                  
 13912                                  	; 25/04/2023
 13913                                  ;catRet:
 13914                                  	;retn
 13915                                  
 13916                                  ; ---------------------------------------------------------------------------
 13917                                  
 13918                                  ;***	SetDefaults - set default pathname, options
 13919                                  ;
 13920                                  ;	ENTRY	DS = TRANGROUP seg addr
 13921                                  ;
 13922                                  ;	EXIT	nothing
 13923                                  ;
 13924                                  ;	USED	AX,DI
 13925                                  ;
 13926                                  ;	EFFECTS
 13927                                  ;	  SrcBuf = '*',EOL - default pathname
 13928                                  ;	  PathPos = ptr to pathname
 13929                                  ;	  PathCnt = length of pathname
 13930                                  
 13931                                  	; 16/02/2023
 13932                                  SetDefaults:
 13933 0000110B BF[948C]                	mov	di,SrcBuf		; DI = ptr to pathname buffer
 13934 0000110E 893E[048C]              	mov	[PathPos],di		; PathPos = ptr to pathname
 13935                                  	;mov	al,STAR
 13936 00001112 B02A                    	mov	al,'*'
 13937 00001114 AA                      	stosb
 13938                                  	;mov	al,END_OF_LINE_IN
 13939 00001115 B00D                    	mov	al,0Dh ; cr
 13940 00001117 AA                      	stosb				; SrcBuf = '*',0Dh
 13941 00001118 C706[028C]0100          	mov	word [PathCnt],1	; PathCnt = pathname length
 13942                                  
 13943 0000111E 31C0                    	xor	ax,ax			; AX = 0
 13944 00001120 A3[BC8A]                	mov	[COMSW],ax		; = no error
 13945 00001123 A3[008C]                	mov	[_Bits],ax		; = options off
 13946 00001126 A2[318C]                	mov	[DestBuf],al		; = no sort
 13947 00001129 C606[088C]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM ; 6
 13948 0000112E A2[098C]                	mov	[AttrSelect],al		; exclude hidden, system files
 13949                                  peRet:	; 25/04/2023
 13950 00001131 C3                      	retn
 13951                                  
 13952                                  ; ---------------------------------------------------------------------------
 13953                                  
 13954                                  ;***	ParseEnvironment - find and parse our environment variable
 13955                                  ;
 13956                                  ;	Find our environment variable and parse it. If a parse
 13957                                  ;	error occurs, issue an error message. The parse results
 13958                                  ;	up to the error will still have effect. Always leave
 13959                                  ;	the option variables in a useable state.
 13960                                  ;
 13961                                  ;	ENTRY	DS = TRANGROUP seg addr
 13962                                  ;
 13963                                  ;	EXIT	nothing
 13964                                  ;
 13965                                  ;	USED	AX,BX,CX,DX,SI,DI
 13966                                  ;
 13967                                  ;	EFFECTS
 13968                                  ;
 13969                                  ;	  Bits may contain new option settings.
 13970                                  ;	  DestBuf may contain new series of sort codes.
 13971                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 13972                                  ;	  SrcBuf may contain a new default pathname/filespec.
 13973                                  ;	  PathPos, PathCnt updated for new pathname.
 13974                                  ;
 13975                                  ;	  If a parse error occurred, an error message will be issued.
 13976                                  
 13977                                  	; 16/02/2023
 13978                                  ParseEnvironment:
 13979 00001132 E87603                  	call	GetEnvValue		; get environment variable value
 13980 00001135 72FA                    	jc	short peRet		; name not found in environment
 13981                                  
 13982                                  ;	SI = ptr to value of environment variable, in TRANGROUP seg
 13983                                  
 13984 00001137 E8B904                  	call	Parse_Line		; parse environment value
 13985 0000113A 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 13986                                  	;cmp	ax,END_OF_LINE
 13987 0000113D 74F2                    	je	short peRet		; successful completion
 13988                                  
 13989                                  ;	Some kind of parse error occurred.
 13990                                  ;	We're set up for a Std_EPrintf call.
 13991                                  
 13992 0000113F E8873C                  	call	std_eprintf		; display the parse error
 13993                                  	;mov	byte [Msg_Disp_Class],util_msg_class ; -1
 13994                                  					; restore default msg class
 13995 00001142 C606[FA7E]FF            	mov	byte [msg_disp_class],0FFh ; -1
 13996                                  	;mov	dx,offset TRANGROUP:ErrParsEnv_Ptr
 13997 00001147 BA[3B81]                	mov	dx,errparsenv_ptr
 13998                                  	;;invoke Printf_Crlf		; "(Error occurred in environment.."
 13999                                  	;call	Printf_Crlf
 14000                                  	; 25/04/2023
 14001                                  	;retn
 14002 0000114A E9763C                  	jmp	Printf_Crlf
 14003                                  					;M008;Internal handling of /? removed
 14004                                  ;peOk:	and	Bits,not mask help	; disallow /h in environment variable
 14005                                  	; 25/04/2023
 14006                                  ;peRet:
 14007                                  	;retn
 14008                                  
 14009                                  ; ---------------------------------------------------------------------------
 14010                                  
 14011                                  ;***	ParseCmdLine - parse and record command line parameters
 14012                                  ;
 14013                                  ;	ENTRY	PSP offset 81h is beginning of cmd line buffer
 14014                                  ;		DS, ES, CS = TRANGROUP seg addr
 14015                                  ;
 14016                                  ;	EXIT	CY = set if parse error occurred
 14017                                  ;
 14018                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 14019                                  ;		AX = system parser error code
 14020                                  ;		DX = ptr to message block
 14021                                  ;
 14022                                  ;	USED	AX,BX,CX,DX,SI,DI
 14023                                  ;
 14024                                  ;	EFFECTS
 14025                                  ;
 14026                                  ;	  Bits may contain new option settings.
 14027                                  ;	  DestBuf may contain new series of sort codes.
 14028                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 14029                                  ;	  SrcBuf may contain a new default pathname/filespec.
 14030                                  ;	  PathPos, PathCnt updated for new pathname.
 14031                                  ;
 14032                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 14033                                  ;	  Msg_Disp_Class = parse error class
 14034                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 14035                                  ;	  Message block (see DX) is set up for parse error message
 14036                                  
 14037                                  	; 16/02/2023
 14038                                  ParseCmdLine:
 14039 0000114D BE8100                  	mov	si,81h			; SI = ptr to cmd-line tail text
 14040 00001150 E8A004                  	call	Parse_Line		; parse cmd line tail
 14041 00001153 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 14042                                  	;;cmp	ax,END_OF_LINE
 14043                                  	; 25/04/2023
 14044                                  	;je	short pcOk		; parse completed successfully
 14045                                  
 14046                                  ;	A parse error occurred. We're all set up for message output.
 14047                                  
 14048                                  	; 25/04/2023
 14049                                  	; cf = 1 (ax < 0FFFFh)
 14050                                  	;stc		   		; return failure
 14051                                  	;jmp	short pcRet
 14052                                  	; 25/04/2023
 14053                                  	;retn
 14054                                  pcOk:
 14055                                  	; 25/04/2023
 14056                                  	;cf = 0 (ax = 0FFFFh)
 14057                                  	;clc				; return success
 14058                                  pcRet:
 14059 00001156 C3                      	retn
 14060                                  
 14061                                  ; ---------------------------------------------------------------------------
 14062                                  
 14063                                  ;***	SetCollatingTable - set up character collating table for sorting
 14064                                  ;
 14065                                  ;	If country is other than USA, try to get a collating table
 14066                                  ;	for character sorting. For USA, use straight byte values.
 14067                                  ;	This is so DIR behaves like the MS-DOS Shell, which sorts
 14068                                  ;	by straight byte values in the USA for better performance.
 14069                                  ;
 14070                                  ;	ENTRY	ES = TRANGROUP seg addr
 14071                                  ;
 14072                                  ;	EXIT	nothing
 14073                                  ;
 14074                                  ;	USED	AX,BX,CX,DX,DI
 14075                                  ;
 14076                                  ;	EFFECTS
 14077                                  ;
 14078                                  ;	  If collating table is set -
 14079                                  ;	    CountryPtrId = 6.
 14080                                  ;	    CountryPtr points to collating table.
 14081                                  ;
 14082                                  ;	  Otherwise -
 14083                                  ;	    CountryPtrId = 0.
 14084                                  
 14085                                  SetCollatingTable:
 14086                                  
 14087                                  ;	Begin modification M028
 14088                                  
 14089                                  	;mov	dx,offset TRANGROUP:InternatVars
 14090                                  	;			; DS:DX = ptr to international info buffer
 14091 00001157 BA[0295]                	mov	dx,INTERNATVARS
 14092 0000115A B80038                  	mov	ax,3800h
 14093                                  	;mov	ax,INTERNATIONAL << 8
 14094                                  	;;mov	ax,INTERNATIONAL shl 8
 14095                                  				; AX = 'Get current country info'
 14096 0000115D CD21                    	int	21h		; call DOS
 14097 0000115F 7217                    	jc	short scNoTable	; error - so don't collate
 14098                                  
 14099                                  ;	BX = country code
 14100                                  
 14101 00001161 83FB01                  	cmp	bx,1
 14102 00001164 7412                    	je	short scNoTable	; we're in USA, don't collate
 14103                                  
 14104                                  ;	End modification M028
 14105                                  
 14106                                  ;*	Country code is other than USA. Try to get a collating table.
 14107                                  
 14108 00001166 B80665                  	mov	ax,6506h
 14109                                  	;mov	ax,(GETEXTCNTRY << 8) + SETCOLLATE
 14110                                  	;;mov	ax,(GETEXTCNTRY shl 8) + SETCOLLATE
 14111                                  				; AH = 'Get Extended Country Info'
 14112                                  				; AL = 'Get Pointer to Collating Table'
 14113 00001169 BBFFFF                  	mov	bx,-1		; BX = code page of interest = CON
 14114 0000116C B90500                  	mov	cx,5		; CX = length of info buffer
 14115 0000116F 89DA                    	mov	dx,bx		; DX = country ID = default
 14116                                  	;mov	di,offset TRANGROUP:CountryPtrInfo
 14117 00001171 BF[2295]                	mov	di,CountryPtrInfo
 14118                                  				; ES:DI = ptr to info buffer
 14119 00001174 CD21                    	int	21h		; call DOS
 14120 00001176 7305                    	jnc	short scRet	; success
 14121                                  
 14122                                  ;*	Set CountryPtrId = 0 to signal no collating table.
 14123                                  
 14124                                  scNoTable:			;M028
 14125 00001178 C606[2295]00            	mov	byte [CountryPtrId],0
 14126                                  scRet:
 14127 0000117D C3                      	retn
 14128                                  
 14129                                  ; ---------------------------------------------------------------------------
 14130                                  
 14131                                  ;***	SetOptions - check and set options
 14132                                  ;
 14133                                  ;	ENTRY	nothing
 14134                                  ;
 14135                                  ;	EXIT	nothing
 14136                                  ;
 14137                                  ;	USED	AX,BX,CX,DX
 14138                                  ;
 14139                                  ;	EFFECTS
 14140                                  ;
 14141                                  ;	  Bits may contain modified option settings.
 14142                                  ;	  Display_Ioctl table, including LinPerPag variable, is filled in.
 14143                                  ;	  LeftOnPage is initialized to # lines till end of page is handled.
 14144                                  ;	  PerLine is set according to /w presence.
 14145                                  
 14146                                  	; 16/02/2023
 14147                                  SetOptions:
 14148                                  
 14149                                  ;	If bare listing requested, cancel wide listings.
 14150                                  
 14151                                  	;;;test	Bits,mask bare
 14152                                  	;;test	word [_Bits],8
 14153                                  	;test	byte [_Bits],8
 14154 0000117E F606[008C]08            	test	byte [_Bits],mask.bare
 14155 00001183 7405                    	jz	short setopts1
 14156                                  	;;;and	Bits,not mask wide	;M007;Allow /p with /b
 14157                                  	;;and	word [_Bits],0FFFEh
 14158                                  	;;and	byte [_Bits],0FEh
 14159 00001185 8026[008C]FE            	and	byte [_Bits],~mask.wide ; 0FEh
 14160                                  setopts1:
 14161                                  ;	Set # lines per display page.
 14162                                  
 14163                                  ;M01  Obtain screen height from ROM BIOS data area
 14164                                  ;
 14165                                  ;M01	mov	LinPerPag,LINESPERPAGE	; default value
 14166                                  
 14167 0000118A 1E                      	push	ds
 14168                                  	;mov	ax,ROMBIOS_DATA 	; Get ROM Data segment
 14169 0000118B B84000                  	mov	ax,40h
 14170 0000118E 8ED8                    	mov	ds,ax			;
 14171                                  	;Assume	DS:ROMBIOS_DATA
 14172                                  
 14173                                  	;mov	al,[CRT_Rows] ; [84h]	; Get max rows
 14174 00001190 A08400                  	mov	al,[84h]
 14175 00001193 1F                      	pop	ds			;
 14176                                  	;Assume	DS:Trangroup
 14177                                  
 14178 00001194 08C0                    	or	al,al			; If zero specified
 14179 00001196 7502                    	jnz	short setopts2		;
 14180                                  
 14181                                  	;mov	al,LINESPERPAGE 	; assume 24 rows
 14182 00001198 B019                    	mov	al,25	; MSDOS 5.0 COMMAND.COM (TRANGROUP:11D1h)
 14183                                  setopts2:
 14184 0000119A 30E4                    	xor	ah,ah
 14185                                  setopts3:
 14186 0000119C FEC0                    	inc	al			; height + 1 ;M018
 14187                                  
 14188 0000119E A3[7B8D]                	mov	[LinPerPag],ax		; set the rows now
 14189                                  
 14190                                  ; Now the console driver can change the rows if it knows better (M01 end)
 14191                                  
 14192                                  	;mov	ax,(IOCTL shl 8)+GENERIC_IOCTL_HANDLE
 14193                                  					; IOCTL for handles
 14194 000011A1 B80C44                  	mov	ax,440Ch
 14195                                  	;mov	bx,STDOUT		; handle #
 14196 000011A4 BB0100                  	mov	bx,1
 14197                                  	;mov	ch,IOC_SC		; screen
 14198 000011A7 B503                    	mov	ch,3
 14199                                  	;mov	cl,get_generic		; get display info
 14200 000011A9 B17F                    	mov	cl,7Fh
 14201 000011AB BA[6B8D]                	mov	dx,Display_Ioctl	; info block
 14202 000011AE CD21                    	int	21h			; call DOS
 14203                                  
 14204 000011B0 A1[7B8D]                	mov	ax,[LinPerPag]		; AX = # lines per page
 14205 000011B3 A3[CF8A]                	mov	[LeftOnPage],ax		; initialize # lines left on page
 14206                                  
 14207                                  ;	Set # entries per line.
 14208                                  
 14209                                  	;mov	byte [PerLine],NORMPERLIN
 14210                                  					; # entries per line without /w
 14211 000011B6 C606[CC8A]01            	mov	byte [PerLine],1
 14212                                  	;;;test	Bits,mask wide
 14213                                  	;;test	word [_Bits],1
 14214                                  	;test	byte [_Bits],1
 14215 000011BB F606[008C]01            	test	byte [_Bits],mask.wide
 14216 000011C0 7405                    	jz	short setopts4
 14217                                  	;mov	byte [PerLine],WIDEPERLIN
 14218                                  					; # entries per line with /w
 14219 000011C2 C606[CC8A]05            	mov	byte [PerLine],5
 14220                                  setopts4:
 14221                                  				;M011;start;The following code checks if a drive
 14222                                  				;letter has been parsed into SrcBuf, and if
 14223                                  				;so, the correct drive number is loaded into
 14224                                  				;the first FCB, at offset 5C.
 14225                                  
 14226                                  	;cmp	TRANGROUP:[SrcBuf+1],COLON_CHAR	; is this a drive letter?
 14227 000011C7 803E[958C]3A            	cmp	byte [SrcBuf+1],':'
 14228 000011CC 750A                    	jne	short soRet
 14229                                  	;mov	al,TRANGROUP:[SrcBuf]		; load drive letter into al
 14230 000011CE A0[948C]                	mov	al,[SrcBuf]
 14231                                  	;and	al,not 20h			; capitalize ASCII drive letter (LowerCase-32)-->UpperCase
 14232 000011D1 24DF                    	and	al,0DFh ; ~20h ; not 20h
 14233 000011D3 2C40                    	sub	al,'@'				; convert to 1-based number (1=A)
 14234 000011D5 A25C00                  	mov	[FCB],al  ; [5Ch]		; store in first FCB
 14235                                  						;M011;end
 14236                                  soRet:
 14237 000011D8 C3                      	retn
 14238                                  
 14239                                  ; ---------------------------------------------------------------------------
 14240                                  
 14241                                  ;***	CrunchPath - analyze supplied or default pathname
 14242                                  ;
 14243                                  ;	ENTRY	PathPos = ptr to pathname buffer
 14244                                  ;		PathCnt = length of pathname, not incl trailing delimiter
 14245                                  ;		Pathname in buffer must end in delimiter (like CR) and
 14246                                  ;		 must have space for another char after the delimiter.
 14247                                  ;
 14248                                  ;	EXIT	CY = clear if no error
 14249                                  ;		We are changed to directory found in pathname
 14250                                  ;		Previous directory ready to be restored via RestUDir
 14251                                  ;		FCB filename fields contain filename (possibly w/ wildcards)
 14252                                  ;
 14253                                  ;		If error occurred,
 14254                                  ;		CY = set
 14255                                  ;		ComSw = error bits (see ErrorRec)
 14256                                  ;		If ComSw not set,
 14257                                  ;		Ready for DOS Get Extended Error call
 14258                                  
 14259                                  	; 16/02/2023
 14260                                  CrunchPath:
 14261 000011D9 E8E101                  	call	FileIsDevice
 14262 000011DC 7507                    	jne	short crpath1	; not a device, skip ahead
 14263                                  	;;;or	ComSw,mask dev	; signal file is device
 14264                                  	;;or	word [COMSW],1
 14265                                  	;or	byte [COMSW],1
 14266 000011DE 800E[BC8A]01            	or	byte [COMSW],mask.dev
 14267 000011E3 EB2F                    	jmp	short cpErr	; return error
 14268                                  crpath1:
 14269 000011E5 FF36[048C]              	push	word [PathPos]	; save ptr to pathname
 14270 000011E9 C606[0C8C]FF            	mov	byte [DirFlag],-1
 14271                                  				; tell PathCrunch not to parse file into FCB
 14272 000011EE E88914                  	call	PathCrunch	; change to directory in pathname
 14273 000011F1 C606[0C8C]00            	mov	byte [DirFlag],0
 14274                                  				; reset our little flag
 14275 000011F6 5E                      	pop	si		; SI = ptr to pathname
 14276 000011F7 7208                    	jc	short cpNoDir	; didn't find directory path
 14277 000011F9 741A                    	jz	short cpRet	; found directory path w/ no filename
 14278                                  				;  - leave wildcard default in FCB and return
 14279                                  
 14280                                  ;*	We found a directory, and there was a filename attached.
 14281                                  ;	DestTail = ptr to ASCIIZ filename
 14282                                  
 14283 000011FB 8B36[2E8C]              	mov	si,[DestTail]	; SI = ptr to filename
 14284 000011FF EB28                    	jmp	short cpFile	; go parse the file into FCB
 14285                                  
 14286                                  ;*	PathCrunch failed to find a directory in the pathname.
 14287                                  ;
 14288                                  ;	Msg_Numb = error code
 14289                                  ;	DestIsDir = nonzero if path delimiter char's occur in pathname
 14290                                  ;	SI = ptr to pathname (now an ASCIIZ string)
 14291                                  
 14292                                  cpNoDir:
 14293 00001201 A1[988D]                	mov	ax,[Msg_Numb]	  ; AX = error code from PathCrunch
 14294 00001204 09C0                    	or	ax,ax
 14295 00001206 750C                    	jnz	short cpErr	  ; error occurred - return it
 14296 00001208 803E[2C8C]00            	cmp	byte [DestIsDir],0
 14297 0000120D 7407                    	je	short cpMaybe	  ; no path delimiters seen, maybe it's a file
 14298                                  crpath3:
 14299                                  	;;;or	ComSw,mask baddir ; signal invalid directory name
 14300                                  	;;or	word [COMSW],2
 14301                                  	;or	byte [COMSW],2
 14302 0000120F 800E[BC8A]02            	or	byte [COMSW],mask.baddir
 14303                                  	;jmp	short cpErr	  ; return error
 14304                                  	; 16/02/2023
 14305                                  cpErr:
 14306 00001214 F9                      	stc			  ; return error
 14307                                  cpRet:
 14308 00001215 C3                      	retn
 14309                                  
 14310                                  cpMaybe:
 14311                                  ;	SI = ptr to pathname
 14312                                  
 14313                                  	;cmp	byte [si+1],COLON_CHAR
 14314 00001216 807C013A                	cmp	byte [si+1],':'
 14315 0000121A 7501                    	jne	short crpath2	  ; no drive specifier, skip ahead
 14316 0000121C AD                      	lodsw			  ; SI = ptr past drive specifier "d:"
 14317                                  crpath2:
 14318 0000121D 813C2E2E                	cmp	word [si],".."
 14319 00001221 7506                    	jne	short cpFile	  ; if not "..", treat as a file
 14320 00001223 807C0200                	cmp	byte [si+2],0
 14321                                  	;jne	short cpFile	  ; or if there's more after "..", treat as file
 14322                                  	;;;;or	ComSw,mask baddir ; signal invalid directory
 14323                                  	;;;or	word [COMSW],2
 14324                                  	;;or	byte [COMSW],2
 14325                                  	;or	byte [COMSW],mask.baddir
 14326                                  	;jmp	short cpErr	  ; return error
 14327                                  	; 16/02/2023
 14328 00001227 74E6                    	je	short crpath3
 14329                                  
 14330                                  ;	The preceding code was taken from the old DIR routine.
 14331                                  ;	It's garbage, I'm afraid. It's meant to check for ".."
 14332                                  ;	occurring when we're at the root directory. Too bad it
 14333                                  ;	doesn't handle problems with "..\..", etc.
 14334                                  
 14335                                  ;	We're ready to parse a filename into the FCB.
 14336                                  ;	SI = ptr to ASCIIZ filename
 14337                                  
 14338                                  cpFile:	
 14339 00001229 BF5C00                  	mov	di,FCB	; 5Ch	; DI = ptr to FCB
 14340 0000122C B80E29                  	mov	ax,290Eh
 14341                                  	;mov	ax,(Parse_File_Descriptor<<8)|0Eh
 14342                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 0Eh
 14343                                  				; wildcards already in FCB used as defaults
 14344 0000122F CD21                    	int	21h
 14345 00001231 F8                      	clc			; return success
 14346                                  	;jmp	short cpRet
 14347                                  	; 16/02/2023
 14348 00001232 C3                      	retn
 14349                                  
 14350                                  ;cpErr:
 14351                                  ;	stc			; return error
 14352                                  ;cpRet:
 14353                                  ;	retn
 14354                                  
 14355                                  ; ---------------------------------------------------------------------------
 14356                                  
 14357                                  ;***	InstallCtrlC - install our private control-C handler
 14358                                  ;
 14359                                  ;	Put our control-c handler in front of command.com's default
 14360                                  ;	handler, to make sure the user's default directory gets restored.
 14361                                  ;	This shouldn't be necessary, but, for now, there are situations
 14362                                  ;	where the TDATA segment is left in a modified state when a
 14363                                  ;	control-c occurs.  This means that the transient will be
 14364                                  ;	reloaded, and the user's directory cannot be restored.
 14365                                  ;
 14366                                  ;	Bugbug:  fix the wider problem?  Involves message services.  Ugly.
 14367                                  ;
 14368                                  ;	ENTRY	nothing
 14369                                  ;
 14370                                  ;	EXIT	nothing
 14371                                  ;
 14372                                  ;	USED	AX,BX,DX
 14373                                  ;
 14374                                  ;	EFFECTS
 14375                                  ;
 14376                                  ;	  CtrlCHandler address placed in int 23 vector.
 14377                                  ;
 14378                                  ;	NOTE
 14379                                  ;
 14380                                  ;	  Command.com's basic control-c handler will be restored
 14381                                  ;	  to the int 23 vector by the HeadFix routine, after DIR finishes.
 14382                                  
 14383                                  	; 16/02/2023
 14384                                  InstallCtrlC:
 14385 00001233 06                      	push	es			; preserve ES
 14386 00001234 B82335                  	mov	ax,3523h
 14387                                  	;mov	ax,(GET_INTERRUPT_VECTOR<<8)+23h
 14388                                  	;;mov	ax,(GET_INTERRUPT_VECTOR shl 8) + 23h
 14389 00001237 CD21                    	int	21h
 14390 00001239 891E[2795]              	mov	[OldCtrlCHandler],bx	; save old int 23 vector
 14391 0000123D 8C06[2995]              	mov	[OldCtrlCHandler+2],es	 
 14392 00001241 07                      	pop	es			; restore ES
 14393                                  
 14394 00001242 BA[8719]                	mov	dx,CtrlCHandler 	; DS:DX = ptr to CtrlCHandler
 14395 00001245 B82325                  	mov	ax,2523h
 14396                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+23h
 14397                                  	;;mov	ax,(SET_INTERRUPT_VECTOR shl 8) + 23h
 14398 00001248 CD21                    	int	21h
 14399 0000124A C3                      	retn
 14400                                  
 14401                                  ; ---------------------------------------------------------------------------
 14402                                  
 14403                                  ;***	ListSubds - search and list files in subdirectories
 14404                                  ;
 14405                                  ;	ENTRY	Current directory (on selected drive) is top of subdir tree
 14406                                  ;		FCB is still set up for file searches
 14407                                  ;		Bits, AttrSpecified, AttrSelect, DestBuf all still set up
 14408                                  ;
 14409                                  ;	EXIT	CY = clear if no error
 14410                                  ;		FileCnt = # files found & displayed
 14411                                  ;		FileSiz = total size of files found
 14412                                  ;
 14413                                  ;		If error,
 14414                                  ;		CY = set
 14415                                  ;		Ready for DOS Get Extended Error call
 14416                                  ;
 14417                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 14418                                  ;
 14419                                  ;	EFFECTS
 14420                                  ;
 14421                                  ;	  FileCntTotal, FileSizTotal are updated.
 14422                                  ;	  Subdirectories may be listed on standard output device.
 14423                                  ;
 14424                                  ;	NOTES
 14425                                  ;
 14426                                  ;	  ListSubds seeds the recursive entry point lsNode with a ptr
 14427                                  ;	   to a buffer where we'll stack up subdirectory filenames.
 14428                                  ;	   Each name is stored ASCIIZ.
 14429                                  
 14430                                  	; 16/02/2023
 14431                                  ListSubds:
 14432                                  	;invoke	SetRest1		; make sure user's dir gets restored
 14433 0000124B E8931A                  	call	SetRest1
 14434                                  
 14435 0000124E BB[EE8C]                	mov	bx,ScanBuf   		; BX = ptr to child name buffer
 14436                                  lsNode:
 14437 00001251 C60700                  	mov	byte [bx],0		; start with null child name
 14438                                  lsLoop:
 14439 00001254 E8F001                  	call	FindNextChild		; search for next subdirectory
 14440 00001257 7235                    	jc	short lsErr		; search failed - examine error
 14441                                  
 14442 00001259 89DA                    	mov	dx,bx			; DX = ptr to child's name
 14443 0000125B E84004                  	call	ChangeDir		; enter child directory
 14444                                  
 14445                                  					; M023;start
 14446 0000125E 7306                    	jnc	short lstsd1		; check for error
 14447                                  	;cmp	ax,3
 14448 00001260 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND	; error due to len(pathname)>MAXPATH?
 14449 00001263 74EF                    	je	short lsLoop		; yes, skip over this subdirectory
 14450                                  	;jmp	short lsRet		; no, other error: DIR must fail
 14451                                  	; 16/02/2023			; M023;end
 14452 00001265 C3                      	retn
 14453                                  lstsd1:	
 14454 00001266 53                      	push	bx
 14455 00001267 E88B02                  	call	ListDir			; list the directory
 14456 0000126A 5B                      	pop	bx
 14457                                  
 14458                                  ;	Note we're ignoring errors returned here.
 14459                                  
 14460 0000126B 89DF                    	mov	di,bx			; DI = ptr to child's name
 14461 0000126D B90D00                  	mov	cx,13			; CX = max name length w/ null
 14462 00001270 30C0                    	xor	al,al			; AL = zero byte to look for
 14463 00001272 F2AE                    	repne	scasb			; DI = ptr to next name pos'n in buf
 14464 00001274 53                      	push	bx			; save ptr to child's name
 14465 00001275 89FB                    	mov	bx,di			; BX = ptr to next name pos'n in buf
 14466 00001277 E8D7FF                  	call	lsNode			; recurse from new node
 14467 0000127A 5B                      	pop	bx			; BX = ptr to child's name
 14468 0000127B 9C                      	pushf				; save error condition
 14469                                  	
 14470                                  	;;shove	0
 14471                                  	;mov	ax,0
 14472 0000127C 29C0                    	sub	ax,ax ; 0
 14473 0000127E 50                      	push	ax
 14474                                  	;shove	".."
 14475 0000127F B82E2E                  	mov	ax,'..'  ; 2E2Eh
 14476 00001282 50                      	push	ax
 14477 00001283 89E2                    	mov	dx,sp			; DX = ptr to "..",0 on stack
 14478 00001285 E81604                  	call	ChangeDir		; return to parent directory
 14479 00001288 58                      	pop	ax			; restore stack
 14480 00001289 58                      	pop	ax
 14481                                  
 14482 0000128A 9D                      	popf				; restore error condition from child
 14483                                  	;jc	short lsRet		; return error
 14484                                  	;jmp	short lsLoop		; look for more children
 14485                                  	; 16/02/2023
 14486 0000128B 73C7                    	jnc	short lsLoop
 14487 0000128D C3                      	retn
 14488                                  lsErr:
 14489 0000128E E85F0A                  	call	get_ext_error_number	; AX = extended error code
 14490                                  	;cmp	ax,2
 14491 00001291 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 14492 00001294 7406                    	je	short lsRet		; file not found, we're ok
 14493                                  	;cmp	ax,18
 14494 00001296 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 14495 00001299 7401                    	je	short lsRet		; no more files, we're ok
 14496 0000129B F9                      	stc				; return other errors
 14497                                  lsRet:	
 14498 0000129C C3                      	retn
 14499                                  
 14500                                  ; ---------------------------------------------------------------------------
 14501                                  
 14502                                  	;break	<DIR support routines>
 14503                                  
 14504                                  ;***	SUPPORT ROUTINES
 14505                                  
 14506                                  ; ----------------------
 14507                                  
 14508                                  ;***	CheckChild - check potential subdirectory name for FindNextChild
 14509                                  ;
 14510                                  ;	ENTRY	DirBuf contains DOS Find-buffer with potential child
 14511                                  ;		BX = ptr to last child's name
 14512                                  ;		BP = ptr to temp child's name
 14513                                  ;
 14514                                  ;	EXIT	nothing
 14515                                  ;
 14516                                  ;	USED	AX,CX,SI,DI
 14517                                  ;
 14518                                  ;	EFFECTS
 14519                                  ;
 14520                                  ;	  Filename pointed to by BP may be changed.
 14521                                  ;
 14522                                  ;	NOTES
 14523                                  ;
 14524                                  ;	  Potential filename replaces temp filename if:
 14525                                  ;	   it's a subdirectory file;
 14526                                  ;	   it doesn't start with a '.';
 14527                                  ;	   it's alphanumerically greater than last child's name;
 14528                                  ;	   and it's alphanumerically less than temp name.
 14529                                  
 14530                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14531                                  	; 07/06/2023
 14532                                  CheckChild:
 14533                                  	;test	DirBuf.find_buf_attr,ATTR_DIRECTORY
 14534 0000129D F606[C38B]10            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY ; 10h
 14535 000012A2 741D                    	jz	short ccRet	; not a subdirectory file- return
 14536                                  
 14537                                  	; 16/02/2023
 14538 000012A4 BE[CC8B]                	mov	si,DIRBUF+FIND_BUF.PNAME
 14539 000012A7 803C2E                  	cmp	byte [si],'.'
 14540                                  	;;cmp	DirBuf.find_buf_pname,'.'
 14541                                  	;cmp	byte [DIRBUF+FIND_BUF.PNAME],'.'
 14542 000012AA 7415                    	je	short ccRet	; starts with a dot- return
 14543                                  
 14544                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14545                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14546 000012AC 89DF                    	mov	di,bx
 14547 000012AE E80404                  	call	CmpAscz		; compare candidate to last child's name
 14548 000012B1 760E                    	jna	short ccRet	; it's not above it- return
 14549                                  
 14550                                  
 14551                                  	; 07/06/2023
 14552                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14553                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14554                                  	; si = DIRBUF+FIND_BUF.PNAME
 14555 000012B3 89EF                    	mov	di,bp
 14556 000012B5 E8FD03                  	call	CmpAscz		; compare candidate to temp name
 14557 000012B8 7307                    	jnb	short ccRet	; it's not below it- return
 14558                                  
 14559                                  ;	New kid is alright. Copy to temp.
 14560                                  
 14561                                  	; 07/06/2023
 14562                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14563                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14564                                  	; si = DIRBUF+FIND_BUF.PNAME
 14565 000012BA 89EF                    	mov	di,bp
 14566 000012BC B90D00                  	mov	cx,13
 14567 000012BF F3A4                    	rep	movsb
 14568                                  ccRet:
 14569 000012C1 C3                      	retn
 14570                                  
 14571                                  ; ---------------------------------------------------------------------------
 14572                                  
 14573                                  ;***	CmpEntry - compare one directory entry to another in sort order
 14574                                  ;
 14575                                  ;	Compare one directory entry against another according to
 14576                                  ;	the sort codes in DestBuf. One or more comparisons
 14577                                  ;	may be made of file name, extension, time/date, and
 14578                                  ;	size.  Comparisons may be made for upward or downward
 14579                                  ;	sort order.
 14580                                  ;
 14581                                  ;	ENTRY	ES:BX = ptr to entry to compare
 14582                                  ;		ES:BP = ptr to entry to be compared against
 14583                                  ;		DestBuf contains sort codes (see DestBuf)
 14584                                  ;		DS = TRANGROUP seg addr
 14585                                  ;
 14586                                  ;	EXIT	BX = unchanged
 14587                                  ;		BP = unchanged
 14588                                  ;		Condition flags set for same, above, or below
 14589                                  ;		 comparing BX entry against BP entry.
 14590                                  ;		 'Same, above, below' translate to 'same, after, before'.
 14591                                  ;
 14592                                  ;	USED:	AX,CX,DX,SI,DI
 14593                                  
 14594                                  	; 16/02/2023
 14595                                  CmpEntry:
 14596 000012C2 BE[318C]                	mov	si,DestBuf	; (DS:SI) = ptr to sort codes
 14597                                  ceLoop:
 14598 000012C5 31C0                    	xor	ax,ax		; AX = 0
 14599 000012C7 8A04                    	mov	al,[si]		; AL = sort code
 14600 000012C9 08C0                    	or	al,al
 14601 000012CB 741C                    	jz	short ceDone	; sort code is zero, we're done
 14602 000012CD 46                      	inc	si		; DS:SI = ptr to next sort code
 14603 000012CE 56                      	push	si		; save ptr to next sort code
 14604 000012CF FEC8                    	dec	al
 14605 000012D1 D0E0                    	shl	al,1
 14606                                  	;sal	al,1		; AX = index into cmp call table
 14607                                  				; CY set for downward sort order
 14608 000012D3 89C6                    	mov	si,ax		; SI = index into cmp call table
 14609 000012D5 2E8B84[EA12]            	mov	ax,[cs:si+FieldCmps]
 14610                                  				; AX = addr of compare routine
 14611 000012DA 7204                    	jc	short ceDn	; downwards sort - go swap entries
 14612 000012DC FFD0                    	call	ax 		; do upwards sort
 14613 000012DE EB06                    	jmp	short ceNs
 14614                                  ceDn:
 14615 000012E0 87DD                    	xchg	bx,bp		; swap entry ptrs for downward sort order
 14616 000012E2 FFD0                    	call	ax		; do sort
 14617 000012E4 87DD                    	xchg	bx,bp		; swap ptrs back
 14618                                  ceNs:
 14619 000012E6 5E                      	pop	si		; SI = ptr to next sort code
 14620 000012E7 74DC                    	je	short ceLoop	; compare showed no difference, keep trying
 14621                                  ceDone:
 14622                                  
 14623                                  ;	Get here either from unequal compare or sort code = 0.
 14624                                  ;	In the latter case, condition codes indicate equality,
 14625                                  ;	which is correct.
 14626                                  
 14627 000012E9 C3                      	retn
 14628                                  
 14629                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14630                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:1339h)
 14631                                  
 14632                                  FieldCmps:		; call table of entry comparisons
 14633 000012EA [F412]                  	dw	CmpName
 14634 000012EC [FF12]                  	dw	CmpExt
 14635 000012EE [3D13]                  	dw	CmpTime
 14636 000012F0 [5913]                  	dw	CmpSize
 14637 000012F2 [5E13]                  	dw	CmpType
 14638                                  
 14639                                  ; ---------------------------------------------------------------------------
 14640                                  
 14641                                  ;***	CmpName - compare file name of two entries
 14642                                  ;***	CmpExt - compare extension of two entries
 14643                                  ;
 14644                                  ;	ENTRY	ES:BX = ptr to one entry
 14645                                  ;		ES:BP = ptr to another entry
 14646                                  ;
 14647                                  ;	EXIT	BX = unchanged
 14648                                  ;		BP = unchanged
 14649                                  ;		Condition flags set for same, above, or below
 14650                                  ;		comparing BX entry to BP entry.
 14651                                  ;
 14652                                  ;	USED:	AX,CX,DX,SI,DI
 14653                                  
 14654                                  	; 16/02/2023
 14655                                  CmpName:
 14656 000012F4 89DE                    	mov	si,bx		; ES:SI = ptr to BX entry
 14657 000012F6 89EF                    	mov	di,bp		; ES:DI = ptr to BP entry
 14658                                  	;;add	si,filename	; ES:SI = ptr to BX name
 14659                                  	;add	si,1
 14660                                  	; 25/04/2023
 14661 000012F8 46                      	inc	si
 14662                                  	;;add	di,filename	; ES:DI = ptr to BP name
 14663                                  	;add	di,1
 14664                                  	; 25/04/2023
 14665 000012F9 47                      	inc	di
 14666                                  	;mov	cx,size filename
 14667                                  				; CX = length of name
 14668 000012FA B90800                  	mov	cx,8
 14669 000012FD EB0C                    	jmp	short CmpStr
 14670                                  
 14671                                  CmpExt:
 14672                                  	; 07/06/2023
 14673                                  	;mov	si,bx		; ES:SI = ptr to BX entry
 14674                                  	;mov	di,bp		; ES:DI = ptr to BP entry
 14675                                  	;;add	si,fileext	; ES:SI = ptr to BX extension
 14676                                  	;add	si,9
 14677                                  	;;add	di,fileext	; ES:DI = ptr to BP extension
 14678                                  	;add	di,9
 14679                                  	;
 14680 000012FF BE0900                  	mov	si,9
 14681 00001302 89F7                    	mov	di,si ; mov di,9
 14682 00001304 01DE                    	add	si,bx
 14683 00001306 01EF                    	add	di,bp
 14684                                  	;
 14685                                  	;mov	cx,size fileext	; CX = length of extension field
 14686 00001308 B90300                  	mov	cx,3
 14687                                  
 14688                                  ;	Bugbug:	use symbol for subfunction code.
 14689                                  
 14690                                  CmpStr:	
 14691 0000130B 803E[2295]06            	cmp	byte [CountryPtrId],6
 14692 00001310 7527                    	jne	short cnNoCollTable
 14693                                  				; no collating table available
 14694                                  
 14695                                  ;*	Compare strings using collating table.
 14696                                  ;
 14697                                  ;	ES:SI = ptr to 1st string
 14698                                  ;	ES:DI = ptr to 2nd string
 14699                                  ;	CX = length
 14700                                  
 14701 00001312 55                      	push	bp		; preserve BP
 14702 00001313 53                      	push	bx		; preserve BX
 14703 00001314 1E                      	push	ds		; preserve DS
 14704 00001315 C51E[2395]              	lds	bx,[CountryPtr]	; DS:BX = ptr to collating table
 14705                                  	;assume	ds:NOTHING
 14706 00001319 8B2F                    	mov	bp,[bx]		; BP = size of collating table
 14707 0000131B 43                      	inc	bx
 14708 0000131C 43                      	inc	bx		; DS:BX = ptr to collating values
 14709                                  				; DS:[BX]-2 = size of table
 14710 0000131D 31C0                    	xor	ax,ax		; AX = 0 for starters
 14711                                  
 14712                                  ;	Bugbug:	Investigate removing collating table length checks.
 14713                                  
 14714                                  cnNextChar:
 14715 0000131F 268A05                  	mov	al,[es:di]	; AL = AX = char from 2nd string
 14716 00001322 47                      	inc	di		; ES:DI = ptr to next char 2nd string
 14717 00001323 39E8                    	cmp	ax,bp		; compare to collating table length
 14718 00001325 7301                    	jae	short cn1 	; char not in table
 14719 00001327 D7                      	xlat				
 14720                                  cn1:				; AL = AX = collating value
 14721 00001328 89C2                    	mov	dx,ax		; DX = collating value from 2nd string
 14722                                  	;lods	byte ptr es:[si]
 14723 0000132A 26AC                    	es	lodsb		; AL = AX = char from 1st string
 14724                                  				; ES:SI = ptr to next char 1st string
 14725 0000132C 39E8                    	cmp	ax,bp		; compare to collating table length
 14726 0000132E 7301                    	jae	short cn2	; char not in table
 14727 00001330 D7                      	xlat				
 14728                                  cn2:				; AL = AX = collating value
 14729 00001331 39D0                    	cmp	ax,dx		; compare collating values
 14730 00001333 E1EA                    	loope	cnNextChar	; until unequal or no more left
 14731                                  
 14732 00001335 1F                      	pop	ds		; restore DS
 14733                                  	;assume	ds:TRANGROUP
 14734 00001336 5B                      	pop	bx		; restore BX
 14735 00001337 5D                      	pop	bp		; restore BP
 14736 00001338 C3                      	retn
 14737                                  
 14738                                  ;*	If no collating table is available, simply compare raw ASCII values.
 14739                                  ;	Don't we wish we could just do this all the time? Sigh.
 14740                                  
 14741                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14742                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:138Dh)
 14743                                  cnNoCollTable:
 14744                                  	;repe	cmps byte ptr es:[si],[di]
 14745                                  				;db 0F3h,26h,0A6h,0C3h
 14746 00001339 F3                      	repe	; 0F3h
 14747 0000133A 26                      	es	; 26h
 14748 0000133B A6                      	cmpsb	; 0A6h
 14749 0000133C C3                      	retn	; 0C3h
 14750                                  
 14751                                  ; ---------------------------------------------------------------------------
 14752                                  
 14753                                  ;***	CmpTime - compare entries by date/time
 14754                                  ;
 14755                                  ;	ENTRY	ES:BX = ptr to one entry
 14756                                  ;		ES:BP = ptr to another entry
 14757                                  ;
 14758                                  ;	EXIT	BX = unchanged
 14759                                  ;		BP = unchanged
 14760                                  ;		Condition flags set for same, above, or below
 14761                                  ;		 comparing BX entry to BP entry.
 14762                                  ;
 14763                                  ;	USED:	CX,SI,DI
 14764                                  ;
 14765                                  ;	NOTE	Filetime and filedate fields in our private entry
 14766                                  ;		structure must be adjacent and in that order.
 14767                                  
 14768                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14769                                  	; 07/06/2023
 14770                                  CmpTime:
 14771 0000133D 89DE                    	mov	si,bx
 14772 0000133F 89EF                    	mov	di,bp
 14773                                  	;add	si,filedate + size filedate - 1
 14774 00001341 83C610                  	add	si,16 ; 15+2-1
 14775                                  	;add	di,filedate + size filedate - 1
 14776 00001344 83C710                  	add	di,16 ; 15+2-1
 14777                                  	; 07/06/2023
 14778 00001347 BE1000                  	mov	si,16
 14779                                  CmpST2:		; 07/06/2023
 14780 0000134A 89F7                    	mov	di,si	; mov di,16
 14781 0000134C 01DE                    	add	si,bx
 14782 0000134E 01EF                    	add	di,bp
 14783                                  
 14784                                  	;mov	cx,size filetime + size filedate
 14785 00001350 B90400                  	mov	cx,4 ; 2+2
 14786 00001353 FD                      	std
 14787                                  	;repe	cmps byte ptr es:[si],[di]
 14788                                  				;db 0F3h,26h,0A6h, 0FCh,0C3h
 14789 00001354 F3                      	repe	; 0F3h
 14790 00001355 26                      	es	; 26h
 14791 00001356 A6                      	cmpsb	; 0A6h
 14792                                  	
 14793 00001357 FC                      	cld	; 0FCh
 14794 00001358 C3                      	retn	; 0C3h
 14795                                  
 14796                                  ; ---------------------------------------------------------------------------
 14797                                  
 14798                                  ;***	CmpSize - compare entries by size
 14799                                  ;
 14800                                  ;	ENTRY	ES:BX = ptr to one entry
 14801                                  ;		ES:BP = ptr to another entry
 14802                                  ;
 14803                                  ;	EXIT	BX = unchanged
 14804                                  ;		BP = unchanged
 14805                                  ;		Condition flags set for same, above, or below
 14806                                  ;		 comparing BX entry to BP entry.
 14807                                  ;
 14808                                  ;	USED:	CX,SI,DI
 14809                                  
 14810                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14811                                  	; 07/06/2023
 14812                                  CmpSize:
 14813                                  	;mov	si,bx
 14814                                  	;mov	di,bp
 14815                                  	;;add	si,filesize + size filesize - 1
 14816                                  	;add	si,20  ; 17+4-1
 14817                                  	;;add	di,filesize + size filesize - 1
 14818                                  	;add	di,20  ; 17+4-1
 14819                                  	; 07/06/2023
 14820 00001359 BE1400                  	mov	si,20
 14821                                  	;;;
 14822 0000135C EBEC                    	jmp	short CmpST2 ; 07/06/2023
 14823                                  	;;;
 14824                                  ;CmpST2:
 14825                                  ;	mov	di,si	; mov di,20
 14826                                  ;	add	si,bx
 14827                                  ;	add	di,bp
 14828                                  ;
 14829                                  ;	;mov	cx,size filesize
 14830                                  ;	mov	cx,4
 14831                                  ;	std
 14832                                  ;	;repe	cmps byte ptr es:[si],[di]
 14833                                  ;				;db 0F3h,26h,0A6h
 14834                                  ;	repe	; 0F3h
 14835                                  ;	es	; 26h
 14836                                  ;	cmpsb	; 0A6h
 14837                                  ;
 14838                                  ;	cld
 14839                                  ;	retn
 14840                                  
 14841                                  ; ---------------------------------------------------------------------------
 14842                                  
 14843                                  ;***	CmpType - compare entries by file type (subdirectory or not)
 14844                                  ;
 14845                                  ;	ENTRY	ES:BX = ptr to one entry
 14846                                  ;		ES:BP = ptr to another entry
 14847                                  ;
 14848                                  ;	EXIT	BX = unchanged
 14849                                  ;		BP = unchanged
 14850                                  ;		Condition flags set for same, above, or below
 14851                                  ;		 comparing BX entry to BP entry.
 14852                                  ;
 14853                                  ;	USED:	AX
 14854                                  
 14855                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14856                                  CmpType:
 14857                                  	;mov	al,es:[bx].fileattr
 14858 0000135E 268A470C                	mov	al,[es:bx+12]
 14859                                  	;mov	ah,es:[bp].fileattr
 14860 00001362 268A660C                	mov	ah,[es:bp+12]
 14861                                  	;and	ax,(ATTR_DIRECTORY shl 8) + ATTR_DIRECTORY
 14862                                  	;and	ax,1010h
 14863 00001366 251010                  	and	ax,(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY
 14864 00001369 38C4                    	cmp	ah,al
 14865 0000136B C3                      	retn
 14866                                  
 14867                                  ; ---------------------------------------------------------------------------
 14868                                  
 14869                                  ;***	DefaultAttr - set default attribute conditions
 14870                                  ;
 14871                                  ;	ENTRY	nothing
 14872                                  ;
 14873                                  ;	EXIT	CY clear
 14874                                  ;
 14875                                  ;	USED
 14876                                  ;
 14877                                  ;	EFFECTS
 14878                                  ;
 14879                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 14880                                  
 14881                                  	; 16/02/2023
 14882                                  DefaultAttr:
 14883                                  	;mov	byte [AttrSpecified],6
 14884 0000136C C606[088C]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM
 14885                                  					; specify H and S
 14886 00001371 C606[098C]00            	mov	byte [AttrSelect],0	; H and S must be off
 14887 00001376 F8                      	clc				; return success
 14888                                  dtRet:	; 18/02/2023
 14889 00001377 C3                      	retn
 14890                                  
 14891                                  ; ---------------------------------------------------------------------------
 14892                                  
 14893                                  ;***	DisplayTotals - display grand total stats
 14894                                  ;
 14895                                  ;	If we searched subdirectories, display the total # files found
 14896                                  ;	 and total size of files found.
 14897                                  ;	Display disk space remaining.
 14898                                  ;
 14899                                  ;	ENTRY	FileCntTotal, FileSizTotal contain correct values
 14900                                  ;		Bits contains setting of /s
 14901                                  ;		FCB contains drive #
 14902                                  ;
 14903                                  ;	EXIT	nothing
 14904                                  ;
 14905                                  ;	USES	AX,DX
 14906                                  ;		FileSiz
 14907                                  
 14908                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14909                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:13D1h
 14910                                  
 14911                                  DisplayTotals:
 14912                                  	;;;test	Bits,mask subd
 14913                                  	;;test	word [_Bits],4
 14914                                  	;test	byte [_Bits],4
 14915 00001378 F606[008C]04            	test	byte [_Bits],mask.subd
 14916 0000137D 741D                    	jz	short dtFree		; no subdirectories- do bytes free
 14917                                  
 14918 0000137F E84F12                  	call	CRLF2			; start on new line
 14919 00001382 E8C403                  	call	UseLine
 14920                                  
 14921 00001385 BA[3881]                	mov	dx,total_ptr
 14922 00001388 E8463A                  	call	std_printf		; "Total:",cr,lf
 14923 0000138B E8BB03                  	call	UseLine
 14924                                  
 14925 0000138E A1[D78A]                	mov	ax,[FileCntTotal]	; AX = # files found mod 64K
 14926 00001391 BE[DB8A]                	mov	si,FileSizTotal
 14927 00001394 BF[D38A]                	mov	di,FileSiz
 14928 00001397 A5                      	movsw
 14929 00001398 A5                      	movsw				; move total size to size variable
 14930 00001399 E87605                  	call	DisplayCntSiz		; display file count & size &
 14931                                  dtFree: 				;   (maybe) compression ratio
 14932 0000139C B436                    	mov	ah,36h
 14933                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 14934 0000139E 8A165C00                	mov	dl,[FCB] ; [5Ch]	; DL = drive#
 14935 000013A2 CD21                    	int	21h			; call DOS
 14936 000013A4 83F8FF                  	cmp	ax,-1			; check 'invalid drive' return code
 14937 000013A7 74CE                    	jz	short dtRet		; can't get drive space - return
 14938 000013A9 F7E1                    	mul	cx
 14939 000013AB F7E3                    	mul	bx
 14940 000013AD A3[1C8C]                	mov	[Bytes_Free],ax
 14941 000013B0 8916[1E8C]              	mov	[Bytes_Free+2],dx
 14942 000013B4 BA[4A7F]                	mov	dx,bytmes_ptr
 14943 000013B7 E8173A                  	call	std_printf		; "nnn bytes free",cr,lf
 14944                                  	;call	UseLine
 14945                                  ;dtRet:
 14946                                  	;retn
 14947                                  	; 18/02/2023
 14948 000013BA E98C03                  	jmp	UseLine
 14949                                  
 14950                                  ; ---------------------------------------------------------------------------
 14951                                  
 14952                                  ;***	FileIsDevice - see if file looks like a device
 14953                                  ;
 14954                                  ;	ENTRY	PathPos = ptr to pathname
 14955                                  ;		PathCnt = length of pathname w/o terminating char
 14956                                  ;		DirBuf is DOS DTA
 14957                                  ;
 14958                                  ;	EXIT	ZR = set if file looks like a device
 14959                                  ;
 14960                                  ;	USED	AX,BX,CX,DX,DI
 14961                                  ;
 14962                                  ;	EFFECTS
 14963                                  ;
 14964                                  ;	  DTA buffer holds results of Find First function
 14965                                  ;
 14966                                  ;	NOTES
 14967                                  ;
 14968                                  ;	  We try to flag devices in two ways. First, we try
 14969                                  ;	  the DOS Find First function. It returns attribute bit 6
 14970                                  ;	  set on a successful find if it identifies a device name.
 14971                                  ;	  Unfortunately, it returns 'path not found' for a device
 14972                                  ;	  name terminated with colon, such as "CON:". So, we look
 14973                                  ;	  for any colon in the pathname after the 2nd character,
 14974                                  ;	  and flag the pathname as a device if we find one.
 14975                                  
 14976                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14977                                  FileIsDevice:
 14978 000013BD 8B16[048C]              	mov	dx,[PathPos]	 ; DX = ptr to pathname
 14979                                  
 14980 000013C1 89D7                    	mov	di,dx
 14981 000013C3 033E[028C]              	add	di,[PathCnt]	 ; DI = ptr to byte after pathname
 14982 000013C7 30DB                    	xor	bl,bl		 ; BL = NUL to terminate pathname with
 14983 000013C9 861D                    	xchg	bl,[di] 	 ; BL = saved pathname terminating char
 14984                                  
 14985 000013CB 31C9                    	xor	cx,cx		 ; CX = attribute mask (normal search)
 14986 000013CD B44E                    	mov	ah,4Eh
 14987                                  	;mov	ah,Find_First	 ; AH = DOS Find First function code
 14988 000013CF CD21                    	int	21h	 	 ; call DOS
 14989 000013D1 861D                    	xchg	bl,[di]		 ; restore pathname terminating char
 14990 000013D3 720A                    	jc	short piCol	 ; didn't find a dir entry, check for colon
 14991                                  
 14992                                  ;	Found a dir entry, see if Find First thinks it's a device.
 14993                                  
 14994                                  	;test	byte [DIRBUF+21],40h
 14995 000013D5 F606[C38B]40            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 14996 000013DA 7403                    	jz	short piCol	 ; device attribute not set, look for colon
 14997 000013DC 31C9                    	xor	cx,cx		 ; it's a device, return ZR flag
 14998                                  	;jmp	short piRet
 14999                                  	; 25/04/2023
 15000                                  piRet:
 15001 000013DE C3                      	retn
 15002                                  
 15003                                  ;	Device attribute not returned by Find First function. But
 15004                                  ;	let's check for a colon anywhere in the pathname after the
 15005                                  ;	second byte.
 15006                                  ;
 15007                                  ;	DI = ptr to byte after pathname
 15008                                  
 15009                                  piCol:
 15010 000013DF 4F                      	dec	di		 ; DI = ptr to last char in pathname
 15011 000013E0 B03A                    	mov	al,':'
 15012                                  	;mov	al,COLON_CHAR	 ; AL = colon char to search for
 15013 000013E2 8B0E[028C]              	mov	cx,[PathCnt]	 ; CX = # chars to scan
 15014 000013E6 49                      	dec	cx
 15015 000013E7 49                      	dec	cx		 ; ignore 1st two chars of pathname
 15016 000013E8 09C9                    	or	cx,cx
 15017 000013EA 78F2                    	js	short piRet	 ; if < 2 chars in pathname, just return
 15018 000013EC 09FF                    	or	di,di		 ; clear ZR in case CX = 0
 15019 000013EE FD                      	std			 ; scan downward
 15020 000013EF F2AE                    	repne	scasb
 15021 000013F1 FC                      	cld			 ; restore default upward direction
 15022                                  
 15023                                  ;	After scanning, the ZR flag is set to indicate presence of a colon.
 15024                                  ;piRet:
 15025 000013F2 C3                      	retn
 15026                                  
 15027                                  ;FileIsDevice endp
 15028                                  
 15029                                  ; ---------------------------------------------------------------------------
 15030                                  
 15031                                  ;***	FindFirst - find first directory entry to display
 15032                                  ;***	FindNext - find next directory entry to display
 15033                                  ;
 15034                                  ;	ENTRY	Bits<inmem> = set if entries are loaded in TPA
 15035                                  ;		AttrSpecified, AttrSelect are set
 15036                                  ;
 15037                                  ;	EXIT	CY = clear if successful
 15038                                  ;		BX = offset in TPA buffer of directory entry found
 15039                                  ;
 15040                                  ;		If unsuccessful,
 15041                                  ;		CY = set
 15042                                  ;		AX = DOS error code
 15043                                  ;		DOS Get Extended Error call will get error code
 15044                                  ;
 15045                                  ;		NOTE: if entries were loaded into TPA, AX contains
 15046                                  ;		ERROR_NO_MORE_FILES when no more entries are available,
 15047                                  ;		but DOS Get Extended Error call WON'T return the correct
 15048                                  ;		error. That's ok, because we'll see the value in AX
 15049                                  ;		and recognize it as a non-error condition.
 15050                                  ;
 15051                                  ;	USED	AX,CX,DX,SI,DI
 15052                                  ;
 15053                                  ;	EFFECTS
 15054                                  ;
 15055                                  ;	  Entries in memory may be marked as output.
 15056                                  ;	  If not sorted, entry is loaded at TPA.
 15057                                  ;
 15058                                  ;	NOTES
 15059                                  ;
 15060                                  ;	  If we don't find a qualifying file, we return after the final
 15061                                  ;	   DOS Find File call. A DOS Get Extended Error call will then
 15062                                  ;	   indicate an appropriate condition.
 15063                                  
 15064                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15065                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15066                                  	
 15067                                  FindFirst:
 15068                                  	;mov	ax,offset TRANGROUP:GetFirst
 15069 000013F3 B8[CA14]                	mov	ax,GetFirst
 15070 000013F6 EB03                    	jmp	short ffFindEntry
 15071                                  
 15072                                  	; 18/02/2023
 15073                                  FindNext:
 15074                                  	;mov	ax,offset TRANGROUP:GetNext
 15075 000013F8 B8[D814]                	mov	ax,GetNext
 15076                                  
 15077                                  ;	AX = address of correct disk get routine to use.
 15078                                  
 15079                                  ffFindEntry:
 15080 000013FB 06                      	push	es			; save TRANGROUP seg addr
 15081                                  	;;;test	Bits,mask inmem
 15082                                  	;;test	word [_Bits],20h
 15083                                  	;test	byte [_Bits],20h
 15084 000013FC F606[008C]20            	test	byte [_Bits],mask.inmem
 15085 00001401 7405                    	jz	short ffDisk		; entries not in memory, search disk
 15086                                  
 15087                                  ;	Entries are loaded in memory to sort out. Find the first one.
 15088                                  ;	There will always be one, or LoadEntries would've failed.
 15089                                  
 15090 00001403 E81A00                  	call	FindInMem		; find first entry in TPA
 15091 00001406 EB16                    	jmp	short ffRet		; return what TPA search returns
 15092                                  
 15093                                  ;	Get entry from disk.
 15094                                  
 15095                                  ffDisk:
 15096 00001408 FFD0                    	call	ax			; get entry from disk
 15097 0000140A 720E                    	jc	short ffGetErr		; get & return error
 15098 0000140C 8E06[A78A]              	mov	es,[TPA]		; ES = seg addr of TPA
 15099 00001410 31FF                    	xor	di,di			; ES:DI = ptr to TPA
 15100 00001412 89FB                    	mov	bx,di			; BX = offset of entry in TPA
 15101 00001414 E85601                  	call	LoadEntry		; load entry to TPA
 15102 00001417 F8                      	clc				; return success
 15103 00001418 EB04                    	jmp	short ffRet
 15104                                  
 15105                                  ffGetErr:
 15106 0000141A E8D308                  	call	 get_ext_error_number	; AX = DOS error code
 15107 0000141D F9                      	stc
 15108                                  ffRet:
 15109 0000141E 07                      	pop	es			; ES = TRANGROUP seg addr again
 15110 0000141F C3                      	retn
 15111                                  
 15112                                  ; ---------------------------------------------------------------------------
 15113                                  
 15114                                  ;***	FindInMem - find next directory entry in TPA buffer
 15115                                  ;
 15116                                  ;	ENTRY	TPA is loaded (see LoadEntries)
 15117                                  ;
 15118                                  ;	EXIT	BX = offset in TPA of entry found
 15119                                  ;
 15120                                  ;		If no more files,
 15121                                  ;		CY = set
 15122                                  ;		AX = DOS 'no more files' error code
 15123                                  ;
 15124                                  ;	USED	AX,BX,CX,DX,SI,DI,BP,ES
 15125                                  ;
 15126                                  ;	EFFECTS
 15127                                  ;
 15128                                  ;	  Entry found is flagged as 'used' (see EntryStruc).
 15129                                  
 15130                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15131                                  FindInMem:
 15132 00001420 8E06[A78A]              	mov	es,[TPA]		; ES = TPA seg addr
 15133 00001424 31DB                    	xor	bx,bx			; ES:BX = ptr to 1st entry in TPA
 15134 00001426 FC                      	cld				; make sure default string direction is up
 15135                                  	
 15136 00001427 E86D00                  	call	FindOneInMem		; locate an entry
 15137 0000142A 720E                    	jc	short fiNoMore		; none left, set up 'no more files' error
 15138                                  
 15139                                  ;	BX = ptr to entry in TPA
 15140                                  
 15141                                  fiBest:
 15142 0000142C 89DD                    	mov	bp,bx			; BP = ptr to best entry so far
 15143                                  fiNext:
 15144 0000142E E87300                  	call	FindNextInMem		; locate next entry
 15145 00001431 720C                    	jc	short fiFound		; no more, best entry so far wins
 15146                                  
 15147                                  ;	BX = ptr to next entry
 15148                                  
 15149 00001433 E88CFE                  	call	CmpEntry		; compare it to best found so far (BP)
 15150 00001436 73F6                    	jnb	short fiNext		; it's not better, go look at next one
 15151 00001438 EBF2                    	jmp	short fiBest		; it's better, go mark it as best so far
 15152                                  
 15153                                  fiNoMore:
 15154                                  
 15155                                  ;	No more entries available in TPA. Set up 'no more files' error.
 15156                                  
 15157                                  	;mov	ax,18
 15158 0000143A B81200                  	mov	ax,ERROR_NO_MORE_FILES	; AX = 'no more files' error code
 15159 0000143D F9                      	stc				; return error
 15160                                  	;jmp	short fiRet
 15161                                  	; 18/02/2023
 15162 0000143E C3                      	retn
 15163                                  
 15164                                  fiFound:
 15165 0000143F 89EB                    	mov	bx,bp			; BX = ptr to best entry found
 15166 00001441 26C60701                	mov	byte [es:bx],1		; mark entry 'used'
 15167 00001445 F8                      	clc				; return success
 15168                                  fiRet:
 15169 00001446 C3                      	retn
 15170                                  
 15171                                  ; ---------------------------------------------------------------------------
 15172                                  
 15173                                  ;***	FindNextChild - find next subdirectory in current directory
 15174                                  ;
 15175                                  ;	ENTRY	BX = ptr to last child found, ASCIIZ filename
 15176                                  ;		DirBuf is established DTA
 15177                                  ;
 15178                                  ;	EXIT	BX = ptr (same addr) to next child found, ASCIIZ filename
 15179                                  ;
 15180                                  ;		If failure,
 15181                                  ;		CY = set
 15182                                  ;		DOS Get Extended Error call will get error
 15183                                  ;
 15184                                  ;	USED	AX,CX,DX,SI,DI,BP
 15185                                  ;
 15186                                  ;	EFFECTS
 15187                                  ;
 15188                                  ;	  DirBuf is used for find first/next calls.
 15189                                  ;
 15190                                  ;	NOTES
 15191                                  ;
 15192                                  ;	  We keep on checking files until DOS returns an error. If
 15193                                  ;	  the error is 'no more files' and the temp filename is not
 15194                                  ;	  the initial high tag, copy the temp to the child's name spot
 15195                                  ;	  and return success. Otherwise, send the error back to caller.
 15196                                  ;
 15197                                  ;	  This routine depends on DS,ES,CS, & SS all being equal.
 15198                                  
 15199                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15200                                  FindNextChild:
 15201 00001447 83EC0C                  	sub	sp,12			; make temp filename buf on stack
 15202                                  	;shove	00FFh			; temp filename = high tag
 15203 0000144A B8FF00                  	mov	ax,0FFh
 15204 0000144D 50                      	push	ax
 15205 0000144E 89E5                    	mov	bp,sp			; BP = ptr to temp filename buf
 15206                                  	;shove	"*"	
 15207 00001450 B02A                    	mov	al,'*'  ; ax = 002Ah
 15208 00001452 50                      	push	ax
 15209                                  	;;shove	".*" 
 15210                                  	;mov	ax,"*."
 15211                                  	;mov	ax,2E2Ah
 15212 00001453 B42E                    	mov	ah,'.'
 15213 00001455 50                      	push	ax
 15214 00001456 E8F704                  	call	GetDriveLtr		; AX = "d:"
 15215 00001459 50                      	push	ax
 15216 0000145A 89E2                    	mov	dx,sp			; DX = ptr to "d:*.*",0 on stack
 15217                                  
 15218                                  ;	See that the stack is restored properly at the end of this proc.
 15219                                  
 15220                                  	;mov	cx,10h
 15221 0000145C B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15222 0000145F B44E                    	mov	ah,4Eh
 15223                                  	;mov	ah,Find_First
 15224 00001461 CD21                    	int	21h			; DOS- Find First matching file
 15225 00001463 722C                    	jc	short fcRet		; return error
 15226                                  
 15227 00001465 E835FE                  	call	CheckChild		; check child against last, temp
 15228                                  fcNext:	
 15229                                  	;mov	cx,10h
 15230 00001468 B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15231 0000146B B44F                    	mov	ah,4Fh
 15232                                  	;mov	ah,Find_Next
 15233 0000146D CD21                    	int	21h			; DOS- Find Next matching file
 15234 0000146F 7205                    	jc	short fcErr		; examine error
 15235                                  
 15236 00001471 E829FE                  	call	CheckChild		; check child against last, temp
 15237 00001474 EBF2                    	jmp	short fcNext		; go find another child
 15238                                  
 15239                                  fcErr:
 15240 00001476 E87708                  	call	get_ext_error_number	; AX = extended error code
 15241                                  	;cmp	ax,18
 15242 00001479 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	; no more files?
 15243 0000147C 7512                    	jne	short fcNope		; some other error- return it
 15244                                  
 15245                                  ;	We ran out of files. See if we qualified at least one.
 15246                                  
 15247 0000147E 807E00FF                	cmp	byte [bp],0FFh
 15248 00001482 740C                    	je	short fcNope		; temp filename is unused- no child
 15249                                  
 15250                                  ;	Move temp filename to child name position.
 15251                                  
 15252 00001484 89EE                    	mov	si,bp			; SI = ptr to temp filename
 15253 00001486 89DF                    	mov	di,bx			; DI = ptr to child name pos'n
 15254                                  fcMove:
 15255 00001488 AC                      	lodsb				; AL = next byte of filename
 15256 00001489 AA                      	stosb				; store byte
 15257 0000148A 08C0                    	or	al,al
 15258 0000148C 7403                    	jz	short fcRet		; byte was zero, return success (CY clear)
 15259 0000148E EBF8                    	jmp	short fcMove		; go move another byte
 15260                                  fcNope:
 15261 00001490 F9                      	stc				; return error
 15262                                  fcRet:
 15263 00001491 9F                      	lahf
 15264 00001492 83C414                  	add	sp,20			; restore stack
 15265 00001495 9E                      	sahf
 15266 00001496 C3                      	retn
 15267                                  
 15268                                  ; ---------------------------------------------------------------------------
 15269                                  
 15270                                  ;***	FindOneInMem - find the first available entry in TPA
 15271                                  ;***	FindNextInMem - find the next available entry in TPA
 15272                                  ;
 15273                                  ;	ENTRY	ES = TPA seg addr
 15274                                  ;		BX = ptr to entry in TPA
 15275                                  ;
 15276                                  ;	EXIT	BX = ptr to entry found
 15277                                  ;		CY = set if no more entries available in TPA
 15278                                  ;
 15279                                  ;	USED	AL
 15280                                  
 15281                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15282                                  FindOneInMem:
 15283 00001497 268A07                  	mov	al,[es:bx]		; examine 'used' byte of starting entry
 15284 0000149A 3C01                    	cmp	al,1
 15285 0000149C 7406                    	je	short FindNextInMem	; entry has already been used
 15286 0000149E 3CFF                    	cmp	al,0FFh
 15287 000014A0 7407                    	je	short foNoMore		; 0FFh, we're at the end of the list
 15288                                  
 15289                                  ;	BX = ptr to entry that hasn't been output yet.
 15290                                  
 15291 000014A2 F8                      	clc				; return success
 15292 000014A3 C3                      	retn
 15293                                  
 15294                                  FindNextInMem:
 15295 000014A4 83C315                  	add	bx,21
 15296                                  	;add	bx,size EntryStruc	; BX = ptr to next entry
 15297 000014A7 EBEE                    	jmp	short FindOneInMem	; go look at it
 15298                                  foNoMore:
 15299 000014A9 F9                      	stc				; ran out of entries, return failure
 15300 000014AA C3                      	retn
 15301                                  
 15302                                  ; ---------------------------------------------------------------------------
 15303                                  
 15304                                  ;***	GetEnvValue - get value of our environment variable
 15305                                  ;
 15306                                  ;	ENTRY	DS, ES = TRANGROUP seg addr
 15307                                  ;
 15308                                  ;	EXIT	CY = set if environment variable not in environment
 15309                                  ;
 15310                                  ;		Otherwise:
 15311                                  ;		SI = ptr to environment variable asciiz value in TRANGROUP
 15312                                  ;
 15313                                  ;	USED	AX,BX,CX,DX,DI
 15314                                  ;		(We assume the (almost) worst, since we don't know about
 15315                                  ;		Find_Name_In_Environment.)
 15316                                  ;
 15317                                  ;	EFFECTS
 15318                                  ;
 15319                                  ;	  ScanBuf is loaded with value text
 15320                                  
 15321                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15322                                  GetEnvValue:
 15323 000014AB 06                      	push	es				; save ES
 15324                                  	;mov	si,offset TRANGROUP:DirEnvVar	; DS:SI = ptr to variable name
 15325 000014AC BE[8081]                	mov	si,DirEnvVar
 15326                                  	;invoke	Find_Name_In_Environment
 15327 000014AF E8630E                  	call	find_name_in_environment
 15328 000014B2 7214                    	jc	short geRet			; name not found in environment
 15329                                  
 15330                                  ;	ES:DI = ptr to value of environment variable
 15331                                  ;	We're assuming DS, CS, and SS are unchanged.
 15332                                  
 15333 000014B4 1E                      	push	ds
 15334 000014B5 06                      	push	es
 15335 000014B6 1F                      	pop	ds
 15336 000014B7 07                      	pop	es
 15337                                  
 15338                                  	;assume	ds:nothing
 15339                                  
 15340                                  ;	DS = seg addr of environment variable value (in environment segment)
 15341                                  ;	ES = TRANGROUP seg addr
 15342                                  
 15343 000014B8 89FE                    	mov	si,di				; DS:SI = ptr to value string
 15344                                  	;mov	di,offset TRANGROUP:ScanBuf	; ES:DI = ptr to dest buffer
 15345 000014BA BF[EE8C]                	mov	di,ScanBuf
 15346                                  geLoop:
 15347                                  ;@@:	
 15348 000014BD AC                      	lodsb
 15349 000014BE 08C0                    	or	al,al
 15350 000014C0 AA                      	stosb
 15351                                  	;loopnz	@B		; move the string, including trailing null
 15352 000014C1 E0FA                    	loopnz	geLoop
 15353                                  
 15354 000014C3 06                      	push	es
 15355 000014C4 1F                      	pop	ds		; DS = TRANGROUP seg addr again
 15356                                  	;assume	ds:TRANGROUP
 15357                                  
 15358                                  	;mov	si,offset TRANGROUP:ScanBuf	; SI = ptr to var value
 15359 000014C5 BE[EE8C]                	mov	si,ScanBuf
 15360                                  geRet:
 15361 000014C8 07                      	pop	es				; restore ES
 15362 000014C9 C3                      	retn
 15363                                  
 15364                                  ; ---------------------------------------------------------------------------
 15365                                  
 15366                                  ;***	GetFirst - get first directory entry from disk
 15367                                  ;
 15368                                  ;	ENTRY	DOS DTA established at DirBuf
 15369                                  ;		FCB contains drive # and filename
 15370                                  ;		Current directory (on selected drive) is the one to search
 15371                                  ;		AttrSpecified & AttrSelect masks set
 15372                                  ;
 15373                                  ;	EXIT	CY = clear if success
 15374                                  ;		DirBuf contains extended FCB for file found
 15375                                  ;
 15376                                  ;		If unsuccessful,
 15377                                  ;		CY = set
 15378                                  ;		Ready for DOS Get Extended Error call
 15379                                  ;
 15380                                  ;	USED	AX,DX
 15381                                  ;
 15382                                  ;	EFFECTS
 15383                                  ;
 15384                                  ;	  FCB-7 = 0FFh to mark extended FCB
 15385                                  ;	  FCB-1 = attribute mask to find all files
 15386                                  ;	  These fields should remain unmodified for GetNext calls.
 15387                                  ;
 15388                                  ;***	GetNext - get next directory entry from disk
 15389                                  ;
 15390                                  ;	ENTRY	As for GetFirst, plus
 15391                                  ;		FCB-7 set up as extended FCB w/ find-all attribute byte
 15392                                  ;
 15393                                  ;	EXIT	As for GetFirst
 15394                                  ;
 15395                                  ;	USED	AX,DX
 15396                                  
 15397                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15398                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15399                                  GetFirst:
 15400                                  	;mov	byte [55h],0FFh	; -1
 15401 000014CA C6065500FF              	mov	byte [FCB-7],0FFh	; signal extended FCB
 15402                                  	;mov	byte [5Bh],16h
 15403 000014CF C6065B0016              	mov	byte [FCB-1],ATTR_ALL ; 16h
 15404                                  					; find any file
 15405                                  	; 07/06/2023
 15406                                  	;mov	dx,FCB-7 ; 55h		; DX = ptr to extended FCB
 15407 000014D4 B411                    	mov	ah,11h
 15408                                  	;mov	ah,Dir_Search_First	; AH = DOS Find First function code
 15409                                  	; 07/06/2023
 15410                                  	;int	21h			; call DOS
 15411                                  	;shl	al,1			; CY = set if error
 15412                                  	;jc	short gfRet		; return error
 15413                                  	;jmp	short gfFound		; go look at attr's
 15414                                  	; 07/06/2023
 15415 000014D6 EB02                    	jmp	short GetFrstNxt
 15416                                  GetNext:
 15417                                  	; 07/06/2023
 15418                                  	;;mov	dx,55h
 15419                                  	;mov	dx,FCB-7		; DX = ptr to extended FCB
 15420 000014D8 B412                    	mov	ah,12h
 15421                                  	;mov	ah,Dir_Search_Next	; AH = DOS Find Next function code
 15422                                  GetFrstNxt:
 15423                                  	; 07/06/2023
 15424 000014DA BA5500                  	mov	dx,FCB-7 ; mov dx,55h
 15425                                  	;
 15426 000014DD CD21                    	int	21h			; call DOS
 15427 000014DF D0E0                    	shl	al,1			; CY = set if error
 15428 000014E1 7211                    	jc	short gfRet		; return error
 15429                                  
 15430                                  ;*	Found an entry. Check attributes.
 15431                                  gfFound:
 15432                                  	;;mov	al,[DirBuf+8].dir_attr	; AL = file attributes
 15433                                  	;mov	al,[DIRBUF+19]
 15434 000014E3 A0[C18B]                	mov	al,[DIRBUF+8+DIR_ENTRY.DIR_ATTR]
 15435 000014E6 8A26[088C]              	mov	ah,[AttrSpecified]	; AH = mask of pertinent attr's
 15436 000014EA 20E0                    	and	al,ah			; AL = pertinent attr's of file
 15437 000014EC 2226[098C]              	and	ah,[AttrSelect]		; AH = attr settings to match
 15438 000014F0 38E0                    	cmp	al,ah
 15439 000014F2 75E4                    	jne	short GetNext		; attr's don't match, look for another
 15440                                  gfRet:
 15441 000014F4 C3                      	retn
 15442                                  
 15443                                  ; ---------------------------------------------------------------------------
 15444                                  
 15445                                  ;***	ListDir - search for and list files in the current directory
 15446                                  ;
 15447                                  ;	List header, files, and trailer for current directory on selected
 15448                                  ;	drive. Header & trailer are listed if at least one file is found.
 15449                                  ;	If no qualifying files are found, no display output occurs.
 15450                                  ;
 15451                                  ;	ENTRY	Current directory (on selected drive) is the one to be listed
 15452                                  ;		FCB contains selected drive # and filename spec
 15453                                  ;		Option bits, attribute masks, and sort codes set up
 15454                                  ;
 15455                                  ;	EXIT	CY = clear if no error
 15456                                  ;		FileCnt = # files found & displayed
 15457                                  ;
 15458                                  ;		If error,
 15459                                  ;		CY = set
 15460                                  ;		Ready for DOS Get Extended Error call
 15461                                  ;
 15462                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15463                                  ;		FileSiz
 15464                                  ;
 15465                                  ;	EFFECTS
 15466                                  ;
 15467                                  ;	  FileCntTotal, FileSizTotal are updated.
 15468                                  ;	  Files found are listed. A directory header and trailer are
 15469                                  ;	   displayed only if files are found.
 15470                                  
 15471                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15472                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:155Eh
 15473                                  
 15474                                  ListDir:
 15475 000014F5 31C0                    	xor	ax,ax ; 0
 15476 000014F7 A3[D18A]                	mov	[FileCnt],ax		; zero file count
 15477 000014FA A3[D38A]                	mov	[FileSiz],ax		; zero file size accumulator
 15478 000014FD A3[D58A]                	mov	[FileSiz+2],ax
 15479                                  	;cmp	byte [DestBuf],0	; check for sort code
 15480                                  	; 31/07/2024
 15481 00001500 3806[318C]              	cmp	[DestBuf],al ; 0
 15482 00001504 740A                    	je	short ld1		; no sort
 15483 00001506 E83000                  	call	LoadEntries		; load entries for sorted listing
 15484 00001509 7305                    	jnc	short ld1		; no error - continue
 15485 0000150B E8E207                  	call	get_ext_error_number	; AX = DOS error code
 15486                                  	; 19/02/2023
 15487                                  	;stc
 15488 0000150E EB12                    	jmp	short ldErr		; return error
 15489                                  ld1:
 15490 00001510 E8E0FE                  	call	FindFirst		; find first file
 15491 00001513 720D                    	jc	short ldErr		; not found, return error
 15492                                  
 15493                                  ;	BX = offset in TPA buffer of entry found
 15494                                  
 15495 00001515 E8E102                  	call	DisplayHeader		; if at least one file, display header
 15496                                  ldNext:
 15497 00001518 E8B902                  	call	DisplayFile		; display the file entry
 15498                                  ;ldNext:
 15499 0000151B E8DAFE                  	call	FindNext		; find another file
 15500 0000151E 7202                    	jc	short ldErr		; not found
 15501                                  	;call	DisplayFile		; display entry
 15502                                  	;jmp	short ldNext		; go find another one
 15503                                  	; 19/02/2023
 15504 00001520 EBF6                    	jmp	short ldNext
 15505                                  ldErr:
 15506                                  	;cmp	ax,2
 15507 00001522 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 15508 00001525 7407                    	je	short ldDone		; file not found, we're done
 15509                                  	;cmp	ax,18
 15510 00001527 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 15511 0000152A 7402                    	je	short ldDone		; no more files, we're done
 15512 0000152C F9                      	stc
 15513                                  	;jmp	short ldRet
 15514                                  	; 19/02/2023
 15515 0000152D C3                      	retn
 15516                                  ldDone:
 15517 0000152E 833E[D18A]00            	cmp	word [FileCnt],0
 15518                                  	;je	short ld2		; no files found, just return
 15519                                  	; 25/04/2023
 15520 00001533 7403                    	jz	short ldRet
 15521 00001535 E8CA03                  	call	DisplayTrailer		; display trailing info
 15522                                  	; 08/06/2023
 15523                                  	; cf=0
 15524                                  ;ld2:	
 15525                                  	;clc				; return success
 15526                                  ldRet:
 15527 00001538 C3                      	retn
 15528                                  
 15529                                  ; ---------------------------------------------------------------------------
 15530                                  
 15531                                  ;***	LoadEntries - attempt to load entries from current directory
 15532                                  ;
 15533                                  ;	Load all qualifying directory entries from the current directory
 15534                                  ;	into the TPA. If an error is returned by FindFirst/FindNext calls
 15535                                  ;	other than 'no more files', return to caller with carry flag set.
 15536                                  ;	If we run out of buffer space, display a message that we haven't
 15537                                  ;	enough memory to sort this directory, but return without error.
 15538                                  ;	Other routines know whether or not entries have been loaded by
 15539                                  ;	the 'inmem' flag bit, which we set here.
 15540                                  ;
 15541                                  ;	The TPA is usually 64K - 512 bytes long. At 20 bytes per entry,
 15542                                  ;	this allows sorting over 3000 entries in a directory.
 15543                                  ;
 15544                                  ;	ENTRY	Tpa = buffer seg addr
 15545                                  ;		BytCnt = buffer length, in bytes
 15546                                  ;		Current directory (on selected drive) is the one to load
 15547                                  ;		FCB contains drive # and filespec
 15548                                  ;		Bits, AttrSpecified, AttrSelect, & DestBuf (sort codes) are set
 15549                                  ;
 15550                                  ;	EXIT	CY = set if error
 15551                                  ;		If error, DOS Get Extended Error will get error info
 15552                                  ;
 15553                                  ;	USED	AX,CX,DX,SI,DI
 15554                                  ;
 15555                                  ;	EFFECTS
 15556                                  ;
 15557                                  ;	  Inmem bit of Bits = set if load succeeded.
 15558                                  ;	  Tpa buffer contains directory entries.
 15559                                  ;	  Byte after last entry = 0FFh.
 15560                                  
 15561                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15562                                  LoadEntries:
 15563 00001539 06                      	push	es			; save TRANGROUP seg addr
 15564 0000153A 8E06[A78A]              	mov	es,[TPA]		; ES = TPA seg addr
 15565 0000153E 31FF                    	xor	di,di			; ES:DI = destination ptr
 15566                                  	;;;and	Bits,not mask inmem	; signal entries not loaded
 15567                                  	;;and	word [_Bits],0FFDFh
 15568                                  	;and	byte [_Bits],0DFh	; not 20h
 15569 00001540 8026[008C]DF            	and	byte [_Bits],~mask.inmem ; ~20h
 15570                                  
 15571 00001545 E882FF                  	call	GetFirst		; look for first file
 15572 00001548 7221                    	jc	short leRet		; return any error
 15573 0000154A E82000                  	call	LoadEntry		; load entry into TPA
 15574                                  leNext:
 15575 0000154D E888FF                  	call	GetNext			; get another file
 15576 00001550 720F                    	jc	short leLoaded		; assume any error is no more files
 15577 00001552 A1[C68A]                	mov	ax,[BYTCNT]		; AX = size of TPA
 15578 00001555 29F8                    	sub	ax,di			; AX = bytes left in TPA
 15579                                  	;cmp	ax,size EntryStruc+2	; insist on entry size + 2 bytes
 15580 00001557 83F817                  	cmp	ax,23 ; 21+2 
 15581 0000155A 720E                    	jb	short leOk		; not enough memory left, give up
 15582 0000155C E80E00                  	call	LoadEntry		; load entry into TPA
 15583 0000155F EBEC                    	jmp	short leNext		; go get another file
 15584                                  
 15585                                  leLoaded:
 15586 00001561 26C605FF                	mov	byte [es:di],0FFh	; mark end of entry list
 15587                                  	;;;or	Bits,mask inmem		; signal entries loaded in memory
 15588                                  	;;or	word [_Bits],20h
 15589                                  	;or	byte [_Bits],20h
 15590 00001565 800E[008C]20            	or	byte [_Bits],mask.inmem
 15591                                  	; 25/04/2023
 15592                                  	; cf = 0
 15593                                  leOk:
 15594 0000156A F8                      	clc				; return no error
 15595                                  leRet:
 15596 0000156B 07                      	pop	es			; ES = TRANGROUP seg addr again
 15597 0000156C C3                      	retn
 15598                                  
 15599                                  
 15600                                  ; ---------------------------------------------------------------------------
 15601                                  
 15602                                  ;***	LoadEntry - load directory entry from DirBuf ext'd FCB
 15603                                  ;
 15604                                  ;	ENTRY	ES:DI = ptr to load point in TPA
 15605                                  ;		DirBuf contains extended FCB of entry to load
 15606                                  ;
 15607                                  ;	EXIT	ES:DI = ptr to next byte available in TPA
 15608                                  ;
 15609                                  ;	USED	AX,CX,SI
 15610                                  ;
 15611                                  ;	NOTES
 15612                                  ;
 15613                                  ;	  I could've used symbolic offsets and sizes of fields from
 15614                                  ;	   the dir_entry struc to do this, but this is time-critical,
 15615                                  ;	   so I hard-wired the structure of the DOS 4.x returned FCB,
 15616                                  ;	   as well as our private directory entry structure.
 15617                                  ;
 15618                                  ;	  We force a zero size for subdirectory files. A zero size is
 15619                                  ;	   ordinarily returned for subdirectories, but with Novell
 15620                                  ;	   Netware 286 or 386 loaded, we can't depend on it. Bug #1594.
 15621                                  
 15622                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15623                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:15DDh
 15624                                  LoadEntry:
 15625                                  	;mov	si,offset TRANGROUP:Dirbuf+8	; DS:SI = ptr to filename
 15626 0000156D BE[B68B]                	mov	si,DIRBUF+8
 15627 00001570 30C0                    	xor	al,al				; AL = 0
 15628 00001572 AA                      	stosb					; 'used' byte = false
 15629 00001573 B90B00                  	mov	cx,11
 15630 00001576 F3A4                    	rep	movsb				; transfer filename & extension
 15631 00001578 AC                      	lodsb					; AL = attrib byte
 15632 00001579 AA                      	stosb					; store attrib byte
 15633                                  	;add	si,10 ; 22-11-1
 15634                                  	;add	si,dir_time-dir_attr-1		; skip to time field
 15635 0000157A 83C60A                  	add	si,(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1
 15636 0000157D A5                      	movsw					; transfer time
 15637 0000157E A5                      	movsw					; transfer date
 15638 0000157F 46                      	inc	si				; skip alloc unit
 15639 00001580 46                      	inc	si
 15640                                  	;and	al,10h
 15641 00001581 2410                    	and	al,ATTR_DIRECTORY
 15642 00001583 7503                    	jnz	short leSetDirSize		; force zero size for subdir
 15643 00001585 A5                      	movsw
 15644 00001586 A5                      	movsw					; transfer size
 15645 00001587 C3                      	retn
 15646                                  leSetDirSize:
 15647 00001588 31C0                    	xor	ax,ax ; 0
 15648 0000158A AB                      	stosw
 15649 0000158B AB                      	stosw					; store zero size
 15650 0000158C C3                      	retn
 15651                                  
 15652                                  ; ---------------------------------------------------------------------------
 15653                                  
 15654                                  ;***	NoOrder - turn sorting off
 15655                                  ;
 15656                                  ;	ENTRY	nothing
 15657                                  ;
 15658                                  ;	EXIT	CY clear
 15659                                  ;
 15660                                  ;	USED	AX
 15661                                  ;
 15662                                  ;	EFFECTS
 15663                                  ;
 15664                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 15665                                  
 15666                                  	; 19/02/2023
 15667                                  NoOrder:
 15668 0000158D C606[318C]00            	mov	byte [DestBuf],0
 15669                                  				; no sort
 15670 00001592 F8                      	clc			; no error
 15671 00001593 C3                      	retn
 15672                                  
 15673                                  ; ---------------------------------------------------------------------------
 15674                                  
 15675                                  ;***	OnOffSw - record occurence of on/off option switch
 15676                                  ;
 15677                                  ;	ENTRY	DI = index into word list of switches
 15678                                  ;
 15679                                  ;	EXIT	CY clear
 15680                                  ;
 15681                                  ;	USED	AX,CX
 15682                                  ;
 15683                                  ;	EFFECTS
 15684                                  ;
 15685                                  ;	  Bits modified to indicate option state.
 15686                                  
 15687                                  	; 19/02/2023
 15688                                  OnOffSw:
 15689 00001594 89F9                    	mov	cx,di		; CX = index into word list of options
 15690 00001596 D1E9                    	shr	cx,1
 15691 00001598 D1E9                    	shr	cx,1		; CX = bit position of option
 15692 0000159A B80100                  	mov	ax,1		
 15693 0000159D D3E0                    	shl	ax,cl		; AX = bit mask of option
 15694 0000159F F7C70200                	test	di,2		; check if it is a negated option
 15695 000015A3 7405                    	jz	short oo1	; it's negated
 15696                                  	;or	Bits,ax		; turn option on
 15697 000015A5 0906[008C]              	or	[_Bits],ax
 15698                                  	;jmp	short ooRet
 15699                                  	; 19/02/2023
 15700                                  	;cf=0
 15701 000015A9 C3                      	retn
 15702                                  oo1:	
 15703 000015AA F7D0                    	not	ax		; AX = complemented bit mask of option
 15704                                  	;and	Bits,ax		; turn option off
 15705 000015AC 2106[008C]              	and	[_Bits],ax
 15706                                  ooRet:
 15707                                  	; 19/02/2023
 15708                                  	;cf=0
 15709                                  	;clc			; always return success
 15710 000015B0 C3                      	retn
 15711                                  
 15712                                  ; ---------------------------------------------------------------------------
 15713                                  
 15714                                  ;***	ParseAttr - parse and record /A option
 15715                                  ;
 15716                                  ;	ENTRY	BX = ptr to system parser result buffer for /A occurence
 15717                                  ;
 15718                                  ;	EXIT	CY = set if error occurs parsing attribute conditions
 15719                                  ;
 15720                                  ;		For parse error, we set up for Std_EPrintf call:
 15721                                  ;		AX = parse error code, like system parser
 15722                                  ;		DX = ptr to message block
 15723                                  ;
 15724                                  ;	USED	AX,CX,DX,DI
 15725                                  ;
 15726                                  ;	EFFECTS
 15727                                  ;
 15728                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 15729                                  ;	  If parse error occurs, attribute conditions parsed so far hold.
 15730                                  ;
 15731                                  ;	  For parse error, we set up for Std_EPrintf call:
 15732                                  ;	  Msg_Disp_Class = parse error message class
 15733                                  ;	  Message block (see DX) is set up for parse error message
 15734                                  
 15735                                  	; 19/02/2023
 15736                                  ParseAttr:
 15737 000015B1 56                      	push	si			; save SI
 15738 000015B2 C606[088C]00            	mov	byte [AttrSpecified],0	; cancel all attribute conditions
 15739                                  
 15740                                  ;	Each /A invocation starts by assuming all files are to be listed.
 15741                                  
 15742                                  	;;mov	si,word ptr [bx].ValuePtr
 15743                                  					; SI = ptr to string after /A
 15744                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 15745 000015B7 8B7704                  	mov	si,[bx+4]
 15746                                  paLoop:	
 15747 000015BA BA0100                  	mov	dx,1			; DX = 1 (for un-negated attribute)
 15748 000015BD AC                      	lodsb				; AL = next char in string
 15749 000015BE 08C0                    	or	al,al
 15750                                  	;jz	short paOk		; it's terminating null, we're done
 15751                                  	; 19/02/2023
 15752 000015C0 742F                    	jz	short paRet ; cf=0
 15753 000015C2 3C2D                    	cmp	al,'-'
 15754 000015C4 7502                    	jne	short pa1		; not '-', go look for letter
 15755 000015C6 4A                      	dec	dx			; DX = 0 (for negated attribute)
 15756 000015C7 AC                      	lodsb				; AL = next char
 15757                                  pa1:	
 15758                                  	;mov	di,offset TRANGROUP:AttrLtrs 
 15759                                  					; DI = ptr to attrib letter list
 15760 000015C8 BF[3784]                	mov	di,AttrLtrs ; "RHSvDA"
 15761                                  	;mov	cx,6
 15762 000015CB B90600                  	mov	cx,NUM_ATTR_LTRS ; 6	; CX = length of attrib letter list
 15763 000015CE F2AE                    	repne	scasb			; look for our letter in the list
 15764 000015D0 751B                    	jne	short paErr		; not found, return error
 15765                                  
 15766 000015D2 F7D1                    	not	cx
 15767                                  	;add	cx,6
 15768 000015D4 83C106                  	add	cx,NUM_ATTR_LTRS	; CX = attrib bit #, 0-5
 15769                                  
 15770                                  ;	Note that we rely on AttrLtrs to be in the attribute bit order,
 15771                                  ;	starting from bit 0.
 15772                                  
 15773                                  ;	Record this attribute bit in AttrSpecified.
 15774                                  
 15775 000015D7 B001                    	mov	al,1
 15776 000015D9 D2E0                    	shl	al,cl			; AL = mask for our bit
 15777 000015DB 0806[088C]              	or	[AttrSpecified],al	; set it in the 'specified' mask
 15778                                  
 15779                                  ;	Record the selected state for this attribute in AttrSelect.
 15780                                  ;	DX = 0 or 1, the selected state for this attribute.
 15781                                  
 15782 000015DF F6D0                    	not	al			; AL = mask for all other bits
 15783 000015E1 2006[098C]              	and	[AttrSelect],al		; clear our bit
 15784 000015E5 D2E2                    	shl	dl,cl			; DL = our bit state in position
 15785 000015E7 0816[098C]              	or	[AttrSelect],dl		; set selected attr state
 15786 000015EB EBCD                    	jmp	short paLoop		; go look at next char
 15787                                  
 15788                                  ;	The attribute letter string is invalid.
 15789                                  
 15790                                  paErr:	
 15791 000015ED E87103                  	call	SetupParamError		; set message up for Std_EPrintf
 15792 000015F0 F9                      	stc		   		; return error
 15793                                  	; 19/02/2023
 15794                                  	;jmp	short paRet
 15795                                  ;paOk:
 15796                                  	;clc				; return success		
 15797                                  paRet:	
 15798 000015F1 5E                      	pop	si			; restore SI
 15799 000015F2 C3                      	retn
 15800                                  
 15801                                  ; ---------------------------------------------------------------------------
 15802                                  
 15803                                  ;***	ParseLine - parse a line of text
 15804                                  ;
 15805                                  ;	Parse text until an EOL (CR or NUL) is found, or until a parse
 15806                                  ;	error occurs.
 15807                                  ;
 15808                                  ;	ENTRY	DS:SI = ptr to text
 15809                                  ;		CS, DS, ES = TRANGROUP seg addr
 15810                                  ;
 15811                                  ;	EXIT	AX = last return code from system parser
 15812                                  ;		CX = # positional parameters (pathnames) found - 0 or 1
 15813                                  ;
 15814                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 15815                                  ;		DX = ptr to message block
 15816                                  ;
 15817                                  ;	USED	BX,CX,DX,SI,DI
 15818                                  ;
 15819                                  ;	EFFECTS
 15820                                  ;
 15821                                  ;	  Bits may contain new option settings.
 15822                                  ;	  DestBuf may contain new series of sort codes.
 15823                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 15824                                  ;	  SrcBuf may contain a new default pathname/filespec.
 15825                                  ;	  PathPos, PathCnt updated for new pathname.
 15826                                  ;
 15827                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 15828                                  ;	  Msg_Disp_Class = parse error class
 15829                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 15830                                  ;	  Message block (see DX) is set up for parse error message
 15831                                  
 15832                                  	; 19/02/2023
 15833                                  Parse_Line:
 15834                                  	; 04/05/2023
 15835 000015F3 BF[0485]                	mov	di,PARSE_DIR		; ES:DI = ptr to parse block
 15836 000015F6 31C9                    	xor	cx,cx			; CX = # positionals found
 15837                                  plPars:
 15838 000015F8 E8BE0B                  	call	Parse_With_Msg		; call parser
 15839 000015FB 83F8FF                  	cmp	ax,-1
 15840                                  	;cmp	ax,END_OF_LINE ; 0FFFFh ; -1
 15841 000015FE 7411                    	je	short plRet		; EOL encountered, return
 15842 00001600 83F800                  	cmp	ax,RESULT_NO_ERROR ; 0
 15843 00001603 750C                    	jne	short plRet		; parse error occurred, return
 15844                                  
 15845                                  ;	Parse call succeeded. We have a filespec or a switch.
 15846                                  ;	DX = ptr to result buffer
 15847                                  
 15848 00001605 89D3                    	mov	bx,dx			; BX = ptr to parse result buffer
 15849 00001607 803F05                  	cmp	byte [bx],RESULT_FILESPEC ; 5
 15850 0000160A 7406                    	je	short plFil		; we have a filespec
 15851                                  
 15852 0000160C E85900                  	call	ParseSwitch		; else we have a switch
 15853                                  	;jc	short plRet		; error parsing switch, return
 15854                                  	;jmp	short plPars		; parse more
 15855                                  	; 19/02/2023
 15856 0000160F 73E7                    	jnc	short plPars
 15857                                  plRet:
 15858 00001611 C3                      	retn	
 15859                                  plFil:	
 15860 00001612 E8B200                  	call	CopyPathname		; copy pathname into our buffer
 15861 00001615 EBE1                    	jmp	short plPars		; parse more
 15862                                  ;plRet:
 15863                                  ;	retn
 15864                                  
 15865                                  ; ---------------------------------------------------------------------------
 15866                                  
 15867                                  ;***	ParseOrder - parse and record /O option
 15868                                  ;
 15869                                  ;	ENTRY	BX = ptr to system parser result buffer for /O occurence
 15870                                  ;
 15871                                  ;	EXIT	CY = set if error occurs parsing order
 15872                                  ;
 15873                                  ;		For parse error, we set up for Std_EPrintf call:
 15874                                  ;		AX = parse error code, like system parser
 15875                                  ;		DX = ptr to message block
 15876                                  ;
 15877                                  ;	USED	AX,CX,DX,DI
 15878                                  ;
 15879                                  ;	EFFECTS
 15880                                  ;
 15881                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 15882                                  ;
 15883                                  ;	  For parse error, we set up for Std_EPrintf call:
 15884                                  ;	  Msg_Disp_Class = parse error message class
 15885                                  ;	  Message block (see DX) is set up for parse error message
 15886                                  
 15887                                  	; 19/02/2023
 15888                                  ParseOrder:
 15889 00001617 56                      	push	si			; save SI
 15890 00001618 53                      	push	bx			; save ptr to result buffer
 15891                                  
 15892                                  	;;mov	si,word ptr [bx].ValuePtr
 15893                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 15894 00001619 8B7704                  	mov	si,[bx+4]		; SI = ptr to order letters
 15895                                  	;mov	bx,offset TRANGROUP:DestBuf
 15896                                  	; 08/06/2023 (BugFix)
 15897 0000161C BB[318C]                	mov	bx,DestBuf		; BX = ptr to sort code buffer
 15898 0000161F 8A04                    	mov	al,[si]			; AL = 1st char of order string
 15899 00001621 08C0                    	or	al,al
 15900 00001623 750E                    	jnz	short poLtr		; not NUL, go parse letters
 15901                                  
 15902                                  ;	We have /O alone. Set standard sort order.
 15903                                  ;	Note hardwired dependency on character order in OrderLtrs.
 15904                                  
 15905 00001625 C60705                  	mov	byte [bx],5		; sort 1st by group (subdirs 1st)
 15906 00001628 43                      	inc	bx
 15907 00001629 C60701                  	mov	byte [bx],1		; then by name
 15908 0000162C 43                      	inc	bx
 15909 0000162D C60702                  	mov	byte [bx],2		; then by extension
 15910 00001630 43                      	inc	bx
 15911 00001631 EB2F                    	jmp	short poOk		; return success
 15912                                  
 15913                                  ;	We have /O<something>. Parse sort order letters.
 15914                                  
 15915                                  poLtr:	
 15916 00001633 30D2                    	xor	dl,dl			; DL = 0 (upward sort)
 15917 00001635 AC                      	lodsb				; AL = next sort order letter
 15918 00001636 08C0                    	or	al,al
 15919 00001638 7428                    	jz	short poOk		; NUL found, return success
 15920                                  
 15921 0000163A 3C2D                    	cmp	al,'-'
 15922 0000163C 7503                    	jne	short po1		; not '-', go look for letter
 15923 0000163E B280                    	mov	dl,80h			; DL = downward sort mask
 15924 00001640 AC                      	lodsb				; AL = next char
 15925                                  po1:
 15926                                  	;mov	di,offset TRANGROUP:OrderLtrs
 15927                                  	; 08/06/2023 (BugFix)
 15928 00001641 BF[3D84]                	mov	di,OrderLtrs	;"NEDSG" ; DI = ptr to list of letters
 15929 00001644 B90500                  	mov	cx,NUM_ORDER_LTRS ; 5	; CX = length of list
 15930 00001647 F2AE                    	repne	scasb			; look for our letter in the list
 15931 00001649 7510                    	jne	short poErr		; not found, return error
 15932                                  
 15933 0000164B F7D9                    	neg	cx
 15934 0000164D 83C105                  	add	cx,NUM_ORDER_LTRS ; 5	; CL = sort order code, 1-6
 15935                                  
 15936 00001650 08D1                    	or	cl,dl			; CL = sort code with up/dn bit
 15937 00001652 880F                    	mov	[bx],cl			; store sort order code in buffer
 15938 00001654 43                      	inc	bx			; BX = ptr to next spot in buffer
 15939                                  	;cmp	bx,offset TRANGROUP:EndDestBuf
 15940 00001655 81FB[888C]              	cmp	bx,EndDestBuf
 15941                                  	;jae	short poErr		; too many letters
 15942                                  	;
 15943                                  	;jmp	short poLtr		; go look at next char
 15944                                  	; 19/02/2023
 15945 00001659 72D8                    	jb	short poLtr
 15946                                  
 15947                                  ;	The sort order string is invalid.  
 15948                                  
 15949                                  poErr:
 15950 0000165B 5B                      	pop	bx			; BX = ptr to result buffer
 15951 0000165C E80203                  	call	SetupParamError		; set message up for Std_EPrintf
 15952 0000165F F9                      	stc				; return failure
 15953 00001660 EB04                    	jmp	short poRet
 15954                                  poOk:	
 15955 00001662 C60700                  	mov	byte [bx],0		; mark end of sort code list
 15956 00001665 5B                      	pop	bx			; BX = ptr to result buffer
 15957                                  	; 19/02/2023
 15958                                  	;cf=0
 15959                                  	;clc				; return success
 15960                                  poRet:
 15961 00001666 5E                      	pop	si			; restore SI
 15962 00001667 C3                      	retn
 15963                                  
 15964                                  ; ---------------------------------------------------------------------------
 15965                                  
 15966                                  ;***	ParseSwitch - parse a switch
 15967                                  ;
 15968                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 15969                                  ;		     a switch
 15970                                  ;
 15971                                  ;	EXIT	CY = set if parse error occurred
 15972                                  ;
 15973                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 15974                                  ;		AX = parse error code, like system parser
 15975                                  ;		DX = ptr to message block
 15976                                  ;
 15977                                  ;	USED	AX,BX,DX
 15978                                  ;
 15979                                  ;	EFFECTS
 15980                                  ;
 15981                                  ;	  Bits may contain new option settings.
 15982                                  ;	  DestBuf may contain new series of sort codes.
 15983                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 15984                                  ;
 15985                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 15986                                  ;	  Msg_Disp_Class = parse error class
 15987                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 15988                                  ;	  Message block (see DX) is set up for parse error message
 15989                                  
 15990                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15991                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16E2h
 15992                                  ParseSwitch:
 15993 00001668 51                      	push	cx			; save CX
 15994 00001669 57                      	push	di			; save DI
 15995                                  
 15996                                  	;;mov	ax,[bx].SynPtr		; AX = synonym ptr
 15997                                  	;mov	ax,[bx+ResultBuffer.SynPtr]
 15998 0000166A 8B4702                  	mov	ax,[bx+2]
 15999                                  	;mov	di,offset TRANGROUP:Dir_Sw_Ptrs
 16000 0000166D BF[5485]                	mov	di,Dir_Sw_Ptrs		; ES:DI = ptr to list of synonym ptrs
 16001 00001670 B90E00                  	mov	cx,NUM_DIR_SWS ; 14	; CX = # of dir switches in list
 16002 00001673 FC                      	cld				; scan direction = upward
 16003 00001674 F2AF                    	repne	scasw			; locate synonym ptr in list
 16004                                  	;sub	di,offset TRANGROUP:Dir_Sw_Ptrs + 2
 16005 00001676 81EF[5685]              	sub	di,Dir_Sw_Ptrs+2
 16006                                  
 16007                                  ;	DI = index into word list of synonym ptrs
 16008                                  
 16009 0000167A 2EFF95[8216]            	call	word [cs:di+SwHandler]	; use same index into call table
 16010                                  
 16011 0000167F 5F                      	pop	di			; restore DI
 16012 00001680 59                      	pop	cx			; restore CX
 16013                                  
 16014 00001681 C3                      	retn
 16015                                  
 16016                                  ; ---------------------------------------------------------------------------
 16017                                  
 16018                                  ;	Order in this table must correspond to order in Dir_Sw_Ptrs list.
 16019                                  ;	Simple on/off switches must occur first in both lists, and must be
 16020                                  ;	  in order of option bits in Bits, starting with bit 0.
 16021                                  
 16022                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16023                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16FCh
 16024                                  
 16025                                  SwHandler:
 16026 00001682 [9415]                  	dw	OnOffSw		; /-W
 16027 00001684 [9415]                  	dw	OnOffSw		; /W
 16028 00001686 [9415]                  	dw	OnOffSw		; /-P
 16029 00001688 [9415]                  	dw	OnOffSw		; /P
 16030 0000168A [9415]                  	dw	OnOffSw		; /-S
 16031 0000168C [9415]                  	dw	OnOffSw		; /S
 16032 0000168E [9415]                  	dw	OnOffSw		; /-B
 16033 00001690 [9415]                  	dw	OnOffSw		; /B
 16034 00001692 [9415]                  	dw	OnOffSw		; /-L	;M010
 16035 00001694 [9415]                  	dw	OnOffSw		; /L	;M010
 16036 00001696 [8D15]                  	dw	NoOrder		; /-O
 16037 00001698 [1716]                  	dw	ParseOrder	; /O
 16038 0000169A [6C13]                  	dw	DefaultAttr	; /-A
 16039 0000169C [B115]                  	dw	ParseAttr	; /A
 16040                                  
 16041                                  ; ---------------------------------------------------------------------------
 16042                                  
 16043                                  	;break	<DIR utility routines>
 16044                                  
 16045                                  ;***	UTILITY ROUTINES
 16046                                  ; ---------------------- 
 16047                                  
 16048                                  ; ---------------------------------------------------------------------------
 16049                                  
 16050                                  ;***	ChangeDir - change directory on target drive
 16051                                  ;
 16052                                  ;	ENTRY	FCB contains drive #
 16053                                  ;		DS:DX = ptr to ASCIIZ string w/o drive specifier
 16054                                  ;
 16055                                  ;	EXIT	Changed current directory on drive
 16056                                  ;
 16057                                  ;		If error,
 16058                                  ;		CY = set
 16059                                  ;		DOS Get Extended Error call will get error
 16060                                  ;
 16061                                  ;	USED	AX,DX,SI,DI
 16062                                  ;
 16063                                  ;	EFFECTS
 16064                                  ;
 16065                                  ;	  DirBuf is used to build "d:string".
 16066                                  
 16067                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16068                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1718h
 16069                                  
 16070                                  ChangeDir:
 16071                                  	;mov	di,offset TRANGROUP:DirBuf
 16072 0000169E BF[AE8B]                	mov	di,DIRBUF
 16073 000016A1 E8AC02                  	call	GetDriveLtr	; AX = "d:"
 16074 000016A4 AB                      	stosw			; put drive specifier in buffer
 16075 000016A5 89D6                    	mov	si,dx		; SI = ptr to argument string
 16076                                  cdLoop:
 16077 000016A7 AC                      	lodsb
 16078 000016A8 AA                      	stosb			; move byte to buffer
 16079 000016A9 08C0                    	or	al,al
 16080 000016AB 75FA                    	jne	short cdLoop	; continue until null transferred
 16081                                  
 16082                                  	;mov	dx,offset TRANGROUP:DirBuf
 16083 000016AD BA[AE8B]                	mov	dx,DIRBUF	; DX = ptr to "d:string"
 16084                                  	;mov	ah,CHDir
 16085 000016B0 B43B                    	mov	ah,3Bh
 16086 000016B2 CD21                    	int	21h		; change directory
 16087 000016B4 C3                      	retn			; return what CHDIR returns
 16088                                  
 16089                                  ; ---------------------------------------------------------------------------
 16090                                  
 16091                                  ;***	CmpAscz - compare two ASCIIZ strings alphanumerically
 16092                                  ;
 16093                                  ;	ENTRY	DS:SI = ptr to one ASCIIZ string
 16094                                  ;		ES:DI = ptr to another ASCIIZ string
 16095                                  ;
 16096                                  ;	EXIT	flags set after REPE CMPSB
 16097                                  ;
 16098                                  ;	USED	AL,CX,SI,DI
 16099                                  ;
 16100                                  ;	NOTES
 16101                                  ;
 16102                                  ;	Maximum run of comparison is length of DS:SI string.
 16103                                  ;	This ensures that two identical strings followed by
 16104                                  ;	random characters will compare correctly.
 16105                                  
 16106                                  	; 19/02/2023
 16107                                  CmpAscz:
 16108                                  	; 07/06/2023
 16109 000016B5 56                      	push	si ; *
 16110                                  	;
 16111 000016B6 57                      	push	di
 16112                                  
 16113 000016B7 89F7                    	mov	di,si
 16114 000016B9 30C0                    	xor	al,al
 16115 000016BB B9FFFF                  	mov	cx,0FFFFh
 16116 000016BE F2AE                    	repne	scasb
 16117 000016C0 F7D1                    	not	cx
 16118                                  
 16119 000016C2 5F                      	pop	di
 16120 000016C3 F3A6                    	repe	cmpsb
 16121                                  
 16122                                  	; 07/06/2023
 16123 000016C5 5E                      	pop	si ; *
 16124                                  	;
 16125 000016C6 C3                      	retn
 16126                                  
 16127                                  ; ---------------------------------------------------------------------------
 16128                                  
 16129                                  ;***	CopyPathname - copy pathname to our buffer
 16130                                  ;
 16131                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 16132                                  ;		     a filespec
 16133                                  ;
 16134                                  ;	EXIT	nothing
 16135                                  ;
 16136                                  ;	USED	AX
 16137                                  ;
 16138                                  ;	EFFECTS
 16139                                  ;
 16140                                  ;	  SrcBuf may contain a new pathname/filespec.
 16141                                  ;	  PathPos, PathCnt updated for new pathname.
 16142                                  
 16143                                  	; 19/02/2023
 16144                                  CopyPathname:
 16145 000016C7 56                      	push	si
 16146                                  	;;lds	si,dword ptr [bx].ValuePtr  ; load far ptr from result buffer
 16147                                  	;lds	si,[bx+ResultBuffer.ValuePtr]
 16148 000016C8 C57704                  	lds	si,[bx+4]
 16149                                  	;invoke	Move_To_SrcBuf		    ; copy pathname to SrcBuf
 16150 000016CB E8D715                  	call	Move_To_SrcBuf
 16151 000016CE 5E                      	pop	si
 16152 000016CF C3                      	retn
 16153                                  
 16154                                  ; ---------------------------------------------------------------------------
 16155                                  
 16156                                  ;***	CountFile - update counters with current file
 16157                                  ;
 16158                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16159                                  ;
 16160                                  ;	EXIT	nothing
 16161                                  ;
 16162                                  ;	USED	AX,DX
 16163                                  ;
 16164                                  ;	EFFECTS
 16165                                  ;
 16166                                  ;	  FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 16167                                  
 16168                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16169                                  CountFile:
 16170 000016D0 06                      	push	es			; save TRANGROUP seg addr
 16171 000016D1 8E06[A78A]              	mov	es,[TPA]		; ES = TPA seg addr
 16172                                  
 16173 000016D5 FF06[D18A]              	inc	word [FileCnt]		; # files this directory
 16174 000016D9 FF06[D78A]              	inc	word [FileCntTotal]	; # files total
 16175 000016DD 7504                    	jnz	short cntf1
 16176 000016DF FF06[D98A]              	inc	word [FileCntTotal+2]
 16177                                  cntf1:
 16178                                  	;mov	ax,word ptr es:[bx].filesize
 16179                                  					; AX = low word of file size
 16180                                  	;mov	dx,word ptr es:[bx].filesize+2
 16181                                  					; DX = high word of file size
 16182 000016E3 268B4711                	mov	ax,[es:bx+17] ; [es:bx+EntryStruc.filesize]
 16183 000016E7 268B5713                	mov	dx,[es:bx+19] ; [es:bx+EntryStruc.filesize+2]
 16184 000016EB 0106[D38A]              	add	[FileSiz],ax
 16185 000016EF 1116[D58A]              	adc	[FileSiz+2],dx		; size of this directory
 16186 000016F3 0106[DB8A]              	add	[FileSizTotal],ax
 16187 000016F7 1116[DD8A]              	adc	[FileSizTotal+2],dx	; total size of files listed
 16188                                  
 16189 000016FB 07                      	pop	es			; ES = TRANGROUP seg addr again
 16190                                  dbRet:	; 19/02/2023
 16191 000016FC C3                      	retn
 16192                                  
 16193                                  ; ---------------------------------------------------------------------------
 16194                                  
 16195                                  ;***	DisplayBare - display filename in bare format
 16196                                  ;
 16197                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16198                                  ;
 16199                                  ;	EXIT	DX = # char's displayed, including dot
 16200                                  ;
 16201                                  ;	USED	AX,CX,SI,DI
 16202                                  ;
 16203                                  ;	EFFECTS
 16204                                  ;
 16205                                  ;	  Filename is displayed in name.ext format, followed by cr/lf.
 16206                                  ;	  If /s is on, complete pathname is displayed.
 16207                                  ;
 16208                                  ;	NOTE
 16209                                  ;
 16210                                  ;	  Directory pseudofiles . and .. and suppressed in bare listing.
 16211                                  
 16212                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16213                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1775h
 16214                                  
 16215                                  DisplayBare:
 16216                                  ;	Suppress . and .. files from bare listing.
 16217                                  
 16218 000016FD 8CD9                    	mov	cx,ds			; CX = saved TRANGROUP seg addr
 16219 000016FF 8E1E[A78A]              	mov	ds,[TPA]		; DS:BX = ptr to file entry
 16220                                  	;assume	ds:NOTHING
 16221                                  	;cmp	ds:[bx].filename,'.'	; check 1st char of filename
 16222 00001703 807F012E                	cmp	byte [bx+1],'.' ; [bx+EntrStruc.filename]
 16223 00001707 8ED9                    	mov	ds,cx			; DS = TRANGROUP seg addr again
 16224                                  	;assume	ds:TRANGROUP
 16225 00001709 74F1                    	je	short dbRet		; it's . or .. - don't display
 16226                                  
 16227                                  	;;;test	Bits,mask subd
 16228                                  	;;test	word [_Bits],4
 16229                                  	;test	byte [_Bits],4
 16230 0000170B F606[008C]04            	test	byte [_Bits],mask.subd
 16231 00001710 7431                    	jz	short dbNameExt		; not /s - display filename only
 16232                                  
 16233                                  	;invoke	Build_Dir_String
 16234 00001712 E83707                  	call	build_dir_string
 16235                                  	;mov	di,offset TRANGROUP:BwdBuf
 16236 00001715 BF[AE8B]                	mov	di,BWDBUF		; ES:DI = ptr to dir string
 16237                                     
 16238                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16239                                  	;;test	word [_Bits],10h
 16240                                  	;test	byte [_Bits],10h
 16241 00001718 F606[008C]10            	test	byte [_Bits],mask.lcase
 16242                                  	;jz	@F			;M010;lowercase not needed
 16243 0000171D 7405                    	jz	short dbare1
 16244 0000171F 89FE                    	mov	si,di			;M010;DS:SI --> ASCIIZ string in BwdBuf	
 16245 00001721 E87E02                  	call	LowercaseString		;M010;path string is in BwdBuf
 16246                                  dbare1:
 16247                                  ;@@:	
 16248                                  	;xor	al,al			; AL = 0
 16249                                  	; 19/02/2023
 16250 00001724 31C0                    	xor	ax,ax
 16251 00001726 B9FFFF                  	mov	cx,0FFFFh
 16252 00001729 FC                      	cld
 16253 0000172A F2AE                    	repne	scasb			; ES:DI = ptr to byte after null
 16254 0000172C 4F                      	dec	di			; ES:DI = ptr to null byte
 16255                                  
 16256 0000172D 26807DFF5C              	cmp	byte [es:di-1],'\'
 16257                                  	;je	@F
 16258 00001732 7403                    	je	short dbare2		; already terminated w/ '\'
 16259                                  
 16260                                  	;mov	ax,'\'			; AX = '\',0
 16261 00001734 B05C                    	mov	al,'\'
 16262 00001736 AB                      	stosw				; add to dir string
 16263                                  ;@@:
 16264                                  dbare2:
 16265                                  	;mov	String_Ptr_2,offset TRANGROUP:BwdBuf
 16266 00001737 C706[158C][AE8B]        	mov	word [string_ptr_2],BWDBUF
 16267                                  	;mov	dx,offset TRANGROUP:String_Buf_Ptr
 16268 0000173D BA[C380]                	mov	dx,string_buf_ptr
 16269                                  	;invoke	Std_Printf		; display device & directory path
 16270 00001740 E88E36                  	call	std_printf
 16271                                  dbNameExt:
 16272 00001743 E82D00                  	call	DisplayDotForm		; display name.ext
 16273                                  	;invoke	CrLf2			; display cr/lf
 16274 00001746 E8880E                  	call	CRLF2
 16275                                  	; 19/02/2023
 16276                                  	;call	UseLine			;M007;Allow /p with /b
 16277                                  ;dbRet:
 16278                                  	;retn
 16279                                  
 16280                                  	; 19/02/2023
 16281                                  	;jmp	short UseLine
 16282                                  
 16283                                  ; ---------------------------------------------------------------------------
 16284                                  
 16285                                  ;***	UseLine - use a display line, start a new page if none left
 16286                                  ;
 16287                                  ;	ENTRY	nothing
 16288                                  ;
 16289                                  ;	EXIT	nothing
 16290                                  ;
 16291                                  ;	USED	flags
 16292                                  
 16293                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16294                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A04h
 16295                                  UseLine:
 16296 00001749 FF0E[CF8A]              	dec	word [LeftOnPage]
 16297 0000174D 833E[CF8A]02            	cmp	word [LeftOnPage],2
 16298 00001752 771E                    	ja	short ulRet
 16299                                  	; 19/02/2023
 16300                                  	;call	EndPage
 16301                                  ;ulRet:
 16302                                  	;retn
 16303                                  
 16304                                  	; 19/02/2023
 16305                                  	;jmp	short EndPage
 16306                                  
 16307                                  ; ---------------------------------------------------------------------------
 16308                                  
 16309                                  ;***	EndPage - end the current display page
 16310                                  ;
 16311                                  ;	ENTRY	LeftOnPage = # lines left on display page
 16312                                  ;		Current directory (on selected drive) is the one being listed
 16313                                  ;		Bits contains /p setting
 16314                                  ;
 16315                                  ;	EXIT	LeftOnPage = # lines left for next page
 16316                                  ;
 16317                                  ;	USED	AX,DX
 16318                                  ;
 16319                                  ;	EFFECTS
 16320                                  ;
 16321                                  ;	  Pause is invoked to display a message and wait for a keystroke.
 16322                                  ;	  BwdBuf (same as DirBuf) used to build directory string.
 16323                                  
 16324                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16325                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19B8h
 16326                                  
 16327                                  EndPage:
 16328                                  	;;;test	Bits,mask pagd
 16329                                  	;;test	word [_Bits],2
 16330                                  	;test	byte [_Bits],2
 16331 00001754 F606[008C]02            	test	byte [_Bits],mask.pagd
 16332 00001759 7410                    	jz	short epNew		; paged display isn't enabled
 16333                                  
 16334 0000175B 53                      	push	bx			; save BX
 16335 0000175C 51                      	push	cx			; save CX
 16336                                  
 16337                                  	;invoke	Pause			; "Press any key to continue..."
 16338 0000175D E85302                  	call	PAUSE
 16339                                  
 16340                                  	;invoke	Build_Dir_String
 16341 00001760 E8E906                  	call	build_dir_string
 16342                                  	;mov	dx,offset TRANGROUP:DirCont_Ptr
 16343 00001763 BA[3E81]                	mov	dx,dircont_ptr
 16344                                  	;invoke	Printf_Crlf		; "(continuing <dir>)", cr/lf
 16345 00001766 E85A36                  	call	Printf_Crlf
 16346                                  
 16347 00001769 59                      	pop	cx			; restore CX
 16348 0000176A 5B                      	pop	bx			; restore BX
 16349                                  epNew:	
 16350 0000176B A1[7B8D]                	mov	ax,[LinPerPag]		; AX = # lines per page
 16351 0000176E 48                      	dec	ax			; AX = # lines till next EndPage
 16352 0000176F A3[CF8A]                	mov	[LeftOnPage],ax		; LeftOnPage = countdown variable
 16353                                  ulRet:	
 16354                                  	; 19/02/2023
 16355 00001772 C3                      	retn
 16356                                  
 16357                                  ; ---------------------------------------------------------------------------
 16358                                  
 16359                                  ;***	DisplayDotForm - display filename in compressed dot format
 16360                                  ;
 16361                                  ;	Display name.ext, with no cr/lf's. Dot is displayed only
 16362                                  ;	if the filename has a nonblank extension.
 16363                                  ;
 16364                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16365                                  ;
 16366                                  ;	EXIT	DX = # char's displayed, including dot
 16367                                  ;
 16368                                  ;	USED	AX,CX,SI,DI
 16369                                  ;
 16370                                  ;	EFFECTS
 16371                                  ;
 16372                                  ;	  Filename is displayed in name.ext format.
 16373                                  ;
 16374                                  ;	NOTE
 16375                                  ;
 16376                                  ;	  We allow for bogus filenames that have blanks embedded
 16377                                  ;	  in the name or extension.
 16378                                  
 16379                                  ;	Bugbug:	might be a good performance gain if we buffered
 16380                                  ;	up the output and used DOS function 9.
 16381                                  
 16382                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16383                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:17C8h
 16384                                  
 16385                                  DisplayDotForm:
 16386 00001773 1E                      	push	ds			; save TRANGROUP seg addr
 16387 00001774 06                      	push	es			; save ES
 16388 00001775 2EA1[A78A]              	mov	ax,[cs:TPA]		; AX = TPA seg addr
 16389 00001779 8ED8                    	mov	ds,ax			; DS:BX = ptr to entry
 16390                                  	;assume	ds:nothing
 16391 0000177B 8EC0                    	mov	es,ax			; ES:BX = ptr to entry
 16392                                  
 16393                                  	; 08/06/2023
 16394                                  	;mov	di,bx			; ES:DI = ptr to entry
 16395                                  	;;;add	di,filename + size filename - 1
 16396                                  	;add	di,8 ; 1+8-1		; ES:DI = ptr to last char in name field
 16397                                  	;;mov	cx,size filename	; CX = length of name field
 16398                                  	;mov	cx,8
 16399                                  	; 08/06/2023
 16400 0000177D B90800                  	mov	cx,8
 16401 00001780 89CF                    	mov	di,cx
 16402 00001782 01DF                    	add	di,bx
 16403                                  	
 16404 00001784 B020                    	mov	al,' '
 16405 00001786 FD                      	std				; scan down
 16406 00001787 F3AE                    	repe	scasb			; scan for nonblank
 16407                                  
 16408                                  ;	Assume file name has at least one character.
 16409                                  
 16410 00001789 41                      	inc	cx			; CX = # chars in name
 16411 0000178A 89CA                    	mov	dx,cx			; DX = # chars to be displayed
 16412                                  
 16413 0000178C 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 16414                                  	;;add	si,filename		; DS:SI = ptr to name
 16415                                  	;add	si,1 
 16416                                  	;		; add si,EntryStruc.filename
 16417                                  	; 25/04/2023
 16418 0000178E 46                      	inc	si
 16419                                  NextNameChar:
 16420 0000178F FC                      	cld
 16421 00001790 AC                      	lodsb				; AL = next char
 16422                                  
 16423                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16424                                  	;;test	word [ss:_Bits],10h
 16425                                  	;test	byte [ss:_Bits],10h
 16426 00001791 36F606[008C]10          	test	byte [ss:_Bits],mask.lcase
 16427                                  	;jz	short @F		;M010;lowercase not required
 16428 00001797 7403                    	jz	short ddf1
 16429 00001799 E8FB01                  	call	LowerCase		;M010;filename char is in AL
 16430                                  ddf1:
 16431                                  ;@@:	
 16432                                  	;invoke	Print_Char		; display it
 16433 0000179C E85E06                  	call	PRINT_CHAR
 16434 0000179F E2EE                    	loop	NextNameChar
 16435                                  
 16436                                  ;	Now do extension.
 16437                                  
 16438 000017A1 89DF                    	mov	di,bx			; ES:DI = ptr to entry
 16439                                  	;add	di,fileext + size fileext - 1
 16440 000017A3 83C70B                  	add	di,11 ; 9+3-1		; ES:DI = ptr to last char in ext field
 16441                                  	;mov	cx,size fileext		; CX = length of ext field
 16442 000017A6 B90300                  	mov	cx,3
 16443 000017A9 B020                    	mov	al,' '
 16444 000017AB FD                      	std				; scan down
 16445 000017AC F3AE                    	repe	scasb			; scan for nonblank
 16446 000017AE 7420                    	je	short ddDone		; no nonblank chars in ext
 16447                                  
 16448 000017B0 41                      	inc	cx			; CX = # chars in ext
 16449 000017B1 01CA                    	add	dx,cx			; DX = total # chars to be displayed
 16450 000017B3 42                      	inc	dx			;      including dot
 16451                                  
 16452 000017B4 B02E                    	mov	al,'.'
 16453 000017B6 E84406                  	call	PRINT_CHAR
 16454 000017B9 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 16455                                  	;add	si,fileext		; DS:SI = ptr to ext
 16456 000017BB 83C609                  	add	si,9
 16457                                  
 16458                                  NextExtChar:
 16459 000017BE FC                      	cld
 16460 000017BF AC                      	lodsb				; AL = next char
 16461                                  
 16462                                  	;;;test	CS:Bits,mask lcase	;M010;check for lowercase option
 16463                                  	;;test	word [cs:_Bits],10h
 16464                                  	;test	byte [cs:_Bits],10h
 16465 000017C0 2EF606[008C]10          	test	byte [cs:_Bits],mask.lcase
 16466                                  	;jz	short @F		;M010;lowercase not required
 16467 000017C6 7403                    	jz	short ddf2
 16468 000017C8 E8CC01                  	call	LowerCase		;M010;fileext char is in AL
 16469                                  ;@@:	
 16470                                  ddf2:
 16471                                  	;invoke	Print_Char		; display it
 16472 000017CB E82F06                  	call	PRINT_CHAR
 16473 000017CE E2EE                    	loop	NextExtChar
 16474                                  ddDone:
 16475 000017D0 07                      	pop	es			; restore ES
 16476 000017D1 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 16477                                  	;assume	ds:TRANGROUP
 16478 000017D2 FC                      	cld				; leave direction flag = up
 16479 000017D3 C3                      	retn
 16480                                  
 16481                                  ; ---------------------------------------------------------------------------
 16482                                  
 16483                                  ;***	DisplayFile - display file entry, update counters
 16484                                  ;
 16485                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16486                                  ;		Bits contains /w, /p settings
 16487                                  ;
 16488                                  ;	EXIT	nothing
 16489                                  ;
 16490                                  ;	USED	AX,CX,DX,SI,DI,BP
 16491                                  ;
 16492                                  ;	EFFECTS
 16493                                  ;
 16494                                  ;	  Entry is displayed.
 16495                                  ;	  If not /b,
 16496                                  ;	    Cursor is left at end of entry on screen.
 16497                                  ;	    FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 16498                                  ;	  If /b,
 16499                                  ;	    Cursor is left at beginning of next line.
 16500                                  ;	    Cnt's and Siz's aren't updated.
 16501                                  
 16502                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16503                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:182Eh
 16504                                  
 16505                                  DisplayFile:
 16506                                  	;;;test	Bits,mask bare
 16507                                  	;;test	word [_Bits],8
 16508                                  	;test	byte [_Bits],8
 16509 000017D4 F606[008C]08            	test	byte [_Bits],mask.bare
 16510 000017D9 7405                    	jz	short dfNorm		; not /b - do normal display
 16511                                  
 16512 000017DB E81FFF                  	call	DisplayBare		; display file in bare format
 16513 000017DE EB18                    	jmp	short dfRet
 16514                                  dfNorm:	
 16515 000017E0 E87800                  	call	DisplayNext		; pos'n cursor for next entry
 16516                                  	;;;test	Bits,mask wide
 16517                                  	;;test	word [_Bits],1
 16518                                  	;test	byte [_Bits],1
 16519 000017E3 F606[008C]01            	test	byte [_Bits],mask.wide
 16520 000017E8 7405                    	jz	short dfFull		; full format
 16521 000017EA E83701                  	call	DisplayWide		; wide format
 16522 000017ED EB06                    	jmp	short dfCnt
 16523                                  dfFull:	
 16524 000017EF E83400                  	call	DisplayName		; display filename & extension
 16525 000017F2 E88D00                  	call	DisplayTheRest		; display size, date, time
 16526                                  dfCnt:
 16527 000017F5 E8D8FE                  	call	CountFile		; update file counters
 16528                                  dfRet:
 16529                                  dhRet:	; 19/02/2023
 16530 000017F8 C3                      	retn
 16531                                  
 16532                                  ; ---------------------------------------------------------------------------
 16533                                  
 16534                                  ;***	DisplayHeader - display directory header of working directory
 16535                                  ;
 16536                                  ;	ENTRY	Current directory (on selected drive) is the one to display
 16537                                  ;		LeftOnPage = # lines left on display page
 16538                                  ;
 16539                                  ;	EXIT	nothing
 16540                                  ;
 16541                                  ;	ERROR EXIT
 16542                                  ;
 16543                                  ;	  Build_Dir_String will exit through CError with "Invalid drive
 16544                                  ;	   specification" if there's a problem obtaining the current
 16545                                  ;	   directory pathname.
 16546                                  ;
 16547                                  ;	USED	AX,DX,SI,DI
 16548                                  ;
 16549                                  ;	EFFECTS
 16550                                  ;
 16551                                  ;	  BwdBuf (which is really the same buffer as DirBuf, which
 16552                                  ;	   we are using for the DTA) contains the directory string.
 16553                                  ;	  LeftOnPage is adjusted.
 16554                                  
 16555                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16556                                  
 16557                                  DisplayHeader:
 16558                                  	;;;test	Bits,mask bare
 16559                                  	;;test	word [_Bits],8
 16560                                  	;test	byte [_Bits],8
 16561 000017F9 F606[008C]08            	test	byte [_Bits],mask.bare
 16562 000017FE 75F8                    	jnz	short dhRet		; /b - don't display header
 16563                                  
 16564                                  	;;;test	Bits,mask subd
 16565                                  	;;test	word [_Bits],4
 16566                                  	;test	byte [_Bits],4
 16567 00001800 F606[008C]04            	test	byte [_Bits],mask.subd
 16568 00001805 7408                    	jz	short dhNorm		; not /s
 16569                                  
 16570                                  ;	For subdirectory listings, put a blank line before the header.
 16571                                  
 16572                                  	;invoke	Crlf2			; start with a blank line
 16573 00001807 E8C70D                  	call	CRLF2
 16574 0000180A E83CFF                  	call	UseLine
 16575 0000180D EB05                    	jmp	short dhCom
 16576                                  dhNorm:
 16577 0000180F B020                    	mov	al,' ' ; 20h
 16578                                  	;mov	al,BLANK		; if not /s, precede by a blank
 16579 00001811 E8E905                  	call	PRINT_CHAR		; print a leading blank
 16580                                  dhCom:
 16581 00001814 E83506                  	call	build_dir_string
 16582 00001817 BA[4380]                	mov	dx,dirhead_ptr
 16583 0000181A E8B435                  	call	std_printf		; print header & cr/lf
 16584 0000181D E829FF                  	call	UseLine
 16585 00001820 E8AE0D                  	call	CRLF2			; another cr/lf
 16586                                  	;call	UseLine
 16587                                  ;dhRet:
 16588                                  	;retn
 16589                                  
 16590                                  	; 19/02/2023
 16591 00001823 E923FF                  	jmp	UseLine
 16592                                  
 16593                                  ; ---------------------------------------------------------------------------
 16594                                  
 16595                                  ;***	DisplayName - display file name & extension
 16596                                  ;
 16597                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16598                                  ;
 16599                                  ;	EXIT	nothing
 16600                                  ;
 16601                                  ;	USED	AX,CX,DX,SI,DI
 16602                                  ;
 16603                                  ;	EFFECTS
 16604                                  ;
 16605                                  ;	  Filename & extension are displayed in spread format.
 16606                                  ;	  Cursor is left at end of extension.
 16607                                  
 16608                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16609                                  	; 08/06/2023
 16610                                  DisplayName:
 16611 00001826 1E                      	push	ds			; save TRANGROUP seg addr
 16612 00001827 8E1E[A78A]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 16613                                  	;assume	ds:nothing
 16614 0000182B 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 16615                                  	;add	si,filename		; DS:SI = ptr to filename
 16616                                  	;add	si,1  ; EntryStruc.filename
 16617                                  	; 08/06/2023
 16618 0000182D 46                      	inc	si
 16619 0000182E BF[DF8A]                	mov	di,CHARBUF		; ES:DI = ptr to CharBuf
 16620                                  
 16621 00001831 B90800                  	mov	cx,8
 16622 00001834 FC                      	cld
 16623 00001835 F3A4                    	rep	movsb			; move filename to CharBuf
 16624 00001837 B020                    	mov	al,' '
 16625 00001839 AA                      	stosb				; add a blank
 16626                                  	;mov	cx,3
 16627                                  	; 08/06/2023
 16628 0000183A B103                    	mov	cl,3
 16629 0000183C F3A4                    	rep	movsb			; add extension
 16630 0000183E 30C0                    	xor	al,al
 16631 00001840 AA                      	stosb				; add a NULL
 16632                                  
 16633 00001841 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 16634                                  	;assume	ds:TRANGROUP
 16635                                  
 16636                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16637                                  	;;test	word [_Bits],10h
 16638                                  	;test	byte [_Bits],10h
 16639 00001842 F606[008C]10            	test	byte [_Bits],mask.lcase
 16640 00001847 7406                    	jz	short dn1		;M010;lowercase not required
 16641 00001849 BE[DF8A]                	mov	si,CHARBUF		;M010;DS:SI --> ASCIIZ string
 16642 0000184C E85301                  	call	LowercaseString		;M010;filename.ext string is in CharBuf
 16643                                  dn1:	
 16644 0000184F C706[158C][DF8A]        	mov	word [string_ptr_2],CHARBUF
 16645 00001855 BA[C380]                	mov	dx,string_buf_ptr
 16646                                  	;call	std_printf		; print filename & extension
 16647                                  	;retn
 16648                                  	; 19/02/2023
 16649 00001858 E97635                  	jmp	std_printf
 16650                                  
 16651                                  ; ---------------------------------------------------------------------------
 16652                                  
 16653                                  ;***	DisplayNext - move display cursor to next entry position
 16654                                  ;
 16655                                  ;	ENTRY	LeftOnLine = # entries can still be printed on this line
 16656                                  ;		LeftOnPage = # lines can still be printed for this page
 16657                                  ;		FileCnt = # files in this dir displayed before this one
 16658                                  ;		Bits contains /w setting
 16659                                  ;
 16660                                  ;	EXIT	nothing
 16661                                  ;
 16662                                  ;	USED	AX,DX
 16663                                  ;
 16664                                  ;	EFFECTS
 16665                                  ;
 16666                                  ;	  LeftOnLine will be updated to reflect the entry about to be
 16667                                  ;	   displayed.
 16668                                  ;	  LeftOnPage may be updated.
 16669                                  
 16670                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16671                                  
 16672                                  DisplayNext:
 16673 0000185B 833E[D18A]00            	cmp	word [FileCnt],0
 16674 00001860 7415                    	je	short dn1st		; 1st file in directory
 16675 00001862 803E[CB8A]00            	cmp	byte [LeftOnLine],0
 16676 00001867 7E08                    	jng	short dnEol		; no more room on this line
 16677                                  
 16678                                  ;	We are in wide mode (LeftOnLine is always 0 otherwise) and
 16679                                  ;	we still have room for more on this line.
 16680                                  ;	Tab to next position.
 16681                                  
 16682 00001869 BA[D280]                	mov	dx,tab_ptr
 16683 0000186C E86235                  	call	std_printf
 16684 0000186F EB0C                    	jmp	short dnDone
 16685                                  dnEol:	
 16686                                  ;	Start this entry on a new line.
 16687                                  
 16688 00001871 E85D0D                  	call	CRLF2		; start on new line
 16689 00001874 E8D2FE                  	call	UseLine
 16690                                  dn1st:
 16691 00001877 A0[CC8A]                	mov	al,[PerLine]
 16692 0000187A A2[CB8A]                	mov	[LeftOnLine],al	; reset # entries left on line
 16693                                  
 16694                                  dnDone:
 16695 0000187D FE0E[CB8A]              	dec	byte [LeftOnLine]
 16696                                  				; reflect the entry about to be displayed
 16697 00001881 C3                      	retn
 16698                                  
 16699                                  ; ---------------------------------------------------------------------------
 16700                                  
 16701                                  ;***	DisplayTheRest - display file size/dir, date, time
 16702                                  ;
 16703                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16704                                  ;		Display cursor is at end of file extension
 16705                                  ;
 16706                                  ;	EXIT	nothing
 16707                                  ;
 16708                                  ;	USED	AX,CX,DX,SI,DI,BP
 16709                                  ;
 16710                                  ;	EFFECTS
 16711                                  ;
 16712                                  ;	  File size, date, & time are displayed.
 16713                                  
 16714                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16715                                  DisplayTheRest:
 16716 00001882 06                      	push	es			; save TRANGROUP seg addr
 16717 00001883 8E06[A78A]              	mov	es,[TPA]		; ES = TPA seg addr
 16718 00001887 89DD                    	mov	bp,bx			; BP = offset of entry in TPA
 16719                                  	;;test	es:[bp].fileattr,ATTR_DIRECTORY
 16720                                  	;test	byte [es:bp+EntryStruc.fileattr],10h
 16721 00001889 26F6460C10              	test	byte [es:bp+12],ATTR_DIRECTORY
 16722 0000188E 7408                    	jz	short drNonDir		; not a directory file
 16723                                  
 16724                                  ;	For a directory file, display <DIR> instead of size.
 16725                                  
 16726 00001890 BA[D580]                	mov	dx,dmes_ptr
 16727 00001893 E83B35                  	call	std_printf
 16728 00001896 EB16                    	jmp	short drCom		; skip to common fields
 16729                                  
 16730                                  drNonDir:
 16731                                  ;	For a non-directory file, display file size.
 16732                                  
 16733                                  	;;mov	dx,word ptr es:[bp].filesize
 16734                                  	;mov	dx,[es:bp+EntryStruc.filesize]
 16735 00001898 268B5611                	mov	dx,[es:bp+17]
 16736 0000189C 8916[118C]              	mov	[File_Size_Low],dx
 16737                                  	;;mov	dx,word ptr es:[bp].filesize+2
 16738                                  	;mov	dx,[es:bp+EntryStruc.filesize+2]
 16739 000018A0 268B5613                	mov	dx,[es:bp+19]
 16740 000018A4 8916[138C]              	mov	[File_Size_High],dx
 16741 000018A8 BA[B580]                	mov	dx,disp_file_size_ptr
 16742 000018AB E82335                  	call	std_printf
 16743                                  drCom:
 16744                                  ;	For all files, display date & time.
 16745                                  
 16746                                  	;;mov	ax,es:[bp].filedate	; AX = date word
 16747                                  	;mov	ax,[es:bp+EntryStruc.filedate]
 16748 000018AE 268B460F                	mov	ax,[es:bp+15]
 16749 000018B2 09C0                    	or	ax,ax			; test for null date (DOS 1.x)
 16750 000018B4 7448                    	jz	short drDone		; no date, skip date/time display
 16751 000018B6 89C3                    	mov	bx,ax			; BX = date word
 16752 000018B8 83E01F                  	and	ax,1Fh			; AX = day of month
 16753 000018BB 88C2                    	mov	dl,al			; DL = day of month
 16754 000018BD 89D8                    	mov	ax,bx			; AX = date word
 16755 000018BF B105                    	mov	cl,5
 16756 000018C1 D3E8                    	shr	ax,cl			; shift day out
 16757 000018C3 240F                    	and	al,0Fh			; AL = month
 16758 000018C5 88C6                    	mov	dh,al			; DH = month
 16759 000018C7 88F9                    	mov	cl,bh
 16760 000018C9 D0E9                    	shr	cl,1			; CL = year - 1980
 16761 000018CB 30ED                    	xor	ch,ch			; CX = year - 1980
 16762 000018CD 83C150                  	add	cx,80			; CX = 2-digit year
 16763 000018D0 80F964                  	cmp	cl,100
 16764 000018D3 7203                    	jb	short dr_1		; not year 2000 yet, skip ahead
 16765 000018D5 80E964                  	sub	cl,100			; adjust for 21st century
 16766                                  dr_1:	
 16767 000018D8 86F2                    	xchg	dh,dl			; DX = month/day
 16768 000018DA 890E[1381]              	mov	[DirDat_Yr],cx		; move year to msg block
 16769 000018DE 8916[1581]              	mov	[DirDat_Mo_Day],dx	; move month/day to msg block
 16770                                  	;;mov	cx,es:[bp].filetime	; CX = file time
 16771                                  	;mov	cx,[es:bp+EntryStruc.filetime]
 16772 000018E2 268B4E0D                	mov	cx,[es:bp+13]
 16773 000018E6 E310                    	jcxz	drPrint			; no time field - go print
 16774 000018E8 D1E9                    	shr	cx,1
 16775 000018EA D1E9                    	shr	cx,1
 16776 000018EC D1E9                    	shr	cx,1			; CH = hours
 16777 000018EE D0E9                    	shr	cl,1
 16778 000018F0 D0E9                    	shr	cl,1			; CL = minutes
 16779 000018F2 86E9                    	xchg	ch,cl			; CX = hr/min
 16780 000018F4 890E[1E81]              	mov	[DirTim_Hr_Min],cx	; move time to msg block
 16781                                  drPrint:
 16782 000018F8 BA[0E81]                	mov	dx,dirdattim_ptr
 16783 000018FB E8D334                  	call	std_printf		; print date & time
 16784                                  drDone:
 16785 000018FE 07                      	pop	es			; ES = TRANGROUP seg addr again	
 16786 000018FF 89EB                    	mov	bx,bp			; BX = offset of entry in TPA again
 16787                                  dtrRet:
 16788                                  	; 19/02/2023
 16789 00001901 C3                      	retn
 16790                                  
 16791                                  ; ---------------------------------------------------------------------------
 16792                                  
 16793                                  ;***	DisplayTrailer - display trailing lines for directory listing
 16794                                  ;
 16795                                  ;	ENTRY	LeftOnPage = # lines left on display page
 16796                                  ;		FileCnt = # files listed
 16797                                  ;		FileSiz = total size of files listed
 16798                                  ;
 16799                                  ;	EXIT	nothing
 16800                                  ;
 16801                                  ;	USED
 16802                                  ;
 16803                                  ;	EFFECTS
 16804                                  ;
 16805                                  ;	  Trailing info lines are displayed
 16806                                  
 16807                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16808                                  
 16809                                  DisplayTrailer:
 16810                                  	;;;test	Bits,mask bare
 16811                                  	;;test	word [_Bits],8
 16812                                  	;test	byte [_Bits],8
 16813 00001902 F606[008C]08            	test	byte [_Bits],mask.bare
 16814 00001907 75F8                    	jnz	short dtrRet		; /b - don't display trailer
 16815                                  
 16816 00001909 E8C50C                  	call	CRLF2			; start on new line
 16817 0000190C E83AFE                  	call	UseLine
 16818 0000190F A1[D18A]                	mov	ax,[FileCnt]		; AX = # files found
 16819                                  
 16820                                  ;	DisplayTotals uses this entry point.
 16821                                  ;
 16822                                  DisplayCntSiz:
 16823                                  ;	AX = # files
 16824                                  ;	FileSiz = dword total size of files
 16825                                  
 16826 00001912 A3[1A8C]                	mov	[Dir_Num],ax		; load # files
 16827 00001915 BA[3C7F]                	mov	dx,dirmes_ptr		; DX = ptr to message block
 16828 00001918 E8B634                  	call	std_printf		; "nnn File(s)"
 16829                                  
 16830 0000191B BA[2A81]                	mov	dx,bytes_ptr
 16831 0000191E E8B034                  	call	std_printf		; "nnn bytes",cr,lf
 16832                                  	; 19/02/2023
 16833                                  	;call	UseLine
 16834                                  ;dtrRet:
 16835                                  	;retn
 16836                                  
 16837                                  	; 19/02/2023
 16838 00001921 E925FE                  	jmp	UseLine
 16839                                  
 16840                                  ; ---------------------------------------------------------------------------
 16841                                  
 16842                                  ;***	DisplayWide - display filename in wide format
 16843                                  ;
 16844                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16845                                  ;
 16846                                  ;	EXIT	nothing
 16847                                  ;
 16848                                  ;	USED	AX,CX,DX,SI,DI
 16849                                  ;
 16850                                  ;	EFFECTS
 16851                                  ;
 16852                                  ;	  Name.ext is displayed. Cursor left at end of field (padded
 16853                                  ;	  with blanks). Subdirectory files are displayed as [name.ext].
 16854                                  
 16855                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16856                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:198Ah
 16857                                  
 16858                                  DisplayWide:
 16859 00001924 1E                      	push	ds			; save TRANGROUP seg addr
 16860 00001925 8E1E[A78A]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 16861                                  	;assume	ds:nothing
 16862                                  
 16863                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 16864                                  	;test	byte [bx+EntryStruc.fileattr],10h
 16865 00001929 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 16866 0000192D 9C                      	pushf	; 03/08/2024
 16867 0000192E 7405                    	jz	short dw1		; not a subdirectory file
 16868 00001930 B05B                    	mov	al,'['
 16869 00001932 E8C804                  	call	PRINT_CHAR		; prefix subdirectory
 16870                                  dw1:	
 16871 00001935 E83BFE                  	call	DisplayDotForm		; display name.ext
 16872                                  
 16873                                  ;	DX = # chars displayed in name.ext
 16874                                  
 16875                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 16876                                  	;test	byte [bx+EntryStruc.fileattr],10h
 16877                                  	; 03/08/2024
 16878                                  	;test	byte [bx+12],ATTR_DIRECTORY
 16879 00001938 9D                      	popf	; 03/08/2024
 16880 00001939 7405                    	jz	short dw2		; not a subdirectory file
 16881 0000193B B05D                    	mov	al,']'
 16882 0000193D E8BD04                  	call	PRINT_CHAR		; postfix subdirectory
 16883                                  dw2:
 16884                                  ;	Pad field with blanks.
 16885                                  
 16886                                  	;mov	cx,size filename + size fileext + 1
 16887 00001940 B90C00                  	mov	cx,12 ; 8+3+1
 16888                                  					; CX = field size
 16889 00001943 29D1                    	sub	cx,dx			; CX = # pad char's
 16890 00001945 E307                    	jcxz	dwDone
 16891 00001947 B020                    	mov	al,' '
 16892                                  dw3:	
 16893 00001949 E8B104                  	call	PRINT_CHAR
 16894 0000194C E2FB                    	loop	dw3
 16895                                  dwDone:	
 16896 0000194E 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 16897                                  	;assume	ds:TRANGROUP
 16898 0000194F C3                      	retn
 16899                                  
 16900                                  ; ---------------------------------------------------------------------------
 16901                                  
 16902                                  ;***	GetDriveLtr - get target drive letter
 16903                                  ;
 16904                                  ;	ENTRY	FCB contains drive #
 16905                                  ;
 16906                                  ;	EXIT	AX = "d:"
 16907                                  ;
 16908                                  ;	USED	nothing
 16909                                  
 16910                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16911                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19D8h
 16912                                  GetDriveLtr:
 16913 00001950 A05C00                  	mov	al,[FCB] ; 5Ch	; AL = target drive #
 16914 00001953 08C0                    	or	al,al
 16915 00001955 7505                    	jnz	short gdl1	; not current drive default, skip ahead
 16916 00001957 A0[B98A]                	mov	al,[CURDRV]	; AL = current drive #
 16917 0000195A FEC0                    	inc	al		; AL = 1-based drive #
 16918                                  gdl1:	
 16919 0000195C 0440                    	add	al,'A'-1 ; 40h	; AL = target drive letter
 16920 0000195E B43A                    	mov	ah,':'		; AX = "d:"
 16921 00001960 C3                      	retn
 16922                                  
 16923                                  ; ---------------------------------------------------------------------------
 16924                                  
 16925                                  ;***	SetupParamError - set up for Std_EPrintf parameter parse error message
 16926                                  ;
 16927                                  ;	Do for our /O and /A string parsers what Parse_With_Msg does
 16928                                  ;	for system parser calls. Set up a message substitution block,
 16929                                  ;	etc. for invalid value strings. I copied the procedure from
 16930                                  ;	Setup_Parse_Error_Msg.
 16931                                  ;
 16932                                  ;	ENTRY	BX = ptr to system parser result buffer (contains ptr to str)
 16933                                  ;		
 16934                                  ;
 16935                                  ;	EXIT	AX = system parser error return code for bad param format
 16936                                  ;		DX = ptr to message description block for Std_EPrintf
 16937                                  ;
 16938                                  ;	USED	SI
 16939                                  ;
 16940                                  ;	EFFECTS
 16941                                  ;
 16942                                  ;	  Msg_Disp_Class = parse error message class
 16943                                  ;	  Message block (see DX) is set up for parse error message
 16944                                  
 16945                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16946                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19E9h
 16947                                  SetupParamError:
 16948 00001961 B80900                  	mov	ax,9			; parse error #
 16949 00001964 C606[FA7E]02            	mov	byte [msg_disp_class],parse_msg_class
 16950                                  	;mov	byte [msg_disp_class],2
 16951 00001969 A3[FC7E]                	mov	[extend_buf_ptr],ax
 16952                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16953 0000196C 8B7704                  	mov	si,[bx+4]
 16954 0000196F 8936[158C]              	mov	[string_ptr_2],si
 16955 00001973 C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst
 16956                                  	;mov	byte [extend_buf_sub],1
 16957 00001978 BA[FC7E]                	mov	dx,extend_buf_ptr
 16958 0000197B C3                      	retn
 16959                                  
 16960                                  ; ---------------------------------------------------------------------------
 16961                                  
 16962                                  ;***	ZeroTotals - zero grand total file count, size
 16963                                  ;
 16964                                  ;	ENTRY	nothing
 16965                                  ;
 16966                                  ;	EXIT	nothing
 16967                                  ;
 16968                                  ;	USED	AX
 16969                                  ;
 16970                                  ;	EFFECTS
 16971                                  ;
 16972                                  ;	  FileCntTotal & FileSizTotal are zeroed.
 16973                                  ;
 16974                                  ;	NOTES
 16975                                  ;
 16976                                  ;	  FileCntTotal throuth csecUsedTotal must be together!
 16977                                  	
 16978                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16979                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A13h	
 16980                                  ZeroTotals:
 16981 0000197C BF[D78A]                	mov	di,FileCntTotal
 16982                                  
 16983                                  	;mov	cx,size FileCntTotal+size FileSizTotal
 16984 0000197F B90800                  	mov	cx,8
 16985                                  
 16986 00001982 30C0                    	xor	al,al
 16987 00001984 F3AA                    	rep	stosb
 16988 00001986 C3                      	retn	
 16989                                  
 16990                                  ; ---------------------------------------------------------------------------
 16991                                  
 16992                                  ;***	CtrlCHandler - our own control-c handler
 16993                                  ;
 16994                                  ;	Make sure user's default directory gets restored. See notes
 16995                                  ;	at InstallCtrlCHandler.
 16996                                  ;
 16997                                  ;	ENTRY	control-c
 16998                                  ;
 16999                                  ;	EXIT	to OldCtrlCHandler
 17000                                  ;
 17001                                  ;	USED	DS,flags
 17002                                  ;
 17003                                  ;	EFFECTS
 17004                                  ;
 17005                                  ;	  Restore user's default directory.
 17006                                  ;
 17007                                  ;	NOTES
 17008                                  ;
 17009                                  ;	  This handler is only installed after calling PathCrunch,
 17010                                  ;	  which sets UserDir1, so the restoration will work.
 17011                                  ;
 17012                                  ;	  The original control-c vector will be restored, whether
 17013                                  ;	  or not this one is invoked, in the HeadFix routine.
 17014                                  
 17015                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17016                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A1Eh
 17017                                  
 17018                                  CtrlCHandler:	;proc	far
 17019                                  
 17020                                  ;SR;
 17021                                  ; Save all registers used: ds, dx, ax. I know ax is being used by the 
 17022                                  ;CtrlC handler, am not sure about ds & dx. Save them to be safe
 17023                                  ;
 17024 00001987 1E                      	push	ds
 17025 00001988 0E                      	push	cs
 17026 00001989 1F                      	pop	ds			; DS = TRANGROUP seg addr
 17027 0000198A 50                      	push	ax
 17028 0000198B 52                      	push	dx
 17029 0000198C E8FF0A                  	call	RestUDir		; restore user's default directory
 17030 0000198F 5A                      	pop	dx
 17031 00001990 58                      	pop	ax
 17032 00001991 1F                      	pop	ds
 17033 00001992 2EFF2E[2795]            	jmp	far [cs:OldCtrlCHandler]
 17034                                  					; go to previous int 23 handler
 17035                                  
 17036                                  ; ---------------------------------------------------------------------------
 17037                                  
 17038                                  ;M010;start
 17039                                  ;***	LowerCase - convert ASCII character in AL to lowercase
 17040                                  ;
 17041                                  ;	ENTRY	AL = character to be displayed
 17042                                  ;
 17043                                  ;	EXIT	AL is lowercase
 17044                                  ;
 17045                                  ;	USED	nothing
 17046                                  
 17047                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17048                                  LowerCase:
 17049 00001997 3C41                    	cmp	al,'A'			; ensure AL is in range 'A'-'Z'
 17050 00001999 7206                    	jb	short lcRet
 17051 0000199B 3C5A                    	cmp	al,'Z'
 17052 0000199D 7702                    	ja	short lcRet
 17053                                  
 17054 0000199F 0C20                    	or	al,20h			; convert to ASCII lowercase (UpperCase+32)-->LowerCase
 17055                                  lcRet:
 17056 000019A1 C3                      	retn
 17057                                  
 17058                                  ; ---------------------------------------------------------------------------
 17059                                  
 17060                                  ;***	LowercaseString - convert ASCIIZ string at DS:SI to lowercase
 17061                                  ;
 17062                                  ;	ENTRY	DS:SI points to start of ASCIIZ string
 17063                                  ;		ES = DS
 17064                                  ;
 17065                                  ;	EXIT	nothing
 17066                                  ;	
 17067                                  ;	USED	AL,SI
 17068                                  
 17069                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17070                                  LowercaseString:
 17071 000019A2 57                      	push	di			; save di
 17072 000019A3 89F7                    	mov	di,si			; ES:DI --> ASCIIZ string
 17073 000019A5 FC                      	cld
 17074                                  NextChar: 
 17075 000019A6 AC                      	lodsb				; get character from string into al
 17076 000019A7 08C0                    	or	al,al			; are we at end of string?
 17077 000019A9 7406                    	jz	short EndOfString
 17078                                  
 17079 000019AB E8E9FF                  	call	LowerCase		; convert character to lowercase
 17080 000019AE AA                      	stosb				; store character back into buffer
 17081 000019AF EBF5                    	jmp	short NextChar		; repeat until end of string
 17082                                  
 17083                                  EndOfString:
 17084 000019B1 5F                      	pop	di			; restore di
 17085 000019B2 C3                      	retn
 17086                                  
 17087                                  ;M010;end
 17088                                  
 17089                                  ;============================================================================
 17090                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 17091                                  ;============================================================================
 17092                                  ; 09/10/2018 - Retro DOS v3.0
 17093                                  
 17094                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1195h
 17095                                  
 17096                                  ; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17097                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1A4Ah
 17098                                  
 17099                                  ; =============== S U B	R O U T	I N E =======================================
 17100                                  
 17101                                  PAUSE:
 17102 000019B3 BA[8E7F]                	mov	dx,PAUSEMES_PTR ; 19/02/2023
 17103 000019B6 E81834                  	call	std_printf
 17104 000019B9 E898EB                  	call	GETKEYSTROKE
 17105                                  	;call	CRLF2
 17106                                  	;retn
 17107                                  	; 19/02/2023
 17108 000019BC E9120C                  	jmp	CRLF2
 17109                                  
 17110                                  ; ---------------------------------------------------------------------------
 17111                                  
 17112                                  ;****************************************************************
 17113                                  ;*
 17114                                  ;* ROUTINE:	DEL/ERASE - erase file(s)
 17115                                  ;*
 17116                                  ;* FUNCTION:	PARSE command line for file or path name and /P
 17117                                  ;*		and invoke PATHCRUNCH. If an error occurs, set
 17118                                  ;*		up an error message and transfer control to CERROR.
 17119                                  ;*		Otherwise, transfer control to NOTEST2 if /P not
 17120                                  ;*		entered or SLASHP_ERASE if /P entered.
 17121                                  ;*
 17122                                  ;* INPUT:	command line at offset 81H
 17123                                  ;*
 17124                                  ;* OUTPUT:	if no error:
 17125                                  ;*		FCB at 5ch set up with filename(s) entered
 17126                                  ;*		Current directory set to entered directory
 17127                                  ;*
 17128                                  ;****************************************************************
 17129                                  
 17130                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17131                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A57h
 17132                                  	; 10/06/2023
 17133                                  ERASE:
 17134                                  	; MSDOS 6.0
 17135                                  
 17136                                  	;assume	ds:trangroup,es:trangroup
 17137                                  
 17138 000019BF BE8100                  	mov	si,81h		;AC000; get command line
 17139 000019C2 C706[BC8A]0000          	mov	word [COMSW],0 	;AN000; clear switch indicator
 17140 000019C8 BF[F984]                	mov	di,PARSE_ERASE
 17141                                  				;AN000; Get address of PARSE_ERASE
 17142 000019CB 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 17143                                  erase_scan:
 17144 000019CD 31D2                    	xor	dx,dx		;AN000;
 17145 000019CF E8E707                  	call	Parse_With_Msg	;AC018; call parser
 17146                                  
 17147                                  	;cmp	ax,-1  ; 0FFFFh
 17148                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 17149                                  	;je	short good_line	;AN000; yes - done parsing
 17150                                  	;;cmp	ax,0
 17151                                  	;;cmp	ax,RESULT_NO_ERROR ; 0
 17152                                  	;and	ax,ax		;AC000; did we have an error?
 17153                                  	;jnz	short errj2	;AC000; yes exit
 17154                                  	; 10/06/2023
 17155 000019D2 40                      	inc	ax  ; cmp ax,-1
 17156 000019D3 743C                    	jz	short good_line ; 0FFFFh -> 0
 17157 000019D5 48                      	dec	ax  ; cmp ax,0	
 17158 000019D6 7566                    	jnz	short errj2  ; 1 -> 0
 17159                                  	; ax = 0
 17160                                  
 17161 000019D8 813E[5595][6C84]        	cmp	word [PARSE1_SYN],SLASH_P_SYN ; "/P"
 17162                                  				;AN000; was /P entered?
 17163 000019DE 741C                    	je	short set_erase_prompt
 17164                                  				;AN000; yes - go set prompt
 17165                                  ;
 17166                                  ; Must be filespec since no other matches occurred. move filename to srcbuf
 17167                                  ;
 17168 000019E0 56                      	push	si		;AC000; save position in line
 17169 000019E1 C536[5795]              	lds	si,[PARSE1_ADDR]
 17170                                  				;AC000; get address of filespec
 17171                                  	;cmp	byte [si+1],colon_char
 17172 000019E5 807C013A                	cmp	byte [si+1],':'	;AC000; drive specified?
 17173 000019E9 750B                    	jne	short erase_drive_ok
 17174                                  				;AC000; no - continue
 17175                                  	;cmp	byte [si+2],END_OF_LINE_OUT	
 17176 000019EB 807C0200                	cmp	byte [si+2],0	;AC000; was only drive entered?
 17177 000019EF 7505                    	jne	short erase_drive_ok
 17178                                  				;AC000; no - continue
 17179 000019F1 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2 
 17180                                  				;AN022; get message number in control block
 17181 000019F4 EB3D                    	jmp	short extend_setup
 17182                                  				;AC000; exit
 17183                                  erase_drive_ok:
 17184 000019F6 E8AC12                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 17185 000019F9 5E                      	pop	si		;AC000; get position back
 17186 000019FA EBD1                    	jmp	short erase_scan
 17187                                  				;AN000; continue parsing
 17188                                  set_erase_prompt:
 17189 000019FC 833E[BC8A]00            	cmp	word [COMSW],0 	;AN018; was /P already entered?
 17190 00001A01 7408                    	jz	short ok_to_set_erase_prompt
 17191                                  				;AN018; no go set switch
 17192                                  	;mov	ax,1
 17193 00001A03 B80100                  	mov	ax,MoreArgs_Ptr 
 17194                                  				;AN018; set up too many arguments
 17195 00001A06 E8BF07                  	call	setup_parse_error_msg
 17196                                  				;AN018; set up an error message
 17197 00001A09 EB33                    	jmp	short errj2	;AN018; exit
 17198                                  
 17199                                  ok_to_set_erase_prompt: 	;AN018;
 17200 00001A0B FF06[BC8A]              	inc	word [COMSW]	;AN000; indicate /p specified
 17201 00001A0F EBBC                    	jmp	short erase_scan
 17202                                  				;AN000; continue parsing
 17203                                  good_line:			;G  We know line is good
 17204 00001A11 E8660C                  	call	PathCrunch
 17205 00001A14 730D                    	jnc	short checkdr
 17206 00001A16 A1[988D]                	mov	ax,[Msg_Numb]	;AN022; get message number
 17207                                  	;cmp	ax,0		;AN022; was message flag set?
 17208 00001A19 09C0                    	or	ax,ax
 17209 00001A1B 7516                    	jnz	short extend_setup
 17210                                  				;AN022; yes - print out message
 17211                                  	;cmp	byte [DestIsDir],0
 17212 00001A1D 3806[2C8C]              	cmp	[DestIsDir],al 	; No CHDIRs worked
 17213 00001A21 750D                    	jnz	short badpath_err
 17214                                  				;AC022; see if they should have
 17215                                  checkdr:
 17216 00001A23 833E[BC8A]00            	cmp	word [COMSW],0 	;AN000; was /p specified
 17217 00001A28 7403                    	jz	short notest2j	;AN000; no - go to notest2
 17218 00001A2A E9081B                  	jmp	slashp_erase	;AN000; yes - go to slashp_erase
 17219                                  notest2j:
 17220 00001A2D E9A01A                  	jmp	notest2
 17221                                  
 17222                                  badpath_err:			;AN022; "Path not found" message
 17223 00001A30 B80300                  	mov	ax,ERROR_PATH_NOT_FOUND ; 3
 17224                                  				;AN022; set up error number
 17225                                  extend_setup:			;AN022;
 17226                                  	;mov	byte [msg_disp_class],1
 17227 00001A33 C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class
 17228                                  				;AN022; set up extended error msg class
 17229 00001A38 BA[FC7E]                	mov	dx,extend_buf_ptr
 17230                                  				;AC022; get extended message pointer
 17231 00001A3B A3[FC7E]                	mov	[extend_buf_ptr],ax
 17232                                  				;AN022; get message number in control block
 17233                                  errj2:				;AC022; exit jump
 17234 00001A3E E9110F                  	jmp	cerror		;AN022;
 17235                                  
 17236                                  ; 20/02/2023
 17237                                  %if 0
 17238                                  	; MSDOS 3.3
 17239                                  	mov	dx,BADARGSPTR
 17240                                  	mov	si,80h
 17241                                  	lodsb
 17242                                  	or	al,al
 17243                                  	jz	short ERRJ2
 17244                                  	call	SCANOFF
 17245                                  	cmp	al,0Dh		; Return key
 17246                                  	jz	short ERRJ2	; If so no parameters specified
 17247                                  	push	dx
 17248                                  	push	si
 17249                                  	mov	dx,FNOTFOUNDPTR
 17250                                  ERASE_SCAN:
 17251                                  	lodsb
 17252                                  	call	DELIM
 17253                                  	jz	short ERASE_CHKDELIMCHR
 17254                                  	cmp	al,0Dh
 17255                                  	jz	short GOOD_LINE
 17256                                  	jmp	short ERASE_SCAN
 17257                                  ERASE_CHKDELIMCHR:
 17258                                  	cmp	al,20h
 17259                                  	jg	short ERRJ2
 17260                                  	lodsb
 17261                                  	call	DELIM
 17262                                  	jz	short ERASE_CHKDELIMCHR
 17263                                  	cmp	al,0Dh
 17264                                  	jz	short GOOD_LINE
 17265                                  	mov	dx,BADARGSPTR
 17266                                  	jmp	short ERRJ2
 17267                                  GOOD_LINE:
 17268                                  	pop	si
 17269                                  	pop	dx
 17270                                  	push	si
 17271                                  	call	PATHCRUNCH
 17272                                  	jnc	short CHECKDR
 17273                                  	cmp	byte [DESTISDIR],0 ; No CHDIRs worked	
 17274                                  	jz	short CHECKDR	   ; see if they should have
 17275                                  BADCDERR:
 17276                                  	pop	si
 17277                                  	mov	dx,BADCDPTR
 17278                                  ERRJ2:
 17279                                  	jmp	CERROR
 17280                                  CHECKDR:
 17281                                  	mov	dx,FNOTFOUNDPTR
 17282                                  	pop	cx
 17283                                  	mov	al,' '
 17284                                  	;cmp	[5Dh],al
 17285                                  	cmp	[FCB+1],al
 17286                                  	jz	short ERRJ2
 17287                                  	add	cx,3
 17288                                  	cmp	si,cx
 17289                                  	jnz	short NOTEST2J
 17290                                  	mov	al,':'
 17291                                  	cmp	[si-2],al
 17292                                  	jz	short ERRJ2
 17293                                  NOTEST2J:
 17294                                  	jmp	NOTEST2
 17295                                  %endif
 17296                                  
 17297                                  ; ---------------------------------------------------------------------------
 17298                                  
 17299                                  ; ****************************************************************
 17300                                  ; *
 17301                                  ; * ROUTINE:	 CRENAME - rename file(s)
 17302                                  ; *
 17303                                  ; * FUNCTION:	 PARSE command line for one full filespec and one
 17304                                  ; *		 filename. Invoke PATHCRUNCH on the full filespec.
 17305                                  ; *		 Make sure the second filespec only contains a
 17306                                  ; *		 filename. If both openands are valid, attempt
 17307                                  ; *		 to rename the file.
 17308                                  ; *
 17309                                  ; * INPUT:	 command line at offset 81H
 17310                                  ; *
 17311                                  ; * OUTPUT:	 none
 17312                                  ; *
 17313                                  ; ****************************************************************
 17314                                  
 17315                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17316                                  CRENAME:
 17317                                  	; MSDOS 6.0
 17318                                  	;assume	ds:trangroup,es:trangroup
 17319                                  
 17320 00001A41 BE8100                  	mov	si,81h		;AC000; Point to command line
 17321 00001A44 BF[7085]                	mov	di,PARSE_RENAME
 17322                                  				;AN000; Get address of PARSE_RENAME
 17323 00001A47 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 17324 00001A49 31D2                    	xor	dx,dx		;AN000;
 17325 00001A4B E86B07                  	call	Parse_With_Msg	;AC018; call parser
 17326                                  	;cmp	ax,RESULT_NO_ERROR ; 0
 17327 00001A4E 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 17328                                  ;	jz	short crename_no_parse_error
 17329                                  				;AC000; no - continue
 17330 00001A50 752C                    	jnz	short crename_parse_error
 17331                                  				;AC000; Yes, fail. (need long jump)
 17332                                  ;
 17333                                  ;  Get first file name returned from parse into our buffer
 17334                                  ;
 17335                                  crename_no_parse_error:
 17336 00001A52 56                      	push	si		;AN000; save position in line
 17337 00001A53 C536[5795]              	lds	si,[PARSE1_ADDR]
 17338                                  				;AN000; get address of filespec
 17339 00001A57 E84B12                  	call    Move_To_SrcBuf	;AN000; move to srcbuf
 17340 00001A5A 5E                      	pop	si		;AN000; restore position in line
 17341                                  
 17342 00001A5B 31D2                    	xor	dx,dx		;AN000; clear dx
 17343 00001A5D E85907                  	call	Parse_With_Msg	;AC018; call parser
 17344                                  	;cmp	ax,RESULT_NO_ERROR
 17345 00001A60 21C0                    	and	ax,ax ; 0 ?	;AN000; did we have an error?
 17346 00001A62 751A                    	jnz	short crename_parse_error
 17347                                  				;AN000; Yes, fail.
 17348                                  ;
 17349                                  ;  Check the second file name for drive letter colon
 17350                                  ;
 17351 00001A64 56                      	push	si		;AN000; save position in line
 17352 00001A65 C536[5795]              	lds	si,[PARSE1_ADDR]
 17353                                  				;AC000; get address of path
 17354                                  	;mov	al,':'		;AC000;
 17355                                  	;cmp	[si+1],al	;AC000; Does the 2nd parm have a drive spec?
 17356 00001A69 807C013A                	cmp	byte [si+1],':'
 17357 00001A6D 7511                    	jnz	short ren_no_drive
 17358                                  				;AN000; Yes, error
 17359                                  	;mov	byte [msg_disp_class],2
 17360 00001A6F C606[FA7E]02            	mov	byte [msg_disp_class],parse_msg_class
 17361                                  				;AN000; set up parse error msg class
 17362 00001A74 BA[FC7E]                	mov	dx,extend_buf_ptr
 17363                                  				;AC000; get extended message pointer
 17364                                  	;mov	word [extend_buf_ptr],0Ah
 17365 00001A77 C706[FC7E]0A00          	mov	word [extend_buf_ptr],BadParm_Ptr
 17366                                  				;AN000; get "Invalid parameter" message number
 17367 00001A7D 5E                      	pop	si		;AN000;
 17368                                  crename_parse_error:		;AC022;
 17369 00001A7E EB64                    	jmp	short errj	;AC000;
 17370                                  
 17371                                  ;  Get second file name returned from parse into the fCB. Save
 17372                                  ;  character after file name so we can later check to make sure it
 17373                                  ;  isn't a path character.
 17374                                  
 17375                                  ren_no_drive:
 17376 00001A80 BF6C00                  	mov	di,FCB+10h ; 6Ch
 17377                                  				;AC000; set up to parse second file name
 17378                                  	;mov	ax,(Parse_File_Descriptor SHL 8) OR 01H ;AC000;
 17379 00001A83 B80129                  	mov	ax,2901h
 17380 00001A86 CD21                    	int	21h		;AC000; do the function
 17381 00001A88 AC                      	lodsb			;AC000; Load char after filename
 17382 00001A89 A2[248C]                	mov	[One_Char_Val],al
 17383                                  				;AN000; save char after filename
 17384 00001A8C 5E                      	pop	si		;AN000; get line position back
 17385                                  ;
 17386                                  ; We have source and target. See if any args beyond.
 17387                                  ;
 17388 00001A8D BF[7085]                	mov	di,PARSE_RENAME
 17389                                  				;AC000; get address of parse_rename
 17390 00001A90 E81007                  	call	parse_check_eol ;AC000; are we at end of line?
 17391 00001A93 75E9                    	jnz	short crename_parse_error
 17392                                  				;AN000; no, fail.
 17393                                  
 17394 00001A95 E8E20B                  	call	PathCrunch
 17395 00001A98 BA[0D7F]                	mov	dx,BADCPMES_PTR
 17396 00001A9B 74A1                    	jz	short errj2	; If 1st parm a dir, print error msg
 17397 00001A9D 730F                    	jnc	short notest3
 17398 00001A9F A1[988D]                	mov	ax,[Msg_Numb]	;AN022; get message number
 17399                                  	;cmp	ax,0		;AN022; was message flag set?
 17400 00001AA2 21C0                    	and	ax,ax ; 0 ?
 17401 00001AA4 758D                    	jnz	short extend_setup
 17402                                  				;AN022; yes - print out message
 17403                                  	;cmp	byte [DestIsDir],0
 17404 00001AA6 3806[2C8C]              	cmp	[DestIsDir],al	; No CHDIRs worked
 17405 00001AAA 7402                    	jz	short notest3 	; see if they should have
 17406 00001AAC EB82                    	Jmp	badpath_err	;AC022; set up error
 17407                                  notest3:
 17408 00001AAE A0[248C]                	mov	al,[One_Char_Val]
 17409                                  				;AN000; move char into AX
 17410 00001AB1 BA[2B7F]                	mov	dx,INORNOT_PTR 
 17411                                  				; Load invalid fname error ptr
 17412 00001AB4 E8B50B                  	call	pathchrcmp	; Is the char in al a path sep?
 17413 00001AB7 742B                    	jz	short errj	; Yes, error - 2nd arg must be
 17414                                  				;  filename only.
 17415                                  	;mov	ah,FCB_Rename
 17416 00001AB9 B417                    	mov	ah,17h
 17417 00001ABB BA5C00                  	mov	dx,FCB ; 5Ch
 17418 00001ABE CD21                    	int	21h
 17419 00001AC0 3CFF                    	cmp	al,0FFh		; Did an error occur??
 17420 00001AC2 7506                    	jne	short renameok
 17421                                  
 17422 00001AC4 E82902                  	call	get_ext_error_number
 17423                                  				;AN022; get extended error
 17424 00001AC7 50                      	push	ax		;AC022; Save results
 17425 00001AC8 B0FF                    	mov	al,0FFh		; Restore original error state
 17426                                  renameok:
 17427 00001ACA 50                      	push	ax
 17428 00001ACB E8C009                  	call	RestUDir
 17429 00001ACE 58                      	pop	ax
 17430 00001ACF FEC0                    	inc	al
 17431                                  	;;retnz
 17432                                  	;jz	short rn1
 17433                                  	;retn	
 17434 00001AD1 7514                    	jnz	short ret56
 17435                                  rn1:
 17436 00001AD3 58                      	pop	ax		;AC022; get the error number back
 17437 00001AD4 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2 
 17438                                  				;AN022; error file not found?
 17439 00001AD7 7408                    	jz	short use_renerr
 17440                                  				;AN022; yes - use generic error message
 17441 00001AD9 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5 
 17442                                  				;AN022; error file not found?
 17443 00001ADC 7403                    	jz	short use_renerr
 17444                                  				;AN022; yes - use generic error message
 17445 00001ADE E952FF                  	jmp	extend_setup	;AN022; need long jump - use extended error
 17446                                  
 17447                                  use_renerr:
 17448 00001AE1 BA[0A7F]                	mov	dx,RENERR_PTR	;AC022;
 17449                                  errj:
 17450 00001AE4 E96B0E                  	jmp	cerror
 17451                                  ret56:
 17452                                  ;typefil_ret:	; 20/02/2023 ; 17/04/2023	
 17453 00001AE7 C3                      	retn
 17454                                  
 17455                                  ; 20/02/2023
 17456                                  %if 0
 17457                                  	; MSDOS 3.3
 17458                                  	mov	dx,BADARGSPTR
 17459                                  	call	SCANOFF
 17460                                  	cmp	al,0Dh
 17461                                  	jz	short ERRJ2
 17462                                  	call	PATHCRUNCH
 17463                                  	mov	dx,BADCPMESPTR
 17464                                  	jz	short ERRJ2
 17465                                  	jnb	short CRENAME_NO_PARSE_ERROR
 17466                                  	cmp	byte [DESTISDIR],0 ; No CHDIRs worked	
 17467                                  	jz	short CRENAME_NO_PARSE_ERROR ; see if they should have
 17468                                  	jmp	short BADCDERR
 17469                                  
 17470                                  ;  Get first file name returned from parse into our buffer
 17471                                  
 17472                                  CRENAME_NO_PARSE_ERROR:
 17473                                  	mov	si,[PATHPOS]
 17474                                  	call	SCANOFF
 17475                                  	cmp	al,0Dh
 17476                                  	mov	dx,BADARGSPTR
 17477                                  	jz	short ERRJ
 17478                                  	mov	al,':'
 17479                                  	mov	dx,BADPARMPTR
 17480                                  	cmp	[si+1],al
 17481                                  	jz	short ERRJ
 17482                                  
 17483                                  ;  Get second file name returned from parse into the FCB. Save
 17484                                  ;  character after file name so we can later check to make sure it
 17485                                  ;  isn't a path character.
 17486                                  
 17487                                  REN_NO_DRIVE:
 17488                                  	;mov	di,6Ch
 17489                                  	mov	di,FCB+10h
 17490                                  	mov	ax,(Parse_File_Descriptor<<8)|01h ; 2901h
 17491                                  	int	21h	; DOS -	PARSE FILENAME
 17492                                  			; DS:SI	-> string to parse
 17493                                  			; ES:DI	-> buffer to fill with unopened	FCB
 17494                                  			; AL = bit mask	to control parsing
 17495                                  	mov	al,' '
 17496                                  	;cmp	[6Dh],al
 17497                                  	cmp	[FCB+10h+1],al	; Check if parameter exists
 17498                                  	jz	short ERRJ	; Error if missing parameter
 17499                                  	lodsb
 17500                                  	mov	dx,INORNOTPTR
 17501                                  	call	PATHCHRCMP
 17502                                  	jz	short ERRJ
 17503                                  	mov	ah,FCB_RENAME ; 17h
 17504                                  	mov	dx,FCB ; 5Ch
 17505                                  	int	21h	; DOS -	RENAME FILE via	FCB
 17506                                  			; DS:DX	-> FCB
 17507                                  			; FCB contains new name	starting at byte 17h.
 17508                                  	cmp	al,0FFh		; Did an error occur??	
 17509                                  	jnz	short RENAMEOK
 17510                                  	stc
 17511                                  	mov	dx,RENERRPTR
 17512                                  	call	GET_EXT_ERR_NUMBER ; get extended error
 17513                                  	push	dx
 17514                                  	mov	al,0FFh		; Restore original error state
 17515                                  RENAMEOK:
 17516                                  	push	ax
 17517                                  	call	RESTUDIR
 17518                                  	pop	ax
 17519                                  	inc	al
 17520                                  	jz	short RENAME_ERR
 17521                                  RENAME_RETN:
 17522                                  TYPELP_RET:
 17523                                  	retn
 17524                                  RENAME_ERR:
 17525                                  	pop	dx
 17526                                  ERRJ:				; Retro DOS v3.0
 17527                                  	call	STD_EPRINTF
 17528                                  	jmp	TCOMMAND
 17529                                  
 17530                                  ; ---------------------------------------------------------------------------
 17531                                  
 17532                                  ;ERRJ:
 17533                                  ;	jmp	CERROR
 17534                                  
 17535                                  ; ---------------------------------------------------------------------------
 17536                                  
 17537                                  ;TYPELP_RET:
 17538                                  ;	retn
 17539                                  
 17540                                  %endif
 17541                                  
 17542                                  ; ---------------------------------------------------------------------------
 17543                                  
 17544                                  ;****************************************************************
 17545                                  ;*
 17546                                  ;* ROUTINE:	TYPEFIL - Display the contents of a file to the
 17547                                  ;*		standard output device
 17548                                  ;*
 17549                                  ;* SYNTAX:	TYPE filespec
 17550                                  ;*
 17551                                  ;* FUNCTION:	If a valid filespec is found, read the file until
 17552                                  ;*		1Ah and display the contents to STDOUT.
 17553                                  ;*
 17554                                  ;* INPUT:	command line at offset 81H
 17555                                  ;*
 17556                                  ;* OUTPUT:	none
 17557                                  ;*
 17558                                  ;****************************************************************
 17559                                  
 17560                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17561                                  TYPEFIL:
 17562                                  	; MSDOS 6.0	
 17563                                  	;assume	ds:trangroup,es:trangroup
 17564                                  
 17565 00001AE8 BE8100                  	mov	si,81h
 17566 00001AEB BF[E784]                	mov	di,PARSE_MRDIR
 17567                                  				;AN000; Get address of PARSE_MRDIR
 17568 00001AEE 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 17569 00001AF0 31D2                    	xor	dx,dx		;AN000;
 17570 00001AF2 E8C406                  	call	Parse_With_Msg	;AC018; call parser
 17571                                  	;cmp	ax,RESULT_NO_ERROR
 17572 00001AF5 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 17573 00001AF7 751E                    	jnz	short typefil_parse_error
 17574                                  				;AN000; yes - issue error message
 17575                                  
 17576 00001AF9 56                      	push	si		;AC000; save position in line
 17577 00001AFA C536[5795]              	lds	si,[PARSE1_ADDR]
 17578                                  				;AC000; get address of filespec
 17579 00001AFE E8A411                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 17580 00001B01 5E                      	pop	si		;AC000; get position back
 17581 00001B02 BF[E784]                	mov	di,PARSE_MRDIR
 17582                                  				;AC000; get address of parse_mrdir
 17583 00001B05 E89B06                  	call	parse_check_eol ;AC000; are we at end of line?
 17584                                  	;jz	short gottarg 	;AC000; yes - continue
 17585                                  	; 20/02/2023
 17586                                  ;typefil_parse_error:		;AN000; no - set up error message and exit
 17587                                  	;jmp	cerror
 17588 00001B08 750D                    	jnz	short typefil_parse_error
 17589                                  gottarg:
 17590 00001B0A E8DF0F                  	call	SETPATH
 17591 00001B0D F606[308C]02            	test	byte [DestInfo],00000010b ; 2
 17592                                  				; Does the filespec contain wildcards
 17593 00001B12 7406                    	jz	short nowilds 	; No, continue processing
 17594 00001B14 BA[2B7F]                	mov	dx,INORNOT_PTR	; Yes, report error
 17595                                  	; 20/02/2023
 17596                                  typefil_parse_error:
 17597 00001B17 E9380E                  	jmp	cerror
 17598                                  nowilds:
 17599                                  	;mov	ax,ExtOpen SHL 8 ;AC000; open the file
 17600 00001B1A B8006C                  	mov	ax,6C00h
 17601                                  	;mov	bx,read_open_mode ; 0
 17602                                  				;AN000; get open mode for TYPE
 17603 00001B1D 31C9                    	xor	cx,cx		;AN000; no special files
 17604 00001B1F 89CB                    	mov	bx,cx ; 20/02/2023
 17605 00001B21 BA0101                  	mov	dx,101h
 17606                                  	;mov	dx,read_open_flag ; 101h
 17607                                  				;AN000; set up open flags
 17608 00001B24 BE[948C]                	mov	si,SrcBuf	;AN030; get file name
 17609 00001B27 CD21                    	int	21h
 17610 00001B29 7313                    	jnc	short typecont	; If open worked, continue. Otherwise load
 17611                                  
 17612                                  typerr: 			;AN022;
 17613 00001B2B 0E                      	push	cs		;AN022; make sure we have local segment
 17614 00001B2C 1F                      	pop	ds		;AN022;
 17615 00001B2D E8B001                  	call	Set_Ext_Error_Msg ;AN022;
 17616 00001B30 C706[158C][948C]        	mov	word [string_ptr_2],SrcBuf 
 17617                                  				;AC022; get address of failed string
 17618                                  	;mov	byte [extend_buf_sub],1
 17619 00001B36 C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst
 17620                                  				;AC022; put number of subst in control block
 17621 00001B3B E9140E                  	jmp	cerror		;AC022; exit
 17622                                  
 17623                                  typecont:
 17624 00001B3E 89C3                    	mov	bx,ax		;AC000; get Handle
 17625                                  ;M043
 17626                                  ; We should do the LSEEK for filesize only if this handle belongs to a file
 17627                                  ;and not if it belongs to a device. If device, set TypeFilSiz+2 to -1 to
 17628                                  ;indicate it is a device.
 17629                                  ;
 17630                                  	;mov	ax,(IOCTL shl 8) or 0
 17631 00001B40 B80044                  	mov	ax,4400h
 17632 00001B43 CD21                    	int	21h
 17633                                  
 17634 00001B45 F6C280                  	test	dl,80h		;is it a device?
 17635 00001B48 7408                    	jz	short not_device
 17636                                  				;no, a file
 17637                                  
 17638 00001B4A C706[5195]FFFF          	mov	word [TypeFilSiz+2],-1
 17639                                  				;indicate it is a device
 17640 00001B50 EB17                    	jmp	short dotype
 17641                                  not_device:
 17642                                  ;SR;
 17643                                  ; Find the filesize by seeking to the end and then reset file pointer to
 17644                                  ;start of file
 17645                                  
 17646                                  	;mov	ax,(LSEEK shl 8) or 2
 17647 00001B52 B80242                  	mov	ax,4202h
 17648 00001B55 31D2                    	xor	dx,dx
 17649 00001B57 89D1                    	mov	cx,dx		;seek  to end of file
 17650 00001B59 CD21                    	int	21h
 17651                                  
 17652 00001B5B A3[4F95]                	mov	[TypeFilSiz],ax
 17653 00001B5E 8916[5195]              	mov	[TypeFilSiz+2],dx ;store filesize
 17654                                  	;mov	ax,(LSEEK shl 8) or 0
 17655 00001B62 B80042                  	mov	ax,4200h
 17656 00001B65 31D2                    	xor	dx,dx
 17657 00001B67 CD21                    	int	21h	        ;reset file pointer to start
 17658                                  dotype:				;M043
 17659 00001B69 C606[588D]00            	mov	byte [zflag],0 	; Reset ^Z flag
 17660 00001B6E 8E1E[A78A]              	mov	ds,[TPA]
 17661 00001B72 31D2                    	xor	dx,dx
 17662                                  	;ASSUME	DS:NOTHING
 17663                                  typelp:
 17664 00001B74 2E803E[588D]00          	cmp	byte [cs:zflag],0
 17665                                  				;AC050; Is the ^Z flag set?
 17666                                  	;retnz			; Yes, return
 17667                                  	; 17/04/2023
 17668 00001B7A 7401                    	jz	short tf1
 17669 00001B7C C3                      	retn
 17670                                  tf1:
 17671 00001B7D 2E8B0E[C68A]            	mov	cx,[cs:BYTCNT]	;AC056; No, continue
 17672                                  
 17673                                  ;Update the filesize left to read
 17674                                  
 17675 00001B82 2E833E[5195]FF          	cmp	word [cs:TypeFilSiz+2],-1
 17676                                  				;is it a device? M043
 17677 00001B88 7431                    	je	short typ_read	;yes, just read from it; M043
 17678                                  
 17679 00001B8A 2E833E[5195]00          	cmp	word [cs:TypeFilSiz+2],0
 17680                                  				;more than 64K left?
 17681 00001B90 740D                    	jz	short lt64k	;no, do word subtraction
 17682 00001B92 2E290E[4F95]            	sub	[cs:TypeFilSiz],cx
 17683 00001B97 2E831E[5195]00          	sbb	word [cs:TypeFilSiz+2],0
 17684                                  				;update filesize
 17685 00001B9D EB1C                          	jmp	short typ_read	;do the read
 17686                                  lt64k:
 17687 00001B9F 2E3B0E[4F95]            	cmp	cx,[cs:TypeFilSiz]
 17688                                  				;readsize <= buffer?
 17689 00001BA4 7610                    	jbe	short gtbuf	; yes, just update readsize
 17690                                  
 17691                                  ;Buffer size is larger than bytes to read
 17692                                  
 17693 00001BA6 2E8B0E[4F95]            	mov	cx,[cs:TypeFilSiz]
 17694 00001BAB E361                    	jcxz	typelp_ret
 17695 00001BAD 2EC706[4F95]0000        	mov	word [cs:TypeFilSiz],0
 17696 00001BB4 EB05                    	jmp	short typ_read
 17697                                  gtbuf:
 17698 00001BB6 2E290E[4F95]            	sub	[cs:TypeFilSiz],cx
 17699                                  				;update filesize remaining
 17700                                  typ_read:
 17701                                  	;mov	ah,read
 17702 00001BBB B43F                    	mov	ah,3Fh
 17703 00001BBD CD21                    	int	21h
 17704 00001BBF 7303                    	jnc	short tf2	;M043
 17705 00001BC1 E967FF                  	jmp	typerr		;M043
 17706                                  tf2:				;M043
 17707                                  ;M043;	jc	typerr		;AN022; Exit if error
 17708                                  
 17709 00001BC4 89C1                    	mov	cx,ax
 17710 00001BC6 E346                    	jcxz	typelp_ret	;AC000; exit if nothing read
 17711 00001BC8 1E                      	push	ds
 17712 00001BC9 07                      	pop	es		; Check to see if a ^Z was read.
 17713                                  	;assume es:nothing
 17714 00001BCA 31FF                    	xor	di,di
 17715 00001BCC 50                      	push	ax
 17716 00001BCD B01A                    	mov	al,1Ah
 17717 00001BCF F2AE                    	repnz	scasb
 17718 00001BD1 58                      	pop	ax
 17719 00001BD2 91                      	xchg	ax,cx
 17720                                  	;cmp	ax,0
 17721 00001BD3 21C0                    	and	ax,ax
 17722 00001BD5 7506                    	jnz	short foundz	; Yes, handle it
 17723 00001BD7 807DFF1A                	cmp	byte [di-1],1Ah	; No, double check
 17724 00001BDB 750A                    	jnz	short typecont2	; No ^Z, continue
 17725                                  foundz:
 17726 00001BDD 29C1                    	sub	cx,ax		; Otherwise change cx so that only those
 17727 00001BDF 49                      	dec	cx		;  bytes up to but NOT including the ^Z
 17728 00001BE0 0E                      	push	cs		;  will be typed.
 17729 00001BE1 07                      	pop	es
 17730                                  	;assume es:trangroup
 17731 00001BE2 26F616[588D]            	not	byte [es:zflag]	; Turn on ^Z flag so that the routine
 17732                                  typecont2:			;  will quit after this write.
 17733 00001BE7 53                      	push	bx
 17734 00001BE8 BB0100                  	mov	bx,1
 17735                                  	;mov	ah,Write
 17736 00001BEB B440                    	mov	ah,40h
 17737 00001BED CD21                    	int	21h
 17738 00001BEF 5B                      	pop	bx
 17739 00001BF0 720C                    	jc	short Error_outputj
 17740 00001BF2 39C8                    	cmp	ax,cx
 17741 00001BF4 7503                    	jnz	short tf3	;M043
 17742 00001BF6 E97BFF                  	jmp	typelp		;M043
 17743                                  tf3:				;M043
 17744                                  ;M043;	jz	short typelp
 17745 00001BF9 49                      	dec	cx
 17746 00001BFA 39C8                    	cmp	ax,cx
 17747                                  	;;retz			; One less byte OK (^Z)
 17748                                  	;jnz	short Error_outputj
 17749                                  ;tf4:
 17750                                  	;retn
 17751 00001BFC 7410                    	jz	short typelp_ret ; 20/02/2023
 17752                                  
 17753                                  Error_outputj:
 17754 00001BFE BB0100                  	mov	bx,1
 17755                                  	;mov	ax,IOCTL SHL 8
 17756 00001C01 B80044                  	mov	ax,4400h
 17757 00001C04 CD21                    	int	21h
 17758 00001C06 F6C280                  	test	dl,80h
 17759                                  	;test	dl,devid_ISDEV
 17760                                  	;;retnz			; If device, no error message
 17761                                  	;jnz	short tf4
 17762 00001C09 7503                    	jnz	short typelp_ret
 17763 00001C0B E9440A                  	jmp	error_output
 17764                                  typelp_ret:
 17765 00001C0E C3                      	retn
 17766                                  
 17767                                  ; 20/02/2023
 17768                                  %if 0
 17769                                  	; MSDOS 3.3
 17770                                  	mov	si,81h
 17771                                  	call	SCANOFF		; Skip to first non-delim
 17772                                  	cmp	al,0Dh
 17773                                  	jnz	short GOTTARG
 17774                                  	mov	dx,BADARGSPTR
 17775                                  
 17776                                  	;jmp	CERROR
 17777                                  	jmp	short ERRJ	; No args
 17778                                  GOTTARG:
 17779                                  	call	SETPATH
 17780                                  	test	byte [DESTINFO],2
 17781                                  	jz	short NOWILDS
 17782                                  	mov	dx,INORNOTPTR
 17783                                  
 17784                                  	;jmp	CERROR
 17785                                  	jmp	short ERRJ
 17786                                  NOWILDS:
 17787                                  	mov	ax,OPEN*256 ; 3D00h
 17788                                  	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 17789                                  			; DS:DX	-> ASCIZ filename
 17790                                  			; AL = access mode
 17791                                  			; 0 - read
 17792                                  	jnc	short TYPECONT
 17793                                  	mov	dx,FNOTFOUNDPTR
 17794                                  	cmp	ax,2
 17795                                  	jz	short ERRJ
 17796                                  	mov	dx,BADCPMESPTR
 17797                                  	stc
 17798                                  	call	GET_EXT_ERR_NUMBER
 17799                                  	
 17800                                  	;jmp	CERROR
 17801                                  	jmp	short ERRJ
 17802                                  TYPECONT:
 17803                                  	mov	byte [ZFLAG],0	; Reset ^Z flag
 17804                                  	mov	bx,ax		; Handle
 17805                                  	mov	ds,[TPA]
 17806                                  	xor	dx,dx
 17807                                  TYPELP:
 17808                                  	cmp	byte [cs:ZFLAG],0 ; Is the ^Z flag set?		
 17809                                  	jnz	short RENAME_RETN ; Yes, return	
 17810                                  	mov	cx,[cs:BYTCNT]	; No, continue
 17811                                  	mov	ah,READ ; 3Fh
 17812                                  	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 17813                                  			; BX = file handle,CX = number	of bytes to read
 17814                                  			; DS:DX	-> buffer
 17815                                  	mov	cx,ax
 17816                                  	jcxz	TYPELP_RET	; exit if nothing read
 17817                                  				; Check to see if a ^Z was read.
 17818                                  	push	ds
 17819                                  	pop	es		
 17820                                  	xor	di,di
 17821                                  	push	ax
 17822                                  	mov	al,1Ah
 17823                                  	repne	scasb
 17824                                  	pop	ax
 17825                                  	xchg	ax,cx
 17826                                  	cmp	ax,0
 17827                                  	jnz	short FOUNDZ	; Yes, handle it
 17828                                  	cmp	byte [di-1],1Ah	; No, double check
 17829                                  	jnz	short TYPECONT2	; No ^Z, continue
 17830                                  FOUNDZ:
 17831                                  	sub	cx,ax		; Otherwise change cx so that only those
 17832                                  	dec	cx		;  bytes up to but NOT including the ^Z
 17833                                  	push	cs		;  will be typed.
 17834                                  	pop	es
 17835                                  	not	byte [cs:ZFLAG]	; Turn on ^Z flag so that the routine
 17836                                  				;  will quit after this write.
 17837                                  TYPECONT2:
 17838                                  	push	bx
 17839                                  	mov	bx,1
 17840                                  	mov	ah,WRITE ; 40h
 17841                                  	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 17842                                  			; BX = file handle, CX = number of bytes to write,
 17843                                  			; DS:DX -> buffer
 17844                                  	pop	bx
 17845                                  	jc	short ERROR_OUTPUTJ
 17846                                  	cmp	ax,cx
 17847                                  	jz	short TYPELP
 17848                                  	dec	cx
 17849                                  	cmp	ax,cx		; One less byte OK (^Z)
 17850                                  	jnz	short ERROR_OUTPUTJ
 17851                                  TYPEFIL_RETN:
 17852                                  	retn
 17853                                  ERROR_OUTPUTJ:
 17854                                  	mov	bx,1
 17855                                  	mov	ax,IOCTL*256 ; 4400h
 17856                                  	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 17857                                  			; BX = file or device handle
 17858                                  	;test	dl,devid_ISDEV
 17859                                  	test	dl,80h
 17860                                  	jnz	short TYPEFIL_RETN ; If device, no error message
 17861                                  	jmp	ERROR_OUTPUT
 17862                                  %endif
 17863                                  
 17864                                  ; ---------------------------------------------------------------------------
 17865                                  
 17866                                  ; VOLUME command displays the volume ID on the specified drive
 17867                                  
 17868                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17869                                  	; 10/06/2023
 17870                                  VOLUME:
 17871                                  	; MSDOS 6.0
 17872 00001C0F BE8100                  	mov	si,81h
 17873 00001C12 BF[D584]                	mov	di,PARSE_VOL
 17874                                  				;AN000; Get address of PARSE_VOL
 17875 00001C15 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 17876 00001C17 31D2                    	xor	dx,dx		;AN000;
 17877 00001C19 E89D05                  	call	Parse_With_Msg	;AC018; call parser
 17878                                  
 17879                                  	;cmp	ax,-1 ; 0FFFFh
 17880                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 17881                                  	;je	short OkVolArg	;AC000; Yes, display default volume ID
 17882                                  	;;cmp	ax,RESULT_NO_ERROR
 17883                                  	;;cmp	ax,0		;AC000; did we have an error?
 17884                                  	;or	ax,ax ; 0?
 17885                                  	;jnz	short badvolarg	;AC000; Yes, fail.
 17886                                  	; 10/06/2023
 17887 00001C1C 40                      	inc	ax  ; cmp ax,-1
 17888 00001C1D 7443                    	jz	short OkVolArg ; 0FFFFh -> 0
 17889 00001C1F 48                      	dec	ax  ; cmp ax,0
 17890 00001C20 750A                    	jnz	short badvolarg ; 1 -> 0
 17891                                  	; ax = 0
 17892                                  
 17893                                  ; We have parsed off the drive. See if there are any more chars left
 17894                                  
 17895 00001C22 BF[D584]                	mov	di,PARSE_VOL
 17896                                  				;AC000; get address of parse_vol
 17897 00001C25 31D2                    	xor	dx,dx		;AC000;
 17898 00001C27 E87905                  	call	parse_check_eol ;AC000; call parser
 17899 00001C2A 7436                    	jz	short OkVolArg	;AC000; yes, end of road
 17900                                  
 17901                                  ; The line was not interpretable. Report an error.
 17902                                  
 17903                                  badvolarg:
 17904 00001C2C E9230D                  	jmp	cerror
 17905                                  
 17906                                  ; 20/02/2023
 17907                                  %if 0
 17908                                  	; MSDOS 3.3
 17909                                  	mov	si,81h
 17910                                  	call	SCANOFF		; Skip to first non-delim
 17911                                  	;mov	ah,[5Ch]
 17912                                  	mov	ah,[FCB]
 17913                                  	;mov	byte [5Ch],0
 17914                                  	mov	byte [FCB],0
 17915                                  	cmp	al,0Dh		; are we at end of line?
 17916                                  	jz	short OKVOLARG	; Yes, display default volume ID
 17917                                  	;mov	[5Ch],ah
 17918                                  	mov	[FCB],ah
 17919                                  	lodsb
 17920                                  	lodsb
 17921                                  	cmp	al,':'
 17922                                  	jnz	short VOLUME_ERR
 17923                                  	call	SCANOFF
 17924                                  	cmp	al,0Dh
 17925                                  	jz	short OKVOLARG
 17926                                  VOLUME_ERR:
 17927                                  	mov	dx,BADDRVPTR
 17928                                  	jmp	CERROR
 17929                                  
 17930                                  ; ---------------------------------------------------------------------------
 17931                                  
 17932                                  OKVOLARG:
 17933                                  	call	CRLF2
 17934                                  	push	ds
 17935                                  	pop	es
 17936                                  	;mov	di,55h
 17937                                  	mov	di,FCB-7	; Set up extended FCB
 17938                                  	mov	al,-1
 17939                                  	stosb
 17940                                  	xor	ax,ax
 17941                                  	stosw
 17942                                  	stosw
 17943                                  	stosb
 17944                                  	mov	al,8		; Look for volume label
 17945                                  	stosb
 17946                                  	inc	di		; Skip drive byte
 17947                                  	mov	cx,11
 17948                                  	mov	al,'?'
 17949                                  	rep stosb
 17950                                  	mov	dx,DIRBUF
 17951                                  	mov	ah,Set_DMA ; 1Ah
 17952                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 17953                                  			; DS:DX	-> disk	transfer buffer
 17954                                  	;mov	dx,55h
 17955                                  	mov	dx,FCB-7
 17956                                  	mov	ah,Dir_Search_First ; 11h
 17957                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 17958                                  			; DS:DX	-> FCB
 17959                                  	jmp	PRINTVOL
 17960                                  %endif
 17961                                  
 17962                                  ; ---------------------------------------------------------------------------
 17963                                  
 17964                                  ;***	DisAppend - disable APPEND
 17965                                  ;
 17966                                  ;	ENTRY	nothing
 17967                                  ;
 17968                                  ;	EXIT	nothing
 17969                                  ;
 17970                                  ;	USED	AX,BX
 17971                                  ;
 17972                                  ;	EFFECTS
 17973                                  ;
 17974                                  ;	  APPEND is disabled. If it was active, it will be re-enabled
 17975                                  ;	  after the command finishes, by the HeadFix routine.
 17976                                  ;
 17977                                  ;	NOTE
 17978                                  ;
 17979                                  ;	  This routine must not be called more than once during a single
 17980                                  ;	  command cycle. The second call would permanently disable APPEND.
 17981                                  
 17982                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17983                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1CDFh
 17984                                  
 17985                                  	; MSDOS 6.0
 17986                                  DisAppend:
 17987 00001C2F 1E                      	push	ds			; save DS
 17988 00001C30 06                      	push	es			; save ES
 17989 00001C31 57                      	push	di
 17990                                  
 17991                                  	;mov	ax,APPENDINSTALL	; AX = Append Installed Check code
 17992 00001C32 B800B7                  	mov	ax,0B700h
 17993 00001C35 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 17994 00001C37 08C0                    	or	al,al
 17995 00001C39 7423                    	jz	short daRet		; APPEND not installed, return
 17996                                  
 17997                                  	;mov	ax,APPENDDOS		; AX = Get Append Version code
 17998 00001C3B B802B7                  	mov	ax,0B702h
 17999 00001C3E CD2F                    	int	2Fh			; talk to APPEND via multiplex
 18000 00001C40 83F8FF                  	cmp	ax,0FFFFh
 18001 00001C43 7519                    	jne	short daRet		; it's not a local version, return
 18002                                  
 18003                                  	;mov	ax,APPENDGETSTATE	; AX = Get Function State code
 18004 00001C45 B806B7                  	mov	ax,0B706h
 18005 00001C48 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 18006                                  
 18007 00001C4A 8E1E[A58A]              	mov	ds,[RESSEG]		; DS = resident seg addr
 18008                                  
 18009 00001C4E 891E[AB01]              	mov	[Append_State],bx	; Append_State = saved APPEND state
 18010 00001C52 C606[AD01]FF            	mov	byte [Append_Flag],-1	; Append_Flag = true, restore state
 18011                                  
 18012 00001C57 31DB                    	xor	bx,bx			; BX = APPEND state = off
 18013                                  	;mov	ax,APPENDSETSTATE	; AX = Set Append State code
 18014 00001C59 B807B7                  	mov	ax,0B707h
 18015 00001C5C CD2F                    	int	2Fh			; talk to APPEND via multiplex
 18016                                  daRet:	
 18017 00001C5E 5F                      	pop	di
 18018 00001C5F 07                      	pop	es			; restore ES
 18019 00001C60 1F                      	pop	ds			; restore DS
 18020                                  
 18021 00001C61 C3                      	retn
 18022                                  
 18023                                  ; ---------------------------------------------------------------------------
 18024                                  
 18025                                  ; Find the Volume ID on the disk.
 18026                                  
 18027                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18028                                  
 18029                                  	; MSDOS 6.0
 18030                                  OkVolArg:
 18031 00001C62 E8CAFF                  	call	DisAppend		; disable APPEND
 18032 00001C65 E86909                  	call	CRLF2
 18033                                  	;mov	al,blank			
 18034 00001C68 B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 18035 00001C6A E89001                  	call	PRINT_CHAR		;AN051;  before volume message
 18036 00001C6D 1E                      	push	ds
 18037 00001C6E 07                      	pop	es
 18038                                  
 18039                                  ; Volume IDs are only findable via extended FCBs or find_first with attributes
 18040                                  ; of volume_id ONLY.
 18041                                  
 18042 00001C6F BF5500                  	mov	di,FCB-7 ; 55h		; Point to extended FCB beginning
 18043 00001C72 B0FF                    	mov	al,-1			; Tag to indicate Extention
 18044 00001C74 AA                      	stosb
 18045 00001C75 31C0                    	xor	ax,ax			; Zero padding to volume label
 18046 00001C77 AB                      	stosw
 18047 00001C78 AB                      	stosw
 18048 00001C79 AA                      	stosb
 18049 00001C7A B008                    	mov	al,ATTR_VOLUME_ID ; 8	; Look for volume label
 18050 00001C7C AA                      	stosb
 18051 00001C7D 47                      	inc	di			; Skip drive byte; it is already set
 18052 00001C7E B90B00                  	mov	cx,11			; fill in remainder of file
 18053 00001C81 B03F                    	mov	al,'?'
 18054 00001C83 F3AA                    	rep	stosb
 18055                                  
 18056                                  ; Set up transfer address (destination of search first information)
 18057                                  
 18058 00001C85 BA[AE8B]                	mov	dx,DIRBUF
 18059                                  	;mov	ah,Set_DMA
 18060 00001C88 B41A                    	mov	ah,1Ah
 18061 00001C8A CD21                    	int	21h
 18062                                  
 18063                                  ; Do the search
 18064                                  
 18065 00001C8C BA5500                  	mov	dx,FCB-7 ; 55h
 18066                                  	;mov	ah,Dir_Search_First
 18067 00001C8F B411                    	mov	ah,11h
 18068 00001C91 CD21                    	int	21h
 18069                                  
 18070                                  ;********************************
 18071                                  ; Print volume ID info
 18072                                  
 18073 00001C93 50                      	push	ax			;AC000; AX return from SEARCH_FIRST for VOL ID
 18074 00001C94 A05C00                  	mov	al,[FCB]  ; [5Ch]	;AC000; get drive letter
 18075 00001C97 0440                    	add	al,'@'  ; add al,40h
 18076 00001C99 3C40                    	cmp	al,'@'
 18077 00001C9B 7505                    	jne	short drvok
 18078 00001C9D A0[B98A]                	mov	al,[CURDRV]
 18079                                  	;add	al,capital_A
 18080 00001CA0 0441                    	add	al,'A'
 18081                                  drvok:
 18082 00001CA2 A2[268C]                	mov	[vol_drv],al		;AC000; get drive letter into argument
 18083 00001CA5 58                      	pop	ax			;AC000; get return code back
 18084 00001CA6 08C0                    	or	al,al			;AC000; volume label found?
 18085 00001CA8 7405                    	jz	short Get_vol_name	;AC000; volume label exists - go get it
 18086 00001CAA BA[F77F]                	mov	dx,VolMes_Ptr_2		;AC000; set up no volume message
 18087 00001CAD EB13                    	jmp	short print_serial	;AC000; go print it
 18088                                  
 18089                                  Get_vol_name:
 18090 00001CAF BF[DF8A]                	mov	di,CHARBUF
 18091 00001CB2 89FA                    	mov	dx,di
 18092 00001CB4 BE[B68B]                	mov	si,DIRBUF+8		;AN000;  3/3/KK
 18093 00001CB7 B90B00                  	mov	cx,11			;AN000;  3/3/KK
 18094 00001CBA F3A4                    	rep	movsb			;AN000;  3/3/KK
 18095                                  
 18096 00001CBC 30C0                    	xor	al,al			;AC000; store a zero to terminate the string
 18097 00001CBE AA                      	stosb
 18098 00001CBF BA[0580]                	mov	dx,VolMes_Ptr		;AC000; set up message
 18099                                  
 18100                                  print_serial:
 18101                                  
 18102                                  ; Attempt to get the volume serial number from the disk. If an error
 18103                                  ; occurs, do not print volume serial number.
 18104                                  
 18105 00001CC2 52                      	push	dx			;AN000; save message offset
 18106                                  	;mov	ax,(GetSetMediaID SHL 8)
 18107 00001CC3 B80069                  	mov	ax,6900h		;AC036; Get the volume serial info
 18108 00001CC6 8A1E5C00                	mov	bl,[FCB] ; [5Ch]	;AN000; get drive number from FCB
 18109 00001CCA BA[7D8D]                	mov	dx,vol_ioctl_buf	;AN000;target buffer
 18110 00001CCD CD21                    	int	21h			;AN000; do the call
 18111                                  			; DOS - 4.0 internal - GET/SET DISK SERIAL NUMBER
 18112                                  			; AL = 00h get serial number / 01h set serial number
 18113                                  			; BL = drive (0=default, 1=A, 2=B, etc)
 18114                                  			; DS:DX -> disk info
 18115 00001CCF 5A                      	pop	dx			;AN000; get message offset back
 18116 00001CD0 720B                    	jc	short printvol_end	;AN000; if error, just go print label
 18117 00001CD2 E8FC30                  	call	std_printf		;AC000; go print volume message
 18118                                  	;mov	al,blank				
 18119 00001CD5 B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 18120 00001CD7 E82301                  	call	PRINT_CHAR		;AN051;  before volume message
 18121 00001CDA BA[1E80]                	mov	dx,VolSerMes_Ptr 	;AN000; get serial number message
 18122                                  printvol_end:
 18123 00001CDD E9F130                  	jmp	std_printf		;AC000; go print and exit
 18124                                  
 18125                                  ; ---------------------------------------------------------------------------
 18126                                  
 18127                                  ;****************************************************************
 18128                                  ;*
 18129                                  ;* ROUTINE:	Set_ext_error_msg
 18130                                  ;*
 18131                                  ;* FUNCTION:	Sets up extended error message for printing
 18132                                  ;*
 18133                                  ;* INPUT:	return from INT 21
 18134                                  ;*
 18135                                  ;* OUTPUT:	extended error message set up in extended error
 18136                                  ;*		buffer.
 18137                                  ;*
 18138                                  ;****************************************************************
 18139                                  	
 18140                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18141                                  
 18142                                  	; MSDOS 6.0
 18143                                  Set_Ext_Error_Msg:			;AN000;
 18144 00001CE0 E80D00                  	call	get_ext_error_number	;AC022; get the extended error
 18145 00001CE3 C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class
 18146                                  	;mov	byte [msg_disp_class],1	;AN000; set up extended error msg class
 18147 00001CE8 BA[FC7E]                	mov	dx,extend_buf_ptr 	;AC000; get extended message pointer
 18148 00001CEB A3[FC7E]                	mov	[extend_buf_ptr],ax	;AN000; get message number in control block
 18149 00001CEE F9                      	stc				;AN000; make sure carry is set
 18150 00001CEF C3                      	retn				;AN000; return
 18151                                  
 18152                                  ; ---------------------------------------------------------------------------
 18153                                  
 18154                                  ;****************************************************************
 18155                                  ;*
 18156                                  ;* ROUTINE:	Get_ext_error_number
 18157                                  ;*
 18158                                  ;* FUNCTION:	Does get extended error function call
 18159                                  ;*
 18160                                  ;* INPUT:	return from INT 21
 18161                                  ;*
 18162                                  ;* OUTPUT:	AX - extended error number
 18163                                  ;*
 18164                                  ;****************************************************************
 18165                                  
 18166                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18167                                  
 18168                                  	; MSDOS 6.0
 18169                                  get_ext_error_number:			;AN022;
 18170                                  
 18171                                  	;SaveReg <BX,CX,DX,SI,DI,BP,ES,DS>
 18172                                  					;AN022; save registers
 18173 00001CF0 53                      	push	bx
 18174 00001CF1 51                      	push	cx
 18175 00001CF2 52                      	push	dx
 18176 00001CF3 56                      	push	si
 18177 00001CF4 57                      	push	di
 18178 00001CF5 55                      	push	bp
 18179 00001CF6 06                      	push	es
 18180 00001CF7 1E                      	push	ds
 18181                                  	;mov	ah,GetExtendedError	;AN022; get extended error
 18182 00001CF8 B459                    	mov	ah,59h
 18183 00001CFA 31DB                    	xor	bx,bx			;AN022; clear BX
 18184 00001CFC CD21                    	int	21h			;AN022;
 18185                                  			; DOS - 3+ - GET EXTENDED ERROR CODE
 18186                                  			; BX = version code (0000h for DOS 3.x)
 18187                                  
 18188                                  	;RestoreReg  <DS,ES,BP,DI,SI,DX,CX,BX>
 18189                                  					;AN022; restore registers
 18190 00001CFE 1F                      	pop	ds
 18191 00001CFF 07                      	pop	es
 18192 00001D00 5D                      	pop	bp
 18193 00001D01 5F                      	pop	di
 18194 00001D02 5E                      	pop	si
 18195 00001D03 5A                      	pop	dx
 18196 00001D04 59                      	pop	cx
 18197 00001D05 5B                      	pop	bx
 18198                                  
 18199 00001D06 C3                      	retn				;AN022; return
 18200                                  
 18201                                  ;============================================================================
 18202                                  ; TCMD2A.ASM, MSDOS 6.0, 1991
 18203                                  ;============================================================================
 18204                                  ; 08/10/2018 - Retro DOS v3.0
 18205                                  
 18206                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1379h
 18207                                  
 18208                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 18209                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1DB7h
 18210                                  
 18211                                  ; ---------------------------------------------------------------------------
 18212                                  
 18213                                  ; MSDOS 6.0
 18214                                  ;***	Version - display DOS version
 18215                                  ;
 18216                                  ;	SYNTAX	ver [/debug]
 18217                                  ;
 18218                                  ;		/debug - display additional DOS configuration info
 18219                                  ;
 18220                                  ;	ENTRY	command-line tail is in PSP
 18221                                  ;
 18222                                  ;	EXIT	if successful, nothing
 18223                                  ;		if parse fails,
 18224                                  ;		  parse error message is set up (for Std_EPrintf)
 18225                                  ;		    AX = system parser error code
 18226                                  ;		    DX = ptr to message block
 18227                                  ;		  we jump to CError
 18228                                  ;
 18229                                  ;	EFFECTS
 18230                                  ;	  If parse fails, a parse error message is displayed.
 18231                                  ;	  Otherwise, version message is displayed.
 18232                                  ;	  If /debug is specified, additional DOS info is displayed.
 18233                                  
 18234                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18235                                  VERSION:
 18236                                  	;assume	ds:TRANGROUP,es:TRANGROUP
 18237                                  
 18238                                  ;	Parse command line for /debug switch.
 18239                                  
 18240 00001D07 BE8100                  	mov	si,81h			; DS:SI = ptr to command tail
 18241 00001D0A BF[8D85]                	mov	di,PARSE_VER		; ES:DI = ptr to parse block
 18242 00001D0D 31C9                    	xor	cx,cx			; CX = # positional param's found
 18243 00001D0F E8A704                  	call	Parse_With_Msg
 18244                                  
 18245 00001D12 B301                    	mov	bl,1			; BL = flag = /debug present
 18246                                  	;cmp	ax,RESULT_NO_ERROR
 18247                                  	;cmp	ax,0
 18248                                  	;je	short verPrintVer	; something parsed - must be /debug
 18249 00001D14 09C0                    	or	ax,ax
 18250 00001D16 740C                    	jz	short verPrintVer 
 18251 00001D18 FECB                    	dec	bl			; BL = flag = no /debug present
 18252                                  	;cmp	ax,END_OF_LINE ; -1
 18253 00001D1A 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 18254 00001D1D 7405                    	je	short verPrintVer	; reached end of line - ok
 18255                                  
 18256                                  ; 20/07/2024 - Retro DOS v4.1 (& v4.0) COMMAND.COM
 18257                                  %if 0
 18258                                  	je	short verPrintVer	; reached end of line - ok
 18259                                  %else
 18260 00001D1F 7414                    	je	short not_truever_sw
 18261                                  %endif
 18262                                  
 18263                                  ;	The parse failed. Error message has been set up.
 18264                                  
 18265 00001D21 E92E0C                  	jmp	cerror
 18266                                  
 18267                                  verPrintVer:
 18268                                  
 18269                                  ; 20/07/2024 - Retro DOS v4.1 (& v4.0) COMMAND.COM
 18270                                  %if 1
 18271                                  check_t_switch:
 18272 00001D24 813E[5595][AD85]        	cmp	word [PARSE1_SYN],SLASH_T_SYN ; "/T" ; /t switch
 18273 00001D2A 7509                    	jne	short not_truever_sw
 18274 00001D2C BA[BF85]                	mov	dx,RD4CMD_VER_MSG
 18275 00001D2F B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9 ; print the message
 18276 00001D31 CD21                    	int	21h
 18277 00001D33 EB43                    	jmp	short verDone
 18278                                  not_truever_sw:
 18279                                  %endif
 18280 00001D35 53                      	push	bx			; save /debug flag
 18281 00001D36 E89808                  	call	CRLF2
 18282 00001D39 E83F00                  	call	PRINT_VERSION
 18283 00001D3C E89208                  	call	CRLF2
 18284 00001D3F 5B                      	pop	bx   			; BL = /debug flag
 18285 00001D40 08DB                    	or	bl,bl
 18286 00001D42 7434                    	jz	short verDone		; /debug is false - we're done
 18287                                  
 18288                                  ;*	For /debug, display DOS internal revision and DOS location
 18289                                  ;	(low memory, HMA, or ROM).
 18290                                  
 18291                                  ;	Bugbug:	use symbols for bitmasks below.
 18292                                  
 18293                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) + 6 ; M013
 18294 00001D44 B80633                  	mov	ax,3306h
 18295 00001D47 CD21                    	int	21h
 18296                                  		; DOS - 5+ Get TRUE Version Number
 18297                                  		; (BL major, BH minor, DL revision, DH flags)
 18298 00001D49 88D0                    	mov	al,dl			;revision number in dl; M013
 18299 00001D4B 88F7                    	mov	bh,dh			;flags in dh now; M013
 18300                                  ;M032	and	al,7			; AL = DOS internal revision
 18301 00001D4D 3C19                    	cmp	al,'Z'-'A' ; 25	 ;M032	; revision in A-to-Z range?
 18302                                  	;jbe	short @f	 ;M032	; A-to-Z revision ok
 18303 00001D4F 7602                    	jbe	short ver1
 18304 00001D51 B0E9                    	mov	al,'*'-'A' ; -23 ;M032	; beyond Z, just say revision *
 18305                                  ;@@:
 18306                                  ver1:
 18307 00001D53 0441                    	add	al,'A' ; 41h		; AL = DOS internal rev letter
 18308 00001D55 A2[248C]                	mov	[One_Char_Val],al
 18309 00001D58 BA[4C81]                	mov	dx,dosrev_ptr
 18310 00001D5B E87330                  	call	std_printf		; print DOS internal revision
 18311                                  
 18312 00001D5E B104                    	mov	cl,4
 18313 00001D60 D2EF                    	shr	bh,cl			; CY = DOS in ROM
 18314 00001D62 7209                    	jc	short verRom
 18315 00001D64 D0EF                    	shr	bh,1			; CY = DOS in HMA
 18316 00001D66 720A                    	jc	short verHma
 18317                                  
 18318                                  ;	DOS isn't in ROM or HMA, so it must be in lower memory.
 18319                                  
 18320                                  	;mov	dx,offset TRANGROUP:DosLow_Ptr
 18321 00001D68 BA[6081]                	mov	dx,DosLow_Ptr
 18322 00001D6B EB08                    	jmp	short verPrintLoc
 18323                                  verRom: 
 18324                                  	;mov	dx,offset TRANGROUP:DosRom_Ptr
 18325 00001D6D BA[5A81]                	mov	dx,DosRom_Ptr
 18326 00001D70 EB03                    	jmp	short verPrintLoc
 18327                                  verHma: 
 18328                                  	;mov	dx,offset TRANGROUP:DosHma_Ptr
 18329 00001D72 BA[5D81]                	mov	dx,DosHma_Ptr
 18330                                  verPrintLoc:
 18331 00001D75 E85930                  	call	std_printf
 18332                                  verDone:
 18333 00001D78 E95608                  	jmp	CRLF2
 18334                                  
 18335                                  ; 21/02/2023
 18336                                  ;	; MSDOS 3.3
 18337                                  ;VERSION:
 18338                                  ;	call	CRLF2
 18339                                  ;	call	PRINT_VERSION
 18340                                  ;	jmp	CRLF2
 18341                                  
 18342                                  ; =============== S U B	R O U T	I N E =======================================
 18343                                  
 18344                                  	; 21/02/2023 - Retro DOS v4.0
 18345                                  PRINT_VERSION:
 18346                                  	;mov	ah,GET_VERSION ; 30h
 18347 00001D7B B430                    	mov	ah,30h
 18348 00001D7D CD21                    	int	21h	; DOS -	GET DOS	VERSION
 18349                                  			; Return: AL = major version number (00h for DOS 1.x)
 18350 00001D7F 50                      	push	ax
 18351 00001D80 30E4                    	xor	ah,ah
 18352 00001D82 A3[208C]                	mov	[Major_Ver_Num],ax
 18353 00001D85 58                      	pop	ax
 18354 00001D86 86E0                    	xchg	ah,al
 18355 00001D88 30E4                    	xor	ah,ah
 18356 00001D8A A3[228C]                	mov	[Minor_Ver_Num],ax
 18357 00001D8D BA[DE7F]                	mov	dx,VerMes_Ptr
 18358 00001D90 E93E30                  	jmp	std_printf
 18359                                  
 18360                                  ; =============== S U B	R O U T	I N E =======================================
 18361                                  
 18362                                  	; 21/02/2023 - Retro DOS v4.0
 18363                                  PRINT_PROMPT:
 18364 00001D93 1E                      	push	ds
 18365 00001D94 0E                      	push	cs
 18366 00001D95 1F                      	pop	ds		; Make sure DS is in TRANGROUP
 18367 00001D96 06                      	push	es
 18368 00001D97 E87805                  	call	find_prompt	; Look for prompt string
 18369 00001D9A 7206                    	jc	short PP0	; Can't find one
 18370 00001D9C 26803D00                	cmp	byte [es:di],0
 18371 00001DA0 7524                    	jnz	short PP1
 18372                                  PP0:				; Use default prompt
 18373 00001DA2 E86700                  	call	PRINT_DRIVE
 18374 00001DA5 B03E                    	mov	al,'>'
 18375                                  	;mov	al,SYM
 18376 00001DA7 E85300                  	call	PRINT_CHAR
 18377 00001DAA EB36                    	jmp	short PP5
 18378                                  ;PP1:
 18379                                  ;	mov	al,[es:di]	; Get a char
 18380                                  ;	inc	di
 18381                                  ;	or	al,al
 18382                                  ;	jz	short PP5	; Nul terminated
 18383                                  ;	; 21/02/2023
 18384                                  ;	cmp	al,'$' ; 24h
 18385                                  ;	;cmp	al,[DOLLAR]	; Meta character
 18386                                  ;	jz	short PP2	; Nope
 18387                                  ;	call	PRINT_CHAR
 18388                                  ;	jmp	short PP1
 18389                                  PP2:
 18390 00001DAC 268A05                  	mov	al,[es:di]
 18391 00001DAF 47                      	inc	di
 18392                                  	;mov	bx,CLSSTRING+2	; "[2J"
 18393 00001DB0 BB[6982]                	mov	bx,PROMPT_TABLE-3
 18394 00001DB3 08C0                    	or	al,al
 18395 00001DB5 742B                    	jz	short PP5
 18396                                  PP3:
 18397 00001DB7 83C303                  	add	bx,3
 18398                                  	; 21/02/2023
 18399 00001DBA E82C06                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 18400                                  	;call	UPCONV_MAPCALL  ; MSDOS 3.3
 18401 00001DBD 3A07                    	cmp	al,[bx]
 18402 00001DBF 7416                    	jz	short PP4
 18403 00001DC1 803F00                  	cmp	byte [bx],0
 18404 00001DC4 75F1                    	jnz	short PP3
 18405                                  	;jmp	short PP1
 18406                                  	; 21/02/2023
 18407                                  PP1:
 18408 00001DC6 268A05                  	mov	al,[es:di]	; Get a char
 18409 00001DC9 47                      	inc	di
 18410 00001DCA 08C0                    	or	al,al
 18411 00001DCC 7414                    	jz	short PP5	; Nul terminated
 18412                                  	; 21/02/2023
 18413 00001DCE 3C24                    	cmp	al,'$' ; 24h
 18414                                  	;cmp	al,[DOLLAR]	; Meta character
 18415 00001DD0 74DA                    	jz	short PP2	; Nope
 18416 00001DD2 E82800                  	call	PRINT_CHAR
 18417 00001DD5 EBEF                    	jmp	short PP1
 18418                                  PP4:
 18419 00001DD7 06                      	push	es
 18420 00001DD8 57                      	push	di
 18421 00001DD9 0E                      	push	cs
 18422 00001DDA 07                      	pop	es
 18423 00001DDB FF5701                  	call	word [bx+1]
 18424 00001DDE 5F                      	pop	di
 18425 00001DDF 07                      	pop	es
 18426 00001DE0 EBE4                    	jmp	short PP1
 18427                                  PP5:
 18428 00001DE2 07                      	pop	es		; Restore segments
 18429 00001DE3 1F                      	pop	ds
 18430 00001DE4 C3                      	retn
 18431                                  
 18432                                  ; ---------------------------------------------------------------------------
 18433                                  
 18434                                  PRINT_BACK:
 18435                                  	; 21/02/2023
 18436 00001DE5 BA[D880]                	mov	dx,dback_ptr
 18437 00001DE8 E9E62F                  	jmp	std_printf
 18438                                  
 18439                                  ; ---------------------------------------------------------------------------
 18440                                  
 18441                                  PRINT_EQ:
 18442 00001DEB B03D                    	mov	al,'='
 18443 00001DED EB0E                    	jmp	short PRINT_CHAR
 18444                                  
 18445                                  ; ---------------------------------------------------------------------------
 18446                                  
 18447                                  PRINT_ESC:
 18448 00001DEF B01B                    	mov	al,1Bh
 18449 00001DF1 EB0A                    	jmp	short PRINT_CHAR
 18450                                  
 18451                                  ; ---------------------------------------------------------------------------
 18452                                  
 18453                                  	; 21/02/2023
 18454                                  PRINT_G:
 18455                                  	;mov	al,[RABRACKET]
 18456 00001DF3 B03E                    	mov	al,'>' ; 3Eh
 18457 00001DF5 EB06                    	jmp	short PRINT_CHAR
 18458                                  
 18459                                  ; ---------------------------------------------------------------------------
 18460                                  
 18461                                  	; 21/02/2023
 18462                                  PRINT_L:
 18463                                  	;mov	al,[LABRACKET]
 18464 00001DF7 B03C                    	mov	al,'<' ; 3Ch
 18465 00001DF9 EB02                    	jmp	short PRINT_CHAR
 18466                                  
 18467                                  ; ---------------------------------------------------------------------------
 18468                                  
 18469                                  	; 21/02/2023
 18470                                  Print_B:
 18471                                  	;mov	al,[VBAR]
 18472 00001DFB B07C                    	mov	al,'|' ; 7Ch
 18473                                  
 18474                                  ; =============== S U B	R O U T	I N E =======================================
 18475                                  
 18476                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18477                                  PRINT_CHAR:
 18478                                  	; MSDOS 6.0
 18479                                  
 18480                                  ;	Bugbug:	Why bother with ds,es here?
 18481                                  		
 18482 00001DFD 06                      	push	es
 18483 00001DFE 1E                      	push	ds
 18484 00001DFF 07                      	pop	es
 18485 00001E00 57                      	push	di
 18486 00001E01 52                      	push	dx
 18487 00001E02 88C2                    	mov	dl,al		;AC000; Get char into al
 18488                                  	;mov	ah,STD_CON_OUTPUT
 18489                                  				;AC000; print the char to stdout
 18490 00001E04 B402                    	mov	ah,2
 18491 00001E06 CD21                    	int	21h		;AC000;
 18492 00001E08 5A                      	pop	dx
 18493 00001E09 5F                      	pop	di
 18494 00001E0A 07                      	pop	es
 18495 00001E0B C3                      	retn
 18496                                  
 18497                                  ;21/02/2023
 18498                                  %if 0
 18499                                  	; MSDOS 3.3
 18500                                  	push	es
 18501                                  	push	ds
 18502                                  	pop	es
 18503                                  	push	di
 18504                                  	push	dx
 18505                                  	mov	di,ONE_CHAR_VAL	
 18506                                  	stosb
 18507                                  	mov	dx,ONECHRVALPTR
 18508                                  	call	STD_PRINTF
 18509                                  	pop	dx
 18510                                  	pop	di
 18511                                  	pop	es
 18512                                  	retn
 18513                                  %endif
 18514                                  
 18515                                  ; ---------------------------------------------------------------------------
 18516                                  
 18517                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18518                                  PRINT_DRIVE:
 18519                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18520 00001E0C B419                    	mov	ah,19h
 18521 00001E0E CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 18522 00001E10 0441                    	add	al,'A'
 18523                                  	;add	al,[CAPITAL_A]
 18524                                  	;call	PRINT_CHAR
 18525                                  	;retn
 18526                                  	; 21/02/2023
 18527 00001E12 EBE9                    	jmp	short PRINT_CHAR
 18528                                  
 18529                                  ; ---------------------------------------------------------------------------
 18530                                  
 18531                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18532                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EB6h
 18533                                  
 18534                                  build_dir_for_prompt:
 18535 00001E14 30D2                    	xor	dl,dl
 18536 00001E16 BE[AE8B]                	mov	si,BWDBUF
 18537 00001E19 89F7                    	mov	di,si
 18538 00001E1B A0[B98A]                	mov	al,[CURDRV]
 18539 00001E1E 0441                    	add	al,'A'
 18540 00001E20 B43A                    	mov	ah,':'
 18541 00001E22 AB                      	stosw
 18542 00001E23 A0[AA8A]                	mov	al,[DIRCHAR]
 18543 00001E26 AA                      	stosb
 18544 00001E27 87F7                    	xchg	si,di
 18545 00001E29 893E[158C]              	mov	[string_ptr_2],di
 18546                                  	;mov	ah,CURRENT_DIR ; 47h
 18547 00001E2D B447                    	mov	ah,47h
 18548 00001E2F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 18549                                  			; DL = drive (0=default,1=A,etc.)
 18550                                  			; DS:SI	points to 64-byte buffer area
 18551                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 18552 00001E31 BA[C380]                	mov	dx,string_buf_ptr
 18553 00001E34 7303                    	jnc	short doprint
 18554                                  	;mov	dx,BADCURDRVPTR	; MSDOS 3.3
 18555 00001E36 BA[8B7F]                	mov	dx,BADCURDRV
 18556                                  doprint:
 18557                                  	;call	std_printf
 18558                                  	;retn
 18559 00001E39 E9952F                  	jmp	std_printf
 18560                                  
 18561                                  ; =============== S U B	R O U T	I N E =======================================
 18562                                  
 18563                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18564                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EDFh
 18565                                  
 18566                                  build_dir_for_chdir:
 18567 00001E3C E80D00                  	call	build_dir_string
 18568 00001E3F BA[AE8B]                	mov	dx,DIRBUF
 18569 00001E42 8916[158C]              	mov	[string_ptr_2],dx
 18570                                  	;mov	dx,offset trangroup:string_buf_ptr ; MSDOS 6.0
 18571                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 18572 00001E46 BA[C380]                	mov	dx,string_buf_ptr
 18573                                  	;call	std_printf
 18574                                  	;retn
 18575                                  	; 21/02/2023
 18576                                  	;jmp	short doprint
 18577 00001E49 E9852F                  	jmp	std_printf
 18578                                  
 18579                                  ; =============== S U B	R O U T	I N E =======================================
 18580                                  
 18581                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18582                                  build_dir_string:
 18583 00001E4C 8A165C00                	mov	dl,[FCB] ; mov dl,[5Ch]
 18584 00001E50 88D0                    	mov	al,dl
 18585 00001E52 0440                    	add	al,'@'	; 40h
 18586 00001E54 3C40                    	cmp	al,'@'
 18587 00001E56 7506                    	jne	short gotdrive
 18588 00001E58 0206[B98A]              	add	al,[CURDRV]
 18589 00001E5C FEC0                    	inc	al
 18590                                  gotdrive:
 18591 00001E5E 50                      	push	ax
 18592 00001E5F BE[B18B]                	mov	si,BWDBUF+3
 18593                                  	;mov	ah,CURRENT_DIR ; 47h
 18594 00001E62 B447                    	mov	ah,47h
 18595 00001E64 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 18596                                  			; DL = drive (0=default,1=A,etc.)
 18597                                  			; DS:SI	points to 64-byte buffer area
 18598 00001E66 7305                    	jnc	short dpbisok
 18599 00001E68 0E                      	push	cs
 18600 00001E69 1F                      	pop	ds
 18601 00001E6A E9ED09                  	jmp	DRVBAD
 18602                                  dpbisok:
 18603 00001E6D BF[AE8B]                	mov	di,BWDBUF
 18604 00001E70 89FA                    	mov	dx,di
 18605 00001E72 58                      	pop	ax
 18606 00001E73 B43A                    	mov	ah,':'
 18607 00001E75 AB                      	stosw
 18608 00001E76 A0[AA8A]                	mov	al,[DIRCHAR]
 18609 00001E79 AA                      	stosb
 18610 00001E7A C3                      	retn
 18611                                  
 18612                                  ; ---------------------------------------------------------------------------
 18613                                  
 18614                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18615                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1F1Fh
 18616                                  PATH:
 18617                                  	; MSDOS 6.0
 18618 00001E7B 30C0                    	xor	al,al			;AN049; Set up holding buffer
 18619 00001E7D BF[D387]                	mov	di,SRCXNAME		;AN049;  for PATH while parsing
 18620 00001E80 AA                      	stosb				;AN049; Initialize PATH to null
 18621 00001E81 4F                      	dec	di			;AN049; point to the start of buffer
 18622 00001E82 E8DE0C                  	call	PGETARG 		; Pre scan for arguments
 18623 00001E85 7460                    	jz	short disppath		; Print the current path
 18624                                  	;cmp	al,semicolon		;AC049; NUL path argument?
 18625 00001E87 3C3B                    	cmp	al,';' ; 3Bh
 18626 00001E89 7503                    	jne	short pathslp 		;AC049;
 18627 00001E8B 46                      	inc	si			;AN049; point past semicolon
 18628 00001E8C EB1B                    	jmp	short scan_white	;AC049; Yes - make sure nothing else on line
 18629                                  pathslp:					; Get the user specified path
 18630 00001E8E AC                      	lodsb				; Get a character
 18631 00001E8F 3C0D                    	cmp	al,0Dh
 18632                                  	;cmp	al,END_OF_LINE_IN	;AC049; Is it end of line?
 18633 00001E91 7434                    	je	short path_eol		;AC049; yes - end of command
 18634 00001E93 E82905                  	call	testkanj		;See if DBCS
 18635 00001E96 7405                    	jz	short notkanj2		;No - continue
 18636 00001E98 AA                      	stosb				;AC049; Yes - store the first byte
 18637 00001E99 AC                      	lodsb				;skip second byte of DBCS
 18638                                  path_hold:				;AN049;
 18639 00001E9A AA                      	stosb				;AC049; Store a byte in the PATH buffer
 18640 00001E9B EBF1                    	jmp	short pathslp		;continue parsing
 18641                                  notkanj2:
 18642 00001E9D E84905                  	call	UPCONV			;upper case the character
 18643                                  
 18644 00001EA0 3C3B                    	cmp	al,';' ; 3Bh
 18645                                  	;cmp	al,semicolon		;AC049; ';' not a delimiter on PATH
 18646 00001EA2 74F6                    	je	short path_hold		;AC049; go store it
 18647 00001EA4 E83F07                  	call	DELIM			;delimiter?
 18648 00001EA7 75F1                    	jnz	short path_hold		;AC049; no - go store character
 18649                                  scan_white:				;AN049; make sure were at EOL
 18650 00001EA9 AC                      	lodsb				;AN049; get a character
 18651 00001EAA 3C0D                    	cmp	al,0Dh
 18652                                  	;cmp	al,END_OF_LINE_IN	;AN049; end of line?
 18653 00001EAC 7419                    	je	short path_eol		;AN049; yes - go set path
 18654 00001EAE 3C20                    	cmp	al,' ' ; 20h
 18655                                  	;cmp	al,blank		;AN049; whitespace?
 18656 00001EB0 74F7                    	je	short scan_white	;AN049; yes - continue scanning
 18657                                  	;cmp	al,9
 18658 00001EB2 3C09                    	cmp	al,tab_chr ; 9		;AN049; whitespace?
 18659 00001EB4 74F3                    	je	short scan_white	;AN049; yes - continue scanning
 18660                                  
 18661 00001EB6 BA[FC7E]                	mov	dx,extend_buf_ptr 	;AN049; no - set up error message
 18662                                  	;mov	word [extend_buf_ptr],1	;AN049; get "Too many parameters" message number
 18663 00001EB9 C706[FC7E]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 18664                                  	;mov	byte [msg_disp_class],2		
 18665                                  					;AN049; set up parse error msg class
 18666 00001EBF C606[FA7E]02            	mov	byte [msg_disp_class],parse_msg_class
 18667 00001EC4 E98B0A                  	jmp	cerror			;AN049;
 18668                                  path_eol:				;AN049; Parsing was clean
 18669 00001EC7 30C0                    	xor	al,al			;AN049; null terminate the PATH
 18670 00001EC9 AA                      	stosb				;AN049;    buffer
 18671 00001ECA E84004                  	call	find_path		;AN049; Find PATH in environment
 18672 00001ECD E81404                  	call	delete_path		;AC049; Delete any offending name
 18673 00001ED0 E8CA04                  	call	scan_double_null	;AC049; Scan to end of environment
 18674 00001ED3 E89A04                  	call	move_name		;AC049; move in PATH=
 18675 00001ED6 BE[D387]                	mov	si,SRCXNAME		;AN049; Set up source as PATH buffer
 18676                                  store_path:				;AN049; Store the PATH in the environment
 18677 00001ED9 AC                      	lodsb				;AN049; Get a character
 18678                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN049; null character?
 18679 00001EDA 20C0                    	and	al,al ; al=0 ?
 18680 00001EDC 7405                    	jz	short got_paths		;AN049; yes - exit
 18681 00001EDE E82A05                  	call	store_char		;AN049; no - store character
 18682 00001EE1 EBF6                    	jmp	short store_path	;AN049; continue
 18683                                  got_paths:				;AN049; we're finished
 18684 00001EE3 31C0                    	xor	ax,ax			;	null terminate the PATH in
 18685 00001EE5 AB                      	stosw				;    	the environment
 18686 00001EE6 C3                      	retn
 18687                                  disppath:
 18688 00001EE7 E82304                  	call	find_path		;AN049;
 18689 00001EEA E80300                  	call	print_path
 18690                                  	;call	CRLF2
 18691                                  	;retn
 18692                                  	; 21/02/2023
 18693 00001EED E9E106                  	jmp	CRLF2
 18694                                  
 18695                                  ; 21/02/2023
 18696                                  %if 0
 18697                                  	; MSDOS 3.3
 18698                                  	call	FIND_PATH		; Find PATH in environment
 18699                                  	call	PGETARG			; Pre scan for arguments
 18700                                  	jz	short DISPPATH		; Print the current path
 18701                                  	call	DELETE_PATH		; Delete any offending name
 18702                                  	call	SCAN_DOUBLE_NULL	; Scan to end of environment	
 18703                                  	call	MOVE_NAME		; Move in PATH=
 18704                                  	call	PGETARG
 18705                                  	cmp	al,';'
 18706                                  	jz	short GOTPATHS
 18707                                  PATHSLP:
 18708                                  	lodsb
 18709                                  	cmp	al,0Dh			; End of line (CR) ?		
 18710                                  	jz	short GOTPATHS		; yes - exit
 18711                                  	;call	UPCONV	; MSDOS 6.0
 18712                                  	call	UPCONV_MAPCALL		; convert to uppercase
 18713                                  	cmp	al,';'			; ';' not a delimiter on PATH
 18714                                  	jz	short NOTDELIM		; go set path
 18715                                  	call	DELIM			; is it delim/null char ?
 18716                                  	jz	short GOTPATHS		; yes - exit
 18717                                  NOTDELIM:
 18718                                  	call	STORE_CHAR		; no - store character
 18719                                  	jmp	short PATHSLP
 18720                                  GOTPATHS:
 18721                                  	xor	ax,ax			; null terminate the PATH
 18722                                  	stosw				; in the environment
 18723                                  	retn
 18724                                  DISPPATH:
 18725                                  	call	PRINT_PATH
 18726                                  	call	CRLF2
 18727                                  	retn
 18728                                  %endif
 18729                                  
 18730                                  ; =============== S U B	R O U T	I N E =======================================
 18731                                  
 18732                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18733                                  print_path:
 18734 00001EF0 26803D00                	cmp	byte [es:di],0
 18735 00001EF4 750A                    	jnz	short path1
 18736                                  path0:
 18737 00001EF6 BA[5180]                	mov	dx,NULLPATH_PTR
 18738 00001EF9 0E                      	push	cs
 18739 00001EFA 07                      	pop	es
 18740 00001EFB 0E                      	push	cs
 18741 00001EFC 1F                      	pop	ds
 18742 00001EFD E9D12E                  	jmp	std_printf
 18743                                  path1:
 18744 00001F00 06                      	push	es
 18745 00001F01 1F                      	pop	ds
 18746 00001F02 83EF05                  	sub	di,5
 18747 00001F05 89FE                    	mov	si,di
 18748 00001F07 E8AD04                  	call	SCASB2		; Look for null
 18749                                  	;cmp	cx,0FFh ; 255
 18750                                  	; 21/02/2023
 18751                                  	;ch = 0
 18752 00001F0A 80F9FF                  	cmp	cl,255
 18753 00001F0D 74E7                    	je	short path0
 18754 00001F0F 0E                      	push	cs
 18755 00001F10 07                      	pop	es
 18756 00001F11 BF[FA92]                	mov	di,Arg_Buf
 18757                                  	;mov	dx,100h ; 256
 18758                                  	;sub	dx,cx
 18759                                  	;xchg	dx,cx
 18760                                  	; 21/02/2023
 18761 00001F14 F6D9                    	neg	cl ; 256-cl
 18762 00001F16 F3A4                    	rep	movsb
 18763 00001F18 BA[9980]                	mov	dx,arg_buf_ptr
 18764 00001F1B 0E                      	push	cs
 18765 00001F1C 1F                      	pop	ds
 18766 00001F1D E9B12E                  	jmp	std_printf
 18767                                  
 18768                                  ; ---------------------------------------------------------------------------
 18769                                  
 18770                                  ; ****************************************************************
 18771                                  ; *
 18772                                  ; * ROUTINE:	 CLS
 18773                                  ; *
 18774                                  ; * FUNCTION:	 Clear the screen using INT 10h. If ANSI.SYS is
 18775                                  ; *		 installed, send a control string to clear the
 18776                                  ; *		 screen.
 18777                                  ; *
 18778                                  ; * INPUT:	 command line at offset 81H
 18779                                  ; *
 18780                                  ; * OUTPUT:	 none
 18781                                  ; *
 18782                                  ; ****************************************************************
 18783                                  
 18784                                  	; MSDOS 6.0
 18785                                  
 18786                                  ANSI_installed	equ 0FFh
 18787                                  
 18788                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18789                                  CLS:
 18790                                  	;;mov	ah,Mult_ANSI		;AN000; see if ANSI.SYS installed
 18791                                  	;mov	ah,1Ah
 18792                                  	;mov	al,0			;AN000;
 18793 00001F20 B8001A                  	mov	ax,1A00h
 18794 00001F23 CD2F                    	int	2Fh			;AN000;
 18795                                  		; - Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK
 18796                                  		; Return: AL = FFh if installed
 18797 00001F25 3CFF                    	cmp	al,ANSI_installed	;AN000;
 18798 00001F27 7429                    	je	short ansicls 		;AN000; installed - go do ANSI CLS
 18799                                  
 18800                                  check_lines:
 18801                                  	;mov	ax,(IOCTL SHL 8) + generic_ioctl_handle ; 440Ch
 18802 00001F29 B80C44                  	mov	ax,440Ch		;AN000; get lines per page on display
 18803                                  	;mov	bx,stdout		;AN000; lines for stdout
 18804 00001F2C BB0100                  	mov	bx,1   ; handle
 18805                                  	;;mov	ch,ioc_sc		;AN000; type is display
 18806                                  	;mov	ch,3   ; CON device	
 18807                                  	;;mov	cl,get_generic		;AN000; get information
 18808                                  	;mov	cl,7Fh ; minor function, get display info
 18809                                  	; 25/04/2023
 18810 00001F2F B97F03                  	mov	cx,037Fh
 18811 00001F32 BA[6B8D]                	mov	dx,Display_Ioctl	;AN000;
 18812 00001F35 CD21                    	int	21h			;AN000;
 18813 00001F37 720A                    	jc	short no_variable	;AN000; function had error, use default
 18814                                  		; 21/02/2023
 18815                                  		; ds:dx = parameter block
 18816                                  		; --- https://stanislavs.org/helppc/int_21-44-c.html ---
 18817                                  		; offset 00h  byte  level (0 for DOS 4.0)
 18818                                  		;   	 01h  byte  reserved
 18819                                  		;   	 02h  word  length of following data
 18820                                  		;   	 04h  word  control flags
 18821                                  		;	       bit 0 set for blink, clear for intensity
 18822                                  		;	       bits 1 to 15 reserved
 18823                                  		;   	 06h  byte  mode type (1=text, 2=graphics)
 18824                                  		;   	 07h  byte  reserved
 18825                                  		;   	 08h  word  colors; 0=monochrome, n=bits per pixel
 18826                                  		;   	 0Ah  word  pixel columns
 18827                                  		;   	 0Ch  word  pixel rows
 18828                                  		;   	 0Eh  word  character columns
 18829                                  		;   	 10h  word  character rows
 18830                                  	
 18831                                  	;mov	ax,[LinPerPag] ; [Display_Ioctl+10h]
 18832                                  	;				;AN000; get number of rows returned
 18833                                  	;mov	dh,al			;AN000; set number of rows
 18834                                  	;mov	ax,[display_width] ; [Display_Ioctl+0Eh]
 18835                                  	;				;AN000; get number of columns returned
 18836                                  	;mov	dl,al			;AN000; set number of columns
 18837                                  	; 21/02/2023
 18838 00001F39 8A16[798D]              	mov	dl,[display_width]
 18839 00001F3D 8A36[7B8D]              	mov	dh,[LinPerPag]
 18840 00001F41 EB3B                    	jmp	short regcls		;AN000; go do cls
 18841                                  
 18842                                  no_variable:
 18843                                  	;;mov	bx,stdout		;AC000; set handle as stdout
 18844                                  	;mov	bx,1
 18845                                  	; bx = 1
 18846                                  	;mov	ax,IOCTL SHL 8		;AC000; do ioctl - get device info
 18847 00001F43 B80044                  	mov	ax,4400h
 18848 00001F46 CD21                    	int	21h			;AC000;
 18849 00001F48 F6C280                  	test	dl,80h
 18850                                  	;test	dl,devid_ISDEV		;AC000; is handle a device
 18851 00001F4B 7405                    	jz	short ansicls 		;AC000; If a file put out ANSI
 18852 00001F4D F6C210                  	test	dl,10h
 18853                                  	;test	dl,devid_SPECIAL	;AC000;
 18854 00001F50 7505                    	jnz	short cls_normal	;AC000; If not special CON, do ANSI
 18855                                  
 18856                                  ansicls:
 18857 00001F52 E85200                  	call	ansi_cls		;AN000; clear the screen
 18858 00001F55 EB2C                    	jmp	short cls_ret		;AN000; exit
 18859                                  
 18860                                  ; Get video mode
 18861                                  
 18862                                  cls_normal:				;AC000;
 18863                                  	;mov	ah,get_video_state	;AC000; set up to get video state
 18864 00001F57 B40F                    	mov	ah,0Fh
 18865                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 18866 00001F59 CD10                    	int	10h
 18867 00001F5B 3C03                    	cmp	al,3
 18868                                  	;cmp	al,video_alpha		;AC000; see if in text mode
 18869 00001F5D 760A                    	jbe	short DoAlpha
 18870 00001F5F 3C07                    	cmp	al,7
 18871                                  	;cmp	al,video_bw		;AC000; see if black & white card
 18872 00001F61 7406                    	je	short DoAlpha
 18873                                  
 18874                                  ; We are in graphics mode. Bogus IBM ROM does not scroll correctly. We will
 18875                                  ; be just as bogus and set the mode that we just got. This will blank the
 18876                                  ; screen too.
 18877                                  
 18878                                  	;mov	ah,set_video_mode	;AC000; set video mode call
 18879 00001F63 B400                    	mov	ah,0
 18880                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 18881 00001F65 CD10                    	int	10h
 18882 00001F67 EB1A                    	jmp	short cls_ret		;AC000; exit
 18883                                  
 18884                                  DoAlpha:
 18885                                  
 18886                                  ; Get video mode and number of columns to scroll
 18887                                  
 18888                                  ;M01 - INT 10 Function 0F doesn't reliably return the number of rows on some
 18889                                  ;M01   adaptors. We circumvent this by reaching directly into the BIOS data
 18890                                  ;M01   area
 18891                                  ;M01   Commented out code here is the original
 18892                                  ;M01	mov	ah,get_video_state	;AC000; set up to get current video state
 18893                                  ;M01	int	video_io_int		;AC000; do int 10h - BIOS video IO
 18894                                  ;M01	mov	dl,ah
 18895                                  ;M01	mov	dh,linesperpage 	;AC000; have 25 rows on the screen
 18896                                  
 18897                                  ;M01   Following code lifted from a fix Compaq applied to ANSI
 18898                                  
 18899 00001F69 1E                      	push	ds
 18900                                  	;mov	ax,ROMBIOS_DATA 	; GET ROM Data segment	M01
 18901 00001F6A B84000                  	mov	ax,40h
 18902 00001F6D 8ED8                    	mov	ds,ax			;  *			M01
 18903                                  
 18904                                  	;mov	dx,[CRT_Cols]		; Get Columns - assume < 256 M01
 18905 00001F6F 8A164A00                	mov	dl,[4Ah]
 18906                                  	;mov	dh,[CRT_Rows]		; GET MAX NUM OF ROWS	M01
 18907 00001F73 8A368400                	mov	dh,[84h]
 18908 00001F77 1F                      	pop	ds			;			M01
 18909                                  
 18910 00001F78 08F6                    	or	dh,dh			; Q:ZERO		M01
 18911 00001F7A 7502                    	jnz	short regcls		;  *JMP IF NO		M01
 18912                                  
 18913                                  	;mov	dh,LINESPERPAGE 	; SET TO 24 ROWS	M01
 18914                                  	; 25/04/2023
 18915 00001F7C B619                    	mov	dh,25
 18916                                  regcls:
 18917 00001F7E FEC6                    	inc	dh			; height+1		M018
 18918 00001F80 E80100                  	call	reg_cls 		; go clear the screen
 18919                                  cls_ret:
 18920 00001F83 C3                      	retn				; exit
 18921                                  
 18922                                  ; ---------------------------------------------------------------------------
 18923                                  
 18924                                  ; 21/02/2023
 18925                                  %if 0
 18926                                  	; MSDOS 3.3
 18927                                  CLS:
 18928                                  	mov	bx,STDOUT ; 1
 18929                                  	mov	ax,IOCTL*256 ; 4400h
 18930                                  	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 18931                                  			; BX = file or device handle
 18932                                  	test	dl,80h	; devid_ISDEV
 18933                                  	jz	short ANSICLS	; If a file put out ANSI
 18934                                  	test	dl,10h  ; devid_SPECIAL
 18935                                  	jz	short ANSICLS	; If not special CON, do ANSI
 18936                                  
 18937                                  	mov	ax,(GET_INTERRUPT_VECTOR<<8)|29h ; 3529h
 18938                                  	int	21h	; DOS -	2+ - GET INTERRUPT VECTOR
 18939                                  			; AL = interrupt number
 18940                                  			; Return: ES:BX	= value	of interrupt vector
 18941                                  	mov	dx,es
 18942                                  	mov	ax,(GET_INTERRUPT_VECTOR<<8)|20h ; 3520h
 18943                                  	int	21h	; DOS -	2+ - GET INTERRUPT VECTOR
 18944                                  			; AL = interrupt number
 18945                                  			; Return: ES:BX	= value	of interrupt vector
 18946                                  	mov	ax,es
 18947                                  	cmp	dx,ax	; If not default driver, do ANSI
 18948                                  	ja	short ANSICLS
 18949                                  
 18950                                  	mov	ah,0Fh
 18951                                  	int	10h	; - VIDEO - GET	CURRENT	VIDEO MODE
 18952                                  			; Return: AH = number of columns on screen
 18953                                  			; AL = current video mode
 18954                                  			; BH = current active display page
 18955                                  	cmp	al,3
 18956                                  	jbe	short DOALPHA
 18957                                  	cmp	al,7
 18958                                  	jz	short DOALPHA
 18959                                  	mov	ah,0
 18960                                  	int	10h	; - VIDEO - SET	VIDEO MODE
 18961                                  			; AL = mode
 18962                                  	retn
 18963                                  
 18964                                  DOALPHA:
 18965                                  	mov	ah,0Bh	; Set overscan to black
 18966                                  	xor	bx,bx
 18967                                  	int	10h	; - VIDEO - SET	COLOR PALETTE
 18968                                  			; BH = 00h, BL = border color
 18969                                  			; BH = 01h, BL = palette (0-3)
 18970                                  	mov	ah,0Fh
 18971                                  	int	10h	; - VIDEO - GET	CURRENT	VIDEO MODE
 18972                                  			; Return: AH = number of columns on screen
 18973                                  			; AL = current video mode
 18974                                  			; BH = current active display page
 18975                                  	mov	dl,ah
 18976                                  	dec	dl
 18977                                  	mov	dh,24
 18978                                  	xor	ax,ax
 18979                                  	mov	cx,ax
 18980                                  	mov	bx,700h
 18981                                  	mov	ah,6
 18982                                  	int	10h	; - VIDEO - SCROLL PAGE	UP
 18983                                  			; AL = number of lines to scroll window	
 18984                                  			;	(0 = blank whole window)
 18985                                  			; BH = attributes to be	used on	blanked	lines
 18986                                  			; CH,CL	= row,column of	upper left corner of window 
 18987                                  			;	  to scroll
 18988                                  			; DH,DL	= row,column of	lower right corner of window
 18989                                  	xor	dx,dx
 18990                                  	mov	bh,0
 18991                                  	mov	ah,2
 18992                                  	int	10h	; - VIDEO - SET	CURSOR POSITION
 18993                                  			; DH,DL	= row,column (0,0 = upper left)
 18994                                  			; BH = page number
 18995                                  	retn
 18996                                  
 18997                                  ANSICLS:
 18998                                  	mov	si,CLSSTRING
 18999                                  	lodsb
 19000                                  	mov	cl,al
 19001                                  	xor	ch,ch
 19002                                  	mov	ah,RAW_CON_IO ; 6
 19003                                  CLRLOOP:
 19004                                  	lodsb
 19005                                  	mov	dl,al
 19006                                  	int	21h	; DOS -	DIRECT CONSOLE I/O CHARACTER OUTPUT
 19007                                  			; DL = character <> FFh
 19008                                  			;  Return: ZF set = no character
 19009                                  			;   ZF clear = character recieved, AL = character
 19010                                  	loop	CLRLOOP
 19011                                  	retn
 19012                                  %endif
 19013                                  
 19014                                  ; ---------------------------------------------------------------------------
 19015                                  
 19016                                  ; MSDOS 6.0
 19017                                  
 19018                                  ; ****************************************************************
 19019                                  ; *
 19020                                  ; * ROUTINE:	 REG_CLS
 19021                                  ; *
 19022                                  ; * FUNCTION:	 Clear the screen using INT 10H.
 19023                                  ; *
 19024                                  ; * INPUT:	 DL = NUMBER OF COLUMNS
 19025                                  ; *		 DH = NUMBER OF ROWS
 19026                                  ; *
 19027                                  ; * OUTPUT:	 none
 19028                                  ; *
 19029                                  ; ****************************************************************
 19030                                  
 19031                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19032                                  reg_cls:
 19033                                  ; Set overscan to black.
 19034                                  
 19035 00001F84 FECE                    	dec	dh			; decrement rows and columns
 19036 00001F86 FECA                    	dec	dl			;  to zero base
 19037 00001F88 52                      	push	dx			; save rows,columns
 19038                                  	;mov	ah,set_color_palette	; set up to set the color to blank
 19039 00001F89 B40B                    	mov	ah,0Bh
 19040 00001F8B 31DB                    	xor	bx,bx
 19041                                  	;int	video_io_int		; do int 10h - BIOS video IO
 19042 00001F8D CD10                    	int	10h
 19043 00001F8F 5A                      	pop	dx			;  restore rows,colums
 19044                                  
 19045 00001F90 31C0                    	xor	ax,ax			; zero out ax
 19046 00001F92 89C1                    	mov	cx,ax			;  and cx
 19047                                  
 19048                                  ; Scroll active page
 19049                                  
 19050                                  	;mov	ah,scroll_video_page	; set up to scroll page up
 19051 00001F94 B406                    	mov	ah,6
 19052                                  	;mov	bh,video_attribute	; attribute for blank line
 19053 00001F96 B707                    	mov	bh,7
 19054 00001F98 30DB                    	xor	bl,bl			; set BL to 0
 19055                                  	;int	video_io_int		; do int 10h - BIOS video IO
 19056 00001F9A CD10                    	int	10h
 19057                                  
 19058                                  ; Seek to cursor to 0,0
 19059                                  
 19060                                  ;M022 following two lines added
 19061                                  	;mov	ah,get_video_state	; get current video page in BH
 19062 00001F9C B40F                    	mov	ah,0Fh
 19063                                  	;int	video_io_int
 19064 00001F9E CD10                    	int	10h
 19065                                  	;mov	ah,set_cursor_position	; set up to set cursor position
 19066 00001FA0 B402                    	mov	ah,2
 19067 00001FA2 31D2                    	xor	dx,dx			; row and column 0
 19068                                  ;M022	mov	bh,0
 19069                                  	;int	video_io_int		; do into 10h - BIOS video IO
 19070 00001FA4 CD10                    	int	10h
 19071                                  
 19072 00001FA6 C3                      	retn
 19073                                  
 19074                                  ; ---------------------------------------------------------------------------
 19075                                  
 19076                                  ; MSDOS 6.0
 19077                                  
 19078                                  ; ****************************************************************
 19079                                  ; *
 19080                                  ; * ROUTINE:	 ANSI_CLS
 19081                                  ; *
 19082                                  ; * FUNCTION:	 Clear the screen using by writing a control code
 19083                                  ; *		 to STDOUT.
 19084                                  ; *
 19085                                  ; * INPUT:	 none
 19086                                  ; *
 19087                                  ; * OUTPUT:	 none
 19088                                  ; *
 19089                                  ; ****************************************************************
 19090                                  
 19091                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19092                                  ansi_cls:			;AC000;
 19093 00001FA7 BE[6782]                	mov	si,CLSSTRING
 19094                                  			; db 4,1Bh,'[2J'
 19095 00001FAA AC                      	lodsb
 19096 00001FAB 88C1                    	mov	cl,al	; al = 4
 19097 00001FAD 30ED                    	xor	ch,ch
 19098                                  	;mov	ah,Raw_CON_IO
 19099 00001FAF B406                    	mov	ah,6
 19100                                  clrloop:
 19101 00001FB1 AC                      	lodsb
 19102 00001FB2 88C2                    	mov	dl,al
 19103 00001FB4 CD21                    	int	21h
 19104                                  		; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
 19105 00001FB6 E2F9                    	loop	clrloop
 19106 00001FB8 C3                      	retn
 19107                                  
 19108                                  ;============================================================================
 19109                                  ; TCMD2B.ASM, MSDOS 6.0, 1991
 19110                                  ;============================================================================
 19111                                  ; 08/10/2018 - Retro DOS v3.0
 19112                                  
 19113                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 156Dh
 19114                                  
 19115                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 19116                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 206Bh
 19117                                  
 19118                                  ; ---------------------------------------------------------------------------
 19119                                  
 19120                                  ; ****************************************************************
 19121                                  ; *
 19122                                  ; * ROUTINE:	 CTTY - Change console
 19123                                  ; *
 19124                                  ; * SYNTAX:	 CTTY device
 19125                                  ; *
 19126                                  ; * FUNCTION:	 If a valid console device is specified, CTTY will
 19127                                  ; *		 duplicate the device handle to STDIN, STDOUT and
 19128                                  ; *		 STDERR. This routine returns to LODCOM1.
 19129                                  ; *
 19130                                  ; * INPUT:	 command line at offset 81H
 19131                                  ; *
 19132                                  ; * OUTPUT:	 none
 19133                                  ; *
 19134                                  ; ****************************************************************
 19135                                  
 19136                                  	; 21/02/2023 - Retro DOS v4.0
 19137                                  	; 10/06/2023
 19138                                  CTTY:
 19139                                  	; MSDOS 6.0
 19140 00001FB9 1E                      	push	ds			;AN000; Get local ES
 19141 00001FBA 07                      	pop	es			;AN000;
 19142 00001FBB BE8100                  	mov	si,81h			;AC000; Get command argument for CTTY
 19143 00001FBE BF[7B85]                	mov	di,PARSE_CTTY
 19144                                  					;AC000; Get address of PARSE_CTTY
 19145 00001FC1 31C9                    	xor	cx,cx			;AC000; clear cx,dx
 19146 00001FC3 31D2                    	xor	dx,dx			;AC000;
 19147 00001FC5 E85323                  	call	cmd_parse		;AC000; call parser
 19148                                  
 19149                                  	;cmp	ax,-1 ; 0FFFFh
 19150                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 19151                                  	;je	short ctty_error	;AN000; yes - error
 19152                                  	;;cmp	ax,RESULT_NO_ERROR ; 0	;AN000; did an error occur
 19153                                  	;and	ax,ax ; ax > 0 ?
 19154                                  	;jnz	short ctty_error	;AN000; YES -ERROR
 19155                                  	; 10/06/2023
 19156 00001FC8 40                      	inc	ax  ; cmp ax,-1
 19157 00001FC9 7434                    	jz	short ctty_error  ; 0FFFFh -> 0
 19158 00001FCB 48                      	dec	ax  ; cmp ax,0
 19159 00001FCC 7531                    	jnz	short ctty_error  ; 1 -> 0
 19160                                  	; ax = 0
 19161                                  
 19162 00001FCE 56                      	push	si			;AN000; save position in line
 19163 00001FCF C536[5795]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 19164 00001FD3 BF[948C]                	mov	di,SrcBuf		;AN000; get address of srcbuf
 19165                                  ctty_move_filename:			;AN000; put filespec in srcbuf
 19166 00001FD6 AC                      	lodsb				;AN000; get a char from buffer
 19167 00001FD7 AA                      	stosb				;AN000; store in srcbuf
 19168                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN000; it char a terminator?
 19169 00001FD8 08C0                    	or	al,al ; al = 0 ?
 19170 00001FDA 75FA                    	jnz	short ctty_move_filename ; 26/04/2023
 19171                                  					;AN000; no - keep moving
 19172 00001FDC 5E                      	pop	si			;AN000; get line position back
 19173 00001FDD BF[7B85]                	mov	di,PARSE_CTTY		;AC000; Get address of PARSE_CTTY
 19174 00001FE0 E8C001                  	call	parse_check_eol 	;AN000; are we at end of line?
 19175                                  	;jz	short nocolon 		;AN000; yes - continue
 19176                                  	; 21/02/2023
 19177 00001FE3 751A                    	jnz	short ctty_error
 19178                                  ;ctty_error:
 19179                                  	;jmp	short isbaddev		;AC000; yes - exit
 19180                                  
 19181                                  	; 21/02/2023
 19182                                  	; MSDOS 3.3
 19183                                  	;call	SETPATH
 19184                                  	;dec	si
 19185                                  	;dec	si
 19186                                  	;cmp	byte [si],':'
 19187                                  	;jnz	short NOCOLON
 19188                                  	;mov	byte [si],0
 19189                                  nocolon:
 19190                                  	; 21/02/2023
 19191                                  	; MSDOS 6.0
 19192 00001FE5 BA[948C]                	mov	dx,SrcBuf
 19193                                  ;NOCOLON:
 19194                                  	; MSDOS 3.3 & MSDOS 6.0
 19195                                  	;;mov	ax,(OPEN SHL 8) OR 2 ; Read and write
 19196                                  	;mov	ax,(OPEN<<8)|2 ; 3D02h
 19197 00001FE8 B8023D                  	mov	ax,3D02h ; 21/02/2023
 19198 00001FEB CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 19199                                  			; DS:DX	-> ASCIZ filename
 19200                                  			; AL = access mode
 19201                                  			; 2 - read & write
 19202 00001FED 7210                    	jc	short isbaddev
 19203 00001FEF 89C3                    	mov	bx,ax
 19204                                  	;mov	ax,IOCTL*256 ; 4400h
 19205 00001FF1 B80044                  	mov	ax,4400h
 19206 00001FF4 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 19207                                  			; BX = file or device handle
 19208 00001FF6 F6C280                  	test	dl,80h
 19209 00001FF9 750C                    	jnz	short devisok
 19210                                  closedev:
 19211                                  	;mov	ah,CLOSE ; 3Eh ; Close initial handle
 19212 00001FFB B43E                    	mov	ah,3Eh
 19213 00001FFD CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 19214                                  			; BX = file handle
 19215                                  ctty_error:
 19216                                  isbaddev:
 19217 00001FFF BA[5780]                	mov	dx,BADDEV_PTR
 19218 00002002 E8CC2D                  	call	std_printf
 19219 00002005 EB40                    	jmp	short resret
 19220                                  
 19221                                  	;nop
 19222                                  devisok:
 19223                                  	; 21/02/2023
 19224                                  	; MSDOS 6.0
 19225 00002007 52                      	push	dx		;AN007; save device info
 19226                                  	; 08/06/2023 (BugFix)
 19227 00002008 A1[DB80]                	mov	ax,[acrlf_ptr]	;AN021; get message number for 0d, 0a
 19228                                  	;mov	dh,util_msg_class
 19229 0000200B B6FF                    	mov	dh,-1 ; 0FFh	;AN021; this is a utility message
 19230 0000200D 53                      	push	bx		;AN021; save handle
 19231 0000200E E8A32E                  	call	TSYSGETMSG	;AN021; get the address of the message
 19232 00002011 89F2                    	mov	dx,si		;AN021; get address into dx
 19233                                  	;mov	ax,(Write shl 8)
 19234 00002013 B80040                  	mov	ax,4000h	;AN007; write to device
 19235 00002016 B90200                  	mov	cx,2		;AN007; write two bytes
 19236 00002019 CD21                    	int	21h		;AN007;
 19237 0000201B 5B                      	pop	bx		;AN021; get back handle
 19238 0000201C 5A                      	pop	dx		;AN007; get back device info
 19239 0000201D 72DC                    	jc	short closedev	;AN007; if error, quit
 19240                                  
 19241                                  	; MSDOS 3.3 & MSDOS 6.0
 19242 0000201F 30F6                    	xor	dh,dh
 19243 00002021 80CA03                  	or	dl,3
 19244                                  	;;mov	ax,(IOCTL SHL 8) OR 1
 19245                                  	;mov	ax,(IOCTL<<8)|1 ; 4401h
 19246 00002024 B80144                  	mov	ax,4401h
 19247 00002027 CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 19248                                  			; BX = device handle,DH = 0
 19249                                  			; DL = device information to set 
 19250                                  			;	(bits 0-7 from	function 0)
 19251 00002029 53                      	push	bx
 19252 0000202A B90300                  	mov	cx,3
 19253 0000202D 31DB                    	xor	bx,bx
 19254                                  iclloop:			; Close basic handles
 19255                                  	;mov	ah,CLOSE ; 3Eh
 19256 0000202F B43E                    	mov	ah,3Eh
 19257 00002031 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 19258                                  			; BX = file handle
 19259 00002033 43                      	inc	bx
 19260 00002034 E2F9                    	loop	iclloop
 19261 00002036 5B                      	pop	bx		; Get handle
 19262                                  	;mov	ah,XDUP ; 45h
 19263 00002037 B445                    	mov	ah,45h
 19264 00002039 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 19265                                  			; BX = file handle to duplicate
 19266                                  	;mov	ah,XDUP ; 45h
 19267 0000203B B445                    	mov	ah,45h
 19268 0000203D CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 19269                                  			; BX = file handle to duplicate
 19270                                  	;mov	ah,XDUP ; 45h
 19271 0000203F B445                    	mov	ah,45h
 19272 00002041 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 19273                                  			; BX = file handle to duplicate
 19274                                  	;mov	ah,CLOSE ; 3Eh
 19275 00002043 B43E                    	mov	ah,3Eh
 19276 00002045 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 19277                                  			; BX = file handle
 19278                                  resret:
 19279 00002047 8E1E[A58A]              	mov	ds,[RESSEG]
 19280 0000204B 1E                      	push	ds
 19281                                  	;mov	ax,[18h]
 19282 0000204C A11800                  	mov	ax,[PDB.JFN_TABLE] ; Get new 0 and 1
 19283 0000204F A3[8A01]                	mov	[Io_Save],ax
 19284                                  	;;;mov	ax,31Eh ; MSDOS 3.3
 19285                                  	;;mov	ax,LODCOM1
 19286                                  	;;mov	ax,offset DATARES:TrnLodCom1_Trap  ; MSDOS 6.0
 19287                                  	;mov	ax,175h ; MSDOS 6.0
 19288 00002052 B8[7400]                	mov	ax,TrnLodCom1_Trap
 19289 00002055 50                      	push	ax
 19290                                  
 19291 00002056 CB                      	retf		; Far return
 19292                                  
 19293                                  ; ---------------------------------------------------------------------------
 19294                                  
 19295                                  ;****************************************************************
 19296                                  ;*
 19297                                  ;* ROUTINE:	CHCP - Change code page internal command
 19298                                  ;*		(added DOS 3.30 07/21/86)
 19299                                  ;*
 19300                                  ;* SYNTAX:	CHCP [xxx]
 19301                                  ;*		where xxx is a valid code page
 19302                                  ;*
 19303                                  ;* FUNCTION:	If xxx is specified, CHCP will use INT 21H function
 19304                                  ;*		6402H to set the code page to xxxx. If no parameters
 19305                                  ;*		are specified, CHCP will use INT 21H function 6401H
 19306                                  ;*		to get global code page and display it to the user.
 19307                                  ;*
 19308                                  ;* INPUT:	command line at offset 81H
 19309                                  ;*
 19310                                  ;* OUTPUT:	none
 19311                                  ;*
 19312                                  ;****************************************************************
 19313                                  
 19314                                  NLSFUNC_installed equ  0FFh
 19315                                  set_global_cp	  equ  2
 19316                                  get_global_cp	  equ  1
 19317                                  
 19318                                  	; 21/02/2023 - Retro DOS v4.0
 19319                                  	; 09/06/2023
 19320                                  	; 10/06/2023
 19321                                  CHCP:
 19322                                  	; MSDOS 6.0
 19323 00002057 1E                      	push	ds		;AN000; Get local ES
 19324 00002058 07                      	pop	es		;AN000;
 19325 00002059 BE8100                  	mov	si,81h		;AC000; Get command argument for CHCP
 19326 0000205C BF[9284]                	mov	di,PARSE_CHCP
 19327                                  				;AN000; Get address of PARSE_CHCP
 19328 0000205F 31C9                    	xor	cx,cx		;AC000; clear cx,dx
 19329 00002061 31D2                    	xor	dx,dx		;AC000;
 19330 00002063 E85301                  	call    Parse_With_Msg	;AC018; call parser
 19331                                  
 19332                                  	;cmp	ax,-1
 19333                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 19334                                  	;;jne	short setcp	;AC000; no go get number & set code page
 19335                                  	;je	short getcp	;AC000; yes - no parm - get code page
 19336                                  ;setcp:
 19337                                  	;;cmp	ax,0
 19338                                  	;;cmp	ax,RESULT_NO_ERROR
 19339                                  	;			;AN000; did we have an error?
 19340                                  	;;jne	short cp_error	;AC018; yes - go issue message
 19341                                  	;and	ax,ax ; ax > 0 ?
 19342                                  	;jnz	short cp_error	
 19343                                  	; 10/06/2023
 19344 00002066 40                      	inc	ax  ; cmp ax,-1	
 19345 00002067 745C                    	jz	short getcp ; 0FFFFh -> 0
 19346 00002069 48                      	dec	ax  ; cmp ax,0
 19347 0000206A 7556                    	jnz	short cp_error ; 1 -> 0
 19348                                  	; ax = 0
 19349                                  
 19350                                  	;;push	cx		;AN000; save positional count
 19351                                  	;mov	bx,PARSE1_ADDR	;AN000; get number returned
 19352                                  	;;mov	cx,[bx]		;AN000;  into cx
 19353                                  	;;mov	[system_cpage],cx
 19354                                  	;			;AN000; save user input number
 19355                                  	;;pop	cx		;AC000; restore positional count
 19356                                  	;; 21/02/2023
 19357                                  	;mov	di,[bx]
 19358                                  	;mov	[system_cpage],di
 19359                                  	; 09/06/2023	
 19360 0000206C 8B1E[5795]              	mov	bx,[PARSE1_ADDR]
 19361 00002070 891E[0F8C]              	mov	[system_cpage],bx
 19362                                  	;
 19363 00002074 BF[9284]                	mov	di,PARSE_CHCP	;AN000; Get address of PARSE_CHCP
 19364 00002077 E82901                  	call	parse_check_eol ;AN000; are we at end of line?
 19365 0000207A 7546                    	jnz	short cp_error	;AC000; no - exit
 19366                                  okset:
 19367                                  	;;mov	ah,NLSFUNC	;AN000; see if NLSFUNC installed
 19368                                  	;mov	ah,14h
 19369                                  	;mov	al,0		;AN000;
 19370 0000207C B80014                  	mov	ax,1400h
 19371 0000207F CD2F                    	int	2Fh		;AN000;
 19372                                  	;cmp	al,0FFh
 19373 00002081 3CFF                    	cmp	al,NLSFUNC_installed
 19374                                  				;AN000;
 19375 00002083 7405                    	je	short got_NLS 	;AN000; Yes - continue
 19376 00002085 BA[857F]                	mov	dx,NLSFUNC_PTR
 19377                                  				;AN000; no - set up error message
 19378 00002088 EB38                    	jmp	short cp_error	;AN000; error exit
 19379                                  
 19380                                  ; 21/02/2023
 19381                                  %if 0
 19382                                  	; MSDOS 3.3
 19383                                  	mov	si,81h
 19384                                  	call	SCANOFF
 19385                                  	cmp	al,0Dh ; CR
 19386                                  	jnz	short SETCP
 19387                                  	jmp	short GETCP
 19388                                  
 19389                                  	;nop
 19390                                  SETCP:
 19391                                  	xor	bx,bx
 19392                                  	mov	cx,bx
 19393                                  	mov	ax,bx
 19394                                  GET_CP_DIGIT:
 19395                                  	lodsb
 19396                                  	cmp	al,'0'
 19397                                  	jb	short CHRNOTNUMBER
 19398                                  	cmp	al,'9'
 19399                                  	ja	short CHRNOTNUMBER
 19400                                  	sub	al,'0'
 19401                                  	inc	cl
 19402                                  	cmp	cl,4
 19403                                  	ja	short CHCP_BADPARM
 19404                                  	mov	dx,bx
 19405                                  	shl	dx,1
 19406                                  	shl	dx,1
 19407                                  	add	bx,dx
 19408                                  	shl	bx,1
 19409                                  	add	bx,ax
 19410                                  	jmp	short GET_CP_DIGIT
 19411                                  CP_NEXTCHR:
 19412                                  	lodsb
 19413                                  CHRNOTNUMBER:
 19414                                  	cmp	al,' '		; SPACE
 19415                                  	jz	short CP_NEXTCHR
 19416                                  	cmp	al,9		; TAB
 19417                                  	jz	short CP_NEXTCHR
 19418                                  	cmp	al,0Dh		; CR
 19419                                  	jz	short SET_CP_TBL_NUM
 19420                                  CHCP_BADPARM:
 19421                                  	mov	dx,BADPARMPTR
 19422                                  	jmp	CERROR
 19423                                  ;GOT_NLS:
 19424                                  %endif
 19425                                  	; 21/02/2023
 19426                                  got_NLS:
 19427                                  	; MSDOS 6.0
 19428 0000208A 8B1E[0F8C]              	mov	bx,[system_cpage]
 19429                                  				;AN000; get user input code page
 19430                                  ;SET_CP_TBL_NUM:
 19431                                  	;mov	[SYSTEM_CPAGE],bx ; MSDOS 3.3
 19432                                  	;
 19433                                  	; MSDOS 3.3 & MSDOS 6.0
 19434                                  	;;mov	ah,GETSETCDPG 	;get/set global code page function
 19435                                  	;mov	ah,66h
 19436                                  	;;mov	al,set_global_cp 
 19437                                  	;mov	al,2		;minor - set
 19438                                  	; 26/04/2023
 19439 0000208E B80266                  	mov	ax,6602h
 19440 00002091 CD21                    	int	21h
 19441                                  		; DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE
 19442                                  		; BX = active code page
 19443                                  		; DX = system code page (active page at boot time)
 19444                                  
 19445 00002093 733F                    	jnc	short chcp_return
 19446                                  				;no error - exit
 19447                                  
 19448 00002095 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2
 19449 00002098 7515                    	jnz	short chcp_other_error
 19450                                  
 19451                                  	;mov	ah,GETEXTENDEDERROR ; 59h
 19452 0000209A B459                    	mov	ah,59h
 19453 0000209C 31DB                    	xor	bx,bx
 19454 0000209E CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 19455                                  			; BX = version code (0000h for DOS 3.x)
 19456                                  
 19457 000020A0 83F80D                  	cmp	ax,ERROR_INVALID_DATA ; 0Dh ; invalid code page
 19458 000020A3 7505                    	jne	short no_countrysys ; 26/04/2023
 19459                                  	;mov	dx,FNOTFOUNDPTR ; MSDOS 3.3
 19460 000020A5 BA[887F]                	mov	dx,INV_CODE_PAGE
 19461                                  	;jmp	cerror
 19462 000020A8 EB18                    	jmp	short cp_error
 19463                                  
 19464                                  	; 21/02/2023
 19465                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 19466                                  no_countrysys:
 19467                                  ;M045;	mov	byte [msg_disp_class],ext_msg_class	   
 19468                                  ;					;AN000; set up extended error msg class
 19469                                  ;M045;	mov	dx,extend_buf_ptr	;AC000; get extended message pointer
 19470                                  ;M045;	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND
 19471                                  					;AN000; get message number in control block
 19472 000020AA BA[6981]                	mov	dx,NoCntry_Ptr
 19473 000020AD EB13                    	jmp	short cp_error
 19474                                  
 19475                                  chcp_other_error:		; end of p716
 19476                                  	;mov	ah,GETEXTENDEDERROR ; 59h ;error - see what it is
 19477 000020AF B459                    	mov	ah,59h
 19478 000020B1 31DB                    	xor	bx,bx
 19479 000020B3 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 19480                                  			; BX = version code (0000h for DOS 3.x)
 19481 000020B5 83F841                  	cmp	ax,65		;was it access denied?
 19482 000020B8 7505                    	jne	short none_set	;no - assume all failed
 19483 000020BA BA[697F]                	mov	dx,cp_not_all_ptr
 19484                                  				;set up message
 19485                                  	;jmp	cerror		;AC000; error exit
 19486 000020BD EB03                    	jmp     short cp_error
 19487                                  none_set:
 19488 000020BF BA[5B7F]                	mov	dx,cp_not_set_ptr
 19489                                  				;set up message
 19490                                  cp_error:
 19491 000020C2 E98D08                  	jmp	cerror		;exit
 19492                                  getcp:
 19493                                  	;;mov	ah,GETSETCDPG ; 66h
 19494                                  	;mov	ah,66h		;get/set global code page function	
 19495                                  	;;mov	al,get_global_cp ; 1
 19496                                  	;mov	al,1		;minor - get
 19497                                  	; 26/04/2023
 19498 000020C5 B80166                  	mov	ax,6601h
 19499 000020C8 CD21                    	int	21h	; DOS -	3.3+ - GET GLOBAL CODE PAGE TABLE
 19500 000020CA 891E[0F8C]              	mov	[system_cpage],bx
 19501                                  				;get active cp for output
 19502 000020CE BA[777F]                	mov	dx,cp_active_ptr
 19503 000020D1 E8FD2C                  	call	std_printf	;print it out
 19504                                  chcp_return:
 19505 000020D4 C3                      	retn
 19506                                  
 19507                                  ; ---------------------------------------------------------------------------
 19508                                  
 19509                                  ; ****************************************************************
 19510                                  ; *
 19511                                  ; * ROUTINE:	 TRUENAME
 19512                                  ; *
 19513                                  ; * FUNCTION:	 Entry point for the internal TRUENAME command.
 19514                                  ; *		 Parses the command line. If a path is found, set
 19515                                  ; *		 SRCXNAME to path. If only a drive letter is found,
 19516                                  ; *		 set SRCXNAME to the drive letter. If no path
 19517                                  ; *		 is found, set the path of SRCXNAME to dot (.) for
 19518                                  ; *		 current directory. Use the NAME TRANSLATE system
 19519                                  ; *		 call to get the real name and  then display the 
 19520                                  ; *		 real name. If an error occurs issue an error
 19521                                  ; *		 message and transfer control to  CERROR.
 19522                                  ; *
 19523                                  ; * INPUT:	 command line at offset 81H
 19524                                  ; *
 19525                                  ; * OUTPUT:	 none
 19526                                  ; *
 19527                                  ; ****************************************************************
 19528                                  
 19529                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19530                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2197h
 19531                                  	; 10/06/2023
 19532                                  TRUENAME:				;AN000; TRUENAME entry point
 19533 000020D5 1E                      	push	ds			;AN000; Get local ES
 19534 000020D6 07                      	pop	es			;AN000;
 19535 000020D7 BE8100                  	mov	si,81h			;AN000; Get command line
 19536 000020DA BF[F084]                	mov	di,PARSE_CHDIR		;AN000; Get address of PARSE_CHDIR
 19537 000020DD 31C9                    	xor	cx,cx			;AN000; clear cx,dx
 19538 000020DF 31D2                    	xor	dx,dx			;AN000;
 19539 000020E1 E8D500                  	call	Parse_With_Msg		;AC018; call parser
 19540                                  
 19541 000020E4 BF[D387]                	mov	di,SRCXNAME		;AN000; get address of srcxname
 19542                                  	;cmp	ax,0FFFFh
 19543                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 19544                                  	;je	short tn_eol		;AN000; yes - go process
 19545                                  	;; 22/02/2023
 19546                                  	;;cmp	ax,0
 19547                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 19548                                  	;;jne	short tn_parse_error	;AN000; yes - go issue message
 19549                                  	;and	ax,ax ; ax = 0 ?
 19550                                  	;jnz	short tn_parse_error ; no, parse error
 19551                                  	; 10/06/2023
 19552 000020E7 40                      	inc	ax  ; 0FFFFh -> 0 ; cmp ax,0FFFFh
 19553 000020E8 7433                    	jz	short tn_eol ; ah = 0 ; *
 19554 000020EA 48                      	dec	ax  ; 1 -> 0 ; cmp ax, 0
 19555 000020EB 752D                    	jnz	short tn_parse_error
 19556                                  
 19557                                  	;cmp	byte [PARSE1_TYPE],6
 19558 000020ED 803E[5395]06            	cmp	byte [PARSE1_TYPE],result_drive
 19559                                  					;AN000; was a drive entered?
 19560                                  	;je	short tn_drive		;AN000; yes - go process
 19561                                  	;jmp	short tn_filespec	;AN000; nothing else - must be filespec
 19562                                  	; 23/02/2023
 19563 000020F2 7512                    	jne	short tn_filespec
 19564                                  
 19565                                  ;tn_eol: 
 19566                                  ;	;mov	ah,0			;AN000; no parameters on line
 19567                                  ;	mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 19568                                  ;	;mov	al,dot_chr		;AN000;   for current dir
 19569                                  ;	mov	al,'.'
 19570                                  ;	stosw				;AN000; store in srcxname
 19571                                  ;	jmp	short tn_doit		;AN000; go do command
 19572                                  
 19573                                  tn_drive:				;AN000; a drive was entered
 19574 000020F4 56                      	push	si			;AN000; save position in line
 19575 000020F5 BE[5795]                	mov	si,PARSE1_ADDR		;AN000; get address of drive
 19576 000020F8 AC                      	lodsb				;AN000; get the drive number
 19577 000020F9 0440                    	add	al,"A"-1 ; 40h		;AN000; convert it to char
 19578 000020FB AA                      	stosb				;AN000; store it in srcxname
 19579                                  	;mov	ax,dot_colon		;AN000; get colon and . and
 19580 000020FC B83A2E                  	mov	ax,':.' ; 2E3Ah ; ah=".", al=":"
 19581 000020FF AB                      	stosw				;AN000;  store in srcxname
 19582                                  	;mov	al,0
 19583 00002100 B000                    	mov	al,END_OF_LINE_OUT	;AN000; put a terminator char
 19584 00002102 AA                      	stosb				;AN000;
 19585 00002103 5E                      	pop	si			;AN000; get line position back
 19586 00002104 EB0C                    	jmp	short tn_check_eol	;AN000; check to make sure eol
 19587                                  
 19588                                  tn_filespec:				;AN000; a filespec was entered
 19589 00002106 56                      	push	si			;AN000; save position in line
 19590 00002107 C536[5795]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 19591                                  
 19592                                  tn_move_filename:			;AN000; put filespec in srcxname
 19593 0000210B AC                      	lodsb				;AN000; get a char from buffer
 19594 0000210C AA                      	stosb				;AN000; store in srcxname
 19595                                  	;;cmp	al,0
 19596                                  	;cmp	al,END_OF_LINE_OUT	;AN000; it char a terminator?
 19597 0000210D 08C0                    	or	al,al ; al = 0 ?
 19598 0000210F 75FA                    	jnz	short tn_move_filename	;AN000; no - keep moving
 19599 00002111 5E                      	pop	si			;AN000; get line position back
 19600                                  
 19601                                  tn_check_eol:				;AN000; make sure no extra parms
 19602 00002112 BF[F084]                	mov	di,PARSE_CHDIR		;AN000; get address of parse_chdir
 19603 00002115 E88B00                  	call	parse_check_eol 	;AN000; are we at end of line?
 19604 00002118 7406                    	jz	short tn_doit 		;AN000; Yes - do the command
 19605                                  tn_parse_error: 			;AN000; A parse error occurred
 19606 0000211A E93508                  	jmp	cerror			;AN000; Go to error routine
 19607                                  
 19608                                  tn_eol: 
 19609                                  	;23/02/2023
 19610                                  	;;mov	ah,0			;AN000; no parameters on line
 19611                                  	;mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 19612                                  	;;mov	al,dot_chr		;AN000;   for current dir
 19613                                  	;mov	al,'.'
 19614                                  	; 10/06/2023
 19615                                  	;mov	ax,002Eh
 19616                                  	; ah = 0 ; *
 19617 0000211D B02E                    	mov	al,'.'  ;dot_chr ; 2Eh
 19618                                  	;
 19619 0000211F AB                      	stosw				;AN000; store in srcxname
 19620                                  	; 23/02/2023
 19621                                  	;jmp	short tn_doit		;AN000; go do command
 19622                                  
 19623                                  tn_doit:				;AN000;
 19624 00002120 BE[D387]                	mov	si,SRCXNAME		;AN000; set up srcxname as source
 19625 00002123 BF[0489]                	mov	di,COMBUF		;AN000; set up combuf as target (need big target)
 19626                                  	;mov	ah,xNameTrans		;AN000; do name translate call
 19627 00002126 B460                    	mov	ah,60h
 19628 00002128 CD21                    	int	21h			;AN000;
 19629 0000212A 7311                    	jnc	short tn_print_xname	;AN000; If no error - print result
 19630                                  
 19631 0000212C E8B1FB                  	call	Set_Ext_Error_Msg	;AN000; get extended message
 19632 0000212F C706[158C][D387]        	mov	word [string_ptr_2],SRCXNAME
 19633                                  					;AN000; get address of failed string
 19634                                  	;mov	byte [extend_buf_sub],1
 19635 00002135 C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst
 19636                                  					;AN000; put number of subst in control block
 19637 0000213A E91508                  	jmp	cerror			;AN000; Go to error routine
 19638                                  
 19639                                  tn_print_xname: 			;AN000;
 19640 0000213D C706[158C][0489]        	mov	word [string_ptr_2],COMBUF
 19641                                  					;AN000; Set up address of combuf
 19642 00002143 BA[C380]                	mov	dx,string_buf_ptr	;AN000; Set up address of print control block
 19643 00002146 E88804                  	call	CRLF2			;AN000; print a crlf
 19644                                  	;call	Printf_Crlf		;AN000; print it out
 19645                                  	;retn				;AN000;
 19646                                  	; 23/02/2023
 19647 00002149 E9772C                  	jmp	Printf_Crlf
 19648                                  
 19649                                  ; ---------------------------------------------------------------------------
 19650                                  
 19651                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19652                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2219h
 19653                                  _$EXIT:
 19654                                  	; MSDOS 6.0
 19655 0000214C 1E                      	push	ds			;AN000; save data segment
 19656 0000214D 8E1E[A58A]              	mov	ds,[RESSEG]		;AN000; get resident data segment
 19657                                  	;assume	ds:resgroup		;AN000;
 19658                                  
 19659 00002151 803E[8D01]00            	cmp	byte [PermCom],0	;AN045; is this a permanent COMMAND?
 19660 00002156 740A                    	jz	short free_com		;AN045; no - free everything
 19661                                  
 19662                                  ;	We're a permanent command.
 19663                                  ;	Unless this is a singlecom (int 2Eh), don't deallocate transient.
 19664                                  
 19665 00002158 833E[8E01]FF            	cmp	word [SingleCom],-1	;M034
 19666 0000215D 7412                    	je	short no_reset		;M034 ; exit singlecom
 19667 0000215F E9A2DF                  	jmp	TCOMMAND		;permanent command, recycle
 19668                                  
 19669                                  free_com:
 19670                                  	;mov	ax,(multdos shl 8 or message_2f)
 19671 00002162 B82E12                  	mov	ax,122Eh		;AN060; reset parse message pointers
 19672                                  	;mov	dl,SET_CRITICAL_MSG	;AN000; set up critical error message address
 19673 00002165 B205                    	mov	dl,5
 19674 00002167 8B3E[A301]              	mov	di,[Crit_Msg_Off] 	;AN000; old offset of critical messages
 19675 0000216B 8E06[A501]              	mov	es,[Crit_Msg_Seg] 	;AN000; old segment of critical messages
 19676 0000216F CD2F                    	int	2Fh			;AN000; go set it
 19677                                  no_reset:				;AN045;
 19678 00002171 1F                      	pop	ds			;AN000; restore local data segment
 19679                                  	;assume	ds:trangroup		;AN000;
 19680                                  ;M040
 19681                                  ; Restore user directory if the restore flag is set. RestUDir1 checks for
 19682                                  ;this, restores user dir if flag is set and resets the flag.
 19683                                  
 19684                                  	;invoke	RestUDir1		;restore user dir if needed ;M040
 19685 00002172 E80C03                  	call	RestUDir1
 19686 00002175 8E06[A58A]              	mov	es,[RESSEG]
 19687                                  	;assume	es:resgroup
 19688                                  
 19689 00002179 26A1[2901]              	mov	ax,[es:Parent]
 19690                                  	;mov	[es:16h],ax
 19691                                  	;mov	[es:PDB_Parent_PID],ax
 19692 0000217D 26A31600                	mov	[es:PDB.PARENT_PID],ax
 19693 00002181 26A1[2B01]              	mov	ax,[es:OldTerm]
 19694                                  	;mov	[es:0Ah],ax
 19695                                  	;mov	[es:PDB_Exit],ax
 19696 00002185 26A30A00                	mov	[es:PDB.EXIT],ax
 19697 00002189 26A1[2D01]              	mov	ax,[es:OldTerm+2]
 19698                                  	;mov	[es:0Ch],ax
 19699                                  	;mov	[es:PDB_Exit+2],ax
 19700 0000218D 26A30C00                	mov	[es:PDB.EXIT+2],ax
 19701                                  
 19702 00002191 06                      	push	es
 19703 00002192 8E06[B58A]              	mov	es,[TRAN_TPA]
 19704                                  	;mov	ah,DEALLOC
 19705 00002196 B449                    	mov	ah,49h
 19706 00002198 CD21                    	int	21h			; Now running in "free" space
 19707 0000219A 07                      	pop	es
 19708                                  
 19709                                  	;mov	ah,Exit
 19710 0000219B B44C                    	mov	ah,4Ch
 19711                                  	;mov	al,byte ptr RetCode
 19712 0000219D 26A0[8501]              	mov	al,[es:RetCode]
 19713 000021A1 CD21                    	int	21h
 19714                                  
 19715                                  	;..........
 19716                                  
 19717                                  ; 23/02/2023
 19718                                  %if 0
 19719                                  _$EXIT:
 19720                                  	; MSDOS 3.3
 19721                                  	mov	es,[RESSEG]
 19722                                  	mov	ax,[es:PARENT]
 19723                                  	;mov	[es:16h],ax
 19724                                  	mov	[es:PDB.PARENT_PID],ax
 19725                                  	mov	ax,[es:OLDTERM]
 19726                                  	;mov	[es:0Ah],ax
 19727                                  	mov	[es:PDB.EXIT],ax
 19728                                  	mov	ax,[es:OLDTERM+2]
 19729                                  	;mov	[es:0Ch],ax
 19730                                  	mov	[es:PDB.EXIT+2],ax
 19731                                  	push	es
 19732                                  	mov	es,[TRAN_TPA]
 19733                                  	mov	ah,DEALLOC ; 49h
 19734                                  	int	21h	; DOS -	2+ - FREE MEMORY
 19735                                  			; ES = segment address of area to be freed
 19736                                  	pop	es
 19737                                  	mov	ah,EXIT ; 4Ch
 19738                                  	;mov	al,byte [0BEAh] ;  MSDOS 3.3 COMMAND.cOm offset 168Ah
 19739                                  	mov	al,byte [es:RETCODE]
 19740                                  	int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
 19741                                  ;;here:
 19742                                  ;;	jmp	short here
 19743                                  %endif
 19744                                  
 19745                                  ; ---------------------------------------------------------------------------
 19746                                  
 19747                                  ; MSDOS 6.0
 19748                                  ; ****************************************************************
 19749                                  ; *
 19750                                  ; * ROUTINE:	 PARSE_CHECK_EOL
 19751                                  ; *
 19752                                  ; * FUNCTION:	 Calls parser to see if end of line occurred.
 19753                                  ; *		 If not end of line, set up to print parse
 19754                                  ; *		 error message. ASSUMES NO MORE PARAMETERS ARE
 19755                                  ; *		 EXPECTED!
 19756                                  ; *
 19757                                  ; * INPUT:	 DS:SI	  last output from parser
 19758                                  ; *		 ES:DI	  points to parse block
 19759                                  ; *		 CX	  last output from parser
 19760                                  ; *
 19761                                  ; * OUTPUT:	 AX	  parser return code
 19762                                  ; *
 19763                                  ; *		 if end of line found
 19764                                  ; *		     zero flag set
 19765                                  ; *		 else
 19766                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 19767                                  ; *
 19768                                  ; ****************************************************************
 19769                                  
 19770                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19771                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2270h
 19772                                  
 19773                                  parse_check_eol:
 19774 000021A3 31D2                    	xor	dx,dx			;AN000;
 19775 000021A5 8936[0D8C]              	mov	[parse_last],si 	;AN018; save start of parameter
 19776 000021A9 E86F21                  	call	cmd_parse		;AN000; call parser
 19777 000021AC 3CFF                    	cmp	al,-1 ; 0FFh
 19778                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN000; Are we at end of line?
 19779 000021AE 7408                    	je	short parse_good_eol	;AN000; yes - no problem
 19780                                  	;cmp	ax,0
 19781                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; was any error found?
 19782 000021B0 21C0                    	and	ax,ax ; ax = 0 ?
 19783 000021B2 7501                    	jnz	short ok_to_setup_pmsg	;AN018; yes - continue
 19784 000021B4 40                      	inc	ax			;AN018; set AX to 1 and turn off zero flag
 19785                                  ok_to_setup_pmsg:
 19786 000021B5 E81000                  	call	setup_parse_error_msg	;AN018; go set up error message
 19787                                  parse_good_eol:
 19788                                  parse_msg_good:	; 23/02/2023
 19789 000021B8 C3                      	retn				;AN000;
 19790                                  
 19791                                  ; ---------------------------------------------------------------------------
 19792                                  
 19793                                  ; MSDOS 6.0
 19794                                  ; ****************************************************************
 19795                                  ; *
 19796                                  ; * ROUTINE:	 PARSE_WITH_MSG
 19797                                  ; *
 19798                                  ; * FUNCTION:	 Calls parser. If an error occurred, the error
 19799                                  ; *		 message is set up.
 19800                                  ; *
 19801                                  ; * INPUT:	 DS:SI	  last output from parser
 19802                                  ; *		 ES:DI	  points to parse block
 19803                                  ; *		 CX	  last output from parser
 19804                                  ; *
 19805                                  ; * OUTPUT:	 AX	  parser return code
 19806                                  ; *
 19807                                  ; *		 if no error
 19808                                  ; *		     outputs from parser
 19809                                  ; *		 else
 19810                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 19811                                  ; *		     error message set up for STD_PRINTF
 19812                                  ; *
 19813                                  ; ****************************************************************
 19814                                  
 19815                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19816                                  Parse_With_Msg:
 19817 000021B9 8936[0D8C]              	mov	[parse_last],si 	;AN018; save start of parameter
 19818 000021BD E85B21                  	call	cmd_parse		;AN018; call parser
 19819 000021C0 3CFF                    	cmp	al,-1 ; 0FFh
 19820                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN018; Are we at end of line?
 19821 000021C2 74F4                    	je	short parse_msg_good	;AN018; yes - no problem
 19822                                  	;cmp	ax,0
 19823                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; did an error occur
 19824 000021C4 09C0                    	or	ax,ax ; ax = 0 ?
 19825 000021C6 74F0                    	jz	short parse_msg_good	;AN018; yes - no problem
 19826                                  	; 23/02/2023
 19827                                  	;call	setup_parse_error_msg	;AN018; go set up error message
 19828                                  ;parse_msg_good:
 19829                                  	;retn				;AN018;
 19830                                  	; 23/02/2023
 19831                                  	;jmp	short setup_parse_error_msg	
 19832                                  
 19833                                  ; ---------------------------------------------------------------------------
 19834                                  
 19835                                  ; MSDOS 6.0
 19836                                  ; ****************************************************************
 19837                                  ; *
 19838                                  ; * ROUTINE:	 SETUP_PARSE_ERROR_MSG
 19839                                  ; *
 19840                                  ; * FUNCTION:	 Calls parser.	If an error occurred, the error
 19841                                  ; *		 message is set up.
 19842                                  ; *
 19843                                  ; * INPUT:	 AX	     Parse error number
 19844                                  ; *		 SI	     Set to past last parameter
 19845                                  ; *		 Parse_last  Set to start of last parameter
 19846                                  ; *
 19847                                  ; * OUTPUT:	 MSG_DISPLAY_CLASS set to parse error
 19848                                  ; *		 error message set up for STD_PRINTF
 19849                                  ; *
 19850                                  ; ****************************************************************
 19851                                  
 19852                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19853                                  setup_parse_error_msg:
 19854 000021C8 C606[FA7E]02            	mov	byte [msg_disp_class],parse_msg_class
 19855                                  	;mov	byte [msg_disp_class],2	;AC018; Set up parse message class
 19856 000021CD BA[FC7E]                	mov	dx,extend_buf_ptr	;AC018; get extended message pointer
 19857 000021D0 C60400                  	mov	byte [si],END_OF_LINE_OUT ; 0
 19858                                  					;AC018; terminate the parameter string
 19859 000021D3 A3[FC7E]                	mov	[extend_buf_ptr],ax	;AC018; get message number in control block
 19860 000021D6 83F802                  	cmp	ax,2
 19861                                  	;cmp	ax,LessArgs_Ptr 	;AC018; if required parameter missing
 19862 000021D9 740D                    	je	short setup_parse_msg_ret
 19863                                  					;AN018;    no subst
 19864 000021DB 8B36[0D8C]              	mov	si,[parse_last] 	;AC018; get start of parameter
 19865 000021DF 8936[158C]              	mov	[string_ptr_2],si 	;AC018; get address of failed string
 19866 000021E3 C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst
 19867                                  					;AC018; put number of subst in control block
 19868                                  	;mov	byte [extend_buf_sub],1
 19869                                  setup_parse_msg_ret:
 19870 000021E8 46                      	inc	si			;AN018; make sure zero flag not set
 19871 000021E9 C3                      	retn				;AC018;
 19872                                  
 19873                                  ;============================================================================
 19874                                  ; TENV.ASM, MSDOS 6.0, 1991
 19875                                  ;============================================================================
 19876                                  ; 08/10/2018 - Retro DOS v3.0
 19877                                  
 19878                                  ; TITLE	Part6 COMMAND Transient routines.
 19879                                  
 19880                                  ;	Environment utilities and misc. routines
 19881                                  
 19882                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1690h
 19883                                  
 19884                                  ; 23/02/2023 - Retro DOS v4.0 (& v4.1)
 19885                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 22BDh
 19886                                  
 19887                                  ; ---------------------------------------------------------------------------
 19888                                  
 19889                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 19890                                  ADD_PROMPT:
 19891 000021EA E8FC00                  	call	delete_prompt	; Delete any existing prompt
 19892 000021ED E8AD01                  	call	scan_double_null
 19893                                  
 19894                                  ADD_PROMPT2:
 19895 000021F0 56                      	push	si
 19896 000021F1 E89B01                  	call	GETARG
 19897 000021F4 5E                      	pop	si
 19898 000021F5 7501                    	jnz	short ADD_PROMPT3
 19899                                  ADD_PROMPT_RETN:
 19900 000021F7 C3                      	retn
 19901                                  ADD_PROMPT3:			; Pre scan for arguments
 19902 000021F8 E87501                  	call	move_name	; Move in name
 19903 000021FB E89101                  	call	GETARG
 19904 000021FE 56                      	push	si
 19905 000021FF EB53                    	jmp	short ADD_NAME
 19906                                  
 19907                                  ;break	The SET command
 19908                                  
 19909                                  ; Input: DS:SI points to a CR terminated string
 19910                                  ; Output: carry flag is set if no room
 19911                                  ;	  otherwise name is added to environment
 19912                                  
 19913                                  DISP_ENVJ:
 19914 00002201 E9BC00                  	jmp	DISP_ENV
 19915                                  
 19916                                  ADD_NAME_TO_ENVIRONMENT:
 19917 00002204 E88801                  	call	GETARG
 19918 00002207 74F8                    	jz	short DISP_ENVJ
 19919                                  
 19920                                  ; check if line contains exactly one equals sign
 19921                                  
 19922 00002209 31DB                    	xor	bx,bx		; = count is 0
 19923 0000220B 56                      	push	si		; Save pointer to beginning of line
 19924                                  EQLP:
 19925 0000220C AC                      	lodsb			; Get a char
 19926 0000220D 3C0D                    	cmp	al,13 ; 0Dh	; IF CR we're all done
 19927 0000220F 740F                    	je	short QUEQ	
 19928 00002211 3C3D                    	cmp	al,'='		; Look for = sign	
 19929 00002213 75F7                    	jne	short EQLP	; not there, get next char
 19930 00002215 FEC3                    	inc	bl		; Otherwise increment EQ count
 19931 00002217 803C0D                  	cmp	byte [si],13	; Look for CR following = sign
 19932 0000221A 75F0                    	jne	short EQLP
 19933 0000221C FEC7                    	inc	bh		; Set BH=1 means no parameters
 19934 0000221E EBEC                    	jmp	short EQLP	; And look for more
 19935                                  QUEQ:
 19936 00002220 5E                      	pop	si		; Restore beginning of line
 19937 00002221 FECB                    	dec	bl		; Zero flag means only one EQ
 19938 00002223 7406                    	jz	short ONEQ	; Good line
 19939 00002225 BA[947F]                	mov	dx,SYNTMES_PTR
 19940 00002228 E92707                  	jmp	cerror
 19941                                  ONEQ:
 19942 0000222B 53                      	push	bx
 19943 0000222C E8BD00                  	call	delete_name_in_environment
 19944 0000222F 5B                      	pop	bx
 19945 00002230 FECF                    	dec	bh
 19946 00002232 74C3                    	jz	short ADD_PROMPT_RETN
 19947 00002234 E86601                  	call	scan_double_null
 19948 00002237 89FB                    	mov	bx,di		; Save ptr to beginning of env var name
 19949 00002239 E83401                  	call	move_name
 19950 0000223C 56                      	push	si
 19951 0000223D 87DF                    	xchg	bx,di		; Switch ptrs to beginning and end of
 19952                                  				;  env var name
 19953                                  		
 19954                                  ; We want to special-case COMSPEC. This is to reduce the amount of code
 19955                                  ; necessary in the resident for re-reading the transient. Let's look for
 19956                                  ; COMSPEC=
 19957                                  
 19958 0000223F C606[4284]00            	mov	byte [comspec_flag],0 ; MSDOS 6.0 ; clear flag ; M024
 19959 00002244 BE[7881]                	mov	si,COMSPECSTR ; "COMSPEC="
 19960 00002247 B90400                  	mov	cx,4
 19961 0000224A F3A7                    	repe	cmpsw
 19962 0000224C 7504                    	jnz	short NOT_COMSPEC
 19963                                  				; Zero set => exact match
 19964 0000224E FE06[4284]              	inc	byte [comspec_flag] ; MSDOS 6.0 ; comspec is changing ; M024
 19965                                  	;mov	byte [COMSPEC_FLAG],1
 19966                                  NOT_COMSPEC:
 19967 00002252 89DF                    	mov	di,bx		; Load ptr to end of env var name
 19968                                  ADD_NAME:
 19969 00002254 5E                      	pop	si		; Add the value of the new env var
 19970 00002255 56                      	push	si		;  to the environment.
 19971                                  ADD_NAME1:
 19972 00002256 AC                      	lodsb
 19973 00002257 3C0D                    	cmp	al,13 ; 0Dh
 19974 00002259 7405                    	je	short ADD_NAME_RET
 19975 0000225B E8AD01                  	call	store_char
 19976 0000225E EBF6                    	jmp	short ADD_NAME1
 19977                                  ADD_NAME_RET:
 19978 00002260 5E                      	pop	si
 19979 00002261 803E[4284]00            	cmp	byte [comspec_flag],0
 19980                                  				; If the new env var is comspec,	
 19981                                  ADD_NAME_JZ_RET:
 19982 00002266 748F                    	jz	short ADD_PROMPT_RETN 
 19983                                  				;  copy the value into the
 19984                                  				;  comspec var in the resident
 19985                                  
 19986                                  ; We have changed the COMSPEC variable. We need to update the resident
 19987                                  ; pieces necessary to reread in the info. First, skip all delimiters
 19988                                  
 19989 00002268 E87303                  	call	scanoff
 19990 0000226B 8E06[A58A]              	mov	es,[RESSEG]	;  comspec var in the resident
 19991                                  
 19992                                  ; Make sure that the printer knows where the beginning of the string is
 19993                                  
 19994 0000226F BF[3601]                	mov	di,ComSpec
 19995 00002272 89FB                    	mov	bx,di
 19996                                  
 19997                                  ; Generate drive letter for display
 19998                                  
 19999 00002274 31C0                    	xor	ax,ax		;g assume no drive first
 20000 00002276 26A2[7F01]              	mov	[es:ComDrv],al
 20001                                  	; 23/02/2023
 20002                                  	; MSDOS 6.0 (& 5.0)
 20003 0000227A 50                      	push	ax		;AN000; 3/3/KK
 20004 0000227B 8A04                    	mov	al,[si]		;AN000; 3/3/KK
 20005 0000227D E83F01                  	call	testkanj	;AN000; 3/3/KK	
 20006 00002280 58                      	pop	ax		;AN000; 3/3/KK
 20007 00002281 7518                    	jnz	short _GOTDRIVE
 20008                                  	;
 20009 00002283 807C013A                	cmp	byte [si+1],':'	; drive specified?
 20010 00002287 7512                    	jne	short _GOTDRIVE
 20011 00002289 8A04                    	mov	al,[si]		; get his specified drive
 20012                                  	; 23/02/2023
 20013 0000228B E85B01                  	call	UPCONV
 20014                                  	;call	UPCONV_MAPCALL	; convert to uppercase
 20015 0000228E 2C41                    	sub	al,'A'		; convert to 0-based
 20016 00002290 83C702                  	add	di,2
 20017 00002293 FEC0                    	inc	al		; convert to 1-based number
 20018 00002295 26A2[7F01]              	mov	[es:ComDrv],al
 20019                                  
 20020                                  ; Stick the drive letter in the prompt message. Nothing special needs to be
 20021                                  ; done here..
 20022                                  	;add	al,40h
 20023 00002299 0440                    	add	al,'A'-1
 20024                                  _GOTDRIVE:
 20025                                  	; 23/02/2023
 20026                                  	;;mov	[es:0BD9h],di	; MSDOS 3.3 COMMAND.COM offset 1734h
 20027                                  	;mov	[es:PUTBACKSUBSTPTR],di
 20028                                  	;mov	[es:0233h],di	; MSDOS 5.0 COMMAND.COM offset 236Eh
 20029 0000229B 26893E[1501]            	mov	[es:PutBackComSpec],di
 20030                                  				;g point to beginning of name after drive
 20031                                  	;;mov	[es:0A21h],al	; MSDOS 3.3 COMMAND.COM offset 1739h
 20032                                  	;mov	[es:PUTBACKDRV],al
 20033                                  	;mov	[es:0238h],al	; MSDOS 5.0 COMMAND.COM offset 2373h
 20034 000022A0 26A2[1A01]              	mov	[es:PutBackDrv],al
 20035                                  
 20036                                  ; Copy chars until delim      	
 20037                                  
 20038 000022A4 89DF                    	mov	di,bx
 20039                                  COPY_COMSPEC:
 20040 000022A6 AC                      	lodsb
 20041 000022A7 E83C03                  	call	DELIM
 20042 000022AA 7407                    	jz	short COPYDONE
 20043 000022AC 3C0D                    	cmp	al,13 ; 0Dh
 20044 000022AE 7403                    	je	short COPYDONE
 20045 000022B0 AA                      	stosb
 20046 000022B1 EBF3                    	jmp	short COPY_COMSPEC
 20047                                  COPYDONE:
 20048 000022B3 30C0                    	xor	al,al		; Null terminate the string and quit
 20049 000022B5 AA                      	stosb
 20050                                  	;mov	byte [comspec_flag],0
 20051 000022B6 A2[4284]                	mov	[comspec_flag],al ; 0 ; 23/02/2023
 20052 000022B9 4F                      	dec	di
 20053 000022BA 26893E[7601]            	mov	[es:ComSpec_End],di
 20054 000022BF C3                      	retn
 20055                                  
 20056                                  DISP_ENV:
 20057 000022C0 8E1E[A58A]              	mov	ds,[RESSEG]
 20058 000022C4 8E1E[2703]              	mov	ds,[EnvirSeg]
 20059                                  	; assume ds:nothing
 20060 000022C8 31F6                    	xor	si,si
 20061                                  PENVLP:
 20062 000022CA 803C00                  	cmp	byte [si],0
 20063 000022CD 7497                    	jz	short ADD_NAME_JZ_RET
 20064 000022CF BF[FA92]                	mov	di,Arg_Buf
 20065                                  PENVLP2:
 20066 000022D2 AC                      	lodsb
 20067 000022D3 AA                      	stosb
 20068 000022D4 08C0                    	or	al,al
 20069 000022D6 75FA                    	jnz	short PENVLP2
 20070 000022D8 BA[9980]                	mov	dx,arg_buf_ptr
 20071 000022DB 1E                      	push	ds
 20072 000022DC 06                      	push	es
 20073 000022DD 1F                      	pop	ds
 20074                                  	; assume ds:nothing
 20075 000022DE E8E22A                  	call	Printf_Crlf
 20076 000022E1 1F                      	pop	ds
 20077 000022E2 EBE6                    	jmp	short PENVLP
 20078                                  
 20079                                  ; =============== S U B	R O U T	I N E =======================================
 20080                                  
 20081                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20082                                  delete_path:
 20083 000022E4 BE[6C81]                	mov	si,PATH_TEXT ; "PATH="
 20084 000022E7 EB03                    	jmp	short delete_name_in_environment
 20085                                  
 20086                                  ; =============== S U B	R O U T	I N E =======================================
 20087                                  
 20088                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20089                                  delete_prompt:
 20090 000022E9 BE[7181]                	mov	si,PROMPT_TEXT ; "PROMPT="
 20091                                  
 20092                                  ; ---------------------------------------------------------------------------
 20093                                  
 20094                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20095                                  delete_name_in_environment:
 20096                                  
 20097                                  ; Input: DS:SI points to a "=" terminated string
 20098                                  ; Output: carry flag is set if name not found
 20099                                  ;	  otherwise name is deleted
 20100                                  
 20101 000022EC 56                      	push	si
 20102 000022ED 1E                      	push	ds
 20103 000022EE E82C00                  	call	FIND		; ES:DI points to name
 20104 000022F1 7217                    	jc	short del1
 20105 000022F3 89FE                    	mov	si,di		; Save it
 20106 000022F5 E8BF00                  	call	SCASB2		; Scan for the nul
 20107 000022F8 87F7                    	xchg	si,di
 20108                                  ;SR;
 20109                                  ; If we have only one env string, then the double null is lost when the last
 20110                                  ;string is deleted and we have an invalid empty environment with only a 
 20111                                  ;single null. To avoid this, we will look for the double null case and then
 20112                                  ;move an extra null char.
 20113                                  ; Bugbug: The only possible problem is that the last pathstring 
 20114                                  ;will be followed by a triple null. Is this really a problem?
 20115                                  
 20116                                  	; MSDOS 6.0
 20117 000022FA 26803C00                	cmp	byte [es:si],0	;null char?
 20118 000022FE 7501                    	jnz	short not_dnull	;no, we are at a double null
 20119 00002300 4E                      	dec	si		;point at the double null
 20120                                  not_dnull:
 20121                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20122 00002301 E86901                  	call	GETENVSIZ
 20123 00002304 29F1                    	sub	cx,si
 20124 00002306 06                      	push	es
 20125 00002307 1F                      	pop	ds		; ES:DI points to name
 20126                                  				; DS:SI points to next name
 20127 00002308 F3A4                    	rep	movsb
 20128                                  del1:
 20129 0000230A 1F                      	pop	ds
 20130 0000230B 5E                      	pop	si
 20131                                  find_retn:
 20132 0000230C C3                      	retn
 20133                                  
 20134                                  ; =============== S U B	R O U T	I N E =======================================
 20135                                  
 20136                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20137                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:23E2h
 20138                                  find_path:
 20139 0000230D BE[6C81]                	mov	si,PATH_TEXT ; "PATH="
 20140 00002310 EB03                    	jmp	short find_name_in_environment
 20141                                  
 20142                                  ; =============== S U B	R O U T	I N E =======================================
 20143                                  
 20144                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20145                                  find_prompt:
 20146 00002312 BE[7181]                	mov	si,PROMPT_TEXT ; "PROMPT="
 20147                                  
 20148                                  ; ---------------------------------------------------------------------------
 20149                                  
 20150                                  find_name_in_environment:
 20151                                  
 20152                                  ; Input: DS:SI points to a "=" terminated string
 20153                                  ; Output: ES:DI points to the arguments in the environment
 20154                                  ;	  zero is set if name not found
 20155                                  ;	  carry flag is set if name not valid format
 20156                                  
 20157 00002315 E80500                  	call	FIND		; Find the name
 20158 00002318 72F2                    	jc	short find_retn	; Carry means not found	
 20159 0000231A E99600                  	jmp	SCASB1		; Scan for = sign
 20160                                  
 20161                                  ; ---------------------------------------------------------------------------
 20162                                  	;nop
 20163                                  
 20164                                  ; =============== S U B	R O U T	I N E =======================================
 20165                                  
 20166                                  ; On return of FIND1, ES:DI points to beginning of name
 20167                                  
 20168                                  FIND:
 20169 0000231D FC                      	cld
 20170 0000231E E84100                  	call	COUNT0		; CX = Length of name
 20171 00002321 8E06[A58A]              	mov	es,[RESSEG]
 20172                                  	;assume es:RESGROUP
 20173 00002325 268E06[2703]            	mov	es,[es:EnvirSeg]
 20174                                  	;assume es:NOTHING
 20175 0000232A 31FF                    	xor	di,di
 20176                                  find1:	
 20177 0000232C 51                      	push	cx
 20178 0000232D 56                      	push	si
 20179 0000232E 57                      	push	di
 20180                                  find11:
 20181 0000232F AC                      	lodsb
 20182                                  	; 23/02/2023 
 20183                                  	; MSDOS 6.0 (& 5.0)
 20184 00002330 E88C00                  	call	testkanj	
 20185 00002333 740F                    	jz	short notkanj3
 20186 00002335 4E                      	dec	si
 20187 00002336 AD                      	lodsw
 20188 00002337 47                      	inc	di
 20189 00002338 47                      	inc	di
 20190 00002339 263B45FE                	cmp	ax,[es:di-2]
 20191 0000233D 7511                    	jne	short find12
 20192 0000233F 49                      	dec	cx
 20193 00002340 E2ED                    	loop	find11
 20194 00002342 EB0C                    	jmp	short find12
 20195                                  notkanj3:
 20196 00002344 E8A200                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 20197                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 20198 00002347 47                      	inc	di
 20199 00002348 263A45FF                	cmp	al,[es:di-1]
 20200 0000234C 7502                    	jne	short find12
 20201 0000234E E2DF                    	loop	find11
 20202                                  find12:
 20203 00002350 5F                      	pop	di
 20204 00002351 5E                      	pop	si
 20205 00002352 59                      	pop	cx
 20206 00002353 74B7                    	jz	short find_retn
 20207 00002355 51                      	push	cx
 20208 00002356 E85E00                  	call	SCASB2		; Scan for a nul
 20209 00002359 59                      	pop	cx
 20210 0000235A 26803D00                	cmp	byte [es:di],0
 20211 0000235E 75CC                    	jnz	short find1
 20212 00002360 F9                      	stc			; Indicate not found
 20213 00002361 C3                      	retn
 20214                                  
 20215                                  ; =============== S U B	R O U T	I N E =======================================
 20216                                  
 20217                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20218                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2437h
 20219                                  COUNT0:
 20220 00002362 1E                      	push	ds
 20221 00002363 07                      	pop	es
 20222                                  	;assume es:nothing
 20223 00002364 89F7                    	mov	di,si
 20224                                  ;COUNT1:
 20225 00002366 57                      	push	di		; Count number of chars until "="
 20226 00002367 E84900                  	call	SCASB1
 20227                                  	; 23/02/2023
 20228                                  ;	jmp	short COUNTX
 20229                                  ;COUNT2:
 20230                                  ;	push	di		; Count number of chars until nul
 20231                                  ;	call	SCASB2
 20232                                  ;COUNTX:
 20233 0000236A 59                      	pop	cx
 20234 0000236B 29CF                    	sub	di,cx
 20235 0000236D 87F9                    	xchg	di,cx
 20236                                  move_name_retn:
 20237 0000236F C3                      	retn
 20238                                  
 20239                                  ; =============== S U B	R O U T	I N E =======================================
 20240                                  
 20241                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20242                                  move_name:
 20243 00002370 803C0D                  	cmp	byte [si],13 ; 0Dh
 20244 00002373 74FA                    	je	short move_name_retn
 20245 00002375 AC                      	lodsb
 20246                                  	; 23/02/2023 
 20247                                  	; MSDOS 6.0 (& 5.0)
 20248 00002376 E84600                  	call	testkanj		
 20249 00002379 7409                    	jz	short notkanj1
 20250 0000237B E88D00                  	call	store_char
 20251 0000237E AC                      	lodsb
 20252 0000237F E88900                  	call	store_char
 20253 00002382 EBEC                    	jmp	short move_name
 20254                                  notkanj1: 
 20255 00002384 E86200                  	call	UPCONV
 20256                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3
 20257 00002387 E88100                  	call	store_char
 20258 0000238A 3C3D                    	cmp	al,'='
 20259 0000238C 75E2                    	jne	short move_name
 20260                                  getarg_retn:
 20261 0000238E C3                      	retn
 20262                                  
 20263                                  ; =============== S U B	R O U T	I N E =======================================
 20264                                  
 20265                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20266                                  GETARG:
 20267 0000238F BE8000                  	mov	si,80h
 20268 00002392 AC                      	lodsb
 20269 00002393 08C0                    	or	al,al
 20270 00002395 74F7                    	jz	short getarg_retn
 20271 00002397 E84402                  	call	scanoff
 20272 0000239A 3C0D                    	cmp	al,13 ; 0Dh
 20273                                  sdn_retn:
 20274 0000239C C3                      	retn
 20275                                  
 20276                                  ; =============== S U B	R O U T	I N E =======================================
 20277                                  
 20278                                  ; Point ES:DI to the final NULL string. Note that in an empty environment,
 20279                                  ; there is NO double NULL, merely a string that is empty.
 20280                                  
 20281                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20282                                  scan_double_null:
 20283 0000239D 8E06[A58A]              	mov	es,[RESSEG]
 20284 000023A1 268E06[2703]            	mov	es,[es:EnvirSeg]
 20285 000023A6 31FF                    	xor	di,di
 20286                                  
 20287                                  ; Top cycle-point. If the string here is empty, then we are done
 20288                                  
 20289                                  sdn1:
 20290 000023A8 26803D00                	cmp	byte [es:di],0	; nul string?
 20291 000023AC 74EE                    	jz	short sdn_retn	; yep, all done
 20292 000023AE E80600                  	call	SCASB2
 20293 000023B1 EBF5                    	jmp	short sdn1
 20294                                  
 20295                                  ; =============== S U B	R O U T	I N E =======================================
 20296                                  
 20297                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20298                                  SCASB1:
 20299 000023B3 B03D                    	mov	al,'='		; Scan for an =
 20300 000023B5 EB02                    	jmp	short SCASBX
 20301                                  
 20302                                  ; =============== S U B	R O U T	I N E =======================================
 20303                                  
 20304                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20305                                  SCASB2:
 20306 000023B7 30C0                    	xor	al,al		; Scan for a nul
 20307                                  
 20308                                  ; ---------------------------------------------------------------------------
 20309                                  
 20310                                  	; 23/02/2023
 20311                                  SCASBX:
 20312 000023B9 B90001                  	mov	cx,256
 20313 000023BC F2AE                    	repne	scasb
 20314 000023BE C3                      	retn
 20315                                  
 20316                                  ; =============== S U B	R O U T	I N E =======================================
 20317                                  
 20318                                  ; MSDOS 6.0
 20319                                  
 20320                                  ;Bugbug: This is Kanji stuff - put it in conditionals
 20321                                  
 20322                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20323                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:249Ah
 20324                                  testkanj:
 20325 000023BF 1E                      	push	ds			;AN000;  3/3/KK
 20326 000023C0 56                      	push	si			;AN000;  3/3/KK
 20327 000023C1 50                      	push	ax			;AN000;  3/3/KK
 20328 000023C2 2E8E1E[A58A]            	mov	ds,[cs:RESSEG]		;AN000;  Get resident segment
 20329 000023C7 C536[A701]              	lds	si,[Dbcs_Vector_Addr]	;AN000;  get DBCS vector
 20330                                  ktlop:					;AN000;  3/3/KK
 20331 000023CB 833C00                  	cmp	word [si],0		;AN000;  end of Table 3/3/KK
 20332 000023CE 740E                    	je	short notlead 		;AN000;  3/3/KK
 20333 000023D0 58                      	pop	ax			;AN000;  3/3/KK
 20334 000023D1 50                      	push	ax			;AN000;  3/3/KK
 20335 000023D2 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 20336 000023D4 7208                    	jb	short notlead 		;AN000;  3/3/KK
 20337 000023D6 46                      	inc	si			;AN000;  3/3/KK
 20338 000023D7 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 20339 000023D9 7607                    	jbe	short islead		;AN000;  3/3/KK
 20340 000023DB 46                      	inc	si			;AN000;  3/3/KK
 20341 000023DC EBED                    	jmp	short ktlop		;AN000;  try another range ; 3/3/KK
 20342                                  notlead:				;AN000;  3/3/KK
 20343 000023DE 31C0                    	xor	ax,ax			;AN000;  set zero 3/3/KK
 20344 000023E0 EB03                    	jmp	short ktret		;AN000;  3/3/KK
 20345                                  islead: 				;AN000;  3/3/KK
 20346 000023E2 31C0                    	xor	ax,ax			;AN000;  reset zero 3/3/KK
 20347 000023E4 40                      	inc	ax			;AN000;  3/3/KK
 20348                                  ktret:					;AN000;  3/3/KK
 20349 000023E5 58                      	pop	ax			;AN000;  3/3/KK
 20350 000023E6 5E                      	pop	si			;AN000;  3/3/KK
 20351 000023E7 1F                      	pop	ds			;AN000;  3/3/KK
 20352 000023E8 C3                      	retn				;AN000;  3/3/KK
 20353                                  
 20354                                  ; =============== S U B	R O U T	I N E =======================================
 20355                                  
 20356                                  ; MSDOS 6.0
 20357                                  
 20358                                  ; ****************************************************************
 20359                                  ; *
 20360                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 20361                                  ; *
 20362                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 20363                                  ; *		 the character in AL from the file upper case table
 20364                                  ; *		 in DOS if character if above  ascii 128, else
 20365                                  ; *		 subtracts 20H if between "a" and "z".
 20366                                  ; *
 20367                                  ; * INPUT:	 AL	      char to be upper cased
 20368                                  ; *		 FUCASE_ADDR  set to the file upper case table
 20369                                  ; *
 20370                                  ; * OUTPUT:	 AL	      upper cased character
 20371                                  ; *
 20372                                  ; ****************************************************************
 20373                                  
 20374                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20375                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:24C4h
 20376                                  UPCONV:
 20377 000023E9 3C80                    	cmp	al,80h			;AN000;  see if char is > ascii 128
 20378 000023EB 7213                    	jb	short oth_fucase	;AN000;  no - upper case math
 20379 000023ED 2C80                    	sub	al,80h			;AN000;  only upper 128 chars in table
 20380 000023EF 1E                      	push	ds			;AN000;
 20381 000023F0 53                      	push	bx			;AN000;
 20382 000023F1 8E1E[A58A]              	mov	ds,[RESSEG]		;AN000;  get resident data segment
 20383                                  	;lds	bx,dword ptr FUCase_Addr+1
 20384 000023F5 C51E[9F01]              	lds	bx,[FUCase_Addr+1]	;AN000;  get table address
 20385 000023F9 83C302                  	add	bx,2			;AN000;  skip over first word
 20386                                  	;xlat	ds:byte ptr [bx]	;AN000;  convert to upper case
 20387 000023FC D7                      	xlat
 20388 000023FD 5B                      	pop	bx			;AN000;
 20389 000023FE 1F                      	pop	ds			;AN000;
 20390                                  	;jmp	short upconv_end	;AN000;  we finished - exit
 20391                                  	; 24/02/2023
 20392 000023FF C3                      	retn
 20393                                  oth_fucase:				;AN000;
 20394 00002400 3C61                    	cmp	al,'a' ; small_a	;AC000; if between "a" and "z",
 20395 00002402 7206                    	jb	short upconv_end	;AC000;    subtract 20h to get
 20396 00002404 3C7A                    	cmp	al,'z' ; small_z	;AC000;    upper case equivalent.
 20397 00002406 7702                    	ja	short upconv_end	;AC000;
 20398 00002408 2C20                    	sub	al,20h			;AC000; Change lower-case to upper
 20399                                  upconv_end:				;AN000;
 20400 0000240A C3                      	retn
 20401                                  
 20402                                  ; ---------------------------------------------------------------------------
 20403                                  
 20404                                  ; MSDOS 3.3
 20405                                  
 20406                                  	; 24/02/2023
 20407                                  ;UPCONV_MAPCALL:
 20408                                  	;			; If between "a" and "z"
 20409                                  	;cmp	al,[small_a]
 20410                                  	;jb	short UPCONV_END
 20411                                  	;cmp	al,[small_z]
 20412                                  	;ja	short UPCONV_END
 20413                                  	;sub	al,20h		; Change lower-case to upper
 20414                                  ;UPCONV_END:
 20415                                  	;call	far [cs:MAP_CALL] ; (far) call to char mapping routine 
 20416                                  	;			  ; 	  for (current) country
 20417                                  	;retn
 20418                                  
 20419                                  ; =============== S U B	R O U T	I N E =======================================
 20420                                  
 20421                                  ; STORE A CHAR IN environment, GROWING IT IF NECESSARY
 20422                                  
 20423                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20424                                  	; 10/06/2023
 20425                                  store_char:
 20426 0000240B 51                      	push	cx
 20427 0000240C 53                      	push	bx
 20428                                  
 20429                                  	; 24/02/2023
 20430                                  	;;16/10/2018
 20431                                  	; MSDOS 6.0
 20432 0000240D 06                      	push	es		;AN056;*
 20433 0000240E 1E                      	push	ds		;AN056; Save local DS
 20434 0000240F 8E1E[A58A]              	mov	ds,[RESSEG]	;AN056; Get resident segment
 20435 00002413 8E06[2703]              	mov	es,[EnvirSeg]	;AN056; Get environment segment
 20436 00002417 1F                      	pop	ds		;AN056; Get local segment back
 20437                                  
 20438                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20439 00002418 E85200                  	call	GETENVSIZ
 20440 0000241B 89CB                    	mov	bx,cx		; Save room for double nul
 20441 0000241D 83EB02                  	sub	bx,2
 20442 00002420 39DF                    	cmp	di,bx
 20443 00002422 723F                    	jb	short store1
 20444 00002424 50                      	push	ax
 20445 00002425 51                      	push	cx
 20446 00002426 53                      	push	bx		; Save Size of environment
 20447 00002427 E8DAE2                  	call	FREE_TPA
 20448 0000242A 5B                      	pop	bx
 20449 0000242B 83C302                  	add	bx,2		; Recover true environment size
 20450                                  
 20451 0000242E 81FB0080                	cmp	bx,8000h	; Don't let environment grow > 32K	
 20452 00002432 7203                    	jb	short envsiz_ok
 20453                                  bad_env_size:			;AN056;
 20454 00002434 F9                      	stc
 20455 00002435 EB16                    	jmp	short envnoset
 20456                                  	;nop
 20457                                  envsiz_ok:
 20458 00002437 B104                    	mov	cl,4
 20459 00002439 D3EB                    	shr	bx,cl		; Convert back to paragraphs
 20460 0000243B 43                      	inc	bx
 20461                                  	; 24/02/2023
 20462                                  	; MSDOS 6.0
 20463 0000243C 8CC1                    	mov	cx,es		;AN056; Get environment segment
 20464 0000243E 01D9                    	add	cx,bx		;AN056; Add in size of environment
 20465 00002440 83C120                  	add	cx,20h		;AN056; Add in some TPA
 20466 00002443 8CC8                    	mov	ax,cs		;AN056; Get the transient segment
 20467 00002445 39C1                    	cmp	cx,ax		;AN056; Are we hitting the transient?
 20468 00002447 73EB                    	jnb	short bad_env_size
 20469                                  				;AN056; Yes - don't do it!!!
 20470                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20471 00002449 B44A                    	mov	ah,4Ah
 20472                                  	;mov	ah,SETBLOCK ; 4Ah
 20473 0000244B CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20474                                  			; ES = segment address of block	to change
 20475                                  			; BX = new size	in paragraphs
 20476                                  envnoset:
 20477 0000244D 9C                      	pushf
 20478 0000244E 06                      	push	es
 20479 0000244F 8E06[A58A]              	mov	es,[RESSEG]
 20480 00002453 E8BEE2                  	call	ALLOC_TPA
 20481 00002456 07                      	pop	es
 20482 00002457 9D                      	popf
 20483 00002458 59                      	pop	cx
 20484 00002459 58                      	pop	ax
 20485                                  	; 24/02/2023
 20486                                  	;pop	es ; MSDOS 6.0	;AN056;*	
 20487 0000245A 7307                    	jnc	short store1
 20488                                  	; 10/06/2023 (BugFix)
 20489 0000245C 07                      	pop	es ; MSDOS 6.0	;AN056;*	
 20490 0000245D BA[137F]                	mov	dx,ENVERR_PTR
 20491 00002460 E9EF04                  	jmp	cerror
 20492                                  store1:	
 20493 00002463 AA                      	stosb
 20494 00002464 26C7050000              	mov	word [es:di],0	; NULL IS AT END
 20495                                  	; 24/02/2023
 20496 00002469 07                      	pop	es ; MSDOS 6.0	;AN056;*
 20497 0000246A 5B                      	pop	bx
 20498 0000246B 59                      	pop	cx
 20499 0000246C C3                      	retn
 20500                                  
 20501                                  ; =============== S U B	R O U T	I N E =======================================
 20502                                  
 20503                                  	; 24/02/2023
 20504                                  GETENVSIZ:
 20505                                  
 20506                                  ;Get size of environment in bytes, rounded up to paragraph boundry
 20507                                  ;ES has environment segment
 20508                                  ;Size returned in CX, all other registers preserved
 20509                                  
 20510 0000246D 06                      	push	es
 20511 0000246E 50                      	push	ax
 20512 0000246F 8CC0                    	mov	ax,es
 20513 00002471 48                      	dec	ax		;Point at arena
 20514 00002472 8EC0                    	mov	es,ax
 20515                                  	;mov	ax,[es:3]
 20516 00002474 26A10300                	mov	ax,[es:ARENA.size]
 20517 00002478 B104                    	mov	cl,4
 20518 0000247A D3E0                    	shl	ax,cl		;Convert to bytes
 20519 0000247C 89C1                    	mov	cx,ax
 20520 0000247E 58                      	pop	ax
 20521 0000247F 07                      	pop	es
 20522                                  getenvsiz_retn:
 20523 00002480 C3                      	retn
 20524                                  
 20525                                  ; =============== S U B	R O U T	I N E =======================================
 20526                                  
 20527                                  	; 24/02/2023
 20528                                  RestUDir1:
 20529 00002481 1E                      	push	ds
 20530 00002482 8E1E[A58A]              	mov	ds,[RESSEG]
 20531 00002486 803E[8C01]00            	cmp	byte [RestDir],0
 20532 0000248B 1F                      	pop	ds
 20533 0000248C 74F2                    	jz	short getenvsiz_retn
 20534                                  
 20535                                  ; =============== S U B	R O U T	I N E =======================================
 20536                                  
 20537                                  	; 24/02/2023
 20538                                  RestUDir:
 20539 0000248E BA[8789]                	mov	dx,USERDIR1
 20540 00002491 B43B                    	mov	ah,3Bh
 20541                                  	;mov	ah,CHDir ; 3Bh
 20542 00002493 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 20543                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 20544 00002495 30C0                    	xor	al,al
 20545                                  	;call	SETREST
 20546                                  	;retn
 20547                                  	; 24/02/2023
 20548 00002497 E94908                  	jmp	SETREST
 20549                                  
 20550                                  ;============================================================================
 20551                                  ; TENV2.ASM, MSDOS 6.0, 1991
 20552                                  ;============================================================================
 20553                                  ; 07/10/2018 - Retro DOS v3.0
 20554                                  
 20555                                  ; TITLE	Part6 COMMAND Transient routines.
 20556                                  
 20557                                  ;	Environment utilities and misc. routines
 20558                                  
 20559                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 18C2h
 20560                                  
 20561                                  ; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20562                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2577h
 20563                                  
 20564                                  ; ---------------------------------------------------------------------------
 20565                                  
 20566                                  ; ****************************************************************
 20567                                  ; *
 20568                                  ; * ROUTINE:	 $CHDIR
 20569                                  ; *
 20570                                  ; * FUNCTION:	 Entry point for CHDIR command. Parse the command
 20571                                  ; *		 line. If path is found, CHDIR to path. If a drive
 20572                                  ; *		 letter is found, get and display the current dir
 20573                                  ; *		 of the specified drive. If nothing is found, get
 20574                                  ; *		 and display the current dir of the default drive.
 20575                                  ; *
 20576                                  ; * INPUT:	 command line at offset 81H
 20577                                  ; *
 20578                                  ; * OUTPUT:	 none
 20579                                  ; *
 20580                                  ; ****************************************************************
 20581                                  
 20582                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20583                                  	; 10/06/2023
 20584                                  _$CHDIR:
 20585                                  	; MSDOS 6.0
 20586 0000249A BE8100                  	mov	si,81h
 20587 0000249D BF[F084]                	mov	di,PARSE_CHDIR
 20588                                  				;AN000; Get address of PARSE_CHDIR
 20589 000024A0 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20590 000024A2 31D2                    	xor	dx,dx		;AN000;
 20591 000024A4 E812FD                  	call	Parse_With_Msg	;AC018; call parser
 20592                                  	
 20593                                  	;cmp	ax,-1
 20594                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 20595                                  	;je	short bwdj	; No args
 20596                                  	;;cmp	ax,0
 20597                                  	;;cmp	ax,RESULT_NO_ERROR
 20598                                  	;			;AC000; did we have an error?
 20599                                  	;or	ax,ax ; ax = 0 ?
 20600                                  	;jnz	short ChDirErr	;AC018; yes - exit
 20601                                  	
 20602                                  	; 10/06/2023
 20603 000024A7 40                      	inc	ax	; cmp ax,-1
 20604 000024A8 7414                    	jz	short bwdj ; 0FFFFh -> 0
 20605 000024AA 48                      	dec	ax	; cmp ax,0
 20606 000024AB 756D                    	jnz	short ChDirErr ; 1 -> 0
 20607                                  	; ax = 0	
 20608                                  
 20609                                  	;cmp	byte [PARSE1_TYPE],6
 20610 000024AD 803E[5395]06            	cmp	byte [PARSE1_TYPE],result_drive
 20611                                  				;AC000; was a drive entered?
 20612 000024B2 7511                    	jne	short REALCD	; no
 20613                                  
 20614                                  ; D: was found. See if there is anything more.
 20615                                  
 20616 000024B4 BF[F084]                	mov	di,PARSE_CHDIR
 20617                                  				;AC000; get address of parse_chdir
 20618 000024B7 31D2                    	xor	dx,dx		;AC000;
 20619 000024B9 E8E7FC                  	call	parse_check_eol ;AC000; call parser
 20620 000024BC 755C                    	jnz	short ChDirErr	;AC000;
 20621                                  bwdj:
 20622 000024BE E87BF9                  	call	build_dir_for_chdir
 20623                                  				; Drive only specified
 20624 000024C1 E80D01                  	call	CRLF2
 20625                                  chdir_retn:
 20626 000024C4 C3                      	retn
 20627                                  
 20628                                  	; 24/02/2023
 20629                                  	; MSDOS 3.3
 20630                                  	;mov	ax,[COMSW]
 20631                                  	;or	ax,[ALLSWITCH]
 20632                                  	;mov	dx,BADPARMPTR
 20633                                  	;jnz	short CHDIR_ERR
 20634                                  	;mov	si,81h
 20635                                  	;call	SCANOFF
 20636                                  	;cmp	al,0Dh		; are we at end of line?
 20637                                  	;je	short BWDJ	; No args
 20638                                  	;inc	si
 20639                                  	;lodsb
 20640                                  	;cmp	al,':'
 20641                                  	;jne	short REALCD
 20642                                  	;push	si
 20643                                  	;call	SCANOFF
 20644                                  	;pop	si
 20645                                  	;cmp	al,0Dh		; was a drive entered?
 20646                                  	;jne	short REALCD	; no
 20647                                  ;BWDJ:
 20648                                  	;call	BUILD_DIR_FOR_CHDIR ; Drive only specified
 20649                                  	;call	CRLF2
 20650                                  ;CHDIR_RETN:
 20651                                  	;retn
 20652                                  
 20653                                  	; 24/02/2023
 20654                                  	; MSDOS 6.0
 20655                                  REALCD:
 20656 000024C5 56                      	push	si		;AN000; save position in line
 20657 000024C6 C536[5795]              	lds	si,[PARSE1_ADDR]
 20658                                  				;AN000; get address of filespec
 20659 000024CA E8D807                  	call	Move_To_SrcBuf	;AN000; move to srcbuf
 20660 000024CD 5E                      	pop	si		;AN000; restore position in line
 20661 000024CE BF[F084]                	mov	di,PARSE_CHDIR	;AC000; get address of parse_chdir
 20662 000024D1 31D2                    	xor	dx,dx		;AC000;
 20663 000024D3 E8CDFC                  	call	parse_check_eol ;AC000; call parser
 20664 000024D6 7542                    	jnz	short ChDirErr	;AC000;
 20665                                  	
 20666 000024D8 E81106                  	call	SETPATH
 20667 000024DB F606[308C]02            	test	byte [DestInfo],2
 20668 000024E0 7518                    	jnz	short BadChDir
 20669                                  
 20670                                  	; 26/04/2023
 20671 000024E2 B43B                    	mov	ah,3Bh
 20672                                  	;mov	ah,CHDir
 20673 000024E4 CD21                    	int	21h
 20674 000024E6 73DC                    	jnc	short chdir_retn
 20675                                  	
 20676 000024E8 E805F8                  	call	get_ext_error_number
 20677                                  				;AN022; get the extended error
 20678 000024EB 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 20679                                  				;AN022; see if path not found
 20680 000024EE 740A                    	je	short BadChDir	;AN022; yes - issue old message
 20681                                  ;SR;
 20682                                  ; We want to issue "Invalid Directory" message even if the path is valid
 20683                                  ;but is not a directory. The extended error returns "Access denied" which
 20684                                  ;is kind of confusing. Issue the old message if access denied error is 
 20685                                  ;returned
 20686                                  
 20687 000024F0 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 20688 000024F3 7405                    	je	short BadChDir
 20689                                  	
 20690 000024F5 E89E00                  	call	set_ext_error_subst ;AN022;
 20691 000024F8 EB20                    	jmp	short ChDirErr	;AN022;
 20692                                  
 20693                                  BadChDir:
 20694 000024FA BA[3780]                	mov	dx,badcd_ptr
 20695                                  ;ChDirErr:
 20696                                  ;	call	std_eprintf
 20697                                  ;mkdir_retn:
 20698                                  	;retn
 20699                                  	; 24/02/2023
 20700 000024FD EB1B                    	jmp	short ChDirErr	;AN022;
 20701                                  
 20702                                  	; 24/02/2023
 20703                                  	; MSDOS 3.3
 20704                                  ;REALCD:
 20705                                  	;call	SETPATH
 20706                                  	;test	byte [DESTINFO],2
 20707                                  	;jnz	short BADCHDIR
 20708                                  	;mov	ah,CHDir ; 3Bh
 20709                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 20710                                  	;		; DS:DX	-> ASCIZ directory name	(may include drive)
 20711                                  	;jnc	short CHDIR_RETN
 20712                                  ;BADCHDIR:
 20713                                  	;mov	dx,BADCDPTR
 20714                                  ;CHDIR_ERR:
 20715                                  	;call	STD_EPRINTF
 20716                                  ;MKDIR_RETN:
 20717                                  	;retn
 20718                                  
 20719                                  ; =============== S U B	R O U T	I N E =======================================
 20720                                  
 20721                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20722                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:25E2h
 20723                                  _$MKDIR:
 20724                                  	; MSDOS 6.0
 20725 000024FF E86300                  	call	SETRMMK
 20726 00002502 7216                    	jc	short MkDirErr
 20727                                  
 20728 00002504 B439                    	mov	ah,39h
 20729                                  	;mov	ah,MKDIR
 20730 00002506 CD21                    	int	21h
 20731 00002508 7313                    	jnc	short mkdir_retn
 20732                                  
 20733 0000250A E8E3F7                  	call	get_ext_error_number	
 20734                                  				;AN022; get the extended error
 20735 0000250D 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 20736                                  				;AN022; see if path not found
 20737 00002510 742A                    	je	short MD_other_err
 20738                                  				;AN022; yes - issue old message
 20739 00002512 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 20740                                  				;AN022; access denied?
 20741 00002515 7407                    	je	short badmderr	;AN022; yes - see if file exists
 20742                                  	
 20743 00002517 E87C00                  	call	set_ext_error_subst
 20744                                  				;AN022;
 20745                                  	;jmp	short MkDirerr	;AC022; yes - go print it
 20746                                  	; 24/02/2023
 20747                                  ChDirErr:
 20748                                  MkDirErr:
 20749                                  RmDirErr:
 20750 0000251A E8AC28                  	call	std_eprintf
 20751                                  mkdir_retn:
 20752                                  rmdir_retn:
 20753 0000251D C3                      	retn
 20754                                  	
 20755                                  badmderr:
 20756 0000251E BA[D387]                	mov	dx,SRCXNAME	;AN006; Set Disk transfer address
 20757 00002521 B41A                    	mov	ah,1Ah
 20758                                  	;mov	ah,Set_DMA	;AN006;
 20759 00002523 CD21                    	int	21h		;AN006;
 20760                                  	
 20761 00002525 B44E                    	mov	ah,4Eh
 20762                                  	;mov	ah,Find_First	;AN006; see if file/dir exists
 20763                                  	;mov	cx,10h
 20764 00002527 B91000                  	mov	cx,ATTR_DIRECTORY
 20765                                  				;AN006;   search for directory
 20766 0000252A CD21                    	int	21h		;AN006;
 20767 0000252C 720E                    	jc	short MD_other_err
 20768                                  				;AN006; doesn't exist - must be something else
 20769                                  	;;mov	dl,SRCXNAME.find_buf_attr
 20770                                  				;AN006; we found a file/dir
 20771                                  	;mov	dl,[SRCXNAME+21] 
 20772 0000252E 8A16[E887]              	mov	dl,[SRCXNAME+FIND_BUF.ATTR]
 20773 00002532 F6C210                  	test	dl,ATTR_DIRECTORY
 20774                                  				;AN006; was it a directory?
 20775 00002535 7405                    	jz	short MD_other_err
 20776                                  				;AN006; no - must have been a file
 20777 00002537 BA[2781]                	mov	dx,MD_EXISTS_PTR
 20778                                  				;AN006; set up already exists error
 20779 0000253A EBDE                    	jmp	short MkDirErr	;AN006; make sure we didn't have network error
 20780                                  MD_other_err:			;AN006;
 20781 0000253C BA[3A80]                	mov	dx,badmkd_ptr
 20782                                  ;MkDirErr:
 20783                                  	;call	std_eprintf
 20784                                  	;retn
 20785                                  	; 24/02/2023
 20786 0000253F EBD9                    	jmp	short MkDirErr
 20787                                  
 20788                                  	; 24/02/2023
 20789                                  	; MSDOS 3.3
 20790                                  	;call	SETRMMK
 20791                                  	;jb	short MKDIRERR
 20792                                  	;mov	ah,MKDIR ; 39h
 20793                                  	;int	21h	; DOS -	2+ - CREATE A SUBDIRECTORY (MKDIR)
 20794                                  	;		; DS:DX	-> ASCIZ pathname (may include drive)
 20795                                  	;jnc	short MKDIR_RETN
 20796                                  	;mov	dx,BADMKDPTR
 20797                                  	;call	GET_EXT_ERR_NUMBER
 20798                                  ;MKDIRERR:
 20799                                  	;call	STD_EPRINTF
 20800                                  	;retn
 20801                                  
 20802                                  ; =============== S U B	R O U T	I N E =======================================
 20803                                  
 20804                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20805                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2656h
 20806                                  _$RMDIR:
 20807 00002541 E82100                  	call	SETRMMK
 20808 00002544 72D4                    	jb	short RmDirErr
 20809 00002546 7518                    	jnz	short badrderr
 20810                                  
 20811 00002548 B43A                    	mov	ah,3Ah
 20812                                  	;mov	ah,RMDIR ; 3Ah
 20813 0000254A CD21                    	int	21h	; DOS -	2+ - REMOVE A DIRECTORY	ENTRY (RMDIR)
 20814                                  			; DS:DX	-> ASCIZ pathname (may include drive)
 20815 0000254C 73CF                    	jnc	short rmdir_retn ; 24/02/2023
 20816                                  
 20817                                  	; 24/02/2023
 20818                                  	; MSDOS 6.0
 20819 0000254E E89FF7                  	call	get_ext_error_number
 20820                                  				;AN022; get the extended error
 20821 00002551 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 20822                                  				;AN022; see if path not found
 20823 00002554 740A                    	je	short badrderr	;AN022; yes - issue old message
 20824 00002556 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 20825                                  				;AN022; access denied?
 20826 00002559 7405                    	je	short badrderr	;AN022; yes - issue old message
 20827                                  
 20828 0000255B E83800                  	call	set_ext_error_subst
 20829                                  				;AN022;
 20830 0000255E EBBA                    	jmp	short RmDirErr	;AC022; yes - go print it
 20831                                  
 20832                                  	; MSDOS 6.0
 20833                                  badrderr:
 20834                                  	; 24/02/2023
 20835 00002560 BA[3D80]                	mov	dx,badrmd_ptr
 20836 00002563 EBB5                    	jmp	short RmDirErr
 20837                                  ;RmDirErr:
 20838                                  	;call	std_eprintf
 20839                                  ;;rmdir_retn
 20840                                  	;retn
 20841                                  
 20842                                  	; 24/02/2023
 20843                                  	; MSDOS 3.3
 20844                                  	;mov	dx,BADRMDPTR
 20845                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 20846                                  ;RMDIRERR:
 20847                                  	;call	STD_EPRINTF
 20848                                  ;RMDIR_RETN:
 20849                                  	;retn
 20850                                  
 20851                                  ; =============== S U B	R O U T	I N E =======================================
 20852                                  
 20853                                  ; 	<Common MkDir/RmDir set up code>
 20854                                  ;****************************************************************
 20855                                  ;*
 20856                                  ;* ROUTINE:	SETRMMK
 20857                                  ;*
 20858                                  ;* FUNCTION:	Parse routine for the internal MKDIR and RMDIR
 20859                                  ;*		commands. Parses the command line for a required
 20860                                  ;*		filespec.
 20861                                  ;*
 20862                                  ;* INPUT:	command line at offset 81H
 20863                                  ;*
 20864                                  ;* OUTPUT:	carry clear
 20865                                  ;*		    DS:DX points to ASCIIZ argument
 20866                                  ;*		carry set
 20867                                  ;*		    DS:DX has error message pointer
 20868                                  ;*
 20869                                  ;****************************************************************
 20870                                  
 20871                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20872                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2624h
 20873                                  SETRMMK:
 20874                                  	; MSDOS 6.0
 20875 00002565 BE8100                  	mov	si,81h
 20876 00002568 BF[E784]                	mov	di,PARSE_MRDIR 	;AN000; Get address of PARSE_MRDIR
 20877 0000256B 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20878 0000256D 31D2                    	xor	dx,dx		;AN000;
 20879                                  	;invoke	Parse_With_Msg	;AC000; call parser
 20880 0000256F E847FC                  	call	Parse_With_Msg
 20881                                  	;cmp	ax,0
 20882                                  	;cmp	ax,RESULT_NO_ERROR
 20883 00002572 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 20884 00002574 7519                    	jnz	short noargerr	;AC000; yes - exit
 20885                                  
 20886 00002576 BF[D387]                	mov	di,SRCXNAME
 20887                                  				;AN000; get address of srcxname
 20888 00002579 57                      	push	di		;AN000; save address
 20889 0000257A 56                      	push	si		;AN000; save position in line
 20890 0000257B C536[5795]              	lds	si,[PARSE1_ADDR]
 20891                                  				;AN000; get address of path
 20892                                  mrdir_move_filename:		;AN000; put filespec in srcxname
 20893 0000257F AC                      	lodsb			;get a char from buffer
 20894 00002580 AA                      	stosb			;AN000; store in srcxname
 20895                                  	;cmp	al,0
 20896                                  	;cmp	al,END_OF_LINE_OUT
 20897 00002581 20C0                    	and	al,al ; 0 ?	;AC000; it char a terminator?
 20898 00002583 75FA                    	jnz	short mrdir_move_filename
 20899                                  				;AC000; no - keep moving
 20900 00002585 5E                      	pop	si		;AN000; get line position back
 20901                                  
 20902                                  ; we have scanned an argument.	See if any args beyond.
 20903                                  
 20904 00002586 BF[E784]                	mov	di,PARSE_MRDIR
 20905 00002589 E817FC                  	call	parse_check_eol ;AC000; are we at end of line?
 20906 0000258C 5A                      	pop	dx		;AC000; get address of SRCXNAME
 20907                                  	;retz			;yes - return no error
 20908 0000258D 7406                    	jz	short setrmmk_retn
 20909                                  noargerr:
 20910 0000258F BA[FC7E]                	mov	dx,extend_buf_ptr
 20911                                  				;AC000; get extended message pointer
 20912 00002592 31C0                    	xor	ax,ax
 20913 00002594 F9                      	stc
 20914                                  setrmmk_retn:
 20915 00002595 C3                      	retn
 20916                                  
 20917                                  	; 24/02/2023
 20918                                  	; MSDOS 3.3
 20919                                  ;SETRMMK:
 20920                                  	;mov	si,81h
 20921                                  	;call	SCANOFF
 20922                                  	;cmp	al,0Dh
 20923                                  	;je	short NOARGERR
 20924                                  	;mov	dx,si
 20925                                  ;SETRMMK1:
 20926                                  	;lodsb
 20927                                  	;call	DELIM
 20928                                  	;jz	short SETRMMK3
 20929                                  	;cmp	al,0Dh
 20930                                  	;jne	short SETRMMK1
 20931                                  	;mov	byte [si-1],0
 20932                                  ;SETRMMK2:
 20933                                  	;retn
 20934                                  ;SETRMMK3:
 20935                                  	;mov	byte [si-1],0
 20936                                  	;push	si
 20937                                  	;call	SCANOFF
 20938                                  	;pop	si
 20939                                  	;cmp	al,0Dh
 20940                                  	;je	short SETRMMK2
 20941                                  ;NOARGERR:
 20942                                  	;mov	dx,BADARGSPTR
 20943                                  	;xor	ax,ax
 20944                                  	;stc
 20945                                  ;SETRMMK_RETN:
 20946                                  	;retn
 20947                                  
 20948                                  ; =============== S U B	R O U T	I N E =======================================
 20949                                  
 20950                                  ; MSDOS 6.0
 20951                                  
 20952                                  ;****************************************************************
 20953                                  ;*
 20954                                  ;* ROUTINE:	Set_ext_error_subst
 20955                                  ;*
 20956                                  ;* FUNCTION:	Sets up substitution for extended error
 20957                                  ;*
 20958                                  ;* INPUT:	AX - extended error number
 20959                                  ;*		DX - offset of string
 20960                                  ;*
 20961                                  ;* OUTPUT:	Extend_Buf_Ptr set up for STD_EPRINTF
 20962                                  ;*
 20963                                  ;****************************************************************
 20964                                  
 20965                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20966                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:267Ch
 20967                                  set_ext_error_subst:
 20968                                  	;mov	byte [msg_disp_class],1
 20969 00002596 C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class
 20970                                  					;AN022; set up extended error msg class
 20971 0000259B 8916[158C]              	mov	[string_ptr_2],dx 	;AN022; get address of failed string
 20972                                  	;mov	byte [extend_buf_sub],1
 20973 0000259F C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst
 20974                                  	;AN022; put number of subst in control block
 20975 000025A4 BA[FC7E]                	mov	dx,extend_buf_ptr 	;AN022; get extended message pointer
 20976 000025A7 A3[FC7E]                	mov	[extend_buf_ptr],ax	;AN022; get message number in control block
 20977                                  savudir_err_retn: ; 24/02/2023
 20978 000025AA C3                      	retn				;AN022; return
 20979                                  
 20980                                  ; =============== S U B	R O U T	I N E =======================================
 20981                                  
 20982                                  ; <SavUDir - preserve the users current directory on a particular drive>
 20983                                  
 20984                                  ; SavUDir - move the user's current directory on a drive into UserDir1
 20985                                  ; SavUDir1 - move the user's current directory on a drive into a specified
 20986                                  ;   buffer
 20987                                  ;
 20988                                  ;   Inputs:	DL has 1-based drive number
 20989                                  ;		ES:DI has destination buffer (SavUDir1 only)
 20990                                  ;   Outputs:	Carry Clear
 20991                                  ;		    DS = TranGroup
 20992                                  ;		Carry Set
 20993                                  ;		    AX has error code
 20994                                  ;   Registers Modified: AX, SI
 20995                                  
 20996                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20997                                  SAVUDIR:
 20998 000025AB BF[8789]                	mov	di,USERDIR1
 20999                                  ; --------------
 21000                                  SAVUDIR1:
 21001 000025AE 88D0                    	mov	al,dl
 21002 000025B0 0440                    	add	al,'@' ; 40h
 21003 000025B2 3C40                    	cmp	al,'@' ; 40h
 21004 000025B4 7506                    	jne	short GOTUDRV
 21005 000025B6 0206[B98A]              	add	al,[CURDRV]
 21006 000025BA FEC0                    	inc	al		; A = 1
 21007                                  GOTUDRV:
 21008 000025BC AA                      	stosb
 21009 000025BD 8A26[AA8A]              	mov	ah,[DIRCHAR]
 21010 000025C1 B03A                    	mov	al,':' ; 3Ah
 21011 000025C3 AB                      	stosw
 21012 000025C4 06                      	push	es
 21013 000025C5 1F                      	pop	ds
 21014 000025C6 89FE                    	mov	si,di
 21015 000025C8 B447                    	mov	ah,47h ; 24/02/2023
 21016                                  	;mov	ah,CURRENT_DIR	; 47h
 21017 000025CA CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 21018                                  			; DL = drive (0=default,1=A,etc.)
 21019                                  			; DS:SI	points to 64-byte buffer area
 21020 000025CC 72DC                    	jc	short savudir_err_retn ; 24/02/2023
 21021 000025CE 0E                      	push	cs
 21022 000025CF 1F                      	pop	ds
 21023 000025D0 C3                      	retn
 21024                                  
 21025                                  ; =============== S U B	R O U T	I N E =======================================
 21026                                  
 21027                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21028                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:26B7h
 21029                                  CRLF2:
 21030 000025D1 52                      	push	dx
 21031 000025D2 BA[DB80]                	mov	dx,acrlf_ptr
 21032 000025D5 1E                      	push	ds
 21033 000025D6 0E                      	push	cs
 21034 000025D7 1F                      	pop	ds
 21035 000025D8 E8F627                  	call	std_printf
 21036 000025DB 1F                      	pop	ds
 21037 000025DC 5A                      	pop	dx
 21038 000025DD C3                      	retn
 21039                                  
 21040                                  ; =============== S U B	R O U T	I N E =======================================
 21041                                  
 21042                                  ; These routines (SCANOFF, DELIM) are called in batch processing when DS
 21043                                  ; may NOT be TRANGROUP
 21044                                  
 21045                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21046                                  scanoff:
 21047 000025DE AC                      	lodsb
 21048 000025DF E80400                  	call	DELIM
 21049 000025E2 74FA                    	jz	short scanoff
 21050 000025E4 4E                      	dec	si		; Point to first non-delimiter
 21051                                  scanoff_retn:
 21052 000025E5 C3                      	retn
 21053                                  
 21054                                  ; =============== S U B	R O U T	I N E =======================================
 21055                                  
 21056                                  ; Input:    AL is character to classify
 21057                                  ; Output:   Z set if delimiter
 21058                                  ;	    NZ set otherwise
 21059                                  ; Registers modified: none
 21060                                  
 21061                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21062                                  DELIM:
 21063 000025E6 3C20                    	cmp	al,' '	 ;20h
 21064 000025E8 74FB                    	je	short scanoff_retn
 21065 000025EA 3C3D                    	cmp	al,'='  ; 3Dh
 21066 000025EC 74F7                    	je	short scanoff_retn
 21067 000025EE 3C2C                    	cmp	al,','	; 2Ch
 21068 000025F0 74F3                    	je	short scanoff_retn
 21069 000025F2 3C3B                    	cmp	al,';'	 ;3Bh
 21070 000025F4 74EF                    	je	short scanoff_retn
 21071 000025F6 3C09                    	cmp	al,9		; Check for TAB character
 21072 000025F8 74EB                    	je	short scanoff_retn
 21073 000025FA 3C0A                    	cmp	al,0Ah		; Check for line feed character - BAS
 21074 000025FC C3                      	retn
 21075                                  
 21076                                  
 21077                                  ; =============== S U B	R O U T	I N E =======================================
 21078                                  
 21079                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21080                                  FCB_TO_ASCZ:			
 21081                                  	; Convert DS:SI to ASCIZ ES:DI
 21082 000025FD B90800                  	mov	cx,8
 21083                                  MAINNAME:
 21084 00002600 AC                      	lodsb
 21085 00002601 3C20                    	cmp	al,' ' ; 20h
 21086 00002603 7401                    	jz	short SKIPSPC
 21087 00002605 AA                      	stosb
 21088                                  SKIPSPC:
 21089 00002606 E2F8                    	loop	MAINNAME
 21090 00002608 AC                      	lodsb
 21091 00002609 3C20                    	cmp	al,' '
 21092 0000260B 740F                    	je	short GOTNAME
 21093 0000260D 88C4                    	mov	ah,al
 21094                                  	; 24/02/2023
 21095 0000260F B02E                    	mov	al,'.' ; 2Eh  ; MSDOS 5.0 (& 6.0)
 21096                                  	;mov	al,[DOT_CHR]  ; MSDOS 3.3
 21097                                  	;stosb
 21098                                  	;xchg	al,ah
 21099                                  	;stosb
 21100                                  	; 24/02/2023
 21101 00002611 AB                      	stosw
 21102 00002612 B102                    	mov	cl,2
 21103                                  EXTNAME:
 21104 00002614 AC                      	lodsb
 21105 00002615 3C20                    	cmp	al,' '
 21106 00002617 7403                    	je	short GOTNAME
 21107 00002619 AA                      	stosb
 21108 0000261A E2F8                    	loop	EXTNAME
 21109                                  GOTNAME:
 21110 0000261C 30C0                    	xor	al,al
 21111 0000261E AA                      	stosb
 21112                                  STRCOMP_RETN:
 21113 0000261F C3                      	retn
 21114                                  
 21115                                  ; =============== S U B	R O U T	I N E =======================================
 21116                                  
 21117                                  ; Compare ASCIZ DS:SI with ES:DI.
 21118                                  ; SI,DI destroyed.
 21119                                  
 21120                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21121                                  STRCOMP:	
 21122 00002620 A6                      	cmpsb
 21123 00002621 75FC                    	jnz	short STRCOMP_RETN ; Strings not equal
 21124 00002623 807CFF00                	cmp	byte [si-1],0	; Hit NUL terminator?	
 21125                                  	;jz	short STRCOMP_RETN ; Yes, strings equal
 21126                                  	;jmp	short STRCOMP	; Equal so far, keep going
 21127                                  	; 24/02/2023
 21128 00002627 75F7                    	jnz	short STRCOMP
 21129 00002629 C3                      	retn
 21130                                  
 21131                                  ; =============== S U B	R O U T	I N E =======================================
 21132                                  
 21133                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21134                                  CRPRINT:
 21135 0000262A 50                      	push	ax
 21136                                  	;mov	al,13	; 0Dh
 21137 0000262B B00D                    	mov	al,0Dh
 21138 0000262D 51                      	push	cx
 21139 0000262E 57                      	push	di
 21140 0000262F 89D7                    	mov	di,dx
 21141 00002631 B9FFFF                  	mov	cx,65535 ; 0FFFFh
 21142 00002634 06                      	push	es
 21143 00002635 1E                      	push	ds
 21144 00002636 07                      	pop	es
 21145 00002637 F2AE                    	repne	scasb		; LOOK FOR TERMINATOR
 21146 00002639 C645FF00                	mov	byte [di-1],0	; nul terminate the string
 21147 0000263D 07                      	pop	es
 21148 0000263E 8916[158C]              	mov	[string_ptr_2],dx
 21149                                  	;mov	dx,STRINGBUF2PTR  ; MSDOS 3.3 (Retro DOS v3.0 COMMAND.COM)
 21150 00002642 BA[C380]                	mov	dx,string_buf_ptr ; MSDOS 5.0 (& 6.0)
 21151 00002645 E88927                  	call	std_printf
 21152                                  	;mov	byte [di-1],13
 21153 00002648 C645FF0D                	mov	byte [di-1],0Dh	; now put the CR back
 21154 0000264C 7204                    	jb	short error_output
 21155 0000264E 5F                      	pop	di
 21156 0000264F 59                      	pop	cx
 21157 00002650 58                      	pop	ax
 21158 00002651 C3                      	retn
 21159                                  
 21160                                  ; ---------------------------------------------------------------------------
 21161                                  
 21162                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21163                                  error_output:
 21164 00002652 0E                      	push	cs
 21165 00002653 1F                      	pop	ds
 21166 00002654 8E06[A58A]              	mov	es,[RESSEG]
 21167 00002658 BA[107F]                	mov	dx,NOSPACE_PTR
 21168 0000265B 26803E[0002]00          	cmp	byte [es:PipeFlag],0
 21169 00002661 7406                    	jz	short go_to_error
 21170 00002663 E80209                  	call	PipeOff
 21171 00002666 BA[5D80]                	mov	dx,PIPEEMES_PTR
 21172                                  go_to_error:
 21173 00002669 E9E602                  	jmp	cerror
 21174                                  
 21175                                  ; =============== S U B	R O U T	I N E =======================================
 21176                                  
 21177                                  ;---- Mod for path invocation ----
 21178                                  
 21179                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21180                                  pathchrcmp:
 21181                                  	; 18/03/2023	
 21182                                  	;push	ax
 21183                                  	;mov	ah,'/' ; 2Fh
 21184                                  	;cmp	[SWITCHAR],ah
 21185 0000266C 803E[A98A]2F            	cmp	byte [SWITCHAR],'/' ; 2Fh
 21186 00002671 7404                    	je	short noslasht
 21187 00002673 3C2F                    	cmp	al,'/'
 21188 00002675 7402                    	je	short pccont
 21189                                  noslasht:
 21190 00002677 3C5C                    	cmp	al,'\' ; 5Ch
 21191                                  pccont:	
 21192                                  	;pop	ax
 21193 00002679 C3                      	retn
 21194                                  
 21195                                  ; =============== S U B	R O U T	I N E =======================================
 21196                                  
 21197                                  ; PATHCRUNCH -
 21198                                  ;
 21199                                  ; ENTRY FCB (in PSP) contains drive # to crunch on
 21200                                  ;       PathPos = ptr to string with pathname in it
 21201                                  ;       PathCnt = length of string
 21202                                  ;
 21203                                  ; EXIT  PathPos = ptr after pathname (w/ NULL) in string
 21204                                  ;       PathCnt = length left in string
 21205                                  ;       DestIsDir = nonzero if pathname delimiter char's found in pathname
 21206                                  ;       DestInfo<bit1> = set if wildcard char's found in pathname
 21207                                  ;       If path crunched successfully,
 21208                                  ;         CY = clear
 21209                                  ;         Current directory is changed to directory in pathname
 21210                                  ;         UserDir1 contains previous directory for use by RestUDir
 21211                                  ;         RestDir = nonzero to flag later restoration of user's dir
 21212                                  ;         DestTail = ptr to beginning of filename
 21213                                  ;         If filename found in pathname,
 21214                                  ;           ZR = clear
 21215                                  ;           FCB filename fields contain filename
 21216                                  ;         If filename not found (pure directory path),
 21217                                  ;           ZR = set
 21218                                  ;           FCB filename fields are wildcarded with ?'s
 21219                                  ;       If pathcrunch failed (no ChDir's worked),
 21220                                  ;         CY = set
 21221                                  ;         Msg_Numb = extended error code
 21222                                  ;
 21223                                  ; NOTE  DIR asks PathCrunch to forego parsing the filename into the
 21224                                  ;       FCB by setting DirFlag. In this case, the FCB is returned
 21225                                  ;       with the filename wildcarded.
 21226                                  
 21227                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 21228                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2767h
 21229                                  
 21230                                  PathCrunch:
 21231                                  	; MSDOS 6.0
 21232 0000267A C706[988D]0000          	mov     word [Msg_Numb],0
 21233                                  				;AN022; Set up message flag
 21234                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21235                                  	;mov	dl,[5Ch]
 21236 00002680 8A165C00                	mov	dl,[FCB]	; DL = drive # (1 = A)
 21237 00002684 E824FF                  	call	SAVUDIR		; save current directory in UserDir1
 21238                                  	; MSDOS 6.0
 21239 00002687 7233                     	jc	short pcrunch_cderrj
 21240                                  				;AN022; if error on current dir - report
 21241 00002689 E86004                  	call	SETPATH		; scan past switches, whitespace
 21242                                  
 21243                                  ;       DX = ptr to pathname, NULL-terminated
 21244                                  ;       PathPos = ptr to byte after NULL at end of pathname
 21245                                  
 21246                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21247 0000268C F606[308C]02            	test	byte [DestInfo],2 ; test if wildcards (? or *) seen
 21248 00002691 752C                    	jnz	short trypeel	; wildcard seen, peel filename
 21249                                  
 21250                                  	;mov	ah,CHDir ; 3Bh
 21251 00002693 B43B                    	mov	ah,3Bh
 21252 00002695 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21253                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21254                                  	; MSDOS 6.0
 21255 00002697 7313                    	jnc	short chdir_worked	;AN022; no error - continue
 21256                                  	
 21257 00002699 E854F6                  	call	get_ext_error_number    ;AN022; get the extended error
 21258 0000269C 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found
 21259 0000269F 741E                    	je	short trypeel		;AC022;    keep trying
 21260 000026A1 83F805                  	cmp	ax,ERROR_ACCESS_DENIED  ;AN022; if access denied
 21261 000026A4 7419                    	je	short trypeel		;AC022;    keep trying
 21262 000026A6 A3[988D]                	mov	[Msg_Numb],ax           ;AN022; set up message flag
 21263 000026A9 E99C00                  	jmp	peelfail                ;AN022; exit with other error
 21264                                  
 21265                                  	; MSDOS 3.3
 21266                                  	;jc	short trypeel
 21267                                  chdir_worked:
 21268                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21269 000026AC E83206                  	call	SetRest1	; set 'Restore Directory' flag true
 21270 000026AF B03F                    	mov	al,'?'		; if pure dir, wildcard filename in FCB
 21271 000026B1 BF5D00                  	mov	di,5Dh  ; FCB+1
 21272 000026B4 B90B00                  	mov	cx,11
 21273 000026B7 F3AA                    	rep	stosb
 21274 000026B9 30C0                    	xor	al,al		; return carry clear, zero set
 21275 000026BB C3                      	retn
 21276                                  
 21277                                  pcrunch_cderrj: 		;AN022; need this for long jmp
 21278 000026BC E98100                  	jmp	pcrunch_cderr	;AN022;
 21279                                  
 21280                                  trypeel:
 21281 000026BF 8B36[048C]              	mov	si,[PathPos]
 21282 000026C3 4E                      	dec	si		; SI = ptr to NULL at end of pathname
 21283 000026C4 8A44FF                  	mov	al,[si-1]	; AL = last char of pathname
 21284                                  	; 25/02/2023
 21285                                  	; MSDOS 5.0 (& 6.0)
 21286 000026C7 803E[B38D]00            	cmp	byte [KPARSE],0
 21287 000026CC 7505                    	jnz	short delstrt	; Last char is 2nd KANJI byte, might be '\'
 21288                                  	
 21289 000026CE E89BFF                  	call	pathchrcmp
 21290 000026D1 7475                    	jz	short peelfail	; Trailing '/'
 21291                                  delstrt:
 21292 000026D3 89F1                    	mov	cx,si		; CX = ptr to NULL at end of pathname
 21293 000026D5 89D6                    	mov	si,dx		; SI = ptr to start of pathname
 21294 000026D7 52                      	push	dx		; save ptr to pathname
 21295                                  delloop:
 21296 000026D8 39CE                    	cmp	si,cx
 21297                                  	;jz	short BADRET
 21298                                  	; 25/02/2023
 21299 000026DA 7413                    	je	short gotdele	; no char's left, we have what we have
 21300 000026DC AC                      	lodsb			; AL = next char of pathname
 21301 000026DD E8DFFC                  	call	testkanj
 21302 000026E0 7403                    	jz	short notkanj8	; not Kanji, move along
 21303 000026E2 46                      	inc	si
 21304 000026E3 EBF3                    	jmp	short delloop	
 21305                                  
 21306                                  	; 25/02/2023
 21307                                  	; MSDOS 3.3
 21308                                  	;mov	al,[si]
 21309                                  	;call	PATHCHRCMP
 21310                                  	;jz	short TRYCD
 21311                                  	;dec	si
 21312                                  	;jmp	short delloop
 21313                                  
 21314                                  notkanj8:
 21315 000026E5 E884FF                  	call	pathchrcmp
 21316 000026E8 75EE                    	jnz	short delloop	; not a path delimiter, keep looking
 21317 000026EA 89F2                    	mov	dx,si
 21318 000026EC 4A                      	dec	dx		; DX = ptr to last delimiter found	
 21319 000026ED EBE9                    	jmp	short delloop	; go look for more
 21320                                  
 21321                                  	; 25/02/2023
 21322                                  	; MSDOS 5.0 (& 6.0)
 21323                                  gotdele:
 21324 000026EF 89D6                    	mov	si,dx		; SI = ptr to pathname or last delim
 21325 000026F1 5A                      	pop	dx		; DX = ptr to pathname
 21326 000026F2 39D6                    	cmp	si,dx
 21327 000026F4 7454                    	je	short badret	; didn't find path delim
 21328 000026F6 89F1                    	mov	cx,si		; CX = ptr to last path delimiter
 21329 000026F8 89D6                    	mov	si,dx		; SI = ptr to pathname
 21330                                  delloop2:			; Set value of KPARSE
 21331 000026FA 39CE                    	cmp	si,cx
 21332 000026FC 7412                    	je	short trycd	; roll up till SI meets CX
 21333 000026FE C606[B38D]00            	mov	byte [KPARSE],0
 21334 00002703 AC                      	lodsb
 21335 00002704 E8B8FC                  	call	testkanj
 21336 00002707 74F1                    	jz	short delloop2
 21337 00002709 46                      	inc	si
 21338 0000270A FE06[B38D]              	inc	byte [KPARSE]
 21339 0000270E EBEA                    	jmp	short delloop2
 21340                                  
 21341                                  trycd:
 21342 00002710 50                      	push	ax
 21343                                  	; 25/02/2023
 21344 00002711 B02E                    	mov	al,'.'
 21345                                  	;mov	al,[DOT_CHR]	; AL = '.'
 21346                                  	; MSDOS 6.0
 21347 00002713 384401                  	cmp	[si+1],al	; check for '.' after path delim
 21348                                  				;M019; allow continuation if '. ' or 
 21349                                  				;M019; '..' is not found.
 21350 00002716 7509                    	jne	short trycd1	;M019; '.' not found
 21351 00002718 384402                  	cmp	[si+2],al	;M019; check for '..'
 21352 0000271B 7404                    	je	short trycd1	;M019; found '..'
 21353 0000271D 807C0200                	cmp	byte [si+2],0	;M019; check for '. ' (null terminated)
 21354                                  trycd1:	
 21355 00002721 58                      	pop     ax
 21356 00002722 7424                    	jz	short peelfail	; if . or .., pure cd should have worked
 21357                                  
 21358                                  	; 25/02/2023
 21359                                  	; MSDOS 3.3
 21360                                  	;cmp	[si+1],	al	; check for '.' after path delim
 21361                                  	;pop	ax
 21362                                  	;jz	short PEELFAIL	; if . or .., pure cd should have worked
 21363                                  
 21364                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21365 00002724 8A44FF                  	mov	al,[si-1]
 21366 00002727 3C3A                    	cmp	al,':' 		; Special case d:\file
 21367 00002729 741F                    	je	short badret
 21368                                  	; 25/02/2023
 21369                                  	; MSDOS 6.0
 21370 0000272B 803E[B38D]00            	cmp	byte [KPARSE],0
 21371 00002730 7505                    	jnz	short notdoublesl
 21372 00002732 E837FF                  	call	pathchrcmp
 21373                                  	;jnz	short notdoublesl
 21374                                  				; Last char is 2nd KANJI byte, might be '\'
 21375                                  	; 25/02/2023
 21376 00002735 7411                    	jz	short peelfail 
 21377                                  ;peelfail:
 21378                                  	;stc
 21379                                  	;retn
 21380                                  
 21381                                  notdoublesl:
 21382 00002737 C60400                  	mov	byte [si],0
 21383                                  	;mov	ah,CHDir ; 3Bh
 21384 0000273A B43B                    	mov	ah,3Bh
 21385 0000273C CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21386                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21387 0000273E 7320                    	jnc	short cdsucc
 21388                                  
 21389                                  	; 25/02/2023
 21390                                  	; MSDOS 6.0
 21391                                  pcrunch_cderr:
 21392 00002740 E8ADF5                  	call	get_ext_error_number
 21393                                  				;AN022; get the extended error
 21394 00002743 A3[988D]                	mov	[Msg_Numb],ax	;AN022; set up message flag
 21395 00002746 09F6                    	or	si,si		;AN022; set up zero flag to not zero
 21396                                  peelfail: ; 25/02/2023
 21397 00002748 F9                      	stc			;AN022; set up carry flag
 21398                                  pcrunch_retn:
 21399 00002749 C3                      	retn
 21400                                  
 21401                                  badret:
 21402                                  	; MSDOS 3.3 & MSDOS 6.0
 21403 0000274A 8A04                    	mov	al,[si]
 21404 0000274C E81DFF                  	call	pathchrcmp	; Special case 'DIRCHAR'file
 21405 0000274F F9                      	stc
 21406 00002750 75F7                    	jnz	short pcrunch_retn
 21407 00002752 30DB                    	xor	bl,bl
 21408 00002754 865C01                  	xchg	bl,[si+1]
 21409                                  	;mov	ah,CHDir ; 3Bh
 21410 00002757 B43B                    	mov	ah,3Bh
 21411 00002759 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21412                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21413                                  	;jc	short pcrunch_retn ; MSDOS 3.3
 21414                                  	; 25/02/2023
 21415 0000275B 72E3                    	jc	short pcrunch_cderr
 21416                                  				;AN022; go to error exit 
 21417 0000275D 885C01                  	mov	[si+1],bl
 21418                                  cdsucc:
 21419 00002760 E87E05                  	call	SetRest1
 21420 00002763 46                      	inc	si		; Reset zero
 21421 00002764 8936[2E8C]              	mov	[DestTail],si
 21422                                  	; 25/02/2023
 21423                                  	; MSDOS 6.0
 21424 00002768 9C                      	pushf			;AN015; save flags
 21425 00002769 803E[0C8C]FF            	cmp	byte [DirFlag],-1
 21426                                  				;AN015; don't do parse if in DIR
 21427 0000276E 7408                    	je	short pcrunch_end
 21428                                  				;AN015;
 21429                                  	; MSDOS 3.3 & MSDOS 6.0
 21430 00002770 BF5C00                  	mov	di,FCB  ; 5Ch
 21431                                  	;mov	ax,(Parse_File_Descriptor<<8)|2 ; 2902h
 21432 00002773 B80229                  	mov	ax,2902h	
 21433 00002776 CD21                    	int	21h		; Parse with default drive
 21434                                  			; DOS -	PARSE FILENAME
 21435                                  			; DS:SI	-> string to parse
 21436                                  			; ES:DI	-> buffer to fill with unopened	FCB
 21437                                  			; AL = bit mask	to control parsing
 21438                                  	; MSDOS 3.3
 21439                                  	;retn
 21440                                  
 21441                                  pcrunch_end:
 21442 00002778 9D                      	popf			;AN015; get flags back
 21443 00002779 C3                      	retn
 21444                                  
 21445                                  ;============================================================================
 21446                                  ; TMISC1.ASM, MSDOS 6.0, 1991
 21447                                  ;============================================================================
 21448                                  ; 05/10/2018 - Retro DOS v3.0
 21449                                  
 21450                                  ;TITLE	Part7 COMMAND Transient Routines
 21451                                  
 21452                                  ;	More misc routines
 21453                                  
 21454                                  ;---------------------------
 21455                                  ; We can get rid of this switch processing code if we can take
 21456                                  ; care of the remaining two calls to switch, later in the file.
 21457                                  ; However, I have not checked whether or not any other files use
 21458                                  ; switch -- after all, it IS public!
 21459                                  ;---------------------------
 21460                                  
 21461                                  ; 28/03/2023
 21462                                  SWCOUNT  EQU  6  ; MSDOS 6.0		; Length of switch_list
 21463                                  ;SWCOUNT EQU  5  ; MSDOS 3.3	
 21464                                  
 21465                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1AC2h
 21466                                  
 21467                                  ; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 21468                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2869h
 21469                                  
 21470                                  ; ---------------------------------------------------------------------------
 21471                                  
 21472                                  	; 25/02/2023
 21473                                  RETSW:
 21474 0000277A 93                      	xchg	ax,bx		; Put switches in AX
 21475 0000277B C3                      	retn
 21476                                  
 21477                                  ; =============== S U B	R O U T	I N E =======================================
 21478                                  
 21479                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 21480                                  SWITCH:
 21481 0000277C 31DB                    	xor	bx,bx		; Initialize - no switches set
 21482                                  SWLOOP:
 21483 0000277E E85DFE                  	call	scanoff		; Skip any delimiters
 21484 00002781 3A06[A98A]              	cmp	al,[SWITCHAR]	; Is it a switch specifier?
 21485 00002785 75F3                    	jnz	short RETSW	; No -- we're finished
 21486 00002787 81CB0080                	or	bx,8000h
 21487                                  	;or	bx,FSWITCH	; Indicate there is a switch specified
 21488 0000278B 46                      	inc	si		; Skip over the switch character
 21489 0000278C E84FFE                  	call	scanoff
 21490 0000278F 3C0D                    	cmp	al,0Dh
 21491 00002791 74E7                    	je	short RETSW	; Oops
 21492 00002793 46                      	inc	si
 21493                                  
 21494                                  	; Convert lower case input to upper case
 21495                                  
 21496 00002794 E852FC                  	call	UPCONV
 21497                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 21498                                  
 21499 00002797 BF[3184]                	mov	di,switch_list	; "?VBAPW" (for MSDOS 6.0)
 21500                                  				; ("VBAPW" (for MSDOS 3.3))
 21501 0000279A B90600                  	mov	cx,6  ; MSDOS 6.0
 21502                                  	;mov	cx,5  ; MSDOS 3.3
 21503                                  	;mov	cx,SWCOUNT ; 5 (for MSDOS 3.3), (6 (for MSDOS 6.0))
 21504                                  		
 21505                                  	;nop
 21506                                  		
 21507 0000279D F2AE                    	repne	scasb		; Look for matching switch
 21508 0000279F 7507                    	jnz	short BADSW
 21509 000027A1 B80100                  	mov	ax,1
 21510 000027A4 D3E0                    	shl	ax,cl		; Set a bit for the switch
 21511 000027A6 09C3                    	or	bx,ax
 21512                                  BADSW: 				; Retro DOS v3.0 COMMAND.COM modificiation
 21513 000027A8 EBD4                    	jmp	short SWLOOP
 21514                                  ;BADSW:
 21515                                  	;jmp	short SWLOOP
 21516                                  ;DRVBAD:
 21517                                  ;	mov	dx,baddrv_ptr
 21518                                  ;	jmp	cerror
 21519                                  EXTERNALJ:
 21520 000027AA E90501                  	jmp	EXTERNAL
 21521                                  FNDCOM:				; search the internal command table
 21522 000027AD 08C0                    	or	al,al		; Get real length of first arg
 21523 000027AF 74F9                    	jz	short EXTERNALJ	; If 0, it must begin with "\" so has
 21524                                  				;  to be external.
 21525                                  ; barryf code starts here
 21526                                  
 21527 000027B1 E82703                  	call	test_append	; see if APPEND installed
 21528 000027B4 7429                    	jz	short CONTCOM	; not loaded
 21529                                  
 21530                                  APPEND_INTERNAL:
 21531 000027B6 8A0E[2F8B]              	mov	cl,[IDLEN]
 21532 000027BA B500                    	mov	ch,0
 21533 000027BC 890E[048C]              	mov	[PathPos],cx
 21534                                  	
 21535                                  	; 25/02/2023	
 21536                                  	; MSDOS 6.0
 21537 000027C0 FE06[9A8D]              	inc 	byte [append_exec]
 21538                                  				;AN041; set APPEND to ON
 21539 000027C4 E8B603                  	call	IOSET		; re-direct the o'l io
 21540                                  
 21541 000027C7 BE[2F8B]                	mov	si,IDLEN	; address command name, DS already set	
 21542 000027CA BAFFFF                  	mov	dx,-1 ; 0FFFFh	; set invoke function
 21543                                  		
 21544                                  	; MSDOS 6.0
 21545 000027CD BF[BB4D]                	mov	di,append_parse
 21546                                  				;AN010; Get the entry point for PARSE for APPEND
 21547                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21548 000027D0 B801AE                  	mov	ax,0AE01h
 21549 000027D3 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal
 21550                                  			; - INSTALLABLE	COMMAND	- EXECUTE
 21551                                  			; DX = FFFFh, DS:SI -> buffer
 21552                                  			; Return: buffer at DS:SI filled with a	length byte
 21553                                  			; followed by the uppercase internal command
 21554                                  			; to execute (if length not 0)
 21555                                  	; 25/02/2023
 21556                                  	; INT 2Fh
 21557                                  	; 	AX = AE01h
 21558                                  	; entry:
 21559                                  	; 	DX = magic value FFFFh
 21560                                  	; 	CH = 00h
 21561                                  	; 	CL = length of command name
 21562                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 21563                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 21564                                  	; return:
 21565                                  	;	DS:SI buffer updated
 21566                                  	;	if length byte is nonzero, the following bytes contain
 21567                                  	;	the uppercase internal command to execute and the command line
 21568                                  	; 	buffer contains the command's parameters
 21569                                  	;	(the first DS:[SI] bytes are ignored)
 21570                                  	;
 21571                                  	; Format of COMMAND.COM command line buffer:
 21572                                  	;	Offset  Size    Description
 21573                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 21574                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 21575                                  	;	N BYTEs command line text, terminated by 0Dh
 21576                                  	;
 21577                                  	; Format of command name buffer:
 21578                                  	;	Offset  Size    Description
 21579                                  	;	00h     BYTE    length of command name
 21580                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 21581                                  
 21582 000027D5 803E[2F8B]00            	cmp	byte [IDLEN],0 ; execute requested
 21583 000027DA 7503                    	jne	short CONTCOM
 21584 000027DC E9A300                  	jmp	CMD_DONE
 21585                                  
 21586                                  	;nop
 21587                                  CONTCOM:			; continue with internal scan
 21588 000027DF BF[B082]                	mov	di,COMTAB
 21589 000027E2 31C9                    	xor	cx,cx
 21590                                  FINDCOM:
 21591 000027E4 BE[308B]                	mov	si,ID		; pointer to command argument
 21592 000027E7 8A0D                    	mov	cl,[di]		; load length of internal command
 21593 000027E9 47                      	inc	di		; advance past length
 21594 000027EA E3BE                    	jcxz	EXTERNALJ 	; if it's zero, we're out of internals
 21595 000027EC 3A0E[2F8B]              	cmp	cl,[IDLEN]	; that of the command argument
 21596 000027F0 7506                    	jne	short ABCD	; lengths not equal ==> strings not eq
 21597 000027F2 890E[048C]              	mov	[PathPos],cx	; store length of command
 21598 000027F6 F3A6                    	repe	cmpsb
 21599                                  ABCD:					
 21600 000027F8 9F                      	lahf			; save the good ol' flags
 21601 000027F9 01CF                    	add	di,cx		; skip over remaining internal, if any
 21602 000027FB 8A05                    	mov	al,[di]		; load drive-check indicator byte (DCIB)
 21603 000027FD A2[B78A]                	mov	[CHKDRV],al	; save command flag byte in chkdrv
 21604 00002800 47                      	inc	di		; increment DI (OK, OK, I'll stop)
 21605 00002801 8B1D                    	mov	bx,[di]		; load internal command address
 21606 00002803 47                      	inc	di		; skip over the puppy
 21607 00002804 47                      	inc	di
 21608                                  		
 21609                                  	; MSDOS 6.0
 21610 00002805 8B15                    	mov	dx,[di]		; load ptr to help msg #s
 21611 00002807 47                      	inc	di
 21612 00002808 47                      	inc	di
 21613 00002809 9E                      	sahf			; remember those flags?
 21614 0000280A 75D8                    	jnz	short FINDCOM	; well, if all the cmps worked...
 21615                                  
 21616                                  ; All messages get redirected.
 21617                                  
 21618 0000280C 803E[9A8D]00            	cmp     byte [append_exec],0
 21619                                  				;AN041; APPEND just executed?
 21620 00002811 7503                    	jnz 	short DONT_SET_IO
 21621                                  				;AN041; Yes - this junk is already set
 21622 00002813 E86703                  	call	IOSET		; re-direct the ol' i/o
 21623                                  
 21624                                  DONT_SET_IO:			;AN041;
 21625                                  
 21626                                  ; Check for /?. Certain commands, flagged fLimitHelp,
 21627                                  ; respond to /? only if it is the only command-line argument.
 21628                                  
 21629 00002816 A1[BC8A]                	mov	ax,[COMSW]	; AX = switches after command
 21630 00002819 0B06[C28A]              	or	ax,[AllSwitch]	; AX = all switches
 21631                                  	;and	ax,SwitchQues	
 21632 0000281D 83E020                  	and	ax,20h
 21633 00002820 7426                    	jz	short DRIVE_CHECK
 21634                                  				; /? not in command line
 21635 00002822 F606[B78A]04            	test	byte [CHKDRV],4	
 21636                                  	;test	byte [CHKDRV],fLimitHelp
 21637 00002827 7407                    	jz	short DO_HELP	; /? allowed in combination
 21638                                  
 21639                                  ; Make sure /? is the only argument on the command line.
 21640                                  
 21641 00002829 833E[7490]02            	cmp	word [ARG+ARG_UNIT.argvcnt],2
 21642 0000282E 7518                    	jne	short DRIVE_CHECK
 21643                                  				; /? not only arg - ignore
 21644                                  
 21645                                  ; Note: this is all the check we need, even against things like /??.
 21646                                  ; Our argv parser breaks /?? into two args, /? and ?.
 21647                                  
 21648                                  DO_HELP:
 21649                                  ; DX = ptr to word list of msg #s, terminated by zero word
 21650                                  
 21651 00002830 89D6                    	mov	si,dx		; SI = ptr to list of msg #s
 21652                                      	;mov	ax,no_subst	; AL = no subst's code
 21653 00002832 B80000                  	mov	ax,0
 21654 00002835 50                      	push	ax		; build subst block on stack
 21655                                  
 21656                                  NEXT_HELP_MSG:
 21657 00002836 AD                      	lodsw			; AX = help msg # or zero
 21658 00002837 09C0                    	or	ax,ax
 21659 00002839 7409                    	jz	short HELP_DONE
 21660 0000283B 50                      	push	ax		; SS:SP = ptr to subst block
 21661                                  				; (msg # and no_subst byte)
 21662                                  ;; We assume DS = SS.
 21663                                  	
 21664 0000283C 89E2                    	mov     dx,sp		; DS:DX = ptr to subst block
 21665 0000283E E89025                  	call	std_printf	; display help message	
 21666 00002841 58                      	pop	ax		; remove msg # from stack
 21667 00002842 EBF2                    	jmp	short NEXT_HELP_MSG
 21668                                  
 21669                                  HELP_DONE:
 21670 00002844 58                      	pop	ax		; clean up stack
 21671 00002845 E9BCD8                  	jmp	TCOMMAND	
 21672                                  
 21673                                  	; 25/02/2023
 21674                                  	; MSDOS 3.3
 21675                                  	;sahf			; remember those flags?
 21676                                  	;jnz	short FINDCOM	; well, if all the cmps worked...
 21677                                  	;call	IOSET		; re-direct the ol' i/o
 21678                                  
 21679                                  DRIVE_CHECK:
 21680 00002848 F606[B78A]01            	test	byte [CHKDRV],1
 21681                                  	;test	byte [CHKDRV],FCHECKDRIVE 
 21682                                  				; did we wanna check those drives?
 21683 0000284D 7411                    	jz	short NOCHECK
 21684 0000284F A0[BA8A]                	mov	al,[PARM1]	; parse_file_descriptor results tell
 21685 00002852 0A06[BB8A]              	or	al,[PARM2]	; us whether those drives were OK
 21686 00002856 3CFF                    	cmp	al,-1
 21687 00002858 7506                    	jne	short NOCHECK
 21688                                  	;jmp	DRVBAD
 21689                                  	; 25/02/2023
 21690                                  DRVBAD:
 21691 0000285A BA[587F]                	mov	dx,baddrv_ptr
 21692 0000285D E9F200                  	jmp	cerror
 21693                                  
 21694                                  ; The user may have omitted the space between the command and its arguments.
 21695                                  ; We need to copy the remainder of the user's command line into the buffer.
 21696                                  ; Note that thisdoes not screw up the arg structure; it points into COMBUF not
 21697                                  ; into the command line at 80.
 21698                                  
 21699                                  NOCHECK:
 21700 00002860 E85B02                  	call	cmd_copy
 21701                                  SWITCHECK:
 21702                                  	;test	byte [CHKDRV],2
 21703 00002863 F606[B78A]02            	test	byte [CHKDRV],fSwitchAllowed 
 21704                                  				; Does the command take switches
 21705 00002868 7516                    	jnz	short REALWORK	; Yes, process the command
 21706 0000286A E82F00                  	call	noswit		; No, check to see if any switches
 21707 0000286D 7511                    	jnz	short REALWORK	; None, process the command
 21708                                  
 21709                                  	; MSDOS 6.0
 21710                                  	;mov	byte [msg_disp_class],2
 21711 0000286F C606[FA7E]02            	mov	byte [msg_disp_class],parse_msg_class
 21712                                  				;AN000; set up parse error msg class
 21713 00002874 BA[FC7E]                	mov	dx,extend_buf_ptr	
 21714                                  				;AC000; get extended message pointer
 21715                                  	;mov	word [extend_buf_ptr],3
 21716 00002877 C706[FC7E]0300          	mov	word [extend_buf_ptr],BadSwt_Ptr
 21717                                  				;AN000; get "Invalid switch" message number
 21718 0000287D E9D200                  	jmp	cerror		; Print error and chill out...
 21719                                  
 21720                                  	; 25/02/2023
 21721                                  	; MSDOS 3.3
 21722                                  	;mov	dx,BADPARMPTR
 21723                                  	;jmp	CERROR
 21724                                  
 21725                                  REALWORK:
 21726 00002880 FFD3                    	call	bx		; do some real work, at last
 21727                                  
 21728                                  ; See if we're in a batch CALL command. If we are, reprocess the command line,
 21729                                  ; otherwise, go get another command.
 21730                                  
 21731                                  CMD_DONE:
 21732 00002882 0E                      	push	cs		; g  restore data segment
 21733 00002883 1F                      	pop	ds		; g
 21734 00002884 1E                      	push	ds
 21735 00002885 8E1E[A58A]              	mov	ds,[RESSEG]	; g  save data segment
 21736                                  	;cmp	byte [Call_Flag],1
 21737                                  				; G  Is a call in progress?
 21738 00002889 803E[9901]01            	cmp	byte [Call_Flag],call_in_progress
 21739 0000288E C606[9901]00            	mov	byte [Call_Flag],0
 21740                                  				; G  Either way, reset flag
 21741 00002893 1F                      	pop	ds		; g  get data segment back
 21742 00002894 7403                    	jz	short INCALL	; G
 21743 00002896 E96BD8                  	jmp	TCOMMAND	; chill out...
 21744                                  INCALL:
 21745 00002899 E93BDA                  	jmp	DOCOM1
 21746                                  
 21747                                  ; =============== S U B	R O U T	I N E =======================================
 21748                                  
 21749                                  	; 25/02/2023
 21750                                  noswit:
 21751 0000289C 57                      	push	di		; Save di
 21752 0000289D BF8100                  	mov	di,81h		; di = ptr to command args
 21753 000028A0 BE8000                  	mov	si,80h		; Get address of length of command args
 21754 000028A3 AC                      	lodsb			; Load length
 21755 000028A4 88C1                    	mov	cl,al		; Move length to cl
 21756 000028A6 30ED                    	xor	ch,ch		; Zero ch
 21757 000028A8 2EA0[A98A]              	mov	al,[cs:SWITCHAR] ; al = switch character
 21758                                  	;cmp	al,0		; Turn off ZF
 21759                                  	; 25/02/2023
 21760 000028AC 20C0                    	and	al,al
 21761 000028AE F2AE                    	repne	scasb		; Scan for a switch character and return
 21762 000028B0 5F                      	pop	di		;  with ZF set if one was found
 21763 000028B1 C3                      	retn
 21764                                  
 21765                                  ; ---------------------------------------------------------------------------
 21766                                  
 21767                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 21768                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:29A6h
 21769                                  
 21770                                  EXTERNAL:
 21771 000028B2 E82602                  	call	test_append	; check to see if append installed
 21772 000028B5 7403                    	jz	short NOT_BARRYF
 21773                                  				; no - truly external command
 21774 000028B7 E9FCFE                  	jmp	APPEND_INTERNAL	; yes - go to Barryf code
 21775                                  
 21776                                  NOT_BARRYF:
 21777 000028BA 2EC606[B88A]00          	mov	byte [cs:FILTYP],0
 21778 000028C0 2E8A16[C58A]            	mov	dl,[cs:SPECDRV]
 21779 000028C5 2E8816[2F8B]            	mov	[cs:IDLEN],dl
 21780 000028CA 2EC606[278C]00          	mov	byte [cs:ROM_CALL],0
 21781 000028D0 52                      	push	dx
 21782 000028D1 BA[2F8B]                	mov	dx,IDLEN
 21783 000028D4 E823DB                  	call	ROM_SCAN
 21784 000028D7 5A                      	pop	dx
 21785                                  	;jnc	short POSTSAVE
 21786 000028D8 7305                    	jnc	short DO_SCAN
 21787 000028DA 2EFE06[278C]            	inc	byte [cs:ROM_CALL]
 21788                                  	;jmp	short POSTSAVE
 21789                                  
 21790                                  	;nop
 21791                                  DO_SCAN:
 21792                                  POSTSAVE:
 21793 000028DF BF[CD89]                	mov	di,EXECPATH
 21794 000028E2 C60500                  	mov	byte [di],0	; Initialize to current directory
 21795                                  	
 21796 000028E5 2E803E[278C]00          	cmp	byte [cs:ROM_CALL],0
 21797                                  	;jz	short RESEARCH
 21798                                  	; 25/02/2023
 21799                                  	;jmp	short NEOEXECUTE
 21800 000028EB 750F                    	jnz	short NEOEXECUTE	
 21801                                  
 21802                                  	;nop
 21803                                  RESEARCH:
 21804 000028ED E87008                  	call	path_search	; find the mother (result in execpath)
 21805 000028F0 09C0                    	or	ax,ax		; did we find anything?
 21806                                  	;jz	short BADCOMJ45	; null means no (sob)
 21807                                  	; 25/02/2023
 21808 000028F2 7459                    	jz	short BADCOM
 21809 000028F4 83F804                  	cmp	ax,4		; 04H and 08H are .exe and .com
 21810                                  				; fuckin' sixteen-bit machine ought
 21811                                  	;jl	short BATCOMJ	; to be able to handle a SIXTEEN-BIT
 21812                                  				; DISPLACEMENT!!
 21813                                  	;;jmp	short NEOEXECUTE
 21814                                  	;jmp	short EXECUTE	
 21815                                  	; 25/02/2023
 21816 000028F7 7D03                    	jnl	short EXECUTE ; jge
 21817                                  
 21818                                  	; 02H is .bat
 21819                                  
 21820                                  	;nop
 21821                                  BATCOMJ:
 21822 000028F9 E98EDE                  	jmp	BATCOM
 21823                                  
 21824                                  	; 25/02/2023
 21825                                  ;BADCOMJ45:
 21826                                  	;jmp	short BADCOM
 21827                                  
 21828                                  	;nop
 21829                                  EXECUTE:
 21830                                  NEOEXECUTE:
 21831 000028FC E87E02                  	call	IOSET
 21832                                  
 21833                                  ; MSDOS 6.0
 21834                                  ;M051
 21835                                  ; Previously LoadHigh was jumping to the execute label above. This was wrong
 21836                                  ;because IOSET was getting invoked twice resulting in 2 sets of redirections.
 21837                                  ;After a close, this would still leave one open active resulting in sharing
 21838                                  ;errors on subsequent opens of the redirected file.
 21839                                  
 21840                                  LH_EXECUTE:			;M051	
 21841 000028FF 8E06[B58A]              	mov	es,[TRAN_TPA]
 21842                                  	;mov	ah,DEALLOC ; 49h
 21843 00002903 B449                    	mov	ah,49h
 21844 00002905 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 21845                                  			; ES = segment address of area to be freed
 21846                                  				; Now running in "free" space
 21847 00002907 8E06[A58A]              	mov	es,[RESSEG]
 21848 0000290B 26FE06[8401]            	inc	byte [es:ExtCom] ; Indicate external command
 21849 00002910 26C606[8C01]00          	mov	byte [es:RestDir],0 
 21850                                  				; Since USERDIR1 is in transient, insure
 21851                                  				; this flag value for re-entry to COMMAND
 21852                                  	; MSDOS 6.0
 21853 00002916 BE[CD89]                	mov	si,EXECPATH	  ; offset TRANGROUP:EXECPATH	
 21854 00002919 BF[4B03]                	mov	di,SafePathBuffer ; offset RESGROUP:SAFEPATHBUFFER
 21855                                  	;mov	cx,LENMSGORPATHBUF
 21856 0000291C B95000                  	mov	cx,80
 21857 0000291F FC                      	cld
 21858 00002920 F3A4                    	rep	movsb		; copy program pathname to resident
 21859                                  
 21860                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21861 00002922 BF5C00                  	mov	di,FCB ; 5Ch
 21862 00002925 89FE                    	mov	si,di
 21863                                  	;mov	cx,82 ; 52h	; moving (100h-5Ch)/2 = 80h-2Eh
 21864 00002927 B152                    	mov	cl,82 ; 25/02/2023
 21865 00002929 F3A5                    	rep	movsw		; Transfer parameters to resident header
 21866                                  	
 21867                                  	; 25/02/2023
 21868                                  	;mov	dx,EXECPATH  ; MSDOS 3.3
 21869                                  	; MSDOS 6.0 (& 5.0)
 21870                                  	;mov	dx,offset RESGROUP:SAFEPATHBUFFER
 21871 0000292B BA[4B03]                	mov	dx,SafePathBuffer
 21872 0000292E 06                      	push	es
 21873 0000292F 1F                      	pop	ds
 21874                                  
 21875                                  	;mov	bx,offset RESGROUP:EXEC_BLOCK
 21876 00002930 BB[2703]                	mov	bx,Exec_Block  ; = offset EnvirSeg
 21877                                  	;mov	ax,EXEC*256 ; 4B00h
 21878 00002933 B8004B                  	mov	ax,4B00h
 21879                                  	;test	byte [ROM_CALL],-1 ; 0FFh ; MSDOS 3.3
 21880 00002936 2EF606[278C]FF          	test	byte [cs:ROM_CALL],-1 ; MSDOS 6.0 (& 5.0)
 21881 0000293C 7403                    	jz	short OK_EXEC
 21882 0000293E E932DB                  	jmp	ROM_EXEC
 21883                                  
 21884                                  OK_EXEC:
 21885                                  
 21886                                  ; we are now running in free space. Anything we do from here on may get
 21887                                  ; trashed. Move the stack (also in free space) to allocated space because
 21888                                  ; since EXEC restores the stack, somebody may trash what is on the stack.
 21889                                  
 21890 00002941 8CC1                    	mov	cx,es
 21891 00002943 8ED1                    	mov	ss,cx
 21892 00002945 BC[2004]                	mov	sp,RStack
 21893                                  	; MSDOS 3.3
 21894                                  	;jmp	far [EXEC_ADDR]	; Jmp to the EXEC in the resident
 21895                                  	; 25/02/2023
 21896                                  	; MSDOS 6.0
 21897 00002948 2EFF2E[AB8A]            	jmp	far [cs:EXEC_ADDR] ; Jmp to the EXEC in the resident
 21898                                  
 21899                                  ; ---------------------------------------------------------------------------
 21900                                  
 21901                                  	;  25/02/2023 - Retro DOS v4.0 COMMAND.COM
 21902                                  BADCOM:
 21903 0000294D 0E                      	push	cs
 21904 0000294E 1F                      	pop	ds
 21905 0000294F BA[1F7F]                	mov	dx,BADNAM_PTR
 21906                                  cerror:		
 21907 00002952 E87424                  	call	std_eprintf
 21908 00002955 E9ACD7                  	jmp	TCOMMAND
 21909                                  
 21910                                  ; =============== S U B	R O U T	I N E =======================================
 21911                                  
 21912                                  ; Prescan converts the input buffer into a canonicalized form.
 21913                                  ; All redirections and pipes are removed.
 21914                                  
 21915                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21916                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2A51h
 21917                                  
 21918                                  PRESCAN:
 21919 00002958 31C9                    	xor	cx,cx
 21920 0000295A 8E06[A58A]              	mov	es,[RESSEG]
 21921 0000295E BE[0689]                	mov	si,COMBUF+2
 21922 00002961 89F7                    	mov	di,si
 21923                                  COUNTQUOTES:
 21924 00002963 AC                      	lodsb			; get a byte
 21925 00002964 3C22                    	cmp	al,22h	; '"'	; is it a quote?
 21926 00002966 7504                    	jne	short COUNTEND	; no, try for end of road
 21927 00002968 FEC5                    	inc	ch		; bump count
 21928 0000296A EBF7                    	jmp	short COUNTQUOTES
 21929                                  				; go get next char
 21930                                  COUNTEND:
 21931 0000296C 3C0D                    	cmp	al,0Dh	; 13	; end of road?
 21932 0000296E 75F3                    	jne	short COUNTQUOTES
 21933                                  				; no, go back for next char
 21934                                  	; 26/02/2023
 21935                                  	; MSDOS 5.0 (& 6.0)
 21936 00002970 51                      	push	cx		; save count
 21937 00002971 89FE                    	mov	si,di		; restore pointer to begining
 21938                                  KanjiScan:
 21939 00002973 AC                      	lodsb			; get a byte
 21940 00002974 E848FA                  	call	testkanj	; is it a leadin byte
 21941 00002977 740F                    	jz	short KanjiQuote
 21942                                  				; no, check for quotes
 21943 00002979 88C4                    	mov	ah,al		; save leadin
 21944 0000297B AC                      	lodsb			; get trailing byte
 21945 0000297C 3D2020                  	cmp	ax,2020h
 21946                                  	;cmp	ax,DB_SPACE	; is it Kanji space
 21947 0000297F 75F2                    	jne	short KanjiScan	; no, go get next
 21948 00002981 C744FE2020              	mov	word [si-2],2020h
 21949                                  				; replace with spaces
 21950 00002986 EBEB                    	jmp	short KanjiScan	; go get next char
 21951                                  	
 21952                                  KanjiQuote:
 21953 00002988 3C22                    	cmp	al,22h	; '"'	; beginning of quoted string
 21954 0000298A 750D                    	jne	short KanjiEnd	; no, check for end
 21955 0000298C FECD                    	dec	ch		; drop count
 21956 0000298E 74E3                    	jz	short KanjiScan	; if count is zero, no quoting
 21957                                  KanjiQuoteLoop:
 21958 00002990 AC                      	lodsb			; get next byte
 21959 00002991 3C22                    	cmp	al,22h	; '"'	; is it another quote
 21960 00002993 75FB                    	jne	short KanjiQuoteLoop
 21961                                  				; no, get another
 21962 00002995 FECD                    	dec	ch		; yes, drop count
 21963 00002997 EBDA                    	jmp	short KanjiScan	; go get next char
 21964                                  KanjiEnd:
 21965 00002999 3C0D                    	cmp	al,13 ; 0Dh	; end of line character?
 21966 0000299B 75D6                    	jne	short KanjiScan	; go back to beginning
 21967 0000299D 59                      	pop	cx		; get back original count
 21968                                  	; 26/04/2023
 21969 0000299E 89FE                    	mov	si,di		; restore pointer to beginning
 21970                                  	
 21971                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21972                                  PRESCANLP:
 21973 000029A0 AC                      	lodsb
 21974                                  	; 26/02/2023
 21975 000029A1 E81BFA                  	call	testkanj
 21976 000029A4 740C                    	jz	short NOTKANJ6
 21977                                  	; MSDOS 6.0
 21978 000029A6 8805                    	mov	[di],al
 21979 000029A8 47                      	inc	di		; fake STOSB into DS
 21980 000029A9 AC                      	lodsb			; grab second byte
 21981 000029AA 8805                    	mov	[di],al		; fake stosb into DS
 21982 000029AC FEC1                    	inc	cl
 21983 000029AE FEC1                    	inc	cl
 21984 000029B0 EBEE                    	jmp	short PRESCANLP
 21985                                  
 21986                                  NOTKANJ6:
 21987                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21988 000029B2 3C22                    	cmp	al,'"'	; 22h	; " character
 21989 000029B4 7510                    	jne	short TRYGREATER
 21990 000029B6 FECD                    	dec	ch
 21991 000029B8 740C                    	jz	short TRYGREATER
 21992                                  QLOOP:
 21993 000029BA 8805                    	mov	[di],al
 21994 000029BC 47                      	inc	di
 21995 000029BD FEC1                    	inc	cl
 21996 000029BF AC                      	lodsb
 21997 000029C0 3C22                    	cmp	al,'"'		; " character
 21998 000029C2 75F6                    	jne	short QLOOP
 21999 000029C4 FECD                    	dec	ch
 22000                                  TRYGREATER:
 22001 000029C6 3C3E                    	cmp	al,'>' ; 3Eh
 22002                                  	;cmp	al,rabracket	; MSDOS 6.0 (& 5.0)
 22003                                  	;;cmp	al,[RABRACKET]	; MSDOS 3.3
 22004 000029C8 7557                    	jne	short NOOUT
 22005                                  
 22006                                  ; We have found a ">" char. We need to see if there is another ">"
 22007                                  ; following it.
 22008                                  
 22009 000029CA 3804                    	cmp	[si],al
 22010 000029CC 7506                    	jne	short NOAPPND
 22011 000029CE AC                      	lodsb
 22012 000029CF 26FE06[AE01]            	inc	byte [es:Re_Out_App] ; Flag >>
 22013                                  NOAPPND:
 22014                                  ; Now we attempt to find the file name. First, scan off all whitespace
 22015                                  
 22016 000029D4 E807FC                  	call	scanoff
 22017                                  
 22018                                  	; 26/02/2023
 22019                                  	; MSDOS 6.0
 22020 000029D7 3C3C                    	cmp	al,'<' ; 3Ch
 22021                                  	;cmp	al,labracket	;AN040; was there no filename?
 22022 000029D9 7404                    	je	short REOUT_ERRSET
 22023                                  				;AN040; yes - set up error
 22024                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22025 000029DB 3C0D                    	cmp	al,0Dh
 22026 000029DD 750D                    	jnz	short GOTREOFIL
 22027                                  
 22028                                  ; There was no file present. Set us up at end-of-line.
 22029                                  
 22030                                  REOUT_ERRSET:			;AN040; set up for an error
 22031 000029DF C6050D                  	mov	byte [di],0Dh	; Clobber first ">"
 22032 000029E2 26C706[AF01]0900        	mov	word [es:Re_OutStr],9
 22033                                  				; Cause an error later
 22034 000029E9 E9A900                  	jmp	PRESCANEND
 22035                                  
 22036                                  GOTREOFIL:
 22037 000029EC 57                      	push	di
 22038                                  	;mov	di,offset RESGROUP:RE_OUTSTR
 22039 000029ED BF[AF01]                	mov	di,Re_OutStr
 22040 000029F0 89FB                    	mov	bx,di
 22041 000029F2 06                      	push	es
 22042                                  
 22043                                  	; 26/02/2023
 22044                                  	; MSDOS 6.0
 22045                                  SETREOUTSTR:			; Get the output redirection name
 22046                                  				; MSKK06 07/14/89
 22047 000029F3 51                      	push	cx		; save cx
 22048 000029F4 B94D00                  	mov	cx,64+13	; CX = max string length
 22049                                  SETREOUTSTR_LOOP:
 22050 000029F7 AC                      	lodsb
 22051 000029F8 3C0D                    	cmp	al,0Dh
 22052 000029FA 741A                    	je	short GOTRESTR_J
 22053 000029FC E8E7FB                  	call	DELIM
 22054 000029FF 7415                    	jz	short GOTRESTR_J
 22055 00002A01 3A06[A98A]              	cmp	al,[SWITCHAR]
 22056 00002A05 740F                    	je	short GOTRESTR_J
 22057 00002A07 3C22                    	cmp	al,'"' ; 22h 	;AN033; Is the character a quote?
 22058 00002A09 7413                    	je	short PIPEERRSYNJ5_J
 22059                                  				;AN033; Yes - get out quick - or system crashes
 22060 00002A0B 3C3C                    	cmp	al,'<' ; 3Ch
 22061                                  	;cmp	al,labracket	;AN002; Is char for input redirection
 22062 00002A0D 7404                    	je	short ABRACKET_TERM
 22063                                  				;AN002; yes - end of string
 22064 00002A0F 3C3E                    	cmp	al,'>' ; 3Eh
 22065                                  	;cmp	al,rabracket	;AN002; Is char for output redirection
 22066 00002A11 7506                    	jne	short NO_ABRACKET
 22067                                  				;AN002; no - not end of string
 22068                                  ABRACKET_TERM:			;AN002; have end of string by < or >
 22069 00002A13 4E                      	dec	si		;AN002; back up over symbol
 22070 00002A14 B020                    	mov	al,20h ; BLANK	;AN002; show delimiter as char
 22071                                  GOTRESTR_J:
 22072 00002A16 59                      	pop	cx		; MSKK06 07/14/89
 22073 00002A17 EB58                    	jmp	short GOTRESTR	;AN002; go process it
 22074                                  NO_ABRACKET:			;AN002; NOT AT END OF STRING
 22075 00002A19 AA                      	stosb			; store it into resgroup
 22076 00002A1A E2DB                    	loop	SETREOUTSTR_LOOP
 22077                                  				; MSKK06 07/14/89
 22078 00002A1C EBF8                    	jmp	short GOTRESTR_J
 22079                                  PIPEERRSYNJ5_J:
 22080 00002A1E 59                      	pop	cx		; recover CX
 22081 00002A1F EB4B                    	jmp	short PIPEERRSYNJ5
 22082                                  
 22083                                  	; 26/02/2023
 22084                                  ;	; MSDOS 3.3
 22085                                  ;SETREOUTSTR_LOOP:		; Get the output redirection name
 22086                                  ;	lodsb
 22087                                  ;	cmp	al,0Dh
 22088                                  ;	jz	short GOTRESTR
 22089                                  ;	call	DELIM
 22090                                  ;	jz	short GOTRESTR
 22091                                  ;	cmp	al,[SWITCHAR]
 22092                                  ;	je	short GOTRESTR
 22093                                  ;	cmp	al,'"'
 22094                                  ;	jne	short NO_ABRACKET
 22095                                  ;	dec	ch
 22096                                  ;NO_ABRACKET:
 22097                                  ;	stosb
 22098                                  ;	jmp	short SETREOUTSTR_LOOP
 22099                                  
 22100                                  NOOUT:
 22101                                  	; 26/02/2023
 22102                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22103 00002A21 3C3C                    	cmp	al, '<' ; 3Ch
 22104                                  	;cmp	al,labracket	; MSDOS 6.0
 22105                                  	;;cmp	al,[LABRACKET]  ; MSDOS 3.3
 22106 00002A23 7523                    	jne	short CHKPIPE
 22107 00002A25 89F3                    	mov	bx,si		; Save loc of "<"
 22108 00002A27 E8B4FB                  	call	scanoff
 22109                                  	; MSDOS 6.0
 22110 00002A2A 3C3E                    	cmp	al,'>' ; 3Eh
 22111                                  	;cmp	al,rabracket	;AN040; was there no filename?
 22112 00002A2C 7404                    	je	short REIN_ERRSET ;AN040; yes - set up error
 22113                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22114 00002A2E 3C0D                    	cmp	al,0Dh
 22115 00002A30 750B                    	jne	short GOTREIFIL
 22116                                  REIN_ERRSET:			;AN040; set up for error
 22117 00002A32 C6050D                  	mov	byte [di],0Dh	; Clobber "<"
 22118 00002A35 C706[508A]0900          	mov	word [RE_INSTR],9 
 22119                                  				; Cause an error later
 22120 00002A3B EB58                    	jmp	short PRESCANEND
 22121                                  GOTREIFIL:
 22122 00002A3D 57                      	push	di
 22123 00002A3E BF[508A]                	mov	di,RE_INSTR
 22124 00002A41 89FB                    	mov	bx,di
 22125 00002A43 06                      	push	es
 22126 00002A44 0E                      	push	cs
 22127 00002A45 07                      	pop	es		; store in TRANGROUP
 22128                                  	; 26/04/2023
 22129                                  	;jmp	short SETREOUTSTR_LOOP  ; MSDOS 3.3 COMMAND.COM
 22130 00002A46 EBAB                    	jmp	short SETREOUTSTR ; MSDOS 5.0 (& 6.0) COMMAND.COM
 22131                                  				; Get the input redirection name
 22132                                  CHKPIPE:
 22133 00002A48 88C4                    	mov	ah,al
 22134                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22135 00002A4A 80FC7C                  	cmp	ah,'|' ; 7Ch
 22136                                  	;cmp	ah,ALTPIPECHR ; 7Ch
 22137                                  	;je	short ISPIPE3
 22138                                  	;; MSDOS 6.0
 22139                                  	;cmp	ah,'|' ; 7Ch
 22140                                  	;;cmp	al,vbar ; 7Ch
 22141                                  	;;;cmp	ah,[VBAR]  ; MSDOS 3.3
 22142 00002A4D 7539                    	jne	short CONTPRESCAN
 22143                                  ISPIPE3:
 22144                                  ; Only push the echo flag if we are entering the pipe for the first time.
 22145                                  
 22146 00002A4F 26803E[0002]00          	cmp	byte [es:PipeFlag],0
 22147 00002A55 7505                    	jne	short NOECHOPUSH
 22148 00002A57 26D026[8801]            	shl	byte [es:EchoFlag],1 ; push echo state and turn it off
 22149                                  NOECHOPUSH:
 22150 00002A5C 26FE06[0002]            	inc	byte [es:PipeFlag]
 22151 00002A61 E87AFB                  	call	scanoff
 22152 00002A64 3C0D                    	cmp	al,0Dh
 22153 00002A66 7404                    	je	short PIPEERRSYNJ5
 22154                                  	; 26/02/2023
 22155 00002A68 3C7C                    	cmp	al,'|' ; 7Ch
 22156                                  	;cmp	al,ALTPIPECHR ; 7Ch
 22157                                  	;je	short PIPEERRSYNJ5
 22158                                  	;; MSDOS 6.0
 22159                                  	;cmp	al,'|' ; 7Ch
 22160                                  	;;cmp	al,vbar ; 7Ch
 22161                                  	;;;cmp	al,[VBAR]  ; MSDOS 3.3	
 22162 00002A6A 751C                    	jne	short CONTPRESCAN
 22163                                  
 22164                                  PIPEERRSYNJ5:
 22165 00002A6C 06                      	push	es
 22166 00002A6D 1F                      	pop	ds
 22167 00002A6E E99C02                  	jmp	PIPEERRSYN
 22168                                  
 22169                                  ; Trailing :s are allowed on devices. Check to be sure that there is more
 22170                                  ; than just a : in the redir string.
 22171                                  
 22172                                  GOTRESTR:
 22173 00002A71 86E0                    	xchg	ah,al
 22174 00002A73 B03A                    	mov	al,':' ; 3Ah
 22175 00002A75 29FB                    	sub	bx,di		; compute negative of number of chars
 22176 00002A77 83FBFF                  	cmp	bx,-1		; is there just a :?
 22177 00002A7A 7407                    	je	short NOTRAILCOL ; yep, don't change
 22178 00002A7C 263845FF                	cmp	[es:di-1],al	; Trailing ':' OK on devices
 22179 00002A80 7501                    	jne	short NOTRAILCOL
 22180 00002A82 4F                      	dec	di		; Back up over trailing ':'
 22181                                  NOTRAILCOL:
 22182 00002A83 30C0                    	xor	al,al
 22183 00002A85 AA                      	stosb			; NUL terminate the string
 22184 00002A86 07                      	pop	es
 22185 00002A87 5F                      	pop	di		; Remember the start
 22186                                  CONTPRESCAN:
 22187 00002A88 8825                    	mov	[di],ah		; "delete" the redirection string
 22188 00002A8A 47                      	inc	di
 22189 00002A8B 80FC0D                  	cmp	ah,0Dh
 22190 00002A8E 7405                    	je	short PRESCANEND
 22191 00002A90 FEC1                    	inc	cl
 22192 00002A92 E90BFF                  	jmp	PRESCANLP
 22193                                  PRESCANEND:
 22194 00002A95 26803E[0002]00          	cmp	byte [es:PipeFlag],0
 22195 00002A9B 7414                    	jz	short ISNOPIPE
 22196                                  
 22197                                  	; 26/02/2023
 22198                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA0h
 22199                                  	;;mov	di,3C0h		; offset RESGROUP:PIPESTR
 22200                                  	;;			; (EndInit+160]
 22201                                  	;mov	di,offset RESGROUP:PIPESTR
 22202 00002A9D BF[A202]                	mov	di,PipeStr	; RESGROUP:EndInit+160
 22203                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA3h
 22204                                  	;;mov	[es:3BEh],di	; [es:EndInit+158]
 22205 00002AA0 26893E[A002]            	mov	[es:PipePtr],di	; RESGROUP:EndInit+158
 22206                                  	
 22207 00002AA5 BE[0689]                	mov	si,COMBUF+2
 22208 00002AA8 E833FB                  	call	scanoff
 22209                                  PIPESETLP:			; Transfer the pipe into the resident
 22210 00002AAB AC                      	lodsb			; pipe buffer
 22211 00002AAC AA                      	stosb
 22212 00002AAD 3C0D                    	cmp	al,0Dh
 22213 00002AAF 75FA                    	jnz	short PIPESETLP
 22214                                  ISNOPIPE:
 22215 00002AB1 880E[0589]              	mov	[COMBUF+1],cl
 22216 00002AB5 26803E[0002]00          	cmp	byte [es:PipeFlag],0
 22217 00002ABB 0E                      	push	cs
 22218 00002ABC 07                      	pop	es
 22219 00002ABD C3                      	retn
 22220                                  
 22221                                  ; =============== S U B	R O U T	I N E =======================================
 22222                                  
 22223                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22224                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2BC1h
 22225                                  cmd_copy:
 22226 00002ABE BE[0689]                	mov	si,COMBUF+2
 22227 00002AC1 E81AFB                  	call	scanoff		; advance past separators...
 22228 00002AC4 0336[048C]              	add	si,[PathPos]
 22229 00002AC8 BF8100                  	mov	di,81h
 22230 00002ACB 31C9                    	xor	cx,cx
 22231                                  cmdcopy:
 22232 00002ACD AC                      	lodsb
 22233 00002ACE AA                      	stosb
 22234 00002ACF 3C0D                    	cmp	al,0Dh
 22235 00002AD1 7403                    	je	short copy_done
 22236 00002AD3 41                      	inc	cx
 22237 00002AD4 EBF7                    	jmp	short cmdcopy
 22238                                  copy_done:
 22239 00002AD6 880E8000                	mov	[80h],cl
 22240 00002ADA C3                      	retn
 22241                                  
 22242                                  ; =============== S U B	R O U T	I N E =======================================
 22243                                  
 22244                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22245                                  test_append:
 22246 00002ADB BB[0489]                	mov	bx,COMBUF	; barry can address
 22247 00002ADE BE[2F8B]                	mov	si,IDLEN	; address command name, DS already set 	
 22248 00002AE1 BAFFFF                  	mov	dx,-1
 22249 00002AE4 B800AE                  	mov	ax,0AE00h
 22250 00002AE7 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal 
 22251                                  			; - INSTALLABLE	COMMAND	- INSTALL CHECK
 22252                                  			; DX = FFFFh,[BX -> command line
 22253                                  			; Return: AL = FFh if this command is a TSR extension 
 22254                                  			;		   to COMMAND.COM
 22255                                  			; AL = 00h if the command should be executed as	usual
 22256                                  	;cmp	al,0
 22257 00002AE9 08C0                    	or	al,al ; 25/02/2023
 22258 00002AEB C3                      	retn
 22259                                  
 22260                                  	; 25/02/2023
 22261                                  	; INT 2Fh
 22262                                  	; 	AX = AE00h
 22263                                  	; entry:
 22264                                  	; 	DX = magic value FFFFh
 22265                                  	; 	CH = FFh
 22266                                  	; 	CL = length of command line tail
 22267                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 22268                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 22269                                  	; return:
 22270                                  	;	AL = FFh if this command is a TSR extension to COMMAND.COM
 22271                                  	;	AL = 00h if the command should be executed as usual
 22272                                  	;
 22273                                  	; Format of COMMAND.COM command line buffer:
 22274                                  	;	Offset  Size    Description
 22275                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 22276                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 22277                                  	;	N BYTEs command line text, terminated by 0Dh
 22278                                  	;
 22279                                  	; Format of command name buffer:
 22280                                  	;	Offset  Size    Description
 22281                                  	;	00h     BYTE    length of command name
 22282                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 22283                                  
 22284                                  ;============================================================================
 22285                                  ; TMISC2.ASM, MSDOS 6.0, 1991
 22286                                  ;============================================================================
 22287                                  ; 05/10/2018 - Retro DOS v3.0
 22288                                  
 22289                                  ;	More misc routines
 22290                                  
 22291                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1D9Bh
 22292                                  
 22293                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22294                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2BEFh
 22295                                  
 22296                                  ; =============== S U B	R O U T	I N E =======================================
 22297                                  
 22298                                  SETPATH:
 22299                                  
 22300                                  ; ENTRY PathPos = ptr to string
 22301                                  ;       PathCnt = length of string
 22302                                  ;
 22303                                  ; EXIT  PathPos = ptr to string after pathname
 22304                                  ;       PathCnt = length of rest of string
 22305                                  ;       DX = ptr to pathname in string, made ASCIIZ
 22306                                  ;       DestIsDir = 1 if pathname delimiters appeared in pathname, 0 otherwise
 22307                                  ;       DestInfo = 2 if wildcards (?, *) appeared in pathname, 0 otherwise
 22308                                  ;
 22309                                  ;       A null character is dropped at the end of the pathname. If the
 22310                                  ;       character in that spot previously was CR, it is copied into the
 22311                                  ;       following byte. So there must be at least two two character 
 22312                                  ;       positions in the buffer following the pathname.
 22313                                  
 22314                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22315                                  	; 11/06/2023
 22316                                  	; MSDOS 6.0
 22317                                  	;mov	ax,[PathCnt]	;AC000; get length of string
 22318                                  	;mov	si,[PathPos]	;AC000; get start of source buffer
 22319                                  
 22320                                  	; 26/02/2023
 22321                                  	; MSDOS 3.3
 22322                                  	;mov	si,80h
 22323                                  	;lodsb
 22324                                  	;xor	ah,ah
 22325                                  	;mov	[PATCNT],ax
 22326                                  	;mov	[PATHPOS],si
 22327                                  GETPATH:
 22328                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22329 00002AEC C606[308C]00            	mov	byte [DestInfo],0
 22330 00002AF1 C606[2C8C]00            	mov	byte [DestIsDir],0
 22331 00002AF6 8B36[048C]              	mov	si,[PathPos]	; SI = ptr to string
 22332 00002AFA 8B0E[028C]              	mov	cx,[PathCnt]	; CX = string length
 22333 00002AFE 89F2                    	mov	dx,si		; DX = ptr to string
 22334 00002B00 E34D                    	jcxz	PATHDONE	; string length is zero, we're done
 22335 00002B02 51                      	push	cx		; save string length
 22336 00002B03 56                      	push	si		; save ptr to string
 22337 00002B04 E875FC                  	call	SWITCH
 22338                                  
 22339                                  ;       After Switch, SI has been scanned past any switches, and
 22340                                  ;       switches that COMMAND intrinsically recognizes are recorded in AX.
 22341                                  
 22342 00002B07 A3[068C]                	mov	[PathSw],ax	; PathSw = switch occurrence mask
 22343 00002B0A 5B                      	pop	bx		; BX = ptr to original string
 22344 00002B0B 29F3                    	sub	bx,si		; BX = -(# chars scanned by Switch)
 22345 00002B0D 59                      	pop	cx		; CX = string length
 22346 00002B0E 01D9                    	add	cx,bx		; CX = string length from current SI
 22347 00002B10 89F2                    	mov	dx,si		; DX = ptr to current string
 22348                                  SKIPPATH:
 22349                                  	; 26/02/2023
 22350                                  	; MSDOS 6.0
 22351 00002B12 C606[B38D]00            	mov	byte [KPARSE],0
 22352                                  SKIPPATH2:
 22353 00002B17 E336                    	jcxz	PATHDONE	; string length is zero, we're done
 22354 00002B19 49                      	dec	cx		; CX = length left after next char
 22355 00002B1A AC                      	lodsb			; AL = next char of string
 22356                                  				; SI = ptr to char after this one
 22357                                  	; 26/02/2023
 22358 00002B1B E8A1F8                  	call	testkanj
 22359 00002B1E 7408                    	jz	short TESTPPSEP
 22360 00002B20 49                      	dec	cx
 22361 00002B21 46                      	inc	si
 22362 00002B22 FE06[B38D]              	inc	byte [KPARSE]
 22363 00002B26 EBEF                    	jmp	short SKIPPATH2
 22364                                  TESTPPSEP:
 22365 00002B28 E841FB                  	call	pathchrcmp	; compare AL to path delimiter char
 22366 00002B2B 7504                    	jnz	short TESTPMETA	; it's not a path delim
 22367 00002B2D FE06[2C8C]              	inc	byte [DestIsDir]
 22368                                  				; DestIsDir = 1, signalling path char
 22369                                  TESTPMETA:
 22370 00002B31 3C3F                    	cmp	al,'?'
 22371 00002B33 7505                    	jne	short TESTPSTAR	; char is not '?'
 22372 00002B35 800E[308C]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 22373                                  TESTPSTAR:
 22374 00002B3A 3C2A                    	cmp	al,'*'
 22375                                  	;cmp	al,[STAR] ; MSDOS 3.3	
 22376 00002B3C 7505                    	jne	short TESTPDELIM ; char is not '*'
 22377 00002B3E 800E[308C]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 22378                                  TESTPDELIM:
 22379 00002B43 E8A0FA                  	call	DELIM		; compare AL to all delimiters
 22380 00002B46 7406                    	jz	short PATHDONEDEC ; delimiter found, back up & leave
 22381 00002B48 3A06[A98A]              	cmp	al,[SWITCHAR]
 22382 00002B4C 75C4                    	jne	short SKIPPATH	; char isn't switch, go get next char
 22383                                  PATHDONEDEC:
 22384 00002B4E 4E                      	dec	si		; SI = ptr to char after pathname
 22385                                  PATHDONE:
 22386 00002B4F 30C0                    	xor	al,al		; AL = NULL
 22387 00002B51 8604                    	xchg	al,[si]		; place NULL after pathname
 22388 00002B53 46                      	inc	si		; SI = ptr to byte after NULL
 22389 00002B54 3C0D                    	cmp	al,0Dh		; were we at end of line?
 22390 00002B56 7502                    	jne	short NOPSTORE	; not EOL, finish up
 22391 00002B58 8804                    	mov	[si],al		; save EOL after NULL
 22392                                  NOPSTORE:
 22393 00002B5A 8936[048C]              	mov	[PathPos],si	; PathPos = ptr to char after NULL
 22394 00002B5E 890E[028C]              	mov	[PathCnt],cx	; PathCnt = length of string left
 22395                                  SETPATH_RETN:
 22396 00002B62 C3                      	retn
 22397                                  
 22398                                  ; ---------------------------------------------------------------------------
 22399                                  
 22400                                  PGETARG:
 22401 00002B63 BE8000                  	mov	si,80h
 22402 00002B66 AC                      	lodsb
 22403 00002B67 08C0                    	or	al,al
 22404 00002B69 74F7                    	jz	short SETPATH_RETN
 22405 00002B6B E80300                  	call	PSCANOFF
 22406 00002B6E 3C0D                    	cmp	al,0Dh
 22407 00002B70 C3                      	retn
 22408                                  
 22409                                  ; ---------------------------------------------------------------------------
 22410                                  
 22411                                  PSCANOFF:
 22412 00002B71 AC                      	lodsb
 22413 00002B72 E871FA                  	call	DELIM
 22414 00002B75 7504                    	jnz	short PSCANOFFD
 22415 00002B77 3C3B                    	cmp	al,';' ; 3Bh
 22416 00002B79 75F6                    	jne	short PSCANOFF	; ';' is not a delimiter
 22417                                  PSCANOFFD:
 22418 00002B7B 4E                      	dec	si		; Point to first non-delimiter
 22419 00002B7C C3                      	retn
 22420                                  
 22421                                  ; =============== S U B	R O U T	I N E =======================================
 22422                                  
 22423                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22424                                  IOSET:
 22425                                  	; ALL REGISTERS PRESERVED
 22426 00002B7D 1E                      	push	ds
 22427 00002B7E 52                      	push	dx
 22428 00002B7F 50                      	push	ax
 22429 00002B80 53                      	push	bx
 22430 00002B81 51                      	push	cx
 22431 00002B82 2E8E1E[A58A]            	mov	ds,[cs:RESSEG]
 22432 00002B87 803E[0002]00            	cmp	byte [PipeFlag],0
 22433 00002B8C 750D                    	jne	short NOREDIR
 22434 00002B8E F606[9301]FF            	test	byte [IfFlag],0FFh
 22435 00002B93 7506                    	jnz	short NOREDIR
 22436 00002B95 E88C00                  	call	TESTDOREIN
 22437 00002B98 E80600                  	call	TESTDOREOUT
 22438                                  NOREDIR:
 22439 00002B9B 59                      	pop	cx
 22440 00002B9C 5B                      	pop	bx
 22441 00002B9D 58                      	pop	ax
 22442 00002B9E 5A                      	pop	dx
 22443 00002B9F 1F                      	pop	ds
 22444                                  IOSET_RETN:	; 06/08/2024
 22445 00002BA0 C3                      	retn
 22446                                  
 22447                                  ; =============== S U B	R O U T	I N E =======================================
 22448                                  
 22449                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22450                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CF3h
 22451                                  	; 06/08/2024
 22452                                  TESTDOREOUT:
 22453 00002BA1 803E[AF01]00            	cmp	byte [Re_OutStr],0
 22454                                  	;je	short NOREOUT  ; MSDOS 3.3
 22455                                  	; 26/02/2023
 22456                                  	;jne	short REOUTEXISTS
 22457                                  	;jmp	NOREOUT
 22458                                  	; 06/08/2024
 22459 00002BA6 74F8                    	jz	short IOSET_RETN
 22460                                  REOUTEXISTS:
 22461 00002BA8 803E[AE01]00            	cmp	byte [Re_Out_App],0
 22462 00002BAD 745D                    	je	short REOUTCRT
 22463                                  
 22464 00002BAF BA[AF01]                	mov	dx,Re_OutStr
 22465                                  
 22466                                  	; 26/02/2023
 22467                                  	; MSDOS 6.0
 22468                                  	;mov	ax,(OPEN SHL 8) OR 2 ;AC011; Open for read/write
 22469 00002BB2 B8023D                  	mov	ax,3D02h
 22470                                  	; MSDOS 3.3
 22471                                  	;mov	ax,(OPEN<<8)|1  ; 3D01h ; Open for write
 22472                                  	
 22473                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22474 00002BB5 50                      	push	ax
 22475 00002BB6 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 22476                                  			; DS:DX	-> ASCIZ filename
 22477                                  			; AL = access mode
 22478                                  			; 1 - write
 22479 00002BB8 5B                      	pop	bx
 22480 00002BB9 724B                    	jc	short OpenWriteError
 22481                                  
 22482                                  	; 26/02/2023
 22483                                  	; MSDOS 6.0
 22484 00002BBB 89C3                    	mov	bx,ax
 22485                                  	;mov	ax,IOCTL<<8		;AN035; Get attributes of handle
 22486 00002BBD B80044                  	mov	ax,4400h
 22487 00002BC0 CD21                    	int	21h			;AN035;
 22488                                  			; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 22489                                  			; BX = file or device handle
 22490 00002BC2 F6C280                  	test	dl,80h
 22491                                  	;test	dl,devid_ISDEV		;AN035; Is it a device?
 22492 00002BC5 7554                    	jnz	short SET_REOUT		;AN035; Yes, don't read from it
 22493                                  
 22494                                  	;mov	ax,(LSEEK SHL 8) OR 2
 22495 00002BC7 B80242                  	mov	ax,4202h
 22496 00002BCA B9FFFF                  	mov	cx,-1			;AC011; MOVE TO EOF -1
 22497 00002BCD 89CA                    	mov	dx,cx			;AC011;
 22498 00002BCF CD21                    	int	21h
 22499                                  			; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 22500                                  			; AL = method: offset from end of file
 22501 00002BD1 0E                      	push	cs			;AN011; Get transient seg to DS
 22502 00002BD2 1F                      	pop	ds			;AN011;
 22503                                  
 22504                                  	;mov	ax,(READ SHL 8) 	;AN011; Read one byte from the
 22505 00002BD3 B8003F                  	mov	ax,3F00h
 22506 00002BD6 B90100                  	mov	cx,1			;AN011;  file into one_char_val
 22507 00002BD9 BA[248C]                	mov	dx,One_Char_Val		;AN011;
 22508 00002BDC CD21                    	int	21h			;AN011;
 22509                                  			; DOS - 2+ - READ FROM FILE WITH HANDLE
 22510                                  			; BX = file handle, CX = number of bytes to read
 22511                                  			; DS:DX -> buffer
 22512 00002BDE 7226                    	jc	short OpenWriteError	;AN011; If error, exit
 22513 00002BE0 39C8                    	cmp	ax,cx			;AN017; Did we read 1 byte?
 22514 00002BE2 7517                    	jnz	short reout_0_length	;AN017; No - file must be 0 length
 22515                                  
 22516 00002BE4 803E[248C]1A            	cmp	byte [One_Char_Val],1Ah	;AN011; Was char an eof mark?
 22517 00002BE9 8E1E[A58A]              	mov	ds,[RESSEG]		;AN011; Get resident segment back
 22518 00002BED 752C                    	jne	short SET_REOUT		;AN011; No, just continue
 22519                                  	
 22520                                  	;mov	ax,(LSEEK<<8)|1		;AN011; EOF mark found
 22521 00002BEF B80142                  	mov	ax,4201h
 22522 00002BF2 B9FFFF                  	mov	cx,-1			;AN011; LSEEK back one byte
 22523                                  setreout_p:	; 26/02/2023
 22524 00002BF5 89CA                    	mov	dx,cx			;AN011;
 22525 00002BF7 CD21                    	int	21h			;AN011;
 22526 00002BF9 EB20                    	jmp	short SET_REOUT
 22527                                  reout_0_length: 			;AN017; We have a 0 length file
 22528                                  	; ds = cs ; 26/02/2023
 22529                                  	;mov	ds,[cs:RESSEG] ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2D50h
 22530                                  					;AN017; Get resident segment back
 22531                                  	; 26/02/2023
 22532 00002BFB 8E1E[A58A]              	mov	ds,[RESSEG]
 22533                                  	;mov	ax,(LSEEK SHL 8)	;AN017; Move to beginning of file
 22534 00002BFF B80042                  	mov	ax,4200h
 22535 00002C02 31C9                    	xor	cx,cx			;AN017; Offset is 0
 22536                                  	;mov	dx,cx			;AN017;
 22537                                  	;int	21h			;AN017;
 22538                                  	;jmp	short SET_REOUT 	;AN017; now finish setting up redirection
 22539                                  	; 26/02/2023
 22540 00002C04 EBEF                    	jmp	short setreout_p
 22541                                  
 22542                                  	; 26/02/2023
 22543                                  	; MSDOS 3.3
 22544                                  	;xor	dx,dx
 22545                                  	;xor	cx,cx
 22546                                  	;mov	bx,ax
 22547                                  	;mov	ax,(LSEEK<<8)|2 ; 4202h
 22548                                  	;int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 22549                                  	;		; AL = method: offset from end of file
 22550                                  	;jmp	short SET_REOUT
 22551                                  
 22552                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22553                                  OpenWriteError:	
 22554                                  	;cmp	ax,5
 22555 00002C06 83F805                  	cmp	ax,ERROR_ACCESS_DENIED
 22556 00002C09 F9                      	stc
 22557                                  	;;je	short REDIRERR ; MSDOS 3.3
 22558                                  	; 26/02/2023
 22559                                  	;jnz	short REOUTCRT
 22560                                  	;jmp	REDIRERR
 22561 00002C0A 743B                    	je	short REDIRERR
 22562                                  
 22563                                  REOUTCRT:
 22564 00002C0C BA[AF01]                	mov	dx,Re_OutStr
 22565 00002C0F 31C9                    	xor	cx,cx
 22566                                  	;mov	ah,CREAT ; 3Ch
 22567 00002C11 B43C                    	mov	ah,3Ch
 22568 00002C13 50                      	push	ax
 22569 00002C14 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 22570                                  			; CX = attributes for file
 22571                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 22572 00002C16 5B                      	pop	bx
 22573                                  	;jc	short REDIRERR ; MSDOS 3.3
 22574                                  	; 26/02/2023
 22575                                  	;jnc	short NOREDIRERR
 22576                                  	;jmp	REDIRERR
 22577 00002C17 722E                    	jc	short REDIRERR
 22578                                  
 22579                                  NOREDIRERR:
 22580 00002C19 89C3                    	mov	bx,ax
 22581                                  SET_REOUT:
 22582                                  
 22583                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdout
 22584                                  ; spot. We invalidate the new JFN we got.
 22585                                  
 22586 00002C1B B0FF                    	mov	al,0FFh
 22587                                  	;xchg	al,[bx+18h]
 22588 00002C1D 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 22589 00002C20 A21900                  	mov	[PDB.JFN_TABLE+1],al
 22590                                  	; 06/08/2024
 22591                                  NOREOUT:
 22592                                  ;IOSET_RETN:	; 17/04/2023
 22593 00002C23 C3                      	retn
 22594                                  
 22595                                  ; =============== S U B	R O U T	I N E =======================================
 22596                                  
 22597                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22598                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 22599                                  	; 06/08/2024
 22600                                  TESTDOREIN:
 22601 00002C24 2E803E[508A]00          	cmp	byte [cs:RE_INSTR],0
 22602                                  	;jz	short IOSET_RETN
 22603                                  	; 06/08/2024
 22604 00002C2A 74F7                    	jz	short NOREOUT
 22605 00002C2C 1E                      	push	ds
 22606 00002C2D 0E                      	push	cs
 22607 00002C2E 1F                      	pop	ds
 22608 00002C2F BA[508A]                	mov	dx,RE_INSTR
 22609                                  	;mov	ax,OPEN*256 ; 3D00h
 22610 00002C32 B8003D                  	mov	ax,3D00h
 22611 00002C35 89C3                    	mov	bx,ax
 22612 00002C37 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 22613                                  			; DS:DX	-> ASCIZ filename
 22614                                  			; AL = access mode
 22615                                  			; 0 - read
 22616 00002C39 1F                      	pop	ds
 22617                                  
 22618 00002C3A 720B                    	jc	short REDIRERR
 22619                                  
 22620 00002C3C 89C3                    	mov	bx,ax
 22621 00002C3E B0FF                    	mov	al,0FFh
 22622                                  
 22623                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdin
 22624                                  ; spot. We invalidate the new JFN we got.
 22625                                  
 22626                                  	;xchg	al,[bx+18h]
 22627 00002C40 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 22628 00002C43 A21800                  	mov	[PDB.JFN_TABLE],al
 22629 00002C46 C3                      	retn
 22630                                  
 22631                                  ; ---------------------------------------------------------------------------
 22632                                  
 22633                                  ; We had some kind of error on the redirection. Figure out what the
 22634                                  ; appropriate message should be; BX has the system call that failed
 22635                                  
 22636                                  REDIRERR:
 22637 00002C47 0E                      	push	cs
 22638 00002C48 1F                      	pop	ds
 22639 00002C49 E82E00                  	call	TriageError  ; MSDOS 6.0
 22640                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 22641                                  
 22642                                  ; At this point, we have recognized the network-generated access denied error.
 22643                                  ; The correct message is in DX
 22644                                  
 22645 00002C4C 83F841                  	cmp	ax,65
 22646 00002C4F 7408                    	je	short _CERRORJ	;AC000; just issue message returned
 22647 00002C51 80FF3D                  	cmp	bh,OPEN ; 3Dh
 22648 00002C54 7406                    	je	short OpenError
 22649 00002C56 BA[167F]                	mov	dx,FULLDIR_PTR
 22650                                  _CERRORJ:
 22651 00002C59 E9F6FC                  	jmp	cerror
 22652                                  
 22653                                  OpenError:
 22654                                  ; The system call was an OPEN. Report either file not found or path not found.
 22655                                  
 22656                                  	; 26/02/2023
 22657                                  	; MSDOS 6.0
 22658                                  	;mov	byte [cs:msg_disp_class],1
 22659 00002C5C 2EC606[FA7E]01          	mov	byte [cs:msg_disp_class],ext_msg_class
 22660                                  				;AN000; set up extended error msg class
 22661 00002C62 BA[FC7E]                	mov	dx,extend_buf_ptr
 22662                                  				;AC000; get extended message pointer
 22663 00002C65 2EA3[FC7E]              	mov	[cs:extend_buf_ptr],ax
 22664                                  				;AN000; get message number in control block
 22665 00002C69 E9E6FC                  	jmp	cerror
 22666                                  
 22667                                  	; 26/02/2023
 22668                                  	; MSDOS 3.3
 22669                                  	;mov	dx,FNOTFOUNDPTR
 22670                                  	;;cmp	ax,2
 22671                                  	;cmp	ax,ERROR_FILE_NOT_FOUND
 22672                                  	;je	short _CERRORJ
 22673                                  	;mov	dx,ACCDENPTR
 22674                                  	;;cmp	ax,5 ; Access denied error
 22675                                  	;cmp	ax,ERROR_ACCESS_DENIED
 22676                                  	;je	short _CERRORJ
 22677                                  	;	; ERROR_PATH_NOT_FOUND
 22678                                  	;mov	dx,PNOTFOUNDPTR
 22679                                  	;jmp	CERROR
 22680                                  
 22681                                  ; =============== S U B	R O U T	I N E =======================================
 22682                                  
 22683                                  ; Compute length of string (including NUL) in DS:SI into CX. Change no other
 22684                                  ; registers
 22685                                  
 22686                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 22687                                  dstrlen:
 22688 00002C6C 50                      	push	ax
 22689 00002C6D 31C9                    	xor	cx,cx
 22690 00002C6F FC                      	cld
 22691                                  dloop:
 22692 00002C70 AC                      	lodsb
 22693 00002C71 41                      	inc	cx
 22694 00002C72 08C0                    	or	al,al
 22695 00002C74 75FA                    	jnz	short dloop
 22696 00002C76 29CE                    	sub	si,cx
 22697 00002C78 58                      	pop	ax
 22698                                  TRIAGEERR_RETN:
 22699 00002C79 C3                      	retn
 22700                                  
 22701                                  ; =============== S U B	R O U T	I N E =======================================
 22702                                  
 22703                                  ;Break	<Extended error support>
 22704                                  
 22705                                  TriageError:  ; MSDOS 6.0
 22706                                  
 22707                                  ; TriageError will examine the return from a carry-set system call and
 22708                                  ; return the correct error if applicable.
 22709                                  ;
 22710                                  ;   Inputs:	outputs from a carry-settable system call
 22711                                  ;		No system calls may be done in the interrim
 22712                                  ;   Outputs:	If carry was set on input
 22713                                  ;		   carry set on output
 22714                                  ;		   DX contains trangroup offset to printf message
 22715                                  ;		else
 22716                                  ;		   No registers changed
 22717                                  
 22718                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1EEEh
 22719                                  
 22720                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22721                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2D92h
 22722                                  
 22723                                  GET_EXT_ERR_NUMBER:  ; MSDOS 3.3
 22724 00002C7A 73FD                    	jnc	short TRIAGEERR_RETN ; no carry => do nothing...
 22725 00002C7C 9C                      	pushf
 22726 00002C7D 53                      	push	bx
 22727 00002C7E 51                      	push	cx
 22728 00002C7F 56                      	push	si
 22729 00002C80 57                      	push	di
 22730 00002C81 55                      	push	bp
 22731 00002C82 06                      	push	es
 22732 00002C83 1E                      	push	ds
 22733 00002C84 50                      	push	ax
 22734 00002C85 52                      	push	dx
 22735 00002C86 B459                    	mov	ah,59h
 22736                                  	;mov	ah,GETEXTENDEDERROR
 22737 00002C88 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 22738                                  			; BX = version code (0000h for DOS 3.x)
 22739 00002C8A 59                      	pop	cx
 22740 00002C8B 5B                      	pop	bx		; restore original AX
 22741 00002C8C BA[227F]                	mov	dx,ACCDEN_PTR
 22742 00002C8F 83F841                  	cmp	ax,65		; network access denied?
 22743 00002C92 7404                    	je	short NoMove	; Yes, return it.
 22744 00002C94 89D8                    	mov	ax,bx
 22745 00002C96 89CA                    	mov	dx,cx
 22746                                  NoMove:
 22747 00002C98 1F                      	pop	ds
 22748 00002C99 07                      	pop	es
 22749 00002C9A 5D                      	pop	bp
 22750 00002C9B 5F                      	pop	di
 22751 00002C9C 5E                      	pop	si
 22752 00002C9D 59                      	pop	cx
 22753 00002C9E 5B                      	pop	bx
 22754 00002C9F 9D                      	popf
 22755 00002CA0 C3                      	retn
 22756                                  
 22757                                  ; =============== S U B	R O U T	I N E =======================================
 22758                                  
 22759                                  	; Far call from resident portion/segment of COMMAND.COM
 22760                                  
 22761                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F15h
 22762                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DB9h
 22763                                  
 22764                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22765                                  Triage_Init:
 22766 00002CA1 E8D6FF                  	call	TriageError	 ; MSDOS 6.0
 22767                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 22768 00002CA4 CB                      	retf
 22769                                  
 22770                                  ; =============== S U B	R O U T	I N E =======================================
 22771                                  
 22772                                  ; MSDOS 6.0
 22773                                  
 22774                                  ; ****************************************************************
 22775                                  ; *
 22776                                  ; * ROUTINE:	 MOVE_TO_SRCBUF
 22777                                  ; *
 22778                                  ; * FUNCTION:	 Move ASCIIZ string from DS:SI to SRCBUF.  Change
 22779                                  ; *		 terminating 0 to 0dH.	Set PATHCNT to length of
 22780                                  ; *		 string.  Set PATHPOS to start of SRCBUF.
 22781                                  ; *
 22782                                  ; * INPUT:	 DS:SI points to ASCIIZ string
 22783                                  ; *		 ES    points to TRANGROUP
 22784                                  ; *
 22785                                  ; * OUTPUT:	 SRCBUF filled in with string terminated by 0dH
 22786                                  ; *		 PATHCNT set to length of string
 22787                                  ; *		 PATHPOS set to start of SRCBUF
 22788                                  ; *		 CX,AX	 changed
 22789                                  ; *
 22790                                  ; ****************************************************************
 22791                                  
 22792                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22793                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 22794                                  Move_To_SrcBuf:
 22795 00002CA5 56                      	push	si			;AN000;  save si,di
 22796 00002CA6 57                      	push	di			;AN000;
 22797 00002CA7 51                      	push	cx			;AN000;
 22798 00002CA8 BF[948C]                	mov	di,SrcBuf		;AN000;  set ES:DI to srcbuf
 22799 00002CAB 31C9                    	xor	cx,cx			;AN000; clear cx for counint
 22800 00002CAD 89C8                    	mov	ax,cx			;AN000; clear ax
 22801 00002CAF 57                      	push	di			;AN000; save start of srcbuf
 22802 00002CB0 AC                      	lodsb				;AN000; get a character from DS:SI
 22803                                  mts_get_chars:				;AN000;
 22804                                  	;cmp	al,0			;AN000; was it a null char?
 22805 00002CB1 20C0                    	and 	al,al ; al = 0 ?
 22806 00002CB3 7405                    	jz	short mts_end_string	;AN000; yes - exit
 22807 00002CB5 AA                      	stosb				;AN000; no - store it in srcbuf
 22808 00002CB6 41                      	inc	cx			;AN000; increment length count
 22809 00002CB7 AC                      	lodsb				;AN000; get a character from DS:SI
 22810 00002CB8 EBF7                    	jmp	short mts_get_chars	;AN000; go check it
 22811                                  mts_end_string: 			;AN000; we've reached the end of line
 22812                                  	;mov	al,END_OF_LINE_IN	;AN000; store 0Dh in srcbuf
 22813 00002CBA B00D                    	mov	al,0Dh
 22814 00002CBC AA                      	stosb				;AN000;
 22815 00002CBD 5F                      	pop	di			;AN000; restore start of srcbuf
 22816 00002CBE 0E                      	push	cs			;AN000; set DS to local segment
 22817 00002CBF 1F                      	pop	ds			;AN000;
 22818 00002CC0 890E[028C]              	mov	[PathCnt],cx		;AN000; set patchcnt to length count
 22819 00002CC4 893E[048C]              	mov	[PathPos],di		;AN000; set pathpos to start of srcbuf
 22820 00002CC8 59                      	pop	cx			;AN000; restore cx,di,si
 22821 00002CC9 5F                      	pop	di			;AN000;
 22822 00002CCA 5E                      	pop	si			;AN000;
 22823 00002CCB C3                      	retn				;AN000; exit
 22824                                  
 22825                                  ;============================================================================
 22826                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 22827                                  ;============================================================================
 22828                                  ; 03/10/2018 - Retro DOS v3.0
 22829                                  
 22830                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F19h
 22831                                  
 22832                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22833                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DE4h
 22834                                  
 22835                                  ; =============== S U B	R O U T	I N E =======================================
 22836                                  
 22837                                  	; 26/02/2023
 22838                                  SINGLETEST:
 22839 00002CCC 1E                      	push	ds
 22840 00002CCD 2E8E1E[A58A]            	mov	ds,[cs:RESSEG]
 22841 00002CD2 833E[8E01]00            	cmp	word [SingleCom],0
 22842 00002CD7 7406                    	jz	short TESTDONE
 22843 00002CD9 813E[8E01]FFEF          	cmp	word [SingleCom],0EFFFh
 22844                                  TESTDONE:
 22845 00002CDF 1F                      	pop	ds
 22846 00002CE0 C3                      	retn
 22847                                  
 22848                                  ; =============== S U B	R O U T	I N E =======================================
 22849                                  
 22850                                  	; 26/02/2023
 22851                                  SetRest1:
 22852 00002CE1 B001                    	mov	al,1
 22853                                  
 22854                                  ; ---------------------------------------------------------------------------
 22855                                  
 22856                                  SETREST:
 22857 00002CE3 1E                      	push	ds
 22858 00002CE4 8E1E[A58A]              	mov	ds,[RESSEG]
 22859 00002CE8 A2[8C01]                	mov	[RestDir],al
 22860 00002CEB 1F                      	pop	ds
 22861 00002CEC C3                      	retn
 22862                                  
 22863                                  ; =============== S U B	R O U T	I N E =======================================
 22864                                  
 22865                                  ; Note that we need to handle the same thing that RestDir handles: the
 22866                                  ; requirement that we try only once to restore the user's environment after
 22867                                  ; and INT 24 or the like. If the condition that causes the INT 24 does not
 22868                                  ; disappear, we just give up.
 22869                                  
 22870                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 22871                                  PIPEDEL:
 22872 00002CED 1E                      	push	ds
 22873 00002CEE 52                      	push	dx
 22874 00002CEF 2E8E1E[A58A]            	mov	ds,[cs:RESSEG]
 22875                                  	;mov	dx,320h	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E0Ch
 22876                                  			; Pipe1 = offset RESGROUP:EndInit
 22877 00002CF4 BA[0202]                	mov	dx,Pipe1	; Clean up in case ^C
 22878                                  	;mov	ah,Unlink ; 41h
 22879 00002CF7 B441                    	mov	ah,41h
 22880 00002CF9 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 22881                                  			; DS:DX	-> ASCIZ pathname of file to delete
 22882                                  			;		(no wildcards allowed)
 22883                                  
 22884                                  	;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E13h
 22885                                  			; Pipe2 = offset RESGROUP:EndInit+79
 22886 00002CFB BA[5102]                	mov	dx,Pipe2
 22887                                  	;mov	ah,Unlink ; 41h
 22888 00002CFE B441                    	mov	ah,41h
 22889 00002D00 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 22890                                  			; DS:DX	-> ASCIZ pathname of file to delete
 22891                                  			;		(no wildcards allowed)
 22892 00002D02 5A                      	pop	dx
 22893 00002D03 E86202                  	call	PipeOff
 22894 00002D06 C606[0102]00            	mov	byte [PipeFiles],0
 22895 00002D0B 1F                      	pop	ds
 22896 00002D0C C3                      	retn
 22897                                  
 22898                                  ; ---------------------------------------------------------------------------
 22899                                  
 22900                                  	; 26/02/2023
 22901                                  PIPEERRSYN:
 22902 00002D0D BA[947F]                	mov	dx,SYNTMES_PTR
 22903 00002D10 E8DAFF                  	call	PIPEDEL
 22904 00002D13 0E                      	push	cs
 22905 00002D14 1F                      	pop	ds
 22906 00002D15 E93AFC                  	jmp	cerror
 22907                                  
 22908                                  ; ---------------------------------------------------------------------------
 22909                                  
 22910                                  	; 26/02/2023
 22911                                  PIPERR:
 22912 00002D18 9C                      	pushf
 22913 00002D19 E85EFF                  	call    TriageError
 22914                                  	;call	GET_EXT_ERR_NUMBER  ; MSDOS 3.3
 22915 00002D1C 50                      	push	ax		; Save results from TriageError
 22916 00002D1D 52                      	push	dx
 22917 00002D1E BA[5D80]                	mov	dx,PIPEEMES_PTR
 22918 00002D21 E8C9FF                  	call	PIPEDEL
 22919 00002D24 0E                      	push	cs
 22920 00002D25 1F                      	pop	ds
 22921 00002D26 E8A020                  	call	std_eprintf
 22922 00002D29 5A                      	pop	dx		; Restore results from TriageError
 22923 00002D2A 58                      	pop	ax
 22924 00002D2B 9D                      	popf
 22925 00002D2C 83F841                  	cmp	ax,65
 22926 00002D2F 7503                    	jne	short TCOMMANDJ
 22927 00002D31 E91EFC                  	jmp	cerror
 22928                                  
 22929                                  TCOMMANDJ:
 22930 00002D34 E9CDD3                  	jmp	TCOMMAND
 22931                                  
 22932                                  ; ---------------------------------------------------------------------------
 22933                                  
 22934                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 22935                                  PIPEPROCSTRT:
 22936 00002D37 8E1E[A58A]              	mov	ds,[RESSEG]
 22937 00002D3B FE06[0102]              	inc	byte [PipeFiles] ; Flag that the pipe files exist
 22938                                  
 22939                                  	; MSDOS 6.0
 22940 00002D3F 06                      	push	es
 22941 00002D40 57                      	push	di
 22942 00002D41 1E                      	push	ds
 22943 00002D42 56                      	push	si
 22944                                  	
 22945 00002D43 1E                      	push	ds
 22946 00002D44 06                      	push	es
 22947 00002D45 1F                      	pop	ds			;ds = TRANGROUP
 22948 00002D46 BE[B985]                	mov	si,TempVarName		;ds:si = "TEMP="
 22949                                  
 22950                                  ;Some hideous code in Find_Name_In_Environment. Expects ds = TRANGROUP and
 22951                                  ;so the routine is not really general
 22952                                  
 22953 00002D49 E8C9F5                  	call	find_name_in_environment
 22954                                  					;es:di points at path
 22955 00002D4C 1F                      	pop	ds			;ds = DATARES again
 22956 00002D4D 721F                    	jc	short no_temp_path
 22957                                  	
 22958 00002D4F 1E                      	push	ds
 22959 00002D50 06                      	push	es
 22960 00002D51 1F                      	pop	ds
 22961 00002D52 07                      	pop	es			;swap ds and es
 22962 00002D53 89FE                    	mov	si,di			;ds:si points at path
 22963                                  	
 22964 00002D55 E8AA02                  	call	skip_white		;skip white space chars
 22965                                  
 22966                                  ;This copies the path into both buffers -- Pipe1 & Pipe2
 22967                                  
 22968 00002D58 E8B302                  	call	copy_pipe_path		;copy the pipe path
 22969                                  	
 22970                                  ;Check if the TEMP path is valid
 22971                                  
 22972 00002D5B 06                      	push	es
 22973 00002D5C 1F                      	pop	ds			;ds = DATARES
 22974                                  	;mov	dx,offset DATARES:Pipe1	;ds:dx = path to look for
 22975                                  	;mov	dx,320h ; MSDOS 5.0 - offset EndInit
 22976 00002D5D BA[0202]                	mov	dx,Pipe1
 22977                                  	;mov	ax,(CHMOD shl 8) or 0
 22978 00002D60 B80043                  	mov	ax,4300h
 22979 00002D63 CD21                    	int	21h
 22980 00002D65 7207                    	jc	short no_temp_path
 22981                                  	
 22982 00002D67 F7C11000                	test	cx,10h			;is it a directory?
 22983 00002D6B 7501                    	jnz	short no_temp_path	;yes, continue (carry clear)
 22984                                  	
 22985 00002D6D F9                      	stc				;no, indicate fail
 22986                                  no_temp_path:
 22987 00002D6E 5E                      	pop	si
 22988 00002D6F 1F                      	pop	ds
 22989 00002D70 5F                      	pop	di
 22990 00002D71 07                      	pop	es
 22991 00002D72 730B                    	jnc	short crt_temp		;path found, create tempfiles
 22992                                  
 22993                                  	; 27/02/2023
 22994                                  	; MSDOS 3.3
 22995                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 22996                                  	;				; Get current drive
 22997                                  	;int	21h ; DOS - GET DEFAULT DISK NUMBER
 22998                                  	;add	al,[cs:CAPITAL_A]
 22999                                  	;mov	byte [PIPE2],al		; Make pipe files in root of def drv
 23000                                  	;mov	bx,PIPE1
 23001                                  	;mov	[bx],al
 23002                                  	;xor	ah,ah			; nul terminate path names
 23003                                  	;mov	byte [PIPE1+3],ah
 23004                                  	;mov	byte [PIPE2+3],ah
 23005                                  
 23006                                  	; MSDOS 6.0
 23007                                  ;SR;
 23008                                  ; We want to create temp files in the current directory rather than in the 
 23009                                  ;root of the drive. This is because the number of files that can be present
 23010                                  ;in the root directory is fixed, whereas it is not so in subdirectories.
 23011                                  
 23012                                  	;mov	ah,'.'
 23013                                  	;mov	[Pipe1],ah	; = RESGROUP:EndInit
 23014                                  	;mov	[Pipe2],ah	; = RESGROUP:EndInit+79
 23015                                  	;xor	ah,ah
 23016                                  	;mov	[Pipe1+1],ah	; = RESGROUP:EndInit+1
 23017                                  	;mov	[Pipe2+1],ah		;create files in current dir
 23018                                  	; 27/02/2023
 23019 00002D74 B92E00                  	mov	cx,002Eh
 23020 00002D77 890E[0202]              	mov	[Pipe1],cx
 23021 00002D7B 890E[5102]              	mov	[Pipe2],cx
 23022                                  crt_temp:
 23023                                  	; MSDOS 6.0
 23024                                  	;mov	dx,offset DATARES:Pipe1	; = RESGROUP:EndInit
 23025                                  	;mov	dx,320h ; MSDOS 5.0 COMMAND.COM
 23026 00002D7F BA[0202]                	mov	dx,Pipe1
 23027                                  	; MSDOS 3.3
 23028                                  	;mov	dx,bx
 23029                                  	
 23030                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23031 00002D82 31C9                    	xor	cx,cx
 23032                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 23033 00002D84 B45A                    	mov	ah,5Ah
 23034 00002D86 CD21                    	int	21h
 23035                                  		; DOS -	3+ - CREATE UNIQUE FILE
 23036                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 23037                                  		; receive generated filename
 23038                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 23039 00002D88 728E                    	jc	short PIPERR	; Couldn't create
 23040                                  
 23041 00002D8A 89C3                    	mov	bx,ax
 23042                                  	;mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 23043 00002D8C B43E                    	mov	ah,3Eh
 23044 00002D8E CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 23045                                  			; BX = file handle
 23046                                  	;;mov	dx,PIPE2
 23047                                  	;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM
 23048 00002D90 BA[5102]                	mov	dx,Pipe2
 23049                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 23050 00002D93 B45A                    	mov	ah,5Ah
 23051 00002D95 CD21                    	int	21h
 23052                                  		; DOS -	3+ - CREATE UNIQUE FILE
 23053                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 23054                                  		; receive generated filename
 23055                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 23056                                  	; 17/04/2023
 23057                                  	;jc	short PIPERR
 23058                                  	; 27/02/2023
 23059 00002D97 7303                    	jnc	short pps1
 23060 00002D99 E97CFF                  	jmp	PIPERR
 23061                                  pps1:
 23062 00002D9C 89C3                    	mov	bx,ax
 23063 00002D9E B43E                    	mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 23064 00002DA0 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 23065                                  				; BX = file handle
 23066                                  	;call	near ptr TESTDOREIN ; Set up a redirection if specified
 23067 00002DA2 E87FFE                  	call	TESTDOREIN
 23068 00002DA5 8B36[A002]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 23069 00002DA9 833E[8E01]FF            	cmp	word [SingleCom],-1
 23070 00002DAE 7506                    	jne	short NOSINGP
 23071 00002DB0 C706[8E01]00F0          	mov	word [SingleCom],0F000h ; Flag single command pipe
 23072                                  NOSINGP:
 23073 00002DB6 EB29                    	jmp	short FIRSTPIPE
 23074                                  
 23075                                  ; ---------------------------------------------------------------------------
 23076                                  
 23077                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 23078                                  PIPEPROC:
 23079 00002DB8 8026[8801]FE            	and	byte [EchoFlag],0FEh  ; force current echo to be off
 23080 00002DBD 8B36[A002]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 23081 00002DC1 AC                      	lodsb
 23082                                  	; 27/02/2023
 23083 00002DC2 3C7C                    	cmp	al,'|'		
 23084                                  	;;cmp	al,ALTPIPECHR	; Alternate pipe char? 	
 23085                                  	;je	short ISPIPE1	; Yes
 23086                                  	;cmp	al,'|'
 23087                                  	;;cmp	al,[cs:VBAR]
 23088 00002DC4 7403                    	je	short ISPIPE1
 23089 00002DC6 E98400                  	jmp	PIPEEND		; Pipe done
 23090                                  ISPIPE1:
 23091 00002DC9 8B16[2303]              	mov	dx,[InPipePtr]	; Get the input file name
 23092                                  	;mov	ax,OPEN*256 ; 3D00h
 23093 00002DCD B8003D                  	mov	ax,3D00h
 23094 00002DD0 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 23095                                  			; DS:DX	-> ASCIZ filename
 23096                                  			; AL = access mode
 23097                                  			; 0 - read
 23098                                  PIPEERRJ:
 23099 00002DD2 7303                    	jnc	short NO_PIPEERR
 23100 00002DD4 E941FF                  	jmp	PIPERR		; Lost the pipe file
 23101                                  NO_PIPEERR:
 23102 00002DD7 89C3                    	mov	bx,ax
 23103 00002DD9 B0FF                    	mov	al,0FFh
 23104                                  	;xchg	al,[bx+18h]
 23105 00002DDB 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23106 00002DDE A21800                  	mov	[PDB.JFN_TABLE],al	; Redirect
 23107                                  FIRSTPIPE:
 23108 00002DE1 BF[0689]                	mov	di,COMBUF+2
 23109 00002DE4 31C9                    	xor	cx,cx
 23110 00002DE6 803C0D                  	cmp	byte [si],0Dh	; '|<CR>'
 23111 00002DE9 7503                    	jne	short PIPEOK1
 23112                                  PIPEERRSYNJ:
 23113 00002DEB E91FFF                  	jmp	PIPEERRSYN
 23114                                  PIPEOK1:
 23115                                  	;;;mov	al,[cs:VBAR]
 23116                                  	; 27/02/2023
 23117                                  	;;mov	al,vbar
 23118                                  	;mov	al,'|'
 23119                                  	;cmp	[si],al		; '||'
 23120                                  	;je	short PIPEERRSYNJ
 23121 00002DEE 803C7C                  	cmp	byte [si],'|'
 23122                                  	;cmp	byte [si],ALTPIPECHR ; '##' or '|#'?
 23123 00002DF1 74F8                    	je	short PIPEERRSYNJ
 23124                                  PIPECOMLP:
 23125 00002DF3 AC                      	lodsb
 23126 00002DF4 AA                      	stosb
 23127                                  	; 27/02/2023
 23128 00002DF5 E8C7F5                  	call	testkanj
 23129 00002DF8 7405                    	jz	short NOTKANJ5
 23130 00002DFA A4                      	movsb
 23131                                  ;  Added following 2 commands to the fix pipe bug.
 23132 00002DFB 41                      	inc	cx		;AN000;  3/3/KK
 23133 00002DFC 41                      	inc	cx		;AN000;  3/3/KK
 23134 00002DFD EBF4                    	jmp	short PIPECOMLP
 23135                                  NOTKANJ5:
 23136 00002DFF 3C0D                    	cmp	al,0Dh
 23137 00002E01 7438                    	je	short LASTPIPE
 23138 00002E03 41                      	inc	cx
 23139                                  	; 27/02/2023
 23140 00002E04 3C7C                    	cmp	al,'|'
 23141                                  	;cmp	al,ALTPIPECHR
 23142                                  	;je	short ISPIPE2
 23143                                  	;;cmp	al,[cs:VBAR]
 23144                                  	;cmp	al,vbar
 23145 00002E06 75EB                    	jne	short PIPECOMLP
 23146                                  ISPIPE2:
 23147 00002E08 26C645FF0D              	mov	byte [es:di-1],0Dh
 23148 00002E0D 49                      	dec	cx
 23149                                  	;mov	[cs:COMBUF+1],cl
 23150                                  	; 27/02/2023
 23151 00002E0E 26880E[0589]            	mov	[es:COMBUF+1],cl
 23152 00002E13 4E                      	dec	si
 23153                                  	;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 23154 00002E14 8936[A002]              	mov	[PipePtr],si		; On to next pipe element
 23155                                  			; mov [EndInit+158],si
 23156 00002E18 8B16[2503]              	mov	dx,[OutPipePtr]
 23157 00002E1C 51                      	push	cx
 23158 00002E1D 31C9                    	xor	cx,cx
 23159                                  	;mov	ax,CREAT*256 ; 3C00h
 23160 00002E1F B8003C                  	mov	ax,3C00h
 23161 00002E22 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 23162                                  			; CX = attributes for file
 23163                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 23164 00002E24 59                      	pop	cx
 23165 00002E25 72AB                    	jc	short PIPEERRJ		; Lost the file
 23166 00002E27 89C3                    	mov	bx,ax
 23167 00002E29 B0FF                    	mov	al,0FFh
 23168                                  	;xchg	al,[bx+18h]
 23169 00002E2B 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23170 00002E2E A21900                  	mov	[PDB.JFN_TABLE+1],al
 23171 00002E31 8716[2303]              	xchg	dx,[InPipePtr]	; Swap for next element of pipe
 23172 00002E35 8916[2503]              	mov	[OutPipePtr],dx
 23173 00002E39 EB0D                    	jmp	short PIPECOM
 23174                                  LASTPIPE:
 23175                                  	;mov	[cs:COMBUF+1],cl 
 23176                                  	; 27/02/2023
 23177 00002E3B 26880E[0589]            	mov	[es:COMBUF+1],cl
 23178 00002E40 4E                      	dec	si
 23179                                  	;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 23180 00002E41 8936[A002]              	mov	[PipePtr],si	; Point at the CR (anything not '|' will do)
 23181                                  		; mov [EndInit+158],si
 23182 00002E45 E859FD                  	call	TESTDOREOUT	; Set up the redirection if specified
 23183                                  PIPECOM:
 23184 00002E48 0E                      	push	cs
 23185 00002E49 1F                      	pop	ds
 23186 00002E4A E995D4                  	jmp	NOPIPEPROC	; Process the pipe element
 23187                                  PIPEEND:
 23188 00002E4D E89DFE                  	call	PIPEDEL
 23189 00002E50 813E[8E01]00F0          	cmp	word [SingleCom],0F000h
 23190 00002E56 7506                    	jnz	short NOSINGP2
 23191 00002E58 C706[8E01]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Make it return
 23192                                  NOSINGP2:
 23193 00002E5E E9A3D2                  	jmp	TCOMMAND
 23194                                  
 23195                                  ; =============== S U B	R O U T	I N E =======================================
 23196                                  
 23197                                  ; Date and time are set during initialization and use
 23198                                  ; this routines since they need to do a long return
 23199                                  
 23200                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 23201                                  DATINIT:
 23202 00002E61 2E8C1E[A58A]            	mov	[cs:RESSEG],ds	; SetInitFlag needs resseg initialized
 23203 00002E66 06                      	push	es
 23204 00002E67 1E                      	push	ds		; Going to use the previous stack
 23205 00002E68 8CC8                    	mov	ax,cs		; Set up the appropriate segment registers
 23206 00002E6A 8EC0                    	mov	es,ax
 23207 00002E6C 8ED8                    	mov	ds,ax
 23208 00002E6E E83D20                  	call	TSYSLOADMSG ; MSDOS 6.0 ; AN000; preload messages
 23209 00002E71 BA[0295]                	mov	dx,INTERNATVARS
 23210 00002E74 B80038                  	mov	ax,3800h
 23211                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 23212 00002E77 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 23213                                  			; get current-country info
 23214                                  			; DS:DX	-> buffer for returned info
 23215                                  	; 20/10/2018
 23216 00002E79 C70681000D00            	mov	word [81h],0Dh ; Want to prompt for date during initialization
 23217 00002E7F C606[0489]80            	mov	byte [COMBUF],128 ; Init COMBUF
 23218 00002E84 C706[0589]010D          	mov	word [COMBUF+1],0D01h
 23219 00002E8A E80600                  	call	DATE
 23220 00002E8D E86200                  	call	CTIME
 23221 00002E90 1F                      	pop	ds
 23222 00002E91 07                      	pop	es
 23223 00002E92 CB                      	retf	; far return
 23224                                  
 23225                                  ; =============== S U B	R O U T	I N E =======================================
 23226                                  
 23227                                  ; MSDOS 6.0
 23228                                  
 23229                                  ; ****************************************************************
 23230                                  ; *
 23231                                  ; * ROUTINE:	 DATE - Set system date
 23232                                  ; *
 23233                                  ; * FUNCTION:	 If a date is specified, set the system date,
 23234                                  ; *		 otherwise display the current system date and
 23235                                  ; *		 prompt the user for a new date.  If an invalid
 23236                                  ; *		 date is specified, issue an error message and
 23237                                  ; *		 prompt for a new date.  If the user enters
 23238                                  ; *		 nothing when prompted for a date, terminate.
 23239                                  ; *
 23240                                  ; * INPUT:	 command line at offset 81H
 23241                                  ; *
 23242                                  ; * OUTPUT:	 none
 23243                                  ; *
 23244                                  ; ****************************************************************
 23245                                  
 23246                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23247                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2FC4h
 23248                                  	; 11/06/2023
 23249                                  DATE:
 23250 00002E93 BE8100                  	mov	si,81h			; Accepting argument for date inline
 23251 00002E96 BF[B184]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 23252 00002E99 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 23253 00002E9B 31D2                    	xor	dx,dx			;AN000;
 23254 00002E9D E87B14                  	call	cmd_parse		;AC000; call parser
 23255                                  	
 23256                                  	; 27/02/2023
 23257                                  	;cmp	ax,-1
 23258                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 23259                                  	;je	short PRMTDAT 		;AC000; yes - go ask for date
 23260                                  	;;cmp	ax,0
 23261                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 23262                                  	;;jne	short DATERR		;AN000; yes - go issue message
 23263                                  	; 26/04/2023
 23264                                  	;or	ax,ax ; ax = 0 ?
 23265                                  	;jnz	short DATERR
 23266                                  	;;jmp	short COMDAT		;AC000; we have a date
 23267                                  	; 11/06/2023
 23268 00002EA0 40                      	inc	ax  ; cmp ax,-1
 23269 00002EA1 7428                    	jz	short PRMTDAT ; 0FFFFh -> 0
 23270 00002EA3 48                      	dec	ax  ; cmp ax,0
 23271 00002EA4 7541                    	jnz	short DATERR ; 1 -> 0
 23272                                  	; ax = 0
 23273                                  	
 23274                                  	; 27/02/2023
 23275                                  COMDAT:
 23276 00002EA6 8B0E[5F95]              	mov	cx,[DATE_YEAR]		;AC000; get parts of date in
 23277 00002EAA 8A36[6195]              	mov	dh,[DATE_MONTH]		;AC000;  cx and dx for set
 23278 00002EAE 8A16[6295]              	mov	dl,[DATE_DAY]		;AC000;  date function call.
 23279 00002EB2 51                      	push	cx			;AC000; save date
 23280 00002EB3 52                      	push	dx			;AC000;
 23281 00002EB4 B90100                  	mov	cx,1			;AC000; set 1 positional entered
 23282 00002EB7 31D2                    	xor	dx,dx			;AN029;
 23283 00002EB9 E85F14                  	call	cmd_parse		;AN029; call parser
 23284 00002EBC 3CFF                    	cmp	al,0FFh ; -1
 23285                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 23286 00002EBE 5A                      	pop	dx			;AC000; retrieve date
 23287 00002EBF 59                      	pop	cx			;AC000;
 23288 00002EC0 7525                    	jnz	short DATERR		;AC000; extra stuff on line - try again
 23289                                  	; 26/04/2023
 23290                                  	;mov	ah,SET_DATE		;yes - set date
 23291 00002EC2 B42B                    	mov	ah,2Bh
 23292 00002EC4 CD21                    	int	21h
 23293                                  			; DOS - SET CURRENT DATE
 23294                                  			; DL = day, DH = month, CX = year
 23295                                  			; Return: AL = 00h if no error /= FFh if bad value sent to routine
 23296 00002EC6 08C0                    	or	al,al
 23297 00002EC8 751D                    	jnz	short DATERR
 23298                                  date_end:
 23299 00002ECA C3                      	retn
 23300                                  
 23301                                  PRMTDAT:
 23302                                  	; Print "Current date is
 23303                                  
 23304 00002ECB E81508                  	call	GetDate 		;AN000; get date for output
 23305 00002ECE 86F2                    	xchg	dh,dl			;AN000; switch month & day
 23306 00002ED0 890E[AA7F]              	mov	[CurDat_yr],cx		;AC000; put year into message control block
 23307 00002ED4 8916[AC7F]              	mov	[CurDat_mo_day],dx	;AC000; put month and day into message control block
 23308 00002ED8 BA[9A7F]                	mov	dx,CurDat_Ptr		;AC000; set up message for output
 23309 00002EDB E8F31E                  	call	std_printf
 23310                                  
 23311                                  ;AD061; mov	word [CurDat_yr],0	;AC000; reset year, month and day
 23312                                  ;AD061; mov	word [CurDat_mo_day],0 	;AC000;  pointers in control block
 23313                                  
 23314                                  GET_NEW_DATE:				;AN000;
 23315 00002EDE E8BC00                  	call	GETDAT			;AC000; prompt user for date
 23316                                  	
 23317                                  	; 11/06/2023
 23318                                  	;cmp	ax,0FFFFh ; -1
 23319                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 23320                                  	;je	short date_end		;AC000; yes - exit
 23321                                  	; 26/04/2023
 23322                                  	;;cmp	ax,0
 23323                                  	;;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 23324                                  	;;;jnz	short DATERR		;AN000; yes - go issue message
 23325                                  	;; 27/02/2023
 23326                                  	;;jz	short COMDAT
 23327                                  	; 26/04/2023
 23328                                  	;and	ax,ax ; 0 ?
 23329                                  	;jz	short COMDAT
 23330                                  
 23331                                  	; 11/06/2023
 23332 00002EE1 40                      	inc	ax  ; cmp ax,-1
 23333 00002EE2 74E6                    	jz	short date_end ; 0FFFFh -> 0
 23334 00002EE4 48                      	dec	ax  ; cmp ax,0
 23335 00002EE5 74BF                    	jz	short COMDAT ; 1 -> 0
 23336                                  	; ax > 0
 23337                                  
 23338                                  ;COMDAT:
 23339                                  ;	....
 23340                                  DATERR:
 23341 00002EE7 E8E7F6                  	call	CRLF2			;AN028; print out a blank line
 23342 00002EEA BA[977F]                	mov	dx,BADDAT_PTR
 23343 00002EED E8E11E                  	call	std_printf
 23344 00002EF0 EBEC                    	jmp	short GET_NEW_DATE	;AC000; get date again
 23345                                  
 23346                                  ; =============== S U B	R O U T	I N E =======================================
 23347                                  
 23348                                  ; MSDOS 6.0
 23349                                  
 23350                                  ; TIME gets and sets the time
 23351                                  
 23352                                  ; ****************************************************************
 23353                                  ; *
 23354                                  ; * ROUTINE:	 TIME - Set system time
 23355                                  ; *
 23356                                  ; * FUNCTION:	 If a time is specified, set the system time,
 23357                                  ; *		 otherwise display the current system time and
 23358                                  ; *		 prompt the user for a new time.  If an invalid
 23359                                  ; *		 time is specified, issue an error message and
 23360                                  ; *		 prompt for a new time.  If the user enters
 23361                                  ; *		 nothing when prompted for a time, terminate.
 23362                                  ; *
 23363                                  ; * INPUT:	 command line at offset 81H
 23364                                  ; *
 23365                                  ; * OUTPUT:	 none
 23366                                  ; *
 23367                                  ; ****************************************************************
 23368                                  
 23369                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23370                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:302Dh
 23371                                  	; 11/06/2023
 23372                                  CTIME:
 23373 00002EF2 BE8100                  	mov	si,81h			; Accepting argument for time inline
 23374 00002EF5 BF[C384]                	mov	di,PARSE_TIME		;AN000; Get address of PARSE_time
 23375 00002EF8 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 23376 00002EFA 31D2                    	xor	dx,dx			;AN000;
 23377 00002EFC E81C14                  	call	cmd_parse		;AC000; call parser
 23378                                  	
 23379                                  	; 27/02/2023
 23380                                  	;cmp	ax,-1
 23381                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 23382                                  	;je	short PRMTTIM 		;AC000; yes - prompt for time
 23383                                  	;;cmp	ax,0
 23384                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 23385                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 23386                                  	;and	ax,ax ; ax = 0 ?
 23387                                  	;jnz	short TIMERR
 23388                                  	;;jmp	short COMTIM		;AC000; we have a time
 23389                                  	; 11/06/2023
 23390 00002EFF 40                      	inc	ax  ; cmp ax,-1
 23391 00002F00 742C                    	jz	short PRMTTIM ; 0FFFFh -> 0
 23392 00002F02 48                      	dec	ax  ; cmp ax,0
 23393 00002F03 7548                    	jnz	short TIMERR ; 1 -> 0
 23394                                  	; ax = 0
 23395                                  	
 23396                                  	; 27/02/2023
 23397                                  COMTIM:
 23398 00002F05 8A2E[6795]              	mov	ch,[TIME_HOUR]		;AC000; get parts of time in
 23399 00002F09 8A0E[6895]              	mov	cl,[TIME_MINUTES]	;AC000;  cx and dx for set
 23400 00002F0D 8A36[6995]              	mov	dh,[TIME_SECONDS]	;AC000;  time function call
 23401 00002F11 8A16[6A95]              	mov	dl,[TIME_FRACTION]	;AC000;
 23402 00002F15 51                      	push	cx			;AC000; save time
 23403 00002F16 52                      	push	dx			;AC000;
 23404 00002F17 B90100                  	mov	cx,1			;AC000; set 1 positional parm entered
 23405 00002F1A 31D2                    	xor	dx,dx			;AN029;
 23406 00002F1C E8FC13                  	call	cmd_parse		;AN029; call parser
 23407 00002F1F 3CFF                    	cmp	al, -1
 23408                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 23409 00002F21 5A                      	pop	dx			;AC000; retieve time
 23410 00002F22 59                      	pop	cx			;AC000;
 23411 00002F23 7528                    	jnz	short TIMERR		;AC000; extra stuff on line - try again
 23412                                  SAVTIM:
 23413                                  	;mov	ah,SET_TIME
 23414 00002F25 B42D                    	mov	ah,2Dh
 23415 00002F27 CD21                    	int	21h
 23416 00002F29 08C0                    	or	al,al
 23417 00002F2B 7520                    	jnz	short TIMERR		;AC000; if an error occured, try again
 23418                                  time_end:
 23419 00002F2D C3                      	retn
 23420                                  
 23421                                  PRMTTIM:
 23422                                  	;Printf "Current time is ... "
 23423                                  
 23424                                  	;mov	ah,Get_Time		;AC000; get the current time
 23425 00002F2E B42C                    	mov	ah,2Ch
 23426 00002F30 CD21                    	int	21h			;AC000;   Get time in CX:DX
 23427 00002F32 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 23428 00002F34 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 23429 00002F36 890E[CC7F]              	mov	[CurTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 23430 00002F3A 8916[CE7F]              	mov	[CurTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 23431 00002F3E BA[C77F]                	mov	dx,CurTim_Ptr		;AC000; set up message for output
 23432 00002F41 E88D1E                  	call	std_printf
 23433                                  
 23434                                  ;AD061; mov	word [CurTim_hr_min],0 	;AC000; reset hour, minutes, seconds, and hundredths
 23435                                  ;AD061; mov	word [CurTim_Sec_hn],0 	;AC000;  pointers in control block
 23436                                  
 23437                                  GET_NEW_TIME:
 23438 00002F44 E8AE00                  	call	GETTIM			;AC000;
 23439                                  	
 23440                                  	; 11/06/2023
 23441                                  	;cmp	ax,-1
 23442                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 23443                                  	;je	short time_end		;AC000;
 23444                                  	;;cmp	ax,0
 23445                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 23446                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 23447                                  	;or	ax,ax  ; ax = 0 ?
 23448                                  	;;jnz	short TIMERR
 23449                                  	; 27/02/2023
 23450                                  	;jz	short COMTIM
 23451                                  
 23452                                  	; 11/06/2023
 23453 00002F47 40                      	inc	ax  ; cmp ax,-1
 23454 00002F48 74E3                    	jz	short time_end ; 0FFFFh -> 0
 23455 00002F4A 48                      	dec	ax  ; cmp ax,0
 23456 00002F4B 74B8                    	jz	short COMTIM ; 1 -> 0
 23457                                  	; ax > 0
 23458                                  
 23459                                  ;COMTIM:
 23460                                  ;	....
 23461                                  TIMERR:
 23462 00002F4D E881F6                  	call	CRLF2			;AN028; print out a blank line
 23463 00002F50 BA[C47F]                	mov	dx,BadTim_Ptr
 23464 00002F53 E87B1E                  	call	std_printf		; Print error message
 23465 00002F56 EBEC                    	jmp	short GET_NEW_TIME	;AC000; Try again
 23466                                  
 23467                                  ; =============== S U B	R O U T	I N E =======================================
 23468                                  
 23469                                  ; MSDOS 6.0
 23470                                  
 23471                                  ; Set the special flag in the INIT flag to the value in CX.
 23472                                  
 23473                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23474                                  SetInitFlag:
 23475 00002F58 8E1E[A58A]              	mov	ds,[RESSEG]
 23476                                  
 23477 00002F5C 8026[FF01]FD            	and	byte [InitFlag],~INITSPECIAL ; 0FDh ; not initspecial
 23478                                  	;and	byte [InitFlag],0FDh
 23479 00002F61 080E[FF01]              	or	byte [InitFlag],cl
 23480 00002F65 0E                      	push	cs
 23481 00002F66 1F                      	pop	ds
 23482 00002F67 C3                      	retn
 23483                                  
 23484                                  ; =============== S U B	R O U T	I N E =======================================
 23485                                  
 23486                                  ; MSDOS 6.0
 23487                                  
 23488                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23489                                  PipeOff:
 23490 00002F68 1E                      	push	ds
 23491 00002F69 50                      	push	ax
 23492 00002F6A 2E8E1E[A58A]            	mov	ds,[cs:RESSEG]
 23493 00002F6F 30C0                    	xor	al,al
 23494 00002F71 8606[0002]              	xchg	[PipeFlag],al
 23495 00002F75 08C0                    	or	al,al
 23496 00002F77 7404                    	jz	short PipeOffDone
 23497 00002F79 D02E[8801]              	shr	byte [EchoFlag],1
 23498                                  PipeOffDone:
 23499 00002F7D 58                      	pop	ax
 23500 00002F7E 1F                      	pop	ds
 23501 00002F7F C3                      	retn
 23502                                  
 23503                                  ; =============== S U B	R O U T	I N E =======================================
 23504                                  
 23505                                  ; MSDOS 6.0
 23506                                  
 23507                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23508                                  PRINT_TIME:
 23509                                  	;mov	ah,Get_Time
 23510 00002F80 B42C                    	mov	ah,2Ch
 23511 00002F82 CD21                    	int	21h			; Get time in CX:DX
 23512                                  
 23513 00002F84 06                      	push	es
 23514 00002F85 0E                      	push	cs
 23515 00002F86 07                      	pop	es
 23516 00002F87 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 23517 00002F89 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 23518 00002F8B 2E890E[0581]            	mov	[cs:PromTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 23519 00002F90 2E8916[0781]            	mov	[cs:PromTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 23520 00002F95 BA[0081]                	mov	dx,promtim_ptr		;AC000; set up message for output
 23521 00002F98 E8361E                  	call	std_printf
 23522                                  
 23523                                  ;AD061; mov	word [cs:PromTim_hr_min],0
 23524                                  					;AC000; reset hour, minutes, seconds, and hundredths
 23525                                  ;AD061; mov	word [cs:PromTim_Sec_hn],0
 23526                                  					;AC000;  pointers in control block
 23527 00002F9B 07                      	pop	es
 23528 00002F9C C3                      	retn
 23529                                  
 23530                                  ; =============== S U B	R O U T	I N E =======================================
 23531                                  
 23532                                  ; MSDOS 6.0
 23533                                  
 23534                                  ; ****************************************************************
 23535                                  ; *
 23536                                  ; * ROUTINE:	 GETDAT - Prompt user for date
 23537                                  ; *
 23538                                  ; * FUNCTION:	 Gets the date format from the COUNTRY DEPENDENT
 23539                                  ; *		 INFORMATION and issues the "Enter new date"
 23540                                  ; *		 message with the proper date format. COMBUF
 23541                                  ; *		 is reset to get a date from the command line.
 23542                                  ; *		 The PARSE_DATE blocks are then reset and the
 23543                                  ; *		 PARSE function call is issued.
 23544                                  ; *
 23545                                  ; * INPUT:	 NONE
 23546                                  ; *
 23547                                  ; * OUTPUT:	 COMBUF
 23548                                  ; *		 PARSER RETURN CODES
 23549                                  ; *
 23550                                  ; ****************************************************************
 23551                                  
 23552                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23553                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:30E2h
 23554                                  GETDAT:
 23555                                  	;mov	ax,(International SHL 8)
 23556 00002F9D B80038                  	mov	ax,3800h
 23557                                  					; Determine what format the date
 23558 00002FA0 BA5C00                  	mov	dx,5Ch			;  should be entered in and
 23559 00002FA3 CD21                    	int	21h			;  print a message describing it
 23560                                  			; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 23561                                  			; get current-country info
 23562                                  			; DS:DX -> buffer for returned info
 23563 00002FA5 89D6                    	mov	si,dx
 23564 00002FA7 AD                      	lodsw
 23565 00002FA8 2E8B16[DE80]            	mov	dx,[cs:usadat_ptr]	;AC000; get mm-dd-yy
 23566 00002FAD 48                      	dec	ax
 23567 00002FAE 780C                    	js	short printformat
 23568 00002FB0 2E8B16[E180]            	mov	dx,[cs:eurdat_ptr]	;AC000; get dd-mm-yy
 23569 00002FB5 7405                    	jz	short printformat
 23570 00002FB7 2E8B16[E480]            	mov	dx,[cs:japdat_ptr]	;AC000; get yy-mm-dd
 23571                                  printformat:
 23572 00002FBC 89D0                    	mov	ax,dx			;AN000; get message number of format
 23573                                  	;mov	dh,util_msg_class	;AN000; this is a utility message
 23574 00002FBE B6FF                    	mov	dh,-1 ; 0FFh
 23575 00002FC0 E8F11E                  	call	TSYSGETMSG		;AN000; get the address of the message
 23576 00002FC3 2E8936[BB7F]            	mov	[cs:NewDat_Format],si	;AN000; put the address in subst block
 23577 00002FC8 BA[B67F]                	mov	dx,NewDat_Ptr		;AC000; get address of message to print
 23578 00002FCB E8031E                  	call	std_printf
 23579                                  	;mov	word [cs:NewDat_Format],no_subst
 23580                                  					;AN000; reset subst block
 23581 00002FCE 2EC706[BB7F]0000        	mov	word [cs:NewDat_Format],0
 23582                                  
 23583                                  	; 28/02/2023
 23584 00002FD5 BF[B184]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 23585                                  ; 28/02/2023
 23586                                  gettim_p:	
 23587                                  	;mov	ah,Std_Con_String_Input
 23588 00002FD8 B40A                    	mov	ah,0Ah
 23589 00002FDA BA[0489]                	mov	dx,COMBUF
 23590 00002FDD B90200                  	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 23591 00002FE0 E875FF                  	call	SetInitFlag		;  prompting for date.
 23592 00002FE3 CD21                    	int	21h			; Get input line
 23593 00002FE5 31C9                    	xor	cx,cx			; Reset bit in InitFlag that indicates
 23594 00002FE7 E86EFF                  	call	SetInitFlag		;  prompting for date.
 23595 00002FEA E8E4F5                  	call	CRLF2
 23596                                  	; 28/02/2023
 23597                                  	;mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 23598                                  ;gettim_p: ; 28/02/2023
 23599 00002FED BE[0689]                	mov	si,COMBUF+2
 23600                                  	;xor	cx,cx	 ; cx = 0	;AN000; clear counter for positionals
 23601 00002FF0 31D2                    	xor	dx,dx			;AN000;
 23602                                  	;call	cmd_parse		;AC000; call parser
 23603                                  	;retn
 23604                                  	; 28/02/2023
 23605 00002FF2 E92613                  	jmp	cmd_parse
 23606                                  
 23607                                  ; =============== S U B	R O U T	I N E =======================================
 23608                                  
 23609                                  ; MSDOS 6.0
 23610                                  
 23611                                  ; ****************************************************************
 23612                                  ; *
 23613                                  ; * ROUTINE:	 GETTIME - Prompt user for time
 23614                                  ; *
 23615                                  ; * FUNCTION:	 Gets the time format from the COUNTRY DEPENDENT
 23616                                  ; *		 INFORMATION and issues the "Enter new time"
 23617                                  ; *		 message. COMBUF is reset to get a time from the
 23618                                  ; *		 command line. The PARSE_TIME blocks are then
 23619                                  ; *		 reset and the PARSE function call is issued.
 23620                                  ; *
 23621                                  ; * INPUT:	 NONE
 23622                                  ; *
 23623                                  ; * OUTPUT:	 COMBUF
 23624                                  ; *		 PARSER RETURN CODES
 23625                                  ; *
 23626                                  ; ****************************************************************
 23627                                  
 23628                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23629                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:313Dh
 23630                                  GETTIM:
 23631 00002FF5 31C9                    	xor	cx,cx			; Initialize hours and minutes to zero
 23632 00002FF7 BA[D57F]                	mov	dx,NewTim_Ptr
 23633 00002FFA E8D41D                  	call	std_printf
 23634                                  
 23635                                  	; 28/02/2023
 23636 00002FFD BF[C384]                	mov	di,PARSE_TIME
 23637 00003000 EBD6                    	jmp	short gettim_p
 23638                                  
 23639                                  ; 28/02/2023
 23640                                  ;	;mov	ah,Std_Con_String_Input
 23641                                  ;	mov	ah,0Ah
 23642                                  ;	mov	dx,COMBUF
 23643                                  ;	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 23644                                  ;	call	SetInitFlag		;  prompting for time.
 23645                                  ;	int	21h			; Get input line
 23646                                  ;	; 28/02/2023
 23647                                  ;	xor	cx,cx			; Reset bit in InitFlag that indicates
 23648                                  ;	call	SetInitFlag		;  prompting for time.
 23649                                  ;	call	CRLF2
 23650                                  ;	; 28/02/2023
 23651                                  ;	;mov	si,COMBUF+2
 23652                                  ;	; 28/02/2023
 23653                                  ;	mov	di,PARSE_TIME		;AN000; Get address of PARSE_TIME
 23654                                  ;	; 28/02/2023
 23655                                  ;	jmp	short gettim_p	
 23656                                  ;	; 28/02/2023
 23657                                  ;	;;xor	cx,cx			;AN000; clear counter for positionals
 23658                                  ;	;xor	dx,dx			;AN000;
 23659                                  ;	;call	cmd_parse		;AC000; call parser
 23660                                  ;	;retn
 23661                                  
 23662                                  
 23663                                  ; =============== S U B	R O U T	I N E =======================================
 23664                                  
 23665                                  ; MSDOS 6.0
 23666                                  
 23667                                  ;Skip_white: Skips over the whitespace chars that could be present after
 23668                                  ;the '=' sign in the environment variable before the actual path.
 23669                                  ;
 23670                                  ;	ENTRY:	ds:si = arguments of the environment variable
 23671                                  ;
 23672                                  ;	EXIT:	ds:si = start of the path
 23673                                  ;
 23674                                  ;	REGISTERS AFFECTED: ax
 23675                                  
 23676                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23677                                  skip_white:
 23678 00003002 FC                      	cld
 23679                                  skw_lp:
 23680 00003003 AC                      	lodsb
 23681 00003004 3C20                    	cmp	al,' '			;blank char?
 23682 00003006 74FB                    	jz	short skw_lp		;yes, skip it
 23683 00003008 3C09                    	cmp	al,9			;tab char?
 23684 0000300A 74F7                    	jz	short skw_lp		;yes, skip it
 23685 0000300C 4E                      	dec	si			;point at first non-white
 23686 0000300D C3                      	retn
 23687                                  
 23688                                  ; =============== S U B	R O U T	I N E =======================================
 23689                                  
 23690                                  ; MSDOS 6.0
 23691                                  
 23692                                  ;Copy_pipe_path: This routine copies the path from the TEMP environment
 23693                                  ;variable into the path buffers Pipe1 & Pipe2.
 23694                                  ;
 23695                                  ;	ENTRY:	ds:si = path to be copied
 23696                                  ;		es = RESGROUP
 23697                                  ;
 23698                                  ;	EXIT:	Path copied into Pipe1 and Pipe2.
 23699                                  ;
 23700                                  ;	REGISTERS AFFECTED: si, di, cx, ax
 23701                                  
 23702                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23703                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3174h
 23704                                  
 23705                                  copy_pipe_path:
 23706 0000300E B9FFFF                  	mov	cx,0FFFFh ; 65535
 23707 00003011 30C0                    	xor	al,al
 23708                                  
 23709 00003013 89F7                    	mov	di,si
 23710 00003015 06                      	push	es			;save es
 23711 00003016 1E                      	push	ds
 23712 00003017 07                      	pop	es			;es:di = path to be copied
 23713                                  	
 23714 00003018 FC                      	cld
 23715 00003019 57                      	push	di
 23716 0000301A F2AE                    	repnz	scasb			;look for the null char
 23717 0000301C 5F                      	pop	di
 23718                                  
 23719 0000301D 07                      	pop	es			;es = RESGROUP again
 23720                                  
 23721 0000301E F7D1                    	not	cx			;length including the null
 23722                                  
 23723                                  	;;mov	di,320h ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit)
 23724                                  	;mov	di,offset DATARES:Pipe1
 23725 00003020 BF[0202]                	mov	di,Pipe1  ; (offset RESGROUP:EndInit)
 23726 00003023 57                      	push	di
 23727 00003024 51                      	push	cx			
 23728 00003025 F3A4                    	rep	movsb			;copy path into Pipe1
 23729 00003027 59                      	pop	cx
 23730 00003028 5F                      	pop	di
 23731                                  
 23732 00003029 1E                      	push	ds
 23733 0000302A 06                      	push	es
 23734 0000302B 1F                      	pop	ds			;ds:si = Pipe1
 23735 0000302C 89FE                    	mov	si,di
 23736                                  	;;mov	di,36Fh ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit+79)
 23737                                  	;mov	di,offset DATARES:Pipe2	;es:di = Pipe2
 23738 0000302E BF[5102]                	mov	di,Pipe2  ; (offset RESGROUP:EndInit+79)
 23739 00003031 F3A4                    	rep	movsb			;copy path into Pipe2
 23740 00003033 1F                      	pop	ds
 23741 00003034 C3                      	retn
 23742                                  
 23743                                  ; 28/02/2023
 23744                                  %if 0
 23745                                  
 23746                                  ;============================================================================
 23747                                  ; TCODE4.ASM, MSDOS 2.11 (& MSDOS 3.3), 1983 (& 1987)
 23748                                  ;============================================================================
 23749                                  ; 05/10/2018 - Retro DOS v3.0
 23750                                  
 23751                                  ; DATE - Gets and sets the time
 23752                                  
 23753                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 20C0h
 23754                                  
 23755                                  ; =============== S U B	R O U T	I N E =======================================
 23756                                  
 23757                                  DATE_CXDX:
 23758                                  	mov	bx,cx
 23759                                  
 23760                                  ; =============== S U B	R O U T	I N E =======================================
 23761                                  
 23762                                  P_DATE:
 23763                                  	mov	ax,bx
 23764                                  	mov	cx,dx
 23765                                  	mov	dl,100
 23766                                  	div	dl
 23767                                  	xchg	al,ah
 23768                                  	xchg	ax,dx
 23769                                  	mov	bh,'0'-' ' ; 10h  ; Enable leading zero suppression
 23770                                  	;mov	ax,[INTERNATVARS]
 23771                                  	mov	ax,[INTERNATVARS+INTERNAT_BLOCK.Date_tim_format]
 23772                                  	or	ax,ax
 23773                                  	jz	short USPDAT
 23774                                  	dec	ax
 23775                                  	jz	short EUPDAT
 23776                                  	mov	bh,0	 ; Disable leading zero suppression	
 23777                                  	call	P_YR
 23778                                  	call	P_DSEP
 23779                                  	call	P_MON
 23780                                  	call	P_DSEP
 23781                                  	call	P_DAY
 23782                                  	retn
 23783                                  
 23784                                  USPDAT:
 23785                                  	call	P_MON
 23786                                  	call	P_DSEP
 23787                                  	call	P_DAY
 23788                                  PLST:
 23789                                  	call	P_DSEP
 23790                                  	call	P_YR
 23791                                  	retn
 23792                                  
 23793                                  EUPDAT:
 23794                                  	call	P_DAY
 23795                                  	call	P_DSEP
 23796                                  	call	P_MON
 23797                                  	jmp	short PLST
 23798                                  
 23799                                  ; ---------------------------------------------------------------------------
 23800                                  
 23801                                  P_MON:
 23802                                  	mov	al,ch
 23803                                  	call	OUT2
 23804                                  	retn
 23805                                  
 23806                                  ; ---------------------------------------------------------------------------
 23807                                  
 23808                                  P_DSEP:
 23809                                  	;mov	al,[DATE_SEP] ; INTERNATVARS+11
 23810                                  	mov	al,[INTERNATVARS+INTERNAT_BLOCK.Date_sep]
 23811                                  	stosb
 23812                                  	retn
 23813                                  
 23814                                  ; ---------------------------------------------------------------------------
 23815                                  
 23816                                  P_DAY:
 23817                                  	mov	al,cl
 23818                                  	call	OUT2
 23819                                  	retn
 23820                                  
 23821                                  ; ---------------------------------------------------------------------------
 23822                                  
 23823                                  P_YR:
 23824                                  	mov	al,dh
 23825                                  	or	al,al
 23826                                  	jz	short TWODIGYR	; Two instead of 4 digit year
 23827                                  	call	OUT2
 23828                                  TWODIGYR:
 23829                                  	mov	al,dl
 23830                                  	call	OUT2
 23831                                  DATE_RETN:
 23832                                  	retn
 23833                                  
 23834                                  ; =============== S U B	R O U T	I N E =======================================
 23835                                  
 23836                                  DATE:				 ; Accepting argument for date inline
 23837                                  	mov	si,81h
 23838                                  	call	SCANOFF
 23839                                  	cmp	al,0Dh
 23840                                  	jz	short PRMTDAT
 23841                                  	jmp	short COMDAT
 23842                                  
 23843                                  	;nop
 23844                                  PRMTDAT:
 23845                                  	; MSDOS 3.3
 23846                                  	mov	dx,CURDATPTR
 23847                                  	call	STD_PRINTF	; Print "Current date is "	
 23848                                  	call	PRINT_DATE
 23849                                  GETDAT:	
 23850                                  	mov	dx,NEWDATPTR
 23851                                  	call	STD_PRINTF	 ; Print "Enter new date: "
 23852                                  
 23853                                  	mov	ax,INTERNATIONAL*256 ; 3800h 
 23854                                  				; Determine what format the date
 23855                                  	mov	dx,5Ch		;  should be entered in and
 23856                                  	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 23857                                  			; get current-country info
 23858                                  			; DS:DX	-> buffer for returned info
 23859                                  	mov	si,dx		;  print a message describing it
 23860                                  	lodsw
 23861                                  	mov	dx,USADATPTR	; get mm-dd-yy
 23862                                  	dec	ax
 23863                                  	js	short PRINTFORMAT
 23864                                  	mov	dx,EURDATPTR	; get dd-mm-yy
 23865                                  	jz	short PRINTFORMAT
 23866                                  	mov	dx,JAPDATPTR	; get yy-mm-dd
 23867                                  PRINTFORMAT:
 23868                                  	call	STD_PRINTF
 23869                                  	mov	ah,Std_Con_String_Input	; 0Ah
 23870                                  	mov	dx,COMBUF
 23871                                  	mov	cx,INITSPECIAL ;2 ; Set bit in InitFlag that indicate
 23872                                  	call	SETINITFLAG	;  prompting for date.
 23873                                  	int	21h		; Get input line
 23874                                  	xor	cx,cx		; Reset bit in InitFlag that indicates
 23875                                  	call	SETINITFLAG	;  prompting for date.
 23876                                  	call	CRLF2
 23877                                  	mov	si,COMBUF+2
 23878                                  	cmp	byte [si],0Dh
 23879                                  	jz	short DATE_RETN
 23880                                  COMDAT:
 23881                                  	;mov	ax,[INTERNATVARS]
 23882                                  	mov	ax,[INTERNATVARS+INTERNAT_BLOCK.Date_tim_format]
 23883                                  	or	ax,ax
 23884                                  	jz	short USSDAT
 23885                                  	dec	ax
 23886                                  	jz	short EUSDAT
 23887                                  	call	GET_YR
 23888                                  	jc	short DATERRJ
 23889                                  	call	GET_DSEP
 23890                                  	jc	short DATERRJ
 23891                                  	call	GET_MON
 23892                                  	jc	short DATERRJ
 23893                                  	call	GET_DSEP
 23894                                  	jc	short DATERRJ
 23895                                  	call	GET_DAY
 23896                                  DAT_SET:
 23897                                  	jnc	short DATSET
 23898                                  	jmp	DATERR
 23899                                  
 23900                                  ; ---------------------------------------------------------------------------
 23901                                  
 23902                                  DATSET:
 23903                                  	lodsb
 23904                                  	cmp	al,' '
 23905                                  	jz	short DATSET
 23906                                  	cmp	al,9
 23907                                  	jz	short DATSET
 23908                                  	cmp	al,0Dh
 23909                                  	jnz	short DATERR
 23910                                  	mov	ah,SET_DATE ; 2Bh
 23911                                  	int	21h	; DOS -	SET CURRENT DATE
 23912                                  			; DL = day,DH = month,	CX = year
 23913                                  			; Return: AL = 00h if no error 
 23914                                  			; 	     = FFh if bad value sent to routine
 23915                                  	or	al,al
 23916                                  	jnz	short DATERR
 23917                                  DAT_SET_RETN:
 23918                                  	retn
 23919                                  
 23920                                  ; ---------------------------------------------------------------------------
 23921                                  
 23922                                  USSDAT:
 23923                                  	call	GET_MON
 23924                                  	jb	short DATERR
 23925                                  	call	GET_DSEP
 23926                                  DATERRJ:
 23927                                  	jc	short DATERR
 23928                                  	call	GET_DAY
 23929                                  TGET:
 23930                                  	jc	short DATERR
 23931                                  	call	GET_DSEP
 23932                                  	jc	short DATERR
 23933                                  	call	GET_YR
 23934                                  	jmp	short DAT_SET
 23935                                  
 23936                                  ; ---------------------------------------------------------------------------
 23937                                  
 23938                                  EUSDAT:
 23939                                  	call	GET_DAY
 23940                                  	jc	short DATERR
 23941                                  	call	GET_DSEP
 23942                                  	jc	short DATERR
 23943                                  	call	GET_MON
 23944                                  	jmp	short TGET
 23945                                  
 23946                                  ; =============== S U B	R O U T	I N E =======================================
 23947                                  
 23948                                  GET_MON:
 23949                                  	call	GETNUM		; Get one or two digit number
 23950                                  	jc	short DAT_SET_RETN
 23951                                  	mov	dh,ah		; Put in position
 23952                                  	retn
 23953                                  
 23954                                  
 23955                                  ; =============== S U B	R O U T	I N E =======================================
 23956                                  
 23957                                  GET_DAY:
 23958                                  		call	GETNUM
 23959                                  		mov	dl,ah		; Put in position
 23960                                  GET_DAY_RETN:
 23961                                  		retn
 23962                                  
 23963                                  ; =============== S U B	R O U T	I N E =======================================
 23964                                  
 23965                                  GET_YR:
 23966                                  	call	GETNUM
 23967                                  	jc	short GET_DAY_RETN
 23968                                  	mov	cx,1900
 23969                                  	call	GET_DSEP
 23970                                  	pushf
 23971                                  	dec	si
 23972                                  	popf
 23973                                  	jz	short BIAS
 23974                                  	cmp	byte [si],0Dh
 23975                                  	je	short BIAS
 23976                                  	cmp	byte [si],' '
 23977                                  	je	short BIAS
 23978                                  	cmp	byte [si],9
 23979                                  	je	short BIAS
 23980                                  	push	bx
 23981                                  	mov	bl,100
 23982                                  	mov	al,ah
 23983                                  	mul	bl
 23984                                  	pop	bx
 23985                                  	mov	cx,ax
 23986                                  	call	GETNUM
 23987                                  	jc	short GET_DAY_RETN
 23988                                  BIAS:
 23989                                  	mov	al,ah
 23990                                  	mov	ah,0
 23991                                  	add	cx,ax
 23992                                  BIAS_RETN:
 23993                                  	retn
 23994                                  
 23995                                  ; ---------------------------------------------------------------------------
 23996                                  
 23997                                  DATERR:
 23998                                  	mov	dx,BADDATPTR
 23999                                  	call	STD_PRINTF
 24000                                  	jmp	GETDAT
 24001                                  
 24002                                  ; =============== S U B	R O U T	I N E =======================================
 24003                                  
 24004                                  GET_DSEP:
 24005                                  	lodsb
 24006                                  	cmp	al,'/'
 24007                                  	je	short BIAS_RETN
 24008                                  	;cmp	al,'.'
 24009                                  	cmp	al,[DOT_CHR]
 24010                                  	je	short BIAS_RETN
 24011                                  	;cmp	al,'-'
 24012                                  	cmp	al,[CHAR_SUB]
 24013                                  	je	short BIAS_RETN
 24014                                  	stc
 24015                                  	retn
 24016                                  
 24017                                  ; =============== S U B	R O U T	I N E =======================================
 24018                                  
 24019                                  ; TIME gets and sets the time
 24020                                  
 24021                                  CTIME:
 24022                                  	mov	si,81h		; Accepting argument for time inline
 24023                                  	call	SCANOFF
 24024                                  	cmp	al,0Dh
 24025                                  	je	short PRMTTIM
 24026                                  	mov	bx,2E3Ah ; ":."
 24027                                  	call	INLINE
 24028                                  	jmp	COMTIM
 24029                                  
 24030                                  ; =============== S U B	R O U T	I N E =======================================
 24031                                  
 24032                                  PRINT_TIME:
 24033                                  	mov	ah,Get_Time ; 2Ch ; Get time in CX:DX
 24034                                  	int	21h	; DOS -	GET CURRENT TIME
 24035                                  			; Return: CH = hours,CL = minutes,DH = seconds
 24036                                  			; DL = hundredths of seconds
 24037                                  	push	di
 24038                                  	push	es
 24039                                  	push	cs
 24040                                  	pop	es
 24041                                  	mov	di,CHARBUF
 24042                                  	mov	bl,1	; Always 24 hour time
 24043                                  	call	P_TIME
 24044                                  	xor	ax,ax
 24045                                  	stosb
 24046                                  	mov	dx,CHARBUF
 24047                                  	mov	[STRING_PTR_2],dx
 24048                                  	mov	dx,STRINGBUF2PTR
 24049                                  	call	STD_PRINTF
 24050                                  	pop	es
 24051                                  	pop	di
 24052                                  P_TIME_RETN:
 24053                                  	retn
 24054                                  
 24055                                  ; =============== S U B	R O U T	I N E =======================================
 24056                                  
 24057                                  P_TIME:
 24058                                  	mov	al,ch	
 24059                                  	test	bl,7Fh		; Ignore high bit
 24060                                  	jnz	short T24	; 24 hr time?
 24061                                  	mov	bh,'a'		; Assume A.M.
 24062                                  	cmp	al,12		; In the afternoon?
 24063                                  	jb	short MORN
 24064                                  	mov	bh,'p'
 24065                                  	jz	short MORN
 24066                                  	sub	al,12		; Keep it to 12 hours or less
 24067                                  MORN:
 24068                                  	or	al,al		; Before 1 am?
 24069                                  	jnz	short T24
 24070                                  	mov	al,12
 24071                                  T24:
 24072                                  	push	bx
 24073                                  	mov	bh,'0'-' ' ; 10h ; Enable leading zero suppression
 24074                                  	call	OUT2
 24075                                  	call	P_TSEP
 24076                                  	mov	al,cl
 24077                                  	call	OUT2
 24078                                  	pop	bx
 24079                                  	push	bx
 24080                                  	test	bl,80h
 24081                                  	jnz	short PAP	; If from DIR, go directly to am pm
 24082                                  	mov	bh,0		; Disable leading zero suppression
 24083                                  	call	P_TSEP
 24084                                  	mov	al,dh
 24085                                  	call	OUT2
 24086                                  	;mov	al,'.'
 24087                                  	mov	al,[DECIMAL_SEP]
 24088                                  	stosb
 24089                                  	mov	al,dl
 24090                                  	call	OUT2
 24091                                  PAP:
 24092                                  	pop	bx
 24093                                  	test	bl,7Fh		; Ignore high bit
 24094                                  	jnz	short P_TIME_RETN
 24095                                  	mov	al,bh
 24096                                  	stosb
 24097                                  	retn
 24098                                  
 24099                                  ; =============== S U B	R O U T	I N E =======================================
 24100                                  
 24101                                  P_TSEP:
 24102                                  	;mov	al,[TIME_SEP]
 24103                                  	mov	al,[INTERNATVARS+INTERNAT_BLOCK.Time_sep]
 24104                                  	stosb
 24105                                  P_TSEP_RETN:
 24106                                  	retn
 24107                                  
 24108                                  ; ---------------------------------------------------------------------------
 24109                                  
 24110                                  PRMTTIM:
 24111                                  	mov	dx,CURTIMPTR
 24112                                  	call	STD_PRINTF	; Print "Current time is "
 24113                                  	call	PRINT_TIME
 24114                                  GETTIM:
 24115                                  	xor	cx,cx		; Initialize hours and minutes to zero
 24116                                  	mov	dx,NEWTIMPTR
 24117                                  	call	STD_PRINTF
 24118                                  	;mov	bx,':.'
 24119                                  	mov	bx,[TIMECHARS] 
 24120                                  	call	GETBUF
 24121                                  COMTIM:
 24122                                  	jz	short P_TSEP_RETN ; If no time present, don't change it	
 24123                                  	jc	short TIMEERR
 24124                                  	mov	cx,dx
 24125                                  	xor	dx,dx
 24126                                  	lodsb
 24127                                  	cmp	al,0Dh
 24128                                  	je	short SAVTIM
 24129                                  	cmp	al,' '
 24130                                  	je	short GOTSEC2
 24131                                  	cmp	al,9
 24132                                  	je	short GOTSEC2
 24133                                  	cmp	al,bl
 24134                                  	je	short GOTSEC
 24135                                  	cmp	al,bh
 24136                                  	jne	short TIMEERR
 24137                                  GOTSEC:
 24138                                  	call	GETNUM
 24139                                  	jc	short TIMEERR
 24140                                  	mov	dh,ah		; Position seconds
 24141                                  	lodsb
 24142                                  	cmp	al,0Dh
 24143                                  	je	short SAVTIM
 24144                                  	cmp	al,' '
 24145                                  	je	short GOTSEC2
 24146                                  	cmp	al,9
 24147                                  	je	short GOTSEC2
 24148                                  	;cmp	al,'.'
 24149                                  	cmp	al,[DECIMAL_SEP]
 24150                                  	jne	short TIMEERR
 24151                                  	call	GETNUM
 24152                                  	jc	short TIMEERR
 24153                                  	mov	dl,ah
 24154                                  GOTSEC2:
 24155                                  	lodsb
 24156                                  	cmp	al,' '
 24157                                  	je	short GOTSEC2
 24158                                  	cmp	al,9
 24159                                  	je	short GOTSEC2
 24160                                  	cmp	al,0Dh
 24161                                  	jne	short TIMEERR
 24162                                  SAVTIM:
 24163                                  	mov	ah,SET_TIME ; 2Dh
 24164                                  	int	21h	; DOS -	SET CURRENT TIME
 24165                                  			; CH = hours,CL = minutes,DH = seconds,
 24166                                  			;		DL = hundredths of seconds
 24167                                  			; Return: AL = 00h if no error 
 24168                                  			;	     = FFh if bad value sent to routine
 24169                                  	or	al,al
 24170                                  P_TSEP_JRETN:
 24171                                  	jz	short P_TSEP_RETN ; Error in time?
 24172                                  TIMEERR:
 24173                                  	mov	dx,BADTIMPTR
 24174                                  	call	STD_PRINTF	; Print "Enter new time: "
 24175                                  	jmp	short GETTIM
 24176                                  
 24177                                  ; =============== S U B	R O U T	I N E =======================================
 24178                                  
 24179                                  GETBUF:
 24180                                  	mov	ah,Std_Con_String_Input ; 0Ah
 24181                                  	mov	dx,COMBUF
 24182                                  	mov	cx,2
 24183                                  	call	SETINITFLAG
 24184                                  	int	21h		; Get input line
 24185                                  	xor	cx,cx
 24186                                  	call	SETINITFLAG
 24187                                  	call	CRLF2
 24188                                  	mov	si,COMBUF+2
 24189                                  	cmp	byte [si],0Dh	; Check if new time entered
 24190                                  	jz	short P_TSEP_JRETN
 24191                                  
 24192                                  ; =============== S U B	R O U T	I N E =======================================
 24193                                  
 24194                                  INLINE:
 24195                                  	call	GETNUM		; Get one or two digit number
 24196                                  	jnb	short INLINE1
 24197                                  	retn
 24198                                  INLINE1:
 24199                                  	mov	dh,ah		; Put in position
 24200                                  	lodsb
 24201                                  	cmp	al,bl
 24202                                  	jz	short NEXT
 24203                                  	cmp	al,bh
 24204                                  	jz	short NEXT
 24205                                  	dec	si		; Clears zero flag
 24206                                  	clc
 24207                                  	mov	dl,0
 24208                                  	retn			; Time may have only an hour specified
 24209                                  NEXT:
 24210                                  	call	GETNUM
 24211                                  	mov	dl,ah		; Put in position
 24212                                  INLINE_RETN:
 24213                                  	retn
 24214                                  
 24215                                  ;============================================================================
 24216                                  ; TCODE5.ASM, MSDOS 2.11 (& MSDOS 3.3), 1983 (& 1987)
 24217                                  ;============================================================================
 24218                                  ; 05/10/2018 - Retro DOS v3.0
 24219                                  
 24220                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2370h
 24221                                  
 24222                                  ; =============== S U B	R O U T	I N E =======================================
 24223                                  
 24224                                  GETNUM:
 24225                                  	call	INDIG
 24226                                  	jb	short INLINE_RETN
 24227                                  	mov	ah,al		; Save first digit
 24228                                  	call	INDIG		; Another digit?
 24229                                  	jb	short OKRET
 24230                                  	aad			; Convert unpacked BCD to decimal
 24231                                  	mov	ah,al
 24232                                  OKRET:
 24233                                  	or	al,1
 24234                                  GETNUM_RETN:
 24235                                  	retn
 24236                                  
 24237                                  ; =============== S U B	R O U T	I N E =======================================
 24238                                  
 24239                                  INDIG:
 24240                                  	mov	al,[si]
 24241                                  	sub	al,'0'
 24242                                  	jc	short GETNUM_RETN
 24243                                  	cmp	al,10
 24244                                  	cmc
 24245                                  	jc	short GETNUM_RETN
 24246                                  	inc	si
 24247                                  	retn
 24248                                  
 24249                                  ; =============== S U B	R O U T	I N E =======================================
 24250                                  
 24251                                  OUT2:				; Output binary number as two ASCII digits
 24252                                  	aam			; Convert binary to unpacked BCD
 24253                                  	xchg	al,ah
 24254                                  	or	ax,3030h	; Add "0" bias to both digits
 24255                                  	cmp	al,'0'		; Is MSD zero?
 24256                                  	jnz	short NOSUP
 24257                                  	sub	al,bh		; Suppress leading zero if enabled
 24258                                  NOSUP:
 24259                                  	mov	bh,0		; Disable zero suppression
 24260                                  	stosw
 24261                                  	retn
 24262                                  
 24263                                  ; ---------------------------------------------------------------------------
 24264                                  	;stosb
 24265                                  	;retn
 24266                                  
 24267                                  ;============================================================================
 24268                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 24269                                  ;============================================================================
 24270                                  ; 03/10/2018 - Retro DOS v3.0
 24271                                  
 24272                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23A3h
 24273                                  
 24274                                  ; =============== S U B	R O U T	I N E =======================================
 24275                                  
 24276                                  ; Set the special flag in the INIT flag to the value in CX.
 24277                                  
 24278                                  SETINITFLAG:
 24279                                  	mov	ds,[RESSEG]
 24280                                  	;and	byte [INITFLAG],0FDh
 24281                                  	and	byte [INITFLAG],~INITSPECIAL
 24282                                  	or	byte [INITFLAG],cl
 24283                                  	push	cs
 24284                                  	pop	ds
 24285                                  	retn
 24286                                  
 24287                                  ; =============== S U B	R O U T	I N E =======================================
 24288                                  
 24289                                  PIPEOFF:
 24290                                  	push	ds
 24291                                  	push	ax
 24292                                  	mov	ds,[cs:RESSEG]
 24293                                  	xor	al,al
 24294                                  	xchg	al,byte [PIPEFLAG]
 24295                                  	or	al,al
 24296                                  	jz	short PIPEOFFDONE
 24297                                  	shr	byte [ECHOFLAG],1
 24298                                  PIPEOFFDONE:
 24299                                  	pop	ax
 24300                                  	pop	ds
 24301                                  	retn
 24302                                  
 24303                                  ; ---------------------------------------------------------------------------
 24304                                  	;db    0,0,0,0,0
 24305                                  	;times 5 db 0
 24306                                  
 24307                                  align 16
 24308                                  
 24309                                  %endif
 24310                                  
 24311                                  ;============================================================================
 24312                                  ; PARSE2.ASM, MSDOS 6.0, 1991
 24313                                  ;============================================================================
 24314                                  ; 03/10/2018 - Retro DOS v3.0
 24315                                  
 24316                                  ;----------------------------------------------------------------------------
 24317                                  ; PARSELINE takes an MSDOS command line and maps it into a UNIX-style
 24318                                  ; argv[argvcnt] array. The most important difference between this array and
 24319                                  ; the tradition UNIX format is the extra cparse information included with
 24320                                  ; each argument element.
 24321                                  ;---------------
 24322                                  ; ENTRY:
 24323                                  ;	BL	     special delimiter for cparse -- not implemented)
 24324                                  ;---------------
 24325                                  ; EXIT:
 24326                                  ;	CF	    set if error
 24327                                  ;	AL	    error code (carry set). Note AH clobbered in any event.
 24328                                  ;	argv[]	    array of cparse flags and pointers to arguments
 24329                                  ;	argvcnt     argument count
 24330                                  ;---------------
 24331                                  ; NOTE(S):
 24332                                  ;	*   BL (special delimiter) is ignored, for now (set to space).
 24333                                  ;	*   Parseflags record contains cparse flags, as follows:
 24334                                  ;		sw_flag 	--	was this arg a switch?
 24335                                  ;		wildcard	--	whether or not it contained a * or ?
 24336                                  ;		path_sep	--	maybe it was a pathname
 24337                                  ;		unused		--	for future expansion
 24338                                  ;		special_delim	--	was there an initial special delimiter?
 24339                                  ;	*   argv[] and argvcnt are undefined if CF/AL indicates an error.
 24340                                  ;	*   Relationship between input, cparse output, and comtail can be
 24341                                  ;	    found in the following chart. Despite the claim of the cparse
 24342                                  ;	    documentation that, "Token buffer always starts d: for non switch
 24343                                  ;	    tokens", such is not the case (see column two, row two).
 24344                                  ;	    Similarly, [STARTEL] is not null when the command line is one of
 24345                                  ;	    the forms, "d:", "d:\", or "d:/". In fact, *STARTEL (i.e., what
 24346                                  ;	    STARTEL addresses) will be null. This is clearly just a
 24347                                  ;	    documentation error.
 24348                                  ;	*   cparse also returns a switch code in BP for each switch it
 24349                                  ;	    recognizes on the command line.
 24350                                  ;	*   arglen for each token does NOT include the terminating null.
 24351                                  ;	*   Finally, note that interesting constructions like 'foodir/*.exe'
 24352                                  ;	    parse as three separate tokens, and the asterisk is NOT a wildcard.
 24353                                  ;	    For example, 'for %i in (foodir/*.exe) do echo %i' will first
 24354                                  ;	    echo 'foodir', then '*', then '.exe'. Using cparse for command-
 24355                                  ;	    line parsing may result in slightly different behavior than
 24356                                  ;	    previously observed with the old COMMAND.COM command-line parser.
 24357                                  ;
 24358                                  ;	    Input		    Cparse		Command Line (80H)
 24359                                  ;	\alan\foo.bat		c:\alan\foo.bat 	\alan\foo.bat
 24360                                  ;	alan\foo.bat		alan\foo.bat		alan\foo.bat
 24361                                  ;	foo.bat 		foo.bat 		foo.bat
 24362                                  ;	c:\alan\foo.bat 	c:\alan\foo.bat 	c:\alan\foo.bat
 24363                                  ;	c:alan\foo.bat		c:alan\foo.bat		c:alan\foo.bat
 24364                                  ;	c:foo.bat		c:foo.bat		c:foo.bat
 24365                                  
 24366                                  ; =============== S U B	R O U T	I N E =======================================
 24367                                  
 24368                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23D0h
 24369                                  
 24370                                  ; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24371                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 319Bh
 24372                                  
 24373                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 24374                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3745h
 24375                                  
 24376                                  ; 27/07/2024 - Retro DOS v4.0-v4.1-v4.2-v5.0 COMMAND.COM (PARSELINE)
 24377                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 35F5h
 24378                                  
 24379                                  PARSELINE:
 24380 00003035 50                      	push	ax			; most of these are clobbered
 24381 00003036 53                      	push	bx			; by cparse...
 24382 00003037 51                      	push	cx
 24383 00003038 52                      	push	dx
 24384 00003039 57                      	push	di
 24385 0000303A 56                      	push	si
 24386 0000303B 9C                      	pushf
 24387                                  	;mov	byte [cpyflag],0  ; Turn "CPARSE called from COPY flag" off
 24388 0000303C C706[7A93]FFFF          	mov	word [LASTARG],-1 ; last argument at which to accumulate
 24389 00003042 31C0                    	xor	ax,ax
 24390                                  	;;mov	cx,1348
 24391                                  	; 27/07/2024
 24392                                  	;mov	cx,1092  ; PCDOS 7.1 COMMAND.COM
 24393 00003044 B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092
 24394 00003047 A2[198C]                	mov	[cpyflag],al ; 0 ; 27/07/2024
 24395 0000304A BF[B48D]                	mov	di,ARG
 24396 0000304D F3AA                    	rep	stosb
 24397                                  	;mov	word [ARGBUF_PTR],ARG_ARGBUF
 24398 0000304F C706[F892][7890]        	mov	word [ARGBUF_PTR],ARG+ARG_UNIT.argbuf
 24399                                  	;mov	word [ARG_ARGSWINFO],0 ; switch information, and info to date
 24400                                  	;mov	word [ARG+ARG_UNIT.argswinfo],0
 24401 00003055 A3[7690]                	mov	[ARG+ARG_UNIT.argswinfo],ax ; 0 ; 27/07/2024
 24402                                  	;mov	word [ARG_ARGVCNT],0 ; initialize argvcnt/argv[]
 24403                                  	;mov	word [ARG+ARG_UNIT.argvcnt],0
 24404 00003058 A3[7490]                	mov	[ARG+ARG_UNIT.argvcnt],ax ; 0 ; 27/07/2024 
 24405 0000305B BE[0689]                	mov	si,COMBUF+2	; prescan leaves cooked input in combuf
 24406                                  
 24407                                  ; This next section of code (up to pcont:)  makes sure that si is set up for
 24408                                  ; parsing. It should point at COMBUF if FORFLAG is set and arg.argforcombuf
 24409                                  ; otherwise. This is done so that commands can get arg pointers into their
 24410                                  ; original command line (or an exact copy of it) in arg_ocomptr.
 24411                                  ; Arg.argforcombuf is used so that the for loop processor will always be able
 24412                                  ; to get a hold of its original command line; even after COMBUF is blasted by
 24413                                  ; the command to be repeated or the transient part of command has been
 24414                                  ; reloaded.
 24415                                  
 24416 0000305E 1E                      	push	ds
 24417 0000305F 8E1E[A58A]              	mov	ds,[RESSEG]
 24418                                  	;cmp	byte [ForFlag],0
 24419 00003063 3806[9401]              	cmp	[ForFlag],al ; 0 ; 27/07/2024
 24420 00003067 1F                      	pop	ds
 24421 00003068 7510                    	jnz	short PCONT
 24422                                  	;mov	di,ARG_ARGFORCOMBUF
 24423 0000306A BF[7891]                	mov	di,ARG+ARG_UNIT.argforcombuf
 24424 0000306D 30ED                    	xor	ch,ch
 24425 0000306F 8A0E[0589]              	mov	cl,[COMBUF+1]
 24426 00003073 FEC1                    	inc	cl
 24427 00003075 F3A4                    	rep	movsb
 24428                                  	;mov	si,ARG_ARGFORCOMBUF
 24429 00003077 BE[7891]                	mov	si,ARG+ARG_UNIT.argforcombuf
 24430                                  PCONT:
 24431 0000307A BF[FA92]                	mov	di,TPBUF	; destination is temporary token buffer
 24432 0000307D B320                    	mov	bl,' '		; no special delimiter, for now
 24433                                  PARSELOOP:
 24434 0000307F 8936[7C93]              	mov	[COMPTR],si	; save ptr into original command buffer
 24435 00003083 31ED                    	xor	bp,bp		; switch information put here by cparse
 24436 00003085 C606[968D]00            	mov	byte [expand_star],0 ; don't expand *'s to ?'s
 24437 0000308A E851F5                  	call	scanoff		; skip leading blanks...
 24438 0000308D E8C610                  	call	cparse		; byte off a token (args in SI, DI, BL)
 24439 00003090 730B                    	jnb	short MORE_PRSE
 24440 00003092 09ED                    	or	bp,bp		; Check for trailing switch character
 24441 00003094 7403                    	jz	short PARSEDONE
 24442 00003096 E81700                  	call	newarg		; We hit CR but BP is non-zero. The
 24443                                  				;   typical cause of this is that a
 24444                                  				;   switch char IMMEDIATELY preceeds
 24445                                  				;   the CR. We have an argument, but it
 24446                                  				;   is sort of an error.
 24447                                  	;jmp	short PARSEDONE	; We're done (found the CR).
 24448                                  	; 01/03/2023
 24449                                  PARSEDONE:
 24450 00003099 9D                      	popf
 24451 0000309A F8                      	clc
 24452 0000309B EB0C                    	jmp	short PARSE_EXIT
 24453                                  
 24454                                  MORE_PRSE:
 24455 0000309D C606[198C]02            	mov	byte [cpyflag],2
 24456                                  				; tell CPARSE that 1st token is done
 24457 000030A2 E80B00                  	call	newarg		; add to argv array (CX has char count)
 24458 000030A5 73D8                    	jnb	short PARSELOOP	; was everything OK?
 24459                                  	;jmp	short PARSE_ERROR ; NO, it wasn't -- bug out (CF set)
 24460                                  	; 01/03/2023
 24461                                  ;PARSEDONE:
 24462                                  	;popf
 24463                                  	;clc
 24464                                  	;jmp	short PARSE_EXIT
 24465                                  
 24466                                  PARSE_ERROR:			; error entry (er, exit) point
 24467 000030A7 9D                      	popf
 24468 000030A8 F9                      	stc
 24469                                  PARSE_EXIT:			; depend on not changing CF
 24470 000030A9 5E                      	pop	si
 24471 000030AA 5F                      	pop	di
 24472 000030AB 5A                      	pop	dx
 24473 000030AC 59                      	pop	cx
 24474 000030AD 5B                      	pop	bx
 24475 000030AE 58                      	pop	ax
 24476 000030AF C3                      	retn
 24477                                  
 24478                                  ; =============== S U B	R O U T	I N E =======================================
 24479                                  
 24480                                  ; NEWARG adds the supplied argstring and cparse data to arg.argv[].
 24481                                  ;
 24482                                  ; ENTRY:
 24483                                  ;   BH			argflags
 24484                                  ;   CX			character count in argstring
 24485                                  ;   DI			pointer to argstring
 24486                                  ;   comptr		ptr to starting loc of current token in original command
 24487                                  ;   [STARTEL]		cparse's answer to where the last element starts
 24488                                  ; EXIT:
 24489                                  ;   argbufptr		points to next free section of argbuffer
 24490                                  ;   arg.argbuf		contains null-terminated argument strings
 24491                                  ;   arg.argvcnt 	argument count
 24492                                  ;   arg.argv[]		array of flags and pointers
 24493                                  ;   arg.arg_ocomptr	ptr to starting loc of current token in original command
 24494                                  ;   CF			set if error
 24495                                  ;   AL			carry set:  error code; otherwise, zero
 24496                                  
 24497                                  	; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24498                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 24499                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM 
 24500                                  	;	     & Retro DOS v4.1 COMMAND.COM (2024 modification)
 24501                                  newarg:
 24502 000030B0 53                      	push	bx
 24503 000030B1 51                      	push	cx
 24504 000030B2 52                      	push	dx
 24505 000030B3 57                      	push	di
 24506 000030B4 56                      	push	si
 24507 000030B5 9C                      	pushf
 24508 000030B6 E86200                  	call	arg_switch		; if it's a switch, record switch info
 24509                                  					; LEAVE SWITCH ON COMMAND LINE!!
 24510                                  	;;;jc	short newarg_done 	; previous arg's switches -- and leave
 24511                                  
 24512                                  	;cmp	word [ARG_ARGVCNT],64	; check to ensure we've not
 24513 000030B9 833E[7490]40            	cmp	word [ARG+ARG_UNIT.argvcnt],ARGMAX ; 64
 24514 000030BE 7D50                    	jge	short to_many_args	; exceeded array limits
 24515 000030C0 88FE                    	mov	dh,bh			
 24516                                  	;mov	bx,[ARG_ARGVCNT]	; save argflags	
 24517 000030C2 8B1E[7490]              	mov	bx,[ARG+ARG_UNIT.argvcnt] ; argv[argvcnt++] = arg data
 24518                                  	;inc	word [ARG_ARGVCNT]
 24519 000030C6 FF06[7490]              	inc	word [ARG+ARG_UNIT.argvcnt]
 24520                                  	;mov	ax,ARG_ARGV
 24521 000030CA B8[B48D]                	mov	ax,ARG+ARG_UNIT.argv
 24522 000030CD E87E00                  	call	argv_calc		; convert offset to pointer
 24523                                  	;mov	[BX].argsw_word,0 	; no switch information, yet...
 24524                                  	;mov	word [bx+7],0
 24525 000030D0 C747070000              	mov	word [bx+ARGV_ELE.argsw_word],0
 24526                                  	;mov	[BX].arglen,CX		; argv[argvcnt].arglen = arg length
 24527                                  	;mov	[bx+5],cx
 24528 000030D5 894F05                  	mov	[bx+ARGV_ELE.arglen],cx 
 24529                                  	;mov	[BX].argflags,DH 	; argv[argvcnt].argflags = cparse flags
 24530                                  	;mov	[bx+2],dh
 24531 000030D8 887702                  	mov	[bx+ARGV_ELE.argflags],dh
 24532 000030DB 8B36[F892]              	mov	si,[ARGBUF_PTR]
 24533                                  	;mov	[BX].argpointer,SI 	; argv[argvcnt].argpointer = [argbufptr]
 24534                                  	;mov	[bx+ARGV_ELE.argpointer],si
 24535 000030DF 8937                    	mov	[bx],si			
 24536 000030E1 0336[5B8D]              	add	si,[STARTEL]		; save startel from new location
 24537 000030E5 29FE                    	sub	si,di			; form pointer into argbuf
 24538                                  	;mov	[BX].argstartel,SI ; argv[argvcnt].argstartel = new [STARTEL]
 24539                                  	;mov	[bx+3],si
 24540 000030E7 897703                  	mov	[bx+ARGV_ELE.argstartel],si
 24541 000030EA 8B36[7C93]              	mov	si,[COMPTR]
 24542                                  	;mov	[BX].arg_ocomptr,si ; arg_ocomptr = ptr into original com line
 24543                                  	;mov	[bx+9],si
 24544 000030EE 897709                  	mov	[bx+ARGV_ELE.arg_ocomptr],si
 24545 000030F1 89FE                    	mov	si,di			; now save argstring in argbuffer
 24546 000030F3 8B3E[F892]              	mov	di,[ARGBUF_PTR]		; load the argbuf pointer and make
 24547                                  
 24548                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 24549                                  ; PCDOS 7.1 COMMAND.COM
 24550                                  %if 0
 24551                                  	add	di,cx			; sure we're not about to run off
 24552                                  	;cmp	DI,OFFSET TRANGROUP:arg.argbuf+ARGBLEN-1
 24553                                  	;;cmp	di,ARG_ARGBUF+255
 24554                                  	;cmp	di,ARG+ARG_UNIT.argbuf+127
 24555                                  	cmp	di,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 24556                                  	jge	short buf_oflow		; the end of the buffer (plus null byte)
 24557                                  	sub	di,cx
 24558                                  %else
 24559                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 24560                                  	;mov	bx,ARG_ARGBUF+127
 24561 000030F7 BB[F790]                	mov	bx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 24562 000030FA 29FB                    	sub	bx,di	; sure we're not about to run off
 24563 000030FC 39CB                    	cmp	bx,cx
 24564 000030FE 7302                    	jnb	short newarg_@
 24565 00003100 89D9                    	mov	cx,bx	
 24566                                  %endif
 24567                                  
 24568                                  newarg_@:	; 27/07/2024
 24569 00003102 FC                      	cld
 24570 00003103 F3A4                    	rep	movsb
 24571 00003105 B000                    	mov	al,ANULL ; 0		; tack a null byte on the end
 24572 00003107 AA                      	stosb
 24573 00003108 893E[F892]              	mov	[ARGBUF_PTR],di		; update argbufptr after copy
 24574                                  newarg_done:
 24575 0000310C 9D                      	popf
 24576 0000310D F8                      	clc
 24577 0000310E EB05                    	jmp	short newarg_exit
 24578                                  
 24579                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 24580                                  ; PCDOS 7.1 COMMAND.COM
 24581                                  %if 0
 24582                                  to_many_args:
 24583                                  	mov	ax,1
 24584                                  	jmp	short newarg_error
 24585                                  buf_oflow:
 24586                                  	mov	ax,2
 24587                                  %else
 24588                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 24589                                  ;buf_oflow:
 24590                                  ;	; 27/07/2024
 24591                                  ;	; PCDOS 7.1 COMMAND.COM
 24592                                  ;	sub	di,cx
 24593                                  ;	;mov	cx,ARG_ARGBUF+7Fh
 24594                                  ;	mov	cx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 24595                                  ;	sub	cx,di
 24596                                  ;	jmp     short newarg_@
 24597                                  to_many_args:
 24598 00003110 B80100                  	mov	ax,1
 24599                                  %endif
 24600                                  
 24601                                  newarg_error:
 24602 00003113 9D                      	popf
 24603 00003114 F9                      	stc
 24604                                  newarg_exit:
 24605 00003115 5E                      	pop	si
 24606 00003116 5F                      	pop	di
 24607 00003117 5A                      	pop	dx
 24608 00003118 59                      	pop	cx
 24609 00003119 5B                      	pop	bx
 24610 0000311A C3                      	retn
 24611                                  
 24612                                  ; =============== S U B	R O U T	I N E =======================================
 24613                                  
 24614                                  ; ARG_SWITCH decides if an argument might really be a switch. In the
 24615                                  ; event that it is, and we can recognize
 24616                                  ;
 24617                                  ; ENTRY:
 24618                                  ;   As in <newarg>.
 24619                                  ; EXIT:
 24620                                  ;   CF	    --	    clear (wasn't a switch); set (was a switch)
 24621                                  ; NOTE(S):
 24622                                  ;   *	The mechanism mapping a switch into a bit-value depends entirely
 24623                                  ;	on the order of definition in the <switch_list> variable and the
 24624                                  ;	values chosen to define the bits in CMDT:COMEQU.ASM. Change either
 24625                                  ;	<switch_list> or the definitions in CMDT:COMEQU.ASM -- and rewrite
 24626                                  ;	this mechanism. This code taken from CMDT:TCODE.ASM.
 24627                                  ;   *	The <switch_list> declared below is redundant to one declared in
 24628                                  ;	TDATA.ASM, and used in TCODE.ASM.
 24629                                  ;   *	An ugly routine.
 24630                                  
 24631                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 24632                                  arg_switch:
 24633 0000311B 50                      	push	ax
 24634 0000311C 53                      	push	bx
 24635 0000311D 51                      	push	cx
 24636 0000311E 57                      	push	di
 24637 0000311F 9C                      	pushf
 24638 00003120 F6C701                  	test	bh,1 ; sw_flag		; is it a switch? (preserve flag word)
 24639 00003123 741C                    	jz	short arg_no_switch0
 24640 00003125 833E[7A93]FF            	cmp	word [LASTARG],-1 	; have we encountered any REAL args yet?
 24641 0000312A 741B                    	je	short arg_no_switch1 	; no, so leading switches don't matter
 24642 0000312C 8B1E[7A93]              	mov	bx,[LASTARG]		; yes, add switch info to last REAL arg
 24643                                  	;mov	ax,offset TRANGROUP:arg.argv
 24644                                  	;mov	ax,ARG_ARGV
 24645 00003130 B8[B48D]                	mov	ax,ARG+ARG_UNIT.argv  ; ARG+0
 24646 00003133 E81800                  	call	argv_calc
 24647                                  	;or	[BX].argsw_word,BP
 24648                                  	;or	[bx+7],bp
 24649 00003136 096F07                  	or	[bx+ARGV_ELE.argsw_word],bp
 24650                                  	;or	arg.argswinfo,BP
 24651                                  	;or	[ARG_ARGSWINFO],bp
 24652 00003139 092E[7690]              	or	[ARG+ARG_UNIT.argswinfo],bp
 24653                                  arg_yes_switch:
 24654 0000313D 9D                      	popf
 24655 0000313E F9                      	stc
 24656 0000313F EB08                    	jmp	short arg_switch_exit
 24657                                  
 24658                                  arg_no_switch0:
 24659                                  	;mov	ax,[ARG_ARGVCNT]
 24660 00003141 A1[7490]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 24661 00003144 A3[7A93]                	mov	[LASTARG],ax
 24662                                  arg_no_switch1:
 24663 00003147 9D                      	popf
 24664 00003148 F8                      	clc
 24665                                  arg_switch_exit:
 24666 00003149 5F                      	pop	di
 24667 0000314A 59                      	pop	cx
 24668 0000314B 5B                      	pop	bx
 24669 0000314C 58                      	pop	ax
 24670 0000314D C3                      	retn
 24671                                  
 24672                                  ; =============== S U B	R O U T	I N E =======================================
 24673                                  
 24674                                  ; ARGV_CALC maps an array index into a byte-offset from the base of
 24675                                  ; the supplied array.  Method used for computing the address is:
 24676                                  ;	Array Index * Array Elt Size + Base Addr = Elt Addr
 24677                                  ; ENTRY:
 24678                                  ;   AX	    --	    base of array
 24679                                  ;   BX	    --	    array index
 24680                                  ; EXIT:
 24681                                  ;   BX	    --	    byte offset
 24682                                  
 24683                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 24684                                  argv_calc:
 24685 0000314E 50                      	push	ax		; Save base
 24686 0000314F 88D8                    	mov	al,bl		; al = array index
 24687                                  	;mov	bl,11
 24688 00003151 B30B                    	mov	bl,ARGV_ELE.SIZE ; bl = size of an argv element
 24689 00003153 F6E3                    	mul	bl		; ax = base offset
 24690 00003155 5B                      	pop	bx		; Get base
 24691 00003156 01D8                    	add	ax,bx		; Add in base offset
 24692 00003158 93                      	xchg	ax,bx		; Restore ax and put byte offset in bx
 24693 00003159 C3                      	retn
 24694                                  
 24695                                  ; ---------------------------------------------------------------------------
 24696                                  	
 24697                                  	;db 0Ah dup(0)
 24698                                  	;times 10 db 0
 24699                                  
 24700 0000315A 90<rep 6h>              align 16
 24701                                  
 24702                                  ;============================================================================
 24703                                  ; PATH1.ASM, MSDOS 6.0, 1991
 24704                                  ;============================================================================
 24705                                  ; 03/10/2018 - Retro DOS v3.0
 24706                                  
 24707                                  ;----------------------------------------------------------------------------
 24708                                  ;    PATH.ASM contains the routines to perform pathname incovation. Path and
 24709                                  ;    Parse share a temporary buffer and argv[] definitions. <Path_Search>,
 24710                                  ;    given a pathname, attempts to find a corresponding executable or batch
 24711                                  ;    file on disk. Directories specified in the user's search path will be
 24712                                  ;    searched for a matching file, if a match is not found in the current
 24713                                  ;    directory and if the pathname is actually only an MSDOS filename.
 24714                                  ;    <Path_Search> assumes that the parsed command name can be found in
 24715                                  ;    argv[0] -- in other words, <Parseline> should be executed prior to
 24716                                  ;    <Path_Search>. Alternatively, the command name and appropriate
 24717                                  ;    information could be placed in argv[0], or <Path_Search> could be
 24718                                  ;    (easily) modified to make no assumptions about where its input is found.
 24719                                  ;    Please find enclosed yet another important routine, <Save_Args>, which
 24720                                  ;    places the entire arg/argv[]/argbuf structure on a piece of newly
 24721                                  ;    allocated memory. This is handy for for-loop processing, and anything
 24722                                  ;    else that wants to save the whole shebang and then process other command
 24723                                  ;    lines.
 24724                                  ;
 24725                                  ; Alan L, OS/MSDOS				    August 15, 1983
 24726                                  ;
 24727                                  ; ENTRY:
 24728                                  ;   <Path_Search>:	    argv[0].
 24729                                  ;   <Save_Args>:	    bytes to allocate in addition to arg structure
 24730                                  ; EXIT:
 24731                                  ;   <Path_Search>:	    success flag, best pathname match in EXECPATH.
 24732                                  ;   <Save_Args>:	    success flag, segment address of new memory
 24733                                  ; NOTE(S):
 24734                                  ;   *	<Argv_calc> handily turns an array index into an absolute pointer.
 24735                                  ;	The computation depends on the size of an argv[] element (arg_ele).
 24736                                  ;   *	<Parseline> calls <cparse> for chunks of the command line. <Cparse>
 24737                                  ;	does not function as specified; see <Parseline> for more details.
 24738                                  ;   *	<Parseline> now knows about the flags the internals of COMMAND.COM
 24739                                  ;	need to know about. This extra information is stored in a switch_flag
 24740                                  ;	word with each command-line argument; the switches themselves will not
 24741                                  ;	appear in the resulting arg structure.
 24742                                  ;   *	With the exception of CARRY, flags are generally preserved across calls.
 24743                                  ;----------------------------------------------------------------------------
 24744                                  
 24745                                  ; =============== S U B	R O U T	I N E =======================================
 24746                                  
 24747                                  ; PATH_SEARCH tries to find the file it's given, somewhere. An initial value
 24748                                  ; of *argv[0].argstartel == 0 implies that there is no command (empty line
 24749                                  ; or 'd:' or 'd:/'). This check is done in strip; otherwise, strip formats
 24750                                  ; the filename/pathname into tpbuf. Search(tpbuf) is executed to see if we
 24751                                  ; have a match, either in the current working directory if we were handed
 24752                                  ; a filename, or in the specified directory, given a pathname. If this call
 24753                                  ; fails, and we were given a pathname, then Path_Search fails. Otherwise,
 24754                                  ; Path_Crunch is repeatedly invoked on tpbuf[STARTEL] (if there's a drive
 24755                                  ; prefix, we want to skip it) for each pathstring in userpath. Success on
 24756                                  ; either the first invocation of search or on one of the succeeding calls
 24757                                  ; sets up the appropriate information for copying the successful pathname
 24758                                  ; prefix (if any) into the result buffer, followed by the successful filename
 24759                                  ; match (from [search_best_buf]). The result is returned in in EXECPATH.
 24760                                  ;
 24761                                  ; ENTRY:
 24762                                  ;   argv[0]		--	command name and associated information
 24763                                  ; EXIT:
 24764                                  ;   AX			--	non-zero indicates type of file found
 24765                                  ;   EXECPATH		--	successful pathname (AX non-zero)
 24766                                  ; NOTE(S):
 24767                                  ;   1)	Uses the temporary buffer, tpbuf, from the parse routines.
 24768                                  ;   2)	Some files are more equal than others.	See search: for rankings.
 24769                                  ;   3)	Path_Search terminates as soon as a call to search succeeds, even
 24770                                  ;	if search returns an .exe or .bat.
 24771                                  ;   5)	Clobbers dma address.
 24772                                  
 24773                                  PBUFLEN 	EQU	128		; length of EXECPATH
 24774                                  PATH_SEP_CHAR	EQU	';'
 24775                                  
 24776                                  ;parseflags RECORD special_delim:1, unused:4, path_sep:1, wildcard:1, sw_flag:1
 24777                                  
 24778                                  	;special_delim equ 128
 24779                                  	;path_sep equ 4
 24780                                  	;wildcard equ 2
 24781                                  	;sw_flag  equ 1
 24782                                  
 24783                                  ;----------------------------------------------------------------------------
 24784                                  
 24785                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2510h
 24786                                  
 24787                                  ; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24788                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 32D1h
 24789                                  
 24790                                  path_search:
 24791 00003160 53                      	push	bx
 24792 00003161 51                      	push	cx
 24793 00003162 52                      	push	dx		; could use a "stack 'em" instruction
 24794 00003163 56                      	push	si
 24795 00003164 57                      	push	di
 24796 00003165 55                      	push	bp
 24797 00003166 9C                      	pushf
 24798                                  
 24799                                  	;test	ds:arg.argv[0].argflags, (MASK wildcard) + (MASK sw_flag)
 24800                                  	;test	byte [ARGV0_ARG_FLAGS],3
 24801 00003167 F606[B68D]03            	test	byte [ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag
 24802 0000316C 7403                    	jz	short path_search_ok
 24803                                  path_failure_jmp:
 24804 0000316E E9C100                  	jmp	path_failure	; ambiguous commands not allowed
 24805                                  
 24806                                  path_search_ok:
 24807 00003171 E85201                  	call	STORE_PCHAR	; figure out the pathname separator
 24808 00003174 BA[7E93]                	mov	dx,FBUF		; clobber old dma value with
 24809 00003177 B8001A                  	mov	ax,Set_DMA*256 ; 1A00h ; a pointer to our dma buffer
 24810 0000317A CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 24811                                  			; DS:DX	-> disk	transfer buffer
 24812 0000317C 06                      	push	es
 24813 0000317D E88DF1                  	call	find_path	; get a handle (ES:DI) on user path
 24814 00003180 8C06[A993]              	mov	[pathinfo+0],es	; and squirrel it away
 24815 00003184 893E[AB93]              	mov	[pathinfo+2],di	; "old" pathstring pointer
 24816 00003188 893E[AD93]              	mov	[pathinfo+4],di	; "new" pathstring pointer
 24817 0000318C 07                      	pop	es
 24818                                  	
 24819 0000318D BB8000                  	mov	bx,PBUFLEN ; 128 ; copy/format argv[0] into temp buffer
 24820 00003190 BE[CD89]                	mov	si,EXECPATH
 24821 00003193 E88002                  	call	STRIP
 24822 00003196 72D6                    	jc	short path_failure_jmp ; if possible, of course
 24823                                  		
 24824 00003198 89F2                    	mov	dx,si		; search (EXECPATH, error_message)
 24825 0000319A C706[FE93][587F]        	mov	word [search_error],baddrv_ptr
 24826 000031A0 E89F01                  	call	PSEARCH		; must do at least one search
 24827 000031A3 09C0                    	or	ax,ax		; find anything?
 24828 000031A5 7469                    	jz	short path_noinit
 24829                                  				; failure ... search farther
 24830 000031A7 89C5                    	mov	bp,ax		; success... save filetype code
 24831 000031A9 BF[CD89]                	mov	di,EXECPATH
 24832                                  	;mov	si,ds:arg.argv[0].argpointer
 24833                                  	;mov	si,[ARG_ARGV]
 24834 000031AC 8B36[B48D]              	mov	si,[ARG+ARGV_ELE.argpointer]
 24835                                  	;mov	cx,ds:arg.argv[0].argstartel
 24836                                  	;mov	cx,[ARGV0_ARGSTARTEL]
 24837 000031B0 8B0E[B78D]              	mov	cx,[ARG+ARGV_ELE.argstartel]
 24838 000031B4 29F1                    	sub	cx,si		; compute prefix bytes to copy
 24839                                  
 24840                                  ; We have the number of bytes in the prefix (up to the final component).
 24841                                  ; We need to form the complete pathname including leading drive and current
 24842                                  ; directory.
 24843                                  ;
 24844                                  ; Is there a drive letter present?
 24845                                  
 24846 000031B6 B43A                    	mov	ah,':'
 24847 000031B8 83F902                  	cmp	cx,2		; room for drive letter?
 24848 000031BB 7205                    	jb	short adddrive	; no, stick it in
 24849 000031BD 386401                  	cmp	[si+1],	ah	; colon present?
 24850 000031C0 7408                    	je	short movedrive	; yes, just move it
 24851                                  adddrive:
 24852 000031C2 A0[B98A]                	mov	al,[CURDRV]	; get current drive
 24853 000031C5 0441                    	add	al,'A'		; convert to uppercase letter
 24854 000031C7 AB                      	stosw			; store d:
 24855 000031C8 EB05                    	jmp	short checkpath
 24856                                  
 24857                                  movedrive:
 24858 000031CA AD                      	lodsw			; move d:
 24859 000031CB AB                      	stosw
 24860 000031CC 83E902                  	sub	cx,2		; 2 bytes less to move
 24861                                  checkpath:
 24862 000031CF 0C20                    	or	al,20h
 24863 000031D1 88C2                    	mov	dl,al
 24864                                  	;sub	dl,60h
 24865 000031D3 80EA60                  	sub	dl,'a'-1	; convert to 1-based for current dir
 24866                                  
 24867                                  ; Stick in beginning path char
 24868                                  
 24869 000031D6 A0[AF93]                	mov	al,[psep_char]
 24870 000031D9 AA                      	stosb
 24871                                  
 24872                                  ; Is there a leading /? If so, then no current dir copy is necessary.
 24873                                  ; Otherwise, get current dir for DL.
 24874                                  
 24875 000031DA 83F901                  	cmp	cx,1		; is there room for path char?
 24876 000031DD 720A                    	jb	short addpath	; no, go add path
 24877 000031DF AC                      	lodsb
 24878 000031E0 49                      	dec	cx
 24879 000031E1 3A06[AF93]              	cmp	al,[psep_char]	; is there a path separator?
 24880 000031E5 741C                    	je	short movepath	; yes, go move remainder of path
 24881 000031E7 41                      	inc	cx
 24882 000031E8 4E                      	dec	si		; undo the lodsb
 24883                                  addpath:
 24884 000031E9 56                      	push	si
 24885 000031EA 89FE                    	mov	si,di		; remainder of buffer
 24886 000031EC B80047                  	mov	ax,Current_Dir*256 ; 4700h
 24887 000031EF CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 24888                                  			; DL = drive (0=default,1=A,etc.)
 24889                                  			; DS:SI	points to 64-byte buffer area
 24890                                  
 24891                                  ; The previous current dir will succeed a previous find_first already worked.
 24892                                  ;
 24893                                  ; Find end of string.
 24894                                  
 24895 000031F1 89F7                    	mov	di,si
 24896 000031F3 5E                      	pop	si
 24897 000031F4 A0[AF93]                	mov	al,[psep_char]
 24898 000031F7 803D00                  	cmp	byte [di],0	; root (empty dir string)?
 24899 000031FA 7407                    	jz	short movepath	; yes, no need for path char
 24900                                  scanend:
 24901                                  	;cmp	byte [di],0	; end of string?
 24902                                  	;jz	short foundend
 24903                                  	;inc	di
 24904                                  	;jmp	short scanend
 24905                                  	; 18/03/2023 - Retro DOS v4.0 COMMAND.COM
 24906 000031FC 47                      	inc	di
 24907 000031FD 803D00                  	cmp	byte [di],0
 24908 00003200 75FA                    	jnz	short scanend
 24909                                  
 24910                                  ; Stick in a trailing path char.
 24911                                  
 24912                                  foundend:
 24913 00003202 AA                      	stosb
 24914                                  
 24915                                  ; Move remaining part of path. Skip leading path char if present.
 24916                                  
 24917                                  movepath:
 24918 00003203 3804                    	cmp	[si],al		; first char a path char?
 24919 00003205 7502                    	jne	short copypath
 24920                                  	; 26/04/2023
 24921 00003207 46                      	inc	si		; move past leading char
 24922 00003208 49                      	dec	cx		; drop from count
 24923                                  copypath:
 24924 00003209 E302                    	jcxz	_copydone	; no chars to move!
 24925 0000320B F3A4                    	rep	movsb
 24926                                  _copydone:
 24927 0000320D E9A100                  	jmp	path_success
 24928                                  				; run off and form complete pathname
 24929                                  path_noinit:
 24930                                  	;test	ds:arg.argv[0].argflags, MASK path_sep
 24931                                  	;test	byte [ARGV0_ARG_FLAGS],4
 24932 00003210 F606[B68D]04            	test	byte [ARG+ARGV_ELE.argflags],4 ; path_sep
 24933 00003215 751B                    	jnz	short path_failure
 24934                                  				; complete pathname specified ==> fail
 24935                                  	;mov	bh,';'
 24936 00003217 B73B                    	mov	bh,PATH_SEP_CHAR
 24937                                  				; semicolon terminates pathstring
 24938                                  	;mov	dx,ds:arg.argv[0].argstartel
 24939                                  				; this is where the last element starts
 24940                                  	;mov	dx,[ARGV0_ARGSTARTEL]
 24941 00003219 8B16[B78D]              	mov	dx,[ARG+ARGV_ELE.argstartel]
 24942                                  	;sub	dx,ds:arg.argv[0].argpointer
 24943                                  				; form pointer into EXECPATH,
 24944                                  	;sub	dx,[ARG_ARGV]
 24945 0000321D 2B16[B48D]              	sub	dx,[ARG+ARGV_ELE.argpointer]
 24946 00003221 81C2[CD89]              	add	dx,EXECPATH	; skipping over drive spec, if any
 24947                                  path_loop:
 24948 00003225 E8AD00                  	call	path_crunch	; pcrunch (EXECPATH, pathinfo)
 24949 00003228 89C5                    	mov	bp,ax		; save filetype code
 24950 0000322A 9F                      	lahf			; save flags, just in case
 24951 0000322B 09ED                    	or	bp,bp		; did path_crunch find anything?
 24952 0000322D 7508                    	jnz	short path_found
 24953 0000322F 9E                      	sahf			; see? needed those flags, after all!
 24954 00003230 73F3                    	jnc	short path_loop	; is there anything left to the path?
 24955                                  path_failure:
 24956 00003232 31C0                    	xor	ax,ax
 24957 00003234 E98700                  	jmp	path_exit
 24958                                  
 24959                                  path_found:				; pathinfo[] points to winner
 24960 00003237 BF[CD89]                	mov	di,EXECPATH
 24961                                  	;mov	cx,pathinfo[4]
 24962 0000323A 8B0E[AD93]              	mov	cx,[pathinfo+4]	; "new" pointer -- end of string
 24963                                  	;mov	si,pathinfo[2]
 24964 0000323E 8B36[AB93]              	mov	si,[pathinfo+2]	; "old" pointer -- beginning of string
 24965                                  
 24966                                  ;	BAS Nov 20/84
 24967                                  ;   Look at the pathname and expand . and .. if they are the first element
 24968                                  ;   in the pathname (after the drive letter)
 24969                                  
 24970 00003242 06                      	push	es
 24971                                  	;push	pathinfo[0]
 24972 00003243 FF36[A993]              	push	word [pathinfo+0]
 24973 00003247 07                      	pop	es
 24974                                  ;SR;
 24975                                  ; Oops! Gets fooled if path= \;..
 24976                                  ; We should also check if a drive letter is really present
 24977                                  ;
 24978 00003248 26807C022E              	cmp	byte [es:si+2],'.'
 24979                                  				; Look for Current dir at start of path
 24980 0000324D 7534                    	jne	short path_cpy
 24981                                  
 24982                                  	; 18/03/2023
 24983                                  	; MSDOS 6.0
 24984 0000324F 26807C013A              	cmp	byte [es:si+1],':'
 24985                                  				; does path have drive letter?
 24986 00003254 752D                    	jne	short path_cpy	; no, copy the path string
 24987                                  
 24988 00003256 51                      	push	cx		; Save pointer to end of string
 24989                                  	;mov	al,[es:si]
 24990                                  	;mov	[di],al		; Copy drive letter, :, and root char
 24991                                  	;mov	al,[es:si+1]	; to EXECPATH
 24992                                  	;mov	[di+1],al
 24993                                  	; 05/05/2023
 24994 00003257 268B04                  	mov	ax,[es:si]
 24995 0000325A 8905                    	mov	[di],ax
 24996 0000325C A0[AF93]                	mov	al,[psep_char]
 24997 0000325F 884502                  	mov	[di+2],al
 24998 00003262 56                      	push	si		; Save pointer to begining of string
 24999 00003263 268A14                  	mov	dl,[es:si]	; Convert device letter for cur dir
 25000 00003266 80CA20                  	or	dl,20h
 25001                                  	;sub	dl,60h
 25002 00003269 80EA60                  	sub	dl,'a'-1
 25003 0000326C 89FE                    	mov	si,di		; pointer to EXECPATH
 25004 0000326E 83C603                  	add	si,3		; Don't wipe out drive and root info
 25005 00003271 B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25006 00003274 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25007                                  			; DL = drive (0=default,1=A,etc.)
 25008                                  			; DS:SI	points to 64-byte buffer area
 25009 00003276 E8F3F9                  	call	dstrlen		; Determine length of present info
 25010 00003279 01CE                    	add	si,cx		; Don't copy over drive and root info
 25011 0000327B 4E                      	dec	si
 25012 0000327C 89F7                    	mov	di,si		; Point to end of target string
 25013 0000327E 5E                      	pop	si		; Restore pointer to begining of string
 25014 0000327F 83C603                  	add	si,3		; Point past drive letter, :, .
 25015 00003282 59                      	pop	cx		; Restore pointer to end of string
 25016                                  path_cpy:
 25017 00003283 07                      	pop	es
 25018 00003284 29F1                    	sub	cx,si		; yields character count
 25019 00003286 1E                      	push	ds		; time to switch segments
 25020 00003287 FF36[A993]              	push	word [pathinfo+0]
 25021                                  				; string lives in this segment
 25022 0000328B 1F                      	pop	ds
 25023 0000328C FC                      	cld
 25024                                  
 25025                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25026                                  	; MSDOS 5.0 (& MSDOS 5.0)
 25027                                  	;;rep	movsb ; 3/3/KK	; copy the prefix path into EXECPATH
 25028                                  kloop:
 25029 0000328D AC                      	lodsb			;AN000;  3/3/KK
 25030 0000328E AA                      	stosb			;AN000;  3/3/KK
 25031 0000328F E82DF1                  	call	testkanj	;AN000;  3/3/KK
 25032 00003292 7410                    	jz	short _notkanj1	;AN000;  3/3/KK
 25033 00003294 49                      	dec	cx		;AN000;  3/3/KK
 25034 00003295 E307                    	jcxz	popdone		;AN000;  Ignore boundary error 3/3/KK
 25035 00003297 A4                      	movsb			;AN000;  3/3/KK
 25036 00003298 49                      	dec	cx		;AN000;  3/3/KK
 25037 00003299 83F901                  	cmp	cx,1		;AN000;  One char (the terminator) left ? 3/3/KK
 25038 0000329C 77EF                    	ja	short kloop	;AN000;  no.  3/3/KK
 25039                                  popdone:			;AN000;  3/3/KK
 25040 0000329E 1F                      	pop	ds		;AN000;  Yes ES:DI->terminator, last char is 3/3/KK
 25041 0000329F A0[AF93]                	mov	al,[psep_char]	;AN000;  KANJI 3/3/KK
 25042 000032A2 EB0C                    	jmp	short path_store
 25043                                  				;AN000;  3/3/KK
 25044                                  _notkanj1:
 25045                                  	; 26/04/2023
 25046 000032A4 E2E7                    	loop	kloop
 25047 000032A6 1F                      	pop	ds		; return to our segment
 25048 000032A7 4F                      	dec	di		; overwrite terminator
 25049 000032A8 A0[AF93]                	mov	al,[psep_char]	; with a pathname separator
 25050 000032AB 3A45FF                  	cmp	al,[di-1]
 25051 000032AE 7401                    	je	short path_success
 25052                                  path_store:
 25053 000032B0 AA                      	stosb
 25054                                  path_success:
 25055 000032B1 BE[B193]                	mov	si,search_best_buf
 25056 000032B4 31C9                    	xor	cx,cx
 25057                                  path_succ_loop:
 25058 000032B6 AC                      	lodsb			; append winning filename to path
 25059 000032B7 AA                      	stosb			; (including terminating null)
 25060 000032B8 08C0                    	or	al,al
 25061 000032BA 75FA                    	jnz	short path_succ_loop
 25062 000032BC 89E8                    	mov	ax,bp		; retrieve filetype code
 25063                                  path_exit:
 25064 000032BE 9D                      	popf
 25065 000032BF 5D                      	pop	bp
 25066 000032C0 5F                      	pop	di
 25067 000032C1 5E                      	pop	si		; chill out...
 25068 000032C2 5A                      	pop	dx
 25069 000032C3 59                      	pop	cx
 25070 000032C4 5B                      	pop	bx
 25071 000032C5 C3                      	retn
 25072                                  
 25073                                  ; =============== S U B	R O U T	I N E =======================================
 25074                                  
 25075                                  ; STORE_PCHAR determines the pathname-element separator and squirrels
 25076                                  ; it away. In other words, must we say '/bin/ls' or '\bin\ls'?
 25077                                  ;
 25078                                  ; ENTRY:
 25079                                  ; EXIT:
 25080                                  ; NOTE(S):
 25081                                  ;   *	Uses <psep_char>, defined in <path_search>.
 25082                                  
 25083                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25084                                  STORE_PCHAR:
 25085 000032C6 50                      	push	ax
 25086 000032C7 B02F                    	mov	al,'/'		; is the pathname-element separator
 25087 000032C9 E8A0F3                  	call	pathchrcmp	; a regular slash?
 25088 000032CC 7402                    	jz	short STORE_SLASH
 25089                                  				; if yes, remember slash
 25090 000032CE B05C                    	mov	al,'\'
 25091                                  	; 18/03/2023
 25092                                  	;mov	[psep_char],al	; otherwise, remember back-slash
 25093                                  	;pop	ax
 25094                                  	;retn
 25095                                  STORE_SLASH:
 25096 000032D0 A2[AF93]                	mov	[psep_char],al
 25097 000032D3 58                      	pop	ax
 25098 000032D4 C3                      	retn
 25099                                  
 25100                                  ; =============== S U B	R O U T	I N E =======================================
 25101                                  
 25102                                  ; PATH_CRUNCH takes a prefix from a prefix string, and a suffix from
 25103                                  ; EXECPATH, and smooshes them into tpbuf. The caller may supply an
 25104                                  ; additional separator to use for breaking up the path-string. Null is the
 25105                                  ; default. Once the user-string has been formed, search is invoked to see
 25106                                  ; what's out there.
 25107                                  ;
 25108                                  ; ENTRY:
 25109                                  ;   BH			--	additional terminator character
 25110                                  ;   SI			--	pointer into pathstring to be dissected
 25111                                  ;   DX			--	pointer to stripped filename
 25112                                  ; EXIT:
 25113                                  ;   AX			--	non-zero (file type), zero (nothing found)
 25114                                  ;   SI			--	moves along pathstring from call to call
 25115                                  ;   [search_best_buf]	--	name of best file (AX non-zero)
 25116                                  ;   [tpbuf]		--	clobbered
 25117                                  ; NOTE(S):
 25118                                  ;   *	Implicit in this code is the ability to specify when to search
 25119                                  ;	the current directory (if at all) through the PATH defined by
 25120                                  ;	the user, a la UNIX (e.g., PATH=;c:\bin;c:\etc searches the
 25121                                  ;	current directory before the bin and etc directories of drive c).
 25122                                  
 25123                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25124                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3454h
 25125                                  
 25126                                  path_crunch:
 25127 000032D5 53                      	push	bx
 25128 000032D6 51                      	push	cx
 25129 000032D7 52                      	push	dx
 25130 000032D8 57                      	push	di
 25131 000032D9 56                      	push	si
 25132                                  	;pushf	; ** ; 18/03/2023
 25133 000032DA E8E9FF                  	call	STORE_PCHAR	; figure out pathname separator
 25134 000032DD BF[FA92]                	mov	di,TPBUF	; destination of concatenated string
 25135 000032E0 8B36[AD93]              	mov	si,[pathinfo+4]	; "new" pointer to start with
 25136 000032E4 8936[AB93]              	mov	[pathinfo+2],si	; becomes "old" pointer
 25137 000032E8 1E                      	push	ds		; save old segment pointer
 25138 000032E9 FF36[A993]              	push	word [pathinfo+0]
 25139                                  				; replace with pointer to userpath's
 25140 000032ED 1F                      	pop	ds		; segment
 25141                                  	; 26/04/2023
 25142 000032EE 30C9                    	xor	cl,cl		;AN000; clear flag for later use 3/3/KK
 25143                                  path_cr_copy:
 25144 000032F0 AC                      	lodsb			; get a pathname byte
 25145 000032F1 08C0                    	or	al,al		; check for terminator(s)
 25146 000032F3 7414                    	jz	short path_seg	; null terminates segment & pathstring
 25147 000032F5 38F8                    	cmp	al,bh
 25148 000032F7 7410                    	je	short path_seg	; BH terminates a pathstring segment
 25149                                  	;
 25150                                  	; 18/03/2023
 25151                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 25152 000032F9 E8C3F0                  	call	testkanj	;AN000; 3/3/KK
 25153 000032FC 7406                    	jz	short _notkanj2	;AN000; 3/3/KK
 25154 000032FE AA                      	stosb			;AN000; 3/3/KK
 25155 000032FF A4                      	movsb			;AN000; 3/3/KK
 25156 00003300 B101                    	mov	cl,1 ; *	;AN000; CL=1 means latest stored char is DBCS 3/3/KK
 25157 00003302 EBEC                    	jmp	short path_cr_copy
 25158                                  _notkanj2:
 25159 00003304 30C9                    	xor	cl,cl ; *	;AN000; CL=0 means latest stored char is SBCS 3/3/KK
 25160                                  	;
 25161 00003306 AA                      	stosb
 25162 00003307 EBE7                    	jmp	short path_cr_copy
 25163                                  
 25164                                  path_seg:
 25165 00003309 1F                      	pop	ds		; restore old data segment
 25166 0000330A 8936[AD93]              	mov	[pathinfo+4],si	; save "new" pointer for next time
 25167 0000330E 88C3                    	mov	bl,al		; remember if we saw null or not...
 25168                                  				;;; REMOVE NEXT 3 LINES FOR CURDIR SPEC
 25169 00003310 31C0                    	xor	ax,ax		; in case nothing in pathstr...
 25170 00003312 81FF[FA92]              	cmp	di,TPBUF	; was there really anything in pathstr?
 25171 00003316 7421                    	je	short path_cr_leave
 25172                                  				; if nothing was copied, pathstr empty
 25173                                  path_cr_look:
 25174 00003318 A0[AF93]                	mov	al,[psep_char]	; form complete pathname
 25175                                  	;
 25176                                  	; 18/03/2023
 25177                                  	; MSDOS 6.0
 25178 0000331B 08C9                    	or	cl,cl ; *	;AN000; 3/3/KK
 25179 0000331D 7505                    	jnz	short path_cr_store
 25180                                  				;AN000; this is a trailing byte of ECS code 3/3/KK
 25181                                  	;
 25182 0000331F 3A45FF                  	cmp	al,[di-1]	; add pathname separator for suffix
 25183 00003322 7401                    	je	short path_cr_l1
 25184                                  path_cr_store:
 25185 00003324 AA                      	stosb
 25186                                  path_cr_l1:
 25187 00003325 89D6                    	mov	si,dx
 25188                                  path_cr_l2:
 25189 00003327 AC                      	lodsb			; tack the stripped filename onto
 25190 00003328 AA                      	stosb			; the end of the path, up to and
 25191 00003329 08C0                    	or	al,al		; including the terminating null
 25192 0000332B 75FA                    	jnz	short path_cr_l2
 25193 0000332D BA[FA92]                	mov	dx,TPBUF	; and look for an appropriate file...
 25194 00003330 C706[FE93][5480]        	mov	word [search_error],BADPMES_PTR
 25195                                  	;invoke search
 25196 00003336 E80900                  	call	PSEARCH		; results are in AX & search_best_buf
 25197                                  
 25198                                  	; 18/03/2023
 25199                                  ;path_cr_leave:
 25200                                  	;or	bl,bl		; did we finish off the pathstring?
 25201                                  	;jz	short path_cr_empty
 25202                                  	;			; null in BL means all gone...
 25203                                  	;popf	; **		; otherwise, plenty left
 25204                                  	;clc
 25205                                  	;jmp	short path_cr_exit
 25206                                  ;path_cr_empty:
 25207                                  	;popf	; **
 25208                                  	;stc
 25209                                  ;path_cr_exit:
 25210                                  
 25211                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25212                                  path_cr_leave:
 25213                                  	;popf ; ** ; 18/03/2023
 25214 00003339 80FB01                  	cmp	bl,1	; if bl = 0 -> cf = 1 (path_cr_empty:)
 25215                                  
 25216                                  path_cr_exit:
 25217 0000333C 5E                      	pop	si
 25218 0000333D 5F                      	pop	di
 25219 0000333E 5A                      	pop	dx
 25220 0000333F 59                      	pop	cx
 25221 00003340 5B                      	pop	bx
 25222 00003341 C3                      	retn
 25223                                  
 25224                                  ;============================================================================
 25225                                  ; PATH2.ASM, MSDOS 6.0, 1991
 25226                                  ;============================================================================
 25227                                  ; 02/10/2018 - Retro DOS v3.0
 25228                                  
 25229                                  ;----------------------------------------------------------------------------
 25230                                  ;   SEARCH, when given a pathname, attempts to find a file with
 25231                                  ; one of the following extensions: .com, .exe, .bat (highest to
 25232                                  ; lowest priority). Where conflicts arise, the extension with
 25233                                  ; the highest priority is favored.
 25234                                  ; ENTRY:
 25235                                  ;   DX		--	pointer to null-terminated pathname
 25236                                  ;   fbuf	--	dma buffer for findfirst/next
 25237                                  ; EXIT:
 25238                                  ;   AX		--	8)  file found with .com extension
 25239                                  ;			4)  file found with .exe extension
 25240                                  ;			2)  file found with .bat extension
 25241                                  ;			0)  no such file to be found
 25242                                  ;   (if AX is non-zero:)
 25243                                  ;   [search_best]	identical to AX
 25244                                  ;   [search_best_buf]	null-terminated filename
 25245                                  ; NOTES:
 25246                                  ;   1) Requires caller to have allocated a dma buffer and executed a setdma.
 25247                                  ;---------------
 25248                                  ; CONSTANTS:
 25249                                  ;---------------
 25250                                  SEARCH_FILE_NOT_FOUND	EQU	0
 25251                                  SEARCH_COM		EQU	8
 25252                                  SEARCH_EXE		EQU	4
 25253                                  SEARCH_BAT		EQU	2
 25254                                  FNAME_LEN		EQU	8
 25255                                  FNAME_MAX_LEN		EQU	13
 25256                                  DOT			EQU	'.'
 25257                                  WILDCHAR		EQU	'?'
 25258                                  
 25259                                  
 25260                                  ; =============== S U B	R O U T	I N E =======================================
 25261                                  
 25262                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 26D6h
 25263                                  
 25264                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25265                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:34C9h
 25266                                  	
 25267                                  PSEARCH:
 25268 00003342 51                      	push	cx
 25269 00003343 52                      	push	dx
 25270 00003344 57                      	push	di
 25271 00003345 56                      	push	si
 25272                                  	;pushf	; ** ; 18/03/2023
 25273 00003346 52                      	push	dx		; check drivespec (save pname ptr)
 25274 00003347 89D7                    	mov	di,dx		; working copy of pathname
 25275 00003349 BE[BE93]                	mov	si,search_curdir_buf
 25276 0000334C 31D2                    	xor	dx,dx		; zero means current drive
 25277 0000334E 807D013A                	cmp	byte [di+1],':'	; is there a drive spec?
 25278 00003352 7508                    	jne	short SEARCH_DIR_CHECK
 25279 00003354 8A15                    	mov	dl,[di]		; get the drive byte
 25280 00003356 80E2DF                  	and	dl,0DFh ; ~20h	; uppercase the sucker
 25281 00003359 80EA40                  	sub	dl,'@' ; 40h	; and convert to drive number
 25282                                  SEARCH_DIR_CHECK:
 25283 0000335C B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25284 0000335F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25285                                  			; DL = drive (0=default,1=A,etc.)
 25286                                  			; DS:SI	points to 64-byte buffer area
 25287 00003361 5A                      	pop	dx		; directory? If we can't we'll
 25288 00003362 724C                    	jc	short SEARCH_INVALID_DRIVE
 25289                                  				; assume it's a bad drive...
 25290 00003364 B91300                  	mov	cx,search_attr	; 13h
 25291                                  				; filetypes to search for
 25292 00003367 B8004E                  	mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 25293 0000336A CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 25294                                  			; CX = search attributes
 25295                                  			; DS:DX	-> ASCIZ filespec
 25296                                  			; (drive,path, and wildcards allowed)
 25297 0000336C 7249                    	jc	short SEARCH_NO_FILE
 25298 0000336E C606[B093]00            	mov	byte [search_best],SEARCH_FILE_NOT_FOUND ; 0
 25299 00003373 C606[B193]00            	mov	byte [search_best_buf],ANULL
 25300                                  				; 0 ; nothing's been found, yet
 25301                                  SEARCH_LOOP:
 25302 00003378 E84300                  	call	SEARCH_FTYPE	; determine if .com, &c...
 25303 0000337B 3A06[B093]              	cmp	al,[search_best]
 25304                                  				; better than what we've found so far?
 25305 0000337F 7E13                    	jle	short SEARCH_NEXT
 25306                                  				; no, look for another
 25307 00003381 A2[B093]                	mov	[search_best],al
 25308                                  				; found something... save its code
 25309                                  	;mov	si,offset TRANGROUP:fbuf.find_buf_pname
 25310                                  	;mov	si,FBUF_PNAME
 25311 00003384 BE[9C93]                	mov	si,FBUF+FIND_BUF.PNAME ; FBUF+30
 25312 00003387 BF[B193]                	mov	di,search_best_buf
 25313 0000338A B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25314 0000338D FC                      	cld
 25315 0000338E F3A4                    	rep	movsb		; save complete pathname representation
 25316 00003390 3C08                    	cmp	al,SEARCH_COM	; 8
 25317                                  				; have we found the best of all?
 25318 00003392 740A                    	je	short SEARCH_DONE
 25319                                  SEARCH_NEXT:			; keep on looking
 25320 00003394 B91300                  	mov	cx,search_attr ; 13h
 25321 00003397 B8004F                  	mov	ax,Find_Next*256 ; 4F00h ; next match
 25322 0000339A CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 25323                                  			; [DTA]	= data block from
 25324                                  			; last AH = 4Eh/4Fh call
 25325 0000339C 73DA                    	jnc	short SEARCH_LOOP
 25326                                  SEARCH_DONE:			; it's all over with...
 25327 0000339E A0[B093]                	mov	al,[search_best]
 25328                                  				; pick best to return with
 25329                                  	; 18/03/2023
 25330                                  	; MSDOS 6.0
 25331 000033A1 803E[6A8D]01            	cmp	byte [ext_entered],1
 25332                                  				;AN005; Did user request a specific ext?
 25333 000033A6 7411                    	je	short SEARCH_EXIT
 25334                                  				;AN005; no - exit
 25335 000033A8 A0[6A8D]                	mov	al,[ext_entered]
 25336                                  				;AN005; yes - get the real file type back
 25337 000033AB A2[B093]                	mov	[search_best],al
 25338                                  				;AN005; save the real file type
 25339                                  	;
 25340 000033AE EB09                    	jmp	short SEARCH_EXIT
 25341                                  
 25342                                  SEARCH_INVALID_DRIVE:		; Tell the user path/drive
 25343 000033B0 8B16[FE93]              	mov	dx,[search_error]
 25344                                  				; appropriate error message
 25345 000033B4 E81A1A                  	call	std_printf	; and pretend no file found
 25346                                  
 25347                                  SEARCH_NO_FILE:			; couldn't find a match
 25348                                  	;mov	ax,SEARCH_FILE_NOT_FOUND ; 0
 25349                                  	; 18/03/2023
 25350 000033B7 31C0                    	xor	ax,ax
 25351                                  SEARCH_EXIT:
 25352                                  	;popf	; ** ; 18/03/2023
 25353 000033B9 5E                      	pop	si
 25354 000033BA 5F                      	pop	di
 25355 000033BB 5A                      	pop	dx
 25356 000033BC 59                      	pop	cx
 25357 000033BD C3                      	retn
 25358                                  
 25359                                  ; =============== S U B	R O U T	I N E =======================================
 25360                                  
 25361                                  ; SEARCH_FTYPE determines the type of a file by examining its extension.
 25362                                  ;
 25363                                  ; ENTRY:
 25364                                  ;   fbuf    --	dma buffer containing filename
 25365                                  ; EXIT:
 25366                                  ;   AX	    --	file code, as given in search header
 25367                                  ; NOTE(S):
 25368                                  ;   *	Implicit assumption that NULL == search_file_not_found
 25369                                  
 25370                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25371                                  
 25372                                  SEARCH_FTYPE:
 25373 000033BE 57                      	push	di
 25374 000033BF 56                      	push	si
 25375                                  	;mov	ax,ANULL ; 0	; find the end of the filename
 25376                                  	; 18/02/2023
 25377 000033C0 31C0                    	xor	ax,ax ; ax = 0		
 25378                                  	;mov	di,offset TRANGROUP:fbuf.find_buf_pname
 25379                                  	;mov	di,FBUF_PNAME
 25380 000033C2 BF[9C93]                	mov	di,FBUF+FIND_BUF.PNAME ; FBUF+1Eh
 25381 000033C5 B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25382 000033C8 FC                      	cld
 25383 000033C9 F2AE                    	repnz	scasb		; search for the terminating null
 25384 000033CB 7535                    	jnz	short FTYPE_EXIT
 25385                                  				; weird... no null byte at end
 25386 000033CD 83EF05                  	sub	di,5		; . + E + X + T + NULL
 25387                                  
 25388                                  	; Compare .COM
 25389                                  
 25390 000033D0 BE[2584]                	mov	si,comext ; ".COM"
 25391 000033D3 89F8                    	mov	ax,di
 25392 000033D5 A7                      	cmpsw
 25393 000033D6 7508                    	jnz	short FTYPE_EXE
 25394 000033D8 A7                      	cmpsw
 25395 000033D9 7505                    	jnz	short FTYPE_EXE
 25396                                  	;mov	ax,8
 25397 000033DB B80800                  	mov	ax,SEARCH_COM	; success!
 25398 000033DE EB22                    	jmp	short FTYPE_EXIT
 25399                                  
 25400                                  	; Compare .EXE
 25401                                  FTYPE_EXE:			; still looking... now for '.exe'
 25402 000033E0 89C7                    	mov	di,ax
 25403 000033E2 BE[2984]                	mov	si,exeext ; ".EXE"
 25404 000033E5 A7                      	cmpsw
 25405 000033E6 7508                    	jnz	short FTYPE_BAT
 25406 000033E8 A7                      	cmpsw
 25407 000033E9 7505                    	jnz	short FTYPE_BAT
 25408                                  	;mov	ax,4
 25409 000033EB B80400                  	mov	ax,SEARCH_EXE	; success!
 25410 000033EE EB12                    	jmp	short FTYPE_EXIT
 25411                                  
 25412                                  	; Compare .BAT
 25413                                  FTYPE_BAT:			; still looking... now for '.bat'
 25414 000033F0 89C7                    	mov	di,ax
 25415 000033F2 BE[2D84]                	mov	si,batext ; ".BAT"
 25416 000033F5 A7                      	cmpsw
 25417 000033F6 7508                    	jnz	short FTYPE_FAIL
 25418 000033F8 A7                      	cmpsw
 25419 000033F9 7505                    	jnz	short FTYPE_FAIL
 25420                                  	;mov	ax,2
 25421 000033FB B80200                  	mov	ax,SEARCH_BAT	; success!
 25422 000033FE EB02                    	jmp	short FTYPE_EXIT
 25423                                  
 25424                                  FTYPE_FAIL:			; file doesn't match what we need
 25425                                  	;mov	ax,ANULL ; 0
 25426                                  	; 18/03/2023
 25427 00003400 29C0                    	sub	ax,ax  ; ax = 0
 25428                                  FTYPE_EXIT:
 25429                                  	; 18/03/2023
 25430                                  	; MSDOS 6.0
 25431 00003402 803E[6A8D]01            	cmp	byte [ext_entered],1
 25432                                  				;AN005; was an extension entered?
 25433 00003407 740A                    	jz	short FTYPE_DONE
 25434                                  				;AN005; no - exit
 25435                                  	;cmp	ax,ANULL	;AN005; was any match found
 25436 00003409 21C0                    	and	ax,ax  ; ax = 0 ?
 25437 0000340B 7406                    	jz	short FTYPE_DONE
 25438                                  				;AN005; no - exit
 25439 0000340D A2[6A8D]                	mov	[ext_entered],al
 25440                                  				;AN005; save the match type found
 25441 00003410 B80800                  	mov	ax,SEARCH_COM	;AN005; send back best was found to stop search
 25442                                  FTYPE_DONE:
 25443 00003413 5E                      	pop	si
 25444 00003414 5F                      	pop	di
 25445 00003415 C3                      	retn
 25446                                  
 25447                                  ; =============== S U B	R O U T	I N E =======================================
 25448                                  
 25449                                  ; STRIP copies the source string (argv[0]) into the destination buffer,
 25450                                  ; replacing any extension with wildcards.
 25451                                  ;
 25452                                  ; ENTRY:
 25453                                  ;	BX	--	maximum length of destination buffer
 25454                                  ;	DS:SI	--	address of destination buffer
 25455                                  ;	argv[0] --	command name to be stripped
 25456                                  ; EXIT:
 25457                                  ;	CF	--	set if failure, clear if successful
 25458                                  ; NOTE(S):
 25459                                  
 25460                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25461                                  
 25462                                  STRIP:
 25463 00003416 50                      	push	ax
 25464 00003417 53                      	push	bx
 25465 00003418 51                      	push	cx
 25466 00003419 52                      	push	dx
 25467 0000341A 57                      	push	di
 25468 0000341B 56                      	push	si
 25469                                  	;pushf	; ** ; 18/03/2023
 25470                                  		
 25471                                  	; 05/05/2023
 25472                                  	; MSDOS 6.0
 25473 0000341C C606[6A8D]01            	mov	byte [ext_entered],1
 25474                                  				;AN005; assume no extension on file name
 25475                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25476                                  	;mov	dx,[ARG_ARGV]
 25477                                  	;mov	dx,ds:arg.argv[0].argpointer
 25478                                  				; save pointer to beginning of argstring
 25479                                  	;mov	dx,[ARGV0_ARGPOINTER]
 25480 00003421 8B16[B48D]              	mov	dx,[ARG+ARGV_ELE.argpointer]
 25481                                  	;mov	di,ds:arg.argv[0].argstartel
 25482                                  				; beginning of last pathname element
 25483                                  	;mov	di,[ARGV0_ARGSTARTEL] ; beginning of last pathname element
 25484 00003425 8B3E[B78D]              	mov	di,[ARG+ARGV_ELE.argstartel]
 25485 00003429 803D00                  	cmp	byte [di],0	; *STARTEL == NULL means no command
 25486 0000342C 743D                    	je	short STRIP_ERROR
 25487 0000342E 89D1                    	mov	cx,dx		; compute where end of argstring lies
 25488                                  	;add	cx,ds:arg.argv[0].arglen
 25489                                  	;add	cx,[ARGV0_ARGLEN]
 25490 00003430 030E[B98D]              	add	cx,[ARG+ARGV_ELE.arglen]
 25491 00003434 29F9                    	sub	cx,di		; and then find length of last element
 25492 00003436 41                      	inc	cx		; include null as well
 25493 00003437 B02E                    	mov	al,'.'
 25494                                  	;mov	al,DOT		; let's find the filetype extension
 25495 00003439 FC                      	cld
 25496 0000343A F2AE                    	repnz	scasb		; wind up pointing to either null or dot
 25497                                  
 25498                                  	; 18/03/2023
 25499                                  	; MSDOS 6.0
 25500 0000343C E307                    	jcxz	PROCESS_EXT	;AN005; if no extension found, just continue
 25501 0000343E B000                    	mov	al,0 ; 18/03/2023
 25502                                  	;mov	byte [ext_entered],0
 25503 00003440 A2[6A8D]                	mov	[ext_entered],al
 25504                                  				;AN005; we found an extension
 25505                                  	;;mov	al,ANULL	;AN005; continue scanning until the
 25506                                  	;mov	al,0
 25507 00003443 F2AE                    	repnz	scasb		;AN005; end of line is reached.
 25508                                  PROCESS_EXT:
 25509                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25510 00003445 89F9                    	mov	cx,di		; pointer to end of argstring yields
 25511 00003447 29D1                    	sub	cx,dx		; number of bytes to be copied
 25512 00003449 83EB04                  	sub	bx,4		; can argstring fit into dest. buffer?
 25513 0000344C 39D9                    	cmp	cx,bx
 25514 0000344E 7F1B                    	jg	short STRIP_ERROR
 25515                                  				; if not, we must have a bad pathname
 25516 00003450 89F7                    	mov	di,si		; destination buffer
 25517 00003452 89D6                    	mov	si,dx		; source is beginning of pathname
 25518 00003454 FC                      	cld
 25519 00003455 F3A4                    	rep	movsb		; SI=arg,DI=buffer,CX=argend-argbeg
 25520                                  
 25521                                  	; 18/03/2023
 25522                                  	; MSDOS 6.0
 25523 00003457 803E[6A8D]01            	cmp	byte [ext_entered],1
 25524                                  				;AN005; if an extension was entered
 25525 0000345C 750A                    	jne	short SKIP_WILDS
 25526                                  				;AN005;    don't set up wildcard ext.
 25527                                  
 25528                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25529 0000345E 4F                      	dec	di		; overwrite null or dot
 25530 0000345F AA                      	stosb			; with a dot
 25531 00003460 B03F                    	mov	al,'?'
 25532                                  	;mov	al,WILDCHAR	; now add wildcards
 25533 00003462 AA                      	stosb
 25534 00003463 AA                      	stosb
 25535 00003464 AA                      	stosb
 25536 00003465 B000                    	mov	al,0
 25537                                  	;mov	al,ANULL	; and a terminating null	
 25538 00003467 AA                      	stosb
 25539                                  SKIP_WILDS:
 25540                                  	;popf	; ** ; 18/03/2023
 25541 00003468 F8                      	clc
 25542 00003469 EB01                    	jmp	short STRIP_EXIT ; chill out...
 25543                                  
 25544                                  STRIP_ERROR:
 25545                                  	;popf	; ** ; 18/03/2023
 25546 0000346B F9                      	stc
 25547                                  STRIP_EXIT:
 25548 0000346C 5E                      	pop	si
 25549 0000346D 5F                      	pop	di
 25550 0000346E 5A                      	pop	dx
 25551 0000346F 59                      	pop	cx
 25552 00003470 5B                      	pop	bx
 25553 00003471 58                      	pop	ax
 25554 00003472 C3                      	retn
 25555                                  
 25556                                  ; =============== S U B	R O U T	I N E =======================================
 25557                                  
 25558                                  ; SAVE_ARGS attempts to preserve the existing argv[]/argvcnt/argbuffer
 25559                                  ;
 25560                                  ; structure in newly allocated memory. The argv[] structure is found at the
 25561                                  ; beginning of this area. The caller indicates how much extra space is
 25562                                  ; needed in the resulting structure; Save_Args returns a segment number and
 25563                                  ; an offset into that area, indicating where the caller may preserve its own
 25564                                  ; data. Note that <argvcnt> can be found at <offset-2>.
 25565                                  ; ENTRY:
 25566                                  ;   BX	    --	size (in bytes) of extra area to allocate
 25567                                  ; EXIT:
 25568                                  ;   AX	    --	segment of new area.
 25569                                  ;   CF	    --	set if unable to save a copy.
 25570                                  ; NOTE(S):
 25571                                  ;   1)	The allocated area will be AT LEAST the size requested -- since
 25572                                  ;	the underlying MSDOS call, <alloc> returns an integral number of
 25573                                  ;	paragraphs.
 25574                                  ;   2)	It is an error if MSDOS can't allocate AT LEAST as much memory
 25575                                  ;	as the caller of Save_Args requests.
 25576                                  ;   3)	AX is undefined if CF indicates an error.
 25577                                  
 25578                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25579                                  
 25580                                  SAVE_ARGS:
 25581 00003473 53                      	push	bx
 25582 00003474 51                      	push	cx
 25583 00003475 52                      	push	dx
 25584 00003476 57                      	push	di
 25585 00003477 56                      	push	si
 25586 00003478 55                      	push	bp
 25587                                  	; 01/05/2023
 25588                                  	; 26/04/2023
 25589                                  	;pushf ; **
 25590                                  	;add	bx,1363		; space for arg structure, round up
 25591 00003479 81C35304                	add	bx,ARG_UNIT.SIZE+15 ; 1348+15
 25592                                  			; 1092+15 ; 31/07/2024
 25593 0000347D B104                    	mov	cl,4		; to paragraph size and convert
 25594 0000347F D3EB                    	shr	bx,cl		; size in bytes to size in paragraphs
 25595 00003481 B80048                  	mov	ax,ALLOC*256 ; 4800h
 25596 00003484 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 25597                                  			; BX = number of 16-byte paragraphs desired
 25598 00003486 7241                    	jc	short SAVE_ERROR ; ***
 25599 00003488 89C5                    	mov	bp,ax		; save segment id
 25600 0000348A 06                      	push	es		; save TRANGROUP address
 25601 0000348B 8EC0                    	mov	es,ax		; switch to new memory segment
 25602                                  	; assume es:nothing
 25603                                  	;mov	cx,1348		; get back structure size
 25604 0000348D B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092 ; 31/07/2024
 25605 00003490 31FF                    	xor	di,di		; destination is new memory area
 25606                                  	;mov	si,ARG_ARGV
 25607 00003492 BE[B48D]                	mov	si,ARG		; source is arg structure
 25608                                  	; 09/08/2024
 25609 00003495 56                      	push	si
 25610 00003496 F3A4                    	rep	movsb		; move that sucker!
 25611                                  	;mov	cx,arg.argvcnt 	; adjust argv pointers
 25612                                  	;mov	cx,[ARG_ARGVCNT]
 25613 00003498 8B0E[7490]              	mov	cx,[ARG+ARG_UNIT.argvcnt]
 25614 0000349C 31C0                    	xor	ax,ax		; base address for argv_calc
 25615                                  
 25616                                  ;	Bugbug:	What did they mean by this?
 25617                                  ;	Note that the replacement line produces exactly the same code.
 25618                                  ;;	mov	SI, OFFSET TRANGROUP:arg.argbuf - OFFSET arg_unit.argbuf
 25619                                  ;	mov	SI, OFFSET TRANGROUP:arg
 25620                                  
 25621                                  	;;mov	si,ARG_ARGV
 25622                                  	;mov	si,ARG
 25623                                  	; 09/08/2024
 25624 0000349E 5E                      	pop	si
 25625                                  SAVE_PTR_LOOP:
 25626 0000349F 49                      	dec	cx		; exhausted all args?
 25627 000034A0 7C24                    	jl	short SAVE_DONE
 25628 000034A2 89CB                    	mov	bx,cx		; get arg index and
 25629 000034A4 E8A7FC                  	call	argv_calc	; convert to a pointer
 25630                                  	;mov	dx,ds:arg.argv[bx].argpointer
 25631                                  	;mov	dx,[ARG_ARGV+bx]
 25632 000034A7 8B97[B48D]              	mov	dx,[ARG+ARGV_ELE.argpointer+bx]
 25633 000034AB 29F2                    	sub	dx,si		; adjust argpointer
 25634                                  	;mov	es:argv[BX].argpointer,dx
 25635                                  	;mov	[es:bx+ARGV_ELE.argpointer],dx ; mov [es:bx+0],dx
 25636 000034AD 268917                  	mov	[es:bx],dx
 25637                                  	;mov	dx,ds:arg.argv[bx].argstartel
 25638                                  	;mov	dx,[ARGV0_ARGSTARTEL+bx]
 25639 000034B0 8B97[B78D]              	mov	dx,[ARG+ARGV_ELE.argstartel+bx]
 25640 000034B4 29F2                    	sub	dx,si		; and adjust argstartel
 25641                                  	;mov	es:argv[bx].argstartel,dx
 25642                                  	;mov	[es:bx+3],dx
 25643 000034B6 26895703                	mov	[es:bx+ARGV_ELE.argstartel],dx
 25644                                  	;mov	dx,ds:arg.argv[bx].arg_ocomptr
 25645                                  	;mov	dx,[ARGV0_OCOMPTR+bx]
 25646 000034BA 8B97[BD8D]              	mov	dx,[ARG+ARGV_ELE.arg_ocomptr+bx]
 25647 000034BE 29F2                    	sub	dx,si		; and adjust arg_ocomptr
 25648                                  	;mov	es:argv[bx].arg_ocomptr,dx
 25649                                  	;mov	[es:bx+9],dx
 25650 000034C0 26895709                	mov	[es:bx+ARGV_ELE.arg_ocomptr],dx
 25651 000034C4 EBD9                    	jmp	short SAVE_PTR_LOOP
 25652                                  SAVE_DONE:
 25653 000034C6 07                      	pop	es		; back we go to TRANGROUP
 25654                                  	; assume es:nothing
 25655 000034C7 89E8                    	mov	ax,bp		; restore segment id
 25656                                  	; 26/04/2023
 25657                                  	; cf = 0 ; *
 25658                                  	;jmp	short SAVE_OK
 25659                                  
 25660                                  	; 26/04/2023
 25661                                  ;SAVE_ERROR:
 25662                                  ;	; 26/04/2023
 25663                                  ;	;popf ; **
 25664                                  ;	stc
 25665                                  ;	jmp	short SAVE_EXIT
 25666                                  
 25667                                  SAVE_OK:
 25668                                  	; 26/04/2023
 25669                                  	;popf ; **
 25670                                  	; 26/04/2023
 25671                                  	; cf = 0 ; *
 25672                                  	;clc
 25673                                  SAVE_EXIT:
 25674                                  SAVE_ERROR:	; 26/04/2023 (cf=1) ; ***
 25675 000034C9 5D                      	pop	bp
 25676 000034CA 5E                      	pop	si
 25677 000034CB 5F                      	pop	di
 25678 000034CC 5A                      	pop	dx
 25679 000034CD 59                      	pop	cx
 25680 000034CE 5B                      	pop	bx
 25681                                  answ_no:	; 26/04/2023
 25682 000034CF C3                      	retn
 25683                                  
 25684                                  ;============================================================================
 25685                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (1)
 25686                                  ;============================================================================
 25687                                  ; 02/10/2018 - Retro DOS v3.0
 25688                                  
 25689                                  ; Title	COMMAND Language midifiable Code Transient
 25690                                  
 25691                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2843h
 25692                                  
 25693                                  ; =============== S U B	R O U T	I N E =======================================
 25694                                  
 25695                                  ; ****************************************************************
 25696                                  ; *
 25697                                  ; * ROUTINE:	 NOTEST2 - execution of DEL/ERASE command
 25698                                  ; *
 25699                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 25700                                  ; *		 user for Y/N if necessary. If an error occurs,
 25701                                  ; *		 set up an error message and go to CERROR.
 25702                                  ; *
 25703                                  ; * INPUT:	 FCB at 5ch set up with filename(s) entered
 25704                                  ; *		 Current directory set to entered directory
 25705                                  ; *
 25706                                  ; * OUTPUT:	 none
 25707                                  ; *
 25708                                  ; ****************************************************************
 25709                                  ;
 25710                                  ; ARE YOU SURE prompt when deleting *.*
 25711                                  
 25712                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25713                                  
 25714                                  notest2:
 25715 000034D0 B90B00                  	mov	cx,11
 25716 000034D3 BE5D00                  	mov	si,FCB+1 ; 5Dh
 25717                                  ambspec:
 25718 000034D6 AC                      	lodsb
 25719 000034D7 3C3F                    	cmp	al,'?'
 25720 000034D9 7502                    	jne	short allfil
 25721 000034DB E2F9                    	loop	ambspec
 25722                                  allfil:
 25723                                  	; 19/03/2023
 25724                                  	;cmp	cx,0
 25725 000034DD 09C9                    	or	cx,cx
 25726 000034DF 752E                    	jnz	short noprmpt
 25727                                  askagn:	
 25728 000034E1 BA[DB7F]                	mov	dx,SureMes_Ptr	; "Are you sure (Y/N)?"
 25729 000034E4 E8EA18                  	call	std_printf
 25730 000034E7 BE8000                  	mov	si,80h
 25731 000034EA 89F2                    	mov	dx,si
 25732 000034EC C7047800                	mov	word [si],120	; zero length
 25733                                  	;mov	ax,0C0Ah
 25734 000034F0 B80A0C                  	mov	ax,(STD_CON_INPUT_FLUSH<<8)|Std_Con_String_Input
 25735 000034F3 CD21                    	int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 25736                                  			; AL must be 01h,06h,07h,08h or 0Ah.
 25737 000034F5 AD                      	lodsw
 25738 000034F6 08E4                    	or	ah,ah
 25739 000034F8 74E7                    	jz	short askagn
 25740 000034FA E8E1F0                  	call	scanoff
 25741                                  	; 19/03/2023
 25742                                  	; MSDOS 6.0
 25743 000034FD E80C02                  	call	char_in_xlat	; Convert to upper case
 25744                                  	;retc			; return if function not supported
 25745                                  	; 19/03/2023
 25746                                  	;jnc	short check_yn
 25747                                  ;answ_no:
 25748                                  	;retn
 25749 00003500 72CD                    	jc	short answ_no
 25750                                  
 25751                                  	; 19/03/2023
 25752                                  	; AL = 0 if it was (country depended) NO character
 25753                                  	; AL = 1 if it was (country depenced) YES character
 25754                                  
 25755                                  	; MSDOS 3.3
 25756                                  	;call	UPCONV
 25757                                  
 25758                                  	; 19/03/2023	
 25759                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25760                                  	;cmp	al,[CAPITAL_N]
 25761                                  	;jne	short CHECK_Y
 25762                                  	;retn
 25763                                  ;CHECK_Y:
 25764                                  	;cmp	al,[CAPITAL_Y]
 25765                                  	;pushf
 25766                                  	;call	CRLF2
 25767                                  	;popf
 25768                                  	;jne	short ASKAGN
 25769                                  
 25770                                  check_yn:
 25771                                  	; 19/03/2023
 25772                                  	;cmp	al,0	; NO character
 25773 00003502 08C0                    	or	al,al
 25774 00003504 74C9                    	jz	short answ_no
 25775                                  	;cmp	al,1	 ;YES character
 25776 00003506 FEC8                    	dec	al ; 1 -> 0 --> zf = 1
 25777 00003508 9C                      	pushf
 25778 00003509 E8C5F0                  	call	CRLF2
 25779 0000350C 9D                      	popf
 25780 0000350D 75D2                    	jnz	short askagn
 25781                                  noprmpt:
 25782 0000350F B413                    	mov	ah,FCB_Delete ; 13h
 25783 00003511 BA5C00                  	mov	dx,FCB ; 5Ch
 25784 00003514 CD21                    	int	21h	; DOS -	DELETE FILE via	FCB
 25785                                  			; DS:DX	-> FCB with filename field filled with
 25786                                  			; template for deletion ('?' wildcard allowed,but not '*')
 25787                                  			; Return: AL = 00h file	found,FFh file	not found
 25788 00003516 FEC0                    	inc	al
 25789 00003518 7403                    	jz	short eraerr
 25790                                  	; 26/04/2023
 25791                                  	;call	RestUDir
 25792                                  ;answ_no:
 25793                                  	;retn
 25794 0000351A E971EF                  	jmp	RestUDir ; 26/04/2023
 25795                                  
 25796                                  	; 19/03/2023
 25797                                  	; MSDOS 6.0
 25798                                  eraerr:
 25799                                  	;invoke	set_ext_error_msg
 25800                                  				;AN022; set up the extended error
 25801 0000351D E8C0E7                  	call	Set_Ext_Error_Msg
 25802 00003520 52                      	push	dx		;AN022; save message
 25803                                  	;invoke	RESTUDIR
 25804 00003521 E86AEF                  	call	RestUDir
 25805 00003524 5A                      	pop	dx		;AN022; restore message
 25806                                  	
 25807 00003525 833E[FC7E]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 25808                                  				;AN022; convert no more files to
 25809 0000352A 7506                    	jne	short cerrorj2	;AN022;  file not found
 25810 0000352C C706[FC7E]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2  
 25811                                  				;AN000; get message number in control block
 25812                                  cerrorj2:
 25813 00003532 E91DF4                  	jmp	cerror
 25814                                  	
 25815                                  	; 19/03/2023
 25816                                  	; MSDOS 3.3
 25817                                  ;ERAERR:	
 25818                                  	;mov	ah,Set_DMA ; 1Ah
 25819                                  	;mov	dx,FCB ; 5Ch
 25820                                  	;int	21h		; DOS -	SET DISK TRANSFER AREA ADDRESS
 25821                                  	;			; DS:DX	-> disk	transfer buffer
 25822                                  	;mov	ah,Dir_Search_First ; 11h
 25823                                  	;int	21h		; DOS -	SEARCH FIRST USING FCB
 25824                                  	;			; DS:DX	-> FCB
 25825                                  	;push	ax
 25826                                  	;call	RESTUDIR
 25827                                  	;pop	ax
 25828                                  	;mov	dx,FNOTFOUNDPTR
 25829                                  	;inc	al
 25830                                  	;jz	short CERRORJ
 25831                                  	;mov	dx,ACCDENPTR
 25832                                  	;jmp	CERROR
 25833                                  
 25834                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25835                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:36D4h
 25836                                  
 25837                                  ; ****************************************************************
 25838                                  ; *
 25839                                  ; * ROUTINE:	 SLASHP_ERASE - execution of DEL/ERASE /P
 25840                                  ; *
 25841                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 25842                                  ; *		 user for Y/N where necessary. If an error occurs
 25843                                  ; *		 set up and error message and transfer control
 25844                                  ; *		 to CERROR.
 25845                                  ; *
 25846                                  ; * INPUT:	 FCB at 5Ch set up with filename(s) entered
 25847                                  ; *		 Current directory set to entered directory
 25848                                  ; *
 25849                                  ; * OUTPUT:	 none
 25850                                  ; *
 25851                                  ; ****************************************************************
 25852                                  
 25853                                  	; 19/03/2023
 25854                                  slashp_erase:				;AN000; entry point
 25855                                  	;invoke	build_dir_string	;AN000; set up current directory string for output
 25856 00003535 E814E9                  	call	build_dir_string
 25857                                  
 25858 00003538 B41A                    	mov	ah,Set_DMA ; 1Ah	;AN000; issue set dta int 21h
 25859                                  	;mov	dx,offset trangroup:destdir
 25860 0000353A BA[6B8B]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 25861 0000353D CD21                    	int	21h			;AN000;
 25862                                  
 25863                                  	;mov	ah,11h
 25864 0000353F B411                    	mov	ah,Dir_Search_First	;AN000; do dir search first int 21h
 25865 00003541 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000; use FCB at 5Ch for target
 25866 00003544 CD21                    	int	21h			;AN000;
 25867 00003546 FEC0                    	inc	al			;AN000; did an error occur
 25868                                  	;jz	short eraerr		;AN022; go to error exit
 25869                                  	; 26/04/2023
 25870 00003548 7502                    	jnz	short delete_prompt_loop
 25871                                  
 25872                                  	; 26/04/2023
 25873                                  stop_del:
 25874 0000354A EBD1                    	jmp	short eraerr		;AN022; go to error exit - need long jmp
 25875                                  
 25876                                  delete_prompt_loop:			;AN000;
 25877                                  	;mov	si,offset trangroup:destdir+1
 25878 0000354C BE[6C8B]                	mov	si,DESTDIR+1		;AN000; set up FCB as source
 25879                                  	;mov	di,offset trangroup:dest
 25880 0000354F BF[3B8B]                	mov	di,DEST			;AN000; set up dest as target
 25881 00003552 A0[AA8A]                	mov	al,[DIRCHAR]		;AN000; store a "\" in the first char
 25882 00003555 AA                      	stosb				;AN000;   of DEST
 25883                                  	;invoke	FCB_TO_ASCZ		;AN000; convert filename from FCB to ASCIIZ string
 25884 00003556 E8A4F0                  	call	FCB_TO_ASCZ
 25885                                  
 25886                                  slashp_askagn:				;AN000;
 25887 00003559 E875F0                  	call	CRLF2			;AN000; print out carriage return, line feed
 25888                                  	;mov	dx,offset trangroup:bwdbuf
 25889 0000355C BA[AE8B]                	mov	dx,BWDBUF		;AN000; print out current directory string
 25890 0000355F 89D3                    	mov	bx,dx			;AN000; get string pointer in bx
 25891 00003561 807F0300                	cmp	byte [bx+3],END_OF_LINE_OUT ; 0
 25892                                  					;AN000; see if only D:\,0
 25893 00003565 7504                    	jnz	short not_del_root	;AN000; no continue
 25894 00003567 C6470200                	mov	byte [bx+2],END_OF_LINE_OUT ; 0
 25895                                  					;AN000; yes, get rid of \ ;
 25896                                  not_del_root:				;AN000;
 25897 0000356B 8916[158C]              	mov	[string_ptr_2],dx 	;AN000;
 25898                                  	;mov	dx,offset trangroup:string_buf_ptr
 25899 0000356F BA[C380]                	mov	dx,string_buf_ptr	;AN000;
 25900                                  	;invoke	std_printf		;AN000;
 25901 00003572 E85C18                  	call	std_printf
 25902                                  	;mov	dx,offset trangroup:dest
 25903 00003575 BA[3B8B]                	mov	dx,DEST			;AN000; print out file name string
 25904 00003578 8916[158C]              	mov	[string_ptr_2],dx 	;AN000;
 25905                                  	;mov	dx,offset trangroup:string_buf_ptr
 25906 0000357C BA[C380]                	mov	dx,string_buf_ptr	;AN000;
 25907                                  	;invoke	std_printf		;AN000;
 25908 0000357F E84F18                  	call	std_printf
 25909                                  	;mov	dx,offset trangroup:Del_Y_N_Ptr
 25910 00003582 BA[D87F]                	mov	dx,Del_Y_N_Ptr		;AN000; issue ", Delete (Y/N)?" message
 25911                                  	;invoke	std_printf		;AN000;
 25912 00003585 E84918                  	call	std_printf
 25913                                  
 25914                                  ;;M029	mov	si,80H			;AN000; set up buffer for input
 25915                                  ;;M029	mov	dx,si			;AN000;
 25916                                  ;;M029	mov	word ptr [si],combuflen ;AN000;
 25917                                  ;;M029	mov	ax,(std_con_input_flush shl 8) or std_con_string_input	;AN000;
 25918                                  ;;M029	int	21h			;AN000; get input from the user
 25919                                  ;;M029	lodsw				;AN000;
 25920                                  ;;M029	or	ah,ah			;AN000; was a character entered?
 25921                                  ;;M029	jz	short slashp_askagn	;AN000; no - ask again
 25922                                  ;;M029	invoke	scanoff 		;AN000; scan off leading delimiters
 25923                                  
 25924                                  ;	Get a single character input.
 25925                                  
 25926                                  	;;mov	ax,(STD_CON_INPUT_FLUSH shl 8) or STD_CON_INPUT	;M029
 25927                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT
 25928 00003588 B8010C                  	mov	ax,0C01h
 25929 0000358B CD21                    	int	21h			;M029
 25930                                  
 25931 0000358D E87C01                  	call	char_in_xlat		;AN000; yes - upper case it
 25932                                  	;retc				;AN000; return if function not supported
 25933                                  	; 19/03/2023
 25934 00003590 7301                    	jnc	short slashp_check_yn
 25935                                  slashp_ans_no:
 25936 00003592 C3                      	retn
 25937                                  
 25938                                  slashp_check_yn:
 25939                                  	; 19/03/2023
 25940                                  	; AL = 0 if it was (country depended) NO character
 25941                                  	; AL = 1 if it was (country depenced) YES character
 25942                                  
 25943                                  	;cmp	al,capital_n		;AN000; was it no?
 25944                                  	;cmp	al,0
 25945 00003593 20C0                    	and	al,al ; 0
 25946 00003595 7420                    	jz	short next_del_file	;AN000; yes - don't delete file
 25947                                  	;cmp	al,capital_y		;AN000; was it yes?
 25948                                  	;cmp	al,1
 25949 00003597 FEC8                    	dec	al  ; 1-> 0 --> zf = 1
 25950                                  	;jz	short delete_this_file	;AN000; yes - delete the file
 25951                                  	;jmp	short slashp_askagn	;AN000; it was neither - ask again
 25952                                  	; 19/03/2023
 25953 00003599 75BE                    	jnz	short slashp_askagn
 25954                                  
 25955                                  delete_this_file:			;AN000;
 25956 0000359B B413                    	mov	ah,FCB_Delete ; 13h	;AN000; delete the file
 25957                                  	;mov	dx,offset trangroup:destdir
 25958 0000359D BA[6B8B]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 25959 000035A0 CD21                    	int	21h			;AN000;
 25960 000035A2 FEC0                    	inc	al			;AN000; did an error occur?
 25961 000035A4 7511                    	jnz	short next_del_file	;AN000; no - get next file
 25962                                  ;
 25963                                  ;M041; Begin changes
 25964                                  ; We got an error deleting the file. If this is access denied, we can go on
 25965                                  ;to the next file after printing an error message.
 25966                                  ;
 25967                                  	;invoke	Get_ext_error_number	;see what error we got
 25968 000035A6 E847E7                  	call	get_ext_error_number
 25969 000035A9 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 25970                                  					;is it access denied?
 25971 000035AC 759C                    	jne	short stop_del		;no, some other error
 25972                                  	;invoke	CrLf2			;print a CR-LF
 25973 000035AE E820F0                  	call	CRLF2
 25974                                  	;invoke set_ext_error_msg	;error message
 25975 000035B1 E82CE7                  	call	Set_Ext_Error_Msg
 25976                                  	;invoke	std_eprintf		;"Access denied"
 25977 000035B4 E81218                  	call	std_eprintf
 25978                                  	; 26/04/2023
 25979                                  	;jmp	short next_del_file	;try next file
 25980                                  	; 26/04/2023
 25981                                  ;stop_del:
 25982                                  ;;
 25983                                  ;;M041; End changes
 25984                                  ;;
 25985                                  ;	jmp	eraerr			;AN022; go to error exit - need long jmp
 25986                                  
 25987                                  next_del_file:				;AN000;
 25988                                  ;
 25989                                  ; M050 - begin
 25990                                  ; 	Norton Utilities 5.0 has a bug. DiskMon when invoked
 25991                                  ;       with /protect+ and /light+ makes it intercept all
 25992                                  ;       deletes. This hook does not save and restore the DTA correctly.
 25993                                  ;       They save the DWORD in a WORD by mistake! They save both the
 25994                                  ;       segment and the offset in the SAME variable (WORD)!!!
 25995                                  ;
 25996 000035B7 B41A                    	mov	ah,Set_DMA ; 1Ah
 25997                                  	;mov	dx,offset trangroup:destdir
 25998 000035B9 BA[6B8B]                	mov	dx,DESTDIR
 25999 000035BC CD21                    	int	21h
 26000                                  ;
 26001                                  ; M050 - end
 26002                                  
 26003 000035BE B412                    	mov	ah,Dir_Search_Next ; 12h
 26004                                  					;AN000; search for another file
 26005 000035C0 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000;
 26006 000035C3 CD21                    	int	21h			;AN000;
 26007 000035C5 FEC0                    	inc	al			;AN000; was a file found?
 26008                                  	;jz	short slash_p_exit	;AN000; no - exit
 26009                                  	;jmp	delete_prompt_loop	;AN000; yes - continue (need long jump)
 26010                                  	; 26/04/2023
 26011 000035C7 7583                    	jnz	short delete_prompt_loop
 26012                                  
 26013                                  slash_p_exit:
 26014                                  	;invoke	get_ext_error_number	;AN022; get the extended error number
 26015 000035C9 E824E7                  	call	get_ext_error_number
 26016 000035CC 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	;AN022; was error file not found?
 26017 000035CF 7403                    	jz	short good_erase_exit 	;AN022; yes - clean exit
 26018 000035D1 E95FE4                  	jmp	extend_setup		;AN022; go issue error message
 26019                                  
 26020                                  good_erase_exit:
 26021                                  	;invoke	restudir		;AN000; we're finished - restore user's dir
 26022 000035D4 E8B7EE                  	call	RestUDir
 26023                                  	;call	CRLF2			;AN000; print out carriage return, line feed
 26024                                  	;retn				;AN000; exit
 26025                                  	; 19/03/2023
 26026 000035D7 E9F7EF                  	jmp	CRLF2
 26027                                  
 26028                                  ; =============== S U B	R O U T	I N E =======================================
 26029                                  
 26030                                  ; ECHO, BREAK, and VERIFY commands. Check for "ON" and "OFF"
 26031                                  
 26032                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26033                                  _ECHO:
 26034 000035DA E89900                  	call	ON_OFF
 26035 000035DD 7212                    	jb	short DOEMES
 26036 000035DF 8E1E[A58A]              	mov	ds,[RESSEG]
 26037 000035E3 7506                    	jnz	short ECH_OFF
 26038 000035E5 800E[8801]01            	or	byte [EchoFlag],1
 26039 000035EA C3                      	retn
 26040                                  
 26041                                  ECH_OFF:
 26042 000035EB 8026[8801]FE            	and	byte [EchoFlag],0FEh
 26043 000035F0 C3                      	retn
 26044                                  
 26045                                  	; 19/03/2023
 26046                                  	; MSDOS 6.0 (& MSDOS 5.0)
 26047                                  ;CERRORJ:
 26048                                  	;jmp	cerror
 26049                                  
 26050                                  ; There was no discrenable ON or OFF after the ECHO. If there is nothing but
 26051                                  ; delimiters on the command line, we issue the ECHO is ON/OFF message.
 26052                                  
 26053                                  DOEMES:
 26054                                  	; 19/03/2023
 26055                                  	; MSDOS 6.0
 26056                                  	;cmp	cl,0		;AC000; was anything on the line?
 26057 000035F1 20C9                    	and	cl,cl
 26058 000035F3 7409                    	jz	short PECHO	; just display current state.
 26059 000035F5 BA8200                  	mov	dx,82h		; Skip one char after "ECHO"
 26060 000035F8 E82FF0                  	call	CRPRINT
 26061 000035FB E9D3EF                  	jmp	CRLF2
 26062                                  
 26063                                  	; 19/03/2023
 26064                                  	; MSDOS 3.3
 26065                                  	;call	MOVE_TO_FIRST_ARG
 26066                                  	;jz	short PECHO
 26067                                  	;mov	dx,82h
 26068                                  	;call	CRPRINT
 26069                                  	;jmp	CRLF2
 26070                                  
 26071                                  PECHO:
 26072                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26073 000035FE 8E1E[A58A]              	mov	ds,[RESSEG]
 26074 00003602 8A1E[8801]              	mov	bl,[EchoFlag]
 26075 00003606 0E                      	push	cs
 26076 00003607 1F                      	pop	ds
 26077 00003608 80E301                  	and	bl,1
 26078 0000360B BA[7F80]                	mov	dx,EchoMes_Ptr
 26079 0000360E EB24                    	jmp	short PYN
 26080                                  
 26081                                  ; ---------------------------------------------------------------------------
 26082                                  
 26083                                  	; 19/03/2023
 26084                                  	; MSDOS 3.3
 26085                                  CERRORJ:
 26086 00003610 E93FF3                  	jmp	cerror
 26087                                  
 26088                                  ; =============== S U B	R O U T	I N E =======================================
 26089                                  
 26090                                  	; 19/03/2023
 26091                                  	; MSDOS 3.3
 26092                                  ;MOVE_TO_FIRST_ARG:
 26093                                  	;mov	si,81h
 26094                                  	;call	SCANOFF
 26095                                  	;cmp	al,0Dh
 26096                                  	;retn
 26097                                  
 26098                                  ; =============== S U B	R O U T	I N E =======================================
 26099                                  
 26100                                  CNTRLC:
 26101 00003613 E86000                  	call	ON_OFF
 26102 00003616 B80133                  	mov	ax,(Set_CTRL_C_Trapping<<8)|1 ; 3301h
 26103 00003619 720C                    	jc	short PCNTRLC
 26104 0000361B 7505                    	jnz	short CNTRLC_OFF
 26105 0000361D B201                    	mov	dl,1
 26106 0000361F CD21                    	int	21h	; DOS -	EXTENDED CONTROL-BREAK CHECKING
 26107                                  			; AL = 00h get state / 01h set state / 02h set AND get
 26108                                  			; DL = 00h for OFF or 01h for ON
 26109 00003621 C3                      	retn
 26110                                  
 26111                                  ; ---------------------------------------------------------------------------
 26112                                  
 26113                                  CNTRLC_OFF:
 26114 00003622 30D2                    	xor	dl,dl
 26115 00003624 CD21                    	int	21h		; Turn off ^C check
 26116 00003626 C3                      	retn
 26117                                  
 26118                                  ; ---------------------------------------------------------------------------
 26119                                  
 26120                                  PCNTRLC:
 26121                                  	; 19/03/2023
 26122                                  	; MSDOS 6.0
 26123                                  	;cmp	cl,0		;AC000; rest of line blank?
 26124 00003627 08C9                    	or	cl,cl
 26125 00003629 75E5                    	jnz	short CERRORJ 	; no, oops!
 26126                                  
 26127                                  	; 19/03/2023
 26128                                  	; MSDOS 3.3
 26129                                  	;call	MOVE_TO_FIRST_ARG
 26130                                  	;jnz	short CERRORJ
 26131                                  ;pccont:
 26132                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26133 0000362B 30C0                    	xor	al,al
 26134 0000362D CD21                    	int	21h		; get Ctrl-Break state (ah=33h)
 26135 0000362F 88D3                    	mov	bl,dl
 26136 00003631 BA[6380]                	mov	dx,CtrlcMes_Ptr
 26137                                  
 26138                                  ; ---------------------------------------------------------------------------
 26139                                  
 26140                                  PYN:	; write "ON" or "OFF" state 
 26141                                  
 26142                                  	; 26/04/2023
 26143                                  	; 19/03/2023
 26144                                  	; MSDOS 3.3
 26145                                  	;call	STD_PRINTF
 26146                                  	;mov	dx,ONMES_PTR	;AC000; get ON pointer
 26147                                  	;or	bl,bl
 26148                                  	;jnz	short PRINTVAL
 26149                                  	;mov	dx,OFFMES_PTR	;AC000; get OFF pointer
 26150                                  	
 26151                                  	; 26/04/2023
 26152                                  	; 19/03/2023
 26153                                  	; MSDOS 6.0
 26154 00003634 BE[9080]                	mov	si,ONMES_PTR
 26155 00003637 08DB                    	or	bl,bl
 26156 00003639 7503                    	jnz	short PRINTVAL
 26157 0000363B BE[8D80]                	mov	si,OFFMES_PTR
 26158                                  PRINTVAL:
 26159                                  	; 19/03/2023
 26160                                  	; MSDOS 3.3
 26161                                  	;jmp	STD_PRINTF
 26162                                  
 26163                                  	; 19/03/2023
 26164                                  	; MSDOS 6.0
 26165 0000363E 52                      	push	dx		;AN000; save offset of message block
 26166 0000363F 89D3                    	mov	bx,dx		;AN000; save offset value
 26167 00003641 AD                      	lodsw			;AN000; get message number of on or off
 26168 00003642 B6FF                    	mov	dh,util_msg_class ; -1 ; 0FFh
 26169                                  				;AN000; this is a utility message
 26170 00003644 E86D18                  	call	TSYSGETMSG	;AN000; get the address of the message
 26171                                  	;add	bx,5
 26172 00003647 83C305                  	add	bx,Ptr_off_pos	;AN000; point to offset of ON/OFF
 26173                                  	
 26174 0000364A 8937                    	mov	[bx],si		;AN000; put the offset in the message block
 26175 0000364C 5A                      	pop	dx		;AN000; get message back
 26176 0000364D E88117                  	call	std_printf	;AC000; go print message
 26177 00003650 C7070000                	mov	word [bx],0	;AN000; zero out message pointer
 26178 00003654 C3                      	retn			;AN000; exit
 26179                                  
 26180                                  ; =============== S U B	R O U T	I N E =======================================
 26181                                  
 26182                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.CO
 26183                                  VERIFY:
 26184 00003655 E81E00                  	call	ON_OFF
 26185 00003658 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 26186 0000365B 720A                    	jc	short PVERIFY
 26187 0000365D 7503                    	jnz	short VER_OFF
 26188 0000365F CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 26189                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 26190 00003661 C3                      	retn
 26191                                  
 26192                                  ; ---------------------------------------------------------------------------
 26193                                  
 26194                                  VER_OFF:
 26195 00003662 FEC8                    	dec	al
 26196 00003664 CD21                    	int	21h		; Turn off verify after write
 26197 00003666 C3                      	retn
 26198                                  
 26199                                  ; ---------------------------------------------------------------------------
 26200                                  
 26201                                  PVERIFY:
 26202                                  	; 19/03/2023
 26203                                  	; MSDOS 6.0
 26204                                  	;cmp	cl,0		;AC000; is rest of line blank?
 26205 00003667 20C9                    	and	cl,cl
 26206 00003669 75A5                    	jnz	short CERRORJ 	; nope...
 26207                                  
 26208                                  	 ;19/03/2023
 26209                                  	; MSDOS 3.3
 26210                                  	;call	MOVE_TO_FIRST_ARG
 26211                                  	;jnz	short CERRORJ
 26212                                  
 26213 0000366B B454                    	mov	ah,Get_Verify_On_Write ; 54h
 26214 0000366D CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 26215                                  				; Return: AL = 00h if flag OFF
 26216                                  				; AL = 01h if flag ON
 26217 0000366F 88C3                    	mov	bl,al
 26218 00003671 BA[7180]                	mov	dx,VeriMes_Ptr
 26219 00003674 EBBE                    	jmp	short PYN
 26220                                  
 26221                                  ; =============== S U B	R O U T	I N E =======================================
 26222                                  
 26223                                  ; ****************************************************************
 26224                                  ; *
 26225                                  ; * ROUTINE:	 ON_OFF
 26226                                  ; *
 26227                                  ; * FUNCTION:	 Parse the command line for an optional ON or
 26228                                  ; *		 OFF string for the BREAK, VERIFY, and ECHO
 26229                                  ; *		 routines.
 26230                                  ; *
 26231                                  ; * INPUT:	 command line at offset 81H
 26232                                  ; *		 PARSE_BREAK control block
 26233                                  ; *
 26234                                  ; * OUTPUT:	 If carry is clear
 26235                                  ; *		    If ON is found
 26236                                  ; *		       Zero flag set
 26237                                  ; *		    If OFF is found
 26238                                  ; *		       Zero flag clear
 26239                                  ; *		 If carry set
 26240                                  ; *		    If nothing on command line
 26241                                  ; *		       CL set to zero
 26242                                  ; *		    If error
 26243                                  ; *		       CL contains error value from parse
 26244                                  ; *
 26245                                  ; ****************************************************************
 26246                                  
 26247                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26248                                  ON_OFF:
 26249 00003676 BE8100                  	mov	si,81h
 26250                                  
 26251                                  	; 19/03/2023
 26252                                  	; MSDOS 3.3
 26253                                  	;call	SCANOFF		; scan off leading blanks & equal
 26254                                  	;cmp	al,0Dh		; are we at end of line?
 26255                                  	;je	short BAD_ONF	; yes, return error
 26256                                  	;lodsw
 26257                                  	;or	ax,2020h	; convert to lowercase
 26258                                  	;cmp	ax,6E6Fh ;'on'
 26259                                  	;je	short ON_CHECK
 26260                                  	;cmp	ax,666Fh ;'of'
 26261                                  	;jne	short BAD_ONF
 26262                                  	;lodsb
 26263                                  	;or	al,20h		; convert to lowercase		
 26264                                  	;cmp	al,66h	 ; 'f'
 26265                                  	;jne	short BAD_ONF	
 26266                                  	;or	al,66h ; or al,'f'
 26267                                  	;jmp	short OFF_CHECK
 26268                                  ;ON_CHECK:
 26269                                  	;xor	al,al
 26270                                  ;OFF_CHECK:
 26271                                  	;lahf
 26272                                  	;mov	bx,ax
 26273                                  	;call	SCANOFF		; scan off leading blanks & equal
 26274                                  	;cmp	al,0Dh		; are we at end of line?	
 26275                                  	;jne	short BAD_ONF	; no, return error
 26276                                  	;mov	ax,bx
 26277                                  	;sahf
 26278                                  	;clc
 26279                                  	;retn
 26280                                  
 26281                                  	; 19/03/2023
 26282                                  	; MSDOS 6.0
 26283                                  scan_on_off:			;AN032; scan off leading blanks & equal
 26284 00003679 AC                      	lodsb			;AN032; get a char
 26285                                  	;cmp	al,blank	;AN032; if whitespace
 26286 0000367A 3C20                    	cmp	al,20h
 26287 0000367C 74FB                    	je	short scan_on_off
 26288                                  				;AN032;    keep scanning
 26289 0000367E 3C09                    	cmp	al,tab_chr	;AN032; if tab
 26290                                  	;cmp	al,09h
 26291 00003680 74F7                    	je	short scan_on_off
 26292                                  				;AN032;    keep scanning
 26293                                  	;cmp	al,equal_chr	;AN032; if equal char
 26294 00003682 3C3D                    	cmp	al,'=' ; 3Dh
 26295 00003684 7401                    	je	short parse_on_off
 26296                                  				;AN032;    start parsing
 26297 00003686 4E                      	dec	si		;AN032; if none of above - back up
 26298                                  
 26299                                  parse_on_off:			;AN032;    and start parsing
 26300 00003687 BF[6F84]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26301 0000368A 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 26302 0000368C 31D2                    	xor	dx,dx		;AN000;
 26303 0000368E E88A0C                  	call	cmd_parse	;AC000; call parser
 26304                                  	;cmp	ax,-1 ; 0FFFFh
 26305 00003691 83F8FF                  	cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 26306 00003694 742E                    	je	short BADONF	;AC000; yes, return error
 26307                                  	;cmp	ax,RESULT_NO_ERROR ;AN000; did an error occur
 26308                                  	;cmp	ax,0
 26309 00003696 21C0                    	and	ax,ax ; ax = 0 ?
 26310 00003698 7404                    	jz	short on_off_there
 26311                                  				;AN000; no - continue
 26312 0000369A 89C1                    	mov	cx,ax		;AN000; yes - set cl to error code
 26313 0000369C EB26                    	jmp	short BADONF	;AN000; return error
 26314                                  
 26315                                  on_off_there:
 26316 0000369E 803E[5495]FF            	cmp	byte [PARSE1_CODE],-1 ; 0FFh
 26317                                  				;AN014; was a valid positional present?
 26318 000036A3 7505                    	jnz	short good_on_off
 26319                                  				;AN014; yes - continue
 26320 000036A5 B90A00                  	mov	cx,BadParm_Ptr	;AN014; something other than ON/OFF
 26321                                  	;mov	cx,10 ; 0Ah
 26322 000036A8 EB1A                    	jmp	short BADONF	;AN014; return error
 26323                                  
 26324                                  good_on_off:				;AN014;
 26325 000036AA 31C0                    	xor	ax,ax		;AC000; set up return code for
 26326 000036AC 0A06[5495]              	or	al,[PARSE1_CODE]
 26327                                  				;AC000;    ON or OFF in AX
 26328 000036B0 9C                      	pushf			;AN000; save flags
 26329 000036B1 BF[6F84]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26330 000036B4 31D2                    	xor	dx,dx		;AN000;
 26331 000036B6 E8620C                  	call	cmd_parse	;AN000; call parser
 26332 000036B9 83F8FF                  	cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 26333                                  	;cmp	ax,-1 ; 0FFFFh
 26334 000036BC 7503                    	jne	short BADONF_flags
 26335                                  				;AN000; NO, return error
 26336 000036BE 9D                      	popf			;AN000; restore flags
 26337 000036BF F8                      	clc			;AC000; no error
 26338                                  	;jmp	short on_off_end
 26339                                  				;AN000; return to caller
 26340                                  	; 26/04/2023
 26341 000036C0 C3                      	retn
 26342                                  
 26343                                  BADONF_flags:
 26344 000036C1 89C1                    	mov	cx,ax
 26345 000036C3 9D                      	popf
 26346                                  
 26347                                  ; ---------------------------------------------------------------------------
 26348                                  
 26349                                  ; No discernable ON or OFF has been found. Put an error message pointer in DX
 26350                                  ; and return the error
 26351                                  
 26352                                  BADONF:
 26353 000036C4 BA[4080]                	mov	dx,bad_on_off_ptr
 26354 000036C7 F9                      	stc
 26355                                  on_off_end:
 26356 000036C8 C3                      	retn
 26357                                  
 26358                                  ; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26359                                  %if 0
 26360                                  
 26361                                  ;============================================================================
 26362                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 26363                                  ;============================================================================
 26364                                  ; 02/10/2018 - Retro DOS v3.0
 26365                                  
 26366                                  ; Print volume ID info
 26367                                  
 26368                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2982h
 26369                                  
 26370                                  ; ---------------------------------------------------------------------------
 26371                                  
 26372                                  PRINTVOL:
 26373                                  	push	ax		; AX return from SEARCH_FIRST for VOL ID
 26374                                  	mov	al,[FCB] ; 5Ch	; get drive letter
 26375                                  	add	al,'@'
 26376                                  	cmp	al,'@'
 26377                                  	jnz	short DRVOK
 26378                                  	mov	al,[CURDRV]
 26379                                  	add	al,[CAPITAL_A]
 26380                                  DRVOK:
 26381                                  	mov	[VOL_DRV],al	; get drive letter into argument
 26382                                  	pop	ax		; get return code back
 26383                                  	mov	dx,NOVOL ; "has	no label" 
 26384                                  	or	al,al		; volume label found?
 26385                                  	jnz	short PRINTVOL2	; print no volume message
 26386                                  GOODVOL:
 26387                                  	; MSDOS 3.3
 26388                                  	mov	di,CHARBUF
 26389                                  	mov	dx,di
 26390                                  	mov	si,IS	; "is "
 26391                                  	call	STRCPY
 26392                                  	dec	di
 26393                                  	mov	si,DIRBUF+8
 26394                                  	mov	cx,11
 26395                                  	rep	movsb
 26396                                  	xor	ax,ax
 26397                                  	;xor	al,al  ; MSDOS 6.0
 26398                                  	stosb			; store a zero to terminate the string
 26399                                  PRINTVOL2:
 26400                                  	mov	[VOLNAME_ADDR],dx
 26401                                  	mov	dx,VOLMESPTR
 26402                                  	jmp	PRINTF_CRLF
 26403                                  
 26404                                  	; MSDOS 6.0
 26405                                  ;drvok:
 26406                                  ;	mov	vol_drv,al	;AC000; get drive letter into argument
 26407                                  ;	pop	ax		;AC000; get return code back
 26408                                  ;	or	al,al		;AC000; volume label found?
 26409                                  ;	jz	Get_vol_name	;AC000; volume label exists - go get it
 26410                                  ;	mov	dx,offset trangroup:VolMes_ptr_2 
 26411                                  ;				;AC000; set up no volume message
 26412                                  ;	jmp	short print_serial ;AC000; go print it
 26413                                  ;
 26414                                  ;Get_vol_name:
 26415                                  ;	mov	di,offset trangroup:charbuf
 26416                                  ;	mov	dx,di
 26417                                  ;	mov	si,offset trangroup:dirbuf + 8	;AN000;  3/3/KK
 26418                                  ;	mov	cx,11				;AN000;  3/3/KK
 26419                                  ;	rep	movsb				;AN000;  3/3/KK
 26420                                  ;
 26421                                  ;	xor	al,al		;AC000; store a zero to terminate the string
 26422                                  ;	stosb
 26423                                  ;	mov	dx,offset trangroup:VolMes_ptr	;AC000; set up message
 26424                                  ;
 26425                                  ;PRINT_SERIAL:
 26426                                  ;
 26427                                  ;; Attempt to get the volume serial number from the disk.  If an error
 26428                                  ;; occurs, do not print volume serial number.
 26429                                  ;
 26430                                  ;	push	dx		;AN000; save message offset
 26431                                  ;	mov	ax,(GetSetMediaID SHL 8) 
 26432                                  ;				;AC036; Get the volume serial info
 26433                                  ;	mov	bl,DS:[FCB]	;AN000; get drive number from FCB
 26434                                  ;	mov	dx,offset trangroup:vol_ioctl_buf ;AN000;target buffer
 26435                                  ;	int	21h		;AN000; do the call
 26436                                  ;	pop	dx		;AN000; get message offset back
 26437                                  ;	jc	printvol_end	;AN000; if error, just go print label
 26438                                  ;	call	std_printf	;AC000; go print volume message
 26439                                  ;	mov	al,blank	;AN051; Print out a blank
 26440                                  ;	invoke	print_char	;AN051;   before volume message
 26441                                  ;	mov	dx,offset trangroup:VolSerMes_ptr 
 26442                                  ;				;AN000; get serial number message
 26443                                  ;printvol_end:
 26444                                  ;	jmp	std_printf	;AC000; go print and exit
 26445                                  
 26446                                  %endif
 26447                                  
 26448                                  ;============================================================================
 26449                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (2)
 26450                                  ;============================================================================
 26451                                  ; 02/10/2018 - Retro DOS v3.0
 26452                                  
 26453                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29BFh
 26454                                  
 26455                                  ; =============== S U B	R O U T	I N E =======================================
 26456                                  
 26457                                  	; 20/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26458                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3876h
 26459                                  	
 26460                                  PRINT_DATE:
 26461                                  	; 20/03/2023
 26462                                  	; MSDOS 3.3
 26463                                  	;push	es
 26464                                  	;push	di
 26465                                  	;push	cs
 26466                                  	;pop	es
 26467                                  	;mov	di,ARG_BUF
 26468                                  	;mov	ah,Get_Date ; 2Ah
 26469                                  	;int	21h	; DOS -	GET CURRENT DATE
 26470                                  	;		; Return: DL = day,DH = month,	CX = year
 26471                                  	;		; AL = day of the week (0=Sunday,1=Monday,etc.)
 26472                                  	;cbw
 26473                                  	;call	GETDATE
 26474                                  	;call	P_DATE
 26475                                  	;xor	al,al
 26476                                  	;stosb
 26477                                  	;mov	dx,ARG_BUF_PTR
 26478                                  	;call	STD_PRINTF
 26479                                  		; 20/03/2023 (MSDOS 3.3 COMMAND.COM - TRANGROUP:29DAh)
 26480                                  	;pop	es ; !!??!! 
 26481                                  	;pop	di
 26482                                  	;retn
 26483                                  
 26484                                  	; 20/03/2023
 26485                                  	; MSDOS 6.0
 26486 000036C9 06                      	push	es
 26487 000036CA 57                      	push	di
 26488 000036CB 0E                      	push	cs
 26489 000036CC 07                      	pop	es
 26490 000036CD E81300                  	call	GetDate 		; get date
 26491 000036D0 86F2                    	xchg	dh,dl			;AN000; switch month & day
 26492 000036D2 890E[F780]              	mov	[promptDat_yr],cx 	;AC000; put year into message control block
 26493 000036D6 8916[F980]              	mov	[promptDat_moday],dx	;AC000; put month and day into message control block
 26494 000036DA BA[E780]                	mov	dx,promptdat_ptr	;AC000; set up message for output
 26495 000036DD E8F116                  	call	std_printf
 26496                                  	;AD061; mov word [promptDat_yr],0 ;AC000; reset year, month and day
 26497                                  	;AD061; mov word [promptDat_moday],0 ;AC000; pointers in control block
 26498 000036E0 5F                      	pop	di			;AC000; restore di,es
 26499 000036E1 07                      	pop	es			;AC000;
 26500 000036E2 C3                      	retn
 26501                                  
 26502                                  ; ---------------------------------------------------------------------------
 26503                                  
 26504                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26505                                  
 26506                                  ;GETDATE:
 26507                                  	; 21/03/2023
 26508                                  	; MSDOS 3.3
 26509                                  	;mov	si,ax
 26510                                  	;shl	si,1
 26511                                  	;add	si,ax
 26512                                  	;add	si,WEEKTAB ; "SunMonTueWedThuFriSat"
 26513                                  	;mov	bx,cx
 26514                                  	;mov	cx,3
 26515                                  	;rep	movsb
 26516                                  	;mov	al,' '
 26517                                  	;stosb
 26518                                  	;retn
 26519                                  
 26520                                  	; 21/03/2023
 26521                                  	; MSDOS 6.0
 26522                                  
 26523                                  ; Do GET DATE system call and set up 3 character day of week in ARG_BUF
 26524                                  ; for output. Date will be returned in CX,DX.
 26525                                  
 26526                                  GetDate:
 26527 000036E3 BF[FA92]                	mov	di,Arg_Buf		;AC000; target for day of week
 26528 000036E6 B42A                    	mov	ah,Get_Date ;2Ah	;AC000; get current date
 26529 000036E8 CD21                    	int	21h			;AC000; Get date in CX:DX
 26530 000036EA 98                      	cbw				;AC000;
 26531 000036EB 51                      	push	cx			;AN000; save date returned in
 26532 000036EC 52                      	push	dx			;AN000;  CX:DX
 26533 000036ED 89C6                    	mov	si,ax
 26534 000036EF D1E6                    	shl	si,1
 26535 000036F1 01C6                    	add	si,ax			; SI=AX*3
 26536 000036F3 89F1                    	mov	cx,si			;AN000; save si
 26537 000036F5 A1[B37F]                	mov	ax,[WeekTab]		;AN000; get message number of weektab
 26538 000036F8 B6FF                    	mov	dh,util_msg_class ;0FFh	;AN000; this is a utility message
 26539 000036FA 57                      	push	di			;AN000; save argument buffer
 26540 000036FB E8B617                  	call	TSYSGETMSG		;AN000; get the address of the message
 26541 000036FE 5F                      	pop	di			;AN000; retrieve argument buffer
 26542 000036FF 01CE                    	add	si,cx			;AC000; get day of week
 26543 00003701 B90300                  	mov	cx,3
 26544 00003704 F3A4                      	rep	movsb
 26545 00003706 B000                    	mov	al,END_OF_LINE_OUT ; 0	;AC000; terminate the string
 26546 00003708 AA                      	stosb
 26547 00003709 5A                      	pop	dx			;AN000; get back date
 26548 0000370A 59                      	pop	cx			;AN000;
 26549 0000370B C3                      	retn
 26550                                  
 26551                                  ; =============== S U B	R O U T	I N E =======================================
 26552                                  
 26553                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26554                                  
 26555                                  	; MSDOS 6.0
 26556                                  
 26557                                  ; This routine determines whether the character in AL is a
 26558                                  ; Yes or No character. On return, if AL=0, the character is
 26559                                  ; No, if AL=1, the character is Yes.
 26560                                  
 26561                                  ;	assume	ds:trangroup
 26562                                  
 26563                                  char_in_xlat:	; proc	near
 26564                                  	; 21/03/2023
 26565 0000370C 88C2                    	mov	dl,al			;AC000; get character into DX
 26566 0000370E 30F6                    	xor	dh,dh			;AC000;
 26567                                  	;mov	ax,(GetExtCntry<<8)+35	;AC000; Yes/No char call
 26568 00003710 B82365                  	mov	ax,6523h
 26569 00003713 CD21                    	int	21h			;AC000;
 26570 00003715 C3                      	retn
 26571                                  
 26572                                  ;char_in_xlat	endp
 26573                                  
 26574                                  ;============================================================================
 26575                                  ; TENV.ASM, MSDOS 6.0, 1991
 26576                                  ;============================================================================
 26577                                  ; 02/10/2018 - Retro DOS v3.0
 26578                                  
 26579                                  ;	Environment utilities and misc. routines
 26580                                  
 26581                                  ; MSDOS 6.0
 26582                                  ; ****************************************************************
 26583                                  ; *
 26584                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 26585                                  ; *
 26586                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 26587                                  ; *		 the character in AL from the file upper case table
 26588                                  ; *		 in DOS if character if above  ascii 128, else
 26589                                  ; *		 subtracts 20H if between "a" and "z".
 26590                                  ; *
 26591                                  ; * INPUT:	 AL	      char to be upper cased
 26592                                  ; *		 FUCASE_ADDR  set to the file upper case table
 26593                                  ; *
 26594                                  ; * OUTPUT:	 AL	      upper cased character
 26595                                  ; *
 26596                                  ; ****************************************************************
 26597                                  ;
 26598                                  ;assume	ds:trangroup				;AN000;
 26599                                  ;
 26600                                  ;upconv	proc	near				;AN000;
 26601                                  ;
 26602                                  ;	cmp	al,80h				;AN000;  see if char is > ascii 128
 26603                                  ;	jb	oth_fucase			;AN000;  no - upper case math
 26604                                  ;	sub	al,80h				;AN000;  only upper 128 chars in table
 26605                                  ;	push	ds				;AN000;
 26606                                  ;	push	bx				;AN000;
 26607                                  ;	mov	ds,[resseg]			;AN000;  get resident data segment
 26608                                  ;assume	ds:resgroup				;AN000;
 26609                                  ;	lds	bx,dword ptr FUCase_Addr+1	;AN000;  get table address
 26610                                  ;	add	bx,2				;AN000;  skip over first word
 26611                                  ;	xlat	ds:byte ptr [bx]		;AN000;  convert to upper case
 26612                                  ;	pop	bx				;AN000;
 26613                                  ;	pop	ds				;AN000;
 26614                                  ;assume	ds:trangroup				;AN000;
 26615                                  ;	jmp	short upconv_end		;AN000;  we finished - exit
 26616                                  ;
 26617                                  ;oth_fucase:					;AN000;
 26618                                  ;	cmp	al,small_a			;AC000; if between "a" and "z",
 26619                                  ;	jb	upconv_end			;AC000;     subtract 20h to get
 26620                                  ;	cmp	al,small_z			;AC000;    upper case equivalent.
 26621                                  ;	ja	upconv_end			;AC000;
 26622                                  ;	sub	al,20h				;AC000; Change lower-case to upper
 26623                                  ;
 26624                                  ;upconv_end:					;AN000;
 26625                                  ;	ret
 26626                                  ;
 26627                                  ;upconv	endp					;AN000;
 26628                                  
 26629                                  
 26630                                  ; =============== S U B	R O U T	I N E =======================================
 26631                                  
 26632                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29F2h
 26633                                  
 26634                                  ; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26635                                  %if 0
 26636                                  
 26637                                  UPCONV:
 26638                                  	cmp	al,80h
 26639                                  	jb	short OTH_UCASE
 26640                                  	sub	al,80h
 26641                                  	push	ds
 26642                                  	push	bx
 26643                                  	mov	ds,[RESSEG]
 26644                                  	lds	bx,[UPPERCASETBL]
 26645                                  	add	bx,2
 26646                                  	xlat
 26647                                  	pop	bx
 26648                                  	pop	ds
 26649                                  	jmp	short UPCONV_RETN
 26650                                  
 26651                                  OTH_UCASE:
 26652                                  	cmp	al,'a'
 26653                                  	jb	short UPCONV_RETN
 26654                                  	cmp	al,'z'
 26655                                  	ja	short UPCONV_RETN
 26656                                  	sub	al,20h
 26657                                  
 26658                                  UPCONV_RETN:
 26659                                  	retn
 26660                                  
 26661                                  %endif
 26662                                  
 26663                                  ;============================================================================
 26664                                  ; COPY.ASM, MSDOS 6.0, 1991
 26665                                  ;============================================================================
 26666                                  ; 01/10/2018 - Retro DOS v3.0
 26667                                  
 26668                                  ;	title	COMMAND COPY routines.
 26669                                  
 26670                                  ;/*
 26671                                  ; *                      Microsoft Confidential
 26672                                  ; *                      Copyright (C) Microsoft Corporation 1991
 26673                                  ; *                      All Rights Reserved.
 26674                                  ; */
 26675                                  
 26676                                  ;***	COPY.ASM
 26677                                  
 26678                                  ;Source files:  copy.asm, copypr1.asm, copypr2.asm
 26679                                  
 26680                                  
 26681                                  ;***	MODIFICATION HISTORY
 26682                                  
 26683                                  ;11/01/83 EE  Added a few lines at the end of SCANSRC2 to get multiple
 26684                                  ;	     file concatenations (eg copy a.*+b.*+c.*) to work properly.
 26685                                  ;11/02/83 EE  Commented out the code in CPARSE which added drive designators
 26686                                  ;	     to tokens which begin with path characters so that PARSELINE
 26687                                  ;	     will work correctly.
 26688                                  ;11/04/83 EE  Commented out the code in CPARSE that considered paren's to be
 26689                                  ;	     individual tokens. That distinction is no longer needed for
 26690                                  ;	     FOR loop processing.
 26691                                  ;11/17/83 EE  CPARSE upper case conversion is now flag dependent. Flag is
 26692                                  ;	     1 when Cparse is called from COPY.
 26693                                  ;11/17/83 EE  Took out the comment chars around code described in 11/04/83
 26694                                  ;	     mod. It now is conditional on flag like previous mod.
 26695                                  ;11/21/83 NP  Added printf
 26696                                  ;12/09/83 EE  CPARSE changed to use CPYFLAG to determine when a colon should
 26697                                  ;	     be added to a token.
 26698                                  ;05/30/84 MZ  Initialize all copy variables. Fix confusion with destclosed
 26699                                  ;	     NOTE: DestHand is the destination handle. There are two
 26700                                  ;	     special values: -1 meaning destination was never opened and
 26701                                  ;	     0 which means that the destination has been openned and
 26702                                  ;	     closed.
 26703                                  ;06/01/84 MZ  Above reasoning totally specious. Returned things to normal
 26704                                  ;06/06/86 EG  Change to fix problem of source switches /a and /b getting
 26705                                  ;	     lost on large and multiple file (wildcard) copies.
 26706                                  ;06/09/86 EG  Change to use xnametrans call to verify that source and
 26707                                  ;	     destination are not equal.
 26708                                  ;
 26709                                  ;06/24/90 DO  If the destination of a file concatenation is the same as
 26710                                  ;	     first source file AND we run out of disk space before
 26711                                  ;	     completing the concatenation, restore the first source
 26712                                  ;	     file as best we can. See SeekEnd and CopErr. Bug #859.
 26713                                  ;
 26714                                  ;M031 SR 10/11/90  Bug #3069. Use deny write sharing mode to open files
 26715                                  ;		instead of compatibility mode. This gives lesser sharing
 26716                                  ;		violations when files are opened for read on a copy.
 26717                                  
 26718                                  ; ---------------------------------------------------------------------------
 26719                                  ;***	COPY CODE
 26720                                  ; ---------------------------------------------------------------------------
 26721                                  
 26722                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2A15h
 26723                                  
 26724                                  ; 23/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26725                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 38C3h
 26726                                  
 26727                                  COPY:
 26728                                  	; 	Initialize internal variables.
 26729                                  
 26730 00003716 31C0                    	xor	ax,ax		; AX = 0
 26731 00003718 A3[178C]                	mov	[Copy_num],ax	; # files copied (destinations) = 0
 26732 0000371B A3[458D]                	mov	[SRCPT],ax	; cmd line ptr for source scan = 0
 26733 0000371E A3[918C]                	mov	[SrcTail],ax	; ptr to last element of source pathname = 0
 26734 00003721 A2[C48A]                	mov	[CFLAG],al	; 'destination file created' = false
 26735 00003724 A3[C88A]                	mov	[NXTADD],ax	; ptr into TPA buffer = 0
 26736 00003727 A3[C08A]                	mov	[DestSwitch],ax	; destination switches = none
 26737 0000372A A3[5B8D]                	mov	[STARTEL],ax	; CParse ptr to last pathname element = 0
 26738 0000372D A3[2E8C]                	mov	[DestTail],ax	; ptr to last element of dest pathname = 0
 26739 00003730 A2[C58A]                	mov	[DestClosed],al	; 'destination file closed' = false
 26740 00003733 A2[2D8C]                	mov	[DestSiz],al	; length of destination pathname = 0
 26741 00003736 A2[908C]                	mov	[SrcSiz],al	; length of source pathname = 0
 26742 00003739 A2[308C]                	mov	[DestInfo],al	; destination pathname flags = none
 26743 0000373C A2[938C]                	mov	[SrcInfo],al	; source pathname flags = none
 26744 0000373F A2[478D]                	mov	[INEXACT],al	; 'inexact copy' = false
 26745 00003742 A2[2C8C]                	mov	[DestVars],al	; 'dest pathname is directory' = false  ;*!*
 26746 00003745 A2[8F8C]                	mov	[SrcVars],al	; 'source pathname is directory' = false
 26747 00003748 A2[8789]                	mov	[USERDIR1],al	; saved working directory = null
 26748 0000374B A2[488D]                	mov	[NOWRITE],al	; 'no write' (source = dest) = false
 26749 0000374E A2[B88A]                	mov	[RDEOF],al	; 'read end of file' = false
 26750 00003751 A3[EB8C]                	mov	[SRCHAND],ax	; source handle = 0
 26751 00003754 A3[508D]                	mov	[CPDATE],ax	; copy date = 0
 26752 00003757 A3[528D]                	mov	[CPTIME],ax	; copy time = 0
 26753 0000375A A2[ED8C]                	mov	[SRCISDEV],al	; 'source is device' = false
 26754                                  	; 23/03/2023
 26755                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM	
 26756 0000375D A2[588D]                	mov	[OCtrlZ],al	; 'Ctrl+Z removed from original' = false
 26757 00003760 A3[548D]                	mov	[OFilePtr_Lo],ax
 26758 00003763 A3[568D]                	mov	[OFilePtr_Hi],ax ; original destination file ptr = null
 26759 00003766 A2[4C8D]                	mov	[TERMREAD],al	; 'terminate read' = false
 26760 00003769 A2[0A8C]                	mov	[comma],al	; '"+,," found' = false
 26761 0000376C A2[0B8C]                	mov	[plus_comma],al ; '"+,," found last time' = false (?)
 26762 0000376F A2[978D]                	mov	[msg_flag],al	;AN022; 'non-utility msg issued' = false
 26763 00003772 A3[C28A]                	mov	[AllSwitch],ax	; all switches = none
 26764 00003775 A2[BB8A]                	mov	[ArgC],al	; source/dest argument count = 0
 26765 00003778 A2[4E8D]                	mov	[PLUS],al	; '"+" in command line' = false
 26766 0000377B A2[498D]                	mov	[BINARY],al	; 'binary copy' = false
 26767 0000377E A2[4D8D]                	mov	[ASCII],al	; 'ascii copy' = false
 26768 00003781 A3[D18A]                	mov	[FileCnt],ax	; # files copied (destinations) = 0
 26769 00003784 A3[4A8D]                	mov	[WRITTEN],ax	; 'destination written to' = false
 26770 00003787 A2[BA8A]                	mov	[Concat],al	; 'concatenating' = false
 26771 0000378A A2[8C8C]                	mov	[MELCOPY],al	; 'Mel Hallerman copy' = false
 26772 0000378D A3[8D8C]                	mov	[MELSTART],ax	; Mel Hallerman cmd line ptr = 0
 26773                                  
 26774                                  	;	Initialize buffers with double-nulls.
 26775                                  
 26776 00003790 A3[EE8C]                	mov	[ScanBuf],ax
 26777 00003793 A3[318C]                	mov	[DestBuf],ax
 26778 00003796 A3[948C]                	mov	[SrcBuf],ax
 26779 00003799 A3[F48B]                	mov	[SDIRBUF],ax
 26780 0000379C A3[AE8B]                	mov	[DIRBUF],ax
 26781 0000379F A3[6B8B]                	mov	[DestFcb],ax
 26782                                  
 26783 000037A2 A2[4F8D]                	mov	[objcnt],al	; # CParse cmd-line objects found = 0
 26784                                  		
 26785 000037A5 48                      	dec	ax ; -1		; AX = 0FFFFh
 26786 000037A6 A3[888C]                	mov	[DESTHAND],ax	; destination handle = 'never opened'
 26787 000037A9 A2[CA8A]                	mov	[FRSTSRCH],al	; 'first search for source' = true
 26788 000037AC A2[8B8C]                	mov	[FIRSTDEST],al	; 'first time for dest' = true
 26789 000037AF A2[2C8C]                	mov	[DestIsDir],al	; 'haven't analyzed destination' ; *!*
 26790                                  		
 26791 000037B2 BE8100                  	mov	si,81h		; SI = ptr to command line
 26792                                  	;mov	bl,[PLUS_CHR]	; BL = special delimiter = "+"
 26793                                  	; 23/03/2023
 26794 000037B5 B32B                    	mov	bl,'+'
 26795 000037B7 FE06[968D]              	inc	byte [expand_star] ; CParse 'expand * to ?s' = true
 26796 000037BB C606[198C]01            	mov	byte [cpyflag],1 ; CParse 'called from COPY' = true
 26797                                  
 26798                                  	;*	Scan the command line for destination information.
 26799                                  
 26800                                  DESTSCAN:
 26801 000037C0 31ED                    	xor	bp,bp			; BP = switch flag accumulator
 26802 000037C2 BF[EE8C]                	mov	di,ScanBuf		; ES:DI = ptr to pathname buf
 26803                                  	; 23/03/2023
 26804 000037C5 8936[0D8C]              	mov	[parse_last],si		;AN018; save cmd line ptr
 26805 000037C9 E88A09                  	call	cparse			; parse next object
 26806 000037CC 9C                      	pushf				; save CParse flags
 26807 000037CD FE06[4F8D]              	inc	byte [objcnt]		; count object
 26808 000037D1 F6C780                  	test	bh,80h
 26809 000037D4 7405                    	jz	short NOCOPY		; no "+" delimiter
 26810 000037D6 C606[4E8D]01            	mov	byte [PLUS],1		; "+" delimiter occurred
 26811                                  NOCOPY:
 26812 000037DB F6C701                  	test	bh,1
 26813 000037DE 742E                    	jz	short TESTP2		; not a switch
 26814                                  
 26815                                  	;	Found a switch.
 26816                                  
 26817                                  	; 23/03/2023 - Retro DOS v4.0 COMMAND.COM
 26818                                  	; MSDOS 6.0
 26819 000037E0 F7C51000                	test	bp,10h
 26820                                  	;test	bp,SwitchV ; 10h	;AN038; Verify requested?
 26821 000037E4 740B                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 26822 000037E6 F606[C28A]10            	test	byte [AllSwitch],10h
 26823                                  	;test	byte [AllSwitch],SwitchV ;AN038; Verify already entered?
 26824 000037EB 7404                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 26825                                  ;AD018; ;or	word [AllSwitch],FBadSwitch ;AN038; Set up bad switch
 26826                                  	;or	bp,FBadSwitch		;AN018; Set up bad switch
 26827 000037ED 81CD0040                	or	bp,4000h
 26828                                  NOT_SLASHV:
 26829 000037F1 092E[C08A]              	or	[DestSwitch],bp		; assume destination
 26830 000037F5 092E[C28A]              	or	[AllSwitch],bp		; keep tabs on all switches
 26831                                  
 26832                                  	; 23/03/2023
 26833                                  	; MSDOS 6.0
 26834                                  	;test	bp,not SwitchCopy	;AN018; Bad switch?
 26835 000037F9 F7C5E37F                	test	bp,7FE3h ; test bp,~SwitchCopy
 26836 000037FD 740A                    	jz	short NOT_BAD_SWITCH	;AN018; Switches are okay
 26837 000037FF 9D                      	popf				;AN018; fix up stack
 26838 00003800 B80300                  	mov	ax,BadSwt_Ptr ; 3	;AN018; get "Invalid switch" message number
 26839 00003803 E8C2E9                  	call	setup_parse_error_msg	;AN018; setup to print the message
 26840 00003806 E949F1                  	jmp	cerror			;AC018; exit
 26841                                  NOT_BAD_SWITCH:
 26842 00003809 9D                      	popf				; restore CParse flags
 26843 0000380A 7231                    	jc	short CHECKDONE		; found CR
 26844 0000380C EBB2                    	jmp	short DESTSCAN		; continue scanning for destination
 26845                                  TESTP2:
 26846 0000380E 9D                      	popf				; restore CParse flags
 26847 0000380F 722C                    	jc	short CHECKDONE		; found CR
 26848 00003811 F6C780                  	test	bh,80h
 26849 00003814 7504                    	jnz	short GOTPLUS		; found a "+pathname" argument
 26850 00003816 FE06[BB8A]              	inc	byte [ArgC]		; count independent pathname args
 26851                                  GOTPLUS:
 26852 0000381A 56                      	push	si			; save cmd line ptr
 26853 0000381B A1[5B8D]                	mov	ax,[STARTEL]		; AX = ptr to last path element
 26854 0000381E BE[EE8C]                	mov	si,ScanBuf		; SI = ptr to path string
 26855 00003821 29F0                    	sub	ax,si			; AX = offset of last element
 26856 00003823 BF[318C]                	mov	di,DestBuf		; DI = ptr to destination buf
 26857 00003826 01F8                    	add	ax,di			; AX = ptr to last element in
 26858                                  					;  destination path buffer
 26859 00003828 A3[2E8C]                	mov	[DestTail],ax		; save ptr to last element
 26860 0000382B 880E[2D8C]              	mov	[DestSiz],cl		; save path string length
 26861 0000382F 41                      	inc	cx			; CX = mov length (incl null)
 26862 00003830 F3A4                    	rep	movsb			; DestBuf = possible destination path
 26863 00003832 883E[308C]              	mov	[DestInfo],bh		; save CParse info flags
 26864                                  	;mov	word [DestSwitch],0	; clear destination switches
 26865                                  	; 10/08/2024
 26866 00003836 890E[C08A]              	mov	[DestSwitch],cx ; 0
 26867 0000383A 5E                      	pop	si			; SI = ptr into cmd line again
 26868 0000383B EB83                    	jmp	short DESTSCAN		;AC018; continue scanning for dest
 26869                                  
 26870                                  CHECKDONE:
 26871                                  	;	We reached the CR. The destination scan is finished.
 26872                                  
 26873                                  	;	Disallow "copy file1+" as file overwriting itself.
 26874                                  	;
 26875                                  	;	(Note that "copy file1+file2+" will be accepted, and
 26876                                  	;	equivalent to "copy file1+file2".)
 26877                                  
 26878                                  	;	Bugbug: it looks like "copy /x file1+" would slip
 26879                                  	;	through this check, since the switch would count
 26880                                  	;	as another object in ObjCnt.
 26881                                  
 26882 0000383D 803E[4E8D]01            	cmp	byte [PLUS],1		; "+" with
 26883 00003842 7514                    	jnz	short CDCONT
 26884 00003844 803E[BB8A]01            	cmp	byte [ArgC],1		; one arg,
 26885 00003849 750D                    	jnz	short CDCONT
 26886 0000384B 803E[4F8D]02            	cmp	byte [objcnt],2		; two objects..
 26887 00003850 7506                    	jnz	short CDCONT
 26888 00003852 BA[257F]                	mov	dx,OVERWR_PTR
 26889 00003855 E91A06                  	jmp	COPYERR			; is file overwrite
 26890                                  
 26891                                  CDCONT:
 26892 00003858 A0[4E8D]                	mov	al,[PLUS]		; AL = '"+" occurred'
 26893 0000385B A2[BA8A]                	mov	[Concat],al		; if "+" occurred, we're concatenating
 26894 0000385E D0E0                    	shl	al,1
 26895 00003860 D0E0                    	shl	al,1
 26896 00003862 A2[478D]                	mov	[INEXACT],al		; therefore making an inexact copy
 26897                                  	;mov	dx,BADARGSPTR ; MSDOS 3.3 ; 18/04/2023
 26898 00003865 A0[BB8A]                	mov	al,[ArgC]		; AL = # independent arguments
 26899                                  
 26900                                  	; 23/03/2023
 26901                                  	; MSDOS 3.3		
 26902                                  	;or	al,al
 26903                                  	;jz	short CERROR4J
 26904                                  	; MSDOS 6.0
 26905 00003868 08C0                    	or	al,al
 26906 0000386A 750B                    	jnz	short TRY_TOO_MANY	; more than 0 args; check if too many
 26907                                  		
 26908 0000386C BA[FC7E]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 26909 0000386F C706[FC7E]0200          	mov	word [extend_buf_ptr],LessArgs_Ptr ; 2
 26910                                  	;mov	word [extend_buf_ptr],2	; set msg # "param missing"
 26911 00003875 EB0D                    	jmp	short CERROR_PARSEJ	; take parse error exit		
 26912                                  
 26913                                  	; more than 0 args; check if too many
 26914                                  TRY_TOO_MANY:
 26915 00003877 3C02                    	cmp	al,2
 26916 00003879 7611                    	jbe	short ACOUNTOK		; <= 2 arguments - ok
 26917                                  
 26918                                  	; 23/03/2023
 26919                                  	; MSDOS 6.0
 26920 0000387B BA[FC7E]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 26921 0000387E C706[FC7E]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 26922                                  	;mov	word [extend_buf_ptr],1 ; set msg # "too many params"
 26923                                  CERROR_PARSEJ:
 26924 00003884 C606[FA7E]02            	mov	byte [msg_disp_class],parse_msg_class ; 2
 26925                                  					; parse error message	
 26926                                  CERROR4J:
 26927 00003889 E9C6F0                  	jmp	cerror
 26928                                  
 26929                                  ACOUNTOK:
 26930 0000388C BD[2C8C]                	mov	bp,DestVars		; BP = base of dest variables
 26931                                  
 26932 0000388F 3C01                    	cmp	al,1
 26933 00003891 7520                    	jnz	short GOT2ARGS
 26934                                  
 26935                                  	;	Only one independent pathname argument on command line.
 26936                                  	;	Set destination to d:*.*, where d: is current drive.
 26937                                  
 26938                                  	;	Bugbug: but is this appropriate for "copy x:file1+x:file2"?
 26939                                  	;	The two files would be appended as d:file1, rather than x:file1.
 26940                                  
 26941 00003893 A0[B98A]                	mov	al,[CURDRV]		; AL = current drive (0 = A)
 26942                                  	;add	al,[CAPITAL_A]		; AL = current drive letter
 26943                                  	; 23/03/2023
 26944 00003896 0441                    	add	al,'A'
 26945 00003898 B43A                    	mov	ah,':'			; AX = "d:"
 26946                                  	;mov	byte [bp+1],2
 26947 0000389A C6460102                	mov	byte [bp+VARSTRUC.SIZ],2 ; pathname length = 2
 26948                                  
 26949 0000389E BF[318C]                	mov	di,DestBuf		; ES:DI = ptr to dest path buf
 26950 000038A1 AB                      	stosw				; store "d:"
 26951                                  		
 26952 000038A2 C706[C08A]0000          	mov	word [DestSwitch],0	; clear destination switches
 26953                                  	;mov	byte [bp+4],2		
 26954 000038A8 C6460402                	mov	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 26955                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 26956                                  	;mov	byte [bp+0],0		
 26957 000038AC C6460000                	mov	byte [bp],0
 26958 000038B0 E87408                  	call	SETSTARS		; add wildcards
 26959                                  GOT2ARGS:
 26960                                  	;	If destination pathname is "d:", add full wildcard filename
 26961                                  
 26962                                  	;cmp	byte [bp+1],2
 26963 000038B3 807E0102                	cmp	byte [bp+VARSTRUC.SIZ],2
 26964 000038B7 7516                    	jnz	short NOTSHORTDEST	; not two chars, can't be "d:"
 26965 000038B9 B03A                    	mov	al,':'  ; 3Ah
 26966 000038BB 3806[328C]              	cmp	byte [DestBuf+1],al
 26967 000038BF 750E                    	jnz	short NOTSHORTDEST	; it's just a 2-character filename
 26968                                  	;or	byte [bp+4],2
 26969 000038C1 804E0402                	or	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 26970 000038C5 BF[338C]                	mov	di,DestBuf+2		; ES:DI = ptr after "d:"
 26971                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 26972                                  	;mov	byte [bp+0],0		
 26973 000038C8 C6460000                	mov	byte [bp],0
 26974 000038CC E85808                  	call	SETSTARS		; add wildcards
 26975                                  NOTSHORTDEST:
 26976                                  	;	If destination pathname ends with "\", try to make
 26977                                  	;	sure it's "d:\".
 26978                                  
 26979                                  	;mov	di,[bp+2]
 26980 000038CF 8B7E02                  	mov	di,[bp+VARSTRUC.TTAIL]	; DI = ptr to last path element
 26981 000038D2 803D00                  	cmp	byte [di],0
 26982 000038D5 7515                    	jnz	short CHKSWTCHES	; not a null, so last char not "\"
 26983                                  
 26984 000038D7 BA[3780]                	mov	dx,badcd_ptr
 26985 000038DA B03A                    	mov	al,':'
 26986 000038DC 3845FE                  	cmp	[di-2],al
 26987 000038DF 75A8                    	jne	short CERROR4J		; it's not "d:\", exit with error msg
 26988                                  	;mov	byte [bp+0],2
 26989                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; destination 'is a directory'
 26990 000038E1 C6460002                	mov	byte [bp],2
 26991                                  	;or	byte [bp+4],6
 26992 000038E5 804E0406                	or	byte [bp+VARSTRUC.INFO],6 ; destination wildcarded and contains
 26993                                  					  ;  path character
 26994 000038E9 E83B08                  	call	SETSTARS		; add wildcards
 26995                                  CHKSWTCHES:
 26996                                  	;	We have enough information about the destination for now.
 26997                                  
 26998                                  	;	Turn on verify if requested. Save the current verify flag.
 26999                                  
 27000                                  	; 23/03/2023
 27001                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM
 27002                                  	;mov	dx,BADPARMPTR
 27003                                  	
 27004 000038EC A1[C28A]                	mov	ax,[AllSwitch]		; AX = all switch flags
 27005                                  
 27006                                  	; 23/03/2023
 27007                                  	; MSDOS 3.3
 27008                                  	;;test	ax,~SWITCHCOPY ; 7FE3h
 27009                                  	;test	ax,NOT_SWITCHCOPY ; 7FE3h ; 13/10/2018
 27010                                  	;jnz	short CERROR4J
 27011                                  	
 27012                                  	; 23/03/2023
 27013                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27014                                  	;test	ax,SwitchV ; 10h
 27015                                  	; 18/04/2023
 27016                                  	;test	ax,10h
 27017 000038EF A810                    	test	al,10h  ; test al,SwitchV
 27018 000038F1 7414                    	jz	short NOVERIF		; no /v, no verify
 27019                                  
 27020 000038F3 B454                    	mov	ah,Get_Verify_On_Write ; 54h
 27021 000038F5 CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 27022                                  				; Return: AL = 00h if flag OFF
 27023                                  				; AL = 01h if flag ON
 27024 000038F7 1E                      	push	ds
 27025 000038F8 8E1E[A58A]              	mov	ds,[RESSEG]
 27026 000038FC 30E4                    	xor	ah,ah
 27027 000038FE A3[9001]                	mov	[VerVal],ax		; save current verify flag
 27028 00003901 1F                      	pop	ds
 27029 00003902 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 27030 00003905 CD21                    	int	21h		; DOS -	SET VERIFY FLAG
 27031                                  				; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 27032                                  NOVERIF:
 27033                                  	;*	Scan for first source.
 27034                                  
 27035 00003907 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27036 00003909 BE8100                  	mov	si,81h			; SI = ptr into command line
 27037                                  	;mov	bl,[PLUS_CHR]		; BL = special CParse delimiter = "+"
 27038                                  	; 23/03/2023
 27039 0000390C B32B                    	mov	bl,'+' ; 2Bh
 27040                                  SCANFSRC:
 27041 0000390E BF[EE8C]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27042 00003911 E84208                  	call	cparse			; parse first source pathname
 27043 00003914 F6C701                  	test	bh,1			; switch?
 27044 00003917 75F5                    	jnz	short SCANFSRC		; yes, try again
 27045 00003919 092E[C08A]              	or	[DestSwitch],bp		; include copy-wide switches on dest
 27046                                  
 27047                                  ;	Set ascii copying mode if concatenating, unless /b is specified.
 27048                                  
 27049                                  	; 23/03/2023
 27050 0000391D F7C50800                	test	bp,8
 27051                                  	;test	bp,SWITCHB
 27052 00003921 750C                    	jnz	short NOSETCASC		; /b - explicit binary copy
 27053 00003923 803E[BA8A]00            	cmp	byte [Concat],0
 27054 00003928 7405                    	jz	short NOSETCASC		; we're not concatenating
 27055 0000392A C606[4D8D]04            	mov	byte [ASCII],4
 27056                                  	;mov	byte [ASCII],SWITCHA	; set ascii copy
 27057                                  NOSETCASC:
 27058 0000392F E8B503                  	call	SOURCE_SET		; set source variables
 27059 00003932 E84400                  	call	FRSTSRC			; set up first source copy
 27060 00003935 E99500                  	jmp	FIRSTENT		; jump into the copy loop
 27061                                  
 27062                                  ; ---------------------------------------------------------------------------
 27063                                  
 27064                                  	; 24/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27065                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3AE9h
 27066                                  ENDCOPY:
 27067                                  	;*	End of the road. Close destination, display # files
 27068                                  	;	copied (meaning # destinations), and go back to main
 27069                                  	;	transient COMMAND code.
 27070                                  
 27071 00003938 E8C102                  	call	CLOSEDEST
 27072                                  ENDCOPY2:
 27073 0000393B BA[2E7F]                	mov	dx,copied_ptr
 27074 0000393E 8B36[D18A]              	mov	si,[FileCnt]
 27075 00003942 8936[178C]              	mov	[Copy_num],si
 27076 00003946 E88814                  	call	std_printf
 27077 00003949 E9B8C7                  	jmp	TCOMMAND		; stack could be messed up
 27078                                  
 27079                                  ; ---------------------------------------------------------------------------
 27080                                  
 27081                                  SRCNONEXIST:
 27082                                  	;*	Source doesn't exist. If concatenating, ignore and continue.
 27083                                  	;	Otherwise, say 'file not found' and quit.
 27084                                  
 27085 0000394C 803E[BA8A]00            	cmp	byte [Concat],0
 27086 00003951 7543                    	jne	short NEXTSRC		; concatenating - go on to next source
 27087                                  
 27088                                  	; 24/03/2023
 27089                                  	; MSDOS 3.3
 27090                                  	;mov	dx,SRCBUF
 27091                                  	;mov	[STRING_PTR_1],dx
 27092                                  	;mov	dx,STRINGBUF1PTR
 27093                                  	;call	STD_PRINTF
 27094                                  	;mov	dx,FNOTFOUNDPTR
 27095                                  	;jmp	COPYERR
 27096                                  
 27097                                  	; 24/*03/2023
 27098                                  	; MSDOS 6.0
 27099                                  	;	Set up error message.
 27100 00003953 C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 27101                                  				  	; extended error msg
 27102 00003958 BA[FC7E]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27103 0000395B C706[FC7E]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 27104                                  					; 'file not found' msg#
 27105 00003961 C706[158C][948C]        	mov	word [string_ptr_2],SrcBuf
 27106                                  					; point at bad pathname
 27107 00003967 C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst ; 1
 27108                                  					; 1 substitution
 27109 0000396C E90305                  	jmp	COPYERR			; print msg and clean up
 27110                                  
 27111                                  ; ---------------------------------------------------------------------------
 27112                                  
 27113                                  SOURCEPROC:
 27114                                  
 27115                                  	;*	Preparatory processing for each source file.
 27116                                  	;	Called at FrstSrc for first source file.
 27117                                  
 27118 0000396F E87503                  	call	SOURCE_SET		; set source variables & ascii/binary
 27119 00003972 803E[BA8A]00            	cmp	byte [Concat],0
 27120 00003977 750B                    	jne	short LEAVECFLAG	; concatenating - leave CFlag alone
 27121                                  
 27122                                  ; ---------------------------------------------------------------------------
 27123                                  
 27124                                  FRSTSRC:
 27125 00003979 31C0                    	xor	ax,ax
 27126 0000397B A2[C48A]                	mov	[CFLAG],al		; 'destination not created'
 27127 0000397E A3[C88A]                	mov	[NXTADD],ax		; copy buffer ptr = 0
 27128 00003981 A2[C58A]                	mov	[DestClosed],al		; 'destination not closed'
 27129                                  
 27130                                  LEAVECFLAG:
 27131 00003984 8936[458D]              	mov	[SRCPT],si		; save cmd-line ptr
 27132 00003988 BF[8789]                	mov	di,USERDIR1		; DI = ptr to buf for user's 
 27133                                  						;   current dir
 27134 0000398B BD[8F8C]                	mov	bp,SrcVars		; BP = base of source variables
 27135 0000398E E84606                  	call	BUILDPATH		; cd to source dir, figure
 27136                                  						;   out stuff about source
 27137 00003991 8B36[918C]              	mov	si,[SrcTail]		; SI = ptr to source filename
 27138 00003995 C3                      	retn
 27139                                  
 27140                                  ; ---------------------------------------------------------------------------
 27141                                  
 27142                                  	; 25/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27143                                  NEXTSRC:
 27144                                  	;*	Next source. Come here after handling each pathname.
 27145                                  	;	We're done unless there are additional source pathnames
 27146                                  	;	to be appended.
 27147                                  	;
 27148                                  	;	Note that all files matching an ambiguous pathname
 27149                                  	;	are processed before coming here.
 27150                                  
 27151 00003996 803E[4E8D]00            	cmp	byte [PLUS],0
 27152                                  	;jne	short MORECP		; copying "+" sources - keep going
 27153                                  	; 26/04/2023
 27154                                  ;ENDCOPYJ2:
 27155                                  	;jmp	short ENDCOPY
 27156 0000399B 749B                    	je	short ENDCOPY
 27157                                  MORECP:
 27158 0000399D 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27159 0000399F 8B36[458D]              	mov	si,[SRCPT]		; SI = ptr to current pos'n in cmd line
 27160                                  	;mov	bl,[PLUS_CHR]		; BL = special delimiter = "+"
 27161 000039A3 B32B                    	mov	bl,'+' ; 2Bh
 27162                                  SCANSRC:
 27163 000039A5 BF[EE8C]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27164 000039A8 E8AB07                  	call	cparse			; parse first source name
 27165                                  	;jb	short ENDCOPYJ2		; CR found - we're done
 27166                                  	; 26/04/2023
 27167 000039AB 728B                    	jb	short ENDCOPY
 27168                                  
 27169 000039AD F6C780                  	test	bh,80h
 27170                                  	;jz	short ENDCOPYJ2		; no "+" delimiter - we're done
 27171                                  	; 26/04/2023
 27172 000039B0 7486                    	jz	short ENDCOPY
 27173                                  
 27174 000039B2 F6C701                  	test	bh,1
 27175 000039B5 75EE                    	jnz	short SCANSRC		; switch found - keep looking
 27176                                  
 27177                                  	;	ScanBuf contains the next source pathname.
 27178                                  
 27179 000039B7 E8B5FF                  	call	SOURCEPROC		; prepare this source
 27180 000039BA 803E[0A8C]01            	cmp	byte [comma],1		; was +,, found last time?
 27181 000039BF 7507                    	jnz	short NOSTAMP		;  no - try for a file
 27182 000039C1 C606[0B8C]01            	mov	byte [plus_comma],1	; yes - set flag
 27183 000039C6 EB84                    	jmp	short SRCNONEXIST	; we know we won't find it
 27184                                  
 27185                                  NOSTAMP:
 27186 000039C8 C606[0B8C]00            	mov	byte [plus_comma],0	; reset +,, flag
 27187                                  
 27188                                  ; ---------------------------------------------------------------------------
 27189                                  
 27190                                  FIRSTENT:
 27191                                  
 27192                                  ;M047
 27193                                  ; The only case we need to worry about is when the source is wildcarded and
 27194                                  ;the destination is not. For this case, ConCat is not yet set to indicate
 27195                                  ;concatenation. We check for this case.
 27196                                  ;
 27197                                  ;NB: This change has been backed out and replaced by M048. This is not the
 27198                                  ;right place to do this check.
 27199                                  
 27200                                  	;	This is where we enter the loop with the first source.
 27201                                  
 27202 000039CD BF5C00                  	mov	di,FCB ; 5Ch		; DI = ptr to FCB
 27203 000039D0 B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27204 000039D3 CD21                    	int	21h		; DOS -	PARSE FILENAME
 27205                                  				; DS:SI	-> string to parse
 27206                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27207                                  				; AL = bit mask	to control parsing
 27208 000039D5 803C00                  	cmp	byte [si],0		; did we parse the whole thing?
 27209 000039D8 7516                    	jne	short SRCHDONE		; no, error, simulate 'not found'
 27210 000039DA A1[948C]                	mov	ax,[SrcBuf]		; AX = possible "d:"
 27211 000039DD 80FC3A                  	cmp	ah,':'
 27212 000039E0 7402                    	je	short DRVSPEC1		; AX = definite "d:"
 27213 000039E2 B040                    	mov	al,'@'	; 40h		; AL = drive 'letter' for current drive
 27214                                  DRVSPEC1:
 27215 000039E4 0C20                    	or	al,20h			; AL = lowercase drive letter
 27216 000039E6 2C60                    	sub	al,60h			; AL = drive id (0=current,1=A,..)
 27217                                  	;mov	[5Ch],al
 27218 000039E8 A25C00                  	mov	[FCB],al		; put drive id in FCB
 27219                                  
 27220                                  	;	FCB contains drive and filename to search.
 27221                                  		
 27222 000039EB B411                    	mov	ah,Dir_Search_First ; 11h  ; AH = 'Find First File'
 27223 000039ED E8FC00                  	call	SEARCH
 27224                                  SRCHDONE:
 27225 000039F0 9C                      	pushf				; save flags from Search
 27226 000039F1 E88DEA                  	call	RestUDir1		; restore users current directory
 27227 000039F4 9D                      	popf				; restore flags from search
 27228 000039F5 7403                    	jz	short NEXTAMBIG0	; found the source - continue
 27229 000039F7 E952FF                  	jmp	SRCNONEXIST		; didn't find the source
 27230                                  
 27231                                  NEXTAMBIG0:
 27232 000039FA 30C0                    	xor	al,al
 27233 000039FC 8606[CA8A]              	xchg	al,[FRSTSRCH]
 27234 00003A00 08C0                    	or	al,al
 27235 00003A02 740B                    	jz	short NEXTAMBIG
 27236                                  SETNMEL:
 27237 00003A04 B90C00                  	mov	cx,12
 27238 00003A07 BF[F48B]                	mov	di,SDIRBUF
 27239 00003A0A BE[AE8B]                	mov	si,DIRBUF
 27240 00003A0D F3A4                    	rep	movsb			; save very first source name
 27241                                  NEXTAMBIG:
 27242 00003A0F 30C0                    	xor	al,al
 27243 00003A11 A2[488D]                	mov	[NOWRITE],al		; turn off nowrite
 27244 00003A14 8B3E[918C]              	mov	di,[SrcTail]
 27245 00003A18 BE[AF8B]                	mov	si,DIRBUF+1
 27246 00003A1B E8DFEB                  	call	FCB_TO_ASCZ		; SrcBuf has complete name
 27247                                  MELDO:
 27248 00003A1E 803E[BA8A]00            	cmp	byte [Concat],0
 27249 00003A23 7507                    	jnz	short SHOWCPNAM		; concatenating - show name
 27250 00003A25 F606[938C]02            	test	byte [SrcInfo],2	; wildcard - show name
 27251 00003A2A 7409                    	jz	short DOREAD
 27252                                  SHOWCPNAM:
 27253                                  	; 25/03/2023
 27254                                  	; MSDOS 3.3
 27255                                  	;mov	dx,SRCBUF
 27256                                  	;mov	[STRING_PTR_2],dx
 27257                                  	;mov	dx,STRINGBUF2PTR
 27258                                  	;call	STD_PRINTF
 27259                                  	;call	CRLF2
 27260                                  	; 25/03/2023 - Retro DOS 4.0 COMMAND.COM
 27261                                  	; MSDOS 6.0 (& MSDOS 5.0
 27262 00003A2C BA[A780]                	mov	dx,file_name_ptr
 27263 00003A2F E89F13                  	call	std_printf
 27264 00003A32 E89CEB                  	call	CRLF2
 27265                                  DOREAD:
 27266 00003A35 E8C500                  	call	DOCOPY
 27267 00003A38 803E[BA8A]00            	cmp	byte [Concat],0
 27268 00003A3D 750A                    	jnz	short NODCLOSE		; concatenating - don't close dest
 27269                                  
 27270 00003A3F E8BA01                  	call	CLOSEDEST		; close current destination
 27271 00003A42 7205                    	jc	short NODCLOSE		; concatenating - dest not closed
 27272                                  
 27273 00003A44 C606[C48A]00            	mov	byte [CFLAG],0		; 'destination not created'
 27274                                  NODCLOSE:
 27275 00003A49 803E[BA8A]00            	cmp	byte [Concat],0
 27276 00003A4E 740A                    	jz	short NOFLUSH
 27277                                  
 27278                                  ;	Concatenating - flush output between source files so LostErr
 27279                                  ;	stuff works correctly.
 27280                                  
 27281                                  	;invoke	FlshFil  ; MSDOS 6.0
 27282                                  	; 25/03/2023
 27283 00003A50 E8E202                  	call	FlshFil
 27284                                  	;call	FLUSHFIL ; MSDOS 3.3
 27285                                  
 27286 00003A53 F606[8C8C]FF            	test	byte [MELCOPY],0FFh
 27287                                  	;jz	short NOFLUSH
 27288                                  	;jmp	short DOMELCOPY
 27289                                  	; 25/03/2023
 27290 00003A58 750C                    	jnz	short DOMELCOPY
 27291                                  NOFLUSH:
 27292 00003A5A E88300                  	call	SEARCHNEXT		; try next match
 27293 00003A5D 755D                    	jnz	short NEXTSRCJ		; not found - finished with 
 27294                                  					;   this source spec
 27295 00003A5F C606[C58A]00            	mov	byte [DestClosed],0	; 'destination not closed'
 27296 00003A64 EBA9                    	jmp	short NEXTAMBIG		; do next ambig match
 27297                                  
 27298                                  DOMELCOPY:
 27299 00003A66 803E[8C8C]FF            	cmp	byte [MELCOPY],0FFh
 27300 00003A6B 740D                    	je	short CONTMEL
 27301 00003A6D 8B36[458D]              	mov	si,[SRCPT]
 27302 00003A71 8936[8D8C]              	mov	[MELSTART],si
 27303 00003A75 C606[8C8C]FF            	mov	byte [MELCOPY],0FFh
 27304                                  
 27305                                  CONTMEL:
 27306 00003A7A 31ED                    	xor	bp,bp
 27307 00003A7C 8B36[458D]              	mov	si,[SRCPT]
 27308                                  	;mov	bl,[PLUS_CHR]
 27309                                  	; 25/03/2023
 27310 00003A80 B32B                    	mov	bl,'+'
 27311                                  SCANSRC2:
 27312 00003A82 BF[EE8C]                	mov	di,ScanBuf
 27313 00003A85 E8CE06                  	call	cparse
 27314 00003A88 F6C780                  	test	bh,80h
 27315 00003A8B 7432                    	jz	short NEXTMEL		; no "+" - go back to start
 27316 00003A8D F6C701                  	test	bh,1
 27317 00003A90 75F0                    	jnz	short SCANSRC2		; switch - keep scanning
 27318 00003A92 E8DAFE                  	call	SOURCEPROC
 27319 00003A95 E8E9E9                  	call	RestUDir1
 27320 00003A98 BF[2F8B]                	mov	di,DESTFCB2
 27321 00003A9B B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27322 00003A9E CD21                    	int	21h		; DOS -	PARSE FILENAME
 27323                                  				; DS:SI	-> string to parse
 27324                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27325                                  				; AL = bit mask	to control parsing
 27326 00003AA0 BB[F58B]                	mov	bx,SDIRBUF+1
 27327 00003AA3 BE[308B]                	mov	si,DESTFCB2+1
 27328 00003AA6 8B3E[918C]              	mov	di,[SrcTail]
 27329                                  
 27330 00003AAA E8FB04                  	call	BUILDNAME
 27331                                  
 27332 00003AAD 803E[BA8A]00            	cmp	byte [Concat],0
 27333 00003AB2 7405                    	je	short MELDOJ		; not concatenating - continue
 27334                                  
 27335                                  	;	Yes, turn off nowrite because this part of the code 
 27336                                  	;	is only reached after the first file has been dealt with.
 27337                                  
 27338 00003AB4 C606[488D]00            	mov	byte [NOWRITE],0
 27339                                  MELDOJ:
 27340 00003AB9 E962FF                  	jmp	MELDO
 27341                                  NEXTSRCJ:
 27342 00003ABC E9D7FE                  	jmp	NEXTSRC
 27343                                  
 27344                                  NEXTMEL:
 27345 00003ABF E83A01                  	call	CLOSEDEST
 27346 00003AC2 31C0                    	xor	ax,ax
 27347 00003AC4 A2[C48A]                	mov	[CFLAG],al
 27348 00003AC7 A3[C88A]                	mov	[NXTADD],ax
 27349 00003ACA A2[C58A]                	mov	[SPECDRV],al
 27350 00003ACD 8B36[8D8C]              	mov	si,[MELSTART]
 27351 00003AD1 8936[458D]              	mov	[SRCPT],si
 27352 00003AD5 E80800                  	call	SEARCHNEXT
 27353 00003AD8 7403                    	jz	short SETNMELJ
 27354 00003ADA E95EFE                  	jmp	ENDCOPY2
 27355                                  SETNMELJ:
 27356 00003ADD E924FF                  	jmp	SETNMEL
 27357                                  
 27358                                  ; ---------------------------------------------------------------------------
 27359                                  
 27360                                  SEARCHNEXT:
 27361 00003AE0 B412                    	mov	ah,Dir_Search_Next ; 12h
 27362 00003AE2 F606[938C]02            	test	byte [SrcInfo],2
 27363 00003AE7 7503                    	jnz	short SEARCH		; do search-next if ambig
 27364 00003AE9 08E4                    	or	ah,ah			; reset zero flag
 27365 00003AEB C3                      	retn
 27366                                  
 27367                                  ; ---------------------------------------------------------------------------
 27368                                  
 27369                                  SEARCH:
 27370 00003AEC 50                      	push	ax
 27371 00003AED B41A                    	mov	ah,Set_DMA ; 1Ah
 27372 00003AEF BA[AE8B]                	mov	dx,DIRBUF	; put result of search in dirbuf
 27373 00003AF2 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 27374                                  			; DS:DX	-> disk	transfer buffer
 27375 00003AF4 58                      	pop	ax		; restore search first/next command
 27376 00003AF5 BA5C00                  	mov	dx,FCB ; 5Ch
 27377 00003AF8 CD21                    	int	21h		; Do the search
 27378 00003AFA 08C0                    	or	al,al
 27379 00003AFC C3                      	retn
 27380                                  
 27381                                  ; ---------------------------------------------------------------------------
 27382                                  
 27383                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27384                                  DOCOPY:
 27385 00003AFD BE[948C]                	mov	si,SrcBuf	; do name translate of source
 27386 00003B00 BF[D387]                	mov	di,SRCXNAME	; save for name comparison
 27387 00003B03 B460                    	mov	ah,xNameTrans ; 60h
 27388 00003B05 CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 27389                                  			; DS:SI	-> ASCIZ relative path string or directory name
 27390                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 27391 00003B07 C606[B88A]00            	mov	byte [RDEOF],0	; no EOF yet
 27392                                  
 27393                                  	; MSDOS 6.0
 27394                                  	;mov	ax,ExtOpen shl 8	; open the file
 27395                                  	; 26/03/2023
 27396 00003B0C B8006C                  	mov	ax,6C00h
 27397                                  ;M046
 27398                                  ; For reads, the sharing mode should be deny none so that any process can
 27399                                  ;open this file again in any other sharing mode. This is mainly to allow
 27400                                  ;multiple command.com's to access the same file without getting sharing
 27401                                  ;violations
 27402                                  ;
 27403                                  	;mov	bx,deny_none|read_open_mode
 27404 00003B0F BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 27405 00003B12 31C9                    	xor	cx,cx			; no special files
 27406                                  	;mov	dx,read_open_flag	; set up open flags
 27407 00003B14 BA0101                  	mov	dx,101h
 27408 00003B17 CD21                    	int	21h
 27409                                  	; 26/03/2023
 27410 00003B19 7230                    	jc	short Error_On_Source
 27411                                  	;jnc	short OPENOK
 27412                                  
 27413                                  	;	Bogosity: IBM wants us to issue Access Denied in this case.
 27414                                  	;	They asked for it...
 27415                                  
 27416                                  	;jmp	short Error_On_Source ;AC022; clean up and exit
 27417                                  
 27418                                  	; 26/03/2023
 27419                                  	; MSDOS 3.3
 27420                                  	;mov	dx,SRCBUF
 27421                                  	;mov	ax,OPEN*256 ; 3D00h
 27422                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 27423                                  	;			; DS:DX	-> ASCIZ filename
 27424                                  	;			; AL = access mode
 27425                                  	;			; 0 - read
 27426                                  	;jnc	short OPENOK
 27427                                  	;call	GET_EXT_ERR_NUMBER
 27428                                  	;pushf
 27429                                  	;cmp	ax,65
 27430                                  	;jnz	short DOCOPY_ERR
 27431                                  	;mov	dx,ACCDENPTR
 27432                                  	;call	STD_PRINTF
 27433                                  ;DOCOPY_ERR:
 27434                                  	;popf
 27435                                  	;retn
 27436                                  
 27437                                  	; 26/03/2023
 27438                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27439                                  OPENOK:
 27440 00003B1B 89C3                    	mov	bx,ax
 27441 00003B1D 891E[EB8C]              	mov	[SRCHAND],bx		; save handle
 27442 00003B21 B80057                  	mov	ax,File_Times*256 ; 5700h
 27443 00003B24 CD21                    	int	21h		; DOS -	2+ - GET FILE'S DATE/TIME
 27444                                  				; BX = file handle
 27445                                  
 27446 00003B26 7223                    	jc	short Error_On_Source ; MSDOS 6.0
 27447                                  
 27448 00003B28 8916[508D]              	mov	[CPDATE],dx		; save date
 27449 00003B2C 890E[528D]              	mov	[CPTIME],cx		; save time
 27450                                  
 27451                                  	; MSDOS 6.0
 27452                                  	;jmp	short No_Copy_Xa 	; (xa copy code removed)
 27453                                  	; 26/04/2023
 27454                                  No_Copy_Xa:
 27455                                  	; 26/03/2023
 27456                                  	;mov	bx,[SRCHAND]		;AN022; get handle back
 27457                                  
 27458                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27459 00003B30 B80044                  	mov	ax,(IOCTL<<8) ; 4400h
 27460 00003B33 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 27461                                  				; BX = file or device handle
 27462                                  	;and	dl,devid_ISDEV ; 80h
 27463                                  	; 18/04/2023
 27464 00003B35 80E280                  	and	dl,80h ; devid_ISDEV
 27465 00003B38 8816[ED8C]              	mov	[SRCISDEV],dl		; set source info
 27466 00003B3C 7436                    	jz	short COPYLP		; source not a device
 27467 00003B3E 803E[498D]00            	cmp	byte [BINARY],0
 27468 00003B43 742F                    	je	short COPYLP		; ascii device ok
 27469 00003B45 BA[6080]                	mov	dx,INBDEV_PTR		; cannot do binary input
 27470 00003B48 E92703                  	jmp	COPYERR
 27471                                  
 27472                                  Error_On_Source:			;AN022; we have a BAD error
 27473 00003B4B E892E1                  	call	Set_Ext_Error_Msg	;AN022; set up the error message
 27474 00003B4E C706[158C][948C]        	mov	word [string_ptr_2],SrcBuf
 27475                                  				;AN022; get address of failed string
 27476 00003B54 C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst ; 1
 27477                                  				;AN022; put number of subst in control block
 27478 00003B59 E86D12                  	call	std_eprintf		;AN022; print it
 27479                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 27480 00003B5C 8B1E[EB8C]              	mov	bx,[SRCHAND]
 27481                                  	;cmp	word [SRCHAND],0	;AN022; did we open the file?
 27482                                  	;je	short No_Close_Src	;AN022; no - don't close
 27483 00003B60 09DB                    	or	bx,bx
 27484 00003B62 7403                    	jz	short No_Close_Src
 27485                                  	;call	CLOSESRC		;AN022; clean up
 27486                                  	; 26/03/2023
 27487 00003B64 E89000                  	call	CLOSESRC2 ; bx = [SRCHAND]
 27488                                  No_Close_Src:				;AN022;
 27489 00003B67 803E[C48A]00            	cmp	byte [CFLAG],0		;AN022; was destination created?
 27490 00003B6C 7403                    	je	short EndCopyJ3		;AN022; no - just cleanup and exit
 27491 00003B6E E9C7FD                  	jmp	ENDCOPY			;AN022; clean up concatenation and exit
 27492                                  EndCopyJ3:				;AN022;
 27493 00003B71 E9C7FD                  	jmp	ENDCOPY2		;AN022;
 27494                                  
 27495                                  	; 26/04/2023
 27496                                  ;No_Copy_Xa:
 27497                                  ;	; 26/03/2023
 27498                                  ;	;mov	bx,[SRCHAND]		;AN022; get handle back
 27499                                  ;
 27500                                  ;	; MSDOS 3.3 (& MSDOS 6.0)
 27501                                  ;	mov	ax,(IOCTL<<8) ; 4400h
 27502                                  ;	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 27503                                  ;				; BX = file or device handle
 27504                                  ;	;and	dl,devid_ISDEV ; 80h
 27505                                  ;	; 18/04/2023
 27506                                  ;	and	dl,80h ; devid_ISDEV
 27507                                  ;	mov	[SRCISDEV],dl		; set source info
 27508                                  ;	jz	short COPYLP		; source not a device
 27509                                  ;	cmp	byte [BINARY],0
 27510                                  ;	je	short COPYLP		; ascii device ok
 27511                                  ;	mov	dx,INBDEV_PTR		; cannot do binary input
 27512                                  ;	jmp	COPYERR
 27513                                  
 27514                                  COPYLP:
 27515                                  	; 26/03/2023
 27516 00003B74 8B1E[EB8C]              	mov	bx,[SRCHAND] ; ? ; 26/03/2023
 27517 00003B78 8B0E[C68A]              	mov	cx,[BYTCNT]
 27518 00003B7C 8B16[C88A]              	mov	dx,[NXTADD]
 27519 00003B80 29D1                    	sub	cx,dx			; compute available space
 27520 00003B82 750E                    	jnz	short GOTROOM
 27521 00003B84 E8AE01                  	call	FlshFil   ; MSDOS 6.0
 27522                                  	;call	FLUSHFIL  ; MSDOS 3.3
 27523 00003B87 803E[4C8D]00            	cmp	byte [TERMREAD],0
 27524 00003B8C 7565                    	jne	short CLOSESRC		; give up
 27525 00003B8E 8B0E[C68A]              	mov	cx,[BYTCNT]
 27526                                  GOTROOM:
 27527 00003B92 1E                      	push	ds
 27528 00003B93 8E1E[A78A]              	mov	ds,[TPA]
 27529 00003B97 B43F                    	mov	ah,READ ; 3Fh
 27530 00003B99 CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 27531                                  				; BX = file handle,CX = number of bytes to read
 27532                                  				; DS:DX	-> buffer
 27533 00003B9B 1F                      	pop	ds
 27534                                  	;jc	short CLOSESRC	; MSDOS 3.3
 27535                                  	; 26/03/2023
 27536 00003B9C 72AD                    	jc	short Error_On_Source ; MSDOS 6.0
 27537 00003B9E 89C1                    	mov	cx,ax			; get count
 27538 00003BA0 E351                    	jcxz	CLOSESRC		; no more to read
 27539 00003BA2 803E[ED8C]00            	cmp	byte [SRCISDEV],0
 27540 00003BA7 7507                    	jne	short NOTESTA		; is a device, ascii mode
 27541 00003BA9 803E[4D8D]00            	cmp	byte [ASCII],0
 27542 00003BAE 741B                    	je	short BINREAD
 27543                                  NOTESTA:
 27544 00003BB0 89CA                    	mov	dx,cx
 27545 00003BB2 8B3E[C88A]              	mov	di,[NXTADD]
 27546 00003BB6 B01A                    	mov	al,1Ah
 27547 00003BB8 06                      	push	es
 27548 00003BB9 8E06[A78A]              	mov	es,[TPA]		; scan for EOF
 27549 00003BBD F2AE                    	repne	scasb
 27550 00003BBF 07                      	pop	es
 27551 00003BC0 7505                    	jnz	short USEALL
 27552 00003BC2 FE06[B88A]              	inc	byte [RDEOF]
 27553 00003BC6 41                      	inc	cx
 27554                                  USEALL:
 27555 00003BC7 29CA                    	sub	dx,cx
 27556 00003BC9 89D1                    	mov	cx,dx
 27557                                  BINREAD:
 27558 00003BCB 030E[C88A]              	add	cx,[NXTADD]
 27559 00003BCF 890E[C88A]              	mov	[NXTADD],cx
 27560 00003BD3 3B0E[C68A]              	cmp	cx,[BYTCNT]		; is buffer full?
 27561 00003BD7 720C                    	jb	short TESTDEV		; if not, we may have found eof
 27562                                  	; 26/03/2023
 27563 00003BD9 E85901                  	call	FlshFil
 27564                                  	;call	FLUSHFIL
 27565 00003BDC 803E[4C8D]00            	cmp	byte [TERMREAD],0
 27566 00003BE1 7510                    	jne	short CLOSESRC		; give up
 27567 00003BE3 EB8F                    	jmp	short COPYLP
 27568                                  TESTDEV:
 27569 00003BE5 803E[ED8C]00            	cmp	byte [SRCISDEV],0	; if file then EOF
 27570 00003BEA 7407                    	je	short CLOSESRC
 27571 00003BEC 803E[B88A]00            	cmp	byte [RDEOF],0
 27572 00003BF1 7481                    	je	short COPYLP		; on device, go till ^Z
 27573                                  CLOSESRC:
 27574 00003BF3 8B1E[EB8C]              	mov	bx,[SRCHAND]
 27575                                  CLOSESRC2:
 27576 00003BF7 B43E                    	mov	ah,CLOSE ; 3Eh
 27577 00003BF9 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 27578                                  				; BX = file handle
 27579                                  CLOSESRCDEST_RETN:
 27580 00003BFB C3                      	retn
 27581                                  
 27582                                  ; ---------------------------------------------------------------------------
 27583                                  
 27584                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27585                                  CLOSEDEST:
 27586                                  
 27587                                  	;	We are called to close the destination.
 27588                                  	;	We need to note whether or not there is any internal data left
 27589                                  	;	to be flushed out.
 27590                                  
 27591 00003BFC 803E[C58A]00            	cmp	byte [DestClosed],0
 27592 00003C01 75F8                    	jne	short CLOSESRCDEST_RETN	; don't double close
 27593 00003C03 A0[C08A]                	mov	al,[DestSwitch]
 27594 00003C06 E8C502                  	call	SETASC			; check for b or a switch
 27595 00003C09 742E                    	jz	short BINCLOS		;   on destination
 27596 00003C0B 8B1E[C88A]              	mov	bx,[NXTADD]
 27597                                  ;
 27598                                  ;M048 -- TryFlush changes the state of ConCat flag. So, before we append a
 27599                                  ;^Z, let's always flush out. This way if the ConCat flag changes, we will
 27600                                  ;just return without appending a ^Z incorrectly for the first file (since we
 27601                                  ;are concatenating now). Also, in case it is a single file copy, we will
 27602                                  ;anyway write the ^Z out separately. The only drawback is that there is a
 27603                                  ;performance overhead on single ASCII file copies which now always involve
 27604                                  ;2 writes instead of 1 before. Is this really that important?
 27605                                  ;
 27606                                  ;M048;	cmp	bx,[BYTCNT]		; is memory full?
 27607                                  ;M048;	jne	short PutZ
 27608                                  
 27609                                  	; 26/03/2023
 27610                                  	; MSDOS 3.3
 27611                                  	;cmp	bx,[BYTCNT]		; is memory full?
 27612                                  	;jne	short PUTZ
 27613                                  
 27614                                  	; 26/03/2023
 27615 00003C0F E81601                  	call	TRYFLUSH		; flush (and double-check for concat)	
 27616 00003C12 7402                    	jz	short NOCONC
 27617                                  CONCHNG:
 27618 00003C14 F9                      	stc
 27619 00003C15 C3                      	retn
 27620                                  
 27621                                  NOCONC:	
 27622 00003C16 31DB                    	xor	bx,bx
 27623                                  PUTZ:
 27624 00003C18 1E                      	push	ds
 27625 00003C19 8E1E[A78A]              	mov	ds,[TPA]
 27626 00003C1D C7071A00                	mov	word [bx],1Ah	; add EOF mark (ctrl-Z)
 27627 00003C21 1F                      	pop	ds
 27628 00003C22 FF06[C88A]              	inc	word [NXTADD]	; make sure our ^z gets written	
 27629 00003C26 C606[488D]00            	mov	byte [NOWRITE],0
 27630 00003C2B A1[4A8D]                	mov	ax,[WRITTEN]
 27631 00003C2E 0306[C88A]              	add	ax,[NXTADD]
 27632 00003C32 7205                    	jc	short BINCLOS	; > 1
 27633 00003C34 83F801                  	cmp	ax,1
 27634 00003C37 740C                    	je	short FORGETITJ	; Written = 0 NxtAdd = 1 (the ^Z)
 27635                                  BINCLOS:
 27636 00003C39 E8EC00                  	call	TRYFLUSH
 27637 00003C3C 75D6                    	jnz	short CONCHNG
 27638                                  
 27639                                  	; 26/04/2023
 27640 00003C3E 833E[4A8D]00            	cmp	word [WRITTEN],0
 27641                                  	; 26/03/2023
 27642 00003C43 7503                    	jnz	short NO_FORGET
 27643                                  FORGETITJ:
 27644                                  	;jz	short FORGETIT	; never wrote nothing
 27645                                  	; 26/03/2023
 27646 00003C45 E98500                  	jmp	FORGETIT ; 18/04/2023
 27647                                  NO_FORGET:			; wrote something
 27648 00003C48 8B1E[888C]              	mov	bx,[DESTHAND]
 27649 00003C4C 8B0E[528D]              	mov	cx,[CPTIME]
 27650 00003C50 8B16[508D]              	mov	dx,[CPDATE]
 27651 00003C54 803E[478D]00            	cmp	byte [INEXACT],0 ; copy not exact?
 27652 00003C59 7431                    	je	short DODCLOSE	; if no, copy date & time
 27653 00003C5B B42C                    	mov	ah,Get_Time ; 2Ch
 27654 00003C5D CD21                    	int	21h		; DOS -	GET CURRENT TIME
 27655                                  				; Return: CH = hours,CL = minutes,DH = seconds
 27656                                  				; DL = hundredths of seconds
 27657 00003C5F D0E1                    	shl	cl,1
 27658 00003C61 D0E1                    	shl	cl,1		; left justify min in cl
 27659 00003C63 D1E1                    	shl	cx,1
 27660 00003C65 D1E1                    	shl	cx,1
 27661 00003C67 D1E1                    	shl	cx,1		; hours to high 5 bits, min to 5-10
 27662 00003C69 D0EE                    	shr	dh,1		; divide seconds by 2 (now 5 bits)
 27663 00003C6B 08F1                    	or	cl,dh		; and stick into low 5 bits of cx
 27664 00003C6D 51                      	push	cx		; save packed time
 27665 00003C6E B42A                    	mov	ah,Get_Date ; 2Ah
 27666 00003C70 CD21                    	int	21h		; DOS -	GET CURRENT DATE
 27667                                  				; Return: DL = day,DH = month,	CX = year
 27668                                  				; AL = day of the week (0=Sunday,1=Monday,etc.)
 27669 00003C72 81E9BC07                	sub	cx,1980
 27670 00003C76 86E9                    	xchg	ch,cl
 27671 00003C78 D1E1                    	shl	cx,1		; year to high 7 bits
 27672 00003C7A D0E6                    	shl	dh,1		; month to high 3 bits
 27673 00003C7C D0E6                    	shl	dh,1
 27674 00003C7E D0E6                    	shl	dh,1
 27675 00003C80 D0E6                    	shl	dh,1
 27676 00003C82 D0E6                    	shl	dh,1		; most sig bit of month in carry
 27677 00003C84 80D500                  	adc	ch,0		; put that bit next to year
 27678 00003C87 08F2                    	or	dl,dh		; or low three of month into day
 27679 00003C89 88EE                    	mov	dh,ch		; get year and high bit of month
 27680 00003C8B 59                      	pop	cx
 27681                                  DODCLOSE:
 27682 00003C8C 83FB00                  	cmp	bx,0
 27683 00003C8F 7E36                    	jle	short CLOSEDONE
 27684 00003C91 B80157                  	mov	ax,(File_Times<<8)|1 ; 5701h
 27685 00003C94 CD21                    	int	21h		; DOS -	2+ - SET FILE'S DATE/TIME
 27686                                  				; BX = file handle,CX = time to be set
 27687                                  				; DX = date to be set
 27688                                  	; 26/03/2023
 27689                                  	; MSDOS 6.0
 27690 00003C96 721A                    	jc	short Cleanup_Err ;AN022; handle error
 27691                                  
 27692                                  	;	See if the destination has *anything* in it.
 27693                                  	;	If not, just close and delete it.
 27694                                  
 27695 00003C98 B80242                  	mov	ax,(LSEEK<<8)+2 ; 4202h	; seek to EOF
 27696 00003C9B 31D2                    	xor	dx,dx
 27697 00003C9D 89D1                    	mov	cx,dx
 27698 00003C9F CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 27699                                  			; AL = method: offset from end of file
 27700                                  	;	DX:AX is file size
 27701                                  
 27702 00003CA1 09C2                    	or	dx,ax
 27703 00003CA3 9C                      	pushf
 27704 00003CA4 B80044                  	mov	ax,(IOCTL<<8)+0 ; 4400h	; get the destination attributes
 27705 00003CA7 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 27706                                  			; BX = file or device handle
 27707 00003CA9 52                      	push	dx		; save them away
 27708 00003CAA B43E                    	mov	ah,CLOSE ; 3Eh
 27709 00003CAC CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 27710                                  			; BX = file handle
 27711 00003CAE 5A                      	pop	dx
 27712                                  
 27713                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 27714                                  	; MSDOS 6.0
 27715 00003CAF 730D                    	jnc	short Close_Cont ;AN022; handle error on close
 27716 00003CB1 9D                      	popf			;AN022; get the flags back
 27717                                  Cleanup_Err: 			;AN022;
 27718 00003CB2 E85A00                  	call	CleanUpErr	;AN022; attempt to delete the target
 27719                                  	; 26/03/2023
 27720                                  	;call	DestDelete	;AN022; attempt to delete the target
 27721                                  	;jmp	short FILECLOSED
 27722                                  	;			;AN022; close the file
 27723                                  	; 26/03/2023
 27724                                  DestDel_fclosed:
 27725 00003CB5 E82700                  	call	DestDelete
 27726                                  FILECLOSED:
 27727 00003CB8 FE06[C58A]              	inc	byte [DestClosed]
 27728                                  RET50:
 27729 00003CBC F8                      	clc
 27730 00003CBD C3                      	retn
 27731                                  	
 27732                                  Close_Cont:			;AN022; no error - co
 27733                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27734 00003CBE 9D                      	popf
 27735 00003CBF 7506                    	jnz	short CLOSEDONE
 27736 00003CC1 F7C28000                	test	dx,80h		; is the destination a device?
 27737                                  	;jnz	short CLOSEDONE	; yes, copy succeeded
 27738                                  	;call	DestDelete
 27739                                  	;jmp	short FILECLOSED
 27740                                  	; 26/03/2023
 27741 00003CC5 74EE                    	jz	short DestDel_fclosed
 27742                                  CLOSEDONE:
 27743 00003CC7 FF06[D18A]              	inc	word [FileCnt]
 27744                                  	; 26/03/2023
 27745 00003CCB EBEB                    	jmp	short FILECLOSED
 27746                                  	
 27747                                  ;FILECLOSED:
 27748                                  ;	inc	byte [DestClosed]
 27749                                  ;RET50:
 27750                                  	;clc
 27751                                  	;retn
 27752                                  
 27753                                  FORGETIT:
 27754 00003CCD 8B1E[888C]              	mov	bx,[DESTHAND]
 27755 00003CD1 E8B8FF                  	call	DODCLOSE	 ; close the dest
 27756 00003CD4 E80800                  	call	DestDelete
 27757 00003CD7 C706[D18A]0000          	mov	word [FileCnt],0 ; no files transferred
 27758 00003CDD EBDD                    	jmp	short RET50
 27759                                  
 27760                                  ; ---------------------------------------------------------------------------
 27761                                  
 27762                                  	; 26/03/2023
 27763                                  DestDelete:
 27764 00003CDF BA[318C]                	mov	dx,DestBuf
 27765 00003CE2 B441                    	mov	ah,Unlink ; 41h
 27766 00003CE4 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 27767                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 27768                                  			;		(no wildcards allowed)
 27769 00003CE6 C3                      	retn
 27770                                  
 27771                                  ; ---------------------------------------------------------------------------
 27772                                  
 27773                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27774                                  SOURCE_SET:
 27775 00003CE7 56                      	push	si
 27776 00003CE8 A1[5B8D]                	mov	ax,[STARTEL]
 27777 00003CEB BE[EE8C]                	mov	si,ScanBuf	; adjust to copy
 27778 00003CEE 29F0                    	sub	ax,si
 27779 00003CF0 BF[948C]                	mov	di,SrcBuf
 27780 00003CF3 01F8                    	add	ax,di
 27781 00003CF5 A3[918C]                	mov	[SrcTail],ax
 27782 00003CF8 880E[908C]              	mov	[SrcSiz],cl	; save its size
 27783 00003CFC 41                      	inc	cx		; include the nul
 27784 00003CFD F3A4                    	rep	movsb		; save this source
 27785 00003CFF 883E[938C]              	mov	[SrcInfo],bh	; save info about it
 27786 00003D03 5E                      	pop	si
 27787 00003D04 89E8                    	mov	ax,bp		; switches so far
 27788 00003D06 E8C501                  	call	SETASC		; set a,b switches accordingly
 27789 00003D09 E870EA                  	call	SWITCH		; get any more switches on this arg
 27790                                  	;call	SETASC		; set
 27791                                  	;retn
 27792                                  	; 26/03/2023
 27793 00003D0C E9BF01                  	jmp	SETASC
 27794                                  
 27795                                  ; =============== S U B	R O U T	I N E =======================================
 27796                                  
 27797                                  ; MSDOS 6.0
 27798                                  
 27799                                  ;****************************************************************
 27800                                  ;*
 27801                                  ;* ROUTINE:	CleanupErr
 27802                                  ;*
 27803                                  ;* FUNCTION:	Issues extended error message for destination
 27804                                  ;*		if not alreay issued
 27805                                  ;*
 27806                                  ;* INPUT:	return from INT 21
 27807                                  ;*
 27808                                  ;* OUTPUT:	none
 27809                                  ;*
 27810                                  ;****************************************************************
 27811                                  
 27812                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27813                                  	; MSDOS 6.0 (MSDOS 5.0) COMMAND.COM
 27814                                  CleanUpErr:	; proc	near		;AN022;
 27815                                  
 27816 00003D0F 803E[978D]00            	cmp	byte [msg_flag],0	;AN022; have we already issued a message?
 27817 00003D14 7511                    	jnz	short CleanupErr_Cont	;AN022; yes - don't issue duplicate error
 27818 00003D16 E8C7DF                  	call	Set_Ext_Error_Msg	;AN022; set up error message
 27819 00003D19 C706[158C][318C]        	mov	word [string_ptr_2],DestBuf 
 27820                                  					;AN022; get address of failed string
 27821 00003D1F C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 27822                                  					;AN022; put number of subst in control block
 27823 00003D24 E8A210                  	call	std_eprintf		;AN022; issue the error message
 27824                                  CleanupErr_Cont:			;AN022;
 27825 00003D27 C3                      	retn				;AN022; return to caller
 27826                                  
 27827                                  ;CleanUpErr	endp			;AN022;
 27828                                  
 27829                                  ;============================================================================
 27830                                  ; COPYPR1.ASM, MSDOS 6.0, 1991
 27831                                  ;============================================================================
 27832                                  ; 01/10/2018 - Retro DOS v3.0
 27833                                  
 27834                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2FBBh
 27835                                  
 27836                                  ; =============== S U B	R O U T	I N E =======================================
 27837                                  
 27838                                  ;***	TryFlush - flush copy buffer, double-check for concatenation
 27839                                  ;
 27840                                  ;	EXIT	ZR set if concatenate flag unchanged
 27841                                  
 27842                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27843                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3EEAh
 27844                                  TRYFLUSH:
 27845 00003D28 A0[BA8A]                	mov	al,[Concat]
 27846 00003D2B 50                      	push	ax
 27847                                  	;call	FLUSHFIL
 27848 00003D2C E80600                  	call	FlshFil
 27849 00003D2F 58                      	pop	ax
 27850 00003D30 3A06[BA8A]              	cmp	al,[Concat]
 27851 00003D34 C3                      	retn
 27852                                  
 27853                                  ; =============== S U B	R O U T	I N E =======================================
 27854                                  
 27855                                  	; 26/03/2023
 27856                                  	; MSDOS 3.3
 27857                                  ;FLUSHFIL:
 27858                                  	;mov	al,[BINARY]
 27859                                  	;mov	ah,[ASCII]
 27860                                  	;push	ax
 27861                                  	;call	FLSHFIL
 27862                                  	;pop	ax
 27863                                  	;mov	[ASCII],ah
 27864                                  	;mov	[BINARY],al
 27865                                  	;retn
 27866                                  
 27867                                  ; =============== S U B	R O U T	I N E =======================================
 27868                                  
 27869                                  ;***	Flshfil - write out any data remaining in copy buffer.
 27870                                  ;
 27871                                  ;	Inputs:
 27872                                  ;	  [NXTADD] = No. of bytes to write
 27873                                  ;	  [CFLAG] <> 0 if file has been created
 27874                                  ;	Outputs:
 27875                                  ;	  [NXTADD] = 0
 27876                                  
 27877                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27878                                  FlshFil:
 27879 00003D35 C606[4C8D]00            	mov	byte [TERMREAD],0
 27880 00003D3A 803E[C48A]00            	cmp	byte [CFLAG],0
 27881 00003D3F 7403                    	jz	short NotExists
 27882 00003D41 E99600                  	jmp	Exists
 27883                                  NotExists:
 27884 00003D44 E8A101                  	call	BUILDDEST		; find out all about the destination
 27885 00003D47 E8F903                  	call	COMPNAME		; source and dest. the same?
 27886 00003D4A 7519                    	jnz	short ProcDest		; if not, go ahead
 27887 00003D4C 803E[ED8C]00            	cmp	byte [SRCISDEV],0
 27888 00003D51 7512                    	jnz	short ProcDest		; same name on device ok
 27889 00003D53 803E[BA8A]00            	cmp	byte [Concat],0		; concatenation?
 27890 00003D58 BA[257F]                	mov	dx,OVERWR_PTR
 27891                                  	;je	short COPERR		; not concatenating - overwrite error
 27892                                  	; 26/03/2023
 27893 00003D5B 7503                    	jne	short No_Concat_Err
 27894 00003D5D E91201                  	jmp	COPYERR
 27895                                  	
 27896                                  No_Concat_Err:	; concatenating
 27897 00003D60 C606[488D]01            	mov	byte [NOWRITE],1 	; flag not writing (just seeking)
 27898                                  ProcDest:
 27899                                  	; MSDOS 6.0
 27900                                  	;mov	ax,(ExtOpen<<8)		; open the file
 27901                                  	; 26/03/2023
 27902 00003D65 B8006C                  	mov	ax,6C00h
 27903 00003D68 BE[318C]                	mov	si,DestBuf		; get file name
 27904                                  ;M046
 27905                                  ; For writes, we want to deny writes by anyone else at the same time that we
 27906                                  ;are writing to it. For instance, on a network, 2 workstations could try
 27907                                  ;writing to the same file. Also, because we opened the source file with
 27908                                  ;DENY NONE, it is fine if the source and destination files are the same as
 27909                                  ;would happen when we append to an existing file.
 27910                                  
 27911                                  	; 26/03/2023
 27912                                  	;mov	bx,deny_write|write_open_mode
 27913 00003D6B BB2100                  	mov	bx,21h			; get open mode for copy; M046
 27914 00003D6E 31C9                    	xor	cx,cx			; no special files
 27915                                  	;mov	dx,write_open_flag	; set up open flags
 27916 00003D70 BA0101                  	mov	dx,101h	
 27917                                  
 27918 00003D73 803E[488D]00            	cmp	byte [NOWRITE],0
 27919 00003D78 7503                    	jne	short DoDestOpen	; don't actually create if nowrite set
 27920                                  	;mov	dx,creat_open_flag	; set up create flags
 27921 00003D7A BA1201                  	mov	dx,112h
 27922                                  
 27923                                  	; 26/03/2023
 27924                                  	; MSDOS 3.3
 27925                                  	;mov	ax,(OPEN*256)+1 ; 3D01h ; open file, write access
 27926                                  	;cmp	byte [NOWRITE],0
 27927                                  	;jne	short DODESTOPEN
 27928                                  	;mov	ah,CREAT ; 3Ch
 27929                                  	;xor	cx,cx
 27930                                  ;DODESTOPEN:
 27931                                  	;mov	dx,DESTBUF
 27932                                  	;int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 27933                                  	;		; CX = attributes for file
 27934                                  	;		; DS:DX	-> ASCIZ filename (may include drive and path)
 27935                                  
 27936                                  ; 26/03/2023
 27937                                  ;	; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 301Ch
 27938                                  ;	;mov	dx,FULDIRPTR
 27939                                  ;	;call	GET_EXT_ERR_NUMBER
 27940                                  ;	;jc	short COPERR
 27941                                  ;
 27942                                  ;	; 01/10/2018
 27943                                  ;	;jnc	short DEST_OPEN_OKAY
 27944                                  ;		
 27945                                  ;	;mov	dx,FULDIRPTR
 27946                                  ;	;call	GET_EXT_ERR_NUMBER
 27947                                  ;	;jmp	short COPERR
 27948                                  ;
 27949                                  ;	jc	short DEST_OPEN_ERROR
 27950                                  
 27951                                  	; 26/03/2023
 27952                                  DoDestOpen:
 27953 00003D7D CD21                    	int     21h	; DOS - 4.0 - EXTENDED OPEN/CREATE
 27954                                  			; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
 27955                                  			; BH = flags
 27956                                  			; CX = create attribute
 27957                                  			; DL = action if file exists/does not exists
 27958                                  			; DH = 00h (reserved), DS:SI -> ASCIZ file name
 27959                                  
 27960                                  ;	We assume that the error is normal.
 27961                                  ;	TriageError will correct the DX value appropriately.
 27962                                  	
 27963 00003D7F 7311                    	jnc	short Dest_Open_Okay
 27964                                  Xa_Set_Error:				;AN030; error occurred on XA
 27965 00003D81 E85CDF                  	call	Set_Ext_Error_Msg	;AN030; get extended error
 27966                                  
 27967                                  	; 26/04/2023 - Retro DOS v4.0 ( 4.1) COMMAND.COM
 27968                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3F46h
 27969                                  Ext_Err_Set:				;AN030;
 27970 00003D84 C706[158C][318C]        	mov	word [string_ptr_2],DestBuf
 27971                                  					;AN000; get address of failed string
 27972 00003D8A C606[FE7E]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 27973                                  					;AN030; put number of subst in control block
 27974                                  CopErrJ2:				;AN030;
 27975 00003D8F E9E000                  	jmp	COPYERR			;AN030; go issue message
 27976                                  
 27977                                  ;DEST_OPEN_OKAY:
 27978                                  	; 26/03/2023
 27979                                  Dest_Open_Okay:
 27980 00003D92 A3[888C]                	mov	[DESTHAND],ax		; save handle
 27981 00003D95 C606[C48A]01            	mov	byte [CFLAG],1		; destination now exists
 27982 00003D9A 89C3                    	mov	bx,ax
 27983 00003D9C B80044                  	mov	ax,IOCTL*256 ; 4400h 	; get device stuff
 27984 00003D9F CD21                    	int	21h	   	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 27985                                  			   	; BX = file or device handle
 27986                                  
 27987 00003DA1 8816[8A8C]              	mov	[DESTISDEV],dl		; set dest info
 27988                                  	; 18/04/2023
 27989 00003DA5 F6C280                  	test	dl,80h
 27990                                  	;test	dl,devid_ISDEV
 27991 00003DA8 7430                    	jz	short Exists		; Dest not a device
 27992                                  
 27993                                  ;	Destination is device.
 27994                                  
 27995 00003DAA A0[C08A]                	mov	al,[DestSwitch]
 27996                                  	; 26/03/2023
 27997 00003DAD 240C                    	and	al,0Ch
 27998                                  	;and	al,SWITCHA+SWITCHB ; 4+8
 27999 00003DAF 7509                    	jnz	short TestBoth
 28000 00003DB1 A0[4D8D]                	mov	al,[ASCII]		; neither set, use current setting
 28001 00003DB4 0A06[498D]              	or	al,[BINARY]
 28002 00003DB8 7416                    	jz	short ExSetA		; neither set, default to ascii
 28003                                  TestBoth:
 28004 00003DBA 7A1E                    	jpe	short Exists		; both are set, ignore
 28005 00003DBC A808                    	test	al,8
 28006                                  	;test	al,SWITCHB
 28007 00003DBE 741A                    	jz	short Exists
 28008                                  	;mov	ax,(IOCTL shl 8) or 1
 28009 00003DC0 B80144                  	mov	ax,(IOCTL<<8)|1 ; 4401h
 28010 00003DC3 30F6                    	xor	dh,dh
 28011                                  	; 18/04/2023
 28012 00003DC5 80CA20                  	or	dl,20h
 28013                                  	;or	dl,devid_RAW
 28014 00003DC8 8816[8A8C]              	mov	[DESTISDEV],dl
 28015 00003DCC CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 28016                                  			; BX = device handle,DH = 0
 28017                                  			; DL = device information to set (bits 0-7 from	function 0)
 28018 00003DCE EB0A                    	jmp	short Exists
 28019                                  
 28020                                  	; 26/03/2023
 28021                                  	; 01/10/2018 - Retro DOS v3.0 modification
 28022                                  ;DEST_OPEN_ERROR:
 28023                                  	;mov	dx,FULDIRPTR
 28024                                  	;call	GET_EXT_ERR_NUMBER
 28025                                  ;COPERR:
 28026                                  	; 26/03/2023
 28027                                  ;CopyErrj:
 28028                                  	;jmp	short COPYERR
 28029                                  
 28030                                  ExSetA:
 28031                                  ;	What we read in may have been in binary mode, flag zapped write OK
 28032                                  
 28033 00003DD0 C606[4D8D]04            	mov	byte [ASCII],4
 28034                                  	;mov	byte [ASCII],SWITCHA	; set ascii mode
 28035 00003DD5 800E[478D]04            	or	byte [INEXACT],4
 28036                                  	;or	byte [INEXACT],SWITCHA	; ascii -> inexact
 28037                                  Exists:
 28038 00003DDA 803E[488D]00            	cmp	byte [NOWRITE],0
 28039 00003DDF 7524                    	jnz	short NoChecking	; if nowrite don't bother with name check
 28040 00003DE1 803E[0B8C]01            	cmp	byte [plus_comma],1	; don't check if just doing +,,
 28041 00003DE6 741D                    	jz	short NoChecking
 28042 00003DE8 E85803                  	call	COMPNAME		; source and dest. the same?
 28043 00003DEB 7518                    	jnz	short NoChecking	; if not, go ahead
 28044 00003DED 803E[ED8C]00            	cmp	byte [SRCISDEV],0
 28045 00003DF2 7511                    	jne	short NoChecking	; same name on device ok
 28046                                  
 28047                                  ;	At this point we know in append (would have gotten overwrite error
 28048                                  ;	on first destination create otherwise), and user trying to specify
 28049                                  ;	destination which has been scribbled already (if dest had been named
 28050                                  ;	first, NoWrite would be set).
 28051                                  
 28052 00003DF4 BA[287F]                	mov	dx,LOSTERR_PTR		; tell him he's not going to get it
 28053                                  	;invoke	Std_EprintF		;ac022;
 28054                                  	; 26/03/2023
 28055 00003DF7 E8CF0F                  	call	std_eprintf ; MSDOS 6.0 (& 5.0)
 28056                                  	;call	STD_PRINTF  ; MSDOS 3.3	
 28057 00003DFA C706[C88A]0000          	mov	word [NXTADD],0		; set return
 28058 00003E00 FE06[4C8D]              	inc	byte [TERMREAD]		; tell read to give up
 28059                                  Ret60:
 28060 00003E04 C3                      	retn
 28061                                  
 28062                                  NoChecking:
 28063 00003E05 8B1E[888C]              	mov	bx,[DESTHAND]		; get handle
 28064 00003E09 31C9                    	xor	cx,cx
 28065 00003E0B 870E[C88A]              	xchg	cx,[NXTADD]
 28066 00003E0F E3F3                    	jcxz	Ret60			; if nothing to write, forget it
 28067 00003E11 FF06[4A8D]              	inc	word [WRITTEN]		; flag that we wrote something
 28068 00003E15 803E[488D]00            	cmp	byte [NOWRITE],0	; if nowrite set, just seek cx bytes
 28069 00003E1A 7514                    	jnz	short SeekEnd
 28070 00003E1C 31D2                    	xor	dx,dx
 28071 00003E1E 1E                      	push	ds
 28072 00003E1F 8E1E[A78A]              	mov	ds,[TPA]
 28073 00003E23 B440                    	mov	ah,Write ; 40h
 28074 00003E25 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28075                                  			; BX = file handle,CX = number of bytes to write,DS:DX -> buffer
 28076 00003E27 1F                      	pop	ds
 28077 00003E28 BA[107F]                	mov	dx,NOSPACE_PTR
 28078                                  	;jc	short COPERRP		; failure
 28079                                  	; 26/03/2023
 28080                                  	; MSDOS 6.0
 28081 00003E2B 7326                    	jnc	short NoChecking2
 28082 00003E2D E951FF                  	jmp	Xa_Set_Error
 28083                                  
 28084                                  	; 18/04/2023
 28085                                  	; 26/03/2023
 28086                                  SeekEnd:
 28087 00003E30 31D2                    	xor	dx,dx
 28088 00003E32 87D1                    	xchg	dx,cx
 28089                                  	;mov	ax,(LSEEK shl 8) or 1
 28090 00003E34 B80142                  	mov	ax,(LSEEK<<8)|1 ; 4201h
 28091 00003E37 CD21                    	int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 28092                                  				; AL = method: offset from present location
 28093                                  
 28094                                  	; 26/03/2023
 28095                                  	; MSDOS 6.0
 28096                                  
 28097                                  ;	Save the file pointer in DX:AX to restore the file
 28098                                  ;	with in case the copy should fail.
 28099                                  
 28100 00003E39 A3[548D]                	mov	[OFilePtr_Lo],ax
 28101 00003E3C 8916[568D]              	mov	[OFilePtr_Hi],dx
 28102                                  
 28103                                  	; 26/03/2023
 28104                                  	; MSDOS 3.3  MSDOS 6.0
 28105                                  
 28106 00003E40 803E[B88A]00            	cmp	byte [RDEOF],0
 28107 00003E45 740B                    	jz	short Retz60
 28108                                  
 28109                                  ;	^Z has been read - we must set the file size to the current
 28110                                  ;	file pointer location
 28111                                  
 28112 00003E47 B440                    	mov	ah,Write ; 40h
 28113 00003E49 CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28114                                  				; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 28115                                  
 28116                                  	; 26/03/2023
 28117                                  	; MSDOS 6.0
 28118 00003E4B 727E                    	jc	short Xa_Set_Error_Jmp	;AC022; failure
 28119                                  
 28120                                  ;	Make note that ^Z was removed, in case the
 28121                                  ;	copy should fail and we need to restore the file.
 28122                                  
 28123 00003E4D C606[588D]1A            	mov	byte [OCtrlZ],1Ah
 28124                                  Retz60:
 28125 00003E52 C3                      	retn
 28126                                  
 28127                                  NoChecking2:
 28128 00003E53 29C1                    	sub	cx,ax
 28129 00003E55 74AD                    	jz	short Ret60		; wrote all supposed to
 28130                                  	; 18/04/2023
 28131 00003E57 F606[8A8C]80            	test	byte [DESTISDEV],80h ; devid_ISDEV
 28132                                  	;test	byte [DESTISDEV],devid_ISDEV ;80h
 28133 00003E5C 7414                    	jz	short COPYERR		; is a file, error
 28134 00003E5E F606[8A8C]20            	test	byte [DESTISDEV],20h  ; devid_RAW
 28135                                  	;test	byte [DESTISDEV],devid_RAW ; 20h
 28136 00003E63 750A                    	jnz	short DevWrtErr	; is a raw device, error
 28137 00003E65 803E[478D]00            	cmp	byte [INEXACT],0
 28138 00003E6A 7598                    	jnz	short Ret60		; inexact so ok
 28139 00003E6C 49                      	dec	cx
 28140                                  ;Retz60:
 28141 00003E6D 7495                    	jz	short Ret60		; wrote one byte less (the ^z)
 28142                                  
 28143                                  DevWrtErr:
 28144 00003E6F BA[9380]                	mov	dx,DEVWMES_PTR
 28145                                  	; 26/03/2023
 28146                                  COPYERR:
 28147                                  	;invoke	Std_EPrintF		;AC022;
 28148 00003E72 E8540F                  	call	std_eprintf  ; MSDOS 6.0
 28149                                  	;call	STD_PRINTF   ; MSDOS 3.3
 28150                                  CopErrP:
 28151 00003E75 FE06[C58A]              	inc	byte [DestClosed]
 28152 00003E79 803E[C48A]00            	cmp	byte [CFLAG],0
 28153 00003E7E 7448                    	jz	short EndCopyJ		; never actually got it open
 28154 00003E80 8B1E[888C]              	mov	bx,[DESTHAND]
 28155 00003E84 83FB00                  	cmp	bx,0
 28156 00003E87 7E33                    	jle	short NoClose
 28157                                  
 28158                                  ;	Check to see if we should save part of the destination file.
 28159                                  
 28160                                  	; 26/03/2023
 28161                                  	; MSDOS 6.0
 28162 00003E89 8B0E[568D]              	mov	cx,[OFilePtr_Hi]	; CX = hi word of original file ptr
 28163 00003E8D 8B16[548D]              	mov	dx,[OFilePtr_Lo]	; DX = lo word of original file ptr
 28164                                  			
 28165 00003E91 89C8                    	mov	ax,cx
 28166 00003E93 09D0                    	or	ax,dx
 28167 00003E95 7421                    	jz	short ceClose		; null file ptr means nothing to save
 28168                                  
 28169                                  ;	Destination was also the first source. Do the best we can to
 28170                                  ;	restore it. Truncate it back to the size we took from it (which
 28171                                  ;	may have been due to a Ctrl-Z, so may not have included the whole
 28172                                  ;	file). If a Ctrl-Z was originally read, put it back.
 28173                                  
 28174 00003E97 B80042                  	mov	ax,(LSEEK<<8) ; 4200h
 28175 00003E9A CD21                    	int	21h
 28176                                  
 28177 00003E9C 31C9                    	xor	cx,cx			; CX = # bytes to write = 0
 28178 00003E9E B440                    	mov	ah,Write ; 40h
 28179 00003EA0 CD21                    	int	21h			; truncate file
 28180                                  
 28181 00003EA2 803E[588D]00            	cmp	byte [OCtrlZ],0
 28182 00003EA7 7408                    	je	short ceClose0		; no ctrl-z removed from original
 28183 00003EA9 41                      	inc	cx			; CX = # bytes to write = 1
 28184 00003EAA BA[588D]                	mov	dx,OCtrlZ		; DS:DX = ptr to original ctrl-z
 28185 00003EAD B440                    	mov	ah,Write ; 40h
 28186 00003EAF CD21                    	int	21h			; write ctrl-z
 28187                                  ceClose0:
 28188 00003EB1 B43E                    	mov	ah,CLOSE ; 3Eh
 28189 00003EB3 CD21                    	int	21h			; close it
 28190                                  ;;	;mov	byte [CFLAG],0
 28191 00003EB5 E980FA                  	jmp	ENDCOPY			; and go home
 28192                                  
 28193                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28194                                  ceClose:
 28195 00003EB8 B43E                    	mov	ah,CLOSE ; 3Eh		; close the file
 28196 00003EBA CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28197                                  				; BX = file handle
 28198                                  NoClose:
 28199 00003EBC BA[318C]                	mov	dx,DestBuf
 28200 00003EBF B441                    	mov	ah,Unlink ; 41h 	; and delete it
 28201 00003EC1 CD21                    	int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
 28202                                  				; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
 28203 00003EC3 C606[C48A]00            	mov	byte [CFLAG],0
 28204                                  EndCopyJ:
 28205 00003EC8 E96DFA                  	jmp	ENDCOPY
 28206                                  
 28207                                  Xa_Set_Error_Jmp:			;AN022; go set up error message
 28208 00003ECB E9B3FE                  	jmp	Xa_Set_Error
 28209                                  
 28210                                  ;============================================================================
 28211                                  ; COPYPR2.ASM, MSDOS 6.0, 1991
 28212                                  ;============================================================================
 28213                                  ; 01/10/2018 - Retro DOS v3.0
 28214                                  
 28215                                  ; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 311Fh
 28216                                  
 28217                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28218                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4095h
 28219                                  
 28220                                  ; =============== S U B	R O U T	I N E =======================================
 28221                                  
 28222                                  ;***	SetAsc - set Ascii, Binary, Inexact flags based on switches
 28223                                  ;
 28224                                  ;	Given switch vector in AX,
 28225                                  ;	  Set Ascii flag if /a is set
 28226                                  ;	  Clear Ascii flag if /b is set
 28227                                  ;	  Binary set if /b specified
 28228                                  ;	  Leave Ascii unchanged if neither or both are set
 28229                                  ; 	Also sets Inexact if Ascii is ever set. 
 28230                                  ;	AL = Ascii on exit, flags set
 28231                                  
 28232                                  	; 26/03/2023
 28233                                  SETASC:
 28234                                  	;and	al,SWITCHA+SWITCHB ; 0Ch ; AL = /a, /b flags
 28235 00003ECE 240C                    	and	al,0Ch ; 4+8
 28236 00003ED0 7A10                    	jpe	short LOADSW	; even parity - both or neither
 28237 00003ED2 50                      	push	ax
 28238                                  	;and	al,SWITCHB  ; 8
 28239 00003ED3 2408                    	and	al,8
 28240 00003ED5 A2[498D]                	mov	[BINARY],al
 28241 00003ED8 58                      	pop	ax
 28242                                  	;and	al,SWITCHA
 28243 00003ED9 2404                    	and	al,4	
 28244 00003EDB A2[4D8D]                	mov	[ASCII],al
 28245 00003EDE 0806[478D]              	or	[INEXACT],al
 28246                                  LOADSW:
 28247 00003EE2 A0[4D8D]                	mov	al,[ASCII]
 28248 00003EE5 08C0                    	or	al,al
 28249 00003EE7 C3                      	retn
 28250                                  
 28251                                  ; =============== S U B	R O U T	I N E =======================================
 28252                                  
 28253                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28254                                  BUILDDEST:
 28255 00003EE8 803E[2C8C]FF            	cmp	byte [DestIsDir],-1 ; 0FFh
 28256 00003EED 750C                    	jnz	short KNOWABOUTDEST	; figuring already done
 28257 00003EEF BF[8789]                	mov	di,USERDIR1
 28258 00003EF2 BD[2C8C]                	mov	bp,DestVars
 28259 00003EF5 E8DF00                  	call	BUILDPATH
 28260 00003EF8 E886E5                  	call	RestUDir1
 28261                                  
 28262                                  ;	We now know all about the destination
 28263                                  
 28264                                  KNOWABOUTDEST:
 28265 00003EFB 30C0                    	xor	al,al
 28266 00003EFD 8606[8B8C]              	xchg	al,[FIRSTDEST]
 28267 00003F01 08C0                    	or	al,al
 28268 00003F03 7503                    	jnz	short FIRSTDST
 28269 00003F05 E98C00                  	jmp	NOFIRSTDEST
 28270                                  
 28271                                  FIRSTDST:
 28272                                  ;	Create an fcb of the original dest.
 28273                                  
 28274 00003F08 8B36[2E8C]              	mov	si,[DestTail]
 28275 00003F0C BF[6B8B]                	mov	di,DestFcb
 28276 00003F0F B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 28277 00003F12 CD21                    	int	21h		; DOS -	PARSE FILENAME
 28278                                  				; DS:SI	-> string to parse
 28279                                  				; ES:DI	-> buffer to fill with unopened	FCB
 28280                                  				; AL = bit mask	to control parsing
 28281 00003F14 803C00                  	cmp	byte [si],0
 28282 00003F17 7406                    	jz	short GOODPARSE
 28283                                  
 28284                                  	; 27/03/2023	
 28285                                  	; MSDOS 6.0
 28286                                  	;mov	byte [di+1],"|"	;AD052; must be illegal file name character
 28287                                  	
 28288 00003F19 BA[167F]                	mov	dx,FULLDIR_PTR		;AN052; issue "file creation error"
 28289 00003F1C E953FF                  	jmp	COPYERR			;AN052;
 28290                                  GOODPARSE:
 28291 00003F1F A1[318C]                	mov	ax,[DestBuf]		; AX = possible "d:"
 28292 00003F22 80FC3A                  	cmp	ah,':'
 28293 00003F25 7402                    	jz	short DRVSPEC4
 28294 00003F27 B040                    	mov	al,'@'  ; 40h
 28295                                  DRVSPEC4:
 28296                                  ;	AX = "d:" for following FCB drive computation
 28297                                  
 28298 00003F29 8A0E[4D8D]              	mov	cl,[ASCII]		; CL = saved Ascii flag
 28299 00003F2D 0C20                    	or	al,20h
 28300 00003F2F 2C60                    	sub	al,60h
 28301 00003F31 A2[6B8B]                	mov	[DestFcb],al		; store drive # in FCB
 28302                                  
 28303                                  ;*	Figure out what copy mode we're in.
 28304                                  ;	Letters stand for unambiguous, * for ambiguous pathnames.
 28305                                  ;	+n stands for additional sources delimited by +'s.
 28306                                  ;
 28307                                  ;	copy a b	not concatenating
 28308                                  ;	copy a *	not concatenating
 28309                                  ;	copy * a	concatenating
 28310                                  ;	copy * *	not concatenating
 28311                                  ;	copy a+n b	concatenating
 28312                                  ;	copy *+n a	concatenating
 28313                                  ;	copy *+n *	concatenating, Mel Hallerman style
 28314                                  
 28315                                  ;	Bugbug:  copy *.a+a.b *.t  picks up only 1st *.a file.. Why?
 28316                                  ;		 copy a.b+*.a *.t  picks up all *.a files.
 28317                                  
 28318 00003F34 A0[308C]                	mov	al,[DestInfo]		; AL = destination CParse flags
 28319 00003F37 8A26[938C]              	mov	ah,[SrcInfo]		; AH = source CParse flags
 28320 00003F3B 250202                  	and	ax,202h			; AH,AL = source,dest wildcard flags
 28321 00003F3E 08C0                    	or	al,al
 28322 00003F40 7413                    	jz	short NOTMELCOPY 	; no destination wildcard
 28323                                  
 28324                                  ;	Destination is wildcarded.
 28325                                  	
 28326 00003F42 38E0                    	cmp	al,ah
 28327 00003F44 750F                    	jnz	short NOTMELCOPY ; no source wildcard
 28328                                  
 28329                                  ;	Source and destination are both wildcarded.
 28330                                  
 28331 00003F46 803E[4E8D]00            	cmp	byte [PLUS],0
 28332 00003F4B 7408                    	jz	short NOTMELCOPY	; no +'s in source
 28333                                  
 28334                                  ;	Source and destination are wildcarded, and source includes +'s.
 28335                                  ;	It's Mel Hallorman copy time.
 28336                                  
 28337 00003F4D FE06[8C8C]              	inc	byte [MELCOPY]		; 'Mel copy' = true
 28338 00003F51 30C0                    	xor	al,al
 28339 00003F53 EB06                    	jmp	short SETCONC
 28340                                  
 28341                                  NOTMELCOPY:
 28342 00003F55 3402                    	xor	al,2			; AL=0 -> ambiguous destination, 2 otherwise
 28343 00003F57 20E0                    	and	al,ah
 28344 00003F59 D0E8                    	shr	al,1			; AL=1 -> ambiguous source, unambiguous dest
 28345                                  					;   (implies concatenation)
 28346                                  SETCONC:
 28347 00003F5B 0A06[4E8D]              	or	al,[PLUS]		; "+" always infers concatenation
 28348                                  
 28349                                  ;	Whew. AL = 1 if concatenating, 0 if not.
 28350                                  
 28351 00003F5F A2[BA8A]                	mov	[Concat],al
 28352 00003F62 D0E0                    	shl	al,1
 28353 00003F64 D0E0                    	shl	al,1
 28354 00003F66 A2[478D]                	mov	[INEXACT],al		; concatenation -> inexact copy
 28355 00003F69 803E[498D]00            	cmp	byte [BINARY],0
 28356 00003F6E 7524                    	jne	short NOFIRSTDEST 	; explicit binary copy
 28357                                  
 28358 00003F70 A2[4D8D]                	mov	[ASCII],al		; otherwise, concatenate in ascii mode
 28359 00003F73 08C9                    	or	cl,cl
 28360 00003F75 751D                    	jnz	short NOFIRSTDEST 	; Ascii flag set before, data read correctly
 28361 00003F77 08C0                    	or	al,al
 28362 00003F79 7419                    	jz	short NOFIRSTDEST 	; Ascii flag did not change state
 28363                                  
 28364                                  ;	At this point there may already be binary read data in the read
 28365                                  ;	buffer. We need to find the first ^Z (if there is one) and trim the
 28366                                  ;	amount of data in the buffer correctly.
 28367                                  
 28368 00003F7B 8B0E[C88A]              	mov	cx,[NXTADD]
 28369 00003F7F E313                    	jcxz	NOFIRSTDEST		; no data, everything ok
 28370 00003F81 B01A                    	mov	al,1Ah
 28371 00003F83 06                      	push	es
 28372 00003F84 31FF                    	xor	di,di
 28373 00003F86 8E06[A78A]              	mov	es,[TPA]
 28374 00003F8A F2AE                    	repne	scasb			; scan for EOF
 28375 00003F8C 07                      	pop	es
 28376 00003F8D 7505                    	jnz	short NOFIRSTDEST 	; no ^z in buffer, everything ok
 28377 00003F8F 4F                      	dec	di			; point at ^z
 28378 00003F90 893E[C88A]              	mov	[NXTADD],di		; new buffer length
 28379                                  
 28380                                  NOFIRSTDEST:
 28381 00003F94 BB[AF8B]                	mov	bx,DIRBUF+1		; Source of replacement chars
 28382 00003F97 803E[BA8A]00            	cmp	byte [Concat],0
 28383 00003F9C 7403                    	jz	short GOTCHRSRC		; Not a concat
 28384 00003F9E BB[F58B]                	mov	bx,SDIRBUF+1		; Source of replacement chars
 28385                                  GOTCHRSRC:
 28386 00003FA1 BE[6C8B]                	mov	si,DestFcb+1		; Original dest name
 28387 00003FA4 8B3E[2E8C]              	mov	di,[DestTail]		; Where to put result
 28388                                  
 28389                                  ; --------------- S U B	R O U T	I N E --------------------------------------- 
 28390                                  
 28391                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28392                                  BUILDNAME:
 28393 00003FA8 B90800                  	mov	cx,8
 28394                                  BUILDMAIN:
 28395 00003FAB AC                      	lodsb
 28396 00003FAC 3C3F                    	cmp	al,'?'
 28397 00003FAE 7502                    	jne	short NOTAMBIG
 28398 00003FB0 8A07                    	mov	al,[bx]
 28399                                  NOTAMBIG:
 28400 00003FB2 3C20                    	cmp	al,' '
 28401 00003FB4 7401                    	je	short NOSTORE
 28402 00003FB6 AA                      	stosb
 28403                                  NOSTORE:
 28404 00003FB7 43                      	inc	bx
 28405 00003FB8 E2F1                    	loop	BUILDMAIN
 28406 00003FBA B103                    	mov	cl,3
 28407                                  	;mov	al,' ' ; 20h
 28408                                  	;cmp	[si],al
 28409                                  	; 27/03/2023
 28410 00003FBC 803C20                  	cmp	byte [si],20h ; ' '
 28411 00003FBF 7412                    	je	short ENDDEST		; No extension
 28412                                  	;mov	al,[DOT_CHR]
 28413                                  	; 27/03/2023
 28414 00003FC1 B02E                    	mov	al,'.' ; 2Eh ; dot_chr
 28415 00003FC3 AA                      	stosb
 28416                                  BUILDEXT:
 28417 00003FC4 AC                      	lodsb
 28418 00003FC5 3C3F                    	cmp	al,'?'
 28419 00003FC7 7502                    	jne	short NOTAMBIGE
 28420 00003FC9 8A07                    	mov	al,[bx]
 28421                                  NOTAMBIGE:
 28422 00003FCB 3C20                    	cmp	al,' '
 28423 00003FCD 7401                    	je	short NOSTOREE
 28424 00003FCF AA                      	stosb
 28425                                  NOSTOREE:
 28426 00003FD0 43                      	inc	bx
 28427 00003FD1 E2F1                    	loop	BUILDEXT
 28428                                  ENDDEST:
 28429 00003FD3 30C0                    	xor	al,al
 28430 00003FD5 AA                      	stosb				; NUL terminate
 28431 00003FD6 C3                      	retn
 28432                                  
 28433                                  ; =============== S U B	R O U T	I N E =======================================
 28434                                  	
 28435                                  	; 28/03/2023
 28436                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28437                                  BUILDPATH:
 28438 00003FD7 F6460402                	test	byte [bp+VARSTRUC.INFO],2 ; test byte [bp+4],2
 28439 00003FDB 7543                    	jnz	short NOTPFILE		; If ambig don't bother with open
 28440 00003FDD 89EA                    	mov	dx,bp			; Set DX to spec
 28441 00003FDF 83C205                  	add	dx,VARSTRUC.BUF 	; add dx,5
 28442                                  
 28443                                  	; 27/03/2023
 28444                                  	; MSDOS 6.0
 28445 00003FE2 57                      	push	di			;AN000;
 28446 00003FE3 B8006C                  	mov	ax,(ExtOpen<<8)	; 6C00h	;AC000; open the file
 28447                                  	;mov	bx,deny_none|read_open_mode
 28448 00003FE6 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 28449 00003FE9 31C9                    	xor	cx,cx			;AN000; no special files
 28450 00003FEB 89D6                    	mov	si,dx			;AN030; get file name offset
 28451                                  	;mov	dx,read_open_flag	;AN000; set up open flags
 28452 00003FED BA0101                  	mov	dx,101h
 28453 00003FF0 CD21                    	INT	21h
 28454 00003FF2 5F                      	pop	di			;AN000;
 28455 00003FF3 7315                    	jnc	short PURE_FILE		;AN022; is pure file
 28456 00003FF5 E8F8DC                  	call	get_ext_error_number	;AN022; get the extended error
 28457                                  	;cmp	ax,2
 28458 00003FF8 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ;AN022; if file not found - okay
 28459 00003FFB 7423                    	jz	short NOTPFILE		;AN022;
 28460                                  	;cmp	ax,3
 28461 00003FFD 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 28462 00004000 741E                    	jz	short NOTPFILE		;AN022;
 28463                                  	;cmp	ax,5
 28464 00004002 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 28465 00004005 7419                    	jz	short NOTPFILE		;AN022;
 28466 00004007 E929DA                  	jmp	extend_setup		;AN022; exit with error
 28467                                  
 28468                                  	; 27/03/2023
 28469                                  	; MSDOS 3.3
 28470                                  	;mov	ax,OPEN*256 ; 3D00h
 28471                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 28472                                  	;			; DS:DX	-> ASCIZ filename
 28473                                  	;			; AL = access mode
 28474                                  	;			; 0 - read
 28475                                  	;jc	short NOTPFILE
 28476                                  
 28477                                  PURE_FILE:
 28478 0000400A 89C3                    	mov	bx,ax
 28479 0000400C B80044                  	mov	ax,IOCTL*256 ; 4400h
 28480 0000400F CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28481                                  				; BX = file or device handle
 28482 00004011 B43E                    	mov	ah,CLOSE ;3Eh
 28483 00004013 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28484                                  				; BX = file handle
 28485                                  	; 18/04/2023
 28486 00004015 F6C280                  	test	dl,80h
 28487                                  	;test	dl,devid_ISDEV ; test dl,80h
 28488 00004018 7553                    	jnz	short ISADEV
 28489 0000401A F6460404                	test	byte [bp+VARSTRUC.INFO],4 ; test byte [bp+4],4
 28490 0000401E 744D                    	jz	short ISADEV
 28491                                  NOTPFILE:
 28492 00004020 8B5605                  	mov	dx,[bp+VARSTRUC.BUF] ; mov dx,[bp+5]
 28493                                  	
 28494                                  	; 27/03/2023
 28495                                  	; MSDOS 6.0
 28496 00004023 80FA00                  	cmp	dl,0		     	;AN034; If no drive specified, get
 28497 00004026 7405                    	je	short SET_DRIVE_SPEC	;AN034;    default drive dir
 28498                                  
 28499 00004028 80FE3A                  	cmp	dh,':'
 28500 0000402B 7402                    	je	short DRVSPEC5
 28501                                  SET_DRIVE_SPEC:
 28502 0000402D B240                    	mov	dl,'@' ; 40h
 28503                                  DRVSPEC5:
 28504 0000402F 80CA20                  	or	dl,20h
 28505 00004032 80EA60                  	sub	dl,60h		; A = 1
 28506 00004035 E876E5                  	call	SAVUDIR1
 28507                                  	
 28508                                  	; 27/03/2023
 28509                                  	; MSDOS 6.0
 28510 00004038 7306                    	jnc	short CURDIR_OK		;AN022; if error - exit
 28511 0000403A E8B3DC                  	call	get_ext_error_number	;AN022; get the extended error
 28512 0000403D E9F3D9                  	jmp	extend_setup		;AN022; exit with error
 28513                                  
 28514                                  CURDIR_OK:
 28515 00004040 89EA                    	mov	dx,bp
 28516                                  	;add	dx,5
 28517 00004042 83C205                  	add	dx,VARSTRUC.BUF		; Set DX for upcomming CHDIRs
 28518                                  	;mov	bh,[bp+4]
 28519 00004045 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 28520 00004048 80E706                  	and	bh,6
 28521 0000404B 80FF06                  	cmp	bh,6			; Ambig and path ?
 28522 0000404E 7518                    	jne	short CHECKAMB		; jmp if no
 28523                                  	;mov	si,[bp+2]
 28524 00004050 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 28525 00004053 B33A                    	mov	bl,':'
 28526 00004055 385CFE                  	cmp	[si-2],bl
 28527 00004058 7506                    	jne	short KNOWNOTSPEC
 28528                                  	;mov	byte [bp+VARSTRUC.ISDIR],2
 28529                                  					; Know is d:/file
 28530                                  	;mov	byte [bp+0],2
 28531 0000405A C6460002                	mov	byte [bp],2
 28532 0000405E EB05                    	jmp	short DOPCDJ
 28533                                  KNOWNOTSPEC:
 28534                                  	;mov	byte [bp+VARSTRUC.ISDIR],1
 28535                                  					; Know is path/file
 28536                                  	;mov	byte [bp+0],1
 28537 00004060 C6460001                	mov	byte [bp],1
 28538 00004064 4E                      	dec	si
 28539                                  DOPCDJ:
 28540 00004065 E98300                  	jmp	DOPCD
 28541                                  CHECKAMB:
 28542 00004068 80FF02                  	cmp	bh,2
 28543 0000406B 7505                    	jnz	short CHECKCD
 28544                                  ISSIMPFILE:
 28545                                  ISADEV:
 28546                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 28547                                  	;mov	byte [bp+0],0
 28548 0000406D C6460000                	mov	byte [bp],0
 28549 00004071 C3                      	retn
 28550                                  CHECKCD:
 28551 00004072 E86CEC                  	call	SetRest1
 28552 00004075 B43B                    	mov	ah,CHDir ; 3Bh
 28553 00004077 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 28554                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 28555 00004079 7239                    	jb	short NOTPDIR
 28556 0000407B 89D7                    	mov	di,dx
 28557 0000407D 31C0                    	xor	ax,ax
 28558 0000407F 89C1                    	mov	cx,ax
 28559 00004081 49                      	dec	cx
 28560                                  	; 14/06/2023
 28561                                  	;repne	scasb	 ; MSDOS 3.3
 28562                                  
 28563                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28564                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:424Ah)
 28565                                  	; MSDOS 6.0
 28566                                  Kloop:					;AN000;  3/3/KK
 28567 00004082 268A05                  	mov	al,[es:di]		;AN000;  3/3/KK
 28568 00004085 47                      	inc	di			;AN000;  3/3/KK
 28569 00004086 08C0                    	or	al,al			;AN000;  3/3/KK
 28570 00004088 740C                    	jz	short DONE		;AN000;  3/3/KK
 28571 0000408A 30E4                    	xor	ah,ah			;AN000;  3/3/KK
 28572 0000408C E830E3                  	call	testkanj		;AN000;  3/3/KK
 28573 0000408F 74F1                    	jz	short Kloop		;AN000;  3/3/KK
 28574 00004091 47                      	inc	di			;AN000;  3/3/KK
 28575 00004092 FEC4                    	inc	ah			;AN000;  3/3/KK
 28576 00004094 EBEC                    	jmp	short Kloop		;AN000;  3/3/KK
 28577                                  DONE:
 28578 00004096 4F                      	dec	di
 28579 00004097 A0[AA8A]                	mov	al,[DIRCHAR]
 28580                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 28581                                  	;mov	byte [bp+0],2
 28582 0000409A C6460002                	mov	byte [bp],2
 28583                                  	; 27/03/2023
 28584                                  	; MSDOS 6.0
 28585 0000409E 08E4                    	or	ah,ah			;AN000; 3/3/KK
 28586 000040A0 7505                    	jnz	short _STORE_PCHAR	;AN000; 3/3/KK
 28587                                  					;this is the trailing byte of ECS code
 28588                                  	;
 28589 000040A2 3A45FF                  	cmp	al,[di-1]
 28590 000040A5 7405                    	jz	short GOTSRCSLSH
 28591                                  _STORE_PCHAR:
 28592 000040A7 AA                      	stosb
 28593                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 ; know path/file
 28594                                  	;mov	byte [bp+0],1
 28595 000040A8 C6460001                	mov	byte [bp],1
 28596                                  GOTSRCSLSH:
 28597                                  	;or	byte [bp+4],6
 28598 000040AC 804E0406                	or 	byte [bp+VARSTRUC.INFO],6
 28599 000040B0 E87400                  	call	SETSTARS
 28600                                  NOTPDIR_RETN:
 28601 000040B3 C3                      	retn
 28602                                  
 28603                                  	; 28/03/2023
 28604                                  NOTPDIR:
 28605                                  	; MSDOS 6.0
 28606 000040B4 E839DC                  	call	get_ext_error_number	;AN022; get the extended error
 28607                                  	;cmp	ax,3
 28608 000040B7 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 28609 000040BA 7405                    	je	short NOTPDIR_TRY	;AN022;
 28610                                  	;cmp	ax,5
 28611 000040BC 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 28612 000040BF 7560                    	jne	short EXTEND_SETUPJ	;AN022; otherwise - exit error
 28613                                  NOTPDIR_TRY:
 28614                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28615                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 28616                                  	;mov	byte [bp+0],0
 28617 000040C1 C6460000                	mov	byte [bp],0
 28618                                  	;mov	bh,[bp+4]
 28619 000040C5 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 28620 000040C8 F6C704                  	test	bh,4
 28621 000040CB 74E6                    	jz	short NOTPDIR_RETN	; Know pure file, no path seps
 28622                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 28623                                  	;mov	byte [bp+0],2
 28624 000040CD C6460002                	mov	byte [bp],2
 28625                                  	;mov	si,[bp+2]
 28626 000040D1 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 28627 000040D4 803C00                  	cmp	byte [si],0
 28628 000040D7 744B                    	je	short BADCDERRJ2	; Trailing '/'
 28629                                  	;mov	bl,[DOT_CHR]
 28630                                  	; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 28631                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 28632 000040D9 B32E                    	mov	bl,'.'  ; 2Eh ; dot_chr
 28633 000040DB 381C                    	cmp	[si],bl
 28634 000040DD 7445                    	je	short BADCDERRJ2	; If . or .. pure cd should have worked
 28635 000040DF B33A                    	mov	bl,':'  ; 3Ah
 28636 000040E1 385CFE                  	cmp	[si-2],bl
 28637 000040E4 7405                    	je	short DOPCD		; Know d:/file
 28638                                  	;mov	byte [bp+VARSTRUC.ISDIR],1
 28639                                  					; Know path/file
 28640                                  	;mov	byte [bp+0],1
 28641 000040E6 C6460001                	mov	byte [bp],1
 28642 000040EA 4E                      	dec	si			; Point at last '/'
 28643                                  DOPCD:
 28644 000040EB 30DB                    	xor	bl,bl
 28645 000040ED 861C                    	xchg	bl,[si]			; Stick in a NUL
 28646 000040EF E8EFEB                  	call	SetRest1
 28647                                  
 28648                                  	; 28/03/2023
 28649                                  	; MSDOS 6.0 (& MSDOS 5.0)
 28650 000040F2 39F2                    	cmp	dx,si			;AN000;  3/3/KK
 28651 000040F4 771B                    	ja	short LookBack		;AN000;  3/3/KK
 28652 000040F6 56                      	push	si			;AN000;  3/3/KK
 28653 000040F7 51                      	push	cx			;AN000;  3/3/KK
 28654 000040F8 89F1                    	mov	cx,si			;AN000;  3/3/KK
 28655 000040FA 89D6                    	mov	si,dx			;AN000;  3/3/KK
 28656                                  Kloop2: 				;AN000;  3/3/KK
 28657 000040FC AC                      	lodsb				;AN000;  3/3/KK
 28658 000040FD E8BFE2                  	call	testkanj		;AN000;  3/3/KK
 28659 00004100 7409                    	jz	short NotKanj4		;AN000;  3/3/KK
 28660 00004102 AC                      	lodsb				;AN000;  3/3/KK
 28661 00004103 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 28662 00004105 72F5                    	jb	short Kloop2		;AN000;  3/3/KK
 28663 00004107 59                      	pop	cx			;AN000;  3/3/KK
 28664 00004108 5E                      	pop	si			;AN000;  3/3/KK
 28665 00004109 EB0B                    	jmp	short DoCdr		;AN000;  3/3/KK  Last char is ECS code, don't check for
 28666                                  					;		 trailing path sep
 28667                                  NotKanj4:				;AN000;  3/3/KK
 28668 0000410B 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 28669 0000410D 72ED                    	jb	short Kloop2		;AN000;  3/3/KK
 28670 0000410F 59                      	pop	cx			;AN000;  3/3/KK
 28671 00004110 5E                      	pop	si			;AN000;  3/3/KK
 28672                                  LookBack:				;AN000;  3/3/KK
 28673                                  	; 28/03/2023
 28674                                  	; MSDOS 3.3 & MSDOS 6.0
 28675 00004111 3A5CFF                  	cmp	bl,[si-1]		; if double slash, then complain.
 28676 00004114 740E                    	je	short BADCDERRJ2
 28677                                  DoCdr:
 28678 00004116 B43B                    	mov	ah,CHDir ; 3Bh
 28679 00004118 CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 28680                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 28681 0000411A 861C                    	xchg	bl,[si]
 28682 0000411C 7395                    	jnc	short NOTPDIR_RETN
 28683                                  	
 28684                                  	; 28/03/2023
 28685                                  	; MSDOS 3.3
 28686                                  ;BADCDERRJ2:
 28687                                  	;stc
 28688                                  	;jmp	BADCDERR
 28689                                  
 28690                                  	; 28/03/2023
 28691                                  	; MSDOS 6.0 (& MSDOS 5.0)
 28692 0000411E E8CFDB                  	call	get_ext_error_number	;AN022; get the extended error
 28693                                  EXTEND_SETUPJ:				;AN022;
 28694 00004121 E90FD9                  	jmp	extend_setup		;AN022; go issue the error message
 28695                                  BADCDERRJ2:
 28696 00004124 E909D9                  	jmp	badpath_err		;AC022; go issue path not found message
 28697                                  
 28698                                  ; =============== S U B	R O U T	I N E =======================================
 28699                                  
 28700                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28701                                  SETSTARS:
 28702                                  	;mov	[bp+2],di
 28703 00004127 897E02                  	mov	[bp+VARSTRUC.TTAIL],di
 28704                                  	;add	byte [bp+1],12
 28705 0000412A 8046010C                	add	byte [bp+VARSTRUC.SIZ],12
 28706                                  	;;mov	ax,[DOT_QMARK] ; '?.' (2E3Fh)
 28707                                  	; 28/03/2023
 28708                                  	; MSDOS 6.0
 28709 0000412E B83F2E                  	mov	ax,dot_qmark ; 2E3Fh
 28710                                  	;mov	ax,'?.' ; dot_qmark
 28711                                  
 28712 00004131 B90800                  	mov	cx,8
 28713 00004134 F3AA                    	rep	stosb
 28714 00004136 86C4                    	xchg	al,ah
 28715 00004138 AA                      	stosb
 28716 00004139 86C4                    	xchg	al,ah
 28717 0000413B B103                    	mov	cl,3
 28718 0000413D F3AA                    	rep	stosb
 28719 0000413F 30C0                    	xor	al,al
 28720 00004141 AA                      	stosb
 28721 00004142 C3                      	retn
 28722                                  
 28723                                  ; =============== S U B	R O U T	I N E =======================================
 28724                                  
 28725                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28726                                  COMPNAME:
 28727 00004143 BE[318C]                	mov	si,DestBuf	; do name translate of target
 28728 00004146 BF[2A88]                	mov	di,TRGXNAME	; save for name comparison
 28729 00004149 B460                    	mov	ah,xNameTrans ; 60h
 28730 0000414B CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 28731                                  			; DS:SI	-> ASCIZ relative path string or directory name
 28732                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 28733 0000414D BE[D387]                	mov	si,SRCXNAME	; get name translate of source
 28734 00004150 BF[2A88]                	mov	di,TRGXNAME	; get name translate of target
 28735                                  	;call	STRCOMP
 28736                                  	;retn
 28737                                  	; 28/03/2023
 28738 00004153 E9CAE4                  	jmp	STRCOMP
 28739                                  
 28740                                  ;============================================================================
 28741                                  ; CPARSE.ASM, MSDOS 6.0, 1991
 28742                                  ;============================================================================
 28743                                  ; 30/09/2018 - Retro DOS v3.0
 28744                                  ; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28745                                  
 28746                                  ;-----------------------------------------------------------------------;
 28747                                  ; ENTRY:								;
 28748                                  ;	DS:SI	Points input buffer					;
 28749                                  ;	ES:DI	Points to the token buffer				;
 28750                                  ;	BL	Special delimiter for this call 			;
 28751                                  ;		    Always checked last 				;
 28752                                  ;		    set it to space if there is no special delimiter	;
 28753                                  ; EXIT: 								;
 28754                                  ;	DS:SI	Points to next char in the input buffer 		;
 28755                                  ;	ES:DI	Points to the token buffer				;
 28756                                  ;	[STARTEL] Points to start of last element of path in token	;
 28757                                  ;		points to a NUL for no element strings 'd:' 'd:/'       ;
 28758                                  ;	CX	Character count 					;
 28759                                  ;	BH	Condition Code						;
 28760                                  ;			Bit 1H of BH set if switch character		;
 28761                                  ;				Token buffer contains char after	;
 28762                                  ;				switch character			;
 28763                                  ;				BP has switch bits set (ORing only)	;
 28764                                  ;			Bit 2H of BH set if ? or * in token		;
 28765                                  ;				if * found element ? filled		;
 28766                                  ;			Bit 4H of BH set if path sep in token		;
 28767                                  ;			Bit 80H of BH set if the special delimiter	;
 28768                                  ;			   was skipped at the start of this token	;
 28769                                  ;		Token buffer always starts d: for non switch tokens	;
 28770                                  ;	CARRY SET							;
 28771                                  ;	    if CR on input						;
 28772                                  ;		token buffer not altered				;
 28773                                  ;									;
 28774                                  ;	DOES NOT RETURN ON BAD PATH, OR TRAILING SWITCH CHAR ERROR	;
 28775                                  ; MODIFIES:								;
 28776                                  ;	CX, SI, AX, BH, DX and the Carry Flag				;
 28777                                  ;									;
 28778                                  ;-----------------------------------------------------------------------;
 28779                                  
 28780                                  ; Modifications to cparse: recognition of right and left parentheses
 28781                                  ; as integral tokens, and removal of automatic upper-case conversion code.
 28782                                  ;
 28783                                  ; Both modifications were installed in the course of adding a coherent
 28784                                  ; command-line parser to COMMAND.COM which builds a UNIX-style argv[]/argc
 28785                                  ; structure for command-line arguments. This parser relies on cparse to
 28786                                  ; recognize individual tokens.
 28787                                  ;
 28788                                  ; To process for-loops correctly, parentheses must therefore be
 28789                                  ; recognized as tokens. The upper-case conversion code was removed so
 28790                                  ; that commands (such as for and echo) would be able to use the "original"
 28791                                  ; text of the command line.
 28792                                  ;
 28793                                  ; Note also the modification to prevent the automatic conversion of colons
 28794                                  ; into spaces WITHIN THE SOURCE TEXT!
 28795                                  ;
 28796                                  ; Also note that BP is also clobbered if cparse recognizes any switches
 28797                                  ; on the command line.
 28798                                  ;
 28799                                  ; Alan L, OS/MSDOS				    14 August 1983
 28800                                  
 28801                                  ; ---------------------------------------------------------------------------
 28802                                  
 28803                                  ; COMEQU.ASM (MSDOS 6.0, 1991)
 28804                                  
 28805                                  ;FSWITCH	EQU	8000h
 28806                                  ;FBADSWITCH	EQU	4000h
 28807                                  
 28808                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3334h
 28809                                  
 28810                                  ; =============== S U B	R O U T	I N E =======================================
 28811                                  		
 28812                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28813                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 431Fh
 28814                                  
 28815                                  cparse:
 28816 00004156 31C0                    	xor	ax,ax
 28817 00004158 893E[5B8D]              	mov	[STARTEL],di		; No path element (Is DI correct?)
 28818 0000415C A2[5E8D]                	mov	[ELPOS],al		; Start in 8 char prefix
 28819                                  	; MSDOS 3.3
 28820                                  	;mov	[SOURCE],al		
 28821                                  	; MSDOS 6.0
 28822 0000415F A2[5F8D]                	mov	[SKPDEL], al		; No skip delimiter yet
 28823 00004162 88C7                    	mov	bh,al			; Init nothing
 28824 00004164 9C                      	pushf				; save flags
 28825 00004165 57                      	push	di			; save the token buffer addrss
 28826 00004166 31C9                    	xor	cx,cx			; no chars in token buffer
 28827 00004168 880E[0A8C]              	mov	[comma],cl		; reset comma flag
 28828                                  moredelim:
 28829 0000416C AC                      	lodsb
 28830 0000416D E876E4                  	call	DELIM
 28831 00004170 751D                    	jnz	short SCANCDONE
 28832 00004172 3C20                    	cmp	al,' '
 28833 00004174 74F6                    	jz	short moredelim
 28834 00004176 3C09                    	cmp	al,9
 28835 00004178 74F2                    	jz	short moredelim
 28836                                  	;xchg	al,[SOURCE]
 28837                                  	; 28/03/2023
 28838 0000417A 8606[5F8D]              	xchg	al,[SKPDEL]
 28839 0000417E 08C0                    	or	al,al
 28840 00004180 74EA                    	jz	short moredelim		; One non space/tab delimiter allowed
 28841 00004182 F6C780                  	test	bh,80h			; has a special char been found?
 28842 00004185 7405                    	jz	short no_comma		; no - just exit
 28843 00004187 C606[0A8C]01            	mov	byte [comma],1		; set comma flag
 28844                                  no_comma:
 28845 0000418C E92A01                  	jmp	x_done			; Nul argument
 28846                                  
 28847                                  SCANCDONE:
 28848                                  	; 28/03/2023
 28849                                  	; MSDOS 6.0
 28850                                  	; -----------------------------------
 28851                                  	; Mod to avoid upper-case conversion.
 28852                                  	; -----------------------------------
 28853                                  	; MSDOS 3.3
 28854                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 28855                                  	;jnz	short cpcont1		; 3/3/KK
 28856                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 28857                                  cpcont1:
 28858                                  	; -----------------------------------
 28859                                  	; 28/03/2023
 28860 0000418F 38D8                    	cmp	al,bl			; Special delimiter?
 28861 00004191 7505                    	jne	short nospec
 28862 00004193 80CF80                  	or	bh,80h
 28863 00004196 EBD4                    	jmp	short moredelim
 28864                                  nospec:
 28865 00004198 3C0D                    	cmp	al,0Dh			; a CR?
 28866 0000419A 7503                    	jne	short ncperror
 28867 0000419C E91501                  	jmp	cperror
 28868                                  ncperror:
 28869 0000419F 3A06[A98A]              	cmp	al,[SWITCHAR]		; is the char the switch char?
 28870 000041A3 7503                    	jne	short na_switch		; yes, process...
 28871 000041A5 E91401                  	jmp	a_switch
 28872                                  na_switch:
 28873 000041A8 B23A                    	mov	dl,':'
 28874 000041AA 3814                    	cmp	[si],dl
 28875 000041AC 751D                    	jne	short anum_chard	; Drive not specified
 28876                                  	; 28/03/2023
 28877                                  	; MSDOS 6.0 
 28878 000041AE 803E[198C]01            	cmp	byte [cpyflag],1	; 3/3/KK
 28879 000041B3 7503                    	jne	short cpcont2		; 3/3/KK
 28880 000041B5 E831E2                  	call	UPCONV			; 3/3/KK
 28881                                  cpcont2:
 28882 000041B8 E85901                  	call	move_char
 28883 000041BB AC                      	lodsb				; Get the ':'
 28884 000041BC E85501                  	call	move_char
 28885 000041BF 893E[5B8D]              	mov	[STARTEL],di
 28886 000041C3 C606[5D8D]00            	mov	byte [ELCNT],0
 28887 000041C8 E9B300                  	jmp	anum_test
 28888                                  anum_chard:
 28889 000041CB 893E[5B8D]              	mov	[STARTEL],di
 28890 000041CF C606[5D8D]00            	mov	byte [ELCNT],0		; Store of this char sets it to one
 28891 000041D4 803E[198C]01            	cmp	byte [cpyflag],1	; Was CPARSE called from COPY?
 28892 000041D9 751D                    	jnz	short anum_char		; No, don't add drive spec.
 28893 000041DB E88EE4                  	call	pathchrcmp		; Starts with a pathchar?
 28894 000041DE 7518                    	jnz	short anum_char		; no
 28895 000041E0 50                      	push	ax
 28896 000041E1 A0[B98A]                	mov	al,[CURDRV]		; Insert drive spec
 28897                                  	;add	al,[CAPITAL_A]
 28898                                  	; 28/03/2023
 28899                                  	; MSDOS 6.0
 28900 000041E4 0441                    	add	al,'A' ; 41h
 28901 000041E6 E82B01                  	call	move_char
 28902 000041E9 B03A                    	mov	al,':' ; 3Ah
 28903 000041EB E82601                  	call	move_char
 28904 000041EE 58                      	pop	ax
 28905 000041EF 893E[5B8D]              	mov	[STARTEL],di
 28906 000041F3 C606[5D8D]00            	mov	byte [ELCNT],0
 28907                                  anum_char:
 28908                                  	; 28/03/2023
 28909                                  	; MSDOS 6.0
 28910 000041F8 E8C4E1                  	call	testkanj		;AC048			
 28911 000041FB 7406                    	jz	short NOTKANJ		;AC048;
 28912 000041FD E81401                  	call	move_char
 28913 00004200 AC                      	lodsb
 28914 00004201 EB78                    	jmp	short notspecial
 28915                                  
 28916                                  NOTKANJ:				;AN048; If not kanji
 28917 00004203 803E[198C]01            	cmp	byte [cpyflag],1	;AN048; and if we're in COPY
 28918 00004208 7503                    	jne	short TESTDOT 		;AN048;
 28919 0000420A E8DCE1                  	call	UPCONV			;AN048; upper case the char
 28920                                  TESTDOT:
 28921                                  	; 28/03/2023
 28922                                  	;cmp	al,dot_chr  ; 2Eh
 28923 0000420D 3C2E                    	cmp	al,'.'
 28924 0000420F 7509                    	jne	short testquest
 28925 00004211 FE06[5E8D]              	inc	byte [ELPOS] 		; flag in extension
 28926 00004215 C606[5D8D]FF            	mov	byte [ELCNT],0FFh	; Store of the '.' resets it to 0
 28927                                  testquest:
 28928 0000421A 3C3F                    	cmp	al,'?'  ; 3Fh
 28929 0000421C 7503                    	jnz	short testsplat
 28930 0000421E 80CF02                  	or	bh,2
 28931                                  testsplat:
 28932                                  	;cmp	al,[STAR]
 28933 00004221 3C2A                    	cmp	al,star	; 2Ah
 28934                                  	; 27/04/2023
 28935                                  	;cmp	al,'*' 
 28936 00004223 7530                    	jne	short testpath
 28937 00004225 80CF02                  	or	bh,2
 28938 00004228 803E[968D]00            	cmp	byte [expand_star],0
 28939 0000422D 7504                    	jne	short expand_filename
 28940 0000422F EB24                    	jmp	short testpath
 28941                                  
 28942                                  BADPERR2J:
 28943                                  	;jmp	BADPERR2
 28944                                  	; 28/03/2023
 28945                                  	; MSDOS 6.0
 28946 00004231 EB75                    	jmp	short BADPERR2
 28947                                  
 28948                                  expand_filename:
 28949 00004233 B407                    	mov	ah,7
 28950 00004235 803E[5E8D]00            	cmp	byte [ELPOS],0
 28951 0000423A 7402                    	jz	short gotelcnt
 28952 0000423C B402                    	mov	ah,2
 28953                                  gotelcnt:
 28954 0000423E B03F                    	mov	al,'?'
 28955 00004240 2A26[5D8D]              	sub	ah,[ELCNT]
 28956 00004244 72EB                    	jb	short BADPERR2J
 28957 00004246 86E1                    	xchg	ah,cl
 28958 00004248 E309                    	jcxz	testpathx
 28959                                  qmove:
 28960 0000424A 86E1                    	xchg	ah,cl
 28961 0000424C E8C500                  	call	move_char
 28962 0000424F 86E1                    	xchg	ah,cl
 28963 00004251 E2F7                    	loop	qmove
 28964                                  testpathx:
 28965 00004253 86E1                    	xchg	ah,cl
 28966                                  testpath:
 28967 00004255 E814E4                  	call	pathchrcmp
 28968 00004258 7521                    	jnz	short notspecial
 28969 0000425A 80CF04                  	or	bh,4
 28970 0000425D 803E[968D]00            	cmp	byte [expand_star],0
 28971 00004262 7405                    	jz	short no_err_check
 28972 00004264 F6C702                  	test	bh,2			; If just hit a '/', cannot have ? or * yet
 28973 00004267 7545                    	jnz	short BADPERR
 28974                                  no_err_check:
 28975 00004269 893E[5B8D]              	mov	[STARTEL],di	  	; New element
 28976 0000426D FF06[5B8D]              	inc	word [STARTEL]	  	; Point to char after /
 28977 00004271 C606[5D8D]FF            	mov	byte [ELCNT],0FFh 	; Store of '/' sets it to 0
 28978 00004276 C606[5E8D]00            	mov	byte [ELPOS],0
 28979                                  notspecial:
 28980 0000427B E89600                  	call	move_char		; just an alphanum string
 28981                                  anum_test:
 28982 0000427E AC                      	lodsb
 28983                                  
 28984                                  	; 28/03/2023
 28985                                  	; MSDOS 6.0
 28986                                  	; -----------------------------------
 28987                                  	; Mod to avoid upper-case conversion.
 28988                                  	; -----------------------------------
 28989                                  	; MSDOS 3.3
 28990                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 28991                                  	;jnz	short cpcont3		; 3/3/KK
 28992                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 28993                                  cpcont3:
 28994                                  	; -----------------------------------
 28995                                  
 28996 0000427F E864E3                  	call	DELIM
 28997 00004282 7435                    	jz	short x_done
 28998 00004284 3C0D                    	cmp	al,0Dh
 28999 00004286 7431                    	je	short x_done
 29000 00004288 3A06[A98A]              	cmp	al,[SWITCHAR]
 29001 0000428C 742B                    	je	short x_done
 29002 0000428E 38D8                    	cmp	al,bl
 29003 00004290 7427                    	je	short x_done
 29004 00004292 3C3A                    	cmp	al,':'			; ':' allowed as trailer because of devices
 29005                                  	; 28/03/2023
 29006                                  	; MSDOS 3.3
 29007                                  	;jnz	short ANUM_CHARJ 
 29008                                  	; MSDOS 6.0
 29009 00004294 7403                    	je	short FOO15
 29010 00004296 E95FFF                  	jmp	anum_char
 29011                                  
 29012                                  ; Modification made for parseline.
 29013                                  ; Why would it be necessary to change colons to spaces? In this
 29014                                  ; case, EVERY colon is changed to a space; e.g., 'f:' yields 'f ',
 29015                                  ; but so does 'echo foo:bar' yield 'echo foo bar'.
 29016                                  
 29017                                  FOO15:
 29018 00004299 803E[198C]02            	cmp	byte [cpyflag],2
 29019 0000429E 7505                    	jnz	short cpcont4
 29020 000042A0 E87100                  	call	move_char
 29021 000042A3 EBD9                    	jmp	short anum_test
 29022                                  cpcont4:
 29023 000042A5 46                      	inc	si			; Skip the ':'
 29024 000042A6 EB11                    	jmp	short x_done
 29025                                  
 29026                                  	; 28/03/2023
 29027                                  ;ANUM_CHARJ:
 29028                                  	;jmp	anum_char
 29029                                  
 29030                                  BADPERR2:
 29031 000042A8 BA[0D7F]                	mov	dx,BADCPMES_PTR
 29032 000042AB E9A4E6                  	jmp	cerror
 29033                                  
 29034                                  BADPERR:
 29035                                  	; 28/03/2023
 29036                                  	;jmp	BADCDERR  ; MSDOS 3.3	
 29037                                  BADCDERR:
 29038                                  	; MSDOS 6.0
 29039 000042AE BA[3780]                	mov	dx,badcd_ptr		;AC022; Issue "Invalid Directory"
 29040 000042B1 E99EE6                  	jmp	cerror			;AC022;  message
 29041                                  	
 29042                                  cperror:
 29043 000042B4 4E                      	dec	si			; adjust the pointer
 29044 000042B5 5F                      	pop	di			; retrieve token buffer address
 29045 000042B6 9D                      	popf				; restore flags
 29046 000042B7 F9                      	stc				; set the carry bit
 29047 000042B8 C3                      	retn
 29048                                  
 29049                                  x_done:
 29050 000042B9 4E                      	dec	si			; adjust for next round
 29051                                  
 29052                                  ; Mod to recognize right and left parens as integral tokens.
 29053                                  ;x_done2:
 29054 000042BA EB51                    	jmp	short out_token
 29055                                  
 29056                                  a_switch:
 29057 000042BC 80CF01                  	or	bh,1			; Indicate switch
 29058                                  	;or	bp,FSWITCH ; 8000h
 29059                                  	; 28/03/2023
 29060 000042BF 81CD0080                	or	bp,8000h
 29061 000042C3 E818E3                  	call	scanoff
 29062 000042C6 46                      	inc	si
 29063                                  	; 28/03/2023
 29064                                  	; MSDOS 6.0
 29065 000042C7 E8F5E0                  	call	testkanj		;AN057; See if DBCS lead byte
 29066 000042CA 740D                    	jz	short a_switch_notkanj	;AN057; no - continue processing
 29067 000042CC E84500                  	call	move_char		;AN057; DBCS - store first byte
 29068 000042CF AC                      	lodsb				;AN057; get second byte
 29069 000042D0 E84100                  	call	move_char		;AN057; store second byte
 29070                                  	;or	bp,FBADSWITCH ; 4000h	;AN057; DBCS switch is invalid
 29071 000042D3 81CD0040                	or	bp,4000h
 29072 000042D7 EB34                    	jmp	short out_token 	;AN057; don't bother checking switch
 29073                                  a_switch_notkanj:			;AN057;
 29074 000042D9 3C0D                    	cmp	al,0Dh
 29075 000042DB 7509                    	jne	short Store_swt
 29076 000042DD B000                    	mov	al,0
 29077 000042DF AA                      	stosb
 29078                                  	;or	bp,FBADSWITCH ; 4000h
 29079 000042E0 81CD0040                	or	bp,4000h
 29080 000042E4 EBCE                    	jmp	short cperror		; Trailing switch character error
 29081                                  					;   BP = fSwitch but no switch
 29082                                  					;   bit is set (unknown switch)
 29083                                  Store_swt:
 29084 000042E6 E82B00                  	call	move_char		; store the character
 29085                                  
 29086                                  ; This upconv call must stay. It is used to identify copy-switches
 29087                                  ; on the command line, and won't store anything into the output buffer.
 29088                                  
 29089                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3 (Retro DOS 3.0)
 29090                                  	; 28/03/2023
 29091 000042E9 E8FDE0                  	call	UPCONV 	; MSDOS 6.0 & MSDOS 5.0 (Retro DOS 4.0)
 29092                                  	
 29093 000042EC 06                      	push	es
 29094 000042ED 57                      	push	di
 29095 000042EE 51                      	push	cx
 29096 000042EF 0E                      	push	cs
 29097 000042F0 07                      	pop	es
 29098                                  	; 28/03/2023
 29099                                  	; MSDOS 3.3
 29100                                  	;mov	di,SWITCH_LIST ; "VBAPW"
 29101                                  	; MSDOS 6.0
 29102 000042F1 BF[3184]                	mov	di,switch_list ; "?VBAPW"
 29103                                  	; MSDOS 3.3
 29104                                  	;mov	cx,SWCOUNT ; 5
 29105                                  	; MSDOS 6.0
 29106 000042F4 B90600                  	mov	cx,6  ; SWCOUNT = 6
 29107                                  	;or	bp,FBADSWITCH  ; 4000h
 29108 000042F7 81CD0040                	or	bp,4000h
 29109 000042FB F2AE                    	repne	scasb
 29110 000042FD 750B                    	jnz	short out_tokenp
 29111                                  	;and	bp,~FBADSWITCH ; 0BFFFh
 29112 000042FF 81E5FFBF                	and	bp,0BFFFh
 29113 00004303 B80100                  	mov	ax,1
 29114 00004306 D3E0                    	shl	ax,cl
 29115 00004308 09C5                    	or	bp,ax
 29116                                  out_tokenp:
 29117 0000430A 59                      	pop	cx
 29118 0000430B 5F                      	pop	di
 29119 0000430C 07                      	pop	es
 29120                                  out_token:
 29121 0000430D B000                    	mov	al,0			; null at the end
 29122 0000430F AA                      	stosb
 29123 00004310 5F                      	pop	di			; restore token buffer pointer
 29124 00004311 9D                      	popf
 29125 00004312 F8                      	clc				; clear carry flag
 29126 00004313 C3                      	retn
 29127                                  
 29128                                  ; =============== S U B	R O U T	I N E =======================================
 29129                                  
 29130                                  	; 28/03/2023
 29131                                  move_char:
 29132 00004314 AA                      	stosb				; store char in token buffer
 29133 00004315 41                      	inc	cx			; increment char count
 29134 00004316 FE06[5D8D]              	inc	byte [ELCNT]		; increment element count for * substi
 29135 0000431A C3                      	retn
 29136                                  
 29137                                  ;============================================================================
 29138                                  ; PARSE.ASM, MSDOS 6.0, 1991
 29139                                  ;============================================================================
 29140                                  ; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29141                                  
 29142                                  ; -----------------------------
 29143                                  ; (PSDATA.INC, MSDOS 6.0, 1991)
 29144                                  ; -----------------------------
 29145                                  
 29146                                  ;**** Equation field
 29147                                  ;-------- Character code definition
 29148                                  
 29149                                  $P_DBSP1	   equ	20h ; DB_SP_HI	;AN000; 1st byte of DBCS blank
 29150                                  $P_DBSP2	   equ	20h ; DB_SP_LO	;AN000; 2nd byte of DBCS blank
 29151                                  $P_Period	   equ	"."             ;AN020;
 29152                                  $P_Slash	   equ	"/"             ;AN020;
 29153                                  $P_Space	   equ	" "             ;AN000; SBCS blank
 29154                                  $P_Comma	   equ	","             ;AN000;
 29155                                  $P_Switch	   equ	"/"             ;AN000;
 29156                                  $P_Keyword	   equ	"="             ;AN000;
 29157                                  $P_Colon	   equ	":"             ;AN000;
 29158                                  $P_Plus 	   equ	"+"             ;AN000;
 29159                                  $P_Minus	   equ	"-"             ;AN000;
 29160                                  $P_Rparen	   equ	")"             ;AN000;
 29161                                  $P_Lparen	   equ	"("             ;AN000;
 29162                                  ;(deleted ;AN025;) $P_SQuote equ  "'"
 29163                                  $P_DQuote	   equ	'"'             ;AN000;
 29164                                  $P_NULL 	   equ	0		;AN000;
 29165                                  $P_TAB		   equ	9		;AN000;
 29166                                  $P_CR		   equ	0Dh		;AN000;
 29167                                  $P_LF		   equ	0Ah		;AN000;
 29168                                  $P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 29169                                  
 29170                                  $P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 29171                                  $P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 29172                                  
 29173                                  $P_error_filespec  equ  1
 29174                                  
 29175                                  ;----------------------------------------------------------------------------
 29176                                  ; PARMS LABEL	BYTE
 29177                                  ;	DW	PARMSX
 29178                                  ;	DB	2		; NUMBER OF STRINGS (0, 1, 2)
 29179                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 29180                                  ;	DB	" .. "          ; EXTRA DELIMITER LIST,
 29181                                  ;				; TYPICAL ARE ";", "="
 29182                                  ;				; "," & WHITESPACE ALWAYS
 29183                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 29184                                  ;	DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 29185                                  ;----------------------------------------------------------------------------
 29186                                  
 29187                                  struc $P_PARMS_BLK			;AN000;
 29188 00000000 ????                    .$P_PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 29189 00000002 ??                      .$P_Num_Extra:	     resb 1		;AN000; Number of extra stuff
 29190 00000003 ??                      .$P_Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 29191                                  endstruc 				;AN000;
 29192                                  
 29193                                  $P_Len_PARMS	   equ	4		;AN000;
 29194                                  $P_I_Use_Default   equ	0		;AN000; no extra stuff specified
 29195                                  $P_I_Have_Delim    equ	1		;AN000; extra delimiter specified
 29196                                  $P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 29197                                  
 29198                                  ;----------------------------------------------------------------------------
 29199                                  ; PARMSX LABEL	BYTE
 29200                                  ;	DB	minp,maxp		; MIN, MAX POSITIONAL OPERANDS ALLOWED
 29201                                  ;	DW	CONTROL 		; DESCRIPTION OF POSITIONAL 1
 29202                                  ;	:				; REPEATS maxp-1 TIMES
 29203                                  ;	DB	maxs			; # OF SWITCHES
 29204                                  ;	DW	CONTROL 		; DESCRIPTION OF SWITCH 1
 29205                                  ;	:				; REPEATS maxs-1 TIMES
 29206                                  ;	DB	maxk			; # OF KEYWORD
 29207                                  ;	DW	CONTROL 		; DESCRIPTION OF KEYWORD 1
 29208                                  ;	:				; REPEATS maxk-1 TIMES
 29209                                  ;----------------------------------------------------------------------------
 29210                                  
 29211                                  struc $P_PARMSX_BLK			;AN000;
 29212 00000000 ??                      .$P_MinP: 	 resb 1	 ; 27/04/2023	;AN000; Minimum positional number
 29213 00000001 ??                      .$P_MaxP: 	 resb 1			;AN000; Maximum positional number
 29214 00000002 ??                      .$P_1st_Control: resb 1			;AN000; Address of the 1st CONTROL block
 29215                                  endstruc				;AN000;
 29216                                  
 29217                                  ; 31/03/2023
 29218                                  ;----------------------------------------------------------------------------
 29219                                  ; << Control field definition >>
 29220                                  ;
 29221                                  ;CONTROL   LABEL   BYTE
 29222                                  ;	   DW MATCH_FLAGS	; CONTROLS TYPE MATCHED
 29223                                  ;				; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 29224                                  ;				; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 29225                                  ;				; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 29226                                  ;				; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 29227                                  ;				; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 29228                                  ;				; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 29229                                  ;				; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 29230                                  ;				; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 29231                                  ;				; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 29232                                  ;				; 0010H=IGNORE ":" AT END IN MATCH
 29233                                  ;				; 0002H=REPEATS ALLOWED
 29234                                  ;				; 0001H=OPTIONAL
 29235                                  ;	   DW FUNCTION_FLAGS
 29236                                  ;				; 0001H=CAP RESULT BY FILE TABLE
 29237                                  ;				; 0002H=CAP RESULT BY CHAR TABLE
 29238                                  ;				; 0010H=REMOVE ":" AT END
 29239                                  ; (tm10)			; 0020H=colon is not necessary for switch
 29240                                  ;
 29241                                  ;	   DW RESULT		; RESULT BUFFER
 29242                                  ;	   DW VALUES		; VALUE LISTS
 29243                                  ;	   DB nid		; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 29244                                  ;	   DB "...",0		; IF n >0, KEYWORD 1
 29245                                  ;	   :
 29246                                  ;
 29247                                  ;Note:
 29248                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 29249                                  ;      DATE bit simalteniously.
 29250                                  ;
 29251                                  ;      The parser examins each bit along with the following priority.
 29252                                  ;
 29253                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 29254                                  ;      FILE SPEC -> SIMPLE STRING.
 29255                                  ;
 29256                                  ;
 29257                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 29258                                  ;      in the result buffer is capitalized.
 29259                                  ;
 29260                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 29261                                  ;
 29262                                  ;
 29263                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 29264                                  ;      switch, for example, '/A', then STRING points to;
 29265                                  ;
 29266                                  ;		DB    1 	; number of following synonyms
 29267                                  ;		DB   '/A',0
 29268                                  ;
 29269                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 29270                                  ;
 29271                                  ;		DB    1 	; number of following synonyms
 29272                                  ;		DB   'CODEPAGE=',0
 29273                                  ;
 29274                                  ;
 29275                                  ;    - "..." must consist of upper case characters only because the parser
 29276                                  ;      performs pattern matching after converting input to upper case (by
 29277                                  ;      using the current country upper case table)
 29278                                  ;
 29279                                  ;
 29280                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 29281                                  ;      example /A and /B, the format will be;
 29282                                  ;
 29283                                  ;		DB    2 	; number of following synonyms
 29284                                  ;		DB    '/A',0
 29285                                  ;		DB    '/B',0
 29286                                  ;----------------------------------------------------------------------------
 29287                                  
 29288                                  ;**** Match_Flags
 29289                                  
 29290                                  $P_Num_Val	   equ	8000h		;AN000; Numeric Value
 29291                                  $P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 29292                                  $P_Simple_S	   equ	2000h		;AN000; Simple string
 29293                                  $P_Date_S	   equ	1000h		;AN000; Date string
 29294                                  $P_Time_S	   equ	0800h		;AN000; Time string
 29295                                  $P_Cmpx_S	   equ	0400h		;AN000; Complex string
 29296                                  $P_File_Spc	   equ	0200h		;AN000; File Spec
 29297                                  $P_Drv_Only	   equ	0100h		;AN000; Drive Only
 29298                                  $P_Qu_String	   equ	0080h		;AN000; Quoted string
 29299                                  $P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 29300                                  $P_Repeat	   equ	0002h		;AN000; Repeat allowed
 29301                                  $P_Optional	   equ	0001h		;AN000; Optional
 29302                                  
 29303                                  ;**** Function flags
 29304                                  
 29305                                  $P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 29306                                  $P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 29307                                  $P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 29308                                  $P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 29309                                  
 29310                                  ;-------------------------------- Control block structure
 29311                                  struc $P_CONTROL_BLK
 29312 00000000 ????                    .$P_Match_Flag:	   resw 1		;AN000; Controls type matched
 29313 00000002 ????                    .$P_Function_Flag: resw 1		;AN000; Function should be taken
 29314 00000004 ????                    .$P_Result_Buf:	   resw 1		;AN000; Result buffer address
 29315 00000006 ????                    .$P_Value_List:	   resw 1		;AN000; Value list address
 29316 00000008 ??                      .$P_nid:	   resb 1		;AN000; # of keyword/SW synonyms
 29317 00000009 ??                      .$P_KEYorSW:	   resb 1		;AN000; keyword or sw
 29318                                  endstruc
 29319                                  
 29320                                  ; 31/03/2023
 29321                                  ;----------------------------------------------------------------------------
 29322                                  ;
 29323                                  ;VALUES LABEL	BYTE
 29324                                  ;	DB	nval		; NUMBER OF VALUE DEFINITIONS (0 - 3)
 29325                                  ;	+-
 29326                                  ;	| DB	nrng		; NUMBER OF RANGES
 29327                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF RANGE MATCHED
 29328                                  ;	| +DD	X,Y		; RANGE OF VALUES
 29329                                  ;	|	:
 29330                                  ;	| DB	nnval		; NUMBER OF CHOICES
 29331                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF NUMBER CHOICE MATCHED
 29332                                  ;	| +DD	VALUE		; SPECIFIC CHOICE IF NUMBER
 29333                                  ;	|	:
 29334                                  ;	| DB	nstrval 	; NUMBER OF CHOICES
 29335                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF STRING CHOICE MATCHED
 29336                                  ;	| +DW	STRING		; SPECIFIC CHOICE IF STING
 29337                                  ;	+-	:
 29338                                  ;
 29339                                  ;STRING DB	"...",0		; ASCIIZ STRING IMAGE
 29340                                  ;
 29341                                  ;Note:
 29342                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 29343                                  ;      when no choice lists are provided.
 29344                                  ;
 29345                                  ;    - STRING must consist of upper case characters only because the parser
 29346                                  ;      performs pattern matching after converting input to upper case (by
 29347                                  ;      using the current country upper case table)
 29348                                  ;----------------------------------------------------------------------------
 29349                                  
 29350                                  $P_nval_None	equ 0		;AN000; no value list ID
 29351                                  $P_nval_Range	equ 1		;AN000; range list ID
 29352                                  $P_nval_Value	equ 2		;AN000; value list ID
 29353                                  $P_nval_String	equ 3		;AN000; string list ID
 29354                                  $P_Len_Range	equ 9		;AN000; Length of a range choice(two DD plus one DB)
 29355                                  $P_Len_Value	equ 5		;AN000; Length of a value choice(one DD plus one DB)
 29356                                  $P_Len_String	equ 3		;AN000; Length of a string choice(one DW plus one DB)
 29357                                  $P_No_nrng	equ 0		;AN000; (tm07) no nrng. nnval must not be 0.
 29358                                  
 29359                                  struc $P_VAL_LIST
 29360 00000000 ??                      .$P_NumofList:	resb 1		;AN000; number of following choice
 29361 00000001 ????                    .$P_Val_XL:	resw 1		;AN000; lower word of value
 29362 00000003 ????                    .$P_Val_XH:	resw 1		;AN000; higher word of value
 29363 00000005 ????                    .$P_Val_YL:	resw 1		;AN000; lower word of another value
 29364 00000007 ????                    .$P_Val_YH:	resw 1		;AN000; higher word of another value
 29365                                  endstruc
 29366                                  
 29367                                  ; 31/03/2023
 29368                                  ;----------------------------------------------------------------------------
 29369                                  ;
 29370                                  ;RESULT LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 29371                                  ;	DB	type			; TYPE RETURNED: 0=RESERVED,
 29372                                  ;					;	1=NUMBER, 2=LIST INDEX,
 29373                                  ;					;	3=STRING, 4=COMPLEX,
 29374                                  ;					;	5=FILESPEC, 6=DRIVE
 29375                                  ;					;	7=DATE, 8=TIME
 29376                                  ;					;	9=QUOTED STRING
 29377                                  ;	DB	ITEM_TAG		; MATCHED ITEM TAG
 29378                                  ;
 29379                                  ;	dw	synonym@		; es:@ points to found SYNONYM if provided.
 29380                                  ;
 29381                                  ;       +-
 29382                                  ;       | DD	n			; VALUE IF NUMBER
 29383                                  ;       | or
 29384                                  ;       |	DW i			; INDEX (OFFSET) INTO VALUE LIST
 29385                                  ;       |				; (ES presents Segment address)
 29386                                  ;       | or
 29387                                  ;       |	DD STRING		; OFFSET OF STRING VALUE
 29388                                  ;       | or
 29389                                  ;       |	DB drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 29390                                  ;       | or
 29391                                  ;       |	DW YEAR	   		;(1980-2099)  IN CASE OF DATE
 29392                                  ;       |	DB MONTH   ;(1-12)	 Note: Range check is not performed.
 29393                                  ;       |	DB DATE	   ;(1-31)	 0 is filled when the corresponding field was not specified.
 29394                                  ;       | or
 29395                                  ;       |	DB HOUR	   ;(0-23)	 IN CASE OF TIME
 29396                                  ;       |	DB MINUTES    ;(0-59)	 Note: Range check is not performed .
 29397                                  ;       |	DB SECONDS    ;(0-59)	 0 is filled when the corresponding field was not specified .
 29398                                  ;       |	DB HUNDREDTHS ;(0-99)
 29399                                  ;       +-
 29400                                  ;
 29401                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 29402                                  ;      list.
 29403                                  ;
 29404                                  ;      YEAR: If the input value for the year is less than 100, parser
 29405                                  ;	     adds 1900 to it. For example, when 87 is input to parser for
 29406                                  ;	     the year value, he returns 1987.
 29407                                  ;----------------------------------------------------------------------------
 29408                                  
 29409                                  ;-------------------------------- Result block structure
 29410                                  struc $P_RESULT_BLK;
 29411 00000000 ??                      .$P_Type:	 resb 1		;AN000; Type returned
 29412 00000001 ??                      .$P_Item_Tag:	 resb 1		;AN000; Matched item tag
 29413 00000002 ????                    .$P_SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 29414 00000004 ????????                .$P_Picked_Val:	 resb 4		;AN000; value
 29415                                  endstruc
 29416                                  
 29417                                  ;**** values for the type field in the result block
 29418                                  
 29419                                  $P_EOL		 equ 0		;AN000; End of line
 29420                                  $P_Number	 equ 1		;AN000; Number
 29421                                  $P_List_Idx	 equ 2		;AN000; List Index
 29422                                  $P_String	 equ 3		;AN000; String
 29423                                  $P_Complex	 equ 4		;AN000; Complex
 29424                                  $P_File_Spec	 equ 5		;AN000; File Spec
 29425                                  $P_Drive	 equ 6		;AN000; Drive
 29426                                  $P_Date_F	 equ 7		;AN000; Date
 29427                                  $P_Time_F	 equ 8		;AN000; Time
 29428                                  $P_Quoted_String equ 9		;AN000; Quoted String
 29429                                  
 29430                                  $P_No_Tag	 equ 0FFh	;AN000; No ITEM_TAG found
 29431                                  
 29432                                  ;**** Return code
 29433                                  ;
 29434                                  ; following return code will be returned in the AX register.
 29435                                  
 29436                                  $P_No_Error	 equ 0		;AN000; No error
 29437                                  $P_Too_Many	 equ 1		;AN000; Too many operands
 29438                                  $P_Op_Missing	 equ 2		;AN000; Required operand missing
 29439                                  $P_Not_In_SW	 equ 3		;AN000; Not in switch list provided
 29440                                  $P_Not_In_Key	 equ 4		;AN000; Not in keyword list provided
 29441                                  $P_Out_Of_Range  equ 6		;AN000; Out of range specified
 29442                                  $P_Not_In_Val	 equ 7		;AN000; Not in value list provided
 29443                                  $P_Not_In_Str	 equ 8		;AN000; Not in string list provided
 29444                                  $P_Syntax	 equ 9		;AN000; Syntax error
 29445                                  $P_RC_EOL	 equ -1		;AN000; End of command line
 29446                                  
 29447                                  ;in second byte of $P_Flags, referenced as $P_Flags2:
 29448                                  $P_equ		 equ 01h	;AN000; "=" packed in string buffet
 29449                                  $P_Neg		 equ 02h	;AN000; Negative value
 29450                                  $P_Time12	 equ 04h	;AN000; set when PM is specified
 29451                                  $P_Key_Cmp	 equ 08h	;AN000; set when keyword compare
 29452                                  $P_SW_Cmp	 equ 10h	;AN000; set when switch compare
 29453                                  $P_Extra	 equ 20h	;AN000; set when extra delimiter found
 29454                                  $P_SW		 equ 40h	;AN000; set when switch found (tm08)
 29455                                  $P_Signed	 equ 80h	;AN000; signed numeric specified
 29456                                  
 29457                                  ;-------- Masks
 29458                                  $P_Make_Lower	 equ 20h	;AN000; make lower case character
 29459                                  $P_Make_Upper	 equ 0FFh-$P_Make_Lower ;AN000; make upper case character
 29460                                  
 29461                                  ;-------------
 29462                                  
 29463                                  struc $P_DOS_TBL
 29464 00000000 ??                      .$P_DOS_InfoID:	 resb 1		;AN000; information id for the table
 29465 00000001 ????                    .$P_DOS_TBL_Off: resw 1		;AN000; offset address of the table
 29466 00000003 ????                    .$P_DOS_TBL_Seg: resw 1		;AN000; segment address of the table
 29467                                  endstruc
 29468                                  
 29469                                  $P_DOS_Get_TBL	 equ 65h	;AN000; get uppercase table call
 29470                                  				;AN000; following parameters are set
 29471                                  				;AN000; to get casemap table.
 29472                                  $P_DOSTBL_Def	 equ -1		;AN000; get default
 29473                                  $P_DOSTBL_BL	 equ 5		;AN000; buffer length for Tbl pointer
 29474                                  $P_DOSTBL_File	 equ 4		;AN000; get file uppercase table
 29475                                  $P_DOSTBL_Char	 equ 2		;AN000; get character uppercase table
 29476                                  				; By this call following information
 29477                                  				; is returned.
 29478                                  
 29479                                  ; 03/04/2023
 29480                                  ;-------------------------------- country dependent information
 29481                                  
 29482                                  $P_DOS_Get_CDI	equ 3800h
 29483                                  
 29484                                  struc $P_CDI
 29485 00000000 ????                    .$P_CDI_DateF:	resw 1		;AN000;
 29486 00000002 ????????                .$P_CDI_Money:	resb 4		;AN000;
 29487 00000006 ????                    .$P_CDI_1000:	resb 2		;AN000;
 29488 00000008 ????                    .$P_CDI_Dec:	resb 2		;AN000;
 29489 0000000A ????                    .$P_CDI_DateS:	resb 2		;AN000;
 29490 0000000C ????                    .$P_CDI_TimeS:	resb 2		;AN000;
 29491 0000000E ??                      		resb 1		;AN000;
 29492 0000000F ??                      		resb 1		;AN000;
 29493 00000010 ??                      .$P_CDI_TimeF:	resb 1		;AN000;
 29494 00000011 ????????                		resw 2		;AN000;
 29495 00000015 ????                    		resb 2		;AN000;
 29496 00000017 <res Ah>                		resw 5		;AN000;
 29497                                  endstruc
 29498                                  
 29499                                  $P_Date_MDY	equ 0		;AN000;
 29500                                  $P_Date_DMY	equ 1		;AN000;
 29501                                  $P_Date_YMD	equ 2		;AN000;
 29502                                  
 29503                                  ; ----------------------------
 29504                                  ; (PARSE.ASM, MSDOS 6.0, 1991)
 29505                                  ; ----------------------------
 29506                                  
 29507                                  ;***********************************************************************
 29508                                  ; SysParse;
 29509                                  ;
 29510                                  ;  Function : Parser Entry
 29511                                  ;
 29512                                  ;  Input: DS:SI -> command line
 29513                                  ;	  ES:DI -> parameter block
 29514                                  ;	  psdata_seg -> psdata.inc
 29515                                  ;	  CX = operand ordinal
 29516                                  ;
 29517                                  ;	  Note:  ES is the segment containing all the control blocks defined
 29518                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 29519                                  ;		 is in DS.
 29520                                  ;
 29521                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 29522                                  ;		    invalid value list. But this parser does NOT implement
 29523                                  ;		    this feature. Therefore CY always zero.
 29524                                  ;
 29525                                  ;	   CY = 0   AX = return code
 29526                                  ;		    BL = terminated delimiter code
 29527                                  ;		    CX = new operand ordinal
 29528                                  ;		    SI = set past scaned operand
 29529                                  ;		    DX = selected result buffer
 29530                                  ;
 29531                                  ; Use:	$P_Skip_Delim, $P_Chk_EOL, $P_Chk_Delim, $P_Chk_DBCS
 29532                                  ;	$P_Chk_Swtch, $P_Chk_Pos_Control, $P_Chk_Key_Control
 29533                                  ;	$P_Chk_Sw_Control, $P_Fill_Result
 29534                                  ;
 29535                                  ; Vars: $P_Ordinal(RW), $P_RC(RW), $P_SI_Save(RW), $P_DX(R), $P_Terminator(R)
 29536                                  ;	$P_SaveSI_Cmpx(W), $P_Flags(RW), $P_Found_SYNONYM(R), $P_Save_EOB(W)
 29537                                  ;
 29538                                  ;-------- Modification History -----------------------------------------
 29539                                  ;
 29540                                  ;  4/04/87 : Created by K. K,
 29541                                  ;  4/28/87 : $P_Val_YH assemble error (tm01)
 29542                                  ;	   : JMP SHORT assemble error (tm02)
 29543                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 29544                                  ;  6/12/87 : $P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 29545                                  ;	     DateSW equ 1)	      (tm04)
 29546                                  ;  6/12/87 : $P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 29547                                  ;				      (tm05) in PSDATA.INC
 29548                                  ;  6/12/87 : $P_FileSp_Char and $P_FileSP_Len are missing
 29549                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 29550                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 29551                                  ;	     value-list block	      (tm07)
 29552                                  ;  6/20/87 : Add $P_SW to check if there's an omiting parameter after
 29553                                  ;	     switch (keyword) or not. If there is, backup si for next call
 29554                                  ;	     (tm08)
 29555                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 29556                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 29557                                  ;  6/24/87 : New function flag $P_colon_is_not_necessary for switch
 29558                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 29559                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 29560                                  ;	     in user's routines. $P_Chk_DBCS (tm11)
 29561                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 29562                                  ;					  (tm12)
 29563                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 29564                                  ;					  (tm13)
 29565                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 29566                                  ;					  (tm14)
 29567                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 29568                                  ;					  (tm15)
 29569                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 29570                                  ;
 29571                                  ;  7/24/87 : Quoted strings being returned with quotes.
 29572                                  ;
 29573                                  ;  7/28/87 : Kerry S (;AN018;)
 29574                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 29575                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 29576                                  ;	     affected: $P_Chk_SW_Control.
 29577                                  ;
 29578                                  ;  7/29/87 : Kerry S (;AN019;)
 29579                                  ;	     Now allow the optional bit in match flags for switches.  This
 29580                                  ;	     allows the switch to be encountered with a value or without a
 29581                                  ;	     value and no error is returned.
 29582                                  ;
 29583                                  ;
 29584                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 29585                                  ;  9/14/87   In PROC $P_Get_DecNum, when checking for field separators
 29586                                  ;	     within a date response, instead of checking just for the one
 29587                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 29588                                  ;	     all three chars, "-", "/", and ".". Change $P_Chk_Switch to allow
 29589                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 29590                                  ;
 29591                                  ;  9/1/87  : Kerry S (;AN021)
 29592                                  ;	     In PROC $P_String_Comp, when comparing the switch or keyword on
 29593                                  ;	     the command line with the string in the control block the
 29594                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 29595                                  ;	     on the command line and assuming a match.	This allowed a shorter
 29596                                  ;	     string on the command line than in the synonym list in the control
 29597                                  ;	     block.  I put in a test for a null in the control block so the
 29598                                  ;	     string in the control block must be the same length as the string
 29599                                  ;	     preceeding the colon or equal on the command line.
 29600                                  ;
 29601                                  ;  8/28/87 : Kerry S (;AN022;)
 29602                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 29603                                  ;	     problems for people who included it themselves in a segment other
 29604                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 29605                                  ;	     segment.
 29606                                  ;
 29607                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 29608                                  ;	     in $p_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 29609                                  ;	     into PUSH PSDATA_SEG.  In $P_Get_DecNum PROC, fix AN020
 29610                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 29611                                  ;	     Created FLag, in $P_time_Format PROC, to request the delim in
 29612                                  ;	     BL be used if TIME is being parsed.
 29613                                  ;
 29614                                  ;  9/24/87 : Ed K
 29615                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 29616                                  ;	     invocations with their normally expanded code; made comments
 29617                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 29618                                  ;
 29619                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 29620                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 29621                                  ;	     pointed to by non-existant CONTROL.
 29622                                  ;
 29623                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 29624                                  ;	     A quoted text string can be framed only by double quote.  Remove
 29625                                  ;	     support to frame quoted text string with single quote.
 29626                                  ;	     (apostrophe) $P_SorD_Quote is removed from PSDATA.INC.
 29627                                  ;	     $P_SQuote EQU also removed from PSDATA.INC.  Any references to
 29628                                  ;	     single quote in PROC prologues are left as is for history reasons.
 29629                                  ;
 29630                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 29631                                  ;	     quote chars within a quoted string is supposed to be reported as
 29632                                  ;	     one quote character, but is reported as two quotes.  This changed
 29633                                  ;	     two instructions in PROC $P_Quoted_Str.
 29634                                  ;
 29635                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 29636                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 29637                                  ;
 29638                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 29639                                  ;
 29640                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 29641                                  ;	     psdata buffer should have psdata_seg.
 29642                                  ;
 29643                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 29644                                  ;	     positional missing.
 29645                                  ;
 29646                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 29647                                  ;	     as a line delimiter, should use carriage return.
 29648                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 29649                                  ;
 29650                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 29651                                  ;
 29652                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 29653                                  ;	     endless loop since SI is returned still pointing to start
 29654                                  ;	     of that parm.
 29655                                  ;
 29656                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 29657                                  ;	     Vector to returned string has CS instead of Psdata_Seg, but
 29658                                  ;	     when tried to fix it on previous version, changed similar
 29659                                  ;	     but wrong place.
 29660                                  ;
 29661                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 29662                                  ;	     delimiters between hours, minutes, seconds for time. And period
 29663                                  ;	     and comma are valid delimiters between seconds and 100th second.
 29664                                  ;
 29665                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 29666                                  ;	     in a filespec, then flag an error.
 29667                                  ;
 29668                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 29669                                  ;	     indexed off of the psdata_seg equate instead of the DS register.
 29670                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 29671                                  ;  -->	     local parser data. Why were some references to local data changed
 29672                                  ;	     to do this before, but not all ?????
 29673                                  ;
 29674                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 29675                                  ;
 29676                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, PSDATA_SEG HOSED.
 29677                                  ;
 29678                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 29679                                  ;
 29680                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 29681                                  ;
 29682                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 29683                                  ;	     separator in TIME before hundredths field.
 29684                                  ;
 29685                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 29686                                  ;			strings as keywords.
 29687                                  ;
 29688                                  ;***********************************************************************
 29689                                  
 29690                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29691                                  cmd_parse:
 29692                                  	;call	sysparse
 29693                                  	;retn
 29694                                  
 29695                                  ; -----------------------------------
 29696                                  
 29697                                  	; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29698                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:44E7h
 29699                                  
 29700                                  sysparse:
 29701 0000431B 2EC706[FD85]0000        	mov	word [cs:$P_Flags],0	;AC034; Clear all internal flags
 29702 00004322 2E890E[8786]            	mov	[cs:$P_ORIG_ORD],cx	;AN039; ORIGINAL ORDINAL FROM CX
 29703 00004327 2E8926[8986]            	mov	[cs:$P_ORIG_STACK],sp	;AN039; ORIGINAL VALUE OF STACK FROM SP
 29704 0000432C 2E8936[8B86]            	mov	[cs:$P_ORIG_SI],si	;AN039; ORIGINAL START PARSE POINTER FROM SI
 29705                                  $P_Redo_Time:				;AN039; try to parse time again
 29706 00004331 FC                      	cld				;AN000; confirm forward direction
 29707 00004332 2E890E[F085]            	mov	[cs:$P_ORDINAL],cx      ;AC034; save operand ordinal
 29708                                  	;mov	word [cs:$P_RC],$P_No_Error
 29709 00004337 2EC706[F285]0000        	mov	word [cs:$P_RC],0	;AC034; Assume no error
 29710 0000433E 2EC706[0586]0000        	mov	word [cs:$P_Found_SYNONYM],0
 29711                                  					;AC034; initalize synonym pointer
 29712 00004345 2EC706[F685]0000        	mov	word [cs:$P_DX],0	;AC034; (tm15)
 29713                                  
 29714                                  ;M029 -- Begin changes
 29715                                  ; The table of special chars $P_FileSp_Char should be initialized on every
 29716                                  ;entry to SysParse. This is in the non-checksum region and any program that
 29717                                  ;corrupts this table but does not corrupt the checksum region will leave
 29718                                  ;command.com parsing in an inconsistent state.
 29719                                  ; NB: The special characters string has been hardcoded here. If any change
 29720                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 29721                                  
 29722 0000434C 2EC706[C286]5B5D        	mov	word [cs:$P_FileSp_Char], '[]'	 ; "[]|<>+=;\""
 29723 00004353 2EC706[C486]7C3C        	mov	word [cs:$P_FileSp_Char+2], '|<'
 29724 0000435A 2EC706[C686]3E2B        	mov	word [cs:$P_FileSp_Char+4], '>+'
 29725 00004361 2EC706[C886]3D3B        	mov 	word [cs:$P_FileSp_Char+6], '=;'
 29726                                  
 29727                                  ;M029 -- End of changes
 29728                                  
 29729 00004368 E82209                  	call	$P_Skip_Delim		;AN000; Move si to 1st non white space
 29730 0000436B 7312                    	jnc	short $P_Start		;AN000; If EOL is not encountered, do parse
 29731                                  
 29732                                  ;--------------------------- End of Line
 29733                                  	;mov	ax,$P_RC_EOL		;AN000; set exit code to -1
 29734 0000436D B8FFFF                  	mov	ax,0FFFFh
 29735 00004370 53                      	push	bx			;AN000;
 29736                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 29737 00004371 268B1D                  	mov	bx,[es:di]		;AN000; Get the PARMSX address to
 29738                                  	
 29739                                  	;cmp	cl,[es:bx+$P_PARMSX_BLK.$P_MinP]
 29740 00004374 263A0F                  	cmp	cl,[es:bx]		;AN000; check ORDINAL to see if the minimum
 29741 00004377 7304                    	jae	short $P_Fin		;AN000; positional found.
 29742                                  
 29743                                  	;mov	ax,2
 29744 00004379 B80200                  	mov	ax,$P_Op_Missing ; 2	;AN000; If no, set exit code to missing operand
 29745                                  	; 27/04/2023
 29746 0000437C F8                      	clc
 29747                                  $P_Fin: 				;AN000;
 29748 0000437D 5B                      	pop	bx			;AN000;
 29749                                  	;jmp	$P_Single_Exit		;AN000; return to the caller
 29750                                  	; 27/04/2023
 29751                                  	; cf = 0
 29752                                  	;clc
 29753 0000437E C3                      	retn
 29754                                  
 29755                                  ;---------------------------
 29756                                  $P_Start:				;AN000;
 29757 0000437F 2E8936[FF85]            	mov	[cs:$P_SaveSI_Cmpx],si	;AN000;AC034; save ptr to command line for later use by complex,
 29758 00004384 53                      	push	bx			;AN000; quoted string or file spec.
 29759 00004385 57                      	push	di			;AN000;
 29760 00004386 55                      	push	bp			;AN000;
 29761 00004387 8D1E[0786]              	lea	bx,$P_STRING_BUF	;AC034; set buffer to copy from command string
 29762 0000438B 2EF606[FE85]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 29763                                  	;test	byte [cs:$P_Flags2],20h	;AC034; 3/9 extra delimiter encountered ?
 29764 00004391 7543                    	jnz	short $P_Pack_End	;AN000; 3/9 if yes, no need to copy
 29765                                  $P_Pack_Loop:				;AN000;
 29766 00004393 AC                      	lodsb				;AN000; Pick a operand from buffer
 29767 00004394 E8A909                  	call	$P_Chk_Switch		;AN000; Check switch character
 29768 00004397 723C                    	jc	short $P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 29769                                  
 29770 00004399 E81309                  	call	$P_Chk_EOL		;AN000; Check EOL character
 29771 0000439C 7437                    	je	short $P_Pack_End_BY_EOL ;AN000; need backup si
 29772                                  
 29773 0000439E E84009                  	call	$P_Chk_Delim		;AN000; Check delimiter
 29774 000043A1 7518                    	jne	short $P_PL01 		;AN000; If no, process next byte
 29775                                  
 29776 000043A3 2EF606[FE85]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 29777                                  	;test	byte [cs:$P_Flags2],20h ;AC034; 3/9 If yes and white spec,
 29778 000043A9 7505                    	jnz	short $P_Pack_End_backup_si
 29779                                  					;AN000; (tm08)
 29780 000043AB E8DF08                  	call	$P_Skip_Delim		;AN000; skip subsequent white space,too
 29781 000043AE EB26                    	jmp	short $P_Pack_End	;AN000; finish copy by placing NUL at end
 29782                                  
 29783                                  $P_Pack_End_backup_si:			;AN000; (tm08)
 29784 000043B0 2EF606[FE85]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ ; 41h
 29785                                  	;test	byte [cs:$P_Flags2],41h ;AN000;AC034;  (tm08)
 29786 000043B6 741E                    	jz	short $P_Pack_End	;AN000; (tm08)
 29787                                  
 29788 000043B8 4E                      	dec	si			;AN000; (tm08)
 29789 000043B9 EB1B                    	jmp	short $P_Pack_End	;AN025; (tm08)
 29790                                  $P_PL01:				;AN000;
 29791 000043BB 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 29792                                  	;cmp	al,'='
 29793 000043BE 3C3D                    	cmp	al,$P_Keyword ; '='	;AN000; if it is equal character,
 29794 000043C0 7506                    	jne	short $P_PL00 		;AN000; then
 29795                                  
 29796 000043C2 2E800E[FE85]01          	or	byte [cs:$P_Flags2],$P_equ
 29797                                  	;or	byte [cs:$P_Flags_2],1	;AC034; remember it in flag
 29798                                  $P_PL00:				;AN000;
 29799 000043C8 43                      	inc	bx			;AN000; ready to see next byte
 29800 000043C9 E89F09                  	call	$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 29801 000043CC 73C5                    	jnc	short $P_Pack_Loop	;AN000; if no, process to next byte
 29802                                  
 29803 000043CE AC                      	lodsb				;AN000; if yes, store
 29804 000043CF 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 29805 000043D2 43                      	inc	bx			;AN000; update pointer
 29806 000043D3 EBBE                    	jmp	short $P_Pack_Loop	;AN000; process to next byte
 29807                                  
 29808                                  $P_Pack_End_BY_EOL:			;AN000;
 29809 000043D5 4E                      	dec	si			;AN000; backup si pointer
 29810                                  $P_Pack_End:				;AN000;
 29811 000043D6 2E8936[F485]            	mov	[cs:$P_SI_Save],si	;AC034; save next pointer, SI
 29812                                  	;mov	byte [cs:bx],0
 29813 000043DB 2EC60700                	mov	byte [cs:bx],$P_NULL	;AN000; put NULL at the end
 29814 000043DF 2E891E[0386]            	mov	[cs:$P_Save_EOB],bx
 29815                                  					;AC034; 3/17/87 keep the address for later use of complex
 29816                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 29817 000043E4 268B1D                  	mov	bx,[es:di]		;AN000; get PARMSX address
 29818 000043E7 8D36[0786]              	lea	si,$P_STRING_BUF	;AC034;
 29819                                  	;cmp	byte [cs:si],'/'
 29820 000043EB 2E803C2F                	cmp	byte [cs:si],$P_Switch	;AN000; the operand begins w/ switch char ?
 29821 000043EF 7442                    	je	short $P_SW_Manager	;AN000; if yes, process as switch
 29822                                  
 29823 000043F1 2E803C22                	cmp	byte [cs:si],$P_DQuote	;M005;is it a string?
 29824 000043F5 7408                    	je	short $P_Positional_Manager
 29825                                  					;M005;if so, process as one!
 29826 000043F7 2EF606[FE85]01          	test	byte [cs:$P_Flags2],$P_equ
 29827                                  	;test	byte [cs:$P_Flags2],1	;AC034; the operand includes equal char ?
 29828 000043FD 7556                    	jnz	short $P_Key_Manager	;AN000; if yes, process as keyword
 29829                                  
 29830                                  $P_Positional_Manager:			;AN000; else process as positional
 29831                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 29832 000043FF 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 29833 00004403 30E4                    	xor	ah,ah			;AN000; ax = maxp
 29834 00004405 2E3906[F085]            	cmp	[cs:$P_ORDINAL],ax	;AC034; too many positional ?
 29835 0000440A 7312                    	jae	short $P_Too_Many_Error	;AN000; if yes, set exit code to too many
 29836                                  
 29837 0000440C 2EA1[F085]              	mov	ax,[cs:$P_ORDINAL]	;AC034; see what the current ordinal
 29838 00004410 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 29839 00004412 43                      	inc	bx			;AC035; add '2' to
 29840 00004413 43                      	inc	bx			;AC035;  BX reg
 29841                                  					;AN000; now bx points to 1st CONTROL
 29842 00004414 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 29843 00004416 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 29844 00004419 E88000                  	call	$P_Chk_Pos_Control	;AN000; Do process for positional
 29845 0000441C EB61                    	jmp	short $P_Return_to_Caller
 29846                                  					;AN000; and return to the caller
 29847                                  $P_Too_Many_Error:			;AN000;
 29848                                  	;mov	word [cs:$P_RC],1
 29849 0000441E 2EC706[F285]0100        	mov	word [cs:$P_RC],$P_Too_Many
 29850                                  					;AC034; set exit code
 29851 00004425 EB58                    	jmp	short $P_Return_to_Caller
 29852                                  					;AN000; and return to the caller
 29853                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 29854                                  %if 0
 29855                                  $P_SW_Manager:				;AN000;
 29856                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 29857                                  	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 29858                                  	xor	ah,ah			;AN000; ax = maxp
 29859                                  	inc	ax			;AN000;
 29860                                  	shl	ax,1			;AN000; ax = (ax+1)*2
 29861                                  	add	bx,ax			;AN000; now bx points to maxs
 29862                                  	mov	cl,[es:bx]		;AN000;
 29863                                  	xor	ch,ch			;AN000; cx = maxs
 29864                                  	or	cx,cx			;AN000; at least one switch ?
 29865                                  	jz	short $P_SW_Not_Found 	;AN000;
 29866                                  	inc	bx			;AN000; now bx points to 1st CONTROL address
 29867                                  %else
 29868                                  $P_get_max_ptr:
 29869 00004427 268A4701                	mov	al,[es:bx+1]		; [es:bx+$P_PARMSX_BLK.$P_MaxP] ; get maxp
 29870 0000442B 30E4                    	xor	ah,ah			; ax = maxp
 29871 0000442D 40                      	inc	ax
 29872 0000442E D1E0                    	shl	ax,1			; ax = (ax+1)*2
 29873 00004430 01C3                    	add	bx,ax			; now bx points to maxs
 29874 00004432 C3                      	retn
 29875                                  
 29876                                  $P_SW_Manager:
 29877 00004433 E8F1FF                  	call	$P_get_max_ptr
 29878 00004436 268A0F                  	mov	cl,[es:bx]
 29879 00004439 30ED                    	xor	ch,ch			; cx = maxs
 29880                                  					; at least one switch ?
 29881 0000443B E30F                    	jcxz	$P_SW_Not_Found 	; no
 29882 0000443D 43                      	inc	bx			; now bx points to 1st CONTROL address
 29883                                  %endif
 29884                                  
 29885                                  $P_SW_Mgr_Loop: 			;AN000;
 29886 0000443E 53                      	push	bx			;AN000;
 29887 0000443F 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 29888 00004442 E8B700                  	call	$P_Chk_SW_Control	;AN000; do process for switch
 29889 00004445 5B                      	pop	bx			;AN000;
 29890 00004446 7337                    	jnc	short $P_Return_to_Caller
 29891                                  					;AN000; if the CONTROL is for the switch, exit
 29892 00004448 43                      	inc	bx			;AC035; add '2' to
 29893 00004449 43                      	inc	bx			;AC035;  BX reg
 29894                                  					;AN000; else bx points to the next CONTROL
 29895 0000444A E2F2                    	loop	$P_SW_Mgr_Loop		;AN000; and loop
 29896                                  $P_SW_Not_Found:			;AN000;
 29897                                  	;mov	word [cs:$P_RC],3
 29898 0000444C 2EC706[F285]0300        	mov	word [cs:$P_RC],$P_Not_In_SW
 29899                                  					;AC034; here no CONTROL for the switch has
 29900 00004453 EB2A                    	jmp	short $P_Return_to_Caller0
 29901                                  					;AN000; not been found, means error.
 29902                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 29903                                  %if 0
 29904                                  $P_Key_Manager:				;AN000;
 29905                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 29906                                  	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 29907                                  	xor	ah,ah			;AN000; ax = maxp
 29908                                  	inc	ax			;AN000;
 29909                                  	shl	ax,1			;AN000; ax = (ax+1)*2
 29910                                  	add	bx,ax			;AN000; now bx points to maxs
 29911                                  	mov	al,[es:bx]		;AN000;
 29912                                  	xor	ah,ah			;AN000; ax = maxs
 29913                                  	shl	ax,1			;AN000;
 29914                                  	inc	ax			;AN000; ax = ax*2+1
 29915                                  	add	bx,ax			;AN000; now bx points to maxk
 29916                                  	mov	cl,[es:bx]		;AN000;
 29917                                  	xor	ch,ch			;AN000; cx = maxk
 29918                                  	or	cx,cx			;AN000; at least one keyword ?
 29919                                  	jz	short $P_Key_Not_Found	;AN000;
 29920                                  	inc	bx			;AN000; now bx points to 1st CONTROL
 29921                                  %else
 29922                                  $P_Key_Manager:
 29923 00004455 E8CFFF                  	call	$P_get_max_ptr
 29924 00004458 268A07                  	mov	al,[es:bx]
 29925 0000445B 30E4                    	xor	ah,ah			; ax = maxs
 29926 0000445D D1E0                    	shl	ax,1
 29927 0000445F 40                      	inc	ax			; ax = ax*2+1
 29928 00004460 01C3                    	add	bx,ax			; now bx points to maxk
 29929 00004462 268A0F                  	mov	cl,[es:bx]
 29930 00004465 30ED                    	xor	ch,ch			; cx = maxk
 29931                                  					; at least one keyword ?
 29932 00004467 E30F                    	jcxz	$P_Key_Not_Found
 29933 00004469 43                      	inc	bx			; now bx points to 1st CONTROL
 29934                                  %endif
 29935                                  
 29936                                  $P_Key_Mgr_Loop:			;AN000;
 29937 0000446A 53                      	push	bx			;AN000;
 29938 0000446B 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 29939 0000446E E85A00                  	call	$P_Chk_Key_Control	;AN000; do process for keyword
 29940 00004471 5B                      	pop	bx			;AN000;
 29941 00004472 730B                    	jnc	short $P_Return_to_Caller
 29942                                  					;AN000; if the CONTROL is for the keyword, exit
 29943 00004474 43                      	inc	bx			;AC035; add '2' to
 29944 00004475 43                      	inc	bx			;AC035;  BX reg
 29945                                  					;AN000; else bx points to the next CONTROL
 29946 00004476 E2F2                    	loop	$P_Key_Mgr_Loop 	;AN000; and loop
 29947                                  $P_Key_Not_Found:			;AN000;
 29948                                  	;mov	word [cs:$P_RC],4
 29949 00004478 2EC706[F285]0400        	mov	word [cs:$P_RC],$P_Not_In_Key
 29950                                  					;AC034; here no CONTROL for the keyword has
 29951                                  $P_Return_to_Caller0:
 29952                                  $P_Return_to_Caller:			;AN000; not been found, means error.
 29953 0000447F 5D                      	pop	bp			;AN000;
 29954 00004480 5F                      	pop	di			;AN000;
 29955 00004481 5B                      	pop	bx			;AN000;
 29956 00004482 2E8B0E[F085]            	mov	cx,[cs:$P_ORDINAL]	;AC034; return next ordinal
 29957 00004487 2EA1[F285]              	mov	ax,[cs:$P_RC]		;AC034; return exit code
 29958 0000448B 2E8B36[F485]            	mov	si,[cs:$P_SI_Save]	;AC034; return next operand pointer
 29959 00004490 2E8B16[F685]            	mov	dx,[cs:$P_DX]		;AC034; return result buffer address
 29960 00004495 2E8A1E[F885]            	mov	bl,[cs:$P_Terminator]	;AC034; return delimiter code found
 29961                                  $P_Single_Exit: 			;AN000;
 29962 0000449A F8                      	clc				;AN000;
 29963 0000449B C3                      	retn				;AN000;
 29964                                  
 29965                                  ;***********************************************************************
 29966                                  ; $P_Chk_Pos_Control
 29967                                  ;
 29968                                  ; Function: Parse CONTROL block for a positional
 29969                                  ;
 29970                                  ; Input:     ES:BX -> CONTROL block
 29971                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 29972                                  ;
 29973                                  ; Output:    None
 29974                                  ;
 29975                                  ; Use:	 $P_Fill_Result, $P_Check_Match_Flags
 29976                                  ;
 29977                                  ; Vars: $P_Ordinal(W), $P_RC(W)
 29978                                  ;***********************************************************************
 29979                                  
 29980                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29981                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4671h
 29982                                  
 29983                                  $P_Chk_Pos_Control:
 29984 0000449C 50                      	push	ax			;AN000;
 29985                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 29986 0000449D 268B07                  	mov	ax,[es:bx]		;AN000;
 29987                                  	;test	ax,2
 29988 000044A0 A90200                  	test	ax,$P_Repeat		;AN000; repeat allowed ?
 29989 000044A3 7505                    	jnz	short $P_CPC00		;AN000; then do not increment ORDINAL
 29990                                  
 29991 000044A5 2EFF06[F085]            	inc	word [cs:$P_ORDINAL]	;AC034; update the ordinal
 29992                                  $P_CPC00:				;AN000;
 29993                                  	;cmp	byte [cs:si],0
 29994 000044AA 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; no data ?
 29995 000044AE 7516                    	jne	short $P_CPC01		;AN000;
 29996                                  
 29997                                  	;test	ax,1
 29998 000044B0 A90100                  	test	ax,$P_Optional		;AN000; yes, then is it optional ?
 29999 000044B3 7509                    	jnz	short $P_CPC02		;AN000;
 30000                                  
 30001 000044B5 2EC706[F285]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 30002                                  					;AC034; no, then error	 3/17/87
 30003 000044BC EB0B                    	jmp	short $P_CPC_Exit	;AN000;
 30004                                  $P_CPC02:				;AN000;
 30005                                  	; 27/04/2023
 30006                                  	;push	ax ; *			;AN000;
 30007                                  	;
 30008                                  	;;mov	al,3
 30009                                  	;mov	al,$P_String		;AN000; if it is optional return NULL
 30010                                  	;;mov	ah,0FFh
 30011                                  	;mov	ah,$P_No_Tag		;AN000; no item tag indication
 30012                                  	; 31/03/2023
 30013 000044BE B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30014 000044C1 E89500                  	call	$P_Fill_Result		;AN000;
 30015                                  	; 27/04/2023
 30016                                  	;pop	ax ; *			;AN000;
 30017 000044C4 EB03                    	jmp	short $P_CPC_Exit	;AN000;
 30018                                  $P_CPC01:				;AN000;
 30019 000044C6 E81101                  	call	$P_Check_Match_Flags	;AN000;
 30020                                  $P_CPC_Exit:				;AN000;
 30021 000044C9 58                      	pop	ax			;AN000;
 30022 000044CA C3                      	retn				;AN000;
 30023                                  
 30024                                  ;***********************************************************************
 30025                                  ; $P_Chk_Key_Control
 30026                                  ;
 30027                                  ; Function: Parse CONTROL block for a keyword
 30028                                  ;
 30029                                  ; Input:     ES:BX -> CONTROL block
 30030                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30031                                  ;
 30032                                  ; Output:    CY = 1 : not match
 30033                                  ;
 30034                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30035                                  ;
 30036                                  ; Vars: $P_RC(W), $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30037                                  ;***********************************************************************
 30038                                  
 30039                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30040                                  $P_Chk_Key_Control:			;AN000;
 30041 000044CB F9                      	stc				;AN000;this logic works when the KeySW
 30042 000044CC C3                      	retn				;AN000;is reset.
 30043                                  
 30044                                  ;***********************************************************************
 30045                                  ; $P_Search_KEYorSW:
 30046                                  ;
 30047                                  ; Function: Seach specified keyword or switch from CONTROL
 30048                                  ;
 30049                                  ; Input:     ES:BX -> CONTROL block
 30050                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30051                                  ;
 30052                                  ; Output:    CY = 1 : not match
 30053                                  ;
 30054                                  ; Use:	 $P_String_Comp, $P_MoveBP_NUL, $P_Found_SYNONYM
 30055                                  ;***********************************************************************
 30056                                  
 30057                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30058                                  	; 14/06/2023
 30059                                  $P_Search_KEYorSW:
 30060 000044CD 55                      	push	bp			;AN000;
 30061 000044CE 51                      	push	cx			;AN000;
 30062 000044CF 268A4F08                	mov	cl,[es:bx+$P_CONTROL_BLK.$P_nid]
 30063                                  	;mov	cl,[es:bx+8]		;AN000; Get synonym count
 30064                                  	; 14/06/2023
 30065                                  	;xor	ch,ch			;AN000; and set it to cx
 30066                                  	;or	cx,cx			;AN000; No synonyms specified ?
 30067 000044D3 08C9                    	or	cl,cl
 30068 000044D5 740E                    	jz	short $P_KEYorSW_Not_Found
 30069                                  					;AN000; then indicate not found by CY
 30070 000044D7 268D6F09                	lea	bp,[es:bx+$P_CONTROL_BLK.$P_KEYorSW]
 30071                                  	;lea	bp,[es:bx+9]		;AN000; BP points to the 1st synonym
 30072                                  $P_KEYorSW_Loop:			;AN000;
 30073 000044DB E8E703                  	call	$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 30074 000044DE 7308                    	jnc	short $P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 30075 000044E0 E80D00                  	call	$P_MoveBP_NUL		;AN000; else, bp points to the next string
 30076 000044E3 E2F6                    	loop	$P_KEYorSW_Loop 	;AN000; loop nid times
 30077                                  $P_KEYorSW_Not_Found:			;AN000;
 30078 000044E5 F9                      	stc				;AN000; indicate not found in synonym list
 30079 000044E6 EB05                    	jmp	short $P_KEYorSW_Exit	;AN000; and exit
 30080                                  $P_KEYorSW_Found:			;AN000;
 30081 000044E8 2E892E[0586]            	mov	[cs:$P_Found_SYNONYM],bp
 30082                                  					;AC034; set synonym pointer
 30083                                  	; 27/04/2023
 30084                                  	; cf = 0
 30085                                  	;clc				;AN000; indicate found
 30086                                  $P_KEYorSW_Exit:			;AN000;
 30087 000044ED 59                      	pop	cx			;AN000;
 30088 000044EE 5D                      	pop	bp			;AN000;
 30089 000044EF C3                      	retn				;AN000;
 30090                                  
 30091                                  ;***********************************************************************
 30092                                  ; $P_MoveBP_NUL
 30093                                  ;***********************************************************************
 30094                                  
 30095                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30096                                  
 30097                                  $P_MoveBP_NUL:
 30098                                  $P_MBP_Loop:				;AN000;
 30099                                  	;cmp	byte [es:bp+0],0
 30100 000044F0 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000; Increment BP that points
 30101 000044F5 7403                    	je	short $P_MBP_Exit	;AN000; to the synomym list
 30102 000044F7 45                      	inc	bp			;AN000; until
 30103 000044F8 EBF6                    	jmp	short $P_MBP_Loop	;AN000; NULL encountered.
 30104                                  $P_MBP_Exit:				;AN000;
 30105 000044FA 45                      	inc	bp			;AN000; bp points to next to NULL
 30106 000044FB C3                      	retn				;AN000;
 30107                                  
 30108                                  ;***********************************************************************
 30109                                  ; $P_Chk_SW_Control
 30110                                  ;
 30111                                  ; Function: Parse CONTROL block for a switch
 30112                                  ;
 30113                                  ; Input:     ES:BX -> CONTROL block
 30114                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30115                                  ;
 30116                                  ; Output:    CY = 1 : not match
 30117                                  ;
 30118                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30119                                  ;
 30120                                  ; Vars:  $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30121                                  ;***********************************************************************
 30122                                  
 30123                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30124                                  
 30125                                  $P_Chk_SW_Control:
 30126 000044FC 2E800E[FE85]10          	or	byte [cs:$P_Flags2],$P_SW_Cmp
 30127                                  	;or	byte [cs:$P_Flags2],10h	;AC034; Indicate switch for later string comparison
 30128 00004502 E8C8FF                  	call	$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 30129 00004505 7251                    	jc	short $P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 30130                                  
 30131 00004507 2E8026[FE85]EF          	and	byte [cs:$P_Flags2],0FFh-$P_SW_Cmp
 30132                                  	;and	byte [cs:$P_Flags2],0EFh
 30133                                  					;AC034; reset the indicator previously set
 30134 0000450D 50                      	push	ax			;AN000;       /switch:
 30135 0000450E 2EA1[0186]              	mov	ax,[cs:$P_KEYorSW_Ptr]	;AC034;	      ^       ^
 30136 00004512 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 30137 00004514 2E0106[FF85]            	add	[cs:$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 30138 00004519 58                      	pop	ax			;AN000;
 30139                                  
 30140 0000451A 2E8B36[0186]            	mov	si,[cs:$P_KEYorSW_Ptr]	;AC034; set si at the end or colon
 30141                                  	;cmp	byte [cs:si],0
 30142 0000451F 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; any data after colon
 30143 00004523 7525                    	jne	short $P_CSW00		;AN000; if yes, process match flags
 30144                                  
 30145                                  	;cmp	byte [cs:si],':'
 30146 00004525 2E807CFF3A              	cmp	byte [cs:si-1],$P_Colon
 30147                                  					;AN000; if no, the switch terminated by colon ?
 30148 0000452A 7509                    	jne	short $P_Chk_if_data_required
 30149                                  					;AN000; if yes,
 30150                                  
 30151 0000452C 2EC706[F285]0900        	mov	word [cs:$P_RC],$P_Syntax
 30152                                  	;mov	word [cs:$P_RC],9	;AC034; return syntax error
 30153 00004533 EB1A                    	jmp	short $P_Chk_SW_Exit	;AN000;
 30154                                  
 30155                                  $P_Chk_if_data_required:		;AN018; no data, no colon
 30156                                  	;cmp	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],0
 30157                                  	; 27/04/2023
 30158 00004535 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 30159 00004539 7414                    	je	short $P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 30160                                  
 30161                                  	;;test	word [es:bx],1 ; $P_Optional
 30162                                  	;test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 30163 0000453B 26F60701                	test	byte [es:bx],$P_Optional
 30164                                  					;AN019; see if no value is valid
 30165 0000453F 750E                    	jnz	short $P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 30166                                  
 30167 00004541 2EC706[F285]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 30168                                  	;mov	word [cs:$P_RC],2	;AC034; return required operand missing
 30169 00004548 EB05                    	jmp	short $P_Chk_SW_Exit	;AN018;
 30170                                  
 30171                                  $P_CSW00:				;AN000;
 30172 0000454A E88D00                  	call	$P_Check_Match_Flags	;AN000; process match flag
 30173 0000454D F8                      	clc				;AN000; indicate match
 30174                                  	;jmp	short $P_Chk_SW_Single_Exit
 30175 0000454E C3                      	retn	; 31/03/2023		;AN000;
 30176                                  	; 31/03/2023
 30177                                  ;$P_Chk_SW_Err0: 			;AN000;
 30178                                  ;	stc				;AN000; not found in switch synonym list
 30179                                  ;	;jmp	short $P_Chk_SW_Single_Exit
 30180                                  ;	retn	; 31/03/2023		;AN000;
 30181                                  	
 30182                                  $P_Chk_SW_Exit: 			;AN000;
 30183 0000454F 50                      	push	ax			;AN000;
 30184                                  	; 31/03/2023
 30185 00004550 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30186                                  	;;mov	al,3
 30187                                  	;;mov	ah,0FFh
 30188                                  	;mov	al,$P_String		;AN000; set
 30189                                  	;mov	ah,$P_No_Tag		;AN000;    result
 30190 00004553 E80300                  	call	$P_Fill_Result		;AN000; 	 buffer
 30191 00004556 58                      	pop	ax			;AN000;
 30192 00004557 F8                      	clc				;AN000;
 30193                                  	; 31/03/2023
 30194                                  $P_Chk_SW_Err0:
 30195                                  $P_Chk_SW_Single_Exit:			;AN000;
 30196 00004558 C3                      	retn				;AN000;
 30197                                  
 30198                                  ;***********************************************************************
 30199                                  ; $P_Fill_Result
 30200                                  ;
 30201                                  ; Function: Fill the result buffer
 30202                                  ;
 30203                                  ; Input:    AH = Item tag
 30204                                  ;	    AL = type
 30205                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 30206                                  ;		  AL = 2: DX has index(offset) into value list
 30207                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 30208                                  ;		  AL = 7: DX has year, CL has month and CH has date
 30209                                  ;		  AL = 8: DL has hours, DH has minutes, CL has secondsn,
 30210                                  ;			  amd CH has hundredths
 30211                                  ;		  AL = else: psdata_seg:SI points to returned string buffer
 30212                                  ;	    ES:BX -> CONTROL block
 30213                                  ;
 30214                                  ; Output:   None
 30215                                  ;
 30216                                  ; Use:	$P_Do_CAPS_String, $P_Remove_Colon, $P_Found_SYNONYM
 30217                                  ;
 30218                                  ; Vars: $P_DX(W)
 30219                                  ;***********************************************************************
 30220                                  
 30221                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30222                                  
 30223                                  $P_Fill_Result:
 30224 00004559 57                      	push	di			;AN000;
 30225 0000455A 268B7F04                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Result_Buf]
 30226                                  	;mov	di,[es:bx+4]		;AN000; di points to result buffer
 30227 0000455E 2E893E[F685]            	mov	[cs:$P_DX],di		;AC034; set returned result address
 30228                                  	;mov	[es:di+$P_RESULT_BLK.$P_Type],al
 30229                                  	;;mov	[es:di],al		;AN000; store type
 30230                                  	;mov	[es:di+$P_RESULT_BLK.$P_Item_Tag],ah
 30231                                  	;;mov	[es:di+1],ah		;AN000; store item tag
 30232                                  	; 31/03/2023
 30233 00004563 268905                  	mov	[es:di],ax
 30234 00004566 50                      	push	ax			;AN000;
 30235 00004567 2EA1[0586]              	mov	ax,[cs:$P_Found_SYNONYM]
 30236                                  					;AC034; if yes,
 30237 0000456B 26894502                	mov	[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr],ax
 30238                                  	;mov	[es:di+2],ax		;AN000;   then set it to the result
 30239 0000456F 58                      	pop	ax			;AN000;
 30240                                  $P_RLT04:				;AN000;
 30241                                  	;cmp	al,1
 30242 00004570 3C01                    	cmp	al,$P_Number		;AN000; if number
 30243 00004572 750A                    	jne	short $P_RLT00		;AN000;
 30244                                  $P_RLT02:				;AN000;
 30245 00004574 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 30246                                  	;mov	[es:di+4],dx		;AN000; then store 32bit
 30247 00004578 26894D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cx
 30248                                  	;mov	[es:di+6],cx		;AN000;	number
 30249 0000457C EB5A                    	jmp	short $P_RLT_Exit	;AN000;
 30250                                  $P_RLT00:				;AN000;
 30251                                  	;cmp	al,2
 30252 0000457E 3C02                    	cmp	al,$P_List_Idx		;AN000; if list index
 30253 00004580 7506                    	jne	short $P_RLT01		;AN000;
 30254 00004582 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 30255                                  	;mov	[es:di+4],dx		;AN000; then store list index
 30256 00004586 EB50                    	jmp	short $P_RLT_Exit	;AN000;
 30257                                  $P_RLT01:				;AN000;
 30258                                  	;cmp	al,7
 30259 00004588 3C07                    	cmp	al,$P_Date_F ; 7	;AN000; Date format ?
 30260 0000458A 74E8                    	je	short $P_RLT02		;AN000;
 30261                                  	;cmp	al,8
 30262 0000458C 3C08                    	cmp	al,$P_Time_F ; 8	;AN000; Time format ?
 30263 0000458E 74E4                    	je	short $P_RLT02		;AN000;
 30264                                  	;cmp	al,6
 30265 00004590 3C06                    	cmp	al,$P_Drive  ; 6	;AN000; drive format ?
 30266 00004592 7506                    	jne	short $P_RLT03		;AN000;
 30267                                  
 30268 00004594 26885504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dl
 30269                                  	;mov	[es:di+4],dl		;AN000; store drive number
 30270 00004598 EB3E                    	jmp	short $P_RLT_Exit	;AN000;
 30271                                  
 30272                                  $P_RLT03:				;AN000;
 30273                                  	;cmp	al,4
 30274 0000459A 3C04                    	cmp	al,$P_Complex		;AN000; complex format ?
 30275 0000459C 750F                    	jne	short $P_RLT05		;AN000;
 30276                                  
 30277 0000459E 2EA1[FF85]              	mov	ax,[cs:$P_SaveSI_Cmpx]	;AC034; then get pointer in command buffer
 30278 000045A2 40                      	inc	ax			;AN000; skip left Parentheses
 30279 000045A3 26894504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],ax
 30280                                  	;mov	[es:di+4],ax		;AN000; store offset
 30281 000045A7 268C5D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],ds
 30282                                  	;mov	[es:di+6],ds		;AN000; store segment
 30283 000045AB EB2B                    	jmp	short $P_RLT_Exit	;AN000;
 30284                                  
 30285                                  $P_RLT05:				;AN000;
 30286                                  ;------------------------  AL = 3, 5, or 9
 30287 000045AD 26897504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],si
 30288                                  	;mov	[es:di+4],si		;AN000; store offset of STRING_BUF
 30289 000045B1 268C4D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cs
 30290                                  	;mov	[es:di+6],cs		;AN031; store segment of STRING_BUF
 30291                                  
 30292 000045B5 50                      	push	ax			;AN000;
 30293 000045B6 26F6470201              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File
 30294                                  	;test	byte [es:bx+2],1	;AN000; need CAPS by file table?
 30295 000045BB 7404                    	jz	short $P_RLT_CAP00	;AN000;
 30296                                  
 30297                                  	;mov	al,4
 30298 000045BD B004                    	mov	al,$P_DOSTBL_File ; 4	;AN000; use file upper case table
 30299 000045BF EB09                    	jmp	short $P_RLT_CAP02	;AN000;
 30300                                  
 30301                                  $P_RLT_CAP00:				;AN000;
 30302 000045C1 26F6470202              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char
 30303                                  	;test	byte [es:bx+2],2	;AN000; need CAPS by char table ?
 30304 000045C6 7405                    	jz	short $P_RLT_CAP01	;AN000;
 30305                                  
 30306                                  	;mov	al,2
 30307 000045C8 B002                    	mov	al,$P_DOSTBL_Char ; 2	;AN000; use character upper case table
 30308                                  $P_RLT_CAP02:				;AN000;
 30309 000045CA E80C01                  	call	$P_Do_CAPS_String	;AN000;  process CAPS along the table
 30310                                  $P_RLT_CAP01:				;AN000;
 30311 000045CD 58                      	pop	ax			;AN000;
 30312 000045CE 26F6470210              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon
 30313                                  	;test	byte [es:bx+2],10h	;AN000; removing colon at end ?
 30314 000045D3 7403                    	jz	short $P_RLT_Exit	;AN000;
 30315                                  
 30316 000045D5 E8DD00                  	call	$P_Remove_Colon 	;AN000; then process it.
 30317                                  $P_RLT_Exit:				;AN000;
 30318 000045D8 5F                      	pop	di			;AN000;
 30319 000045D9 C3                      	retn				;AN000;
 30320                                  
 30321                                  ;***********************************************************************
 30322                                  ; $P_Check_Match_Flags
 30323                                  ;
 30324                                  ; Function:  Check the mutch_flags and make the exit code and set the
 30325                                  ;	     result buffer
 30326                                  ;
 30327                                  ;	    Check for types in this order:
 30328                                  ;		Complex
 30329                                  ;		Date
 30330                                  ;		Time
 30331                                  ;		Drive
 30332                                  ;		Filespec
 30333                                  ;		Quoted String
 30334                                  ;		Simple String
 30335                                  ;
 30336                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 30337                                  ;	     ES:BX -> CONTROL block
 30338                                  ;
 30339                                  ; Output:    None
 30340                                  ;
 30341                                  ; Use:	     $P_Value, P$_SValue, $P_Simple_String, $P_Date_Format
 30342                                  ;	     $P_Time_Format, $P_Complex_Format, $P_File_Foemat
 30343                                  ;	     $P_Drive_Format
 30344                                  ;***********************************************************************
 30345                                  
 30346                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30347                                  
 30348                                  $P_Check_Match_Flags:
 30349 000045DA 2EC606[CB86]00          	mov	byte [cs:$P_err_flag],$P_NULL ; 0
 30350                                  					;AN033;AC034;; clear filespec error flag.
 30351 000045E0 50                      	push	ax			;AN000;
 30352                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 30353 000045E1 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 30354 000045E4 09C0                    	or	ax,ax			;AC035; test ax for zero
 30355 000045E6 7518                    	jnz	short $P_Mat		;AN000; (tm12)
 30356 000045E8 50                      	push	ax			;AN000; (tm12)
 30357 000045E9 53                      	push	bx			;AN000; (tm12)
 30358 000045EA 52                      	push	dx			;AN000; (tm12)
 30359 000045EB 57                      	push	di			;AN000; (tm12)
 30360 000045EC 2EC706[F285]0900        	mov	word [cs:$P_RC],$P_Syntax
 30361                                  	;mov	word [cs:$P_RC],9	;AC034; (tm12)
 30362                                  	; 31/03/2023
 30363 000045F3 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30364                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; (tm12)
 30365                                  	;mov	al,$P_String ; 3	;AN000; (tm12)
 30366 000045F6 E860FF                  	call	$P_Fill_Result		;AN000; (tm12)
 30367 000045F9 5F                      	pop	di			;AN000; (tm12)
 30368 000045FA 5A                      	pop	dx			;AN000; (tm12)
 30369 000045FB 5B                      	pop	bx			;AN000; (tm12)
 30370 000045FC 58                      	pop	ax			;AN000; (tm12)
 30371                                  	;jmp	short $P_Bridge 	;AC035; (tm12)
 30372                                  	; 31/03/2023
 30373                                  $P_Bridge:	; 18/04/2023		;AN000;
 30374 000045FD E99C00                  	jmp	$P_Match_Exit		;AN000; (tm02)
 30375                                  $P_Mat: 				;AN000; (tm12)
 30376                                  $P_Match01:				;AN000;
 30377                                  	;test	ax,1000h
 30378 00004600 A90010                  	test	ax,$P_Date_S		;AN000; Date string
 30379 00004603 7412                    	jz	short $P_Match02	;AN000;
 30380 00004605 2EC706[F285]0000        	mov	word [cs:$P_RC],$P_No_Error
 30381                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 30382 0000460C E85403                  	call	$P_Date_Format		;AN000; do process
 30383 0000460F 2E833E[F285]09          	cmp	word [cs:$P_RC],$P_Syntax
 30384                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 30385                                  	; 18/04/2023
 30386 00004615 75E6                    	jne	short $P_Bridge		;AN000;
 30387                                  $P_Match02:				;AN000;
 30388                                  	;test	ax,800h
 30389 00004617 A90008                  	test	ax,$P_Time_S		;AN000; Time string
 30390 0000461A 7412                    	jz	short $P_Match03	;AN000;
 30391 0000461C 2EC706[F285]0000        	mov	word [cs:$P_RC],$P_No_Error
 30392                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 30393 00004623 E85404                  	call	$P_Time_Format		;AN000; do process
 30394 00004626 2E833E[F285]09          	cmp	word [cs:$P_RC],$P_Syntax
 30395                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 30396                                  	;jne	short $P_Bridge		;AN000; (tm09)
 30397                                  	;jmp	short $P_Match03	;AN025; (tm09)
 30398                                  	; 31/03/2023
 30399 0000462C 756E                    	jne	short $P_Match_Exit
 30400                                  ;$P_Bridge:				;AN000;
 30401                                  	;jmp	short $P_Match_Exit	;AN000; (tm02)
 30402                                  $P_Match03:				;AN000;
 30403                                  	;test	ax,8000h
 30404 0000462E A90080                  	test	ax,$P_Num_Val		;AN000; Numeric value
 30405 00004631 7412                    	jz	short $P_Match04	;AN000;
 30406 00004633 2EC706[F285]0000        	mov	word [cs:$P_RC],$P_No_Error
 30407                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 30408 0000463A E82701                  	call	$P_Value		;AN000; do process
 30409 0000463D 2E833E[F285]09          	cmp	word [cs:$P_RC],$P_Syntax
 30410                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 30411 00004643 7557                    	jne	short $P_Match_Exit	;AN000;
 30412                                  $P_Match04:				;AN000;
 30413                                  	;test	ax,4000h
 30414 00004645 A90040                  	test	ax,$P_SNum_Val		;AN000; Signed numeric value
 30415 00004648 7412                    	jz	short $P_Match05	;AN000;
 30416 0000464A 2EC706[F285]0000        	mov	word [cs:$P_RC],$P_No_Error
 30417                                  					;AC034; assume no error
 30418 00004651 E8EC00                  	call	$P_SValue		;AN000; do process
 30419 00004654 2E833E[F285]09          	cmp	word [cs:$P_RC],$P_Syntax
 30420                                  					;AC034; if error, examine the next type
 30421 0000465A 7540                    	jne	short $P_Match_Exit	;AN000;
 30422                                  $P_Match05:				;AN000;
 30423                                  	;test	ax,100h
 30424 0000465C A90001                  	test	ax,$P_Drv_Only		;AN000; Drive only
 30425 0000465F 7415                    	jz	short $P_Match06	;AN000;
 30426 00004661 2EC706[F285]0000        	mov	word [cs:$P_RC],$P_No_Error
 30427                                  					;AC034; assume no error
 30428 00004668 E85C05                  	call	$P_File_Format		;AN000; 1st, call file format
 30429 0000466B E8DD05                  	call	$P_Drive_Format 	;AN000; check drive format, next
 30430 0000466E 2E833E[F285]09          	cmp	word [cs:$P_RC],$P_Syntax
 30431                                  					;AC034; if error, examinee the next type
 30432 00004674 7526                    	jne	short $P_Match_Exit	;AN000;
 30433                                  $P_Match06:				;AN000;
 30434                                  	;test	ax,200h
 30435 00004676 A90002                  	test	ax,$P_File_Spc		;AN000; File spec
 30436 00004679 7412                    	jz	short $P_Match07	;AN000;
 30437 0000467B 2EC706[F285]0000        	mov	word [cs:$P_RC],$P_No_Error
 30438                                  					;AC034; assume no error
 30439 00004682 E84205                  	call	$P_File_Format		;AN000; do process
 30440 00004685 2E833E[F285]09          	cmp	word [cs:$P_RC],$P_Syntax
 30441                                  					;AC034; if error, examine the next type
 30442 0000468B 750F                    	jne	short $P_Match_Exit	;AN000;
 30443                                  $P_Match07:				;AN000;
 30444                                  $P_Match08:				;AN000;
 30445                                  	;test	ax,2000h
 30446 0000468D A90020                  	test	ax,$P_Simple_S		;AN000; Simple string
 30447 00004690 740A                    	jz	short $P_Match09	;AN000;
 30448 00004692 2EC706[F285]0000        	mov	word [cs:$P_RC],$P_No_Error
 30449                                  					;AC034; assume no error
 30450 00004699 E8C501                  	call	$P_Simple_String	;AN000; do process
 30451                                  $P_Match09:				;AN000;
 30452                                  $P_Match_Exit:				;AN000;
 30453 0000469C 2E833E[CB86]01          	cmp	word [cs:$P_err_flag],$P_error_filespec
 30454                                  	;cmp	word [cs:$P_err_flag],1 ;AC034; bad filespec ?
 30455 000046A2 750F                    	jne	short $P_Match2_Exit	;AN033; no, continue
 30456 000046A4 2E833E[F285]00          	cmp	word [cs:$P_RC],$P_No_Error
 30457                                  	;cmp	word [cs:$P_RC],0	;AN033;AC034;; check for other errors ?
 30458 000046AA 7507                    	jne	short $P_Match2_Exit	;AN033; no, continue
 30459 000046AC 2EC706[F285]0900        	mov	word [cs:$P_RC],$P_Syntax
 30460                                  	;mov	word [cs:$P_RC],9	;AN033;AC034;; set error flag
 30461                                  $P_Match2_Exit: 			;AN033;
 30462 000046B3 58                      	pop	ax			;AN000;
 30463 000046B4 C3                      	retn
 30464                                  
 30465                                  ;***********************************************************************
 30466                                  ; $P_Remove_Colon;
 30467                                  ;
 30468                                  ; Function: Remove colon at end
 30469                                  ;
 30470                                  ; Input:    psdata_seg:SI points to string buffer to be examineed
 30471                                  ;
 30472                                  ; Output:   None
 30473                                  ;
 30474                                  ; Use:	$P_Chk_DBCS
 30475                                  ;***********************************************************************
 30476                                  
 30477                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30478                                  
 30479                                  $P_Remove_Colon:
 30480 000046B5 50                      	push	ax			;AN000;
 30481 000046B6 56                      	push	si			;AN000;
 30482                                  $P_RCOL_Loop:				;AN000;
 30483 000046B7 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 30484 000046BA 08C0                    	or	al,al			;AN000; end of string ?
 30485 000046BC 740F                    	jz	short $P_RCOL_Exit	;AN000; if yes, just exit
 30486                                  
 30487 000046BE 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; is it colon ?
 30488 000046C0 750E                    	jne	short $P_RCOL00		;AN000;
 30489                                  
 30490                                  	;cmp	byte [cs:si+1],0
 30491 000046C2 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; if so, next is NULL ?
 30492 000046C7 7507                    	jne	short $P_RCOL00		;AN000; no, then next char
 30493                                  
 30494 000046C9 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; yes, remove colon
 30495                                  	; 31/03/2023
 30496                                  	;jmp	short $P_RCOL_Exit	;AN000; and exit.
 30497                                  $P_RCOL_Exit:
 30498 000046CD 5E                      	pop	si
 30499 000046CE 58                      	pop	ax
 30500 000046CF C3                      	retn
 30501                                  
 30502                                  $P_RCOL00:				;AN000;
 30503 000046D0 E89806                  	call	$P_Chk_DBCS		;AN000; if not colon, then check if
 30504 000046D3 7301                    	jnc	short $P_RCOL01		;AN000; DBCS leading byte.
 30505                                  
 30506 000046D5 46                      	inc	si			;AN000; if yes, skip trailing byte
 30507                                  $P_RCOL01:				;AN000;
 30508 000046D6 46                      	inc	si			;AN000; si points to next byte
 30509 000046D7 EBDE                    	jmp	short $P_RCOL_Loop	;AN000; loop until NULL encountered
 30510                                  
 30511                                  	; 31/03/2023
 30512                                  ;$P_RCOL_Exit:				;AN000;
 30513                                  	;pop	si			;AN000;
 30514                                  	;pop	ax			;AN000;
 30515                                  	;retn
 30516                                  
 30517                                  ;***********************************************************************
 30518                                  ; $P_Do_CAPS_String;
 30519                                  ;
 30520                                  ; Function: Perform capitalization along with the file case map table
 30521                                  ;	    or character case map table.
 30522                                  ;
 30523                                  ; Input:    AL = 2 : Use character table
 30524                                  ;	    AL = 4 : Use file table
 30525                                  ;	    psdata_seg:SI points to string buffer to be capitalized
 30526                                  ;
 30527                                  ; Output:   None
 30528                                  ;
 30529                                  ; Use:	$P_Do_CAPS_Char, $P_Chk_DBCS
 30530                                  ;***********************************************************************
 30531                                  
 30532                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30533                                  
 30534                                  $P_Do_CAPS_String:
 30535 000046D9 56                      	push	si			;AN000;
 30536 000046DA 52                      	push	dx			;AN000;
 30537 000046DB 88C2                    	mov	dl,al			;AN000; save info id
 30538                                  $P_DCS_Loop:				;AN000;
 30539 000046DD 2E8A04                  	mov	al,[cs:si]		;AN000; load character and
 30540 000046E0 E88806                  	call	$P_Chk_DBCS		;AN000; check if DBCS leading byte
 30541 000046E3 720C                    	jc	short $P_DCS00		;AN000; if yes, do not need CAPS
 30542                                  
 30543 000046E5 08C0                    	or	al,al			;AN000; end of string ?
 30544 000046E7 740C                    	jz	short $P_DCS_Exit	;AN000; then exit.
 30545                                  
 30546 000046E9 E80C00                  	call	$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 30547 000046EC 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 30548 000046EF EB01                    	jmp	short $P_DCS01		;AN000; process nexit
 30549                                  $P_DCS00:				;AN000;
 30550 000046F1 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 30551                                  $P_DCS01:				;AN000;
 30552 000046F2 46                      	inc	si			;AN000; si point to next byte
 30553 000046F3 EBE8                    	jmp	short $P_DCS_Loop	;AN000; loop until NULL encountered
 30554                                  $P_DCS_Exit:				;AN000;
 30555 000046F5 5A                      	pop	dx			;AN000;
 30556 000046F6 5E                      	pop	si			;AN000;
 30557 000046F7 C3                      	retn
 30558                                  
 30559                                  ;***********************************************************************
 30560                                  ; $P_Do_CAPS_Char;
 30561                                  ;
 30562                                  ; Function: Perform capitalization along with the file case map table
 30563                                  ;	    or character case map table.
 30564                                  ;
 30565                                  ; Input:    DL = 2 : Use character table
 30566                                  ;	    DL = 4 : Use file table
 30567                                  ;	    AL = character to be capitalized
 30568                                  ;
 30569                                  ; Output:   None
 30570                                  ;
 30571                                  ; Use:	INT 21h /w AH=65h
 30572                                  ;***********************************************************************
 30573                                  
 30574                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30575                                  
 30576                                  $P_Do_CAPS_Char:
 30577 000046F8 3C80                    	cmp	al,$P_ASCII80	; 80h	;AN000; need upper case table ?
 30578 000046FA 730B                    	jae	short $P_DCC_Go		;AN000;
 30579                                  
 30580 000046FC 3C61                    	cmp	al,"a"  ; 61h		;AN000; if no,
 30581 000046FE 723F                    	jb	short $P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 30582                                  
 30583 00004700 3C7A                    	cmp	al,"z"  ; 7Ah		;AN000;
 30584 00004702 773B                    	ja	short $P_CAPS_Ret	;AN000;   if yes, make CAPS
 30585                                  
 30586 00004704 24DF                    	and	al,$P_Make_Upper ; 0DFh	;AN000;   else do nothing.
 30587                                  	;jmp	short $P_CAPS_Ret	;AN000;
 30588                                  	; 18/04/2023
 30589 00004706 C3                      	retn
 30590                                  
 30591                                  $P_DCC_Go:				;AN000;
 30592 00004707 53                      	push	bx			;AN000;
 30593 00004708 06                      	push	es			;AN000;
 30594 00004709 57                      	push	di			;AN000;
 30595                                  	; 18/04/2023
 30596 0000470A 8D3E[BD86]              	lea	di,$P_File_CAP_Ptr	;AC034;
 30597 0000470E 80FA04                  	cmp	dl,$P_DOSTBL_File ; 4	;AN000; Use file CAPS table ?
 30598 00004711 7404                    	je	short $P_DCC00		;AN000;
 30599                                  	; 27/04/2023
 30600 00004713 8D3E[B886]              	lea	di,$P_Char_CAP_Ptr	;AC034; or use char CAPS table ?
 30601                                  $P_DCC00:				;AN000;
 30602 00004717 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 30603 0000471A 7416                    	je	short $P_DCC01		;AN000; if no,
 30604                                  
 30605                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 30606                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 30607                                  ; call, regardless of what base register is currently be defined as PSDATA_SEG.
 30608                                  
 30609 0000471C 50                      	push	ax			;AN000; get CAPS table thru DOS call
 30610 0000471D 51                      	push	cx			;AN000;
 30611 0000471E 52                      	push	dx			;AN000;
 30612 0000471F 0E                      	push	cs			;AC036; pass current base seg into
 30613                                  					;(Note: this used to push CS. BUG...
 30614 00004720 07                      	pop	es			;AN000;   ES reg, required for
 30615                                  					;get extended country information
 30616                                  	; 31/03/2023
 30617 00004721 B465                    	mov	ah,$P_DOS_Get_TBL ; 65h	;AN000; get extended CDI
 30618                                  	;mov	ah,65h
 30619 00004723 88D0                    	mov	al,dl			;AN000; upper case table
 30620                                  	;mov	bx,-1 ; 0FFFFh
 30621                                  	;mov	cx,5
 30622                                  	;mov	dx,-1
 30623 00004725 BBFFFF                  	mov	bx,$P_DOSTBL_Def ; -1	;AN000; get active CON
 30624 00004728 B90500                  	mov	cx,$P_DOSTBL_BL  ; 5 	;AN000; buffer length
 30625                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30626 0000472B 89DA                    	mov	dx,bx
 30627                                  	;mov	dx,$P_DOSTBL_Def ; -1	;AN000; get for default code page
 30628                                  					;DI already set to point to buffer
 30629 0000472D CD21                    	int	21h			;AN000; es:di point to buffer that
 30630                                  					;now has been filled in with info
 30631 0000472F 5A                      	pop	dx			;AN000;
 30632 00004730 59                      	pop	cx			;AN000;
 30633 00004731 58                      	pop	ax			;AN000;
 30634                                  
 30635                                  $P_DCC01:				;AN000;
 30636                                  
 30637                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 30638                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 30639                                  ; regardless of which base reg is currently the PSDATA_SEG reg.
 30640                                  
 30641                                  	;mov	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 30642                                  	;;mov	bx,[cs:di+1]		;AN000; get offset of table
 30643                                  	;mov	es,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Seg]
 30644                                  	;;mov	es,[cs:di+3]		;AN000; get segment of table
 30645                                  	; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30646                                  	;les	bx,[cs:di+1]
 30647 00004732 2EC45D01                	les	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 30648                                  	;
 30649 00004736 43                      	inc	bx			;AC035; add '2' to
 30650 00004737 43                      	inc	bx			;AC035;  BX reg
 30651                                  					;AN000; skip length field
 30652 00004738 2C80                    	sub	al,$P_ASCII80 ; 80h	;AN000; make char to index
 30653                                  	;xlat	es:[bx] 		;AN000; perform case map
 30654                                  	; 31/03/2023
 30655 0000473A 26D7                    	es	xlat
 30656                                  
 30657 0000473C 5F                      	pop	di			;AN000;
 30658 0000473D 07                      	pop	es			;AN000;
 30659 0000473E 5B                      	pop	bx			;AN000;
 30660                                  $P_CAPS_Ret:				;AN000;
 30661 0000473F C3                      	retn
 30662                                  
 30663                                  ;***********************************************************************
 30664                                  ; $P_Value / $P_SValue
 30665                                  ;
 30666                                  ; Function:  Make 32bit value from psdata_seg:SI and see value list
 30667                                  ;	     and make result buffer.
 30668                                  ;	     $P_SValue is an entry point for the signed value
 30669                                  ;	     and this will simply call $P_Value after the handling
 30670                                  ;	     of the sign character, "+" or "-"
 30671                                  ;
 30672                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 30673                                  ;	     ES:BX -> CONTROL block
 30674                                  ;
 30675                                  ; Output:    None
 30676                                  ;
 30677                                  ; Use:	$P_Fill_Result, $P_Check_OVF
 30678                                  ;
 30679                                  ; Vars: $P_RC(W), $P_Flags(RW)
 30680                                  ;***********************************************************************
 30681                                  
 30682                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30683                                  $P_SValue:
 30684 00004740 50                      	push	ax			;AN000;
 30685                                  	;or	byte [cs:$P_Flags2],80h
 30686 00004741 2E800E[FE85]80          	or	byte [cs:$P_Flags2],$P_Signed
 30687                                  					;AC034; indicate a signed numeric
 30688                                  	;and	byte [cs:$P_Flags2],0FDh
 30689 00004747 2E8026[FE85]FD          	and	byte [cs:$P_Flags2],0FFh-$P_Neg
 30690                                  					;AC034; assume positive value
 30691 0000474D 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 30692 00004750 3C2B                    	cmp	al,'+' ; 2Bh
 30693                                  	;cmp	al,$P_Plus ; '+'	;AN000; "+" ?
 30694 00004752 740A                    	je	short $P_SVal00		;AN000;
 30695                                  
 30696 00004754 3C2D                    	cmp	al,'-' ; 2Dh
 30697                                  	;cmp	al,$P_Minus ; '-'	;AN000; "-" ?
 30698 00004756 7507                    	jne	short $P_Sval01		;AN000; else
 30699                                  
 30700 00004758 2E800E[FE85]02          	or	byte [cs:$P_Flags2],$P_Neg ; 2
 30701                                  					;AC034; set this is negative value
 30702                                  $P_SVal00:				;AN000;
 30703 0000475E 46                      	inc	si			;AN000; skip sign char
 30704                                  $P_Sval01:				;AN000;
 30705 0000475F E80200                  	call	$P_Value		;AN000; and process value
 30706 00004762 58                      	pop	ax			;AN000;
 30707                                  $P_Check_OVF_ok: ; 11/08/2024
 30708 00004763 C3                      	retn				;AN000;
 30709                                  
 30710                                  ;***********************************************************************
 30711                                  
 30712                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30713                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4955h
 30714                                  
 30715                                  	; 11/08/2024
 30716                                  $P_Value:
 30717 00004764 50                      	push	ax			;AN000;
 30718 00004765 51                      	push	cx			;AN000;
 30719 00004766 52                      	push	dx			;AN000;
 30720 00004767 56                      	push	si			;AN000;
 30721 00004768 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 30722 0000476A 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 30723 0000476C 53                      	push	bx			;AN000; save control pointer
 30724                                  $P_Value_Loop:				;AN000;
 30725 0000476D 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 30726 00004770 08C0                    	or	al,al			;AN000; end of line ?
 30727 00004772 7436                    	jz	short $P_Value00	;AN000;
 30728                                  
 30729 00004774 E8DF00                  	call	$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 30730 00004777 722D                    	jc	short $P_Value_Err0	;AN000;
 30731                                  
 30732                                  ; 11/08/2024 - PCDOS 7.1 COMMAND.COM
 30733                                  %if 0
 30734                                  	xor	ah,ah			;AN000;
 30735                                  	mov	bp,ax			;AN000; save binary number
 30736                                  	shl	dx,1			;AN000; to have 2*x
 30737                                  	rcl	cx,1			;AN000; shift left w/ carry
 30738                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30739                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 30740                                  
 30741                                  	mov	bx,dx			;AN000; save low(2*x)
 30742                                  	mov	ax,cx			;AN000; save high(2*x)
 30743                                  	shl	dx,1			;AN000; to have 4*x
 30744                                  	rcl	cx,1			;AN000; shift left w/ carry
 30745                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30746                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 30747                                  
 30748                                  	shl	dx,1			;AN000; to have 8*x
 30749                                  	rcl	cx,1			;AN000; shift left w/ carry
 30750                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30751                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 30752                                  
 30753                                  	add	dx,bx			;AN000; now have 10*x
 30754                                  	adc	cx,ax			;AN000; 32bit ADD
 30755                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30756                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 30757                                  
 30758                                  	add	dx,bp			;AN000; Add the current one degree decimal
 30759                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 30760                                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30761                                  	jc	short $P_Value_Err0	;AN000; then error, exit
 30762                                  
 30763                                  	inc	si			;AN000; update pointer
 30764                                  	jmp	short $P_Value_Loop	;AN000; loop until NULL encountered
 30765                                  %else
 30766 00004779 30E4                    	xor	ah,ah
 30767 0000477B 89C5                    	mov	bp,ax			; save binary number
 30768 0000477D E81C00                  	call	$P_Check_OVF_shl32	; check Overflow (after shl32)
 30769 00004780 89D3                    	mov	bx,dx			; save low(2*x)
 30770 00004782 89C8                    	mov	ax,cx			; save high(2*x)
 30771 00004784 E81500                  	call	$P_Check_OVF_shl32	; check OverFlow (after shl32)
 30772 00004787 E81200                  	call	$P_Check_OVF_shl32	; check OverFlow (after shl32)
 30773 0000478A 01DA                    	add	dx,bx			; now have 10*x
 30774 0000478C 11C1                    	adc	cx,ax			; 32bit ADD
 30775 0000478E E80F00                  	call	$P_Check_OVF_@		; check OverFlow
 30776 00004791 01EA                    	add	dx,bp			; Add the current one degree decimal
 30777 00004793 83D100                  	adc	cx,0			; if carry, add 1 to high 16bit
 30778 00004796 E80700                  	call	$P_Check_OVF_@		; check Overflow
 30779 00004799 46                      	inc	si			; update pointer
 30780 0000479A EBD1                    	jmp	short $P_Value_Loop	; loop until NULL encountered
 30781                                  
 30782                                  $P_Check_OVF_shl32:
 30783 0000479C D1E2                    	shl	dx,1
 30784 0000479E D1D1                    	rcl	cx,1
 30785                                  $P_Check_OVF_@:
 30786 000047A0 E8A100                  	call	$P_Check_OVF
 30787                                  	;jc	short $P_Value_Err0_@
 30788                                  	;retn
 30789                                  	; 11/08/2024
 30790 000047A3 73BE                    	jnc	short $P_Check_OVF_ok
 30791                                  
 30792                                  $P_Value_Err0_@:
 30793                                  	;inc	sp
 30794                                  	;inc	sp
 30795                                  	; 11/08/2024
 30796 000047A5 5B                      	pop	bx
 30797                                  %endif
 30798                                  
 30799                                  $P_Value_Err0:				;AN000;
 30800 000047A6 5B                      	pop	bx			;AN000;
 30801 000047A7 E98800                  	jmp	$P_Value_Err		;AN000; Bridge
 30802                                  
 30803                                  $P_Value00:				;AN000;
 30804 000047AA 5B                      	pop	bx			;AN000; restore control pointer
 30805 000047AB 2EF606[FE85]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2 
 30806                                  					;AC034; here cx,dx = 32bit value
 30807 000047B1 740A                    	jz	short $P_Value01	;AN000; was it negative ?
 30808                                  
 30809 000047B3 F7D1                    	not	cx			;AN000; +
 30810 000047B5 F7D2                    	not	dx			;AN000; |- Make 2's complement
 30811 000047B7 83C201                  	add	dx,1			;AN000; |
 30812 000047BA 83D100                  	adc	cx,0			;AN000; +
 30813                                  $P_Value01:				;AN000; / nval =0
 30814 000047BD 268B7706                	mov	si,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 30815                                  	;mov	si,[es:bx+6]		;AN000; si points to value list
 30816 000047C1 268A04                  	mov	al,[es:si]		;AN000; get nval
 30817 000047C4 3C00                    	cmp	al,$P_nval_None ; 0	;AN000; no value list ?
 30818 000047C6 7505                    	jne	short $P_Value02	;AN000;
 30819                                  
 30820                                  	;mov	al,$P_Number	; 1	;AN000; Set type
 30821                                  	;mov	ah,$P_No_Tag	; 0FFh	;AN000; No ITEM_TAG set
 30822                                  	; 31/03/2023
 30823 000047C8 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 30824 000047CB EB6F                    	jmp	short $P_Value_Exit	;AN000;
 30825                                  
 30826                                  $P_Value02:				;AN000; / nval = 1
 30827 000047CD 46                      	inc	si			;AN000;
 30828 000047CE 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 30829 000047D1 3C00                    	cmp	al,$P_No_nrng	; 0	;AN000; (tm07)
 30830 000047D3 745D                    	je	short $P_Value03	;AN000; (tm07)
 30831                                  
 30832 000047D5 46                      	inc	si			;AN000; si points to 1st item_tag
 30833                                  $P_Val02_Loop:				;AN000;
 30834 000047D6 2EF606[FE85]80          	test	byte [cs:$P_Flags2],$P_Signed ; 80h
 30835                                  	;test	byte [cs:$P_Flags2],80h	;AC034;
 30836 000047DC 751E                    	jnz	short $P_Val02_Sign	;AN000;
 30837                                  
 30838 000047DE 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 30839                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 30840 000047E2 723B                    	jb	short $P_Val02_Next	;AN000;
 30841 000047E4 7706                    	ja	short $P_Val_In		;AN000;
 30842                                  
 30843 000047E6 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 30844                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 30845 000047EA 7233                    	jb	short $P_Val02_Next	;AN000;
 30846                                  
 30847                                  $P_Val_In:				;AN000;
 30848 000047EC 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 30849                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH (tm01)
 30850 000047F0 772D                    	ja	short $P_Val02_Next	;AN000;
 30851 000047F2 7224                    	jb	short $P_Val_Found	;AN000;
 30852                                  
 30853 000047F4 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 30854                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 30855 000047F8 7725                    	ja	short $P_Val02_Next	;AN000;
 30856                                  
 30857 000047FA EB1C                    	jmp	short $P_Val_Found	;AN000;
 30858                                  
 30859                                  $P_Val02_Sign:				;AN000;
 30860 000047FC 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 30861                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 30862 00004800 7C1D                    	jl	short $P_Val02_Next	;AN000;
 30863 00004802 7F06                    	jg	short $P_SVal_In	;AN000;
 30864                                  
 30865 00004804 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 30866                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 30867 00004808 7C15                    	jl	short $P_Val02_Next	;AN000;
 30868                                  
 30869                                  $P_SVal_In:				;AN000;
 30870 0000480A 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 30871                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH
 30872 0000480E 7F0F                    	jg	short $P_Val02_Next	;AN000;
 30873 00004810 7C06                    	jl	short $P_Val_Found	;AN000;
 30874                                  
 30875 00004812 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 30876                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 30877 00004816 7F07                    	jg	short $P_Val02_Next	;AN000;
 30878                                  
 30879                                  	;jmp	short $P_Val_Found	;AN000;
 30880                                  	; 27/04/2023
 30881                                  $P_Val_Found:				;AN000;
 30882 00004818 B001                    	mov	al,$P_Number ; 1	;AN000;
 30883 0000481A 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 30884 0000481D EB1D                    	jmp	short $P_Value_Exit	;AN000;
 30885                                  
 30886                                  $P_Val02_Next:				;AN000;
 30887 0000481F 83C609                  	add	si,$P_Len_Range ; 9 	;AN000;
 30888 00004822 FEC8                    	dec	al			;AN000; loop nrng times in AL
 30889 00004824 75B0                    	jnz	short $P_Val02_Loop	;AN000;
 30890                                  					; / Not found
 30891 00004826 2EC706[F285]0600        	mov	word [cs:$P_RC],$P_Out_Of_Range
 30892                                  	;mov	word [cs:$P_RC],6	;AC034;
 30893                                  	
 30894                                  	;mov	al,$P_Number ; 1	;AN000;
 30895                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 30896                                  	; 31/03/2023
 30897 0000482D B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 30898 00004830 EB0A                    	jmp	short $P_Value_Exit	;AN000;
 30899                                  
 30900                                  	; 27/04/2023
 30901                                  ;$P_Val_Found:				;AN000;
 30902                                  	;mov	al,$P_Number ; 1	;AN000;
 30903                                  	;mov	ah,[es:si]		;AN000; found ITEM_TAG set
 30904                                  	;jmp	short $P_Value_Exit	;AN000;
 30905                                  
 30906                                  $P_Value03:				;AN000; / nval = 2
 30907                                  $P_Value04:				;AN000; / nval = 3 or else
 30908                                  $P_Value_Err:				;AN000;
 30909 00004832 2EC706[F285]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 30910                                  					;AC034;
 30911                                  	;mov	al,$P_String ; 3	;AN000; Set type
 30912                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 30913                                  	; 31/03/2023
 30914 00004839 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30915                                  $P_Value_Exit:				;AN000;
 30916 0000483C E81AFD                  	call	$P_Fill_Result		;AN000;
 30917 0000483F 5E                      	pop	si			;AN000;
 30918 00004840 5A                      	pop	dx			;AN000;
 30919 00004841 59                      	pop	cx			;AN000;
 30920 00004842 58                      	pop	ax			;AN000;
 30921 00004843 C3                      	retn				;AN000;
 30922                                  
 30923                                  ;***********************************************************************
 30924                                  ; $P_Check_OVF
 30925                                  ;
 30926                                  ; Function:  Check if overflow is occurred with consideration of
 30927                                  ;	     signed or un-signed numeric value
 30928                                  ;
 30929                                  ; Input:     Flag register
 30930                                  ;
 30931                                  ; Output:    CY = 1  :	Overflow
 30932                                  ;
 30933                                  ; Vars:     $P_Flags(R)
 30934                                  ;***********************************************************************
 30935                                  
 30936                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30937                                  $P_Check_OVF:
 30938 00004844 9C                      	pushf				;AN000;
 30939 00004845 2EF606[FE85]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2
 30940                                  					;AC034; is it negative value ?
 30941 0000484B 7502                    	jnz	short $P_COVF		;AN000; if no, check overflow
 30942 0000484D 9D                      	popf				;AN000; by the CY bit
 30943 0000484E C3                      	retn				;AN000;
 30944                                  $P_COVF:				;AN000;
 30945 0000484F 9D                      	popf				;AN000; else,
 30946 00004850 7002                    	jo	short $P_COVF00		;AN000; check overflow by the OF
 30947 00004852 F8                      	clc				;AN000; indicate it with CY bit
 30948 00004853 C3                      	retn				;AN000; CY=0 means no overflow
 30949                                  $P_0099Err:	; 31/03/2023
 30950                                  $P_COVF00:				;AN000;
 30951 00004854 F9                      	stc				;AN000; and CY=1 means overflow
 30952                                  $P_0099Err2:	; 31/03/2023
 30953 00004855 C3                      	retn				;AN000;
 30954                                  
 30955                                  ;***********************************************************************
 30956                                  ; $P_0099;
 30957                                  ;
 30958                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 30959                                  ;
 30960                                  ; Input:     AL = character code
 30961                                  ;
 30962                                  ; Output:    CY = 1 : AL is not number
 30963                                  ;	     CY = 0 : AL contains binary value
 30964                                  ;***********************************************************************
 30965                                  
 30966                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30967                                  $P_0099:
 30968 00004856 3C30                    	cmp	al,"0"                  ;AN000;
 30969                                  	;jb	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 30970                                  	; 31/03/2023
 30971 00004858 72FB                    	jb	short $P_0099Err2
 30972                                  
 30973 0000485A 3C39                    	cmp	al,"9"                  ;AN000;
 30974 0000485C 77F6                    	ja	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 30975                                  
 30976 0000485E 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 30977                                  	; 31/03/2023
 30978                                  	;clc				;AN000; indicate no error
 30979 00004860 C3                      	retn				;AN000;
 30980                                  	 ;31/03/2023
 30981                                  ;$P_0099Err:				;AN000;
 30982                                  ;	stc				;AN000; indicate error
 30983                                  ;	retn				;AN000;
 30984                                  
 30985                                  ;***********************************************************************
 30986                                  ; $P_Simple_String
 30987                                  ;
 30988                                  ; Function:  See value list for the simple string
 30989                                  ;	     and make result buffer.
 30990                                  ;
 30991                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 30992                                  ;	     ES:BX -> CONTROL block
 30993                                  ;
 30994                                  ; Output:    None
 30995                                  ;
 30996                                  ; Use:	$P_Fill_Result, $P_String_Comp
 30997                                  ;
 30998                                  ; Vars: $P_RC(W)
 30999                                  ;***********************************************************************
 31000                                  
 31001                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31002                                  
 31003                                  $P_Simple_String:
 31004 00004861 50                      	push	ax			;AN000;
 31005 00004862 53                      	push	bx			;AN000;
 31006 00004863 52                      	push	dx			;AN000;
 31007 00004864 57                      	push	di			;AN000;
 31008 00004865 268B7F06                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 31009                                  	;mov	di,[es:bx+6]		;AN000; di points to value list
 31010 00004869 268A05                  	mov	al,[es:di]		;AN000; get nval
 31011 0000486C 08C0                    	or	al,al			;AN000; no value list ?
 31012 0000486E 7502                    	jnz	short $P_Sim00		;AN000; then
 31013                                  	; 31/03/2023
 31014                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31015 00004870 EB48                    	jmp	short $P_Sim_Exit	;AN000; and set result buffer
 31016                                  $P_Sim00:				;AN000;
 31017 00004872 3C03                    	cmp	al,$P_nval_String ; 3	;AN000; String choice list provided ?
 31018 00004874 753D                    	jne	short $P_Sim01		;AN000; if no, syntax error
 31019                                  
 31020 00004876 47                      	inc	di			;AN000;
 31021 00004877 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 31022 0000487A B409                    	mov	ah,$P_Len_Range ; 9	;AN000;
 31023 0000487C F6E4                    	mul	ah			;AN000;  Skip nrng field
 31024 0000487E 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 31025 0000487F 01C7                    	add	di,ax			;AN000; di points to nnval
 31026 00004881 268A05                  	mov	al,[es:di]		;AN000; get nnval
 31027 00004884 B405                    	mov	ah,$P_Len_Value ; 5	;AN000;
 31028 00004886 F6E4                    	mul	ah			;AN000; Skip nnval field
 31029 00004888 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 31030 00004889 01C7                    	add	di,ax			;AN000; di points to nstrval
 31031 0000488B 268A05                  	mov	al,[es:di]		;AN000; get nstrval
 31032 0000488E 47                      	inc	di			;AC035; add '2' to
 31033 0000488F 47                      	inc	di			;AC035;  DI reg
 31034                                  					;AN000; di points to 1st string in list
 31035                                  $P_Sim_Loop:				;AN000;
 31036 00004890 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 31037 00004893 E82F00                  	call	$P_String_Comp		;AN000; compare it with operand
 31038 00004896 7310                    	jnc	short $P_Sim_Found	;AN000; found on list ?
 31039                                  
 31040 00004898 83C703                  	add	di,$P_Len_String ; 3	;AN000; if no, point to next choice
 31041 0000489B FEC8                    	dec	al			;AN000; loop nstval times in AL
 31042 0000489D 75F1                    	jnz	short $P_Sim_Loop	;AN000;
 31043                                  					;AN000; / Not found
 31044 0000489F 2EC706[F285]0800        	mov	word [cs:$P_RC],$P_Not_In_Str
 31045                                  	;mov	[cs:$P_RC],8		;AC034;
 31046                                  	; 31/03/2023
 31047                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 31048 000048A6 EB12                    	jmp	short $P_Sim_Exit	;AN000;
 31049                                  $P_Sim_Found:				;AN000;
 31050 000048A8 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 31051 000048AC B002                    	mov	al,$P_List_Idx	; 2	;AN000;
 31052 000048AE 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 31053 000048B1 EB0A                    	jmp	short $P_Sim_Exit0	;AN000;
 31054                                  $P_Sim01:				;AN000;
 31055 000048B3 2EC706[F285]0900        	mov	word [cs:$P_RC],$P_Syntax
 31056                                  	;mov	word [cs:$P_RC],9	;AC034;
 31057                                  $P_Sim_Exit:
 31058                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 31059                                  ;$P_Sim_Exit:				;AN000;
 31060                                  	;mov	al,$P_String ; 3	;AN000; Set type
 31061                                  	; 31/03/2023
 31062 000048BA B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31063                                  $P_Sim_Exit0:				;AN000;
 31064 000048BD E899FC                  	call	$P_Fill_Result		;AN000;
 31065 000048C0 5F                      	pop	di			;AN000;
 31066 000048C1 5A                      	pop	dx			;AN000;
 31067 000048C2 5B                      	pop	bx			;AN000;
 31068 000048C3 58                      	pop	ax			;AN000;
 31069 000048C4 C3                      	retn				;AN000;
 31070                                  
 31071                                  ;***********************************************************************
 31072                                  ; $P_String_Comp:
 31073                                  ;
 31074                                  ; Function:  Compare two string
 31075                                  ;
 31076                                  ; Input:     psdata_seg:SI -> 1st string
 31077                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 31078                                  ;	     ES:BX -> CONTROL block
 31079                                  ;
 31080                                  ; Output:    CY = 1 if not match
 31081                                  ;
 31082                                  ; Use:	$P_Chk_DBCS, $P_Do_CAPS_Char
 31083                                  ;
 31084                                  ; Vars: $P_KEYor_SW_Ptr(W), $P_Flags(R). $P_KEYorSW_Ptr
 31085                                  ;***********************************************************************
 31086                                  
 31087                                  	; 01/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31088                                  
 31089                                  $P_String_Comp:
 31090 000048C5 50                      	push	ax			;AN000;
 31091 000048C6 55                      	push	bp			;AN000;
 31092 000048C7 52                      	push	dx			;AN000;
 31093 000048C8 56                      	push	si			;AN000;
 31094 000048C9 B202                    	mov	dl,$P_DOSTBL_Char ; 2	;AN000; use character case map table
 31095                                  $P_SCOM_Loop:				;AN000;
 31096 000048CB 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 31097 000048CE E89A04                  	call	$P_Chk_DBCS		;AN000; DBCS ?
 31098 000048D1 723C                    	jc	short $P_SCOM00		;AN000; yes,DBCS
 31099                                  
 31100 000048D3 E822FE                  	call	$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 31101                                  	
 31102 000048D6 2EF606[FE85]08          	test	byte [cs:$P_Flags2],$P_Key_Cmp ; 8
 31103                                  					;AC034; keyword search ?
 31104 000048DC 740D                    	jz	short $P_SCOM04		;AN000;
 31105                                  
 31106                                  	;cmp	al,'=' ; 3Dh
 31107 000048DE 3C3D                    	cmp	al,$P_Keyword  ;'='	;AN000; "=" is delimiter
 31108 000048E0 751F                    	jne	short $P_SCOM03		;AN000;IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 31109                                  
 31110 000048E2 26807E0100              	cmp	byte [es:bp+1],$P_NULL	;AN021;   at end of keyword string in the control block THEN
 31111 000048E7 7562                    	jne	short $P_SCOM_Differ	;AN021;
 31112                                  
 31113 000048E9 EB13                    	jmp	short $P_SCOM05 	;AN000;   keyword found in synonym list
 31114                                  
 31115                                  $P_SCOM04:				;AN000;
 31116 000048EB 2EF606[FE85]10          	test	byte [cs:$P_Flags2],$P_SW_Cmp ; 10h 
 31117                                  					;AC034; switch search ?
 31118 000048F1 740E                    	jz	short $P_SCOM03		;AN000;
 31119                                  
 31120 000048F3 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; ":" is delimiter, at end of switch on command line
 31121 000048F5 750A                    	jne	short $P_SCOM03		;AN000; continue compares
 31122                                  
 31123 000048F7 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN021; IF at end of switch on command AND
 31124 000048FC 754D                    	jne	short $P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 31125                                  
 31126                                  $P_SCOM05:				;AN000;   found a match
 31127 000048FE 46                      	inc	si			;AN000; si points to just after "=" or ":"
 31128 000048FF EB58                    	jmp	short $P_SCOM_Same	;AN000; exit
 31129                                  
 31130                                  $P_SCOM03:				;AN000;
 31131 00004901 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 31132 00004905 751D                    	jne	short $P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 31133                                  
 31134 00004907 08C0                    	or	al,al			;AN000; end of line
 31135 00004909 744E                    	jz	short $P_SCOM_Same	;AN000; if so, exit
 31136                                  
 31137 0000490B 46                      	inc	si			;AN000; update operand pointer
 31138 0000490C 45                      	inc	bp			;AN000;    and synonym pointer
 31139 0000490D EB13                    	jmp	short $P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 31140                                  
 31141                                  $P_SCOM00:				;AN000; Here al is DBCS leading byte
 31142 0000490F 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 31143 00004913 7536                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different
 31144                                  
 31145 00004915 46                      	inc	si			;AN000; else, load next byte
 31146 00004916 2E8A04                  	mov	al,[cs:si]		;AN000; and
 31147 00004919 45                      	inc	bp			;AN000;
 31148 0000491A 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 31149 0000491E 752B                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different, too
 31150                                  
 31151 00004920 46                      	inc	si			;AN000; else update operand pointer
 31152 00004921 45                      	inc	bp			;AN000; 	and synonym pointer
 31153                                  $P_SCOM01:				;AN000;
 31154 00004922 EBA7                    	jmp	short $P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 31155                                  
 31156                                  $P_SCOM_Differ0:			;AN000;
 31157 00004924 2EF606[FE85]40          	test	byte [cs:$P_Flags2],$P_SW ; 40h
 31158                                  	;test	byte [cs:$P_Flags2],40h	;AC034;(tm10)
 31159 0000492A 740E                    	jz	short $P_not_applicable	;AN000;(tm10)
 31160                                  
 31161                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 31162                                  	;;test	word [es:bx+2],20h	;AN000;(tm10)
 31163                                  	; 03/04/2023
 31164 0000492C 26F6470220              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 31165 00004931 7407                    	jz	short $P_not_applicable	;AN000;(tm10)
 31166                                  
 31167 00004933 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000;(tm10)
 31168 00004938 741F                    	je	short $P_SCOM_Same	;AN025;(tm10)
 31169                                  
 31170                                  $P_not_applicable:			;AN000;(tm10)
 31171                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 31172                                  	;;test	word [es:bx],10h	;AN000; ignore colon option specified ?
 31173                                  	; 03/04/2023
 31174 0000493A 26F60710                	test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 31175 0000493E 740B                    	jz	short $P_SCOM_Differ	;AN000; if no, say different.
 31176                                  
 31177 00004940 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; End up with ":" and
 31178 00004942 750A                    	jne	short $P_SCOM02		;AN000;    subseqently
 31179                                  
 31180 00004944 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN000;      NULL ?
 31181                                  	;jne	short $P_SCOM_Differ	;AN000; if no, say different
 31182                                  	;jmp	short $P_SCOM_Same	;AN000; else, say same
 31183                                  	; 01/04/2023
 31184 00004949 740E                    	je	short $P_SCOM_Same
 31185                                  $P_SCOM_Differ:
 31186 0000494B F9                      	stc
 31187 0000494C EB10                    	jmp	short $P_SCOM_Exit
 31188                                  
 31189                                  $P_SCOM02:				;AN000;
 31190 0000494E 3C00                    	cmp	al,$P_NULL ; 0		;AN000; end up NULL and :
 31191 00004950 75F9                    	jne	short $P_SCOM_Differ	;AN000;
 31192                                  
 31193                                  	;cmp	byte [es:bp],':'
 31194 00004952 26807E003A              	cmp	byte [es:bp],$P_Colon	;AN000; if no, say different
 31195                                  	;je	short $p_SCOM_Same	;AN000; else, say same
 31196                                  	; 01/04/2023
 31197 00004957 75F2                    	jne	short $P_SCOM_Differ
 31198                                  ;$P_SCOM_Differ: 			;AN000;
 31199                                  	;stc				;AN000; indicate not found
 31200                                  	;jmp	short $P_SCOM_Exit	;AN000;
 31201                                  
 31202                                  $P_SCOM_Same:				;AN000;
 31203 00004959 2E8936[0186]            	mov	[cs:$P_KEYorSW_Ptr],si	;AC034; for later use by keyword or switch
 31204                                  	; 01/04/2023
 31205                                  	;clc
 31206                                  	; cf = 0			;AN000; indicate found
 31207                                  $P_SCOM_Exit:				;AN000;
 31208 0000495E 5E                      	pop	si			;AN000;
 31209 0000495F 5A                      	pop	dx			;AN000;
 31210 00004960 5D                      	pop	bp			;AN000;
 31211 00004961 58                      	pop	ax			;AN000;
 31212 00004962 C3                      	retn				;AN000;
 31213                                  
 31214                                  ;***********************************************************************
 31215                                  ; $P_Date_Format
 31216                                  ;
 31217                                  ; Function:  Convert a date string to DOS date format for int 21h
 31218                                  ;	     with format validation.
 31219                                  ;
 31220                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31221                                  ;	     ES:BX -> CONTROL block
 31222                                  ;
 31223                                  ; Output:    None
 31224                                  ;
 31225                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum
 31226                                  ;
 31227                                  ; Vars: $P_RC(W), $P_1st_Val(RW), $P_2nd_Val(RW), $P_3rd_Val(RW)
 31228                                  ;***********************************************************************
 31229                                  
 31230                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31231                                  	; 11/08/2024
 31232                                  $P_Date_Format:
 31233 00004963 50                      	push	ax			;AN000;
 31234 00004964 51                      	push	cx			;AN000;
 31235 00004965 52                      	push	dx			;AN000;
 31236 00004966 56                      	push	si			;AN000;
 31237 00004967 53                      	push	bx			;AN000;
 31238 00004968 56                      	push	si			;AN000;
 31239 00004969 E8A400                  	call	$P_Set_CDI		;AN000; set country dependent information before process
 31240                                  	; 03/04/2023
 31241                                  	;pop	si			;AN000;
 31242                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 31243                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 31244                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 31245 0000496C 31F6                    	xor	si,si
 31246 0000496E 2E8936[B086]            	mov	[cs:$P_1st_Val],si ; 0	;AC034; set initial value
 31247 00004973 2E8936[B286]            	mov	[cs:$P_2nd_Val],si ; 0	;AC034; set initial value
 31248                                  	; 11/08/2024
 31249 00004978 2E8936[B486]            	mov	[cs:$P_3rd_Val],si ; 0	;AC034; set initial value
 31250 0000497D 5E                      	pop	si
 31251 0000497E E8A900                  	call	$P_Get_DecNum		;AN000; get 1st number
 31252                                  	;jc	short $P_DateF_Err0	;AN000;-----------------------+
 31253                                  	; 11/08/2024
 31254 00004981 727A                    	jc	short $P_DateF_Error
 31255 00004983 2EA3[B086]              	mov	[cs:$P_1st_Val],ax	;AC034;			      |
 31256 00004987 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 31257 00004989 741A                    	jz	short $P_DateF_YMD	;AN000; 		      |
 31258 0000498B E89C00                  	call	$P_Get_DecNum		;AN000; get 2nd number	      |
 31259 0000498E 726D                    	jc	short $P_DateF_Error	;AN000; 		      |
 31260 00004990 2EA3[B286]              	mov	[cs:$P_2nd_Val],ax	;AC034;			      |
 31261 00004994 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 31262 00004996 740D                    	jz	short $P_DateF_YMD	;AN000; 		      |
 31263 00004998 E88F00                  	call	$P_Get_DecNum		;AN000; get 3rd number	      |
 31264                                  $P_DateF_Err0:				;AN000; Bridge	  <-----------+
 31265 0000499B 7260                    	jc	short $P_DateF_Error	;AN000;
 31266 0000499D 2EA3[B486]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 31267 000049A1 08DB                    	or	bl,bl			;AN000; end of line ?
 31268 000049A3 7558                    	jnz	short $P_DateF_Error	;AN000;
 31269                                  $P_DateF_YMD:				;AN000;
 31270 000049A5 2E8B1E[8E86]            	mov	bx,[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]
 31271                                  	;mov	bx,[cs:$P_Country_Info]	;AC034; get date format
 31272 000049AA 83FB02                  	cmp	bx,$P_Date_YMD ; 2	;AN000;
 31273 000049AD 7422                    	je	short $P_DateF00	;AN000;
 31274 000049AF 2EA1[B086]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 31275 000049B3 08E4                    	or	ah,ah			;AN000;
 31276 000049B5 7546                    	jnz	short $P_DateF_Error	;AN000;
 31277 000049B7 88C1                    	mov	cl,al			;AN000; set month
 31278 000049B9 2EA1[B286]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 31279 000049BD 08E4                    	or	ah,ah			;AN000; if overflow, error.
 31280 000049BF 753C                    	jnz	short $P_DateF_Error	;AN000;
 31281 000049C1 88C5                    	mov	ch,al			;AN000; set date
 31282 000049C3 2E8B16[B486]            	mov	dx,[cs:$P_3rd_Val]	;AC034; set year
 31283 000049C8 83FB01                  	cmp	bx,$P_Date_DMY ; 1	;AN000; from here format = MDY
 31284 000049CB 7502                    	jne	short $P_DateF01	;AN000; if it is DMY
 31285 000049CD 86E9                    	xchg	ch,cl			;AN000;  then swap M <-> D
 31286                                  $P_DateF01:				;AN000;
 31287 000049CF EB19                    	jmp	short $P_DateF02	;AN000;
 31288                                  $P_DateF00:				;AN000; / here format = YMD
 31289 000049D1 2E8B16[B086]            	mov	dx,[cs:$P_1st_Val]	;AC034; set year
 31290 000049D6 2EA1[B286]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 31291 000049DA 08E4                    	or	ah,ah			;AN000; if overflow, error
 31292 000049DC 751F                    	jnz	short $P_DateF_Error	;AN000;
 31293                                  
 31294 000049DE 88C1                    	mov	cl,al			;AN000; set month
 31295 000049E0 2EA1[B486]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 31296 000049E4 08E4                    	or	ah,ah			;AN000; if overflow, error
 31297 000049E6 7515                    	jnz	short $P_DateF_Error	;AN000;
 31298 000049E8 88C5                    	mov	ch,al			;AN000; set date
 31299                                  $P_DateF02:				;AN000;
 31300 000049EA 83FA64                  	cmp	dx,100			;AN000; year is less that 100 ?
 31301 000049ED 7304                    	jae	short $P_DateF03	;AN000;
 31302 000049EF 81C26C07                	add	dx,1900 		;AN000; set year 19xx
 31303                                  $P_DateF03:				;AN000;
 31304 000049F3 5B                      	pop	bx			;AN000; recover CONTROL block
 31305 000049F4 5E                      	pop	si			;AN000; recover string pointer
 31306                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 31307                                  	;mov	al,$P_Date_F ; 7	;AN000;   result
 31308                                  	; 03/04/2023
 31309 000049F5 B807FF                  	mov	ax,($P_No_Tag<<8)+$P_Date_F
 31310 000049F8 E85EFB                  	call	$P_Fill_Result		;AN000;        buffer
 31311 000049FB EB0F                    	jmp	short $P_Date_Format_Exit
 31312                                  					;AN000;	to Date
 31313                                  $P_DateF_Error: 			;AN000;
 31314 000049FD 5B                      	pop	bx			;AN000; recover CONTROL block
 31315 000049FE 5E                      	pop	si			;AN000; recover string pointer
 31316                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 31317                                  	;mov	al,$P_String ; 3	;AN000;   result
 31318                                  	; 03/04/2023
 31319 000049FF B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31320 00004A02 E854FB                  	call	$P_Fill_Result		;AN000; 	buffer
 31321                                  					;AN000; to string
 31322 00004A05 2EC706[F285]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 31323                                  					;AC034; indicate syntax error
 31324                                  $P_Date_Format_Exit:			;AN000;
 31325 00004A0C 5A                      	pop	dx			;AN000;
 31326 00004A0D 59                      	pop	cx			;AN000;
 31327 00004A0E 58                      	pop	ax			;AN000;
 31328 00004A0F C3                      	retn				;AN000;
 31329                                  
 31330                                  ;***********************************************************************
 31331                                  ; $P_Set_CDI:
 31332                                  ;
 31333                                  ; Function: Read CDI from DOS if it has not been read yet
 31334                                  ;
 31335                                  ; Input:    None
 31336                                  ;
 31337                                  ; Output:   psdata_seg:SI -> CDI
 31338                                  ;
 31339                                  ; Use:	INT 21h w/ AH = 38h
 31340                                  ;***********************************************************************
 31341                                  
 31342                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31343                                  $P_Set_CDI:
 31344                                  	; 18/04/2023
 31345 00004A10 8D36[8E86]              	lea	si,$P_Country_Info	;AC034;
 31346                                  	;cmp	word [cs:si+$P_CDI.$P_CDI_DateF],-1 ; $P_NeedToBeRead
 31347 00004A14 2E833CFF                	cmp	word [cs:si],-1 ; $P_NeedToBeRead ; 0FFFFh
 31348                                  					;AN000; already read ?
 31349                                  	;je	short $P_Read_CDI	;AN000;
 31350                                  	;jmp	short $P_Set_CDI_Exit	;AN000; then do nothing
 31351                                  	; 03/04/2023
 31352 00004A18 750F                    	jne	short $P_Set_CDI_Exit
 31353                                  $P_Read_CDI:				;AN000; else read CDI thru DOS
 31354 00004A1A 1E                      	push	ds			;AN000;
 31355 00004A1B 52                      	push	dx			;AN000;
 31356 00004A1C 50                      	push	ax			;AN000;
 31357 00004A1D 0E                      	push	cs			;AC023;
 31358 00004A1E 1F                      	pop	ds			;AN000; set segment register
 31359                                  	;mov	ax,3800h
 31360 00004A1F B80038                  	mov	ax,$P_DOS_Get_CDI	;AN000; get country information
 31361 00004A22 89F2                    	mov	dx,si			;AN000; set offset of CDI in local data area
 31362 00004A24 CD21                    	int	21h			;AN000;
 31363 00004A26 58                      	pop	ax			;AN000;
 31364 00004A27 5A                      	pop	dx			;AN000;
 31365 00004A28 1F                      	pop	ds			;AN000;
 31366                                  $P_Set_CDI_Exit:			;AN000;
 31367 00004A29 C3                      	retn				;AN000;
 31368                                  
 31369                                  ;***********************************************************************
 31370                                  ; $P_Get_DecNum:
 31371                                  ;
 31372                                  ; Function:  Read a character code from psdata_seg:SI until specified delimiter
 31373                                  ;	     or NULL encountered. And make a decimal number.
 31374                                  ;
 31375                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31376                                  ;
 31377                                  ; Output:    BL = delimiter code or NULL
 31378                                  ;	     AX = Decimal number
 31379                                  ;	     SI advanced to the next number
 31380                                  ;	     CY = 1 : Syntax error, AL = Latest examineed number
 31381                                  ;
 31382                                  ; Use:	$P_0099
 31383                                  ;***********************************************************************
 31384                                  
 31385                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31386                                  $P_Get_DecNum:
 31387 00004A2A 51                      	push	cx			;AN000;
 31388 00004A2B 52                      	push	dx			;AN000;
 31389 00004A2C 31C9                    	xor	cx,cx			;AN000; cx will have final value
 31390                                  $P_GetNum_Loop: 			;AN000;
 31391 00004A2E 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 31392 00004A31 08C0                    	or	al,al			;AN000; end of line ?
 31393 00004A33 7438                    	jz	short $P_GetNum00	;AN000; if yes, exit
 31394 00004A35 2E803E[8D86]00          	cmp	byte [cs:$P_Got_Time],0 ;AC034; is this numeric in a time field? ;AC023
 31395 00004A3B 740B                    	je	short $P_Do_Date_Delims	;AN000; no, go check out Date delimiters ;AC023
 31396                                  
 31397                                  ; Determine which delimiter(s) to check for. Colon & period  or period only
 31398                                  	;cmp	bl,$P_colon_period
 31399 00004A3D 80FB01                  	cmp	bl,1 ; $P_colon_period	;AN032; ;Time
 31400 00004A40 750E                    	jne	short $P_Do_Time_Delim1	;AN032; ;only check for period
 31401                                  
 31402 00004A42 3C3A                    	cmp	al,$P_Colon ; ':'	;AN032; ;Is this a valid delimiter ?
 31403 00004A44 742B                    	je	short $P_GetNum01	;AN032; ;yes, exit
 31404                                  
 31405                                  	; 03/04/2023
 31406 00004A46 EB08                    	jmp	short $P_Do_Time_Delim1
 31407                                  ;$P_Do_Time_Delim1:			;AN000;
 31408                                  	;cmp	al,$P_Period ; '.'	;;AC032;;AC023;Is this a valid delimiter ?
 31409                                  	;je	short $P_GetNum01	;AC023; yes, exit
 31410                                  	;
 31411                                  	;jmp	short $P_Neither_Delims ;AN023;
 31412                                  
 31413                                  $P_Do_Date_Delims:			;AN000;
 31414                                  ;Regardless of the date delimiter character specified in the country
 31415                                  ;dependent information, check for the presence of any one of these
 31416                                  ;three field delimiters: "-", "/", or ".".
 31417 00004A48 3C2D                    	cmp	al,$P_Minus ;'-'	;AN020;is this a date delimiter character?
 31418 00004A4A 7425                    	je	short $P_GetNum01	;AN020;if yes, exit
 31419                                  
 31420 00004A4C 3C2F                    	cmp	al,$P_Slash ; '/'	;AN020;is this a date delimiter character?
 31421 00004A4E 7421                    	je	short $P_GetNum01	;AN020;if yes, exit
 31422                                  
 31423                                  $P_Do_Time_Delim1:  ; 03/04/2023
 31424 00004A50 3C2E                    	cmp	al,$P_Period ; '.'	;AN020;is this a date delimiter character?
 31425 00004A52 741D                    	je	short $P_GetNum01	;AN000; if yes, exit
 31426                                  
 31427                                  $P_Neither_Delims:			;AN023;
 31428 00004A54 E8FFFD                  	call	$P_0099 		;AN000; convert it to binary
 31429 00004A57 721C                    	jc	short $P_GetNum_Exit	;AN000; if error exit
 31430                                  
 31431 00004A59 B400                    	mov	ah,0			;AN000;
 31432 00004A5B 91                      	xchg	ax,cx			;AN000;
 31433 00004A5C BA0A00                  	mov	dx,10			;AN000;
 31434 00004A5F F7E2                    	mul	dx			;AN000; ax = ax * 10
 31435 00004A61 09D2                    	or	dx,dx			;AN000; overflow
 31436 00004A63 750F                    	jnz	short $P_GetNum02	;AN000; then exit
 31437                                  
 31438 00004A65 01C8                    	add	ax,cx			;AN000;
 31439 00004A67 720C                    	jc	short $P_GetNum_Exit	;AN000;
 31440                                  
 31441 00004A69 91                      	xchg	ax,cx			;AN000;
 31442 00004A6A 46                      	inc	si			;AN000;
 31443 00004A6B EBC1                    	jmp	short $P_GetNum_Loop	;AN000;
 31444                                  
 31445                                  $P_GetNum00:				;AN000;
 31446 00004A6D 88C3                    	mov	bl,al			;AN000; set bl to NULL
 31447                                  	;03/04/2023
 31448                                  	; cf=0
 31449                                  	;clc				;AN000; indicate no error
 31450 00004A6F EB04                    	jmp	short $P_GetNum_Exit	;AN000;
 31451                                  
 31452                                  $P_GetNum01:				;AN000;
 31453 00004A71 46                      	inc	si			;AN000; si points to next number
 31454                                  	;03/04/2023
 31455                                  	; cf=0
 31456                                  	;clc				;AN000; indicate no error
 31457 00004A72 EB01                    	jmp	short $P_GetNum_Exit	;AN000;
 31458                                  
 31459                                  $P_GetNum02:				;AN000;
 31460 00004A74 F9                      	stc				;AN000; indicate error
 31461                                  $P_GetNum_Exit: 			;AN000;
 31462 00004A75 89C8                    	mov	ax,cx			;AN000;return value
 31463 00004A77 5A                      	pop	dx			;AN000;
 31464 00004A78 59                      	pop	cx			;AN000;
 31465 00004A79 C3                      	retn				;AN000;
 31466                                  
 31467                                  ;***********************************************************************
 31468                                  ; $P_Time_Format
 31469                                  ;
 31470                                  ; Function:  Convert a time string to DOS time format for int 21h
 31471                                  ;	     with format validation.
 31472                                  ;
 31473                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31474                                  ;	     ES:BX -> CONTROL block
 31475                                  ;
 31476                                  ; Output:    None
 31477                                  ;
 31478                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum, $P_Time_2412
 31479                                  ;
 31480                                  ; Vars: $P_RC(W), $P_Flags(R), $P_1st_Val(RW), $P_2nd_Val(RW)
 31481                                  ;	$P_3rd_Val(RW), $P_4th_Val(RW)
 31482                                  ;***********************************************************************
 31483                                  
 31484                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31485                                  	; 12/08/2024
 31486                                  $P_Time_Format:				;AN000;
 31487 00004A7A 50                      	push	ax			;AN000;
 31488 00004A7B 51                      	push	cx			;AN000;
 31489 00004A7C 52                      	push	dx			;AN000;
 31490 00004A7D 56                      	push	si			;AN000;
 31491 00004A7E 53                      	push	bx			;AN000;
 31492 00004A7F 56                      	push	si			;AN000;
 31493 00004A80 E88DFF                  	call	$P_Set_CDI		;AN000; Set country independent
 31494                                  					; information before process
 31495                                  	;test	byte [cs:si+11h], 1
 31496 00004A83 2EF6441001              	test	byte [cs:si+$P_CDI.$P_CDI_TimeF],1 
 31497                                  					;AN000; 24 hour system
 31498 00004A88 5E                      	pop	si			;AN000;
 31499 00004A89 7503                    	jnz	short $P_TimeF00	;AN000; if no, means 12 hour system
 31500 00004A8B E8F800                  	call	$P_Time_2412		;AN000; this routine handle "am" "pm"
 31501                                  $P_TimeF00:				;AN000;
 31502                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 31503                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 31504                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 31505                                  	;mov	word [cs:$P_4th_Val],0	;AC034; set initial value
 31506                                  	;mov	byte [cs:$P_Got_Time],1	;AN023;AC034;; use time delimiter
 31507                                  	; 03/04/2023
 31508 00004A8E 31DB                    	xor	bx,bx
 31509 00004A90 2E891E[B086]            	mov	[cs:$P_1st_Val],bx ; 0
 31510 00004A95 2E891E[B286]            	mov	[cs:$P_2nd_Val],bx ; 0
 31511 00004A9A 2E891E[B486]            	mov	[cs:$P_3rd_Val],bx ; 0
 31512 00004A9F 2E891E[B686]            	mov	[cs:$P_4th_Val],bx ; 0
 31513                                  	;inc	bl
 31514                                  	;mov	[cs:$P_Got_Time],bl ; 1
 31515                                  
 31516                                  	;mov	bl,$P_colon_period
 31517                                  	;mov	bl,1 ; $P_colon_period	;AN032; flag, indicates use of
 31518                                  					; delimiters between hours,
 31519                                  					;  minutes,seconds
 31520                                  	; 03/04/2023 - Retro DOS v4.0 COMMAND.COM
 31521 00004AA4 FEC3                    	inc	bl ; bl = 1
 31522 00004AA6 2E881E[8D86]            	mov	[cs:$P_Got_Time],bl ; 1
 31523                                  	;
 31524 00004AAB E87CFF                  	call	$P_Get_DecNum		;AN000; get 1st number
 31525                                  	;jc	short $P_TimeF_Err0	;AN000;
 31526                                  	; 12/08/2024
 31527 00004AAE 725A                    	jc	short $P_TimeF_Error
 31528 00004AB0 2EA3[B086]              	mov	[cs:$P_1st_Val],ax	;AC034;
 31529 00004AB4 08DB                    	or	bl,bl			;AN000; end of line ?
 31530 00004AB6 7478                    	jz	short $P_TimeF_Rlt	;AN000;
 31531 00004AB8 E86FFF                  	call	$P_Get_DecNum		;AN000; get 2nd number
 31532                                  	;jc	short $P_TimeF_Err0	;AC038; if OK
 31533                                  	; 12/08/2024
 31534 00004ABB 724D                    	jc	short $P_TimeF_Error
 31535 00004ABD 2EA3[B286]              	mov	[cs:$P_2nd_Val],ax	;AC034;
 31536 00004AC1 08DB                    	or	bl,bl			;AN000; end of line ?
 31537 00004AC3 746B                    	jz	short $P_TimeF_Rlt	;AN000;
 31538 00004AC5 B302                    	mov	bl,2 ; $P_period_only	;AN032; flag, which to decimal separator
 31539 00004AC7 E860FF                  	call	$P_Get_DecNum		;AN000; get 3rd number
 31540                                  	;jc	short $P_TimeF_Err0	;AC039; if problem, bridge to error
 31541                                  	; 12/08/2024
 31542 00004ACA 723E                    	jc	short $P_TimeF_Error
 31543 00004ACC 2EA3[B486]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 31544 00004AD0 08DB                    	or	bl,bl			;AN000; end of line ?
 31545 00004AD2 754F                    	jnz	short $P_Time_4		;AN039; NOT END OF LINE,
 31546                                  					;AN039;   GO TO 4TH NUMBER
 31547                                  	;test	byte [cs:$P_Flags1],$P_Time_Again ; 2
 31548 00004AD4 2EF606[FD85]02          	test	byte [cs:$P_Flags1],2 	;AN039; HAS TIME PARSE
 31549                                  					;AN039;    BEEN REPEATED?
 31550 00004ADA 7554                    	jnz	short $P_TimeF_Rlt	;AN039; yes, this is really
 31551                                  					;AN039;   the end of line
 31552                                  					;AN039; no, time has not been repeated
 31553 00004ADC 2E8B36[F485]            	mov	si,[cs:$P_SI_Save]	;AN039; get where parser quit
 31554                                  					;AN039;   in command line
 31555 00004AE1 807CFF2C                	cmp	byte [si-1],$P_Comma ; ','
 31556                                  					;AN039; look at delimiter
 31557                                  					;AN039;   from command line
 31558 00004AE5 7549                    	jne	short $P_TimeF_Rlt	;AN039; was not a comma, this is
 31559                                  					;AN039;  really end of line
 31560                                  					;AN039; is comma before hundredths,
 31561                                  					;AN039;   redo TIME
 31562 00004AE7 C644FF2E                	mov	byte [si-1],$P_Period ; '.' 
 31563                                  					;AN039; change that ambiguous
 31564                                  					;AN039;    comma to a decimal point
 31565                                  					;AN039;     parse can understand
 31566 00004AEB 2EC706[FD85]0000        	mov	word [cs:$P_Flags],0	;AN039; Clear all internal flags
 31567                                  	;or	byte [cs:$P_Flags1],$P_Time_Again
 31568 00004AF2 2E800E[FD85]02          	or	byte [cs:$P_Flags1],2	;AN039; indicate TIME
 31569                                  					;AN039; is being repeated
 31570 00004AF8 2E8B0E[8786]            	mov	cx,[cs:$P_ORIG_ORD]	;AN039; ORIGINAL ORDINAL FROM CX
 31571 00004AFD 2E8B26[8986]            	mov	sp,[cs:$P_ORIG_STACK]	;AN039; ORIGINAL VALUE
 31572                                  					;AN039;   OF STACK FROM SP
 31573 00004B02 2E8B36[8B86]            	mov	si,[cs:$P_ORIG_SI]	;AN039; ORIGINAL START
 31574                                  					;AN039;   PARSE POINTER FROM SI
 31575 00004B07 E927F8                  	jmp	$P_Redo_Time		;AN039; go try TIME again
 31576                                  
 31577                                  	; 12/08/2024
 31578                                  $P_TimeF_Error: 			;AN000;
 31579                                  $P_TimeF_Err:				;AN000;
 31580 00004B0A 5B                      	pop	bx			;AN000; recover CONTROL block
 31581 00004B0B 5E                      	pop	si			;AN000; recover string pointer
 31582                                  	;mov	ah,$P_No_Tag		;AN000; set
 31583                                  	;mov	al,$P_String		;AN000;     result
 31584                                  	; 03/04/2023
 31585 00004B0C B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31586 00004B0F E847FA                  	call	$P_Fill_Result		;AN000; 	  buffer
 31587                                  					;AN000; to string
 31588 00004B12 2EC706[F285]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9	
 31589                                  					;AC034; return syntax error
 31590                                  $P_Time_Format_Exit:			;AN000;
 31591 00004B19 2EC606[8D86]00          	mov	byte [cs:$P_Got_Time],0	;AN023;AC034; finished with this time field
 31592 00004B1F 5A                      	pop	dx			;AN000;
 31593 00004B20 59                      	pop	cx			;AN000;
 31594 00004B21 58                      	pop	ax			;AN000;
 31595 00004B22 C3                      	retn
 31596                                  
 31597                                  $P_Time_4:				;AN039; READY FOR 4TH (HUNDREDTHS) NUMBER
 31598 00004B23 E804FF                  	call	$P_Get_DecNum		;AN000; get 4th number
 31599                                  $P_TimeF_Err0:				;AN000; Bridge
 31600 00004B26 72E2                    	jc	short $P_TimeF_Error	;AN000;
 31601                                  	;
 31602 00004B28 2EA3[B686]              	mov	[cs:$P_4th_Val],ax	;AC034;
 31603 00004B2C 08DB                    	or	bl,bl			;AN000; After hundredth, no data allowed
 31604 00004B2E 75DA                    	jnz	short $P_TimeF_Error	;AN000; if some, then error
 31605                                  $P_TimeF_Rlt:				;AN000;
 31606 00004B30 2EA1[B086]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 31607 00004B34 08E4                    	or	ah,ah			;AN000; if overflow then error
 31608 00004B36 75D2                    	jnz	short $P_TimeF_Err	;AN000;
 31609                                  	;test	byte [cs:$P_Flags1],$P_Time12am ; 1
 31610 00004B38 2EF606[FD85]01          	test	byte [cs:$P_Flags1],1	;AN038;if "am" specified
 31611 00004B3E 7408                    	jz	short $P_Time_notAM	;AN038;skip if no "AM" specified
 31612                                  					;since "AM" was specified,
 31613 00004B40 3C0C                    	cmp	al,12			;AN038: if hour specified as later than noon
 31614 00004B42 77C6                    	ja	short $P_TimeF_Err	;AN038; error if "AM" on more than noon
 31615 00004B44 7502                    	jne	short $P_Time_notAM	;AN038; for noon exactly,
 31616 00004B46 30C0                    	xor	al,al			;AN038; set hour = zero
 31617                                  $P_Time_notAM:				;AN038;
 31618                                  	;test	byte [cs:$P_Flags2],$P_Time12
 31619 00004B48 2EF606[FE85]04          	test	byte [cs:$P_Flags2],4	;AC034; if 12 hour system and pm is specified
 31620 00004B4E 740C                    	jz	short $P_TimeSkip00	;AN000; then
 31621 00004B50 3C0C                    	cmp	al,12			;AN038; if 12:00 o'clock already
 31622 00004B52 7408                    	je	short $P_TimeSkip00	;AN038; it is PM already
 31623 00004B54 040C                    	add	al,12			;AN000; add 12 hours to make it afternoon
 31624 00004B56 72B2                    	jc	short $P_TimeF_Err	;AN000; if overflow then error
 31625 00004B58 3C18                    	cmp	al,24			;AN038; after adding 12, now cannot be >24
 31626 00004B5A 77AE                    	ja	short $P_TimeF_Err	;AN038; if too big, error
 31627                                  $P_TimeSkip00:				;AN000;
 31628 00004B5C 88C2                    	mov	dl,al			;AN000; set hour
 31629 00004B5E 2EA1[B286]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 31630 00004B62 08E4                    	or	ah,ah			;AN000; if overflow then error
 31631 00004B64 75A4                    	jnz	short $P_TimeF_Err	;AN000;
 31632 00004B66 88C6                    	mov	dh,al			;AN000; set minute
 31633 00004B68 2EA1[B486]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 31634 00004B6C 08E4                    	or	ah,ah			;AN000; if overflow then error
 31635 00004B6E 759A                    	jnz	short $P_TimeF_Err	;AN000;
 31636 00004B70 88C1                    	mov	cl,al			;AN000; set second
 31637 00004B72 2EA1[B686]              	mov	ax,[cs:$P_4th_Val]	;AC034;
 31638 00004B76 08E4                    	or	ah,ah			;AN000; if overflow then error
 31639 00004B78 7590                    	jnz	short $P_TimeF_Err	;AN000;
 31640 00004B7A 88C5                    	mov	ch,al			;AN000; set hundredth
 31641 00004B7C 5B                      	pop	bx			;AN000; recover CONTROL block
 31642 00004B7D 5E                      	pop	si			;AN000; recover string pointer
 31643                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 31644                                  	;mov	al,$P_Time_F ; 8 	;AN000;   result
 31645                                  	; 03/04/2023
 31646 00004B7E B808FF                  	mov	ax,($P_No_Tag<<8)+$P_Time_F
 31647 00004B81 E8D5F9                  	call	$P_Fill_Result		;AN000;        buffer
 31648 00004B84 EB93                    	jmp	short $P_Time_Format_Exit
 31649                                  					;AN000; to time
 31650                                  
 31651                                  ;***********************************************************************
 31652                                  ; $P_Time_2412:
 31653                                  ;
 31654                                  ; Function:  Remove "a", "p", "am", or "pm" from the end of stinrg
 31655                                  ;
 31656                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31657                                  ;
 31658                                  ; Output:    Set $P_Time12 flag when the string is terminated by "p"
 31659                                  ;	     or "pm"
 31660                                  ;
 31661                                  ; Vars:  $P_Flags(W)
 31662                                  ;***********************************************************************
 31663                                  
 31664                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31665                                  
 31666                                  $P_Time_2412:				;AN000;
 31667 00004B86 50                      	push	ax			;AN000;
 31668 00004B87 56                      	push	si			;AN000;
 31669                                  $P_T12_Loop:				;AN000;
 31670 00004B88 2E8A04                  	mov	al,[cs:si]		;AN000; Move
 31671 00004B8B 46                      	inc	si			;AN000;     si
 31672 00004B8C 08C0                    	or	al,al			;AN000;       to
 31673 00004B8E 75F8                    	jnz	short $P_T12_Loop	;AN000; 	end of string
 31674                                  
 31675 00004B90 2E8A44FE                	mov	al,[cs:si-2]		;AN000; get char just before NULL
 31676                                  	;or	al,20h
 31677 00004B94 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 31678 00004B96 3C70                    	cmp	al,"p"                  ;AN000; only "p" of "pm" ?
 31679 00004B98 7425                    	je	short $P_T1200		;AN000;
 31680                                  
 31681 00004B9A 3C61                    	cmp	al,"a"                  ;AN000; only "a" of "am" ?
 31682 00004B9C 7413                    	je	short $P_T1201		;AN000;
 31683                                  
 31684 00004B9E 3C6D                    	cmp	al,"m"                  ;AN000; "m" of "am" or "pm"
 31685 00004BA0 751A                    	jne	short $P_T12_Exit	;AN000;
 31686                                  
 31687 00004BA2 4E                      	dec	si			;AN000;
 31688 00004BA3 2E8A44FE                	mov	al,[cs:si-2]		;AN000;
 31689                                  	;or	al,20h
 31690 00004BA7 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 31691 00004BA9 3C70                    	cmp	al,"p"                  ;AN000; "p" of "pm" ?
 31692 00004BAB 7412                    	je	short $P_T1200		;AN000;
 31693                                  
 31694 00004BAD 3C61                    	cmp	al,"a"                  ;AN000; "a" of "am" ?
 31695                                  	;je	short $P_T1201		;AN000; go process "a"
 31696                                  	;jmp	short $P_T12_Exit	;AN000; no special chars found
 31697                                  	; 05/04/2023
 31698 00004BAF 750B                    	jne	short $P_T12_Exit
 31699                                  
 31700                                  ;$P_T1200:				;AN000; "P" found
 31701                                  	;;or	byte [cs:$P_Flags2],$P_Time12
 31702                                  	;or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 31703                                  	;jmp	short $P_Tclr_chr	;AN038; go clear the special char
 31704                                  
 31705                                  $P_T1201:				;AN000; "A" found
 31706                                  	;or	byte [cs:$P_Flags1],$P_Time12AM
 31707 00004BB1 2E800E[FD85]01          	or	byte [cs:$P_Flags1],1	;AN038; flag "AM" found
 31708                                  $P_Tclr_chr:				;AN038;
 31709 00004BB7 2EC644FE00              	mov	byte [cs:si-2],$P_NULL	;AN000; null out special char
 31710                                  $P_T12_Exit:				;AN000;
 31711 00004BBC 5E                      	pop	si			;AN000;
 31712 00004BBD 58                      	pop	ax			;AN000;
 31713 00004BBE C3                      	retn				;AN000;
 31714                                  
 31715                                  	; 05/04/2023
 31716                                  $P_T1200:				;AN000; "P" found
 31717                                  	;or	byte [cs:$P_Flags2],$P_Time12
 31718 00004BBF 2E800E[FE85]04          	or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 31719 00004BC5 EBF0                    	jmp	short $P_Tclr_chr	;AN038; go clear the special char
 31720                                  
 31721                                  ;***********************************************************************
 31722                                  ; $P_File_Format;
 31723                                  ;
 31724                                  ; Function:  Check if the input string is valid file spec format.
 31725                                  ;	     And set the result buffer.
 31726                                  ;
 31727                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31728                                  ;	     ES:BX -> CONTROL block
 31729                                  ;
 31730                                  ; Output:    None
 31731                                  ;
 31732                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS, $P_FileSp_Chk
 31733                                  ;
 31734                                  ; Vars: $P_RC(W), $P_SI_Save(W), $P_Terminator(W), $P_SaveSI_Cmpx(R)
 31735                                  ;	$P_SaveSI_Cmpx(R)
 31736                                  ;***********************************************************************
 31737                                  
 31738                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31739                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4DF0h
 31740                                  $P_File_Format:
 31741 00004BC7 50                      	push	ax			;AN000;
 31742 00004BC8 57                      	push	di			;AN000;
 31743 00004BC9 56                      	push	si			;AN000;
 31744 00004BCA 2E8B3E[FF85]            	mov	di,[cs:$P_SaveSI_Cmpx]	;AC034; get user buffer address
 31745 00004BCF 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 31746 00004BD2 08C0                    	or	al,al			;AN000; end of line ?
 31747 00004BD4 7413                    	je	short $P_FileF_Err	;AN000; if yes, error exit
 31748 00004BD6 E85D00                  	call	$P_FileSp_Chk		;AN000; else, check if file special character
 31749 00004BD9 7523                    	jne	short $P_FileF03	;AN000; if yes,
 31750 00004BDB 2EC606[CB86]01          	mov	byte [cs:$P_err_flag],$P_error_filespec ; 1
 31751                                  					;AN033;AC034;; set error flag- bad char.
 31752 00004BE1 5E                      	pop	si			;AN033;
 31753 00004BE2 2EC60400                	mov	byte [cs:si],$P_NULL	;AN033;
 31754 00004BE6 5F                      	pop	di			;AN033;
 31755 00004BE7 EB3E                    	jmp	short $P_FileF02	;AN033;
 31756                                  $P_FileF_Err:				;AN000;
 31757 00004BE9 5E                      	pop	si			;AN000;
 31758 00004BEA 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000;
 31759 00004BEE 5F                      	pop	di			;AN000;
 31760                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 31761                                  	;test	word [es:bx],1		;AN000; is it optional ?
 31762 00004BEF 26F60701                	test	byte [es:bx],$P_Optional ; 1
 31763 00004BF3 7532                    	jnz	short $P_FileF02	;AN000;
 31764 00004BF5 2EC706[F285]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 31765                                  	;mov	word [cs:$P_RC],2	;AC034; 3/17/87
 31766 00004BFC EB29                    	jmp	short $P_FileF02	;AN000;
 31767                                  $P_FileF03:				;AN000;
 31768 00004BFE 58                      	pop	ax			;AN000; discard save si
 31769 00004BFF 56                      	push	si			;AN000; save new si
 31770                                  $P_FileF_Loop1: 			;AN000;
 31771 00004C00 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 31772 00004C03 08C0                    	or	al,al			;AN000; end of line ?
 31773 00004C05 741E                    	jz	short $P_FileF_RLT	;AN000;
 31774 00004C07 E82C00                  	call	$P_FileSp_Chk		;AN000; File special character ?
 31775 00004C0A 740B                    	jz	short $P_FileF00	;AN000;
 31776 00004C0C E85C01                  	call	$P_Chk_DBCS		;AN000; no, then DBCS ?
 31777 00004C0F 7302                    	jnc	short $P_FileF01	;AN000;
 31778 00004C11 47                      	inc	di			;AN000; if yes, skip next byte
 31779 00004C12 46                      	inc	si			;AN000;
 31780                                  $P_FileF01:				;AN000;
 31781 00004C13 47                      	inc	di			;AN000;
 31782 00004C14 46                      	inc	si			;AN000;
 31783 00004C15 EBE9                    	jmp	short $P_FileF_Loop1	;AN000;
 31784                                  $P_FileF00:				;AN000;
 31785 00004C17 2EA2[F885]              	mov	[cs:$P_Terminator],al	;AC034;
 31786 00004C1B 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; update end of string
 31787 00004C1F 47                      	inc	di			;AN000;
 31788 00004C20 2E893E[F485]            	mov	[cs:$P_SI_Save],di	;AC034; update next pointer in command line
 31789                                  $P_FileF_RLT:				;AN000;
 31790 00004C25 5E                      	pop	si			;AN000;
 31791 00004C26 5F                      	pop	di			;AN000;
 31792                                  $P_FileF02:				;AN000;
 31793 00004C27 58                      	pop	ax			;AN000; (tm14)
 31794                                  	;;test	ax,200h
 31795                                  	;test	ax,$P_File_Spc		;AN000; (tm14)
 31796                                  	; 05/04/2023
 31797 00004C28 F6C402                  	test	ah,($P_File_Spc>>8)
 31798 00004C2B 7408                    	jz	short $P_Drv_Only_Exit	;AN000; (tm14)
 31799 00004C2D 50                      	push	ax			;AN000; (tm14)
 31800                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 31801                                  	;mov	al,$P_File_Spec ; 5 	;AN000;    result
 31802                                  	; 05/04/2023
 31803 00004C2E B805FF                  	mov	ax,($P_No_Tag<<8)+$P_File_Spec
 31804 00004C31 E825F9                  	call	$P_Fill_Result		;AN000; 	buffer to file spec
 31805 00004C34 58                      	pop	ax			;AN000;
 31806                                  $P_Drv_Only_Exit:			;AN000; (tm14)
 31807 00004C35 C3                      	retn				;AN000;
 31808                                  
 31809                                  ;***********************************************************************
 31810                                  ; $P_FileSp_Chk
 31811                                  ;
 31812                                  ; Function:  Check if the input byte is one of file special characters
 31813                                  ;
 31814                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31815                                  ;	     AL = character code to be examineed
 31816                                  ;
 31817                                  ; Output:    ZF = 1 , AL is one of special characters
 31818                                  ;***********************************************************************
 31819                                  
 31820                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31821                                  $P_FileSp_Chk:
 31822 00004C36 53                      	push	bx			;AN000;
 31823 00004C37 51                      	push	cx			;AN000;
 31824                                  	;lea	bx,[cs:$P_FileSp_Char]	;AC034; special character table
 31825 00004C38 8D1E[C286]              	lea	bx,$P_FileSp_Char
 31826 00004C3C B90900                  	mov	cx,$P_FileSp_Len ; 9
 31827                                  	;mov	cx,9			;AN000; load length of it
 31828                                  $P_FileSp_Loop: 			;AN000;
 31829 00004C3F 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 31830 00004C42 7404                    	je	short $P_FileSp_Exit	;AN000;
 31831 00004C44 43                      	inc	bx			;AN000;
 31832 00004C45 E2F8                    	loop	$P_FileSp_Loop		;AN000;
 31833 00004C47 41                      	inc	cx			;AN000; reset ZF
 31834                                  $P_FileSp_Exit: 			;AN000;
 31835 00004C48 59                      	pop	cx			;AN000;
 31836 00004C49 5B                      	pop	bx			;AN000;
 31837 00004C4A C3                      	retn				;AN000;
 31838                                  
 31839                                  ;***********************************************************************
 31840                                  ; $P_Drive_Format;
 31841                                  ;
 31842                                  ; Function:  Check if the input string is valid drive only format.
 31843                                  ;	     And set the result buffer.
 31844                                  ;
 31845                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31846                                  ;	     ES:BX -> CONTROL block
 31847                                  ;
 31848                                  ; Output:    None
 31849                                  ;
 31850                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS
 31851                                  ;
 31852                                  ; Vars: $P_RC(W)
 31853                                  ;***********************************************************************
 31854                                  
 31855                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31856                                  $P_Drive_Format:
 31857 00004C4B 50                      	push	ax			;AN000;
 31858 00004C4C 52                      	push	dx			;AN000;
 31859 00004C4D 2E8A04                  	mov	al,[cs:si]		;AN000;
 31860 00004C50 08C0                    	or	al,al			;AN000; if null string
 31861 00004C52 7436                    	jz	short $P_Drv_Exit	;AN000; do nothing
 31862 00004C54 E81401                  	call	$P_Chk_DBCS		;AN000; is it leading byte ?
 31863 00004C57 722A                    	jc	short $P_Drv_Err	;AN000;
 31864                                  	;cmp	word [cs:si+1],3Ah ; $P_Colon  ; ':'
 31865 00004C59 2E837C013A              	cmp	word [cs:si+1],$P_Colon ;AN000; "d", ":", 0  ?
 31866 00004C5E 740D                    	je	short $P_DrvF00		;AN000;
 31867                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 31868                                  	;test	word [es:bx],10h	;AN000; colon can be ignored?
 31869 00004C60 26F60710                	test	byte [es:bx],$P_Ig_Colon ; 10h
 31870 00004C64 741D                    	jz	short $P_Drv_Err	;AN000;
 31871 00004C66 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; "d", 0  ?
 31872 00004C6B 7516                    	jne	short $P_Drv_Err	;AN000;
 31873                                  $P_DrvF00:				;AN000;
 31874 00004C6D 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case
 31875 00004C6F 3C61                    	cmp	al,"a" ; 61h            ;AN000; drive letter must
 31876 00004C71 7210                    	jb	short $P_Drv_Err	;AN000; in range of
 31877 00004C73 3C7A                    	cmp	al,"z" ; 7Ah            ;AN000; "a" - "z"
 31878 00004C75 770C                    	ja	short $P_Drv_Err	;AN000; if no, error
 31879 00004C77 2C60                    	sub	al,"a"-1  ; 60h         ;AN000; make text drive to binary drive
 31880 00004C79 88C2                    	mov	dl,al			;AN000; set
 31881                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000;    result
 31882                                  	;mov	al,$P_Drive ; 6		;AN000; 	 buffer
 31883                                  	; 05/04/2023
 31884 00004C7B B806FF                  	mov	ax,($P_No_Tag<<8)+$P_Drive ; 06FFh
 31885 00004C7E E8D8F8                  	call	$P_Fill_Result		;AN000; 	       to drive
 31886 00004C81 EB07                    	jmp	short $P_Drv_Exit	;AN000;
 31887                                  $P_Drv_Err:				;AN000;
 31888 00004C83 2EC706[F285]0900        	mov	word [cs:$P_RC],$P_Syntax
 31889                                  	;mov	word [cs:$P_RC],9	;AC034;
 31890                                  $P_Drv_Exit:				;AN000;
 31891 00004C8A 5A                      	pop	dx			;AN000;
 31892 00004C8B 58                      	pop	ax			;AN000;
 31893 00004C8C C3                      	retn				;AN000;
 31894                                  
 31895                                  ;***********************************************************************
 31896                                  ; $P_Skip_Delim;
 31897                                  ;
 31898                                  ; Function: Skip delimiters specified in the PARMS list, white space
 31899                                  ;	    and comma.
 31900                                  ;
 31901                                  ; Input:    DS:SI -> Command String
 31902                                  ;	    ES:DI -> Parameter List
 31903                                  ;
 31904                                  ; Output:   CY = 1 if the end of line encounterd
 31905                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 31906                                  ;	    AL = Last examineed character
 31907                                  ;
 31908                                  ; Use:	    $P_Chk_EOL, $P_Chk_Delim,
 31909                                  ;
 31910                                  ; Vars:     $P_Flags(R)
 31911                                  ;***********************************************************************
 31912                                  
 31913                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31914                                  
 31915                                  $P_Skip_Delim:				;AN000;
 31916                                  $P_Skip_Delim_Loop:			;AN000;
 31917 00004C8D AC                      	lodsb				;AN000;
 31918 00004C8E E81E00                  	call	$P_Chk_EOL		;AN000; is it EOL character ?
 31919 00004C91 7416                    	je	short $P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 31920                                  
 31921 00004C93 E84B00                  	call	$P_Chk_Delim		;AN000; is it one of delimiters ?
 31922 00004C96 7514                    	jne	short $P_Skip_Delim_NCY	;AN000; if no, exit w/ CY off
 31923                                  
 31924 00004C98 2EF606[FE85]20          	test	byte [cs:$P_Flags2],$P_Extra
 31925                                  	;test	byte [cs:$P_Flags2],20h ;AC034; extra delim or comma found ?
 31926 00004C9E 74ED                    	jz	short $P_Skip_Delim_Loop
 31927                                  					;AN000; if no, loop
 31928 00004CA0 2EF606[FE85]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ
 31929                                  	;;test	byte [cs:$P_Flags2],41h	;AC034; /x , or xxx=zzz , (tm08)
 31930                                  	;jz	short $P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 31931                                  	;dec	si ; *			;AN000; backup si for next call (tm08)
 31932                                  	;;jmp	short $P_Exit_At_Extra	;AN000; else exit w/ CY off
 31933                                  	; 05/04/2023
 31934 00004CA6 7505                    	jnz	short $P_Skip_Delim_Exit ; cf = 0
 31935                                  $P_Exit_At_Extra:			;AN000;
 31936                                  	; cf = 0
 31937                                  	;clc				;AN000; indicate extra delim
 31938 00004CA8 C3                      	retn				;AN000;
 31939                                  
 31940                                  $P_Skip_Delim_CY:			;AN000;
 31941 00004CA9 F9                      	stc				;AN000; indicate EOL
 31942 00004CAA EB01                    	jmp	short $P_Skip_Delim_Exit
 31943                                  					;AN000;
 31944                                  $P_Skip_Delim_NCY:			;AN000;
 31945 00004CAC F8                      	clc				;AN000; indicate non delim
 31946                                  $P_Skip_Delim_Exit:			;AN000; in this case, need
 31947 00004CAD 4E                      	dec	si ; *			;AN000;  backup index pointer
 31948 00004CAE C3                      	retn				;AN000;
 31949                                  	; 05/04/2023
 31950                                  ;$P_Exit_At_Extra:			;AN000;
 31951                                  	;clc				;AN000; indicate extra delim
 31952                                  	;retn				;AN000;
 31953                                  
 31954                                  ;***********************************************************************
 31955                                  ; $P_Chk_EOL;
 31956                                  ;
 31957                                  ; Function: Check if AL is one of End of Line characters.
 31958                                  ;
 31959                                  ; Input:    AL = character code
 31960                                  ;	    ES:DI -> Parameter List
 31961                                  ;
 31962                                  ; Output:   ZF = 1 if one of End of Line characters
 31963                                  ;***********************************************************************
 31964                                  
 31965                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31966                                  
 31967                                  $P_Chk_EOL:
 31968 00004CAF 53                      	push	bx			;AN000;
 31969 00004CB0 51                      	push	cx			;AN000;
 31970 00004CB1 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; Carriage return ?
 31971 00004CB3 7429                    	je	short $P_Chk_EOL_Exit 	;AN000;
 31972 00004CB5 3C00                    	cmp	al,$P_NULL ; 0		;AN000; zero ?
 31973 00004CB7 7425                    	je	short $P_Chk_EOL_Exit 	;AN000;
 31974 00004CB9 26807D0202              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL
 31975                                  	;cmp	byte [es:di+2],2	;AN000; EOL character specified ?
 31976 00004CBE 721E                    	jb	short $P_Chk_EOL_Exit 	;AN000;
 31977 00004CC0 31DB                    	xor	bx,bx			;AN000;
 31978 00004CC2 268A5D03                	mov	bl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 31979                                  	;mov	bl,[es:di+3]		;AN000; get length of delimiter list
 31980 00004CC6 83C304                  	add	bx,$P_Len_PARMS; 4 	;AN000; skip it
 31981 00004CC9 26803900                	cmp	byte [es:bx+di],$P_I_Use_Default
 31982                                  	;cmp	byte [es:bx+di],0	;AN000; No extra EOL character ?
 31983 00004CCD 740D                    	je	short $P_Chk_EOL_NZ	;AN000;
 31984 00004CCF 31C9                    	xor	cx,cx			;AN000; Get number of extra chcracter
 31985 00004CD1 268A09                  	mov	cl,[es:bx+di]		;AN000;
 31986                                  $P_Chk_EOL_Loop:			;AN000;
 31987 00004CD4 43                      	inc	bx			;AN000;
 31988 00004CD5 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 31989 00004CD8 7404                    	je	short $P_Chk_EOL_Exit 	;AN000;
 31990 00004CDA E2F8                    	loop	$P_Chk_EOL_Loop 	;AN000;
 31991                                  $P_Chk_EOL_NZ:				;AN000;
 31992 00004CDC 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; reset ZF
 31993                                  $P_Chk_EOL_Exit:			;AN000;
 31994 00004CDE 59                      	pop	cx			;AN000;
 31995 00004CDF 5B                      	pop	bx			;AN000;
 31996 00004CE0 C3                      	retn				;AN000;
 31997                                  
 31998                                  ;***********************************************************************
 31999                                  ; $P_Chk_Delim;
 32000                                  ;
 32001                                  ; Function: Check if AL is one of delimiter characters.
 32002                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 32003                                  ;	    blanks.
 32004                                  ;
 32005                                  ; Input:    AL = character code
 32006                                  ;	    DS:SI -> Next Character
 32007                                  ;	    ES:DI -> Parameter List
 32008                                  ;
 32009                                  ; Output:   ZF = 1 if one of delimiter characters
 32010                                  ;	    SI points to the next character
 32011                                  ; Vars:  $P_Terminator(W), $P_Flags(W)
 32012                                  ;***********************************************************************
 32013                                  
 32014                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32015                                  	; 12/08/2024
 32016                                  $P_Chk_Delim:
 32017 00004CE1 53                      	push	bx			;AN000;
 32018 00004CE2 51                      	push	cx			;AN000;
 32019 00004CE3 2EC606[F885]20          	mov	byte [cs:$P_Terminator],$P_Space ; 20h
 32020                                  					;AC034; Assume terminated by space
 32021 00004CE9 2E8026[FE85]DF          	and	byte [cs:$P_Flags2],0FFh-$P_Extra ; 0DFh
 32022                                  					;AC034;
 32023 00004CEF 3C20                    	cmp	al,$P_Space ; 20h ; ' '	;AN000; Space ?
 32024 00004CF1 7434                    	je	short $P_Chk_Delim_Exit	;AN000;
 32025                                  
 32026 00004CF3 3C09                    	cmp	al,$P_TAB ; 09h		;AN000; TAB ?
 32027 00004CF5 7430                    	je	short $P_Chk_Delim_Exit	;AN000;
 32028                                  
 32029 00004CF7 3C2C                    	cmp	al,$P_Comma  ; ',' 	;AN000; Comma ?
 32030 00004CF9 742F                    	je	short $P_Chk_Delim_Exit0
 32031                                  					;AN000;
 32032                                  $P_Chk_Delim00: 			;AN000;
 32033 00004CFB 3C20                    	cmp	al,20h ; $P_DBSP1	;AN000; 1st byte of DBCS Space ?
 32034 00004CFD 750C                    	jne	short $P_Chk_Delim01	;AN000;
 32035 00004CFF 803C20                  	cmp	byte [si],20h ; $P_DBSP2
 32036                                  					;AN000; 2nd byte of DBCS Space ?
 32037 00004D02 7507                    	jne	short $P_Chk_Delim01	;AN000;
 32038 00004D04 B020                    	mov	al,$P_Space ; 20h	;AN000;
 32039 00004D06 46                      	inc	si			;AN000; make si point to next character
 32040 00004D07 38C0                    	cmp	al,al			;AN000; Set ZF
 32041 00004D09 EB1C                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 32042                                  
 32043                                  $P_Chk_Delim01: 			;AN000;
 32044                                  	;cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_Delim
 32045 00004D0B 26807D0201              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],1
 32046                                  	;cmp	byte [es:di+2],1	;AN000; delimiter character specified ?
 32047 00004D10 7215                    	jb	short $P_Chk_Delim_Exit	;AN000;
 32048                                  
 32049 00004D12 31C9                    	xor	cx,cx			;AN000;
 32050 00004D14 268A4D03                	mov	cl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 32051                                  	;mov	cl,[esi:di+3]		;AN000; get length of delimiter list
 32052                                  	;or	cx,cx			;AN000; No extra Delim character ?
 32053                                  	;jz	short $P_Chk_Delim_NZ	;AN000;
 32054                                  	; 12/08/2024 - PCDOS 7.1 COMMAND.COM
 32055 00004D18 E30B                    	jcxz	$P_Chk_Delim_NZ
 32056                                  
 32057 00004D1A BB0300                  	mov	bx,$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 32058                                  $P_Chk_Delim_Loop:			;AN000;
 32059 00004D1D 43                      	inc	bx			;AN000;
 32060 00004D1E 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 32061 00004D21 7407                    	je	short $P_Chk_Delim_Exit0
 32062                                  					;AN000;
 32063 00004D23 E2F8                    	loop	$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 32064                                  
 32065                                  $P_Chk_Delim_NZ:			;AN000;
 32066 00004D25 3C20                    	cmp	al,$P_Space ; 20h	;AN000; reset ZF
 32067                                  $P_Chk_Delim_Exit:			;AN000;
 32068 00004D27 59                      	pop	cx			;AN000;
 32069 00004D28 5B                      	pop	bx			;AN000;
 32070 00004D29 C3                      	retn				;AN000;
 32071                                  
 32072                                  $P_Chk_Delim_Exit0:			;AN000;
 32073 00004D2A 2EA2[F885]              	mov	[cs:$P_Terminator],al	;AC034; keep terminated delimiter
 32074 00004D2E 2EF606[FE85]01          	test	byte [cs:$P_Flags2],$P_equ
 32075                                  	;test	byte [cs:$P_Flags2],1	;AN027;AC034;; if terminating a key=
 32076 00004D34 7506                    	jnz	short $P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 32077                                  
 32078 00004D36 2E800E[FE85]20          	or	byte [cs:$P_Flags2],$P_Extra ; 20h
 32079                                  	;or	byte [cs:$P_Flags2],20h	;AC034; flag terminated extra delimiter or comma
 32080                                  $P_No_Set_Extra:			;AN027;
 32081 00004D3C 38C0                    	cmp	al,al			;AN000; set ZF
 32082 00004D3E EBE7                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 32083                                  
 32084                                  ;***********************************************************************
 32085                                  ; $P_Chk_Switch;
 32086                                  ;
 32087                                  ; Function: Check if AL is the switch character not in first position of
 32088                                  ;	    $P_STRING_BUF
 32089                                  ;
 32090                                  ; Input:    AL = character code
 32091                                  ;	    BX = current pointer within $P_String_Buf
 32092                                  ;	    SI =>next char on command line (following the one in AL)
 32093                                  ;
 32094                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 32095                                  ;		 position, and has no chance of being part of a date string,
 32096                                  ;		 i.e. should be treated as a delimiter.
 32097                                  ;
 32098                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 32099                                  ;		 position, or is a slash but may be part of a date string, i.e.
 32100                                  ;		 should not be treated as a delimiter.
 32101                                  ;
 32102                                  ; Vars:  $P_Terminator(W)
 32103                                  ;
 32104                                  ; Use:	 $P_0099
 32105                                  ;***********************************************************************
 32106                                  
 32107                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32108                                  
 32109                                  $P_Chk_Switch:
 32110                                  	; 18/04/2023
 32111 00004D40 8D2E[0786]              	lea	bp,$P_STRING_BUF	;AN020;AC034; BP=OFFSET of $P_String_Buf even in group addressing
 32112                                  
 32113 00004D44 39EB                    	cmp	bx,bp			;AN000;
 32114 00004D46 7418                    	je	short $P_STRUC_L2	;AN000;
 32115                                  
 32116 00004D48 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 32117 00004D4A 7512                    	jne	short $P_STRUC_L5	;AN000;
 32118                                  
 32119 00004D4C F9                      	stc				;AN020;not in first position and is slash, now see if might be in date string
 32120 00004D4D 50                      	push	ax			;AN020;save input char
 32121 00004D4E 2E8A47FF                	mov	al,[cs:bx-1]		;AN026;AL=char before the current char
 32122 00004D52 E801FB                  	call	$P_0099 		;AN020;return carry set if not numeric
 32123 00004D55 7205                    	jc	short $P_STRUC_L7	;AN000;
 32124                                  
 32125 00004D57 8A04                    	mov	al,[si]			;AN020;AL=char after the current char
 32126 00004D59 E8FAFA                  	call	$P_0099			;AN020;return carry set if not numeric
 32127                                  $P_STRUC_L7:				;AN000;
 32128 00004D5C 58                      	pop	ax			;AN020;restore AL to input char
 32129                                  	;jmp	short $P_STRUC_L1	;AN000;
 32130                                  	; 18/04/2023
 32131 00004D5D C3                      	retn
 32132                                  
 32133                                  $P_STRUC_L5:				;AN000;
 32134 00004D5E F8                      	clc				;AN020;not a slash
 32135                                  	;jmp	short $P_STRUC_L1	;AN000;
 32136                                  	 ;18/04/2023
 32137 00004D5F C3                      	retn
 32138                                  
 32139                                  $P_STRUC_L2:				;AN000;
 32140 00004D60 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 32141                                  	;jne	short $P_STRUC_L12	;AN000;
 32142                                  	; 18/04/2023
 32143 00004D62 75FA                    	jne	short $P_STRUC_L5
 32144                                  
 32145 00004D64 2E800E[FE85]40          	or	byte [cs:$P_Flags2],$P_SW
 32146                                  	;or	byte [cs:$P_Flags2],40h	;AN020;AC034;;could be valid switch, first char and is slash
 32147                                  	; 18/04/2023
 32148                                  ;$P_STRUC_L12:				;AN000;
 32149                                  	;clc				;AN020;CF=0 indicating first char
 32150                                  $P_STRUC_L1:				;AN000;
 32151 00004D6A C3                      	retn				;AN000;
 32152                                  
 32153                                  ;**************************************************************************
 32154                                  ; $P_Chk_DBCS:
 32155                                  ;
 32156                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 32157                                  ;
 32158                                  ;  Input:
 32159                                  ;	  AL	= Code to be examineed
 32160                                  ;
 32161                                  ;  Output:
 32162                                  ;	  If CF is on then a lead byte of DBCS
 32163                                  ;
 32164                                  ; Use: INT 21h w/AH=63
 32165                                  ;
 32166                                  ; Vars:  $P_DBCSEV_Seg(RW), $P_DBCSEV_Off(RW)
 32167                                  ;***************************************************************************
 32168                                  
 32169                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32170                                  	; 12/08/2024
 32171                                  $P_Chk_DBCS:
 32172 00004D6B 1E                      	push	ds			;AN000;
 32173 00004D6C 56                      	push	si			;AN000;
 32174 00004D6D 53                      	push	bx			;AN000; (tm11)
 32175 00004D6E 2E833E[FB85]00          	cmp	word [cs:$P_DBCSEV_SEG],0
 32176                                  					;AC034; ALREADY SET ?
 32177 00004D74 7527                    	jne	short $P_DBCS00		;AN000;
 32178 00004D76 50                      	push	ax			;AN000;
 32179 00004D77 1E                      	push	ds			;AN000; (tm11)
 32180 00004D78 51                      	push	cx			;AN000;
 32181 00004D79 52                      	push	dx			;AN000;
 32182 00004D7A 57                      	push	di			;AN000;
 32183 00004D7B 55                      	push	bp			;AN000;
 32184 00004D7C 06                      	push	es			;AN000;
 32185 00004D7D 31F6                    	xor	si,si			;AN000;
 32186 00004D7F 8EDE                    	mov	ds,si			;AN000;
 32187                                  	;mov	ax,$P_DOS_GetEV 	;AN000; GET DBCS EV CALL
 32188 00004D81 B80063                  	mov	ax,6300h
 32189 00004D84 CD21                    	int	21h			;AN000;
 32190 00004D86 8CDB                    	mov	bx,ds			;AN000; (tm11)
 32191 00004D88 09DB                    	or	bx,bx			;AN000; (tm11)
 32192 00004D8A 07                      	pop	es			;AN000;
 32193 00004D8B 5D                      	pop	bp			;AN000;
 32194 00004D8C 5F                      	pop	di			;AN000;
 32195 00004D8D 5A                      	pop	dx			;AN000;
 32196 00004D8E 59                      	pop	cx			;AN000;
 32197 00004D8F 1F                      	pop	ds			;AN000; (tm11)
 32198 00004D90 58                      	pop	ax			;AN000;
 32199 00004D91 7424                    	jz	short $P_NON_DBCS	;AN000;
 32200                                  $P_DBCS02:				;AN000;
 32201 00004D93 2E8936[F985]            	mov	[cs:$P_DBCSEV_OFF],si	;AC034; save EV offset
 32202 00004D98 2E891E[FB85]            	mov	[cs:$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 32203                                  $P_DBCS00:				;AN000;
 32204                                  	;mov	si,[cs:$P_DBCSEV_OFF]	;AC034; load EV offset
 32205                                  	;mov	ds,[cs:$P_DBCSEV_SEG]	;AC034; and segment
 32206                                  	; 12/08/2024 - PCDOS 7.1 COMMAND.COM
 32207 00004D9D 2EC536[F985]            	lds	si,[cs:$P_DBCSEV_OFF]
 32208                                  $P_DBCS_LOOP:				;AN000;
 32209 00004DA2 833C00                  	cmp	word [si],0 		;AN000; zero vector ?
 32210 00004DA5 7410                    	je	short $P_NON_DBCS	;AN000; then exit
 32211 00004DA7 3A04                    	cmp	al,[si] 		;AN000;
 32212 00004DA9 7208                    	jb	short $P_DBCS01		;AN000; Check if AL is in
 32213 00004DAB 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 32214 00004DAE 7703                    	ja	short $P_DBCS01		;AN000;      the vector
 32215 00004DB0 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 32216 00004DB1 EB04                    	jmp	short $P_DBCS_EXIT	;AN000;
 32217                                  $P_DBCS01:				;AN000;
 32218 00004DB3 46                      	inc	si			;AC035; add '2' to
 32219 00004DB4 46                      	inc	si			;AC035;  SI reg
 32220                                  					;AN000; get next vector
 32221 00004DB5 EBEB                    	jmp	short $P_DBCS_LOOP	;AN000; loop until zero vector found
 32222                                  
 32223                                  $P_NON_DBCS:				;AN000;
 32224                                  	; 18/04/2023
 32225                                  	; cf=0
 32226                                  	;clc				;AN000; indicate SBCS
 32227                                  $P_DBCS_EXIT:				;AN000;
 32228 00004DB7 5B                      	pop	bx			;AN000; (tm11)
 32229 00004DB8 5E                      	pop	si			;AN000;
 32230 00004DB9 1F                      	pop	ds			;AN000;
 32231 00004DBA C3                      	retn				;AN000;
 32232                                  
 32233                                  ;============================================================================
 32234                                  ; TPARSE.ASM, MSDOS 6.0, 1991
 32235                                  ;============================================================================
 32236                                  ; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32237                                  
 32238                                  ; ****************************************************************
 32239                                  ; *
 32240                                  ; * ROUTINE:	 CMD_PARSE
 32241                                  ; *
 32242                                  ; * FUNCTION:	 Interface for transient COMMAND to invoke
 32243                                  ; *		 SYSPARSE.
 32244                                  ; *
 32245                                  ; * INPUT:	 inputs to SYSPARSE
 32246                                  ; *
 32247                                  ; * OUTPUT:	 outputs from SYSPARSE
 32248                                  ; *
 32249                                  ; ****************************************************************
 32250                                  
 32251                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32252                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4FF7h
 32253                                  ;cmd_parse:
 32254                                  	;call	sysparse		;AN000;
 32255                                  	;retn				;AN000;
 32256                                  	; 06/04/2023
 32257                                  	;jmp	sysparse
 32258                                  
 32259                                  append_parse:
 32260 00004DBB E85DF5                  	call	sysparse		;AN010;
 32261 00004DBE CB                      	retf				;AN010;
 32262                                  
 32263                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32264                                  %if 0
 32265                                  
 32266                                  ;============================================================================
 32267                                  ; NPRINTF.ASM, PRINTF.ASM, MSDOS 3.3, 1987
 32268                                  ;============================================================================
 32269                                  ; 30/09/2018 - Retro DOS v3.0
 32270                                  
 32271                                  ; BREAK	<Message Printing Routine>
 32272                                  
 32273                                  ;
 32274                                  ;	MSDOS V3.00 PRINT
 32275                                  ;
 32276                                  ;	Message Printing Routine
 32277                                  ;
 32278                                  
 32279                                  ;PRINTF.ASM (MSDOS 3.3, LIBC)
 32280                                  ;
 32281                                  ;TITLE   PRINTF ROUTINE FOR MS-DOS
 32282                                  ;
 32283                                  ; PRINTF(Control String, arg1, arg2,...,argn-1,argn)
 32284                                  ;
 32285                                  ; Characters are output to PFHandle according to the
 32286                                  ; specifications contained in the Control String.
 32287                                  ;
 32288                                  ; The conversion characters are as follow:
 32289                                  ;
 32290                                  ;               %c - output the next argument as a character
 32291                                  ;               %s - output the next argument as a string
 32292                                  ;               %x - output the next argument as a hexidecimal number
 32293                                  ;                    using abcedf
 32294                                  ;               %X - output the next argument as a hexidecimal number
 32295                                  ;                    using ABCDEF
 32296                                  ;               %d - output the next argument as a decimal number
 32297                                  ;
 32298                                  ;
 32299                                  ; Other format specifiers that may precede the conversion character are:
 32300                                  ;
 32301                                  ;               - (minus sign) - causes the field to be left-adjusted
 32302                                  ;               + (plus sign)  - causes the field to be right-adjusted (default)
 32303                                  ;               n - digit specifing the minimum field width (default to 1)
 32304                                  ;               L - specifing a long integer
 32305                                  ;
 32306                                  ;   On entry to PRINTF the stack contains the return address and a pointer
 32307                                  ;   to an argument list.
 32308                                  ;
 32309                                  ;   ____________________
 32310                                  ;   |   Ret Addr       |      <= SP
 32311                                  ;   --------------------
 32312                                  ;   |  Ptr to Arg List |
 32313                                  ;   --------------------
 32314                                  ;
 32315                                  ;   And the argument list contains the following:
 32316                                  ;
 32317                                  ;       String_ptr                  (a pointer to the control string)
 32318                                  ;       Arg 1
 32319                                  ;       Arg 2
 32320                                  ;         .
 32321                                  ;         .
 32322                                  ;         .
 32323                                  ;       Arg n-1
 32324                                  ;       Arg n
 32325                                  ;
 32326                                  ;   If the argument is a %s or %c the arg contains a pointer to the string
 32327                                  ;   or character.
 32328                                  ;
 32329                                  ;   The arguments are used in one-to-one correspondence to % specifiers.
 32330                                  
 32331                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 34E0h
 32332                                  
 32333                                  ; =============== S U B	R O U T	I N E =======================================
 32334                                  
 32335                                  PRINTF_INIT:
 32336                                  	call	STD_PRINTF
 32337                                  	retf
 32338                                  
 32339                                  ; =============== S U B	R O U T	I N E =======================================
 32340                                  
 32341                                  PRINTF_CRLF:
 32342                                  	call	STD_PRINTF
 32343                                  	;call	CRLF2
 32344                                  	;retn
 32345                                  	; 07/04/2023
 32346                                  	jmp	CRLF2
 32347                                  
 32348                                  ; =============== S U B	R O U T	I N E =======================================
 32349                                  
 32350                                  STD_EPRINTF:
 32351                                  	mov	word [cs:PRINTF_HANDLE],2
 32352                                  	jmp	short new_printf
 32353                                  
 32354                                  ; =============== S U B	R O U T	I N E =======================================
 32355                                  
 32356                                  STD_PRINTF:
 32357                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 34F4h
 32358                                  
 32359                                  	mov	word [cs:PRINTF_HANDLE],1
 32360                                  NEW_PRINTF:				;Save the callers' registers
 32361                                  	cld
 32362                                  	push	dx
 32363                                  	push	bp
 32364                                  	mov	bp,sp
 32365                                  	push	cx
 32366                                  	push	bx
 32367                                  	push	ax
 32368                                  	push	di
 32369                                  	push	si
 32370                                  	push	es
 32371                                  	push	ds
 32372                                  	push	cs
 32373                                  	pop	es		;ES points to Printf segment
 32374                                  	mov	di,PRINTF_BUF	;DI points to the output buffer
 32375                                  	mov	bp,[bp+2]  ; dx ;BP points to the argument list
 32376                                  	;mov	si,[ds:bp+0]	;SI points to the control string
 32377                                  	mov	si,[ds:bp] ; bp
 32378                                  	add	bp,2
 32379                                  	xor	bx,bx
 32380                                  	call	CLEAR_FLAGS	; initialize the world
 32381                                  
 32382                                  GET_CHAR:
 32383                                  	lodsb			;Get a character
 32384                                  	cmp	al,'%'		;Is it a conversion specifier?
 32385                                  	jz	short CONV_CHAR	;Yes - find out which one
 32386                                  	or	al,al		;Is it the end of the control string?
 32387                                  	jz	short PRINTF_DONE ;Yes - then we're done
 32388                                  PRINTF_PERCENT:				
 32389                                  	call	OUTCHR		;Otherwise store the character
 32390                                  	jmp	short GET_CHAR	;And go get another
 32391                                  
 32392                                  PRINTF_DONE:
 32393                                  	call	FLUSH
 32394                                  	pop	ds
 32395                                  	pop	es
 32396                                  	pop	si
 32397                                  	pop	di
 32398                                  	pop	ax
 32399                                  	pop	bx
 32400                                  	pop	cx
 32401                                  	pop	bp
 32402                                  	pop	dx
 32403                                  	retn
 32404                                  
 32405                                  CONV_CHAR:
 32406                                  	mov	byte [cs:PRINTF_LEFT],0
 32407                                  
 32408                                  NXT_CONV_CHAR:	
 32409                                  	;Look for any format specifiers preceeding the conversion character
 32410                                  	lodsb
 32411                                  	cmp	al,'%'			;Just print the %
 32412                                  	jz	short PRINTF_PERCENT
 32413                                  	cmp	al,[cs:CHAR_SUB] ; "-"	;Right justify the field	
 32414                                  	jz	short LEFT_ADJ
 32415                                  	cmp	al,[cs:PLUS_CHR] ; "+"	;Left justify the field
 32416                                  	jz	short CONV_CHAR
 32417                                  	cmp	al,[cs:CHAR_L]	 ; "L"	;Is it a long integer
 32418                                  	jz	short LONG_INT
 32419                                  	cmp	al,[cs:char_l]	 ; "l"		
 32420                                  	jz	short LONG_INT
 32421                                  	cmp	al,'0'			;Is it a precision specification
 32422                                  	jb	short LOOK_CONV_CHAR
 32423                                  	cmp	al,'9'
 32424                                  	ja	short LOOK_CONV_CHAR
 32425                                  	cmp	al,'0'
 32426                                  	jnz	short NOT_PAD
 32427                                  	cmp	word [cs:PRINTF_WIDTH],0
 32428                                  	jnz	short NOT_PAD
 32429                                  	mov	ah,'0'
 32430                                  	mov	[cs:PAD_CHAR],ah
 32431                                  NOT_PAD:					;Adjust decimal place on precision
 32432                                  	push	ax
 32433                                  	mov	ax,[cs:PRINTF_WIDTH]
 32434                                  	mov	cx,10
 32435                                  	mul	cx
 32436                                  	pop	dx
 32437                                  	xor	dh,dh
 32438                                  	sub	dl,'0'
 32439                                  	add	ax,dx
 32440                                  	mov	[cs:PRINTF_WIDTH],ax	;And save the total
 32441                                  	jmp	short NXT_CONV_CHAR
 32442                                  
 32443                                  LEFT_ADJ:
 32444                                  	mov	byte [cs:PRINTF_LEFT],1
 32445                                  	jmp	short NXT_CONV_CHAR
 32446                                  
 32447                                  LONG_INT:
 32448                                  	or	byte [cs:PRINTF_LONG],1
 32449                                  	jmp	short NXT_CONV_CHAR
 32450                                  
 32451                                  LOOK_CONV_CHAR:
 32452                                  	and	al,0DFh
 32453                                  	cmp	al,[cs:CHAR_X]	 ; "X"
 32454                                  	jz	short HEX_UP
 32455                                  	cmp	al,[cs:CHAR_D]	 ; "D"
 32456                                  	jz	short DECIMAL
 32457                                  	cmp	al,[cs:CHAR_C]	 ; "C"
 32458                                  	jz	short C_PUT_CHAR
 32459                                  	cmp	al,[cs:CHAR_S]	 ; "S"
 32460                                  	jz	short S_PUT_STRG
 32461                                  	call	CLEAR_FLAGS
 32462                                  	jmp	GET_CHAR
 32463                                  
 32464                                  HEX_UP:
 32465                                  	mov	word [cs:PRINTF_BASE],16 ;Hex conversion
 32466                                  	jmp	short CONV_TO_NUM
 32467                                  DECIMAL:
 32468                                  	mov	word [cs:PRINTF_BASE],10 ;Decimal conversion
 32469                                  	jmp	short CONV_TO_NUM
 32470                                  
 32471                                  C_PUT_CHAR:
 32472                                  	call	NEXT_CHRS
 32473                                  	mov	al,dl
 32474                                  	call	OUTCHR
 32475                                  	call	CLEAR_FLAGS
 32476                                  	jmp	GET_CHAR
 32477                                  
 32478                                  S_PUT_STRG:
 32479                                  	push	si			;Save pointer to control string
 32480                                  	call	NEXT_CHRS
 32481                                  	mov	si,dx
 32482                                  S_PUT_1:
 32483                                  	mov	cx,[cs:PRINTF_WIDTH]
 32484                                  	or	cx,cx
 32485                                  	jz	short S_PUT_2
 32486                                  	cmp	byte [cs:PRINTF_LEFT],0
 32487                                  	jnz	short S_PUT_2
 32488                                  	call	PAD_STRING
 32489                                  S_PUT_2:
 32490                                  	push	si
 32491                                  S_PUT_3:
 32492                                  	lodsb
 32493                                  	or	al,al
 32494                                  	jz	short S_PUT_4
 32495                                  	call	OUTCHR			;Put it into our buffer
 32496                                  	jmp	short S_PUT_3
 32497                                  S_PUT_4:
 32498                                  	pop	si
 32499                                  	cmp	byte [cs:PRINTF_LEFT],0
 32500                                  	jz	short C_S_END
 32501                                  	mov	cx,[cs:PRINTF_WIDTH]
 32502                                  	or	cx,cx
 32503                                  	jz	short C_S_END
 32504                                  	call	PAD_STRING
 32505                                  C_S_END:
 32506                                  	pop	si			;Restore control string pointer
 32507                                  	call	CLEAR_FLAGS
 32508                                  	jmp	GET_CHAR		;Go get another character	
 32509                                  
 32510                                  
 32511                                  ; =============== S U B	R O U T	I N E =======================================
 32512                                  
 32513                                  PAD_STRING:
 32514                                  	xor	dx,dx
 32515                                  	push	si
 32516                                  
 32517                                  COUNT_LOOP:
 32518                                  	lodsb
 32519                                  	or	al,al
 32520                                  	jz	short COUNT_DONE
 32521                                  	inc	dx
 32522                                  	jmp	short COUNT_LOOP
 32523                                  
 32524                                  COUNT_DONE:
 32525                                  	pop	si
 32526                                  	sub	cx,dx
 32527                                  	jbe	short COUNT_RET
 32528                                  	call	PAD
 32529                                  
 32530                                  COUNT_RET:
 32531                                  	retn
 32532                                  
 32533                                  ; ---------------------------------------------------------------------------
 32534                                  
 32535                                  CONV_TO_NUM:
 32536                                  	call	NEXT_CHRS
 32537                                  	mov	ax,dx
 32538                                  	xor	dx,dx
 32539                                  	cmp	byte [cs:PRINTF_LONG],0 
 32540                                  			;Is this is a short or long integer?
 32541                                  	jz	short NOT_LONG_INT
 32542                                  	call	NEXT_CHRS
 32543                                  
 32544                                  NOT_LONG_INT:
 32545                                  	push	bx
 32546                                  	push	si
 32547                                  	mov	si,[cs:PRINTF_BASE]
 32548                                  	mov	cx,[cs:PRINTF_WIDTH]
 32549                                  	call	PNUM
 32550                                  	pop	si
 32551                                  	pop	bx
 32552                                  	call	PAD
 32553                                  	call	CLEAR_FLAGS
 32554                                  	jmp	GET_CHAR
 32555                                  
 32556                                  
 32557                                  ; =============== S U B	R O U T	I N E =======================================
 32558                                  
 32559                                  PNUM:
 32560                                  	dec	cx
 32561                                  	push	ax
 32562                                  	mov	ax,dx
 32563                                  	xor	dx,dx
 32564                                  	div	si
 32565                                  	mov	bx,ax
 32566                                  	pop	ax
 32567                                  	div	si
 32568                                  	xchg	bx,dx
 32569                                  	push	ax
 32570                                  	or	ax,dx
 32571                                  	pop	ax
 32572                                  	jz	short DO_PAD
 32573                                  	push	bx
 32574                                  	call	PNUM
 32575                                  	pop	bx
 32576                                  	jmp	short REM
 32577                                  
 32578                                  DO_PAD:
 32579                                  	cmp	byte [cs:PRINTF_LEFT],0
 32580                                  	jnz	short REM
 32581                                  	call	PAD
 32582                                  REM:
 32583                                  	cmp	bl,10
 32584                                  	jb	short NOT_HEX
 32585                                  	add	bx,6
 32586                                  NOT_HEX:
 32587                                  	mov	al,byte [cs:PRINTF_TABLE+bx] ; "0123456789ABCDEF"
 32588                                  	push	cx
 32589                                  	call	OUTCHR
 32590                                  	pop	cx
 32591                                  	retn
 32592                                  
 32593                                  ; =============== S U B	R O U T	I N E =======================================
 32594                                  
 32595                                  PAD:
 32596                                  	or	cx,cx
 32597                                  	jle	short PAD_DONE
 32598                                  	mov	al,[cs:PAD_CHAR]
 32599                                  PAD_LOOP:
 32600                                  	push	cx
 32601                                  	call	OUTCHR
 32602                                  	pop	cx
 32603                                  	loop	PAD_LOOP
 32604                                  PAD_DONE:
 32605                                  	retn
 32606                                  
 32607                                  ; =============== S U B	R O U T	I N E =======================================
 32608                                  
 32609                                  OUTCHR:
 32610                                  	stosb
 32611                                  	cmp	di,PRINTF_BUF_END ; SRCXNAME
 32612                                  	je	short FLUSH
 32613                                  OUTCHR_RETN:
 32614                                  	retn
 32615                                  
 32616                                  ; =============== S U B	R O U T	I N E =======================================
 32617                                  
 32618                                  FLUSH:
 32619                                  	mov	cx,PRINTF_BUF
 32620                                  	xchg	cx,di
 32621                                  	sub	cx,di
 32622                                  	jz	short OUTCHR_RETN
 32623                                  WRITE_CHARS:
 32624                                  	push	bx
 32625                                  	mov	bx,[cs:PRINTF_HANDLE]
 32626                                  	push	ds
 32627                                  	push	cs
 32628                                  	pop	ds
 32629                                  	mov	dx,PRINTF_BUF
 32630                                  	mov	ah,Write ; 40h
 32631                                  	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 32632                                  				; BX = file handle, CX = number	of bytes to write,
 32633                                  				; DS:DX -> buffer
 32634                                  	jnb	short FOOB2_1
 32635                                  	call	GET_EXT_ERR_NUMBER
 32636                                  	cmp	ax,6
 32637                                  	jz	short FOOB2_4
 32638                                  	jmp	short FOOB2_2
 32639                                  
 32640                                  FOOB2_1:
 32641                                  	cmp	cx,ax
 32642                                  	jz	short FOOB2_4
 32643                                  FOOB2_2:
 32644                                  	mov	bx,dx
 32645                                  	add	bx,ax
 32646                                  	cmp	byte [bx],1Ah
 32647                                  	jz	short FOOB2_4
 32648                                  	pop	ds
 32649                                  	pop	bx
 32650                                  	mov	es,[cs:RESSEG]
 32651                                  	mov	dx,NOSPACEPTR
 32652                                  	test	byte [es:PIPEFLAG],0FFh
 32653                                  	jz	short PRINT_ERR_EXIT
 32654                                  	call	PIPEOFF
 32655                                  	mov	dx,PIPEEMESPTR
 32656                                  PRINT_ERR_EXIT:	
 32657                                  	jmp	CERROR
 32658                                  
 32659                                  FOOB2_4:
 32660                                  	pop	ds
 32661                                  	pop	bx
 32662                                  	retn
 32663                                  
 32664                                  ; =============== S U B	R O U T	I N E =======================================
 32665                                  
 32666                                  NEXT_CHRS:
 32667                                  	push	si		;Save pointer to control string
 32668                                  	mov	si,bx		;Get index into argument list
 32669                                  	add	bx,2		;Increment the index
 32670                                  	mov	si,[ds:bp+si]	; Get pointer to next argument
 32671                                  	mov	dx,[si]		; Get (address of the) next argument			
 32672                                  	pop	si
 32673                                  	retn
 32674                                  
 32675                                  ; =============== S U B	R O U T	I N E =======================================
 32676                                  
 32677                                  CLEAR_FLAGS:
 32678                                  	xor	ax,ax
 32679                                  	mov	[cs:PRINTF_LEFT],al	;Reset justifing flag
 32680                                  	mov	[cs:PRINTF_LONG],al	;Reset long flag
 32681                                  	mov	[cs:PRINTF_WIDTH],ax	;Reinitialize width to 0
 32682                                  	mov	al,' '			
 32683                                  	mov	[cs:PAD_CHAR],al 	;Reset padding character
 32684                                  	retn
 32685                                  
 32686                                  ; ---------------------------------------------------------------------------
 32687                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3729h
 32688                                  
 32689                                  	; times 7 db 0
 32690                                  
 32691                                  %endif
 32692                                  
 32693                                  ;============================================================================
 32694                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 32695                                  ;============================================================================
 32696                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32697                                  
 32698                                  ; ----------------------------
 32699                                  ; MSDOS 6.0, MSGSERV.ASM, 1991
 32700                                  ; ----------------------------
 32701                                  
 32702                                  ;; Replacable parameters are described by a sublist structure
 32703                                  
 32704                                  struc $M_SUBLIST_STRUC		;;AN000;;
 32705 00000000 ??                       .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 32706 00000001 ??                       .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 32707 00000002 ????????                 .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 32708 00000006 ??                       .$M_S_ID:	resb 1		;;AN000;; n of %n
 32709 00000007 ??                       .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 32710 00000008 ??                       .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 32711 00000009 ??                       .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 32712 0000000A ??                       .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 32713                                  endstruc
 32714                                  
 32715                                  ; ---------------------------------------------------------------------------
 32716                                  ; ---------------------------------------------------------------------------
 32717                                  
 32718                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32719                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 4FFFh
 32720                                  
 32721                                  Printf_Init:
 32722 00004DBF E80F00                  	call	std_printf
 32723 00004DC2 CB                      	retf
 32724                                  
 32725                                  Printf_Crlf:
 32726 00004DC3 E80B00                  	call	std_printf
 32727                                  	;call	CRLF2
 32728                                  	;retn
 32729                                  	; 07/04/2023
 32730 00004DC6 E908D8                  	jmp	CRLF2
 32731                                  
 32732                                  
 32733                                  ;****************************************************************
 32734                                  ;*
 32735                                  ;* ROUTINE:	STD_PRINTF/STD_EPRINTF
 32736                                  ;*
 32737                                  ;* FUNCTION:	Set up to print out a message using SYSDISPMSG.
 32738                                  ;*		Set up substitutions if utility message.  Make
 32739                                  ;*		sure any changes to message variables in TDATA
 32740                                  ;*		are reset to avoid reloading the transient.
 32741                                  ;*
 32742                                  ;* INPUT:	Msg_Disp_Class	-  set to message class
 32743                                  ;*		Msg_Cont_Flag	-  set to control flags
 32744                                  ;*		DS	points to transient segment
 32745                                  ;*
 32746                                  ;*		if utility message:
 32747                                  ;*		DX	points to a block with message number
 32748                                  ;*			(word), number of substitutions (byte),
 32749                                  ;*			followed by substitution list if there
 32750                                  ;*			are substitutions.  If substitutions
 32751                                  ;*			are not in transient segment they must
 32752                                  ;*			be set.
 32753                                  ;*		else
 32754                                  ;*		AX	set to message number
 32755                                  ;*
 32756                                  ;* OUTPUT:	none
 32757                                  ;*
 32758                                  ;****************************************************************
 32759                                  
 32760                                  std_eprintf:
 32761 00004DC9 C706[D187]0200          	mov	word [PRINTF_HANDLE],2 		;AC000;Print to STDERR
 32762 00004DCF EB06                    	jmp	short new_printf		;AC000;
 32763                                  
 32764                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32765                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 5012h
 32766                                  	; 15/06/2023
 32767                                  	; 12/08/2024
 32768                                  std_printf:
 32769 00004DD1 C706[D187]0100          	mov	word [PRINTF_HANDLE],1 		;AC000;Print to STDOUT
 32770                                  
 32771                                  new_printf:
 32772 00004DD7 50                      	push	ax				;AN000;save registers
 32773 00004DD8 53                      	push	bx				;AN000;
 32774 00004DD9 51                      	push	cx				;AN000;
 32775 00004DDA 06                      	push	es				;AN000;get local ES
 32776 00004DDB 1E                      	push	ds				;AN000;
 32777 00004DDC 07                      	pop	es				;AN000;
 32778 00004DDD 57                      	push	di				;AN000;
 32779 00004DDE 56                      	push	si				;AN000;
 32780 00004DDF 52                      	push	dx				;AN000;
 32781                                  
 32782                                  	; 07/04/2023
 32783                                  	;mov	word [print_err_flag],0		;AN000;
 32784 00004DE0 31C9                    	xor	cx,cx
 32785 00004DE2 890E[9B8D]              	mov	[print_err_flag],cx ; 0
 32786                                  
 32787 00004DE6 89D6                    	mov	si,dx				;AN000;Get offset of message number
 32788 00004DE8 AD                      	lodsw					;AN000;load message number
 32789                                  	; 15/06/2023
 32790                                  	;push	ax				;AN000;save it
 32791                                  	;lodsb					;AN000;get number of substitutions
 32792                                  	;mov	cl,al				;AN000;set up CX as # of subst
 32793                                  	;; 07/04/2023
 32794                                  	;;xor	ch,ch				;AN000;SI now points to subst list
 32795                                  	;pop	ax				;AN000;get message number back
 32796                                  	; 15/06/2023
 32797 00004DE9 8A0C                    	mov	cl,[si]
 32798 00004DEB 46                      	inc	si
 32799                                  	
 32800                                  	;cmp	cx,0				;AN000;Any substitutions?
 32801                                  	; 07/04/2023
 32802                                  	;and	cx,cx
 32803                                  	;jz	short ready_to_print		;AN000;No - continue
 32804                                  	; 12/08/2024
 32805 00004DEC E35C                    	jcxz	ready_to_print
 32806                                  
 32807 00004DEE BF[9D8D]                	mov	di,subst_buffer			;AN061; Get address of message subst buffer
 32808 00004DF1 57                      	push	di				;AN061; save it
 32809 00004DF2 51                      	push	cx				;AN061; save number of subst
 32810                                  
 32811                                  move_subst:
 32812 00004DF3 51                      	push	cx				;AN061;save number of subst
 32813 00004DF4 89F3                    	mov	bx,si				;AN061;save start of sublist
 32814                                  	;mov	cx,parm_block_size ; 11		;AN061;get size of sublist
 32815                                  	; 07/04/2023
 32816 00004DF6 B10B                    	mov	cl,parm_block_size ; 11
 32817 00004DF8 F3A4                    	rep	movsb				;AN061;move sublist
 32818                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 32819 00004DFA F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 32820                                  	;test	byte [bx+7],4			;AN061;are we doing date/time?
 32821 00004DFE 7406                    	jz	short move_subst_cont 		;AN061;no - no need to reset
 32822                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],0
 32823                                  	;mov	word [bx+2],0			;AN061;reset original date or time to 0
 32824 00004E00 894F02                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],cx ; 0
 32825                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 32826                                  	;mov	word [bx+4],0			;AN061;
 32827 00004E03 894F04                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cx ; 0
 32828                                  
 32829                                  move_subst_cont:				;AN061;
 32830 00004E06 59                      	pop	cx				;AN061;get number of subst back
 32831 00004E07 E2EA                    	loop	move_subst			;AN061;move cx sublists
 32832                                  
 32833 00004E09 59                      	pop	cx				;AN061;get number of subst
 32834 00004E0A 50                      	push	ax				;AN061;save message number
 32835 00004E0B 803E[FA7E]FF            	cmp	byte [msg_disp_class],util_msg_class
 32836                                  	;cmp	byte [msg_disp_class],0FFh	;AN061;Is this a utility message
 32837 00004E10 740C                    	je	short check_fix			;AN061;YES - go see if substitutions
 32838                                  	;mov	byte [msg_flag],1 ; ext_msg_class
 32839 00004E12 C606[978D]01            	mov	byte [msg_flag],ext_msg_class	;AN061;set message flag
 32840 00004E17 BF[FC7E]                	mov	di,extend_buf_ptr		;AN061; Get address of extended message block
 32841 00004E1A 31C0                    	xor	ax,ax				;AN061;clear ax register
 32842 00004E1C AB                      	stosw					;AN061;clear out message number
 32843 00004E1D AA                      	stosb					;AN061;clear out subst count
 32844                                  
 32845                                  check_fix:					;AN061;
 32846 00004E1E 58                      	pop	ax				;AN061;get message number back
 32847 00004E1F 5F                      	pop	di				;AN061;get start of sublists
 32848 00004E20 89FE                    	mov	si,di				;AN061;get into SI for msgserv
 32849 00004E22 89F3                    	mov	bx,si				;AN061;get into BX for addressing
 32850 00004E24 51                      	push	cx				;AN061;save number of subst
 32851                                  
 32852                                  set_subst:					;AN061;store the segment of the subst
 32853 00004E25 837F0400                	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 32854                                  	;cmp	word [bx+4],0			;AN061;was it set already?
 32855 00004E29 7509                    	jnz	short subst_seg_set		;AN061;if not 0, don't replace it
 32856 00004E2B F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 32857                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 32858                                  	;test	byte [bx+7],4			;AN061;don't replace if date or time
 32859 00004E2F 7503                    	jnz	short subst_seg_set		;AN061;yes - skip it
 32860 00004E31 8C4F04                  	mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cs
 32861                                  	;mov	word [bx+4],cs			;AN061;set segment value
 32862                                  
 32863                                  subst_seg_set:					;AN061;
 32864 00004E34 83C30B                  	add	bx,parm_block_size ; add bx,11	;AN061;go to next sublist
 32865 00004E37 E2EC                    	loop	set_subst			;AN061;loop CX times
 32866 00004E39 59                      	pop	cx				;AN061;get number of subst back
 32867                                  
 32868 00004E3A 89F3                    	mov	bx,si				;AN061;get start of sublist to BX
 32869 00004E3C 817F02[158C]            	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2
 32870                                  	;cmp	word [bx+2],string_ptr_2	;AN061;are we using double indirection?
 32871 00004E41 7507                    	jne	short ready_to_print		;AN061;no - we already have address
 32872                                  	; 01/05/2023
 32873 00004E43 8B16[158C]              	mov	dx,[string_ptr_2] 		;AN061;get address in string_ptr_2
 32874 00004E47 895702                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],dx
 32875                                  						;AN061;put it into the subst block
 32876                                  	;mov	[bx+2],dx
 32877                                  
 32878                                  ready_to_print:
 32879 00004E4A 8B1E[D187]              	mov	bx,[PRINTF_HANDLE]		;AN000;get print handle
 32880 00004E4E 8A16[FB7E]              	mov	dl,[msg_cont_flag]		;AN000;set up control flag
 32881 00004E52 8A36[FA7E]              	mov	dh,[msg_disp_class]		;AN000;set up display class
 32882 00004E56 C606[FB7E]00            	mov	byte [msg_cont_flag],0 ; no_cont_flag
 32883                                  						;AN061;reset flags to avoid
 32884 00004E5B C606[FA7E]FF            	mov	byte [msg_disp_class],util_msg_class
 32885                                  	;mov	byte [msg_disp_class],0FFh	;AN061; transient reload
 32886                                  
 32887 00004E60 1E                      	push	ds				;AN026;
 32888 00004E61 06                      	push	es				;AN026;
 32889                                  
 32890 00004E62 E83702                  	call	SYSDISPMSG			;AN000;call Rod
 32891                                  
 32892 00004E65 07                      	pop	es				;AN026; restore registers
 32893 00004E66 1F                      	pop	ds				;AN026;
 32894                                  
 32895 00004E67 7303                    	jnc	short print_success		;AN000; everything went okay
 32896 00004E69 A3[9B8D]                	mov	[print_err_flag],ax		;AN000;
 32897                                  
 32898                                  print_success:
 32899 00004E6C 5A                      	pop	dx				;AN061;restore dx
 32900 00004E6D 5E                      	pop	si				;AN000;restore registers
 32901 00004E6E 5F                      	pop	di				;AN000;
 32902 00004E6F 07                      	pop	es				;AN000;restore registers
 32903 00004E70 59                      	pop	cx				;AN000;
 32904 00004E71 5B                      	pop	bx				;AN000;
 32905 00004E72 58                      	pop	ax				;AN000;
 32906 00004E73 833E[9B8D]00            	cmp	word [print_err_flag],0		;AN000; if an error occurred - handle it
 32907 00004E78 7501                    	jnz	short print_err			;AN000;
 32908                                  
 32909 00004E7A C3                      	retn					;AC000;
 32910                                  
 32911                                  print_err:
 32912 00004E7B 0E                      	push	cs
 32913 00004E7C 07                      	pop	es
 32914 00004E7D 833E[D187]02            	cmp	word [PRINTF_HANDLE],2 		;AN026;Print to STDERR?
 32915 00004E82 7503                    	jne	short not_stderr		;AN026;no - continue
 32916 00004E84 E97DB2                  	jmp	TCOMMAND			;AN026;Yes - hopless - just exit
 32917                                  
 32918                                  not_stderr:
 32919 00004E87 A1[9B8D]                	mov	ax,[print_err_flag]		;AN026;get extended error number back
 32920 00004E8A 8E06[A58A]              	mov	es,[RESSEG]			; No, set up for error, load the
 32921                                  						;  right error msg, and jmp to cerror.
 32922 00004E8E 26F606[0002]FF          	test	byte [es:PipeFlag],-1 ; 0FFh
 32923 00004E94 7408                    	jz	short _go_to_error
 32924 00004E96 E8CFE0                  	call	PipeOff
 32925 00004E99 BA[5D80]                	mov	dx,PIPEEMES_PTR
 32926 00004E9C EB0B                    	jmp	short print_err_exit		;AC000;
 32927                                  
 32928                                  _go_to_error:
 32929 00004E9E C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class
 32930                                  	;mov	byte [msg_disp_class],1		;AN000; set up extended error msg class
 32931 00004EA3 BA[FC7E]                	mov	dx,extend_buf_ptr		;AC000; get extended message pointer
 32932 00004EA6 A3[FC7E]                	mov	[extend_buf_ptr],ax		;AN000; get message number in control block
 32933                                  
 32934                                  print_err_exit: 				;AC000;
 32935 00004EA9 0E                      	push	cs
 32936 00004EAA 07                      	pop	es
 32937 00004EAB E9A4DA                  	jmp	cerror
 32938                                  
 32939                                  ;****************************************************************
 32940                                  ;*
 32941                                  ;* ROUTINE:	TSYSLOADMSG
 32942                                  ;*
 32943                                  ;* FUNCTION:	Interface to call SYSLOADMSG to avoid duplicate
 32944                                  ;*		names since these routines are also used in the
 32945                                  ;*		resident.
 32946                                  ;*
 32947                                  ;* INPUT:	Inputs to SYSLOADMSG
 32948                                  ;*
 32949                                  ;* OUTPUT:	Outputs from SYSLOADMSG
 32950                                  ;*
 32951                                  ;****************************************************************
 32952                                  
 32953                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32954                                  TSYSLOADMSG:
 32955 00004EAE 53                      	push	bx				;AN000;
 32956 00004EAF E80800                  	call	SYSLOADMSG			;AN000; call routine
 32957 00004EB2 5B                      	pop	bx				;AN000;
 32958 00004EB3 C3                      	retn					;AN000; exit
 32959                                  
 32960                                  ;****************************************************************
 32961                                  ;*
 32962                                  ;* ROUTINE:	TSYSGETMSG
 32963                                  ;*
 32964                                  ;* FUNCTION:	Interface to call SYSGETMSG to avoid duplicate
 32965                                  ;*		names since these routines are also used in the
 32966                                  ;*		resident.
 32967                                  ;*
 32968                                  ;* INPUT:	Inputs to SYSGETMSG
 32969                                  ;*
 32970                                  ;* OUTPUT:	Outputs from SYSGETMSG
 32971                                  ;*
 32972                                  ;****************************************************************
 32973                                  
 32974                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32975                                  TSYSGETMSG:
 32976 00004EB4 51                      	push	cx				;AN000;
 32977 00004EB5 E8B500                  	call	SYSGETMSG			;AN000; call routine
 32978 00004EB8 59                      	pop	cx				;AN000;
 32979 00004EB9 C3                      	retn					;AN000; exit
 32980                                  
 32981                                  ;============================================================================
 32982                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 32983                                  ;============================================================================
 32984                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32985                                  
 32986                                  ; ---------------------------------------------------------------------------
 32987                                  ; MODULE NAME: MSGSERV.SAL
 32988                                  ;
 32989                                  ; DESCRIPTIVE NAME: Message Services SALUT file
 32990                                  ;
 32991                                  ; FUNCTION: This module incorporates all the messages services and
 32992                                  ;	    is called upon at build time to INCLUDE the code requested
 32993                                  ;	    by a utility. Code is requested using the macro MSG_SERVICES.
 32994                                  ;
 32995                                  ; ENTRY POINT: Since this a collection of subroutines, entry point is at
 32996                                  ;	    requested procedure.
 32997                                  ;
 32998                                  ; INPUT: Since this a collection of subroutines, input is dependent on
 32999                                  ;	    function requested.
 33000                                  ;
 33001                                  ; EXIT-NORMAL: In all cases, CARRY FLAG = 0
 33002                                  ;
 33003                                  ; EXIT-ERROR: In all cases, CARRY FLAG = 1
 33004                                  ;
 33005                                  ; INTERNAL REFERENCES: (list of included subroutines)
 33006                                  ;
 33007                                  ;	- SYSLOADMSG
 33008                                  ;	- SYSDISPMSG
 33009                                  ;	- SYSGETMSG
 33010                                  ;
 33011                                  ; EXTERNAL REFERENCES: None
 33012                                  ;
 33013                                  ; NOTES: At build time, some modules must be included. These are only included
 33014                                  ;	 once using assembler switches. Other logic is included at the request
 33015                                  ;	 of the utility.
 33016                                  ;
 33017                                  ;	 COMR and COMT are assembler switches to conditionally assemble code
 33018                                  ;	 for RESIDENT COMMAND.COM and TRANSIENT COMMAND.COM to reduce resident
 33019                                  ;	 storage and multiple EQUates.
 33020                                  ;
 33021                                  ; REVISION HISTORY: Created MAY 1987
 33022                                  ;
 33023                                  ;     Label: DOS - - Message Retriever
 33024                                  ;	     (c) Copyright 1988 Microsoft
 33025                                  ; ---------------------------------------------------------------------------
 33026                                  
 33027                                  ;	Revision History
 33028                                  ;	================
 33029                                  ;
 33030                                  ;	M007	SR	08/24/90	Fixed bug #1818 -- changed
 33031                                  ;				$M_DISPLAY_H_STRING to properly
 33032                                  ;				handle Ctrl-Z being passed
 33033                                  ;
 33034                                  ;	M013	SR	9/12/90	Make SETSTDIO flag false so that all
 33035                                  ;				these routines are no longer assembled.
 33036                                  ;
 33037                                  ;	M016	SR	10/14/90	Bug #3380. Changed SYSLOADMSG so that
 33038                                  ;				CR-LF string also gets reinitialized
 33039                                  ;				on every cycle.
 33040                                  ;
 33041                                  ;	M020	SR	10/26/90	Bug #3380 again. Initialize $M_DIVISOR
 33042                                  ;				& $_MSG_NUM also in SYSLOADMSG.
 33043                                  
 33044                                  ; ---------------------------------------------------------------------------
 33045                                  
 33046                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33047                                  
 33048                                  ;;; Replacable parameters are described by a sublist structure
 33049                                  ;
 33050                                  ;struc $M_SUBLIST_STRUC		;;AN000;;
 33051                                  ; .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 33052                                  ; .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 33053                                  ; .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 33054                                  ; .$M_S_ID:	resb 1		;;AN000;; n of %n
 33055                                  ; .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 33056                                  ; .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 33057                                  ; .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 33058                                  ; .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 33059                                  ;endstruc
 33060                                  
 33061                                  ;; Each class will be defined by this structure.
 33062                                  
 33063                                  struc $M_CLASS_ID		;;AN000;;
 33064 00000000 ??                       .$M_CLS_ID:	  resb 1	;;AN000;; Class identifer
 33065 00000001 ????                     .$M_COMMAND_VER: resw 1	;;AN003;; COMMAND.COM version check
 33066 00000003 ??                       .$M_NUM_CLS_MSG: resb 1	;;AN000;; Total number of message in class
 33067                                   .size:
 33068                                  endstruc
 33069                                  
 33070                                  $M_CLASS_ID_SZ	EQU $M_CLASS_ID.size	;;AN000;;
 33071                                  
 33072                                  ;; Each message will be defined by this structure.
 33073                                  
 33074                                  struc $M_ID			;;AN000;;
 33075 00000000 ????                     .$M_NUM:	resw 1		;;AN000;; Message Number
 33076 00000002 ????                     .$M_TXT_PTR:	resw 1		;;AN000;; Pointer to message text
 33077                                   .size:	
 33078                                  endstruc
 33079                                  
 33080                                  $M_ID_SZ	EQU  $M_ID.size	;;AN000;;
 33081                                  
 33082                                  ; ---------------------------
 33083                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 33084                                  ; ---------------------------
 33085                                  $M_TEMP_BUF_SZ	EQU 64     ;; Size of temporary buffer	 ;AN003;
 33086                                  
 33087                                  ; --------------------------- 
 33088                                  
 33089                                  ; 07/04/2023
 33090                                  $M_NUM_CLS equ 3
 33091                                  
 33092                                  ;; Resident data area definition of variables
 33093                                  
 33094                                  struc $M_RES_ADDRS			;;AN000;;
 33095 00000000 ????????                 .$M_EXT_ERR_ADDRS: resd 1		;;AN000;; Allow pointers to THREE Extended error locations
 33096 00000004 ????????                 .$M_EXT_FILE:	    resd 1		;;AN001;;
 33097 00000008 ????????                 .$M_EXT_COMMAND:   resd 1		;;AN000;;
 33098 0000000C ????????                 .$M_EXT_TERM:	    resd 1		;;AN000;;
 33099 00000010 ????????                 .$M_PARSE_COMMAND: resd 1		;;AN000;;
 33100 00000014 ????????                 .$M_PARSE_ADDRS:   resd 1		;;AN000;; Allow pointers to TWO Parse error locations
 33101 00000018 ????????                 .$M_PARSE_TERM:    resd 1		;;AN000;;
 33102 0000001C ????????                 .$M_CRIT_ADDRS:    resd 1		;;AN000;; Allow pointers to TWO Critical error locations
 33103 00000020 ????????                 .$M_CRIT_COMMAND:  resd 1		;;AN000;;
 33104 00000024 ????????                 .$M_CRIT_TERM:	    resd 1		;;AN000;;
 33105 00000028 ????????                 .$M_DISK_PROC_ADDR: resd 1		;;AN004;; Address of READ_DISK_PROC
 33106 0000002C <res Ch>                 .$M_CLASS_ADDRS:   resd $M_NUM_CLS ; 3	;;AN000;; Allow pointers to specified classes
 33107 00000038 ????????                 .$M_CLS_TERM:	    resd 1		;;AN000;;
 33108 0000003C ????????                 .$M_DBCS_VEC:	    resd 1		;;AN000;; Save DBCS vector
 33109 00000040 ????                     .$M_HANDLE:	    resw 1 		;;AN000;;
 33110 00000042 ??                       .$M_SIZE:	    resb 1		;;AN000;;
 33111 00000043 ????                     .$M_CRLF:	    resb 2  		;;AN004;; CR LF message
 33112 00000045 ??                       .$M_CLASS:	    resb 1		;;AN004;; Saved class
 33113 00000046 ????                     .$M_RETURN_ADDR:   resw 1		;;AN000;;
 33114 00000048 ????                     .$M_MSG_NUM:	    resw 1		;;AN000;;
 33115 0000004A ????                     .$M_DIVISOR:	    resw 1		;;AN000;; Default = 10 (must be a WORD for division)
 33116 0000004C <res 40h>                .$M_TEMP_BUF:	    resb $M_TEMP_BUF_SZ	;;AN000;; Temporary buffer
 33117 0000008C ??                       .$M_BUF_TERM:	    resb 1		;;AN000;;
 33118                                   .size:
 33119                                  endstruc				;;AN000;;
 33120                                  
 33121                                  $M_RES_ADDRS_SZ	EQU $M_RES_ADDRS.size	;;AN000;;
 33122                                  
 33123                                  ;; Important fields of the Get Country Information call
 33124                                  
 33125                                  struc $M_COUNTRY_INFO			;;AN000;; Expected Country infomation
 33126 00000000 <res 4Ch>                .$M_HEADER:	    resb $M_RES_ADDRS_SZ-$M_TEMP_BUF_SZ-1
 33127                                  					;;AN000;; Go past first part of struc
 33128 0000004C ????                     .$M_DATE_FORMAT:   resw 1		;;AN000;; <------- Date Format
 33129 0000004E ??????????               .$M_CURR_SEPARA:   resb 5		;;AN000;;
 33130 00000053 ????                     .$M_THOU_SEPARA:   resb 2		;;AN000;; <------- Thou Separator
 33131 00000055 ????                     .$M_DECI_SEPARA:   resb 2		;;AN000;; <------- Decimal Separator
 33132 00000057 ????                     .$M_DATE_SEPARA:   resb 2		;;AN000;; <------- Date Separator
 33133 00000059 ????                     .$M_TIME_SEPARA:   resb 2		;;AN000;; <------- Time Separator
 33134 0000005B ??                       .$M_CURR_FORMAT:   resb 1		;;AN000;;
 33135 0000005C ??                       .$M_SIG_DIGS_CU:   resb 1		;;AN000;;
 33136 0000005D ??                       .$M_TIME_FORMAT:   resb 1		;;AN000;; <------- Time Format
 33137                                  endstruc				;;AN000;;
 33138                                  
 33139                                  ; ---------------------------------------------------------------------------
 33140                                  
 33141                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33142                                  ;;
 33143                                  ;;	PROC NAME: SYSLOADMSG
 33144                                  ;;
 33145                                  ;;	FUNCTION:
 33146                                  ;;	INPUTS:
 33147                                  ;;
 33148                                  ;;	OUTPUTS:
 33149                                  ;;
 33150                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33151                                  
 33152                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33153                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5107h
 33154                                  
 33155                                  SYSLOADMSG:
 33156 00004EBA 50                      	push	ax				;;AN000;
 33157 00004EBB 53                      	push	bx				;;AN000;
 33158 00004EBC 52                      	push	dx				;;AN000;
 33159 00004EBD 06                      	push	es				;;AN000;
 33160 00004EBE 57                      	push	di				;;AN000;
 33161 00004EBF 31C9                    	xor	cx,cx				;;AN000;  Reset to zero
 33162 00004EC1 8EC1                    	mov	es,cx				;;AN000;
 33163 00004EC3 31FF                    	xor	di,di				;;AN000;
 33164 00004EC5 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33165 00004EC8 B200                    	mov	dl,0 ; DOS_GET_EXTENDED		;;AN000;; Where are the Extended errors in COMMAND.COM
 33166 00004ECA CD2F                    	int	2Fh				;;AN000;; Private interface
 33167                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33168                                  		; DL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)
 33169                                  		; Return: ES:DI -> error table
 33170                                  	
 33171 00004ECC 8C06[D686]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2],es
 33172                                  	;mov	[$M_RT+10],es			;;AN000;; Move into first avaliable table location
 33173 00004ED0 893E[D486]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND],di
 33174                                  	;mov	[$M_RT+8],di			;;AN000;;
 33175                                  
 33176 00004ED4 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33177 00004ED7 B202                    	mov	dl,2 ; DOS_GET_PARSE		;;AN000;; Where are the Parse errors in COMMAND.COM
 33178 00004ED9 CD2F                    	int	2Fh				;;AN000;; Private interface
 33179                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33180                                  		; DL = subfunction - get critical/SHARE error table (errors 13h-2Bh)
 33181                                  		; ES:DI -> error table
 33182                                  
 33183 00004EDB 8C06[DE86]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2],es
 33184                                  	;mov	[$M_RT+18],es			;;AN000;; Move into first avaliable table location
 33185 00004EDF 893E[DC86]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND],di
 33186                                  	;mov	[$M_RT+16],di			;;AN000;;
 33187                                  
 33188 00004EE3 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33189 00004EE6 B204                    	mov	dl,4 ; DOS_GET_CRITICAL		;;AN000;; Where are the Critical errors in COMMAND.COM
 33190 00004EE8 CD2F                    	int	2Fh				;;AN000;; Private interface
 33191                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33192                                  		; DL = subfunction - get ??? error table
 33193                                  		; ES:DI -> error table
 33194                                  
 33195 00004EEA 8C06[EE86]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2],es
 33196                                  	;mov	[$M_RT+34],es			;;AN000;; Move into first avaliable table location
 33197 00004EEE 893E[EC86]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND],di
 33198                                  	;mov	[$M_RT+32],di			;;AN000;;
 33199                                  
 33200 00004EF2 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33201 00004EF5 B206                    	mov	dl,6 ; DOS_GET_FILE		;;AN001;; Where are the FILE dependant in IFSFUNC.EXE
 33202 00004EF7 CD2F                    	int	2Fh					     ;;AN001;; Private interface
 33203                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33204                                  		; DL = subfunction - get ??? error table
 33205                                  		; ES:DI -> error table
 33206                                  
 33207 00004EF9 8C06[D286]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2],es
 33208                                  	;mov	[$M_RT+6],es			;;AN001;; Move into first avaliable table location
 33209 00004EFD 893E[D086]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE],di
 33210                                  	;mov	[$M_RT+4],di			;;AN001;;
 33211                                  
 33212 00004F01 E8D12F                  	call	$M_MSGSERV_1			;;AN000;; Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)
 33213                                  						;;AN000;;
 33214 00004F04 8C06[CE86]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2],es
 33215                                  	;mov	[$M_RT+2],es			;;AN000;; Move into first avaliable table location
 33216 00004F08 893E[CC86]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS],di
 33217                                  	;mov	[$M_RT+0],di			;;AN000;;
 33218 00004F0C 8C06[EA86]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2],es
 33219                                  	;mov	[$M_RT+30],es			;;AN000;; Move into first avaliable table location
 33220 00004F10 893E[E886]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS],di
 33221                                  	;mov	[$M_RT+28],di			;;AN000;;
 33222                                  
 33223 00004F14 E8DC2F                  	call	$M_MSGSERV_2			;;AN000;; Get addressibility to MSGSERV CLASS 2 (PARSE Errors)
 33224                                  
 33225 00004F17 8C06[E286]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2],es
 33226                                  	;mov	[$M_RT+22],es			;;AN000;; Move into first avaliable table location
 33227 00004F1B 893E[E086]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS],di
 33228                                  	;mov	[$M_RT+20],di			;;AN000;;
 33229                                  
 33230 00004F1F B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33231 00004F22 B208                    	mov	dl,8 ; DOS_GET_ADDR 		;;AN001;; Where is the READ_DISK_PROC in COMMAND.COM
 33232 00004F24 CD2F                    	int	2Fh				;;AN001;; Private interface
 33233                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33234                                  		; DL = subfunction - get ??? error table
 33235                                  		; ES:DI -> error table
 33236                                  
 33237 00004F26 8C06[F686]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2],es
 33238                                  	;mov	[$M_RT+42],es			;;AN001;; Move into first avaliable table location
 33239 00004F2A 893E[F486]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],di
 33240                                  	;mov	[$M_RT+40],di			;;AN001;;
 33241                                  
 33242                                  ;M016; M020
 33243                                  ; Reinitialize the CR-LF string. Also, reinit the buffer terminator just to
 33244                                  ;be safe. Initialize $M_MSG_NUM and $M_DIVISOR also.
 33245                                  
 33246 00004F2E C706[0F87]0D0A          	mov	word [$M_RT+$M_RES_ADDRS.$M_CRLF],0A0Dh
 33247                                  	;mov	word [$M_RT+67],0A0Dh		; Reinit CR-LF ;M016
 33248 00004F34 C606[5887]24            	mov	byte [$M_RT+$M_RES_ADDRS.$M_BUF_TERM],'$'
 33249                                  	;mov	word [$M_RT+140],'$'		; Reinit buffer end;M016
 33250 00004F39 C706[1487]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 33251                                  	;mov	word [$M_RT+72],0		; M020
 33252 00004F3F C706[1687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 33253                                  	;mov	word [$M_RT+74],10		; M020
 33254                                  
 33255                                  	; 07/04/2023 - Retro DOS v4.0 COMMAND.COM
 33256                                  	; --------------------------
 33257                                  	; MSDOS 6.0 SYSMSG.INC, 1991
 33258                                  	; --------------------------
 33259                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP5192h
 33260                                  
 33261                                  	;$M_BUILD_PTRS %$M_NUM_CLS     		;;AN000;; Build all utility classes	
 33262 00004F45 E82A2F                  	call    $M_CLS_3			; Get addressibility to class F
 33263 00004F48 893E[F886]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS],di
 33264                                  	;mov	[$M_RT+44],di
 33265                                  	
 33266 00004F4C E80600                  	CALL	$M_GET_DBCS_VEC 		;;AN000;; Save the DBCS vector
 33267                                  
 33268                                  	; 15/04/2023
 33269                                  	;clc					;;AN000;; Make sure carry is clear
 33270                                  	;jc	short $MIF20
 33271                                  	
 33272 00004F4F 5F                      	pop	di				;;AN000;; Restore REGS
 33273 00004F50 07                      	pop	es				;;AN000;;
 33274 00004F51 5A                      	pop	dx				;;AN000;;
 33275 00004F52 5B                      	pop	bx				;;AN000;;
 33276 00004F53 58                      	pop	ax				;;AN000;;
 33277                                  	;jmp	short $MEN20
 33278                                  	; 15/04/2023
 33279 00004F54 C3                      	retn
 33280                                  
 33281                                  	; 15/04/2023
 33282                                  ;$MIF20:
 33283                                  	;add	sp,10				;;AN000;;
 33284                                  	;stc					;;AN000;; Reset carry flag
 33285                                  ;$MEN20:
 33286                                  	;retn					;;AN000;;
 33287                                  
 33288                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33289                                  ;;
 33290                                  ;;  Proc Name:	$M_GET_DBCS_VEC
 33291                                  ;;
 33292                                  ;;  Function:	Get the DBCS vector and save it for later use
 33293                                  ;;
 33294                                  ;;  Inputs:	None
 33295                                  ;;
 33296                                  ;;  Outputs:	None
 33297                                  ;;
 33298                                  ;;  Regs Changed:
 33299                                  ;;
 33300                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33301                                  
 33302                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33303                                  
 33304                                  $M_GET_DBCS_VEC:
 33305 00004F55 50                      	push	ax				;;AN000;; Save character to check
 33306 00004F56 56                      	push	si				;;AN000;;
 33307 00004F57 1E                      	push	ds				;;AN000;;
 33308 00004F58 B80063                  	mov	ax,6300h ;DOS_GET_DBCS_INFO	;;AN000;; DOS function to get DBSC environment
 33309 00004F5B CD21                    	int	21h				;;AN000;; Get environment pointer
 33310 00004F5D 1E                      	push	ds				;;AN000;; Get environment pointer
 33311 00004F5E 07                      	pop	es				;;AN000;; Get environment pointer
 33312 00004F5F 1F                      	pop	ds				;;AN000;; Get environment pointer
 33313 00004F60 7208                    	jc	short $MIF23
 33314                                  	
 33315 00004F62 8936[0887]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC],si
 33316                                  	;mov	word [$M_RT+60],si		;;AN000;; Save DBCS Vector
 33317 00004F66 8C06[0A87]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC+2],es
 33318                                  	;mov	word [$M_RT+62],es		;;AN000;;
 33319                                  $MIF23:
 33320 00004F6A 5E                      	pop	si				;;AN000;;
 33321 00004F6B 58                      	pop	ax				;;AN000;; Retrieve character to check
 33322 00004F6C C3                      	retn					;;AN000;; Return
 33323                                  
 33324                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33325                                  ;;
 33326                                  ;;  Proc Name:	SYSGETMSG
 33327                                  ;;
 33328                                  ;;  Function:	The GET service returns the segment, offset and size of the
 33329                                  ;;		message text to the caller based on a message number.
 33330                                  ;;		The GET function will not display the message thus assumes
 33331                                  ;;		caller will handle replaceable parameters.
 33332                                  ;;
 33333                                  ;;  Inputs:
 33334                                  ;;
 33335                                  ;;  Outputs:
 33336                                  ;;
 33337                                  ;;  Psuedocode:
 33338                                  ;;		Call $M_GET_MSG_ADDRESS
 33339                                  ;;		IF MSG_NUM exists THEN
 33340                                  ;;		   Set DS:SI = MSG_TXT_PTR + 1
 33341                                  ;;		   CARRY_FLAG = 0
 33342                                  ;;		ELSE
 33343                                  ;;		   CARRY_FLAG = 1
 33344                                  ;;		ENDIF
 33345                                  ;;
 33346                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33347                                  
 33348                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33349                                  	; 15/06/2023
 33350                                  
 33351                                  	utility_msg_class equ 0FFh ; 18/04/2023
 33352                                  
 33353                                  SYSGETMSG:
 33354                                  	;; Save registers needed later
 33355 00004F6D 50                      	push	ax				;;AN000;; Save changed regs
 33356 00004F6E 06                      	push	es				;;AN000;;
 33357 00004F6F 57                      	push	di				;;AN000;;
 33358 00004F70 55                      	push	bp				;;AN000;;
 33359                                  
 33360 00004F71 E81400                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 33361 00004F74 720D                    	jc	short $MIF31
 33362                                  	
 33363 00004F76 80FEFF                  	cmp	dh,utility_msg_class ; 0FFh	;;AN000;; Were utility messages requested?
 33364                                  	;clc					;;AN000;;
 33365 00004F79 7404                    	je	short $MIF32			;;AN000;;
 33366                                  	; 15/06/2023
 33367 00004F7B F8                      	clc	
 33368                                  
 33369 00004F7C 06                      	push	es				;;AN000;;
 33370                                  	;pop	ds				;;AN000;;
 33371 00004F7D EB01                    	jmp	short $MEN32
 33372                                  $MIF32:
 33373 00004F7F 0E                      	push	cs				;;AN000;;			
 33374                                  	;pop	ds				;;AN000;;
 33375                                  $MEN32:
 33376                                  	; 07/04/2023
 33377 00004F80 1F                      	pop	ds
 33378 00004F81 89FE                    	mov	si,di				;;AN000;; Return message in DS:SI
 33379                                  $MIF31:
 33380 00004F83 5D                      	pop	bp				;;AN000;; Restore changed regs
 33381 00004F84 5F                      	pop	di				;;AN000;;
 33382 00004F85 07                      	pop	es				;;AN000;;
 33383 00004F86 58                      	pop	ax				;;AN000;;
 33384 00004F87 C3                      	retn					;;AN000;; Return
 33385                                  
 33386                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33387                                  ;;
 33388                                  ;;	PROC NAME: $M_GET_MSG_ADDRESS
 33389                                  ;;
 33390                                  ;;	FUNCTION:  To scan thru classes to return pointer to the message header
 33391                                  ;;	INPUTS:    Access to $M_RES_ADDRESSES
 33392                                  ;;	OUTPUTS:   IF CX = 0 THEN Message was not found
 33393                                  ;;		   IF CX > 1 THEN ES:DI points to the specified message
 33394                                  ;;	REGS CHANGED: ES,DI,CX
 33395                                  ;;
 33396                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33397                                  
 33398                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33399                                  
 33400                                  $M_GET_MSG_ADDRESS:
 33401 00004F88 56                      	push	si				;;AN000;;
 33402 00004F89 53                      	push	bx				;;AN000;;
 33403 00004F8A 31F6                    	xor	si,si				;;AN000;; Use SI as an index
 33404 00004F8C 31C9                    	xor	cx,cx				;;AN000;; Use CX as an size
 33405                                  $MDO36:
 33406 00004F8E 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Were utility messages requested?
 33407 00004F91 7508                    	jne	short $MIF37			;;AN000;; No			
 33408                                  	
 33409                                  	; 07/04/2023
 33410                                  	;;mov	di,[si+89CAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33411 00004F93 8BBC[F886]              	mov	di,[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
 33412                                  	;mov	di,[si+$M_RT+44]		;;AN000;; Get address of class
 33413 00004F97 89FB                    	mov	bx,di				;;AN000;;
 33414 00004F99 EB21                    	jmp	short $MEN37
 33415                                  $MIF37:
 33416 00004F9B F6C602                  	test	dh,2 ; parse_err_class		;;AN000;; Were parse errors requested?
 33417 00004F9E 7406                    	jz	short $MIF39
 33418                                  	
 33419                                  	; 07/04/2023
 33420                                  	;;les	di,[si+89AEh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33421 00004FA0 C4BC[DC86]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]
 33422                                  	;les	di,[si+$M_RT+16]		;;AN000;; Get address of class
 33423                                  	
 33424                                  	; 07/04/2023
 33425                                  	;mov	bx,es ; *			;;AN000;;
 33426 00004FA4 EB14                    	jmp	short $MEN39
 33427                                  $MIF39:
 33428 00004FA6 83F813                  	cmp	ax,19 ; $M_CRIT_LO		;;AN000;; Is this a critical error?
 33429 00004FA9 720B                    	jnae	short $MIF41  ; jb short $MIF41 ;;AN000;;
 33430                                  
 33431 00004FAB 83F827                  	cmp	ax,39 ; $M_CRIT_HI		;;AN000;;
 33432 00004FAE 7706                    	jnbe	short $MIF41  ; ja short $MIF41 ;;AN000;;
 33433                                  
 33434                                  	; 07/04/2023
 33435                                  	;;les	di,[si+89BAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33436 00004FB0 C4BC[E886]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]
 33437                                  	;les	di,[si+$M_RT+28]		;;AN000;; Get address of class
 33438                                  	
 33439                                  	; 07/04/2023
 33440                                  	;mov	bx,es ; *			;;AN000;;
 33441 00004FB4 EB04                    	jmp	short $MEN41
 33442                                  $MIF41:
 33443                                  	; 07/04/2023
 33444                                  	;;les	di,[si+899Eh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33445 00004FB6 C4BC[CC86]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]
 33446                                  	;les	di,[si+$M_RT+0]			;;AN000;; Get address of class
 33447                                  	
 33448                                  	; 07/04/2023
 33449                                  	;mov	bx,es ; *			;;AN000;;
 33450                                  $MEN41:
 33451                                  $MEN39:
 33452                                  	; 07/04/2023
 33453 00004FBA 8CC3                    	mov	bx,es ; *
 33454                                  $MEN37:						;;AN000;;
 33455 00004FBC 83FBFF                  	cmp	bx,-1 ; $M_TERMINATING_FLAG	;;AN000;; Are we finished all classes?
 33456 00004FBF 7515                    	jne	short $MIF46			;;AN000;; No
 33457                                  
 33458 00004FC1 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Was it a UTILITY class?
 33459 00004FC4 7503                    	jne	short $MIF47			;;AN000;; No
 33460 00004FC6 F9                      	stc		     ; **-		;;AN000;; Set the carry flag
 33461                                  	; 07/04/2023
 33462                                  	;jmp	short $MEN47 ; **-
 33463 00004FC7 EB1B                    	jmp	short $MEN36 ; **-
 33464                                  $MIF47:
 33465 00004FC9 A3[1487]                	mov	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],AX
 33466                                  	;mov	[$M_RT+72],ax			;;AN000;; Save message number
 33467 00004FCC B8FFFF                  	mov	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN000;; Set special message number
 33468 00004FCF BD0100                  	mov	bp,1 ; $M_ONE_REPLACE		;;AN000;; Set one replace in message
 33469 00004FD2 31F6                    	xor	si,si				;;AN000;; Reset the SI index to start again
 33470                                  	; 28/04/2023
 33471                                  	; 07/04/2023
 33472                                  	;clc	; **+				;;AN000;;
 33473                                  ;$MEN47:
 33474                                  	;jmp	short $MEN46 ; ***
 33475 00004FD4 EB0A                    	jmp	short $MEN47 ; ***
 33476                                  $MIF46:
 33477                                  	;cmp	bx,0 ; $M_CLASS_NOT_EXIST	;;AN000;; Does this class exist?
 33478 00004FD6 21DB                    	and	bx,bx ; 0 ?
 33479 00004FD8 7403                    	jz	short $MIF51			;;AN000;; No
 33480                                  	
 33481 00004FDA E84D00                  	call	$M_FIND_SPECIFIED_MSG		;;AN000;; Try to find the message
 33482                                  $MIF51:
 33483 00004FDD 83C604                  	add	si,4 ; $M_ADDR_SZ_FAR 		;;AN000;; Get next class
 33484                                  	; 07/04/2023
 33485                                  	;clc					;;AN000;;
 33486                                  ;$MEN46:
 33487                                  	;jc	short $MEN36 ; **- ; **+	;;AN000;;
 33488                                  $MEN47:	; 07/04/2023	; **+
 33489 00004FE0 09C9                    	or	cx,cx				;;AN000;; Was the message found?
 33490                                  	;jnz	short $MXL2			;;AN000;; Yes
 33491                                  	;jmp	short $MDO36
 33492                                  	; 07/04/2023
 33493 00004FE2 74AA                    	jz	short $MDO36	
 33494                                  $MXL2:
 33495                                  $MEN36:
 33496 00004FE4 9C                      	pushf 					;;AN006;; Save the flag state
 33497                                  	
 33498 00004FE5 80FE01                  	cmp	dh,1 ; EXT_ERR_CLASS		;;AN006;; Was an extended error requested?
 33499                                  	;jne	short $MIF56			;;AN006;; No
 33500                                  	; 28/04/2023
 33501 00004FE8 752A                    	jne	short $M_MYRET	
 33502                                  
 33503 00004FEA 52                      	push	dx				;;AN006;; Save all needed registers
 33504 00004FEB 55                      	push	bp				;;AN006;;
 33505 00004FEC 51                      	push	cx				;;AN006;;
 33506 00004FED 06                      	push	es				;;AN006;;
 33507 00004FEE 57                      	push	di				;;AN006;;
 33508 00004FEF 50                      	push	ax				;;AN006;;
 33509                                  
 33510 00004FF0 B80005                  	mov	ax,500h ; IFSFUNC_INSTALL_CHECK	;;AN006;; Check if IFSFUNC is installed
 33511 00004FF3 CD2F                    	int	2Fh				;;AN006;;
 33512                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
 33513                                  		; Return: AL = 00h not installed, OK to install
 33514                                  		; 01h not installed, can't install
 33515                                  		; FFh installed
 33516                                  
 33517 00004FF5 3CFF                    	cmp	al,0FFh ; IFSFUNC_INSTALLED	;;AN006;; Is it installed?
 33518 00004FF7 58                      	pop	ax				;;AN006;; Restore msg number
 33519 00004FF8 7513                    	jne	short $MIF57			;;AN006;; No (not installed)
 33520                                  
 33521 00004FFA 89C3                    	mov	bx,ax				;;AN006;; BX is the extended error number
 33522 00004FFC B80205                  	mov	ax,502h ; IFS_GET_ERR_TEXT	;;AN006;; AX is the muliplex number
 33523 00004FFF CD2F                    	int	2Fh				;;AN006;; Call IFSFUNC
 33524                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER
 33525                                  
 33526                                  	;jmp	short $MEN57			;;AN006;;
 33527                                  	; 28/04/2023
 33528 00005001 720B                    	jc	short $MEN57
 33529                                  $MIF60:
 33530 00005003 83C406                  	add	sp,6				;;AN006;; Throw away old pointer
 33531 00005006 E81200                  	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 33532                                  $MEN60:
 33533 00005009 5D                      	pop	bp				;;AN006;; Restore other Regs
 33534 0000500A 5A                      	pop	dx				;;AN006;;
 33535                                  $MIF56:
 33536                                  	; 07/04/2023
 33537                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 33538 0000500B EB07                    	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 33539                                  
 33540                                  $MIF57:
 33541 0000500D F9                      	stc					;;AN006;; Carry conditon
 33542                                  $MEN57:
 33543                                  	; 28/04/2023
 33544                                  	;jnc	short $MIF60			;;AN006;;
 33545                                  
 33546 0000500E 5F                      	pop	di				;;AN006;;
 33547 0000500F 07                      	pop	es				;;AN006;; Restore old pointer
 33548 00005010 59                      	pop	cx				;;AN006;;
 33549 00005011 EBF6                    	jmp	short $MEN60
 33550                                  
 33551                                  ;$MIF60:
 33552                                  ;	add	sp,6				;;AN006;; Throw away old pointer
 33553                                  ;	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 33554                                  ;$MEN60:
 33555                                  ;	pop	bp				;;AN006;; Restore other Regs
 33556                                  ;	pop	dx				;;AN006;;
 33557                                  ;$MIF56:
 33558                                  ;	; 07/04/2023
 33559                                  ;	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 33560                                  ;	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 33561                                  
 33562                                  ; 07/04/2023
 33563                                  ; ---------------------------
 33564                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 33565                                  ; ---------------------------
 33566                                  	; $M_POPF macro
 33567                                  	;jmp	short $+3
 33568                                  m_popf_iret:
 33569 00005013 CF                      	iret
 33570                                  $M_MYRET:
 33571 00005014 0E                      	push	cs
 33572 00005015 E8FBFF                  	call	m_popf_iret
 33573                                  	;;; end macro	
 33574                                  ; ---------------------------
 33575                                  
 33576 00005018 5B                      	pop	bx				;;AN000;;
 33577 00005019 5E                      	pop	si				;;AN000;;
 33578 0000501A C3                      	retn					;;AN000;; Return ES:DI pointing to the message
 33579                                  
 33580                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33581                                  
 33582                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33583                                  $M_SET_LEN_IN_CX:			
 33584 0000501B 57                      	push	di				;;AN006;; Save position
 33585 0000501C 50                      	push	ax				;;AN006;;
 33586 0000501D B9FFFF                  	mov	cx,-1 ; 65535 ; 0FFFFh		;;AN006;; Set CX for decrements
 33587 00005020 30C0                    	xor	al,al				;;AN006;; Prepare compare register
 33588 00005022 F2AE                    	repne	scasb				;;AN006;; Scan for zero
 33589 00005024 F7D1                    	not	cx				;;AN006;; Change decrement into number
 33590 00005026 49                      	dec	cx				;;AN006;; Don't include the zero
 33591 00005027 58                      	pop	ax				;;AN006;;
 33592 00005028 5F                      	pop	di				;;AN006;; Restore position
 33593 00005029 C3                      	retn					;;AN006;;
 33594                                  
 33595                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33596                                  ;;
 33597                                  ;;	PROC NAME: $M_FIND_SPECIFIED_MSG
 33598                                  ;;
 33599                                  ;;	FUNCTION:  To scan thru message headers until message is found
 33600                                  ;;	INPUTS:    ES:DI points to beginning of msg headers
 33601                                  ;;		   CX contains the number of messages in class
 33602                                  ;;		   DH contains the message class
 33603                                  ;;	OUPUTS:    IF CX = 0 THEN Message was not found
 33604                                  ;;		   IF CX > 1 THEN ES:DI points to header of specified message
 33605                                  ;;
 33606                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33607                                  
 33608                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33609                                  	; 15/06/2023
 33610                                  $M_FIND_SPECIFIED_MSG:
 33611 0000502A 83FB01                  	cmp	bx,1				;;AN004;; Do we have an address to CALL?
 33612 0000502D 751F                    	jne	short $MIF64
 33613 0000502F 833E[F486]FF            	cmp	word [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1
 33614                                  	;cmp	word [$M_RT+40],-1 ; 0FFFFh	;;AN004;; Do we have an address to CALL?
 33615                                  	; 15/06/2023 (BugFix)
 33616 00005034 7418                    	je	short $MIF64
 33617                                  
 33618 00005036 83F8FF                  	cmp	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN004;; Are we displaying a default Ext Err?
 33619 00005039 750B                    	jne	short $MIF65
 33620                                  	
 33621 0000503B 50                      	push	ax				;;AN004;; Reset the special message number
 33622 0000503C A1[1487]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 33623                                  	;mov	ax,[$M_RT+72]			;;AN004;; Get the old message number
 33624 0000503F FF1E[F486]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 33625                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 33626 00005043 58                      	pop	ax				;;AN004;; Reset the special message number
 33627                                  	; 28/04/2023
 33628 00005044 EB04                    	jmp	short $MEN65
 33629                                  	; 18/04/2023
 33630                                  	;jmp	short $MEN64
 33631                                  $MIF65:
 33632 00005046 FF1E[F486]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 33633                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 33634                                  $MEN65:
 33635                                  	; 28/04/2023
 33636 0000504A 7344                    	jnc	short $MIF75
 33637                                  	;
 33638 0000504C EB19                    	jmp	short $MEN64 ; $MDO76		;;AN004;;
 33639                                  $MIF64:
 33640 0000504E 31C9                    	xor	cx,cx				;;AN002;; CX = 0 will allow us to
 33641 00005050 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 33642 00005053 7406                    	je	short $MIF69
 33643                                  	
 33644 00005055 268A4D03                	mov	cl,[es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 33645                                  	;mov	cl,[es:di+3]			;;AN001;; Get number of messages in class
 33646 00005059 EB09                    	jmp	short $MEN69
 33647                                  $MIF69:
 33648                                  	;cmp	[cs:di+$M_CLASS_ID.$M_CLS_ID],dh
 33649                                  	;cmp	[cs:di+0],dh
 33650 0000505B 2E3835                  	cmp	[cs:di],dh			;;AN002;; Check if class still exists at
 33651 0000505E 7504                    	jne	short $MIF71
 33652                                  
 33653 00005060 2E8A4D03                	mov	cl,[cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 33654                                  	;mov	cl,[cs:di+3]			;;AN000;; Get number of messages in class
 33655                                  $MIF71:						;;AN001;;
 33656                                  $MEN69:
 33657 00005064 83C704                  	add	di,$M_CLASS_ID_SZ ; add di,4	;;AN000;; Point past the class header
 33658                                  	; 02/05/2023
 33659                                  	;stc					;;AN004;; Flag that we haven't found anything yet
 33660                                  $MEN64:
 33661                                  	;jnc	short $MIF75
 33662                                  	; 28/04/2023
 33663                                  	; (or instruction clears carry flag)
 33664                                  	;clc					;;AN004;; No, reset carry
 33665                                  $MDO76:
 33666 00005067 09C9                    	or	cx,cx				;;AN000;; Do we have any to check?
 33667 00005069 7417                    	jz	short $MEN76
 33668                                  
 33669 0000506B 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 33670 0000506E 7405                    	je	short $MIF78
 33671                                  
 33672                                  	;cmp	ax,[es:di+$M_ID.$M_NUM]		;;AN001;; Is this the message requested?
 33673 00005070 263B05                  	cmp	ax,[es:di]
 33674 00005073 EB03                    	jmp	short $MEN78
 33675                                  $MIF78:
 33676                                  	;cmp	ax,[cs:di+$M_ID.$M_NUM]		;;AN000;; Is this the message requested?
 33677 00005075 2E3B05                  	cmp	ax,[cs:di]
 33678                                  $MEN78:
 33679                                  	;jne	short $MIF76
 33680                                  	;jmp	short $MSR76
 33681                                  	; 07/04/2023
 33682 00005078 740B                    	je	short $MSR76 ; *
 33683                                  $MIF76:
 33684 0000507A 49                      	dec	cx				;;AN000;; No, well do we have more to check?
 33685 0000507B 7405                    	jz	short $MEN76
 33686                                  
 33687 0000507D 83C704                  	add	di,$M_ID_SZ ; add di,4		;;AN000;; Yes, skip past msg header
 33688 00005080 EBE5                    	jmp	short $MDO76			;;AN000;;
 33689                                  $MEN76:
 33690 00005082 F9                      	stc					;;AN000;;
 33691                                  ;$MSR76:	; 07/04/2023
 33692                                  	;jc	short $MIF86			;;AN000;;
 33693                                  	; 07/04/2023
 33694                                  	;jc	short $MIF91
 33695 00005083 EB11                    	jmp	short $MIF91 ;*
 33696                                  $MSR76:	; 07/04/2023 ; *	
 33697 00005085 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;; Yes, is it a utility message?
 33698                                  	; 07/04/2023
 33699                                  	;clc					;;AN001;;
 33700 00005088 7502                    	jne	short $MIF87
 33701                                  
 33702 0000508A 0E                      	push	cs				;;AN000;;
 33703 0000508B 07                      	pop	es				;;AN000;; Return ES:DI pointing to the message
 33704                                  $MIF87:
 33705                                  	;add	di,[es:di+2]
 33706 0000508C 26037D02                	add	di,[es:di+$M_ID.$M_TXT_PTR]     ;;AN000;; Prepare ES:DI pointing to the message
 33707                                  $MIF86:
 33708                                  ;$MIF75:
 33709                                  	; 02/05/2023
 33710                                  	;jc	short $MIF91
 33711                                  $MIF75:	; 28/04/2023
 33712 00005090 30ED                    	xor	ch,ch				;;AN000;;
 33713 00005092 268A0D                  	mov	cl,[es:di]			;;AN000;; Move size into CX
 33714 00005095 47                      	inc	di				;;AN000;; Increment past length
 33715                                  $MIF91:
 33716 00005096 C606[0E87]00            	mov	byte [$M_RT+$M_RES_ADDRS.$M_SIZE],0 ; $M_NULL
 33717                                  	;mov	byte [$M_RT+66],0		;;AN004;; Reset variable
 33718 0000509B C3                      	retn					;;AN000;; Return
 33719                                  
 33720                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33721                                  ;;
 33722                                  ;;  Proc Name:	SYSDISPMSG
 33723                                  ;;
 33724                                  ;;  Function:	The DISPLAY service will output a defined message to a handle
 33725                                  ;;		requested by the caller. It also provides function to display
 33726                                  ;;		messages when handles are not applicable (ie. DOS function calls
 33727                                  ;;		00h to 0Ah) Replaceable parameters are allowed and are
 33728                                  ;;		defined previous to entry.
 33729                                  ;;
 33730                                  ;;		It is assumes that a PRELOAD function has already determined
 33731                                  ;;		the addressibilty internally to the message retriever services.
 33732                                  ;;  Inputs:
 33733                                  ;;
 33734                                  ;;  Outputs:
 33735                                  ;;
 33736                                  ;;  Psuedocode:
 33737                                  ;;		Save registers needed later
 33738                                  ;;		Get address of the message requested
 33739                                  ;;		IF Message number exists THEN
 33740                                  ;;		  IF replacable parameters were specified THEN
 33741                                  ;;		     Display message with replacable parms
 33742                                  ;;		  ELSE
 33743                                  ;;		     Display string without replacable parms
 33744                                  ;;		  ENDIF
 33745                                  ;;		  IF character input was requested THEN
 33746                                  ;;		     Wait for character input
 33747                                  ;;		  ENDIF
 33748                                  ;;		  Clear CARRY FLAG
 33749                                  ;;		ELSE
 33750                                  ;;		   Set CARRY FLAG
 33751                                  ;;		ENDIF
 33752                                  ;;		Return
 33753                                  ;;
 33754                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33755                                  
 33756                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33757                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5307h
 33758                                  
 33759                                  SYSDISPMSG:
 33760                                  	;; Save registers and values needed later
 33761 0000509C 50                      	push	ax				;;AN000;; Save changed REGs
 33762 0000509D 53                      	push	bx				;;AN000;;
 33763 0000509E 51                      	push	cx				;;AN000;;
 33764 0000509F 55                      	push	bp				;;AN000;;
 33765 000050A0 57                      	push	di				;;AN000;; Save pointer to input buffer (offset)
 33766 000050A1 06                      	push	es				;;AN000;; Save pointer to input buffer (segment)
 33767 000050A2 52                      	push	dx				;;AN000;; Save Input/Class request
 33768                                  
 33769 000050A3 89CD                    	mov	bp,cx				;;AN000;; Use BP to hold replace count
 33770 000050A5 891E[0C87]              	mov	[$M_RT+$M_RES_ADDRS.$M_HANDLE],bx
 33771                                  	;mov	[$M_RT+64],bx			;;AN000;; Save handle
 33772 000050A9 8836[1187]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS],dh
 33773                                  	;mov	[$M_RT+69],dh			;;AN004;; Save class
 33774                                  
 33775                                  	;; Get address of the message requested
 33776 000050AD E8D8FE                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 33777 000050B0 09C9                    	or	cx,cx				;;AN000;; Was message found?
 33778 000050B2 7420                    	jz	short $MIF93
 33779                                  						;;AN000;; Yes, Message address in ES:DI
 33780                                  	
 33781                                  	;; Test if replacable parameters were specified
 33782 000050B4 09ED                    	or	bp,bp				;;AN000;; Were replacable parameters requested
 33783 000050B6 7505                    	jnz	short $MIF94
 33784                                  
 33785                                  	;; Display string without replacable parms
 33786 000050B8 E82100                  	call	$M_DISPLAY_STRING		;;AN000;; No, great . . . Display message
 33787 000050BB EB03                    	jmp	short $MEN94
 33788                                  $MIF94:
 33789                                  	;; Display message with replacable parms
 33790 000050BD E88401                  	call	$M_DISPLAY_MESSAGE		;;AN000;; Display the message with substitutions
 33791                                  $MEN94:
 33792 000050C0 720D                    	jc	short $MIF97
 33793 000050C2 5A                      	pop	dx				;;AN000;; Get Input/Class request
 33794 000050C3 E8F500                  	call	$M_ADD_CRLF 			;;AN004;; Check if we need to add the CR LF chars.
 33795 000050C6 07                      	pop	es				;;AN000;; Get location of input buffer (if specified)
 33796 000050C7 5F                      	pop	di				;;AN000;;
 33797                                  	;jmp	short $MEN97 ; ***
 33798                                  	; 08/04/2023
 33799                                  	;jmp	short $MEN93 ; **
 33800                                  
 33801                                  	; 08/04/2023
 33802                                  ;$MEN93:
 33803 000050C8 720D                    	jc	short $MIF104
 33804                                  ;$MEN97:
 33805 000050CA 5D                      	pop	bp				;;AN000;;
 33806 000050CB 59                      	pop	cx				;;AN000;;
 33807 000050CC 5B                      	pop	bx				;;AN000;;
 33808 000050CD 58                      	pop	ax				;;AN000;;
 33809 000050CE C3                      	retn
 33810                                   
 33811                                  $MIF97:
 33812                                  	; 08/04/2023
 33813                                  	;add	sp,6				;;AN000;;
 33814                                  	;stc					;;AN000;; Reset carry flag
 33815                                  ;$MEN97: ; ***
 33816                                  	;jmp	short $MEN93
 33817                                  	; 08/04/2023
 33818                                  	;jmp	short $MIF104
 33819                                  	; 08/04/2023
 33820 000050CF 83C40E                  	add	sp,14 ; 6+8
 33821 000050D2 F9                      	stc
 33822 000050D3 C3                      	retn
 33823                                  $MIF93:
 33824                                  	; 08/04/2023
 33825                                  	; (wrong pops ?) - correct order: pop dx, pop es, pop di -
 33826                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:533Bh
 33827 000050D4 07                      	pop	es				;;AN000;; Get pointer to input buffer (segment)
 33828 000050D5 5F                      	pop	di				;;AN000;; Get base pointer to first sublist (offset)
 33829 000050D6 5A                      	pop	dx				;;AN000;; Get base pointer to first sublist (segment)
 33830                                  	;stc	; * 				;;AN000;; Set carry flag
 33831                                  	; 08/04/2023
 33832                                  	;jmp short $MIF104 ; *
 33833                                  
 33834                                  ;$MEN93: ; **
 33835                                  ;	jc	short $MIF104
 33836                                  ;$MEN97: ; 08/04/2023
 33837                                  ;	pop	bp				;;AN000;;
 33838                                  ;	pop	cx				;;AN000;;
 33839                                  ;	pop	bx				;;AN000;;
 33840                                  ;	pop	ax				;;AN000;;
 33841                                  ;	;jmp	short $MEN104
 33842                                  ;	; 08/04/2023
 33843                                  ;	retn
 33844                                  
 33845                                  $MIF104: ; *
 33846 000050D7 83C408                  	add	sp,8				;;AN000;; Eliminate from stack
 33847 000050DA F9                      	stc					;;AN000;;
 33848                                  $MEN104:
 33849 000050DB C3                      	retn					;;AN000;; Return
 33850                                  
 33851                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33852                                  ;;
 33853                                  ;;	PROC NAME: $M_DISPLAY_STRING
 33854                                  ;;
 33855                                  ;;	FUNCTION:  Will display or write string
 33856                                  ;;	INPUTS:    ES:DI points to beginning of message
 33857                                  ;;		   CX contains the length of string to write (if applicable)
 33858                                  ;;	OUTPUTS:   None
 33859                                  ;;	REGS Revised: None
 33860                                  ;;
 33861                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33862                                  
 33863                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33864                                  
 33865                                  $M_DISPLAY_STRING:
 33866 000050DC 50                      	push	ax				;;AN000;;
 33867 000050DD 53                      	push	bx				;;AN000;;
 33868 000050DE 52                      	push	dx				;;AN000;;
 33869 000050DF 8B1E[0C87]              	mov	bx,[$M_RT+$M_RES_ADDRS.$M_HANDLE]
 33870                                  	;mov	bx,[$M_RT+64]			;;AN000;; Retrieve handle
 33871                                  	
 33872 000050E3 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE 	;;AN000;; Was there a handle specified?
 33873 000050E6 7505                    	jne	short $MIF107
 33874                                  
 33875 000050E8 E82600                  	call	$M_DISPLAY_$_STRING		;;AN000;; No, display $ terminated string
 33876 000050EB EB03                    	jmp	short $MEN107
 33877                                  $MIF107:
 33878 000050ED E86E00                  	call	$M_DISPLAY_H_STRING		;;AN000;; Yes, display string to handle
 33879                                  $MEN107:
 33880 000050F0 730D                    	jnc	short $MIF110
 33881                                  	
 33882 000050F2 B459                    	mov	ah,59h	; DOS_GET_EXT_ERROR	;;AN000;;
 33883                                  	;mov	bx,0	; DOS_GET_EXT_ERROR_BX	;;AN000;; Get extended error
 33884                                  	; 08/04/2023
 33885 000050F4 31DB                    	xor	bx,bx
 33886 000050F6 CD21                    	int	21h				;;AN000;;
 33887                                  		; DOS - 3+ - GET EXTENDED ERROR CODE
 33888                                  		; BX = version code (0000h for DOS 3.x)
 33889 000050F8 30E4                    	xor	ah,ah				;;AN000;; Clear AH
 33890                                  $MEN110: ; 08/04/2023 ; ***
 33891 000050FA 83C406                  	add	sp,6				;;AN000;; Clean up stack
 33892 000050FD F9                      	stc					;;AN000;; Flag that there was an error
 33893                                  	;jmp	short $MEN110 ; ****
 33894                                  	; 08/04/2023
 33895 000050FE C3                      	retn
 33896                                  $MIF110:
 33897                                  	;cmp	bx,$M_NO_HANDLE
 33898 000050FF 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE	;;AN000;; Was there a handle specified?
 33899 00005102 7409                    	je	short $MIF112 ; *  ; cf = 0
 33900 00005104 39C8                    	cmp	ax,cx				;;AN001;; Was it ALL written?
 33901 00005106 7405                    	je	short $MIF113 ; ** ; cf = 0
 33902 00005108 E8A700                  	call	$M_GET_EXT_ERR_39		;;AN001;; Set Extended error
 33903                                  	;add	sp,6				;;AN001;; Clean up stack
 33904                                  	;stc					;;AN001;; Flag that there was an error
 33905                                  	; 08/04/2023
 33906 0000510B EBED                    	jmp	short $MEN110 ; ***
 33907                                  	; 08/04/2023
 33908                                  ;$MIF112:
 33909                                  ;$MEN110: ; ****
 33910                                  	;jc	short $MIF117
 33911                                  $MIF112: ; 08/04/2023	; *
 33912                                  $MIF113:	; **
 33913 0000510D 5A                      	pop	dx				;;AN000;; Restore regs
 33914 0000510E 5B                      	pop	bx				;;AN000;;
 33915 0000510F 58                      	pop	ax				;;AN000;;
 33916                                  $MIF117:
 33917 00005110 C3                      	retn
 33918                                  
 33919                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33920                                  ;;
 33921                                  ;;	PROC NAME: $M_DISPLAY_$_STRING
 33922                                  ;;
 33923                                  ;;	FUNCTION:  Will display a $ terminated string
 33924                                  ;;	INPUTS:    ES:DI points to beginning of message text (not the length)
 33925                                  ;;	OUTPUTS:   None
 33926                                  ;;	REGS USED: AX,DX
 33927                                  ;;
 33928                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33929                                  
 33930                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33931                                  
 33932                                  $M_DISPLAY_$_STRING:
 33933 00005111 1E                      	push	ds				;;AN000;;
 33934 00005112 06                      	push	es				;;AN000;;
 33935 00005113 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 33936                                  
 33937                                  	; 08/04/2023
 33938 00005114 B402                    	mov	ah,2 ; DOS_DISP_CHAR
 33939                                  
 33940                                  	;cmp	cx,$M_SINGLE_CHAR		;;AN000;; Is this a single character?
 33941 00005116 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR
 33942 00005119 7518                    	jne	short $MIF119			;;AN000;; No
 33943                                  	
 33944                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 33945 0000511B 268A15                  	mov	dl,[es:di]			;;AN000;; Get the character
 33946 0000511E CD21                    	int	21h				;;AN000;; Write character
 33947                                  		; DOS - DISPLAY OUTPUT
 33948                                  		; DL = character to send to standard output
 33949 00005120 1F                      	pop	ds				;;AN000;;
 33950 00005121 88D0                    	mov	al,dl				;;AN000;; Get the character in AL
 33951 00005123 E8AC00                  	call	$M_IS_IT_DBCS 			;;AN000;; Is this the first byte of a DB character
 33952 00005126 1E                      	push	ds				;;AN000;;
 33953 00005127 06                      	push	es				;;AN000;;
 33954 00005128 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 33955 00005129 7316                    	jnc	short $MIF120 ; *
 33956                                  
 33957 0000512B 268A5501                	mov	dl,[es:di+1]			;;AN000;; Get the next character
 33958 0000512F CD21                    	int	21h				;;AN000;; Write character
 33959                                  		; DOS - DISPLAY OUTPUT
 33960                                  		; DL = character to send to standard output
 33961                                  	; 08/04/2023
 33962                                  	;clc					;;AN000;; Clear the DBCS indicator
 33963                                  ;$MIF120:
 33964 00005131 EB0D                    	jmp	short $MEN119
 33965                                  $MIF119:
 33966                                  	; 08/04/2023
 33967                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 33968                                  ;$MDO123:
 33969 00005133 09C9                    	or	cx,cx				;;AN002;; Are there any left to display?
 33970                                  	;jz	short $MEN123
 33971                                  	; 18/04/2023
 33972 00005135 740A                    	jz	short $MIF120 ; cf = 0
 33973                                  $MDO123: ; 08/04/2023
 33974 00005137 268A15                  	mov	dl,[es:di]			;;AN002;; Get the character
 33975 0000513A CD21                    	int	21h				;;AN002;; Display the character
 33976                                  		; DOS - DISPLAY OUTPUT
 33977                                  		; DL = character to send to standard output
 33978 0000513C 47                      	inc	di				;;AN002;; Set pointer to next character
 33979 0000513D 49                      	dec	cx				;;AN002;; Count this character
 33980 0000513E 75F7                    	jnz	short $MDO123
 33981                                  ;$MEN123:
 33982                                  $MEN119:
 33983 00005140 F8                      	clc					;;AN000;;Char functions used don't return carry as error
 33984                                  $MIF120: ; 08/04/2023 ; *
 33985 00005141 1F                      	pop	ds				;;AN000;;
 33986 00005142 C3                      	retn
 33987                                  
 33988                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33989                                  ;;
 33990                                  ;; Scan_ctrlZ: This routine looks through the string to be printed and 
 33991                                  ;; truncates it at the Ctrl-Z if any present.
 33992                                  ;;
 33993                                  ;;	ENTRY:	ds:dx = String to be displayed
 33994                                  ;;		cx = number of chars to be displayed
 33995                                  ;;
 33996                                  ;;	EXIT:	cx = number of chars to be displayed
 33997                                  ;;
 33998                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33999                                  
 34000                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34001                                  scan_ctrlz:
 34002 00005143 57                      	push	di
 34003 00005144 50                      	push	ax
 34004 00005145 06                      	push	es
 34005 00005146 53                      	push	bx
 34006                                  
 34007 00005147 89D7                    	mov	di,dx
 34008 00005149 1E                      	push	ds
 34009 0000514A 07                      	pop	es   			;es:di points at string
 34010                                  
 34011 0000514B 89CB                    	mov	bx,cx			;save current count
 34012                                  
 34013 0000514D B01A                    	mov	al,1Ah	; Ctrl-Z
 34014 0000514F FC                      	cld
 34015 00005150 F2AE                    	repne	scasb			;find first Ctrl-Z
 34016 00005152 7503                    	jnz	short noCtrlZ		;no CtrlZ found in string
 34017                                  
 34018 00005154 29CB                    	sub	bx,cx
 34019 00005156 4B                      	dec	bx			;bx = new count to display
 34020                                  noCtrlZ:
 34021 00005157 89D9                    	mov	cx,bx			;cx = actual display count
 34022                                  
 34023 00005159 5B                      	pop	bx
 34024 0000515A 07                      	pop	es
 34025 0000515B 58                      	pop	ax
 34026 0000515C 5F                      	pop	di
 34027                                  $MIF127:	; 08/04/2023
 34028 0000515D C3                      	retn
 34029                                  
 34030                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34031                                  ;;
 34032                                  ;;	PROC NAME: $M_DISPLAY_H_STRING
 34033                                  ;;
 34034                                  ;;	FUNCTION:  Will display a string to a specified handle
 34035                                  ;;	INPUTS:    ES:DI points to beginning of message
 34036                                  ;;		   CX contains the number of bytes to write
 34037                                  ;;		   BX contains the handle to write to
 34038                                  ;;	OUPUTS:    None
 34039                                  ;;	REGS USED: AX,DX
 34040                                  ;;
 34041                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34042                                  
 34043                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34044                                  
 34045                                  $M_DISPLAY_H_STRING:
 34046 0000515E 31C0                    	xor	ax,ax			;;AN002;; Set number of bytes written to 0
 34047 00005160 09C9                    	or	cx,cx			;;AN002;; For performance, don't write if not necessary
 34048 00005162 74F9                    	jz	short $MIF127
 34049                                  	
 34050 00005164 1E                      	push	ds			;;AN000;;
 34051 00005165 06                      	push	es			;;AN000;;
 34052 00005166 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34053                                  	
 34054 00005167 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 34055 00005169 89FA                    	mov	dx,di			;;AN000;; Pointer to data to write
 34056                                  
 34057 0000516B 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR	;;AN000;; Is this a single character?
 34058 0000516E 7528                    	jne	short $MIF128		;;AN000;; No
 34059                                  
 34060 00005170 CD21                    	int	21h			;;AN000;; Write character
 34061                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 34062                                  		; BX = file handle, CX = number of bytes to writ
 34063                                  
 34064 00005172 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34065 00005173 50                      	push	ax			;;AN000;;
 34066 00005174 268A05                  	mov	al,[es:di] 		;;AN000;; Get the character
 34067 00005177 E85800                  	CALL    $M_IS_IT_DBCS		;;AN000;; Is this the first byte of a DB character
 34068 0000517A 58                      	pop	ax			;;AN000;;
 34069 0000517B 1E                      	push	ds			;;AN000;;
 34070 0000517C 06                      	push	es			;;AN000;;
 34071 0000517D 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 34072 0000517E 7306                    	jnc	short $MIF129
 34073                                  	
 34074 00005180 F8                      	clc				;;AN000;; Clear the DBCS indicator
 34075 00005181 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 34076 00005183 42                      	inc	dx			;;AN000;; Point to next character
 34077 00005184 CD21                    	int	21h			;;AN000;; Write character
 34078                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 34079                                  		; BX = file handle, CX = number of bytes to write, 
 34080                                  $MIF129:
 34081                                  ;SR;
 34082                                  ; If the single char happened to be a Ctrl-Z, the dos write would return
 34083                                  ;0 chars written making the caller think there was an error writing. To 
 34084                                  ;avoid this, we check if the single char was a Ctrl-Z and if so, return that
 34085                                  ;the char was written, thus fooling the caller.
 34086                                  
 34087 00005186 9C                      	pushf				;save flags
 34088 00005187 26803D1A                	cmp	byte [es:di],1Ah	;is char a Ctrl-Z?
 34089 0000518B 7502                    	jne	short m_popf_j		;no, continue
 34090                                  
 34091 0000518D 89C8                    	mov	ax,cx			;yes, fake as if it was written
 34092                                  m_popf_j:
 34093                                  	; 08/04/2023
 34094                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 34095 0000518F EB01                    	jmp	short m_popf		;restore flags
 34096                                  
 34097                                  ; 07/04/2023
 34098                                  ; ---------------------------
 34099                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 34100                                  ; ---------------------------
 34101                                  	; $M_POPF macro
 34102                                  	;jmp	short $+3
 34103                                  intret:
 34104 00005191 CF                      	iret
 34105                                  m_popf:
 34106 00005192 0E                      	push	cs
 34107 00005193 E8FBFF                  	call	intret
 34108                                  	;;; end macro	
 34109                                  ; ---------------------------
 34110                                  
 34111 00005196 EB18                    	jmp	short $MEN128
 34112                                  
 34113                                  $MIF128:
 34114                                  ;SR;
 34115                                  ; Prescan the string looking for Ctrl-Z. We terminate the message the moment 
 34116                                  ;we hit a Ctrl-Z. cx will contain the number of characters to be printed.
 34117                                  
 34118 00005198 55                      	push	bp			; M007
 34119 00005199 51                      	push	cx
 34120 0000519A E8A6FF                  	call	scan_ctrlz		;cx = count without Ctrl-Z
 34121 0000519D 89CD                    	mov	bp,cx			;store no ^Z count in bp ;M007
 34122 0000519F 59                      	pop	cx			;get old count back ;M007
 34123                                  	
 34124 000051A0 CD21                    	int	21h			;;AN000;; Write String at DS:SI to handle
 34125                                  	;jnc	short chk_count		;no error, adjust return count
 34126                                  	;jmp	short m_cnt_ok		;error, return with carry set;M007
 34127                                  	; 08/04/2023
 34128 000051A2 720B                    	jc	short m_cnt_ok
 34129                                  ;M007
 34130                                  ; If we are writing to con and there is a Ctrl-Z in the string, the
 34131                                  ;return count will be much less and if this returns to the caller we can get
 34132                                  ;spurious error messages. We check here if the count returned is same as
 34133                                  ;original count or same as the count if we stop at Ctrl-Z. In the second
 34134                                  ;case, we fake it as if all bytes have been written. If the return count
 34135                                  ;does not match either count, then we had some other disk error (such as
 34136                                  ;insufficient disk space) and we pass it through
 34137                                  
 34138                                  chk_count:
 34139 000051A4 39C1                    	cmp	cx,ax			;have all bytes been written?;M007
 34140 000051A6 7407                    	je	short m_cnt_ok		;there was an error writing ;M007
 34141 000051A8 39C5                    	cmp	bp,ax			;count = Ctrl-Z count? ;M007
 34142 000051AA F8                      	clc				;no error either way ;M007
 34143 000051AB 7502                    	jne	short m_cnt_ok		;no, pass it through ;M007
 34144 000051AD 89C8                    	mov	ax,cx			;return old count ;M007
 34145                                  m_cnt_ok:				; M007
 34146 000051AF 5D                      	pop	bp			; M007
 34147                                  $MEN128:
 34148 000051B0 1F                      	pop	ds			;;AN000;;
 34149                                  ;$MIF127: ; 08/04/2023
 34150 000051B1 C3                      	retn
 34151                                  
 34152                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34153                                  ;;
 34154                                  ;;	PROC NAME: $M_GET_EXT_ERR_39
 34155                                  ;;
 34156                                  ;;	FUNCTION:  Will set registers for extended error #39
 34157                                  ;;	INPUTS:    None
 34158                                  ;;	OUPUTS:    AX,BX,CX set
 34159                                  ;;	REGS USED:
 34160                                  ;;
 34161                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34162                                  
 34163                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34164                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:542Dh
 34165                                  $M_GET_EXT_ERR_39:
 34166 000051B2 B82700                  	mov	ax,27h ; EXT_ERR_39	;AN001; Set AX=39
 34167                                  	;mov	bx,(ERROR_CLASS_39 SHR 8) + ACTION_39
 34168 000051B5 BB0400                  	mov	bx,4			;AN001; Set BH=1 BL=4
 34169                                  	;mov	ch,LOCUS_39		;AN001; Set CH=1
 34170 000051B8 B501                    	mov	ch,1			;AN001;
 34171 000051BA C3                      	retn				;AN001;
 34172                                  
 34173                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34174                                  ;;
 34175                                  ;;	PROC NAME: $M_ADD_CRLF
 34176                                  ;;
 34177                                  ;;	FUNCTION:  Will decide whether to display a CRLF
 34178                                  ;;	INPUTS:    DX contains the Input/Class requested
 34179                                  ;;	OUTPUTS:   None
 34180                                  ;;	REGS Revised: CX,ES,DI
 34181                                  ;;
 34182                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34183                                  
 34184                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34185                                  
 34186                                  $M_ADD_CRLF:
 34187                                  	;cmp	dh,0FFh
 34188 000051BB 80FEFF                  	cmp	dh,utility_msg_class	;;AN004;; Is it a utility message?
 34189 000051BE 7411                    	je	short $MIF134		;;AN004;; Yes
 34190 000051C0 F6C680                  	test	dh,80h ; $M_NO_CRLF_MASK ;;AN004;; Are we to supress the CR LF?
 34191 000051C3 750C                    	jnz	short $MIF135
 34192                                  					;;AN004;; No	
 34193 000051C5 1E                      	push	ds			;;AN004;;
 34194 000051C6 07                      	pop	es			;;AN004;; Set ES to data segment
 34195 000051C7 8D3E[0F87]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_CRLF]
 34196                                  	;lea	di,[$M_RT+67]		;;AN004;; Point at CRLF message
 34197 000051CB B90200                  	mov	cx,2 ; $M_CRLF_SIZE	;;AN004;; Set the message size
 34198 000051CE E80BFF                  	call	$M_DISPLAY_STRING	;;AN004;; Display the CRLF
 34199                                  $MIF135:
 34200                                  $MIF134:
 34201 000051D1 C3                      	retn				;;AN004;; Return
 34202                                  
 34203                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34204                                  ;;
 34205                                  ;;	PROC NAME: $M_IS_IT_DBCS
 34206                                  ;;
 34207                                  ;;	FUNCTION:  Will decide whether character is Single or Double Byte
 34208                                  ;;	INPUTS:    AL contains the byte to be checked
 34209                                  ;;	OUTPUTS:   Carry flag = 0 if byte is NOT in DBCS range
 34210                                  ;;		   Carry flag = 1 if byte IS in DBCS range
 34211                                  ;;	REGS USED: All restored
 34212                                  ;;
 34213                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34214                                  
 34215                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34216                                  
 34217                                  $M_IS_IT_DBCS:
 34218 000051D2 06                      	push	es			;;AN000;; Save Extra Segment register
 34219 000051D3 57                      	push	di			;;AN000;; Save DI register
 34220                                  
 34221 000051D4 C43E[0887]              	les	di,[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]
 34222                                  	;les	di,[$M_RT+60]		;;AN000;;
 34223 000051D8 09FF                    	or	di,di			;;AN000;; Was the DBCS vector set?
 34224 000051DA 7417                    	jz	short $MIF138		;;AN000;; No
 34225                                  $MDO139:
 34226 000051DC 26833D00                	cmp	word [es:di],0 ; $M_DBCS_TERM
 34227                                  					;;AN000;; Is this the terminating flag?
 34228 000051E0 F8                      	clc				;;AN000;;
 34229 000051E1 7410                    	jz	short $MEN139
 34230                                  					;;AN000;; No
 34231 000051E3 263A05                  	cmp	al,[es:di]		;;AN000;; Does the character fall in the DBCS range?
 34232 000051E6 7207                    	jnae	short $MIF141 ; jb	;;AN000;; No		
 34233 000051E8 263A4501                	cmp	al,[es:di+1]		;;AN000;; Does the character fall in the DBCS range?
 34234 000051EC 7701                    	jnbe	short $MIF141 ; ja	;;AN000;; No
 34235                                  					;;AN000;; Yes
 34236 000051EE F9                      	stc				;;AN000;; Set carry flag
 34237                                  $MIF141:
 34238 000051EF 47                      	inc	di			;;AN000;;
 34239 000051F0 47                      	inc	di			;;AN000;;
 34240 000051F1 EBE9                    	jmp	short $MDO139		;;AN000;; Go to next vector
 34241                                  $MEN139:
 34242                                  $MIF138:
 34243 000051F3 5F                      	pop	di			;;AN000;; Restore DI register
 34244 000051F4 07                      	pop	es			;;AN000;; Restore Extra Segment register
 34245 000051F5 C3                      	retn				;;AN000;; Return
 34246                                  
 34247                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34248                                  ;;
 34249                                  ;;	PROC NAME: $M_CONVERT2ASC
 34250                                  ;;
 34251                                  ;;	FUNCTION: Convert a binary number to a ASCII string
 34252                                  ;;	INPUTS: DX:AX contains the number to be converted
 34253                                  ;;		$M_RT_DIVISOR contains the divisor
 34254                                  ;;	OUTPUTS: CX contains the number of characters
 34255                                  ;;		Top of stack  --> Last character
 34256                                  ;;				     . . .
 34257                                  ;;		Bot of stack  --> First character
 34258                                  ;;	REGS USED:
 34259                                  ;;
 34260                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34261                                  
 34262                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34263                                  	; 15/06/2023
 34264                                  $M_CONVERT2ASC:
 34265 000051F6 8F06[1287]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34266                                  	;pop	word [$M_RT+70]			;;AN000;; Save Return Address
 34267                                  	
 34268 000051FA 31DB                    	xor	bx,bx				;;AN000;; Use BX as a swapping register
 34269 000051FC 93                      	xchg	bx,ax				;;AN000;; Initialize - Low Word in BX
 34270 000051FD 92                      	xchg	ax,dx				;;AN000;;	  - High Word in AX
 34271                                  $MDO145:					;;AN000;; DO UNTIL Low Word becomes zero
 34272 000051FE F736[1687]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34273                                  	;div	word [$M_RT+74]			;;AN000;; Divide High Word by divisor
 34274 00005202 93                      	xchg	bx,ax				;;AN000;; Setup to divide Low Word using remainder
 34275                                  						;;AN000;;  and save reduced High Word in BX
 34276 00005203 F736[1687]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34277                                  	;div	word [$M_RT+74]			;;AN000;; Divide Low Word by divisor
 34278                                  
 34279 00005207 83FA09                  	cmp	dx,9				;;AN000;; Make a digit of the remainder
 34280 0000520A 7605                    	jna	short $MIF146			;;AN000;; 0-9
 34281 0000520C 80C237                  	add	dl,55	; add dl,37h		;;AN000;; Make A to F ASCII
 34282 0000520F EB03                    	jmp	short $MEN146
 34283                                  $MIF146:
 34284 00005211 80C230                  	add	dl,'0'				;;AN000;; Make 0 to 9 ASCII
 34285                                  $MEN146:
 34286 00005214 52                      	push	dx				;;AN000;; Save the digit on the stack
 34287 00005215 41                      	inc	cx				;;AN000;; Count that digit
 34288 00005216 09C0                    	or	ax,ax				;;AN000;; Are we done?
 34289 00005218 7504                    	jnz	short $MLL149			;;AN000;; No
 34290 0000521A 09DB                    	or	bx,bx				;;AN000;; AX and BX must be ZERO!!
 34291 0000521C 741F                    	jz	short $MEN145 ; * ; ax = 0	;;AN000;; Yes
 34292                                  $MLL149:
 34293 0000521E 83F903                  	cmp	cx,3 ; $M_FIRST_THOU		;;AN000;; Are we at the first thousands mark
 34294                                  ; 28/04/2023
 34295 00005221 740A                    	je	short $MIF153
 34296                                  ;	jne	short $MIF150			;;AN000;; No
 34297                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34298                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','
 34299                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34300                                  ;	;jne	short $MIF151
 34301                                  ;	; 09/04/2023
 34302                                  ;	jne	short $MEN150
 34303                                  ;						;;AN000;; Yes
 34304                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34305                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34306                                  ;	inc	cx				;;AN000;;
 34307                                  ;$MIF151:
 34308                                  ;	jmp	short $MEN150
 34309                                  
 34310                                  $MIF150:
 34311                                  	; 15/06/2023 (6)
 34312                                  	; MSDOS 6.0
 34313                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54ABh 
 34314                                  	;cmp	cx,6 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 34315                                  	; 15/06/2023 (7)
 34316                                  	; MSDOS 6.22
 34317                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C78h 
 34318 00005223 83F907                  	cmp	cx,7 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 34319                                  
 34320                                  ; 28/04/2023
 34321 00005226 7405                    	je	short $MIF153
 34322                                  ;	jne	short $MIF154			;;AN000;; No
 34323                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34324                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','
 34325                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34326                                  ;	;jne	short $MIF155			;;AN000;; No
 34327                                  ;	; 09/04/2023
 34328                                  ;	jne	short $MEN154
 34329                                  ;						;;AN000;; Yes
 34330                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34331                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34332                                  ;	inc	cx				;;AN000;;
 34333                                  ;$MIF155:
 34334                                  ;	jmp	short $MEN154
 34335                                  
 34336                                  $MIF154:
 34337                                  	; 15/06/2023 (9)
 34338                                  	; MSDOS 6.0
 34339                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54BDh
 34340                                  	;cmp	cx,9 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34341                                  	; 15/06/2023 (11)
 34342                                  	; MSDOS 6.22
 34343                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C8Ah 
 34344 00005228 83F90B                  	cmp	cx,11 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34345 0000522B 750B                    	jne	short $MIF158			;;AN000;; No
 34346                                  ; 28/04/2023
 34347                                  $MIF153:
 34348                                  	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34349 0000522D 807C0A2C                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','
 34350                                  	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34351 00005231 7505                    	jne	short $MIF159			;;AN000;; No
 34352                                  						;;AN000;; Yes
 34353 00005233 FF36[1F87]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34354                                  	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34355 00005237 41                      	inc	cx				;;AN000;;
 34356                                  $MIF159:
 34357                                  $MIF158:
 34358                                  $MEN154:
 34359                                  $MEN150:					;;AN000;;
 34360 00005238 93                      	xchg	ax,bx				;;AN000;; Setup to divide the reduced High Word
 34361                                  						;;AN000;;  and Revised Low Word
 34362 00005239 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34363                                  	; 28/04/2023
 34364 0000523B EBC1                    	jmp	short $MDO145
 34365                                  ;$MEN145:
 34366                                  	; 28/04/2023
 34367                                  	;xor	ax,ax				;;AN000;; Reset remainder
 34368                                  $MEN145: ; 09/04/2023 ; * ; ax = 0
 34369 0000523D 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34370 0000523F FF36[1287]              	push	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34371                                  	;push	word [$M_RT+70]			;;AN000;; Restore Return Address
 34372 00005243 C3                      	retn					;;AN000;; Return
 34373                                  
 34374                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34375                                  ;;
 34376                                  ;;	PROC NAME: $M_DISPLAY_MESSAGE
 34377                                  ;;
 34378                                  ;;	FUNCTION:  Will display or write entire message (with replacable parameters)
 34379                                  ;;	INPUTS:    ES:DI points to beginning of message
 34380                                  ;;		   DS:SI points to first sublist structure in chain
 34381                                  ;;		   BX contains the handle to write to (if applicable)
 34382                                  ;;		   CX contains the length of string to write (before substitutions)
 34383                                  ;;		   BP contains the count of replacables
 34384                                  ;;
 34385                                  ;;	OUTPUTS:
 34386                                  ;;	REGS USED: All
 34387                                  ;;
 34388                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34389                                  
 34390                                  	; 10/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34391                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54DBh
 34392                                  
 34393                                  $M_DISPLAY_MESSAGE:
 34394                                  ; $DO						;;AN000;; Note: DS:SI -> message
 34395                                  $MDO165:
 34396 00005244 31D2                    	xor	dx,dx				;;AN000;; Set size = 0
 34397 00005246 09C9                    	or	cx,cx				;;AN000;; Are we finished the message yet?
 34398                                  ;; $IF NZ					;;AN000;; No
 34399 00005248 741F                    	jz	short $MIF166			;;AN000;; Yes
 34400                                  	;mov	ah,"%"				;;AN000;; Prepare to scan for %
 34401                                  	;mov	al,0				;;AN004;;
 34402                                  	; 12/08/2024
 34403 0000524A B80025                  	mov	ax,2500h
 34404                                  ;; $DO						;;AN000;; Scan through string until %
 34405                                  $MDO167:
 34406 0000524D 263825                  	cmp	byte [es:di],ah			;;AN000;; Is this character NOT a %
 34407                                  ;; $LEAVE E,AND					;;AN000;; No
 34408 00005250 750A                    	jne	short $MLL168
 34409 00005252 26386501                	cmp	byte [es:di+1],ah		;;AN000;; Is the next character also a %
 34410                                  ;; $LEAVE NE,AND				;;AN000;; No
 34411 00005256 7404                    	je	short $MLL168
 34412                                  
 34413 00005258 38E0                    	cmp	al,ah				;;AN000;; Was the character before a %
 34414                                  ;; $LEAVE NE					;;AN000;; No, GREAT found it
 34415 0000525A 750D                    	jne	short $MEN167 ; 12/08/2024
 34416                                  $MLL168:
 34417 0000525C 268A05                  	mov	al,[es:di]			;;AN004;; Yes, (to any of the above)
 34418 0000525F E870FF                  	call	$M_IS_IT_DBCS			;;AN004;; Is this character the first part of a DBCS?
 34419                                  ;;; $IF C					;;AN004;; Yes
 34420 00005262 7301                    	jnc	short $MIF169
 34421 00005264 47                      	inc	di				;;AN004;; Increment past second part
 34422                                  ;;; $ENDIF					;;AN004;;
 34423                                  $MIF169:
 34424 00005265 47                      	inc	di				;;AN000;; Next character in string
 34425 00005266 42                      	inc	dx				;;AN000;; Size = Size + 1
 34426                                  	;dec	cx				;;AN000;; Decrement total size
 34427                                  ;; $ENDDO Z					;;AN000;; Exit scan if we're at the end of the line
 34428                                  	;jnz	short $MDO167
 34429                                  	; 12/08/2024
 34430 00005267 E2E4                    	loop	$MDO167
 34431                                  $MEN167:
 34432                                  ;; $ENDIF					;;AN000;;
 34433                                  $MIF166:
 34434 00005269 56                      	push	si				;;AN000;; Save beginning of sublists
 34435 0000526A 87CA                    	xchg	cx,dx				;;AN000;; Get size of message to display (tot sz in DX)
 34436 0000526C 09ED                    	or	bp,bp				;;AN000;; Do we have any replacables to do?
 34437                                  ;; $IF NZ					;;AN000;; Yes
 34438 0000526E 7431                    	jz	short $MIF173
 34439 00005270 4D                      	dec	bp				;;AN000;; Decrement number of replacables
 34440                                  
 34441                                  ;; Search through sublists to find applicable one
 34442                                  
 34443 00005271 833E[1487]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34444                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34445                                  ;;; $IF E					;;AN000;; No
 34446 00005276 7529                    	jne	short $MIF174
 34447                                  ;;; $SEARCH					;;AN000;;
 34448                                  $MDO175:
 34449                                  	;mov	al,$M_SL.$M_S_ID ;$M_SL=DS:[SI]	;;AN000;; Get ID byte
 34450 00005278 8A4406                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_ID]
 34451                                  	;mov	al,[si+6]
 34452 0000527B 0430                    	add	al,30h				;;AN000;; Convert to ASCII
 34453                                  	; 28/04/2023					
 34454 0000527D 263A4501                	cmp	al,[es:di+1]			;;AN000;; Is this the right sublist?
 34455                                  ;;; $EXITIF E					;;AN000;;
 34456                                  	;jne	short $MIF175
 34457                                  ;;; $ORELSE					;;AN000;; No
 34458                                  	;jmp	short $MSR175
 34459                                  	; 28/04/2023
 34460 00005281 741E                    	je	short $MSR175
 34461                                  $MIF175:
 34462 00005283 3C30                    	cmp	al,30h ; $M_SPECIAL_CASE	;;AN000;; Does this sublist have ID = 0
 34463                                  ;;; $LEAVE E,AND				;;AN000;; Yes
 34464 00005285 7504                    	jne	short $MLL178
 34465 00005287 09D2                    	or	dx,dx				;;AN000;; Are we at the end of the message?
 34466                                  ;;; $LEAVE Z					;;AN000;; No
 34467 00005289 7404                    	jz	short $MEN175
 34468                                  $MLL178:
 34469                                  	;add	si,$M_SL.$M_S_SIZE		;;AN000;; Next SUBLIST
 34470                                  	;add	si,[si+$M_SUBLIST_STRUC.$M_S_SIZE] ; [si+0]
 34471                                  	;;add	si,[si+0]
 34472 0000528B 0334                    	add	si,[si]
 34473                                  ;;; ENDLOOP					;;AN000;; Yes
 34474 0000528D EBE9                    	jmp	short $MDO175
 34475                                  $MEN175:
 34476 0000528F 803E[1187]FF            	cmp	byte [$M_RT+$M_RES_ADDRS.$M_CLASS],utility_msg_class
 34477                                  	;cmp	byte [$M_RT+69],0FFh		;;AN004;; Is it a utility message?
 34478                                  ;;;; $IF E					;;AN004;; Yes
 34479 00005294 7508                    	jne	short $MIF180
 34480 00005296 42                      	inc	dx				;;AN000;; Remember to display CR,LF
 34481 00005297 42                      	inc	dx				;;AN000;;  at the end of the message
 34482 00005298 49                      	dec	cx				;;AN000;; Adjust message length
 34483 00005299 49                      	dec	cx				;;AN000;;
 34484 0000529A 4F                      	dec	di				;;AN000;; Adjust ending address of message
 34485 0000529B 4F                      	dec	di				;;AN000;;
 34486                                  ;;;; $ELSE					;;AN004;; No
 34487 0000529C EB03                    	jmp	short $MEN180
 34488                                  $MIF180:
 34489 0000529E BAFFFF                  	mov	dx,-1 				;;AN004;; Set special case
 34490                                  ;;;; $ENDIF					;;AN004;;
 34491                                  $MEN180:
 34492                                  ;;; $ENDSRCH					;;AN000;;
 34493                                  $MSR175:
 34494                                  ;; $ENDIF					;;AN000;;
 34495                                  $MIF174:
 34496                                  ; $ENDIF					;;AN000;;
 34497                                  $MIF173:
 34498                                  ;; Prepare and display this part of message
 34499                                  
 34500 000052A1 57                      	push	di				;;AN000;; Save pointer to replace number
 34501 000052A2 29CF                    	sub	di,cx				;;AN000;; Determine beginning of string
 34502 000052A4 E835FE                  	call	$M_DISPLAY_STRING		;;AN000;; Display string until % (or end)
 34503 000052A7 5F                      	pop	di				;;AN000;; Get back pointer to replace number
 34504 000052A8 59                      	pop	cx				;;AN000;; Clean up stack in case error
 34505                                  ; $LEAVE C,LONG					;;AN000;; Fail if carry was set
 34506                                  	;jnc	short $MXL3
 34507                                  	;jmp	$MEN165
 34508                                  	; 02/05/2023
 34509 000052A9 7214                    	jc	short $MEN165
 34510                                  $MXL3:
 34511 000052AB 51                      	push	cx				;;AN000;;
 34512                                  
 34513                                  ;; Save and reset pointer registers
 34514                                  
 34515 000052AC 89D1                    	mov	cx,dx				;;AN000;; Get the size of the rest of the message
 34516                                  	;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h
 34517 000052AE 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0 ; $M_SPECIAL_CASE-30h
 34518                                  	;cmp	byte [si+6],0 			;;AN000;; Is this the %0 case?
 34519                                  ; $IF NE					;;AN000;; No
 34520 000052B2 7412                    	je	short $MIF187			;;AN000;; Yes			
 34521 000052B4 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 34522                                  ;; $IF NZ					;;AN000;; No
 34523 000052B6 7406                    	jz	short $MIF188			;;AN000;; Yes
 34524 000052B8 49                      	dec	cx				;;AN000;; Decrement total size (%)
 34525 000052B9 49                      	dec	cx				;;AN000;; Decrement total size (#)
 34526 000052BA 47                      	inc	di				;;AN000;; Go past %
 34527 000052BB 47                      	inc	di				;;AN000;; Go past replace number
 34528                                  ;; $ELSE					;;AN000;; Yes, (Note this will not leave because INC)
 34529                                  	;jmp	short $MEN188
 34530                                  	; 28/04/2023
 34531 000052BC EB15                    	jmp	short $MEN187
 34532                                  $MIF188:
 34533 000052BE 5E                      	pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 34534                                  ;; $ENDIF					;;AN000;; Yes, Note this will not leave because INC
 34535                                  $MEN188:
 34536                                  ; $ELSE 					;;AN000;;
 34537                                  	;jmp	short $MEN187
 34538                                  	; 28/04/2023
 34539                                  	; zf = 1
 34540                                  	;jmp	short $MEN165 
 34541                                  
 34542                                  ; 28/04/2023
 34543                                  $MXL4:
 34544                                  $MLL214:
 34545                                  $MEN165:
 34546 000052BF C706[1487]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 34547                                  	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 34548                                  						;;AN000;; Reset message number to null
 34549 000052C5 C3                      	retn					;;AN000;; Return
 34550                                  
 34551                                  $MIF187:
 34552 000052C6 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 34553                                  ;; $IF Z					;;AN004;; No
 34554                                  	;jnz	short $MIF192
 34555                                  	;pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 34556                                  ;; $ELSE					;;AN000;; No
 34557                                  	;jmp	short $MEN192
 34558                                  	; 28/04/2023
 34559 000052C8 74F4                    	jz	short $MIF188
 34560                                  $MIF192:
 34561 000052CA 83F9FF                  	cmp	cx,-1				;;AN004;; Are we at the end of the message?
 34562                                  ;;; $IF Z					;;AN004;; No
 34563 000052CD 7502                    	jnz	short $MIF194
 34564 000052CF 31C9                    	xor	cx,cx				;;AN004;;
 34565                                  ;;; $ENDIF					;;AN000;;
 34566                                  $MIF194:
 34567 000052D1 09FF                    	or	di,di				;;AN004;; Turn ZF off
 34568                                  ;; $ENDIF					;;AN000;;
 34569                                  $MEN192:
 34570                                  ; $ENDIF					;;AN000;; Note this will not leave because INC
 34571                                  $MEN187:
 34572                                  ; $LEAVE Z					;;AN000;;
 34573 000052D3 74EA                    	jz	short $MEN165
 34574                                  	;
 34575 000052D5 55                      	push	bp				;;AN000;; Save the replace count
 34576 000052D6 57                      	push	di				;;AN000;; Save location to complete message
 34577 000052D7 06                      	push	es				;;AN000;;
 34578 000052D8 51                      	push	cx				;;AN000;; Save size of the rest of the message
 34579 000052D9 31C9                    	xor	cx,cx				;;AN000;; Reset CX used for character count
 34580                                  
 34581                                  ;; Determine what action is required on parameter
 34582                                  
 34583 000052DB 833E[1487]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34584                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34585                                  ; $IF E						;;AN000;;
 34586 000052E0 753B                    	jne	short $MIF199
 34587                                  
 34588                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 34589 000052E2 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 34590                                  	;test	byte [si+7],0Fh			;;AN000;;
 34591                                  ;; $IF Z					;;AN000;;
 34592 000052E6 7508                    	jnz	short $MIF200
 34593                                  
 34594                                  ;; Character type requested
 34595                                  
 34596                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 34597 000052E8 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 34598                                  	;les	di,[si+2]
 34599 000052EB E84801                  	call	$M_CHAR_REPLACE			;;AN000;;
 34600                                  ;; $ELSE					;;AN000;; Get the rest of the message to display
 34601 000052EE EB28                    	jmp	short $MEN200
 34602                                  $MIF200:
 34603                                  ;; ENDIF					;;AN000;;
 34604                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 34605 000052F0 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 34606                                  	;test	byte [si+7],0Dh			;;AN000;;
 34607                                  ;; $IF Z,OR					;;AN000;;
 34608 000052F4 740C                    	jz	short $MLL202
 34609                                  	;test	byte ptr $M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK
 34610 000052F6 F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 34611                                  	;test	byte [si+7],0Eh			;;AN000;;
 34612                                  ;;; $IF Z,OR					;;AN000;;
 34613 000052FA 7406                    	jz	short $MLL202
 34614                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Bin_Hex_Type and $M_TYPE_MASK
 34615 000052FC F644070C                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Ch
 34616                                  	;test	byte [si+7],0Ch			;;AN000;;
 34617                                  ;;;; $IF Z 					;;AN000;;
 34618 00005300 7508                    	jnz	short $MIF202
 34619                                  $MLL202:
 34620                                  
 34621                                  ;; Numeric type requested
 34622                                  
 34623                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 34624 00005302 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 34625 00005305 E85601                  	call	$M_BIN2ASC_REPLACE		;;AN000;;
 34626                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 34627 00005308 EB0E                    	jmp	short $MEN202
 34628                                  $MIF202:
 34629                                  ;;;; ENDIF					;;AN000;;
 34630                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Date_Type and $M_TYPE_MASK
 34631 0000530A F644070B                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Bh
 34632                                  	;test	byte [si+7],0Bh			;;AN000;;
 34633                                  ;;;; $IF E					;;AN000;;
 34634 0000530E 7505                    	jnz	short $MIF204
 34635                                  
 34636                                  ;; Date type requested
 34637                                  
 34638 00005310 E8BE01                  	call	$M_DATE_REPLACE			;;AN000;;
 34639                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 34640 00005313 EB03                    	jmp	short $MEN204
 34641                                  $MIF204:					;;AN000;;
 34642                                  
 34643                                  ;; Time type requested (Default if we have not matched until here)
 34644                                  
 34645 00005315 E87002                  	call	$M_TIME_REPLACE			;;AN000;;
 34646                                  
 34647                                  ;;;; $ENDIF					;;AN000;;
 34648                                  $MEN204:
 34649                                  ;;; $ENDIF					;;AN000;;
 34650                                  $MEN202:
 34651                                  ;; $ENDIF					;;AN000;;
 34652                                  $MEN200:
 34653                                  
 34654                                  ;; With the replace information of the Stack, display the replaceable field
 34655                                  
 34656 00005318 E85F00                  	call	$M_DISPLAY_REPLACE		;;AN000;; Display the replace
 34657                                  
 34658                                  ;; None of the above - Extended/Parse replace
 34659                                  ; $ELSE 					;;AN000;;
 34660 0000531B EB03                    	jmp	short $MEN199
 34661                                  $MIF199:
 34662 0000531D E81600                  	call	$M_EXT_PAR_REPLACE		;;AN000;;
 34663                                  ; $ENDIF					;;AN000;;
 34664                                  $MEN199:
 34665                                  
 34666                                  ;; We must go back and complete the message after the replacable parameter if there is any left
 34667                                  
 34668                                  ; $IF NC					;;AN000;; IF there was an error displaying then EXIT
 34669 00005320 7207                    	jc	short $MIF211
 34670                                  	;
 34671 00005322 59                      	pop	cx				;;AN000;; Get size of the rest of the message
 34672 00005323 07                      	pop	es				;;AN000;; Get address of the rest of the message
 34673 00005324 5F                      	pop	di				;;AN000;;
 34674 00005325 5D                      	pop	bp				;;AN000;; Get replacment count
 34675 00005326 5E                      	pop	si				;;AN000;; ELSE get address of first sublist structure
 34676                                  ; $ELSE						;;AN000;;
 34677 00005327 EB03                    	jmp	short $MEN211
 34678                                  $MIF211:
 34679 00005329 83C40A                  	add	sp,10				;;AN000;; Clean up stack if error
 34680                                  	; 28/04/2023
 34681                                  	;stc					;;AN000;;
 34682                                  ; $ENDIF					;;AN000;;
 34683                                  $MEN211:
 34684 0000532C 833E[1487]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34685                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34686                                  ; $ENDDO NE,OR					;;AN000;;
 34687 00005331 758C                    	jne	short $MLL214
 34688                                  ; $ENDDO C,LONG					;;AN000;; Go back and display the rest of the message
 34689                                  	; 10/04/2023
 34690                                  	;jc	short $MXL4
 34691 00005333 E90EFF                  	jmp	$MDO165
 34692                                  
 34693                                  ; 28/04/2023
 34694                                  ;$MXL4:
 34695                                  ;$MLL214:
 34696                                  ;$MEN165:
 34697                                  ;	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 34698                                  ;	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 34699                                  ;						;;AN000;; Reset message number to null
 34700                                  ;	retn					;;AN000;; Return
 34701                                  
 34702                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34703                                  ;;
 34704                                  ;;	PROC NAME: $M_EXT_PAR_REPLACE
 34705                                  ;;
 34706                                  ;;	FUNCTION:
 34707                                  ;;	INPUTS:
 34708                                  ;;	OUPUTS:
 34709                                  ;;
 34710                                  ;;	REGS USED:
 34711                                  ;;
 34712                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34713                                  
 34714                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34715                                  
 34716                                  $M_EXT_PAR_REPLACE:
 34717 00005336 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 34718 00005338 A1[1487]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 34719                                  	;mov	ax,[$M_RT+72]			;;AN000;; Prepare for get binary value (LOW)
 34720 0000533B C706[1687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 34721                                  	;mov	word [$M_RT+74],10 ; $M_BASE10	;;AN000;; Set default divisor
 34722 00005341 E8B2FE                  	call	$M_CONVERT2ASC			;;AN000;;
 34723                                  $MDO215:
 34724 00005344 58                      	pop	ax				;;AN000;; Get character in register
 34725 00005345 8887[1887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 34726                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 34727 00005349 43                      	inc	bx				;;AN000;; Increase buffer count
 34728 0000534A 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 34729 0000534D 7503                    	jne	short $MIF216			;;AN000;; No
 34730 0000534F E80D00                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34731                                  $MIF216:
 34732 00005352 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 34733 00005354 75EE                    	jnz	short $MDO215
 34734                                  
 34735 00005356 B80D0A                  	mov	ax,0A0Dh ; mov ax,$M_CR_LF	;;AN000;; Move char into the buffer
 34736 00005359 8987[1887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],ax
 34737                                  	;;mov	[bx+$M_RT+76],ax		;;AN000;; Move char into the buffer
 34738 0000535D 43                      	inc	bx				;;AN000;; Increase buffer count
 34739 0000535E 43                      	inc	bx				;;AN000;; Increase buffer count
 34740                                  	;call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34741                                  	;retn					;;AN000::
 34742                                  	; 11/04/2023
 34743                                  	;jmp	$M_FLUSH_BUF
 34744                                  
 34745                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34746                                  ;;
 34747                                  ;;	PROC NAME: $M_FLUSH_BUFFER
 34748                                  ;;
 34749                                  ;;	FUNCTION: Display the contents of the temporary buffer
 34750                                  ;;	INPUTS: DI contains the number of bytes to display
 34751                                  ;;	OUTPUTS: BX reset to zero
 34752                                  ;;
 34753                                  ;;	REGS USED:
 34754                                  ;;
 34755                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34756                                  	
 34757                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34758                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:56C8h
 34759                                  
 34760                                  $M_FLUSH_BUF:
 34761 0000535F 51                      	push	cx				;;AN000;; Save changed regs
 34762 00005360 06                      	push	es				;;AN000;;
 34763 00005361 57                      	push	di				;;AN000;;
 34764 00005362 1E                      	push	ds				;;AN000;; Set ES pointing to buffer
 34765 00005363 07                      	pop	es				;;AN000;;
 34766 00005364 89D9                    	mov	cx,bx				;;AN000;; Set number of bytes to display
 34767 00005366 31DB                    	xor	bx,bx				;;AN000;; Reset buffer counter
 34768 00005368 8D3E[1887]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 34769                                  	;lea	di,[$M_RT+76]			;;AN000;; Reset buffer location pointer
 34770 0000536C E86DFD                  	call	$M_DISPLAY_STRING		;;AN000;; Display the buffer
 34771 0000536F 7204                    	jc	short $MIF314
 34772 00005371 5F                      	pop	di				;;AN000;; No, Restore changed regs
 34773 00005372 07                      	pop	es				;;AN000;;
 34774 00005373 59                      	pop	cx				;;AN000;;
 34775                                  	;jmp	short $MEN314
 34776                                  	; 11/04/2023
 34777 00005374 C3                      	retn
 34778                                  $MIF314:
 34779 00005375 83C406                  	add	sp,6				;;AN000;; Fix stack
 34780 00005378 F9                      	stc					;;AN000;;
 34781                                  $MEN314:
 34782 00005379 C3                      	retn					;;AN000;; Return
 34783                                  
 34784                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34785                                  ;;
 34786                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34787                                  
 34788                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34789                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5609h
 34790                                  
 34791                                  $M_DISPLAY_REPLACE:
 34792 0000537A 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 34793                                  	;;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h ; 0
 34794 0000537C 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0	
 34795                                  	;cmp	byte [si+6],0			;;AN000;; Is this the special case (convert to ASCII)
 34796 00005380 7511                    	jne	short $MIF276
 34797                                  	
 34798 00005382 C787[1887]202D          	mov	word [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],2D20h ; $M_SPACE_HYP
 34799                                  	;mov	word [bx+$M_RT+76],2D20h	;;AN000;; Move in a " -"
 34800                                  	
 34801 00005388 43                      	inc	bx				;;AN000;; Increment count
 34802 00005389 43                      	inc	bx				;;AN000;; Increment count
 34803                                  	
 34804 0000538A C687[1887]20            	mov	byte [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],20h; $M_SPACE
 34805                                  	;mov	byte [bx+$M_RT+76],20h		;;AN000;; Move in a " "
 34806                                  	
 34807 0000538F 43                      	inc	bx				;;AN000;; Increment count
 34808 00005390 E8CCFF                  	call	$M_FLUSH_BUF			;;AN000;; Write out " - " to prepare for special case
 34809                                  $MIF276:
 34810 00005393 5D                      	pop	bp				;;AN000;; Remember the return address
 34811 00005394 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 34812 00005396 31D2                    	xor	dx,dx				;;AN000;; Use DX for count of parms taken off the stack
 34813                                  
 34814 00005398 880E[0E87]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl	;;AN000;; Save size to later clear stack
 34815                                  	;mov	[$M_RT+66],cl
 34816                                  	
 34817                                  	;mov	al,byte ptr $M_SL.$M_S_MINW	;;AN000;; Get the minimum width
 34818 0000539C 8A4409                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_MINW]
 34819                                  	;mov	al,[si+9]
 34820                                  	
 34821 0000539F 38C8                    	cmp	al,cl				;;AN000;; Do we need pad chars added?
 34822 000053A1 761E                    	jna	short $MIF278
 34823 000053A3 28C8                    	sub	al,cl				;;AN000;; Calculate how many pad chars are needed.
 34824 000053A5 88C6                    	mov	dh,al				;;AN000;; Save the number of pad characters
 34825                                  	
 34826                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 34827 000053A7 F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 34828                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be right aligned?
 34829 000053AB 7414                    	jz	short $MIF279			;;AN000;; No
 34830                                  $MDO280:
 34831                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 34832 000053AD 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 34833                                  	;mov	al,[si+0Ah]
 34834 000053B0 8887[1887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 34835                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 34836                                  	
 34837 000053B4 43                      	inc	bx				;;AN000;;
 34838 000053B5 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; 64		;;AN000;; Is buffer full?
 34839 000053B8 7503                    	jne	short $MIF281
 34840 000053BA E8A2FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34841                                  $MIF281:
 34842 000053BD FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 34843 000053BF 75EC                    	jnz	short $MDO280
 34844                                  $MIF279:
 34845                                  $MIF278:
 34846                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,$M_UNLIM_W
 34847 000053C1 807C0800                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],0 ; $M_UNLIM_W
 34848                                  	;cmp	byte [si+8],0			;;AN000;; Is maximum width unlimited
 34849 000053C5 740C                    	je	short $MIF286
 34850                                  	
 34851                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,CL	;;AN000;; Will we exceed maximum width?
 34852 000053C7 384C08                  	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],cl
 34853                                  	;;cmp	byte [si+8],cl
 34854 000053CA 7307                    	jnb	short $MIF287
 34855                                  
 34856                                  	; 03/05/2023
 34857                                  	;;sub	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Calculate how many extra chars
 34858                                  	;sub	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 34859                                  	;;sub	cl,[si+8]
 34860 000053CC 88CA                    	mov	dl,cl				;;AN000;; Remember how many chars to pop off
 34861                                  	;;mov	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Set new string length
 34862                                  	;mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 34863                                  	;;mov	cl,[si+8]
 34864                                  	; 03/05/2023
 34865 000053CE 8A4C08                  	mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 34866 000053D1 28CA                    	sub	dl,cl
 34867                                  $MIF287:
 34868                                  $MIF286:
 34869 000053D3 09C9                    	or	cx,cx				;;AN000;;
 34870 000053D5 7424                    	jz	short $MIF290			;;AN000;;
 34871                                  $MDO291:
 34872                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type not $M_TYPE_MASK
 34873 000053D7 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 34874                                  	;test	byte [si+7],0Fh			;;AN000;;
 34875 000053DB 750C                    	jnz	short $MIF292
 34876                                  
 34877                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 34878 000053DD F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 34879                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?			 
 34880 000053E1 7406                    	jz	short $MIF292			;;AN000;; No
 34881                                  
 34882 000053E3 268A05                  	mov	al,[es:di]			;;AN000;; Get first character from string
 34883 000053E6 47                      	inc	di				;;AN000;; Next character in string
 34884 000053E7 EB01                    	jmp	short $MEN292
 34885                                  $MIF292:
 34886 000053E9 58                      	pop	ax				;;AN000;; Get character in register
 34887                                  $MEN292:
 34888                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 34889 000053EA 8887[1887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 34890                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 34891                                  	; 03/05/2023
 34892 000053EE 43                      	inc	bx				;;AN000;; Increase buffer count
 34893 000053EF 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 34894 000053F2 7503                    	jne	short $MIF295			;;AN000;;
 34895 000053F4 E868FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34896                                  $MIF295:
 34897 000053F7 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 34898 000053F9 75DC                    	jnz	short $MDO291
 34899                                  $MIF290:
 34900                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 34901 000053FB F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 34902                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be left aligned?
 34903 000053FF 7518                    	jnz	short $MIF299			;;AN000;; Yes
 34904 00005401 08F6                    	or	dh,dh				;;AN000;; Do we need pad chars added?
 34905 00005403 7414                    	jz	short $MIF300
 34906                                  $MDO301:
 34907                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 34908 00005405 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 34909                                  	;mov	al,[si+0Ah]
 34910                                  
 34911                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 34912 00005408 8887[1887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 34913                                  	; 03/05/2023
 34914                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 34915                                  
 34916 0000540C 43                      	inc	bx				;;AN000;;
 34917 0000540D 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ  ; 64		;;AN000;; Is buffer full?
 34918 00005410 7503                    	jne	short $MIF302			;;AN000;; No
 34919                                  						;;AN000;; Yes
 34920 00005412 E84AFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34921                                  $MIF302:
 34922 00005415 FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 34923 00005417 75EC                    	jnz	short $MDO301			;;AN000;;
 34924                                  $MIF300:
 34925                                  $MIF299:
 34926                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 34927 00005419 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 34928                                  	;test	byte [si+7],0Fh			;;AN000;;
 34929 0000541D 7506                    	jnz	short $MIF307
 34930                                  	
 34931                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 34932 0000541F F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 34933                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?
 34934                                  	; 11/04/2023
 34935                                  	;jz	short $MIF307			;;AN000;;
 34936                                  	;jmp	short $MEN307			;;AN000;;
 34937 00005423 750C                    	jnz	short $MEN307
 34938                                  $MIF307:
 34939 00005425 08D2                    	or	dl,dl				;;AN000;;
 34940 00005427 7408                    	jz	short $MIF309			;;AN000;;
 34941                                  $MDO310:
 34942 00005429 8F06[1287]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34943                                  	;pop	word [$M_RT+70]			;;AN000;; Clean Up stack using spare variable
 34944 0000542D FECA                    	dec	dl				;;AN000;; Are we done?
 34945 0000542F 75F8                    	jnz	short $MDO310
 34946                                  $MIF309:
 34947                                  $MEN307:
 34948 00005431 E82BFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer for the final time
 34949 00005434 55                      	push	bp				;;AN000;; Restore the return address
 34950 00005435 C3                      	retn					;;AN000;;
 34951                                  
 34952                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34953                                  ;;
 34954                                  ;;	PROC NAME: $M_CHAR_REPLACE
 34955                                  ;;
 34956                                  ;;	FUNCTION: Will prepare a single char or ASCIIZ string for replace
 34957                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 34958                                  ;;		ES:DI contains the VALUE from SUBLIST
 34959                                  ;;	OUTPUTS: CX contains number of characters on stack
 34960                                  ;;		 Top of stack  --> Last character
 34961                                  ;;					. . .
 34962                                  ;;		 Bot of stack  --> First character
 34963                                  ;;
 34964                                  ;;	OTHER REGS Revised: AX
 34965                                  ;;
 34966                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34967                                  
 34968                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34969                                  
 34970                                  $M_CHAR_REPLACE:
 34971 00005436 5D                      	pop	bp				;;AN000;; Save return address
 34972                                  	;test	$M_SL.$M_S_FLAG,not Char_Field_Char and $M_SIZE_MASK
 34973 00005437 F6440730                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],30h
 34974                                  	;test	byte [si+7],30h			;;AN000;; Was Character specified?
 34975 0000543B 7512                    	jnz	short $MIF317			;;AN000;; No
 34976 0000543D 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 34977 00005440 50                      	push	ax				;;AN000;; Put it on the stack
 34978 00005441 41                      	inc	cx				;;AN000;; Increase the count
 34979 00005442 E88DFD                  	call	$M_IS_IT_DBCS			;;AN000;; Is this the first byte of a DB character
 34980 00005445 7306                    	jnc	short $MIF318
 34981 00005447 268A4501                	mov	al,[es:di+1]			;;AN000;; Get the next character
 34982 0000544B 50                      	push	ax				;;AN000;; Put it on the stack
 34983 0000544C F8                      	clc					;;AN000;; Clear the carry
 34984                                  $MIF318:
 34985 0000544D EB0D                    	jmp	short $MEN317
 34986                                  $MIF317:
 34987                                  $MDO321:
 34988 0000544F 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 34989 00005452 08C0                    	or	al,al				;;AN000;; Is it the NULL?
 34990 00005454 7404                    	jz	short $MEN321			;;AN000;; Yes
 34991 00005456 47                      	inc	di				;;AN000;; Next character
 34992 00005457 41                      	inc	cx				;;AN000;; Increment the count
 34993 00005458 EBF5                    	jmp	short $MDO321
 34994                                  $MEN321:
 34995 0000545A 29CF                    	sub	di,cx				;;AN000;; Set DI at the beginning of the string
 34996                                  $MEN317:
 34997 0000545C 55                      	push	bp				;;AN000;; Restore return address
 34998 0000545D C3                      	retn					;;AN000;;	
 34999                                  
 35000                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35001                                  ;;
 35002                                  ;;	PROC NAME: $M_BIN2ASC_REPLACE
 35003                                  ;;
 35004                                  ;;	FUNCTION: Convert a signed or unsigned binary number to an ASCII string
 35005                                  ;;		  and prepare to display
 35006                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35007                                  ;;		ES:DI contains the VALUE from SUBLIST
 35008                                  ;;	OUTPUTS: CX contains number of characters on stack
 35009                                  ;;		 Top of stack  --> Last character
 35010                                  ;;					. . .
 35011                                  ;;		 Bot of stack  --> First character
 35012                                  ;;	OTHER REGS Revised: BX,DX,AX
 35013                                  ;;
 35014                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35015                                  
 35016                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35017                                  
 35018                                  $M_BIN2ASC_REPLACE:
 35019 0000545E 5D                      	pop	bp				;;AN000;; Save return address
 35020 0000545F 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 35021 00005461 31C0                    	xor	ax,ax				;;AN000;; Prepare for get binary value (LOW)
 35022 00005463 C706[1687]1000          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],16 ; $M_BASE16
 35023                                  	;mov	word [$M_RT+74],16  ; $M_BASE16	;;AN000;; Set default divisor
 35024                                  
 35025 00005469 31DB                    	xor	bx,bx				;;AN000;; Use BX as the NEG flag (if applicable)
 35026                                  
 35027                                  	;test	$M_SL.$M_S_FLAG,not $M_BYTE and $M_SIZE_MASK
 35028 0000546B F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35029                                  	;test	byte [si+7],20h			;;AN000;; Was BYTE specified?		
 35030 0000546F 7511                    	jnz	short $MIF325			;;AN000;; No
 35031                                  	
 35032 00005471 268A05                  	mov	al,[es:di]			;;AN000;; Setup byte in AL
 35033                                  
 35034                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35035 00005474 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35036                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?
 35037 00005478 753D                    	jnz	short $MIF326			;;AN000;; No
 35038                                  			 
 35039 0000547A A880                    	test	al,10000000b ; 80h		;;AN000;; Is this number negative?
 35040 0000547C 7433                    	jz	short $MIF327			;;AN000;; No
 35041                                  						;;AN000;; Yes				
 35042                                  	; 12/04/2023
 35043                                  	;inc	bx				;;AN000;; Remember that it was negative
 35044 0000547E 247F                    	and	al,01111111b			;;AN000;; Make it positive
 35045                                  
 35046                                  	; 12/04/2023 - Retrop DOS v4.0 COMMAND.COM
 35047                                  	;jmp	short $MIF327
 35048 00005480 EB2E                    	jmp	short $MIF350 ; inc bx
 35049                                  
 35050                                  ; 12/04/2023
 35051                                  %if 0
 35052                                  
 35053                                  $MIF327:
 35054                                  $MIF335:	; 12/04/2023
 35055                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35056                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35057                                  $MIF326:
 35058                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35059                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35060                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35061                                  	jnz	short $MIF330			;;AN000;; No
 35062                                  						;;AN000;; Yes
 35063                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35064                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35065                                  $MIF330:
 35066                                  	jmp	short $MEN325
 35067                                  
 35068                                  %endif
 35069                                  
 35070                                  $MIF325:
 35071                                  	;test	$M_SL.$M_S_FLAG,not $M_WORD and $M_SIZE_MASK
 35072 00005482 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35073                                  	;test	byte [si+7],10h			;;AN000;; Was WORD specified?
 35074 00005486 7513                    	jnz	short $MIF333			;;AN000;; No
 35075                                  						;;AN000;; Yes
 35076 00005488 268B05                  	mov	ax,[es:di]			;;AN000;; Setup byte in AL
 35077                                  
 35078                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35079 0000548B F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35080                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35081 0000548F 7526                    	jnz	short $MIF334			;;AN000;; No
 35082                                  						;;AN000;; Yes
 35083 00005491 F6C480                  	test	ah,10000000b ; 80h		;;AN000;; Is this number negative?
 35084 00005494 741B                    	jz	short $MIF335			;;AN000;; No
 35085                                  						;;AN000;; Yes
 35086                                  	; 12/04/2023
 35087                                  	;inc	bx				;;AN000;; Remember that it was negative
 35088 00005496 80E47F                  	and	ah,01111111b			;;AN000;; Make it positive
 35089                                  
 35090                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35091                                  	;jmp	short $MIF335
 35092 00005499 EB15                    	jmp	short $MIF350 ; inc bx
 35093                                  
 35094                                  ; 12/04/2023
 35095                                  %if 0
 35096                                  
 35097                                  $MIF335:
 35098                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35099                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35100                                  $MIF334:
 35101                                  	test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK ;;AN000;; Was Signed binary specified?
 35102                                  	jnz	short $MIF338
 35103                                  
 35104                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35105                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35106                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35107                                  	jnz	short $MIF338			;;AN000;; No
 35108                                  						;;AN000;; Yes
 35109                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35110                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35111                                  $MIF338:
 35112                                  	jmp	short $MEN333			;;AN000;;
 35113                                  %endif
 35114                                  
 35115                                  $MIF333:
 35116 0000549B 268B05                  	mov	ax,[es:di]			;;AN000;; Setup Double word in DX:AX
 35117 0000549E 268B5502                	mov	dx,[es:di+2]			;;AN000;;
 35118                                  
 35119                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 35120 000054A2 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 35121                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35122 000054A6 750F                    	jnz	short $MIF341			;;AN000;; No
 35123                                  						;;AN000;; Yes
 35124 000054A8 F6C680                  	test	dh,10000000b ; 80h		;;AN000;; Is this number negative?
 35125 000054AB 7404                    	jz	short $MIF342			;;AN000;; No
 35126                                  						;;AN000;; Yes
 35127                                  	; 12/04/2023
 35128                                  	;inc	bx				;;AN000;; Remember that it was negative
 35129 000054AD 80E67F                  	and	dh,01111111b			;;AN000;; Make it positive
 35130                                  	
 35131                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35132                                  $MIF350:
 35133 000054B0 43                      	inc	bx
 35134                                  $MIF342:
 35135                                  	; 12/04/2023
 35136                                  $MIF327:
 35137                                  $MIF335:
 35138 000054B1 C706[1687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35139                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35140                                  $MIF341:
 35141                                  $MIF326:
 35142                                  	; 18/04/2023
 35143                                  $MIF334:
 35144                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35145 000054B7 F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35146                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35147 000054BB 7506                    	jnz	short $MIF345			;;AN000;; No
 35148                                  						;;AN000;; Yes
 35149 000054BD C706[1687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35150                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35151                                  $MIF345:
 35152                                  $MEN333:
 35153                                  $MEN325:
 35154 000054C3 E830FD                  	call	$M_CONVERT2ASC			;;AN000;; Convert to ASCII string
 35155                                  
 35156 000054C6 09DB                    	or	bx,bx				;;AN000;; Was number negative?
 35157 000054C8 7405                    	jz	short $MIF349			;;AN000;; No
 35158                                  						;;AN000;; Yes
 35159 000054CA 31D2                    	xor	dx,dx				;;AN000;;
 35160 000054CC B22D                    	mov	dl,'-'	; $M_NEG_SIGN		;;AN000;; Put "-" on the stack with the number
 35161 000054CE 52                      	push	dx				;;AN000;;
 35162                                  $MIF349:
 35163 000054CF 55                      	push	bp				;;AN000;; Restore return address
 35164 000054D0 C3                      	retn					;;AN000;; Return
 35165                                  
 35166                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35167                                  ;;
 35168                                  ;;	PROC NAME: $M_DATE_REPLACE
 35169                                  ;;
 35170                                  ;;	FUNCTION: Convert a date to a decimal ASCII string using current
 35171                                  ;;		  country format and prepare to display
 35172                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35173                                  ;;		ES:DI points at VALUE from SUBLIST
 35174                                  ;;	OUTPUTS: CX contains number of characters on stack
 35175                                  ;;		 Top of stack  --> Last character
 35176                                  ;;					. . .
 35177                                  ;;		 Bot of stack  --> First character
 35178                                  ;;	OTHER REGS Revised: DX,AX
 35179                                  ;;
 35180                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35181                                  
 35182                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35183                                  $M_DATE_REPLACE:
 35184 000054D1 5D                      	pop	bp				;;AN000;; Save return address
 35185                                  
 35186 000054D2 C706[1687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35187                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35188                                  	
 35189 000054D8 E86700                  	call	$M_GET_DATE			;;AN000;; Set date format/separator in $M_RT
 35190                                  						;;AN000;; All O.K.?
 35191 000054DB 31D2                    	xor	dx,dx				;;AN000;; Reset DX value
 35192                                  	; 12/04/2023
 35193                                  	;xor	ax,ax				;;AN000;; Reset AX value
 35194                                  	
 35195                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0
 35196                                  	;;cmp	word [$M_RT+76],0		;;AN000;; USA Date Format
 35197                                  	;jne	short $MIF351
 35198                                  	; 12/04/2023
 35199 000054DD A1[1887]                	mov	ax,[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35200 000054E0 09C0                    	or	ax,ax
 35201 000054E2 751D                    	jnz	short $MIF351
 35202                                  
 35203 000054E4 E87200                  	call	$M_YEAR				;;AN000;; Get Year
 35204 000054E7 E88100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35205                                  
 35206 000054EA FF36[2387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35207                                  	;push	word [$M_RT+87]			;;AN000;;
 35208                                  	
 35209 000054EE 41                      	inc	cx				;;AN000;; Increment count
 35210 000054EF 31C0                    	xor	ax,ax				;;AN000;; Reset AX value
 35211                                  
 35212 000054F1 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35213                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35214 000054F4 E87400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35215                                  	
 35216 000054F7 FF36[2387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35217                                  	;push	word [$M_RT+87]			;;AN000;;
 35218                                  
 35219 000054FB 41                      	inc	cx				;;AN000;; Increment count
 35220 000054FC 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35221                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35222                                  	; 12/04/2023
 35223                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35224 000054FF EB3C                    	jmp	short $MIF354 ; **
 35225                                  $MIF351:
 35226                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],1
 35227                                  	;;cmp	word [$M_RT+76],1		;;AN000;; EUROPE Date Format
 35228                                  	;jne	short $MIF353
 35229                                  	; 12/04/2023
 35230                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35231 00005501 48                      	dec	ax 
 35232 00005502 751D                    	jnz	short $MIF352 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] <> 1
 35233                                  
 35234 00005504 E85200                  	call	$M_YEAR				;;AN000;; Get Year
 35235 00005507 E86100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35236                                  
 35237 0000550A FF36[2387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35238                                  	;push	word [$M_RT+87]			;;AN000;;
 35239                                  	
 35240 0000550E 41                      	inc	cx				;;AN000;; Increment count
 35241 0000550F 31C0                    	xor	ax,ax				;;AN000;; Reset AX
 35242                                  
 35243 00005511 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35244                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35245 00005514 E85400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35246                                  
 35247 00005517 FF36[2387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35248                                  	;push	word [$M_RT+87]			;;AN000;;
 35249                                  
 35250 0000551B 41                      	inc	cx				;;AN000;;
 35251                                  	      
 35252 0000551C 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35253                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35254                                  
 35255                                  	; 12/04/2023
 35256                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35257 0000551F EB1C                    	jmp	short $MIF354 ; **
 35258                                  	; 12/04/2023
 35259                                  $MIF352:
 35260                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]-1 ; *
 35261 00005521 48                      	dec	ax
 35262                                  	;jz	short $MIF353 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] = 2
 35263                                  	;xor	ax,ax
 35264                                  	;jmp	short $MIF355
 35265                                  	; 12/04/2023
 35266 00005522 751C                    	jnz	short $MIF355
 35267                                  $MIF353:
 35268                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],2
 35269                                  	;;cmp	word [$M_RT+76],2		;;AN000;; JAPAN Date Format
 35270                                  	;jne	short $MIF355
 35271                                  
 35272 00005524 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35273                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35274 00005527 E84100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35275                                  	
 35276 0000552A FF36[2387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35277                                  	;push	word [$M_RT+87]			;;AN000;;
 35278                                  
 35279 0000552E 41                      	inc	cx				;;AN000;;
 35280                                  
 35281 0000552F 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35282                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35283 00005532 E83600                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35284                                  	
 35285 00005535 FF36[2387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35286                                  	;push	word [$M_RT+87]			;;AN000;;
 35287                                  	
 35288 00005539 41                      	inc	cx				;;AN000;;
 35289                                  
 35290 0000553A E81C00                  	call	$M_YEAR				;;AN000;; Get Year
 35291                                  	; 12/04/2023
 35292                                  $MIF354:
 35293 0000553D E82B00                  	call	$M_CONVERTDATE	; **		;;AN000;; Convert it to an ASCII string
 35294                                  $MIF355:
 35295 00005540 55                      	push	bp				;;AN000;; Restore return address
 35296 00005541 C3                      	retn					;;AN000;; Return
 35297                                  
 35298                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35299                                  ;;
 35300                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35301                                  
 35302                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35303                                  $M_GET_DATE:
 35304                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 35305                                  	;mov	al,0 				;;AN000;; Get current country info
 35306                                  	; 12/04/2023
 35307 00005542 B80038                  	mov	ax,3800h
 35308                                  	;
 35309 00005545 8D16[1887]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35310                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 35311 00005549 CD21                    	int	21h				;;AN000;;
 35312 0000554B 730B                    	jnc	short $MIF357
 35313                                  	;
 35314 0000554D C706[1887]0000          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0 ; $M_DEF_DATE_FORM
 35315                                  	;mov	word [$M_RT+76+0],0		;;AN000;; Set default date format (BH)
 35316 00005553 C606[2387]2D            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-' ; $M_DEF_DATE_SEP
 35317                                  	;mov	byte [$M_RT+87],'-'		;;AN000;; Set default date separator (BL)
 35318                                  $MIF357:
 35319 00005558 C3                      	retn					;;AN000;;
 35320                                  
 35321                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35322                                  ;;
 35323                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35324                                  
 35325                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35326                                  $M_YEAR:
 35327 00005559 8B4402                  	mov	ax,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35328                                  	;mov	ax,[si+2]			;;AN000;; Get Year
 35329                                  
 35330                                  	;test	$M_SL.$M_S_FLAG,Date_MDY_4 and $M_DATE_MASK
 35331 0000555C F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35332                                  	;test	byte [si+7],10h			;;AN000;; Was Month/Day/Year (2 Digits) specified?
 35333 00005560 7508                    	jnz	short $MIF359			;;AN000;; No
 35334                                  						;;AN000;; Yes
 35335 00005562 83F863                  	cmp	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35336 00005565 7603                    	jna	short $MIF360			;;AN000;;
 35337 00005567 B86300                  	mov	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35338                                  $MIF360:
 35339                                  $MIF359:
 35340 0000556A C3                      	retn					;;AN000;;
 35341                                  
 35342                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35343                                  ;;
 35344                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35345                                  
 35346                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35347                                  $M_CONVERTDATE:
 35348                                  $M_CONVERTTIME: ; *!*!  ; 12/04/2023
 35349 0000556B 8F06[1887]              	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35350                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 35351 0000556F 880E[0E87]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 35352                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 35353 00005573 E880FC                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 35354 00005576 49                      	dec	cx				;;AN000;; Test if size only grew by 1
 35355 00005577 3A0E[0E87]              	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 35356 0000557B 7505                    	jne	short $MIF363			;;AN000;; No
 35357 0000557D B83000                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 35358 00005580 50                      	push	ax				;;AN000;; Save it
 35359 00005581 41                      	inc	cx				;;AN000;; Count it
 35360                                  $MIF363:
 35361 00005582 41                      	inc	cx				;;AN000;; Restore CX
 35362 00005583 FF36[1887]              	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35363                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 35364 00005587 C3                      	retn
 35365                                  
 35366                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35367                                  ;;
 35368                                  ;;	PROC NAME: $M_TIME_REPLACE
 35369                                  ;;
 35370                                  ;;	FUNCTION: Convert a time to a decimal ASCII string
 35371                                  ;;		  and prepare to display
 35372                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35373                                  ;;		ES:DI points at VALUE from SUBLIST
 35374                                  ;;	OUTPUTS: CX contains number of characters on stack
 35375                                  ;;		 Top of stack  --> Last character
 35376                                  ;;					. . .
 35377                                  ;;		 Bot of stack  --> First character
 35378                                  ;;	REGS USED: BP,CX,AX
 35379                                  ;;
 35380                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35381                                  
 35382                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35383                                  	; 13/08/2024							     ;;
 35384                                  $M_TIME_REPLACE:
 35385 00005588 5D                      	pop	bp				;;AN000;; Save return address
 35386                                  
 35387 00005589 C706[1687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35388                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35389                                  
 35390 0000558F E87700                  	call	$M_GET_TIME			;;AN000;; All O.K.?
 35391                                  
 35392                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35393 00005592 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1
 35394                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35395 00005596 741A                    	jz	short $MIF365			;;AN000;; No
 35396                                  						;;AN000;; Yes
 35397 00005598 803E[2987]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 35398                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 35399 0000559D 7513                    	jne	short $MIF366			;;AN000;; No
 35400                                  						;;AN000;; Yes
 35401 0000559F 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35402                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35403 000055A2 3C0C                    	cmp	al,12				;;AN000;; Is hour 12 or less?
 35404 000055A4 7C04                    	jl	short $MLL367 ; jnge		;;AN000;; Yes	
 35405 000055A6 3C17                    	cmp	al,23				;;AN000;; Is hour 24 or greater?
 35406 000055A8 7E04                    	jng	short $MIF367 ; jle		;;AN000;; No
 35407                                  $MLL367:
 35408 000055AA B061                    	mov	al,'a'	; $M_AM			;;AN000;;
 35409                                  	;push	ax				;;AN000;; Push an "a" to represent AM.
 35410                                  	;inc	cx				;;AN000;;
 35411                                  	;jmp	short $MEN367			;;AN000;;
 35412                                  	; 12/04/2023
 35413 000055AC EB02                    	jmp	short $MEN367 ; *
 35414                                  $MIF367:
 35415 000055AE B070                    	mov	al,'p'	; $M_PM			;;AN000;;
 35416                                  $MEN367:	; * ; 12/04/2023
 35417 000055B0 50                      	push	ax				;;AN000;; Push an "p" to represent PM.
 35418 000055B1 41                      	inc	cx				;;AN000;;
 35419                                  ;$MEN367:
 35420                                  $MIF366:
 35421                                  $MIF365:					;;AN000;;
 35422 000055B2 31C0                    	xor	ax,ax				;;AN000;;
 35423                                  	;xor	dx,dx				;;AN000;;
 35424                                  	; 13/08/2024
 35425 000055B4 99                      	cwd	; PCDOS 7.1 COMMAND.COM
 35426                                  	
 35427                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35428 000055B5 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35429                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35430 000055B9 740B                    	jz	short $MIF372			;;AN000;;
 35431                                  
 35432 000055BB 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35433                                  	;mov	al,[si+5]			;;AN000;; Get Hundreds
 35434 000055BE E8AAFF                  	call	$M_CONVERTTIME			;;AN000;;
 35435                                  
 35436 000055C1 FF36[2187]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]
 35437                                  	;push	word [$M_RT+85]			;;AN000;;
 35438 000055C5 41                      	inc	cx				;;AN000;;
 35439                                  $MIF372:
 35440                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35441 000055C6 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35442                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35443 000055CA 7506                    	jnz	short $MLL374			;;AN000;; No
 35444                                  
 35445                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSS_Cty AND $M_SIZE_MASK
 35446 000055CC F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35447                                  	;test	byte [si+7],10h			;;AN000;; Was Hour/Min/Sec (12 Hour) specified?
 35448 000055D0 740B                    	jz	short $MIF374			;;AN000;; No
 35449                                  $MLL374:
 35450 000055D2 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35451                                  	;mov	al,[si+4]			;;AN000;; Get Seconds
 35452 000055D5 E893FF                  	call	$M_CONVERTTIME			;;AN000;;
 35453                                  
 35454 000055D8 FF36[2587]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 35455                                  	;push	word [$M_RT+89]			;;AN000;;
 35456 000055DC 41                      	inc	cx				;;AN000;;
 35457                                  $MIF374:	;;  Do Hour/Min (12 Hour)
 35458 000055DD 8A4403                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+1]
 35459                                  	;mov	al,[si+3]			;;AN000;; Get Minutes
 35460 000055E0 E888FF                  	call	$M_CONVERTTIME			;;AN000;;
 35461                                  
 35462 000055E3 FF36[2587]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 35463                                  	;push	word [$M_RT+89]			;;AN000;;
 35464 000055E7 41                      	inc	cx				;;AN000;;
 35465                                  
 35466 000055E8 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35467                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35468                                  
 35469                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35470 000055EB F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1 
 35471                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35472 000055EF 7413                    	jz	short $MIF376			;;AN000;; No
 35473                                  
 35474 000055F1 803E[2987]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 35475                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 35476 000055F6 750C                    	jne	short $MIF377			;;AN000;; No
 35477                                  
 35478 000055F8 3C0D                    	cmp	al,13				;;AN000;; Is hour less than 12?
 35479 000055FA 7C02                    	jnge	short $MIF378 ; jl
 35480 000055FC 2C0C                    	sub	al,12				;;AN000;; Set to a 12 hour value
 35481                                  $MIF378:
 35482                                  	;cmp	al,0				;;AN000;; Is hour less than 12?
 35483                                  	;jne	short $MIF380			;;AN000;; No
 35484                                  	; 12/04/2023
 35485 000055FE 20C0                    	and	al,al
 35486 00005600 7502                    	jnz	short $MIF380	
 35487 00005602 B00C                    	mov	al,12				;;AN000;; Set to a 12 hour value
 35488                                  $MIF380:
 35489                                  $MIF377:
 35490                                  $MIF376:
 35491 00005604 E8EFFB                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to ASCII
 35492 00005607 55                      	push	bp				;;AN000;; Restore return address
 35493 00005608 C3                      	retn					;;AN000;; Return
 35494                                  
 35495                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35496                                  ;;
 35497                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35498                                  
 35499                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35500                                  $M_GET_TIME:
 35501                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 35502                                  	;mov	al,0 				;;AN000;; Get current country info
 35503                                  	; 12/04/2023
 35504 00005609 B80038                  	mov	ax,3800h
 35505                                  	;
 35506 0000560C 8D16[1887]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35507                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 35508 00005610 CD21                    	int	21h				;;AN000;;
 35509 00005612 7310                    	jnc	short $MIF384
 35510                                  
 35511 00005614 C706[2987]0100          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],1 ; $M_DEF_TIME_FORM
 35512                                  	;mov	word [$M_RT+93],1		;;AN000;; Set default time format (BH)
 35513 0000561A C606[2587]3A            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],':' ; $M_DEF_TIME_SEP
 35514                                  	;mov	byte [$M_RT+89],':'		;;AN000;; Set default time separator (BL)
 35515 0000561F C606[2187]2E            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],'.' ; $M_DEF_DECI_SEP
 35516                                  	;mov	byte [$M_RT+85],'.'		;;AN000;; Set default time separator (BL)		
 35517                                  $MIF384:
 35518 00005624 C3                      	retn					;;AN000;;
 35519                                  
 35520                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35521                                  ;;
 35522                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35523                                  
 35524                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35525                                  
 35526                                  ; 12/04/2023 
 35527                                  ;; ($M_CONVERTTIME is same with $M_CONVERTDATE)
 35528                                  %if 0
 35529                                  $M_CONVERTTIME:
 35530                                  $M_CONVERTDATE: ; *!*!  ; 12/04/2023
 35531                                  	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35532                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 35533                                  	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 35534                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 35535                                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 35536                                  	dec	cx				;;AN000;; Test if size only grew by 1
 35537                                  	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 35538                                  	jne	short $MIF386			;;AN000;; No
 35539                                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 35540                                  	push	ax				;;AN000;; Save it
 35541                                  	inc	cx				;;AN000;; Count itount it
 35542                                  $MIF386:
 35543                                  	inc	cx				;;AN000;; Restore CX
 35544                                  	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35545                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 35546                                  	retn
 35547                                  %endif
 35548                                  
 35549                                  ; ----------------------------
 35550                                  ; MSDOS 6.0, TPRINTF.ASM, 1991
 35551                                  ; ----------------------------
 35552                                  ; include msgdcl.inc
 35553                                  ; ----------------------------
 35554                                  
 35555                                  ;============================================================================
 35556                                  ; LOADHIGH.ASM, MSDOS 6.0, 1991
 35557                                  ;============================================================================
 35558                                  ; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35559                                  
 35560                                  ; This is a new module added to support loading programs into UMBs provided
 35561                                  ; by DOS 5.0. 
 35562                                  ; ---------------------------------------------------------------------------
 35563                                  ; Usage:
 35564                                  ;
 35565                                  ; LOADHIGH [/L:umb[,size][;umb[,size]]*] <filespec>
 35566                                  ;
 35567                                  ; <filespec> has to be a filename that is not wildcarded.
 35568                                  
 35569                                  ; ---------------------------------------------------------------------------
 35570                                  ;
 35571                                  ;	Revision History
 35572                                  ;	================
 35573                                  ;
 35574                                  ;	M009	SR	08/01/90	Set flags to indicate that we are
 35575                                  ;				loading and high and also remember
 35576                                  ;				current UMB state.
 35577                                  ;
 35578                                  ;	M016	SR	08/09/90	Give special error message on attempt
 35579                                  ;				to loadhigh batch files and invalid
 35580                                  ;				filename on Loadhigh command line.
 35581                                  ;
 35582                                  ;	M039	SR	11/19/90	Bug #4270. Copy all the whitespaces
 35583                                  ;				after the program name also as part
 35584                                  ;				of the command line being passed to
 35585                                  ;				the program to be invoked.
 35586                                  ;
 35587                                  ; ---------------------------------------------------------------------------
 35588                                  
 35589                                  ; ---------------------------------------------------------------------------
 35590                                  ;
 35591                                  ;	include highload.inc		; Grab code for ParseVar and such
 35592                                  
 35593                                  iCmdLine	equ	81h		; PSP:81h points to command-line
 35594                                  
 35595                                  ;
 35596                                  ; ---------------------------------------------------------------------------
 35597                                  
 35598                                  ;****	LoadHigh -- Main routine for Loadhigh command
 35599                                  ;
 35600                                  ;	ENTRY	Command line tail is at PSP:iCmdLine terminated by 0dh
 35601                                  ;		CS = DS = SS = TRANGROUP
 35602                                  ;
 35603                                  ;	EXIT	None
 35604                                  ;
 35605                                  ;	USED	ax, bx, cx, dx, si, di, es
 35606                                  ;
 35607                                  ;	ERROR EXITS
 35608                                  ;		Message pointers are setup at the error locations and then
 35609                                  ;	we jump back to CERROR which is the transient error recycle point.
 35610                                  ;	Apart from parse errors, the other errors handled are too many
 35611                                  ;	switches anf invalid filenames.
 35612                                  ;
 35613                                  ;	EFFECTS
 35614                                  ;		The allocation strategy and the state of the arena chain are
 35615                                  ;	put in the requested state according to the given options. If a 
 35616                                  ;	filename is also given, it is executed as well.
 35617                                  ; ---------------------------------------------------------------------------
 35618                                  
 35619                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35620                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5927h
 35621                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35622                                  LoadHigh:
 35623 00005625 1E                      	push	ds
 35624 00005626 07                      	pop	es
 35625                                  
 35626 00005627 E86700                  	call	SkipLhDelims
 35627                                  
 35628                                  ;Get command tail to be passed to the program. This includes any whitespace
 35629                                  ;chars between the program name and its parameters as well.
 35630                                  ;On return, ds:si points at the start of the command tail.
 35631                                  
 35632 0000562A 56                      	push	si
 35633 0000562B E81400                  	call	ParseLhCmd
 35634 0000562E 5E                      	pop	si
 35635 0000562F 720E                    	jc	short LhErr
 35636                                  	
 35637 00005631 E87500                  	call	SetupCmdLine		;setup pgm's command line
 35638                                  
 35639 00005634 E8C800                  	call	SetupPath		;setup path for file
 35640 00005637 7206                    	jc	short LhErr		;file not found
 35641                                  
 35642                                  ;Set allocation strategy to HighFirst and link in UMBs for exec. This will
 35643                                  ;be reset after return from the Exec
 35644                                  ;We will also set a resident flag to indicate that UMBs were activated for
 35645                                  ;the Exec. On return from the Exec, this flag will be used to deactivate UMBs
 35646                                  
 35647 00005639 E8A600                  	call	HideUMBs		;prepare upper-memory for load
 35648                                  
 35649 0000563C E9C0D2                  	jmp	LH_EXECUTE		;go and exec file ;M051
 35650                                  
 35651                                  LhErr:
 35652                                  ;The error message has been setup at this stage
 35653                                  
 35654 0000563F E910D3                  	jmp	cerror			;print error message and recycle 
 35655                                  
 35656                                  ; ---------------------------------------------------------------------------
 35657                                  					
 35658                                  ;*** 	ParseLhCmd - parses any command-line options
 35659                                  ;
 35660                                  ;	ENTRY	None
 35661                                  ;
 35662                                  ;	EXIT	Carry clear -- command line parsed successfully
 35663                                  ;		Carry set -- appropriate error message setup
 35664                                  ;
 35665                                  ;	USED	ax, si
 35666                                  ;
 35667                                  ;	EFFECTS
 35668                                  ;		Options set up (see highvar.inc)
 35669                                  ;		Filename to be executed setup
 35670                                  ;
 35671                                  ;	ParseLhCmd calls InitVar to initialize data filled in by ParseVar,
 35672                                  ;	then calls ParseVar itself to actually parse the commmand-line.  On
 35673                                  ;	return from ParseVar, DS:SI will point to the beginning of the child
 35674                                  ;	module's name on the command-line; thus it calls LhCopyFilename to
 35675                                  ;	prepare the command-line for that program.
 35676                                  ; ---------------------------------------------------------------------------
 35677                                  
 35678                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35679                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5944h
 35680                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35681                                  	; 11/06/2023
 35682                                  ParseLhCmd:
 35683                                  	;mov	si,81h
 35684 00005642 BE8100                  	mov	si,iCmdLine	;ds:si points at command line
 35685                                  
 35686 00005645 C706[BC8A]0000          	mov	word [COMSW],0
 35687 0000564B BF[B085]                	mov	di,Parse_LoadHi
 35688 0000564E 31C9                    	xor	cx,cx
 35689 00005650 E866CB                  	call	Parse_With_Msg
 35690                                  
 35691                                  	; 11/06/2023
 35692                                  	;cmp	ax,0FFFFh ; -1
 35693                                  	;jz	short PLhCmd2
 35694                                  	;cmp	ax,0
 35695                                  	;jnz	short PLhCmd1
 35696                                  	; 11/06/2023
 35697 00005653 40                      	inc	ax ; cmp ax,-1
 35698 00005654 7408                    	jz	short PLhCmd2 ; 0FFFFh -> 0
 35699 00005656 48                      	dec	ax ; cmp ax,0
 35700 00005657 7504                    	jnz	short PLhCmd1 ; 1 -> 0
 35701                                  	; ax = 0
 35702                                  
 35703 00005659 89D3                    	mov	bx,dx
 35704                                  	; 14/04/2023
 35705                                  	;call	LhCopyFilename
 35706                                  	;; 13/04/2023
 35707                                  	;;;jc	short PLhCmd2  ; !!! jmp short PLhCmd2 !!!
 35708                                  	;;jmp	short PLhCmd2
 35709                                  	;retn
 35710                                  	; 14/04/2023
 35711 0000565B EB02                    	jmp	short LhCopyFilename
 35712                                  PLhCmd1:
 35713 0000565D F9                      	stc
 35714                                  PLhCmd2:
 35715 0000565E C3                      	retn
 35716                                  
 35717                                  ; ---------------------------------------------------------------------------
 35718                                  
 35719                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35720                                  
 35721                                  ; ---------------------------------------------------------------------------
 35722                                  ; HIGHlOAD.INC, MSDOS 6.0, 1992
 35723                                  ; ---------------------------------------------------------------------------
 35724                                  
 35725                                  	; 13/04/2023
 35726                                  	; MSDOS 5.0 COMMAND.COM only !
 35727                                  	; (Procedure names are not from original Microsoft source code!)
 35728                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 35729                                  ;set_strategy:
 35730                                  	;mov	ax,5800h	; DOS_CHECK_STRATEGY
 35731                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35732                                  	;		; AL = function code: get allocation strategy
 35733                                  	;mov	bx,ax
 35734                                  	;or	bx,80h
 35735                                  	;mov	ax,5801h	; DOS_SET_STRATEGY
 35736                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35737                                  	;		; AL = function code: set allocation strategy
 35738                                  	;retn
 35739                                  
 35740                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 35741                                  ;set_umblink:
 35742                                  	;mov	ax,5803h	; DOS_SET_UMBLINK
 35743                                  	;mov	bx,1
 35744                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35745                                  	;		; AL = function code: (DOS 5beta) set UMB link state
 35746                                  	;retn
 35747                                  
 35748                                  ; ---------------------------------------------------------------------------
 35749                                  
 35750                                  ;***	LhCopyFilename -- copy filename from command line to buffer
 35751                                  ;
 35752                                  ;	ENTRY	ds:si points at primary argument (filename)
 35753                                  ;
 35754                                  ;	EXIT	Carry set -- filename has wildcards.  In this event, DX will
 35755                                  ;				already contain an appropriate error number.
 35756                                  ;		Carry clear -- filename has been copied as needed; DS:SI
 35757                                  ;				points to first character (most likely space)
 35758                                  ;				after filename.
 35759                                  ;
 35760                                  ;	USED	ax, si
 35761                                  ;
 35762                                  ;	EFFECTS
 35763                                  ;		ExecPath contains the filename
 35764                                  ;
 35765                                  ; If there are any wildcards in the filename, then we have an error
 35766                                  ; ---------------------------------------------------------------------------
 35767                                  
 35768                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35769                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5984h
 35770                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35771                                  LhCopyFilename:
 35772 0000565F 1E                      	push	ds
 35773 00005660 56                      	push	si
 35774 00005661 57                      	push	di
 35775 00005662 C57704                  	lds	si,[bx+4]
 35776 00005665 BF[CD89]                	mov	di,EXECPATH
 35777                                  lhcpfn1:
 35778 00005668 AC                      	lodsb
 35779 00005669 3C2A                    	cmp	al,2Ah ; '*'
 35780 0000566B 740D                    	jz	short lhfilerr
 35781 0000566D 3C3F                    	cmp	al,3Fh ; '?'
 35782 0000566F 7409                    	jz	short lhfilerr
 35783 00005671 AA                      	stosb
 35784 00005672 08C0                    	or	al,al
 35785 00005674 75F2                    	jnz	short lhcpfn1
 35786                                  	; 14/04/2023
 35787                                  	; cf = 0
 35788                                  	;clc
 35789                                  lhfilerr2:
 35790 00005676 5F                      	pop	di
 35791 00005677 5E                      	pop	si
 35792 00005678 1F                      	pop	ds
 35793 00005679 C3                      	retn
 35794                                  lhfilerr:
 35795 0000567A BA[6681]                	mov	dx,LhInvFil_Ptr
 35796 0000567D F9                      	stc
 35797 0000567E EBF6                    	jmp	short lhfilerr2
 35798                                  
 35799                                  ; ---------------------------------------------------------------------------
 35800                                  	
 35801                                  	; 14/04/2023
 35802                                  	; 13/04/2023
 35803                                  	; MSDOS 5.0 COMMAND.COM only !
 35804                                  	; (Procedure name is not from original Microsoft source code!)
 35805                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 35806                                  set_strategy:
 35807 00005680 B80058                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 35808 00005683 CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35809                                  			; AL = function code: get allocation strategy
 35810 00005685 89C3                    	mov	bx,ax
 35811 00005687 81CB8000                	or	bx,80h
 35812 0000568B B80158                  	mov	ax,5801h	; DOS_SET_STRATEGY
 35813 0000568E CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35814                                  			; AL = function code: set allocation strategy
 35815 00005690 C3                      	retn
 35816                                  
 35817                                  ; ---------------------------------------------------------------------------
 35818                                  
 35819                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35820                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59A6h
 35821                                  	; MSDOS 5.0 COMMAND.COM only !
 35822                                  	; (Procedure name is not from original Microsoft source code!)
 35823                                  SkipLhDelims:
 35824 00005691 BE8100                  	mov	si,81h
 35825 00005694 E847CF                  	call	scanoff
 35826                                  stfn1:
 35827 00005697 AC                      	lodsb
 35828 00005698 E84BCF                  	call	DELIM
 35829 0000569B 740A                    	jz	short stfn2
 35830 0000569D 3C0D                    	cmp	al,0Dh
 35831 0000569F 7406                    	jz	short stfn2
 35832 000056A1 3A06[A98A]              	cmp	al,[SWITCHAR]
 35833 000056A5 75F0                    	jnz	short stfn1
 35834                                  stfn2:
 35835 000056A7 4E                      	dec	si
 35836 000056A8 C3                      	retn
 35837                                  
 35838                                  ; ---------------------------------------------------------------------------
 35839                                  
 35840                                  ;***	SetupCmdLine -- prepare command line for the program
 35841                                  ;
 35842                                  ;	ENTRY	{es/ds}:si = points just after the end of the child program
 35843                                  ;
 35844                                  ;	EXIT	None
 35845                                  ;
 35846                                  ;	USED
 35847                                  ;
 35848                                  ;	EFFECTS		
 35849                                  ;		The rest of the command line following the pgm name is 
 35850                                  ;	moved to the top of the command line buffer (at TRANGROUP:81h)
 35851                                  ;	and a new command line length is put in
 35852                                  ; ---------------------------------------------------------------------------
 35853                                  
 35854                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35855                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59BEh
 35856                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35857                                  SetupCmdLine:
 35858                                  	;mov	di,81h
 35859 000056A9 BF8100                  	mov	di,iCmdLine
 35860 000056AC 30C9                    	xor	cl,cl
 35861 000056AE FEC9                    	dec	cl			;just CR means count = 0
 35862                                  SetCmdL1:
 35863 000056B0 AC                      	lodsb
 35864 000056B1 AA                      	stosb
 35865 000056B2 FEC1                    	inc	cl			;update count
 35866                                  	; 14/04/2023
 35867                                  	; * ; MSDOS 6.0 only !
 35868                                  	;or	al,al	; *
 35869                                  	;jz	short SetCmdL2 ; *
 35870 000056B4 3C0D                    	cmp	al,0Dh			;carriage return?
 35871 000056B6 75F8                    	jnz	short SetCmdL1		;no, continue storing
 35872                                  SetCmdL2:
 35873 000056B8 26880E8000              	mov	[es:80h],cl		;store new cmd line length
 35874 000056BD C3                      	retn
 35875                                  
 35876                                  ; ---------------------------------------------------------------------------
 35877                                  
 35878                                  ;***	LhSetupErrMsg -- Sets up error messages
 35879                                  ;
 35880                                  ;	ENTRY	ax = error message number
 35881                                  ;
 35882                                  ;	EXIT	None
 35883                                  ;
 35884                                  ;	USED	dx
 35885                                  ;
 35886                                  ;	EFFECTS
 35887                                  ;		Everything setup to display error message
 35888                                  ; ---------------------------------------------------------------------------
 35889                                  	
 35890                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35891                                  LhSetupErrMsg:
 35892 000056BE C606[FA7E]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 35893 000056C3 BA[FC7E]                	mov	dx,extend_buf_ptr
 35894 000056C6 A3[FC7E]                	mov	[extend_buf_ptr],ax
 35895 000056C9 C3                      	retn
 35896                                  
 35897                                  ; ---------------------------------------------------------------------------
 35898                                  
 35899                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35900                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59DFh
 35901                                  	; MSDOS 5.0 COMMAND.COM only !
 35902                                  	; (Procedure name is not from original Microsoft source code!)
 35903                                  check_umblink:
 35904 000056CA B80058                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 35905 000056CD CD21                    	int	21h 	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35906                                  			 ; AL = function code: get allocation strategy
 35907 000056CF 88C3                    	mov	bl,al
 35908 000056D1 B80258                  	mov	ax,5802h	; DOS_CHECK_UMBLINK
 35909 000056D4 CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35910                                  			; AL = function code: (DOS 5beta) get UMB link state
 35911 000056D6 88C7                    	mov	bh,al
 35912 000056D8 93                      	xchg	ax,bx
 35913 000056D9 D0C0                    	rol	al,1
 35914 000056DB 2401                    	and	al,1
 35915 000056DD D0E4                    	shl	ah,1
 35916 000056DF 08E0                    	or	al,ah
 35917 000056E1 C3                      	retn
 35918                                  
 35919                                  ; ---------------------------------------------------------------------------
 35920                                  
 35921                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35922                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59F7h
 35923                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35924                                  HideUMBs:
 35925 000056E2 1E                      	push	ds
 35926 000056E3 E8E4FF                  	call	check_umblink
 35927 000056E6 8E1E[A58A]              	mov	ds,[RESSEG]
 35928 000056EA A2[2204]                	mov	[fInHigh],al
 35929 000056ED 800E[2204]80            	or	byte [fInHigh],80h
 35930 000056F2 1F                      	pop	ds
 35931 000056F3 E88AFF                  	call	set_strategy
 35932                                  	;call	set_umblink
 35933                                  	;retn
 35934                                  	; 14/04/023
 35935                                  	;jmp	short set_umblink
 35936                                  
 35937                                  ; ---------------------------------------------------------------------------
 35938                                  
 35939                                  	; 14/04/2023
 35940                                  	; 13/04/2023
 35941                                  	; MSDOS 5.0 COMMAND.COM only !
 35942                                  	; (Procedure name is not from original Microsoft source code!)
 35943                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 35944                                  set_umblink:
 35945 000056F6 B80358                  	mov	ax,5803h	; DOS_SET_UMBLINK
 35946 000056F9 BB0100                  	mov	bx,1
 35947 000056FC CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35948                                  			; AL = function code: (DOS 5beta) set UMB link state
 35949 000056FE C3                      	retn
 35950                                  
 35951                                  ; ---------------------------------------------------------------------------
 35952                                  
 35953                                  ;***	SetupPath -- Do path search for the file to be executed
 35954                                  ;
 35955                                  ;	ENTRY	None
 35956                                  ;
 35957                                  ;	EXIT	Carry set if file not found or not executable file
 35958                                  ;
 35959                                  ;	EFFECTS
 35960                                  ;		ExecPath contains the full path of the file to be executed
 35961                                  ; ---------------------------------------------------------------------------
 35962                                  
 35963                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35964                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A0Fh
 35965                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35966                                  SetupPath:
 35967                                  
 35968                                  ;Juggle around the argv pointers to make argv[1] into argv[0]. This is 
 35969                                  ;because the path search routine that we are about to invoke expects the
 35970                                  ;filename to search for to be argv[0].
 35971                                  ;
 35972                                  ;If our new argv[0] starts with a switcharacter, it's an option... skip right
 35973                                  ;over it by doing the whole move again (smaller, of course, this time).
 35974                                  
 35975                                  
 35976                                  	;mov	ax,arg.argvcnt		;total number of arguments
 35977                                  	; 14/04/2023
 35978                                  	;mov	ax,[ARG_ARGVCNT]
 35979 000056FF A1[7490]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 35980                                  
 35981 00005702 48                      	dec	ax			;less one - skip "LoadHigh"
 35982                                  	;mov	bx,SIZE Argv_ele
 35983 00005703 BB0B00                  	mov	bx,ARGV_ELE.SIZE ; 11
 35984                                  	;mov	bx,11
 35985 00005706 F7E3                    	mul	bx			;dx:ax = size of argument lists
 35986                                  
 35987                                  	; 14/04/2023
 35988 00005708 89C1                    	mov	cx,ax			;size to move
 35989                                  
 35990                                  	;mov	di,offset TRANGROUP:Arg	;Copy TO argv[0]
 35991                                  	;mov	di,ARG_ARGV ;mov di,[ARG+ARG_UNIT.argv] ; mov di,[ARG]
 35992 0000570A BF[B48D]                	mov	di,ARG	
 35993 0000570D 89FE                    	mov	si,di			;
 35994                                  	;add	si,SIZE Argv_ele	;Copy FROM argv[1]
 35995 0000570F 83C60B                  	add	si,ARGV_ELE.SIZE ; 11
 35996                                  	
 35997                                  	; 14/04/2023
 35998                                  	;mov	cx,ax
 35999                                  
 36000 00005712 FC                      	cld
 36001 00005713 F3A4                    	rep	movsb			;Move the argument list
 36002                                  	
 36003                                  	;dec	arg.argvcnt		;Fake one less argument, and
 36004                                  	;dec	word [ARG_ARGVCNT]
 36005 00005715 FF0E[7490]              	dec	word [ARG+ARG_UNIT.argvcnt]
 36006                                  	
 36007                                  ; Done moving... argv[0] is now the child program's name, and [1] its first arg
 36008                                  
 36009 00005719 E844DA                  	call	path_search		;look in the path
 36010                                  
 36011                                  ;ax = 0, no file found
 36012                                  ;ax < 4, batch file found -- cant be executed
 36013                                  ;ax = 4,8 => .com or .exe file found
 36014                                  
 36015 0000571C 09C0                    	or	ax,ax			;any file found?
 36016 0000571E 740B                    	jz	short no_exec_file	;no, error
 36017                                  
 36018 00005720 83F804                  	cmp	ax,4			;executable file?
 36019                                  	;jl	short no_exec_bat	;no, indicate fail ; M016
 36020                                  	;clc
 36021                                  	;retn
 36022                                  	; 14/04/2023
 36023 00005723 7201                    	jb	short no_exec_bat
 36024 00005725 C3                      	retn 
 36025                                  
 36026                                  no_exec_bat:
 36027 00005726 BA[6381]                	mov	dx,NoExecBat_Ptr	;Setup message ptr ; M016
 36028 00005729 EB06                    	jmp	short lhsp_errret	;return error; M016
 36029                                  
 36030                                  no_exec_file:
 36031 0000572B B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 36032 0000572E E88DFF                  	call	LhSetupErrMsg		;setup error message
 36033                                  lhsp_errret:				; M016
 36034 00005731 F9                      	stc
 36035 00005732 C3                      	retn
 36036                                  
 36037                                  ;============================================================================
 36038                                  ; COMMAND.SKL (MESSAGE.SKL), BUILDMSG.C, MSDOS 6.0, 1991
 36039                                  ;============================================================================
 36040                                  ; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36041                                  
 36042                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A44h
 36043                                  
 36044                                  ; ---------------------------------------------------------------------------
 36045                                  ; Class 3 message table/structure
 36046                                  ; ---------------------------------------------------------------------------
 36047                                  
 36048                                  $M_CLASS_3_STRUC:
 36049 00005733 FF                      	db 0FFh			; $M_CLASS_ID (Class identifer)
 36050 00005734 0500                    	dw 5			; $M_COMMAND_VER (COMMAND.COM version)
 36051 00005736 A2                      	db 162			; Total number of messages
 36052                                  $M_ID_3_1:
 36053                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:5A48h)
 36054 00005737 FC03                    	dw 1020			; Message Number = 1020
 36055 00005739 8802                    	dw MSG_1020-$+2 ; 288h	; Message offset from message number (5A48h+0288h=5CD0h)
 36056                                  $M_ID_3_2:
 36057 0000573B F703                    	dw 1015			; Message Number = 1015
 36058 0000573D 9402                    	dw MSG_1015-$+2 ; 294h  ; Message offset from message number (5A4Ch+0294h=5CE0h)
 36059                                  $M_ID_3_3:	; 26/04/2023
 36060 0000573F EC03B402                	dw 1004,MSG_1004-$ ; 692
 36061 00005743 0204CA02                	dw 1026,MSG_1026-$ ; 714
 36062 00005747 0704DA02                	dw 1031,MSG_1031-$ ; 730
 36063 0000574B 0B04E502                	dw 1035,MSG_1035-$ ; 741
 36064 0000574F 2604F002                	dw 1062,MSG_1062-$ ; 752
 36065 00005753 0404FB02                	dw 1028,MSG_1028-$ ; 763
 36066 00005757 15041903                	dw 1045,MSG_1045-$ ; 793
 36067 0000575B 11043203                	dw 1041,MSG_1041-$ ; 818
 36068 0000575F 12045003                	dw 1042,MSG_1042-$ ; 848
 36069                                  $M_ID_3_12:
 36070 00005763 13046703                	dw 1043,MSG_1043-$ ; 871
 36071 00005767 EA038303                	dw 1002,MSG_1002-$ ; 899
 36072 0000576B EB03A703                	dw 1003,MSG_1003-$ ; 935
 36073 0000576F EF03BF03                	dw 1007,MSG_1007-$ ; 959
 36074 00005773 F003D603                	dw 1008,MSG_1008-$ ; 982
 36075 00005777 F103E803                	dw 1009,MSG_1009-$ ; 1000
 36076 0000577B F203F903                	dw 1010,MSG_1010-$ ; 1017
 36077 0000577F F3031504                	dw 1011,MSG_1011-$ ; 1045
 36078 00005783 F6032C04                	dw 1014,MSG_1014-$ ; 1068
 36079 00005787 F8033904                	dw 1016,MSG_1016-$ ; 1081
 36080 0000578B F9035F04                	dw 1017,MSG_1017-$ ; 1119
 36081 0000578F FA038004                	dw 1018,MSG_1018-$ ; 1152
 36082                                  $M_ID_3_24:
 36083 00005793 FB039004                	dw 1019,MSG_1019-$ ; 1168
 36084 00005797 FD039804                	dw 1021,MSG_1021-$ ; 1176
 36085 0000579B FE03B204                	dw 1022,MSG_1022-$ ; 1202
 36086 0000579F FF03D504                	dw 1023,MSG_1023-$ ; 1237
 36087 000057A3 0004FD04                	dw 1024,MSG_1024-$ ; 1277
 36088 000057A7 01041005                	dw 1025,MSG_1025-$ ; 1296
 36089 000057AB 03042405                	dw 1027,MSG_1027-$ ; 1316
 36090 000057AF 05044105                	dw 1029,MSG_1029-$ ; 1345
 36091 000057B3 06044F05                	dw 1030,MSG_1030-$ ; 1359
 36092 000057B7 08045A05                	dw 1032,MSG_1032-$ ; 1370
 36093 000057BB 09046E05                	dw 1033,MSG_1033-$ ; 1390
 36094 000057BF 0A048005                	dw 1034,MSG_1034-$ ; 1408
 36095 000057C3 0C049205                	dw 1036,MSG_1036-$ ; 1426
 36096 000057C7 0D04A305                	dw 1037,MSG_1037-$ ; 1443
 36097 000057CB 0E04B005                	dw 1038,MSG_1038-$ ; 1456
 36098 000057CF 0F04BF05                	dw 1039,MSG_1039-$ ; 1471
 36099                                  $M_ID_3_40:
 36100 000057D3 1004F805                	dw 1040,MSG_1040-$ ; 1528
 36101 000057D7 14040906                	dw 1044,MSG_1044-$ ; 1545
 36102 000057DB 16041906                	dw 1046,MSG_1046-$ ; 1561
 36103 000057DF 17044C06                	dw 1047,MSG_1047-$ ; 1612
 36104 000057E3 18046106                	dw 1048,MSG_1048-$ ; 1633
 36105 000057E7 19046F06                	dw 1049,MSG_1049-$ ; 1647
 36106 000057EB 1A047506                	dw 1050,MSG_1050-$ ; 1653
 36107 000057EF 1B049006                	dw 1051,MSG_1051-$ ; 1680
 36108 000057F3 1C049D06                	dw 1052,MSG_1052-$ ; 1693
 36109 000057F7 1D04B006                	dw 1053,MSG_1053-$ ; 1712
 36110 000057FB 1E04D206                	dw 1054,MSG_1054-$ ; 1746
 36111                                  $M_ID_3_51:
 36112 000057FF 1F04F506                	dw 1055,MSG_1055-$ ; 1781
 36113 00005803 2004FF06                	dw 1056,MSG_1056-$ ; 1791
 36114 00005807 21040A07                	dw 1057,MSG_1057-$ ; 1802
 36115 0000580B 23041307                	dw 1059,MSG_1059-$ ; 1811
 36116 0000580F 24041407                	dw 1060,MSG_1060-$ ; 1812
 36117 00005813 25041407                	dw 1061,MSG_1061-$ ; 1812
 36118 00005817 27042A07                	dw 1063,MSG_1063-$ ; 1834
 36119 0000581B 28042907                	dw 1064,MSG_1064-$ ; 1833
 36120 0000581F 29042807                	dw 1065,MSG_1065-$ ; 1832
 36121 00005823 2A042707                	dw 1066,MSG_1066-$ ; 1831
 36122 00005827 2B042607                	dw 1067,MSG_1067-$ ; 1830
 36123 0000582B 2C042407                	dw 1068,MSG_1068-$ ; 1828
 36124 0000582F 2D042B07                	dw 1069,MSG_1069-$ ; 1835
 36125 00005833 2E042B07                	dw 1070,MSG_1070-$ ; 1835
 36126 00005837 2F042A07                	dw 1071,MSG_1071-$ ; 1834
 36127 0000583B 30042907                	dw 1072,MSG_1072-$ ; 1833
 36128                                  $M_ID_3_67:
 36129 0000583F 31042E07                	dw 1073,MSG_1073-$ ; 1838
 36130 00005843 32043307                	dw 1074,MSG_1074-$ ; 1843
 36131 00005847 33043807                	dw 1075,MSG_1075-$ ; 1848
 36132 0000584B 34043A07                	dw 1076,MSG_1076-$ ; 1850
 36133 0000584F 35043907                	dw 1077,MSG_1077-$ ; 1849
 36134 00005853 36043D07                	dw 1078,MSG_1078-$ ; 1853
 36135 00005857 37045407                	dw 1079,MSG_1079-$ ; 1876
 36136 0000585B 38045B07                	dw 1080,MSG_1080-$ ; 1883
 36137 0000585F 39046D07                	dw 1081,MSG_1081-$ ; 1901
 36138 00005863 3C049407                	dw 1084,MSG_1084-$ ; 1940
 36139 00005867 4204A007                	dw 1090,MSG_1090-$ ; 1952
 36140 0000586B 4304AA07                	dw 1091,MSG_1091-$ ; 1962
 36141 0000586F 4404B407                	dw 1092,MSG_1092-$ ; 1972
 36142 00005873 4504BE07                	dw 1093,MSG_1093-$ ; 1982
 36143 00005877 4604CF07                	dw 1094,MSG_1094-$ ; 1999
 36144 0000587B 4704E807                	dw 1095,MSG_1095-$ ; 2024
 36145 0000587F 48040108                	dw 1096,MSG_1096-$ ; 2049
 36146                                  $M_ID_3_84:
 36147 00005883 B0042E08                	dw 1200,MSG_1200-$ ; 2094
 36148 00005887 14052B08                	dw 1300,MSG_1300-$ ; 2091
 36149 0000588B 2805AE08                	dw 1320,MSG_1320-$ ; 2222
 36150 0000588F 2905EA08                	dw 1321,MSG_1321-$ ; 2282
 36151 00005893 3C055709                	dw 1340,MSG_1340-$ ; 2391
 36152 00005897 3D05AF09                	dw 1341,MSG_1341-$ ; 2479
 36153 0000589B 3E050E0A                	dw 1342,MSG_1342-$ ; 2574
 36154 0000589F 50059C0A                	dw 1360,MSG_1360-$ ; 2716
 36155 000058A3 7805B40A                	dw 1400,MSG_1400-$ ; 2740
 36156 000058A7 7905420B                	dw 1401,MSG_1401-$ ; 2882
 36157 000058AB 7A05A70B                	dw 1402,MSG_1402-$ ; 2983
 36158 000058AF 7B051A0C                	dw 1403,MSG_1403-$ ; 3098
 36159 000058B3 7C05580C                	dw 1404,MSG_1404-$ ; 3160
 36160 000058B7 8C05DC0C                	dw 1420,MSG_1420-$ ; 3292
 36161 000058BB A005630D                	dw 1440,MSG_1440-$ ; 3427
 36162 000058BF A1058D0D                	dw 1441,MSG_1441-$ ; 3469
 36163                                  $M_ID_3_100:
 36164 000058C3 B4050D0E                	dw 1460,MSG_1460-$ ; 3597
 36165 000058C7 B5056E0E                	dw 1461,MSG_1461-$ ; 3694
 36166 000058CB B605EE0E                	dw 1462,MSG_1462-$ ; 3822
 36167 000058CF C8053A0F                	dw 1480,MSG_1480-$ ; 3898
 36168 000058D3 C905D90F                	dw 1481,MSG_1481-$ ; 4057
 36169 000058D7 CA053310                	dw 1482,MSG_1482-$ ; 4147
 36170 000058DB CB059110                	dw 1483,MSG_1483-$ ; 4241
 36171 000058DF CC050811                	dw 1484,MSG_1484-$ ; 4360
 36172 000058E3 CD05C411                	dw 1485,MSG_1485-$ ; 4548
 36173 000058E7 CE055C12                	dw 1486,MSG_1486-$ ; 4700
 36174 000058EB CF05EF12                	dw 1487,MSG_1487-$ ; 4847
 36175 000058EF D0055213                	dw 1488,MSG_1488-$ ; 4946
 36176                                  $M_ID_3_112:
 36177 000058F3 DC05E113                	dw 1500,MSG_1500-$ ; 5089
 36178 000058F7 F0051C14                	dw 1520,MSG_1520-$ ; 5148
 36179 000058FB 04065614                	dw 1540,MSG_1540-$ ; 5206
 36180 000058FF 0506B014                	dw 1541,MSG_1541-$ ; 5296
 36181 00005903 06061815                	dw 1542,MSG_1542-$ ; 5400
 36182 00005907 18065015                	dw 1560,MSG_1560-$ ; 5456
 36183 0000590B 19068415                	dw 1561,MSG_1561-$ ; 5508
 36184 0000590F 1A06FD15                	dw 1562,MSG_1562-$ ; 5629
 36185 00005913 1B062916                	dw 1563,MSG_1563-$ ; 5673
 36186 00005917 1C065016                	dw 1564,MSG_1564-$ ; 5712
 36187 0000591B 1D068A16                	dw 1565,MSG_1565-$ ; 5770
 36188 0000591F 1E06BB16                	dw 1566,MSG_1566-$ ; 5819
 36189 00005923 1F06E416                	dw 1567,MSG_1567-$ ; 5860
 36190 00005927 20065A17                	dw 1568,MSG_1568-$ ; 5978
 36191 0000592B 2C06A317                	dw 1580,MSG_1580-$ ; 6051
 36192                                  $M_ID_3_127:
 36193 0000592F 4006E717                	dw 1600,MSG_1600-$ ; 6119
 36194 00005933 41060018                	dw 1601,MSG_1601-$ ; 6144
 36195 00005937 42065018                	dw 1602,MSG_1602-$ ; 6224
 36196 0000593B 54069A18                	dw 1620,MSG_1620-$ ; 6298
 36197 0000593F 5506EE18                	dw 1621,MSG_1621-$ ; 6382
 36198 00005943 56066C19                	dw 1622,MSG_1622-$ ; 6508
 36199 00005947 6806B419                	dw 1640,MSG_1640-$ ; 6580
 36200 0000594B 6906E519                	dw 1641,MSG_1641-$ ; 6629
 36201 0000594F 7C06651A                	dw 1660,MSG_1660-$ ; 6757
 36202 00005953 9006A81A                	dw 1680,MSG_1680-$ ; 6824
 36203 00005957 A406CA1A                	dw 1700,MSG_1700-$ ; 6858
 36204 0000595B B806781B                	dw 1720,MSG_1720-$ ; 7032
 36205 0000595F CC06C71B                	dw 1740,MSG_1740-$ ; 7111
 36206 00005963 CD061F1C                	dw 1741,MSG_1741-$ ; 7199
 36207 00005967 E0068E1C                	dw 1760,MSG_1760-$ ; 7310
 36208 0000596B F406D71C                	dw 1780,MSG_1780-$ ; 7383
 36209                                  $M_ID_3_143:
 36210 0000596F 08073F1D                	dw 1800,MSG_1800-$ ; 7487
 36211 00005973 0907891D                	dw 1801,MSG_1801-$ ; 7561
 36212 00005977 1C07DD1D                	dw 1820,MSG_1820-$ ; 7645
 36213 0000597B 1D07211E                	dw 1821,MSG_1821-$ ; 7713
 36214 0000597F 3007A81E                	dw 1840,MSG_1840-$ ; 7848
 36215 00005983 4407EF1E                	dw 1860,MSG_1860-$ ; 7919
 36216 00005987 4507461F                	dw 1861,MSG_1861-$ ; 8006
 36217 0000598B 4607891F                	dw 1862,MSG_1862-$ ; 8073
 36218 0000598F 47070320                	dw 1863,MSG_1863-$ ; 8195
 36219 00005993 4807A220                	dw 1864,MSG_1864-$ ; 8354
 36220 00005997 49070521                	dw 1865,MSG_1865-$ ; 8453
 36221 0000599B 4A076C21                	dw 1866,MSG_1866-$ ; 8556
 36222 0000599F 5807D021                	dw 1880,MSG_1880-$ ; 8656
 36223 000059A3 59074422                	dw 1881,MSG_1881-$ ; 8772
 36224 000059A7 5A07BE22                	dw 1882,MSG_1882-$ ; 8894
 36225 000059AB 5B071123                	dw 1883,MSG_1883-$ ; 8977
 36226 000059AF 6C07B023                	dw 1900,MSG_1900-$ ; 9136
 36227 000059B3 8007C423                	dw 1920,MSG_1920-$ ; 9156
 36228 000059B7 8107F023                	dw 1921,MSG_1921-$ ; 9200
 36229                                  $M_ID_3_162:
 36230 000059BB 8207                    	dw 1922			; Message Number = 1922
 36231 000059BD 4324                    	dw MSG_1922-$ ; 9285	; Message offset from message number (5CCCh+2445h=8111h)
 36232                                  
 36233                                  ; ---------------------------------------------------------------------------
 36234                                  ; Class 3 messages
 36235                                  ; ---------------------------------------------------------------------------
 36236                                  	
 36237                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36238                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5CD0h
 36239                                  
 36240                                  MSG_1020:	; COMMON4
 36241 000059BF 0F                      	db 15	; (MSG_1015-MSG_1020)-1
 36242 000059C0 253120627974657320-     	db '%1 bytes free',0Dh,0Ah
 36242 000059C9 667265650D0A       
 36243                                  MSG_1015:	; COMMON18
 36244 000059CF 23                      	db 35
 36245 000059D0 46696C652063616E6E-     	db 'File cannot be copied onto itself',0Dh,0Ah
 36245 000059D9 6F7420626520636F70-
 36245 000059E2 696564206F6E746F20-
 36245 000059EB 697473656C660D0A   
 36246                                  MSG_1004:	; COMMON20
 36247 000059F3 19                      	db 25
 36248 000059F4 496E73756666696369-     	db 'Insufficient disk space',0Dh,0Ah
 36248 000059FD 656E74206469736B20-
 36248 00005A06 73706163650D0A     
 36249                                  MSG_1026:	; COMMON22
 36250 00005A0D 13                      	db 19
 36251 00005A0E 496E76616C69642063-     	db 'Invalid code page',0Dh,0Ah
 36251 00005A17 6F646520706167650D-
 36251 00005A20 0A                 
 36252                                  MSG_1031:	; COMMON23
 36253 00005A21 0E                      	db 14
 36254 00005A22 496E76616C69642064-     	db 'Invalid date',0Dh,0Ah
 36254 00005A2B 6174650D0A         
 36255                                  MSG_1035:	; COMMON24
 36256 00005A30 0E                      	db 14
 36257 00005A31 496E76616C69642074-     	db 'Invalid time',0Dh,0Ah
 36257 00005A3A 696D650D0A         
 36258                                  MSG_1062:	; COMMON25
 36259 00005A3F 0E                      	db 14
 36260 00005A40 496E76616C69642070-     	db 'Invalid path',0Dh,0Ah
 36260 00005A49 6174680D0A         
 36261                                  MSG_1028:	; COMMON28
 36262 00005A4E 21                      	db 33
 36263 00005A4F 507265737320616E79-     	db 'Press any key to continue . . .',0Dh,0Ah
 36263 00005A58 206B657920746F2063-
 36263 00005A61 6F6E74696E7565202E-
 36263 00005A6A 202E202E0D0A       
 36264                                  MSG_1045:	; COMMON32
 36265 00005A70 1C                      	db 28
 36266 00005A71 556E61626C6520746F-     	db 'Unable to create directory',0Dh,0Ah
 36266 00005A7A 206372656174652064-
 36266 00005A83 69726563746F72790D-
 36266 00005A8C 0A                 
 36267                                  MSG_1041:	; COMMON33
 36268 00005A8D 21                      	db 33
 36269 00005A8E 566F6C756D6520696E-     	db 'Volume in drive %1 has no label',0Dh,0Ah
 36269 00005A97 206472697665202531-
 36269 00005AA0 20686173206E6F206C-
 36269 00005AA9 6162656C0D0A       
 36270                                  MSG_1042:	; COMMON34
 36271 00005AAF 1A                      	db 26
 36272 00005AB0 566F6C756D6520696E-     	db 'Volume in drive %1 is %2',0Dh,0Ah
 36272 00005AB9 206472697665202531-
 36272 00005AC2 2069732025320D0A   
 36273                                  MSG_1043:	; COMMON36
 36274 00005ACA 1F                      	db 31  ; (MSG_1002-MSG_1043)-1
 36275 00005ACB 566F6C756D65205365-     	db 'Volume Serial Number is %1-%2',0Dh,0Ah
 36275 00005AD4 7269616C204E756D62-
 36275 00005ADD 65722069732025312D-
 36275 00005AE6 25320D0A           
 36276                                  MSG_1002:
 36277 00005AEA 27                              db 39
 36278 00005AEB 4475706C6963617465-     	db 'Duplicate file name or file not found',0Dh,0Ah
 36278 00005AF4 2066696C65206E616D-
 36278 00005AFD 65206F722066696C65-
 36278 00005B06 206E6F7420666F756E-
 36278 00005B0F 640D0A             
 36279                                  MSG_1003:
 36280 00005B12 1B                      	db 27
 36281 00005B13 496E76616C69642070-     	db 'Invalid path or file name',0Dh,0Ah
 36281 00005B1C 617468206F72206669-
 36281 00005B25 6C65206E616D650D0A 
 36282                                  MSG_1007:
 36283 00005B2E 1A                      	db 26
 36284 00005B2F 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
 36284 00005B38 7669726F6E6D656E74-
 36284 00005B41 2073706163650D0A   
 36285                                  MSG_1008:
 36286 00005B49 15                      	db 21
 36287 00005B4A 46696C652063726561-     	db 'File creation error',0Dh,0Ah
 36287 00005B53 74696F6E206572726F-
 36287 00005B5C 720D0A             
 36288                                  MSG_1009:
 36289 00005B5F 14                      	db 20  ; (MSG_1010-MSG_1009)-1
 36290 00005B60 42617463682066696C-     	db 'Batch file missing',0Dh,0Ah
 36290 00005B69 65206D697373696E67-
 36290 00005B72 0D0A               
 36291                                  MSG_1010:
 36292 00005B74 1F                      	db 31
 36293 00005B75 0D0A                    	db 0Dh,0Ah
 36294 00005B77 496E73657274206469-     	db 'Insert disk with batch file',0Dh,0Ah
 36294 00005B80 736B20776974682062-
 36294 00005B89 617463682066696C65-
 36294 00005B92 0D0A               
 36295                                  MSG_1011:
 36296 00005B94 1A                      	db 26
 36297 00005B95 42616420636F6D6D61-     	db 'Bad command or file name',0Dh,0Ah
 36297 00005B9E 6E64206F722066696C-
 36297 00005BA7 65206E616D650D0A   
 36298                                  MSG_1014:	; EXTEND5
 36299 00005BAF 10                      	db 16
 36300 00005BB0 416363657373206465-     	db 'Access denied ',0Dh,0Ah
 36300 00005BB9 6E696564200D0A     
 36301                                  MSG_1016:
 36302 00005BC0 29                      	db 41
 36303 00005BC1 436F6E74656E74206F-     	db 'Content of destination lost before copy',0Dh,0Ah
 36303 00005BCA 662064657374696E61-
 36303 00005BD3 74696F6E206C6F7374-
 36303 00005BDC 206265666F72652063-
 36303 00005BE5 6F70790D0A         
 36304                                  MSG_1017:
 36305 00005BEA 24                      	db 36
 36306 00005BEB 496E76616C69642066-     	db 'Invalid filename or file not found',0Dh,0Ah
 36306 00005BF4 696C656E616D65206F-
 36306 00005BFD 722066696C65206E6F-
 36306 00005C06 7420666F756E640D0A 
 36307                                  MSG_1018:
 36308 00005C0F 13                      	db 19
 36309 00005C10 25312066696C652873-     	db '%1 file(s) copied',0Dh,0Ah
 36309 00005C19 2920636F706965640D-
 36309 00005C22 0A                 
 36310                                  MSG_1019:
 36311 00005C23 0B                      	db 11
 36312 00005C24 25312066696C652873-     	db '%1 file(s) '
 36312 00005C2D 2920               
 36313                                  MSG_1021:	; EXTEND15
 36314 00005C2F 1D                      	db 29
 36315 00005C30 496E76616C69642064-     	db 'Invalid drive specification',0Dh,0Ah
 36315 00005C39 726976652073706563-
 36315 00005C42 696669636174696F6E-
 36315 00005C4B 0D0A               
 36316                                  MSG_1022:
 36317 00005C4D 26                      	db 38
 36318 00005C4E 436F64652070616765-     	db 'Code page %1 not prepared for system',0Dh,0Ah
 36318 00005C57 202531206E6F742070-
 36318 00005C60 726570617265642066-
 36318 00005C69 6F722073797374656D-
 36318 00005C72 0D0A               
 36319                                  MSG_1023:
 36320 00005C74 2B                      	db 43
 36321 00005C75 436F64652070616765-     	db 'Code page %1 not prepared for all devices',0Dh,0Ah
 36321 00005C7E 202531206E6F742070-
 36321 00005C87 726570617265642066-
 36321 00005C90 6F7220616C6C206465-
 36321 00005C99 76696365730D0A     
 36322                                  MSG_1024:
 36323 00005CA0 16                      	db 22
 36324 00005CA1 41637469766520636F-     	db 'Active code page: %1',0Dh,0Ah
 36324 00005CAA 646520706167653A20-
 36324 00005CB3 25310D0A           
 36325                                  MSG_1025:
 36326 00005CB7 17                      	db 23
 36327 00005CB8 4E4C5346554E43206E-     	db 'NLSFUNC not installed',0Dh,0Ah
 36327 00005CC1 6F7420696E7374616C-
 36327 00005CCA 6C65640D0A         
 36328                                  MSG_1027:
 36329 00005CCF 20                      	db 32
 36330 00005CD0 43757272656E742064-     	db 'Current drive is no longer valid'
 36330 00005CD9 72697665206973206E-
 36330 00005CE2 6F206C6F6E67657220-
 36330 00005CEB 76616C6964         
 36331                                  MSG_1029:
 36332 00005CF0 11                      	db 17
 36333 00005CF1 4C6162656C206E6F74-     	db 'Label not found',0Dh,0Ah
 36333 00005CFA 20666F756E640D0A   
 36334                                  MSG_1030:
 36335 00005D02 0E                      	db 14
 36336 00005D03 53796E746178206572-     	db 'Syntax error',0Dh,0Ah
 36336 00005D0C 726F720D0A         
 36337                                  MSG_1032:
 36338 00005D11 17                      	db 23
 36339 00005D12 43757272656E742064-     	db 'Current date is %1 %2',0Dh,0Ah
 36339 00005D1B 617465206973202531-
 36339 00005D24 2025320D0A         
 36340                                  MSG_1033:
 36341 00005D29 15                      	db 21
 36342 00005D2A 53756E4D6F6E547565-     	db 'SunMonTueWedThuFriSat'
 36342 00005D33 576564546875467269-
 36342 00005D3C 536174             
 36343                                  MSG_1034:
 36344 00005D3F 15                      	db 21
 36345 00005D40 456E746572206E6577-     	db 'Enter new date (%1): '
 36345 00005D49 206461746520282531-
 36345 00005D52 293A20             
 36346                                  MSG_1036:
 36347 00005D55 14                      	db 20
 36348 00005D56 43757272656E742074-     	db 'Current time is %1',0Dh,0Ah
 36348 00005D5F 696D65206973202531-
 36348 00005D68 0D0A               
 36349                                  MSG_1037:
 36350 00005D6A 10                      	db 16
 36351 00005D6B 456E746572206E6577-     	db 'Enter new time: '
 36351 00005D74 2074696D653A20     
 36352                                  MSG_1038:
 36353 00005D7B 12                              db 18
 36354 00005D7C 2C2020202044656C65-     	db ',    Delete (Y/N)?'
 36354 00005D85 74652028592F4E293F 
 36355                                  MSG_1039:
 36356 00005D8E 3C                              db 60
 36357 00005D8F 416C6C2066696C6573-     	db 'All files in directory will be deleted!',0Dh,0Ah
 36357 00005D98 20696E206469726563-
 36357 00005DA1 746F72792077696C6C-
 36357 00005DAA 2062652064656C6574-
 36357 00005DB3 6564210D0A         
 36358 00005DB8 41726520796F752073-     	db 'Are you sure (Y/N)?'
 36358 00005DC1 7572652028592F4E29-
 36358 00005DCA 3F                 
 36359                                  MSG_1040:
 36360 00005DCB 14                      	db 20
 36361 00005DCC 4D532D444F53205665-     	db 'MS-DOS Version %1.%2'
 36361 00005DD5 7273696F6E2025312E-
 36361 00005DDE 2532               
 36362                                  MSG_1044:
 36363 00005DE0 13                      	db 19
 36364 00005DE1 496E76616C69642064-     	db 'Invalid directory',0Dh,0Ah
 36364 00005DEA 69726563746F72790D-
 36364 00005DF3 0A                 
 36365                                  MSG_1046:
 36366 00005DF4 36                      	db 54
 36367 00005DF5 496E76616C69642070-     	db 'Invalid path, not directory,',0Dh,0Ah
 36367 00005DFE 6174682C206E6F7420-
 36367 00005E07 6469726563746F7279-
 36367 00005E10 2C0D0A             
 36368 00005E13 6F7220646972656374-     	db 'or directory not empty',0Dh,0Ah
 36368 00005E1C 6F7279206E6F742065-
 36368 00005E25 6D7074790D0A       
 36369                                  MSG_1047:
 36370 00005E2B 18                      	db 24
 36371 00005E2C 4D7573742073706563-     	db 'Must specify ON or OFF',0Dh,0Ah
 36371 00005E35 696679204F4E206F72-
 36371 00005E3E 204F46460D0A       
 36372                                  MSG_1048:
 36373 00005E44 11                      	db 17
 36374 00005E45 4469726563746F7279-     	db 'Directory of %1',0Dh,0Ah
 36374 00005E4E 206F662025310D0A   
 36375                                  MSG_1049:
 36376 00005E56 09                      	db 9
 36377 00005E57 4E6F20506174680D0A      	db 'No Path',0Dh,0Ah
 36378                                  MSG_1050:
 36379 00005E60 1E                      	db 30
 36380 00005E61 496E76616C69642064-     	db 'Invalid drive in search path',0Dh,0Ah
 36380 00005E6A 7269766520696E2073-
 36380 00005E73 656172636820706174-
 36380 00005E7C 680D0A             
 36381                                  MSG_1051:
 36382 00005E7F 10                      	db 16
 36383 00005E80 496E76616C69642064-     	db 'Invalid device',0Dh,0Ah
 36383 00005E89 65766963650D0A     
 36384                                  MSG_1052:
 36385 00005E90 16                      	db 22
 36386 00005E91 464F522063616E6E6F-     	db 'FOR cannot be nested',0Dh,0Ah
 36386 00005E9A 74206265206E657374-
 36386 00005EA3 65640D0A           
 36387                                  MSG_1053:
 36388 00005EA7 25                      	db 37
 36389 00005EA8 496E7465726D656469-     	db 'Intermediate file error during pipe',0Dh,0Ah
 36389 00005EB1 6174652066696C6520-
 36389 00005EBA 6572726F7220647572-
 36389 00005EC3 696E6720706970650D-
 36389 00005ECC 0A                 
 36390                                  MSG_1054:
 36391 00005ECD 26                      	db 38
 36392 00005ECE 43616E6E6F7420646F-     	db 'Cannot do binary reads from a device',0Dh,0Ah
 36392 00005ED7 2062696E6172792072-
 36392 00005EE0 656164732066726F6D-
 36392 00005EE9 206120646576696365-
 36392 00005EF2 0D0A               
 36393                                  
 36394                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:6205h)
 36395                                  MSG_1055:
 36396 00005EF4 0D                      	db 13
 36397 00005EF5 425245414B20697320-     	db 'BREAK is %1',0Dh,0Ah
 36397 00005EFE 25310D0A           
 36398                                  MSG_1056:
 36399 00005F02 0E                      	db 14
 36400 00005F03 564552494659206973-     	db 'VERIFY is %1',0Dh,0Ah
 36400 00005F0C 2025310D0A         
 36401                                  MSG_1057:
 36402 00005F11 0C                      	db 12
 36403 00005F12 4543484F2069732025-     	db 'ECHO is %1',0Dh,0Ah
 36403 00005F1B 310D0A             
 36404                                  MSG_1059:
 36405 00005F1E 04                      	db 4
 36406 00005F1F 6F666600                	db 'off',0
 36407                                  MSG_1060:
 36408 00005F23 03                      	db 3
 36409 00005F24 6F6E00                  	db 'on',0
 36410                                  MSG_1061:
 36411 00005F27 19                      	db 25
 36412 00005F28 4572726F7220777269-     	db 'Error writing to device',0Dh,0Ah
 36412 00005F31 74696E6720746F2064-
 36412 00005F3A 65766963650D0A     
 36413                                  MSG_1063:
 36414 00005F41 02                      	db 2
 36415 00005F42 2531                    	db '%1'
 36416                                  MSG_1064:
 36417 00005F44 02                      	db 2
 36418 00005F45 2531                    	db '%1'
 36419                                  MSG_1065:
 36420 00005F47 02                      	db 2
 36421 00005F48 2531                    	db '%1'
 36422                                  MSG_1066:
 36423 00005F4A 02                      	db 2
 36424 00005F4B 2531                    	db '%1'
 36425                                  MSG_1067:
 36426 00005F4D 01                      	db 1
 36427 00005F4E 09                      	db 9
 36428                                  MSG_1068:
 36429 00005F4F 0A                      	db 10
 36430 00005F50 203C4449523E202020-     	db ' <DIR>    '
 36430 00005F59 20                 
 36431                                  MSG_1069:
 36432 00005F5A 03                      	db 3
 36433 00005F5B 082008                  	db 8, 20h, 8
 36434                                  MSG_1070:	; CRLF
 36435 00005F5E 02                      	db 2
 36436 00005F5F 0D                      	db 0Dh
 36437 00005F60 0A                      	db 0Ah
 36438                                  MSG_1071:
 36439 00005F61 02                      	db 2
 36440 00005F62 2531                    	db '%1'
 36441                                  MSG_1072:
 36442 00005F64 08                      	db 8
 36443 00005F65 6D6D2D64642D7979        	db 'mm-dd-yy'
 36444                                  MSG_1073:
 36445 00005F6D 08                      	db 8
 36446 00005F6E 64642D6D6D2D7979        	db 'dd-mm-yy'
 36447                                  MSG_1074:
 36448 00005F76 08                      	db 8
 36449 00005F77 79792D6D6D2D6464        	db 'yy-mm-dd'
 36450                                  MSG_1075:
 36451 00005F7F 05                      	db 5
 36452 00005F80 2531202532              	db '%1 %2'
 36453                                  MSG_1076:
 36454 00005F85 02                      	db 2
 36455 00005F86 2531                    	db '%1'
 36456                                  MSG_1077:
 36457 00005F88 07                      	db 7
 36458 00005F89 20253120202532          	db ' %1  %2'
 36459                                  MSG_1078:
 36460 00005F90 1A                      	db 26
 36461 00005F91 4469726563746F7279-     	db 'Directory already exists',0Dh,0Ah
 36461 00005F9A 20616C726561647920-
 36461 00005FA3 6578697374730D0A   
 36462                                  MSG_1079:
 36463 00005FAB 0A                      	db 10
 36464 00005FAC 25312062797465730D-     	db '%1 bytes',0Dh,0Ah
 36464 00005FB5 0A                 
 36465                                  MSG_1080:
 36466 00005FB6 15                      	db 21
 36467 00005FB7 546F74616C2066696C-     	db 'Total files listed:',0Dh,0Ah
 36467 00005FC0 6573206C6973746564-
 36467 00005FC9 3A0D0A             
 36468                                  MSG_1081:
 36469 00005FCC 2A                      	db 42
 36470 00005FCD 284572726F72206F63-     	db '(Error occurred in environment variable)',0Dh,0Ah
 36470 00005FD6 63757272656420696E-
 36470 00005FDF 20656E7669726F6E6D-
 36470 00005FE8 656E74207661726961-
 36470 00005FF1 626C65290D0A       
 36471                                  MSG_1084:
 36472 00005FF7 0F                      	db 15
 36473 00005FF8 28636F6E74696E7569-     	db '(continuing %1)'
 36473 00006001 6E6720253129       
 36474                                  MSG_1090:
 36475 00006007 0D                      	db 13
 36476 00006008 5265766973696F6E20-     	db 'Revision %1',0Dh,0Ah
 36476 00006011 25310D0A           
 36477                                  MSG_1091:
 36478 00006015 0D                      	db 13
 36479 00006016 444F5320697320696E-     	db 'DOS is in ROM'
 36479 0000601F 20524F4D           
 36480                                  MSG_1092:
 36481 00006023 0D                      	db 13
 36482 00006024 444F5320697320696E-     	db 'DOS is in HMA'
 36482 0000602D 20484D41           
 36483                                  MSG_1093:
 36484 00006031 14                      	db 20
 36485 00006032 444F5320697320696E-     	db 'DOS is in low memory'
 36485 0000603B 206C6F77206D656D6F-
 36485 00006044 7279               
 36486                                  MSG_1094:
 36487 00006046 1C                      	db 28
 36488 00006047 43616E6E6F74204C6F-     	db 'Cannot Loadhigh batch file',0Dh,0Ah
 36488 00006050 616468696768206261-
 36488 00006059 7463682066696C650D-
 36488 00006062 0A                 
 36489                                  MSG_1095:
 36490 00006063 1C                      	db 28
 36491 00006064 4C6F6164486967683A-     	db 'LoadHigh: Invalid filename',0Dh,0Ah
 36491 0000606D 20496E76616C696420-
 36491 00006076 66696C656E616D650D-
 36491 0000607F 0A                 
 36492                                  MSG_1096:
 36493 00006080 30                      	db 48
 36494 00006081 43616E6E6F74206F70-     	db 'Cannot open specified country information file',0Dh,0Ah
 36494 0000608A 656E20737065636966-
 36494 00006093 69656420636F756E74-
 36494 0000609C 727920696E666F726D-
 36494 000060A5 6174696F6E2066696C-
 36494 000060AE 650D0A             
 36495                                  
 36496                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:63C2h)
 36497                                  MSG_1200:
 36498 000060B1 00                      	db 0	; /? unimplemented
 36499                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:63C3h)
 36500                                  MSG_1300:
 36501 000060B2 86                      	db 134
 36502 000060B3 53657473206F722063-     	db 'Sets or clears extended CTRL+C checking.',0Dh,0Ah
 36502 000060BC 6C6561727320657874-
 36502 000060C5 656E64656420435452-
 36502 000060CE 4C2B4320636865636B-
 36502 000060D7 696E672E0D0A       
 36503 000060DD 0D0A                    	db 0Dh,0Ah
 36504 000060DF 425245414B205B4F4E-     	db 'BREAK [ON | OFF]',0Dh,0Ah
 36504 000060E8 207C204F46465D0D0A 
 36505 000060F1 0D0A                    	db 0Dh,0Ah
 36506 000060F3 547970652042524541-     	db 'Type BREAK without a parameter to display the current BREAK setting.',0Dh,0Ah
 36506 000060FC 4B20776974686F7574-
 36506 00006105 206120706172616D65-
 36506 0000610E 74657220746F206469-
 36506 00006117 73706C617920746865-
 36506 00006120 2063757272656E7420-
 36506 00006129 425245414B20736574-
 36506 00006132 74696E672E0D0A     
 36507                                  MSG_1320:
 36508 00006139 3F                      	db 63
 36509 0000613A 446973706C61797320-     	db 'Displays or sets the active code page number.',0Dh,0Ah
 36509 00006143 6F7220736574732074-
 36509 0000614C 686520616374697665-
 36509 00006155 20636F646520706167-
 36509 0000615E 65206E756D6265722E-
 36509 00006167 0D0A               
 36510 00006169 0D0A                    	db 0Dh,0Ah
 36511 0000616B 43484350205B6E6E6E-     	db 'CHCP [nnn]',0Dh,0Ah
 36511 00006174 5D0D0A             
 36512 00006177 0D0A                    	db 0Dh,0Ah
 36513                                  MSG_1321:
 36514 00006179 70                      	db 112
 36515 0000617A 20206E6E6E20202053-     	db '  nnn   Specifies a code page number.',0Dh,0Ah
 36515 00006183 706563696669657320-
 36515 0000618C 6120636F6465207061-
 36515 00006195 6765206E756D626572-
 36515 0000619E 2E0D0A             
 36516 000061A1 0D0A                    	db 0Dh,0Ah
 36517 000061A3 547970652043484350-     	db 'Type CHCP without a parameter to display the active code page number.',0Dh,0Ah
 36517 000061AC 20776974686F757420-
 36517 000061B5 6120706172616D6574-
 36517 000061BE 657220746F20646973-
 36517 000061C7 706C61792074686520-
 36517 000061D0 61637469766520636F-
 36517 000061D9 64652070616765206E-
 36517 000061E2 756D6265722E0D0A   
 36518                                  MSG_1340:
 36519 000061EA 5B                      	db 91
 36520 000061EB 446973706C61797320-     	db 'Displays the name of or changes the current directory.',0Dh,0Ah
 36520 000061F4 746865206E616D6520-
 36520 000061FD 6F66206F7220636861-
 36520 00006206 6E6765732074686520-
 36520 0000620F 63757272656E742064-
 36520 00006218 69726563746F72792E-
 36520 00006221 0D0A               
 36521 00006223 0D0A                    	db 0Dh,0Ah
 36522 00006225 4348444952205B6472-     	db 'CHDIR [drive:][path]',0Dh,0Ah
 36522 0000622E 6976653A5D5B706174-
 36522 00006237 685D0D0A           
 36523 0000623B 43484449525B2E2E5D-     	db 'CHDIR[..]',0Dh,0Ah
 36523 00006244 0D0A               
 36524                                  MSG_1341:
 36525 00006246 62                      	db 98
 36526 00006247 4344205B6472697665-     	db 'CD [drive:][path]',0Dh,0Ah
 36526 00006250 3A5D5B706174685D0D-
 36526 00006259 0A                 
 36527 0000625A 43445B2E2E5D0D0A        	db 'CD[..]',0Dh,0Ah
 36528 00006262 0D0A                    	db 0Dh,0Ah
 36529 00006264 20202E2E2020205370-     	db '  ..   Specifies that you want to change to the parent directory.'
 36529 0000626D 656369666965732074-
 36529 00006276 68617420796F752077-
 36529 0000627F 616E7420746F206368-
 36529 00006288 616E676520746F2074-
 36529 00006291 686520706172656E74-
 36529 0000629A 206469726563746F72-
 36529 000062A3 792E               
 36530 000062A5 0D0A                    	db 0Dh,0Ah
 36531 000062A7 0D0A                    	db 0Dh,0Ah
 36532                                  MSG_1342:
 36533 000062A9 91                      	db 145
 36534 000062AA 547970652043442064-     	db 'Type CD drive: to display the current directory in the specified '
 36534 000062B3 726976653A20746F20-
 36534 000062BC 646973706C61792074-
 36534 000062C5 68652063757272656E-
 36534 000062CE 74206469726563746F-
 36534 000062D7 727920696E20746865-
 36534 000062E0 207370656369666965-
 36534 000062E9 6420               
 36535 000062EB 64726976652E0D0A        	db 'drive.',0Dh,0Ah
 36536 000062F3 547970652043442077-     	db 'Type CD without parameters to display the current drive and directory.',0Dh,0Ah
 36536 000062FC 6974686F7574207061-
 36536 00006305 72616D657465727320-
 36536 0000630E 746F20646973706C61-
 36536 00006317 792074686520637572-
 36536 00006320 72656E742064726976-
 36536 00006329 6520616E6420646972-
 36536 00006332 6563746F72792E0D0A 
 36537                                  MSG_1360:
 36538 0000633B 1B                      	db 27
 36539 0000633C 436C65617273207468-     	db 'Clears the screen.',0Dh,0Ah
 36539 00006345 652073637265656E2E-
 36539 0000634E 0D0A               
 36540 00006350 0D0A                    	db 0Dh,0Ah
 36541 00006352 434C530D0A              	db 'CLS',0Dh,0Ah
 36542                                  MSG_1400:
 36543 00006357 91                      	db 145
 36544 00006358 436F70696573206F6E-     	db 'Copies one or more files to another location.',0Dh,0Ah
 36544 00006361 65206F72206D6F7265-
 36544 0000636A 2066696C657320746F-
 36544 00006373 20616E6F7468657220-
 36544 0000637C 6C6F636174696F6E2E-
 36544 00006385 0D0A               
 36545 00006387 0D0A                    	db 0Dh,0Ah
 36546 00006389 434F5059205B2F4120-     	db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 36546 00006392 7C202F425D20736F75-
 36546 0000639B 726365205B2F41207C-
 36546 000063A4 202F425D205B2B2073-
 36546 000063AD 6F75726365205B2F41-
 36546 000063B6 207C202F425D205B2B-
 36546 000063BF 202E2E2E5D5D205B64-
 36546 000063C8 657374696E6174696F-
 36546 000063D1 6E0D0A             
 36547 000063D4 20205B2F41207C202F-     	db '  [/A | /B]] [/V]',0Dh,0Ah
 36547 000063DD 425D5D205B2F565D0D-
 36547 000063E6 0A                 
 36548 000063E7 0D0A                    	db 0Dh,0Ah
 36549                                  MSG_1401:
 36550 000063E9 68                      	db 104
 36551 000063EA 2020736F7572636520-     	db '  source       Specifies the file or files to be copied.',0Dh,0Ah
 36551 000063F3 202020202020537065-
 36551 000063FC 636966696573207468-
 36551 00006405 652066696C65206F72-
 36551 0000640E 2066696C657320746F-
 36551 00006417 20626520636F706965-
 36551 00006420 642E0D0A           
 36552 00006424 20202F412020202020-     	db '  /A           Indicates an ASCII text file.',0Dh,0Ah
 36552 0000642D 202020202020496E64-
 36552 00006436 69636174657320616E-
 36552 0000643F 204153434949207465-
 36552 00006448 78742066696C652E0D-
 36552 00006451 0A                 
 36553                                  MSG_1402:
 36554 00006452 76                      	db 118
 36555 00006453 20202F422020202020-     	db '  /B           Indicates a binary file.',0Dh,0Ah
 36555 0000645C 202020202020496E64-
 36555 00006465 696361746573206120-
 36555 0000646E 62696E617279206669-
 36555 00006477 6C652E0D0A         
 36556 0000647C 202064657374696E61-     	db '  destination  Specifies the directory and/or filename for the new file(s).',0Dh,0Ah
 36556 00006485 74696F6E2020537065-
 36556 0000648E 636966696573207468-
 36556 00006497 65206469726563746F-
 36556 000064A0 727920616E642F6F72-
 36556 000064A9 2066696C656E616D65-
 36556 000064B2 20666F722074686520-
 36556 000064BB 6E65772066696C6528-
 36556 000064C4 73292E0D0A         
 36557                                  MSG_1403:	
 36558 000064C9 41                      	db 65
 36559 000064CA 20202F562020202020-     	db '  /V           Verifies that new files are written correctly.',0Dh,0Ah
 36559 000064D3 202020202020566572-
 36559 000064DC 696669657320746861-
 36559 000064E5 74206E65772066696C-
 36559 000064EE 657320617265207772-
 36559 000064F7 697474656E20636F72-
 36559 00006500 726563746C792E0D0A 
 36560 00006509 0D0A                    	db 0Dh,0Ah
 36561                                  MSG_1404:
 36562 0000650B 87                      	db 135
 36563 0000650C 546F20617070656E64-     	db 'To append files, specify a single file for destination, but multiple files',0Dh,0Ah
 36563 00006515 2066696C65732C2073-
 36563 0000651E 706563696679206120-
 36563 00006527 73696E676C65206669-
 36563 00006530 6C6520666F72206465-
 36563 00006539 7374696E6174696F6E-
 36563 00006542 2C20627574206D756C-
 36563 0000654B 7469706C652066696C-
 36563 00006554 65730D0A           
 36564 00006558 666F7220736F757263-     	db 'for source (using wildcards or file1+file2+file3 format).',0Dh,0Ah
 36564 00006561 6520287573696E6720-
 36564 0000656A 77696C646361726473-
 36564 00006573 206F722066696C6531-
 36564 0000657C 2B66696C65322B6669-
 36564 00006585 6C653320666F726D61-
 36564 0000658E 74292E0D0A         
 36565                                  MSG_1420:
 36566 00006593 8A                      	db 138
 36567 00006594 4368616E6765732074-     	db 'Changes the terminal device used to control your system.',0Dh,0Ah
 36567 0000659D 6865207465726D696E-
 36567 000065A6 616C20646576696365-
 36567 000065AF 207573656420746F20-
 36567 000065B8 636F6E74726F6C2079-
 36567 000065C1 6F7572207379737465-
 36567 000065CA 6D2E0D0A           
 36568 000065CE 0D0A                    	db 0Dh,0Ah
 36569 000065D0 435454592064657669-     	db 'CTTY device',0Dh,0Ah
 36569 000065D9 63650D0A           
 36570 000065DD 0D0A                    	db 0Dh,0Ah
 36571 000065DF 202064657669636520-     	db '  device   The terminal device you want to use, such as COM1.',0Dh,0Ah
 36571 000065E8 202054686520746572-
 36571 000065F1 6D696E616C20646576-
 36571 000065FA 69636520796F752077-
 36571 00006603 616E7420746F207573-
 36571 0000660C 652C20737563682061-
 36571 00006615 7320434F4D312E0D0A 
 36572                                  MSG_1440:
 36573 0000661E 2D                      	db 45
 36574 0000661F 446973706C61797320-     	db 'Displays or sets the date.',0Dh,0Ah
 36574 00006628 6F7220736574732074-
 36574 00006631 686520646174652E0D-
 36574 0000663A 0A                 
 36575 0000663B 0D0A                    	db 0Dh,0Ah
 36576 0000663D 44415445205B646174-     	db 'DATE [date]',0Dh,0Ah
 36576 00006646 655D0D0A           
 36577 0000664A 0D0A                    	db 0Dh,0Ah
 36578                                  MSG_1441:
 36579 0000664C 83                      	db 131
 36580 0000664D 547970652044415445-     	db 'Type DATE without parameters to display the current date setting and',0Dh,0Ah
 36580 00006656 20776974686F757420-
 36580 0000665F 706172616D65746572-
 36580 00006668 7320746F2064697370-
 36580 00006671 6C6179207468652063-
 36580 0000667A 757272656E74206461-
 36580 00006683 74652073657474696E-
 36580 0000668C 6720616E640D0A     
 36581 00006693 612070726F6D707420-     	db 'a prompt for a new one.  Press ENTER to keep the same date.',0Dh,0Ah
 36581 0000669C 666F722061206E6577-
 36581 000066A5 206F6E652E20205072-
 36581 000066AE 65737320454E544552-
 36581 000066B7 20746F206B65657020-
 36581 000066C0 7468652073616D6520-
 36581 000066C9 646174652E0D0A     
 36582                                  MSG_1460:	
 36583 000066D0 64                      	db 100
 36584 000066D1 44656C65746573206F-     	db 'Deletes one or more files.',0Dh,0Ah
 36584 000066DA 6E65206F72206D6F72-
 36584 000066E3 652066696C65732E0D-
 36584 000066EC 0A                 
 36585 000066ED 0D0A                    	db 0Dh,0Ah
 36586 000066EF 44454C205B64726976-     	db 'DEL [drive:][path]filename [/P]',0Dh,0Ah
 36586 000066F8 653A5D5B706174685D-
 36586 00006701 66696C656E616D6520-
 36586 0000670A 5B2F505D0D0A       
 36587 00006710 4552415345205B6472-     	db 'ERASE [drive:][path]filename [/P]',0Dh,0Ah
 36587 00006719 6976653A5D5B706174-
 36587 00006722 685D66696C656E616D-
 36587 0000672B 65205B2F505D0D0A   
 36588 00006733 0D0A                    	db 0Dh,0Ah
 36589                                  MSG_1461:
 36590 00006735 83                      	db 131
 36591 00006736 20205B64726976653A-     	db '  [drive:][path]filename  Specifies the file(s) to delete.  Specify multiple',0Dh,0Ah
 36591 0000673F 5D5B706174685D6669-
 36591 00006748 6C656E616D65202053-
 36591 00006751 706563696669657320-
 36591 0000675A 7468652066696C6528-
 36591 00006763 732920746F2064656C-
 36591 0000676C 6574652E2020537065-
 36591 00006775 63696679206D756C74-
 36591 0000677E 69706C650D0A       
 36592 00006784 202020202020202020-     	db '                          files by using wildcards.',0Dh,0Ah
 36592 0000678D 202020202020202020-
 36592 00006796 202020202020202066-
 36592 0000679F 696C65732062792075-
 36592 000067A8 73696E672077696C64-
 36592 000067B1 63617264732E0D0A   
 36593                                  MSG_1462:
 36594 000067B9 4F                      	db 79
 36595 000067BA 20202F502020202020-     	db '  /P                      Prompts for confirmation before deleting each file.',0Dh,0Ah
 36595 000067C3 202020202020202020-
 36595 000067CC 202020202020202050-
 36595 000067D5 726F6D70747320666F-
 36595 000067DE 7220636F6E6669726D-
 36595 000067E7 6174696F6E20626566-
 36595 000067F0 6F72652064656C6574-
 36595 000067F9 696E67206561636820-
 36595 00006802 66696C652E0D0A     
 36596                                  MSG_1480:
 36597 00006809 A2                      	db 162
 36598 0000680A 446973706C61797320-     	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 36598 00006813 61206C697374206F66-
 36598 0000681C 2066696C657320616E-
 36598 00006825 642073756264697265-
 36598 0000682E 63746F726965732069-
 36598 00006837 6E2061206469726563-
 36598 00006840 746F72792E0D0A     
 36599 00006847 0D0A                    	db 0Dh,0Ah
 36600 00006849 444952205B64726976-     	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attributes]]',0Dh,0Ah
 36600 00006852 653A5D5B706174685D-
 36600 0000685B 5B66696C656E616D65-
 36600 00006864 5D205B2F505D205B2F-
 36600 0000686D 575D205B2F415B5B3A-
 36600 00006876 5D6174747269627574-
 36600 0000687F 65735D5D0D0A       
 36601 00006885 20205B2F4F5B5B3A5D-     	db '  [/O[[:]sortorder]] [/S] [/B] [/L]',0Dh,0Ah
 36601 0000688E 736F72746F72646572-
 36601 00006897 5D5D205B2F535D205B-
 36601 000068A0 2F425D205B2F4C5D0D-
 36601 000068A9 0A                 
 36602 000068AA 0D0A                    	db 0Dh,0Ah
 36603                                  MSG_1481:
 36604 000068AC 5D                      	db 93
 36605 000068AD 20205B64726976653A-     	db '  [drive:][path][filename]',0Dh,0Ah
 36605 000068B6 5D5B706174685D5B66-
 36605 000068BF 696C656E616D655D0D-
 36605 000068C8 0A                 
 36606 000068C9 202020202020202020-     	db '              Specifies drive, directory, and/or files to list.',0Dh,0Ah
 36606 000068D2 202020202053706563-
 36606 000068DB 696669657320647269-
 36606 000068E4 76652C206469726563-
 36606 000068ED 746F72792C20616E64-
 36606 000068F6 2F6F722066696C6573-
 36606 000068FF 20746F206C6973742E-
 36606 00006908 0D0A               
 36607                                  MSG_1482:
 36608 0000690A 61                      	db 97
 36609 0000690B 20202F502020202020-     	db '  /P          Pauses after each screenful of information.',0Dh,0Ah
 36609 00006914 202020202050617573-
 36609 0000691D 657320616674657220-
 36609 00006926 656163682073637265-
 36609 0000692F 656E66756C206F6620-
 36609 00006938 696E666F726D617469-
 36609 00006941 6F6E2E0D0A         
 36610 00006946 20202F572020202020-     	db '  /W          Uses wide list format.',0Dh,0Ah
 36610 0000694F 202020202055736573-
 36610 00006958 2077696465206C6973-
 36610 00006961 7420666F726D61742E-
 36610 0000696A 0D0A               
 36611                                  MSG_1483:	
 36612 0000696C 7A                      	db 122
 36613 0000696D 20202F412020202020-     	db '  /A          Displays files with specified attributes.',0Dh,0Ah
 36613 00006976 202020202044697370-
 36613 0000697F 6C6179732066696C65-
 36613 00006988 732077697468207370-
 36613 00006991 656369666965642061-
 36613 0000699A 747472696275746573-
 36613 000069A3 2E0D0A             
 36614 000069A6 202061747472696275-     	db '  attributes   D  Directories                R  Read-only files',0Dh,0Ah
 36614 000069AF 746573202020442020-
 36614 000069B8 4469726563746F7269-
 36614 000069C1 657320202020202020-
 36614 000069CA 202020202020202020-
 36614 000069D3 522020526561642D6F-
 36614 000069DC 6E6C792066696C6573-
 36614 000069E5 0D0A               
 36615                                  MSG_1484:
 36616 000069E7 BF                      	db 191
 36617 000069E8 202020202020202020-     	db '               H  Hidden files               A  Files ready for archiving',0Dh,0Ah
 36617 000069F1 202020202020482020-
 36617 000069FA 48696464656E206669-
 36617 00006A03 6C6573202020202020-
 36617 00006A0C 202020202020202020-
 36617 00006A15 41202046696C657320-
 36617 00006A1E 726561647920666F72-
 36617 00006A27 20617263686976696E-
 36617 00006A30 670D0A             
 36618 00006A33 202020202020202020-     	db '               S  System files               -  Prefix meaning "not"',0Dh,0Ah
 36618 00006A3C 202020202020532020-
 36618 00006A45 53797374656D206669-
 36618 00006A4E 6C6573202020202020-
 36618 00006A57 202020202020202020-
 36618 00006A60 2D2020507265666978-
 36618 00006A69 206D65616E696E6720-
 36618 00006A72 226E6F74220D0A     
 36619 00006A79 20202F4F2020202020-     	db '  /O          List by files in sorted order.',0Dh,0Ah
 36619 00006A82 20202020204C697374-
 36619 00006A8B 2062792066696C6573-
 36619 00006A94 20696E20736F727465-
 36619 00006A9D 64206F726465722E0D-
 36619 00006AA6 0A                 
 36620                                  MSG_1485:
 36621 00006AA7 9B                      	db 155
 36622 00006AA8 2020736F72746F7264-     	db '  sortorder    N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 36622 00006AB1 6572202020204E2020-
 36622 00006ABA 4279206E616D652028-
 36622 00006AC3 616C70686162657469-
 36622 00006ACC 632920202020202020-
 36622 00006AD5 53202042792073697A-
 36622 00006ADE 652028736D616C6C65-
 36622 00006AE7 737420666972737429-
 36622 00006AF0 0D0A               
 36623 00006AF2 202020202020202020-     	db '               E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 36623 00006AFB 202020202020452020-
 36623 00006B04 427920657874656E73-
 36623 00006B0D 696F6E2028616C7068-
 36623 00006B16 616265746963292020-
 36623 00006B1F 442020427920646174-
 36623 00006B28 6520262074696D6520-
 36623 00006B31 286561726C69657374-
 36623 00006B3A 206669727374290D0A 
 36624                                  MSG_1486:
 36625 00006B43 96                      	db 150
 36626 00006B44 202020202020202020-     	db '               G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 36626 00006B4D 202020202020472020-
 36626 00006B56 47726F757020646972-
 36626 00006B5F 6563746F7269657320-
 36626 00006B68 666972737420202020-
 36626 00006B71 2D2020507265666978-
 36626 00006B7A 20746F207265766572-
 36626 00006B83 7365206F726465720D-
 36626 00006B8C 0A                 
 36627 00006B8D 20202F532020202020-     	db '  /S          Displays files in specified directory and all subdirectories.',0Dh,0Ah
 36627 00006B96 202020202044697370-
 36627 00006B9F 6C6179732066696C65-
 36627 00006BA8 7320696E2073706563-
 36627 00006BB1 696669656420646972-
 36627 00006BBA 6563746F727920616E-
 36627 00006BC3 6420616C6C20737562-
 36627 00006BCC 6469726563746F7269-
 36627 00006BD5 65732E0D0A         
 36628                                  MSG_1487:
 36629 00006BDA 66                      	db 102
 36630 00006BDB 20202F422020202020-     	db '  /B          Uses bare format (no heading information or summary).',0Dh,0Ah
 36630 00006BE4 202020202055736573-
 36630 00006BED 206261726520666F72-
 36630 00006BF6 6D617420286E6F2068-
 36630 00006BFF 656164696E6720696E-
 36630 00006C08 666F726D6174696F6E-
 36630 00006C11 206F722073756D6D61-
 36630 00006C1A 7279292E0D0A       
 36631 00006C20 20202F4C2020202020-     	db '  /L          Uses lowercase.',0Dh,0Ah
 36631 00006C29 202020202055736573-
 36631 00006C32 206C6F776572636173-
 36631 00006C3B 652E0D0A           
 36632 00006C3F 0D0A                    	db 0Dh,0Ah
 36633                                  MSG_1488:
 36634 00006C41 92                      	db 146
 36635 00006C42 537769746368657320-     	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 36635 00006C4B 6D6179206265207072-
 36635 00006C54 6573657420696E2074-
 36635 00006C5D 686520444952434D44-
 36635 00006C66 20656E7669726F6E6D-
 36635 00006C6F 656E74207661726961-
 36635 00006C78 626C652E20204F7665-
 36635 00006C81 72726964650D0A     
 36636 00006C88 707265736574207377-     	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 36636 00006C91 697463686573206279-
 36636 00006C9A 20707265666978696E-
 36636 00006CA3 6720616E7920737769-
 36636 00006CAC 746368207769746820-
 36636 00006CB5 2D202868797068656E-
 36636 00006CBE 292D2D666F72206578-
 36636 00006CC7 616D706C652C202F2D-
 36636 00006CD0 572E0D0A           
 36637                                  MSG_1500:
 36638 00006CD4 3E                      	db 62
 36639 00006CD5 517569747320746865-     	db 'Quits the COMMAND.COM program (command interpreter).',0Dh,0Ah
 36639 00006CDE 20434F4D4D414E442E-
 36639 00006CE7 434F4D2070726F6772-
 36639 00006CF0 616D2028636F6D6D61-
 36639 00006CF9 6E6420696E74657270-
 36639 00006D02 7265746572292E0D0A 
 36640 00006D0B 0D0A                    	db 0Dh,0Ah
 36641 00006D0D 455849540D0A            	db 'EXIT',0Dh,0Ah
 36642                                  MSG_1520:
 36643 00006D13 3D                      	db 61
 36644 00006D14 437265617465732061-     	db 'Creates a directory.',0Dh,0Ah
 36644 00006D1D 206469726563746F72-
 36644 00006D26 792E0D0A           
 36645 00006D2A 0D0A                    	db 0Dh,0Ah
 36646 00006D2C 4D4B444952205B6472-     	db 'MKDIR [drive:]path',0Dh,0Ah
 36646 00006D35 6976653A5D70617468-
 36646 00006D3E 0D0A               
 36647 00006D40 4D44205B6472697665-     	db 'MD [drive:]path',0Dh,0Ah
 36647 00006D49 3A5D706174680D0A   
 36648                                  MSG_1540:
 36649 00006D51 5D                      	db 93
 36650 00006D52 446973706C61797320-     	db 'Displays or sets a search path for executable files.',0Dh,0Ah
 36650 00006D5B 6F7220736574732061-
 36650 00006D64 207365617263682070-
 36650 00006D6D 61746820666F722065-
 36650 00006D76 786563757461626C65-
 36650 00006D7F 2066696C65732E0D0A 
 36651 00006D88 0D0A                    	db 0Dh,0Ah
 36652 00006D8A 50415448205B5B6472-     	db 'PATH [[drive:]path[;...]]',0Dh,0Ah
 36652 00006D93 6976653A5D70617468-
 36652 00006D9C 5B3B2E2E2E5D5D0D0A 
 36653 00006DA5 50415448203B0D0A        	db 'PATH ;',0Dh,0Ah
 36654 00006DAD 0D0A                    	db 0Dh,0Ah
 36655                                  MSG_1541:
 36656 00006DAF 6B                      	db 107
 36657 00006DB0 547970652050415448-     	db 'Type PATH ; to clear all search-path settings and direct MS-DOS to search',0Dh,0Ah
 36657 00006DB9 203B20746F20636C65-
 36657 00006DC2 617220616C6C207365-
 36657 00006DCB 617263682D70617468-
 36657 00006DD4 2073657474696E6773-
 36657 00006DDD 20616E642064697265-
 36657 00006DE6 6374204D532D444F53-
 36657 00006DEF 20746F207365617263-
 36657 00006DF8 680D0A             
 36658 00006DFB 6F6E6C7920696E2074-     	db 'only in the current directory.',0Dh,0Ah
 36658 00006E04 68652063757272656E-
 36658 00006E0D 74206469726563746F-
 36658 00006E16 72792E0D0A         
 36659                                  MSG_1542:
 36660 00006E1B 3B                      	db 59
 36661 00006E1C 547970652050415448-     	db 'Type PATH without parameters to display the current path.',0Dh,0Ah
 36661 00006E25 20776974686F757420-
 36661 00006E2E 706172616D65746572-
 36661 00006E37 7320746F2064697370-
 36661 00006E40 6C6179207468652063-
 36661 00006E49 757272656E74207061-
 36661 00006E52 74682E0D0A         
 36662                                  MSG_1560:
 36663 00006E57 37                      	db 55
 36664 00006E58 4368616E6765732074-     	db 'Changes the MS-DOS command prompt.',0Dh,0Ah
 36664 00006E61 6865204D532D444F53-
 36664 00006E6A 20636F6D6D616E6420-
 36664 00006E73 70726F6D70742E0D0A 
 36665 00006E7C 0D0A                    	db 0Dh,0Ah
 36666 00006E7E 50524F4D5054205B74-     	db 'PROMPT [text]',0Dh,0Ah
 36666 00006E87 6578745D0D0A       
 36667 00006E8D 0D0A                    	db 0Dh,0Ah
 36668                                  MSG_1561:
 36669 00006E8F 7C                      	db 124
 36670 00006E90 202074657874202020-     	db '  text    Specifies a new command prompt.',0Dh,0Ah
 36670 00006E99 205370656369666965-
 36670 00006EA2 732061206E65772063-
 36670 00006EAB 6F6D6D616E64207072-
 36670 00006EB4 6F6D70742E0D0A     
 36671 00006EBB 0D0A                    	db 0Dh,0Ah
 36672 00006EBD 50726F6D7074206361-     	db 'Prompt can be made up of normal characters and the following special codes:',0Dh,0Ah
 36672 00006EC6 6E206265206D616465-
 36672 00006ECF 207570206F66206E6F-
 36672 00006ED8 726D616C2063686172-
 36672 00006EE1 61637465727320616E-
 36672 00006EEA 642074686520666F6C-
 36672 00006EF3 6C6F77696E67207370-
 36672 00006EFC 656369616C20636F64-
 36672 00006F05 65733A0D0A         
 36673 00006F0A 0D0A                    	db 0Dh,0Ah
 36674                                  MSG_1562:
 36675 00006F0C 2F                      	db 47
 36676 00006F0D 202024512020203D20-     	db '  $Q   = (equal sign)',0Dh,0Ah
 36676 00006F16 28657175616C207369-
 36676 00006F1F 676E290D0A         
 36677 00006F24 202024242020202420-     	db '  $$   $ (dollar sign)',0Dh,0Ah
 36677 00006F2D 28646F6C6C61722073-
 36677 00006F36 69676E290D0A       
 36678                                  MSG_1563:
 36679 00006F3C 2A                      	db 42
 36680 00006F3D 202024542020204375-     	db '  $T   Current time',0Dh,0Ah
 36680 00006F46 7272656E742074696D-
 36680 00006F4F 650D0A             
 36681 00006F52 202024442020204375-     	db '  $D   Current date',0Dh,0Ah
 36681 00006F5B 7272656E7420646174-
 36681 00006F64 650D0A             
 36682                                  MSG_1564:
 36683 00006F67 3D                      	db 61
 36684 00006F68 202024502020204375-     	db '  $P   Current drive and path',0Dh,0Ah
 36684 00006F71 7272656E7420647269-
 36684 00006F7A 766520616E64207061-
 36684 00006F83 74680D0A           
 36685 00006F87 202024562020204D53-     	db '  $V   MS-DOS version number',0Dh,0Ah
 36685 00006F90 2D444F532076657273-
 36685 00006F99 696F6E206E756D6265-
 36685 00006FA2 720D0A             
 36686                                  MSG_1565:
 36687 00006FA5 34                      	db 52
 36688 00006FA6 2020244E2020204375-     	db '  $N   Current drive',0Dh,0Ah
 36688 00006FAF 7272656E7420647269-
 36688 00006FB8 76650D0A           
 36689 00006FBC 202024472020203E20-     	db '  $G   > (greater-than sign)',0Dh,0Ah
 36689 00006FC5 28677265617465722D-
 36689 00006FCE 7468616E207369676E-
 36689 00006FD7 290D0A             
 36690                                  MSG_1566:
 36691 00006FDA 2C                      	db 44
 36692 00006FDB 2020244C2020203C20-     	db '  $L   < (less-than sign)',0Dh,0Ah
 36692 00006FE4 286C6573732D746861-
 36692 00006FED 6E207369676E290D0A 
 36693 00006FF6 202024422020207C20-     	db '  $B   | (pipe)',0Dh,0Ah
 36693 00006FFF 2870697065290D0A   
 36694                                  MSG_1567:
 36695 00007007 79                      	db 121
 36696 00007008 202024482020204261-     	db '  $H   Backspace (erases previous character)',0Dh,0Ah
 36696 00007011 636B73706163652028-
 36696 0000701A 657261736573207072-
 36696 00007023 6576696F7573206368-
 36696 0000702C 61726163746572290D-
 36696 00007035 0A                 
 36697 00007036 202024452020204573-     	db '  $E   Escape code (ASCII code 27)',0Dh,0Ah
 36697 0000703F 6361706520636F6465-
 36697 00007048 202841534349492063-
 36697 00007051 6F6465203237290D0A 
 36698 0000705A 2020245F2020204361-     	db '  $_   Carriage return and linefeed',0Dh,0Ah
 36698 00007063 727269616765207265-
 36698 0000706C 7475726E20616E6420-
 36698 00007075 6C696E65666565640D-
 36698 0000707E 0A                 
 36699 0000707F 0D0A                    	db 0Dh,0Ah
 36700                                  MSG_1568:
 36701 00007081 4C                      	db 76
 36702 00007082 547970652050524F4D-     	db 'Type PROMPT without parameters to reset the prompt to the default setting.',0Dh,0Ah
 36702 0000708B 505420776974686F75-
 36702 00007094 7420706172616D6574-
 36702 0000709D 65727320746F207265-
 36702 000070A6 736574207468652070-
 36702 000070AF 726F6D707420746F20-
 36702 000070B8 746865206465666175-
 36702 000070C1 6C742073657474696E-
 36702 000070CA 672E0D0A           
 36703                                  MSG_1580:
 36704 000070CE 47                      	db 71
 36705 000070CF 52656D6F7665732028-     	db 'Removes (deletes) a directory.',0Dh,0Ah
 36705 000070D8 64656C657465732920-
 36705 000070E1 61206469726563746F-
 36705 000070EA 72792E0D0A         
 36706 000070EF 0D0A                    	db 0Dh,0Ah
 36707 000070F1 524D444952205B6472-     	db 'RMDIR [drive:]path',0Dh,0Ah
 36707 000070FA 6976653A5D70617468-
 36707 00007103 0D0A               
 36708 00007105 5244205B6472697665-     	db 'RD [drive:]path',0Dh,0Ah
 36708 0000710E 3A5D706174680D0A   
 36709                                  MSG_1600:
 36710 00007116 1C                      	db 28
 36711 00007117 52656E616D65732061-     	db 'Renames a file or files.',0Dh,0Ah
 36711 00007120 2066696C65206F7220-
 36711 00007129 66696C65732E0D0A   
 36712 00007131 0D0A                    	db 0Dh,0Ah
 36713                                  MSG_1601:
 36714 00007133 53                      	db 83
 36715 00007134 52454E414D45205B64-     	db 'RENAME [drive:][path]filename1 filename2',0Dh,0Ah
 36715 0000713D 726976653A5D5B7061-
 36715 00007146 74685D66696C656E61-
 36715 0000714F 6D65312066696C656E-
 36715 00007158 616D65320D0A       
 36716 0000715E 52454E205B64726976-     	db 'REN [drive:][path]filename1 filename2',0Dh,0Ah
 36716 00007167 653A5D5B706174685D-
 36716 00007170 66696C656E616D6531-
 36716 00007179 2066696C656E616D65-
 36716 00007182 320D0A             
 36717 00007185 0D0A                    	db 0Dh,0Ah
 36718                                  MSG_1602:
 36719 00007187 4D                      	db 77
 36720 00007188 4E6F74652074686174-     	db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 36720 00007191 20796F752063616E6E-
 36720 0000719A 6F7420737065636966-
 36720 000071A3 792061206E65772064-
 36720 000071AC 72697665206F722070-
 36720 000071B5 61746820666F722079-
 36720 000071BE 6F7572206465737469-
 36720 000071C7 6E6174696F6E206669-
 36720 000071D0 6C652E0D0A         
 36721                                  MSG_1620:
 36722 000071D5 57                      	db 87
 36723 000071D6 446973706C6179732C-     	db 'Displays, sets, or removes MS-DOS environment variables.',0Dh,0Ah
 36723 000071DF 20736574732C206F72-
 36723 000071E8 2072656D6F76657320-
 36723 000071F1 4D532D444F5320656E-
 36723 000071FA 7669726F6E6D656E74-
 36723 00007203 207661726961626C65-
 36723 0000720C 732E0D0A           
 36724 00007210 0D0A                    	db 0Dh,0Ah
 36725 00007212 534554205B76617269-     	db 'SET [variable=[string]]',0Dh,0Ah
 36725 0000721B 61626C653D5B737472-
 36725 00007224 696E675D5D0D0A     
 36726 0000722B 0D0A                    	db 0Dh,0Ah
 36727                                  MSG_1621:
 36728 0000722D 81                      	db 129
 36729 0000722E 20207661726961626C-     	db '  variable  Specifies the environment-variable name.',0Dh,0Ah
 36729 00007237 652020537065636966-
 36729 00007240 696573207468652065-
 36729 00007249 6E7669726F6E6D656E-
 36729 00007252 742D7661726961626C-
 36729 0000725B 65206E616D652E0D0A 
 36730 00007264 2020737472696E6720-     	db '  string    Specifies a series of characters to assign to the variable.',0Dh,0Ah
 36730 0000726D 202020537065636966-
 36730 00007276 696573206120736572-
 36730 0000727F 696573206F66206368-
 36730 00007288 617261637465727320-
 36730 00007291 746F2061737369676E-
 36730 0000729A 20746F207468652076-
 36730 000072A3 61726961626C652E0D-
 36730 000072AC 0A                 
 36731 000072AD 0D0A                    	db 0Dh,0Ah
 36732                                  MSG_1622:
 36733 000072AF 4B                      	db 75
 36734 000072B0 547970652053455420-     	db 'Type SET without parameters to display the current environment variables.',0Dh,0Ah
 36734 000072B9 776974686F75742070-
 36734 000072C2 6172616D6574657273-
 36734 000072CB 20746F20646973706C-
 36734 000072D4 617920746865206375-
 36734 000072DD 7272656E7420656E76-
 36734 000072E6 69726F6E6D656E7420-
 36734 000072EF 7661726961626C6573-
 36734 000072F8 2E0D0A             
 36735                                  MSG_1640:
 36736 000072FB 34                      	db 52
 36737 000072FC 446973706C61797320-     	db 'Displays or sets the system time.',0Dh,0Ah
 36737 00007305 6F7220736574732074-
 36737 0000730E 68652073797374656D-
 36737 00007317 2074696D652E0D0A   
 36738 0000731F 0D0A                    	db 0Dh,0Ah
 36739 00007321 54494D45205B74696D-     	db 'TIME [time]',0Dh,0Ah
 36739 0000732A 655D0D0A           
 36740 0000732E 0D0A                    	db 0Dh,0Ah
 36741                                  MSG_1641:
 36742 00007330 83                      	db 131
 36743 00007331 547970652054494D45-     	db 'Type TIME with no parameters to display the current time setting and a prompt',0Dh,0Ah
 36743 0000733A 2077697468206E6F20-
 36743 00007343 706172616D65746572-
 36743 0000734C 7320746F2064697370-
 36743 00007355 6C6179207468652063-
 36743 0000735E 757272656E74207469-
 36743 00007367 6D652073657474696E-
 36743 00007370 6720616E6420612070-
 36743 00007379 726F6D70740D0A     
 36744 00007380 666F722061206E6577-     	db 'for a new one.  Press ENTER to keep the same time.',0Dh,0Ah
 36744 00007389 206F6E652E20205072-
 36744 00007392 65737320454E544552-
 36744 0000739B 20746F206B65657020-
 36744 000073A4 7468652073616D6520-
 36744 000073AD 74696D652E0D0A     
 36745                                  MSG_1660:
 36746 000073B4 46                      	db 70
 36747 000073B5 446973706C61797320-     	db 'Displays the contents of a text file.',0Dh,0Ah
 36747 000073BE 74686520636F6E7465-
 36747 000073C7 6E7473206F66206120-
 36747 000073D0 746578742066696C65-
 36747 000073D9 2E0D0A             
 36748 000073DC 0D0A                    	db 0Dh,0Ah
 36749 000073DE 54595045205B647269-     	db 'TYPE [drive:][path]filename',0Dh,0Ah
 36749 000073E7 76653A5D5B70617468-
 36749 000073F0 5D66696C656E616D65-
 36749 000073F9 0D0A               
 36750                                  MSG_1680:
 36751 000073FB 25                      	db 37
 36752 000073FC 446973706C61797320-     	db 'Displays the MS-DOS version.',0Dh,0Ah
 36752 00007405 746865204D532D444F-
 36752 0000740E 532076657273696F6E-
 36752 00007417 2E0D0A             
 36753 0000741A 0D0A                    	db 0Dh,0Ah
 36754 0000741C 5645520D0A              	db 'VER',0Dh,0Ah
 36755                                  MSG_1700:
 36756 00007421 B1                      	db 177
 36757 00007422 54656C6C73204D532D-     	db 'Tells MS-DOS whether to verify that your files are written correctly to a',0Dh,0Ah
 36757 0000742B 444F53207768657468-
 36757 00007434 657220746F20766572-
 36757 0000743D 696679207468617420-
 36757 00007446 796F75722066696C65-
 36757 0000744F 732061726520777269-
 36757 00007458 7474656E20636F7272-
 36757 00007461 6563746C7920746F20-
 36757 0000746A 610D0A             
 36758 0000746D 6469736B2E0D0A          	db 'disk.',0Dh,0Ah
 36759 00007474 0D0A                    	db 0Dh,0Ah
 36760 00007476 564552494659205B4F-     	db 'VERIFY [ON | OFF]',0Dh,0Ah
 36760 0000747F 4E207C204F46465D0D-
 36760 00007488 0A                 
 36761 00007489 0D0A                    	db 0Dh,0Ah
 36762 0000748B 547970652056455249-     	db 'Type VERIFY without a parameter to display the current VERIFY setting.',0Dh,0Ah
 36762 00007494 465920776974686F75-
 36762 0000749D 74206120706172616D-
 36762 000074A6 6574657220746F2064-
 36762 000074AF 6973706C6179207468-
 36762 000074B8 652063757272656E74-
 36762 000074C1 205645524946592073-
 36762 000074CA 657474696E672E0D0A 
 36763                                  MSG_1720:
 36764 000074D3 52                      	db 82
 36765 000074D4 446973706C61797320-     	db 'Displays the disk volume label and serial number, if they exist.',0Dh,0Ah
 36765 000074DD 746865206469736B20-
 36765 000074E6 766F6C756D65206C61-
 36765 000074EF 62656C20616E642073-
 36765 000074F8 657269616C206E756D-
 36765 00007501 6265722C2069662074-
 36765 0000750A 686579206578697374-
 36765 00007513 2E0D0A             
 36766 00007516 0D0A                    	db 0Dh,0Ah
 36767 00007518 564F4C205B64726976-     	db 'VOL [drive:]',0Dh,0Ah
 36767 00007521 653A5D0D0A         
 36768                                  MSG_1740:
 36769 00007526 5B                      	db 91
 36770 00007527 43616C6C73206F6E65-     	db 'Calls one batch program from another.',0Dh,0Ah
 36770 00007530 206261746368207072-
 36770 00007539 6F6772616D2066726F-
 36770 00007542 6D20616E6F74686572-
 36770 0000754B 2E0D0A             
 36771 0000754E 0D0A                    	db 0Dh,0Ah
 36772 00007550 43414C4C205B647269-     	db 'CALL [drive:][path]filename [batch-parameters]',0Dh,0Ah
 36772 00007559 76653A5D5B70617468-
 36772 00007562 5D66696C656E616D65-
 36772 0000756B 205B62617463682D70-
 36772 00007574 6172616D6574657273-
 36772 0000757D 5D0D0A             
 36773 00007580 0D0A                    	db 0Dh,0Ah
 36774                                  MSG_1741:
 36775 00007582 72                      	db 114
 36776 00007583 202062617463682D70-     	db '  batch-parameters   Specifies any command-line information required by the',0Dh,0Ah
 36776 0000758C 6172616D6574657273-
 36776 00007595 202020537065636966-
 36776 0000759E 69657320616E792063-
 36776 000075A7 6F6D6D616E642D6C69-
 36776 000075B0 6E6520696E666F726D-
 36776 000075B9 6174696F6E20726571-
 36776 000075C2 756972656420627920-
 36776 000075CB 7468650D0A         
 36777 000075D0 202020202020202020-     	db '                     batch program.',0Dh,0Ah
 36777 000075D9 202020202020202020-
 36777 000075E2 202020626174636820-
 36777 000075EB 70726F6772616D2E0D-
 36777 000075F4 0A                 
 36778                                  MSG_1760:
 36779 000075F5 4C                      	db 76
 36780 000075F6 5265636F7264732063-     	db 'Records comments (remarks) in a batch file or CONFIG.SYS.',0Dh,0Ah
 36780 000075FF 6F6D6D656E74732028-
 36780 00007608 72656D61726B732920-
 36780 00007611 696E20612062617463-
 36780 0000761A 682066696C65206F72-
 36780 00007623 20434F4E4649472E53-
 36780 0000762C 59532E0D0A         
 36781 00007631 0D0A                    	db 0Dh,0Ah
 36782 00007633 52454D205B636F6D6D-     	db 'REM [comment]',0Dh,0Ah
 36782 0000763C 656E745D0D0A       
 36783                                  MSG_1780:
 36784 00007642 6B                      	db 107
 36785 00007643 53757370656E647320-     	db 'Suspends processing of a batch program and displays the message "'
 36785 0000764C 70726F63657373696E-
 36785 00007655 67206F662061206261-
 36785 0000765E 7463682070726F6772-
 36785 00007667 616D20616E64206469-
 36785 00007670 73706C617973207468-
 36785 00007679 65206D657373616765-
 36785 00007682 2022               
 36786 00007684 507265737320616E79-     	db 'Press any',0Dh,0Ah
 36786 0000768D 0D0A               
 36787 0000768F 6B657920746F20636F-     	db 'key to continue...."',0Dh,0Ah
 36787 00007698 6E74696E75652E2E2E-
 36787 000076A1 2E220D0A           
 36788 000076A5 0D0A                    	db 0Dh,0Ah
 36789 000076A7 50415553450D0A          	db 'PAUSE',0Dh,0Ah
 36790                                  MSG_1800:
 36791 000076AE 4D                      	db 77
 36792 000076AF 446973706C61797320-     	db 'Displays messages, or turns command-echoing on or off.',0Dh,0Ah
 36792 000076B8 6D657373616765732C-
 36792 000076C1 206F72207475726E73-
 36792 000076CA 20636F6D6D616E642D-
 36792 000076D3 6563686F696E67206F-
 36792 000076DC 6E206F72206F66662E-
 36792 000076E5 0D0A               
 36793 000076E7 0D0A                    	db 0Dh,0Ah
 36794 000076E9 20204543484F205B4F-     	db '  ECHO [ON | OFF]',0Dh,0Ah
 36794 000076F2 4E207C204F46465D0D-
 36794 000076FB 0A                 
 36795                                  MSG_1801:
 36796 000076FC 57                      	db 87
 36797 000076FD 20204543484F205B6D-     	db '  ECHO [message]',0Dh,0Ah
 36797 00007706 6573736167655D0D0A 
 36798 0000770F 0D0A                    	db 0Dh,0Ah
 36799 00007711 54797065204543484F-     	db 'Type ECHO without parameters to display the current echo setting.'
 36799 0000771A 20776974686F757420-
 36799 00007723 706172616D65746572-
 36799 0000772C 7320746F2064697370-
 36799 00007735 6C6179207468652063-
 36799 0000773E 757272656E74206563-
 36799 00007747 686F2073657474696E-
 36799 00007750 672E               
 36800 00007752 0D0A                    	db 0Dh,0Ah
 36801                                  MSG_1820:
 36802 00007754 47                      	db 71
 36803 00007755 44697265637473204D-     	db 'Directs MS-DOS to a labelled line in a batch program.',0Dh,0Ah
 36803 0000775E 532D444F5320746F20-
 36803 00007767 61206C6162656C6C65-
 36803 00007770 64206C696E6520696E-
 36803 00007779 206120626174636820-
 36803 00007782 70726F6772616D2E0D-
 36803 0000778B 0A                 
 36804 0000778C 0D0A                    	db 0Dh,0Ah
 36805 0000778E 474F544F206C616265-     	db 'GOTO label',0Dh,0Ah
 36805 00007797 6C0D0A             
 36806 0000779A 0D0A                    	db 0Dh,0Ah
 36807                                  MSG_1821:
 36808 0000779C 8A                      	db 138
 36809 0000779D 20206C6162656C2020-     	db '  label   Specifies a text string used in the batch program as a label.',0Dh,0Ah
 36809 000077A6 205370656369666965-
 36809 000077AF 732061207465787420-
 36809 000077B8 737472696E67207573-
 36809 000077C1 656420696E20746865-
 36809 000077CA 206261746368207072-
 36809 000077D3 6F6772616D20617320-
 36809 000077DC 61206C6162656C2E0D-
 36809 000077E5 0A                 
 36810 000077E6 0D0A                    	db 0Dh,0Ah
 36811 000077E8 596F75207479706520-     	db 'You type a label on a line by itself, beginning with a colon.',0Dh,0Ah
 36811 000077F1 61206C6162656C206F-
 36811 000077FA 6E2061206C696E6520-
 36811 00007803 627920697473656C66-
 36811 0000780C 2C20626567696E6E69-
 36811 00007815 6E6720776974682061-
 36811 0000781E 20636F6C6F6E2E0D0A 
 36812                                  MSG_1840:
 36813 00007827 4A                      	db 74
 36814 00007828 4368616E6765732074-     	db 'Changes the position of replaceable parameters in a batch file.',0Dh,0Ah
 36814 00007831 686520706F73697469-
 36814 0000783A 6F6E206F6620726570-
 36814 00007843 6C61636561626C6520-
 36814 0000784C 706172616D65746572-
 36814 00007855 7320696E2061206261-
 36814 0000785E 7463682066696C652E-
 36814 00007867 0D0A               
 36815 00007869 0D0A                    	db 0Dh,0Ah
 36816 0000786B 53484946540D0A          	db 'SHIFT',0Dh,0Ah
 36817                                  MSG_1860:
 36818 00007872 5A                      	db 90
 36819 00007873 506572666F726D7320-     	db 'Performs conditional processing in batch programs.',0Dh,0Ah
 36819 0000787C 636F6E646974696F6E-
 36819 00007885 616C2070726F636573-
 36819 0000788E 73696E6720696E2062-
 36819 00007897 617463682070726F67-
 36819 000078A0 72616D732E0D0A     
 36820 000078A7 0D0A                    	db 0Dh,0Ah
 36821 000078A9 4946205B4E4F545D20-     	db 'IF [NOT] ERRORLEVEL number command',0Dh,0Ah
 36821 000078B2 4552524F524C455645-
 36821 000078BB 4C206E756D62657220-
 36821 000078C4 636F6D6D616E640D0A 
 36822                                  MSG_1861:
 36823 000078CD 46                      	db 70
 36824 000078CE 4946205B4E4F545D20-     	db 'IF [NOT] string1==string2 command',0Dh,0Ah
 36824 000078D7 737472696E67313D3D-
 36824 000078E0 737472696E67322063-
 36824 000078E9 6F6D6D616E640D0A   
 36825 000078F1 4946205B4E4F545D20-     	db 'IF [NOT] EXIST filename command',0Dh,0Ah
 36825 000078FA 45584953542066696C-
 36825 00007903 656E616D6520636F6D-
 36825 0000790C 6D616E640D0A       
 36826 00007912 0D0A                    	db 0Dh,0Ah
 36827                                  MSG_1862:
 36828 00007914 7D                      	db 125
 36829 00007915 20204E4F5420202020-     	db '  NOT               Specifies that MS-DOS should carry out the command only',0Dh,0Ah
 36829 0000791E 202020202020202020-
 36829 00007927 202053706563696669-
 36829 00007930 65732074686174204D-
 36829 00007939 532D444F532073686F-
 36829 00007942 756C64206361727279-
 36829 0000794B 206F75742074686520-
 36829 00007954 636F6D6D616E64206F-
 36829 0000795D 6E6C790D0A         
 36830 00007962 202020202020202020-     	db '                    if the condition is false.',0Dh,0Ah
 36830 0000796B 202020202020202020-
 36830 00007974 202069662074686520-
 36830 0000797D 636F6E646974696F6E-
 36830 00007986 2069732066616C7365-
 36830 0000798F 2E0D0A             
 36831                                  MSG_1863:
 36832 00007992 A2                      	db 162
 36833 00007993 20204552524F524C45-     	db '  ERRORLEVEL number Specifies a true condition if the last program run returned',0Dh,0Ah
 36833 0000799C 56454C206E756D6265-
 36833 000079A5 722053706563696669-
 36833 000079AE 657320612074727565-
 36833 000079B7 20636F6E646974696F-
 36833 000079C0 6E2069662074686520-
 36833 000079C9 6C6173742070726F67-
 36833 000079D2 72616D2072756E2072-
 36833 000079DB 657475726E65640D0A 
 36834 000079E4 202020202020202020-     	db '                    '
 36834 000079ED 202020202020202020-
 36834 000079F6 2020               
 36835 000079F8 616E20657869742063-     	db 'an exit code equal to or greater than the number specified.',0Dh,0Ah
 36835 00007A01 6F646520657175616C-
 36835 00007A0A 20746F206F72206772-
 36835 00007A13 656174657220746861-
 36835 00007A1C 6E20746865206E756D-
 36835 00007A25 626572207370656369-
 36835 00007A2E 666965642E0D0A     
 36836                                  MSG_1864:
 36837 00007A35 66                      	db 102
 36838 00007A36 2020636F6D6D616E64-     	db '  command           Specifies the command to carry out if the condition is',0Dh,0Ah
 36838 00007A3F 202020202020202020-
 36838 00007A48 202053706563696669-
 36838 00007A51 65732074686520636F-
 36838 00007A5A 6D6D616E6420746F20-
 36838 00007A63 6361727279206F7574-
 36838 00007A6C 206966207468652063-
 36838 00007A75 6F6E646974696F6E20-
 36838 00007A7E 69730D0A           
 36839 00007A82 202020202020202020-     	db '                    met.',0Dh,0Ah
 36839 00007A8B 202020202020202020-
 36839 00007A94 20206D65742E0D0A   
 36840                                  MSG_1865:
 36841 00007A9C 6A                      	db 106
 36842 00007A9D 2020737472696E6731-     	db '  string1==string2  Specifies a true condition if the specified text strings',0Dh,0Ah
 36842 00007AA6 3D3D737472696E6732-
 36842 00007AAF 202053706563696669-
 36842 00007AB8 657320612074727565-
 36842 00007AC1 20636F6E646974696F-
 36842 00007ACA 6E2069662074686520-
 36842 00007AD3 737065636966696564-
 36842 00007ADC 207465787420737472-
 36842 00007AE5 696E67730D0A       
 36843 00007AEB 202020202020202020-     	db '                    match.',0Dh,0Ah
 36843 00007AF4 202020202020202020-
 36843 00007AFD 20206D617463682E0D-
 36843 00007B06 0A                 
 36844                                  MSG_1866:
 36845 00007B07 67                      	db 103
 36846 00007B08 202045584953542066-     	db '  EXIST filename    Specifies a true condition if the specified filename',0Dh,0Ah
 36846 00007B11 696C656E616D652020-
 36846 00007B1A 202053706563696669-
 36846 00007B23 657320612074727565-
 36846 00007B2C 20636F6E646974696F-
 36846 00007B35 6E2069662074686520-
 36846 00007B3E 737065636966696564-
 36846 00007B47 2066696C656E616D65-
 36846 00007B50 0D0A               
 36847 00007B52 202020202020202020-     	db '                    exists.',0Dh,0Ah
 36847 00007B5B 202020202020202020-
 36847 00007B64 20206578697374732E-
 36847 00007B6D 0D0A               
 36848                                  MSG_1880:
 36849 00007B6F 77                      	db 119
 36850 00007B70 52756E732061207370-     	db 'Runs a specified command for each file in a set of files.',0Dh,0Ah
 36850 00007B79 656369666965642063-
 36850 00007B82 6F6D6D616E6420666F-
 36850 00007B8B 722065616368206669-
 36850 00007B94 6C6520696E20612073-
 36850 00007B9D 6574206F662066696C-
 36850 00007BA6 65732E0D0A         
 36851 00007BAB 0D0A                    	db 0Dh,0Ah
 36852 00007BAD 464F52202576617269-     	db 'FOR %variable IN (set) DO command [command-parameters]',0Dh,0Ah
 36852 00007BB6 61626C6520494E2028-
 36852 00007BBF 7365742920444F2063-
 36852 00007BC8 6F6D6D616E64205B63-
 36852 00007BD1 6F6D6D616E642D7061-
 36852 00007BDA 72616D65746572735D-
 36852 00007BE3 0D0A               
 36853 00007BE5 0D0A                    	db 0Dh,0Ah
 36854                                  MSG_1881:
 36855 00007BE7 7D                      	db 125
 36856 00007BE8 202025766172696162-     	db '  %variable  Specifies a replaceable parameter.',0Dh,0Ah
 36856 00007BF1 6C6520205370656369-
 36856 00007BFA 666965732061207265-
 36856 00007C03 706C61636561626C65-
 36856 00007C0C 20706172616D657465-
 36856 00007C15 722E0D0A           
 36857 00007C19 202028736574292020-     	db '  (set)      Specifies a set of one or more files.  Wildcards may be used.',0Dh,0Ah
 36857 00007C22 202020205370656369-
 36857 00007C2B 666965732061207365-
 36857 00007C34 74206F66206F6E6520-
 36857 00007C3D 6F72206D6F72652066-
 36857 00007C46 696C65732E20205769-
 36857 00007C4F 6C646361726473206D-
 36857 00007C58 617920626520757365-
 36857 00007C61 642E0D0A           
 36858                                  MSG_1882:
 36859 00007C65 56                      	db 86
 36860 00007C66 2020636F6D6D616E64-     	db '  command    Specifies the command to carry out for each file.',0Dh,0Ah
 36860 00007C6F 202020205370656369-
 36860 00007C78 666965732074686520-
 36860 00007C81 636F6D6D616E642074-
 36860 00007C8A 6F206361727279206F-
 36860 00007C93 757420666F72206561-
 36860 00007C9C 63682066696C652E0D-
 36860 00007CA5 0A                 
 36861 00007CA6 2020636F6D6D616E64-     	db '  command-parameters',0Dh,0Ah
 36861 00007CAF 2D706172616D657465-
 36861 00007CB8 72730D0A           
 36862                                  MSG_1883:
 36863 00007CBC A2                      	db 162
 36864 00007CBD 202020202020202020-     	db '             Specifies parameters or switches for the specified command.',0Dh,0Ah
 36864 00007CC6 202020205370656369-
 36864 00007CCF 666965732070617261-
 36864 00007CD8 6D6574657273206F72-
 36864 00007CE1 207377697463686573-
 36864 00007CEA 20666F722074686520-
 36864 00007CF3 737065636966696564-
 36864 00007CFC 20636F6D6D616E642E-
 36864 00007D05 0D0A               
 36865 00007D07 0D0A                    	db 0Dh,0Ah
 36866 00007D09 546F20757365207468-     	db 'To use the FOR command in a batch program, specify %%variable instead of',0Dh,0Ah
 36866 00007D12 6520464F5220636F6D-
 36866 00007D1B 6D616E6420696E2061-
 36866 00007D24 206261746368207072-
 36866 00007D2D 6F6772616D2C207370-
 36866 00007D36 656369667920252576-
 36866 00007D3F 61726961626C652069-
 36866 00007D48 6E7374656164206F66-
 36866 00007D51 0D0A               
 36867 00007D53 257661726961626C65-     	db '%variable.',0Dh,0Ah
 36867 00007D5C 2E0D0A             
 36868                                  MSG_1900:
 36869 00007D5F 17                      	db 23
 36870 00007D60 526573657276656420-     	db 'Reserved command name',0Dh,0Ah
 36870 00007D69 636F6D6D616E64206E-
 36870 00007D72 616D650D0A         
 36871                                  MSG_1920:
 36872 00007D77 2F                      	db 47
 36873 00007D78 4C6F61647320612070-     	db 'Loads a program into the upper memory area.',0Dh,0Ah
 36873 00007D81 726F6772616D20696E-
 36873 00007D8A 746F20746865207570-
 36873 00007D93 706572206D656D6F72-
 36873 00007D9C 7920617265612E0D0A 
 36874 00007DA5 0D0A                    	db 0Dh,0Ah
 36875                                  MSG_1921:
 36876 00007DA7 58                      	db 88
 36877 00007DA8 4C4F41444849474820-     	db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 36877 00007DB1 5B64726976653A5D5B-
 36877 00007DBA 706174685D66696C65-
 36877 00007DC3 6E616D65205B706172-
 36877 00007DCC 616D65746572735D0D-
 36877 00007DD5 0A                 
 36878 00007DD6 4C48205B6472697665-     	db 'LH [drive:][path]filename [parameters]',0Dh,0Ah
 36878 00007DDF 3A5D5B706174685D66-
 36878 00007DE8 696C656E616D65205B-
 36878 00007DF1 706172616D65746572-
 36878 00007DFA 735D0D0A           
 36879 00007DFE 0D0A                    	db 0Dh,0Ah
 36880                                  MSG_1922:
 36881 00007E00 71                      	db 113
 36882 00007E01 2020706172616D6574-     	db '  parameters   Specifies any command-line information required by the',0Dh,0Ah
 36882 00007E0A 657273202020537065-
 36882 00007E13 63696669657320616E-
 36882 00007E1C 7920636F6D6D616E64-
 36882 00007E25 2D6C696E6520696E66-
 36882 00007E2E 6F726D6174696F6E20-
 36882 00007E37 726571756972656420-
 36882 00007E40 6279207468650D0A   
 36883 00007E48 202020202020202020-     	db '               program you want to load.',0Dh,0Ah
 36883 00007E51 20202020202070726F-
 36883 00007E5A 6772616D20796F7520-
 36883 00007E63 77616E7420746F206C-
 36883 00007E6C 6F61642E0D0A       
 36884                                  
 36885                                  ; ---------------------------------------------------------------------------
 36886                                  
 36887                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36888                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8183h
 36889                                  
 36890                                  ; --------------- S U B R O U T I N E ---------------------------------------
 36891                                  
 36892                                  $M_CLS_3:
 36893 00007E72 0E                      	push	cs		; CLASS_F
 36894 00007E73 07                      	pop	es
 36895 00007E74 8D3E[3357]              	lea	di,$M_CLASS_3_STRUC ; LEA DI,$M_CLASS_3_STRUC
 36896                                  	; 15/04/2023
 36897                                  	;add	cx,10053	; ADD CX,$-$M_CLASS_3_STRUC ; 8189h-5A44h
 36898                                  	; 06/08/2024
 36899 00007E78 81C14527                	add	cx,$-$M_CLASS_3_STRUC
 36900 00007E7C C3                      	retn
 36901                                  
 36902                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36903                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:818Eh
 36904                                  
 36905                                  ; ---------------------------------------------------------------------------
 36906                                  ; Class 1 messages
 36907                                  ; ---------------------------------------------------------------------------
 36908                                  	
 36909                                  $M_CLASS_1_STRUC:
 36910 00007E7D 01                      	db 1			; $M_CLASS_ID
 36911 00007E7E 0500                    	dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 36912 00007E80 04                      	db 4			; Class_1_MessageCount
 36913                                  $M_ID_1_1:
 36914 00007E81 0200                    	dw 2			; Message Number = 2
 36915 00007E83 1000                    	dw EXTEND2-$+2 ; 10h	; Message offset from message number
 36916                                  $M_ID_1_2:
 36917 00007E85 0300                    	dw 3			; Message Number = 3
 36918 00007E87 1B00                    	dw EXTEND3-$+2 ; 1Bh	; Message offset from message number
 36919                                  $M_ID_1_3:
 36920 00007E89 0800                    	dw 8			; Message Number = 8
 36921 00007E8B 2600                    	dw EXTEND8-$+2 ; 26h	; Message offset from message number
 36922                                  $M_ID_1_4:
 36923 00007E8D FFFF                    	dw 0FFFFh		; Message Number = -1
 36924 00007E8F 3600                    	dw EXTEND999-$+2 ; 36h	; Message offset from message number
 36925                                  
 36926                                  ; ---------------------------------------------------------------------------
 36927                                  
 36928                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81A2h
 36929                                  EXTEND2:
 36930 00007E91 0E                      	db 14
 36931 00007E92 46696C65206E6F7420-     	db 'File not found'
 36931 00007E9B 666F756E64         
 36932                                  EXTEND3:
 36933 00007EA0 0E                      	db 14
 36934 00007EA1 50617468206E6F7420-     	db 'Path not found'
 36934 00007EAA 666F756E64         
 36935                                  EXTEND8:
 36936 00007EAF 13                      	db 19
 36937 00007EB0 496E73756666696369-     	db 'Insufficient memory'
 36937 00007EB9 656E74206D656D6F72-
 36937 00007EC2 79                 
 36938                                  EXTEND999:
 36939 00007EC3 11                      	db 17
 36940 00007EC4 457874656E64656420-     	db 'Extended Error %1'
 36940 00007ECD 4572726F72202531   
 36941                                  
 36942                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36943                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81E6h
 36944                                  
 36945                                  ; --------------- S U B R O U T I N E ---------------------------------------
 36946                                  $M_MSGSERV_1:
 36947 00007ED5 0E                      	push	cs
 36948 00007ED6 07                      	pop	es
 36949 00007ED7 8D3E[7D7E]              	lea	di,$M_CLASS_1_STRUC
 36950                                  	; 15/04/2023
 36951                                  	;add	cx,94		; $-$M_CLASS_1_STRUC ; 81ECh-818Eh
 36952 00007EDB C3                      	retn
 36953                                  
 36954                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36955                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F0h
 36956                                  
 36957                                  ; ---------------------------------------------------------------------------
 36958                                  ; Class 2 messages
 36959                                  ; ---------------------------------------------------------------------------
 36960                                  	
 36961                                  $M_CLASS_2_STRUC:
 36962 00007EDC 02                      	db 2			; $M_CLASS_ID
 36963 00007EDD 0500                    	dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 36964 00007EDF 01                      	db 1			; Class_2_MessageCount
 36965                                  $M_ID_2_1:
 36966 00007EE0 FFFF                    	dw 0FFFFh		; Message Number = -1
 36967 00007EE2 0400                    	dw PARSE999-$+2 ; 4	; Message offset from message number
 36968                                  ; ---------------------------------------------------------------------------
 36969                                  
 36970                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F8h
 36971                                  PARSE999:
 36972 00007EE4 0E                      	db 14
 36973 00007EE5 506172736520457272-     	db 'Parse Error %1'
 36973 00007EEE 6F72202531         
 36974                                  
 36975                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36976                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8207h
 36977                                  
 36978                                  ; --------------- S U B R O U T I N E ---------------------------------------
 36979                                  $M_MSGSERV_2:
 36980 00007EF3 0E                      	push	cs
 36981 00007EF4 07                      	pop	es
 36982 00007EF5 8D3E[DC7E]              	lea	di,$M_CLASS_2_STRUC
 36983                                  	; 15/04/2023
 36984                                  	;add	cx,29	; $-$M_CLASS_2_STRUC ; 820Dh-81F0h
 36985 00007EF9 C3                      	retn
 36986                                  
 36987                                  ;============================================================================
 36988                                  ; TRANMSG.ASM, MSDOS 6.0, 1991
 36989                                  ;============================================================================
 36990                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36991                                  
 36992                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8211h
 36993                                  
 36994                                  ;****************************************************
 36995                                  ;* TRANSIENT MESSAGE POINTERS & SUBSTITUTION BLOCKS *
 36996                                  ;****************************************************
 36997                                  
 36998                                  msg_disp_class:
 36999 00007EFA FF                      	db	util_msg_class ; 0FFh
 37000                                  msg_cont_flag:
 37001 00007EFB 00                      	db	no_cont_flag ; 0
 37002                                  
 37003                                  ;  extended error string output
 37004                                  extend_buf_ptr:
 37005 00007EFC 0000                    	dw	0			;AN000;set to no message
 37006                                  extend_buf_sub:
 37007 00007EFE 00                      	db	0			;AN000;set to no substitutions
 37008 00007EFF 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37009 00007F00 00                      	db	0			;AN000;reserved
 37010                                  extend_buf_off:
 37011 00007F01 [158C]                  	dw	string_ptr_2		;AN000;offset of arg
 37012                                  extend_buf_seg:
 37013 00007F03 0000                    	dw	0			;AN000;segment of arg
 37014 00007F05 00                      	db	0			;AN000;first subst
 37015 00007F06 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37016 00007F07 80                      	db	128			;AN000;maximum width
 37017 00007F08 00                      	db	0			;AN000;minimum width
 37018 00007F09 20                      	db	blank ; 20h		;AN000;pad character
 37019                                  
 37020                                  ;  "Duplicate file name or file not found"
 37021                                  RENERR_PTR:
 37022 00007F0A EA03                    	dw	1002			;AN000;message number
 37023 00007F0C 00                      	db	no_subst ; 0		;AN000;number of subst
 37024                                  
 37025                                  ;  "Invalid path or file name"
 37026                                  BADCPMES_PTR:
 37027 00007F0D EB03                    	dw	1003			;AN000;message number
 37028 00007F0F 00                      	db	no_subst ; 0		;AN000;number of subst
 37029                                  
 37030                                  ;  "Insufficient disk space"
 37031                                  NOSPACE_PTR:
 37032 00007F10 EC03                    	dw	1004			;AN000;message number
 37033 00007F12 00                      	db	no_subst ; 0		;AN000;number of subst
 37034                                  
 37035                                  ;  "Out of environment space"
 37036                                  ENVERR_PTR:
 37037 00007F13 EF03                    	dw	1007			;AN000;message number
 37038 00007F15 00                      	db	no_subst ; 0		;AN000;number of subst
 37039                                  
 37040                                  ;  "File creation error"
 37041                                  FULLDIR_PTR:
 37042 00007F16 F003                    	dw	1008			;AN000;message number
 37043 00007F18 00                      	db	no_subst ; 0		;AN000;number of subst
 37044                                  
 37045                                  ;  "Batch file missing",13,10
 37046                                  BADBAT_PTR:
 37047 00007F19 F103                    	dw	1009			;AN000;message number
 37048 00007F1B 00                      	db	no_subst ; 0		;AN000;number of subst
 37049                                  
 37050                                  ;  "Insert disk with batch file",13,10
 37051                                  NEEDBAT_PTR:
 37052 00007F1C F203                    	dw	1010			;AN000;message number
 37053 00007F1E 00                      	db	no_subst ; 0		;AN000;number of subst
 37054                                  
 37055                                  ;  "Bad command or file name",13,10
 37056                                  BADNAM_PTR:
 37057 00007F1F F303                    	dw	1011			;AN000;message number
 37058 00007F21 00                      	db	no_subst ; 0		;AN000;number of subst
 37059                                  
 37060                                  ;  "Access denied",13,10
 37061                                  ACCDEN_PTR:
 37062 00007F22 F603                    	dw	1014			;AN000;message number
 37063 00007F24 00                      	db	no_subst ; 0		;AN000;number of subst
 37064                                  
 37065                                  ;  "File cannot be copied onto itself",13,10
 37066                                  OVERWR_PTR:
 37067 00007F25 F703                    	dw	1015			;AN000;message number
 37068 00007F27 00                      	db	no_subst ; 0		;AN000;number of subst
 37069                                  
 37070                                  ;  "Content of destination lost before copy",13,10
 37071                                  LOSTERR_PTR:
 37072 00007F28 F803                    	dw	1016			;AN000;message number
 37073 00007F2A 00                      	db	no_subst ; 0		;AN000;number of subst
 37074                                  
 37075                                  ;  "Invalid filename or file not found",13,10
 37076                                  INORNOT_PTR:
 37077 00007F2B F903                    	dw	1017			;AN000;message number
 37078 00007F2D 00                      	db	no_subst		;AN000;number of subst
 37079                                  
 37080                                  ;  "%1 File(s) copied",13,10
 37081                                  copied_ptr:
 37082 00007F2E FA03                    	dw	1018			;AN000;message number
 37083 00007F30 01                      	db	1			;AN000;number of subst
 37084 00007F31 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37085 00007F32 00                      	db	0			;AN000;reserved
 37086 00007F33 [178C]                  	dw	Copy_num		;AN000;offset of arg
 37087 00007F35 0000                    	dw	0			;AN000;segment of arg
 37088 00007F37 01                      	db	1			;AN000;first subst
 37089 00007F38 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37090                                  					;AN000;binary to decimal
 37091 00007F39 09                      	db	9			;AN000;maximum width
 37092 00007F3A 09                      	db	9			;AN000;minimum width
 37093 00007F3B 20                      	db	blank ; 20h		;AN000;pad character
 37094                                  
 37095                                  ;  "%1 File(s) "
 37096                                  dirmes_ptr:
 37097 00007F3C FB03                    	dw	1019			;AN000;message number
 37098 00007F3E 01                      	db	1			;AN000;number of subst
 37099 00007F3F 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37100 00007F40 00                      	db	0			;AN000;reserved
 37101 00007F41 [1A8C]                  	dw	Dir_Num			;AN000;offset of arg
 37102 00007F43 0000                    	dw	0			;AN000;segment of arg
 37103 00007F45 01                      	db	1			;AN000;first subst
 37104 00007F46 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37105                                  					;AN000;binary to decimal
 37106 00007F47 09                      	db	9			;AN000;maximum width
 37107 00007F48 09                      	db	9			;AN000;minimum width
 37108 00007F49 20                      	db	blank ; 20h		;AN000;pad character
 37109                                  
 37110                                  ;  "%1 bytes free",13,10
 37111                                  bytmes_ptr:
 37112 00007F4A FC03                    	dw	1020			;AN000;message number
 37113 00007F4C 01                      	db	1			;AN000;number of subst
 37114 00007F4D 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37115 00007F4E 00                      	db	0			;AN000;reserved
 37116 00007F4F [1C8C]                  	dw	Bytes_Free		;AN000;offset of arg
 37117 00007F51 0000                    	dw	0			;AN000;segment of arg
 37118 00007F53 01                      	db	1			;AN000;first subst
 37119 00007F54 B1                      	db	0B1h ; Right_Align+Unsgn_Bin_DWord
 37120                                  					;AN000;long binary to decimal
 37121 00007F55 1C                      	db	28			;AN000;maximum width
 37122 00007F56 1C                      	db	28			;AN000;minimum width
 37123 00007F57 20                      	db	blank ; 20h		;AN000;pad character
 37124                                  
 37125                                  ;  "Invalid drive specification",13,10
 37126                                  baddrv_ptr:
 37127 00007F58 FD03                    	dw	1021			;AN000;message number
 37128 00007F5A 00                      	db	no_subst ; 0		;AN000;number of subst
 37129                                  
 37130                                  ;  "Code page %1 not prepared for system",13,10
 37131                                  cp_not_set_ptr:
 37132 00007F5B FE03                    	dw	1022			;AN000;message number
 37133 00007F5D 01                      	db	1			;AN000;number of subst
 37134 00007F5E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37135 00007F5F 00                      	db	0			;AN000;reserved
 37136 00007F60 [0F8C]                  	dw	system_cpage		;AN000;offset of arg
 37137 00007F62 0000                    	dw	0			;AN000;segment of arg
 37138 00007F64 01                      	db	1			;AN000;first subst
 37139 00007F65 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37140                                  					;AN000;binary to decimal
 37141 00007F66 05                      	db	5			;AN000;maximum width
 37142 00007F67 01                      	db	1			;AN000;minimum width
 37143 00007F68 20                      	db	blank ; 20h		;AN000;pad character
 37144                                  
 37145                                  ;  "Code page %1 not prepared for all devices",13,10
 37146                                  cp_not_all_ptr:
 37147 00007F69 FF03                    	dw	1023			;AN000;message number
 37148 00007F6B 01                      	db	1			;AN000;number of subst
 37149 00007F6C 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 37150 00007F6D 00                      	db	0			;AN000;reserved
 37151 00007F6E [0F8C]                  	dw	system_cpage		;AN000;offset of arg
 37152 00007F70 0000                    	dw	0			;AN000;segment of arg
 37153 00007F72 01                      	db	1			;AN000;first subst
 37154 00007F73 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37155                                  					;AN000;binary to decimal
 37156 00007F74 05                      	db	5			;AN000;maximum width
 37157 00007F75 01                      	db	1			;AN000;minimum width
 37158 00007F76 20                      	db	blank ; 20h		;AN000;pad character
 37159                                  
 37160                                  ;  "Active code page: %1",13,10
 37161                                  cp_active_ptr:
 37162 00007F77 0004                    	dw	1024			;AN000;message number
 37163 00007F79 01                      	db	1			;AN000;number of subst
 37164 00007F7A 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37165 00007F7B 00                      	db	0			;AN000;reserved
 37166 00007F7C [0F8C]                  	dw	system_cpage		;AN000;offset of arg
 37167 00007F7E 0000                    	dw	0			;AN000;segment of arg
 37168 00007F80 01                      	db	1			;AN000;first subst
 37169 00007F81 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37170                                  					;AN000;binary to decimal
 37171 00007F82 05                      	db	5			;AN000;maximum width
 37172 00007F83 01                      	db	1			;AN000;minimum width
 37173 00007F84 20                      	db	blank ; 20h		;AN000;pad character
 37174                                  
 37175                                  ;  "NLSFUNC not installed",13,10
 37176                                  NLSFUNC_PTR:
 37177 00007F85 0104                    	dw	1025			;AN000;message number
 37178 00007F87 00                      	db	no_subst ; 0		;AN000;number of subst
 37179                                  
 37180                                  ;  "Invalid code page",13,10
 37181                                  INV_CODE_PAGE:
 37182 00007F88 0204                    	dw	1026			;AN000;message number
 37183 00007F8A 00                      	db	no_subst ; 0		;AN000;number of subst
 37184                                  
 37185                                  ;  "Current drive is no longer valid"
 37186                                  BADCURDRV:
 37187 00007F8B 0304                    	dw	1027			;AN000;message number
 37188 00007F8D 00                      	db	no_subst ; 0		;AN000;number of subst
 37189                                  
 37190                                  ;  "Press any key to continue"
 37191                                  PAUSEMES_PTR:
 37192 00007F8E 0404                    	dw	1028			;AN000;message number
 37193 00007F90 00                      	db	no_subst ; 0		;AN000;number of subst
 37194                                  
 37195                                  ;  "Label not found",13,10
 37196                                  BADLAB_PTR:
 37197 00007F91 0504                    	dw	1029			;AN000;message number
 37198 00007F93 00                      	db	no_subst ; 0		;AN000;number of subst
 37199                                  
 37200                                  ;  "Syntax error",13,10
 37201                                  SYNTMES_PTR:
 37202 00007F94 0604                    	dw	1030			;AN000;message number
 37203 00007F96 00                      	db	no_subst ; 0		;AN000;number of subst
 37204                                  
 37205                                  ;  "Invalid date",13,10
 37206                                  BADDAT_PTR:
 37207 00007F97 0704                    	dw	1031			;AN000;message number
 37208 00007F99 00                      	db	no_subst ; 0		;AN000;number of subst
 37209                                  
 37210                                  ;  "Current date is %1 %2",13,10
 37211                                  CurDat_Ptr:
 37212 00007F9A 0804                    	dw	1032			;AN000;message number
 37213 00007F9C 02                      	db	2			;AN000;number of subst
 37214 00007F9D 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37215 00007F9E 00                      	db	0			;AN000;reserved
 37216 00007F9F [FA92]                  	dw	Arg_Buf			;AN000;offset of arg
 37217 00007FA1 0000                    	dw	0			;AN000;segment of arg
 37218 00007FA3 01                      	db	1			;AN000;first subst
 37219 00007FA4 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37220 00007FA5 03                      	db	3			;AN000;maximum width
 37221 00007FA6 03                      	db	3			;AN000;minimum width
 37222 00007FA7 20                       	db	blank ; 20h		;AN000;pad character
 37223 00007FA8 0B                      	db	parm_block_size 	;AN000;size of sublist
 37224 00007FA9 00                      	db	0			;AN000;reserved
 37225                                  CurDat_yr:
 37226 00007FAA 0000                    	dw	0			;AN000;year
 37227                                  CurDat_mo_day:
 37228 00007FAC 0000                    	dw	0			;AN000;month,day
 37229 00007FAE 02                      	db	2			;AN000;second subst
 37230 00007FAF 34                      	db	34h ; DATE_MDY_4	;AN000;date
 37231 00007FB0 0A                      	db	10			;AN000;maximum width
 37232 00007FB1 0A                      	db	10			;AN000;minimum width
 37233 00007FB2 20                      	db	blank ; 20h		;AN000;pad character
 37234                                  
 37235                                  ;  "SunMonTueWedThuFriSat"
 37236                                  WeekTab:
 37237 00007FB3 0904                    	dw	1033			;AN000;message number
 37238 00007FB5 00                      	db	no_subst ; 0		;AN000;number of subst
 37239                                  
 37240                                  ;  "Enter new date (%1):"
 37241                                  
 37242                                  NewDat_Ptr:
 37243 00007FB6 0A04                    	dw	1034			;AN000;message number
 37244 00007FB8 01                      	db	1			;AN000;number of subst
 37245 00007FB9 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37246 00007FBA 00                      	db	0			;AN000;reserved
 37247                                  NewDat_Format:
 37248 00007FBB 0000                    	dw	0			;AN000;offset of replacement
 37249 00007FBD 0000                    	dw	0			;AN000;segment of arg
 37250 00007FBF 01                      	db	1			;AN000;first subst
 37251 00007FC0 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37252 00007FC1 08                      	db	8			;AN000;maximum width
 37253 00007FC2 08                      	db	8			;AN000;minimum width
 37254 00007FC3 20                      	db	blank ; 20h		;AN000;pad character
 37255                                  
 37256                                  ;  "Invalid time",13,10
 37257                                  
 37258                                  BadTim_Ptr:
 37259 00007FC4 0B04                    	dw	1035			;AN000;message number
 37260 00007FC6 00                      	db	no_subst ; 0		;AN000;number of subst
 37261                                  
 37262                                  ;  "Current time is %1",13,10
 37263                                  CurTim_Ptr:
 37264 00007FC7 0C04                    	dw	1036			;AN000;message number
 37265 00007FC9 01                      	db	1			;AN000;number of subst
 37266 00007FCA 0B                      	db	parm_block_size 	;AN000;size of sublist
 37267 00007FCB 00                      	db	0			;AN000;reserved
 37268                                  CurTim_hr_min:
 37269 00007FCC 0000                    	dw	0			;AN000;hours,minutes
 37270                                  CurTim_Sec_hn:
 37271 00007FCE 0000                    	dw	0			;AN000;seconds,hundredths
 37272 00007FD0 01                      	db	1			;AN000;first subst
 37273 00007FD1 A5                      	db	0A5h ; Right_Align+TIME_HHMMSSHH_Cty
 37274                                  					;AC059;time
 37275 00007FD2 0C                      	db	12			;AC059;maximum width
 37276 00007FD3 0C                      	db	12			;AC059;minimum width
 37277 00007FD4 20                      	db	blank ; 20h		;AN000;pad character
 37278                                  
 37279                                  ;  "Enter new time:"
 37280                                  NewTim_Ptr:
 37281 00007FD5 0D04                    	dw	1037			;AN000;message number
 37282 00007FD7 00                      	db	no_subst ; 0		;AN000;number of subst
 37283                                  
 37284                                  ;  ",    Delete (Y/N)?",13,10
 37285                                  Del_Y_N_Ptr:
 37286 00007FD8 0E04                    	dw	1038			;AN000;message number
 37287 00007FDA 00                      	db	no_subst ; 0		;AN000;number of subst
 37288                                  
 37289                                  ;  "All files in directory will be deleted!",13,10
 37290                                  ;  "Are you sure (Y/N)?",13,10
 37291                                  SureMes_Ptr:
 37292 00007FDB 0F04                    	dw	1039			;AN000;message number
 37293 00007FDD 00                      	db	no_subst ; 0		;AN000;number of subst
 37294                                  
 37295                                  ;  "Microsoft DOS Version %1.%2",13,10
 37296                                  VerMes_Ptr:
 37297 00007FDE 1004                    	dw	1040			;AN000;message number
 37298 00007FE0 02                      	db	2			;AN000;number of subst
 37299 00007FE1 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 37300 00007FE2 00                      	db	0			;AN000;reserved
 37301 00007FE3 [208C]                  	dw	Major_Ver_Num		;AN000;offset of arg
 37302 00007FE5 0000                    	dw	0			;AN000;segment of arg
 37303 00007FE7 01                      	db	1			;AN000;first subst
 37304 00007FE8 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37305                                  					;AN000;binary to decimal
 37306 00007FE9 01                      	db	1			;AN000;maximum width
 37307 00007FEA 01                      	db	1			;AN000;minimum width
 37308 00007FEB 20                      	db	blank ; 20h		;AN000;pad character
 37309 00007FEC 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37310 00007FED 00                      	db	0			;AN000;reserved
 37311 00007FEE [228C]                  	dw	Minor_Ver_Num	;AN000;offset of arg
 37312 00007FF0 0000                    	dw	0			;AN000;segment of arg
 37313 00007FF2 02                      	db	2			;AN000;second subst
 37314 00007FF3 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37315                                  					;AN000;binary to decimal
 37316 00007FF4 02                      	db	2			;AN000;maximum width
 37317 00007FF5 02                      	db	2			;AN000;minimum width
 37318 00007FF6 30                      	db	'0' ; 30h		;AN000;pad character
 37319                                  
 37320                                  ;  "Volume in drive %1 has no label",13,10
 37321                                  VolMes_Ptr_2:
 37322 00007FF7 1104                    	dw	1041			;AN000;message number
 37323 00007FF9 01                      	db	1			;AN000;number of subst
 37324 00007FFA 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 37325 00007FFB 00                      	db	0			;AN000;reserved
 37326 00007FFC [268C]                  	dw	vol_drv			;AN000;offset of drive
 37327 00007FFE 0000                    	dw	0			;AN000;segment of arg
 37328 00008000 01                      	db	1			;AN000;first subst
 37329 00008001 00                      	db	0 ; Char_field_Char 	;AN000;character
 37330 00008002 80                      	db	128			;AN000;maximum width
 37331 00008003 01                      	db	1			;AN000;minimum width
 37332 00008004 20                      	db	blank ; 20h		;AN000;pad character
 37333                                  
 37334                                  ;  "Volume in drive %1 is %2",13,10
 37335                                  VolMes_Ptr:
 37336 00008005 1204                    	dw	1042			;AN000;message number
 37337 00008007 02                      	db	2			;AN000;number of subst
 37338 00008008 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37339 00008009 00                      	db	0			;AN000;reserved
 37340 0000800A [268C]                  	dw	vol_drv			;AN000;offset of drive
 37341 0000800C 0000                    	dw	0			;AN000;segment of arg
 37342 0000800E 01                      	db	1			;AN000;first subst
 37343 0000800F 00                      	db	00000000b		;AN000;character
 37344 00008010 80                      	db	128			;AN000;maximum width
 37345 00008011 01                      	db	1			;AN000;minimum width
 37346 00008012 20                      	db	blank ; 20h		;AN000;pad character
 37347 00008013 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37348 00008014 00                      	db	0			;AN000;reserved
 37349 00008015 [DF8A]                  	dw	CHARBUF			;AN000;offset of string
 37350 00008017 0000                    	dw	0			;AN000;segment of arg
 37351 00008019 02                      	db	2			;AN000;second subst
 37352 0000801A 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37353 0000801B 80                      	db	128			;AN000;maximum width
 37354 0000801C 01                      	db	1			;AN000;minimum width
 37355 0000801D 20                      	db	blank ; 20h		;AN000;pad character
 37356                                  
 37357                                  ;  "Volume Serial Number is %1-%2",13,10
 37358                                  VolSerMes_Ptr:
 37359 0000801E 1304                    	dw	1043			;AN000;message number
 37360 00008020 02                      	db	2			;AN000;number of subst
 37361 00008021 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 37362 00008022 00                      	db	0			;AN000;reserved
 37363 00008023 [818D]                  	dw	vol_serial+2		;AN000;offset of serial
 37364 00008025 0000                    	dw	0			;AN000;segment of arg
 37365 00008027 01                      	db	1			;AN000;first subst
 37366 00008028 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word 
 37367                                  					;AN000;binary to hex
 37368 00008029 04                      	db	4			;AN000;maximum width
 37369 0000802A 04                      	db	4			;AN000;minimum width
 37370 0000802B 30                      	db	'0' ; 30h		;AN000;pad character
 37371 0000802C 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37372 0000802D 00                      	db	0			;AN000;reserved
 37373 0000802E [7F8D]                  	dw	vol_serial		;AN000;offset of serial
 37374 00008030 0000                    	dw	0			;AN000;segment of arg
 37375 00008032 02                      	db	2			;AN000;second subst
 37376 00008033 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word
 37377                                  					;AN000;binary to hex
 37378 00008034 04                      	db	4			;AN000;maximum width
 37379 00008035 04                      	db	4			;AN000;minimum width
 37380 00008036 30                      	db	'0' ; 30h		;AN000;pad character
 37381                                  
 37382                                  ;  "Invalid directory",13,10
 37383                                  badcd_ptr:
 37384 00008037 1404                    	dw	1044			;AN000;message number
 37385 00008039 00                      	db	no_subst ; 0		;AN000;number of subst
 37386                                  
 37387                                  ;  "Unable to create directory",13,10
 37388                                  badmkd_ptr:
 37389 0000803A 1504                    	dw	1045			;AN000;message number
 37390 0000803C 00                      	db	no_subst ; 0		;AN000;number of subst
 37391                                  
 37392                                  ;  "Invalid path, not directory,",13,10
 37393                                  ;  "or directory not empty",13,10
 37394                                  badrmd_ptr:
 37395 0000803D 1604                    	dw	1046			;AN000;message number
 37396 0000803F 00                      	db	no_subst ; 0		;AN000;number of subst
 37397                                  
 37398                                  ;  "Must specify ON or OFF",13,10
 37399                                  bad_on_off_ptr:
 37400 00008040 1704                    	dw	1047			;AN000;message number
 37401 00008042 00                      	db	no_subst ; 0		;AN000;number of subst
 37402                                  
 37403                                  ;  "Directory of %1",13,10
 37404                                  dirhead_ptr:
 37405 00008043 1804                    	dw	1048			;AN000;message number
 37406 00008045 01                      	db	1			;AN000;number of subst
 37407 00008046 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 37408 00008047 00                      	db	0			;AN000;reserved
 37409 00008048 [AE8B]                  	dw	BWDBUF			;AN000;offset of arg
 37410 0000804A 0000                    	dw	0			;AN000;segment of arg
 37411 0000804C 01                      	db	1			;AN000;first subst
 37412 0000804D 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37413 0000804E 80                      	db	128			;AN000;maximum width
 37414 0000804F 00                      	db	0			;AN000;minimum width
 37415 00008050 20                      	db	blank ; 20h		;AN000;pad character
 37416                                  
 37417                                  ;  "No Path",13,10
 37418                                  NULLPATH_PTR:
 37419 00008051 1904                    	dw	1049			;AN000;message number
 37420 00008053 00                      	db	no_subst ; 0		;AN000;number of subst
 37421                                  
 37422                                  ;  "Invalid drive in search path",13,10
 37423                                  BADPMES_PTR:
 37424 00008054 1A04                    	dw	1050			;AN000;message number
 37425 00008056 00                      	db	no_subst ; 0		;AN000;number of subst
 37426                                  
 37427                                  ;  "Invalid device",13,10
 37428                                  BADDEV_PTR:
 37429 00008057 1B04                    	dw	1051			;AN000;message number
 37430 00008059 00                      	db	no_subst ; 0		;AN000;number of subst
 37431                                  
 37432                                  ;  "FOR cannot be nested",13,10
 37433                                  FORNESTMES_PTR:
 37434 0000805A 1C04                    	dw	1052			;AN000;message number
 37435 0000805C 00                      	db	no_subst ; 0		;AN000;number of subst
 37436                                  
 37437                                  ;  "Intermediate file error during pipe",13,10
 37438                                  PIPEEMES_PTR:
 37439 0000805D 1D04                    	dw	1053			;AN000;message number
 37440 0000805F 00                      	db	no_subst ; 0		;AN000;number of subst
 37441                                  
 37442                                  ;  "Cannot do binary reads from a device",13,10
 37443                                  INBDEV_PTR:
 37444 00008060 1E04                    	dw	1054			;AN000;message number
 37445 00008062 00                      	db	no_subst ; 0		;AN000;number of subst
 37446                                  
 37447                                  ;  "BREAK is %1",13,10
 37448                                  CtrlcMes_Ptr:
 37449 00008063 1F04                    	dw	1055			;AN000;message number
 37450 00008065 01                      	db	1			;AN000;number of subst
 37451 00008066 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37452 00008067 00                      	db	0			;AN000;reserved
 37453 00008068 0000                    	dw	0			;AN000;offset of on/off (new)
 37454 0000806A 0000                    	dw	0			;AN000;segment of arg
 37455 0000806C 01                      	db	1			;AN000;first subst
 37456 0000806D 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37457 0000806E 80                      	db	128			;AN000;maximum width
 37458 0000806F 01                      	db	1			;AN000;minimum width
 37459 00008070 20                      	db	blank ; 20h		;AN000;pad character
 37460                                  
 37461                                  ;  "VERIFY is %1",13,10
 37462                                  VeriMes_Ptr:
 37463 00008071 2004                    	dw	1056			;AN000;message number
 37464 00008073 01                      	db	1			;AN000;number of subst
 37465 00008074 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37466 00008075 00                      	db	0			;AN000;reserved
 37467 00008076 0000                    	dw	0			;AN000;offset of on/off (new)
 37468 00008078 0000                    	dw	0			;AN000;segment of arg
 37469 0000807A 01                      	db	1			;AN000;first subst
 37470 0000807B 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37471 0000807C 80                      	db	128			;AN000;maximum width
 37472 0000807D 01                      	db	1			;AN000;minimum width
 37473 0000807E 20                      	db	blank ; 20h		;AN000;pad character
 37474                                  
 37475                                  ;  "ECHO is %1",13,10
 37476                                  EchoMes_Ptr:
 37477 0000807F 2104                    	dw	1057			;AN000;message number
 37478 00008081 01                      	db	1			;AN000;number of subst
 37479 00008082 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37480 00008083 00                      	db	0			;AN000;reserved
 37481 00008084 0000                    	dw	0			;AN000;offset of on/off (new)
 37482 00008086 0000                    	dw	0			;AN000;segment of arg
 37483 00008088 01                      	db	1			;AN000;first subst
 37484 00008089 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37485 0000808A 80                      	db	128			;AN000;maximum width
 37486 0000808B 01                      	db	1			;AN000;minimum width
 37487 0000808C 20                      	db	blank ; 20h		;AN000;pad character
 37488                                  
 37489                                  ;  "off"
 37490                                  OFFMES_PTR:
 37491 0000808D 2304                    	dw	1059			;AN000;message number
 37492 0000808F 00                      	db	no_subst		;AN000;number of subst
 37493                                  
 37494                                  ;  "on"
 37495                                  ONMES_PTR:
 37496 00008090 2404                    	dw	1060			;AN000;message number
 37497 00008092 00                      	db	no_subst ; 0		;AN000;number of subst
 37498                                  
 37499                                  ;  "Error writing to device",13,10
 37500                                  DEVWMES_PTR:
 37501 00008093 2504                    	dw	1061			;AN000;message number
 37502 00008095 00                      	db	no_subst ; 0		;AN000;number of subst
 37503                                  
 37504                                  ;  "Invalid path",13,10
 37505                                  INVAL_PATH_PTR:
 37506 00008096 2604                    	dw	1062			;AN000;message number
 37507 00008098 00                      	db	no_subst ; 0		;AN000;number of subst
 37508                                  
 37509                                  ;  unformatted string output
 37510                                  arg_buf_ptr:
 37511 00008099 2704                    	dw	1063			;AN000;message number
 37512 0000809B 01                      	db	1			;AN000;number of subst
 37513 0000809C 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37514 0000809D 00                      	db	0			;AN000;reserved
 37515 0000809E [FA92]                  	dw	Arg_Buf 		;AN000;offset of arg
 37516 000080A0 0000                    	dw	0			;AN000;segment of arg
 37517 000080A2 01                      	db	1			;AN000;first subst
 37518 000080A3 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37519 000080A4 80                      	db	128			;AN000;maximum width
 37520 000080A5 00                      	db	0			;AN000;minimum width
 37521 000080A6 20                      	db	blank ; 20h		;AN000;pad character
 37522                                  
 37523                                  ;  file name output
 37524                                  file_name_ptr:
 37525 000080A7 2804                    	dw	1064			;AN000;message number
 37526 000080A9 01                      	db	1			;AN000;number of subst
 37527 000080AA 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37528 000080AB 00                      	db	0			;AN000;reserved
 37529 000080AC [948C]                  	dw	SrcBuf			;AN000;offset of arg
 37530 000080AE 0000                    	dw	0			;AN000;segment of arg
 37531 000080B0 01                      	db	1			;AN000;first subst
 37532 000080B1 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37533 000080B2 80                      	db	128			;AN000;maximum width
 37534 000080B3 00                      	db	0			;AN000;minimum width
 37535 000080B4 20                      	db	blank ; 20h		;AN000;pad character
 37536                                  
 37537                                  ;  file size output for dir
 37538                                  disp_file_size_ptr:
 37539 000080B5 2904                    	dw	1065			;AN000;message number
 37540 000080B7 01                      	db	1			;AN000;number of subst
 37541 000080B8 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 37542 000080B9 00                      	db	0			;AN000;reserved
 37543 000080BA [118C]                  	dw	File_Size_Low		;AN000;offset of arg
 37544 000080BC 0000                    	dw	0			;AN000;segment of arg
 37545 000080BE 01                      	db	1			;AN000;first subst
 37546 000080BF B1                      	db	0B1h ; Right_Align+Unsgn_Bin_DWord
 37547                                  					;AN000;long binary to decimal
 37548 000080C0 0A                      	db	10			;AN000;maximum width
 37549 000080C1 0A                      	db	10			;AN000;minimum width
 37550 000080C2 20                      	db	blank ; 20h		;AN000;pad character
 37551                                  
 37552                                  ;  unformatted string output
 37553                                  ; %s
 37554                                  string_buf_ptr:
 37555 000080C3 2A04                    	dw	1066			;AN000;message number
 37556 000080C5 01                      	db	1			;AN000;number of subst
 37557 000080C6 0B                      	db	parm_block_size 	;AN000;size of sublist
 37558 000080C7 00                      	db	0			;AN000;reserved
 37559 000080C8 [158C]                  	dw	string_ptr_2		;AN000;offset of arg
 37560 000080CA 0000                    	dw	0			;AN000;segment of arg
 37561 000080CC 01                      	db	1			;AN000;first subst
 37562 000080CD 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37563 000080CE 80                      	db	128			;AN000;maximum width
 37564 000080CF 00                      	db	0			;AN000;minimum width
 37565 000080D0 20                      	db	blank ; 20h		;AN000;pad character
 37566 000080D1 00                      	db	0			;AN000;
 37567                                  
 37568                                  ;  tab character
 37569                                  tab_ptr:
 37570 000080D2 2B04                    	dw	1067			;AN000;message number
 37571 000080D4 00                      	db	no_subst ; 0		;AN000;number of subst
 37572                                  
 37573                                  ;  " <DIR>   "
 37574                                  dmes_ptr:
 37575 000080D5 2C04                    	dw	1068			;AN000;message number
 37576 000080D7 00                      	db	no_subst ; 0		;AN000;number of subst
 37577                                  
 37578                                  ;  destructive back space
 37579                                  dback_ptr:
 37580 000080D8 2D04                    	dw	1069			;AN000;message number
 37581 000080DA 00                      	db	no_subst ; 0		;AN000;number of subst
 37582                                  
 37583                                  ;  carriage return / line feed
 37584                                  acrlf_ptr:
 37585 000080DB 2E04                    	dw	1070			;AN000;message number
 37586 000080DD 00                      	db	no_subst ; 0		;AN000;number of subst
 37587                                  
 37588                                  ;  "mm-dd-yy"
 37589                                  usadat_ptr:
 37590 000080DE 3004                    	dw	1072			;AN000;message number
 37591 000080E0 00                      	db	no_subst ; 0		;AN000;number of subst
 37592                                  
 37593                                  ;  "dd-mm-yy"
 37594                                  eurdat_ptr:
 37595 000080E1 3104                    	dw	1073			;AN000;message number
 37596 000080E3 00                      	db	no_subst ; 0		;AN000;number of subst
 37597                                  
 37598                                  ;  "yy-mm-dd"
 37599                                  japdat_ptr:
 37600 000080E4 3204                    	dw	1074			;AN000;message number
 37601 000080E6 00                      	db	no_subst ; 0		;AN000;number of subst
 37602                                  
 37603                                  ;  date string for prompt
 37604                                  promptdat_ptr:
 37605 000080E7 3304                    	dw	1075			;AN000;message number
 37606 000080E9 02                      	db	2			;AN000;number of subst
 37607 000080EA 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37608 000080EB 00                      	db	0			;AN000;reserved
 37609 000080EC [FA92]                  	dw	Arg_Buf			;AN000;offset of arg
 37610 000080EE 0000                    	dw	0			;AN000;segment of arg
 37611 000080F0 01                      	db	1			;AN000;first subst
 37612 000080F1 10                      	db	10h ; Char_field_ASCIIZ ;AN000;character string
 37613 000080F2 03                      	db	3			;AN000;maximum width
 37614 000080F3 03                      	db	3			;AN000;minimum width
 37615 000080F4 20                       	db	blank ; 20h		;AN000;pad character
 37616 000080F5 0B                      	db	parm_block_size  ; 11	;AN000;size of sublist
 37617 000080F6 00                      	db	0			;AN000;reserved
 37618                                  promptDat_yr:
 37619 000080F7 0000                    	dw	0			;AN000;year
 37620                                  promptDat_moday:
 37621 000080F9 0000                    	dw	0			;AN000;month,day
 37622 000080FB 02                      	db	2			;AN000;second subst
 37623 000080FC 34                       	db	34h ; DATE_MDY_4	;AN000;date
 37624 000080FD 0A                      	db	10			;AN000;maximum width
 37625 000080FE 08                      	db	8			;AN000;minimum width
 37626 000080FF 20                      	db	blank ; 20h		;AN000;pad character
 37627                                  
 37628                                  ;  Time for prompt
 37629                                  promtim_ptr:
 37630 00008100 3404                    	dw	1076			;AN000;message number
 37631 00008102 01                      	db	1			;AN000;number of subst
 37632 00008103 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37633 00008104 00                      	db	0			;AN000;reserved
 37634                                  PromTim_hr_min:
 37635 00008105 0000                    	dw	0			;AN000;hours,minutes
 37636                                  PromTim_Sec_hn:
 37637 00008107 0000                    	dw	0			;AN000;seconds,hundredths
 37638 00008109 01                      	db	1			;AN000;first subst
 37639 0000810A A6                      	db	0A6h ; Right_Align+TIME_HHMMSSHH_24
 37640                                  					;AC013;time
 37641 0000810B 0B                      	db	11			;AN000;maximum width
 37642 0000810C 0B                      	db	11			;AC013;minimum width
 37643 0000810D 20                      	db	blank ; 20h		;AN000;pad character
 37644                                  
 37645                                  ;  Date and time for DIR
 37646                                  dirdattim_ptr:
 37647 0000810E 3504                    	dw	1077			;AN000;message number
 37648 00008110 02                      	db	2			;AN000;number of subst
 37649 00008111 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37650 00008112 00                      	db	0			;AN000;reserved
 37651                                  DirDat_Yr:
 37652 00008113 0000                    	dw	0			;AN000;year
 37653                                  DirDat_Mo_Day:
 37654 00008115 0000                    	dw	0			;AN000;month,day
 37655 00008117 01                      	db	1			;AN000;first subst
 37656 00008118 A4                      	db	0A4h ; Right_Align+DATE_MDY_2
 37657                                  					;AN000;date
 37658 00008119 0A                      	db	10			;AN000;maximum width
 37659 0000811A 08                      	db	8			;AN000;minimum width
 37660 0000811B 20                      	db	blank ; 20h		;AN000;pad character
 37661 0000811C 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37662 0000811D 00                      	db	0			;AN000;reserved
 37663                                  DirTim_Hr_Min:
 37664 0000811E 0000                    	dw	0			;AN000;hours,minutes
 37665                                  DirTim_Sec_hn:
 37666 00008120 0000                    	dw	0			;AN000;seconds,hundredths
 37667 00008122 02                      	db	2			;AN000;second subst
 37668 00008123 85                      	db	85h ; Right_align+TIME_HHMM_Cty
 37669                                  					;AN000;time
 37670 00008124 06                      	db	6			;AN000;maximum width
 37671 00008125 06                      	db	6			;AN000;minimum width
 37672 00008126 20                      	db	blank ; 20h		;AN000;pad character
 37673                                  
 37674                                  ;  "Directory already exists"
 37675                                  MD_EXISTS_PTR:
 37676 00008127 3604                    	dw	1078			;AN000;message number
 37677 00008129 00                      	db	no_subst		;AN000;number of subst
 37678                                  
 37679                                  ;  "%1 bytes",13,10
 37680                                  bytes_ptr:
 37681 0000812A 3704                    	dw	1079			; message number
 37682 0000812C 01                      	db	1			; number of subst
 37683 0000812D 0B                              db	parm_block_size ; 11	; size of sublist
 37684 0000812E 00                              db	0			; reserved
 37685 0000812F [D38A]                          dw	FileSiz			; offset of arg
 37686 00008131 0000                            dw	0			; segment of arg
 37687 00008133 01                              db	1			; first subst
 37688 00008134 B1                              db	0B1h ; Right_Align+Unsgn_Bin_DWord
 37689                                  					; long binary to decimal
 37690 00008135 0A                              db	10			; maximum width
 37691 00008136 0A                              db	10			; minimum width
 37692 00008137 20                              db	blank ; 20h		; pad character
 37693                                  
 37694                                  ;  "Total:",13,10
 37695                                  total_ptr:
 37696 00008138 3804                    	dw	1080			; message number
 37697 0000813A 00                      	db	no_subst ; 0		; number of subst
 37698                                  
 37699                                  ;  "Error parsing environment variable:",13,10
 37700                                  errparsenv_ptr:
 37701 0000813B 3904                    	dw	1081			; message number
 37702 0000813D 00                      	db	no_subst ; 0		; number of subst
 37703                                  
 37704                                  ;  "(continuing %1)",13,10
 37705                                  dircont_ptr:
 37706 0000813E 3C04                    	dw	1084			;AN000;message number
 37707 00008140 01                      	db	1			;AN000;number of subst
 37708 00008141 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37709 00008142 00                      	db	0			;AN000;reserved
 37710 00008143 [AE8B]                  	dw	BWDBUF			;AN000;offset of arg
 37711 00008145 0000                    	dw	0			;AN000;segment of arg
 37712 00008147 01                      	db	1			;AN000;first subst
 37713 00008148 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37714 00008149 80                      	db	128			;AN000;maximum width
 37715 0000814A 00                      	db	0			;AN000;minimum width
 37716 0000814B 20                      	db	blank ; 20h		;AN000;pad character
 37717                                  
 37718                                  ;  "Revision %1",CR,LF
 37719                                  dosrev_ptr:
 37720 0000814C 4204                    	dw	1090
 37721 0000814E 01                      	db	1			; one substitution
 37722 0000814F 0B                      	db	parm_block_size ; 11
 37723 00008150 00                      	db	0
 37724 00008151 [248C]                  	dw	One_Char_Val		; ptr to char
 37725 00008153 0000                    	dw	0			; segment addr?
 37726 00008155 01                      	db	1			; 1st substitution
 37727 00008156 00                      	db	0 ; CHAR_FIELD_CHAR	; character
 37728 00008157 01                      	db	1			; max width
 37729 00008158 01                      	db	1			; min width
 37730 00008159 20                      	db	blank ; 20h		; pad char
 37731                                  
 37732                                  ;  "DOS is in ROM"
 37733                                  DosRom_Ptr:
 37734 0000815A 4304                    	dw	1091
 37735 0000815C 00                      	db	no_subst ; 0		
 37736                                  
 37737                                  ;  "DOS is in HMA"
 37738                                  DosHma_Ptr:
 37739 0000815D 4404                    	dw	1092
 37740 0000815F 00                      	db	no_subst ; 0		
 37741                                  
 37742                                  ;  "DOS is in low memory"
 37743                                  DosLow_Ptr:
 37744 00008160 4504                    	dw	1093
 37745 00008162 00                      	db	no_subst ; 0		
 37746                                  
 37747                                  ;  "Cannot Loadhigh batch file" ;M016
 37748                                  NoExecBat_Ptr:
 37749 00008163 4604                    	dw	1094			; M016
 37750 00008165 00                      	db	no_subst ; 0		; M016
 37751                                  
 37752                                  ;  "LoadHigh: Invalid filename" ; M016
 37753                                  LhInvFil_Ptr:
 37754 00008166 4704                    	dw	1095			; M016
 37755 00008168 00                      	db	no_subst ; 0		; M016
 37756                                  
 37757                                  ;  "Could not open specified country information file" ; M045
 37758                                  NoCntry_Ptr:
 37759 00008169 4804                    	dw	1096			; M045
 37760 0000816B 00                      	db	no_subst ; 0		; M045
 37761                                  
 37762                                  ; 15/04/2023
 37763                                  ; MSDOS 6.0 COMMAND.COM only !
 37764                                  %if 0
 37765                                  
 37766                                  ;* The next four errors emulate those reported by the normal parse
 37767                                  ;  mechanism, with a little more accurate wording; that parser has been
 37768                                  ;  replaced with a custom routine (ParseVar) for LoadHigh and DeviceHigh.
 37769                                  ;  These errors aren't normally generated by LoadHigh except by the normal
 37770                                  ;  parser, so they've been added here.
 37771                                  
 37772                                  ;  "LoadHigh: Invalid argument"
 37773                                  LhInvArg_Ptr:
 37774                                  	dw	1097
 37775                                  	db	no_subst ; 0		
 37776                                  
 37777                                  ;  "Required parameter missing"
 37778                                  ReqParmMiss:
 37779                                  	dw	1098
 37780                                  	db	no_subst ; 0		
 37781                                  
 37782                                  ;  "Unrecognized switch"
 37783                                  LhInvSwt_Ptr:
 37784                                  	dw	1099
 37785                                  	db	no_subst ; 0		
 37786                                  
 37787                                  ;  "A bad UMB number has been specified"
 37788                                  LhBadUMB_Ptr:
 37789                                  	dw	1100
 37790                                  	db	no_subst ; 0
 37791                                  %endif		
 37792                                  
 37793                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37794                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8483h
 37795                                  ; ---------------------------------------------------------------------------
 37796                                  
 37797                                  PATH_TEXT:
 37798 0000816C 504154483D              	db	"PATH="
 37799                                  PROMPT_TEXT:
 37800 00008171 50524F4D50543D          	db	"PROMPT="
 37801                                  COMSPECSTR:
 37802 00008178 434F4D535045433D        	db	"COMSPEC="
 37803                                  DirEnvVar:
 37804 00008180 444952434D443D          	db	"DIRCMD="		; DIR's environment variable
 37805                                  
 37806                                  ; 15/04/2023
 37807                                  %if 0
 37808                                  
 37809                                  ;============================================================================
 37810                                  ; TDATA.ASM, MSDOS 6.0, 1991
 37811                                  ;============================================================================
 37812                                  ; 30/09/2018 - Retro DOS v3.0
 37813                                  
 37814                                  ; TITLE	COMMAND Transient Initialized DATA
 37815                                  
 37816                                  ;The TRANDATA segment contains data that is assumed to have predefined
 37817                                  ;initial values at the beginning of each command cycle. It is
 37818                                  ;included in the transient checksum area. If values in TRANDATA
 37819                                  ;change, the transient will be reloaded for the next command cycle.
 37820                                  
 37821                                  align 16
 37822                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3730h
 37823                                  
 37824                                  PRINTF_TABLE:	db '0123456789ABCDEF'
 37825                                  _3740h:		db '%S',0
 37826                                  ARG_BUF_PTR:	dw _3740h
 37827                                  		dw _3747h
 37828                                  _3747h:		dw ARG_BUF ; _43E8h
 37829                                  _3749h:		db '%S ',0
 37830                                  STRINGBUF1PTR:	dw _3749h
 37831                                  		dw STRING_PTR_1 ; _4468h
 37832                                  _3751h:		db '%9ld',0
 37833                                  FSIZEMESPTR:	dw _3751h
 37834                                  		dw FILESIZE_L ; _446Ah
 37835                                  		dw FILESIZE_H ; _446Ch
 37836                                  _375Ch:		db '%S',0
 37837                                  STRINGBUF2PTR:	dw _375Ch
 37838                                  		dw STRING_PTR_2 ; _446Eh
 37839                                  _3763h:		db 9,0
 37840                                  TABPTR:		dw _3763h
 37841                                  _3767h:		db 0Dh,0Ah
 37842                                  		db 'Batch file missing',0Dh,0Ah,0
 37843                                  BADPATHPTR:	dw _3767h
 37844                                  _3780h:		db 0Dh,0Ah
 37845                                  		db 'Insert disk with batch file',0Dh,0Ah
 37846                                  		db 'and press any key when ready',0Dh,0Ah,0
 37847                                  INSERTDSKPTR:	dw _3780h
 37848                                  _37C0h:		db 'Bad command or file name',0Dh,0Ah,0
 37849                                  BADNAMPTR:	dw _37C0h
 37850                                  _37DDh:		db 'Duplicate file name or File not found',0Dh,0Ah,0
 37851                                  RENERRPTR:	dw _37DDh
 37852                                  _3807h:		db 'File not found',0Dh,0Ah,0
 37853                                  FNOTFOUNDPTR:	dw _3807h
 37854                                  _381Ah:		db 'Path not found',0Dh,0Ah,0
 37855                                  PNOTFOUNDPTR:	dw _381Ah
 37856                                  _382Dh:		db 'Access denied',0Dh,0Ah,0
 37857                                  ACCDENPTR:	dw _382Dh
 37858                                  _383Fh:		db 'Insufficient disk space',0Dh,0Ah,0
 37859                                  NOSPACEPTR:	dw _383Fh
 37860                                  _385Bh:		db 'Out of environment space',0Dh,0Ah,0
 37861                                  ENVERRPTR:	dw _385Bh
 37862                                  _3878h:		db 'File creation error',0Dh,0Ah,0
 37863                                  FULDIRPTR:	dw 3878h
 37864                                  _3890h:		db 'File cannot be copied onto itself',0Dh,0Ah,0
 37865                                  OVERWRPTR:	dw _3890h
 37866                                  _38B6h:		db 'Content of destination lost before copy',0Dh,0Ah,0
 37867                                  LOSTERRPTR:	dw _38B6h
 37868                                  _38E2h:		db 'Invalid filename or file not found',0Dh,0Ah,0
 37869                                  INORNOTPTR:	dw _38E2h
 37870                                  _3909h:		db '%9d File(s) copied',0Dh,0Ah,0
 37871                                  COPIEDPTR:	dw _3909h
 37872                                  		dw COPY_NUM ; _4470h
 37873                                  _3922h:		db '%9d File(s) ',0
 37874                                  DIRMESPTR:	dw _3922h
 37875                                  		dw DIR_NUM  ; _4477h
 37876                                  _3933h:		db '%9ld bytes free',0Dh,0Ah,0
 37877                                  BYTEMESPTR:	dw _3933h
 37878                                  		dw BYTES_FREE   ; _4479h
 37879                                  		dw BYTES_FREE+2 ; _447Bh
 37880                                  _394Bh:		db 'Invalid drive specification',0Dh,0Ah,0
 37881                                  BADDRVPTR:	dw _394Bh
 37882                                  _396Bh:		db 0Dh,0Ah
 37883                                  		db 'Code page %5d not prepared for system',0Dh,0Ah,0
 37884                                  CPNOTSETPTR:	dw _396Bh
 37885                                  		dw SYSTEM_CPAGE ; _3F2Fh
 37886                                  _3999h:		db 0Dh,0Ah
 37887                                  		db 'Code page %5d not prepared for all devices',0Dh,0Ah,0
 37888                                  CPNOTALLPTR:	dw _3999h
 37889                                  		dw SYSTEM_CPAGE ; _3F2Fh
 37890                                  _39CCh:		db 0Dh,0Ah
 37891                                  		db 'Active code page: %5d',0Dh,0Ah,0
 37892                                  CPACTIVEPTR:	dw _39CCh
 37893                                  		dw SYSTEM_CPAGE ; _3F2Fh
 37894                                  _39EAh:		db 'Current drive is no longer valid',0
 37895                                  BADCURDRVPTR:	dw _39EAh
 37896                                  _3A0Dh:		db 'Strike a key when ready . . . ',0
 37897                                  PAUSEMESPTR:	dw _3A0Dh
 37898                                  _3A2Eh:		db 'Invalid parameter',0Dh,0Ah,0
 37899                                  BADPARMPTR:	dw _3A2Eh
 37900                                  WEEKTAB:	db 'SunMonTueWedThuFriSat'
 37901                                  _3A59h:		db 0Dh,0Ah
 37902                                  		db 'Invalid date',0
 37903                                  BADDATPTR:	dw _3A59h
 37904                                  _3A6Ah:		db 'Current date is ',0
 37905                                  CURDATPTR:	dw _3A6Ah
 37906                                  _3A7Dh:		db 0Dh,0Ah
 37907                                  		db 'Enter new date ',0
 37908                                  NEWDATPTR:	dw _3A7Dh
 37909                                  _3A91h:		db '(mm-dd-yy): ',0
 37910                                  USADATPTR:	dw _3A91h
 37911                                  _3AA0h:		db '(dd-mm-yy): ',0
 37912                                  EURDATPTR:	dw _3AA0h
 37913                                  _3AAFh:		db '(yy-mm-dd): ',0
 37914                                  JAPDATPTR:	dw _3AAFh
 37915                                  _3ABEh:		db 0Dh,0Ah
 37916                                  		db 'Invalid time ',0
 37917                                  BADTIMPTR:	dw _3ABEh
 37918                                  _3AD0h:		db 'Current time is ',0
 37919                                  CURTIMPTR:	dw _3AD0h
 37920                                  _3AE3h:		db 0Dh,0Ah
 37921                                  		db 'Enter new time: ',0
 37922                                  NEWTIMPTR:	dw _3AE3h
 37923                                  _3AF8h:		db 'Are you sure (Y/N)?',0
 37924                                  SUREMESPTR:	dw _3AF8h
 37925                                  _3B0Eh:		db ' <DIR>   ',0
 37926                                  DMESPTR:	dw _3B0Eh
 37927                                  _3B1Ah:		db 'MS-DOS Version %1d.%02d                     ',0
 37928                                  VERMESPTR:	dw _3B1Ah
 37929                                  		dw MAJOR_VER_NUM ; _447Dh
 37930                                  		dw MINOR_VER_NUM ; _447Fh
 37931                                  _3B4Dh:		db '%C',0
 37932                                  ONECHRVALPTR:	dw _3B4Dh
 37933                                  		dw ONE_CHAR_VAL	; _4481h
 37934                                  _3B54h:		db ' Volume in drive %c %s',0
 37935                                  VOLMESPTR:	dw _3B54h
 37936                                  		dw VOL_DRV ; _4484h
 37937                                  		dw VOLNAME_ADDR ; _4482h
 37938                                  IS:		db 'is ',0
 37939                                  NOVOL:		db 'has no label',0
 37940                                  _3B82h:		db 'Invalid directory',0Dh,0Ah,0
 37941                                  BADCDPTR:	dw _3B82h
 37942                                  _3B98h:		db 'Unable to create directory',0Dh,0Ah,0
 37943                                  BADMKDPTR:	dw _3B98h
 37944                                  _3BB7h:		db 'Invalid path, not directory,',0Dh,0Ah
 37945                                  		db 'or directory not empty',0Dh,0Ah,0
 37946                                  BADRMDPTR:	dw _3BB7h
 37947                                  _3BF0h:		db 'Must specify ON or OFF',0Dh,0Ah,0
 37948                                  BADONOFFPTR:	dw _3BF0h
 37949                                  _3C0Bh:		db ' Directory of  %S',0Dh,0Ah,0
 37950                                  DIRHEADPTR:	dw _3C0Bh
 37951                                  		dw VOL_DIR ; _4485h
 37952                                  _3C23h:		db 'No Path',0
 37953                                  NULLPATHPTR:	dw _3C23h
 37954                                  PATH_TEXT:	db 'PATH='
 37955                                  PROMPT_TEXT:	db 'PROMPT='
 37956                                  COMSPEC_TEXT:	db 'COMSPEC='
 37957                                  _3C41h:		db 'Invalid drive in search path',0Dh,0Ah,0
 37958                                  BADPMESPTR:	dw _3C41h
 37959                                  _3C62h:		db 'Invalid device',0Dh,0Ah,0
 37960                                  BADDEVPTR:	dw _3C62h
 37961                                  _3C75h:		db 'Label not found',0Dh,0Ah,0
 37962                                  BADLABPTR:	dw _3C75h
 37963                                  _3C89h:		db 'Syntax error',0Dh,0Ah,0
 37964                                  SYNTMESPTR:	dw _3C89h
 37965                                  _3C9Ah:		db 0Dh,'FOR cannot be nested',0Dh,0Ah,0
 37966                                  FORNESTMESTR:	dw _3C9Ah
 37967                                  _3CB4h:		db 'Insufficient memory',0Dh,0Ah,0
 37968                                  INSFMEMMESPTR:	dw _3CB4h
 37969                                  _3CCCh:		db 'Intermediate file error during pipe',0Dh,0Ah,0
 37970                                  PIPEEMESPTR:	dw _3CCCh
 37971                                  _3CF4h:		db 'Cannot do binary reads from a device',0Dh,0Ah,0
 37972                                  INBDEVPTR:	dw _3CF4h
 37973                                  _3D1Dh:		db 'BREAK is ',0
 37974                                  CTRLMESPTR:	dw _3D1Dh
 37975                                  _3D29h:		db 'VERIFY is ',0
 37976                                  VERIMESPTR:	dw _3D29h
 37977                                  _3D36h:		db 'ECHO is ',0
 37978                                  ECHOMESPTR:	dw _3D36h
 37979                                  _3D41h:		db 'off',0Dh,0Ah,0
 37980                                  OFFMESPTR:	dw _3D41h
 37981                                  _3D49h:		db 'on',0Dh,0Ah,0
 37982                                  ONMESPTR:	dw _3D49h
 37983                                  _3D50h:		db 'Invalid path or file name',0Dh,0Ah,0
 37984                                  BADCPMESPTR:	dw _3D50h
 37985                                  _3D6Eh:		db 'Invalid number of parameters',0Dh,0Ah,0
 37986                                  BADARGSPTR:	dw _3D6Eh
 37987                                  _3D8Fh:		db 'Error writing to device',0Dh,0Ah,0
 37988                                  DEVWMESPTR:	dw _3D8Fh
 37989                                  _3DABh:		db 0Dh,0Ah,0
 37990                                  ACRLFPTR:	dw _3DABh
 37991                                  _3DB0h:		db 8
 37992                                  		db 20h
 37993                                  		db 8
 37994                                  		db 0
 37995                                  DBACKPTR:	dw _3DB0h
 37996                                  small_y:	db 'y'
 37997                                  small_n:	db 'n'
 37998                                  CAPITAL_Y:	db 'Y'
 37999                                  CAPITAL_N:	db 'N'
 38000                                  CLSSTRING:	db 4,1Bh,'[2J'	; ANSI Clear screen
 38001                                  PROMPT_TABLE:
 38002                                  		db 'B' ; 42h
 38003                                  		dw PRINT_B
 38004                                  		db 'D' ; 44h
 38005                                  		dw PRINT_DATE
 38006                                  		db 'E' ; 45h
 38007                                  		dw PRINT_ESC
 38008                                  		db 'G' ; 47h
 38009                                  		dw PRINT_G
 38010                                  		db 'H' ; 48h
 38011                                  		dw PRINT_BACK
 38012                                  		db 'L' ; 4Ch
 38013                                  		dw PRINT_L
 38014                                  		db 'N' ; 4Eh
 38015                                  		dw PRINT_DRIVE
 38016                                  		db 'P' ; 50h
 38017                                  		dw BUILD_DIR_FOR_PROMPT
 38018                                  		db 'Q' ; 51h
 38019                                  		dw PRINT_EQ
 38020                                  		db 'T' ; 54h
 38021                                  		dw PRINT_TIME
 38022                                  		db 'V' ; 56h
 38023                                  		dw PRINT_VERSION
 38024                                  		db '_' ; 5Fh
 38025                                  		dw CRLF2
 38026                                  		db '$' ; 24h
 38027                                  		dw PRINT_CHAR
 38028                                  		db 0
 38029                                  
 38030                                  		; Table of IF conditionals
 38031                                  IFTAB:
 38032                                  		db 3	; First byte is count
 38033                                  		db 'NOT'
 38034                                  		dw IFNOT
 38035                                  		db 10
 38036                                  		db 'ERRORLEVEL'
 38037                                  		dw IFERLEV
 38038                                  		db 5
 38039                                  		db 'EXIST'
 38040                                  		dw IFEXISTS
 38041                                  		db 0
 38042                                  
 38043                                  		; Table for internal command names
 38044                                  
 38045                                  COMTAB:		db 3
 38046                                  		db 'DIR'
 38047                                  		db 3
 38048                                  		dw CATALOG
 38049                                  		db 4
 38050                                  		db 'CALL'
 38051                                  		db 2
 38052                                  		dw _$CALL
 38053                                  		db 4
 38054                                  		db 'CHCP'
 38055                                  		db 2
 38056                                  		dw CHCP
 38057                                  		db 6
 38058                                  		db 'RENAME'
 38059                                  		db 1
 38060                                  		dw CRENAME
 38061                                  		db 3
 38062                                  		db 'REN'
 38063                                  		db 1
 38064                                  		dw CRENAME
 38065                                  		db 5
 38066                                  		db 'ERASE'
 38067                                  		db 1
 38068                                  		dw ERASE
 38069                                  		db 3
 38070                                  		db 'DEL'
 38071                                  		db 1
 38072                                  		dw ERASE
 38073                                  		db 4
 38074                                  		db 'TYPE'
 38075                                  		db 1
 38076                                  		dw TYPEFIL
 38077                                  		db 3
 38078                                  		db 'REM'
 38079                                  		db 2
 38080                                  		dw TCOMMAND
 38081                                  		db 4
 38082                                  		db 'COPY'
 38083                                  		db 3
 38084                                  		dw COPY
 38085                                  		db 5
 38086                                  		db 'PAUSE'
 38087                                  		db 2
 38088                                  		dw PAUSE
 38089                                  		db 4
 38090                                  		db 'DATE'
 38091                                  		db 2
 38092                                  		dw DATE
 38093                                  		db 4
 38094                                  		db 'TIME'
 38095                                  		db 0
 38096                                  		dw CTIME
 38097                                  		db 3
 38098                                  		db 'VER'
 38099                                  		db 0
 38100                                  		dw VERSION
 38101                                  		db 3
 38102                                  		db 'VOL'
 38103                                  		db 1
 38104                                  		dw VOLUME
 38105                                  		db 2
 38106                                  		db 'CD'
 38107                                  		db 1
 38108                                  		dw _$CHDIR
 38109                                  		db 5
 38110                                  		db 'CHDIR'
 38111                                  		db 1
 38112                                  		dw _$CHDIR
 38113                                  		db 2
 38114                                  		db 'MD'
 38115                                  		db 1
 38116                                  		dw _$MKDIR
 38117                                  		db 5
 38118                                  		db 'MKDIR'
 38119                                  		db 1
 38120                                  		dw _$MKDIR
 38121                                  		db 2
 38122                                  		db 'RD'
 38123                                  		db 1
 38124                                  		dw _$RMDIR
 38125                                  		db 5
 38126                                  		db 'RMDIR'
 38127                                  		db 1
 38128                                  		dw _$RMDIR
 38129                                  		db 5
 38130                                  		db 'BREAK'
 38131                                  		db 0
 38132                                  		dw CNTRLC
 38133                                  		db 6
 38134                                  		db 'VERIFY'
 38135                                  		db 0
 38136                                  		dw VERIFY
 38137                                  		db 3
 38138                                  		db 'SET'
 38139                                  		db 2
 38140                                  		dw ADD_NAME_TO_ENVIRONMENT
 38141                                  		db 6
 38142                                  		db 'PROMPT'
 38143                                  		db 2
 38144                                  		dw ADD_PROMPT
 38145                                  		db 4
 38146                                  		db 'PATH'
 38147                                  		db 2
 38148                                  		dw PATH
 38149                                  		db 4
 38150                                  		db 'EXIT'
 38151                                  		db 0
 38152                                  		dw _$EXIT
 38153                                  		db 4
 38154                                  		db 'CTTY'
 38155                                  		db 3
 38156                                  		dw CTTY
 38157                                  		db 4
 38158                                  		db 'ECHO'
 38159                                  		db 2
 38160                                  		dw _ECHO
 38161                                  		db 4
 38162                                  		db 'GOTO'
 38163                                  		db 2
 38164                                  		dw _GOTO
 38165                                  		db 5
 38166                                  		db 'SHIFT'
 38167                                  		db 2
 38168                                  		dw _SHIFT
 38169                                  		db 2
 38170                                  		db 'IF'
 38171                                  		db 2
 38172                                  		dw _$IF
 38173                                  		db 3
 38174                                  		db 'FOR'
 38175                                  		db 2
 38176                                  		dw _$FOR
 38177                                  		db 3
 38178                                  		db 'CLS'
 38179                                  		db 0
 38180                                  		dw CLS
 38181                                  		db 0
 38182                                  
 38183                                  CAPITAL_A:	db 'A'
 38184                                  VBAR:		db '|'
 38185                                  LABRACKET:	db '<' ; 3Ch
 38186                                  RABRACKET:	db '>' ; 3Eh
 38187                                  DOLLAR:		db '$'
 38188                                  LPAREN:		db '('
 38189                                  RPAREN:		db ')'
 38190                                  NULLRPAREN:	db ')' ; 29h
 38191                                  		db 0
 38192                                  IN_WORD:	db 'I','N'
 38193                                  DO_WORD	:	db 'D','O'
 38194                                  STAR:		db '*'
 38195                                  CHAR_SUB:	db '-' 
 38196                                  PLUS_CHR:	db '+'
 38197                                  CHAR_L:		db 'L'
 38198                                  char_l:		db 'l'
 38199                                  small_a:	db 'a'
 38200                                  small_z:	db 'z'
 38201                                  CHAR_D:		db 'D'
 38202                                  CHAR_C:		db 'C'
 38203                                  CHAR_S:		db 'S'
 38204                                  CHAR_X:		db 'X'
 38205                                  DOT_CHR:	db '.' 
 38206                                  DOT_QMARK:	dw '?.'  ; dw 2E3Fh
 38207                                  		db ','
 38208                                  TIMECHARS:	dw ':.'  ; dw 2E3Ah 	 
 38209                                  MNCHR:		db 'p'
 38210                                  SYSTEM_CPAGE:	db 0
 38211                                  		db 0
 38212                                  
 38213                                  COMEXT:		db '.COM'
 38214                                  EXEEXT:		db '.EXE'
 38215                                  BATEXT:		db '.BAT'
 38216                                  SWITCH_LIST:	db 'VBAPW'
 38217                                  BATBUFLEN:	dw BATLEN ; 32
 38218                                  
 38219                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3F44h
 38220                                  
 38221                                  TRANDATAEND:
 38222                                  
 38223                                  %endif
 38224                                  
 38225                                  ;============================================================================
 38226                                  ; TDATA.ASM, MSDOS 6.0, 1991
 38227                                  ;============================================================================
 38228                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38229                                  
 38230                                  	; 15/04/2023
 38231 00008187 00                      	db	0
 38232                                  align 2
 38233                                  
 38234                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:849Eh
 38235                                  ; ---------------------------------------------------------------------------
 38236 00008188 00                      	db 0
 38237                                  ; Lists of help message numbers for internal commands and /?
 38238                                  
 38239                                  ;;NoHelpMsgs:
 38240 00008189 B0040000                	dw	1200,0		;M014
 38241                                  BreakHelpMsgs:
 38242 0000818D 14050000                	dw	1300,0
 38243                                  ChcpHelpMsgs:
 38244 00008191 280529050000            	dw	1320,1321,0
 38245                                  CdHelpMsgs:
 38246 00008197 3C053D053E050000        	dw	1340,1341,1342,0
 38247                                  ClsHelpMsgs:
 38248 0000819F 50050000                	dw	1360,0
 38249                                  CopyHelpMsgs:
 38250 000081A3 780579057A057B057C-     	dw	1400,1401,1402,1403,1404,0
 38250 000081AC 050000             
 38251                                  CttyHelpMsgs:
 38252 000081AF 8C050000                	dw	1420,0
 38253                                  DateHelpMsgs:
 38254 000081B3 A005A1050000            	dw	1440,1441,0
 38255                                  DelHelpMsgs:
 38256 000081B9 B405B505B6050000        	dw	1460,1461,1462,0
 38257                                  DirHelpMsgs:
 38258 000081C1 C805C905CA05CB05CC-     	dw	1480,1481,1482,1483,1484,1485,1486,1487,1488
 38258 000081CA 05CD05CE05CF05D005 
 38259                                  	; MSDOS 6.0 COMMAND.COM
 38260                                  	;dw	1489,1490,1491,1492
 38261 000081D3 0000                    	dw	0
 38262                                  ExitHelpMsgs:
 38263 000081D5 DC050000                	dw	1500,0
 38264                                  MdHelpMsgs:
 38265 000081D9 F0050000                	dw	1520,0
 38266                                  PathHelpMsgs:
 38267 000081DD 0406050606060000        	dw	1540,1541,1542,0
 38268                                  PromptHelpMsgs:
 38269 000081E5 180619061A061B061C-     	dw	1560,1561,1562,1563,1564,1565,1566,1567,1568,0
 38269 000081EE 061D061E061F062006-
 38269 000081F7 0000               
 38270                                  RdHelpMsgs:
 38271 000081F9 2C060000                	dw	1580,0
 38272                                  RenHelpMsgs:
 38273 000081FD 4006410642060000        	dw	1600,1601,1602,0
 38274                                  SetHelpMsgs:
 38275 00008205 5406550656060000        	dw	1620,1621,1622,0
 38276                                  TimeHelpMsgs:
 38277 0000820D 680669060000            	dw	1640,1641,0
 38278                                  TypeHelpMsgs:
 38279 00008213 7C060000                	dw	1660,0
 38280                                  VerHelpMsgs:
 38281 00008217 90060000                	dw	1680,0
 38282                                  VerifyHelpMsgs:
 38283 0000821B A4060000                	dw	1700,0
 38284                                  VolHelpMsgs:
 38285 0000821F B8060000                	dw	1720,0
 38286                                  CallHelpMsgs:
 38287 00008223 CC06CD060000            	dw	1740,1741,0	;M014
 38288                                  RemHelpMsgs:
 38289 00008229 E0060000                	dw	1760,0		;M014
 38290                                  PauseHelpMsgs:
 38291 0000822D F4060000                	dw	1780,0		;M014
 38292                                  EchoHelpMsgs:
 38293 00008231 080709070000            	dw	1800,1801,0	;M014
 38294                                  GotoHelpMsgs:
 38295 00008237 1C071D070000            	dw	1820,1821,0	;M014
 38296                                  ShiftHelpMsgs:
 38297 0000823D 30070000                	dw	1840,0		;M014
 38298                                  IfHelpMsgs:
 38299 00008241 440745074607470748-     	dw	1860,1861,1862,1863,1864,1865,1866,0	;M014
 38299 0000824A 0749074A070000     
 38300                                  ForHelpMsgs:
 38301 00008251 580759075A075B0700-     	dw	1880,1881,1882,1883,0 ;M014
 38301 0000825A 00                 
 38302                                  TruenameHelpMsgs:
 38303 0000825B 6C070000                	 dw	1900,0		;M014
 38304                                  LoadhighHelpMsgs:
 38305 0000825F 800781078207            	dw	1920,1921,1922
 38306                                  	; MSDOS 6.0 COMMAND.COM
 38307                                  	;dw	1923,1924,1925,1926,1927 ;M014
 38308 00008265 0000                    	dw	0
 38309                                  
 38310                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8578h
 38311                                  CLSSTRING:
 38312 00008267 041B5B324A              	db	4,01Bh,"[2J"		; ANSI Clear screen
 38313                                  
 38314                                  PROMPT_TABLE:
 38315 0000826C 42                      	db	"B"
 38316 0000826D [FB1D]                  	dw	Print_B
 38317 0000826F 44                      	db	"D"
 38318 00008270 [C936]                  	dw	PRINT_DATE
 38319 00008272 45                      	db	"E"
 38320 00008273 [EF1D]                  	dw	PRINT_ESC
 38321 00008275 47                      	db	"G"
 38322 00008276 [F31D]                  	dw	PRINT_G
 38323 00008278 48                      	db	"H"
 38324 00008279 [E51D]                  	dw	PRINT_BACK
 38325 0000827B 4C                      	db	"L"
 38326 0000827C [F71D]                  	dw	PRINT_L
 38327 0000827E 4E                      	db	"N"
 38328 0000827F [0C1E]                  	dw	PRINT_DRIVE
 38329 00008281 50                      	db	"P"
 38330 00008282 [141E]                  	dw	build_dir_for_prompt
 38331 00008284 51                      	db	"Q"
 38332 00008285 [EB1D]                  	dw	PRINT_EQ
 38333 00008287 54                      	db	"T"
 38334 00008288 [802F]                  	dw	PRINT_TIME
 38335 0000828A 56                      	db	"V"
 38336 0000828B [7B1D]                  	dw	PRINT_VERSION
 38337 0000828D 5F                      	db	"_"
 38338 0000828E [D125]                  	dw	CRLF2
 38339 00008290 24                      	db	"$"
 38340 00008291 [FD1D]                  	dw	PRINT_CHAR
 38341 00008293 00                      	db	0			; NUL TERMINATED
 38342                                  
 38343                                  ; Table of IF conditionals
 38344                                  IFTAB:
 38345 00008294 034E4F54                	db	3,"NOT"			; First byte is count
 38346 00008298 [E00A]                  	dw	IFNOT
 38347 0000829A 0A4552524F524C4556-     	db	10,"ERRORLEVEL"
 38347 000082A3 454C               
 38348 000082A5 [9F0B]                  	dw	IFERLEV
 38349 000082A7 054558495354            	db	5,"EXIST"
 38350 000082AD [340B]                  	dw	IFEXISTS
 38351 000082AF 00                      	db	0
 38352                                  
 38353                                  ; Table for internal command names
 38354                                  COMTAB:
 38355 000082B0 0344495203              	db	3,"DIR",fSwitchAllowed+fCheckDrive ; 3
 38356 000082B5 [6410]                  	dw	CATALOG			; In TCMD1.ASM
 38357 000082B7 [C181]                  	dw	DirHelpMsgs
 38358                                  
 38359 000082B9 0443414C4C02            	db	4,"CALL",fSwitchAllowed	; 2
 38360 000082BF [140C]                  	dw	_$CALL			; In TBATCH2.ASM
 38361 000082C1 [2382]                  	dw	CallHelpMsgs
 38362                                  
 38363 000082C3 044348435002            	db	4,"CHCP",fSwitchAllowed ; 2
 38364 000082C9 [5720]                  	dw	CHCP			; In TCMD2B.ASM
 38365 000082CB [9181]                  	dw	ChcpHelpMsgs
 38366                                  
 38367 000082CD 0652454E414D4503        	db	6,"RENAME",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 38368 000082D5 [411A]                  	dw	CRENAME			; In TCMD1.ASM
 38369 000082D7 [FD81]                  	dw	RenHelpMsgs
 38370                                  
 38371 000082D9 0352454E03              	db	3,"REN",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 38372 000082DE [411A]                  	dw	CRENAME			; In TCMD1.ASM
 38373 000082E0 [FD81]                  	dw	RenHelpMsgs
 38374                                  	
 38375 000082E2 05455241534503          	db	5,"ERASE",fSwitchAllowed+fCheckDrive	; 3
 38376 000082E9 [BF19]                  	dw	ERASE			; In TCMD1.ASM
 38377 000082EB [B981]                  	dw	DelHelpMsgs
 38378                                  	
 38379 000082ED 0344454C03              	db	3,"DEL",fSwitchAllowed+fCheckDrive	; 3
 38380 000082F2 [BF19]                  	dw	ERASE			; In TCMD1.ASM
 38381 000082F4 [B981]                  	dw	DelHelpMsgs
 38382                                  	
 38383 000082F6 045459504503            	db	4,"TYPE",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 38384 000082FC [E81A]                  	dw	TYPEFIL			; In TCMD1.ASM
 38385 000082FE [1382]                  	dw	TypeHelpMsgs
 38386                                  	
 38387 00008300 0352454D06              	db	3,"REM",fSwitchAllowed+fLimitHelp	; 6
 38388 00008305 [0401]                  	dw	TCOMMAND		; In TCODE.ASM
 38389 00008307 [2982]                  	dw	RemHelpMsgs
 38390                                  	
 38391 00008309 04434F505903            	db	4,"COPY",fSwitchAllowed+fCheckDrive	; 3
 38392 0000830F [1637]                  	dw	COPY			; In COPY.ASM
 38393 00008311 [A381]                  	dw	CopyHelpMsgs
 38394                                  	
 38395 00008313 05504155534506          	db	5,"PAUSE",fSwitchAllowed+fLimitHelp	; 6
 38396 0000831A [B319]                  	dw	PAUSE			; In TCMD1.ASM
 38397 0000831C [2D82]                  	dw	PauseHelpMsgs
 38398                                  	
 38399 0000831E 044441544502            	db	4,"DATE",fSwitchAllowed	; 2
 38400 00008324 [932E]                  	dw	DATE			; In TPIPE.ASM
 38401 00008326 [B381]                  	dw	DateHelpMsgs
 38402                                  	
 38403 00008328 0454494D4502            	db	4,"TIME",fSwitchAllowed ; 2		;AC018; P3903
 38404 0000832E [F22E]                  	dw	CTIME			; In TPIPE.ASM
 38405 00008330 [0D82]                  	dw	TimeHelpMsgs
 38406                                  	
 38407 00008332 0356455202              	db	3,"VER",fSwitchAllowed ; 2
 38408 00008337 [071D]                  	dw	VERSION			; In TCMD2.ASM
 38409 00008339 [1782]                  	dw	VerHelpMsgs
 38410                                  	
 38411 0000833B 03564F4C03              	db	3,"VOL",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 38412 00008340 [0F1C]                  	dw	VOLUME			; In TCMD1.ASM
 38413 00008342 [1F82]                  	dw	VolHelpMsgs
 38414                                  	
 38415 00008344 02434403                	db	2,"CD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 38416 00008348 [9A24]                  	dw	_$CHDIR			; In TENV.ASM
 38417 0000834A [9781]                  	dw	CdHelpMsgs
 38418                                  	
 38419 0000834C 05434844495203          	db	5,"CHDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 38420 00008353 [9A24]                  	dw	_$CHDIR			; In TENV.ASM
 38421 00008355 [9781]                  	dw	CdHelpMsgs
 38422                                  	
 38423 00008357 024D4403                	db	2,"MD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 38424 0000835B [FF24]                  	dw	_$MKDIR			; In TENV.ASM
 38425 0000835D [D981]                  	dw	MdHelpMsgs
 38426                                  	
 38427 0000835F 054D4B44495203          	db	5,"MKDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 38428 00008366 [FF24]                  	dw	_$MKDIR			; In TENV.ASM
 38429 00008368 [D981]                  	dw	MdHelpMsgs
 38430                                  	
 38431 0000836A 02524403                	db	2,"RD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 38432 0000836E [4125]                  	dw	_$RMDIR			; In TENV.ASM
 38433 00008370 [F981]                  	dw	RdHelpMsgs
 38434                                  	
 38435 00008372 05524D44495203          	db	5,"RMDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 38436 00008379 [4125]                  	dw	_$RMDIR			; In TENV.ASM
 38437 0000837B [F981]                  	dw	RdHelpMsgs
 38438                                  	
 38439 0000837D 05425245414B02          	db	5,"BREAK",fSwitchAllowed ; 2		;AC018; P3903
 38440 00008384 [1336]                  	dw	CNTRLC			; In TUCODE.ASM
 38441 00008386 [8D81]                  	dw	BreakHelpMsgs
 38442                                  	
 38443 00008388 0656455249465902        	db	6,"VERIFY",fSwitchAllowed ; 2		;AC018; P3903
 38444 00008390 [5536]                  	dw	VERIFY			; In TUCODE.ASM
 38445 00008392 [1B82]                  	dw	VerifyHelpMsgs
 38446                                  	
 38447 00008394 0353455406              	db	3,"SET",fSwitchAllowed+fLimitHelp ; 6
 38448 00008399 [0422]                  	dw	ADD_NAME_TO_ENVIRONMENT	; In TENV.ASM
 38449 0000839B [0582]                  	dw	SetHelpMsgs
 38450                                  	
 38451 0000839D 0650524F4D505406        	db	6,"PROMPT",fSwitchAllowed+fLimitHelp ; 6
 38452 000083A5 [EA21]                  	dw	ADD_PROMPT		; In TENV.ASM
 38453 000083A7 [E581]                  	dw	PromptHelpMsgs
 38454                                  	
 38455 000083A9 045041544802            	db	4,"PATH",fSwitchAllowed ; 2
 38456 000083AF [7B1E]                  	dw	PATH			; In TCMD2.ASM
 38457 000083B1 [DD81]                  	dw	PathHelpMsgs
 38458                                  	
 38459 000083B3 044558495400            	db	4,"EXIT",0
 38460 000083B9 [4C21]                  	dw	_$EXIT			; In TCMD2.ASM
 38461 000083BB [D581]                  	dw	ExitHelpMsgs
 38462                                  	
 38463 000083BD 044354545903            	db	4,"CTTY",fCheckDrive+fSwitchAllowed ; 3
 38464 000083C3 [B91F]                  	dw	CTTY			; In TCMD2.ASM
 38465 000083C5 [AF81]                  	dw	CttyHelpMsgs
 38466                                  	
 38467 000083C7 044543484F06            	db	4,"ECHO",fSwitchAllowed+fLimitHelp ; 6
 38468 000083CD [DA35]                  	dw	_ECHO			; In TUCODE.ASM
 38469 000083CF [3182]                  	dw	EchoHelpMsgs
 38470                                  	
 38471 000083D1 04474F544F06            	db	4,"GOTO",fSwitchAllowed+fLimitHelp
 38472 000083D7 [480C]                  	dw	_GOTO			; In TBATCH.ASM
 38473 000083D9 [3782]                  	dw	GotoHelpMsgs
 38474                                  	
 38475 000083DB 05534849465402          	db	5,"SHIFT",fSwitchAllowed ; 2
 38476 000083E2 [CD0B]                  	dw	_SHIFT			; In TBATCH.ASM
 38477 000083E4 [3D82]                  	dw	ShiftHelpMsgs
 38478                                  	
 38479 000083E6 02494606                	db	2,"IF",fSwitchAllowed+fLimitHelp ; 6
 38480 000083EA [790A]                  	dw	_$IF			; In TBATCH.ASM
 38481 000083EC [4182]                  	dw	IfHelpMsgs
 38482                                  	
 38483 000083EE 03464F5206              	db	3,"FOR",fSwitchAllowed+fLimitHelp ; 6
 38484 000083F3 [FD0E]                  	dw	_$FOR			; In TBATCH.ASM
 38485 000083F5 [5182]                  	dw	ForHelpMsgs
 38486                                  	
 38487 000083F7 03434C5300              	db	3,"CLS",0
 38488 000083FC [201F]                  	dw	CLS			; In TCMD2.ASM
 38489 000083FE [9F81]                  	dw	ClsHelpMsgs
 38490                                  	
 38491 00008400 08545255454E414D45-     	db	8,"TRUENAME",fSwitchAllowed+fCheckDrive	;AN000; P3903 changed
 38491 00008409 03                 
 38492 0000840A [D520]                  	dw	TRUENAME		;AN000;
 38493 0000840C [5B82]                  	dw	TruenameHelpMsgs
 38494                                  	
 38495 0000840E 084C4F414448494748-     	db	8,"LOADHIGH",fSwitchAllowed ; 2	; M003
 38495 00008417 02                 
 38496 00008418 [2556]                  	dw	LoadHigh		; In loadhi.asm ; M003
 38497 0000841A [5F82]                  	dw	LoadhighHelpMsgs	; M003
 38498                                  	
 38499 0000841C 024C4802                	db	2,"LH",fSwitchAllowed ; 2 ; Short form; M003
 38500 00008420 [2556]                  	dw	LoadHigh		; In loadhi.asm ; M003
 38501 00008422 [5F82]                  	dw	LoadhighHelpMsgs	; M003
 38502                                  	
 38503 00008424 00                      	db	0			; Terminate command table
 38504                                  
 38505                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8736h
 38506                                  
 38507 00008425 2E434F4D                comext:	db	".COM"
 38508 00008429 2E455845                exeext:	db	".EXE"
 38509 0000842D 2E424154                batext:	db	".BAT"
 38510                                  
 38511                                  switch_list:
 38512 00008431 3F5642415057            	db	"?VBAPW"		; flags we can recognize
 38513                                  
 38514                                  AttrLtrs:
 38515 00008437 524853764441            	db	"RHSvDA"		; attribute letters for DIR
 38516                                  
 38517                                  ;	Attribute letters in AttrLtrs must appear in the order that
 38518                                  ;	attribute bits occur in the attribute byte returned by
 38519                                  ;	directory searches, starting with bit 0.
 38520                                  ;	The volume label attribute is lowercased to keep it from
 38521                                  ;	being matched (by an uppercase comparison).
 38522                                  
 38523                                  OrderLtrs:
 38524 0000843D 4E45445347              	db	"NEDSG"			; sort order letters for DIR
 38525                                  	; MSDOS 6.0 COMMAND.COM
 38526                                  	;db	"NEDSGC"		; sort order letters for DIR
 38527                                  
 38528                                  ;	Sort order letters stand for file name, extension,
 38529                                  ;	date/time, size, grouped (directory files before others),
 38530                                  ;	and compression ratio. DIR routines rely on the specific
 38531                                  ;	order of the letters in this list.
 38532                                  
 38533                                  comspec_flag:
 38534 00008442 00                      	db	0                       ;AN071;
 38535                                  
 38536                                  BATBUFLEN:
 38537 00008443 2000                    	dw	BatLen ; 32
 38538                                  
 38539                                  ; *****************************************************
 38540                                  ; EMG 4.00
 38541                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 38542                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 38543                                  ; *****************************************************
 38544                                  
 38545                                  ; COMMON PARSE BLOCKS
 38546                                  
 38547                                  ; Indicates no value list for PARSE.
 38548                                  
 38549                                  NO_VALUES:
 38550 00008445 0000                    	dw	0			;AN000;  no values
 38551                                  
 38552                                  NULL_VALUE_LIST:  ; for unvalidated value
 38553 00008447 00                       	db	0                       ; no value lists
 38554                                  
 38555                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38556                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8759h
 38557                                  
 38558                                  ; PARSE control block for a required file specification (upper cased)
 38559                                  
 38560                                  FILE_REQUIRED:
 38561 00008448 0002                    	dw	0200h			;AN000;  filespec - required
 38562 0000844A 0100                    	dw	1			;AN000;  capitalize - file table
 38563 0000844C [5395]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38564 0000844E [4584]                  	dw	NO_VALUES		;AN000;
 38565 00008450 00                      	db	0			;AN000;  no keywords
 38566                                  
 38567                                  ; PARSE control block for an optional file specification (upper cased)
 38568                                  ; or drive number
 38569                                  
 38570                                  FILE_OPTIONAL:
 38571 00008451 0103                    	dw	0301h			;AN000;  filespec or drive number
 38572                                  					;	 optional
 38573 00008453 0100                    	dw	1			;AN000;  capitalize - file table
 38574 00008455 [5395]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38575 00008457 [4584]                  	dw	NO_VALUES		;AN000;
 38576 00008459 00                      	db	0			;AN000;  no keywords
 38577                                  
 38578                                  ; PARSE control block for an optional file specification (upper cased)
 38579                                  
 38580                                  FILE_OPTIONAL2:
 38581 0000845A 0102                    	dw	0201h                   ;AN000;  filespec optional
 38582 0000845C 0100                    	dw	1                       ;AN000;  capitalize - file table
 38583 0000845E [5395]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38584 00008460 [4584]                  	dw	NO_VALUES		;AN000;
 38585 00008462 00                      	db	0			;AN000;  no keywords
 38586                                  
 38587                                  ; PARSE control block for an optional /P switch
 38588                                  
 38589                                  SLASH_P_SWITCH:
 38590 00008463 0000                    	dw	0			;AN000;  no match flags
 38591 00008465 0200                    	dw	2			;AN000;  capitalize - char table
 38592 00008467 [5395]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38593 00008469 [4584]                  	dw	NO_VALUES		;AN000;
 38594 0000846B 01                      	db	1			;AN000;  1 keyword
 38595                                  SLASH_P_SYN:
 38596 0000846C 2F5000                  	db	"/P",0                  ;AN000;  /P switch
 38597                                  
 38598                                  ; PARSE BLOCK FOR BREAK, VERIFY, ECHO
 38599                                  
 38600                                  ; The following parse control block can be used for any command which
 38601                                  ; needs only the optional "ON" and "OFF" keywords as operands. Allows
 38602                                  ; the equal sign as an additional delimiter. Returns verified result
 38603                                  ; in PARSE1_OUTPUT. Currently used for the BREAK, VERIFY, and ECHO
 38604                                  ; internal commands.
 38605                                  
 38606                                  PARSE_BREAK:
 38607 0000846F [7284]                  	dw	BREAK_PARMS		;AN000;
 38608 00008471 00                      	db	0			;AN032; no extra delimiter
 38609                                  
 38610                                  BREAK_PARMS:
 38611 00008472 0001                    	db	0,1			;AN000;  1 positional parm
 38612 00008474 [7884]                  	dw	BREAK_CONTROL1		;AN000;
 38613 00008476 00                      	db	0			;AN000;  no switches
 38614 00008477 00                      	db	0			;AN000;  no keywords
 38615                                  
 38616                                  BREAK_CONTROL1:
 38617 00008478 0120                    	dw	2001h			;AN000;  string value - optional
 38618 0000847A 0200                    	dw	2			;AN000;  capitalize - char table
 38619 0000847C [5395]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38620 0000847E [8184]                  	dw	BREAK_VALUES		;AN000;
 38621 00008480 00                      	db	0			;AN000;  no keywords
 38622                                  
 38623                                  BREAK_VALUES:
 38624 00008481 03                      	db	3			;AN000;
 38625 00008482 00                      	db	0			;AN000;  no ranges
 38626 00008483 00                      	db	0			;AN000;  no numeric values
 38627 00008484 02                      	db	2			;AN000;  2 string values
 38628 00008485 00                      	db	0			;AN000;  returned if ON
 38629 00008486 [8B84]                  	dw	BREAK_ON		;AN000;  point to ON string
 38630 00008488 66                      	db	'f'                     ;AN000;  returned if OFF
 38631 00008489 [8E84]                  	dw	BREAK_OFF		;AN000;  point to OFF string
 38632                                  
 38633                                  BREAK_ON:
 38634 0000848B 4F4E00                  	db	"ON",0                  ;AN000;
 38635                                  BREAK_OFF:
 38636 0000848E 4F464600                	db	"OFF",0                 ;AN000;
 38637                                  
 38638                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38639                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:87A3h
 38640                                  
 38641                                  ; PARSE BLOCK FOR CHCP
 38642                                  
 38643                                  ; The following parse control block can be used for any command which
 38644                                  ; needs only one optional three digit decimal parameter for operands.
 38645                                  ; Returns verified result in PARSE1_OUTPUT. Currently used for the
 38646                                  ; CHCP internal command.
 38647                                  
 38648                                  CHCP_MINVAL	EQU	100			;AN000;
 38649                                  CHCP_MAXVAL	EQU	999			;AN000;
 38650                                  
 38651                                  PARSE_CHCP:
 38652 00008492 [9584]                  	dw	CHCP_PARMS			;AN000;
 38653 00008494 00                      	db	0				;AN000;  no extra delimiter
 38654                                  CHCP_PARMS:
 38655 00008495 0001                    	db	0,1				;AN000;  1 positional parm
 38656 00008497 [9B84]                  	dw	CHCP_CONTROL1			;AN000;
 38657 00008499 00                      	db	0				;AN000;  no switches
 38658 0000849A 00                      	db	0				;AN000;  no keywords
 38659                                  
 38660                                  CHCP_CONTROL1:
 38661 0000849B 0180                    	dw	8001h				;AN000;  numeric value - optional
 38662 0000849D 0000                    	dw	0				;AN000;  no function flags
 38663 0000849F [5395]                  	dw	PARSE1_OUTPUT			;AN000;  result buffer
 38664 000084A1 [A484]                  	dw	CHCP_VALUES			;AN000;
 38665 000084A3 00                      	db	0				;AN000;  no keywords
 38666                                  
 38667                                  CHCP_VALUES:
 38668 000084A4 01                      	db	1				;AN000;
 38669 000084A5 01                      	db	1				;AN000;  1 range
 38670 000084A6 01                      	db	1				;AN000;  returned if result
 38671 000084A7 64000000E7030000        	dd	CHCP_MINVAL,CHCP_MAXVAL		;AN000;  minimum & maximum value
 38672 000084AF 00                      	db	0				;AN000;  no numeric values
 38673 000084B0 00                      	db	0				;AN000;  no string values
 38674                                  
 38675                                  ; PARSE BLOCK FOR DATE
 38676                                  
 38677                                  ; The following parse control block can be used for any command which
 38678                                  ; needs only an optional date string as an operand. Returns unverified
 38679                                  ; result in DATE_OUTPUT. Currently used for the DATE internal command.
 38680                                  
 38681                                  PARSE_DATE:
 38682 000084B1 [B484]                  	dw	DATE_PARMS			;AN000;
 38683 000084B3 00                      	db	0				;AN000;  no extra delimiter
 38684                                  DATE_PARMS:
 38685 000084B4 0001                    	db	0,1				;AN000;  1 positional parm
 38686 000084B6 [BA84]                  	dw	DATE_CONTROL1			;AN000;
 38687 000084B8 00                      	db	0				;AN000;  no switches
 38688 000084B9 00                      	db	0				;AN000;  no keywords
 38689                                  
 38690                                  DATE_CONTROL1:
 38691 000084BA 0110                    	dw	1001h				;AN000;  date - optional
 38692 000084BC 0000                    	dw	0				;AN000;  no function flags
 38693 000084BE [5B95]                  	dw	DATE_OUTPUT			;AN000;  result buffer
 38694 000084C0 [4584]                  	dw	NO_VALUES			;AN000;
 38695 000084C2 00                      	db	0				;AN000;  no keywords
 38696                                  
 38697                                  ; PARSE BLOCK FOR TIME
 38698                                  
 38699                                  ; The following parse control block can be used for any command which
 38700                                  ; needs only an optional time string as an operand. Returns unverified
 38701                                  ; result in TIME_OUTPUT. Currently used for the TIME internal command.
 38702                                  
 38703                                  PARSE_TIME:
 38704 000084C3 [C684]                  	dw	TIME_PARMS			;AN000;
 38705 000084C5 00                      	db	0				;AN000;  no extra delimiter
 38706                                  TIME_PARMS:
 38707 000084C6 0001                    	db	0,1				;AN000;  1 positional parm
 38708 000084C8 [CC84]                  	dw	TIME_CONTROL1			;AN000;
 38709 000084CA 00                      	db	0				;AN000;  no switches
 38710 000084CB 00                      	db	0				;AN000;  no keywords
 38711                                  
 38712                                  TIME_CONTROL1:
 38713 000084CC 0108                    	dw	0801h				;AN000;  TIME - optional
 38714 000084CE 0000                    	dw	0				;AN000;  no function flags
 38715 000084D0 [6395]                  	dw	TIME_OUTPUT			;AN000;  result buffer
 38716 000084D2 [4584]                  	dw	NO_VALUES			;AN000;
 38717 000084D4 00                      	db	0				;AN000;  no keywords
 38718                                  
 38719                                  ; PARSE BLOCK FOR VOL
 38720                                  
 38721                                  ; The following parse control block can be used for any command which
 38722                                  ; needs only an optional drive letter as an operand.  Returns unverified
 38723                                  ; drive number (one based) in DRIVE_OUTPUT. Currently used for the VOL
 38724                                  ; internal command.
 38725                                  
 38726                                  PARSE_VOL:
 38727 000084D5 [D884]                  	dw	VOL_PARMS			;AN000;
 38728 000084D7 00                      	db	0				;AN000;  no extra delimiter
 38729                                  VOL_PARMS:
 38730 000084D8 0001                    	db	0,1				;AN000;  1 positional parm
 38731 000084DA [DE84]                  	dw	DRIVE_CONTROL1			;AN000;
 38732 000084DC 00                      	db	0				;AN000;  no switches
 38733 000084DD 00                      	db	0				;AN000;  no keywords
 38734                                  
 38735                                  DRIVE_CONTROL1:
 38736 000084DE 0101                    	dw	0101h				;AN000;  DRIVE - optional
 38737 000084E0 0100                    	dw	1				;AN000;  capitalize - file table
 38738 000084E2 [6B95]                  	dw	DRIVE_OUTPUT			;AN000;  result buffer
 38739 000084E4 [4584]                  	dw	NO_VALUES			;AN000;
 38740 000084E6 00                      	db	0				;AN000;  no keywords
 38741                                  
 38742                                  ; PARSE BLOCK FOR MKDIR, RMDIR, TYPE
 38743                                  
 38744                                  ; The following parse control block can be used for any command which
 38745                                  ; needs only one required file specification as an operand. Returns a
 38746                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 38747                                  ; for the MKDIR, RMDIR, and TYPE internal commands.
 38748                                  
 38749                                  PARSE_MRDIR:
 38750 000084E7 [EA84]                  	dw	MRDIR_PARMS			;AN000;
 38751 000084E9 00                      	db	0				;AN000;  no extra delimiter
 38752                                  MRDIR_PARMS:
 38753 000084EA 0101                    	db	1,1				;AN000;  1 positional parm
 38754 000084EC [4884]                  	dw	FILE_REQUIRED			;AN000;
 38755 000084EE 00                      	db	0				;AN000;  no switches
 38756 000084EF 00                      	db	0				;AN000;  no keywords
 38757                                  
 38758                                  ; PARSE BLOCK FOR CHDIR, TRUENAME
 38759                                  
 38760                                  ; The following parse control block can be used for any command which
 38761                                  ; needs only one optional file specification an operand. Returns a
 38762                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 38763                                  ; for the CHDIR and TRUENAME internal commands.
 38764                                  
 38765                                  PARSE_CHDIR:
 38766 000084F0 [F384]                  	dw	CHDIR_PARMS			;AN000;
 38767 000084F2 00                      	db	0				;AN000;  no extra delimiter
 38768                                  CHDIR_PARMS:
 38769 000084F3 0001                    	db	0,1				;AN000;  1 positional parm
 38770 000084F5 [5184]                  	dw	FILE_OPTIONAL			;AN000;
 38771 000084F7 00                      	db	0				;AN000;  no switches
 38772 000084F8 00                      	db	0				;AN000;  no keywords
 38773                                  
 38774                                  ; PARSE BLOCK FOR ERASE
 38775                                  
 38776                                  ; The following parse control block is used for the DEL/ERASE internal
 38777                                  ; commands. This command has one required file specification and an
 38778                                  ; optional switch (/p) as operands. The verified switch or unverified
 38779                                  ; file specification is returned in PARSE1_OUTPUT.
 38780                                  
 38781                                  PARSE_ERASE:
 38782 000084F9 [FC84]                  	dw	ERASE_PARMS			;AN000;
 38783 000084FB 00                      	db	0				;AN000;  no extra delimiter
 38784                                  
 38785                                  ERASE_PARMS:
 38786 000084FC 0101                    	db	1,1				;AN000;  1 positional parm
 38787 000084FE [4884]                  	dw	FILE_REQUIRED			;AN000;
 38788 00008500 01                      	db	1				;AN000;  1 switch
 38789 00008501 [6384]                  	dw	SLASH_P_SWITCH			;AN000;
 38790 00008503 00                      	db	0				;AN000;  no keywords
 38791                                  
 38792                                  ; PARSE BLOCK FOR DIR
 38793                                  
 38794                                  ; The following parse control block is used for the DIR internal command.
 38795                                  ; This command has one optional file specification and several optional
 38796                                  ; switches. Switches, switch values, and the filespec are returned in 
 38797                                  ; PARSE1_OUTPUT.
 38798                                  ;
 38799                                  ; Switches are /a[value], /-a, /o[value], /-o, /s, /-s, /?, /b, /-b,
 38800                                  ; /w, /-w, /p, and /-p. The string values for /a and /o are optional,
 38801                                  ; do not require colons, and are not checked against a value list.
 38802                                  ;
 38803                                  ; Switch /h has been removed from the DIR command	;M008
 38804                                  ; Switch /? is no longer handled internally		;M008
 38805                                  ;
 38806                                  ; A list of pointers to all the switch synonyms is provided here to
 38807                                  ; help identify which switch has been matched.
 38808                                  
 38809                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 38810                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8815h
 38811                                  
 38812                                  PARSE_DIR:
 38813 00008504 [0785]                  	dw	DIR_PARMS
 38814 00008506 00                      	db	0			; no extra delimiters
 38815                                  DIR_PARMS:
 38816 00008507 0001                    	db	0,1			; 1 optional positional param
 38817 00008509 [5A84]                  	dw	FILE_OPTIONAL2
 38818 0000850B 02                      	db	2			; 2 kinds of switches
 38819 0000850C [1185]                  	dw	DIR_SW_VALUED
 38820 0000850E [2085]                  	dw	DIR_SW_UNVALUED
 38821 00008510 00                      	db	0			; no keywords
 38822                                  
 38823                                  DIR_SW_VALUED:
 38824 00008511 0120                    	dw	2001h			; optional string value
 38825 00008513 2100                    	dw	21h			; optional colon; capitalize 
 38826 00008515 [5395]                  	dw	PARSE1_OUTPUT		; result buffer
 38827 00008517 [4784]                  	dw	NULL_VALUE_LIST		; don't validate value
 38828                                  
 38829 00008519 02                      	db	2
 38830                                  
 38831                                  ; MSDOS 6.0 COMMAND.COM
 38832                                  ;ifdef DBLSPACE_HOOKS
 38833                                  ;	db	3		; 3 'synonyms'
 38834                                  ;else
 38835                                  ;	db	2		; 2 'synonyms'
 38836                                  ;endif
 38837                                  
 38838                                  DIR_SW_A:
 38839 0000851A 2F4100                  	db	"/A",0
 38840                                  DIR_SW_O:
 38841 0000851D 2F4F00                  	db	"/O",0
 38842                                  
 38843                                  ; MSDOS 6.0 COMMAND.COM
 38844                                  ;ifdef DBLSPACE_HOOKS
 38845                                  ;DIR_SW_C	db	"/C",0
 38846                                  ;endif
 38847                                  
 38848                                  DIR_SW_UNVALUED:
 38849 00008520 0000                    	dw	0			; no value
 38850 00008522 0000                    	dw	0			; no format functions
 38851 00008524 [5395]                  	dw	PARSE1_OUTPUT		; result buffer
 38852 00008526 [4584]                  	dw	NO_VALUES
 38853                                  
 38854                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 38855                                  	;db	12
 38856                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8839h
 38857 00008528 0E                      	db	14		; 14 'synonyms' !?
 38858                                  
 38859                                  ; MSDOS 6.0 COMMAND.COM
 38860                                  ;ifdef DBLSPACE_HOOKS
 38861                                  ;	db	13		; 13 'synonyms'
 38862                                  ;else
 38863                                  ;	db	12		; 12 'synonyms'
 38864                                  ;endif
 38865                                  
 38866                                  DIR_SW_NEG_A:
 38867 00008529 2F2D4100                	db	"/-A",0
 38868                                  DIR_SW_NEG_O:
 38869 0000852D 2F2D4F00                	db	"/-O",0
 38870                                  DIR_SW_S:
 38871 00008531 2F5300                  	db	"/S",0
 38872                                  DIR_SW_NEG_S:
 38873 00008534 2F2D5300                	db	"/-S",0
 38874                                  DIR_SW_B:
 38875 00008538 2F4200                  	db	"/B",0
 38876                                  DIR_SW_NEG_B:
 38877 0000853B 2F2D4200                	db	"/-B",0
 38878                                  DIR_SW_W:
 38879 0000853F 2F5700                  	db	"/W",0
 38880                                  DIR_SW_NEG_W:
 38881 00008542 2F2D5700                	db	"/-W",0
 38882                                  DIR_SW_P:
 38883 00008546 2F5000                  	db	"/P",0
 38884                                  DIR_SW_NEG_P:
 38885 00008549 2F2D5000                	db	"/-P",0
 38886                                  DIR_SW_L:
 38887 0000854D 2F4C00                  	db	"/L",0		;M010
 38888                                  DIR_SW_NEG_L:
 38889 00008550 2F2D4C00                	db	"/-L",0 	;M010
 38890                                  ; MSDOS 6.0 COMMAND.COM (DBLSPACE_HOOKS)
 38891                                  ;DIR_SW_NEG_C:
 38892                                  ;	db	"/-C",0
 38893                                  
 38894                                  ; Here's a list of pointers to DIR's switch synonyms, for easier
 38895                                  ; identification. Order is critical - DIR routines rely on the
 38896                                  ; specific order in this list. Negated options appear at odd 
 38897                                  ; positions in the list, and simple on/off options appear first.
 38898                                  
 38899                                  Dir_Sw_Ptrs:
 38900                                  	; MSDOS 5.0 COMMAND.COM
 38901 00008554 [4285]                  	dw	DIR_SW_NEG_W 
 38902                                  Dir_Sw_Ptrs_2:			; list of ptrs to switch synonyms
 38903                                  	; MSDOS 6.0 COMMAND.COM
 38904                                  	;dw	DIR_SW_NEG_C
 38905                                  	;dw	DIR_SW_C
 38906                                  	;dw	DIR_SW_NEG_W
 38907                                  	
 38908 00008556 [3F85]                  	dw	DIR_SW_W
 38909 00008558 [4985]                  	dw	DIR_SW_NEG_P
 38910 0000855A [4685]                  	dw	DIR_SW_P
 38911 0000855C [3485]                  	dw	DIR_SW_NEG_S
 38912 0000855E [3185]                  	dw	DIR_SW_S
 38913 00008560 [3B85]                  	dw	DIR_SW_NEG_B
 38914 00008562 [3885]                  	dw	DIR_SW_B
 38915 00008564 [5085]                  	dw	DIR_SW_NEG_L	;M010
 38916 00008566 [4D85]                  	dw	DIR_SW_L	;M010
 38917 00008568 [2D85]                  	dw	DIR_SW_NEG_O
 38918 0000856A [1D85]                  	dw	DIR_SW_O
 38919 0000856C [2985]                  	dw	DIR_SW_NEG_A
 38920 0000856E [1A85]                  	dw	DIR_SW_A
 38921                                  
 38922                                  ; PARSE BLOCK FOR RENAME
 38923                                  
 38924                                  ; The following parse control block can be used for any command which
 38925                                  ; needs only two required file specifications as operands. Returns
 38926                                  ; pointers to the unverified string in PARSE1_OUTPUT.
 38927                                  ; Currently used for the RENAME internal command.
 38928                                  
 38929                                  PARSE_RENAME:
 38930 00008570 [7385]                  	dw	RENAME_PARMS		;AN000;
 38931 00008572 00                      	db	0			;AN000;  no extra delimiter
 38932                                  RENAME_PARMS:
 38933 00008573 0202                    	db	2,2			;AN000;  2 positional parms
 38934 00008575 [4884]                  	dw	FILE_REQUIRED		;AN000;
 38935 00008577 [4884]                  	dw	FILE_REQUIRED		;AN000;
 38936 00008579 00                      	db	0			;AN000;  no switches
 38937 0000857A 00                      	db	0			;AN000;  no keywords
 38938                                  
 38939                                  ; PARSE BLOCK FOR CTTY
 38940                                  
 38941                                  ; The following parse control block can be used for any command which
 38942                                  ; needs one required device name as an operand. Returns a pointer to
 38943                                  ; unverified string in PARSE1_OUTPUT. Currently used for the CTTY
 38944                                  ; internal command.
 38945                                  
 38946                                  PARSE_CTTY:
 38947 0000857B [7E85]                  	dw	CTTY_PARMS		;AN000;
 38948 0000857D 00                      	db	0			;AN000;  no extra delimiter
 38949                                  CTTY_PARMS:
 38950 0000857E 0101                    	db	1,1			;AN000;  1 positional parm
 38951 00008580 [8485]                  	dw	CTTY_CONTROL1		;AN000;
 38952 00008582 00                      	db	0			;AN000;  no switches
 38953 00008583 00                      	db	0			;AN000;  no keywords
 38954                                  CTTY_CONTROL1:
 38955 00008584 0020                    	dw	2000h			;AN000;  string value - required
 38956 00008586 1100                    	dw	11h			;AN000;  capitalize - file table
 38957                                  					;AN000;  remove colon at end
 38958 00008588 [5395]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38959 0000858A [4584]                  	dw	NO_VALUES		;AN000;
 38960 0000858C 00                      	db	0			;AN000;  no keywords
 38961                                  
 38962                                  ; PARSE BLOCK FOR VER
 38963                                  
 38964                                  ; The following parse control block can be used for any command which
 38965                                  ; needs an optional switch "/debug". Currently used for the VER command.
 38966                                  
 38967                                  PARSE_VER:
 38968 0000858D [9085]                  	dw	VER_PARMS
 38969 0000858F 00                      	db	0			; no extra delimiters
 38970                                  VER_PARMS:
 38971 00008590 0000                    	db	0,0			; no positional parameters
 38972                                  ; 20/07/2024 - Retro DOS v4.1 (&v4.0) COMMAND.COM
 38973                                  %if 0	; PCDOS 7.1 (& MSDOS 5.0-6.22) COMMAND.COM 
 38974                                  	db	1			; one switch
 38975                                  	dw	SLASH_R
 38976                                  %else
 38977                                  	; 20/07/2024 - Retro DOS v4-v5 COMMAND.COM
 38978 00008592 02                      	db	2			; two switches
 38979 00008593 [9885]                  	dw	SLASH_R
 38980 00008595 [A485]                  	dw	SLASH_T ; Retro DOS v4-v5 COMMAND.COM switch
 38981                                  %endif
 38982 00008597 00                      	db	0			; no keywords
 38983                                  SLASH_R:
 38984 00008598 0000                    	dw	0			; no values
 38985 0000859A 0200                    	dw	2			; capitalize by filename table
 38986 0000859C [5395]                  	dw	PARSE1_OUTPUT		; result buffer
 38987 0000859E [4584]                  	dw	NO_VALUES		; no values
 38988 000085A0 01                      	db	1			; one synonym
 38989                                  SLASH_R_SYN:
 38990 000085A1 2F5200                  	db	"/R",0
 38991                                  
 38992                                  ; 20/07/2024 - Retro DOS v4.1 (&v4.0) COMMAND.COM
 38993                                  %if 1
 38994                                  SLASH_T:
 38995 000085A4 0000                    	dw	0			; no values
 38996 000085A6 0200                    	dw	2			; capitalize by filename table
 38997 000085A8 [5395]                  	dw	PARSE1_OUTPUT		; result buffer
 38998 000085AA [4584]                  	dw	NO_VALUES		; no values
 38999 000085AC 01                      	db	1			; one synonym
 39000                                  SLASH_T_SYN:
 39001 000085AD 2F5400                  	db	"/T",0
 39002                                  %endif
 39003                                  
 39004                                  ; M003 ; Start of changes for LoadHigh support
 39005                                  
 39006                                  ;Parse Control Block for LOADHIGH command
 39007                                  
 39008                                  Parse_LoadHi:
 39009 000085B0 [B385]                  	dw	LoadHi_Parms		;extended parm table
 39010 000085B2 00                      	db	0			;no extra delimiters
 39011                                  
 39012                                  LoadHi_Parms:
 39013 000085B3 0101                    	db	1,1			;min. 1 parm, max. 1 parm
 39014 000085B5 [4884]                  	dw	FILE_REQUIRED		;control struc for filename
 39015 000085B7 00                      	db	0			;no switches
 39016 000085B8 00                      	db	0			;no keywords
 39017                                  
 39018                                  ; M003 ; End of changes for LoadHigh support
 39019                                  
 39020                                  TempVarName:
 39021 000085B9 54454D503D00            	db	"TEMP=",0
 39022                                  
 39023                                  ; ---------------------------------------------------------------------------
 39024                                  ; 20/07/2024 - Retro DOS v4.1 (& v4.0) COMMAND.COM
 39025                                  %if 1
 39026 000085BF 0D0A                    RD4CMD_VER_MSG:	db 0Dh,0Ah
 39027 000085C1 526574726F20444F53-     		db 'Retro DOS v4 COMMAND.COM'
 39027 000085CA 20763420434F4D4D41-
 39027 000085D3 4E442E434F4D       
 39028 000085D9 0D0A                    		db 0Dh,0Ah 
 39029 000085DB 32303234202D204572-     		db '2024 - Erdogan Tan'
 39029 000085E4 646F67616E2054616E 
 39030 000085ED 0D0A                    		db 0Dh,0Ah
 39031 000085EF 24                      		db '$'
 39032                                  %endif
 39033                                  ; ---------------------------------------------------------------------------
 39034                                  
 39035                                  	; 16/04/2023
 39036                                  TRANDATAEND:		; TRANGROUP:88C2h
 39037                                  
 39038                                  ;============================================================================
 39039                                  ; PSDATA.INC, MSDOS 6.0, 1991
 39040                                  ;============================================================================
 39041                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39042                                  
 39043                                  ; 18/04/2023
 39044                                  TRANSPACESTART:
 39045                                  
 39046                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:88C2h
 39047                                  
 39048                                  ;********************** Local Data *************************************
 39049                                  
 39050                                  $P_ORDINAL:
 39051 000085F0 0000                    	dw	0		;AN000; Operand ordinal save area
 39052                                  $P_RC:
 39053 000085F2 0000                    	dw	0		;AN000; Return code from parser
 39054                                  $P_SI_Save:
 39055 000085F4 0000                    	dw	0		;AN000; Pointer of command buffer
 39056                                  $P_DX:
 39057 000085F6 0000                    	dw	0		;AN000; Return result buffer address
 39058                                  $P_Terminator:
 39059 000085F8 00                      	db	0		;AN000; Terminator code (ASCII)
 39060                                  $P_DBCSEV_OFF:
 39061 000085F9 0000                    	dw	0		;AN000; Offset of DBCS EV
 39062                                  $P_DBCSEV_SEG:
 39063 000085FB 0000                    	dw	0		;AN000; Segment of DBCS EV
 39064                                  $P_Flags:			;AN000; Parser internal flags
 39065                                  $P_Flags1:
 39066 000085FD 00                      	db	0		;AN038; to reference first byte flags
 39067                                  $P_Flags2:
 39068 000085FE 00                      	db	0		;AN038; to reference second byte flags only
 39069                                  $P_SaveSI_Cmpx:
 39070 000085FF 0000                    	dw	0		;AN000; save si for later use by complex
 39071                                  $P_KEYorSW_Ptr:
 39072 00008601 0000                    	dw	0		;AN000; points next to "=" or ":" code
 39073                                  $P_Save_EOB:
 39074 00008603 0000                    	dw	0		;AN000; save pointer to EOB
 39075                                  $P_Found_SYNONYM:
 39076 00008605 0000                    	dw	0		;AN000; es:@ points to found synonym
 39077                                  $P_STRING_BUF:
 39078 00008607 00<rep 80h>             	times  128 db 0		;AN000; Pick a operand from command line
 39079                                  $P_ORIG_ORD:
 39080 00008687 0000                    	dw	0		;AN039; ORIGINAL ORDINAL FROM CX
 39081                                  $P_ORIG_STACK:
 39082 00008689 0000                    	dw	0		;AN039; ORIGINAL VALUE OF STACK FROM SP
 39083                                  $P_ORIG_SI:
 39084 0000868B 0000                    	dw	0		;AN039; ORIGINAL START PARSE POINTER FROM SI
 39085                                  $P_Got_Time:
 39086 0000868D 00                      	db	0		;AN023; if 1, use Time delimiters
 39087                                  $P_Country_Info:
 39088 0000868E FFFF                    	dw	-1 ; 0FFFFh
 39089 00008690 00<rep 20h>             	times	32 db 0	
 39090                                  $P_1st_Val:
 39091 000086B0 0000                    	dw	0		;AN000; used when process date or time
 39092                                  $P_2nd_Val:
 39093 000086B2 0000                    	dw	0		;AN000; used when process date or time
 39094                                  $P_3rd_Val:
 39095 000086B4 0000                    	dw	0		;AN000; used when process date or time
 39096                                  $P_4th_Val:
 39097 000086B6 0000                    	dw	0		;AN000; used when process date or time
 39098                                  $P_Char_CAP_Ptr:
 39099 000086B8 FF                      	db	0FFh		;AN000; info id
 39100 000086B9 0000                    	dw	0		;AN000; offset	of char case map table
 39101 000086BB 0000                    	dw	0		;AN000; segment of char case map table
 39102                                  $P_File_CAP_Ptr:
 39103 000086BD FF                      	db	0FFh		;AN000; info id
 39104 000086BE 0000                    	dw	0		;AN000; offset	of file case map table
 39105 000086C0 0000                    	dw	0		;AN000; segment of file case map table
 39106                                  
 39107                                  	; 18/04/2023
 39108                                  ;M029
 39109                                  ;!!!WARNING!!!
 39110                                  ; In routine SYSPARSE (parse.asm), $P_FileSp_Char is reinitialized using 
 39111                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 39112                                  ;changes need to be made in SYSPARSE
 39113                                  
 39114                                  $P_FileSp_Char:
 39115 000086C2 5B5D7C3C3E2B3D3B22      	db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 39116                                  $P_FileSp_Len equ $-$P_FileSp_Char ;AN000;
 39117                                  
 39118                                  ;filespec error flag
 39119                                  $P_err_flag:
 39120 000086CB 00                      	db	0		;AN033; flag set if filespec parsing error
 39121                                  				;AN033;  was detected.
 39122                                  
 39123                                  ;============================================================================
 39124                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 39125                                  ;============================================================================
 39126                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39127                                  
 39128                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:899Eh
 39129                                  
 39130                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 39131                                  ;;
 39132                                  ;; STRUCTURE: $M_RES_ADDRS
 39133                                  ;;
 39134                                  ;; Resident data area definition of variables
 39135                                  ;;
 39136                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 39137                                  
 39138                                  $M_RT:
 39139 000086CC 00<rep 8Dh>             	times $M_RES_ADDRS_SZ db 0   ; times 141 db 0
 39140                                  
 39141                                  ;============================================================================
 39142                                  ; COPYRIGHT.INC, MSDOS 6.0, 1993
 39143                                  ;============================================================================
 39144                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39145                                  
 39146                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8A2Bh
 39147                                  ; ---------------------------------------------------------------------------
 39148                                  ;;M00 - changed to DOS 5.0 copyright - MD 9 Jul 90
 39149                                  ;;M031 - changed copyright to 1991
 39150                                  ;;9/16 - changed version to 6.0 and copyright to 1992
 39151                                  ;;9/21 - Added international translations, language passed through COUNTRY macro
 39152                                  ;;B49,50 - changed version to 6 and copyright to 1993
 39153                                  ; ---------------------------------------------------------------------------
 39154                                  
 39155                                  ;;ifdef USA
 39156                                  ;MsDosVer6_CCopy:
 39157                                  ;	db	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
 39158                                  ;	db	"Licensed Material - Property of Microsoft "
 39159                                  ;	db	"All rights reserved "
 39160                                  ;endif
 39161                                  
 39162                                  ; 15/04/2023
 39163                                  MsDosVer5_CCopy:
 39164 00008759 4D5320444F53205665-     	db	"MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp "
 39164 00008762 7273696F6E20352E30-
 39164 0000876B 3020284329436F7079-
 39164 00008774 726967687420313938-
 39164 0000877D 312D31393931204D69-
 39164 00008786 63726F736F66742043-
 39164 0000878F 6F727020           
 39165 00008793 4C6963656E73656420-     	db	"Licensed Material - Property of Microsoft "
 39165 0000879C 4D6174657269616C20-
 39165 000087A5 2D2050726F70657274-
 39165 000087AE 79206F66204D696372-
 39165 000087B7 6F736F667420       
 39166 000087BD 416C6C207269676874-     	db	"All rights reserved "
 39166 000087C6 732072657365727665-
 39166 000087CF 6420               
 39167                                  ; ---------------------------------------------------------------------------
 39168                                  ; 15/04/2023
 39169                                  	; 16/04/2023 - 21/04/2023
 39170                                  	;db 	0
 39171                                  	;db	0Dh,0Ah
 39172                                  	;db	'Retro DOS v4.0 (& v4.1) COMMAND.COM '
 39173                                  	;db	0
 39174                                  	;db	'by Erdogan Tan - 05/05/2023'
 39175                                  	;db	0
 39176                                  
 39177                                  ;============================================================================
 39178                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 39179                                  ;============================================================================
 39180                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39181                                  
 39182                                  PRINTF_HANDLE:
 39183 000087D1 0000                    	dw	0		;AC000;
 39184                                  
 39185                                  ; 15/047/2023
 39186                                  %if 0
 39187                                  
 39188                                  ;============================================================================
 39189                                  ; TSPC.ASM, MSDOS 6.0, 1991
 39190                                  ;============================================================================
 39191                                  ; 29/09/2018 - Retro DOS v3.0
 39192                                  
 39193                                  ;TITLE	COMMAND Transient Uninitialized DATA
 39194                                  
 39195                                  ;The TRANSPACE segment contains variable data that is considered
 39196                                  ;volatile between command cycles, and therefore is not included in the
 39197                                  ;transient checksum area. Contents of these variables MUST be
 39198                                  ;initialized before use, and must not be relied upon from command
 39199                                  ;cycle to command cycle.
 39200                                  ;
 39201                                  ;No constant data values should be stored here.
 39202                                  
 39203                                  ; ---------------------------------------------------------------------------
 39204                                  ; START OF UNITIALIZED DATA
 39205                                  ; ---------------------------------------------------------------------------
 39206                                  
 39207                                  ;	times 12 db 0
 39208                                  
 39209                                  align 16
 39210                                  
 39211                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3F50h
 39212                                  
 39213                                  PRINTF_LEFT:	db 0
 39214                                  PRINTF_LONG:	db 0
 39215                                  PRINTF_HEX:	db 0
 39216                                  TABLE_INDEX:	db 0
 39217                                  PRINTF_WIDTH:	dw 0
 39218                                  PRINTF_BASE:	dw 0
 39219                                  PAD_CHAR:	db 0
 39220                                  PRINTF_HANDLE:	dw 0
 39221                                  PRINTF_BUF: times 100 db 0
 39222                                  PRINTF_BUF_END: ; 30/09/2018
 39223                                  
 39224                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3FBFh
 39225                                  
 39226                                  SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 39227                                  TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 39228                                  UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 39229                                  COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 39230                                  USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 39231                                  EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 39232                                  RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 39233                                  
 39234                                  ; Variables passed up from resident	; in the Resident portion: (initial values)	
 39235                                  HEADCALL:	dw 0			; TRANVARS  (dw THEADFIX)
 39236                                  RESSEG:		dw 0			; MYSEG     (dw 0) 	 	
 39237                                  TPA:		dw 0			; LTPA	    (dw 0)	
 39238                                  SWITCHAR:	db 0			; RSWITCHAR (db '-')
 39239                                  DIRCHAR:	db 0			; RDIRCHAR  (db '/')
 39240                                  EXEC_ADDR:	dd 0			; 	    (dw EXT_EXEC)	 
 39241                                  					; MYSEG1    (dw 0)	
 39242                                  RCH_ADDR:	dd 0			;	    (dw TREMCHECK) 	
 39243                                  					; MYSEG2    (dw 0)	
 39244                                  		dw 0			; RESTEST   (dw 0)	
 39245                                  TRAN_TPA:	dw 0			; RES_TPA   (dw 0)	
 39246                                  
 39247                                  CHKDRV:		db 0
 39248                                  IFNOTFLAG:
 39249                                  FILTYP:
 39250                                  RDEOF:		db 0			; Misc flags
 39251                                  CURDRV:		db 0
 39252                                  PARM1:
 39253                                  Concat:		db 0
 39254                                  PARM2:
 39255                                  ArgC:		db 0
 39256                                  COMSW:		dw 0			; Switches between command and 1st arg
 39257                                  ARG1S:		dw 0			; Switches between 1st and 2nd arg
 39258                                  ARG2S:					; Switches after 2nd arg		
 39259                                  DestSwitch:	dw 0
 39260                                  ARGTS:
 39261                                  AllSwitch:	dw 0			; ALL switches except for COMSW
 39262                                  CFLAG:		db 0
 39263                                  DestClosed:
 39264                                  SPECDRV:	db 0
 39265                                  BYTCNT:		dw 0			; Size of buffer between RES and TRANS
 39266                                  NXTADD:		dw 0
 39267                                  FRSTSRCH:	db 0
 39268                                  ;LeftOnLine:	db 0			; entries left on line u.b. DIR
 39269                                  ;PerLine:	db 0			; entries/line u.b. DIR
 39270                                  LINCNT:		db 0
 39271                                  LINLEN:		db 0
 39272                                  ;LeftOnPage:	dw 0			; lines left on page u.b. DIR
 39273                                  FILECNT:	dw 0			; file count u.b. DIR
 39274                                  ;FileSiz:	dd 0			; file size u.b. DIR
 39275                                  
 39276                                  ;		Note:  keep FileCntTotal through csecUsedTotal together!
 39277                                  ;
 39278                                  ;FileCntTotal:	dd 0			; total file count u.b. DIR
 39279                                  ;FileSizTotal:	dd 0			; total file size u.b. DIR
 39280                                  
 39281                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 42BBh
 39282                                  
 39283                                  CHARBUF:  times	80 db 0			;line byte character buffer for xenix write
 39284                                  DESTFCB2:
 39285                                  IDLEN:		db 0
 39286                                  ID:	  times	8  db 0
 39287                                  COM:	  times	3  db 0 
 39288                                  DEST:	  times 37 db 0
 39289                                  DESTNAME: times 11 db 0
 39290                                  DESTDIR:
 39291                                  DestFcb:  times DIRSTRLEN db 0 ; 67	; Directory for PATH searches
 39292                                  GOTOLEN:	; word
 39293                                  BWDBUF: 	; byte
 39294                                  EXEFCB: 	; word
 39295                                  DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 39296                                  
 39297                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 39298                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 39299                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 39300                                  DIRBUF_FDATE   equ DIRBUF+32  ; word	
 39301                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 39302                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 39303                                  
 39304                                  SDIRBUF:  times 12 db 0	
 39305                                  _BITS:		dw 0
 39306                                  PATHCNT:	dw 0
 39307                                  PATHPOS:	dw 0
 39308                                  PATHSW:		dw 0
 39309                                  ;AttrSpecified:	db 0			; attribute bits u.b. DIR
 39310                                  ;AttrSelect:	db 0			; attribute bits u.b. DIR
 39311                                  LINPERPAG:	db 0
 39312                                  		db 0
 39313                                  COMMA:		db 0			; flag set if +,, occurs
 39314                                  PLUS_COMMA:	db 0			; flag set if +,, occurs
 39315                                  
 39316                                  ;dirflag: 	db 0			;AN015; set when pathcrunch called from DIR
 39317                                  ;parse_last:	dw 0			;AN018; used to hold parsing position
 39318                                  ;system_cpage:	dw 0			;AC001; used for CHCP variable
 39319                                  
 39320                                  ARG_BUF:  times 128 db 0   ; _43E8h	
 39321                                  STRING_PTR_1:	dw 0	   ; _4468h	
 39322                                  FILESIZE_L:	dw 0	   ; _446Ah		
 39323                                  FILESIZE_H:	dw 0	   ; _446Ch	
 39324                                  STRING_PTR_2:	dw 0	   ; _446Eh	
 39325                                  
 39326                                  COPY_NUM:	dw 0
 39327                                  	  times 4 db 0 ; MSDOS 3.3 (unused bytes)
 39328                                  CPYFLAG:	db 0
 39329                                  DIR_NUM:	dw 0
 39330                                  BYTES_FREE:	dw 0
 39331                                  		dw 0
 39332                                  MAJOR_VER_NUM:	dw 0
 39333                                  MINOR_VER_NUM:	dw 0
 39334                                  ONE_CHAR_VAL:	db 0
 39335                                  		;db 0
 39336                                  VOLNAME_ADDR:	dw 0 ; MSDOS 3.3
 39337                                  VOL_DRV:	db 0
 39338                                  VOL_DIR:	dw 0 ; MSDOS 3.3
 39339                                  
 39340                                  ROM_CALL:	db 0			; flag for rom function
 39341                                  ROM_IP:		dw 0
 39342                                  ROM_CS:		dw 0
 39343                                  
 39344                                  DestVars:
 39345                                  DestIsDir:	db 0
 39346                                  DestSiz:	db 0
 39347                                  DestTail:	dw 0
 39348                                  DestInfo:	db 0
 39349                                  DESTBUF:  times	DIRSTRLEN+20 db 0 ; 87
 39350                                  ENDDESTBUF:
 39351                                  
 39352                                  DESTHAND:	dw 0
 39353                                  DESTISDEV:	db 0
 39354                                  FIRSTDEST:	db 0
 39355                                  MELCOPY:	db 0
 39356                                  MELSTART:	dw 0
 39357                                  
 39358                                  SrcVars:
 39359                                  SrcIsDir:	db 0
 39360                                  SrcSiz:		db 0
 39361                                  SrcTail:	dw 0
 39362                                  SrcInfo:	db 0
 39363                                  SrcBuf:   times	DIRSTRLEN+20 db 0 ; 87
 39364                                  
 39365                                  SRCHAND:	dw 0
 39366                                  SRCISDEV:	db 0
 39367                                  
 39368                                  SCANBUF:  times DIRSTRLEN+20 db 0 ; 87
 39369                                  
 39370                                  SRCPT:		dw 0
 39371                                  INEXACT:	db 0
 39372                                  		db 0 ; MSDOS 3.3 
 39373                                  NOWRITE:	db 0
 39374                                  BINARY:		db 0
 39375                                  WRITTEN:	dw 0
 39376                                  TERMREAD:	db 0
 39377                                  ASCII:		db 0
 39378                                  PLUS:		db 0
 39379                                  OBJCNT:		db 0			; Used in copy
 39380                                  CPDATE:		dw 0
 39381                                  CPTIME:		dw 0
 39382                                  
 39383                                  ;OFilePtr_Lo:	dw 0			; original file ptr for COPY when
 39384                                  ;OFilePtr_Hi:	dw 0			; 1st source is also destination
 39385                                  ;OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 39386                                  
 39387                                  BATHAND:	dw 0			; Batch handle
 39388                                  STARTEL:	dw 0
 39389                                  ELCNT:		db 0
 39390                                  ELPOS:		db 0
 39391                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 39392                                  MSDOS 5.0
 39393                                  SKPDEL:
 39394                                  SOURCE:   times	11 db 0
 39395                                  
 39396                                  ext_entered:	db 0			;AN005;
 39397                                  
 39398                                  ;display_ioctl	db 0			;AN000; info level
 39399                                  ;		db 0			;AN000; reserved
 39400                                  ;		dw crt_ioctl_ln		;AN000; length of data
 39401                                  ;		dw 0			;AN000; control flags
 39402                                  ;display_mode:	db 0			;AN000; display mode, colors
 39403                                  ;		db 0			;AN000; reserved
 39404                                  ;		dw 0			;AN023; colors
 39405                                  ;		dw 0			;AN000; display width (PELS)
 39406                                  ;		dw 0			;AN000; display length (PELS)
 39407                                  ;display_width:	dw 0			;AN000; display width
 39408                                  ;linperpag:	dw linesperpage		;AN000; display length (default to linesperpage)
 39409                                  ;
 39410                                  ;vol_ioctl_buf:				;AN000; buffer for ioctl volume label/serial call
 39411                                  ;		dw 0			;AN000; info level
 39412                                  ;vol_serial:	dd 0			;AN000; volume serial number
 39413                                  ;vol_label: times 11 db 20h ; " "	;AN000; volume label - init to blanks
 39414                                  ;	    times 8  db 20h ; " "       ;AN000; file system type
 39415                                  
 39416                                  EXPAND_STAR:	db 0
 39417                                  
 39418                                  ;msg_flag:	db 0			;AN022; flag set if non-utility message issued
 39419                                  ;msg_numb:	dw 0			;AN022; set with extended error message issued
 39420                                  ;append_exec:	db 0			;AN041; set if internal append executed
 39421                                  ;print_err_flag: dw 0			;AN000; flag set if error during sysdispmsg
 39422                                  ;subst_buffer: times parm_block_size*2 db 0 ;AN061;
 39423                                  
 39424                                  COMSPEC_FLAG:	db 0 ; MSDOS 3.3
 39425                                  
 39426                                  ; Data declarations taken out of parse.asm
 39427                                  
 39428                                  ; MSDOS 6.0
 39429                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 39430                                  ;argbufptr	dw	?		; index for argv[].argpointer
 39431                                  ;tpbuf		db	128   DUP (?)	; temporary buffer
 39432                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 39433                                  ;comptr		dw	?		; ptr into combuf
 39434                                  
 39435                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 45C9h
 39436                                  ARG:
 39437                                  ARG_ARGV:
 39438                                  ARGV0_ARGPOINTER: dw 0	; ARGV[0]
 39439                                  ARGV0_ARG_FLAGS:  db 0
 39440                                  ARGV0_ARGSTARTEL: dw 0
 39441                                  ARGV0_ARGLEN:	  dw 0
 39442                                  ARGV0_ARGSW_WORD: dw 0
 39443                                  ARGV0_OCOMPTR:	  dw 0
 39444                                  
 39445                                  ARGV1_ARGPOINTER: dw 0	; ARGV[1]	
 39446                                  	  times 5 db 0
 39447                                  ARGV1_ARGSW_WORD: dw 0
 39448                                  		  dw 0
 39449                                  
 39450                                  ARGV2_ARGPOINTER: dw 0	; ARGV[2]
 39451                                  	  times 5 db 0
 39452                                  ARGV2_ARGSW_WORD: dw 0
 39453                                  		  dw 0
 39454                                  
 39455                                  	times 671 db 0  ; ARGV[3] to ARGV[63]
 39456                                  	
 39457                                  ARG_ARGVCNT:	dw 0
 39458                                  ARG_ARGSWINFO:	dw 0
 39459                                  
 39460                                  ARG_ARGBUF:    	times 256 dw 0	; times ARGBLEN dw 0 
 39461                                  ARG_ARGFORCOMBUF: times 128 db 0  ; times COMBUFLEN db 0 
 39462                                  
 39463                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4B0Dh
 39464                                  
 39465                                  ARGBUFPTR:	dw 0			; index for argv[].argpointer
 39466                                  TPBUF:	times 128 db 0			; temporary buffer
 39467                                  LASTARG:	dw 0			; point at which to accumulate switch info
 39468                                  COMPTR:		dw 0			; ptr into combuf
 39469                                  
 39470                                  ; Data declarations taken out of path.asm
 39471                                  ;fbuf	find_buf	<>			; dma buffer for findfirst/findnext
 39472                                  ;pathinfo	DW	3 DUP (?)		; ES, SI(old), and SI(new) of user path
 39473                                  ;psep_char	DB	?			; '/' or '\'
 39474                                  ;search_best	DB	(?)			; best code, best filename so far
 39475                                  ;fname_max_len	equ	13
 39476                                  ;search_best_buf DB	fname_max_len DUP (?)
 39477                                  ;search_curdir_buf DB	64 DUP (?)		; a place for CurDir info, if successful
 39478                                  ;search_error	DW	(?)			; address of error message to be printed
 39479                                  
 39480                                  FINDBUFLEN equ FIND_BUF.size ; 43
 39481                                  
 39482                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4B93h
 39483                                  
 39484                                  FBUF:	  times	FINDBUFLEN db 0 ; times 43 db 0
 39485                                  FBUF_PNAME equ FBUF+30			; packed name, 13 bytes
 39486                                  PATHINFO:
 39487                                  PATHINFO_0:	dw 0
 39488                                  PATHINFO_2:	dw 0
 39489                                  PATHINFO_4:	dw 0
 39490                                  PSEP_CHAR:	db 0
 39491                                  SEARCH_BEST:	db 0
 39492                                  ;FNAME_MAX_LEN equ 13
 39493                                  SEARCH_BEST_BUF: times FNAME_MAX_LEN db 0 ; times 13 db 0
 39494                                  SEARCH_CURDIR_BUF: times 64 db 0
 39495                                  SEARCH_ERROR:	dw 0
 39496                                  
 39497                                  ; Data declarations taken out of tbatch.asm
 39498                                  
 39499                                  ;if_not_count	DW	?
 39500                                  ;
 39501                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 39502                                  ;
 39503                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 39504                                  
 39505                                  ; 31/03/2023
 39506                                  STACK:		;LABEL	WORD
 39507                                  
 39508                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4C15h
 39509                                  
 39510                                  IF_NOT_COUNT:	dw 0
 39511                                  ZFLAG:		db 0
 39512                                  	  times 256 db 0 	
 39513                                  STACK:
 39514                                  
 39515                                  ;INTERNATVARS	internat_block <>
 39516                                  ;		DB	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 39517                                  ;
 39518                                  ;;		Buffer for DOS function 64h (Get extended country information)
 39519                                  ;;		subfunctions 2, 4, 6, or 7:
 39520                                  ;
 39521                                  ;CountryPtrInfo	label	byte
 39522                                  ;CountryPtrId	db	?
 39523                                  ;CountryPtr	dd	?
 39524                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 39525                                  
 39526                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4D18h
 39527                                  
 39528                                  INTERNATVARS:	
 39529                                  DATE_TIME_FORMAT: dw 0			; 0-USA, 1-EUR, 2-JAP
 39530                                  CURRENCY_SYM: 	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 39531                                  THOUS_SEP:	db 0,0			; Thousands separator 2 bytes
 39532                                  DECIMAL_SEP:	db 0,0			; Decimal separator 2 bytes
 39533                                  DATE_SEP:	db 0,0			; Date separator 2 bytes
 39534                                  TIME_SEP:	db 0,0			; Time separator 2 bytes	
 39535                                  BIT_FIELD:	db 0			; Bit values
 39536                                  					;   Bit 0 = 0 if currency symbol first
 39537                                  					;	  = 1 if currency symbol last
 39538                                  					;   Bit 1 = 0 if No space after currency symbol
 39539                                  					;	  = 1 if space after currency symbol
 39540                                  CURRENCY_CENTS:	db 0			; Number of places after currency dec point
 39541                                  TIME_24:	db 0			; 1 if 24 hour time, 0 if 12 hour time
 39542                                  MAP_CALL:	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 39543                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 39544                                  					;  in pieces.
 39545                                  DATA_SEP:	db 0,0			; Data list separator character		
 39546                                  
 39547                                  		times 8 db 0
 39548                                  ;
 39549                                  ; Max size of the block returned by the INTERNATIONAL call
 39550                                  ;
 39551                                  INTERNAT_BLOCK_SIZE EQU	32
 39552                                  
 39553                                  BATLEN equ 32
 39554                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4D38h		
 39555                                  
 39556                                  BATBUFPOS:	dw 0			; integer position in buffer of next byte
 39557                                  
 39558                                  BATBUF:	  times	BATLEN db 0 ; times 32 db 0
 39559                                  
 39560                                  BATBUFEND:	dw 0
 39561                                  
 39562                                  ;TypeFilSiz:	dd 0			; stores size of file to be typed
 39563                                  
 39564                                  TRANSPACEEND:	; 4D4Ch ; End of MSDOS 3.3 COMMAND.COM (1987) Transient portion
 39565                                  
 39566                                  ; 18/04/2023
 39567                                  ; ----------------------------------------------------------------------------
 39568                                  ; 09/01/2023
 39569                                  ;TRANSPACEEND	equ $ - TRANSIENTSTART ; 18/04/2023
 39570                                  
 39571                                  %endif
 39572                                  
 39573                                  ;============================================================================
 39574                                  ; TSPC.ASM, MSDOS 6.0, 1991
 39575                                  ;============================================================================
 39576                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39577                                  
 39578                                  ;TITLE	COMMAND Transient Uninitialized DATA
 39579                                  
 39580                                  ;The TRANSPACE segment contains variable data that is considered
 39581                                  ;volatile between command cycles, and therefore is not included in the
 39582                                  ;transient checksum area. Contents of these variables MUST be
 39583                                  ;initialized before use, and must not be relied upon from command
 39584                                  ;cycle to command cycle.
 39585                                  ;
 39586                                  ;No constant data values should be stored here.
 39587                                  
 39588                                  ; ---------------------------------------------------------------------------
 39589                                  ; START OF UNITIALIZED DATA
 39590                                  ; ---------------------------------------------------------------------------
 39591                                  
 39592                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8AA5h
 39593                                  
 39594 000087D3 00<rep 57h>             SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 39595 0000882A 00<rep 57h>             TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 39596 00008881 00<rep 83h>             UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 39597 00008904 00<rep 83h>             COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 39598 00008987 00<rep 46h>             USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 39599 000089CD 00<rep 83h>             EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 39600 00008A50 00<rep 53h>             RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 39601                                  
 39602                                  ; Variables passed up from resident	; in the Resident portion: (initial values)	
 39603                                  HEADCALL:
 39604 00008AA3 0000                    	dw 0			; TRANVARS  (dw THEADFIX)
 39605 00008AA5 0000                    RESSEG:	dw 0			; MYSEG     (dw 0) 	 	
 39606 00008AA7 0000                    TPA:	dw 0			; LTPA	    (dw 0)	
 39607                                  SWITCHAR:
 39608 00008AA9 00                      	db 0			; RSWITCHAR (db '-')
 39609                                  DIRCHAR:
 39610 00008AAA 00                      	db 0			; RDIRCHAR  (db '/')
 39611                                  EXEC_ADDR:
 39612 00008AAB 00000000                	dd 0			; 	    (dw EXT_EXEC)	 
 39613                                  				; MYSEG1    (dw 0)	
 39614                                  RCH_ADDR:
 39615 00008AAF 00000000                	dd 0			;	    (dw TREMCHECK) 	
 39616                                  				; MYSEG2    (dw 0)	
 39617 00008AB3 0000                    	dw 0			; RESTEST   (dw 0)	
 39618                                  TRAN_TPA:
 39619 00008AB5 0000                    	dw 0			; RES_TPA   (dw 0)	
 39620                                  
 39621 00008AB7 00                      CHKDRV:	db 0
 39622                                  IFNOTFLAG:
 39623                                  FILTYP:
 39624 00008AB8 00                      RDEOF:	db 0			; Misc flags
 39625 00008AB9 00                      CURDRV:	db 0
 39626                                  PARM1:
 39627 00008ABA 00                      Concat:	db 0
 39628                                  PARM2:
 39629 00008ABB 00                      ArgC:	db 0
 39630 00008ABC 0000                    COMSW:	dw 0			; Switches between command and 1st arg
 39631 00008ABE 0000                    ARG1S:	dw 0			; Switches between 1st and 2nd arg
 39632                                  ARG2S:				; Switches after 2nd arg		
 39633                                  DestSwitch:
 39634 00008AC0 0000                    	dw 0
 39635                                  ARGTS:
 39636                                  AllSwitch:
 39637 00008AC2 0000                    	dw 0			; ALL switches except for COMSW
 39638 00008AC4 00                      CFLAG:	db 0
 39639                                  DestClosed:
 39640                                  SPECDRV:
 39641 00008AC5 00                      	db 0
 39642 00008AC6 0000                    BYTCNT:	dw 0			; Size of buffer between RES and TRANS
 39643 00008AC8 0000                    NXTADD:	dw 0
 39644                                  FRSTSRCH:
 39645 00008ACA 00                      	db 0
 39646                                  ; 15/04/2023
 39647                                  LeftOnLine:
 39648 00008ACB 00                      	db 0			; entries left on line u.b. DIR
 39649                                  PerLine:
 39650 00008ACC 00                      	db 0			; entries/line u.b. DIR
 39651 00008ACD 00                      LINCNT:	db 0
 39652 00008ACE 00                      LINLEN:	db 0
 39653                                  LeftOnPage:
 39654 00008ACF 0000                    	dw 0			; lines left on page u.b. DIR
 39655                                  FileCnt:
 39656 00008AD1 0000                    	dw 0			; file count u.b. DIR
 39657                                  FileSiz:
 39658 00008AD3 00000000                	dd 0			; file size u.b. DIR
 39659                                  
 39660                                  ; Note: keep FileCntTotal through csecUsedTotal together!
 39661                                  
 39662                                  FileCntTotal:
 39663 00008AD7 00000000                	dd 0			; total file count u.b. DIR
 39664                                  FileSizTotal:
 39665 00008ADB 00000000                	dd 0			; total file size u.b. DIR
 39666                                  
 39667                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8DAFh
 39668                                  CHARBUF:
 39669 00008ADF 00<rep 50h>             	times	80 db 0		;line byte character buffer for xenix write
 39670                                  DESTFCB2:
 39671 00008B2F 00                      IDLEN:	db 0
 39672 00008B30 00<rep 8h>              ID:	times	8  db 0
 39673 00008B38 00<rep 3h>              COM:	times	3  db 0 
 39674 00008B3B 00<rep 25h>             DEST:	times	37 db 0
 39675                                  DESTNAME:
 39676 00008B60 00<rep Bh>              	times	11 db 0
 39677                                  DESTDIR:
 39678                                  DestFcb:
 39679 00008B6B 00<rep 43h>             	times DIRSTRLEN db 0 ; 67 ; Directory for PATH searches
 39680                                  GOTOLEN: ; word
 39681                                  BWDBUF:  ; byte
 39682                                  EXEFCB:  ; word
 39683 00008BAE 00<rep 46h>             DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 39684                                  
 39685                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 39686                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 39687                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 39688                                  DIRBUF_FDATE   equ DIRBUF+32  ; word	
 39689                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 39690                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 39691                                  
 39692                                  	; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39693                                  SDIRBUF:
 39694 00008BF4 00<rep Ch>              	times 12 db 0	
 39695                                  _Bits:
 39696 00008C00 0000                    	dw 0
 39697                                  PathCnt:
 39698 00008C02 0000                    	dw 0
 39699                                  PathPos:
 39700 00008C04 0000                    	dw 0
 39701 00008C06 0000                    PathSw:	dw 0
 39702                                  AttrSpecified:
 39703 00008C08 00                      	db 0			; attribute bits u.b. DIR
 39704                                  AttrSelect:
 39705 00008C09 00                      	db 0			; attribute bits u.b. DIR
 39706 00008C0A 00                      comma:	db 0			; flag set if +,, occurs
 39707                                  plus_comma:
 39708 00008C0B 00                      	db 0			; flag set if +,, occurs
 39709                                  DirFlag:
 39710 00008C0C 00                       	db 0			;AN015; set when pathcrunch called from DIR
 39711                                  parse_last:
 39712 00008C0D 0000                    	dw 0			;AN018; used to hold parsing position
 39713                                  system_cpage:
 39714 00008C0F 0000                    	dw 0			;AC001; used for CHCP variable
 39715                                  ; 03/08/2024
 39716                                  ;Arg_Buf:
 39717                                  ;	times 128 db 0	
 39718                                  File_Size_Low:
 39719 00008C11 0000                    	dw 0	
 39720                                  File_Size_High:
 39721 00008C13 0000                    	dw 0		
 39722                                  string_ptr_2:
 39723 00008C15 0000                    	dw 0	
 39724                                  Copy_num:
 39725 00008C17 0000                    	dw 0
 39726                                  cpyflag:
 39727 00008C19 00                      	db 0
 39728                                  Dir_Num:
 39729 00008C1A 0000                    	dw 0
 39730                                  Bytes_Free:
 39731 00008C1C 00000000                	dd 0
 39732                                  
 39733                                  Major_Ver_Num:
 39734 00008C20 0000                    	dw 0
 39735                                  Minor_Ver_Num:
 39736 00008C22 0000                    	dw 0
 39737                                  
 39738                                  One_Char_Val:
 39739 00008C24 00                      	db 0
 39740 00008C25 00                      	db 0
 39741                                  vol_drv:
 39742 00008C26 00                      	db 0
 39743                                  ROM_CALL:
 39744 00008C27 00                      	db 0			; flag for rom function
 39745 00008C28 0000                    ROM_IP:	dw 0
 39746 00008C2A 0000                    ROM_CS:	dw 0
 39747                                  
 39748                                  DestVars:
 39749                                  DestIsDir:
 39750 00008C2C 00                      	db 0
 39751                                  DestSiz:
 39752 00008C2D 00                      	db 0
 39753                                  DestTail:
 39754 00008C2E 0000                    	dw 0
 39755                                  DestInfo:
 39756 00008C30 00                      	db 0
 39757                                  DestBuf:
 39758 00008C31 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 39759                                  EndDestBuf:
 39760                                  DESTHAND:
 39761 00008C88 0000                    	dw 0
 39762                                  DESTISDEV:
 39763 00008C8A 00                      	db 0
 39764                                  FIRSTDEST:
 39765 00008C8B 00                      	db 0
 39766                                  MELCOPY:
 39767 00008C8C 00                      	db 0
 39768                                  MELSTART:
 39769 00008C8D 0000                    	dw 0
 39770                                  SrcVars:
 39771                                  SrcIsDir:
 39772 00008C8F 00                      	db 0
 39773 00008C90 00                      SrcSiz:	db 0
 39774                                  SrcTail:
 39775 00008C91 0000                    	dw 0
 39776                                  SrcInfo:
 39777 00008C93 00                      	db 0
 39778                                  SrcBuf:
 39779 00008C94 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 39780                                  SRCHAND:
 39781 00008CEB 0000                    	dw 0
 39782                                  SRCISDEV:
 39783 00008CED 00                      	db 0
 39784                                  ScanBuf:
 39785 00008CEE 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 39786                                  
 39787 00008D45 0000                    SRCPT:	dw 0
 39788                                  INEXACT:
 39789 00008D47 00                      	db 0
 39790                                  NOWRITE:
 39791 00008D48 00                      	db 0
 39792                                  BINARY:
 39793 00008D49 00                      	db 0
 39794                                  WRITTEN:
 39795 00008D4A 0000                    	dw 0
 39796                                  TERMREAD:
 39797 00008D4C 00                      	db 0
 39798 00008D4D 00                      ASCII:	db 0
 39799 00008D4E 00                      PLUS:	db 0
 39800 00008D4F 00                      objcnt:	db 0			; Used in copy
 39801 00008D50 0000                    CPDATE:	dw 0
 39802 00008D52 0000                    CPTIME:	dw 0
 39803                                  
 39804                                  OFilePtr_Lo:
 39805 00008D54 0000                    	dw 0			; original file ptr for COPY when
 39806                                  OFilePtr_Hi:
 39807 00008D56 0000                    	dw 0			; 1st source is also destination
 39808                                  zflag:	; 10/08/2024 - PCDOS 7.1 COMMAND.COM
 39809 00008D58 00                      OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 39810                                  BATHAND:
 39811 00008D59 0000                    	dw 0			; Batch handle
 39812                                  STARTEL:
 39813 00008D5B 0000                    	dw 0
 39814 00008D5D 00                      ELCNT:	db 0
 39815 00008D5E 00                      ELPOS:	db 0
 39816                                  
 39817                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 39818                                  ; MSDOS 5.0
 39819                                  SKPDEL:
 39820 00008D5F 00<rep Bh>              SOURCE:	times 11 db 0
 39821                                  
 39822                                  ext_entered:
 39823 00008D6A 00                      	db 0			;AN005;
 39824                                  
 39825                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:90BCh
 39826                                  
 39827                                  Display_Ioctl:
 39828 00008D6B 00                      	db 0			;AN000; info level
 39829 00008D6C 00                      	db 0			;AN000; reserved
 39830 00008D6D 0E00                    	dw crt_ioctl_ln		;AN000; length of data
 39831 00008D6F 0000                    	dw 0			;AN000; control flags
 39832                                  display_mode:
 39833 00008D71 00                      	db 0			;AN000; display mode, colors
 39834 00008D72 00                      	db 0			;AN000; reserved
 39835 00008D73 0000                    	dw 0			;AN023; colors
 39836 00008D75 0000                    	dw 0			;AN000; display width (PELS)
 39837 00008D77 0000                    	dw 0			;AN000; display length (PELS)
 39838                                  display_width:
 39839 00008D79 0000                    	dw 0			;AN000; display width
 39840                                  LinPerPag:
 39841 00008D7B 1900                    	dw LINESPERPAGE	; 25	;AN000; display length (default to linesperpage)
 39842                                  
 39843                                  vol_ioctl_buf:			;AN000; buffer for ioctl volume label/serial call
 39844 00008D7D 0000                    	dw 0			;AN000; info level
 39845                                  vol_serial:
 39846 00008D7F 00000000                	dd 0			;AN000; volume serial number
 39847                                  vol_label:
 39848 00008D83 20<rep Bh>              	times 11 db 20h ; " "	;AN000; volume label - init to blanks
 39849 00008D8E 20<rep 8h>              	times 8  db 20h ; " "	;AN000; file system type
 39850                                  
 39851                                  expand_star:
 39852 00008D96 00                      	db 0
 39853                                  
 39854                                  msg_flag:
 39855 00008D97 00                      	db 0			;AN022; flag set if non-utility message issued
 39856                                  Msg_Numb:
 39857 00008D98 0000                    	dw 0			;AN022; set with extended error message issued
 39858                                  append_exec:
 39859 00008D9A 00                      	db 0			;AN041; set if internal append executed
 39860                                  print_err_flag:
 39861 00008D9B 0000                    	dw 0			;AN000; flag set if error during sysdispmsg
 39862                                  subst_buffer:
 39863 00008D9D 00<rep 16h>             	times parm_block_size*2 db 0 ; times 22 db 0 
 39864                                  				;AN061;
 39865                                  ; 15/04/2023
 39866 00008DB3 00                      KPARSE:	db 0	; 3/3/KK	
 39867                                  
 39868                                  ; Data declarations taken out of parse.asm
 39869                                  
 39870                                  ; MSDOS 6.0
 39871                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 39872                                  ;argbufptr	dw	?		; index for argv[].argpointer
 39873                                  ;tpbuf		db	128 DUP (?)	; temporary buffer
 39874                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 39875                                  ;comptr		dw	?		; ptr into combuf
 39876                                  
 39877                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9105h
 39878                                  ARG:
 39879                                  ARG_ARGV:
 39880                                  ARGV0_ARGPOINTER:
 39881 00008DB4 0000                    	dw 0	; ARGV[0]
 39882                                  ARGV0_ARG_FLAGS:
 39883 00008DB6 00                      	db 0
 39884                                  ARGV0_ARGSTARTEL:
 39885 00008DB7 0000                    	dw 0
 39886                                  ARGV0_ARGLEN:
 39887 00008DB9 0000                    	dw 0
 39888                                  ARGV0_ARGSW_WORD:
 39889 00008DBB 0000                    	dw 0
 39890                                  ARGV0_OCOMPTR:
 39891 00008DBD 0000                    	dw 0
 39892                                  ARGV1_ARGPOINTER:
 39893 00008DBF 0000                    	dw 0	; ARGV[1]	
 39894 00008DC1 00<rep 5h>              	times 5 db 0
 39895                                  ARGV1_ARGSW_WORD:
 39896 00008DC6 0000                    	dw 0
 39897 00008DC8 0000                    	dw 0
 39898                                  ARGV2_ARGPOINTER:
 39899 00008DCA 0000                    	dw 0	; ARGV[2]
 39900 00008DCC 00<rep 5h>              	times 5 db 0
 39901                                  ARGV2_ARGSW_WORD:
 39902 00008DD1 0000                    	dw 0
 39903 00008DD3 0000                    	dw 0
 39904 00008DD5 00<rep 29Fh>            	times 671 db 0  ; ARGV[3] to ARGV[63]
 39905                                  ARG_ARGVCNT:
 39906 00009074 0000                    	dw 0
 39907                                  ARG_ARGSWINFO:
 39908 00009076 0000                    	dw 0
 39909                                  ARG_ARGBUF:
 39910 00009078 0000<rep 100h>          	times 256 dw 0	; times ARGBLEN dw 0 
 39911                                  ARG_ARGFORCOMBUF:
 39912 00009278 00<rep 80h>             	times 128 db 0  ; times COMBUFLEN db 0 
 39913                                  
 39914                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9649h
 39915                                  ARGBUF_PTR:
 39916 000092F8 0000                    	dw 0			; index for argv[].argpointer
 39917                                  TPBUF:	;times 128 db 0		; temporary buffer
 39918                                  Arg_Buf:
 39919 000092FA 00<rep 80h>             	times 128 db 0	; 03/08/2024 (PCDOS 7.1 COMMAND.COM)
 39920                                  LASTARG:
 39921 0000937A 0000                    	dw 0			; point at which to accumulate switch info
 39922 0000937C 0000                    COMPTR:	dw 0			; ptr into combuf
 39923                                  
 39924                                  ; Data declarations taken out of path.asm
 39925                                  ;fbuf	find_buf	<>		; dma buffer for findfirst/findnext
 39926                                  ;pathinfo	DW	3 DUP (?)	; ES, SI(old), and SI(new) of user path
 39927                                  ;psep_char	DB	?		; '/' or '\'
 39928                                  ;search_best	DB	(?)		; best code, best filename so far
 39929                                  ;fname_max_len	equ	13
 39930                                  ;search_best_buf DB	fname_max_len DUP (?)
 39931                                  ;search_curdir_buf DB	64 DUP (?)	; a place for CurDir info, if successful
 39932                                  ;search_error	DW	(?)		; address of error message to be printed
 39933                                  
 39934                                  FINDBUFLEN equ FIND_BUF.size ; 43
 39935                                  
 39936                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 96CFh
 39937                                  
 39938 0000937E 00<rep 2Bh>             FBUF:	times FINDBUFLEN db 0	; times 43 db 0
 39939                                  FBUF_PNAME equ FBUF+30		; packed name, 13 bytes
 39940                                  pathinfo:
 39941                                  ;pathinfo_0:
 39942 000093A9 0000                    	dw 0
 39943                                  ;pathinfo_2:
 39944 000093AB 0000                    	dw 0
 39945                                  ;pathinfo_4:
 39946 000093AD 0000                    	dw 0
 39947                                  psep_char:
 39948 000093AF 00                      	db 0
 39949                                  search_best:
 39950 000093B0 00                      	db 0
 39951                                  FNAME_MAX_LEN equ 13
 39952                                  search_best_buf:
 39953 000093B1 00<rep Dh>              	times FNAME_MAX_LEN db 0 ; times 13 db 0
 39954                                  search_curdir_buf:
 39955 000093BE 00<rep 40h>             	times 64 db 0
 39956                                  search_error:
 39957 000093FE 0000                    	dw 0
 39958                                  
 39959                                  ; Data declarations taken out of tbatch.asm
 39960                                  
 39961                                  ;if_not_count	DW	?
 39962                                  ;
 39963                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 39964                                  ;
 39965                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 39966                                  
 39967                                  ; 31/03/2023
 39968                                  ;STACK:	;LABEL	WORD
 39969                                  
 39970                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9751h
 39971                                  
 39972                                  IF_NOT_COUNT:
 39973 00009400 0000                    	dw 0
 39974                                  ; 10/08/2024
 39975                                  ;zflag:	db 0
 39976                                  align 2
 39977 00009402 00<rep 100h>            	times 256 db 0 
 39978                                  	; 16/04/2023
 39979                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:9854h
 39980                                  STACK:
 39981                                  
 39982                                  ;INTERNATVARS	internat_block <>
 39983                                  ;	db	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 39984                                  
 39985                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9854h
 39986                                  INTERNATVARS:
 39987                                  		; (24+8 = 32 bytes)
 39988                                  DATE_TIME_FORMAT:
 39989 00009502 0000                    	dw 0			; 0-USA, 1-EUR, 2-JAP
 39990                                  CURRENCY_SYM:
 39991 00009504 0000000000              	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 39992                                  THOUS_SEP:
 39993 00009509 0000                    	db 0,0			; Thousands separator 2 bytes
 39994                                  DECIMAL_SEP:
 39995 0000950B 0000                    	db 0,0			; Decimal separator 2 bytes
 39996                                  DATE_SEP:
 39997 0000950D 0000                    	db 0,0			; Date separator 2 bytes
 39998                                  TIME_SEP:
 39999 0000950F 0000                    	db 0,0			; Time separator 2 bytes	
 40000                                  BIT_FIELD:
 40001 00009511 00                      	db 0			; Bit values
 40002                                  				;   Bit 0 = 0 if currency symbol first
 40003                                  				;	  = 1 if currency symbol last
 40004                                  				;   Bit 1 = 0 if No space after currency symbol
 40005                                  				;	  = 1 if space after currency symbol
 40006                                  CURRENCY_CENTS:
 40007 00009512 00                      	db 0			; Number of places after currency dec point
 40008                                  TIME_24:
 40009 00009513 00                      	db 0			; 1 if 24 hour time, 0 if 12 hour time
 40010                                  MAP_CALL:
 40011 00009514 00000000                	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 40012                                  				; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 40013                                  				;  in pieces.
 40014                                  DATA_SEP:
 40015 00009518 0000                    	db 0,0			; Data list separator character		
 40016                                  
 40017 0000951A 00<rep 8h>              	times 8 db 0
 40018                                  
 40019                                  ; Max size of the block returned by the INTERNATIONAL call
 40020                                  
 40021                                  INTERNAT_BLOCK_SIZE EQU	32
 40022                                  
 40023                                  ;;	Buffer for DOS function 64h (Get extended country information)
 40024                                  ;;	subfunctions 2, 4, 6, or 7:
 40025                                  ;
 40026                                  ;CountryPtrInfo	label	byte
 40027                                  ;CountryPtrId	db	?
 40028                                  ;CountryPtr	dd	?
 40029                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 40030                                  	
 40031                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9874h
 40032                                  CountryPtrInfo:
 40033                                  CountryPtrId:	
 40034 00009522 00                      	db 0
 40035                                  CountryPtr:
 40036 00009523 00000000                	dd 0
 40037                                  
 40038                                  OldCtrlCHandler:
 40039 00009527 00000000                	dd 0			; previous int 23 vector		
 40040                                  
 40041                                  BATLEN equ 32
 40042                                  
 40043                                  BATBUFPOS:
 40044 0000952B 0000                    	dw 0			; integer position in buffer of next byte
 40045                                  
 40046 0000952D 00<rep 20h>             BATBUF:	times BATLEN db 0 ; times 32 db 0
 40047                                  BATBUFEND:
 40048 0000954D 0000                    	dw 0
 40049                                  TypeFilSiz:
 40050 0000954F 00000000                	dd 0			; stores size of file to be typed
 40051                                  
 40052                                  ; *****************************************************
 40053                                  ; EMG 4.00
 40054                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 40055                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 40056                                  ; *****************************************************
 40057                                  ;
 40058                                  ; COMMON PARSE OUTPUT BLOCKS
 40059                                  
 40060                                  ; Common output blocks for PARSE number, complex, or string values.
 40061                                  
 40062                                  PARSE1_OUTPUT:
 40063                                  PARSE1_TYPE:
 40064 00009553 00                      	db 0			;AN000;  type
 40065                                  PARSE1_CODE:
 40066 00009554 00                      	db 0			;AN000;  return value
 40067                                  PARSE1_SYN:
 40068 00009555 0000                    	dw 0			;AN000;  es offset of synonym
 40069                                  PARSE1_ADDR:
 40070 00009557 00000000                	dd 0			;AN000;  numeric value / address
 40071                                  				;	 of string value
 40072                                  
 40073                                  ;  Common output block for PARSE date strings.
 40074                                  
 40075                                  DATE_OUTPUT:
 40076                                  DATE_TYPE:
 40077 0000955B 00                      	db 0			;AN000;  type
 40078 0000955C 00                      	db 0			;AN000;  return value
 40079 0000955D 0000                    	dw 0			;AN000;  es offset of synonym
 40080                                  DATE_YEAR:
 40081 0000955F 0000                    	dw 0			;AN000;  year
 40082                                  DATE_MONTH:
 40083 00009561 00                      	db 0			;AN000;  month
 40084                                  DATE_DAY:
 40085 00009562 00                      	db 0			;AN000;  day
 40086                                  
 40087                                  ;  Common output block for PARSE time strings.
 40088                                  
 40089                                  TIME_OUTPUT:
 40090                                  TIME_TYPE:
 40091 00009563 00                      	db 0			;AN000;  type
 40092 00009564 00                      	db 0			;AN000;  return value
 40093 00009565 0000                    	dw 0			;AN000;  es offset of synonym
 40094                                  TIME_HOUR:
 40095 00009567 00                      	db 0			;AN000;  hour
 40096                                  TIME_MINUTES:
 40097 00009568 00                      	db 0			;AN000;  minutes
 40098                                  TIME_SECONDS:
 40099 00009569 00                      	db 0			;AN000;  seconds
 40100                                  TIME_FRACTION:
 40101 0000956A 00                      	db 0			;AN000;  hundredths
 40102                                  
 40103                                  ;  Common output block for PARSE drive specifier (one based drive number).
 40104                                  
 40105                                  DRIVE_OUTPUT:
 40106                                  DRIVE_TYPE:
 40107 0000956B 00                      	db 0			;AN000;  type
 40108                                  DRIVE_VALUE:
 40109 0000956C 00                      	db 0			;AN000;  return value
 40110 0000956D 0000                    	dw 0			;AN000;  es offset of synonym
 40111                                  DRIVE_NUMBER:
 40112 0000956F 00                      	db 0			;AN000;  drive number
 40113 00009570 000000                  	db 0,0,0		;AN000;  reserved
 40114                                  
 40115                                  	; 18/04/2023
 40116                                  	; 16/04/2023
 40117                                  ;TRANSPACEEND: ; 98C5h ; End of MSDOS 5.0 COMMAND.COM (1991) Transient portion
 40118                                  
 40119                                  ; ----------------------------------------------------------------------------
 40120                                  ; 20/04/2023
 40121                                  TRANSPACEEND equ ($-TRANSIENTSTART)	; Transient portion size
