     1                                  ; ****************************************************************************
     2                                  ; COMMAND.COM (MSDOS 5.0 Command Interpreter) - RETRO DOS v4.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update:  31/07/2024 (v5.0 - 2024 optimization)
     5                                  ;		15/06/2023 (v5.0) ((Previous: 20/10/2018 COMMAND.COM v3.3))
     6                                  ; ----------------------------------------------------------------------------
     7                                  ; Beginning: 21/04/2018 (COMMAND.COM v2.11) - 11/09/2018 (COMMAND.COM v3.30)
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15 (2.11)
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	    ((nasm command5.s -l command5.lst -o COMMAND.COM)) 	
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Derived from 'COMMAND.ASM' file of MSDOS 2.11 (IBM PCDOS v2.11) source code
    14                                  ; by Microsoft, 18/08/1983
    15                                  ; ****************************************************************************
    16                                  ; Modified from 'COMMAND3.S' (MSDOS 3.3 COMMAND.COM) source code
    17                                  ; in NASM syntax (by Erdogan Tan), 20/10/2018
    18                                  ; ----------------------------------------------------------------------------
    19                                  ;; 11/09/2018 - Erdogan Tan
    20                                  ; (Note: I haven't got MSDOS 3.3 COMMAND.COM src files; so, I need to continue
    21                                  ; by using disassembled COMMAND.COM -v3.30- and MSDOS 6.0 OS source files.)
    22                                  ; ----------------------------------------------------------------------------
    23                                  ; MSDOS 6.0 source files:
    24                                  ;;============================================================================
    25                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    26                                  ; (MSDOS 3.30 COMMAND.COM) output in TASM syntax (11/09/2018..29/09/2018)
    27                                  ;;============================================================================
    28                                  ;
    29                                  ; COMMAND.COM v6.0 source files:
    30                                  ;      command1.asm, command2.asm, rucode.asm, stub.asm, rdata.asm, init.asm,
    31                                  ;      iparse.asm, uinit.asm, tcode.asm, tbatch.asm, tbatch2.asm, tfor.asm,
    32                                  ;      dir.asm, cratio.asm, tcmd1b.asm, tcmd2a.asm, tcmd2b.asm, tenv.asm,
    33                                  ;      tenv2.asm, tmisc1.asm, tmisc2.asm, tpipe.asm, parse2.asm, path1.asm,
    34                                  ;      path2.asm, tucode.asm, copy.asm, copypr1.asm, copypr2.asm, cparse.asm,
    35                                  ;      tparse.asm, tprintf.asm, loadhi.asm, tdata.asm, tspc.asm
    36                                  ;
    37                                  ; COMMAND.COM v2.11 source files:
    38                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    39                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    40                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    41                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    42                                  ;
    43                                  ; ----------------------------------------------------------------------------
    44                                  ; 09/01/2023 - COMMAND.COM v5.0 (Multi Section Binary File Format)
    45                                  
    46                                  ;============================================================================
    47                                  ; SYSCALL.INC, MSDOS 6.0, 1991
    48                                  ;============================================================================
    49                                  ; 21/09/2018 - Retro DOS v3.0
    50                                  
    51                                  ;	SCCSID = @(#)syscall.asm	1.1 85/04/10
    52                                  ;BREAK <system call definitions>
    53                                  
    54                                  ;
    55                                  ;	Microsoft Confidential
    56                                  ;	Copyright (C) Microsoft Corporation 1991
    57                                  ;	All Rights Reserved.
    58                                  ;
    59                                  
    60                                  ;SUBTTL	system call definitions
    61                                  ;PAGE
    62                                  
    63                                  Abort				EQU 0	;  0	  0
    64                                  STD_CON_INPUT			EQU 1	;  1	  1
    65                                  Std_Con_Output			EQU 2	;  2	  2
    66                                  Std_Aux_Input			EQU 3	;  3	  3
    67                                  Std_Aux_Output			EQU 4	;  4	  4
    68                                  Std_Printer_Output		EQU 5	;  5	  5
    69                                  Raw_Con_IO			EQU 6	;  6	  6
    70                                  RAW_CON_INPUT			EQU 7	;  7	  7
    71                                  Std_Con_Input_No_Echo		EQU 8	;  8	  8
    72                                  STD_CON_STRING_OUTPUT		EQU 9	;  9	  9
    73                                  Std_Con_String_Input		EQU 10	; 10	  A
    74                                  Std_Con_Input_Status		EQU 11	; 11	  B
    75                                  STD_CON_INPUT_FLUSH		EQU 12	; 12	  C
    76                                  DISK_RESET			EQU 13	; 13	  D
    77                                  Set_Default_Drive		EQU 14	; 14	  E
    78                                  FCB_Open			EQU 15	; 15	  F
    79                                  FCB_Close			EQU 16	; 16	 10
    80                                  Dir_Search_First		EQU 17	; 17	 11
    81                                  Dir_Search_Next 		EQU 18	; 18	 12
    82                                  FCB_Delete			EQU 19	; 19	 13
    83                                  FCB_Seq_Read			EQU 20	; 20	 14
    84                                  FCB_Seq_Write			EQU 21	; 21	 15
    85                                  FCB_Create			EQU 22	; 22	 16
    86                                  FCB_Rename			EQU 23	; 23	 17
    87                                  GET_DEFAULT_DRIVE		EQU 25	; 25	 19
    88                                  Set_DMA 			EQU 26	; 26	 1A
    89                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
    90                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
    91                                  ;									   ;
    92                                  Get_Default_DPB 		EQU 31	; 31	 1F
    93                                  ;									   ;
    94                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
    95                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
    96                                  FCB_Random_Read 		EQU 33	; 33	 21
    97                                  FCB_Random_Write		EQU 34	; 34	 22
    98                                  Get_FCB_File_Length		EQU 35	; 35	 23
    99                                  Get_FCB_Position		EQU 36	; 36	 24
   100                                  SET_INTERRUPT_VECTOR		EQU 37	; 37	 25
   101                                  Create_Process_Data_Block	EQU 38	; 38	 26
   102                                  FCB_Random_Read_Block		EQU 39	; 39	 27
   103                                  FCB_Random_Write_Block		EQU 40	; 40	 28
   104                                  Parse_File_Descriptor		EQU 41	; 41	 29
   105                                  Get_Date			EQU 42	; 42	 2A
   106                                  Set_Date			EQU 43	; 43	 2B
   107                                  Get_Time			EQU 44	; 44	 2C
   108                                  Set_Time			EQU 45	; 45	 2D
   109                                  SET_VERIFY_ON_WRITE		EQU 46	; 46	 2E
   110                                  ; Extended functionality group
   111                                  Get_DMA 			EQU 47	; 47	 2F
   112                                  GET_VERSION			EQU 48	; 48	 30
   113                                  Keep_Process			EQU 49	; 49	 31
   114                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   115                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   116                                  ;									   ;
   117                                  Get_DPB 			EQU 50	; 50	 32
   118                                  ;									   ;
   119                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   120                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   121                                  Set_CTRL_C_Trapping		EQU 51	; 51	 33
   122                                  Get_InDOS_Flag			EQU 52	; 52	 34
   123                                  Get_Interrupt_Vector		EQU 53	; 53	 35
   124                                  Get_Drive_Freespace		EQU 54	; 54	 36
   125                                  CHAR_OPER			EQU 55	; 55	 37
   126                                  International			EQU 56	; 56	 38
   127                                  ;   Directory Group
   128                                  MKDir				EQU 57	; 57	 39
   129                                  RMDir				EQU 58	; 58	 3A
   130                                  CHDir				EQU 59	; 59	 3B
   131                                  ;   File Group
   132                                  Creat				EQU 60	; 60	 3C
   133                                  OPEN				EQU 61	; 61	 3D
   134                                  CLOSE				EQU 62	; 62	 3E
   135                                  READ				EQU 63	; 63	 3F
   136                                  Write				EQU 64	; 64	 40
   137                                  Unlink				EQU 65	; 65	 41
   138                                  LSEEK				EQU 66	; 66	 42
   139                                  CHMod				EQU 67	; 67	 43
   140                                  IOCTL				EQU 68	; 68	 44
   141                                  XDUP				EQU 69	; 69	 45
   142                                  XDup2				EQU 70	; 70	 46
   143                                  Current_Dir			EQU 71	; 71	 47
   144                                  ;    Memory Group
   145                                  ALLOC				EQU 72	; 72	 48
   146                                  DEALLOC				EQU 73	; 73	 49
   147                                  SETBLOCK			EQU 74	; 74	 4A
   148                                  ;    Process Group
   149                                  Exec				EQU 75	; 75	 4B
   150                                  EXIT				EQU 76	; 76	 4C
   151                                  WAITPROCESS			EQU 77	; 77	 4D
   152                                  Find_First			EQU 78	; 78	 4E
   153                                  ;   Special Group
   154                                  Find_Next			EQU 79	; 79	 4F
   155                                  ; SPECIAL SYSTEM GROUP
   156                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   157                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   158                                  ;									   ;
   159                                  SET_CURRENT_PDB 		EQU 80	; 80	 50
   160                                  GET_CURRENT_PDB 		EQU 81	; 81	 51
   161                                  Get_In_Vars			EQU 82	; 82	 52
   162                                  SetDPB				EQU 83	; 83	 53
   163                                  ;									   ;
   164                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   165                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   166                                  Get_Verify_On_Write		EQU 84	; 84	 54
   167                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   168                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   169                                  ;									   ;
   170                                  Dup_PDB 			EQU 85	; 85	 55
   171                                  ;									   ;
   172                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   173                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   174                                  Rename				EQU 86	; 86	 56
   175                                  File_Times			EQU 87	; 87	 57
   176                                  AllocOper			EQU 88	; 88	 58
   177                                  ; Network extention system calls
   178                                  GetExtendedError		EQU 89	; 89	 59
   179                                  CreateTempFile			EQU 90	; 90	 5A
   180                                  CreateNewFile			EQU 91	; 91	 5B
   181                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
   182                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   183                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   184                                  ;									   ;
   185                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
   186                                  					;	    CloseByName, CloseUser,
   187                                  					;	    CloseUserProcess,
   188                                  					;	    GetOpenFileList
   189                                  ;									   ;
   190                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   191                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   192                                  UserOper			EQU 94	; 94	 5E Get and Set
   193                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
   194                                  xNameTrans			EQU 96	; 96	 60
   195                                  PathParse			EQU 97	; 97	 61
   196                                  GetCurrentPSP			EQU 98	; 98	 62
   197                                  Hongeul 			EQU 99	; 99	 63
   198                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
   199                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   200                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   201                                  ;									   ;
   202                                  Set_Printer_Flag		EQU 100 ; 100	 64
   203                                  ;									   ;
   204                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   205                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   206                                  GetExtCntry			EQU 101 ; 101	 65
   207                                  GetSetCdPg			EQU 102 ; 102	 66
   208                                  ExtHandle			EQU 103 ; 103	 67
   209                                  Commit				EQU 104 ; 104	 68
   210                                  GetSetMediaID			EQU 105 ; 105	 69
   211                                  IFS_IOCTL			EQU 107 ; 107	 6B
   212                                  ExtOpen 			EQU 108 ; 108	 6C
   213                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   214                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   215                                  ;                                                                          ;
   216                                  ;ifdef ROMEXEC
   217                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
   218                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
   219                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
   220                                  ;endif
   221                                  ;                                                                          ;
   222                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   223                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   224                                  ;
   225                                  ;
   226                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
   227                                  OEM_C1				EQU 249 ; 249	 F9
   228                                  OEM_C2				EQU 250 ; 250	 FA
   229                                  OEM_C3				EQU 251 ; 251	 FB
   230                                  OEM_C4				EQU 252 ; 252	 FC
   231                                  OEM_C5				EQU 253 ; 253	 FD
   232                                  OEM_C6				EQU 254 ; 254	 FE
   233                                  OEM_C7				EQU 255 ; 255	 FF
   234                                  
   235                                  ;============================================================================
   236                                  ; DOSSYM.INC, MSDOS 6.0, 1991
   237                                  ;============================================================================
   238                                  ; 21/09/2018 - Retro DOS v3.0
   239                                  
   240                                  ;BREAK <Control character definitions>
   241                                  
   242                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   243                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   244                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   245                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   246                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   247                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   248                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   249                                  c_HT	    EQU     09h 	; ^I ASCII tab
   250                                  
   251                                  ;============================================================================
   252                                  ; DIRENT.INC, MSDOS 6.0, 1991
   253                                  ;============================================================================
   254                                  ; 21/09/2018 - Retro DOS v3.0
   255                                  
   256                                  ;Break <Directory entry>
   257                                  
   258                                  ;	NOTE:  These offsets are also used in the DTA for
   259                                  ;	extended FCB SearchFirst/Next. DIR_NAME lines up
   260                                  ;	with the FCB filename field, and the rest of the
   261                                  ;	DIR_ENTRY fields follow. -DavidOls
   262                                  
   263                                  ;**	DIRENT.INC - FAT Directory Entry Definition
   264                                  ;
   265                                  ;	+---------------------------+
   266                                  ;	|  (12 BYTE) filename/ext   |	    0	    0
   267                                  ;	+---------------------------+
   268                                  ;	|     (BYTE) attributes     |	    11	    B
   269                                  ;	+---------------------------+
   270                                  ;	|    (10 BYTE) reserved     |	    12	    C
   271                                  ;	+---------------------------+
   272                                  ;	| (WORD) time of last write |	    22	    16
   273                                  ;	+---------------------------+
   274                                  ;	| (WORD) date of last write |	    24	    18
   275                                  ;	+---------------------------+
   276                                  ;	|   (WORD) First cluster    |	    26	    1A
   277                                  ;	+---------------------------+
   278                                  ;	|     (DWORD) file size     |	    28	    1C
   279                                  ;	+---------------------------+
   280                                  ;
   281                                  ;   First byte of filename  = E5 -> free directory entry
   282                                  ;			    = 00 -> end of allocated directory
   283                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   284                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   285                                  ;
   286                                  
   287                                  STRUC DIR_ENTRY
   288 00000000 <res Bh>                .DIR_NAME:	RESB  11	; file name
   289 0000000B ??                      .DIR_ATTR:	RESB  1		; attribute bits
   290 0000000C ????                    .DIR_CODEPG:	RESW  1		; code page DOS 4.00
   291 0000000E ????                    .DIR_EXTCLUSTER: RESW 1		; extended attribute starting cluster
   292 00000010 ??                      .DIR_ATTR2:	RESB  1		; reserved
   293 00000011 ??????????              .DIR_PAD:	RESB  5		; reserved for expansion
   294 00000016 ????                    .DIR_TIME:	RESW  1		; time of last write
   295 00000018 ????                    .DIR_DATE:	RESW  1		; date of last write
   296 0000001A ????                    .DIR_FIRST:	RESW  1		; first allocation unit of file
   297 0000001C ????                    .DIR_SIZE_L:	RESW  1		; low 16 bits of file size
   298 0000001E ????                    .DIR_SIZE_H:	RESW  1		; high 16 bits of file size
   299                                  .size:
   300                                  
   301                                  ;	    Caution: An extended FCB SearchFirst/Next on a network
   302                                  ;	    drive under Novell Netware 286 or 386 returns the time/date
   303                                  ;	    in the SIZE fields for subdirectory files. Ordinarily,
   304                                  ;	    this field is zero for subdirectory files.
   305                                  
   306                                  ENDSTRUC
   307                                  
   308                                  ATTR_READ_ONLY	equ	 1h
   309                                  ATTR_HIDDEN	equ	 2h
   310                                  ATTR_SYSTEM	equ	 4h
   311                                  ATTR_VOLUME_ID	equ	 8h
   312                                  ATTR_DIRECTORY	equ	10h
   313                                  ATTR_ARCHIVE	equ	20h
   314                                  ATTR_DEVICE	equ	40h	; This is a VERY special bit.
   315                                  				;   NO directory entry on a disk EVER
   316                                  				;   has this bit set. It is set non-zero
   317                                  				;   when a device is found by GETPATH
   318                                  
   319                                  ATTR_ALL	equ	ATTR_HIDDEN+ATTR_SYSTEM+ATTR_DIRECTORY
   320                                  				; OR of hard attributes for FINDENTRY
   321                                  
   322                                  ATTR_IGNORE	equ	ATTR_READ_ONLY+ATTR_ARCHIVE+ATTR_DEVICE
   323                                  				; ignore this(ese) attribute(s) during
   324                                  				; search first/next
   325                                  
   326                                  ATTR_CHANGEABLE equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_SYSTEM+ATTR_ARCHIVE
   327                                  				; changeable via CHMOD
   328                                  
   329                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   330                                  
   331                                  ;============================================================================
   332                                  ; ERROR.INC, MSDOS 6.0, 1991
   333                                  ;============================================================================
   334                                  ; 21/09/2018 - Retro DOS v3.0
   335                                  
   336                                  ;**	ERROR.INC - DOS Error Codes
   337                                  ;
   338                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
   339                                  ;    return error codes through AX.	If an error occurred then
   340                                  ;    the carry bit will be set and the error code is in AX.	If no error
   341                                  ;    occurred then the carry bit is reset and AX contains returned info.
   342                                  ;
   343                                  ;    Since the set of error codes is being extended as we extend the operating
   344                                  ;    system, we have provided a means for applications to ask the system for a
   345                                  ;    recommended course of action when they receive an error.
   346                                  ;
   347                                  ;    The GetExtendedError system call returns a universal error, an error
   348                                  ;    location and a recommended course of action.	The universal error code is
   349                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
   350                                  ;    is issued.
   351                                  
   352                                  
   353                                  ;	2.0 error codes
   354                                  
   355                                  error_invalid_function		EQU	1
   356                                  ERROR_FILE_NOT_FOUND		EQU	2
   357                                  ERROR_PATH_NOT_FOUND		EQU	3
   358                                  ERROR_TOO_MANY_OPEN_FILES	EQU	4
   359                                  ERROR_ACCESS_DENIED		EQU	5
   360                                  error_invalid_handle		EQU	6
   361                                  error_arena_trashed		EQU	7
   362                                  ERROR_NOT_ENOUGH_MEMORY 	EQU	8
   363                                  error_invalid_block		EQU	9
   364                                  error_bad_environment		EQU	10
   365                                  ERROR_BAD_FORMAT		EQU	11
   366                                  error_invalid_access		EQU	12
   367                                  ERROR_INVALID_DATA		EQU	13
   368                                  ;**** reserved			EQU	14	; *****
   369                                  error_invalid_drive		EQU	15
   370                                  error_current_directory 	EQU	16
   371                                  error_not_same_device		EQU	17
   372                                  ERROR_NO_MORE_FILES		EQU	18
   373                                  
   374                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
   375                                  
   376                                  ERROR_WRITE_PROTECT		EQU	19
   377                                  error_bad_unit			EQU	20
   378                                  error_not_ready 		EQU	21
   379                                  error_bad_command		EQU	22
   380                                  error_CRC			EQU	23
   381                                  error_bad_length		EQU	24
   382                                  error_Seek			EQU	25
   383                                  error_not_DOS_disk		EQU	26
   384                                  error_sector_not_found		EQU	27
   385                                  error_out_of_paper		EQU	28
   386                                  error_write_fault		EQU	29
   387                                  error_read_fault		EQU	30
   388                                  ERROR_GEN_FAILURE		EQU	31
   389                                  
   390                                  ;	the new 3.0 error codes reported through INT 24
   391                                  
   392                                  error_sharing_violation 	EQU	32
   393                                  error_lock_violation		EQU	33
   394                                  error_wrong_disk		EQU	34
   395                                  ERROR_FCB_UNAVAILABLE		EQU	35
   396                                  ERROR_SHARING_BUFFER_EXCEEDED	EQU	36
   397                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00	;AN000;
   398                                  error_handle_EOF		EQU	38    ; DOS 4.00	;AN000;
   399                                  ERROR_HANDLE_DISK_FULL		EQU	39    ; DOS 4.00	;AN000;
   400                                  
   401                                  ;	New OEM network-related errors are 50-79
   402                                  
   403                                  error_not_supported		EQU	50
   404                                  
   405                                  error_net_access_denied		EQU	65	;M028
   406                                  
   407                                  ;	End of INT 24 reportable errors
   408                                  
   409                                  error_file_exists		EQU	80
   410                                  error_DUP_FCB			EQU	81	; *****
   411                                  error_cannot_make		EQU	82
   412                                  error_FAIL_I24			EQU	83
   413                                  
   414                                  ;	New 3.0 network related error codes
   415                                  
   416                                  error_out_of_structures 	EQU	84
   417                                  error_Already_assigned		EQU	85
   418                                  error_invalid_password		EQU	86
   419                                  error_invalid_parameter 	EQU	87
   420                                  error_NET_write_fault		EQU	88
   421                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00	;AN000;
   422                                  
   423                                  ;============================================================================
   424                                  ; DEVSYM.INC, MSDOS 6.0, 1991
   425                                  ;============================================================================
   426                                  ; 22/09/2018 - Retro DOS v3.0
   427                                  
   428                                  ;**	DevSym.inc - Device Symbols
   429                                  
   430                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   431                                  
   432                                  STRUC SYSDEV
   433 00000000 ????????                .NEXT:	RESD 1			;POINTER TO NEXT DEVICE HEADER
   434 00000004 ????                    .ATT:	RESW 1			;ATTRIBUTES OF THE DEVICE
   435 00000006 ????                    .STRAT:	RESW 1			;STRATEGY ENTRY POINT
   436 00000008 ????                    .INT:	RESW 1			;INTERRUPT ENTRY POINT
   437 0000000A ????????????????        .NAME:	RESB 8			;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   438                                  .size:
   439                                  ENDSTRUC
   440                                  
   441                                  ; 24/09/2018
   442                                  DEVTYP	EQU   8000H	; BIT 15 - 1  IF CHAR, 0 IF BLOCK
   443                                  
   444                                  ;============================================================================
   445                                  ; CURDIR.INC, MSDOS 6.0, 1991
   446                                  ;============================================================================
   447                                  ; 21/09/2018 - Retro DOS v3.0
   448                                  
   449                                  DIRSTRLEN	EQU	64+3	; Max length in bytes of directory strings
   450                                  
   451                                  ;============================================================================
   452                                  ; COMEQU.ASM, MSDOS 6.0, 1991
   453                                  ;============================================================================
   454                                  ; 21/09/2018 - Retro DOS v3.0
   455                                  
   456                                  ;/*
   457                                  ; *                      Microsoft Confidential
   458                                  ; *                      Copyright (C) Microsoft Corporation 1991
   459                                  ; *                      All Rights Reserved.
   460                                  ; */
   461                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   462                                  ;	SCCSID = @(#)comequ.asm 1.1 85/05/14
   463                                  ;*************************************
   464                                  ; COMMAND EQUs which are not switch dependant
   465                                  
   466                                  ;		include	curdir.inc	; to get DIRSTRLEN
   467                                  ;		Note dossym.inc must already have been included!
   468                                  
   469                                  GET_COMMAND_STATE	equ	5500h	; check for existing COMMAND
   470                                  GET_ROMCOMMAND_STATE	equ	5501h	; check for existing ROM COMMAND
   471                                  
   472                                  SYM		EQU	">"
   473                                  
   474                                  LINESPERPAGE	EQU	25		;AC000; default lines per page
   475                                  
   476                                  NORMPERLIN	EQU	1
   477                                  WIDEPERLIN	EQU	5
   478                                  COMBUFLEN	EQU	128		; Length of commmand buffer
   479                                  BatLen		EQU	32		; buffer for batch files
   480                                  YES_ECHO	EQU	1		; echo line
   481                                  NO_ECHO 	EQU	0		; don't echo line
   482                                  No_Echo_Char	EQU	"@"             ; don't echo line if this is first char
   483                                  call_in_progress EQU	1		; indicate we're in the CALL command
   484                                  length_call	EQU	4		; length of CALL
   485                                  max_nest	EQU    10		; max # levels of batch nesting allowed
   486                                  FAIL_ALLOWED	EQU    00001000b	; critical error
   487                                  RETRY_ALLOWED	EQU    00010000b	; critical error
   488                                  IGNORE_ALLOWED	EQU    00100000b	; critical error
   489                                  nullcommand	EQU     1		; no command on command line
   490                                  END_OF_LINE	EQU    -1		;AN000; end of line return from parser
   491                                  END_OF_LINE_OUT EQU	0		;AN000; end of line for output
   492                                  END_OF_LINE_IN	EQU	0Dh		;AN000; end of line for input
   493                                  result_number	EQU	1		;AN000; number returned from parser
   494                                  result_string	EQU	3		;AN000; string returned from parser
   495                                  RESULT_FILESPEC EQU	5		;AN000; filespec returned from parser
   496                                  result_drive	EQU	6		;AN000; drive returned from parser
   497                                  result_date	EQU	7		;AN000; date returned from parser
   498                                  result_time	EQU	8		;AN000; time returned from parser
   499                                  RESULT_NO_ERROR EQU	0		;AN000; no error returned from parser
   500                                  no_cont_flag	EQU	0		;AN000; no control flags for message
   501                                  util_msg_class	EQU	-1		;AN000; message class for utility
   502                                  ext_msg_class	EQU	1		;AN000; message class for extended error
   503                                  parse_msg_class EQU	2		;AN000; message class for parse error
   504                                  crit_msg_class	EQU	3		;AN000; message class for critical error
   505                                  ext_crlf_class	EQU	081h		;AN054; message class for extended error with no CRLF
   506                                  colon_char	EQU	":"             ;AN000; colon character
   507                                  crt_ioctl_ln	EQU	14		;AN000; default length of data for display ioctl
   508                                  text_mode	EQU	1		;AN000; text mode return from ioctl
   509                                  get_generic	EQU	07Fh		;AN000; generic ioctl - get device info
   510                                  set_crit_dev	EQU	0100H		;AN000; device attribute for critical error on I/0
   511                                  mult_ansi	EQU	01Ah		;AC064; multiplex for ansi.sys
   512                                  mult_shell_get	EQU	01902h		;AC065; multiplex for Shell - get next command
   513                                  mult_shell_brk	EQU	01903h		;AN000; multiplex for Shell - ^C batch check
   514                                  shell_action	equ	0FFh		;AN000; SHELL - return for taking SHELL specific action
   515                                  bat_not_open	EQU	-1		;AN000; batch handle will be set to this if not open
   516                                  bat_open_handle EQU	19		;AN000; handle will be in this position in JFN table
   517                                  Ptr_seg_pos	equ	7		;AN000; Offset from start of message block for subst segment
   518                                  Ptr_off_pos	equ	5		;AN000; Offset from start of message block for subst offset
   519                                  %define Parm_off_pos	word [2]	;AN000; Offset from start of subst list for subst offset
   520                                  parm_block_size equ	11		;AN000; size of message subst block
   521                                  blank		equ	" "             ;AN000; blank character
   522                                  no_subst	equ	0		;AN000; no substitutions for messages
   523                                  one_subst	equ	1		;AN000; one substitution for messages
   524                                  no_handle_out	equ	-1		;AN000; use function 1 thru 12 for message retriever
   525                                  res_subst	equ	2		;AN000; offset from start of message definition to number of subst
   526                                  read_open_mode	equ   0000000000000000b ;AN024; extended open mode for read
   527                                  deny_write	equ   0000000000100000b	; deny write sharing mode ;M031
   528                                  deny_none	equ   0000000001000000b	; deny none sharing mode ;Myyy	
   529                                  read_open_flag	equ   0000000100000001b ;AN000; extended open flags for read
   530                                  write_open_mode equ   0000000000000001b ;AN024; extended open mode for read
   531                                  write_open_flag equ   0000000100000001b ;AN000; extended open flags for read
   532                                  creat_open_flag equ   0000000100010010b ;AN000; extended open flags for read
   533                                  capital_A	equ	'A'             ;AC000;
   534                                  vbar		equ	'|'             ;AC000;
   535                                  labracket	equ	'<'             ;AC000;
   536                                  rabracket	equ	'>'             ;AC000;
   537                                  dollar		equ	'$'             ;AC000;
   538                                  lparen		equ	'('             ;AC000;
   539                                  rparen		equ	')'             ;AC000;
   540                                  nullrparen	equ	29h		;AC000;
   541                                  in_word 	equ	4E49h		;AC000; 'NI'  ('IN' backwards)
   542                                  do_word 	equ	4F44h		;AC000; 'OD'  ('DO' backwards)
   543                                  star		equ	'*'             ;AC000;
   544                                  plus_chr	equ	'+'             ;AC000;
   545                                  small_a 	equ	'a'             ;AC000;
   546                                  small_z 	equ	'z'             ;AC000;
   547                                  dot_chr 	equ	'.'             ;AC000;
   548                                  tab_chr 	equ	9		;AN032;
   549                                  equal_chr	equ	'='             ;AN032;
   550                                  semicolon	equ	';'             ;AN049;
   551                                  dot_qmark	equ	2e3fh		;AC000; '.?'
   552                                  dot_colon	equ	2e3ah		;AC000; '.:'
   553                                  capital_n	equ	0		;AC000; result from Y/N call if N entered
   554                                  capital_y	equ	1		;AC000; result from Y/N call if Y entered
   555                                  AppendInstall	equ	0B700H		;AN020; append install check
   556                                  AppendDOS	equ	0B702H		;AN020; append DOS version check
   557                                  AppendGetState	equ	0B706H		;AN020; append get current state
   558                                  AppendSetState	equ	0B707H		;AN020; append set current state
   559                                  AppendTruename	equ	0B711H		;AN042; Get file's real location for Batch
   560                                  search_attr	equ	ATTR_READ_ONLY+ATTR_HIDDEN+ATTR_DIRECTORY  ;AC042;
   561                                  
   562                                  ;*************************************
   563                                  ;* PARSE ERROR MESSAGES
   564                                  ;*************************************
   565                                  
   566                                  MoreArgs_Ptr	equ	1		;AN000;"Too many parameters" message number
   567                                  LessArgs_Ptr	equ	2		;AN000;"Required parameter missing" message number
   568                                  BadSwt_Ptr	equ	3		;AN000;"Invalid switch" message number
   569                                  BadParm_Ptr	equ	10		;AN000;"Invalid parameter" message number
   570                                  
   571                                  ;*************************************
   572                                  ;* EQUATES FOR MESSAGE RETRIEVER
   573                                  ;*************************************
   574                                  
   575                                  GET_EXTENDED_MSG	EQU	0	;AN000;  get extended message address
   576                                  SET_EXTENDED_MSG	EQU	1	;AN000;  set extended message address
   577                                  GET_PARSE_MSG		EQU	2	;AN000;  get parse message address
   578                                  SET_PARSE_MSG		EQU	3	;AN000;  set parse message address
   579                                  GET_CRITICAL_MSG	EQU	4	;AN000;  get critical message address
   580                                  SET_CRITICAL_MSG	EQU	5	;AN000;  set critical message address
   581                                  MESSAGE_2F		EQU	46	;AN000;  minor code for message retriever
   582                                  
   583                                  ;*********************************
   584                                  ;* EQUATES FOR INT 10H
   585                                  ;*********************************
   586                                  
   587                                  VIDEO_IO_INT		EQU	10H	;AN000;  equate for int 10h
   588                                  SET_VIDEO_MODE		EQU	0	;AN000;  set video mode
   589                                  SET_CURSOR_POSITION	EQU	2	;AN000;  set new cursor position
   590                                  SCROLL_VIDEO_PAGE	EQU	6	;AN000;  scroll active page up
   591                                  VIDEO_ATTRIBUTE 	EQU	7	;AN000;  attribute to be used on blank line
   592                                  SET_COLOR_PALETTE	EQU	11	;AN000;  set color for video
   593                                  GET_VIDEO_STATE 	EQU	15	;AN000;  get current video state
   594                                  VIDEO_ALPHA		EQU	3	;AN000;  alpha video is 3 or below
   595                                  VIDEO_BW		EQU	7	;AN000;  mode for 80X25 black & white
   596                                  
   597                                  AltPipeChr	equ	"|"             ; alternate pipe character
   598                                  
   599                                  FCB		equ	5Ch
   600                                  
   601                                  STRUC VARSTRUC
   602 00000000 ??                      .ISDIR:		RESB	1
   603 00000001 ??                      .SIZ:		RESB	1
   604 00000002 ????                    .TTAIL:		RESW	1
   605 00000004 ??                      .INFO:		RESB	1
   606 00000005 <res 57h>               .BUF:		RESB	DIRSTRLEN + 20
   607                                  .size:
   608                                  ENDSTRUC
   609                                  ;
   610                                  ; Flags for internal command parsing
   611                                  ;
   612                                  fCheckDrive	equ	00000001b	; validate drive letter
   613                                  fSwitchAllowed	equ	00000010b	; switches allowed
   614                                  fLimitHelp	equ	00000100b	; /? must appear alone
   615                                  
   616                                  ;
   617                                  ; Test switches
   618                                  ;
   619                                  fParse		EQU	0001h		; display results of parseline
   620                                  
   621                                  ;
   622                                  ; Batch segment structure
   623                                  ;
   624                                  ;   BYTE    type of segment
   625                                  ;   BYTE    echo state of parent on entry to batch file
   626                                  ;   WORD    segment of last batch file
   627                                  ;   WORD    segment for FOR command
   628                                  ;   BYTE    FOR flag state on entry to batch file
   629                                  ;   DWORD   offset for next line
   630                                  ;   10 WORD pointers to parameters. -1 is empty parameter
   631                                  ;   ASCIZ   file name (with . and ..)
   632                                  ;   BYTES   CR-terminated parameters
   633                                  ;   BYTE    0 flag to indicate end of parameters
   634                                  ;
   635                                  
   636                                  BATCHTYPE   equ 0
   637                                  
   638                                  STRUC BATCHSEGMENT
   639 00000000 ??                      .BatType:	RESB	1		; signature
   640 00000001 ??                      .BatEchoFlag:	RESB	1		; G state of echo
   641                                  ; MSDOS 5.0 (& 6.0) - 11/01/2023
   642 00000002 ??                      .BatchEOF:	RESB	1		; records if EOF reached on file
   643 00000003 ????                    .BatLast: 	RESW	1		; G segment of last batch file
   644 00000005 ????                    .BatForPtr:	RESW	1		; G segment for FOR command
   645 00000007 ??                      .BatForFlag:	RESB	1		; G state of FOR
   646 00000008 ????????                .BatSeek:	RESD	1		; lseek position of next char
   647 0000000C <res 14h>               .BatParm:	RESW	10		; pointers to parameters
   648 00000020 ??                      .BatFile:	RESB	1		; beginning of batch file name
   649                                  .SIZE:
   650                                  ENDSTRUC
   651                                  
   652                                  ANULL		equ	0		; terminates an argv string
   653                                  ARGMAX		equ	64		; max args on a command line
   654                                  ;ARGBLEN 	equ	2*128		; 1char each plus term NUL
   655                                  ; 27/07/2024 - PCDOS 7.1 COMMAND.COM ;*
   656                                  ARGBLEN 	equ	2*64
   657                                  tplen		equ	64		; max size of one argument
   658                                  arg_cnt_error	equ	1		; number of args > MAXARG
   659                                  arg_buf_ovflow	equ	2		; overflowed argbuffer
   660                                  
   661                                  STRUC ARGV_ELE				; elements in the argv array
   662 00000000 ????                    .argpointer:	RESW	1		; pointer to the argstring
   663 00000002 ??                      .argflags:	RESB	1		; cparse flags for this argstring
   664 00000003 ????                    .argstartel:	RESW	1		; the result of cparse's [STARTEL]
   665 00000005 ????                    .arglen:	RESW	1		; cparse's char count + one (for null)
   666 00000007 ????                    .argsw_word:	RESW	1		; any switches after this? what kinds?
   667 00000009 ????                    .arg_ocomptr:	RESW	1		; pointer into original command string
   668                                  .SIZE:	; 11 ; 27/07/2024
   669                                  ENDSTRUC
   670                                  
   671                                  STRUC ARG_UNIT
   672 00000000 <res 2C0h>              .argv:		RESB	ARGMAX * ARGV_ELE.SIZE
   673 000002C0 ????                    .argvcnt:	RESW	1		; number of arguments
   674 000002C2 ????                    .argswinfo:	RESW	1		; Switch information for entire line
   675 000002C4 <res 100h>              .argbuf:	RESW	ARGBLEN		; storage for argv strings
   676 000003C4 <res 80h>               .argforcombuf:	RESB	COMBUFLEN	; Original for loop command string
   677                                  .SIZE:	; 1092 ; 27/07/2024 ; (it was 1348 in MSDOS 5.0-6.22 COMMAND.COM) ;*
   678                                  ENDSTRUC
   679                                  
   680                                  ; Equates for initialization
   681                                  ;
   682                                  INITINIT	equ	01h		; initialization in progress
   683                                  INITSPECIAL	equ	02h		; in initialization time/date routine
   684                                  INITCTRLC	equ	04h		; already in ^C handler
   685                                  
   686                                  ;============================================================================
   687                                  ;  INTNAT.INC, MSDOS 6.0, 1991
   688                                  ;============================================================================
   689                                  ; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   690                                  
   691                                  ; Current structure of the data returned by the international call
   692                                  
   693                                  struc INTERNAT_BLOCK
   694 00000000 ????                    .date_tim_format: resw 1		; 0-USA, 1-EUR, 2-JAP
   695 00000002 ??????????              .currency_sym:	resb 5			; Currency Symbol 5 bytes
   696 00000007 ????                    .thous_sep:	resb 2			; Thousands separator 2 bytes
   697 00000009 ????                    .decimal_sep:	resb 2			; Decimal separator 2 bytes
   698 0000000B ????                    .date_sep:	resb 2			; Date separator 2 bytes
   699 0000000D ????                    .time_sep:	resb 2			; Decimal separator 2 bytes
   700 0000000F ??                      .bit_field:	resb 1			; Bit values
   701                                  					;   Bit 0 = 0 if currency symbol first
   702                                  					;	  = 1 if currency symbol last
   703                                  					;   Bit 1 = 0 if No space after currency symbol
   704                                  					;	  = 1 if space after currency symbol
   705                                  .currency_cents:
   706 00000010 ??                      		resb 1			; Number of places after currency dec point
   707 00000011 ??                      .time_24:	resb 1			; 1 if 24 hour time, 0 if 12 hour time
   708 00000012 ????????                .map_call:	resw 2			; Address of case mapping call (DWORD)
   709                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
   710                                  					;  in pieces.
   711 00000016 ??                      .data_sep:	resb 1			; Data list separator character
   712 00000017 ??                      		resb 1
   713                                  endstruc
   714                                  
   715                                  ; Max size of the block returned by the INTERNATIONAL call
   716                                  
   717                                  internat_block_max equ 32
   718                                  
   719                                  ;============================================================================
   720                                  ; FIND.INC (MSDOS 3.3, 1987) - REDIRSYM.INC (MSDOS 6.0, 1991) 
   721                                  ;============================================================================
   722                                  ; 13/10/2018 - Retro DOS v3.0
   723                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM 
   724                                  
   725                                  ;Break	<find first/next buffer>
   726                                  
   727                                  	; MSDOS 3.3 & MSDOS 6.0
   728                                  
   729                                  struc FIND_BUF
   730 00000000 ??                      .DRIVE:	    resb 1	; drive of search
   731 00000001 <res Bh>                .NAME:	    resb 11	; formatted name
   732 0000000C ??                      .SATTR:	    resb 1	; attribute of search
   733 0000000D ????                    .LASTENT:   resw 1	; LastEnt
   734 0000000F ????                    .DIRSTART:  resw 1	; DirStart
   735 00000011 ????????                .NETID:	    resb 4	; Reserved for NET
   736 00000015 ??                      .ATTR:	    resb 1	; attribute found
   737 00000016 ????                    .TIMR:	    resw 1	; time
   738 00000018 ????                    .DATE:	    resw 1	; date
   739 0000001A ????                    .SIZE_L:    resw 1	; low(size)
   740 0000001C ????                    .SIZE_H:    resw 1	; high(size)
   741 0000001E <res Dh>                .PNAME:	    resb 13	; packed name
   742                                  .size:
   743                                  endstruc
   744                                  
   745                                  ;=============================================================================
   746                                  ; PDB.INC, MSDOS 6.0, 1991
   747                                  ;=============================================================================
   748                                  ; 24/09/2018 - Retro DOS v3.0 (08/07/2018, 'msdos3.s')
   749                                  
   750                                  ;**	Process data block (otherwise known as program header)
   751                                  
   752                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   753                                  ;	can be rearranged here, ever. Reserved areas are probably safe
   754                                  ;	for use.
   755                                  
   756                                  FILPERPROC	EQU     20
   757                                  
   758                                  struc PDB	; Process_data_block
   759 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   760 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   761 00000004 ??                                      resb 1
   762 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   763 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   764 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   765 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   766 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   767 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   768 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   769 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   770 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   771 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   772 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   773 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   774 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   775 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   776 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   777 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   778 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   779 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   780                                  				;  an extended FCB
   781                                  ;endstruc 	; MSDOS 3.3
   782                                  	  	; MSDOS 6.0
   783 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   784 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   785 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   786 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   787                                  endstruc
   788                                  
   789                                  ;=============================================================================
   790                                  ; VERSIONA.INC, MSDOS 6.0, 1991
   791                                  ;=============================================================================
   792                                  ; 24/09/2018 - Retro DOS v3.0
   793                                  
   794                                  ;major_version	equ 6		; Major DOS version
   795                                  ;minor_version	equ 0		; Minor DOS Version
   796                                  
   797                                  ;expected_version    equ     (MINOR_VERSION SHL 8)+MAJOR_VERSION
   798                                  
   799                                  ; MSDOS 3.3 COMMAND.COM
   800                                  ;MAJOR_VERSION	EQU 3
   801                                  ;MINOR_VERSION	EQU 30
   802                                  
   803                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
   804                                  MAJOR_VERSION	EQU 5		; Major DOS version
   805                                  MINOR_VERSION	EQU 0		; Minor DOS version
   806                                  
   807                                  EXPECTED_VERSION EQU (MINOR_VERSION<<8)+MAJOR_VERSION	
   808                                  
   809                                  ;-----------------------------------------------------------------------------
   810                                  ; 21/09/2018
   811                                  ;-----------------------------------------------------------------------------
   812                                  ; Retro DOS v3.0 NOTE:  
   813                                  ;	Following source code is as disassembled code of MSDOS 3.3 COMMAND.COM
   814                                  ;	with minor modifications which are done by me (Erdogan Tan).
   815                                  ;	.. but comments and descriptions are from MSDOS 6.0 COMMAND.COM
   816                                  ;	source code files (written by using MASM syntax).
   817                                  ;-----------------------------------------------------------------------------
   818                                  ; All of this Retro DOS 3.0 (2018) source code has been written by using
   819                                  ; NASM (2.11) x86 assembly language/compiler syntax.	
   820                                  ;----------------------------------------------------------------------------- 	
   821                                  
   822                                  ;=============================================================================
   823                                  ; COMMAND1.ASM, MSDOS 6.0, 1991
   824                                  ;=============================================================================
   825                                  ; 21/09/2018 - Retro DOS v3.0
   826                                  
   827                                  ;	page ,132
   828                                  ;	title	COMMAND - resident code for COMMAND.COM
   829                                  ;	name	COMMAND
   830                                  
   831                                  ;/*
   832                                  ; *                      Microsoft Confidential
   833                                  ; *                      Copyright (C) Microsoft Corporation 1991
   834                                  ; *                      All Rights Reserved.
   835                                  ; */
   836                                  
   837                                  ;*****************************************************************************
   838                                  ;
   839                                  ; MODULE:	       COMMAND.COM
   840                                  ;
   841                                  ; DESCRIPTIVE NAME:    Default DOS command interpreter
   842                                  ;
   843                                  ; FUNCTION:	       This version of COMMAND is divided into three distinct
   844                                  ;		       parts.  First is the resident portion, which includes
   845                                  ;		       handlers for interrupts	23H (Cntrl-C), 24H (fatal
   846                                  ;		       error), and 2EH (command line execute); it also has
   847                                  ;		       code to test and, if necessary, reload the transient
   848                                  ;		       portion. Following the resident is the init code, which
   849                                  ;		       is overwritten after use.  Then comes the transient
   850                                  ;		       portion, which includes all command processing (whether
   851                                  ;		       internal or external).  The transient portion loads at
   852                                  ;		       the end of physical memory, and it may be overlayed by
   853                                  ;		       programs that need as much memory as possible. When the
   854                                  ;		       resident portion of command regains control from a user
   855                                  ;		       program, a check sum is performed on the transient
   856                                  ;		       portion to see if it must be reloaded.  Thus programs
   857                                  ;		       which do not need maximum memory will save the time
   858                                  ;		       required to reload COMMAND when they terminate.
   859                                  ;
   860                                  ; ENTRY POINT:	       PROGSTART
   861                                  ;
   862                                  ; INPUT:	       command line at offset 81H
   863                                  ;
   864                                  ; EXIT_NORMAL:	       No exit from root level command processor.  Can exit
   865                                  ;		       from a secondary command processor via the EXIT
   866                                  ;		       internal command.
   867                                  ;
   868                                  ; EXIT_ERROR:	       Exit to prior command processor if possible, otherwise
   869                                  ;		       hang the system.
   870                                  ;
   871                                  ; INTERNAL REFERENCES:
   872                                  ;
   873                                  ;     ROUTINES:        See the COMMAND Subroutine Description Document
   874                                  ;		       (COMMAND.DOC)
   875                                  ;
   876                                  ;     DATA AREAS:      See the COMMAND Subroutine Description Document
   877                                  ;		       (COMMAND.DOC)
   878                                  ;
   879                                  ; EXTERNAL REFERENCES:
   880                                  ;
   881                                  ;      ROUTINES:       none
   882                                  ;
   883                                  ;      DATA AREAS:     none
   884                                  ;
   885                                  ;*****************************************************************************
   886                                  ;
   887                                  ;			      REVISION HISTORY
   888                                  ;			      ----------------
   889                                  ;
   890                                  ; DOS 1.00 to DOS 3.30
   891                                  ; --------------------------
   892                                  ; SEE REVISION LOG IN COPY.ASM ALSO
   893                                  ;
   894                                  ; REV 1.17
   895                                  ;    05/19/82  Fixed bug in BADEXE error (relocation error must return to
   896                                  ;	       resident since the EXELOAD may have overwritten the transient.
   897                                  ;
   898                                  ; REV 1.18
   899                                  ;    05/21/82  IBM version always looks on drive A
   900                                  ;	       MSVER always looks on default drive
   901                                  ;
   902                                  ; REV 1.19
   903                                  ;    06/03/82  Drive spec now entered in command line
   904                                  ;    06/07/82  Added VER command (print DOS version number) and VOL command
   905                                  ;	       (print volume label)
   906                                  ;
   907                                  ; REV 1.20
   908                                  ;    06/09/82  Prints "directory" after directories
   909                                  ;    06/13/82  MKDIR, CHDIR, PWD, RMDIR added
   910                                  ;
   911                                  ; REV 1.50
   912                                  ;	       Some code for new 2.0 DOS, sort of HACKey.  Not enough time to
   913                                  ;	       do it right.
   914                                  ;
   915                                  ; REV 1.70
   916                                  ;	       EXEC used to fork off new processes
   917                                  ;
   918                                  ; REV 1.80
   919                                  ;	       C switch for single command execution
   920                                  ;
   921                                  ; REV 1.90
   922                                  ;	       Batch uses XENIX
   923                                  ;
   924                                  ; Rev 2.00
   925                                  ;	       Lots of neato stuff
   926                                  ;	       IBM 2.00 level
   927                                  ;
   928                                  ; Rev 2.01
   929                                  ;	       'D' switch for date time suppression
   930                                  ;
   931                                  ; Rev 2.02
   932                                  ;	       Default userpath is NUL rather than BIN
   933                                  ;		       same as IBM
   934                                  ;	       COMMAND split into pieces
   935                                  ;
   936                                  ; Rev 2.10
   937                                  ;	       INTERNATIONAL SUPPORT
   938                                  ;
   939                                  ; Rev 2.50
   940                                  ;	       all the 2.x new stuff -MU
   941                                  ;
   942                                  ; Rev 3.30     (Ellen G)
   943                                  ;	       CALL internal command (TBATCH2.ASM)
   944                                  ;	       CHCP internal command (TCMD2B.ASM)
   945                                  ;	       INT 24H support of abort, retry, ignore, and fail prompt
   946                                  ;	       @ sign suppression of batch file line
   947                                  ;	       Replaceable environment value support in batch files
   948                                  ;	       INT 2FH calls for APPEND
   949                                  ;	       Lots of PTR fixes!
   950                                  ;
   951                                  ; Beyond 3.30 to forever  (Ellen G)
   952                                  ; ----------------------
   953                                  ;
   954                                  ; A000 DOS 4.00  -	Use SYSPARSE for internal commands
   955                                  ;			Use Message Retriever services
   956                                  ;			/MSG switch for resident extended error msg
   957                                  ;			Convert to new capitalization support
   958                                  ;			Better error recovery on CHCP command
   959                                  ;			Code page file tag support
   960                                  ;			TRUENAME internal command
   961                                  ;			Extended screen line support
   962                                  ;			/P switch on DEL/ERASE command
   963                                  ;			Improved file redirection error recovery
   964                                  ;	(removed)	Improved batch file performance
   965                                  ;			Unconditional DBCS support
   966                                  ;			Volume serial number support
   967                                  ;	(removed)	COMMENT=?? support
   968                                  ;
   969                                  ; A001	PTM P20 	Move system_cpage from TDATA to TSPC
   970                                  ;
   971                                  ; A002	PTM P74 	Fix PRESCAN so that redirection symbols do not
   972                                  ;			require delimiters.
   973                                  ;
   974                                  ; A003	PTM P5,P9,P111	Included in A000 development
   975                                  ;
   976                                  ; A004	PTM P86 	Fix IF command to turn off piping before
   977                                  ;			executing
   978                                  ;
   979                                  ; A005	DCR D17 	If user specifies an extension on the command
   980                                  ;			line search for that extension only.
   981                                  ;
   982                                  ; A006	DCR D15 	New message for MkDir - "Directory already
   983                                  ;			exists"
   984                                  ;
   985                                  ; A007	DCR D2		Change CTTY so that a write is done before XDUP
   986                                  ;
   987                                  ; A008	PTM P182	Change COPY to set default if invalid function
   988                                  ;			returned from code page call.
   989                                  ;
   990                                  ; A009	PTM P179	Add CRLF to invalid disk change message
   991                                  ;
   992                                  ; A010	DCR D43 	Allow APPEND to do a far call to SYSPARSE in
   993                                  ;			transient COMMAND.
   994                                  ;
   995                                  ; A011	DCR D130	Change redirection to overwrite an EOF mark
   996                                  ;			before appending to a file.
   997                                  ;
   998                                  ; A012	PTM P189	Fix redirection error recovery.
   999                                  ;
  1000                                  ; A013	PTM P330	Change date format
  1001                                  ;
  1002                                  ; A014	PTM P455	Fix echo parsing
  1003                                  ;
  1004                                  ; A015	PTM P517	Fix DIR problem with * vs *.
  1005                                  ;
  1006                                  ; A016	PTM P354	Fix extended error message addressing
  1007                                  ;
  1008                                  ; A017	PTM P448	Fix appending to 0 length files
  1009                                  ;
  1010                                  ; A018	PTM P566,P3903	Fix parse error messages to print out parameter
  1011                                  ;			the parser fails on. Fail on duplicate switches.
  1012                                  ;
  1013                                  ; A019	PTM P542	Fix device name to be printed correctly during
  1014                                  ;			critical error
  1015                                  ;
  1016                                  ; A020	DCR D43 	Set append state off while in DIR
  1017                                  ;
  1018                                  ; A021	PTM P709	Fix CTTY printing ascii characters.
  1019                                  ;
  1020                                  ; A022	DCR D209	Enhanced error recovery
  1021                                  ;
  1022                                  ; A023	PTM P911	Fix ANSI.SYS IOCTL structure.
  1023                                  ;
  1024                                  ; A024	PTM P899	Fix EXTOPEN open modes.
  1025                                  ;
  1026                                  ; A025	PTM P922	Fix messages and optimize PARSE switches
  1027                                  ;
  1028                                  ; A026	DCR D191	Change redirection error recovery support.
  1029                                  ;
  1030                                  ; A027	PTM P991	Fix so that KAUTOBAT & AUTOEXEC are terminated
  1031                                  ;			with a carriage return.
  1032                                  ;
  1033                                  ; A028	PTM P1076	Print a blank line before printing invalid
  1034                                  ;			date and invalid time messages.
  1035                                  ;
  1036                                  ; A029	PTM P1084	Eliminate calls to parse_check_eol in DATE
  1037                                  ;			and TIME.
  1038                                  ;
  1039                                  ; A030	DCR D201	New extended attribute format.
  1040                                  ;
  1041                                  ; A031	PTM P1149	Fix DATE/TIME add blank before prompt.
  1042                                  ;
  1043                                  ; A032	PTM P931	Fix =ON, =OFF for BREAK, VERIFY, ECHO
  1044                                  ;
  1045                                  ; A033	PTM P1298	Fix problem with system crashes on ECHO >""
  1046                                  ;
  1047                                  ; A034	PTM P1387	Fix COPY D:fname+,, to work
  1048                                  ;
  1049                                  ; A035	PTM P1407	Fix so that >> (appending) to a device does
  1050                                  ;			do a read to determine eof.
  1051                                  ;
  1052                                  ; A036	PTM P1406	Use 69h instead of 44h to get volume serial
  1053                                  ;			so that ASSIGN works correctly.
  1054                                  ;
  1055                                  ; A037	PTM P1335	Fix COMMAND /C with FOR
  1056                                  ;
  1057                                  ; A038	PTM P1635	Fix COPY so that it doesn't accept /V /V
  1058                                  ;
  1059                                  ; A039	DCR D284	Change invalid code page tag from -1 to 0.
  1060                                  ;
  1061                                  ; A040	PTM P1787	Fix redirection to cause error when no file is
  1062                                  ;			specified.
  1063                                  ;
  1064                                  ; A041	PTM P1705	Close redirected files after internal APPEND
  1065                                  ;			executes.
  1066                                  ;
  1067                                  ; A042	PTM P1276	Fix problem of APPEND paths changes in batch
  1068                                  ;			files causing loss of batch file.
  1069                                  ;
  1070                                  ; A043	PTM P2208	Make sure redirection is not set up twice for
  1071                                  ;			CALL'ed batch files.
  1072                                  ;
  1073                                  ; A044	PTM P2315	Set switch on PARSE so that 0ah is not used
  1074                                  ;			as an end of line character
  1075                                  ;
  1076                                  ; A045	PTM P2560	Make sure we don't lose parse, critical error,
  1077                                  ;			and extended message pointers when we EXIT if
  1078                                  ;			COMMAND /P is the top level process.
  1079                                  ;
  1080                                  ; A046	PTM P2690	Change COPY message "fn File not found" to
  1081                                  ;			"File not found - fn"
  1082                                  ;
  1083                                  ; A047	PTM P2819	Fix transient reload prompt message
  1084                                  ;
  1085                                  ; A048	PTM P2824	Fix COPY path to be upper cased.  This was broken
  1086                                  ;			when DBCS code was added.
  1087                                  ;
  1088                                  ; A049	PTM P2891	Fix PATH so that it doesn't accept extra characters
  1089                                  ;			on line.
  1090                                  ;
  1091                                  ; A050	PTM P3030	Fix TYPE to work properly on files > 64K
  1092                                  ;
  1093                                  ; A051	PTM P3011	Fix DIR header to be compatible with prior releases.
  1094                                  ;
  1095                                  ; A052	PTM P3063,P3228 Fix COPY message for invalid filename on target.
  1096                                  ;
  1097                                  ; A053	PTM P2865	Fix DIR to work in 40 column mode.
  1098                                  ;
  1099                                  ; A054	PTM P3407	Code reduction and critical error on single line
  1100                                  ;	PTM P3672	(Change to single parser exported under P3407)
  1101                                  ;
  1102                                  ; A055	PTM P3282	Reset message service variables in INT 23h to fix
  1103                                  ;			problems with breaking out of INT 24h
  1104                                  ;
  1105                                  ; A056	PTM P3389	Fix problem of environment overlaying transient.
  1106                                  ;
  1107                                  ; A057	PTM P3384	Fix COMMAND /C so that it works if there is no space
  1108                                  ;			before the "string".  EX: COMMAND /CDIR
  1109                                  ;
  1110                                  ; A058	PTM P3493	Fix DBCS so that CPARSE eats second character of
  1111                                  ;			DBCS switch.
  1112                                  ;
  1113                                  ; A059	PTM P3394	Change the TIME command to right align the display of
  1114                                  ;			the time.
  1115                                  ;
  1116                                  ; A060	PTM P3672	Code reduction - change PARSE and EXTENDED ERROR
  1117                                  ;			messages to be disk based.  Only keep them if /MSG
  1118                                  ;			is used.
  1119                                  ;
  1120                                  ; A061	PTM P3928	Fix so that transient doesn't reload when breaking
  1121                                  ;			out of internal commands, due to substitution blocks
  1122                                  ;			not being reset.
  1123                                  ;
  1124                                  ; A062	PTM P4079	Fix segment override for fetching address of environment
  1125                                  ;			of parent copy of COMMAND when no COMSPEC exists in
  1126                                  ;			secondary copy of environment.	Change default slash in
  1127                                  ;			default comspec string to backslash.
  1128                                  ;
  1129                                  ; A063	PTM P4140	REDIRECTOR and IFSFUNC changed interface for getting
  1130                                  ;			text for critical error messages.
  1131                                  ;
  1132                                  ; A064	PTM P4934	Multiplex number for ANSI.SYS changed due to conflict
  1133                                  ;	5/20/88 	with Microsoft product already shipped.
  1134                                  ;
  1135                                  ; A065	PTM P4935	Multiplex number for SHELL changed due to conflict
  1136                                  ;	 5/20/88	with Microsoft product already shipped.
  1137                                  ;
  1138                                  ; A066	PTM P4961	DIR /W /P scrolled first line off the screen in some
  1139                                  ;	 5/24/88	cases; where the listing would barely fit without the
  1140                                  ;			header and space remaining.
  1141                                  ;
  1142                                  ; A067	PTM P5011	For /E: values of 993 to 1024 the COMSPEC was getting
  1143                                  ;	 6/6/88 	trashed.  Turns out that the SETBLOCK for the new
  1144                                  ;			environment was putting a "Z block" marker in the old
  1145                                  ;			environment.  The fix is to move to the old environment
  1146                                  ;			to the new environment before doing the SETBLOCK.
  1147                                  ;
  1148                                  ; A068  PTM P5568       IR79754 APPEND /x:on not working properly with DIR/VOL
  1149                                  ;        09/19/88       because the check for APPEND needed to be performed
  1150                                  ;                       before the DIR's findfirst.
  1151                                  ;
  1152                                  ; A069  PTM P5726       IR80540 COMSPEC_flag not properly initialized and
  1153                                  ;        10/30/88       executed.  Causing AUSTIN problem testing LAN/DW4 re-
  1154                                  ;                       loading trans w/new comspec with no user change comspec.
  1155                                  ;
  1156                                  ; A070  PTM P5734       IR80484 Batch file causes sys workspace to be corrupted.
  1157                                  ;        11/05/88       Expansion of environment variables into batch line of
  1158                                  ;                       128 chars was not being counted and "%" which should be
  1159                                  ;                       ignored were being counted.
  1160                                  ;
  1161                                  ; A071  PTM P5854       IR82061 Invalid COMMAND.COM when Word Perfect, Prompt
  1162                                  ;        03/02/89       used.  Comspec_flag was not in protected data file be-
  1163                                  ;                       ing included in checksum and was being overwritten by
  1164                                  ;                       WP.  Moved var from Tspc to Tdata so Trans would reload.
  1165                                  ;                       Also removed fix A069 (because flag now protected).
  1166                                  ;
  1167                                  ; C001  VERSION 4.1     Add new internal command - SERVICE - to display the DOS
  1168                                  ;        07/25/89       version and CSD version in U.S. date format.  Files
  1169                                  ;                       changed - TRANMSG,.SKL,COMMAND1,TDATA,TCMD2A,USA.MSG
  1170                                  ;
  1171                                  ;***********************************************************************************
  1172                                  
  1173                                  ;
  1174                                  ;	Revision History
  1175                                  ;	================
  1176                                  ;
  1177                                  ;	M021	SR	08/23/90	Fixed Ctrl-C handler to handle Ctrl-C
  1178                                  ;					at init time (date/time prompt)
  1179                                  ;
  1180                                  
  1181                                  ;
  1182                                  ;.xcref
  1183                                  ;.xlist
  1184                                  ;	include dossym.inc		; basic DOS symbol set
  1185                                  ;	include syscall.inc		; DOS function names
  1186                                  ;	include comsw.asm		; build version info
  1187                                  ;	include comequ.asm		; common command.com symbols
  1188                                  ;	include resmsg.equ		; resident message names
  1189                                  ;
  1190                                  ;	include comseg.asm		;segment ordering
  1191                                  ;.list
  1192                                  ;.cref
  1193                                  
  1194                                  ;CODERES segment public byte
  1195                                  ;CODERES ends
  1196                                  ;
  1197                                  ;DATARES 	segment public byte
  1198                                  ;		extrn	AccDen:byte
  1199                                  ;		extrn	Batch:word
  1200                                  ;		extrn	EchoFlag:byte
  1201                                  ;		extrn	ExeBad:byte
  1202                                  ;		extrn	ExecEMes:byte
  1203                                  ;		extrn	ExecErrSubst:byte
  1204                                  ;		extrn	ExtCom:byte
  1205                                  ;		extrn	ForFlag:byte
  1206                                  ;		extrn	IfFlag:byte
  1207                                  ;		extrn	InitFlag:BYTE
  1208                                  ;		extrn	Nest:word
  1209                                  ;		extrn	PipeFlag:byte
  1210                                  ;		extrn	RBadNam:byte
  1211                                  ;		extrn	RetCode:word
  1212                                  ;		extrn	SingleCom:word
  1213                                  ;		extrn	TooBig:byte
  1214                                  ;
  1215                                  ;		extrn	OldDS:word
  1216                                  ;
  1217                                  ;DATARES 	ends
  1218                                  ;
  1219                                  ;
  1220                                  ;INIT		segment public para
  1221                                  ;		extrn	ConProc:near
  1222                                  ;		extrn	Init_Contc_SpecialCase:near
  1223                                  ;INIT		ends
  1224                                  
  1225                                  ; 09/01/2023 - Erdogan Tan - Istanbul
  1226                                  ; --------------------------------------
  1227                                  ; 'command5.s' source code reference(s):
  1228                                  
  1229                                  ;	1) MSDOS 6.0 COMMAND.COM source files
  1230                                  ;	2) Disassembled MSDOS 5.0 COMMAND.COM - 11/11/1991 - 47845 bytes  
  1231                                  ;	   (Disassembler: HEX-RAYS IDA Pro Freeware Version 5.0)
  1232                                  ; ----------------------------------------------------------------------				 	 	
  1233                                  
  1234                                  ; ----------------------------------------------------------------------------
  1235                                  ; START OF RESIDENT PORTION
  1236                                  ; ----------------------------------------------------------------------------
  1237                                  ; SEGMENT - DATARES
  1238                                  ; ----------------------------------------------------------------------------
  1239                                  
  1240                                  section .RESGROUP ; vstart=100h  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) 
  1241                                  
  1242                                  ; 09/01/2023 - Retro DOS v4.0 (Modified COMMAND.COM v5.0)
  1243                                  
  1244                                  ; ----------------------------------------------------------------------------
  1245                                  ; STUB.ASM - MSDOS 6.0 - 1991
  1246                                  ; ----------------------------------------------------------------------------
  1247                                  
  1248                                  ;This file contains the low memory stub for command.com which hooks all the
  1249                                  ;entry points into the resident command.com and directs the calls to the
  1250                                  ;appropriate routines in the resident code which may be located in HIMEM. 
  1251                                  ;
  1252                                  ;The stub has been made part of the resident data and will always
  1253                                  ;be duplicated on every invocation of command.com. However, the only stubs
  1254                                  ;that actually hook the interrupt vectors belong to either the first 
  1255                                  ;command.com or to any other command.com executed with the /p switch. 
  1256                                  ;
  1257                                  ;The stub also keeps track of the current active data segment. The 
  1258                                  ;INIT code of each command.com updates this variable via an int 2fh mechanism
  1259                                  ;with its own data segment. The INIT code also updates a pointer in its data
  1260                                  ;segment to the previous resident data segment. Whenever a command.com exits,
  1261                                  ;the exit code picks up the previous data segment pointer from the current
  1262                                  ;data segment and patches it into the CurResDataSeg variable in the stub.
  1263                                  ;
  1264                                  ;Right now the stub does not bother about A20 switching. We assume
  1265                                  ;A20 is always on. It just does a far jump to the resident code with the 
  1266                                  ;value of the current data segment in one of the registers. A20 toggle 
  1267                                  ;support maybe added as a future enhancement, if the need is felt.
  1268                                  
  1269                                  	; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1270                                  
  1271                                  	[ORG 100H]
  1272                                  
  1273                                  	; 21/09/2018 - Retro DOS v3.0
  1274                                  StartCode:
  1275 00000000 E9FD13                  	jmp	ConProc	; 10/01/2023 
  1276                                  
  1277                                  	; 09/01/2023
  1278                                  
  1279                                  ; Make following table word-aligned, and at the same time, provide a
  1280                                  ; signature that sysinit can use to (attempt to) validate the interpreter
  1281                                  
  1282                                  	;db	0	; MSDOS 5.0 COMMAND.COM - DATARESRES:0103h
  1283 00000003 50                      	db      ((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
  1284                                  
  1285                                  ;All the entry points declared below are patched in at INIT time with the
  1286                                  ;proper segment and offset values after the resident code segment has been
  1287                                  ;moved to its final location
  1288                                  
  1289                                  ;!!!WARNING!!!
  1290                                  ; All the dword ptrs from Int2f_Entry till MsgRetrv_Entry should be contiguous
  1291                                  ;because the init routine 'Patch_stub' (in init.asm) relies on this to patch
  1292                                  ;in the correct segments and offsets
  1293                                  
  1294                                  Int2f_Entry:
  1295 00000004 [1713]                  	dw	MsgInt2fHandler		; Address of int 2fh handler
  1296 00000006 0000                    	dw	0
  1297                                  Int2e_Entry:
  1298 00000008 [730D]                  	dw	Int_2e			; Address of int 2eh handler
  1299 0000000A 0000                    	dw	0
  1300                                  Ctrlc_Entry:
  1301 0000000C [330C]                  	dw	ContC			; Address of Ctrl-C handler
  1302 0000000E 0000                    	dw	0
  1303                                  CritErr_Entry:
  1304 00000010 [3410]                  	dw	DSKERR			; Address of critical error handler
  1305 00000012 0000                    	dw	0
  1306                                  
  1307                                  Exec_Entry:
  1308 00000014 00000000                	dd	0			; Entry from transient to Ext_Exec
  1309                                  RemCheck_Entry:
  1310 00000018 00000000                	dd	0			; Entry from transient to TRemCheck
  1311                                  TrnLodCom1_Entry:
  1312 0000001C 00000000                	dd	0			; Entry from transient to LodCom1
  1313                                  LodCom_Entry:
  1314 00000020 00000000                	dd	0			; Entry after exit from command.com
  1315                                  MsgRetrv_Entry:
  1316 00000024 00000000                	dd	0			; Entry from external to MsgRetriever
  1317                                  HeadFix_Entry:
  1318 00000028 00000000                	dd	0			; Entry from trans to HeadFix
  1319                                  UMBOff_Entry:
  1320 0000002C 00000000                	dd	0			; Entry from here to UMBOff routine; M003
  1321                                  XMMCallAddr:
  1322 00000030 00000000                	dd	0			; Call address for XMM functions
  1323                                  ComInHMA:
  1324 00000034 00                      	db	0			; Flags if command.com in HMA
  1325                                  
  1326                                  Int2f_Trap:
  1327                                  	;sti	; 19/04/2023 (MSDOS 5.0 COMMAND.COM - RESGROUP:0135h)
  1328 00000035 E86400                  	call	CheckA20
  1329 00000038 1E                      	push	ds			; push current ds value
  1330 00000039 0E                      	push	cs			; push resident data segment value
  1331                                  	;jmp	cs:Int2f_Entry
  1332 0000003A 2EFF2E[0400]            	jmp	far [cs:Int2f_Entry]
  1333                                  
  1334                                  Int2e_Trap:
  1335 0000003F FB                      	sti
  1336 00000040 E85900                  	call	CheckA20
  1337 00000043 1E                      	push	ds			; push current ds value
  1338 00000044 0E                      	push	cs			; push resident data segment value
  1339                                  	;jmp	cs:Int2e_Entry
  1340 00000045 2EFF2E[0800]            	jmp	far [cs:Int2e_Entry]
  1341                                  
  1342                                  Ctrlc_Trap:
  1343 0000004A FB                      	sti
  1344 0000004B E84E00                  	call	CheckA20
  1345 0000004E 1E                      	push	ds			; push current ds value
  1346 0000004F 0E                      	push	cs			; push resident data segment value
  1347                                  	;jmp	cs:Ctrlc_Entry
  1348 00000050 2EFF2E[0C00]            	jmp	far [cs:Ctrlc_Entry]
  1349                                  
  1350                                  CritErr_Trap:
  1351 00000055 FB                      	sti
  1352 00000056 E84300                  	call	CheckA20
  1353 00000059 1E                      	push	ds			; push current ds value
  1354 0000005A 0E                      	push	cs			; push resident data segment value
  1355                                  	;jmp	cs:CritErr_Entry
  1356 0000005B 2EFF2E[1000]            	jmp	far [cs:CritErr_Entry]
  1357                                  
  1358                                  Exec_Trap:
  1359 00000060 E83900                  	call	CheckA20
  1360 00000063 1E                      	push	ds			; push current ds value
  1361 00000064 0E                      	push	cs			; push resident data segment value
  1362                                  	;jmp	cs:Exec_Entry
  1363 00000065 2EFF2E[1400]            	jmp	far [cs:Exec_Entry]
  1364                                  
  1365                                  RemCheck_Trap:
  1366 0000006A E82F00                  	call	CheckA20
  1367 0000006D 1E                      	push	ds			; push current ds value
  1368 0000006E 0E                      	push	cs			; push resident data segment value
  1369                                  	;jmp	cs:RemCheck_Entry
  1370 0000006F 2EFF2E[1800]            	jmp	far [cs:RemCheck_Entry]
  1371                                  
  1372                                  TrnLodCom1_Trap:
  1373 00000074 E82500                  	call	CheckA20
  1374 00000077 1E                      	push	ds			; push current ds value
  1375 00000078 0E                      	push	cs			; push resident data segment value
  1376                                  	;jmp	cs:TrnLodCom1_Entry
  1377 00000079 2EFF2E[1C00]            	jmp	far [cs:TrnLodCom1_Entry]
  1378                                  
  1379                                  LodCom_Trap:
  1380 0000007E E81B00                  	call	CheckA20
  1381 00000081 1E                      	push	ds			; push current ds value
  1382 00000082 0E                      	push	cs			; push resident data segment value
  1383                                  	;jmp	cs:LodCom_Entry
  1384 00000083 2EFF2E[2000]            	jmp	far [cs:LodCom_Entry]
  1385                                  
  1386                                  MsgRetrv_Trap:
  1387 00000088 E81100                  	call	CheckA20
  1388 0000008B 1E                      	push	ds			; push current ds value
  1389 0000008C 0E                      	push	cs			; push resident data segment value
  1390                                  	;jmp	cs:MsgRetrv_Entry
  1391 0000008D 2EFF2E[2400]            	jmp	far [cs:MsgRetrv_Entry]
  1392                                  
  1393                                  HeadFix_Trap:
  1394 00000092 E80700                  	call	CheckA20
  1395 00000095 1E                      	push	ds			; push current ds value
  1396 00000096 0E                      	push	cs			; push resident data segment value
  1397                                  	;jmp	cs:HeadFix_Entry
  1398 00000097 2EFF2E[2800]            	jmp	far [cs:HeadFix_Entry]
  1399                                  
  1400                                  ; ----------------------------------------------------------------------------
  1401                                  
  1402                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1403                                  %if 0
  1404                                  	; 09/01/2023
  1405                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:019Dh
  1406                                  
  1407                                  	; 05/06/2023
  1408                                  	; MSDOS 6.22 COMMAND.COM - RESGROUP:019Ch
  1409                                  CheckA20:
  1410                                  	pushf				; save current flags
  1411                                  	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1412                                  	jz	short A20_on		; no, jump to resident
  1413                                  
  1414                                  	call	QueryA20
  1415                                  	jnc	short A20_on		; A20 is on, jump to resident
  1416                                  
  1417                                  	call	EnableA20		; turn A20 on
  1418                                  A20_on:
  1419                                  	popf				; flags have to be unchanged
  1420                                  	retn
  1421                                  %else
  1422                                  	; 18/07/2024
  1423                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1424                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1425                                  	; PCDOS 7.1 COMMAND.COM - RESGROUP:01FFh
  1426                                  CheckA20:
  1427 0000009C 9C                      	pushf				; save current flags
  1428 0000009D 2E803E[3400]00          	cmp	byte [cs:ComInHMA],0	; is resident in HMA?
  1429 000000A3 741A                    	jz	short A20_on		; no, jump to resident
  1430                                  	; 18/07/2024
  1431 000000A5 50                      	push	ax
  1432 000000A6 53                      	push	bx
  1433                                  QueryA20:
  1434                                  	;mov	ah,7
  1435 000000A7 B407                    	mov	ah,XMM_QUERY_A20
  1436                                  	;call	cs:XMMCallAddr
  1437 000000A9 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1438 000000AE 09C0                    	or	ax,ax
  1439                                  	; 16/04/2023
  1440 000000B0 750B                    	jnz	short QA20_ON		; A20 is on, jump to resident
  1441                                  	; 18/07/2024
  1442                                  EnableA20:
  1443                                  	;mov	ah,5
  1444 000000B2 B405                    	mov	ah,XMM_LOCAL_ENABLE_A20	; turn A20 on
  1445                                  	;call	cs:XMMCallAddr
  1446 000000B4 2EFF1E[3000]            	call	far [cs:XMMCallAddr]
  1447 000000B9 09C0                    	or	ax,ax
  1448 000000BB 7404                    	jz	short XMMerror		; AX = 0 fatal error
  1449                                  QA20_ON:
  1450 000000BD 5B                      	pop	bx
  1451 000000BE 58                      	pop	ax
  1452                                  A20_on:
  1453 000000BF 9D                      	popf				; flags have to be unchanged
  1454 000000C0 C3                      	retn
  1455                                  ;If we get an error, we just loop forever
  1456                                  XMMerror:
  1457 000000C1 EBFE                    	jmp	short XMMerror
  1458                                  %endif
  1459                                  
  1460                                  ; ----------------------------------------------------------------------------
  1461                                  
  1462                                  ; M005; This is a far jump to the actual int 2fh entry point. The renormalized
  1463                                  ; M005; int 2fh cs:ip points here. We hardcode a far jump here to the int 2fh
  1464                                  ; M005; handler. Note that we have to hardcode a jump and we cannot use any
  1465                                  ; M005; pointers because our cs is going to be different. The segment to
  1466                                  ; M005; jump to is patched in at init time. (in init.asm)
  1467                                  
  1468                                  Carousel_i2f_Hook:			; M005
  1469 000000C3 EA                      	db	0EAh			; far jump opcode; M005
  1470 000000C4 [3500]                  	dw	Int2f_Trap ; DATARES	; int 2fh offset ; M005
  1471 000000C6 0000                    	dw	0			; int 2fh segment; M005
  1472                                  
  1473                                  ; ----------------------------------------------------------------------------
  1474                                  
  1475                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1476                                  %if 0
  1477                                  	XMM_QUERY_A20 equ 7 ; 09/01/2023
  1478                                  QueryA20:
  1479                                  	push	bx
  1480                                  	push	ax
  1481                                  	;mov	ah,7
  1482                                  	mov	ah,XMM_QUERY_A20
  1483                                  	;call	cs:XMMCallAddr
  1484                                  	call	far [cs:XMMCallAddr]
  1485                                  	or	ax,ax
  1486                                  	pop	ax
  1487                                  	pop	bx
  1488                                  	; 16/04/2023
  1489                                  	jnz	short QA20_ON	; cf = 0	; AX = 1 => ON
  1490                                  	stc					; OFF
  1491                                  	;retn
  1492                                  QA20_ON:
  1493                                  	;clc					; ON
  1494                                  	retn
  1495                                  %endif
  1496                                  
  1497                                  ; ----------------------------------------------------------------------------
  1498                                  
  1499                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM
  1500                                  %if 0
  1501                                  	XMM_LOCAL_ENABLE_A20 equ 5
  1502                                  EnableA20:
  1503                                  	push	bx
  1504                                  	push	ax
  1505                                  	;mov	ah,5
  1506                                  	mov	ah,XMM_LOCAL_ENABLE_A20
  1507                                  	;call	cs:XMMCallAddr
  1508                                  	call	far [cs:XMMCallAddr]
  1509                                  	or	ax,ax
  1510                                  	jz	short XMMerror			; AX = 0 fatal error
  1511                                  	pop	ax
  1512                                  	pop	bx
  1513                                  	retn
  1514                                  ;If we get an error, we just loop forever
  1515                                  XMMerror:
  1516                                  	jmp	short XMMerror
  1517                                  %endif
  1518                                  
  1519                                  ; -----------------------------------------------------------------------------
  1520                                  
  1521                                  HV_Extern   equ	1
  1522                                  HV_LoadHigh equ	1
  1523                                  HV_Stub	    equ	1
  1524                                  
  1525                                  	; 09/01/2023 - Retro DOS v4.0 (& 4.1)
  1526                                  
  1527                                  ;The Exec call has to be issued from the data segment. The reason for this 
  1528                                  ;is TSRs. When a TSR does a call to terminate and stay resident, the call
  1529                                  ;returns with all registers preserved and so all our segment registers are
  1530                                  ;still set up. However, if the TSR unloads itself later on, it still 
  1531                                  ;comes back here. In this case the segment registers and the stack are
  1532                                  ;not set up and random things can happen. The only way to setup all the 
  1533                                  ;registers is to use the cs value and this can only be done when we are in
  1534                                  ;the data segment ourselves. So, this piece of code had to be moved from
  1535                                  ;the code segment to the data segment.
  1536                                  
  1537                                  Issue_Exec_Call:
  1538 000000C8 CD21                    	int 	21h
  1539                                  
  1540                                  ;We disable interrupts while changing the stack because there is a bug in 
  1541                                  ;some old 8088 processors where interrupts are let through while ss & sp
  1542                                  ;are being changed.
  1543                                  
  1544 000000CA FA                      	cli
  1545 000000CB 0E                      	push	cs
  1546 000000CC 17                      	pop	ss
  1547                                  	;mov	sp,53Eh ; MSDOS 5.0 COMMAND.COM RESGROUP:01DFh
  1548                                  	;mov	sp,offset DATARES:RStack ; stack is set up
  1549 000000CD BC[2004]                	mov	sp,RStack		; stack is set up
  1550                                  	
  1551                                  	; 20/04/2023
  1552                                  	;sti
  1553                                  	;push	cs
  1554                                  	;pop	ds			; ds = DATARES
  1555                                  
  1556                                  ; M009; Restore UMB state to that before Exec
  1557                                  
  1558                                  	;pushf				;    This call frees HIDDEN umb's,
  1559                                  	;call	UnHideUMBs		; <- restores the memory-allocation
  1560                                  	;popf				;    strategy and link state, as app.
  1561                                  
  1562                                  	; 09/01/2023 - Retro DOS v4.0
  1563                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:01E2h
  1564                                  	; ----------------------
  1565 000000D0 FB                      	sti
  1566                                  	
  1567 000000D1 0E                      	push    cs
  1568 000000D2 1F                      	pop     ds
  1569 000000D3 9C                      	pushf
  1570                                  	;mov	al,[cs:fInHigh]
  1571                                  	; 18/04/2023
  1572 000000D4 A0[2204]                	mov	al,[fInHigh]
  1573 000000D7 A880                    	test	al,80h
  1574 000000D9 7406                    	jz      short uhu10
  1575 000000DB 247F                    	and     al,7Fh
  1576                                  	;;call	cs:UMBOff_Entry
  1577                                  	;call	far [cs:UMBOff_Entry]
  1578 000000DD FF1E[2C00]              	call	far [UMBOff_Entry]
  1579                                  uhu10:
  1580                                  	;and	byte [cs:fInHigh],7Fh
  1581                                  	; 18/04/2023
  1582 000000E1 8026[2204]7F            	and	byte [fInHigh],7Fh
  1583 000000E6 9D                      	popf
  1584                                  	; ----------------------
  1585                                  
  1586                                  ;We now jump to the stub trap which returns us to the resident code. All
  1587                                  ;flags are preserved by the stub code.
  1588                                  
  1589 000000E7 E976FF                  	jmp	Exec_Trap
  1590                                  
  1591                                  ; ----------------------------------------------------------------------------
  1592                                  ; RDATA.ASM, MSDOS 6.0, 1992
  1593                                  ; ----------------------------------------------------------------------------
  1594                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1)
  1595                                  
  1596                                  ;***	Message substitution blocks
  1597                                  
  1598                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:01FFh (DATARES:01FFh)
  1599                                  
  1600                                  ;BlkDevErrSubst	label	byte
  1601                                  ;BlkDevErrRw	subst	<STRING,>		; "reading" or "writing"
  1602                                  ;		subst	<CHAR,DATARES:DrvLet>	; block device drive letter
  1603                                  
  1604 000000EA 02                      BlkDevErrSubst: db	2
  1605 000000EB 0000                    BlkDevErrRw:	dw	0
  1606 000000ED 01                      		db	1
  1607 000000EE [F000]                  		dw	DrvLet
  1608                                  
  1609 000000F0 41                      DrvLet:		db	'A'			; drive letter
  1610                                  
  1611                                  
  1612                                  ;CharDevErrSubst label	byte
  1613                                  ;CharDevErrRw	subst	<STRING,>		 ; "reading" or "writing"
  1614                                  ;CharDevErrDev	subst	<STRING,DATARES:DevName> ; character device name
  1615                                  
  1616 000000F1 02                      CharDevErrSubst: db	2
  1617 000000F2 0000                    CharDevErrRw:	dw	0
  1618 000000F4 02                      		db	2
  1619 000000F5 [0301]                  		dw	DevName
  1620                                  
  1621                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0318h
  1622                                  ;DevName:	times 8 db 0  ; db 8 dup (?),0	; device name, asciiz
  1623                                  ;		db	0
  1624                                  
  1625                                  ;NeedVolSubst	label	byte
  1626                                  ;		subst	<STRING,DATARES:VolName> ; volume name
  1627                                  ;		subst	<HEX,DATARES:VolSer+2>	 ; hi word of serial #
  1628                                  ;		subst	<HEX,DATARES:VolSer>	 ; lo word of serial #
  1629                                  
  1630 000000F7 02                      NeedVolSubst:	db	2
  1631 000000F8 [0001]                  		dw	VolName
  1632 000000FA 03                      		db	3
  1633 000000FB [0E01]                  		dw	VolSer+2
  1634 000000FD 03                      		db	3
  1635 000000FE [0C01]                  		dw	VolSer
  1636                                  
  1637                                  ; 18/07/2024 - PCDOS 7.1 COMMAND.COM - RESGROUP:0321h
  1638                                  	; NOTE:	VolName and VolSer must be adjacent
  1639                                  ;VolName:	times 11 db 0 ; db 11 dup (?),0	; volume name
  1640                                  		; 18/07/2024
  1641 00000100 000000                  VolName:	db	3 dup(0)
  1642 00000103 0000000000000000        DevName:	db	8 dup(0)
  1643                                  	
  1644 0000010B 00                      		db	0
  1645 0000010C 00000000                VolSer:		dd	0			; volume serial #
  1646                                  
  1647 00000110 00                      CDevAt:		db	0
  1648                                  
  1649                                  ;BadFatSubst	label	byte
  1650                                  ;		subst	<CHAR,DATARES:DrvLet>	; drive letter
  1651                                  
  1652 00000111 01                      BadFatSubst:	db	1
  1653 00000112 [F000]                  		dw	DrvLet
  1654                                  
  1655                                  ;PutBackSubst	label	byte
  1656                                  ;PutBackComSpec	subst	<STRING,>		  ; comspec string
  1657                                  ;		subst	<CHAR,DATARES:PutBackDrv> ; drive to put it in
  1658                                  
  1659 00000114 02                      PutBackSubst:	db	2
  1660 00000115 0000                    PutBackComSpec:	dw	0
  1661 00000117 01                      		db	1
  1662 00000118 [1A01]                  		dw	PutBackDrv
  1663                                  
  1664 0000011A 20                      PutBackDrv:	db	' '			; drive letter
  1665                                  
  1666                                  ;ExecErrSubst	subst	<STRING,DATARES:SafePathBuffer>
  1667                                  
  1668 0000011B 02                      ExecErrSubst:	db	2
  1669 0000011C [4B03]                  		dw	SafePathBuffer
  1670                                  
  1671 0000011E 00000000                NeedVol:	dd	0	; ptr to volume name from get ext err
  1672 00000122 00                      ErrType: 	db	0	; critical error message style, 0=old, 1=new
  1673                                  
  1674 00000123 00000000                Int_2e_Ret:	dd	0	; magic command executer return address
  1675 00000127 0000                    Save_Pdb:	dw	0
  1676 00000129 0000                    Parent:		dw	0
  1677 0000012B 00000000                OldTerm:	dd	0
  1678 0000012F 0000                    ErrCd_24:	dw	0
  1679 00000131 0000                    Handle01:	dw	0
  1680 00000133 00                      Loading:	db	0
  1681 00000134 0000                    Batch:		dw	0	; assume no batch mode initially
  1682                                  
  1683                                  ;;;;SR;
  1684                                  ;;;; This flag has been added for a gross hack introduced in batch processing. 
  1685                                  ;;;;We use it to indicate that this batch file has no CR-LF before EOF and that
  1686                                  ;;;;we need to fake the CR-LF for the line to be properly processed
  1687                                  ;;;;
  1688                                  ;;;BatchEOF:	db	0
  1689                                  
  1690                                  	; Bugbug: ComSpec should be 64+3+12+1?
  1691                                  	; What's this comspec_end about?
  1692 00000136 00<rep 40h>             ComSpec:	times 64 db 0 ; db 64 dup (0)
  1693 00000176 0000                    ComSpec_End:	dw	0
  1694                                  
  1695                                  ;Trans		label	dword
  1696                                  ;		dw	TRANGROUP:Command
  1697                                  
  1698                                  Trans:		;dw	12Ch
  1699                                  		; MSDOS 5.0 COMMAND.COM RESGROUP:0296h (DATARES:0296h)
  1700 00000178 [2C01]                  		dw	COMMAND ; 16/04/2023
  1701 0000017A 0000                    TrnSeg:		dw	0
  1702                                  
  1703 0000017C 00                      TrnMvFlg:	db	0	; set if transient portion has been moved
  1704                                  
  1705 0000017D 00                      In_Batch:	db	0	; set if we are in batch processing mode
  1706 0000017E 00                      Batch_Abort:	db	0	; set if user wants to abort from batch mode
  1707                                  
  1708 0000017F 00                      ComDrv:		db	0	; drive spec to load autoexec and command
  1709 00000180 0000                    MemSiz:		dw	0
  1710 00000182 0000                    Sum:		dw	0
  1711 00000184 01                      ExtCom:		db	1	; for init, pretend just did an external
  1712 00000185 0000                    RetCode: 	dw	0
  1713 00000187 00                      Crit_Err_Info:	db	0	; hold critical error flags for r,i,f
  1714                                  
  1715                                  
  1716                                  ; The echo flag needs to be pushed and popped around pipes and batch files.
  1717                                  ; We implement this as a bit queue that is shr/shl for push and pop.
  1718                                  
  1719 00000188 01                      EchoFlag:	db	00000001b ; low bit true => echo commands
  1720 00000189 01                      Suppress:	db	1	; used for echo, 1=echo line
  1721 0000018A 0000                    Io_Save: 	dw	0
  1722 0000018C 00                      RestDir: 	db	0
  1723 0000018D 00                      PermCom: 	db	0	; true => permanent command
  1724                                  ;SemiPermCom:	dw      -1	; MSDOS 6.0 COMMAND.COM 
  1725                                  				; true => semi-permanent command (/K)
  1726 0000018E 0000                    SingleCom:	dw	0	; true => single command version
  1727 00000190 FFFF                    VerVal:		dw	-1
  1728 00000192 00                      fFail:		db	0	; true => fail all int 24s
  1729 00000193 00                      IfFlag:		db	0	; true => IF statement in progress
  1730                                  
  1731 00000194 00                      ForFlag: 	db	0	; true => FOR statement in progress
  1732 00000195 0000                    ForPtr:		dw	0
  1733                                  
  1734 00000197 0000                    Nest:		dw	0	; nested batch file counter
  1735 00000199 00                      Call_Flag:	db	0	; no CALL (batch command) in progress
  1736 0000019A 00                      Call_Batch_Flag: db	0
  1737 0000019B 0000                    Next_Batch:	dw	0	; address of next batch segment
  1738 0000019D 00                      NullFlag:	db	0	; flag if no command on command line
  1739 0000019E 00<rep 5h>              FUCase_Addr:	times 5 db 0 ; db 5 dup (0)
  1740                                  				; buffer for file ucase address
  1741                                  ; Bugbug: don't need crit_msg_ anymore?
  1742                                  
  1743 000001A3 0000                    Crit_Msg_Off:	dw	0	; saved critical error message offset
  1744 000001A5 0000                    Crit_Msg_Seg:	dw	0	; saved critical error message segment
  1745 000001A7 0000                    Dbcs_Vector_Addr: dw	0	; DBCS vector offset
  1746 000001A9 0000                    		 dw	0	; DBCS vector segment
  1747 000001AB 0000                    Append_State:	dw	0	; current state of append
  1748                                  				;  (if Append_Flag is set)
  1749 000001AD 00                      Append_Flag:	db	0	; set if append state is valid
  1750 000001AE 00                      Re_Out_App:	db	0
  1751 000001AF 00<rep 50h>             Re_OutStr:	times 64+3+13 db 0 ; db 64+3+13 dup (?)
  1752                                  
  1753                                  ; We flag the state of COMMAND in order to correctly handle the ^Cs at
  1754                                  ; various times. Here is the breakdown:
  1755                                  ;
  1756                                  ;   INITINIT	We are in the init code.
  1757                                  ;   INITSPECIAL We are in the date/time prompt
  1758                                  ;   INITCTRLC	We are handling a ^C already.
  1759                                  ;
  1760                                  ; If we get a ^C in the initialization but not in the date/time prompt, we
  1761                                  ; ignore the ^C. This is so the system calls work on nested commands.
  1762                                  ;
  1763                                  ; If we are in the date/time prompt at initialization, we stuff the user's
  1764                                  ; input buffer with a CR to pretend an empty response.
  1765                                  ;
  1766                                  ; If we are already handling a ^C, we set the carry bit and return to the user
  1767                                  ; (ourselves). We can then detect the carry set and properly retry the
  1768                                  ; operation.
  1769                                  
  1770                                  InitFlag:	;db	1
  1771 000001FF 01                      		db	INITINIT
  1772                                  
  1773                                  ; Note: these two bytes are referenced as a word
  1774 00000200 00                      PipeFlag:	db	0
  1775 00000201 00                      PipeFiles:	db	0
  1776                                  
  1777                                  ; (rdata.asm, msdos 6.0, 1992)
  1778                                  ; ----------------------------------------------------------------------------
  1779                                  ; 09/01/2023 - MSDOS 5.0 COMMAND.COM RESGROUP:0320h (DATARES:0320h)
  1780                                  
  1781                                  
  1782                                  ;;SR
  1783                                  ;; Pipe1 & Pipe2 now need to store full-fledged pathnames
  1784                                  ;;
  1785                                  ;
  1786                                  ;; Bugbug: can we find any way around maintaining these
  1787                                  ;; large buffers?
  1788                                  ;
  1789                                  ;Pipe1		db	67+12 dup (?)
  1790                                  ;Pipe2		db	67+12 dup (?)
  1791                                  ;
  1792                                  ;PipePtr 	dw	?
  1793                                  ;
  1794                                  ;PipeStr 	db	129 dup (?)
  1795                                  ;
  1796                                  ;EndPipe	label	byte	; marks end of buffers; M004
  1797                                  ;
  1798                                  ;;SR;
  1799                                  ;; We can move our EndInit code into above buffers. This way, the code will
  1800                                  ;;automatically be discarded after init.
  1801                                  ;;
  1802                                  ;; M004; We overlap our code with the Pipe buffers located above by changing
  1803                                  ;; M004; the origin.
  1804                                  ;;
  1805                                  ;	ORG	Pipe1	; M004
  1806                                  ;
  1807                                  ;; Bugbug: really need a procedure header for EndInit, describing
  1808                                  ;; what it expects, what it does.
  1809                                  ;
  1810                                  
  1811                                  ; 09/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  1812                                  
  1813                                  Pipe1	equ	EndInit
  1814                                  Pipe2	equ	Pipe1+67+12
  1815                                  PipePtr	equ	Pipe2+67+12
  1816                                  PipeStr	equ	PipePtr+2
  1817                                  EndPipe	equ	PipeStr+129	; EndInit+289
  1818                                  
  1819                                  ; Bugbug: really need a procedure header for EndInit, describing
  1820                                  ; what it expects, what it does.
  1821                                  
  1822                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0320h 
  1823                                  
  1824                                  EndInit:
  1825 00000202 1E                      	push	ds
  1826 00000203 06                      	push	es		; save segments
  1827 00000204 0E                      	push	cs
  1828 00000205 1F                      	pop	ds		
  1829                                  	;assume	ds:RESGROUP
  1830                                  
  1831                                  ; M004; Save size of transient here before INIT segment is deallocated
  1832                                  
  1833 00000206 8B16[7E1C]              	mov	dx,[TrnSize]		; M004
  1834                                  ;M027
  1835                                  ; These variables are also defined in the INIT segment and need to be saved
  1836                                  ;before we resize
  1837                                  ;
  1838 0000020A A1[721C]                	mov	ax,[OldEnv]	; Old Environment seg ;M027
  1839 0000020D 8B1E[6E1C]              	mov	bx,[EnvSiz]	; Size of new environment ;M027
  1840 00000211 8B0E[741C]              	mov	cx,[UsedEnv]	; Size of old environment ;M027
  1841 00000215 50                      	push	ax		; Save all these values ;M027
  1842 00000216 53                      	push	bx		; M027
  1843 00000217 51                      	push	cx		; M027
  1844                                  
  1845                                  
  1846                                  ; Bugbug: push ds, pop es here.
  1847                                  	;mov	bx,ds
  1848                                  	;mov	es,bx		; es = RESGROUP
  1849                                  	; 09/01/2023
  1850 00000218 1E                      	push	ds
  1851 00000219 07                      	pop	es
  1852                                  
  1853                                  ;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  1854                                  ; code + data for low COMMAND
  1855                                  
  1856 0000021A 8B1E[A103]              	mov	bx,[ResSize]	; Total size of resident
  1857 0000021E B44A                    	mov	ah,4Ah
  1858                                  	;mov	ah,SETBLOCK
  1859 00000220 CD21                    	int	21h		; Set block to resident size
  1860                                  
  1861                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  1862                                  		; ES = segment address of block to change
  1863                                  		; BX = new size in paragraphs
  1864                                  
  1865                                  ;We check if this is for autoexec.bat (PermCom = 1). If so, we then
  1866                                  ;allocate a new batch segment, copy the old one into new batchseg and free
  1867                                  ;the old batchseg. Remember that the old batchseg was allocated on top of the
  1868                                  ;transient and we will leave a big hole if TSRs are loaded by autoexec.bat
  1869                                  ;
  1870                                  ; Bugbug: also describe why we alloc & copy batch seg BEFORE environment.
  1871                                  	
  1872 00000222 803E[8D01]01            	cmp	byte [PermCom],1 ; permanent command.com?
  1873 00000227 7530                    	jne	short adjust_env ; no, do not free batchseg
  1874                                  
  1875 00000229 833E[3401]00            	cmp	word [Batch],0	 ; was there a valid batchseg?
  1876 0000022E 7429                    	je	short adjust_env ; no, dont juggle
  1877                                  
  1878                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0Fh)/16 ; batchseg size
  1879                                  	; 21/01/2023
  1880 00000230 BB0400                  	mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  1881                                  	;mov	bx,4	; 09/01/2023
  1882                                  			; (MSDOS 5.0 COMMAND COM RESGROUP:0350h)
  1883 00000233 B448                    	mov	ah,48h
  1884                                  	;mov	ah,ALLOC
  1885 00000235 CD21                    	int	21h
  1886                                  
  1887                                  		; DOS - 2+ - ALLOCATE MEMORY
  1888                                  		; BX = number of 16-byte paragraphs desired
  1889                                  
  1890                                  ; Bugbug: I just had a thought. If DOS or SHARE or somebody leaves
  1891                                  ; a hole, the batch segment COULD already be in the ideal place. We
  1892                                  ; could be making it worse! We're second-guessing where memory
  1893                                  ; allocations go, which might not be such a great idea. Is there
  1894                                  ; a strategy, short of doing something even worse like diddling
  1895                                  ; arena headers, where we can minimize the possibility of fragmentation
  1896                                  ; under all cases? Hmm..
  1897                                  	
  1898 00000237 7220                    	jc	short adjust_env ; no memory, use old batchseg
  1899                                  
  1900 00000239 8EC0                    	mov	es,ax		 ; es = New batch segment
  1901 0000023B 31FF                    	xor	di,di
  1902 0000023D 31F6                    	xor	si,si
  1903                                  
  1904 0000023F 1E                      	push	ds
  1905 00000240 8E1E[3401]              	mov	ds,[Batch]	 ; ds = Old Batch Segment
  1906                                  	;assume	ds:nothing
  1907                                  	;mov	cx,SIZE BatchSegment
  1908                                  	; 23/01/2023
  1909                                  	;mov	cx,BATCHSEGMENT.SIZE
  1910                                  	;;mov	cx,33	; 09/01/2023
  1911                                  	;		; (MSDOS 5.0 COMMAND COM RESGROUP:0364h)
  1912                                  	;
  1913                                  	;add	cx,16		 ; for the filename
  1914                                  	; 20/04/2023
  1915 00000244 B93100                  	mov	cx,BATCHSEGMENT.SIZE+16
  1916                                  
  1917                                  	; Bugbug: 16? Shouldn't this be a common equate or something?
  1918                                  	; It's sure be bad if we copied more bytes than the batch segment
  1919                                  	; holds!
  1920                                  	
  1921 00000247 FC                      	cld
  1922 00000248 F3A4                    	rep	movsb
  1923 0000024A 1F                      	pop	ds
  1924                                  	;assume	ds:RESGROUP
  1925                                  
  1926 0000024B 8CC1                    	mov	cx,es		; save new batch segment 
  1927 0000024D 8E06[3401]              	mov	es,[Batch]
  1928 00000251 B449                    	mov	ah,49h
  1929                                  	;mov	ah,DEALLOC
  1930 00000253 CD21                    	int	21h		; free the old batch segment
  1931                                  
  1932                                  	; Bugbug: should we check for error?
  1933                                  
  1934 00000255 890E[3401]              	mov	[Batch],cx	; store new batch segment address
  1935                                  
  1936                                  adjust_env:
  1937 00000259 59                      	pop	cx		; cx = size of old env ;M027
  1938 0000025A 5B                      	pop	bx		; bx = size of new env needed ;M027
  1939 0000025B 5D                      	pop	bp		; bp = old env seg ;M027
  1940                                  
  1941                                  ;Allocate the correct size for the environment
  1942                                  
  1943 0000025C B448                    	mov	ah,48h
  1944                                  	;mov	ah,ALLOC
  1945 0000025E CD21                    	int	21h		; get memory
  1946 00000260 7264                    	jc	short nomem_err	; out of memory,signal error
  1947                                  	
  1948                                  	; Bugbug: why not continue, leaving environment where it is?
  1949                                  
  1950 00000262 A3[2703]                	mov	[EnvirSeg],ax	; Store new environment segment
  1951                                  	;;mov	[ds:2Ch],ax
  1952                                  	;mov	[2Ch],ax
  1953                                  	;mov	[PDB_Environ],ax ; Put new env seg in PSP
  1954 00000265 A32C00                  	mov	[PDB.ENVIRON],ax
  1955 00000268 8EC0                    	mov	es,ax		; es = address of allocated memory
  1956                                  	;assume	es:nothing
  1957                                  
  1958                                  ;Copy the environment to the newly allocated segment
  1959                                  
  1960 0000026A 1E                      	push	ds
  1961 0000026B 8EDD                    	mov	ds,bp		; ds = Old environment segment
  1962                                  	;assume	ds:nothing
  1963                                  
  1964 0000026D 31F6                    	xor	si,si
  1965 0000026F 89F7                    	mov	di,si		; Start transfer from 0
  1966                                  
  1967 00000271 FC                      	cld
  1968 00000272 F3A4                    	rep	movsb		; Do the copy
  1969                                  
  1970 00000274 1F                      	pop	ds		; ds = RESGROUP
  1971                                  	;assume	ds:RESGROUP
  1972                                  
  1973                                  ; We have to free the old environment block if it was allocated by INIT
  1974                                  
  1975                                  ; Bugbug: is this only for the case when we were NOT passed an environment,
  1976                                  ; or does it also apply to passed environments?
  1977                                  
  1978                                  ;M036
  1979                                  ; Free up old env segment always because this is a copy passed by Exec and
  1980                                  ; takes up memory that is never used
  1981                                  
  1982                                  ;M044
  1983                                  ; Go back to the old strategy of not freeing the environment. Freeing it leaves
  1984                                  ; a hole behind that Ventura does not like. Basically, Ventura gives strange
  1985                                  ; errors if it gets a memory alloc that it is below its load segment. The
  1986                                  ; freed environment creates a large enough hole for some of its allocs to fit
  1987                                  ; in
  1988                                  
  1989                                  	;cmp	byte [AllocedEnv],0 ; has env been allocated by INIT?
  1990                                          ;je	short no_free	    ; no, do not free it
  1991                                  	; 21/01/2023
  1992                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0398h
  1993 00000275 803E[521C]00            	cmp	byte [AllocedEnv],0 ; flag - old environment segment
  1994 0000027A 7506                    	jne	short no_free 
  1995                                  
  1996 0000027C 8EC5                    	mov	es,bp
  1997 0000027E B449                    	mov	ah,49h
  1998                                  	;mov	ah,DEALLOC
  1999 00000280 CD21                    	int	21h		    ; Free it
  2000                                  no_free:
  2001                                  
  2002                                  ; M004; Start of changes
  2003                                  
  2004                                  ; Move the transient now. We will allocate the biggest block available
  2005                                  ; now and move the transient to the top of the block. We will then
  2006                                  ; deallocate this block. When the resident starts executing, it will
  2007                                  ; hopefully allocate this block again and find the transient intact.
  2008                                  
  2009 00000282 C606[7C01]01            	mov	byte [TrnMvFlg],1 ; Indicate that transient has been moved
  2010 00000287 06                      	push	es
  2011                                  	;;mov	si,offset ResGroup:TranStart
  2012                                  	; 09/01/2023
  2013                                  	;mov	si,2320h	; MSDOS 5.0 COMMAND.COM RESGROUP:03ABh
  2014 00000288 BE0022                  	mov	si,TRANSTART	; (End of the resident portion)
  2015                                  	;mov	di,0
  2016 0000028B 31FF                    	xor	di,di ; 0
  2017                                  	;;mov	cx,offset TranGroup:TranSpaceEnd ; size to move
  2018                                  	;mov	cx,98C5h
  2019 0000028D B91496                  	mov	cx,TRANSPACEEND
  2020                                  	
  2021                                  ; Find the largest block available
  2022                                  
  2023 00000290 BBFFFF                  	mov	bx,0FFFFh
  2024 00000293 B448                    	mov	ah,48h
  2025                                  	;mov	ah,ALLOC
  2026 00000295 CD21                    	int	21h
  2027                                  
  2028                                  ; dx = size of transient saved previously 
  2029                                  
  2030 00000297 39D3                    	cmp	bx,dx		; enough memory?
  2031 00000299 722B                    	jb	short nomem_err	; not enough memory for transient
  2032                                  
  2033 0000029B B448                    	mov	ah,48h
  2034                                  	;mov	ah,ALLOC
  2035 0000029D CD21                    	int	21h		; get the largest block
  2036 0000029F 7225                    	jc	short nomem_err	; something is really screwed up
  2037                                  
  2038 000002A1 50                      	push	ax		; save memory address
  2039 000002A2 01D8                    	add	ax,bx		; ax = top of my memory block
  2040 000002A4 29D0                    	sub	ax,dx		; less size of transient
  2041 000002A6 A3[7A01]                	mov	[TrnSeg],ax	; save transient segment
  2042 000002A9 8EC0                    	mov	es,ax		;
  2043 000002AB 58                      	pop	ax		; restore our seg addr
  2044                                  
  2045                                  ; Everything is set for a move. We need to move in the reverse direction to
  2046                                  ; make sure we dont overwrite ourselves while copying
  2047                                  
  2048 000002AC 01CE                    	add	si,cx
  2049 000002AE 4E                      	dec	si
  2050 000002AF 01CF                    	add	di,cx
  2051 000002B1 4F                      	dec	di
  2052 000002B2 FD                      	std
  2053 000002B3 F3A4                    	rep	movsb
  2054 000002B5 FC                      	cld
  2055                                  
  2056                                  ; Now we have to free up this block so that resident can get hold of it
  2057                                  
  2058 000002B6 8EC0                    	mov	es,ax
  2059 000002B8 B449                    	mov	ah,49h
  2060                                  	;mov	ah,DEALLOC
  2061 000002BA CD21                    	int	21h		; release the memory block
  2062                                  
  2063                                  ; M004; End of changes
  2064                                  
  2065                                  	;mov	InitFlag,FALSE	; indicate INIT is done
  2066                                  	; 09/01/2023
  2067 000002BC C606[FF01]00            	mov	byte [InitFlag],0	
  2068                                  
  2069 000002C1 07                      	pop	es
  2070 000002C2 1F                      	pop	ds
  2071                                  	;assume	ds:nothing
  2072                                  	
  2073                                  	; Bugbug: did we need to save & restore seg reg's during EndInit?
  2074                                  	
  2075 000002C3 E9B8FD                  	jmp	LodCom_Trap	; allocate transient
  2076                                  
  2077                                  nomem_err:
  2078                                  
  2079                                  ;We call the error routine which will never return. It will either exit
  2080                                  ;with an error ( if not the first COMMAND ) or just hang after an error 
  2081                                  ;message ( if first COMMAND )
  2082                                  
  2083 000002C6 E9F518                  	jmp	Alloc_error
  2084                                  
  2085                                  ;EndCodeInit:	; label	byte		; M004
  2086                                  
  2087                                  	; 16/04/2023
  2088                                  	EndCodeInit equ $
  2089                                  
  2090                                  ;; M004; Check if the EndInit code will fit into the Pipe buffers above.
  2091                                  ;; M004; If not, we signal an assembly error
  2092                                  ;
  2093                                  ;IF2
  2094                                  ;	IF ($ GT EndPipe)
  2095                                  ;		.err
  2096                                  ;		%out	"ENDINIT CODE TOO BIG"
  2097                                  ;	ENDIF
  2098                                  ;ENDIF
  2099                                  
  2100                                  ;; M004; Set the origin back to what it was at the end of the buffers
  2101                                  ;;
  2102                                  ;		ORG	EndPipe		; M004
  2103                                  
  2104                                  ; 09/01/2023
  2105                                  
  2106                                  ; MSDOS 5.0 COMMAND.COM - CODERES:03EDh
  2107                                  ;	times 84 db 0	; db (EndPipe-EndCodeInit) dup(0)
  2108                                  
  2109                                  ; 16/04/2023
  2110                                  	FillBytes equ EndPipe - EndCodeInit
  2111                                  
  2112                                  ;%if EndCodeInit<EndPipe ; if (EndCodeInit < (EndInit+289))
  2113                                  ; 16/04/2023
  2114                                  %if FillBytes>0
  2115                                  	;times EndPipe - EndCodeInit db 0
  2116 000002C9 00<rep 5Ah>             	times FillBytes db 0
  2117                                  %endif
  2118                                  
  2119                                  ; 09/01/2023 - Retrodos v4.0 (& v4.1)
  2120                                  ; MSDOS 5.0 COMMAND.COM - CODERES:0441h ; EndInit+289
  2121                                  
  2122                                  ;InPipePtr	dw	offset DATARES:Pipe1	; 320h
  2123                                  ;OutPipePtr	dw	offset DATARES:Pipe2	; 36Fh
  2124                                  
  2125 00000323 [0202]                  InPipePtr:	dw	Pipe1 ; 320h for MSDOS 5.0 COMMAND.COM
  2126 00000325 [5102]                  OutPipePtr:	dw	Pipe2 ; 36Fh for MSDOS 5.0 COMMAND.COM
  2127                                  
  2128                                  Exec_Block:	; label	byte	; the data block for exec calls
  2129 00000327 0000                    EnvirSeg:	dw	0
  2130                                  Com_Ptr:	; label	dword
  2131 00000329 8000                    		dw	80h	; point at unformatted parameters
  2132 0000032B 0000                    		dw	0
  2133                                  Com_Fcb1:	; label	dword
  2134 0000032D 5C00                    		dw	5Ch
  2135 0000032F 0000                    		dw	0
  2136                                  Com_Fcb2:	; label	dword
  2137 00000331 6C00                    		dw	6Ch
  2138 00000333 0000                    		dw	0
  2139                                  
  2140                                  ; variables passed to transient
  2141                                  TranVars:	; label	byte
  2142                                  		;dw	offset DATARES:HeadFix_Trap
  2143 00000335 [9200]                  		dw	HeadFix_Trap
  2144 00000337 0000                    MySeg:		dw	0	; put our own segment here
  2145 00000339 0000                    LTpa:		dw	0	; will store tpa segment here
  2146 0000033B 2F                      RSwitChar:	db	"/"
  2147 0000033C 5C                      RDirChar:	db	"\"
  2148                                  		;dw	offset DATARES:Issue_Exec_Call
  2149 0000033D [C800]                  		dw	Issue_Exec_Call
  2150 0000033F 0000                    MySeg1:		dw	0
  2151                                  		;dw	offset DATARES:RemCheck_Trap
  2152 00000341 [6A00]                  		dw	RemCheck_Trap
  2153 00000343 0000                    MySeg2:		dw	0
  2154 00000345 0000                    ResTest: 	dw	0
  2155 00000347 0000                    Res_Tpa:	dw	0	; original tpa (not rounded to 64k)
  2156                                  TranVarEnd:	; label	byte
  2157                                  
  2158 00000349 0000                    OldErrNo:	dw	0
  2159                                  
  2160                                  ;* NOTE: MsgBuffer and SafePathBuffer use the same memory.
  2161                                  ;  MsgBuffer is only used while a command is being executed.
  2162                                  ;  SafePathBuffer is no longer needed, since it is used for
  2163                                  ;  unsuccessful program launches.
  2164                                  
  2165                                  MsgBuffer:	; label	byte	; buffer for messages from disk
  2166                                  SafePathBuffer: ; label	byte	; resident pathname for EXEC
  2167                                  	;Bugbug: Why so big a buffer?
  2168                                  		;db	64+3+13 dup (0)	; path + 'd:\' 'file.ext' + null
  2169 0000034B 00<rep 50h>             		times	64+3+13 db 0		
  2170                                  
  2171                                  LENMSGORPATHBUF	equ $ - MsgBuffer
  2172                                  
  2173 0000039B 00000000                Int2fHandler:	dd	0	; address of next int 2f handler
  2174 0000039F 0000                    ResMsgEnd:	dw	0	; holds offset of msg end (end of resident)
  2175                                  
  2176                                  ;SR;
  2177                                  ; The three vars below have been added for a pure COMMAND.COM
  2178                                  
  2179 000003A1 0000                    ResSize:	dw	0
  2180                                  
  2181                                  ;SR;
  2182                                  ; Moved the stack here from the code segment
  2183                                  ;
  2184                                  ; bugbug: Why this odd stack size? And what should stack size be?
  2185                                  	
  2186                                  		;db	(80h - 3) dup (?)
  2187 000003A3 90                      align 2
  2188 000003A4 00<rep 7Ch>             		times	124 db 0		
  2189                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:053Eh (offset RStack)
  2190                                  RStack:		; label	word
  2191 00000420 0000                    OldDS:		dw	0	; keeps old ds value when jumping to
  2192                                  				; resident code segments
  2193                                  ;LoadHiFlg	db	0	; Flag set to 1 if UMB loading enabled ; M003
  2194                                  
  2195                                  ; include highvar.inc		; Add variables for 6.0 loadhigh functionality
  2196                                  ; -------------------------------
  2197                                  
  2198                                  ; fInHigh  - Is set to 1 during HideUMBs(), and back to zero in UnHideUMBs().
  2199                                  ; fUmbTiny - Is set to 1 if the user has specified /S on the command line.
  2200                                  ; SegLoad  - Segment address for first UMB specified; set automatically.
  2201                                  ; UmbLoad  - The load UMB number; for example, this is 3 if the user has
  2202                                  ;            given a command-line like "/L:3,500;4"
  2203                                  ; UmbUsed  - An array of characters, each of which is 1 if the UMB
  2204                                  ;            matching its index number was specified on the command-line;
  2205                                  ;            for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
  2206                                  ;            will be set to 1. All others will be set to 0.
  2207                                  ; UmbSize  - An array of words, each of which is interpreted as a size
  2208                                  ;            specified by the user for a UMB (in the above example, all
  2209                                  ;            elements would be zero save UmbSize[3], which would be 500.
  2210                                  ; fm_umb   - Set to the old UMB link-state (0x80 or 0x00)
  2211                                  ; fm_strat - Set to the old memory-allocation strategy (0$00000???)
  2212                                  ; fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
  2213                                  ;            for details).
  2214                                  
  2215                                  ; - MSDOS 6.0 COMMAND.COM -
  2216                                  ;; To keep track of which UMBs were specified on the DH/LH command lines, and
  2217                                  ;; to keep track of the minimum sizes given for each, there're two arrays kept
  2218                                  ;; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
  2219                                  ;; big. 16 should be around 14 too many for most users, so there's no expected
  2220                                  ;; space problem (it's just such a nice round number, eh?).
  2221                                  
  2222                                  ;MAXUMB	equ	16
  2223                                  
  2224                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2225                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0540h (DATARES:0540h)
  2226                                  
  2227 00000422 00                      fInHigh:	db	0
  2228                                  
  2229                                  ; MSDOS 6.0 COMMAND.COM
  2230                                  ;fUmbTiny:	db	0
  2231                                  ;SegLoad:	dw	0
  2232                                  ;UmbLoad:	db	0
  2233                                  ;UmbUsed:	db	times MAXUMB db 0 ; db MAXUMB dup (?)
  2234                                  ;UmbSize:	dw	times MAXUMB dw 0 ; dw MAXUMB dup (?)
  2235                                  ;fm_umb:	db	0
  2236                                  ;fm_strat:	db	0
  2237                                  ;fm_argc:	db	0
  2238                                  
  2239                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
  2240                                  ; UmbLoad is set to the UMB number given.
  2241                                  
  2242                                  ;*** MESSAGES
  2243                                  ;    and other translatable text
  2244                                  
  2245                                  ; include comrmsg.inc	; M00
  2246                                  ; ------------------------------
  2247                                  
  2248                                  ; 10/01/2023 - Retro DOS v4.0 COMMAND.COM
  2249                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0541h (DATARES:0541h)
  2250                                  
  2251 00000423 41                      ABORT_CHAR:	db 'A'
  2252 00000424 52                      RETRY_CHAR:	db 'R'
  2253 00000425 49                      IGNORE_CHAR:	db 'I'
  2254 00000426 46                      FAIL_CHAR:	db 'F'
  2255 00000427 59                      YES_CHAR:	db 'Y'
  2256 00000428 4E                      NO_CHAR:	db 'N'
  2257 00000429 05                      REQ_ABORT:	db 5
  2258 0000042A 41626F7274              		db 'Abort'
  2259 0000042F 07                      REQ_RETRY:	db 7
  2260 00000430 2C205265747279          		db ', Retry'
  2261 00000437 08                      REQ_IGNORE:	db 8
  2262 00000438 2C2049676E6F7265        		db ', Ignore'
  2263 00000440 06                      REQ_FAIL:	db 6
  2264 00000441 2C204661696C            		db ', Fail'
  2265 00000447 01                      REQ_END:	db 1
  2266 00000448 3F                      		db '?'
  2267 00000449 08                      MREAD:		db 8
  2268 0000044A 72656164696E6700        		db 'reading', 0
  2269 00000452 08                      MWRITE:		db 8
  2270 00000453 77726974696E6700        		db 'writing', 0
  2271 0000045B 0E                      MDRIVE:		db 14
  2272 0000045C 202531206472697665-     		db ' %1 drive %2',0Dh,0Ah
  2272 00000465 2025320D0A         
  2273 0000046A 0F                      MDEVICE:	db 15
  2274 0000046B 202531206465766963-     		db ' %1 device %2',0Dh,0Ah
  2274 00000474 652025320D0A       
  2275 0000047A 26                      MVOLSERIAL:	db 38
  2276 0000047B 506C6561736520696E-     		db 'Please insert volume %1 serial %2-%3',0Dh,0Ah
  2276 00000484 7365727420766F6C75-
  2276 0000048D 6D6520253120736572-
  2276 00000496 69616C2025322D2533-
  2276 0000049F 0D0A               
  2277 000004A1 25                      BADFATMSG:	db 37
  2278 000004A2 46696C6520616C6C6F-     		db 'File allocation table bad, drive %1',0Dh,0Ah
  2278 000004AB 636174696F6E207461-
  2278 000004B4 626C65206261642C20-
  2278 000004BD 64726976652025310D-
  2278 000004C6 0A                 
  2279 000004C7 15                      COMBAD:		db 21
  2280 000004C8 496E76616C69642043-     		db 'Invalid COMMAND.COM',0Dh,0Ah
  2280 000004D1 4F4D4D414E442E434F-
  2280 000004DA 4D0D0A             
  2281 000004DD 21                      PUTBACKMSG:	db 33
  2282 000004DE 496E73657274206469-     		db 'Insert disk with %1 in drive %2',0Dh,0Ah
  2282 000004E7 736B20776974682025-
  2282 000004F0 3120696E2064726976-
  2282 000004F9 652025320D0A       
  2283 000004FF 21                      PROMPT:		db 33
  2284 00000500 507265737320616E79-     		db 'Press any key to continue . . .',0Dh,0Ah
  2284 00000509 206B657920746F2063-
  2284 00000512 6F6E74696E7565202E-
  2284 0000051B 202E202E0D0A       
  2285 00000521 1C                      ENDBATMES:	db 28
  2286 00000522 0D0A                    		db 0Dh,0Ah
  2287 00000524 5465726D696E617465-     		db 'Terminate batch job (Y/N)?'
  2287 0000052D 206261746368206A6F-
  2287 00000536 622028592F4E293F   
  2288 0000053E 13                      EXECEMES:	db 19
  2289 0000053F 43616E6E6F74206578-     		db 'Cannot execute %1',0Dh,0Ah
  2289 00000548 65637574652025310D-
  2289 00000551 0A                 
  2290 00000552 13                      EXEBAD:		db 19
  2291 00000553 4572726F7220696E20-     		db 'Error in EXE file',0Dh,0Ah
  2291 0000055C 4558452066696C650D-
  2291 00000565 0A                 
  2292 00000566 22                      TOOBIG:		db 34
  2293 00000567 50726F6772616D2074-     		db 'Program too big to fit in memory',0Dh,0Ah
  2293 00000570 6F6F2062696720746F-
  2293 00000579 2066697420696E206D-
  2293 00000582 656D6F72790D0A     
  2294 00000589 16                      NOHANDMES:	db 22
  2295 0000058A 0D0A                    		db 0Dh,0Ah
  2296 0000058C 4E6F20667265652066-     		db 'No free file handles'
  2296 00000595 696C652068616E646C-
  2296 0000059E 6573               
  2297 000005A0 1A                      RBADNAM:	db 26
  2298 000005A1 42616420436F6D6D61-     		db 'Bad Command or file name',0Dh,0Ah
  2298 000005AA 6E64206F722066696C-
  2298 000005B3 65206E616D650D0A   
  2299                                  ACCDENIED:	; 14/01/2023
  2300                                  		; 10/01/2023
  2301                                  ACCDEN:		;db 14
  2302                                  		;db 'Access denied '
  2303                                  		; 19/07/2024 - PCDOS 7.1
  2304 000005BB 0D                      		db 13
  2305 000005BC 416363657373206465-     		db 'Access denied'
  2305 000005C5 6E696564           
  2306 000005C9 19                      BMEMMES:	db 25
  2307 000005CA 0D0A4D656D6F727920-     		db 0Dh,0Ah,'Memory allocation error'
  2307 000005D3 616C6C6F636174696F-
  2307 000005DC 6E206572726F72     
  2308 000005E3 26                      HALTMES:	db 38
  2309 000005E4 0D0A                    		db 0Dh,0Ah
  2310 000005E6 43616E6E6F74206C6F-     		db 'Cannot load COMMAND, system halted',0Dh,0Ah
  2310 000005EF 616420434F4D4D414E-
  2310 000005F8 442C2073797374656D-
  2310 00000601 2068616C7465640D0A 
  2311 0000060A 21                      FRETMES:	db 33
  2312 0000060B 0D0A                    		db 0Dh,0Ah,
  2313 0000060D 43616E6E6F74207374-     		db 'Cannot start COMMAND, exiting',0Dh,0Ah
  2313 00000616 61727420434F4D4D41-
  2313 0000061F 4E442C206578697469-
  2313 00000628 6E670D0A           
  2314 0000062C 2E                      PATRICIDE:	db 46
  2315 0000062D 0D0A                    		db 0Dh,0Ah
  2316 0000062F 546F70206C6576656C-     		db 'Top level process aborted, cannot continue'
  2316 00000638 2070726F6365737320-
  2316 00000641 61626F727465642C20-
  2316 0000064A 63616E6E6F7420636F-
  2316 00000653 6E74696E7565       
  2317 00000659 0D0A                    		db 0Dh,0Ah
  2318 0000065B 02                      NEWLINE:	db 2
  2319 0000065C 0D0A                    		db 0Dh, 0Ah
  2320                                  
  2321                                  ; 10/01/2023
  2322                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:077Dh
  2323                                  
  2324 0000065E [420B]                  MsgPtrLists:	dw EXTMSGPTRS		; extended error messages
  2325 00000660 0100                    		dw 1
  2326 00000662 [FD08]                  		dw PARSMSGPTRS		; parse	error messages
  2327 00000664 0100                    		dw 1
  2328 00000666 [420B]                  		dw EXTMSGPTRS		; critical error messages
  2329 00000668 0100                    		dw 1
  2330 0000066A 0000                    		dw 0			; File system error messages
  2331 0000066C 0000                    		dw 0			; are not supported.
  2332 0000066E [8800]                  		dw MsgRetrv_Trap	; disk retriever routine
  2333 00000670 0000                    MySeg3:		dw 0			; segment of retriever routine
  2334                                  
  2335                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0791h
  2336                                  
  2337 00000672 13                      CRMSG0:		db 19
  2338 00000673 57726974652070726F-     		db 'Write protect error'
  2338 0000067C 74656374206572726F-
  2338 00000685 72                 
  2339 00000686 0C                      CRMSG1:		db 12
  2340 00000687 496E76616C69642075-     		db 'Invalid unit'
  2340 00000690 6E6974             
  2341 00000693 09                      CRMSG2:		db 9
  2342 00000694 4E6F74207265616479      		db 'Not ready'
  2343 0000069D 16                      CRMSG3:		db 22
  2344 0000069E 496E76616C69642064-     		db 'Invalid device request'
  2344 000006A7 657669636520726571-
  2344 000006B0 75657374           
  2345 000006B4 0A                      CRMSG4:		db 10
  2346 000006B5 44617461206572726F-     		db 'Data error'
  2346 000006BE 72                 
  2347 000006BF 21                      CRMSG5:		db 33
  2348 000006C0 496E76616C69642064-     		db 'Invalid device request parameters'
  2348 000006C9 657669636520726571-
  2348 000006D2 756573742070617261-
  2348 000006DB 6D6574657273       
  2349 000006E1 0A                      CRMSG6:		db 10
  2350 000006E2 5365656B206572726F-     		db 'Seek error'
  2350 000006EB 72                 
  2351 000006EC 12                      CRMSG7:		db 18
  2352 000006ED 496E76616C6964206D-     		db 'Invalid media type'
  2352 000006F6 656469612074797065 
  2353 000006FF 10                      CRMSG8:		db 16
  2354 00000700 536563746F72206E6F-     		db 'Sector not found'
  2354 00000709 7420666F756E64     
  2355 00000710 1A                      CRMSG9:		db 26
  2356 00000711 5072696E746572206F-     		db 'Printer out of paper error'
  2356 0000071A 7574206F6620706170-
  2356 00000723 6572206572726F72   
  2357 0000072B 11                      CRMSG10:	db 17
  2358 0000072C 577269746520666175-     		db 'Write fault error'
  2358 00000735 6C74206572726F72   
  2359 0000073D 10                      CRMSG11:	db 16
  2360 0000073E 52656164206661756C-     		db 'Read fault error'
  2360 00000747 74206572726F72     
  2361 0000074E 0F                      CRMSG12:	db 15
  2362 0000074F 47656E6572616C2066-     		db 'General failure'
  2362 00000758 61696C757265       
  2363 0000075E 11                      CRMSG13:	db 17
  2364 0000075F 53686172696E672076-     		db 'Sharing violation'
  2364 00000768 696F6C6174696F6E   
  2365 00000770 0E                      CRMSG14:	db 14
  2366 00000771 4C6F636B2076696F6C-     		db 'Lock violation'
  2366 0000077A 6174696F6E         
  2367 0000077F 13                      CRMSG15:	db 19
  2368 00000780 496E76616C69642064-     		db 'Invalid disk change'
  2368 00000789 69736B206368616E67-
  2368 00000792 65                 
  2369 00000793 0F                      CRMSG16:	db 15
  2370 00000794 46434220756E617661-     		db 'FCB unavailable'
  2370 0000079D 696C61626C65       
  2371 000007A3 19                      CRMSG17:	db 25
  2372 000007A4 53797374656D207265-     		db 'System resource exhausted'
  2372 000007AD 736F75726365206578-
  2372 000007B6 68617573746564     
  2373 000007BD 12                      CRMSG18:	db 18
  2374 000007BE 436F64652070616765-     		db 'Code page mismatch'
  2374 000007C7 206D69736D61746368 
  2375 000007D0 0C                      CRMSG19:	db 12
  2376 000007D1 4F7574206F6620696E-     		db 'Out of input'
  2376 000007DA 707574             
  2377 000007DD 17                      CRMSG20:	db 23
  2378 000007DE 496E73756666696369-     		db 'Insufficient disk space'
  2378 000007E7 656E74206469736B20-
  2378 000007F0 7370616365         
  2379                                  
  2380                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0914h
  2381                                  
  2382 000007F5 [7206]                  CRITMSGPTRS:	dw CRMSG0
  2383 000007F7 [8606]                  		dw CRMSG1
  2384 000007F9 [9306]                  		dw CRMSG2
  2385 000007FB [9D06]                  		dw CRMSG3
  2386 000007FD [B406]                  		dw CRMSG4
  2387 000007FF [BF06]                  		dw CRMSG5
  2388 00000801 [E106]                  		dw CRMSG6
  2389 00000803 [EC06]                  		dw CRMSG7
  2390 00000805 [FF06]                  		dw CRMSG8
  2391 00000807 [1007]                  		dw CRMSG9
  2392 00000809 [2B07]                  		dw CRMSG10
  2393 0000080B [3D07]                  		dw CRMSG11
  2394 0000080D [4E07]                  		dw CRMSG12
  2395 0000080F [5E07]                  		dw CRMSG13
  2396 00000811 [7007]                  		dw CRMSG14
  2397 00000813 [7F07]                  		dw CRMSG15
  2398 00000815 [9307]                  		dw CRMSG16
  2399 00000817 [A307]                  		dw CRMSG17
  2400 00000819 [BD07]                  		dw CRMSG18
  2401 0000081B [D007]                  		dw CRMSG19
  2402 0000081D [DD07]                  		dw CRMSG20
  2403                                  
  2404                                  		; 14/01/2023
  2405                                  DataresEnd:	; MSDOS 5.0 COMMAND.COM - DATARES:093Eh (RESGROUP:093Eh)
  2406                                  
  2407 0000081F 13                      PAERRMSG0:	db 19
  2408 00000820 546F6F206D616E7920-     		db 'Too many parameters'
  2408 00000829 706172616D65746572-
  2408 00000832 73                 
  2409 00000833 1A                      PAERRMSG1:	db 26
  2410 00000834 526571756972656420-     		db 'Required parameter missing'
  2410 0000083D 706172616D65746572-
  2410 00000846 206D697373696E67   
  2411 0000084E 0E                      PAERRMSG2:	db 14
  2412 0000084F 496E76616C69642073-     		db 'Invalid switch'
  2412 00000858 7769746368         
  2413 0000085D 0F                      PAERRMSG3:	db 15
  2414 0000085E 496E76616C6964206B-     		db 'Invalid keyword'
  2414 00000867 6579776F7264       
  2415 0000086D 01                      PAERRMSG4:	db 1
  2416 0000086E 20                      		db 20h
  2417 0000086F 24                      PAERRMSG5:	db 36
  2418 00000870 506172616D65746572-     		db 'Parameter value not in allowed range'
  2418 00000879 2076616C7565206E6F-
  2418 00000882 7420696E20616C6C6F-
  2418 0000088B 7765642072616E6765 
  2419                                  PAERRMSG6:	; 10/01/2023
  2420 00000894 1B                      PAERRMSG7:	db 27
  2421 00000895 506172616D65746572-     		db 'Parameter value not allowed'
  2421 0000089E 2076616C7565206E6F-
  2421 000008A7 7420616C6C6F776564 
  2422                                  ;PAERRMSG7:	db 27
  2423                                  ;		db 'Parameter value not allowed'
  2424 000008B0 1C                      PAERRMSG8:	db 28
  2425 000008B1 506172616D65746572-     		db 'Parameter format not correct'
  2425 000008BA 20666F726D6174206E-
  2425 000008C3 6F7420636F72726563-
  2425 000008CC 74                 
  2426 000008CD 11                      PAERRMSG9:	db 17
  2427 000008CE 496E76616C69642070-     		db 'Invalid parameter'
  2427 000008D7 6172616D65746572   
  2428 000008DF 1D                      PAERRMSG10:	db 29
  2429 000008E0 496E76616C69642070-     		db 'Invalid parameter combination'
  2429 000008E9 6172616D6574657220-
  2429 000008F2 636F6D62696E617469-
  2429 000008FB 6F6E               
  2430                                  
  2431                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0A38h
  2432                                  
  2433 000008FD [1F08]                  PARSMSGPTRS:	dw PAERRMSG0
  2434 000008FF [3308]                  		dw PAERRMSG1
  2435 00000901 [4E08]                  		dw PAERRMSG2
  2436 00000903 [5D08]                  		dw PAERRMSG3
  2437 00000905 [6D08]                  		dw PAERRMSG4
  2438 00000907 [6F08]                  		dw PAERRMSG5
  2439 00000909 [9408]                  		dw PAERRMSG6
  2440 0000090B [9408]                  		dw PAERRMSG7
  2441 0000090D [B008]                  		dw PAERRMSG8
  2442 0000090F [CD08]                  		dw PAERRMSG9
  2443 00000911 [DF08]                  		dw PAERRMSG10
  2444                                  ; 21/04/2023
  2445                                  NUMPARSMSGS equ ($-PARSMSGPTRS)>>1 ; 14/01/2023
  2446                                  
  2447 00000913 10                      INVLFUNCT:	db 16
  2448 00000914 496E76616C69642066-     		db 'Invalid function'
  2448 0000091D 756E6374696F6E     
  2449 00000924 0E                      FNOTFOUND:	db 14
  2450 00000925 46696C65206E6F7420-     		db 'File not found'
  2450 0000092E 666F756E64         
  2451 00000933 0E                      PNOTFOUND:	db 14
  2452 00000934 50617468206E6F7420-     		db 'Path not found'
  2452 0000093D 666F756E64         
  2453 00000942 13                      TOOMANYOF:	db 19
  2454 00000943 546F6F206D616E7920-     		db 'Too many open files'
  2454 0000094C 6F70656E2066696C65-
  2454 00000955 73                 
  2455                                  ; 14/01/2023
  2456                                  ;ACCDEN:	; 10/01/2023
  2457                                  ;ACCDENIED:	db 14
  2458                                  ;		db 'Access denied '
  2459 00000956 0E                      INVHANDLE:	db 14
  2460 00000957 496E76616C69642068-     		db 'Invalid handle'
  2460 00000960 616E646C65         
  2461 00000965 1F                      MEMCBDEST:	db 31
  2462 00000966 4D656D6F727920636F-     		db 'Memory control blocks destroyed'
  2462 0000096F 6E74726F6C20626C6F-
  2462 00000978 636B73206465737472-
  2462 00000981 6F796564           
  2463 00000985 13                      INSUFFMEM:	db 19
  2464 00000986 496E73756666696369-     		db 'Insufficient memory'
  2464 0000098F 656E74206D656D6F72-
  2464 00000998 79                 
  2465 00000999 1C                      INVMEMBLA:	db 28
  2466 0000099A 496E76616C6964206D-     		db 'Invalid memory block address'
  2466 000009A3 656D6F727920626C6F-
  2466 000009AC 636B20616464726573-
  2466 000009B5 73                 
  2467 000009B6 13                      INVENVIRO:	db 19
  2468 000009B7 496E76616C69642045-     		db 'Invalid Environment'
  2468 000009C0 6E7669726F6E6D656E-
  2468 000009C9 74                 
  2469 000009CA 0E                      INVFORMAT:	db 14
  2470 000009CB 496E76616C69642066-     		db 'Invalid format'
  2470 000009D4 6F726D6174         
  2471 000009D9 1A                      INVFNPARM:	db 26
  2472 000009DA 496E76616C69642066-     		db 'Invalid function parameter'
  2472 000009E3 756E6374696F6E2070-
  2472 000009EC 6172616D65746572   
  2473 000009F4 0C                      INVLDDATA:	db 12
  2474 000009F5 496E76616C69642064-     		db 'Invalid data'
  2474 000009FE 617461             
  2475 00000A01 1B                      INVDRVSPC:	db 27
  2476 00000A02 496E76616C69642064-     		db 'Invalid drive specification'
  2476 00000A0B 726976652073706563-
  2476 00000A14 696669636174696F6E 
  2477 00000A1D 23                      ATRCURDIR:	db 35
  2478 00000A1E 417474656D70742074-     		db 'Attempt to remove current directory'
  2478 00000A27 6F2072656D6F766520-
  2478 00000A30 63757272656E742064-
  2478 00000A39 69726563746F7279   
  2479 00000A41 0F                      NOTSAMDEV:	db 15
  2480 00000A42 4E6F742073616D6520-     		db 'Not same device'
  2480 00000A4B 646576696365       
  2481 00000A51 0D                      NOMOREFIL:	db 13
  2482 00000A52 4E6F206D6F72652066-     		db 'No more files'
  2482 00000A5B 696C6573           
  2483 00000A5F 0B                      FILEXISTS:	db 11
  2484 00000A60 46696C652065786973-     		db 'File exists'
  2484 00000A69 7473               
  2485 00000A6B 1B                      CANTMKDIR:	db 27
  2486 00000A6C 43616E6E6F74206D61-     		db 'Cannot make directory entry'
  2486 00000A75 6B6520646972656374-
  2486 00000A7E 6F727920656E747279 
  2487 00000A87 0E                      FAILINT24:	db 14
  2488 00000A88 4661696C206F6E2049-     		db 'Fail on INT 24'
  2488 00000A91 4E54203234         
  2489 00000A96 15                      TOOMANYRD:	db 21
  2490 00000A97 546F6F206D616E7920-     		db 'Too many redirections'
  2490 00000AA0 726564697265637469-
  2490 00000AA9 6F6E73             
  2491 00000AAC 15                      DUPLREDIR:	db 21
  2492 00000AAD 4475706C6963617465-     		db 'Duplicate redirection'
  2492 00000AB6 207265646972656374-
  2492 00000ABF 696F6E             
  2493 00000AC2 10                      INVPASSWD:	db 16
  2494 00000AC3 496E76616C69642070-     		db 'Invalid password'
  2494 00000ACC 617373776F7264     
  2495 00000AD3 11                      INVLDPARM:	db 17
  2496 00000AD4 496E76616C69642070-     		db 'Invalid parameter'
  2496 00000ADD 6172616D65746572   
  2497 00000AE5 12                      NETDATFAU:	db 18
  2498 00000AE6 4E6574776F726B2064-     		db 'Network data fault'
  2498 00000AEF 617461206661756C74 
  2499 00000AF8 21                      FNOSUPNET:	db 33
  2500 00000AF9 46756E6374696F6E20-     		db 'Function not supported by network'
  2500 00000B02 6E6F7420737570706F-
  2500 00000B0B 72746564206279206E-
  2500 00000B14 6574776F726B       
  2501 00000B1A 27                      RSCNOTINS:	db 39
  2502 00000B1B 526571756972656420-     		db 'Required system component not installed'
  2502 00000B24 73797374656D20636F-
  2502 00000B2D 6D706F6E656E74206E-
  2502 00000B36 6F7420696E7374616C-
  2502 00000B3F 6C6564             
  2503                                  
  2504                                  ; MSDOS 5.0 COMMAND.COM RESGROUP:0C8Ch
  2505                                  
  2506 00000B42 [1309]                  EXTMSGPTRS:	dw INVLFUNCT
  2507 00000B44 [2409]                  		dw FNOTFOUND
  2508 00000B46 [3309]                  		dw PNOTFOUND
  2509 00000B48 [4209]                  		dw TOOMANYOF
  2510 00000B4A [BB05]                  		dw ACCDENIED
  2511 00000B4C [5609]                  		dw INVHANDLE
  2512 00000B4E [6509]                  		dw MEMCBDEST
  2513 00000B50 [8509]                  		dw INSUFFMEM
  2514 00000B52 [9909]                  		dw INVMEMBLA
  2515 00000B54 [B609]                  		dw INVENVIRO
  2516 00000B56 [CA09]                  		dw INVFORMAT
  2517 00000B58 [D909]                  		dw INVFNPARM
  2518 00000B5A [F409]                  		dw INVLDDATA
  2519 00000B5C 0000                    		dw 0
  2520 00000B5E [010A]                  		dw INVDRVSPC
  2521 00000B60 [1D0A]                  		dw ATRCURDIR
  2522 00000B62 [410A]                  		dw NOTSAMDEV
  2523 00000B64 [510A]                  		dw NOMOREFIL
  2524 00000B66 [7206]                  		dw CRMSG0
  2525 00000B68 [8606]                  		dw CRMSG1
  2526 00000B6A [9306]                  		dw CRMSG2
  2527 00000B6C [9D06]                  		dw CRMSG3
  2528 00000B6E [B406]                  		dw CRMSG4
  2529 00000B70 [BF06]                  		dw CRMSG5
  2530 00000B72 [E106]                  		dw CRMSG6
  2531 00000B74 [EC06]                  		dw CRMSG7
  2532 00000B76 [FF06]                  		dw CRMSG8
  2533 00000B78 [1007]                  		dw CRMSG9
  2534 00000B7A [2B07]                  		dw CRMSG10
  2535 00000B7C [3D07]                  		dw CRMSG11
  2536 00000B7E [4E07]                  		dw CRMSG12
  2537 00000B80 [5E07]                  		dw CRMSG13
  2538 00000B82 [7007]                  		dw CRMSG14
  2539 00000B84 [7F07]                  		dw CRMSG15
  2540 00000B86 [9307]                  		dw CRMSG16
  2541 00000B88 [A307]                  		dw CRMSG17
  2542 00000B8A [BD07]                  		dw CRMSG18
  2543 00000B8C [D007]                  		dw CRMSG19
  2544 00000B8E [DD07]                  		dw CRMSG20
  2545 00000B90 0000<rep 28h>           		times 40 dw 0	; db 80 dup(0)
  2546 00000BE0 [5F0A]                  		dw FILEXISTS
  2547 00000BE2 0000                    		dw 0
  2548 00000BE4 [6B0A]                  		dw CANTMKDIR
  2549 00000BE6 [870A]                  		dw FAILINT24
  2550 00000BE8 [960A]                  		dw TOOMANYRD
  2551 00000BEA [AC0A]                  		dw DUPLREDIR
  2552 00000BEC [C20A]                  		dw INVPASSWD
  2553 00000BEE [D30A]                  		dw INVLDPARM
  2554 00000BF0 [E50A]                  		dw NETDATFAU
  2555 00000BF2 [F80A]                  		dw FNOSUPNET
  2556 00000BF4 [1A0B]                  		dw RSCNOTINS
  2557                                  ; ----------------------------------------------------------------------------
  2558                                  	; 17/04/2023
  2559                                  ExtMsgEnd:
  2560                                  
  2561                                  ; 21/04/2023
  2562                                  NUMEXTMSGS equ ($-EXTMSGPTRS)>>1 ; 14/01/2023
  2563                                  
  2564                                  ; ----------------------------------------------------------------------------
  2565                                  
  2566                                  ; 20/04/2023
  2567                                  
  2568 00000BF6 90<rep Ah>              align 16
  2569                                  
  2570                                  ; ----------------------------------------------------------------------------
  2571                                  
  2572                                  ; 10/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2573                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0D40h (CODERES:0000h)
  2574                                  
  2575                                  ; ----------------------------------------------------------------------------
  2576                                  ; SEGMENT - CODERES
  2577                                  ; ----------------------------------------------------------------------------
  2578                                  
  2579                                  ; 11/01/2023
  2580                                  RCODE_START:	
  2581                                  
  2582                                  ; ----------------------------------------------------------------------------
  2583                                  ;***	EXEC error handling
  2584                                  ;
  2585                                  ;	COMMAND has issued an EXEC system call and it has returned an error.
  2586                                  ;	We examine the error code and select an appropriate message.
  2587                                  ; --------------------------
  2588                                  ;	Bugbug:	optimize reg usage in following code? Careful of DX!
  2589                                  ;	Condense the error scan?
  2590                                  ;	RBADNAM is checked by transient, no need here?
  2591                                  ;	Move below Ext_Exec.
  2592                                  ; ----------------------------------------------------------------------------
  2593                                  
  2594                                  Exec_Err:
  2595                                  ;SR;
  2596                                  ; ds,es are setup when the transient jumps to Ext_Exec. So segment regs are
  2597                                  ; in order here
  2598                                  
  2599                                  ;	Bugbug:	can we use byte compares here?
  2600                                  ;	Might be able to use byte msg#s, too.
  2601                                  
  2602                                  ;	Store errors in a 3 or 4 byte table. Msg #s in another.
  2603                                  ;	Speed not high priority here.
  2604                                  
  2605                                  ;	Move this to transient.
  2606                                  
  2607                                  	; 10/01/2023
  2608                                  
  2609                                  	;mov	bx,RBADNAM	; offset DATARES:RBadNam
  2610 00000C00 BA[A005]                	mov	dx,RBADNAM
  2611 00000C03 3C02                    	cmp	al,ERROR_FILE_NOT_FOUND ; 2
  2612 00000C05 741B                    	je	short GotExecEMes		; bad command
  2613                                  	;mov	bx,TOOBIG	; offset DATARES:TooBig
  2614 00000C07 BA[6605]                	mov	dx,TOOBIG
  2615 00000C0A 3C08                    	cmp	al,ERROR_NOT_ENOUGH_MEMORY ; 8
  2616 00000C0C 7414                    	je	short GotExecEMes		; file not found
  2617                                  	;mov	bx,EXEBAD	; offset DATARES:ExeBad
  2618 00000C0E BA[5205]                	mov	dx,EXEBAD
  2619 00000C11 3C0B                    	cmp	al,ERROR_BAD_FORMAT ; 11 ; 0Bh
  2620 00000C13 740D                    	je	short GotExecEMes		; bad exe file
  2621                                  	;mov	bx,ACCDEN	; offset DATARES:AccDen
  2622 00000C15 BA[BB05]                	mov	dx,ACCDEN
  2623 00000C18 3C05                    	cmp	al,ERROR_ACCESS_DENIED ; 5
  2624 00000C1A 7406                    	je	short GotExecEMes		; access denied
  2625                                  
  2626                                  Default_Message:
  2627                                  	;mov	bx,EXECEMES	; offset DATARES:ExecEMes
  2628 00000C1C BA[3E05]                	mov	dx,EXECEMES
  2629                                  						; default message
  2630 00000C1F BE[1B01]                	mov	si,ExecErrSubst ; offset DATARES:ExecErrSubst
  2631                                  						; get address of subst block
  2632                                  GotExecEMes:
  2633                                  	;mov	dx,bx				; DX = ptr to msg
  2634 00000C22 E85006                  	call	RPrint ; invoke	RPrint
  2635 00000C25 EB09                    	jmp	short NoExec
  2636                                  
  2637                                  ; ----------------------------------------------------------------------------
  2638                                  ;***	EXEC call
  2639                                  ;
  2640                                  ;	The transient has set up everything for an EXEC system call.
  2641                                  ;	For cleanliness, we issue the EXEC here in the resident 
  2642                                  ;	so that we may be able to recover cleanly upon success.
  2643                                  ;
  2644                                  ;	CS,DS,ES,SS = DATARES seg addr
  2645                                  ; ----------------------------------------------------------------------------
  2646                                  
  2647                                  Ext_Exec:
  2648                                  ;SR;
  2649                                  ; The words put on the stack by the stub will be popped off when we finally
  2650                                  ;jump to LodCom (by LodCom).
  2651                                  
  2652                                  	; 10/01/2023
  2653                                  	;int	21h			; do the exec
  2654                                  	; 10/01/2023 - MSDOS 5.0 COMMAND.COM - RESGROUP:0D69h (CODERES:0029h)
  2655                                  Exec_Ret:
  2656 00000C27 72D7                    	jc	short Exec_Err		; exec failed
  2657                                  
  2658                                  ;	The exec has completed. Retrieve the exit code.
  2659                                  
  2660                                  Exec_Wait:
  2661 00000C29 B44D                    	mov	ah,4Dh
  2662                                  	;mov	ah,WAITPROCESS ; 4Dh	; get errorlevel
  2663 00000C2B CD21                    	int	21h			; get the return code
  2664                                  	;mov	[cs:RetCode],ax
  2665                                  	; 11/01/2023
  2666 00000C2D A3[8501]                	mov	[RetCode],ax
  2667                                  
  2668                                  ;	See if we can reload the transient. The external command
  2669                                  ;	may have overwritten part of the transient.
  2670                                  
  2671                                  NoExec:
  2672                                  ;SR;
  2673                                  ; ds = es = ss = DATARES when we jump to LodCom
  2674                                  ;
  2675 00000C30 E97701                  	jmp	LodCom
  2676                                  
  2677                                  ; ----------------------------------------------------------------------------
  2678                                  ;***	Int 23 (ctrl-c) handler
  2679                                  ;
  2680                                  ;	This is the default system INT 23 handler. All processes
  2681                                  ;	(including COMMAND) get it by default. There are some
  2682                                  ;	games that are played: We ignore ^C during most of the
  2683                                  ;	INIT code. This is because we may perform an ALLOC and
  2684                                  ;	diddle the header! Also, if we are prompting for date/time
  2685                                  ;	in the init code, we are to treat ^C as empty responses.
  2686                                  ; ---------------------------
  2687                                  ;	Bugbug:	put init ctrl-c handling in init module.
  2688                                  ; ----------------------------------------------------------------------------
  2689                                  
  2690                                  ;SR;
  2691                                  ;The stub has pushed the previous ds and DATARES onto the stack. We get
  2692                                  ;both these values off the stack now
  2693                                  ;
  2694                                  ;ContC	proc	far
  2695                                  
  2696                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  2697                                  
  2698                                  	; 11/01/2023 - Retro DOS v5.40 COMMAND.COM
  2699                                  	; MSDOS 5.0 COMMAND.COM RESGROUP:0D75h (CODERES:0035h)
  2700                                  ContC:
  2701 00000C33 1F                      	pop	ds			; ds = DATARES
  2702                                  ;	assume	ds:DATARES
  2703                                  ;;	pop	word [OldDS]		; OldDS = old ds
  2704                                  
  2705 00000C34 F606[FF01]01            	test	byte [InitFlag],INITINIT ; 1
  2706                                  	;test	byte [cs:INITFLAG],INITINIT ; 1	; in initialization?
  2707 00000C39 740D                    	jz	short NotAtInit		; no
  2708 00000C3B F606[FF01]02            	test	byte [InitFlag],INITSPECIAL ; 2 
  2709                                  	;test	byte [cs:INITFLAG],INITSPECIAL ; 2 ; doing special stuff?
  2710 00000C40 7404                    	jz	short CmdIret		; no, ignore ^C
  2711 00000C42 1F                      	pop	ds			; restore before jumping; M021
  2712                                  	;jmp	RESGROUP:Init_ContC_SpecialCase ; Yes, go handle it
  2713 00000C43 E9E80D                  	jmp	init_contc_specialcase
  2714                                  CmdIret:
  2715                                  ;SR;
  2716                                  ; Restore ds to its previous value
  2717                                  ;
  2718                                  
  2719                                  ;;	mov	ds,[OLdDS]		;
  2720 00000C46 1F                      	pop	ds
  2721 00000C47 CF                      	iret				; yes, ignore the ^C
  2722                                  
  2723                                  NotAtInit:
  2724 00000C48 F606[FF01]04            	test	byte [InitFlag],INITCTRLC ; 4
  2725                                  	;test	byte [cs:INITFLAG],INITCTRLC ; 4 ; are we already in a ^C?
  2726 00000C4D 7411                    	jz	short NotInit 		; nope too.
  2727                                  
  2728                                  ;*	We are interrupting ourselves in this ^C handler. We need
  2729                                  ;	to set carry and return to the user sans flags only if the
  2730                                  ;	system call was a 1-12 one. Otherwise, we ignore the ^C.
  2731                                  
  2732                                  	;cmp	ah,1
  2733                                  	;jb	short CmdIret
  2734                                  	; 19/07/2024
  2735 00000C4F 84E4                    	test	ah,ah
  2736 00000C51 74F3                    	jz	short CmdIret
  2737                                  
  2738 00000C53 80FC0C                  	cmp	ah,12
  2739 00000C56 77EE                    	ja	short CmdIret
  2740                                  
  2741 00000C58 1F                      	pop	ds			;restore ds to old value
  2742 00000C59 83C406                  	add	sp,6			; remove int frame
  2743 00000C5C F9                      	stc
  2744                                  
  2745                                  ;;	mov	ds,[OldDS]		;restore ds to its old value
  2746 00000C5D CA0200                  	retf	2			; remove those flags...
  2747                                  
  2748                                  NotInit:
  2749                                  
  2750                                  ;*	We have now received a ^C for some process (maybe ourselves
  2751                                  ;	but not at INIT).
  2752                                  ;	
  2753                                  ;	Note that we are running on the user's stack!!! Bad news if
  2754                                  ;	any of the system calls below go and issue another INT
  2755                                  ;	24... Massive stack overflow! Another bad point is that
  2756                                  ;	SavHand will save an already saved handle, thus losing a
  2757                                  ;	possible redirection...
  2758                                  ;	
  2759                                  ;	All we need to do is set the flag to indicate nested ^C. 
  2760                                  ;	The above code will correctly flag the ^C diring the
  2761                                  ;	message output and prompting while ignoring the ^C the rest
  2762                                  ;	of the time.
  2763                                  ;	
  2764                                  ;	Clean up: flush disk. If we are in the middle of a batch
  2765                                  ;	file, we ask if he wants to terminate it. If he does, then
  2766                                  ;	we turn off all internal flags and let the DOS abort.
  2767                                  
  2768 00000C60 800E[FF01]04            	or	byte [InitFlag],INITCTRLC ; 4
  2769                                  	;or	byte [cs:INITFLAG],INITCTRLC ; 4 ; nested ^c is on
  2770 00000C65 FB                      	sti
  2771                                  
  2772                                  ;	push	cs			; el yucko! change the user's ds!!
  2773                                  ;	pop	ds
  2774                                  
  2775                                  ;	assume	ds:RESGROUP
  2776                                  
  2777 00000C66 58                      	pop	ax			; discard the old ds value
  2778                                  
  2779 00000C67 A1[8E01]                	mov	ax,[SingleCom]
  2780 00000C6A 09C0                    	or	ax,ax
  2781 00000C6C 7506                    	jnz	short NoReset
  2782 00000C6E 50                      	push	ax
  2783 00000C6F B40D                    	mov	ah,DISK_RESET ; 0Dh
  2784 00000C71 CD21                    	int	21h			; reset disks in case files were open
  2785 00000C73 58                      	pop	ax
  2786                                  
  2787                                  NoReset:
  2788                                  
  2789                                  ;	In the generalized version of FOR, PIPE and BATCH, we would
  2790                                  ;	walk the entire active list and free each segment. Here,
  2791                                  ;	we just free the single batch segment.
  2792                                  
  2793 00000C74 F706[3401]FFFF          	test	word [Batch],-1 ; 0FFFFh
  2794 00000C7A 7451                    	jz	short ContCTerm
  2795 00000C7C 09C0                    	or	ax,ax
  2796 00000C7E 754D                    	jnz	short ContCTerm
  2797 00000C80 E88402                  	call	SavHand
  2798 00000C83 E89203                  	call	AskEnd			; ask if user wants to end batch
  2799                                  
  2800                                  ;	If the carry flag is clear, we do NOT free up the batch file
  2801                                  
  2802 00000C86 733F                    	jnc	short ContBatch
  2803 00000C88 8A0E[8801]              	mov	cl,[EchoFlag]		; get current echo flag
  2804 00000C8C 53                      	push	bx
  2805                                  
  2806                                  ClearBatch:
  2807 00000C8D 8E06[3401]              	mov	es,[Batch]		; get batch segment
  2808                                  	;mov	di,20h
  2809                                  	; 06/06/2023 (BugFix)
  2810 00000C91 BF2000                  	mov	di,BATCHSEGMENT.BatFile ; get offset of batch file name
  2811                                  	; MSDOS 5.0 & MSDOS 6.0 (ES:5)
  2812                                  	;mov	bx,es:BatForPtr		; get old FOR segment
  2813 00000C94 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
  2814                                  	; MSDOS 3.3 ([ES:4])
  2815                                  	;mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:4] ; get old FOR segment
  2816                                  	;
  2817                                  	; 19/07/2024
  2818                                  	;cmp	bx,0			; is a FOR in progress
  2819                                  	;je	short No_Bat_For	; no - don't deallocate
  2820 00000C99 85DB                    	test	bx,bx
  2821 00000C9B 7408                    	jz	short No_Bat_For
  2822                                  
  2823 00000C9D 06                      	push	es			;
  2824 00000C9E 8EC3                    	mov	es,bx			; yes - free it up...
  2825 00000CA0 B449                    	mov	ah,49h
  2826                                  	;mov	ah,DEALLOC ; 49h	;
  2827 00000CA2 CD21                    	int	21h			;
  2828 00000CA4 07                      	pop	es			; restore to batch segment
  2829                                  
  2830                                  No_Bat_For:
  2831                                  	;mov	cl,[es:1]
  2832 00000CA5 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag] ; get old echo flag
  2833                                  	;mov	bx,[es:3]
  2834 00000CAA 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast] ; get old batch segment
  2835 00000CAF B449                    	mov	ah,49h
  2836                                  	;mov	ah,DEALLOC ; 49h	; free it up...
  2837 00000CB1 CD21                    	int	21h
  2838 00000CB3 891E[3401]              	mov	[Batch],bx		; get ready to deallocate next batch
  2839 00000CB7 FF0E[9701]              	dec	word [Nest]		; is there another batch file?
  2840 00000CBB 75D0                    	jnz	short ClearBatch	; keep going until no batch file
  2841                                  
  2842                                  ;	We are terminating a batch file; restore the echo status
  2843                                  
  2844                                  ;Shell_Bat_Cont: 			; continue batch for SHELL
  2845 00000CBD 5B                      	pop	bx
  2846 00000CBE 880E[8801]              	mov	[EchoFlag],cl		; reset echo status
  2847                                  	; 29/05/2018
  2848 00000CC2 C606[0002]00            	mov	byte [PipeFlag],0	; turn off pipeflag
  2849                                  
  2850                                  ContBatch:
  2851 00000CC7 E8A805                  	call	crlf			; print out crlf before returning
  2852 00000CCA E86302                  	call	RestHand
  2853                                  
  2854                                  ;	Yes, we are terminating. Turn off flags and allow the DOS to abort.
  2855                                  
  2856                                  ContCTerm:
  2857 00000CCD 31C0                    	xor	ax,ax			; indicate no read
  2858 00000CCF 89C5                    	mov	bp,ax
  2859                                  
  2860                                  ;	The following resetting of the state flags is good for the
  2861                                  ;	generalized batch processing.
  2862                                  
  2863 00000CD1 A2[9301]                	mov	[IfFlag],al		; turn off iffing
  2864 00000CD4 A2[9401]                	mov	[ForFlag],al		; turn off for processing
  2865 00000CD7 E81C00                  	call	ResPipeOff
  2866 00000CDA 3906[8E01]              	cmp	[SingleCom],ax		; see if we need to set SingleCom
  2867 00000CDE 7406                    	jz	short NoSetSing
  2868 00000CE0 C706[8E01]FFFF          	mov	word [SingleCom],-1	; cause termination on 
  2869                                  					;  pipe, batch, for
  2870                                  NoSetSing:
  2871                                  
  2872                                  ;	If we are doing an internal command, go through the reload process.
  2873                                  ;	If we are doing an external, let DOS abort the process.
  2874                                  ;	In both cases, we are now done with the ^C processing.
  2875                                  
  2876 00000CE6 8026[FF01]FB            	and	byte [InitFlag],~INITCTRLC ; 0FBh
  2877 00000CEB 3806[8401]              	cmp	[ExtCom],al
  2878 00000CEF 7503                    	jnz	short DoDAb		; internal ^c
  2879 00000CF1 E94501                  	jmp	LodCom1
  2880                                  DoDAb:
  2881 00000CF4 F9                      	stc				; tell dos to abort
  2882                                  
  2883                                  ;SR;
  2884                                  ;We dont need to restore ds here because we are forcing DOS to do an abort
  2885                                  ;by setting carry and leaving flags on the stack
  2886                                  
  2887 00000CF5 CB                      	retf				; Leave flags on stack
  2888                                  
  2889                                  ;ContC	endp
  2890                                  
  2891                                  ;SR;
  2892                                  ;ds = DATARES on entry. This routine is called from DskErr and LodCom1 and
  2893                                  ;both have ds = DATARES
  2894                                  
  2895                                  	; 11/01/2023
  2896                                  ResPipeOff:
  2897 00000CF6 50                      	push	ax
  2898 00000CF7 31C0                    	xor	ax,ax
  2899                                  	;xchg	al,[cs:PIPEFLAG]
  2900 00000CF9 8606[0002]              	xchg	al,[PipeFlag]
  2901 00000CFD 08C0                    	or	al,al
  2902 00000CFF 7404                    	jz	short NoPipePop
  2903                                  	;shr	byte [cs:ECHOFLAG],1
  2904 00000D01 D02E[8801]              	shr	byte [EchoFlag],1
  2905                                  NoPipePop:
  2906 00000D05 58                      	pop	ax
  2907 00000D06 C3                      	retn
  2908                                  
  2909                                  ;CODERES ends
  2910                                  
  2911                                  ;=============================================================================
  2912                                  ; COMMAND2.ASM, MSDOS 6.0, 1991
  2913                                  ;=============================================================================
  2914                                  ; 21/09/2018 - Retro DOS v3.0
  2915                                  
  2916                                  ;	title	COMMAND2 - resident code for COMMAND.COM part II
  2917                                  ;	name	COMMAND2
  2918                                  
  2919                                  ;/*
  2920                                  ; *                      Microsoft Confidential
  2921                                  ; *                      Copyright (C) Microsoft Corporation 1991
  2922                                  ; *                      All Rights Reserved.
  2923                                  ; */
  2924                                  
  2925                                  ;
  2926                                  ;	Revision History
  2927                                  ;	================
  2928                                  ;
  2929                                  ; M038	SR  11/5/90	Changed stuff for Novell RPL. These guys cannot
  2930                                  ;			reserve memory by changing int 12h and then give it
  2931                                  ;			back to DOS by changing arenas in autoexec.bat.
  2932                                  ;			This makes command.com reload transient and this
  2933                                  ;			cannot be done at this stage.
  2934                                  ;
  2935                                  
  2936                                  ;CODERES segment public byte
  2937                                  
  2938                                  ;*	If we cannot allocate enough memory for the transient or there
  2939                                  ;	was some other allocation error, we display a message and
  2940                                  ;	then die.
  2941                                  
  2942                                  ;SR;
  2943                                  ; We will have to make sure that at this entry point and at FatalC, 
  2944                                  ;ds = DATARES. All jumps to these points are made from only within this file
  2945                                  ;and so we should be able to do this
  2946                                  
  2947                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  2948                                  ; MSDOS 5.0 COMMAND.COM - RESGROUP:0E4Bh (CODERES:010Bh)
  2949                                  
  2950                                  	;assume	ds:DATARES
  2951                                  BadMemErr:
  2952 00000D07 BA[C905]                	mov	dx,BMEMMES			; DX = ptr to msg
  2953                                  FatalC:
  2954                                  	; 12/01/2023
  2955                                  ;;	push	cs
  2956                                  ;;	pop	ds
  2957                                  ;;	assume	ds:ResGroup
  2958                                  ;	invoke	RPrint
  2959                                  
  2960                                  	; 12/01/2023
  2961                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  2962 00000D0A E86805                  	call	RPrint
  2963                                  
  2964                                  	; MSDOS 3.3
  2965                                  	;call	RDISPMSG
  2966                                  
  2967                                  ;	If this is NOT a permanent (top-level) COMMAND, then we exit;
  2968                                  ;	we can't do anything else!
  2969                                  
  2970 00000D0D 803E[8D01]00            	cmp	byte [PermCom],0
  2971 00000D12 7410                    	je	short FatalRet
  2972                                  
  2973                                  ;	We are a permanent command. If we are in the process of the
  2974                                  ;	magic interrupt (Singlecom) then exit too.
  2975                                  
  2976 00000D14 833E[8E01]00            	cmp	word [SingleCom],0		; if PermCom and SingleCom
  2977 00000D19 7509                    	jne	short FatalRet			; must take int_2e exit
  2978                                  
  2979                                  ;	Permanent command. We can't do ANYthing except halt.
  2980                                  
  2981 00000D1B BA[E305]                	mov	dx,HALTMES			; DX = ptr to msg
  2982                                  	;invoke	RPrint
  2983                                  	; 12/01/2023	
  2984                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  2985 00000D1E E85405                  	call	RPrint	
  2986                                  	; MSDOS 3.3
  2987                                  	;call	RDISPMSG
  2988 00000D21 FB                      	sti
  2989                                  Stall:
  2990 00000D22 EBFE                    	jmp	short Stall			; crash the system nicely
  2991                                  
  2992                                  FatalRet:
  2993 00000D24 BA[0A06]                	mov	dx,FRETMES			; DX = ptr to msg
  2994                                  	;call	RDISPMSG
  2995                                  	; 12/01/2023	
  2996 00000D27 E84B05                  	call	RPrint	
  2997                                  FatalRet2:
  2998 00000D2A 803E[8D01]00            	cmp	byte [PermCom],0		; if we get here and PermCom,
  2999 00000D2F 7517                    	jne	short Ret_2e			; must be int_2e
  3000                                  
  3001                                  ;	Bugbug:	this is where we'd want to unhook int 2F, *if* we
  3002                                  ;	were a non-permanent COMMAND that had hooked it! (Just in 
  3003                                  ;	case we decide to do that.)
  3004                                  
  3005 00000D31 A1[2901]                	mov	ax,[Parent]
  3006                                  	;mov	[16h],ax
  3007 00000D34 A31600                  	mov	[PDB.PARENT_PID],ax	; mov [cs:16h],ax
  3008 00000D37 A1[2B01]                	mov	ax,[OldTerm]
  3009                                  	;mov	[0Ah],ax
  3010 00000D3A A30A00                  	mov	[PDB.EXIT],ax		; mov [cs:0Ah],ax
  3011 00000D3D A1[2D01]                	mov	ax,[OldTerm+2]
  3012                                  	;mov	[0Ch],ax
  3013 00000D40 A30C00                  	mov	[PDB.EXIT+2],ax 	; mov [cs:0Ch],ax
  3014 00000D43 B8004C                  	mov	ax,4C00h
  3015                                  	;mov	ax,(EXIT<<8) ; 4C00h		; return to lower level
  3016 00000D46 CD21                    	int	21h
  3017                                  Ret_2e:
  3018                                  ;SR;
  3019                                  ; We will ensure that ds = DATARES for all entries to this place
  3020                                  ;
  3021                                  
  3022                                  ;;	push	cs
  3023                                  ;;	pop	ds
  3024                                  ;;	assume	ds:resgroup,es:nothing,ss:nothing
  3025                                    	
  3026                                  ;	assume	ds:DATARES
  3027                                  
  3028                                  	;PUSH	CS
  3029                                  	;POP	DS
  3030                                  
  3031 00000D48 C706[8E01]0000          	mov	word [SingleCom],0	; turn off SingleCom
  3032 00000D4E 8E06[4703]              	mov	es,[Res_Tpa]
  3033                                  	;mov	ah,49h	; 12/01/2023
  3034 00000D52 B449                    	mov	ah,DEALLOC
  3035 00000D54 CD21                    	int	21h			; free up space used by transient
  3036 00000D56 8B1E[2701]              	mov	bx,[Save_Pdb]
  3037 00000D5A B450                    	mov	ah,50h
  3038                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3039 00000D5C CD21                    	int	21h			; current process is user
  3040 00000D5E A1[8501]                	mov	ax,[RetCode]
  3041 00000D61 803E[8401]00            	cmp	byte [ExtCom],0
  3042 00000D66 7502                    	jne	short GotECode
  3043 00000D68 31C0                    	xor	ax,ax			; internals always return 0
  3044                                  GotECode:
  3045 00000D6A C606[8401]01            	mov	byte [ExtCom],1		; force external
  3046                                  
  3047                                  ;SR; This is actually returning to the caller. However, the old code had
  3048                                  ;ds = RESGROUP so I guess we can keep ds = DATARES for us.
  3049                                  ;Yes, int 2eh can corrupt all registers so we are ok.
  3050                                  
  3051                                  	; 12/01/2023
  3052 00000D6F FF2E[2301]              	jmp	far [Int_2e_Ret]	; "iret"
  3053                                  
  3054                                  ;***	Int_2e, magic command executer
  3055                                  
  3056                                  Int_2e:
  3057                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  3058                                  ;SR;
  3059                                  ;We are going to come here from the stub with the old ds and DATARES value
  3060                                  ;pushed on the stack in that order. Pick up this stuff off the stack
  3061                                  
  3062                                  	; 12/01/2023 - Retro DOS v4.0 COMMAND.COM
  3063                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0EB7h (CODERES:0177h)
  3064                                  
  3065 00000D73 1F                      	pop	ds			; ds = DATARES
  3066                                  	;assume	ds:DATARES
  3067 00000D74 58                      	pop	ax
  3068                                  ;	;pop	ds:OldDS 		; Save old value of ds
  3069                                  
  3070                                  	;pop	word [cs:Int_2e_Ret]
  3071                                  	;pop	word [cs:Int_2e_Ret+2]	; store return address
  3072                                  	;pop	ax			; chuck flags
  3073 00000D75 8F06[2301]              	pop	word [Int_2e_Ret]
  3074 00000D79 8F06[2501]              	pop	word [Int_2e_Ret+2]
  3075                                  	
  3076 00000D7D 83C402                  	add	sp,2
  3077                                  
  3078                                  ;;	push	cs
  3079                                  ;;	pop	es
  3080                                  
  3081 00000D80 1E                      	push	ds
  3082 00000D81 07                      	pop	es			; es = DATARES
  3083                                  ;	;mov	ds,OldDS
  3084 00000D82 8ED8                    	mov	ds,ax
  3085                                  	;assume	ds:nothing		; ds = old value
  3086                                  
  3087 00000D84 BF8000                  	mov	di,80h
  3088 00000D87 B94000                  	mov	cx,64
  3089                                  ;	Bugbug:	cld
  3090 00000D8A F3A5                    	rep	movsw
  3091 00000D8C B451                    	mov	ah,51h
  3092                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3093 00000D8E CD21                    	int	21h			; get user's header
  3094                                  	; 12/01/2023
  3095 00000D90 26891E[2701]            	mov	[es:Save_Pdb],bx
  3096                                  	;mov	[cs:Save_Pdb],bx
  3097 00000D95 B450                    	mov	ah,50h
  3098                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  3099                                  
  3100                                  ;;	mov	bx,cs
  3101                                  ;SR;
  3102                                  ;Set ds = DATARES because BadMemErr expects this
  3103                                  
  3104                                  	; 12/01/2023
  3105 00000D97 06                      	push	es
  3106 00000D98 1F                      	pop	ds
  3107                                  	;assume	ds:DATARES
  3108                                  
  3109 00000D99 8CDB                    	mov	bx,ds			; es = our PSP now
  3110                                  	;mov	bx,cs
  3111                                  
  3112 00000D9B CD21                    	int	21h			; current process is me
  3113                                  	;mov	word [cs:SingleCom],81h
  3114                                  	;mov	byte [cs:ExtCom],1	; make sure this case forced
  3115                                  	; 12/01/2023
  3116 00000D9D C706[8E01]8100          	mov	word [SingleCom],81h
  3117 00000DA3 C606[8401]01            	mov	byte [ExtCom],1		; make sure this case forced
  3118                                  
  3119                                  ;SR;
  3120                                  ;We can enter LodCom directly after a command shell is terminated or we
  3121                                  ;can fall thru from above. When we enter directly from the stub, the stack
  3122                                  ;has the old ds value and the data seg value on the stack, so that ds can
  3123                                  ;be properly set. To fake this, we push dummy values here.
  3124                                  
  3125                                  	; 12/01/2023
  3126 00000DA8 1E                      	push	ds			; old value of ds
  3127 00000DA9 1E                      	push	ds			; data seg value, ds = DATARES
  3128                                  LodCom: 				; termination handler
  3129 00000DAA 1F                      	pop	ds			; ds = DATARES
  3130                                  	;assume	ds:DATARES
  3131 00000DAB 83C402                  	add	sp,2
  3132                                  ;	;pop	OldDS			; store old ds
  3133                                  	;cmp	ExtCom,0
  3134 00000DAE 803E[8401]00            	cmp	byte [ExtCom],0
  3135                                  	;cmp	byte [cs:ExtCom],0
  3136                                  	;jne	short @f	 	; internal cmd - memory allocated
  3137                                  	; 16/04/2023
  3138 00000DB3 7503                    	jne	short LodCom0 ; 24/09/2018
  3139 00000DB5 E98100                  	jmp	LodCom1
  3140                                  	;je	short LodCom1 ; 25/09/2018	
  3141                                  ;@@:
  3142                                  LodCom0: ; 24/09/2018
  3143 00000DB8 BBFFFF                  	mov	bx,0FFFFh
  3144 00000DBB B448                    	mov	ah,48h	; 12/01/2023
  3145                                  	;mov	ah,ALLOC ; 48h	
  3146 00000DBD CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
  3147                                  				; BX = number of 16-byte paragraphs desired
  3148 00000DBF E80A00                  	call	SetSize
  3149 00000DC2 83C020                  	add	ax,20h
  3150 00000DC5 39C3                    	cmp	bx,ax
  3151 00000DC7 730B                    	jnb	short MemOk		; > 512 byte buffer - good enough
  3152                                  BadMemErrJ:
  3153 00000DC9 E93BFF                  	jmp	BadMemErr		; not enough memory
  3154                                  
  3155                                  ;***	SetSize - get transient size in paragraphs
  3156                                  
  3157                                  SetSize:
  3158                                  	; 12/01/2023
  3159                                  	;;mov	ax,offset TRANGROUP:TranSpaceEnd + 15
  3160                                  	;mov	ax,98D4h		; MSDOS 5.0 COMMAND.COM
  3161 00000DCC B82396                  	mov	ax,TRANSPACEEND+15	; mov AX,4D6Bh ; MSDOS 3.3
  3162 00000DCF B104                    	mov	cl,4
  3163 00000DD1 D3E8                    	shr	ax,cl
  3164 00000DD3 C3                      	retn
  3165                                  
  3166                                  MemOk:
  3167                                  	;assume	ds:DATARES		;we have set ds = DATARES 
  3168                                  
  3169 00000DD4 B448                    	mov	ah,48h
  3170                                  	;mov	ah,ALLOC  ; 48h
  3171 00000DD6 CD21                    	int	21h
  3172 00000DD8 72EF                    	jc	short BadMemErrJ	; memory arenas probably trashed
  3173                                  	;mov	byte [cs:ExtCom],0
  3174                                  	;mov	[cs:Res_Tpa],ax
  3175                                  	; 12/01/2023
  3176 00000DDA C606[8401]00            	mov	byte [ExtCom],0		; flag not to alloc again
  3177 00000DDF A3[4703]                	mov	[Res_Tpa],ax		; save current tpa segment
  3178                                  
  3179 00000DE2 2500F0                  	and	ax,0F000h
  3180 00000DE5 050010                  	add	ax,1000h		; round up to next 64k boundary
  3181 00000DE8 7212                    	jc	short Bad_Tpa		; memory wrap if carry set
  3182                                  
  3183                                  ;	Make sure that new boundary is within allocated range
  3184                                  
  3185                                  	;mov	dx,[cs:Res_Tpa]
  3186                                  	; 12/01/2023
  3187 00000DEA 8B16[4703]              	mov	dx,[Res_Tpa]
  3188 00000DEE 01DA                    	add	dx,bx			; compute maximum address
  3189 00000DF0 39C2                    	cmp	dx,ax			; is 64k address out of range?
  3190 00000DF2 7608                    	jbe	short Bad_Tpa
  3191                                  
  3192                                  ;	Must have 64K of usable space.
  3193                                  
  3194 00000DF4 29C2                    	sub	dx,ax			; compute the usable space
  3195 00000DF6 81FA0010                	cmp	dx,1000h		; is space >= 64k ?
  3196 00000DFA 7303                    	jae	short LTpaSet
  3197                                  Bad_Tpa:
  3198                                  	;mov	ax,[cs:Res_Tpa]
  3199                                  	; 12/01/2023
  3200 00000DFC A1[4703]                	mov	ax,[Res_Tpa]
  3201                                  LTpaSet:
  3202                                  	;mov	[cs:LTPA],ax
  3203                                  	;mov	ax,[cs:Res_Tpa]
  3204                                  	; 12/01/2023
  3205 00000DFF A3[3903]                	mov	[LTpa],ax		; usable tpa is 64k buffer aligned
  3206 00000E02 A1[4703]                	mov	ax,[Res_Tpa]		; actual tpa is buffer allocated
  3207 00000E05 01C3                    	add	bx,ax
  3208                                  	;mov	[cs:MemSiz],bx
  3209 00000E07 891E[8001]              	mov	[MemSiz],bx
  3210 00000E0B E8BEFF                  	call	SetSize
  3211 00000E0E 29C3                    	sub	bx,ax
  3212                                  
  3213                                  	; MSDOS 6.0
  3214                                  
  3215                                  ;M038; Start of changes
  3216                                  ;Changes for Novell RPL. These guys reserve memory for themselves by
  3217                                  ;reducing int 12h size and add this memory to the system at autoexec time by
  3218                                  ;running a program that changes arenas. This changes the largest block that
  3219                                  ;command.com gets and so changes the transient segment. So, command.com does
  3220                                  ;a checksum at the wrong address and thinks that the transient is destroyed
  3221                                  ;and tries to reload it. At this point, no Comspec is defined and so the
  3222                                  ;reload fails, hanging the system. To get around this we just copy the
  3223                                  ;transient from the previous address to the new address(if changed) and
  3224                                  ;then let command.com do the checksum. So, if the transient area is not
  3225                                  ;corrupted, there will not be any reload. In Novell's case, the transient
  3226                                  ;is not really corrupted and so this should work.
  3227                                  
  3228                                  	; 12/01/2023
  3229                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:0F5Ah (CODERES:021Ah)
  3230                                  
  3231 00000E10 3B1E[7A01]              	cmp	bx,[TrnSeg]		; Segment still the same?
  3232 00000E14 7423                    	je	short LodCom1		; yes, dont copy
  3233                                  
  3234                                  ;Check if the new segment is above or below the current move. If the new
  3235                                  ;segment is above (i.e new block is larger than previous block), then we
  3236                                  ;have to move in the reverse direction
  3237                                  
  3238                                  	;mov	cx,98C5h
  3239 00000E16 B91496                  	mov	cx,TRANSPACEEND		; cx = length to move
  3240 00000E19 7707                    	ja	short mov_down		; new seg > old seg, reverse move
  3241 00000E1B 31F6                    	xor	si,si			; normal move
  3242 00000E1D 89F7                    	mov	di,si
  3243 00000E1F FC                      	cld
  3244 00000E20 EB06                    	jmp	short copy_trans
  3245                                  mov_down:
  3246 00000E22 89CE                    	mov	si,cx			; reverse move, start from end
  3247 00000E24 4E                      	dec	si
  3248 00000E25 89F7                    	mov	di,si
  3249 00000E27 FD                      	std
  3250                                  copy_trans:
  3251 00000E28 1E                      	push	ds
  3252 00000E29 06                      	push	es
  3253 00000E2A 8EC3                    	mov	es,bx			; dest segment
  3254 00000E2C 8E1E[7A01]              	mov	ds,[TrnSeg]		; source segment
  3255                                  	;assume	ds:nothing
  3256                                  
  3257 00000E30 F3A4                    	rep	movsb			; copy transient
  3258 00000E32 FC                      	cld
  3259 00000E33 07                      	pop	es
  3260 00000E34 1F                      	pop	ds
  3261                                  	;assume	ds:DATARES
  3262                                  
  3263                                  ;M038; End of changes
  3264                                  
  3265                                  	;mov	[cs:TrnSeg],bx		; new location of transient
  3266                                  	; 12/01/2023
  3267 00000E35 891E[7A01]              	mov	[TrnSeg],bx
  3268                                  
  3269                                  LodCom1:
  3270                                  ;;	mov	ax,cs
  3271                                  ;;	mov	ss,ax
  3272                                  ;SR; At this point ds = DATARES which is where the stack is located
  3273                                  
  3274                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3275                                  	; MSDOS 5.0 (& MSDOS 6.0-6.22)
  3276 00000E39 8CD8                    	mov	ax,ds
  3277 00000E3B 8ED0                    	mov	ss,ax
  3278                                  	;assume	ss:DATARES
  3279                                  	;;mov	sp,offset DATARES:RStack
  3280                                  	;mov	sp,53Eh
  3281 00000E3D BC[2004]                	mov	sp,RStack
  3282                                  
  3283                                  ;;	mov	ds,ax
  3284                                  
  3285                                  	;assume	ds:DATARES
  3286                                  	
  3287                                  	; MSDOS 3.3
  3288                                  	;mov	ax,cs
  3289                                  	;mov	ss,ax
  3290                                  	;mov	sp,RSTACK
  3291                                  	;mov	ds,ax
  3292                                  
  3293 00000E40 E87B00                  	call	HeadFix			; close files, restore stdin, stdout
  3294 00000E43 31ED                    	xor	bp,bp			; flag command ok
  3295 00000E45 B8FFFF                  	mov	ax,-1
  3296 00000E48 8706[9001]              	xchg	ax,[VerVal]
  3297 00000E4C 83F8FF                  	cmp	ax,-1
  3298 00000E4F 7404                    	je	short NoSetVer
  3299 00000E51 B42E                    	mov	ah,2Eh
  3300                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh ; AL has correct value
  3301 00000E53 CD21                    	int	21h 		; DOS - SET VERIFY FLAG
  3302                                  				; DL = 00h, AL = 01h VERIFY on / 00h VERIFY off
  3303                                  NoSetVer:
  3304 00000E55 833E[8E01]FF            	cmp	word [SingleCom],-1
  3305 00000E5A 7503                    	jne	short NoSng
  3306 00000E5C E9CBFE                  	jmp	FatalRet2		; we have finished the single command
  3307                                  NoSng:
  3308 00000E5F E87201                  	call	ChkSum			; check the transient
  3309                                  	;cmp	dx,[Sum]
  3310                                  	;je	short HavCom		; transient ok
  3311                                  	; 12/01/2023
  3312 00000E62 7412                    	jz	short HavCom
  3313                                  Bogus_Com:
  3314 00000E64 C606[3301]01            	mov	byte [Loading],1	; flag DskErr routine
  3315 00000E69 E81E01                  	call	LoadCom
  3316                                  ChkSame:
  3317 00000E6C E86501                  	call	ChkSum
  3318                                  	;cmp	dx,[Sum]
  3319                                  	;je	short HavCom		; same command
  3320                                  	; 12/01/2023
  3321 00000E6F 7405                    	jz	short HavCom
  3322                                  Also_Bogus:
  3323 00000E71 E85801                  	call	WrongCom
  3324 00000E74 EBF6                    	jmp	short ChkSame
  3325                                  
  3326                                  	; 12/01/2023
  3327                                  ;HavCom:
  3328                                  ;	; 25/09/2018
  3329                                  ;	mov     ax,(CHAR_OPER*256) ; 3700h
  3330                                  ;	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  3331                                  ;			; Return: AL = FFh unsupported subfunction
  3332                                  ;			; DL = current switch character
  3333                                  ;	mov     [RSWITCHAR],dl
  3334                                  ;	cmp     dl,'/'
  3335                                  ;	jnz     short USESLASH
  3336                                  ;	;mov	cl,'\'
  3337                                  ;	;mov	[RDIRCHAR],cl
  3338                                  ;	mov	byte [RDIRCHAR],'\'
  3339                                  ;USESLASH:
  3340                                  
  3341                                  HavCom:
  3342                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3343 00000E76 C606[3301]00            	mov	byte [Loading],0		; flag to DskErr
  3344                                  	;;mov	si,offset DATARES:TranVars
  3345                                  	;mov	si,453h		; MSDOS 5.0 COMMAND.COM
  3346 00000E7B BE[3503]                	mov	si,TranVars
  3347                                  	;;mov	di,offset TRANGROUP:HeadCall
  3348                                  	;mov	di,8D75h	; MSDOS 5.0 COMMAND.COM
  3349 00000E7E BF[C38A]                	mov	di,HEADCALL
  3350 00000E81 8E06[7A01]              	mov	es,[TrnSeg]
  3351 00000E85 FC                      	cld
  3352                                  	;mov	cx,467h		; MSDOS 5.0 COMMAND.COM	
  3353 00000E86 B9[4903]                	mov	cx,TranVarEnd
  3354 00000E89 29F1                    	sub	cx,si
  3355 00000E8B F3A4                    	rep	movsb			; transfer info to transient
  3356 00000E8D A1[8001]                	mov	ax,[MemSiz]
  3357 00000E90 A30200                  	mov	[PDB.BLOCK_LEN],ax ; mov [ds:2],ax ; adjust my own header
  3358                                  
  3359                                  ;***	TJmp - jump-off to transient
  3360                                  ;
  3361                                  ;	Public label so debugger can find this spot.
  3362                                  
  3363                                  TJmp:	; 12/01/2023
  3364 00000E93 FF2E[7801]              	jmp	far [Trans]		; jmp dword ptr Trans
  3365                                  
  3366                                  ;***	TRemCheck - far version of RemCheck for transient
  3367                                  
  3368                                  TRemCheck:
  3369                                  	; 12/01/2023
  3370 00000E97 1F                      	pop	ds			; ds = DATARES
  3371 00000E98 83C402                  	add	sp,2			; discard old value of ds
  3372                                  
  3373 00000E9B E80100                  	call	RemCheck
  3374 00000E9E CB                      	retf
  3375                                  
  3376                                  ;***	RemCheck
  3377                                  ;
  3378                                  ;	ENTRY	AL = drive (0=default, 1=A, ...)
  3379                                  ;
  3380                                  ;	EXIT	ZR set if removeable media
  3381                                  ;		ZR clear if fixed media
  3382                                  ;
  3383                                  ;	USED	none
  3384                                  
  3385                                  	; 12/01/2023
  3386                                  RemCheck:
  3387 00000E9F 50                      	push	ax
  3388 00000EA0 53                      	push	bx
  3389 00000EA1 89C3                    	mov	bx,ax
  3390 00000EA3 B80844                  	mov	ax,4408h
  3391                                  	;mov	ax,(IOCTL<<8)+8 ; 4408h
  3392 00000EA6 CD21                    	int	21h		; DOS - 2+ - IOCTL -
  3393 00000EA8 7304                    	jnc	short rcCont		
  3394                                  
  3395                                  ;	If an error occurred, assume the media is non-removable.
  3396                                  ;	AX contains the non-zero error code from the int 21, so
  3397                                  ;	'or ax,ax; sets non-zero. This behavior makes network drives
  3398                                  ;	appear to be non-removable.				
  3399                                  					
  3400 00000EAA 09C0                    	or	ax,ax			
  3401 00000EAC EB05                    	jmp	short ResRegs
  3402                                  rcCont:
  3403 00000EAE 83E001                  	and	ax,1
  3404 00000EB1 F7D0                    	not	ax
  3405                                  ResRegs:
  3406 00000EB3 5B                      	pop	bx
  3407 00000EB4 58                      	pop	ax
  3408 00000EB5 C3                      	retn
  3409                                  
  3410                                  ;***	THeadFix
  3411                                  ;
  3412                                  ;	Far version of HeadFix, called from transient.
  3413                                  
  3414                                  THeadFix:
  3415                                  	; 12/01/2023
  3416 00000EB6 1F                      	pop	ds			; ds = DATARES
  3417 00000EB7 83C402                  	add	sp,2			; discard old ds value on stack
  3418                                  
  3419 00000EBA E80100                  	call	HeadFix
  3420 00000EBD CB                      	retf
  3421                                  
  3422                                  ;***	HeadFix
  3423                                  
  3424                                  	; 12/01/2023
  3425                                  HeadFix:
  3426 00000EBE E83101                  	call	SetVect			; set vectors to our values
  3427                                  
  3428                                  ;	Clean up header
  3429                                  
  3430                                  ;	Bugbug:	optimize:
  3431                                  ;	mov	word ptr ds:Pdb_Jfn_Table,cx  instead of separate bytes
  3432                                  
  3433 00000EC1 31DB                    	xor	bx,bx			; BX = handle = 0
  3434 00000EC3 8B0E[8A01]              	mov	cx,[Io_Save]		; CX = original stdin, stdout
  3435                                  	;mov	dx,[18h] 
  3436 00000EC7 8B161800                	mov	dx,[PDB.JFN_TABLE]	; DX = current stdin, stdout
  3437 00000ECB 38D1                    	cmp	cl,dl
  3438 00000ECD 7408                    	je	short Chk1		; stdin matches
  3439 00000ECF B43E                    	mov	ah,3Eh
  3440                                  	;mov	ah,CLOSE  ; 3Eh
  3441 00000ED1 CD21                    	int	21h			; close stdin
  3442                                  	;mov	[18h],cl
  3443 00000ED3 880E1800                	mov	[PDB.JFN_TABLE],cl	; restore stdin
  3444                                  Chk1:
  3445 00000ED7 43                      	inc	bx			; BX = handle = 1
  3446 00000ED8 38F5                    	cmp	ch,dh			
  3447 00000EDA 7408                    	je	short ChkOtherHand	; stdout matches
  3448 00000EDC B43E                    	mov	ah,3Eh
  3449                                  	;mov	ah,CLOSE
  3450 00000EDE CD21                    	int	21h			; close stdout
  3451                                  	;mov	[19h],ch
  3452 00000EE0 882E1900                	mov	[PDB.JFN_TABLE+1],ch	; restore stdout
  3453                                  ChkOtherHand:
  3454 00000EE4 83C304                  	add	bx,4			; skip handles 2,3,4
  3455 00000EE7 B90F00                  	mov	cx,FILPERPROC-5	; 15	; CX = # handles to close
  3456                                  					; (handles 0-4 already done)
  3457                                  CloseLoop:
  3458 00000EEA B43E                    	mov	ah,3Eh
  3459                                  	;mov	ah,CLOSE ; 3Eh
  3460 00000EEC CD21                    	int	21h			; close each handle
  3461 00000EEE 43                      	inc	bx			; BX = next handle
  3462 00000EEF E2F9                    	loop	CloseLoop
  3463                                  
  3464                                  	; MSDOS 6.0
  3465                                  ;	Bugbug:	since this is for transient code, move it there
  3466                                  	
  3467                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3468                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:103Dh)
  3469                                  
  3470                                  ;	M012: remove this CS -> DS. Must've been missed during
  3471                                  ;	purification.
  3472                                  ;;	push	ds			; save data segment
  3473                                  ;;	push	cs			; get local segment into DS
  3474                                  ;;	pop	ds			;
  3475 00000EF1 803E[AD01]FF            	cmp	byte [Append_Flag],-1	; do we need to reset APPEND?
  3476 00000EF6 750E                    	jne	short Append_Fix_End	; no - just exit
  3477 00000EF8 B807B7                  	mov	ax,0B707h
  3478                                  	;mov	ax,AppendSetState	; set the state of Append
  3479 00000EFB 8B1E[AB01]              	mov	bx,[Append_State] 	; back to the original state
  3480 00000EFF CD2F                    	int	2Fh			;
  3481 00000F01 C606[AD01]00            	mov	byte [Append_Flag],0	; set append flag to invalid
  3482                                  Append_Fix_End: 			;
  3483                                  ;;	pop	ds			; get data segment back
  3484 00000F06 C3                      	retn
  3485                                  
  3486                                  	; MSDOS 3.3
  3487                                  	;retn
  3488                                  
  3489                                  ;***	SavHand - save current program's stdin/out & set to our stderr
  3490                                  ;
  3491                                  ;	ENTRY	nothing
  3492                                  ;
  3493                                  ;	EXIT	nothing
  3494                                  ;
  3495                                  ;	USED	flags
  3496                                  ;
  3497                                  ;	EFFECTS
  3498                                  ;	  Handle01 = current program's stdin,stdout JFN entries
  3499                                  ;	  current program's stdin,stdout set to our stderr
  3500                                  ;
  3501                                  
  3502                                  ;SR;
  3503                                  ; Changed ds = DATARES. We need it to access our JFN_Table
  3504                                  ; Called from ContC ( ds = DATARES ) and DskErr ( ds = DATARES ).
  3505                                  
  3506                                  SavHand:
  3507                                  	;assume	ds:DATARES,es:NOTHING,ss:NOTHING
  3508                                  
  3509                                  	; 12/01/2023
  3510                                  	;push	ds ; MSDOS 3.3
  3511                                  
  3512 00000F07 53                      	push	bx			;preserve registers
  3513 00000F08 50                      	push	ax
  3514                                  	; 12/01/2023
  3515 00000F09 06                      	push	es
  3516 00000F0A 1E                      	push	ds			; save DATARES value
  3517                                  
  3518 00000F0B B451                    	mov	ah,51h
  3519                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3520 00000F0D CD21                    	int	21h			; BX = user's header seg addr
  3521 00000F0F 8EDB                    	mov	ds,bx			; DS = user's header seg addr
  3522                                  	;lds	bx,[34h]	
  3523 00000F11 C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to JFN table
  3524 00000F15 8B07                    	mov	ax,[bx]			; AX = stdin,stdout JFN's
  3525                                  	; 12/01/2023
  3526 00000F17 07                      	pop	es			; es = DATARES
  3527 00000F18 06                      	push	es			; save it back on stack
  3528 00000F19 26A3[3101]              	mov	[es:Handle01],ax	; save user's stdin, stdout
  3529                                  	;mov	[cs:HANDLE01],ax
  3530                                  
  3531                                  ;SR;
  3532                                  ; Use es to address Handle01 & our JFN_Table
  3533                                  
  3534                                  	; 12/01/2023
  3535                                  	;mov	al,[es:1Ah]
  3536 00000F1D 26A01A00                	mov	al,[es:PDB.JFN_TABLE+2] ; AL = COMMAND stderr
  3537                                  	;mov	al,[cs:PDB.JFN_TABLE+2] ; mov al,[cs:1Ah]
  3538 00000F21 88C4                    	mov	ah,al			; AH = COMMAND stderr
  3539 00000F23 8907                    	mov	[bx],ax			; set user's stdin/out to our stderr
  3540                                  	; 12/01/2023
  3541 00000F25 1F                      	pop	ds			; restore registers
  3542 00000F26 07                      	pop	es
  3543 00000F27 58                      	pop	ax
  3544 00000F28 5B                      	pop	bx
  3545                                  	;pop	ds ; MSDOS 3.3
  3546 00000F29 C3                      	retn
  3547                                  
  3548                                  	;assume	ds:DATARES
  3549                                  GetComDsk2:
  3550 00000F2A E81F00                  	call	GetComDsk
  3551 00000F2D E909FF                  	jmp	LodCom1			; memory already allocated
  3552                                  
  3553                                  RestHand:
  3554 00000F30 1E                      	push	ds
  3555 00000F31 53                      	push	bx			; restore stdin, stdout to user
  3556 00000F32 50                      	push	ax
  3557                                  	; 12/01/2023
  3558 00000F33 B451                    	mov	ah,51h
  3559                                  	;mov	ah,GET_CURRENT_PDB ; 51h
  3560 00000F35 CD21                    	int	21h			; point to user's header
  3561 00000F37 A1[3101]                	mov	ax,[Handle01]
  3562 00000F3A 8EDB                    	mov	ds,bx
  3563                                  	;assume ds:NOTHING
  3564                                  	;lds	bx,[34h] 
  3565 00000F3C C51E3400                	lds	bx,[PDB.JFN_Pointer]	; DS:BX = ptr to jfn table
  3566 00000F40 8907                    	mov	[bx],ax			; stuff his old 0 and 1
  3567 00000F42 58                      	pop	ax
  3568 00000F43 5B                      	pop	bx
  3569 00000F44 1F                      	pop	ds
  3570 00000F45 C3                      	retn
  3571                                  
  3572                                  	;assume ds:DATARES,ss:DATARES
  3573                                  Hopeless:
  3574 00000F46 BA[C704]                	mov	dx,COMBAD
  3575 00000F49 E9BEFD                  	jmp	FatalC
  3576                                  
  3577                                  GetComDsk:
  3578 00000F4C A0[7F01]                	mov	al,[ComDrv]
  3579 00000F4F E84DFF                  	call	RemCheck
  3580 00000F52 75F2                    	jnz	short Hopeless		; non-removable media
  3581                                  GetComDsk3:
  3582 00000F54 81FA[C704]              	cmp	dx,COMBAD		; cmp dx,offset DATARES:ComBad
  3583 00000F58 7503                    	jne	short GetComDsk4
  3584                                  	;;mov	dx,offset DATARES:ComBad ; DX = ptr to msg
  3585                                  	; 12/01/2023
  3586                                  	;mov	dx,COMBAD ; (MSDOS 5.0 COMMAND.COM - RESGROUP:10A6h)
  3587                                  	;invoke	RPrint			; say COMMAND is invalid
  3588 00000F5A E81803                  	call	RPrint
  3589                                  	;call	RDISPMSG
  3590                                  
  3591                                  GetComDsk4:
  3592                                  
  3593                                  ;	Bugbug:	there's always a drive here? No need to check?
  3594                                  
  3595 00000F5D 803E[1A01]00            	cmp	byte [PutBackDrv],0	; is there a drive in the comspec?
  3596 00000F62 7509                    	jne	short Users_Drive	; yes - use it
  3597 00000F64 B419                    	mov	ah,19h
  3598                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h ; use default drive
  3599 00000F66 CD21                    	int	21h
  3600 00000F68 0441                    	add	al,"A"                  ; convert to ascii
  3601 00000F6A A2[1A01]                	mov	[PutBackDrv],al		; put in message to print out
  3602                                  
  3603                                  Users_Drive:
  3604                                  	; 12/01/2023
  3605                                  	; MSDOS 6.0
  3606 00000F6D BA[DD04]                	mov	dx,PUTBACKMSG		; prompt for diskette
  3607                                  	;mov	si,offset DATARES:PutBackSubst
  3608                                  	;invoke	RPrint
  3609 00000F70 BE[1401]                	mov	si,PutBackSubst		; containing COMMAND
  3610 00000F73 E8FF02                  	call	RPrint
  3611                                  	;mov	dx,offset DATARES:Prompt
  3612                                  	;invoke	RPrint
  3613 00000F76 BA[FF04]                	mov	dx,PROMPT		; "Press any key"
  3614 00000F79 E8F902                  	call	RPrint
  3615                                  
  3616                                  	; MSDOS 3.3
  3617                                  	;mov	dx,PUTBACKMSG		; prompt for diskette
  3618                                  	;call	RDISPMSG
  3619                                  	;mov	dx,[PUTBACKSUBSTPTR]
  3620                                  	;mov	si,[COMSPEC_END]
  3621                                  	;mov	byte [si+1],'$'
  3622                                  	;call	RDISPMSG
  3623                                  	;mov	byte [si+1],0
  3624                                  	;mov	dx,PROMPT
  3625                                  	;call	RDISPMSG
  3626                                  
  3627                                  	;call	GetRawFlushedByte
  3628                                  	;retn
  3629                                  	; 12/01/2023
  3630                                  	;jmp	short GetRawFlushedByte
  3631                                  
  3632                                  ;***	GetRawFlushedByte - flush world and get raw input
  3633                                  
  3634                                  GetRawFlushedByte:
  3635                                  	; 12/01/2023
  3636 00000F7C B8070C                  	mov	ax,0C07h
  3637                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) | RAW_CON_INPUT ; 0C07h
  3638 00000F7F CD21                    	int	21h			; get char without testing or echo
  3639 00000F81 B8000C                  	mov	ax,0C00h
  3640                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + 0 ; 0C00h
  3641 00000F84 CD21                    	int	21h
  3642                                  
  3643                                  ;	Bugbug:	get rid of this return and the following retz.
  3644                                  
  3645                                  LoadCom_retn:
  3646 00000F86 C3                      	retn
  3647                                  
  3648                                  	; 21/04/2023
  3649                                  TryDoOpen:
  3650 00000F87 E8C2FF                  	call	GetComDsk
  3651                                  	;jmp	short LoadCom
  3652                                  
  3653                                  ;***	LoadCom - load in transient
  3654                                  
  3655                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3656                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:10DAh - CODERES:039Ah)
  3657                                  
  3658                                  LoadCom:
  3659                                  	;assume	ds:DATARES
  3660                                  	
  3661 00000F8A 45                      	inc	bp				; flag command read
  3662                                  
  3663 00000F8B BA[3601]                	mov	dx,ComSpec
  3664 00000F8E B8003D                  	mov	ax,3D00h
  3665                                  	;mov	ax,OPEN<<8	; 3D00h
  3666 00000F91 CD21                    	int	21h				; open command.com
  3667 00000F93 730B                    	jnc	short ReadCom
  3668                                  	;cmp	ax,4
  3669 00000F95 83F804                  	cmp	ax,ERROR_TOO_MANY_OPEN_FILES
  3670 00000F98 75ED                    	jnz	short TryDoOpen
  3671 00000F9A BA[8905]                	mov	dx,NOHANDMES
  3672 00000F9D E96AFD                  	jmp	FatalC				; will never find a handle
  3673                                  
  3674                                  	; 21/04/2023
  3675                                  ;TryDoOpen:
  3676                                  	;call	GetComDsk
  3677                                  	;jmp	short LoadCom
  3678                                  
  3679                                  ReadCom:
  3680 00000FA0 89C3                    	mov	bx,ax				; BX = handle
  3681                                  	;mov	dx,offset RESGROUP:TranStart
  3682 00000FA2 BA0022                  	mov	dx,TRANSTART
  3683 00000FA5 31C9                    	xor	cx,cx				; CX:DX = seek loc
  3684 00000FA7 B80042                  	mov	ax,4200h
  3685                                  	;mov	ax,LSEEK<<8	; 4200h
  3686 00000FAA CD21                    	int	21h
  3687 00000FAC 7210                    	jc	short WrongCom1
  3688                                  	; 12/01/2023
  3689                                  	;;mov	cx,offset TRANGROUP:TranSpaceEnd - 100h
  3690                                  	;mov	cx,97C5h		 ; MSDOS 5.0 COMMAND.COM
  3691 00000FAE B91495                  	mov	cx,TRANSPACEEND-100h ; 4C5Ch (for original MSDOS 3.3!)
  3692 00000FB1 1E                      	push	ds
  3693 00000FB2 8E1E[7A01]              	mov	ds,[TrnSeg]
  3694                                  	;assume	ds:NOTHING
  3695 00000FB6 BA0001                  	mov	dx,100h
  3696 00000FB9 B43F                    	mov	ah,3Fh
  3697                                  	;mov	ah,READ	; 3Fh	
  3698 00000FBB CD21                    	int     21h	; DOS - 2+ - READ FROM FILE WITH HANDLE
  3699                                  			; BX = file handle, CX = number of bytes to read
  3700                                  			; DS:DX -> buffer
  3701 00000FBD 1F                      	pop	ds
  3702                                  	;assume	ds:DATARES
  3703                                  WrongCom1:
  3704 00000FBE 9C                      	pushf
  3705 00000FBF 50                      	push	ax
  3706 00000FC0 B43E                    	mov	ah,3Eh
  3707                                  	;mov	ah,CLOSE ; 3Eh
  3708 00000FC2 CD21                    	int	21h			; close command.com
  3709 00000FC4 58                      	pop	ax
  3710 00000FC5 9D                      	popf
  3711 00000FC6 7204                    	jc	short WrongCom		; error on read
  3712 00000FC8 39C8                    	cmp	ax,cx
  3713                                  	;retz				; size matched
  3714 00000FCA 74BA                    	jz	short LoadCom_retn
  3715                                  WrongCom:
  3716 00000FCC BA[C704]                	mov	dx,COMBAD
  3717 00000FCF E87AFF                  	call	GetComDsk
  3718 00000FD2 EBB6                    	jmp	short LoadCom		; try again
  3719                                  
  3720                                  ;***	ChkSum - compute transient checksum
  3721                                  
  3722                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3723                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1129h
  3724                                  ChkSum:
  3725 00000FD4 1E                      	push	ds
  3726 00000FD5 8E1E[7A01]              	mov	ds,[TrnSeg]
  3727 00000FD9 BE0001                  	mov	si,100h
  3728                                  	;;mov	cx,offset TRANGROUP:TranDataEnd - 100h
  3729                                  	;mov	cx,87C2h
  3730 00000FDC B9[1085]                	mov	cx,TRANDATAEND-100h	; 3E44h (for original MSDOS 3.3!)
  3731                                  Check_Sum:
  3732 00000FDF FC                      	cld
  3733 00000FE0 D1E9                    	shr	cx,1
  3734 00000FE2 31D2                    	xor	dx,dx
  3735                                  Chk:
  3736 00000FE4 AD                      	lodsw
  3737 00000FE5 01C2                    	add	dx,ax
  3738 00000FE7 83D200                  	adc	dx,0
  3739 00000FEA E2F8                    	loop	Chk
  3740                                  
  3741                                  	; 04/05/2023
  3742 00000FEC 1F                      	pop	ds
  3743                                  
  3744                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3745 00000FED 3B16[8201]              	cmp	dx,[Sum]
  3746                                  
  3747                                  	;pop	ds ; 04/05/2023
  3748 00000FF1 C3                      	retn
  3749                                  
  3750                                  ;***	SetVect - set interrupt vectors
  3751                                  
  3752                                  SetVect:
  3753                                  	;mov	dx,offset DATARES:LodCom_Trap 
  3754                                  	; 12/01/2023
  3755 00000FF2 BA[7E00]                	mov	dx,LodCom_Trap
  3756                                  	;mov	dx,LODCOM ; MSDOS 3.3
  3757 00000FF5 B82225                  	mov	ax,2522h
  3758                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8) | 22h  ; 2522h
  3759 00000FF8 89160A00                	mov	[PDB.EXIT],dx	; mov ds:0Ah,dx
  3760 00000FFC 8C1E0C00                	mov	[PDB.EXIT+2],ds ; mov ds:0Ch,ds
  3761 00001000 CD21                    	int	21h
  3762                                  	;mov	dx,offset DATARES:Ctrlc_Trap
  3763 00001002 BA[4A00]                	mov	dx,Ctrlc_Trap
  3764                                  	;mov	dx,CONTC ; MSDOS 3.3
  3765 00001005 FEC0                    	inc	al	; 23h
  3766 00001007 CD21                    	int	21h
  3767                                  	;mov	dx,offset DATARES:CritErr_Trap
  3768 00001009 BA[5500]                	mov	dx,CritErr_Trap
  3769                                  	;mov	dx,CRITERR ; MSDOS 3.3
  3770 0000100C FEC0                    	inc	al	; 24h
  3771 0000100E CD21                    	int	21h
  3772 00001010 C3                      	retn
  3773                                  
  3774                                  	; MSDOS 6.0
  3775                                  ;;SR;
  3776                                  ;We have this to take care of the extra values pushed on the stack by
  3777                                  ;the stub before jumping to LodCom1. We set up ds here and then jump to
  3778                                  ;Lodcom1
  3779                                  
  3780                                  ;public	TrnLodCom1
  3781                                  	; 12/01/2023
  3782                                  TrnLodCom1:
  3783 00001011 1F                      	pop	ds			; ds = DATARES
  3784 00001012 83C402                  	add	sp,2
  3785                                  ;	pop	ds:OldDS
  3786 00001015 E921FE                  	jmp	LodCom1
  3787                                  
  3788                                  ; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM	
  3789                                  
  3790                                  %if 0
  3791                                  
  3792                                  ;***	EndInit - end up initialization sequence
  3793                                  ;
  3794                                  ;	Move the environment to a newly allocated segment.
  3795                                  
  3796                                  	; MSDOS 3.3
  3797                                  ENDINIT:
  3798                                  	push	ds			; save segments
  3799                                  	push	es			;
  3800                                  	push	cs			; get resident segment to DS
  3801                                  	pop	ds			;
  3802                                  	;assume	ds:RESGROUP
  3803                                  	mov	cx,[USEDENV]		; get number of bytes to move
  3804                                  	mov	es,[ENVIRSEG]		; get target environment segment
  3805                                  	;assume	es:NOTHING
  3806                                  
  3807                                  	cmp	byte [RESETENV],1	; do we need to setblock to env end?
  3808                                  	jne	short NO_RESET 		; no - we already did it
  3809                                  	mov	bx,[ENVSIZ]		; BX = size of environ in paragraphs
  3810                                  	push	es			; save environment - just to be sure
  3811                                  	mov	ah,SETBLOCK  ; 4Ah	;
  3812                                  	int	21h             ; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  3813                                  				; ES = segment address of block to change
  3814                                  				; BX = new size in paragraphs
  3815                                  	pop	es
  3816                                  
  3817                                  NO_RESET:
  3818                                  	mov	[PDB.ENVIRON],es ; mov [ds:2Ch],es ; put new environment in my header
  3819                                  	mov	ds,[OLDENV]		; source environment segment
  3820                                  	;assume	ds:NOTHING
  3821                                  	xor	si,si			; set up offsets to start of segments
  3822                                  	xor	di,di
  3823                                  	cld
  3824                                  	rep	movsb			; move it
  3825                                  	xor	ax,ax
  3826                                  	stosb				; make sure it ends with double-null
  3827                                  
  3828                                  	;mov	[cs:InitFlag],FALSE	; turn off init flag
  3829                                  	pop	es
  3830                                  	pop	ds
  3831                                  	jmp	LODCOM			; allocate transient
  3832                                  
  3833                                  	; MSDOS 6.0
  3834                                  
  3835                                  ;The init code has been changed to take care of the new way in which the
  3836                                  ;environment segment is allocated.
  3837                                  ;NB: We can use all the init variables at this point because they are all in
  3838                                  ;RESGROUP
  3839                                  ;Bugbug: The above approach will not work for ROMDOS
  3840                                  
  3841                                  ;IF 0
  3842                                  ;
  3843                                  ;EndInit:
  3844                                  ;	push	ds
  3845                                  ;	push	es			;save segments
  3846                                  ;	push	cs
  3847                                  ;	pop	ds		
  3848                                  ;	assume	ds:RESGROUP
  3849                                  ;;
  3850                                  ;; AllocedEnv flag signals whether it is a passed environment or not
  3851                                  ;;
  3852                                  ;	mov	bx,ds
  3853                                  ;	mov	es,bx			;es = RESGROUP
  3854                                  ;;
  3855                                  ;;ResSize is the actual size to be retained -- only data for HIMEM COMMAND, 
  3856                                  ;; code + data for low COMMAND
  3857                                  ;;
  3858                                  ;	mov	bx,ResSize		;Total size of resident
  3859                                  ;	mov	ah,SETBLOCK
  3860                                  ;	int	21h			;Set block to resident size
  3861                                  ;;
  3862                                  ;;Allocate the correct size for the environment
  3863                                  ;;
  3864                                  ;	mov	bx,EnvSiz		;bx = env size in paras
  3865                                  ;	mov	ah,ALLOC
  3866                                  ;	int	21h			;get memory
  3867                                  ;	jc	nomem_err		;out of memory,signal error
  3868                                  ;
  3869                                  ;	mov	EnvirSeg,ax		;Store new environment segment
  3870                                  ;	mov	ds:PDB_Environ,ax		;Put new env seg in PSP
  3871                                  ;	mov	es,ax			;es = address of allocated memory
  3872                                  ;	assume	es:nothing
  3873                                  ;
  3874                                  ;;
  3875                                  ;;Copy the environment to the newly allocated segment
  3876                                  ;;
  3877                                  ;	mov	cx,UsedEnv		;number of bytes to move
  3878                                  ;
  3879                                  ;	push	ds
  3880                                  ;	mov	ds,OldEnv		;ds = Old environment segment
  3881                                  ;	assume	ds:nothing
  3882                                  ;
  3883                                  ;	xor	si,si
  3884                                  ;	mov	di,si			;Start transfer from 0
  3885                                  ;
  3886                                  ;	cld
  3887                                  ;	rep	movsb			;Do the copy
  3888                                  ;
  3889                                  ;	xor	ax,ax			
  3890                                  ;	stosb				;Make it end with double-null
  3891                                  ;
  3892                                  ;	pop	ds			;ds = RESGROUP
  3893                                  ;	assume	ds:RESGROUP
  3894                                  ;;
  3895                                  ;;We have to free the old environment block if it was allocated by INIT
  3896                                  ;;
  3897                                  ;	cmp     AllocedEnv,0            ;has env been allocated by INIT?
  3898                                  ;	je      no_free                 ;no, do not free it
  3899                                  ;
  3900                                  ;	mov	ax,OldEnv		;Get old environment
  3901                                  ;	mov	es,ax
  3902                                  ;	mov	ah,DEALLOC	
  3903                                  ;	int	21h			;Free it
  3904                                  ;no_free:
  3905                                  ;	mov	InitFlag,FALSE		;indicate INIT is done
  3906                                  ;	
  3907                                  ;	pop	es
  3908                                  ;	pop	ds
  3909                                  ;	assume	ds:nothing
  3910                                  ;	
  3911                                  ;	jmp	LodCom			;allocate transient
  3912                                  ;
  3913                                  ;nomem_err:
  3914                                  ;;
  3915                                  ;;We call the error routine which will never return. It will either exit
  3916                                  ;;with an error ( if not the first COMMAND ) or just hang after an error 
  3917                                  ;;message ( if first COMMAND )
  3918                                  ;;
  3919                                  ;
  3920                                  ;	call	Alloc_error
  3921                                  ;ENDIF
  3922                                  ;
  3923                                  ;CODERES ends
  3924                                  
  3925                                  ;	This TAIL segment is used to produce a PARA aligned label in
  3926                                  ;	the resident group which is the location where the transient
  3927                                  ;	segments will be loaded initial.
  3928                                  
  3929                                  ;TAIL		segment public para
  3930                                  ;
  3931                                  ;		org	0
  3932                                  ;TranStart	label	word
  3933                                  ;		public	TranStart
  3934                                  ;
  3935                                  ;TAIL		ends
  3936                                  ;
  3937                                  
  3938                                  ;	This TAIL segment is used to produce a PARA aligned label in
  3939                                  ;	the transient group which is the location where the exec
  3940                                  ;	segments will be loaded initial.
  3941                                  ;
  3942                                  ;	Bugbug:	Is TRANTAIL used anymore?
  3943                                  
  3944                                  ;TRANTAIL	segment public para
  3945                                  ;
  3946                                  ;		org	0
  3947                                  ;ExecStart   	label   word
  3948                                  ;
  3949                                  ;TRANTAIL    	ends
  3950                                  
  3951                                  %endif ; 12/01/2023
  3952                                  
  3953                                  ;=============================================================================
  3954                                  ; RUCODE.ASM, MSDOS 6.0, 1991
  3955                                  ;=============================================================================
  3956                                  ; 22/09/2018 - Retro DOS v3.0
  3957                                  
  3958                                  ;	title	Localizable code for resident COMMAND
  3959                                  
  3960                                  	;assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  3961                                  
  3962                                  ; ----------------------------------------------------------------------------
  3963                                  ;***	AskEnd - ask user to confirm batch file termination
  3964                                  ;
  3965                                  ;	Confirm with user before freeing batch ...
  3966                                  ;
  3967                                  ;	ENTRY	nothing
  3968                                  ;
  3969                                  ;	EXIT	CY = set if batch termination is confirmed
  3970                                  ;
  3971                                  ;		CY = clear if batch should continue
  3972                                  ;
  3973                                  ;	USED	AX,DX,...
  3974                                  ;
  3975                                  ;	Bugbug:	move this to transient, copy to batch segment.
  3976                                  ;	Bugbug:	or move it to command1 1st.
  3977                                  ;
  3978                                  ;	Bugbug: No_Char and Yes_Char should be constants.
  3979                                  ; ----------------------------------------------------------------------------
  3980                                  
  3981                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  3982                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1169h (CODERES:0429h)
  3983                                  
  3984                                  AskEnd:
  3985                                  	;assume	ds:DATARES
  3986                                  
  3987 00001018 BA[2105]                	mov	dx,ENDBATMES			; DX = message #
  3988 0000101B E85702                  	call	RPrint
  3989                                  	;call	RDISPMSG  ; MSDOS 3.3
  3990 0000101E B8010C                  	mov	ax,0C01h
  3991                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT  ;0C01h
  3992 00001021 CD21                    	int     21h             ; DOS - CLEAR KEYBOARD BUFFER
  3993                                  				; AL must be 01h, 06h, 07h, 08h, or 0Ah.
  3994 00001023 E8E802                  	call	CharToUpper			; change to upper case
  3995 00001026 3A06[2804]              	cmp	al,[NO_CHAR]
  3996 0000102A 7407                    	je	short aeRet			; answer is no (CY is clear)
  3997 0000102C 3A06[2704]              	cmp	al,[YES_CHAR]
  3998 00001030 75E6                    	jne	short AskEnd			; invalid response, try again
  3999 00001032 F9                      	stc					; answer is yes
  4000                                  aeRet:	
  4001 00001033 C3                      	retn
  4002                                  
  4003                                  ; ----------------------------------------------------------------------------
  4004                                  ;***	DskErr - critical error handler
  4005                                  ;
  4006                                  ;	Default critical error handler unless user intercepts int 24h.
  4007                                  ;
  4008                                  ;	ENTRY	int 24h
  4009                                  ;
  4010                                  ;	EXIT
  4011                                  ;
  4012                                  ;	USED
  4013                                  ;
  4014                                  ;	EFFECTS
  4015                                  ; ----------------------------------------------------------------------------
  4016                                  
  4017                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4018                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1185h (CODERES:0445h)
  4019                                  
  4020                                  ;SR; 
  4021                                  ;The stub is going to push the old ds value and the resident data segment
  4022                                  ;onto the stack in that order. Get it off the stack
  4023                                  
  4024                                  ;DskErr	proc	far
  4025                                  DSKERR:
  4026                                  	;assume	ds:NOTHING,es:NOTHING,ss:NOTHING
  4027                                  	; 12/01/2023
  4028 00001034 1F                      	pop	ds			; ds = DATARES
  4029                                  	;assume ds:DATARES
  4030 00001035 8F06[2004]              	pop	word [OldDS]		; save old ds value
  4031                                  
  4032                                  ;CRITERR: ; MSDOS 3.3
  4033 00001039 FB                      	sti
  4034                                  	; 12/01/2023
  4035                                  	;push	ds ; 25/09/2018
  4036 0000103A 06                      	push	es
  4037 0000103B 56                      	push	si
  4038 0000103C 51                      	push	cx
  4039 0000103D 57                      	push	di
  4040 0000103E 51                      	push	cx
  4041 0000103F 50                      	push	ax
  4042                                  
  4043 00001040 1E                      	push	ds			;save our data segment
  4044                                  	;push	cs ; 25/09/2018
  4045 00001041 07                      	pop	es			;es = DATARES
  4046                                  
  4047 00001042 8EDD                    	mov	ds,bp
  4048                                  	;assume	ds:nothing
  4049                                  
  4050                                  	;mov	ax,[si].SDEVATT
  4051 00001044 8B4404                  	mov	ax,[si+SYSDEV.ATT] ; mov ax,[si+4]	
  4052 00001047 268826[1001]            	mov	[es:CDevAt],ah
  4053                                  
  4054                                  	;push	cs
  4055                                  	;pop	es
  4056                                  
  4057 0000104C BF[0301]                	mov	di,DevName
  4058 0000104F B90800                  	mov	cx,8
  4059                                  	;add	si,SDEVNAME  ; add si,10
  4060 00001052 83C60A                  	add	si,SYSDEV.NAME	; save device name (even for block device)
  4061                                  				
  4062 00001055 FC                      	cld
  4063 00001056 F3A4                    	rep	movsb
  4064 00001058 58                      	pop	ax
  4065 00001059 59                      	pop	cx
  4066 0000105A 5F                      	pop	di
  4067                                  
  4068                                  ;	Stack still contains DS and ES.
  4069                                  
  4070                                  ;SR;
  4071                                  ;We need ds = DATARES for SavHand
  4072                                  
  4073                                  	 ;12/01/2023
  4074 0000105B 06                      	push	es
  4075 0000105C 1F                      	pop	ds
  4076                                  	;assume	ds:DATARES
  4077                                  
  4078                                  	;invoke	SavHand		; save user's stdin/out, set to our stderr
  4079 0000105D E8A7FE                  	call	SavHand
  4080                                  
  4081                                  	; 12/01/2023
  4082                                  	; 25/09/2018
  4083                                  	;;push	cs
  4084                                  	;push	es
  4085                                  	;pop	ds		; set up local data segment
  4086                                  	;assume	ds:resgroup
  4087                                  
  4088 00001060 52                      	push	dx
  4089 00001061 E80E02                  	call	crlf
  4090 00001064 5A                      	pop	dx
  4091                                  
  4092                                  ;	Bugbug:	rename Crit_Err_Info to CritErrAH?
  4093                                  
  4094 00001065 8826[8701]              	mov	[Crit_Err_Info],ah	; save critical error flags
  4095                                  
  4096                                  ;	Compute and save ASCII drive letter (nonsense for char devices)
  4097                                  
  4098 00001069 0441                    	add	al,'A'
  4099 0000106B A2[F000]                	mov	[DrvLet],al
  4100                                  
  4101                                  ;	Bugbug:	These labels are awful. Change, especially 'NoHardE'.
  4102                                  
  4103 0000106E F6C480                  	test	ah,80h
  4104 00001071 740A                    	jz	short NoHardE		; it's a disk-device error
  4105 00001073 F606[1001]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4106 00001078 7503                    	jnz	short NoHardE		; it's a character device
  4107 0000107A E9E801                  	jmp	FatErr			; it's a FAT error
  4108                                  
  4109                                  NoHardE:
  4110 0000107D BE[4904]                	mov	si,MREAD		; SI = "read" msg #
  4111 00001080 F6C401                  	test	ah,1
  4112 00001083 7403                    	jz	short SavMes		; it's a read error
  4113 00001085 BE[5204]                	mov	si,MWRITE		; SI = "write" msg #
  4114                                  SavMes:
  4115 00001088 893E[4903]              	mov	[OldErrNo],di		; save critical error code
  4116                                  
  4117                                  ;	Bugbug:	don't need to save/restore all here?
  4118                                  
  4119 0000108C 06                      	push	es
  4120                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4121                                  	;push	ds			; GetExtendedError likes to STOMP
  4122                                  	; 12/01/2023
  4123                                  	; (all registers are changed -in dos service- except bp) *
  4124                                  	;push	bp
  4125                                  	; 19/07/2024
  4126                                  	;push	si
  4127                                  	;push	dx
  4128 0000108D 51                      	push	cx
  4129 0000108E 53                      	push	bx
  4130                                  	; 05/06/2023
  4131 0000108F B459                    	mov	ah,59h ; *
  4132                                  	;mov	ah,GetExtendedError ; 59h ; get extended error info
  4133 00001091 CD21                    	int	21h
  4134 00001093 5B                      	pop	bx
  4135 00001094 59                      	pop	cx
  4136                                  	; 19/07/2024
  4137                                  	;pop	dx
  4138                                  	;pop	si
  4139                                  	; 12/01/2023
  4140                                  	;pop	bp
  4141                                  	; 19/07/2024
  4142                                  	;pop	ds
  4143 00001095 893E[1E01]              	mov	[NeedVol],di		; save possible ptr to volume label
  4144 00001099 8C06[2001]              	mov	[NeedVol+2],es
  4145 0000109D 07                      	pop	es
  4146                                  
  4147                                  ;	Bugbug:	AX has extended error code, so no need to zero AH?
  4148                                  
  4149                                  	; 19/07/2024 - PCDOS 7.1 COMMAND.COM
  4150                                  	;xor	ah,ah
  4151 0000109E 89C7                    	mov	di,ax			; DI = error code
  4152                                  
  4153                                  ; Bugbug: somewhat obsolete documentation?
  4154                                  ;
  4155                                  ; DI is now the correct error code. Classify things to see what we are
  4156                                  ; allowed to report. We convert DI into a 0-based index into a message table.
  4157                                  ; This presumes that the int 24 errors (oldstyle) and new errors (sharing and
  4158                                  ; the like) are contiguous.
  4159                                  
  4160                                  ;	Bugbug:	simplify following code by cmp'ing instead of sub'ing.
  4161                                  ;	Check use of ErrCd_24, though.
  4162                                  
  4163 000010A0 83EF13                  	sub	di,ERROR_WRITE_PROTECT ; 13h
  4164 000010A3 7303                    	jae	short HavCod
  4165                                  
  4166                                  ;	Bugbug:	wouldn't it be better to display the original error msg,
  4167                                  ;	even though it's not a critical error?
  4168                                  
  4169 000010A5 BF0C00                  	mov	di,ERROR_GEN_FAILURE - ERROR_WRITE_PROTECT ; mov di,0Ch
  4170                                  
  4171                                  ; DI now has the mapped error code. Old style errors are:
  4172                                  ;   FOOBAR <read|writ>ing drive ZZ.
  4173                                  ; New style errors are:
  4174                                  ;   FOOBAR
  4175                                  ; We need to figure out which the particular error belongs to.
  4176                                  
  4177                                  HavCod:
  4178 000010A8 C606[2201]00            	mov	byte [ErrType],0	; assume old style
  4179 000010AD 83FF10                  	cmp	di,ERROR_FCB_UNAVAILABLE - ERROR_WRITE_PROTECT  ; cmp di,10h
  4180 000010B0 7405                    	je	short SetStyle
  4181 000010B2 83FF11                  	cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4182 000010B5 7504                    	jne	short GotStyle
  4183                                  
  4184                                  SetStyle:
  4185                                  ;	Bugbug:	use INC
  4186                                  	;mov	byte [ErrType],1		; must be new type
  4187 000010B7 FE06[2201]              	inc	byte [ErrType] ; Retro DOS v3.0 COMMAND.COM - 22/09/2018
  4188                                  
  4189                                  GotStyle:
  4190 000010BB 893E[2F01]              	mov	[ErrCd_24],di
  4191                                  	; 12/01/2023
  4192                                  	; 25/09/2018
  4193                                  	; MSDOS 6.0
  4194 000010BF 83FF14                  	cmp	di,ERROR_HANDLE_DISK_FULL - ERROR_WRITE_PROTECT ; cmp di,14h
  4195                                  	; MSDOS 3.3
  4196                                  	;cmp	di,ERROR_SHARING_BUFFER_EXCEEDED - ERROR_WRITE_PROTECT ; cmp di,11h
  4197                                  
  4198                                  						; If the error message is unknown
  4199 000010C2 7641                    	jbe	short NormalError		;  redirector, continue. Otherwise,
  4200                                  
  4201                                  ; We do not know how to handle this error. Ask IFSFUNC if she knows
  4202                                  ; how to handle things
  4203                                  
  4204                                  ;input to IFSFUNC:    AL=1
  4205                                  ;		      BX=extended error number
  4206                                  ;
  4207                                  ;output from IFSFUNC: AL=error type (0 or 1)
  4208                                  ;			 0=<message> error (read/writ)ing (drive/device) xxx
  4209                                  ;			   Abort, Retry, Ignore
  4210                                  ;			 1=<message>
  4211                                  ;			   Abort, Retry, Ignore
  4212                                  ;		      ES:DI=pointer to message text
  4213                                  ;		      carry set=>no message
  4214                                  
  4215 000010C4 89C7                    	mov	di,ax			; retrieve correct extended error...
  4216 000010C6 B80005                  	mov	ax,0500h		; is the redir there?
  4217 000010C9 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
  4218                                  			; Return: AL = 00h not installed, OK to install
  4219                                  			; 01h not installed, can't install
  4220                                  			; FFh installed
  4221 000010CB 3CFF                    	cmp	al,0FFh
  4222 000010CD 7529                    	jne	short NoHandler		; no, go to NoHandler
  4223                                  
  4224                                  	; 12/01/2023
  4225                                  	; MSDOS 6.0
  4226 000010CF 53                      	push	bx
  4227 000010D0 89FB                    	mov	bx,di			; get ErrType and ptr to error msg
  4228 000010D2 B80105                  	mov	ax,0501h
  4229 000010D5 CD2F                    	int	2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4230 000010D7 5B                      	pop	bx 
  4231 000010D8 721E                    	jc	short NoHandler
  4232                                  	
  4233                                  	; MSDOS 3.3
  4234                                  	;mov     ax,di
  4235                                  	;mov     ah,5
  4236                                  	;int     2Fh	; Multiplex - DOS 3+ CRITICAL ERROR HANDLER -
  4237                                  	;jc      short NOHANDLER
  4238                                  
  4239                                  ;	Bugbug:	need to record error type?
  4240                                  
  4241 000010DA A2[2201]                	mov	[ErrType],al
  4242                                  
  4243 000010DD 1E                      	push	ds
  4244 000010DE 06                      	push	es
  4245 000010DF 1F                      	pop	ds
  4246 000010E0 89FA                    	mov	dx,di
  4247 000010E2 B9FFFF                  	mov	cx,-1			; find end of msg
  4248 000010E5 30C0                    	xor	al,al
  4249                                  
  4250 000010E7 FC                      	cld
  4251 000010E8 F2AE                    	repnz	scasb
  4252                                  
  4253                                  ;	Bugbug:	we can do better than this.
  4254                                  
  4255                                  	;mov	byte [di-1],'$'
  4256                                  	; 19/07/2024
  4257 000010EA 4F                      	dec	di
  4258 000010EB C60524                  	mov	byte [di],'$'
  4259                                  	
  4260                                  	;CALL	RDISPMSG ; MSDOS 3.3
  4261                                  	
  4262 000010EE B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9	; print the message
  4263 000010F0 CD21                    	int	21h
  4264                                  
  4265                                  	;mov	byte [di-1],0			; restore terminal byte
  4266                                  	; 19/07/2024
  4267 000010F2 C60500                  	mov	byte [di],0
  4268                                  
  4269 000010F5 1F                      	pop	ds				; clean up and continue
  4270 000010F6 EB15                    	jmp	short CheckErrType
  4271                                  
  4272                                  ;*	Redir isn't available or doesn't recognize the error.
  4273                                  ;	Restore regs to unextended error.
  4274                                  
  4275                                  NoHandler:
  4276 000010F8 C606[2201]00            	mov	byte [ErrType],0
  4277                                  ;	Bugbug:	won't this break, since we add error_write_protect back in?
  4278 000010FD 8B3E[4903]              	mov	di,[OldErrNo]
  4279 00001101 893E[2F01]              	mov	[ErrCd_24],di
  4280                                  
  4281                                  NormalError:
  4282                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4283                                  	; MSDOS 6.0
  4284 00001105 83C713                  	add	di,ERROR_WRITE_PROTECT
  4285 00001108 87FA                    	xchg	di,dx			; may need dx later
  4286 0000110A E88101                  	call	RPrintCrit		; print error type
  4287                                  
  4288                                  	; MSDOS 3.3
  4289                                  	;shl     di,1
  4290                                  	;mov     di,[CRMSGTBL+di]
  4291                                  	;xchg    di,dx
  4292                                  	;call    RDISPMSG
  4293                                  
  4294                                  CheckErrType:
  4295 0000110D 803E[2201]00            	cmp	byte [ErrType],0	; Check error style...
  4296 00001112 7405                    	je	short ContOld
  4297 00001114 E85B01                  	call	crlf			; if new style then done printing
  4298 00001117 EB31                    	jmp	short Ask
  4299                                  
  4300                                  ContOld:
  4301                                  	; 12/01/2023
  4302                                  	; MSDOS 6.0
  4303 00001119 46                      	inc	si			; DS:SI = ptr to asciiz string
  4304                                  
  4305                                  ;	Bugbug:	combine some of the following two sections?
  4306                                  
  4307                                  	; 12/01/2023
  4308 0000111A F606[1001]80            	test	byte [CDevAt],DEVTYP>>8 ; 80h
  4309                                  	;test	byte [CDevAt],DEVTYP shr 8 ; 80h
  4310 0000111F 740F                    	jz	short BlkErr
  4311                                  	;;mov	dx,offset DATARES:CharDevErr	; DX = ptr to device message
  4312                                  	;mov	dx,ChardevErr
  4313 00001121 BA[6A04]                	mov	dx,MDEVICE
  4314                                  	;mov	[CharDevErrRw.SubstPtr],si	; point to read/write string
  4315 00001124 8936[F200]              	mov	[CharDevErrRw],si
  4316                                  	;mov	si,offset DATARES:CharDevErrSubst; SI = ptr to subst block
  4317 00001128 BE[F100]                	mov	si,CharDevErrSubst
  4318                                  
  4319 0000112B E84701                  	call	RPrint				; print the message
  4320 0000112E EB1A                    	jmp	short Ask			; don't ralph on command
  4321                                  
  4322                                  	; 12/01/2023
  4323                                  	; MSDOS 3.3
  4324                                  	;mov	dx,ERRMES
  4325                                  	;call	RDISPMSG
  4326                                  	;mov	dx,si
  4327                                  	;call	RDISPMSG
  4328                                  	;
  4329                                  	;test	byte [CDevAt],80h
  4330                                  	;jz	short BLKERR
  4331                                  	;mov	dx,CHARDEVERR	; " device "
  4332                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4333                                  	;int	21h		; DOS - PRINT STRING
  4334                                  	;			; DS:DX -> string terminated by "$"
  4335                                  	;jmp	short ASK
  4336                                  
  4337                                  BlkErr:
  4338                                  	; 12/01/2023
  4339                                  	; MSDOS 6.0
  4340                                  	;;mov	dx,offset DATARES:BlkDevErr	; DX = error msg #
  4341                                  	;mov	dx,BlkDevErr
  4342 00001130 BA[5B04]                	mov	dx,MDRIVE
  4343                                  	;mov	[BlkDevErrRw.SubstPtr],si	; "reading","writing" ptr
  4344 00001133 8936[EB00]              	mov	[BlkDevErrRw],si
  4345                                  	;mov	si,offset DATARES:BlkDevErrSubst ; SI = ptr to subst block
  4346 00001137 BE[EA00]                	mov	si,BlkDevErrSubst
  4347 0000113A E83801                  	call	RPrint
  4348                                  
  4349                                  	; MSDOS 3.3
  4350                                  	;mov	dx,BLKDEVERR
  4351                                  	;call	RDISPMSG
  4352                                  
  4353 0000113D 803E[3301]00            	cmp	byte [Loading],0
  4354 00001142 7406                    	jz	short Ask
  4355 00001144 E8E9FD                  	call	RestHand
  4356 00001147 E9E0FD                  	jmp	GetComDsk2		; if error loading COMMAND, re-prompt
  4357                                  Ask:
  4358 0000114A 833E[2F01]0F            	cmp	word [ErrCd_24],15	; error 15 has an extra message
  4359 0000114F 751E                    	jne	short Not15		; not error 15
  4360                                  
  4361                                  ;*	For error 15, tell the user which volume/serial # are needed.
  4362                                  
  4363 00001151 51                      	push	cx
  4364                                  
  4365                                  ;	Bugbug:	does this push/pop need to be done?
  4366                                  
  4367 00001152 1E                      	push	ds
  4368 00001153 07                      	pop	es
  4369 00001154 C536[1E01]              	lds	si,[NeedVol]
  4370                                  	;assume	ds:NOTHING
  4371 00001158 57                      	push	di
  4372 00001159 BF[0001]                	mov	di,VolName
  4373                                  	; 12/01/2023
  4374                                  	; MSDOS 6.0
  4375 0000115C B91000                  	mov	cx,16			; copy volume name & serial #
  4376                                  	; MSDOS 3.3
  4377                                  	;mov	cx,11			; copy volume name
  4378 0000115F FC                      	cld
  4379 00001160 F3A4                    	rep	movsb
  4380 00001162 5F                      	pop	di
  4381 00001163 06                      	push	es
  4382 00001164 1F                      	pop	ds
  4383 00001165 59                      	pop	cx
  4384                                  	;assume	ds:DATARES
  4385                                  	; 12/01/2023
  4386                                  	; MSDOS 6.0
  4387                                  	;mov	dx,offset DATARES:NeedVolMsg	; DX = ptr to msg
  4388                                  	;mov	si,offset DATARES:NeedVolSubst	; DS:SI = ptr to subst block
  4389                                  	;mov	dx,NeedVolMsg
  4390 00001166 BA[7A04]                	mov	dx,MVOLSERIAL
  4391 00001169 BE[F700]                	mov	si,NeedVolSubst
  4392 0000116C E80601                  	call	RPrint
  4393                                  
  4394                                  	; MSDOS 3.3
  4395                                  	;mov	dx,NEEDVOLMSG
  4396                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  4397                                  	;int	21h		; DOS - PRINT STRING
  4398                                  	;			; DS:DX -> string terminated by "$"
  4399                                  Not15:
  4400                                  ;*	Print abort, retry, ignore, fail message.
  4401                                  ;	Print only options that are valid.
  4402                                  
  4403                                  ;	Bugbug:	sizzle this.
  4404                                  
  4405                                  	; 12/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4406 0000116F BA[2904]                	mov	dx,REQ_ABORT
  4407 00001172 E80001                  	call	RPrint
  4408                                  	;call	RDISPMSG
  4409 00001175 F606[8701]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED  ; 10h
  4410 0000117A 7406                    	jz	short Try_Ignore
  4411 0000117C BA[2F04]                	mov	dx,REQ_RETRY
  4412 0000117F E8F300                  	call	RPrint
  4413                                  	;call	RDISPMSG
  4414                                  Try_Ignore:
  4415 00001182 F606[8701]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h
  4416 00001187 7406                    	jz	short Try_Fail
  4417 00001189 BA[3704]                	mov	dx,REQ_IGNORE
  4418 0000118C E8E600                  	call	RPrint
  4419                                  	;call	RDISPMSG
  4420                                  Try_Fail:
  4421 0000118F F606[8701]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED   ; 08h
  4422 00001194 7406                    	jz	short Term_Question
  4423 00001196 BA[4004]                	mov	dx,REQ_FAIL
  4424 00001199 E8D900                  	call	RPrint
  4425                                  	;call	RDISPMSG
  4426                                  Term_Question:
  4427 0000119C BA[4704]                	mov	dx,REQ_END
  4428 0000119F E8D300                  	call	RPrint
  4429                                  	;call	RDISPMSG
  4430                                  
  4431                                  ;	If the /f switch was given, we fail all requests.
  4432                                  
  4433 000011A2 F606[9201]FF            	test	byte [fFail],-1
  4434 000011A7 741B                    	jz	short DoPrompt
  4435 000011A9 B403                    	mov	ah,3				; signal fail
  4436 000011AB E9A800                  	jmp	EExit
  4437                                  
  4438                                  	; 16/04/2023
  4439                                  Abort_Process:
  4440 000011AE F606[FF01]01            	test	byte [InitFlag],INITINIT ; 1	; COMMAND init interrupted?
  4441 000011B3 745D                    	jz	short AbortCont			; no, handle it normally
  4442 000011B5 803E[8D01]00            	cmp	byte [PermCom],0		; are we top level process?
  4443 000011BA 744B                    	jz	short JustExit			; yes, just exit
  4444                                  
  4445 000011BC BA[2C06]                	mov	dx,PATRICIDE			; no, load ptr to error msg
  4446                                  	; 12/01/2023
  4447 000011BF E8B300                  	call	RPrint				; print it
  4448                                  	;call	RDISPMSG
  4449                                  DeadInTheWater:
  4450 000011C2 EBFE                    	jmp	short DeadInTheWater		; loop until the user reboots
  4451                                  
  4452                                  DoPrompt:
  4453                                  	; 12/01/2023
  4454 000011C4 B8010C                  	mov	ax,0C01h
  4455                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8) + STD_CON_INPUT ; 0C01h
  4456 000011C7 CD21                    	int	21h				; get response
  4457                                  
  4458 000011C9 E8A600                  	call	crlf
  4459 000011CC E83F01                  	call	CharToUpper			; convert to upper case
  4460 000011CF B400                    	mov	ah,0				; return code for ignore
  4461 000011D1 F606[8701]20            	test	byte [Crit_Err_Info],IGNORE_ALLOWED ; 20h ; is ignore allowed?
  4462 000011D6 7406                    	jz	short User_Retry
  4463 000011D8 3A06[2504]              	cmp	al,[IGNORE_CHAR]		; ignore?
  4464                                  	;jz	short EExitJ
  4465                                  	; 16/04/2023
  4466 000011DC 7478                    	jz	short EExit
  4467                                  
  4468                                  ;	Bugbug:	optimize following code.
  4469                                  
  4470                                  User_Retry:
  4471 000011DE FEC4                    	inc	ah				; return code for retry
  4472 000011E0 F606[8701]10            	test	byte [Crit_Err_Info],RETRY_ALLOWED ; 10h ; is retry allowed?
  4473 000011E5 7406                    	jz	short User_Abort
  4474 000011E7 3A06[2404]              	cmp	al,[RETRY_CHAR]			; retry?
  4475                                  	;jz	short EExitJ
  4476                                  	; 16/04/2023
  4477 000011EB 7469                    	jz	short EExit
  4478                                  User_Abort:
  4479 000011ED FEC4                    	inc	ah				; return code for abort
  4480                                  						;  (abort always allowed)
  4481 000011EF 3A06[2304]              	cmp	al,[ABORT_CHAR]			; abort?
  4482 000011F3 74B9                    	jz	short Abort_Process		; exit user program
  4483 000011F5 FEC4                    	inc	ah				; return code for fail
  4484 000011F7 F606[8701]08            	test	byte [Crit_Err_Info],FAIL_ALLOWED ; 08h ; is fail allowed?
  4485 000011FC 7406                    	jz	short AskJ
  4486 000011FE 3A06[2604]              	cmp	al,[FAIL_CHAR]			; fail?
  4487                                  	;jz	short EExitJ
  4488                                  	; 16/04/2023
  4489 00001202 7452                    	jz	short EExit
  4490                                  AskJ:
  4491 00001204 E943FF                  	jmp	Ask
  4492                                  
  4493                                  	; 12/01/2023
  4494                                  ;EExitJ:
  4495                                  	;jmp	short EExit
  4496                                  
  4497                                  JustExit:
  4498                                  	;assume	ds:DATARES
  4499                                  	; 12/01/2023
  4500 00001207 A1[2901]                	mov	ax,[Parent]			; load real parent pid
  4501                                  	;mov	[16h],ax
  4502 0000120A A31600                  	mov	[PDB.PARENT_PID],ax		; put it back where it belongs
  4503 0000120D B8FF4C                  	mov	ax,4CFFh
  4504                                  	;mov	ax,(EXIT<<8) | 255 ; 4CFFh
  4505 00001210 CD21                    	int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
  4506                                  				; AL = exit code
  4507                                  AbortCont:
  4508 00001212 F606[7D01]FF            	test	byte [In_Batch],-1		; Are we accessing a batch file?
  4509 00001217 7405                    	jz	short Not_Batch_Abort
  4510 00001219 C606[7E01]01            	mov	byte [Batch_Abort],1		; set flag for abort
  4511                                  
  4512                                  Not_Batch_Abort:
  4513 0000121E 8A16[0002]              	mov	dl,[PipeFlag]
  4514 00001222 E8D1FA                  	call	ResPipeOff
  4515 00001225 08D2                    	or	dl,dl
  4516 00001227 740D                    	je	short CheckForA
  4517 00001229 833E[8E01]00            	cmp	word [SingleCom],0
  4518 0000122E 7406                    	je	short CheckForA
  4519 00001230 C706[8E01]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4520                                  
  4521                                  CheckForA:
  4522 00001236 833E[2F01]00            	cmp	word [ErrCd_24],0		; write protect?
  4523 0000123B 7407                    	je	short abortfor
  4524 0000123D 833E[2F01]02            	cmp	word [ErrCd_24],2		; drive not ready?
  4525 00001242 7512                    	jne	short EExit			; don't abort the FOR
  4526                                  
  4527                                  abortfor:
  4528 00001244 C606[9401]00            	mov	byte [ForFlag],0		; abort a FOR in progress
  4529 00001249 833E[8E01]00            	cmp	word [SingleCom],0
  4530 0000124E 7406                    	je	short EExit
  4531 00001250 C706[8E01]FFFF          	mov	word [SingleCom],-1		; make sure SingleCom exits
  4532                                  
  4533                                  EExit:
  4534 00001256 88E0                    	mov	al,ah
  4535 00001258 89FA                    	mov	dx,di
  4536                                  RestHd:
  4537 0000125A E8D3FC                  	call    RestHand
  4538 0000125D 59                      	pop	cx
  4539 0000125E 5E                      	pop	si				; restore registers
  4540 0000125F 07                      	pop	es
  4541                                  
  4542                                  	; 12/01/2023	
  4543                                  	; MSDOS 6.0
  4544                                  ;;	pop	ds
  4545                                  ;SR;
  4546                                  ;ds has to be got from the variable we saved it in
  4547                                  
  4548 00001260 8E1E[2004]               	mov	ds,[OldDS]			; restore old value of ds
  4549                                  
  4550                                  ;	pop	ds
  4551                                  ;	assume	ds:nothing
  4552                                  
  4553                                  	; MSDOS 3.3
  4554                                  	;pop	ds
  4555                                  
  4556 00001264 CF                      	iret
  4557                                  
  4558                                  FatErr:
  4559                                  	; 12/01/2023
  4560                                  	; MSDOS 6.0
  4561                                  	;mov	dx,offset DATARES:BadFatMsg
  4562                                  	;mov	si,offset DATARES:BadFatSubst
  4563 00001265 BA[A104]                	mov	dx,BADFATMSG
  4564 00001268 BE[1101]                	mov	si,BadFatSubst
  4565 0000126B E80700                  	call	RPrint
  4566                                  
  4567                                  	; MSDOS 3.3
  4568                                  	;mov	dx,BADFATMSG
  4569                                  	;call	RDISPMSG
  4570                                  	;mov	dx,BLKDEVERR
  4571                                  	;call	RDISPMSG
  4572                                  
  4573 0000126E B002                    	mov	al,2				; abort
  4574 00001270 EBE8                    	jmp	short RestHd
  4575                                  
  4576                                  ;DskErr	endp
  4577                                  
  4578                                  	; MSDOS 6.0
  4579                                  ; ----------------------------------------------------------------------------
  4580                                  ;***	RPrint - print message
  4581                                  ;***	Crlf - display cr/lf
  4582                                  ;
  4583                                  ;	ENTRY	DS:DX = ptr to count byte, followed by message text
  4584                                  ;		DS:SI = ptr to 1st substitution block for this msg, if any
  4585                                  ;		variable fields related to substitution blocks are set
  4586                                  ;
  4587                                  ;	EXIT	nothing
  4588                                  ;
  4589                                  ;	USED	flags
  4590                                  ;
  4591                                  ;	EFFECTS
  4592                                  ;	  Message is displayed on stdout.
  4593                                  ;
  4594                                  ;	NOTE
  4595                                  ;	  Number of substitutions (%1, %2,...) in message text must not
  4596                                  ;	  be greater than number of substition blocks present.
  4597                                  ; ----------------------------------------------------------------------------
  4598                                  
  4599                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4600                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:13D1h (CODERES:0691h)
  4601                                  
  4602                                  crlf: 
  4603                                  	;mov	dx,offset DATARES:Newlin ; cheap newline
  4604                                  	; 14/01/2023
  4605 00001272 BA[5B06]                	mov	dx,NEWLINE
  4606                                  
  4607                                  ;RPrint	proc
  4608                                  ;
  4609                                  ;	assume	ds:DATARES,ss:DATARES
  4610                                  ;
  4611                                  	; 14/01/2023
  4612                                  RPrint:
  4613                                  
  4614                                  ;	Bugbug:	do we need to save all reg's?
  4615                                  
  4616 00001275 56                      	push	si			; preserve registers
  4617 00001276 50                      	push	ax
  4618 00001277 53                      	push	bx
  4619 00001278 51                      	push	cx
  4620 00001279 52                      	push	dx
  4621                                  
  4622 0000127A 89F3                    	mov	bx,si			; DS:BX = ptr to subst block
  4623 0000127C 89D6                    	mov	si,dx			; DS:SI = ptr to count byte
  4624 0000127E AC                      	lodsb				; AL = message length
  4625                                  					; DS:SI = ptr to message text
  4626 0000127F 31C9                    	xor	cx,cx
  4627 00001281 88C1                    	mov	cl,al			; CX = message length
  4628 00001283 E303                    	jcxz	rpRet
  4629                                  
  4630 00001285 E81900                  	call	RDispMsg
  4631                                  
  4632 00001288 5A                      rpRet:	pop	dx
  4633 00001289 59                      	pop	cx
  4634 0000128A 5B                      	pop	bx
  4635 0000128B 58                      	pop	ax
  4636 0000128C 5E                      	pop	si
  4637 0000128D C3                      	retn
  4638                                  
  4639                                  ;RPrint	endp
  4640                                  
  4641                                  	; 14/01/2023
  4642                                  ;	; MSDOS 3.3
  4643                                  ;CRLF:
  4644                                  ;	mov     dx,NEWLIN
  4645                                  ;
  4646                                  ;RDISPMSG: ; Display message/text
  4647                                  ;	; DS:DX = ($ terminated) Message/Text address 
  4648                                  ;	push    ax
  4649                                  ;	mov     ah,STD_CON_STRING_OUTPUT ; 9
  4650                                  ;	clc
  4651                                  ;	int     21h             ; DOS - PRINT STRING
  4652                                  ;				; DS:DX -> string terminated by "$"
  4653                                  ;	pop     ax
  4654                                  ;	retn
  4655                                  
  4656                                  
  4657                                  	; MSDOS 6.0
  4658                                  ; ----------------------------------------------------------------------------
  4659                                  ;***	RPrintCrit - print critical error message
  4660                                  ;
  4661                                  ;	ENTRY	DX = extended error # (19-39)
  4662                                  ;
  4663                                  ;	EXIT	nothing
  4664                                  ;
  4665                                  ;	USED	flags
  4666                                  ;
  4667                                  ;	EFFECTS
  4668                                  ;	  Message is displayed on stdout
  4669                                  ; ----------------------------------------------------------------------------
  4670                                  
  4671                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4672                                  
  4673                                  ;RPrintCrit	proc
  4674                                  ;	assume	ds:DATARES,ss:DATARES
  4675                                  
  4676                                  	; 14/01/2023
  4677                                  RPrintCrit:
  4678 0000128E 52                      	push	dx			; preserve DX
  4679 0000128F 87DA                    	xchg	bx,dx			; BX = extended error #
  4680                                  					; DX = saved BX
  4681 00001291 83EB13                  	sub	bx,19			; BX = critical error index, from 0
  4682 00001294 D1E3                    	shl	bx,1			; BX = offset in word table
  4683 00001296 8B9F[F507]              	mov	bx,[bx+CRITMSGPTRS]	; BX = ptr to error msg
  4684 0000129A 87DA                    	xchg	bx,dx			; DX = ptr to error msg
  4685                                  					; BX = restored
  4686 0000129C E8D6FF                  	call	RPrint			; print the message
  4687 0000129F 5A                      	pop	dx			; restore DX
  4688 000012A0 C3                      	retn
  4689                                  
  4690                                  ;RPrintCrit	endp
  4691                                  
  4692                                  ; ----------------------------------------------------------------------------
  4693                                  ;***	RDispMsg - display message
  4694                                  ;
  4695                                  ;	Display message, with substitutions, for RPrint.
  4696                                  ;
  4697                                  ;	ENTRY	DS:SI = ptr to message text
  4698                                  ;		CX = message length
  4699                                  ;		DS:BX = ptr to substitution block, if any
  4700                                  ;
  4701                                  ;	EXIT	nothing
  4702                                  ;
  4703                                  ;	USED	AX,CX,DX,SI
  4704                                  ; ----------------------------------------------------------------------------
  4705                                  
  4706                                  ;RDispMsg	proc
  4707                                  ;	assume	ds:DATARES,ss:DATARES
  4708                                  
  4709                                  RDispMsg:
  4710                                  	; 14/01/2023
  4711                                  rdNextChar:
  4712 000012A1 AC                      	lodsb				; AL = next char
  4713 000012A2 3C25                    	cmp	al,'%'
  4714 000012A4 7511                    	jne	short rdOutChar		; not a substitution
  4715 000012A6 8A14                    	mov	dl,[si]			; DL = possible '1' - '9'
  4716 000012A8 80EA31                  	sub	dl,'1'			; DL = 0 - 8 = '1' - '9'
  4717 000012AB 80FA09                  	cmp	dl,9
  4718 000012AE 7307                    	jae	short rdOutChar		; not a substitution
  4719                                  
  4720                                  ;*	A substitution code %1 - %9 has been encountered.
  4721                                  ;	DL = 0-8, indicating %1-%9
  4722                                  ;	DS:BX = ptr to substitution block
  4723                                  
  4724 000012B0 E80D00                  	call	SubstMsg		; display the substitution
  4725 000012B3 46                      	inc	si			; SI = ptr past %n
  4726 000012B4 49                      	dec	cx			; count extra character in %n
  4727 000012B5 EB06                    	jmp	short rdCharDone
  4728                                  
  4729                                  ;*	Normal character output.
  4730                                  
  4731                                  rdOutChar:
  4732 000012B7 88C2                    	mov	dl,al			; DL = char
  4733 000012B9 B402                    	mov	ah,2			; AH = DOS Character Output code
  4734 000012BB CD21                    	int	21h			; call DOS
  4735                                  rdCharDone:
  4736 000012BD E2E2                    	loop	rdNextChar
  4737 000012BF C3                      	retn
  4738                                  
  4739                                  ;RDispMsg	endp
  4740                                  
  4741                                  ; ----------------------------------------------------------------------------
  4742                                  ;***	SubstMsg - display message substitution
  4743                                  ;
  4744                                  ;	Display a substitution string within a message.
  4745                                  ;	Substitution can be a char, an ASCIIZ string, or
  4746                                  ;	a word to be displayed as hex digits.
  4747                                  ;
  4748                                  ;	ENTRY	DL = substitution index 0-8 (for codes %1-%9)
  4749                                  ;		DS:BX = ptr to substitution block
  4750                                  ;
  4751                                  ;	EXIT	nothing
  4752                                  ;
  4753                                  ;	USED	AX,DX
  4754                                  ; ----------------------------------------------------------------------------
  4755                                  
  4756                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4757                                  
  4758                                  ;SubstMsg	proc
  4759                                  ;	assume	ds:DATARES,ss:DATARES
  4760                                  	
  4761                                  	; 14/01/2023
  4762                                  SubstMsg:
  4763 000012C0 53                      	push	bx			; preserve BX
  4764 000012C1 51                      	push	cx			; preserve CX
  4765                                  
  4766                                  	;mov	al,size SUBST		; AL = size of substitution block
  4767 000012C2 B003                    	mov	al,3
  4768 000012C4 F6E2                    	mul	dl			; AX = offset of desired subst block
  4769 000012C6 01C3                    	add	bx,ax			; DS:BX = ptr to desired subst block
  4770                                  
  4771                                  	;mov	al,[bx].SubstType	; AX = substitution type flag
  4772 000012C8 8A07                    	mov	al,[bx]
  4773                                  	;mov	bx,[bx].SubstPtr	; BX = ptr to char, str, or hex value
  4774 000012CA 8B5F01                  	mov	bx,[bx+1]
  4775                                  
  4776                                  ;	AL = 1, 2, or 3 for char, string, or hex type
  4777                                  
  4778 000012CD FEC8                    	dec	al
  4779 000012CF 7428                    	jz	short smChar
  4780 000012D1 FEC8                    	dec	al
  4781 000012D3 742C                    	jz	short smStr
  4782                                  
  4783                                  ;*	Hex number substitution.
  4784                                  
  4785                                  	;mov	ax,ds:[bx]		; AX = word value
  4786 000012D5 8B07                    	mov	ax,[bx]
  4787 000012D7 B90400                  	mov	cx,4			; CX = # digits to display
  4788                                  smDigit:
  4789 000012DA D1C0                    	rol	ax,1
  4790 000012DC D1C0                    	rol	ax,1
  4791 000012DE D1C0                    	rol	ax,1
  4792 000012E0 D1C0                    	rol	ax,1			; AL<3:0> = next digit
  4793                                  
  4794 000012E2 50                      	push	ax			; save other digits
  4795 000012E3 240F                    	and	al,0Fh			; AL = binary digit
  4796 000012E5 0430                    	add	al,'0'			; AL = ascii digit if 0-9
  4797 000012E7 3C39                    	cmp	al,'9'
  4798 000012E9 7602                    	jbe	short smDigit09		; it's 0-9
  4799                                  	;add	al,7
  4800 000012EB 0407                    	add	al,('A' - '0') - 10	; AL = ascii digit A-F
  4801                                  smDigit09:
  4802 000012ED 88C2                    	mov	dl,al			; DL = ascii digit
  4803 000012EF B402                    	mov	ah,2
  4804 000012F1 CD21                    	int	21h			; output the ascii digit
  4805 000012F3 58                      	pop	ax			; restore all digits
  4806                                  
  4807 000012F4 E2E4                    	loop	smDigit
  4808                                  	;jmp	short smRet
  4809                                  	; 14/01/2023
  4810                                  smRet:	
  4811 000012F6 59                      	pop	cx
  4812 000012F7 5B                      	pop	bx
  4813 000012F8 C3                      	retn
  4814                                  
  4815                                  ;*	Char substitution.
  4816                                  
  4817                                  smChar:
  4818                                  	;mov	dl,ds:[bx]		; DL = char to output
  4819 000012F9 8A17                    	mov	dl,[bx]
  4820 000012FB B402                    	mov	ah,2
  4821 000012FD CD21                    	int	21h
  4822 000012FF EBF5                    	jmp	short smRet
  4823                                  
  4824                                  ;*	String substitution.
  4825                                  
  4826                                  smStr:
  4827                                  	;mov	dl,ds:[bx]		; DL = next char
  4828 00001301 8A17                    	mov	dl,[bx]
  4829 00001303 08D2                    	or	dl,dl
  4830 00001305 74EF                    	jz	short smRet		; null char - we're done
  4831 00001307 B402                    	mov	ah,2
  4832 00001309 CD21                    	int	21h			; display char
  4833 0000130B 43                      	inc	bx			; DS:BX = ptr to next char
  4834 0000130C EBF3                    	jmp	short smStr
  4835                                  
  4836                                  ;smRet:	pop	cx
  4837                                  ;	pop	bx
  4838                                  ;	retn
  4839                                  
  4840                                  ;SubstMsg	endp
  4841                                  
  4842                                  	; MSDOS 6.0
  4843                                  ; ----------------------------------------------------------------------------
  4844                                  ;***	CharToUpper - convert character to uppercase
  4845                                  ;
  4846                                  ;	ENTRY	AL = char
  4847                                  ;
  4848                                  ;	EXIT	AL = uppercase char
  4849                                  ;
  4850                                  ;	USED	AX
  4851                                  ; ----------------------------------------------------------------------------
  4852                                  
  4853                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4854                                  
  4855                                  ;CharToUpper	proc
  4856                                  ;	assume	ds:DATARES
  4857                                  CharToUpper:
  4858 0000130E 50                      	push	ax		; put char on stack as arg to int 2F
  4859 0000130F B81312                  	mov	ax,1213h	; AX = DOS int 2F 'Convert Char to Uppercase'
  4860 00001312 CD2F                    	int	2Fh
  4861 00001314 44                      	inc	sp		; throw away old char on stack
  4862 00001315 44                      	inc	sp
  4863 00001316 C3                      	retn
  4864                                  
  4865                                  ;CharToUpper	endp
  4866                                  
  4867                                  	; 14/01/2023
  4868                                  ;	; MSDOS 3.3
  4869                                  ;CHARTOUPPER:
  4870                                  ;	cmp	al,80h
  4871                                  ;	jb	short CHARTOUPPER1
  4872                                  ;	sub	al,80h
  4873                                  ;	push	ds
  4874                                  ;	push	bx
  4875                                  ;	lds	bx,[UPPERCASETBL]
  4876                                  ;	add	bx,2
  4877                                  ;	xlat
  4878                                  ;	pop	bx
  4879                                  ;	pop	ds
  4880                                  ;	jmp	short CHARTOUPPER_RETN
  4881                                  ;CHARTOUPPER1:
  4882                                  ;	cmp	al,'a'
  4883                                  ;	jb	short CHARTOUPPER_RETN
  4884                                  ;	cmp	al,'z'
  4885                                  ;	ja	short CHARTOUPPER_RETN
  4886                                  ;	sub	al,20h
  4887                                  ;CHARTOUPPER_RETN:
  4888                                  ;	retn
  4889                                  
  4890                                  ;public	EndCode
  4891                                  ;EndCode label byte
  4892                                  
  4893                                  	; MSDOS 6.0
  4894                                  ; ----------------------------------------------------------------------------
  4895                                  ;***	MsgInt2fHandler - int 2f handler for message retrieval
  4896                                  ;
  4897                                  ;	ENTRY	If we handle it -
  4898                                  ;		  AX = ((MULTDOS shl 8) or MESSAGE_2F) = 122Eh
  4899                                  ;		  DL = operation =
  4900                                  ;		     0 = get extended error messages
  4901                                  ;		     1 = set extended error messages
  4902                                  ;		     2 = get parse error messages
  4903                                  ;		     3 = set parse error messages
  4904                                  ;		     4 = get critical error messages
  4905                                  ;		     5 = set critical error messages
  4906                                  ;		     6 = get file system error messages
  4907                                  ;		     7 = set file system error messages
  4908                                  ;		     8 = get disk retriever routine
  4909                                  ;		     9 = set disk retriever routine
  4910                                  ;		  ES:DI = address for 'set' operations
  4911                                  ;
  4912                                  ;	EXIT	ES:DI = ptr to list of message ptrs, for 'get' operations
  4913                                  ;
  4914                                  ;	NOTE
  4915                                  ;	  This handler replaces the one that used to reside in DOS.
  4916                                  ;	  'Set' operations are ignored.
  4917                                  ;	  'File system error messages' are not supported.
  4918                                  ; ----------------------------------------------------------------------------
  4919                                  
  4920                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  4921                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1478h (CODERES:0738h)
  4922                                  ;SR;
  4923                                  ;At the int 2fh entry point we push the old ds value and the resident data
  4924                                  ;segment address. Get them off the stack
  4925                                  
  4926                                  ;MsgInt2fHandler proc	far
  4927                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  4928                                  
  4929                                  	; 14/01/2023
  4930                                  MsgInt2fHandler:
  4931 00001317 1F                      	pop	ds			; ds = DATARES
  4932                                  	;assume	ds:DATARES
  4933                                  ;	pop	word [OldDS]		; save old value of ds
  4934                                  
  4935 00001318 3D2E12                  	cmp	ax,122Eh
  4936                                  	;cmp	ax,(MULTDOS<<8)|MESSAGE_2F
  4937                                  	;;cmp	ax,(MULTDOS shl 8) or MESSAGE_2F
  4938 0000131B 742A                    	je	short miOurs		; it's ours
  4939                                  
  4940                                  ;ifndef ROMDOS
  4941                                  	;cmp	ax,5500h
  4942 0000131D 3D0055                  	cmp	ax,GET_COMMAND_STATE	; is it first COMMAND query?
  4943                                  ;else
  4944                                  ;	cmp	ax,GET_ROMCOMMAND_STATE	; is it first ROM COMMAND query?
  4945                                  ;endif	;ROMDOS
  4946 00001320 741C                    	je	short fcOurs
  4947                                  
  4948                                  ;SR;
  4949                                  ;We cannot do a far jump any more because cs cannot be used. Push the cs:ip
  4950                                  ;onto the stack and do a far return to jump to the next 2fh handler. 
  4951                                  ;Our old ds is on the stack. We need to restore it but we cannot lose the
  4952                                  ;current value of ds as it points at the data segment. So we do some kinky
  4953                                  ;stack manipulations.
  4954                                  
  4955 00001322 50                      	push	ax
  4956 00001323 50                      	push	ax			; create 2 words on stack for retf
  4957                                  
  4958 00001324 55                      	push	bp
  4959 00001325 50                      	push	ax
  4960                                  
  4961 00001326 89E5                    	mov	bp,sp			; bp can be used to address stack
  4962                                  
  4963                                  ;Swap the old ds value with the second dummy word on the stack. Now, we can
  4964                                  ;do a 'pop ds' at the end to restore our ds
  4965                                  
  4966 00001328 8B4608                  	mov	ax,[bp+8]		; ax = old ds value
  4967 0000132B 894604                  	mov	[bp+4],ax
  4968                                  	
  4969                                  	;mov	ax,word ptr ds:Int2fHandler+2
  4970 0000132E A1[9D03]                	mov	ax,[Int2fHandler+2]
  4971 00001331 894608                  	mov	[bp+8],ax		; put segment address
  4972                                  	;mov	ax,word ptr ds:Int2fHandler
  4973 00001334 A1[9B03]                	mov	ax,[Int2fHandler]
  4974 00001337 894606                  	mov	[bp+6],ax		; put offset address
  4975                                  
  4976 0000133A 58                      	pop	ax
  4977 0000133B 5D                      	pop	bp
  4978 0000133C 1F                      	pop	ds
  4979                                  
  4980 0000133D CB                      	retf				; chain on to next handler
  4981                                  
  4982                                  ;;	jmp	Int2fHandler		; hand off to next 2f handler
  4983                                  
  4984                                  fcOurs:
  4985                                  
  4986                                  ;We have to clear ax, and return in ds:si a pointer to the stub jump table
  4987                                  
  4988 0000133E 58                      	pop	ax			; discard ds currently on stack
  4989 0000133F 1E                      	push	ds			; store our data segment
  4990                                  
  4991                                  	;mov	si,offset DATARES:Int2f_Entry ; start of table
  4992 00001340 BE[0400]                	mov	si,Int2f_Entry
  4993                                  
  4994 00001343 31C0                    	xor	ax,ax			; indicate COMMAND present
  4995 00001345 EB11                    	jmp	short miRet		; return to caller
  4996                                  
  4997                                  miOurs:
  4998 00001347 F6C201                  	test	dl,1
  4999 0000134A 750C                    	jnz	short miRet		; ignore 'set' operations
  5000                                  
  5001 0000134C 53                      	push	bx			; preserve BX
  5002 0000134D 89D3                    	mov	bx,dx
  5003 0000134F 30FF                    	xor	bh,bh			; BX = index in word table
  5004 00001351 D1E3                    	shl	bx,1			; BX = index in dword table
  5005                                  	;les	di,MsgPtrLists[bx]	; ES:DI = ptr to msg ptr list
  5006 00001353 C4BF[5E06]              	les	di,[bx+MsgPtrLists]
  5007 00001357 5B                      	pop	bx			; restore BX
  5008                                  miRet:
  5009                                  ;	mov	ds,[OldDS]		; restore ds
  5010 00001358 1F                      	pop	ds
  5011                                  	;assume	ds:nothing
  5012                                  
  5013 00001359 CF                      	iret
  5014                                  
  5015                                  ;MsgInt2fHandler endp
  5016                                  
  5017                                  	; MSDOS 6.0
  5018                                  ; ----------------------------------------------------------------------------
  5019                                  ;***	MsgRetriever - message retrieval routine for utilities
  5020                                  ;
  5021                                  ;	Address of this routine is passed to utility programs via 
  5022                                  ;	message services int 2f. We try to find the desired message
  5023                                  ;	in memory or in our disk image.
  5024                                  ;
  5025                                  ;	ENTRY	AX = message #
  5026                                  ;		DI = offset in RESGROUP of msg ptr list
  5027                                  ;		ComSpec = asciiz pathname to our disk image
  5028                                  ;
  5029                                  ;	EXIT	CY clear for success
  5030                                  ;		ES:DI = ptr to count byte, followed by message text
  5031                                  ;
  5032                                  ;		CY set for failure
  5033                                  ;		ES,DI undefined
  5034                                  ;
  5035                                  ;	USED	flags
  5036                                  ;
  5037                                  ;	NOTE
  5038                                  ;	  The message # in AX is used to compute an offset into
  5039                                  ;	  the message ptr list pointed to by DI. The lists must
  5040                                  ;	  start with message # 1 and proceed through consecutive
  5041                                  ;	  message #'s.  
  5042                                  ;
  5043                                  ;	  It is assumed that the msg ptr list is either ParsMsgPtrs or
  5044                                  ;	  ExtMsgPtrs. We use NUMPARSEMSGS and NUMEXTMSGS to check for
  5045                                  ;	  valid message #.  ;M033
  5046                                  ;
  5047                                  ;	  List positions with no corresponding message text are
  5048                                  ;	  indicated by null pointers, which this routine detects.
  5049                                  ; ----------------------------------------------------------------------------
  5050                                  
  5051                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5052                                  
  5053                                  ;SR; This routine will be called directly by the utilities. So, we have
  5054                                  ; trap for it in the stub. The stub pushes the old value of ds and the 
  5055                                  ; DATARES value on the stack. We get them off the stack to setup ds here
  5056                                  
  5057                                  ;MsgRetriever	proc	far
  5058                                  ;	assume	cs:CODERES,ds:NOTHING,es:NOTHING,ss:NOTHING
  5059                                  
  5060                                  	; 14/01/2023
  5061                                  MsgRetriever:
  5062 0000135A 1F                      	pop	ds			; ds = DATARES
  5063                                  	;assume	ds:DATARES
  5064                                  ;	pop	word [OldDS]		; save old ds
  5065                                  
  5066 0000135B 50                      	push	ax			; preserve registers
  5067 0000135C 53                      	push	bx
  5068 0000135D 51                      	push	cx
  5069 0000135E 52                      	push	dx
  5070 0000135F 56                      	push	si
  5071                                  
  5072                                  ;;	push	ds
  5073                                  ;;	push	cs
  5074                                  ;;	pop	ds			; DS = DATARES seg addr
  5075                                  ;;	assume	ds:RESGROUP
  5076                                  ;;	push	cs
  5077                                  
  5078 00001360 1E                      	push	ds			; get es from ds
  5079 00001361 07                      	pop	es			; ES = DATARES seg addr
  5080                                  
  5081                                  ;	Begin modification M033.
  5082                                  
  5083                                  ;	Make sure msg # is valid.
  5084                                  ;	Assume msg ptr list is either ParsMsgPtrs or ExtMsgPtrs.
  5085                                  
  5086                                  	;mov	bx,11
  5087 00001362 BB0B00                  	mov	bx,NUMPARSMSGS		; BX = # parse error msgs in list
  5088                                  	;cmp	di,offset DATARES:ParsMsgPtrs
  5089 00001365 81FF[FD08]              	cmp	di,PARSMSGPTRS
  5090 00001369 7403                    	je	short chkmsgnum		; it's ParsMsgPtrs
  5091                                  	;mov	bx,90
  5092 0000136B BB5A00                  	mov	bx,NUMEXTMSGS		; BX = # extended error msgs in list
  5093                                  chkmsgnum:
  5094 0000136E 39C3                    	cmp	bx,ax
  5095 00001370 725A                    	jc	short mrRet		; msg # too high, return carry
  5096                                  
  5097                                  ;	Msg # is valid.
  5098                                  
  5099                                  ;	End modification M033.
  5100                                  
  5101 00001372 48                      	dec	ax
  5102 00001373 D1E0                    	shl	ax,1			; AX = offset into msg ptr list
  5103 00001375 01C7                    	add	di,ax			; DI = ptr to msg ptr
  5104                                  
  5105 00001377 81FF[9F03]              	cmp	di,ResMsgEnd
  5106 0000137B 7247                    	jb	short mrInMem		; ptr (and message) in memory
  5107                                  
  5108                                  ;*	Retrieve message from disk (or ROM) image.
  5109                                  ;	Read once to get the ptr to the message, then again for the message.
  5110                                  
  5111                                  ;ifndef	ROMDOS
  5112                                  	; 14/01/2023
  5113                                  	;mov	si,offset DATARES:ComSpec	; DS:SI = ptr to pathname
  5114 0000137D BE[3601]                	mov	si,ComSpec
  5115 00001380 BA0100                  	mov	dx,1 ; EXT_EXISTS_OPEN		; DX = 'open existing file'
  5116 00001383 BB0020                  	mov	bx,2000h ; INT_24_ERROR		; BX = 'fail on crit error'
  5117 00001386 B8006C                  	mov	ax,6C00h
  5118                                  	;mov	ax,ExtOpen shl 8		; AX = 'Extended Open File'
  5119 00001389 CD21                    	int	21h				; call DOS
  5120 0000138B 723F                    	jc	short mrRet			; return failure
  5121                                  
  5122 0000138D 89C3                    	mov	bx,ax				; BX = file handle
  5123 0000138F 89FA                    	mov	dx,di				; DX = ptr to msg ptr
  5124 00001391 31F6                    	xor	si,si				; SI = read count
  5125                                  mrRead:
  5126 00001393 81EA0001                	sub	dx,100h				; DX = LSW of file offset
  5127 00001397 31C9                    	xor	cx,cx				; CX = MSW of file offset
  5128 00001399 B80042                  	mov	ax,4200h
  5129                                  	;mov	ax,LSEEK shl 8			; AX = 'Set File Pointer'
  5130 0000139C CD21                    	int	21h				; call DOS
  5131 0000139E 721A                    	jc	short mrCloseFile		; handle error
  5132                                  
  5133                                  	;mov	dx,offset DATARES:MsgBuffer	; DS:DX = input buffer
  5134 000013A0 BA[4B03]                	mov	dx,MsgBuffer
  5135 000013A3 B94000                  	mov	cx,64				; CX = # bytes to read
  5136 000013A6 B43F                    	mov	ah,3Fh
  5137                                  	;mov	ah,READ				; AH = 'Read File'
  5138 000013A8 CD21                    	int	21h				; call DOS
  5139 000013AA 720E                    	jc	short mrCloseFile		; handle error
  5140                                  
  5141 000013AC 09F6                    	or	si,si				; (CY cleared)
  5142 000013AE 750A                    	jnz	short mrCloseFile		; 2nd time thru - we're done
  5143 000013B0 46                      	inc	si				; mark one read done
  5144 000013B1 8B16[4B03]              	mov	dx,[MsgBuffer]			; DX = ptr to message
  5145 000013B5 09D2                    	or	dx,dx
  5146 000013B7 75DA                    	jnz	short mrRead			; go read the message
  5147 000013B9 F9                      	stc					; null ptr found- no msg
  5148                                  
  5149                                  mrCloseFile:
  5150 000013BA 9C                      	pushf				; save success/failure (CY)
  5151 000013BB B43E                    	mov	ah,3Eh
  5152                                  	;mov	ah,CLOSE		; AH = 'Close File'
  5153 000013BD CD21                    	int	21h			; call DOS
  5154                                  ;	Bugbug: should we avoid this popf?
  5155 000013BF 9D                      	popf				; CY = success/failure
  5156 000013C0 89D7                    	mov	di,dx			; ES:DI = ptr to msg, if successful
  5157 000013C2 EB08                    	jmp	short mrRet		; we're done
  5158                                  
  5159                                  ;else	;ROMDOS
  5160                                  ;
  5161                                  ;;	DI = ptr to msg ptr
  5162                                  ;
  5163                                  ;	mov	si,di			; SI = ptr to msg ptr
  5164                                  ;	sub	si,100h			; SI = offset into image of msg ptr
  5165                                  ;	mov	cx,2			; CX = # bytes to copy from image
  5166                                  ;
  5167                                  ;;	ASSUME ES:NOTHING is still in effect.
  5168                                  ;
  5169                                  ;	push	ds
  5170                                  ;	pop	es				; ES = DATARES seg addr
  5171                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to buffer
  5172                                  ;	invoke	LoadFromROM			; copy msg ptr from ROM
  5173                                  ;	mov	si,word ptr MsgBuffer		; SI = ptr to message
  5174                                  ;	or	si,si
  5175                                  ;	jz	mrNoMsg			; null ptr- no message text
  5176                                  ;
  5177                                  ;	sub	si,100h			; SI = offset into image of msg
  5178                                  ;	mov	cx,64			; CX = # bytes to copy from image
  5179                                  ;	mov	di,offset DATARES:MsgBuffer
  5180                                  ;	invoke	LoadFromROM
  5181                                  ;	clc					; success
  5182                                  ;	mov	di,offset DATARES:MsgBuffer	; ES:DI = ptr to msg
  5183                                  ;	jmp	short mrRet
  5184                                  ;
  5185                                  ;mrNoMsg:
  5186                                  ;	stc
  5187                                  ;	jmp	short mrRet
  5188                                  ;
  5189                                  ;;;	mov	ax,COMMAND_SEG-10h	; AX = seg addr of COMMAND image
  5190                                  ;;;	mov	es,ax			; ES:DI = ptr to msg ptr in image
  5191                                  ;	assume	es:NOTHING
  5192                                  ;
  5193                                  ;endif	;ROMDOS
  5194                                  
  5195                                  ;*	Message ptr is in memory.
  5196                                  ;	If ptr is in memory, assume message is in memory (/msg).
  5197                                  
  5198                                  mrInMem:
  5199                                  	; 14/01/2023
  5200 000013C4 268B3D                  	mov	di,[es:di]		; ES:DI = ptr to msg
  5201 000013C7 09FF                    	or	di,di			; (CY cleared)
  5202 000013C9 7501                    	jnz	short mrRet		; found message
  5203 000013CB F9                      	stc				; null ptr found - no message
  5204                                  mrRet:	
  5205 000013CC 5E                      	pop	si			; restore all registers
  5206 000013CD 5A                      	pop	dx
  5207 000013CE 59                      	pop	cx
  5208 000013CF 5B                      	pop	bx
  5209 000013D0 58                      	pop	ax
  5210                                  
  5211                                  ;	mov	ds,[OldDS]		; restore ds
  5212 000013D1 1F                      	pop	ds
  5213                                  	;assume	ds:nothing
  5214                                  
  5215 000013D2 CB                      	retf	; 21/04/2023
  5216                                  
  5217                                  ;MsgRetriever endp
  5218                                  
  5219                                  ; M003; Start of changes for UMB support
  5220                                  
  5221                                  ; ----------------------------------------------------------------------------
  5222                                  ;***	Lh_OffUnlink -- Restore allocation strat and link state
  5223                                  ;
  5224                                  ;	ENTRY	al = Saved alloc strat and link state
  5225                                  ;			b0 = 1 if alloc strat to restore is HighFirst
  5226                                  ;			b1 = 1 if link state to restore is Linked
  5227                                  ;
  5228                                  ;	EXIT	None
  5229                                  ;
  5230                                  ;	USED	ax, bx, cx
  5231                                  ; ----------------------------------------------------------------------------
  5232                                  
  5233                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5234                                  
  5235                                  ;public	Lh_OffUnlink
  5236                                  Lh_OffUnlink:	; proc	far
  5237                                  	; 14/01/2023
  5238 000013D3 88C5                    	mov	ch,al
  5239 000013D5 88C1                    	mov	cl,al
  5240                                  	;;mov	ax,(ALLOCOPER shl 8) OR 0
  5241                                  	;mov	ax,(ALLOCOPER<<8)
  5242 000013D7 B80058                  	mov	ax,5800h
  5243 000013DA CD21                    	int	21h
  5244 000013DC 89C3                    	mov	bx,ax
  5245 000013DE D0C9                    	ror	cl,1				; b7 = HighFirst bit
  5246 000013E0 80E180                  	and	cl,80h				; mask off b6-b0
  5247 000013E3 80E37F                  	and	bl,7fh				; mask off HighFirst bit
  5248 000013E6 08CB                    	or	bl,cl				; set HighFirst bit state
  5249                                  	;;mov	ax,(ALLOCOPER shl 8) OR 1
  5250                                  	;mov	ax,(ALLOCOPER<<8)|1
  5251 000013E8 B80158                  	mov	ax,5801h
  5252 000013EB CD21                    	int	21h				; set alloc strat
  5253                                  
  5254 000013ED 88EB                    	mov	bl,ch
  5255 000013EF D0EB                    	shr	bl,1
  5256 000013F1 30FF                    	xor	bh,bh				; bx = linkstate
  5257                                  	;mov	ax,(ALLOCOPER shl 8) OR 3
  5258                                  	;mov	ax,(ALLOCOPER<<8)|3
  5259 000013F3 B80358                  	mov	ax,5803h
  5260 000013F6 CD21                    	int	21h				; set linkstate
  5261                                  
  5262 000013F8 CB                      	retf
  5263                                  
  5264                                  ;Lh_OffUnlink endp
  5265                                  
  5266                                  ; M003; End of changes for UMB support
  5267                                  
  5268                                  ;public	EndCode
  5269                                  ; 14/01/2023
  5270                                  ;EndCode: ; label byte
  5271                                  ; 06/06/2023
  5272                                  ; 16/04/2023
  5273                                  EndCode equ ($-StartCode)+100h
  5274                                  ; 06/06/2023
  5275                                  ;EndCode equ $-StartCode	
  5276                                  
  5277                                  ;CODERES ends
  5278                                  ;	end
  5279                                  
  5280                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5281                                  
  5282 000013F9 00<rep 7h>              	times	(((EndCode+15)>>4)<<4)-EndCode db 0
  5283                                  
  5284                                  ;align 16
  5285                                  
  5286                                  ;=============================================================================
  5287                                  ; INIT.ASM, MSDOS 6.0 (COMMAND.COM), 1991
  5288                                  ;=============================================================================
  5289                                  ; 22/09/2018 - Retro DOS v3.0 ('command3.s')
  5290                                  
  5291                                  ; INIT.ASM (MSDOS 2.11 COMMAND.COM, Retro DOS v2.0, 30/04/2018)
  5292                                  
  5293                                  ;TITLE   COMMAND Initialization
  5294                                  
  5295                                  ;ENVIRONSIZ EQU  0A0H		; Must agree with values in ENVIRONMENT segment
  5296                                  ;ENVIRONSIZ2 EQU 092H
  5297                                  ;MAX_COMSPEC EQU ENVIRONSIZ2 ; = 146  ; 22/09/2018
  5298                                  
  5299                                  ; UINIT.ASM, MSDOS 6.0, 1991
  5300                                  ; 23/09/2018
  5301                                  ENVBIG	EQU 32768		;AN000; maximum environment size
  5302                                  ; 14/01/2023
  5303                                  ;ENVSML	EQU 160			;AN000; minimum environment size
  5304                                  
  5305                                  ; ----------------------------------------------------------------------------
  5306                                  
  5307                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5308                                  
  5309                                  ; (MSDOS 5.0 COMMAND.COM -initial- Environment Structure size)
  5310                                  ENVIRONSIZ equ 160
  5311                                  ENVSML	equ 256	; minimum environment size
  5312                                  ;MAX_COMSPEC equ ENVIRONSIZ - Env_ComSpec
  5313                                  MAX_COMSPEC equ 146
  5314                                  ECOMSPEC equ 14
  5315                                  
  5316                                  ; 14/01/2023
  5317                                  TAB_CHAR equ 09h
  5318                                  SPACE_CHAR equ 20h	
  5319                                  
  5320                                  ; (MSDOS 6.22 COMMAND.COM -initial- Environment Structure size)
  5321                                  ;ENVIRONSIZ equ 180	; SIZE Environment 
  5322                                  
  5323                                  ;----------------------------------------------------
  5324                                  ; MSDOS 6.0 - ENVDATA.ASM - 1991
  5325                                  ;----------------------------------------------------
  5326                                  ;Environment Struc	; Default COMMAND environment
  5327                                  ;
  5328                                  ;Env_PathString  db	"path="
  5329                                  ;Env_PathSpec	 db	"c:\msdos"
  5330                                  ;                db	0
  5331                                  ;Env_PrmptString db	"prompt="
  5332                                  ;Env_PrmptSpec   db	"$p$g"
  5333                                  ;                db	0
  5334                                  ;Env_ComString   db	"comspec="
  5335                                  ;Env_ComSpec     db	"\command.com"
  5336                                  ;		 db	134 dup (0)
  5337                                  ;
  5338                                  ;Environment ends
  5339                                  ;----------------------------------------------------
  5340                                  
  5341                                  ;-----------------------------------------------------------------------------
  5342                                  
  5343                                  ;-----------------------------------------------------------------------------
  5344                                  ; START OF INIT PORTION
  5345                                  ; This code is deallocated after initialization.
  5346                                  ;-----------------------------------------------------------------------------
  5347                                  
  5348                                  ;INIT	SEGMENT PUBLIC PARA
  5349                                  
  5350                                  ; 	EXTRN   HEADER:BYTE
  5351                                  ;	EXTRN   BADCOMLKMES:BYTE
  5352                                  
  5353                                  ;	PUBLIC  CONPROC
  5354                                  
  5355                                  ;ASSUME  CS:RESGROUP,DS:RESGROUP,ES:RESGROUP,SS:RESGROUP
  5356                                  
  5357                                          ;ORG 0
  5358                                  ;ZERO = $
  5359                                  	; 23/09/2018
  5360                                  ZERO equ $	; Offset 0E30h for original MSDOS 3.3 COMMAND.COM
  5361                                  
  5362                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5363                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1560h (CODERES:0820h)
  5364                                  ConProc:
  5365                                  	;mov	sp,offset ResGroup:RStack	; must be first instruction
  5366 00001400 BC[2004]                	mov	sp,RStack
  5367                                  
  5368                                  ; We need to set the PSP to us right at start because Carousel needs
  5369                                  ; to be lied to and it does not set PSP when it transfers control to
  5370                                  ; us after loading us as an overlay. By setting PSP, we ensure that
  5371                                  ; command.com is also not lied to.
  5372                                  
  5373                                  	; 14/01/2023
  5374                                  	; MSDOS 6.0
  5375 00001403 B450                            mov	ah,50h
  5376                                  	;mov	ah,SET_CURRENT_PDB
  5377 00001405 8CC3                            mov	bx,es
  5378 00001407 CD21                            int	21h
  5379                                  
  5380                                  	; 14/01/2023
  5381 00001409 B430                    	mov	ah,30h 
  5382                                  	;mov	ax,GET_VERSION<<8 ; 30h
  5383                                  	; 06/06/2023 - MSDOS 6.22 COMMAND.COM
  5384                                  	;mov	ax,3000h
  5385 0000140B CD21                    	int	21h
  5386                                  	;;cmp	ax,EXPECTED_VERSION ; 1E03h
  5387                                  	;cmp	ax,5
  5388 0000140D 83F805                  	cmp	ax,EXPECTED_VERSION ; 0005h
  5389 00001410 7411                    	je	short okdos			; DOS version is ok
  5390                                  
  5391 00001412 BA[181D]                	mov	dx,BADVERMSG			; DX = ptr to msg
  5392 00001415 E85DFE                  	call	RPrint
  5393                                  
  5394                                  	; MSDOS 3.3
  5395                                  	;mov	ah,STD_CON_STRING_OUTPUT ; 9
  5396                                  	;int	21h             ; DOS - PRINT STRING
  5397                                  				; DS:DX -> string terminated by "$"
  5398 00001418 8CC0                    	mov	ax,es
  5399 0000141A 2639061600              	cmp	[es:PDB.PARENT_PID],ax
  5400                                  	;cmp	[es:16h],ax			; if COMMAND is own parent,
  5401                                  Here:	
  5402 0000141F 74FE                    	jz	short Here			;  loop forever
  5403                                  	
  5404 00001421 CD20                    	int	20h				; otherwise, exit
  5405                                  okdos:
  5406                                  	; 23/09/2018
  5407                                  
  5408                                  ;  Calculate and save the end of the INIT segment (which is also
  5409                                  ;  the beginning of TRANGROUP).
  5410                                  
  5411                                  	; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  5412                                  	; MSDOS 3.3
  5413                                  	;mov	ah,65h
  5414                                  	;mov	al,2
  5415                                  	;mov	dx,-1
  5416                                  	;mov	bx,-1
  5417                                  	;mov	cx,5
  5418                                  	;mov	di,UCASE_ADDR
  5419                                  	;int	21h	; AH = 65h : GET EXTENDED COUNTRY INFORMATION (DOS 3.3+)
  5420                                  	;		; AL = 02h : Get pointer to character translation table
  5421                                  	;		; BX = code page (-1 = current global code page)
  5422                                  	;		; DX = country ID (-1 = current country)
  5423                                  	;		; CX = amount of data to return
  5424                                  	;; ES:DI = pointer to output buffer
  5425                                  	;; Buffer offset :
  5426                                  	;;	00h -  byte,  country Id
  5427                                  	;;  	01h -  dword, pointer to uppercase table	
  5428                                  
  5429                                  	; 14/01/2023
  5430                                  	; MSDOS 6.0 (& MSDOS 3.3)
  5431                                    	;mov	dx,232Fh     ; MSDOS 5.0 COMMAND.COM
  5432 00001423 BA0F22                  	mov	dx,TRANSTART+15			; get end of init code
  5433                                  	; 27/09/2018
  5434                                  	;mov	dx,TRANSTART ; (paragraph aligned address)
  5435 00001426 B104                    	mov	cl,4				; change to paragraphs
  5436 00001428 D3EA                            shr	dx,cl				;
  5437 0000142A 8CC8                            mov     ax,cs                           ; get current segment
  5438 0000142C 01D0                            add     ax,dx                           ; calculate segment of end of init
  5439 0000142E A3[7C1C]                        mov     [initend],ax			; save this
  5440                                  
  5441                                  	; 14/01/2023
  5442                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1591h 
  5443                                  
  5444                                  ;  Check for /? on the command line. If found, display help text and exit.
  5445                                  ;  NOTE: this routine may terminate the program, never returning.
  5446                                  
  5447 00001431 E86A06                  	call	CheckHelp
  5448                                  
  5449                                  ; We have to patch the segment values for the various interrupt entry points.
  5450                                  ; This is because we need to have the default addresses of the handlers in our
  5451                                  ; stub before the relocation is done. These values will then be changed once
  5452                                  ; the resident is relocated
  5453                                  
  5454 00001434 E8A507                  	call	patch_segs
  5455                                  
  5456                                  ;  Turn APPEND off during initialization processing
  5457                                  
  5458                                  	; 14/01/2023
  5459 00001437 B800B7                  	mov     ax,0B700h
  5460                                  	;mov	ax,APPENDINSTALL                ; see if append installed
  5461 0000143A CD2F                    	int	2Fh				;
  5462                                  	;cmp	al,0				; append installed?
  5463 0000143C 08C0                    	or	al,al
  5464 0000143E 7418                    	jz	short set_msg_addr		; no - continue
  5465                                  	
  5466 00001440 B802B7                  	mov	ax,0B702h
  5467                                  	;mov	ax,APPENDDOS			; see if append DOS version right
  5468 00001443 CD2F                    	int	2Fh				;
  5469                                  	;cmp	ax,-1				; append version correct?
  5470                                  	;jne	short set_msg_addr		; no - continue
  5471 00001445 40                      	inc	ax ; -1 -> 0
  5472 00001446 7510                    	jnz	short set_msg_addr        
  5473                                  	
  5474 00001448 B806B7                  	mov     ax,0B706h
  5475                                  	;mov	ax,APPENDGETSTATE               ; Get the state of Append
  5476 0000144B CD2F                    	int	2Fh				;
  5477 0000144D 891E[AB01]                      mov     [Append_State],bx		; save append state
  5478                                         
  5479 00001451 31DB                    	xor	bx,bx                           ; clear out state
  5480 00001453 B807B7                  	mov	ax,0B707h
  5481                                  	;mov	ax,APPENDSETSTATE               ; Set the state of Append
  5482 00001456 CD2F                    	int	2Fh				; set everything off
  5483                                  
  5484                                  set_msg_addr:
  5485                                  	; 14/01/2023
  5486                                  	;;mov	di,offset resgroup:DataresEnd 	; get address of resident end
  5487                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:15BAh) 
  5488                                  	;mov	di,093Eh  ; mov di,PAERRMSG0 ; MSDOS 5.0 COMMAND.COM
  5489 00001458 BF[1F08]                	mov	di,DataresEnd
  5490 0000145B 893E[9F03]              	mov	[ResMsgEnd],di			; save it
  5491                                  
  5492 0000145F E88C07                          call    get_XMMAddr                     ; get XMM call address
  5493                                  
  5494                                  ; Check if this is the first instance of command.com. If not, we just exit
  5495                                  ; this routine without moving any code.
  5496                                  ; After the int 2fh, ds:si points at the resident jump table in the previous
  5497                                  ; stub. We just have to copy this over
  5498                                  	
  5499                                  ;ifndef ROMDOS
  5500 00001462 B80055                  	mov	ax,5500h
  5501                                  	;mov	ax,GET_COMMAND_STATE	
  5502                                  ;else
  5503                                  ;	mov	ax,GET_ROMCOMMAND_STATE	
  5504                                  ;endif ; ROMDOS
  5505                                  
  5506 00001465 CD2F                    	int	2Fh	;  (Int 2Fh/AX=5500h - DOS 5+ - COMMAND.COM INTERFACE)
  5507                                  	;assume	ds:nothing
  5508                                  
  5509                                  	; 03/05/2023
  5510                                  	; Return:
  5511                                  	;   AX = 0000h if an instance of COMMAND.COM is already running
  5512                                  	;   DS:SI -> entry point table
  5513                                  
  5514                                  	; (si = offset Int2f_Entry)  ; (('MsgInt2fHandler:', 'fcOurs:'))
  5515                                  
  5516 00001467 09C0                    	or	ax,ax
  5517 00001469 750C                    	jnz	short first_com			; this is the first instance
  5518                                  
  5519                                  	; 14/01/2023
  5520 0000146B 268936[BC20]            	mov	[es:ResJmpTable],si		; save old stub jump table
  5521 00001470 268C1E[BE20]            	mov	[es:ResJmpTable+2],ds
  5522 00001475 EB06                    	jmp	short init_cntry
  5523                                  
  5524                                  first_com:
  5525 00001477 26C606[C020]01          	mov	byte [es:FirstCom],1		; indicate first command.com
  5526                                  
  5527                                  init_cntry:
  5528                                  	; 14/01/2023
  5529 0000147D 06                      	push	es
  5530 0000147E 1F                      	pop	ds
  5531                                  	;assume	ds:RESGROUP
  5532                                  
  5533 0000147F B465                    	mov	ah,65h
  5534                                  	;mov	ah,GETEXTCNTRY			; get extended country info
  5535 00001481 B004                    	mov	al,4				; get file ucase table
  5536 00001483 BAFFFF                  	mov	dx,-1				;
  5537                                  	;mov	bx,-1				;
  5538 00001486 89D3                    	mov	bx,dx
  5539 00001488 B90500                  	mov	cx,5				; number of bytes we want
  5540                                  	;mov	di,offset resgroup:FUCase_Addr	; buffer for address
  5541 0000148B BF[9E01]                	mov	di,FUCase_Addr
  5542 0000148E CD21                    	int	21h
  5543                                  		; DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION
  5544                                  		; AL = function -
  5545                                  
  5546                                  ;	Bugbug:	conditionalize dbcs_vector stuff?
  5547                                  
  5548 00001490 1E                      	push	ds				;
  5549 00001491 B80063                  	mov	ax,6300h
  5550                                  	;mov	ax,(ECS_CALL shl 8) or GETLEADBTBL ;
  5551 00001494 CD21                    	int	21h				;
  5552                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
  5553                                  			
  5554 00001496 8CDB                    	mov	bx,ds				; get segment to bx
  5555 00001498 1F                      	pop	ds				;
  5556 00001499 8936[A701]              	mov	[Dbcs_Vector_Addr],si		; save address of
  5557 0000149D 891E[A901]              	mov	[Dbcs_Vector_Addr+2],bx		; dbcs vector
  5558                                  
  5559                                  	;mov	ax,[16h]
  5560 000014A1 A11600                  	mov	ax,[PDB.PARENT_PID]
  5561                                  				; mov ax,ds:16h	; Init PARENT so we can exit
  5562 000014A4 A3[2901]                	mov	[Parent],ax			;  correctly.
  5563 000014A7 A10A00                  	mov	ax,[PDB.EXIT]   ; mov ax,ds:0Ah
  5564 000014AA A3[2B01]                	mov	[OldTerm],ax
  5565 000014AD A10C00                  	mov	ax,[PDB.EXIT+2] ; mov ax,ds:0Ch
  5566 000014B0 A3[2D01]                	mov	[OldTerm+2],ax
  5567                                  
  5568                                  	; 14/01/2023
  5569                                  	;;;mov	ax,offset ResGroup:EndCode + 15
  5570                                  	;;mov	ax,1569h	; MSDOS 5.0 COMMAND.COM
  5571                                  	;mov	ax,EndCode+15
  5572                                  	;;mov	ax,INITSTART+15 ; 24/09/2018
  5573                                  	; 14/01/2023
  5574                                  	;mov	cl,4				; ax = size of resident part of
  5575                                  	;shr	ax,cl				;  command in paragraphs. Add
  5576                                  	;mov	cx,cs				;  this to CS and you get the
  5577                                  	;add	ax,cx				;  segment of the TPA.
  5578                                  
  5579 000014B3 8CC8                    	mov	ax,cs
  5580 000014B5 055001                  	add	ax,(EndCode+15)>>4
  5581                                  	
  5582 000014B8 A3[4703]                	mov     [Res_Tpa],ax			; Temporarily save the TPA segment
  5583 000014BB 2500F0                  	and     ax,0F000h
  5584 000014BE 050010                  	add     ax,1000h			; Round up to next 64K boundary
  5585 000014C1 7303                    	jnc     short TpaSet			; Memory wrap if carry set
  5586 000014C3 A1[4703]                	mov     ax,[Res_Tpa]
  5587                                  TpaSet:
  5588 000014C6 A3[3903]                	mov	[LTpa],ax			; Good enough for the moment
  5589                                  	;mov	ax,[2]
  5590 000014C9 A10200                  	mov	ax,[PDB.BLOCK_LEN]		; ax = # of paras given to command
  5591                                  
  5592 000014CC 8C1E[3F03]              	mov	[MySeg1],ds			; These 3 variables are used as part of
  5593 000014D0 8C1E[4303]              	mov	[MySeg2],ds			;  3 long ptrs that the transient will
  5594 000014D4 8C1E[3703]              	mov	[MySeg],ds			;  use to call resident routines.
  5595                                  	; 19/04/2023
  5596                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1641h
  5597 000014D8 8C1E[7006]              	mov	[MySeg3],ds			; segment of msg retriever routine 
  5598                                  
  5599 000014DC A3[8001]                	mov	[MemSiz],ax			; Needed for execing other programs
  5600                                  
  5601                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5602                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1648h
  5603                                  
  5604                                  ; First reallocate the COMMAND size to its memory image
  5605                                  	
  5606 000014DF 50                      	push	ax    
  5607                                    	;;;mov	bx,2320h  ; MSDOS 5.0 COMMAND.COM
  5608                                  	;;mov	bx,offset RESGROUP:TranStart    ;
  5609                                  	;mov	bx,TRANSTART
  5610                                  	;;add	bx,98C5h  ; MSDOS 5.0 COMMAND.COM
  5611                                          ;add	bx,offset TRANGROUP:TranSpaceEnd;
  5612                                  	;add	bx,15 ; *			; round up the size
  5613                                  
  5614                                  	; 03/05/2023
  5615                                  	;;mov	bx,TRANSTART+15 ; * ; 14/01/2023
  5616                                  	;;add	bx,TRANSPACEEND
  5617                                  	; 06/06/2023
  5618                                  	;mov	bx,TRANSTART+TRANSPACEEND+15 
  5619                                          ;mov	cl,4				;
  5620                                          ;shr	bx,cl				; size of command.com
  5621 000014E0 BB820B                  	mov	bx,(TRANSTART+TRANSPACEEND+15)>>4
  5622                                  	
  5623 000014E3 B44A                    	mov	ah,4Ah
  5624                                  	;mov	ah,SETBLOCK			; free all memory above pgm
  5625 000014E5 CD21                            int     21h				;
  5626 000014E7 58                              pop     ax				;
  5627                                  	
  5628                                  ; Compute maximum size of environment
  5629                                  
  5630                                  	;;mov	word [ENVMAX],69 ; = (160/16)+(973/16)-1 ; (11EEh-0E30h+0Fh/10h) = 3Ch
  5631                                          ;mov	word [ENVMAX],((ENVIRONSIZ+15)/16) + ((ENVMAXIMUM-ZERO+15)/16) - 1
  5632                                  	; 14/01/2023 - Retro DOS v4.0 COMMAND.COM
  5633                                  	;mov	word [EnvMax],81	; 10+72-1  ; MSDOS 5.0 COMMAND.COM
  5634                                  	;mov	word [EndMax],90	; 12+79-1  ; MSDOS 6.22 COMMAND.COM	
  5635 000014E8 C706[701C]4C00          	mov	word [EnvMax],((ENVIRONSIZ+15)/16) + ((EnvMaximum-ZERO+15)/16) - 1
  5636                                  ;
  5637                                  ; Compute minimum size of environment
  5638                                  ;
  5639                                  	;;mov	word [EnvSiz],10 ; = 160/16	; MSDOS 3.3 COMMAND.COM
  5640                                  	;mov	word [EnvSiz],16 ; = 256/16	; MSDOS 5.0 COMMAND.COM
  5641 000014EE C706[6E1C]1000          	mov	word [EnvSiz],ENVSML/16 ; 256/16
  5642                                  
  5643                                  	;;mov	dx,offset TranGroup:Transpaceend + 15 ; dx = size of transient
  5644                                  	;mov	dx,98D4h	 ; MSDOS 5.0 COMMAND.COM
  5645                                  	; 06/06/2023
  5646                                  	;mov	dx,TRANSPACEEND+15 ; 4D5Ch+0Fh (for MSDOS 3.3 COMMAND.COM)
  5647                                  	;mov	cl,4				;  in paragraphs.
  5648                                  	;shr	dx,cl
  5649 000014F4 BA6209                  	mov	dx,(TRANSPACEEND+15)>>4
  5650 000014F7 8916[7E1C]                      mov     [TrnSize],dx			; save size of transient in paragraphs
  5651                                  
  5652 000014FB 29D0                    	sub	ax,dx				; max seg addr - # para's needed for transient
  5653 000014FD A3[7A01]                	mov	[TrnSeg],ax			;  = seg addr to load the transient at.
  5654                                  	;mov	ax,[2Ch]
  5655 00001500 A12C00                  	mov	ax,[PDB.ENVIRON]		; ax = environment segment
  5656                                  
  5657                                  	; 14/01/2023
  5658                                          ; MSDOS 6.0
  5659                                  	;mov	[EnvirSeg],ax
  5660                                          
  5661                                  	; 21/01/2023
  5662 00001503 09C0                    	or	ax,ax				; if there is no environment segment,
  5663 00001505 7406                    	jz	short buildenv			; make one
  5664                                    
  5665                                  	; 21/01/2023
  5666                                  	; MSDOS 3.3 & MSDOS 5.0
  5667                                  	;inc	byte [CHUCKENV]
  5668 00001507 FE06[521C]              	inc	byte [AllocedEnv]		; Flag - old environment segment
  5669                                  	
  5670                                  	; MSDOS 3.3 & MSDOS 5.0
  5671 0000150B EB03                    	jmp	short environpassed
  5672                                  	; MSDOS 6.0
  5673                                          ;cmp	byte [FirstCom],0		; if this is the first command.com,
  5674                                  	;je	short environpassed		; do a merge job (make sure COMSPEC exists)
  5675                                  
  5676                                  	; MSDOS 6.0
  5677                                  
  5678                                  ; We allocate a buffer here just large enough to hold the 'PATH=' and
  5679                                  ; the COMSPEC. After parsing, we will allocate an environment of the right
  5680                                  ; size and free this buffer. We need this buffer because we no longer have an
  5681                                  ; ENVIRONMENT segment but need a place to store the COMSPEC which can be
  5682                                  ; given on the command line before we know the environment size. This routine
  5683                                  ; will not return in case of an allocation error. It will either exit or hang
  5684                                  ; depending on whether or not this is the first COMMAND.COM or not.
  5685                                  
  5686                                  	; 14/01/2023
  5687                                  buildenv:
  5688 0000150D E87206                  	call	alloc_env                       ; try to allocate buffer
  5689                                  environpassed:
  5690                                  	; 14/01/2023 - MSDOS 5.0 COMMAND.COM
  5691 00001510 A3[2703]                	mov	[EnvirSeg],ax
  5692                                  	;
  5693 00001513 8EC0                    	mov	es,ax                           ; and it load into es.
  5694                                  	;assume	es:nothing
  5695                                  
  5696                                  gottheenvir:
  5697                                  
  5698                                  ; Initialize the command drive
  5699                                  
  5700                                  ; 14/01/2023
  5701                                  %if 0
  5702                                  	; MSDOS 3.3
  5703                                  BUILDENV:
  5704                                          ;mov	ax,offset RESGROUP:PATHSTRING	; Figure environment pointer
  5705                                  	mov	ax,PATHSTRING ; "PATH="
  5706                                  	mov	cl,4
  5707                                  	shr	ax,cl
  5708                                  	mov	dx,ds
  5709                                  	add	ax,dx
  5710                                  ENVIRONPASSED:
  5711                                          mov	[ENVIRSEG],ax
  5712                                          MOV     es,ax
  5713                                  
  5714                                          ;mov	ax,CHAR_OPER<<8
  5715                                          mov	ax,CHAR_OPER*256 ; 3700h
  5716                                  	int     21h	; DOS - 2+ internal - GET SWITCHAR/AVAILDEV
  5717                                  			; Return: AL = FFh unsupported subfunction
  5718                                  			; DL = current switch character
  5719                                          mov	[RSWITCHAR],dl
  5720                                  
  5721                                          ;CMP	dl,'/'
  5722                                  	cmp	dl,[slash_chr]
  5723                                          jnz	short IUSESLASH
  5724                                  
  5725                                  	;mov	al,'\'
  5726                                   	mov	al,[bslash_chr]
  5727                                  	mov	[COMSPECT],al
  5728                                  
  5729                                  	cmp	byte [CHUCKENV],0
  5730                                  	jnz	short IUSESLASH
  5731                                  
  5732                                          ;mov	ES:[ECOMSPEC-10h],'\'
  5733                                  	; 30/04/2018
  5734                                  	;mov	byte [ES:(ECOMSPEC-ENVIRONMENT)],'\' ; [ES:0Eh]
  5735                                  	; 23/09/2018
  5736                                  	mov	byte [ES:(ECOMSPEC-ENVIRONMENT)],al ; mov es:0Eh,al
  5737                                  gottheenvir:
  5738                                  IUSESLASH:
  5739                                  
  5740                                  ; Initialize the command drive
  5741                                  
  5742                                  %endif
  5743                                  	; 14/01/2023
  5744                                  	; MSDOS 3.3 & MSDOS 6.0
  5745 00001515 B419                    	mov	ah,19h
  5746                                  	;mov	ah,GET_DEFAULT_DRIVE	; 19h
  5747 00001517 CD21                    	int	21h
  5748 00001519 FEC0                    	inc	al
  5749 0000151B A2[7F01]                	mov	[ComDrv],al
  5750                                  
  5751                                          ;mov	al,byte ptr ds:[FCB]	; al = default drive number for command
  5752 0000151E A05C00                          mov	al,[FCB]
  5753 00001521 08C0                    	or	al,al
  5754 00001523 7426                    	jz	short nocomdrv		; no drive specified
  5755                                  
  5756 00001525 B43A                    	mov	ah,':'
  5757 00001527 A2[7F01]                	mov	[ComDrv],al
  5758 0000152A 0440                    	add	al,40h			; convert number to uppercase character
  5759                                  
  5760 0000152C FD                      	std
  5761                                  
  5762                                  	; MSDOS 6.0
  5763                                  	;cmp	byte [AllocedEnv],0	; if a new environment is being built,
  5764                                  	;je	short notwidenv		;  move the default comspec string in it
  5765                                  	; 14/01/2023
  5766                                  	; MSDOS 5.0 COMMAND.COM
  5767                                  	;mov	di,[ComspOffset]
  5768                                          ;cmp	byte [es:di+1],':'	; drive specifier already exist?
  5769                                          ;je	short notwidenv		; yes, must have been inherited that way
  5770                                  
  5771                                  	; MSDOS 3.3
  5772                                  	;cmp	byte [CHUCKENV],0
  5773                                  	;jne	short NOTWIDENV
  5774                                  	; 21/01/2021
  5775                                  	; MSDOS 5.0 - COMMAND.COM - RESGROUP:16A5h
  5776 0000152D 803E[521C]00             	cmp	byte [AllocedEnv],0
  5777 00001532 7713                    	ja	short notwidenv
  5778                                  
  5779 00001534 1E                        	push	ds			;  2 bytes to make room for a drivespec.
  5780 00001535 06                      	push	es			;  the drivespec is in ax and is copied
  5781 00001536 1F                      	pop	ds			;  on to the front of the string.
  5782                                  
  5783                                  	; MSDOS 6.0
  5784                                          ;lea	si,[di+MAX_COMSPEC-3]	
  5785                                          ;lea	di,[di+MAX_COMSPEC-1]
  5786                                  
  5787                                  	; 21/01/2023
  5788                                  	; 14/01/2023
  5789                                  	; MSDOS 5.0 COMMAND.COM
  5790                                  	; MSDOS 3.3
  5791                                  	; 23/09/2018
  5792                                  	; 30/04/2018
  5793                                  	;mov	di,159
  5794                                  	;;MOV	DI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-1-10H
  5795                                  	;mov	di,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-1 ; mov di,9Fh
  5796 00001537 BF9F00                  	mov	di,ENVIRONSIZ-1 ; 21/01/2023
  5797                                  	;mov	si,157
  5798                                  	;;MOV	SI,OFFSET ENVIRONMENT:ECOMSPEC+ENVIRONSIZ2-3-10H
  5799                                          ;mov	si,(ECOMSPEC-ENVIRONMENT)+ENVIRONSIZ2-3 ; mov si,9Dh 
  5800 0000153A BE9D00                  	mov	si,ENVIRONSIZ-3 ; 21/01/2023 	
  5801                                  	;mov	cx,144
  5802                                  	;MOV	CX,ENVIRONSIZ2-2 ; mov cx,90h
  5803 0000153D B99000                          mov	cx,MAX_COMSPEC-2 ; 144
  5804                                  
  5805 00001540 F3A4                    	rep	movsb
  5806 00001542 1F                      	pop	ds
  5807                                  
  5808                                  	; MSDOS 6.0
  5809                                  	;mov	word ptr es:[di-1],ax
  5810                                  
  5811                                  	; MSDOS 3.3
  5812                                  	;mov	[es:0Eh],ax
  5813                                  	;;;MOV	WORD PTR ES:[ECOMSPEC-10H],AX
  5814                                  	;;MOV	[es:(ECOMSPEC-ENVIRONMENT)],ax	; mov [es:0Eh],ax
  5815                                  	; 14/01/2023
  5816 00001543 26A30E00                	mov	[es:ECOMSPEC],ax ; mov [es:0Eh],ax
  5817                                  
  5818                                  	; MSDOS 3.3 & MSDOS 6.0
  5819                                  notwidenv:
  5820 00001547 FC                      	cld
  5821 00001548 A3[341C]                	mov	[AUTOBAT],ax ; ":\AUTOEXEC.BAT"
  5822                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  5823                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C3h)
  5824                                  	;mov	[KAUTOBAT],ax
  5825                                  nocomdrv:
  5826 0000154B E8A4FA                  	call	SetVect        ; Set the vectors
  5827                                  
  5828                                  ; parsing starts here
  5829                                  
  5830                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  5831                                  	; (MSDOS 5.0 COMMAND.COM RESGROUP:16C9h)
  5832                                  	; MSDOS 6.0
  5833 0000154E 0E                      	push	cs
  5834 0000154F 0E                      	push	cs
  5835 00001550 1F                      	pop	ds
  5836 00001551 07                      	pop	es
  5837                                  	;assume ds:ResGroup,es:ResGroup
  5838                                  
  5839                                  ; 14/01/2023
  5840                                  %if 0	
  5841                                  	; MSDOS 3.3
  5842                                  	mov	si,80h		; get command line
  5843                                  	lodsb			; get length of line
  5844                                  	mov	cl,al
  5845                                  	xor	ch,ch		; cx = length of command line
  5846                                  
  5847                                  ; insure that the command line correctly ends with a cr
  5848                                  
  5849                                  	add	si,cx		; go to end of command line	
  5850                                  	mov	byte [si], 0Dh	; insert a carriage return
  5851                                  
  5852                                  	mov	si,81h		; Start of parms
  5853                                  CHKARG:
  5854                                          jcxz	COMRETURNSJ     ; No parameters
  5855                                          dec	cx
  5856                                  	lodsb
  5857                                  CHECKSWITCHCHR:
  5858                                  	;cmp	al,' '
  5859                                  	cmp	al,[SPACE_CHR]	 ;Skip blank spaces
  5860                                  	jz	short CHKARG
  5861                                  	cmp	al,9		; Skip TAB characters
  5862                                  	jz	short CHKARG
  5863                                  	cmp	al,[RSWITCHAR]	; Switch?
  5864                                  	jz	short PARSE_CONT ; Yes, get the char after the switch
  5865                                  	jmp	CHKOTHERARGS	; No
  5866                                  
  5867                                  %endif
  5868                                  	; 14/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  5869                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:16CDh - CODERES:098Dh)
  5870                                  	; MSDOS 6.0
  5871                                  
  5872 00001552 BE8000                  	mov	si,80h				; get command line
  5873 00001555 AC                      	lodsb					; get length of line
  5874 00001556 89F7                    	mov	di,si				; get line position in di
  5875 00001558 30E4                    	xor	ah,ah				; ax = length of command line
  5876                                  
  5877                                  ; insure that the command line correctly ends with a cr
  5878                                  
  5879 0000155A 01C7                    	add	di,ax				; go to end of command line
  5880 0000155C C6050D                          mov	byte [di],0Dh			; insert a carriage return
  5881 0000155F 31C9                    	xor	cx,cx				; clear cx
  5882 00001561 890E[141D]                      mov	[num_positionals],cx		; initialize positionals
  5883                                  
  5884                                  ; Scan the command line looking for the parameters
  5885                                  
  5886                                  Parse_command_line:
  5887                                  	;mov	di,offset ResGroup:Parse_Command; Get address of parse_command
  5888 00001565 BF[861C]                	mov	di,PARSE_COMMAND
  5889 00001568 8B0E[141D]              	mov	cx,[num_positionals]		; Get number of positionals
  5890 0000156C 31D2                    	xor	dx,dx				; clear dx
  5891 0000156E 8936[161D]                      mov	[old_parse_ptr],si		; save position before calling parser
  5892                                  	;call	dword ptr Init_Parse
  5893 00001572 FF1E[7A1C]              	call	far [Init_Parse]		; call parser
  5894 00001576 890E[141D]                      mov     [num_positionals],cx		; Save number of positionals
  5895                                  	; 29/01/2023
  5896                                  	;;cmp	ax,END_OF_LINE ; 0FFFFh ; -1 	; are we at end of line?
  5897                                          ;cmp	ax,-1
  5898                                  	;jne	short t1
  5899                                  	; 10/06/2023
  5900 0000157A 40                      	inc	ax	 ; cmp ax,-1
  5901 0000157B 7503                    	jnz	short t1 ; 0FFFFh -> 0
  5902                                  	; ax = 0
  5903 0000157D E9FB01                  	jmp     ArgsDone                        ; yes - exit
  5904                                  t1:	
  5905                                  	;;cmp	ax,RESULT_NO_ERROR ; 0		; did an error occur
  5906                                  	;;cmp	ax,0
  5907                                  	;and	ax,ax
  5908                                  	; 10/06/2023
  5909 00001580 48                      	dec	ax  ; cmp ax,0
  5910 00001581 7447                    	jz	short parse_cont  ; 1 -> 0	; no - continue
  5911                                  
  5912                                  ; Before issuing error message - make sure switch is not /C
  5913                                  
  5914                                  parse_line_error:
  5915                                  	; 14/01/2023
  5916                                  	;push	si				; save line position
  5917                                  	;push	ax				; save error number
  5918                                  	;cmp	ax,3
  5919 00001583 83F803                  	cmp	ax,BadSwt_Ptr ; 3		; Was error invalid switch?
  5920                                          ;jnz	short parse_line_error_disp	; No - just issue message
  5921 00001586 752A                    	jne	short parse_line_error_disp2
  5922 00001588 56                      	push	si ; **				; save line position
  5923 00001589 50                      	push	ax ; *				; save error number
  5924 0000158A 89F7                    	mov	di,si				; Get terminating pointer in DI
  5925 0000158C 8B36[161D]                      mov     si,[old_parse_ptr]		; Get starting pointer in SI
  5926                                  
  5927                                  init_chk_delim:
  5928 00001590 39FE                    	cmp	si,di				; at end of parsed parameter?
  5929 00001592 741C                            je	short parse_line_error_disp	; Yes - just display message
  5930 00001594 AC                      	lodsb					;
  5931 00001595 3C20                    	cmp	al,20h ; ' ' ; 16/04/2023
  5932                                  	;cmp	al,space_chr ; 14/01/2023
  5933                                  	;;cmp	al,[space]			; Skip blank spaces
  5934 00001597 74F7                    	je	short init_chk_delim		;
  5935                                  	;cmp	al,9
  5936 00001599 3C09                    	cmp	al,tab_chr ; 9			; Skip tab characters
  5937 0000159B 74F3                    	je	short init_chk_delim		;
  5938                                  
  5939 0000159D 3A06[3B03]              	cmp	al,[RSwitChar]	; '/'		; Switch?
  5940 000015A1 750D                            jne	short parse_line_error_disp	; No - just issue message
  5941 000015A3 AC                      	lodsb					; Get the char after the switch
  5942                                  
  5943 000015A4 E86804                  	call	iupconv 			; upper case it
  5944                                  
  5945                                  	;cmp	al,[scswitch]	; 'C'		; it is /C?
  5946                                          ;jne	short check_k_too ; MSDOS 6.0	;
  5947                                  	;16/04/2023
  5948 000015A7 3C43                    	cmp	al,'C' ; scswitch
  5949 000015A9 7505                    	jne	short parse_line_error_disp  ; MSDOS 5.0 COMMAND.COM
  5950 000015AB 5A                      	pop	dx ; *				; even up stack
  5951 000015AC 5A                      	pop	dx ; **				; even up stack
  5952 000015AD E99800                  	jmp	SetSSwitch			; Yes - go set COMMAND /C
  5953                                  
  5954                                  	; MSDOS 6.0
  5955                                  ;check_k_too:
  5956                                  	;cmp	al,[skswitch]	; 'K'		; it is /K?
  5957                                          ;jne	short parse_line_error_disp	;
  5958                                  	;pop	dx ; *				; even up stack
  5959                                  	;pop	dx ; **				; even up stack
  5960                                          ;jmp	SetKSwitch			; Yes - go set COMMAND /K
  5961                                  
  5962                                  parse_line_error_disp:
  5963                                  	; 14/01/2023
  5964 000015B0 58                      	pop	ax ; *				; restore error number
  5965 000015B1 5E                      	pop	si ; **				; restore line position
  5966                                  parse_line_error_disp2:
  5967 000015B2 89C2                    	mov	dx,ax				; get message number
  5968 000015B4 E8FC03                  	call	RPrintParse
  5969 000015B7 E8B8FC                  	call	crlf
  5970 000015BA EBA9                            jmp     short Parse_command_line        ; continue parsing
  5971                                  
  5972                                  ; 16/04/2023
  5973                                  %if 1
  5974                                  SetMSwitch:
  5975                                          ;cmp	byte [ext_msg],1
  5976 000015BC 803E[811C]01            	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  5977                                  	; 16/04/2023
  5978                                  	;jnz	short setMswitchok		; no - set it
  5979                                  	;;mov	ax,1
  5980                                  	;mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  5981                                  	;jmp	parse_line_error                ; go issue error message
  5982                                  	; 16/04/2023
  5983 000015C1 744F                    	je	short parse_line_error_j
  5984                                  setMswitchok:
  5985                                          ;mov	byte [ext_msg],1
  5986 000015C3 C606[811C]01            	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  5987                                  	; 06/06/2023
  5988 000015C8 EB9B                    	jmp	short Parse_command_line	; keep parsing
  5989                                  %endif
  5990                                  
  5991                                  parse_cont:
  5992                                  
  5993                                  ; 15/01/2023
  5994                                  %if 0
  5995                                  	; MSDOS 3.3
  5996                                  
  5997                                  ; See if a switch was entered
  5998                                  
  5999                                  	jcxz	COMRETURNSJ
  6000                                  	dec	cx
  6001                                  	lodsb
  6002                                  	or	al,20h		; Lower case
  6003                                  	cmp	al,'f'		; FAIL switch
  6004                                  	jnz     short CHECKPSWITCH
  6005                                  %endif
  6006                                  
  6007                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6008                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:173Ch - CODERES:09FCh)
  6009                                  	; MSDOS 6.0
  6010                                  
  6011                                  ; See if a switch was entered
  6012                                  ;
  6013                                  ; Bugbug: See if Comnd1_Syn can be moved into a reg. before the compare
  6014                                  
  6015 000015CA 813E[0D1D][BD1C]        	cmp	word [COMND1_SYN],COMMAND_F_SYN ; was /F entered?
  6016 000015D0 742A                    	je	short SetFSwitch		; yes go set fail switch
  6017 000015D2 813E[0D1D][B11C]        	cmp	word [COMND1_SYN],COMMAND_P_SYN ; was /P entered?
  6018 000015D8 7431                    	je	short SetPSwitch		; yes go set up PERMCOM
  6019 000015DA 813E[0D1D][C91C]        	cmp	word [COMND1_SYN],COMMAND_D_SYN ; was /D entered?
  6020 000015E0 7453                    	je	short SetDSwitch		; yes go set date switch
  6021 000015E2 813E[0D1D][EE1C]        	cmp	word [COMND1_SYN],COMMAND_C_SYN ; was /C entered?
  6022 000015E8 745E                    	je	short SetSSwitch		; yes go set up SINGLECOM
  6023                                  	; MSDOS 6.0 only!
  6024                                  	;cmp	word [COMND1_SYN],COMMAND_K_SYN ; was /K entered?
  6025                                          ;je	short SetKSwitch		; yes go set up SINGLECOM
  6026 000015EA 813E[0D1D][D51C]        	cmp	word [COMND1_SYN],COMMAND_E_SYN ; was /E entered?
  6027 000015F0 7467                    	je	short SetESwitch		; yes go set up environment
  6028 000015F2 813E[0D1D][FA1C]        	cmp	word [COMND1_SYN],COMMAND_M_SYN	; was /MSG entered?
  6029                                  	;je	short SetMSwitchjmp		; yes go set up message flag
  6030                                  	; 15/01/2023
  6031 000015F8 74C2                    	je	short SetMSwitch 
  6032 000015FA EB7B                    	jmp	ChkOtherArgs		; Must be something else
  6033                                  
  6034                                  	; MSDOS 6.0
  6035                                  ;SetMSwitchjmp:
  6036                                  	;jmp	SetMSwitch
  6037                                  	
  6038                                  	; MSDOS 6.0
  6039                                  SetFSwitch:
  6040 000015FC 803E[9201]FF            	cmp	byte [fFail],-1		; has fail switch been set?
  6041                                  	; 16/04/2023
  6042                                  	;jne	short failok		; no - set it
  6043                                  	;;mov	ax,1
  6044                                  	;mov	ax,MoreArgs_Ptr         ; set up too many arguments
  6045                                          ;jmp	parse_line_error        ; go issue error 
  6046                                  	; 16/04/2023
  6047 00001601 740F                    	je	short parse_line_error_j
  6048                                  
  6049                                  	; MSDOS 3.3 & MSDOS 6.0
  6050                                  failok:
  6051 00001603 C606[9201]FF            	mov	byte [fFail],-1		; fail all INT 24s.
  6052                                  	; MSDOS 3.3
  6053                                  	;jmp	short CHKARG
  6054                                  	; MSDOS 6.0
  6055 00001608 E95AFF                  	jmp	Parse_command_line
  6056                                  
  6057                                  ;CHECKPSWITCH:
  6058                                  	;;cmp	al,'p'			; Permanent COMMAND switch
  6059                                  	;cmp	al,[letter_p]
  6060                                          ;jnz	short CHECKDSWITCH
  6061                                  
  6062                                  SetPSwitch:
  6063                                  
  6064                                  ; We have a permanent COMMAND switch /P. Flag this and stash the
  6065                                  ; termination address.
  6066                                  
  6067                                  	; MSDOS 6.0
  6068 0000160B 803E[8D01]00            	cmp	byte [PermCom],0	; has /p switch been set?
  6069 00001610 7406                    	jz	short permcomok		; no - set it
  6070                                  	; 16/04/2023
  6071                                  parse_line_error_j:
  6072                                          ;mov	ax,1
  6073 00001612 B80100                  	mov	ax,MoreArgs_Ptr		; set up too many arguments
  6074 00001615 E96BFF                          jmp	parse_line_error	; go issue error 
  6075                                  
  6076                                  permcomok:
  6077                                  	; MSDOS 3.3 & MSDOS 6.0
  6078 00001618 FE06[8D01]              	inc	byte [PermCom]
  6079                                  	;mov	word [OLDTERM],LODCOM
  6080 0000161C C706[2B01][7E00]        	mov	word [OldTerm],LodCom_Trap
  6081                                  	;mov	[OLDTERM+2],ds
  6082 00001622 8C1E[2D01]              	mov	[OldTerm+2],ds
  6083                                  
  6084                                  ; make sure that we display the date and time. if the flag was not
  6085                                  ; initialized, set it to indicate yes, do prompt.
  6086                                  
  6087                                  	; MSDOS 3.3
  6088                                  	;cmp	byte [PRDATTM],-1
  6089                                  	;jnz	short CHKARG
  6090                                  	;mov	byte [PRDATTM],0
  6091                                  	;jmp	short CHKARG
  6092                                  
  6093                                  	; MSDOS 6.0
  6094 00001626 803E[451C]FF            	cmp	byte [PRDATTM],-1
  6095 0000162B 7505                    	jne	short Parse_command_line_jmp
  6096 0000162D C606[451C]00            	mov	byte [PRDATTM],0
  6097                                  Parse_command_line_jmp:
  6098 00001632 E930FF                  	jmp     Parse_command_line	; keep parsing
  6099                                  
  6100                                  ;COMRETURNSJ:
  6101                                  ;	; MSDOS 3.3
  6102                                  ;	JMP	ARGSDONE
  6103                                  
  6104                                  ;CHECKDSWITCH:
  6105                                  	;;cmp	al,'d'
  6106                                          ;cmp	al,[letter_d]
  6107                                  	;jnz	short CHECKCSWITCH
  6108                                  
  6109                                  SetDSwitch:
  6110                                  
  6111                                  ; Flag no date/time prompting.
  6112                                  
  6113                                  	; MSDOS 6.0
  6114 00001635 803E[831C]00            	cmp	byte [dswitch],0	; has /D switch been set?
  6115                                  	; 16/04/2023
  6116                                  	;jz	short setdateok		; no - set it
  6117                                          ;;mov	ax,1
  6118                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6119                                          ;jmp	parse_line_error	; go issue error message
  6120                                  	; 16/04/2023
  6121 0000163A 75D6                    	jnz	short parse_line_error_j
  6122                                  setdateok:
  6123 0000163C FE06[831C]              	inc	byte  [dswitch]		; indicate /D entered
  6124                                  
  6125                                  	; MSDOS 3.3 & MSDOS 6.0
  6126 00001640 C606[451C]01                    mov	byte [PRDATTM],1	; User explicitly says no date time
  6127                                  	; MSDOS 3.3
  6128                                  	;jmp	short CHKARG
  6129                                  	; MSDOS 6.0
  6130 00001645 E91DFF                  	jmp     Parse_command_line	; continue parsing
  6131                                  
  6132                                  	; 15/01/2023
  6133                                  	; MSDOS 6.0 
  6134                                  ;SetKSwitch:
  6135                                  	;mov	byte [SemiPermCom],0
  6136                                  	;jmp	short SetSorKSwitch
  6137                                  
  6138                                  ;CHECKCSWITCH:
  6139                                  	;;cmp	al,'c'
  6140                                  	;cmp	al,[letter_c]
  6141                                          ;jnz	short CHECKESWITCH
  6142                                  
  6143                                  SetSSwitch:
  6144                                  ;SETCSWITCH:
  6145                                  
  6146                                  ; Set up pointer to command line, flag no date/time and turn off SingleCom.
  6147                                  
  6148 00001648 C606[8D01]00            	mov	byte [PermCom],0	; A SingleCom must not be a PermCom
  6149                                  ;SetSorKSwitch:
  6150 0000164D 8936[8E01]              	mov	[SingleCom],si		; Point to the rest of the command line
  6151 00001651 C606[451C]01            	mov	byte [PRDATTM],1	; no date or time either, explicit
  6152                                  ;COMRETURNSJ: ; 24/09/2018
  6153 00001656 E92201                  	jmp     ArgsDone
  6154                                  
  6155                                  ;CHECKESWITCH:
  6156                                  	;cmp	al,'e'
  6157                                  	;jnz	short CHKARG
  6158                                  
  6159                                  ; Look for environment-size setting switch
  6160                                  
  6161                                  ; The environment size is represented in decimal bytes and is
  6162                                  ; converted into paragraphs (rounded up to the next paragraph).
  6163                                  
  6164                                  SetESwitch:
  6165                                  	; MSDOS 6.0
  6166 00001659 803E[821C]00            	cmp	byte [eswitch],0	; has environment size switch been set?
  6167                                  	; 16/04/2023
  6168                                  	;jz	short eswitchok		; no - set it
  6169                                  	;;mov	ax,1
  6170                                  	;mov	ax,MoreArgs_Ptr		; set up too many arguments
  6171                                          ;jmp	parse_line_error	; go issue error message
  6172                                  	; 16/04/2023
  6173 0000165E 75B2                    	jnz	short parse_line_error_j
  6174                                  eswitchok:
  6175 00001660 FE06[821C]              	inc	byte [eswitch]		; indicate /E entered 	
  6176                                  
  6177                                  ; 15/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6178                                  %if 0
  6179                                  	; 23/09/2018 - Retro DOS v3.0
  6180                                  
  6181                                  	; MSDOS 3.3
  6182                                  	; (COMMAND.COM offset 0FC5h)
  6183                                  ESWITCHOK:
  6184                                  	jcxz    CHKARG
  6185                                  	dec     cx
  6186                                  	lodsb
  6187                                  	cmp     al,':'
  6188                                  	jnz     short CHECKSWITCHCHR
  6189                                  	xor     bx,bx
  6190                                  	mov     ax,bx
  6191                                  GETENVSIZE:
  6192                                  	jcxz    SETENVSIZE
  6193                                  	dec     cx
  6194                                  	lodsb
  6195                                  	cmp     al,'0'
  6196                                  	jb      short NOTDECIMALCHR
  6197                                  	cmp     al,'9'
  6198                                  	ja      short NOTDECIMALCHR
  6199                                  	sub     al,'0'
  6200                                  	mov     dx,bx
  6201                                  	shl     dx,1
  6202                                  	shl     dx,1   ; dx = 4*bx	
  6203                                  	add     bx,dx  ; bx = 5*bx
  6204                                  	shl     bx,1   ; bx = 10*bx	
  6205                                  	add     bx,ax
  6206                                  	jmp     short GETENVSIZE
  6207                                  
  6208                                  NOTDECIMALCHR:
  6209                                  	;cmp	al,' '
  6210                                  	cmp	al,[SPACE_CHAR]
  6211                                  	jz      short CHECKENVSIZE
  6212                                  	;cmp	al,'/'
  6213                                  	cmp     al,[RSWITCHAR]
  6214                                  	jz      short CHECKENVSIZE
  6215                                  
  6216                                  CHECKNEXTECHR:
  6217                                  	jcxz    INVENVSIZE
  6218                                  	dec     cx
  6219                                  	lodsb
  6220                                  	;cmp	al,' '
  6221                                  	cmp     al,[SPACE_CHR]
  6222                                  	jz      short ENVSIZESPC
  6223                                  	;cmp	al,'/'
  6224                                  	cmp     al,[RSWITCHAR]
  6225                                  	jnz     short CHECKNEXTECHR
  6226                                  
  6227                                  ENVSIZESPC:
  6228                                  	dec     si
  6229                                  	inc     cx
  6230                                  	jmp     short INVENVSIZE
  6231                                  	
  6232                                  	;nop
  6233                                  
  6234                                  CHECKENVSIZE: 
  6235                                  	dec     si
  6236                                  	inc     cx
  6237                                  
  6238                                  SETENVSIZE:
  6239                                  	;mov	word [ENVSIZ],2048	; Maximum environment size (32KB)
  6240                                  	mov	word [ENVSIZ],ENVBIG/16
  6241                                  	cmp     bx,32768
  6242                                  	ja      short INVENVSIZE
  6243                                  	;mov	word [ENVSIZ],10	; Minimum environment size (160 bytes)
  6244                                  	mov	word [ENVSIZ],ENVSML/16
  6245                                  	cmp     bx,160
  6246                                  	jb      short INVENVSIZE
  6247                                  	add     bx,15
  6248                                  	shr     bx,1
  6249                                  	shr     bx,1
  6250                                  	shr     bx,1
  6251                                  	shr     bx,1
  6252                                  	mov	[ENVSIZ],bx		; EnvSiz is in paragraphs
  6253                                  	jmp     short NEXTCH2
  6254                                  
  6255                                  	;nop
  6256                                  
  6257                                  INVENVSIZE:
  6258                                  	mov     dx,BADENVSIZMSG ; "Invalid environment size specified\r\n$"
  6259                                  	mov     ah,STD_CON_STRING_OUTPUT ; 9
  6260                                  	int     21h             ; DOS - PRINT STRING
  6261                                  				; DS:DX -> string terminated by "$"
  6262                                  NEXTCH2:
  6263                                  	; (MSDOS 3.3 COMMAND.COM, offset 1041h)
  6264                                  	jmp     CHKARG
  6265                                  
  6266                                  	;jmp	ARGSDONE
  6267                                  
  6268                                  %endif
  6269                                  	; 15/01/2023
  6270                                  	; MSDOS 6.0
  6271                                  	;mov	di,offset ResGroup:Comnd1_Addr	; get number returned
  6272 00001664 BF[0F1D]                        mov	di,COMND1_ADDR
  6273 00001667 8B1D                    	mov     bx,[di]				; into bx
  6274                                  
  6275 00001669 83C30F                  	add	bx,0Fh				; Round up to next paragraph
  6276 0000166C B104                    	mov	cl,4				; convert to pargraphs
  6277 0000166E D3EB                    	shr	bx,cl				; by right 4
  6278                                  
  6279 00001670 891E[6E1C]              	mov	[EnvSiz],bx			; EnvSiz is in paragraphs
  6280 00001674 E9EEFE                  	jmp	Parse_command_line		; continue parsing command line
  6281                                  
  6282                                  ; 16/04/2023
  6283                                  %if 0
  6284                                  SetMSwitch:
  6285                                          ;cmp	byte [ext_msg],1
  6286                                  	cmp	byte [ext_msg],SET_EXTENDED_MSG	; has /MSG switch been set?
  6287                                  	jnz	short setMswitchok		; no - set it
  6288                                  	;mov	ax,1
  6289                                  	mov	ax,MoreArgs_Ptr                 ; set up too many arguments
  6290                                  	jmp	parse_line_error                ; go issue error message
  6291                                  setMswitchok:
  6292                                          ;mov	byte [ext_msg],1
  6293                                  	mov	byte [ext_msg],SET_EXTENDED_MSG	; set /MSG switch
  6294                                  	jmp	Parse_command_line              ; keep parsing
  6295                                  %endif
  6296                                  
  6297                                  ;ArgsDoneJ:
  6298                                  	;jmp	ArgsDone
  6299                                  
  6300                                  	; 15/01/2023 - Retro DOS v4.0 (& V4.1) COMMAND.COM
  6301                                  	; (MSDOS 5.0 COMMAND.COM - RESGROUP:181Dh - CODERES:0ADDh)
  6302                                  	
  6303                                  ChkOtherArgs:
  6304                                  
  6305                                  ; We have a non-switch character here.
  6306                                  
  6307                                  	; MSDOS 6.0
  6308 00001677 1E                      	push	ds ; ****			;
  6309 00001678 56                      	push	si ; *** 			; save place in command line
  6310 00001679 C536[0F1D]              	lds	si,[COMND1_ADDR]		; get address of filespec
  6311                                  	;assume	ds:nothing			;
  6312                                  
  6313 0000167D 89F2                    	mov	dx,si				; put in dx also
  6314 0000167F B8023D                  	mov	ax,3D02h
  6315                                  	;mov	ax,(OPEN shl 8) or 2            ; Read and write
  6316 00001682 CD21                    	int	21h
  6317 00001684 7260                    	jc	short ChkSrchSpec		; Wasn't a file
  6318 00001686 89C3                    	mov	bx,ax
  6319 00001688 B80044                  	mov	ax,4400h
  6320                                  	;mov	ax,IOCTL shl 8
  6321 0000168B CD21                    	int	21h
  6322 0000168D F6C280                  	test	dl,80h
  6323 00001690 7506                    	jnz	short IsaDevice
  6324                                  BadSetCon:
  6325 00001692 B43E                    	mov	ah,3Eh
  6326                                  	;mov	ah,CLOSE		; Close initial handle, wasn't a device
  6327 00001694 CD21                    	int	21h
  6328 00001696 EB4E                    	jmp	short ChkSrchSpec
  6329                                  
  6330                                  ; 15/01/2023
  6331                                  %if 0
  6332                                  	; MSDOS 3.3
  6333                                  	; (COMMAND.COM offset 1047h)
  6334                                          dec	si
  6335                                  	inc	cx
  6336                                  	mov	dx,si
  6337                                  	push	cx ; **
  6338                                  	push	si ; *
  6339                                  CONTRLOOP:
  6340                                  	lodsb
  6341                                  	dec	cx
  6342                                  	;cmp	al,' '
  6343                                  	cmp	al,[SPACE_CHR]
  6344                                  	jz	short SETCDEV
  6345                                  	cmp	al,9
  6346                                  	jz	short SETCDEV
  6347                                  	jcxz	SETCDEVA
  6348                                  	jmp	short CONTRLOOP
  6349                                  
  6350                                  SETCDEVA:
  6351                                          inc	si
  6352                                  SETCDEV:
  6353                                  	mov	byte [SI-1],0
  6354                                          ;mov	ax,(OPEN SHL 8) OR 2  ; Read and write
  6355                                          mov	ax,(OPEN*256) | 2 ; 3D02h
  6356                                          int     21h	; DOS - 2+ - OPEN DISK FILE WITH HANDLE
  6357                                  			; DS:DX -> ASCIZ filename
  6358                                  			; AL = access mode
  6359                                  			; 2 - read & write
  6360                                          jc	short CHKSRCHSPEC	; Wasn't a file
  6361                                          mov	bx,ax
  6362                                          ;mov	ax,IOCTL shl 8
  6363                                          mov     ax,IOCTL*256 ; 4400h
  6364                                  	int     21h	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
  6365                                  			; BX = file or device handle
  6366                                          test	dl,80H
  6367                                  	jnz	short ISADEVICE
  6368                                  BADSETCON: ; MSDOS 6.0
  6369                                  	mov	ah,CLOSE ; 3Eh	; Close initial handle, wasn't a device
  6370                                          int     21h	; DOS - 2+ - CLOSE A FILE WITH HANDLE
  6371                                  			; BX = file handle
  6372                                          JMP     short CHKSRCHSPEC
  6373                                  %endif
  6374                                  	;nop
  6375                                  
  6376                                  	; 15/01/2023
  6377                                  IsaDevice:
  6378                                  	; MSDOS 3.3 & MSDOS 6.0
  6379 00001698 30F6                    	xor	dh,dh
  6380 0000169A 80CA03                  	or	dl,3				; Make sure has CON attributes
  6381                                  	;mov	ax,(IOCTL shl 8) or 1
  6382 0000169D B80144                  	mov	ax,(IOCTL*256)|1 ; 4401h
  6383 000016A0 CD21                    	int	21h
  6384                                  	;
  6385                                  	; 15/01/2023
  6386 000016A2 72EE                    	jc	short BadSetCon	; MSDOS 6.0 (& 5.0)
  6387                                  	; 25/09/2018
  6388                                  	;pop	dx ; *
  6389                                  	;pop	dx ; **
  6390                                  	;
  6391                                  	;jc	short BADSETCON	; MSDOS 6.0	; Can't set attributes - quit
  6392                                  	
  6393 000016A4 89DA                    	mov	dx,bx				; Save new handle
  6394                                  
  6395                                  	; MSDOS 6.0
  6396 000016A6 26803E[C120]01          	cmp	byte [es:DevFlag],1
  6397 000016AC 742A                    	jz	short DevErr
  6398                                  
  6399                                  	; MSDOS 3.3
  6400                                          ;pop	bx ; *				; Throw away saved SI
  6401                                          ;pop	bx ; **				; Throw away saved CX
  6402                                  
  6403                                  	; MSDOS 3.3 & MSDOS 6.0
  6404 000016AE 51                      	push	cx ; **
  6405 000016AF B90300                  	mov	cx,3
  6406 000016B2 31DB                    	xor	bx,bx
  6407                                  
  6408                                  	; 15/01/2023
  6409                                  rcclloop:
  6410 000016B4 B43E                    	mov	ah,3Eh
  6411                                  	;mov	ah,CLOSE ; 3Eh
  6412 000016B6 CD21                    	int	21h
  6413 000016B8 43                      	inc	bx
  6414 000016B9 E2F9                    	loop	rcclloop
  6415                                  
  6416 000016BB 89D3                    	mov	bx,dx				; New device handle
  6417 000016BD B445                    	mov	ah,45h
  6418                                  	;mov	ah,XDUP ; 45h
  6419 000016BF CD21                    	int	21h				; Dup to 0
  6420 000016C1 B445                    	mov	ah,45h
  6421                                  	;mov	ah,XDUP
  6422 000016C3 CD21                    	int	21h				; Dup to 1
  6423 000016C5 B445                    	mov	ah,45h
  6424                                  	;mov	ah,XDUP
  6425 000016C7 CD21                    	int	21h				; Dup to 2
  6426 000016C9 B43E                    	mov	ah,3Eh
  6427                                  	;mov	ah,CLOSE
  6428 000016CB CD21                    	int	21h				; Close initial handle
  6429                                  	
  6430 000016CD 59                      	pop	cx ; **
  6431                                  	
  6432                                  	; MSDOS 6.0
  6433 000016CE 5E                      	pop	si ; ***			; restore position of command line
  6434 000016CF 1F                      	pop	ds ; ****			;
  6435                                  
  6436                                  ; Register the fact that we already have redirected the output
  6437                                  ; and can not do it again
  6438                                  
  6439 000016D0 26FE06[C120]            	inc	byte [es:DevFlag]		
  6440 000016D5 E98DFE                  	jmp	Parse_command_line		; continue parsing
  6441                                  
  6442                                  	; MSDOS 3.3
  6443                                  	;jcxz	ARGSDONEJ2
  6444                                  	;jmp	CHKARG
  6445                                  
  6446                                  	; MSDOS 6.0
  6447                                  DevErr:
  6448 000016D8 5E                      	pop	si ; ***
  6449 000016D9 1F                      	pop	ds ; ****
  6450 000016DA BA0100                  	mov	dx,1
  6451 000016DD E8D302                          call	RPrintParse                     ; "Too many parameters"
  6452 000016E0 E88FFB                          call	crlf
  6453 000016E3 E97FFE                  	jmp	Parse_command_line
  6454                                  
  6455                                  ChkSrchSpec:				; Not a device, so must be directory spec
  6456                                  	; MSDOS 6.0
  6457 000016E6 26803E[C220]01                  cmp	byte [es:PathFlag],1		; already set COMSPEC?
  6458 000016EC 74EA                            jz	short DevErr			; yes, error
  6459                                  	
  6460 000016EE 26FE06[C220]                    inc	byte [es:PathFlag]		; mark that we have a path
  6461                                  
  6462                                  ; We have to override the passed environment. Allocate a buffer for use now.
  6463                                  ; This buffer will later be replaced by a proper environment
  6464                                  
  6465                                  	; 15/01/2023 - Retro DOS v4.0 COMMAND.COM
  6466                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1899h
  6467 000016F3 36A1[2703]              	mov	ax,[ss:EnvirSeg]
  6468                                  	
  6469                                  	; MSDOS 6.0
  6470                                  	;call	alloc_env                       ; environment buffer
  6471                                  
  6472                                  	; 15/01/2023
  6473                                  	; MSDOS 5.0
  6474 000016F7 36803E[521C]01          	cmp	byte [ss:AllocedEnv],1
  6475 000016FD 36C606[521C]00          	mov	byte [ss:AllocedEnv],0
  6476 00001703 7507                    	jne     short env_alloced
  6477 00001705 E87A04                  	call	alloc_env
  6478 00001708 36A3[2703]              	mov	[ss:EnvirSeg],ax
  6479                                  
  6480                                  env_alloced:
  6481                                  	; MSDOS 5.0 & MSDOS 6.0
  6482 0000170C 8EC0                    	mov	es,ax
  6483                                  	;assume	es:nothing
  6484 0000170E 56                      	push	si ; **				; remember location of file
  6485 0000170F 31C9                    	xor	cx,cx				; clear cx for counting
  6486                                  	
  6487                                  	; 15/01/2023
  6488                                  countloop:
  6489 00001711 AC                      	lodsb					; get a character
  6490 00001712 41                      	inc	cx				; increment counter
  6491                                          ;;cmp	al,0
  6492                                  	;cmp	al,END_OF_LINE_OUT              ; are we at end of line?
  6493                                  	;jne	short countloop			; no - keep counting
  6494 00001713 08C0                    	or	al,al	
  6495 00001715 75FA                    	jnz	short countloop
  6496                                  
  6497                                  	;;;;mov	al,[Space]
  6498                                  	;;;mov	al,[ss:Space] ; 15/01/2023 - MSDOS 5.0 COMMAND.COM
  6499                                  	;;mov	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6500                                  	; 16/04/2023
  6501                                  	;mov	al,20h ; ' ' 
  6502 00001717 4E                      	dec	si				; move back one
  6503                                          ;mov	[si],al				; put a space at end of line
  6504 00001718 C60420                  	mov	byte [si],20h ; ' ' ; space_chr
  6505                                  
  6506                                  ; We now know how long the new pathspec for command.com is. Time to
  6507                                  ; figure out how long the current COMSPEC setting is, and then to move
  6508                                  ; all the environment data up, throwing that COMSPEC setting away, and
  6509                                  ; preparing to append the new COMSPEC. ComspOffset (the offset of
  6510                                  ; where the filespec exists in the environment) is updated as well.
  6511                                  
  6512                                  	; MSDOS 6.0 COMMAND.COM
  6513                                  	;push	cx                              ;
  6514                                          ;mov	cx,ENVBIG                       ;
  6515                                          ;mov	di,ComspOffset                  ; get location of COMSPEC
  6516                                          ;mov	al,0                            ;
  6517                                          ;repne	scasb                           ; find the end of COMSPEC
  6518                                          ;mov	si,di                           ;
  6519                                  ;comp_endenv:                                   ;
  6520                                          ;scasb                                  ; end of env?
  6521                                          ;je	got_endenv                      ; yes
  6522                                          ;repne	scasb                           ;
  6523                                          ;jmp	comp_endenv                     ;
  6524                                  ;got_endenv:                                    ;
  6525                                          ;mov    cx,di                           ;
  6526                                          ;sub    cx,si                           ;
  6527                                          ;mov    di,ComspOffset                  ;
  6528                                          ;sub    di,ComspStrLen                  ;
  6529                                          ;push   ds                              ;
  6530                                          ;push   es                              ;
  6531                                          ;pop    ds                              ;
  6532                                          ;rep    movsb                           ;
  6533                                          ;dec    di                              ; copy in new COMSPEC=
  6534                                          ;push   cs                              ;
  6535                                          ;pop    ds                              ;
  6536                                          ;assume ds:ResGroup                     ;
  6537                                          ;mov    si,offset RESGROUP:ComspString  ;
  6538                                          ;mov    cx,ComspStrLen                  ;
  6539                                          ;rep    movsb                           ;
  6540                                          ;mov    ComspOffset,di                  ;
  6541                                          ;pop    ds                              ;
  6542                                          ;assume ds:nothing                      ;
  6543                                          ;pop    cx                              ;
  6544                                  	;
  6545                                          ;pop    si                              ; get new comspec location back
  6546                                  
  6547                                  	; MSDOS 3.3 COMMAND.COM
  6548                                  	;mov	byte [CHUCKENV],0		; If search specified -- no inheritance
  6549                                  	;mov	ax,PATHSTRING	; "PATH="	; Figure environment pointer
  6550                                  	;mov	cl,4
  6551                                  	;shr	ax,cl
  6552                                  	;mov	dx,ds
  6553                                  	;add	ax,dx
  6554                                  	;mov	[ENVIRSEG],ax
  6555                                  	;mov	es,ax
  6556                                  	;;mov	al,' '
  6557                                  	;mov	al,[SPACE_CHR]
  6558                                  	;mov	[si-1],al
  6559                                  	;pop	si ; **				; Remember location
  6560                                  	;pop	cx ; *				; and count
  6561                                  	;;mov	di,[ECOMLOC]
  6562                                  	;mov	di,[COMSPOFFSET]
  6563                                  
  6564                                  	; 15/01/2023
  6565                                  	; MSDOS 5.0 COMMAND.COM
  6566 0000171B 5E                      	pop	si ; **
  6567                                  	;mov	di,14
  6568 0000171C BF0E00                  	mov	di,ECOMSPEC ; mov di,0Eh
  6569                                  
  6570                                  ComtrLoop:
  6571                                  	; MSDOS 3.3 & MSDOS 6.0
  6572 0000171F AC                      	lodsb
  6573 00001720 49                      	dec	cx
  6574                                  	;;;;cmp	al,' '
  6575                                  	;;;cmp	al,[space_chr]
  6576                                  	;;cmp	al,[ss:Space] ;  MSDOS 5.0 COMMAND.COM
  6577                                  	;cmp	al,space_chr ; Retro DOS v4.0 (& v4.1) COMMAND.COM
  6578                                  	; 16/04/2023
  6579 00001721 3C20                    	cmp	al,20h ; ' ' ; space_chr
  6580 00001723 7405                    	je	short SetComsr
  6581                                  	; MSDOS 3.3
  6582                                  	;cmp	al,9
  6583                                  	;je	short SetComsr
  6584                                  	; MSDOS 3.3 & MSDOS 6.0
  6585 00001725 AA                      	stosb
  6586 00001726 E302                    	jcxz	SetComsr
  6587 00001728 EBF5                    	jmp	short ComtrLoop
  6588                                  
  6589                                  SetComsr:
  6590                                  	; 15/01/2023
  6591                                  	; MSDOS 6.0
  6592 0000172A 51                      	push	cx ; **
  6593 0000172B 0E                      	push	cs				; Get local segment
  6594 0000172C 1F                      	pop	ds				;
  6595                                  	;assume	ds:ResGroup			;
  6596 0000172D 1E                      	push	ds ; *
  6597                                  	;mov	si,offset ResGroup:ComSpect
  6598 0000172E BE[261C]                	mov	si,COMSPECT
  6599 00001731 B90E00                  	mov	cx,14
  6600 00001734 268A45FF                	mov	al,[es:di-1]
  6601 00001738 3A06[3C03]              	cmp	al,[RDirChar]
  6602 0000173C 7502                    	jne	short iNotRoot
  6603 0000173E 46                      	inc	si				; Don't make a double /
  6604 0000173F 49                      	dec	cx
  6605                                  	
  6606                                  	; MSDOS 3.3
  6607                                  	;push	si
  6608                                  	;push	cx
  6609                                  	;push	ds
  6610                                  	;mov	si,COMSPECT ; "/COMMAND.COM"
  6611                                  	;mov	cx,14
  6612                                  	;mov	al,[es:di-1]
  6613                                  	;call	PATHCHRCMPR
  6614                                  	;jnz	short INOTROOT			
  6615                                  	;inc	si				; Don't make a double /
  6616                                  	;dec	cx
  6617                                  
  6618                                  iNotRoot:
  6619                                  	; MSDOS 3.3 & MSDOS 6.0
  6620 00001740 F3A4                    	rep	movsb
  6621                                  
  6622                                  	;;mov	dx,[ECOMLOC]			; Now lets make sure its good!
  6623                                          ;mov	dx,[ComspOffset] ; [COMSPOFFSET]
  6624                                  	; 15/01/2023
  6625                                  	;mov	dx,14
  6626 00001742 BA0E00                  	mov	dx,ECOMSPEC ; mov dx,0Eh
  6627                                  
  6628 00001745 06                      	push	es
  6629 00001746 1F                      	pop	ds
  6630                                  	;;mov	ax,OPEN shl 8
  6631                                  	;mov	ax,OPEN*256 ; 3D00h
  6632 00001747 B8003D                  	mov	ax,3D00h ; 15/01/2023
  6633 0000174A CD21                    	int	21h				; Open COMMAND.COM
  6634 0000174C 1F                      	pop	ds ; *
  6635 0000174D 720E                    	jc	short SetComsrBad		; No COMMAND.COM here
  6636 0000174F 89C3                    	mov	bx,ax				; Handle
  6637 00001751 B43E                    	mov	ah,3Eh ; 15/01/2023
  6638                                  	;mov	ah,CLOSE ; 3Eh
  6639 00001753 CD21                    	int	21h				; Close COMMAND.COM
  6640                                  SetComsrRet:
  6641                                  	; 15/01/2023
  6642 00001755 59                      	pop	cx ; **
  6643 00001756 5E                      	pop	si ; ***
  6644                                  
  6645                                  	; MSDOS 6.0
  6646 00001757 1F                      	pop	ds ; ****			;
  6647                                  	;assume	ds:ResGroup			;
  6648                                  	;
  6649 00001758 0E                      	push	cs				; Make sure local ES is
  6650 00001759 07                      	pop	es				;  restored
  6651 0000175A E908FE                  	jmp	Parse_command_line		; continue parsing command line
  6652                                  
  6653                                  	; MSDOS 3.3
  6654                                  ;ARGSDONEJ2:
  6655                                  	;jcxz	ARGSDONE
  6656                                  	;jmp	CHKARG
  6657                                  
  6658                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6659                                  SetComsrBad:
  6660                                  	; MSDOS 3.3 & MSDOS 6.0
  6661                                  	;mov	dx,offset ResGroup:BadComlkMsg	; dx = ptr to msg
  6662 0000175D BA[AA1D]                	mov	dx,BADCOMLKMES
  6663                                  
  6664                                  ;	Note: we're about to make a near call to TriageError, which
  6665                                  ;	lives in a different segment and group. Some linkers will
  6666                                  ;	generate a warning like "Possible fix-up overflow". We're
  6667                                  ;	ok, though, because we all fit in 64 KB and, at init time,
  6668                                  ;	we're still all together.
  6669                                  
  6670                                  	; 16/01/2023
  6671                                  	TRIAGEERROR equ TRANSTART+TriageError
  6672                                  	;(MSDOS 5.0 COMMAND.COM, 2320h+2D92h)
  6673                                  
  6674                                  	;call	50B2h
  6675 00001760 E8(7E4E)                	call	TRIAGEERROR	; TRIAGEERROR procedure is at offset 354Eh
  6676                                  				; in original MSDOS 3.3 COMMAND.COM
  6677                                  
  6678                                  			; TriageError procedure is at offset 50B2h
  6679                                  			; in original MSDOS 5.0 COMMAND.COM	
  6680 00001763 83F841                  	cmp	ax,65
  6681 00001766 7503                    	jne	short doprt
  6682                                  	;mov	dx,offset ResGroup:BadComaccMsg	; dx = ptr to msg
  6683 00001768 BA[D31D]                	mov	dx,BADCOMACCMSG
  6684                                  doprt:
  6685 0000176B E807FB                  	call	RPrint
  6686                                  	;mov	si,offset ResGroup:ComSpect
  6687 0000176E BE[261C]                	mov     si,COMSPECT ; "\COMMAND.COM"
  6688                                  	;;mov	di,[ECOMLOC]
  6689                                  	;mov	di,[COMSPOFFSET] ; [ComspOffset]
  6690                                  	; 16/01/2023
  6691 00001771 BF0E00                  	mov	di,ECOMSPEC ; mov di,0Eh
  6692 00001774 B90E00                  	mov	cx,14
  6693 00001777 F3A4                    	rep	movsb				; get my default back
  6694                                  
  6695 00001779 EBDA                    	jmp	short SetComsrRet
  6696                                  
  6697                                  	; 16/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6698                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1927h (CODERES:0BE7h)
  6699                                  ArgsDone:
  6700                                  	; MSDOS 6.0
  6701 0000177B 8E06[2703]              	mov	es,[EnvirSeg]			; get environment back
  6702                                  	;assume	es:nothing			;
  6703                                  
  6704                                  	; MSDOS 3.3 & MSDOS 6.0
  6705 0000177F 803E[8D01]00                    cmp	byte [PermCom],0
  6706 00001784 742E                            jz	short ComReturns
  6707                                  
  6708 00001786 06                      	push	es				; Save environment pointer
  6709 00001787 B450                    	mov	ah,50h
  6710                                  	;mov	ah,SET_CURRENT_PDB ; 50h
  6711 00001789 8CDB                    	mov	bx,ds
  6712 0000178B 8EC3                    	mov	es,bx
  6713 0000178D CD21                    	int	21h				; current process is me
  6714 0000178F BF0A00                  	mov	di,PDB.EXIT ; mov di,0Ah	; Diddle the addresses in my header
  6715                                  	;;mov	ax,offset RESGROUP:LODCOM
  6716                                  	;mov	ax,LODCOM
  6717                                  	; 16/01/2023
  6718 00001792 B8[7E00]                	mov	ax,LodCom_Trap
  6719 00001795 AB                              stosw
  6720 00001796 8CD8                            mov	ax,ds
  6721 00001798 AB                              stosw
  6722                                  	;;mov	ax,offset RESGROUP:CONTC
  6723                                  	;mov	ax,CONTC
  6724                                  	; 16/01/2023
  6725 00001799 B8[4A00]                	mov	ax,Ctrlc_Trap
  6726 0000179C AB                              stosw
  6727 0000179D 8CD8                            mov	ax,ds
  6728 0000179F AB                              stosw
  6729                                  	;;mov	ax,offset DATARES:CritErr_Trap  ; MSDOS 6.0
  6730                                  	;mov	ax,CRITERR
  6731                                  	; 16/01/2023
  6732 000017A0 B8[5500]                	mov	ax,CritErr_Trap
  6733 000017A3 AB                      	stosw
  6734 000017A4 8CD8                    	mov     ax,ds
  6735 000017A6 AB                      	stosw
  6736                                  	;;mov	word ptr ds:16h,ds
  6737                                  	;mov	word ptr ds:[Pdb_Parent_Pid],ds ; Parent is me forever
  6738 000017A7 8C1E1600                	mov	[PDB.PARENT_PID],ds
  6739                                          ;;mov	dx,offset RESGROUP:Int_2e
  6740                                  	;mov	dx,Int_2e
  6741                                          ; 16/01/2023
  6742 000017AB BA[3F00]                	mov	dx,Int2e_Trap
  6743 000017AE B82E25                  	mov	ax,252Eh
  6744                                  	;;mov	ax,(SET_INTERRUPT_VECTOR SHL 8) OR 2Eh
  6745                                  	;mov	ax,(SET_INTERRUPT_VECTOR*256) | 2Eh ; 252Eh
  6746 000017B1 CD21                    	int     21h	; DOS - SET INTERRUPT VECTOR
  6747                                  			; AL = interrupt number
  6748                                  			; DS:DX = new vector to be used for specified interrupt
  6749 000017B3 07                              pop	es				; Remember environment
  6750                                  	
  6751                                  ComReturns:
  6752                                          ;mov	ax,word ptr ds:Pdb_Parent_Pid
  6753 000017B4 A11600                  	mov	ax,[PDB.PARENT_PID] ; mov ax,ds:16h
  6754                                  	; 16/01/2023
  6755 000017B7 A3[2901]                	mov	[Parent],ax			; Save parent
  6756                                          ;mov	word ptr ds:Pdb_Parent_Pid,ds 	; Parent is me
  6757 000017BA 8C1E1600                        mov	[PDB.PARENT_PID],ds ; mov word ptr ds:16h,ds
  6758                                          ;mov	ax,word ptr ds:PDB_Jfn_Table
  6759 000017BE A11800                          mov	ax,[PDB.JFN_TABLE] ; mov ax,ds:18h
  6760 000017C1 A3[8A01]                        mov	[Io_Save],ax		; Get the default stdin and out
  6761 000017C4 8C1E[2B03]                      mov	[Com_Ptr+2],ds		; Set all these to resident
  6762 000017C8 8C1E[2F03]                      mov	[Com_Fcb1+2],ds
  6763 000017CC 8C1E[3303]              	mov	[Com_Fcb2+2],ds
  6764                                          ;mov	di,offset ResGroup:ComSpec
  6765 000017D0 BF[3601]                        mov	di,ComSpec
  6766                                  
  6767                                  	;;mov	si,[ECOMLOC]
  6768                                  	; 16/01/2023
  6769                                  	;mov	si,[ComspOffset]
  6770 000017D3 BE0E00                  	mov	si,ECOMSPEC ; mov si,0Eh
  6771 000017D6 803E[521C]00            	cmp	byte [AllocedEnv],0 ; MSDOS 6.0
  6772                                          ;cmp	byte [CHUCKENV],0 ; MSDOS 3.3
  6773                                  	
  6774 000017DB 8CD8                    	mov	ax,ds				; Xchg es,ds
  6775 000017DD 06                      	push	es
  6776 000017DE 1F                      	pop	ds
  6777 000017DF 8EC0                    	mov	es,ax
  6778                                  
  6779                                  	;jne	short CopyComsp ; MSDOS 6.0
  6780                                  	; 16/01/2023	
  6781 000017E1 7417                    	je	short CopyComsp ; MSDOS 5.0
  6782                                  	;je	short COPYCOMSP	; MSDOS 3.3	; All set up for copy
  6783                                  
  6784 000017E3 0E                              push	cs
  6785 000017E4 1F                              pop	ds
  6786                                  
  6787                                          ;mov	si,offset ResGroup:ComspString
  6788 000017E5 BE[591C]                	mov	si,ComspString ; "COMSPEC=\COMMAND.COM"
  6789 000017E8 06                      	push	es
  6790 000017E9 57                      	push	di
  6791 000017EA E8D701                  	call	IfindE
  6792 000017ED 89FE                    	mov	si,di
  6793 000017EF 06                      	push	es
  6794 000017F0 1F                      	pop	ds
  6795 000017F1 5F                      	pop	di
  6796 000017F2 07                      	pop	es
  6797 000017F3 7305                            jnc	short CopyComsp
  6798                                  
  6799                                  	; MSDOS 6.0
  6800                                  ComSpecNofnd:
  6801                                  	;mov	si,offset ResGroup:ComspString
  6802                                  	;add	si,ComspStrLen
  6803                                  	;push	cs
  6804                                  	;pop	ds
  6805                                  
  6806                                  	; 21/01/2023
  6807                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:19A1h
  6808                                  	;mov	si,0Eh
  6809 000017F5 BE0E00                  	mov	si,ECOMSPEC
  6810 000017F8 0E                      	push	cs
  6811 000017F9 1F                      	pop	ds	
  6812                                  
  6813                                  	; 21/01/2023
  6814                                  ;COMSPECNOFND:
  6815                                  	; MSDOS 3.3
  6816                                          ;;mov	si,[es:ECOMLOC]
  6817                                          ;mov	si,[es:COMSPOFFSET]
  6818                                  	;;add	si,offset RESGROUP:PATHSTRING
  6819                                          ;add	si,PATHSTRING ; "PATH="
  6820                                  	;push	cs
  6821                                  	;pop	ds
  6822                                  
  6823                                  CopyComsp:
  6824                                  	; 21/01/2023
  6825                                  ;COPYCOMSP:
  6826                                  	; MSDOS 3.3 & MSDOS 6.0
  6827                                  	;;mov	es:PutBackComSpec.SubstPtr,di
  6828                                  	;mov	[es:PUTBACKSUBSTPTR],di		; Save ptr to beginning of comspec path
  6829 000017FA 26893E[1501]            	mov	[es:PutBackComSpec],di
  6830 000017FF 807C013A                	cmp	byte [si+1],':'			; Is there a drive specifier in comspec
  6831 00001803 7506                    	jne	short CopyComspLoop		; If not, do not skip over first 2 bytes
  6832                                  	;;add	es:PutBackComSpec.SubstPtr,2
  6833                                  	;add	word [es:PUTBACKSUBSTPTR],2
  6834 00001805 268306[1501]02          	add	word [es:PutBackComSpec],2
  6835                                  CopyComspLoop:
  6836 0000180B AC                      	lodsb
  6837 0000180C AA                      	stosb
  6838 0000180D 08C0                    	or	al,al
  6839 0000180F 75FA                    	jnz	short CopyComspLoop
  6840                                  
  6841 00001811 26893E[7601]            	mov	[es:ComSpec_End],di		; Save ptr to end of comspec path
  6842 00001816 26FF0E[7601]            	dec	word [es:ComSpec_End]
  6843 0000181B 268A26[7F01]            	mov	ah,[es:ComDrv]
  6844 00001820 80C440                  	add	ah,'A'-1 ; 40h
  6845 00001823 268826[1A01]            	mov	[es:PutBackDrv],ah		; save drive letter
  6846                                  
  6847                                  	; -------------------------------
  6848                                  
  6849                                  ; 21/01/2023 - Retro DOS v4.0 COMMAND.COM
  6850                                  %if 0
  6851                                  
  6852                                  	; MSDOS 3.3
  6853                                  	push	cs
  6854                                          pop	ds
  6855                                          ;mov	bx,offset RESGROUP:DATARESEND + 15
  6856                                  	mov	bx,DATARESEND+15
  6857                                          mov	cl,4
  6858                                          shr	bx,cl
  6859                                          MOV     AH,SETBLOCK ; 4Ah
  6860                                          int	21h			; Shrink me to the resident only
  6861                                  
  6862                                  ENVMAXIMUM:   ; offset 11EEh for MSDOS 3.3 COMMAND.COM     
  6863                                  
  6864                                  	mov	byte [TRNMVFLG], 1
  6865                                  	push	es ; *
  6866                                  	mov	si,TRANSTART
  6867                                  	mov	di,0
  6868                                  	mov	es,[TrnSeg]
  6869                                  	;mov	cx,4D5Ch
  6870                                  	mov	cx,TRANSPACEEND ; 4D5Ch for MSDOS 3.3 COMMAND.COM
  6871                                  	push	cx
  6872                                  	mov	ax,cx
  6873                                  	add	ax,si
  6874                                  	mov	cl,4
  6875                                  	shr	ax,cl
  6876                                  	inc	ax
  6877                                  	mov	cx,ds
  6878                                  	add	ax,cx
  6879                                  	cmp	ax,[TrnSeg]
  6880                                  	pop	cx
  6881                                  	jb	short MOV_DOWN
  6882                                  
  6883                                  	call	LOADCOM
  6884                                  	jmp	short ICHKSUM
  6885                                  
  6886                                  MOV_DOWN:
  6887                                  	add     si,cx
  6888                                  	dec     si
  6889                                  	add     di,cx
  6890                                  	dec     di
  6891                                  	std
  6892                                  	rep	movsb
  6893                                  	cld
  6894                                  
  6895                                  ICHKSUM:
  6896                                  	; 24/09/2018
  6897                                  ;
  6898                                  ; Compute checksum right now before we can get corrupted and save it
  6899                                  ;
  6900                                  	; MSDOS 6.0
  6901                                  	;mov	si,offset RESGROUP:TranStart
  6902                                  	;add	si,100h
  6903                                  	;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  6904                                  	;
  6905                                  	;cld
  6906                                  	;shr	cx,1
  6907                                  	;xor	dx,dx
  6908                                  ;Ichksum:
  6909                                  	;lodsw
  6910                                  	;add	dx,ax
  6911                                  	;adc	dx,0
  6912                                  	;loop	Ichksum
  6913                                  	;
  6914                                          ;mov	Sum,dx			; store checksum
  6915                                  
  6916                                  	; MSDOS 3.3
  6917                                  	pop     es ; *
  6918                                  	call    CHKSUM
  6919                                  	mov     [SUM],dx
  6920                                  
  6921                                  	; MSDOS 3.3 & MSDOS 6.0
  6922                                          cmp     byte [PRDATTM],0	;
  6923                                          jnz     short NOBATCHSEG	; don't do autoexec or date time
  6924                                  ;
  6925                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  6926                                  ;
  6927                                  	; BATCHSEGMENT.SIZE = 32 for MSDOS 3.3 (= 33 for MSDOS 6.0)
  6928                                  	;mov	bx,3
  6929                                  	mov	bx,(BATCHSEGMENT.SIZE+15+1+0Fh)/16 ; (32+15+1+0Fh)/16 = 3
  6930                                          mov     ah,ALLOC ; 48h		;
  6931                                  	int     21h	; DOS - 2+ - ALLOCATE MEMORY
  6932                                  			; BX = number of 16-byte paragraphs desired
  6933                                  	jc      short NOBATCHSEG	; didn't allocate - pretend no batch
  6934                                          mov     [BATCH],ax		; save batch segment
  6935                                  
  6936                                  NOBATCHSEG:
  6937                                  
  6938                                  %endif
  6939                                  	; -------------------------------
  6940                                  
  6941                                  	; 21/01/2023 - Retrro DOS v4.0 (& v4.1) COMMAND.COM
  6942                                  	
  6943                                  	; MSDOS 6.0
  6944 00001828 E81002                  	call	setup_for_messages		; set up parse and extended error messages
  6945                                  
  6946                                  ; The routine below sets up the exact resident size of COMMAND. If this is not
  6947                                  ; the first COMMAND, then the resident code is not duplicated and the resident
  6948                                  ; size is just the data. If we are the first COMMAND, it checks if we are to
  6949                                  ; be loaded into HIMEM. If not, then the resident size includes the code and
  6950                                  ; the data otherwise it is just the data.
  6951                                   
  6952 0000182B E8A702                  	call	Setup_res_end			; put resident size in ResSize
  6953                                  
  6954 0000182E 0E                      	push	cs
  6955 0000182F 1F                      	pop	ds
  6956                                  	;assume	ds:RESGROUP
  6957                                  
  6958                                  ;Public EnvMaximum
  6959                                  ; 14/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  6960                                  EnvMaximum:	; MSDOS 5.0 COMMAND.COM - RESGROUP:19DCh
  6961                                  
  6962                                  	; 21/01/2023
  6963                                  	; MSDOS 6.0
  6964                                  	;;mov	si,offset RESGROUP:TranStart
  6965                                  	;;mov	si,2320h	; MSDOS 5.0 COMMAND.COM
  6966                                  	;mov	si,TRANSTART
  6967                                  	;add	si,100h
  6968                                  	; 23/04/2023
  6969 00001830 BE0023                  	mov	si,TRANSTART+100h
  6970                                  
  6971                                  	;mov	cx,offset TRANGROUP:TranDataEnd - 100H
  6972                                  	;mov	cx,87C2h	; MSDOS 5.0 COMMAND.COM
  6973 00001833 B9[1085]                	mov	cx,TRANDATAEND-100h
  6974                                  
  6975 00001836 FC                      	cld
  6976 00001837 D1E9                    	shr	cx,1
  6977 00001839 31D2                    	xor	dx,dx
  6978                                  Ichksum:
  6979 0000183B AD                      	lodsw
  6980 0000183C 01C2                    	add	dx,ax
  6981 0000183E 83D200                  	adc	dx,0
  6982 00001841 E2F8                    	loop	Ichksum
  6983                                  
  6984 00001843 8916[8201]                      mov	[Sum],dx			; store checksum
  6985                                  
  6986 00001847 803E[451C]00                    cmp     byte [PRDATTM],0
  6987 0000184C 750C                            jne	short NoBatchSeg		; don't do autoexec or date time
  6988                                  	
  6989                                  ; Allocate batch segment for d:/autoexec.bat + no arguments
  6990                                  
  6991                                  	;mov	bx,((SIZE BatchSegment) + 15 + 1 + 0fh)/16
  6992                                  	; 21/01/2023
  6993                                  	;mov	bx,4
  6994 0000184E BB0400                          mov	bx,((BATCHSEGMENT.SIZE)+16+0Fh)/16 ; (33+16+15)/16
  6995 00001851 B448                    	mov	ah,48h
  6996                                  	;mov	ah,ALLOC                        ;
  6997 00001853 CD21                            int	21h                             ;
  6998 00001855 7203                    	jc	short NoBatchSeg		; didn't allocate - pretend no batch
  6999 00001857 A3[3401]                        mov	[Batch],ax			; save batch segment
  7000                                  
  7001                                  NoBatchSeg:
  7002                                  
  7003                                  ; 21/01/2023
  7004                                  %if 0
  7005                                  	; MSDOS 3.3
  7006                                  	mov     bx,0FFFFh ; 65535
  7007                                  	mov     ah,ALLOC ; 48h
  7008                                  	int     21h	; DOS - 2+ - ALLOCATE MEMORY
  7009                                  			; BX = number of 16-byte paragraphs desired
  7010                                  	sub     bx,[TRNSIZE]
  7011                                  	sub     bx,128
  7012                                  	mov     [ENVMAX],bx
  7013                                  
  7014                                  	cmp     bx,4096
  7015                                  	jb      short ALLOCENVIRSEG
  7016                                  	mov     bx,4096-1		; max. allowed environment size
  7017                                  	mov     [ENVMAX],bx
  7018                                  
  7019                                  ALLOCENVIRSEG:
  7020                                  	mov     ah,ALLOC ; 48h
  7021                                  	int     21h	; DOS - 2+ - ALLOCATE MEMORY
  7022                                  			; BX = number of 16-byte paragraphs desired
  7023                                  	mov     bx,[ENVIRSEG]		; get old environment segment
  7024                                  	mov     [OLDENV],bx		; save it	
  7025                                  	mov     word [USEDENV],0	; initialize environment size counter
  7026                                  	mov     ds,bx
  7027                                  	mov     [ss:ENVIRSEG], ax	; save new environment segment
  7028                                  	mov     es,ax
  7029                                  	xor     si,si
  7030                                  	mov     di,si
  7031                                  	mov     bx,[ss:ENVMAX]
  7032                                  	shl     bx,1
  7033                                  	shl     bx,1
  7034                                  	shl     bx,1
  7035                                  	shl     bx,1
  7036                                  	mov     [ss:ENVMAX],bx		; convert envmax to bytes
  7037                                  	dec     bx			; dec by one to leave room for double 0
  7038                                  	xor     dx,dx			; use dx to indicate that there was
  7039                                  					; no environment size error.
  7040                                  
  7041                                  NXSTR:
  7042                                  	call    GETSTRLEN		; get the size of the current env string
  7043                                  
  7044                                  	push    ds
  7045                                  	push    cs
  7046                                  	pop     ds
  7047                                  	add     [USEDENV],cx		; add the string length to env size
  7048                                  	pop     ds
  7049                                  	cmp     cx,1			; end of environment was encountered.
  7050                                  	je      short ENVEXIT
  7051                                  	sub     bx,cx
  7052                                  	jnb     short OKCPYSTR		; can't fit in all of enviroment.
  7053                                  	inc     dx			; out of env space msg must be displayed
  7054                                  	jmp     short ENVEXIT
  7055                                  
  7056                                  	;nop
  7057                                  
  7058                                  OKCPYSTR:
  7059                                  	jmp     short NXSTR
  7060                                  
  7061                                  ENVEXIT: 
  7062                                  	push    cs
  7063                                  	pop     ds
  7064                                  	or      dx, dx			; dx will be non-zero if error
  7065                                  	jz      short ENVNOERR
  7066                                  	mov     dx,OUTENVMSG		; dx = ptr to msg
  7067                                  	call    RPRINT
  7068                                  
  7069                                  %endif
  7070                                  
  7071                                  	; 21/01/2023
  7072                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7073 0000185A 8B1E[2703]              	mov	bx,[EnvirSeg]			; get old environment segment
  7074 0000185E 891E[721C]              	mov	[OldEnv],bx			; save it
  7075 00001862 C706[741C]0000          	mov	word [UsedEnv],0		; initialize env size counter
  7076 00001868 8EDB                    	mov	ds,bx
  7077                                  	;assume	ds:nothing
  7078                                  	
  7079 0000186A 31F6                    	xor	si,si
  7080 0000186C 89F7                    	mov	di,si
  7081                                  
  7082                                  ; This is the maximum allowed size for the environment
  7083                                  
  7084                                  	; 21/01/2023
  7085                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1A1Eh
  7086                                  	;mov	bx,4096 - 1 ; 0FFFh		; max. allowed env. size
  7087                                  	;;mov	[ss:EnvMax],bx
  7088                                  	;shl	bx,1
  7089                                  	;shl	bx,1
  7090                                  	;shl	bx,1
  7091                                  	;shl	bx,1
  7092 0000186E BBF0FF                  	mov	bx,(4096-1)<<4 ; mov bx,0FFF0h
  7093 00001871 36891E[701C]            	mov	[ss:EnvMax], bx			; convert envmax to bytes
  7094 00001876 4B                      	dec	bx				; dec by one to leave room for double 0
  7095 00001877 31D2                    	xor	dx,dx				; use dx to indicate that there was
  7096                                  						; no environment size error.
  7097                                  ;public NxtStr
  7098                                  NxtStr:
  7099 00001879 E81E01                  	call	GetStrLen			; get the size of the current env string
  7100                                  
  7101                                  ;Bugbug: Can use ss here to address UsedEnv
  7102                                  
  7103 0000187C 1E                      	push	ds                              ; get addressability to environment
  7104 0000187D 0E                              push	cs                              ;                       counter
  7105 0000187E 1F                              pop	ds                              ;
  7106                                  	;assume	ds:ResGroup
  7107 0000187F 010E[741C]                      add	[UsedEnv],cx			; add the string length to env size
  7108 00001883 1F                      	pop	ds                              ;
  7109                                  	;assume	ds:nothing
  7110                                  	
  7111 00001884 83F901                  	cmp	cx,1				; end of environment was encountered.
  7112 00001887 7405                    	je	short EnvExit
  7113 00001889 29CB                    	sub	bx,cx
  7114                                  	;jae	short OkCpyStr			; can't fit in all of enviroment.
  7115                                  	; 21/01/2023
  7116 0000188B 73EC                    	jae	short NxtStr
  7117 0000188D 42                      	inc	dx				; out of env space msg must be displayed
  7118                                  	;jmp	short EnvExit
  7119                                  
  7120                                  ;OkCpyStr:
  7121                                  	;jmp	short NxtStr
  7122                                  
  7123                                  EnvExit:
  7124 0000188E 0E                      	push	cs
  7125 0000188F 1F                      	pop	ds
  7126                                  	;assume	ds:ResGroup
  7127 00001890 09D2                    	or	dx,dx				; dx will be non-zero if error
  7128 00001892 7406                    	jz	short EnvNoErr
  7129                                  	;mov	dx,offset ResGroup:OutEnvMsg	; dx = ptr to msg
  7130 00001894 BA[301D]                	mov	dx,OUTENVMSG
  7131 00001897 E8DBF9                  	call 	RPrint
  7132                                  EnvNoErr:
  7133 0000189A A1[6E1C]                	mov	ax,[EnvSiz]			; env size previously set
  7134 0000189D B104                    	mov	cl,4
  7135 0000189F D3E0                    	shl	ax,cl				; get size in bytes
  7136 000018A1 3B06[741C]              	cmp	ax,[UsedEnv]			; is it a new env?
  7137 000018A5 7706                    	ja	short st_envsize		; yes, store the size
  7138 000018A7 A1[741C]                	mov	ax,[UsedEnv]
  7139 000018AA 83C00F                  	add	ax,15				; round up
  7140                                  st_envsize:	
  7141 000018AD D3E8                    	shr	ax,cl
  7142 000018AF A3[6E1C]                	mov	[EnvSiz],ax			; store env size needed(paras)
  7143                                  
  7144                                  ;if MSVER
  7145                                  	;cmp	SingleCom,0
  7146                                  	;jnz	nophead 			; don't print header if SingleCom
  7147                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7148                                  	;call	RPrint
  7149                                  ;nophead:
  7150                                  ;endif
  7151                                  
  7152                                  ; 21/01/2023
  7153                                  %if 0
  7154                                  	; MSDOS 3.3
  7155                                  ENVNOERR:
  7156                                  	mov     cx,[ENVMAX]
  7157                                  	sub     cx,bx			; current environment size in bytes
  7158                                  	add     cx,16			; add memory arena to the size
  7159                                  	shr     cx,1
  7160                                  	shr     cx,1
  7161                                  	shr     cx,1
  7162                                  	shr     cx,1			; convert current env size to paragraphs
  7163                                  	cmp     cx,[ENVSIZ]		; compare with env size previously set
  7164                                  	;jb	short SET_ENVSIZE
  7165                                  	jna	short SET_ENVSIZE  ; 24/09/2018 - Retro DOS v3.0
  7166                                  	mov     [ENVSIZ],cx		; store env size needed (paragraphs)
  7167                                  
  7168                                  SET_ENVSIZE:
  7169                                  	mov     bx,[ENVSIZ]
  7170                                  	mov     ax,es
  7171                                  	add     ax,bx			; get end segment of environemnt
  7172                                  	cmp     ax,[INITEND]		; compare with init code end segment
  7173                                  	ja      short NOPHEAD
  7174                                  					; free unused paragraghs		
  7175                                  	mov     ax,es
  7176                                  	mov     bx,[INITEND]
  7177                                  	sub     bx,ax
  7178                                  	;mov	byte [RESETENV],1  ; 24/09/2018
  7179                                  	mov	word [RESETENV],1	; environment segment reset sign
  7180                                  
  7181                                  NOPHEAD:
  7182                                  	; MSDOS 3.3
  7183                                  	mov     ah,SETBLOCK ; 4Ah
  7184                                  	int     21h	; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
  7185                                  			; ES = segment address of block to change
  7186                                  			; BX = new size in paragraphs
  7187                                  %endif
  7188                                  	; 21/01/2023
  7189                                  
  7190                                  	; MSDOS 3.3 & 6.0
  7191 000018B2 833E[3401]00            	cmp     word [Batch],0		; did we set up a batch segment?
  7192 000018B7 7503                    	jnz     short DoDate		; yes - go initialize it
  7193 000018B9 E99300                  	jmp     NoDttm			; don't do autoexec or date time
  7194                                  
  7195                                  DoDate:
  7196                                  
  7197                                  ; allocate batch segment for d:/autoexec.bat + no arguments
  7198                                  
  7199 000018BC A1[3401]                	mov	ax,[Batch]		; get batch segment
  7200 000018BF C606[8801]03            	mov	byte [EchoFlag],3	; set batch echo
  7201 000018C4 C706[9701]0100          	mov	word [Nest],1		; set nest flag to 1 batch
  7202 000018CA 8EC0                    	mov	es,ax
  7203                                  
  7204                                  ; initialize the segment
  7205                                  
  7206 000018CC 31FF                    	xor	di,di
  7207                                  	;;mov	al,0
  7208                                  	;mov	al,BATCHTYPE ; 0
  7209                                  	; 06/06/2023
  7210 000018CE 31C0                    	xor	ax,ax
  7211 000018D0 AA                      	stosb
  7212                                  	;mov	al,1			; initialize echo for batch exit
  7213                                  	;inc	al
  7214                                  	; 22/07/2024
  7215 000018D1 40                      	inc	ax
  7216 000018D2 AA                      	stosb
  7217                                  
  7218                                  ; Hosebag! This guy does not use the struct fields to init the BatchSegment
  7219                                  
  7220                                  	;xor	ax,ax			; initialize to zero
  7221                                  	; 06/06/2023
  7222                                  	;dec	al ; ax = 0
  7223                                  	; 22/07/2024
  7224 000018D3 48                      	dec	ax
  7225                                  
  7226                                  	; 21/01/2023
  7227 000018D4 AA                      	stosb	; MSDOS 6.0 		; clear out BatchEOF
  7228                                  
  7229 000018D5 AB                      	stosw				; batch segment of last job - batlast
  7230 000018D6 AB                      	stosw				; segment for FOR
  7231 000018D7 AA                      	stosb				; FOR flag
  7232 000018D8 AB                      	stosw				; position in file - batseek
  7233 000018D9 AB                      	stosw
  7234                                  
  7235                                  ; clean out the parameters
  7236                                  
  7237                                  	;mov	ax,-1			; initialize to no parameters
  7238                                  	; 06/06/2023
  7239 000018DA 48                      	dec	ax ; ax = -1
  7240                                  
  7241 000018DB B90A00                  	mov	cx,10
  7242 000018DE F3AB                    	rep	stosw
  7243                                  
  7244                                  ; decide whether we should grab the default drive
  7245                                  
  7246 000018E0 803E[341C]00            	cmp	byte [AUTOBAT],0 ; ":\AUTOEXEC.BAT"
  7247 000018E5 7509                    	jne	short NoAutSet
  7248 000018E7 B419                    	mov	ah,19h	; 21/01/2023
  7249                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  7250 000018E9 CD21                    	int	21h
  7251                                  	;;add	al,'A'
  7252                                  	;add	al,[letter_A] ; Ucasea
  7253                                  	;add	al,[ucasea] ; 21/01/2023
  7254                                  	; 21/01/2023
  7255 000018EB 0441                    	add	al,'A'
  7256 000018ED A2[341C]                	mov	[AUTOBAT],al
  7257                                  	; 21/01/2023
  7258                                  	;mov	[KAUTOBAT],al
  7259                                  NoAutSet:
  7260                                  
  7261                                  ; copy in the batch file name (including nul)
  7262                                  
  7263                                  	;mov	si,offset ResGroup:AutoBat
  7264 000018F0 BE[341C]                	mov	si,AUTOBAT
  7265 000018F3 B90800                  	mov	cx,8
  7266 000018F6 F3A5                    	rep	movsw
  7267                                  	; 23/04/2023
  7268 000018F8 A4                      	movsb	; MSDOS 6.0		; move in carriage return to terminate string
  7269                                  
  7270                                  	;mov	dx,offset ResGroup:AutoBat
  7271 000018F9 BA[341C]                	mov     dx,AUTOBAT ; ":\AUTOEXEC.BAT"
  7272                                  
  7273                                  	;;mov	ax,OPEN shl 8
  7274 000018FC B8003D                  	mov	ax,3D00h ; 21/01/2023
  7275                                  	;mov	ax,OPEN*256 ; 3D00h  ; open for read
  7276 000018FF CD21                    	int	21h			; see if autoexec.bat exists
  7277 00001901 7208                    	jc	short noabat
  7278 00001903 89C3                    	mov	bx,ax
  7279 00001905 B43E                    	mov	ah,3Eh ; 21/01/2023
  7280                                  	;mov	ah,CLOSE  ; 3Eh
  7281 00001907 CD21                    	int	21h
  7282 00001909 EB51                    	jmp	short Drv0		; go process autoexec
  7283                                  
  7284                                  noabat:
  7285 0000190B 50                      	push	ax
  7286 0000190C E89400                  	call	Setup_Seg
  7287 0000190F A3[501C]                	mov	[triage_add+2],ax
  7288 00001912 58                      	pop	ax
  7289 00001913 FF1E[4E1C]              	call	far [triage_add]	; get extended error
  7290 00001917 83F841                  	cmp	ax,65			; network access denied?
  7291                                  	;jne	short OPENERR		; no - go deallocate batch
  7292                                  	; 21/01/2023
  7293                                  	;je	short AccDenErr
  7294 0000191A 7506                    	jne	short OpenErr
  7295                                  
  7296                                  	; 21/01/2023
  7297                                  ;_ACCDENERROR:					; yes - put out message
  7298                                  ;	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7299                                  ;	mov	dx,ACCDENERR
  7300                                  ;	call	RPRINT
  7301                                  
  7302                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7303                                  
  7304                                  	; MSDOS 6.0 (& MSDOS 5.0)
  7305                                  
  7306                                  ; 21/01/2023
  7307                                  %if 0
  7308                                  
  7309                                  ; If AUTOEXEC.BAT is not found, then check for KAUTOEXE.BAT. Changed
  7310                                  ; by Ellen to check only when in Korea. The country information
  7311                                  ; returned will overlay the old parse data area, but we don't care
  7312                                  ; since we won't need the parse information or country information.
  7313                                  ; We only care about the country code returned in BX.
  7314                                  
  7315                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1AE7h
  7316                                  
  7317                                  	;mov	dx,offset ResGroup:Internat_Info ; set up internat vars
  7318                                  	mov	dx,INTERNAT_INFO
  7319                                  	mov	ax,3800h
  7320                                  	;mov	ax,INTERNATIONAL<<8
  7321                                  	;;mov	ax,INTERNATIONAL shl 8		; get country dependent info
  7322                                  	int	21h				;
  7323                                  	jc	short NoKabat 			; error - don't bother with it
  7324                                  	cmp	bx,52h
  7325                                  	;cmp	bx,KOREA_COUNTRY_CODE		; are we speaking korean?
  7326                                  	jne	short OpenErr 			; no, don't check for kautoexe
  7327                                  
  7328                                  	;mov	di,BatFile			; 3/3/kk
  7329                                  	mov	di,20h
  7330                                  	;mov	si,offset ResGroup:KautoBat	; another trial to do	3/3/kk
  7331                                  	mov	si,KAUTOBAT
  7332                                  	mov	cx,8				; auto execution for the 3/3/kk
  7333                                  	rep	movsw				; non-english country	3/3/kk
  7334                                  	movsb					; move in carraige return to terminate string
  7335                                  	;mov	dx,offset ResGroup:KautoBat	; 3/3/kk
  7336                                  	mov	dx,KAUTOBAT
  7337                                  	mov	ax,3D00h
  7338                                  	;mov	ax,OPEN<<8
  7339                                  	;;mov	ax,OPEN shl 8			; 3/3/kk
  7340                                  	int	21h				; see if kautoexe.bat exists  3/3/kk
  7341                                  	jc	short NoKabat 			; 3/3/kk
  7342                                  	mov	bx,ax				; 3/3/kk
  7343                                  	mov	ah,3Eh
  7344                                  	;mov	ah,CLOSE			; 3/3/kk
  7345                                  	int	21h				; 3/3/kk
  7346                                  	jmp	short Drv0			; 3/3/kk
  7347                                  
  7348                                  NoKabat:					; 3/3/kk
  7349                                  	call	far [triage_add]		; get extended error
  7350                                  	cmp	ax,65				; network access denied?
  7351                                  	jnz	short OpenErr 			; no - go deallocate batch
  7352                                  
  7353                                  %endif
  7354                                  	; 21/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7355                                  
  7356                                  AccDenErr:					; yes - put out message
  7357                                  	;mov	dx,offset ResGroup:AccDen	; dx = ptr to msg
  7358 0000191C BA[BB05]                	mov	dx,ACCDEN
  7359 0000191F E853F9                  	call	RPrint
  7360                                  OpenErr:
  7361                                  ;OPENERR:
  7362 00001922 8E06[3401]              	mov	es,[Batch]		; not found--turn off batch job
  7363 00001926 B449                    	mov	ah,49h
  7364                                  	;mov	ah,DEALLOC ; 49h
  7365 00001928 CD21                    	int	21h
  7366 0000192A C706[3401]0000          	mov	word [Batch],0		; after dealloc in case of ^c
  7367 00001930 C606[8801]01            	mov	byte [EchoFlag],1
  7368 00001935 C706[9701]0000          	mov	word [Nest],0		; indicate no batch in progress
  7369                                  
  7370                                  ;DoDttm:
  7371                                  	;mov	ax,offset TranGroup:Datinit
  7372 0000193B B8[652E]                	mov	ax,DATINIT
  7373 0000193E A3[461C]                	mov	[INITADD],ax
  7374                                  
  7375                                  	; MSDOS 6.0
  7376                                  ;;M004;;mov	ax,TrnSeg	
  7377                                  ;
  7378                                  ; M004; We cant use TrnSeg now because it is not initialized. We now that
  7379                                  ; M004; the transient starts on a para boundary at the label TranStart.
  7380                                  ; M004; We use TranStart to get the start of the transient segment.
  7381                                  
  7382                                  	; 21/01/2023
  7383                                  	;mov	ax,offset RESGROUP:TranStart	; M004
  7384                                  	;;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7385                                  	; 06/06/2023
  7386                                  	;mov	ax,TRANSTART
  7387                                  	;mov	cl,4				; M004
  7388                                  	;shr	ax,cl				; get relative seg ; M004
  7389                                  	; 06/06/2023
  7390 00001941 B82002                  	mov	ax,TRANSTART>>4	
  7391                                  
  7392 00001944 8CC9                    	mov	cx,cs
  7393 00001946 01C8                    	add	ax,cx				; ax = transient seg ; M004
  7394                                  
  7395                                  	; 21/01/2023
  7396                                  	; MSDOS 3.3
  7397                                  	; 25/09/2018
  7398                                  	;mov     ax,[TrnSeg]	; COMMAND.COM (MSDOS 3.3) - Offset 1387h
  7399                                  
  7400                                  	; MSDOS 3.3 & MSDOS 6.0
  7401 00001948 A3[481C]                	mov	[INITADD+2],ax
  7402                                  	;call	dword ptr InitAdd
  7403 0000194B FF1E[461C]              	call	far [INITADD]
  7404                                  
  7405                                  NoDttm:
  7406                                  	; MSDOS 6.0
  7407                                  	; 21/01/2023
  7408                                  ;Copyright:
  7409                                  	;public	Copyright
  7410                                  ;	Bugbug:	remove Copyright label.
  7411                                  
  7412                                  ;if IBMVER
  7413 0000194F 833E[8E01]00            	cmp	word [SingleCom],0
  7414 00001954 7506                    	jnz	short Drv0			; don't print header if SingleCom
  7415                                  	;mov	dx,offset ResGroup:CopyrightMsg	; dx = ptr to msg
  7416 00001956 BA[4B1D]                	mov	dx,COPYRIGHTMSG
  7417 00001959 E819F9                  	call	RPrint
  7418                                  ;endif
  7419                                  	; 21/01/2023
  7420                                  	; MSDOS 3.3
  7421                                  	;cmp	word [SingleCom],0	; don't print header if SingleCom
  7422                                  	;jnz	short DRV0
  7423                                  	;mov	dx,HEADERPTR	; dx = ptr to msg
  7424                                  	;call	RPRINT
  7425                                  ;DRV0:
  7426                                  	; MSDOS 3.3
  7427                                  	;mov	byte [INITFLAG],0
  7428                                  	;jmp	ENDINIT
  7429                                  
  7430                                  	; 21/01/2023
  7431                                  	; MSDOS 6.0
  7432                                  Drv0:						; Reset APPEND state
  7433 0000195C 1E                      	push	ds				; save data segment
  7434 0000195D 0E                      	push	cs				; Get local segment into DS
  7435 0000195E 1F                      	pop	ds				;
  7436 0000195F B807B7                  	mov	ax,0B707h ; 21/01/2023
  7437                                  	;mov	ax,APPENDSETSTATE		; Set the state of Append
  7438 00001962 8B1E[AB01]              	mov	bx,[Append_State] 		;  back to the original state
  7439 00001966 CD2F                    	int	2Fh				;
  7440 00001968 1F                      	pop	ds				; get data segment back
  7441                                  
  7442                                  ;Check FirstCom set previously to see if this is the first instance of
  7443                                  ;command.com. If not, we do not move command.com. Instead, we copy over the
  7444                                  ;jump table from the previous stub to the current stub.
  7445                                  
  7446 00001969 803E[C020]01            	cmp	byte [FirstCom],1		; first command.com?
  7447 0000196E 7424                    	jz	short move_code			; yes, move it
  7448                                  
  7449 00001970 06                      	push	es
  7450 00001971 1E                      	push	ds
  7451                                  
  7452 00001972 1E                      	push	ds
  7453 00001973 07                      	pop	es
  7454                                  	;mov	di,offset DATARES:Int2f_Entry
  7455 00001974 BF[0400]                	mov	di,Int2f_Entry	
  7456                                  
  7457                                  	;mov	ds,[es:ResJmpTable+2]		; get segment address
  7458                                  	;mov	si,[es:ResJmpTable]		; get offset address
  7459                                  	; 22/07/2024 - PCDOS 7.1 COMMAND.COM
  7460 00001977 26C536[BC20]            	lds	si,[es:ResJmpTable]
  7461                                  
  7462                                  	;mov	cx,11
  7463                                  	;;mov 	cx,NUM_RELOC_ENTRIES 		; number of dword ptrs
  7464                                  	;shl	cx,1
  7465                                  	;shl	cx,1				; size of table in bytes
  7466                                  	; 21/01/2023
  7467 0000197C B92C00                  	mov	cx,44				; size of table in bytes
  7468                                  
  7469 0000197F FC                      	cld
  7470 00001980 F3A4                    	rep	movsb				; copy the jump table
  7471                                  
  7472                                  ;Check if the resident code is in HMA. We assume that it is in HMA if its 
  7473                                  ;code segment > 0f000h. If in HMA, we set the ComInHMA flag
  7474                                  
  7475 00001982 26817DFE00F0            	cmp	word [es:di-2],0F000h		; is resident code in HMA?
  7476 00001988 7206                    	jb	short res_low			; no, dont set flag
  7477                                  
  7478 0000198A 26C606[3400]01          	mov	byte [es:ComInHMA],1		; indicate code in HMA
  7479                                  res_low:
  7480 00001990 1F                      	pop	ds
  7481 00001991 07                      	pop	es
  7482 00001992 EB03                    	jmp	short finish_init
  7483                                  
  7484                                  ;Now, we can move the resident code to its final location, either to HIMEM
  7485                                  ;or to overlay the messages in the data segment if the user has not used the
  7486                                  ;/msg switch.
  7487                                  
  7488                                  move_code:
  7489 00001994 E88501                  	call	Move_res_code			; move the code
  7490                                  
  7491                                  finish_init:
  7492                                  	;jmp	RESGROUP:EndInit 		; finish initializing
  7493 00001997 E968E8                  	jmp	EndInit
  7494                                  
  7495                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7496                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1BA8h (CODERES:0E68h)
  7497                                  
  7498                                  GetStrLen:
  7499                                  ;	Get length of string pointed to by DS:SI. Length includes NULL.
  7500                                  ;	Length is returned in CX
  7501                                  
  7502                                  	; MSDOS 3.3 & MSDOS 6.0
  7503 0000199A 31C9                    	xor	cx,cx
  7504                                  NxtChar:
  7505 0000199C AC                      	lodsb
  7506 0000199D 41                      	inc	cx
  7507 0000199E 08C0                    	or	al,al
  7508 000019A0 75FA                    	jnz	short NxtChar
  7509 000019A2 C3                      	retn
  7510                                  
  7511                                  	; 29/01/2023
  7512                                  Setup_Seg:
  7513                                  
  7514                                  ; If the transient has been loaded in TranSeg, then we need to use that
  7515                                  ; segment for calls to routines in the transient area. Otherwise, the current
  7516                                  ; code segment is used
  7517                                  ; Segment returned in AX.
  7518                                  
  7519                                  	; MSDOS 3.3 & MSDOS 6.0
  7520 000019A3 A1[7A01]                	mov	ax,[TrnSeg]
  7521 000019A6 803E[7C01]01            	cmp	byte [TrnMvFlg],1	; Has transient portion been moved
  7522 000019AB 7405                    	je	short setup_end
  7523                                  
  7524                                  ;06/06/2023
  7525                                  %if 0
  7526                                  	push	bx
  7527                                  	mov	bx,cs
  7528                                  	;mov	ax,offset ResGroup:TranStart
  7529                                  	;mov	ax,2320h ; MSDOS 5.0 COMMAND.COM
  7530                                  	; 06/06/2023
  7531                                  	;mov	ax,26E0h ; MSDOS 6.22 COMMAND.COM
  7532                                  	;mov	ax,TRANSTART
  7533                                  	;shr	ax,1
  7534                                  	;shr	ax,1
  7535                                  	;shr	ax,1
  7536                                  	;shr	ax,1
  7537                                  	; 29/01/2023
  7538                                  	mov	ax,TRANSTART>>4
  7539                                  	add	ax,bx
  7540                                  	pop	bx
  7541                                  %endif
  7542                                  	; 06/06/2023
  7543 000019AD 8CC8                    	mov	ax,cs
  7544 000019AF 052002                  	add	ax,TRANSTART>>4
  7545                                  
  7546                                  setup_end:
  7547 000019B2 C3                      	retn
  7548                                  
  7549                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7550                                  ;RPRINT:
  7551                                  	; MSDOS 3.3
  7552                                  	;push    ax
  7553                                  	;call    SETUP_SEG
  7554                                  	;mov     [PRINTADD+2], ax
  7555                                  	;;call	dword ptr PRINTADD
  7556                                  	;call	far [PRINTADD]
  7557                                  	;pop     ax
  7558                                  	;retn
  7559                                  
  7560                                  	; 29/01/2023
  7561                                  	; MSDOS 6.0
  7562                                  ;***	RPrintParse - display parse error message
  7563                                  ;
  7564                                  ;	ENTRY	DX = parse error #
  7565                                  ;
  7566                                  ;	EXIT	nothing
  7567                                  ;
  7568                                  ;	USED	flags
  7569                                  ;
  7570                                  ;	EFFECTS
  7571                                  ;	  Message is displayed on stdout.
  7572                                  
  7573                                  RPrintParse:	;proc
  7574                                  	;assume	ds:ResGroup,ss:ResGroup
  7575                                  
  7576 000019B3 52                      	push	dx				; preserve DX
  7577 000019B4 87DA                    	xchg	bx,dx				; bx = parse error #
  7578                                  						; dx = saved BX
  7579 000019B6 4B                      	dec	bx				; bx = parse error index, from 0
  7580 000019B7 D1E3                    	shl	bx,1				; bx = offset in word table
  7581                                  	;mov	bx,ParsMsgPtrs[bx]		; bx = ptr to error msg
  7582 000019B9 8B9F[FD08]              	mov	bx,[bx+PARSMSGPTRS]
  7583 000019BD 87DA                    	xchg	bx,dx				; dx = ptr to error msg
  7584                                  						; bx = restored
  7585 000019BF E8B3F8                  	call	RPrint				; print the message
  7586 000019C2 5A                      	pop	dx				; restore DX
  7587 000019C3 C3                      	retn
  7588                                  
  7589                                  ;RPrintParse	endp
  7590                                  
  7591                                  	; 29/01/2023
  7592                                  ;PATHCHRCMPR:
  7593                                  	; MSDOS 3.3
  7594                                  	;push	dx
  7595                                  	;mov	dl,[slash_chr]
  7596                                  	;;cmp	byte [RSWITCHAR],'/'
  7597                                          ;cmp	[RSWITCHAR],dl
  7598                                  	;je	short RNOSLASHT
  7599                                  	;;cmp	al,'/'
  7600                                  	;cmp	al,dl
  7601                                  	;je	short RET41 ; zf = 1 
  7602                                  ;RNOSLASHT:
  7603                                          ;;cmp	al,'\'
  7604                                  	;cmp	al,[bslash_chr]
  7605                                  ;RET41:
  7606                                  	;pop	dx
  7607                                  	;retn
  7608                                  
  7609                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7610                                  IfindE:
  7611                                  	; MSDOS 3.3 & MSDOS 6.0
  7612 000019C4 E80300                  	call	ifind				; find the name
  7613                                  	;jc	short ifind2			; carry means not found
  7614                                  	;jmp	short Iscasb1 			; scan for = sign
  7615                                  	; 29/01/2023
  7616 000019C7 733A                    	jnc	short Iscasb1
  7617                                  ifind2:
  7618 000019C9 C3                      	retn
  7619                                  
  7620                                  	; 29/01/2023
  7621                                  
  7622                                  ; on return of find1, es:di points to beginning of name
  7623                                  
  7624                                  ifind:
  7625 000019CA FC                      	cld
  7626 000019CB E82700                  	call	Icount0				; cx = length of name
  7627 000019CE 8E06[2703]              	mov	es,[EnvirSeg]
  7628 000019D2 31FF                    	xor	di,di
  7629                                  ifind1:
  7630 000019D4 51                      	push	cx
  7631 000019D5 56                      	push	si
  7632 000019D6 57                      	push	di
  7633                                  ifind11:
  7634 000019D7 AC                      	lodsb
  7635 000019D8 E83400                  	call	iupconv
  7636 000019DB 47                      	inc	di
  7637 000019DC 263A45FF                	cmp	al,[es:di-1]
  7638 000019E0 7502                    	jnz	short ifind12
  7639 000019E2 E2F3                    	loop	ifind11
  7640                                  ifind12:
  7641 000019E4 5F                      	pop	di
  7642 000019E5 5E                      	pop	si
  7643 000019E6 59                      	pop	cx
  7644 000019E7 74E0                    	jz	short ifind2
  7645 000019E9 51                      	push	cx
  7646 000019EA E81A00                  	call	Iscasb2 			; scan for a nul
  7647 000019ED 59                      	pop	cx
  7648                                  	;cmp	byte [es:di],0
  7649                                  	;jnz	short ifind1
  7650                                  	;stc					; indicate not found
  7651 000019EE 26803D01                	cmp	byte [es:di],1
  7652 000019F2 73E0                    	jnb	short ifind1
  7653                                  	; cf=1					; indicate not found
  7654                                  ;ifind2:
  7655 000019F4 C3                      	retn
  7656                                  
  7657                                  	; 29/01/2023
  7658                                  Icount0:
  7659 000019F5 1E                      	push	ds
  7660 000019F6 07                      	pop	es
  7661 000019F7 89F7                    	mov	di,si
  7662                                  
  7663 000019F9 57                      	push	di				; count number of chars until "="
  7664 000019FA E80600                  	call	Iscasb1
  7665                                  	; 25/09/2018
  7666                                  	;jmp	short Icountx
  7667                                  	;push	di				; count number of chars until nul
  7668                                  	;call	Iscasb2
  7669                                  ;Icountx:
  7670 000019FD 59                      	pop	cx
  7671 000019FE 29CF                    	sub	di,cx
  7672 00001A00 87F9                    	xchg	di,cx
  7673 00001A02 C3                      	retn
  7674                                  
  7675                                  Iscasb1:
  7676                                  	; 29/01/2023
  7677 00001A03 B03D                    	mov	al,"="
  7678                                  	;mov	al,[equalsign] ; [equal_sign]	; scan for an =
  7679 00001A05 EB02                    	jmp	short Iscasbx
  7680                                  Iscasb2:
  7681 00001A07 30C0                    	xor	al,al				; scan for a nul
  7682                                  Iscasbx:
  7683 00001A09 B90001                  	mov	cx,256 ; 100h
  7684 00001A0C F2AE                    	repnz	scasb
  7685 00001A0E C3                      	retn
  7686                                  
  7687                                  	; 29/01/2023
  7688                                  ;IUPCONV:
  7689                                  	; MSDOS 3.3
  7690                                          ;;cmp	al,"a"
  7691                                  	;cmp	al,[letter_a]
  7692                                          ;jb	short IRET22
  7693                                          ;;cmp	al,"z"
  7694                                          ;cmp	al,[letter_z]
  7695                                  	;ja	short IRET22
  7696                                          ;sub	al,20h			; Lower-case changed to upper-case
  7697                                  ;IRET22:
  7698                                  	;retn
  7699                                  
  7700                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7701                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C32h
  7702                                  
  7703                                  	; MSDOS 6.0
  7704                                  ; *****************************************************************
  7705                                  ; *
  7706                                  ; * ROUTINE:	 IUPCONV    (ADDED BY EMG 4.00)
  7707                                  ; *
  7708                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
  7709                                  ; *		 the character in AL from the file upper case table
  7710                                  ; *		 in DOS if character if above ascii 128, else
  7711                                  ; *		 subtracts 20H if between "a" and "z".
  7712                                  ; *
  7713                                  ; * INPUT:	 DS	      set to resident
  7714                                  ; *		 AL	      char to be upper cased
  7715                                  ; *		 FUCASE_ADDR  set to the file upper case table
  7716                                  ; *
  7717                                  ; * OUTPUT:	 AL	      upper cased character
  7718                                  ; *
  7719                                  ; *****************************************************************
  7720                                  
  7721                                  iupconv:	;proc	near				
  7722                                  	;assume	ds:ResGroup			;
  7723                                  
  7724 00001A0F 3C80                    	cmp	al,80h				; see if char is > ascii 128
  7725 00001A11 7210                    	jb	short other_fucase		; no - upper case math
  7726 00001A13 2C80                    	sub	al,80h				; only upper 128 chars in table
  7727 00001A15 1E                      	push	ds				;
  7728 00001A16 53                      	push	bx				;
  7729                                  	;lds	bx,dword ptr FUCase_Addr+1	; get table address
  7730 00001A17 C51E[9F01]              	lds     bx,[FUCase_Addr+1]
  7731 00001A1B 83C302                  	add	bx,2				; skip over first word
  7732                                  	;xlat	ds:byte ptr [bx]		; convert to upper case
  7733 00001A1E D7                      	xlat
  7734 00001A1F 5B                      	pop	bx				;
  7735 00001A20 1F                      	pop	ds				;
  7736 00001A21 EB0A                    	jmp	short iupconv_end		; we finished - exit
  7737                                  
  7738                                  other_fucase:					;
  7739                                  	;cmp	al,[lcasea] ; [letter_a]	; if between "a" and "z",
  7740 00001A23 3C61                    	cmp	al,'a'
  7741 00001A25 7206                    	jb	short iupconv_end		;     subtract 20h to get
  7742                                  	;cmp	al,[lcasez] ; [letter_z]	; upper case equivalent.
  7743 00001A27 3C7A                    	cmp	al,'z'
  7744 00001A29 7702                    	ja	short iupconv_end		;
  7745 00001A2B 2C20                    	sub	al,20h				; Change lower-case to upper
  7746                                  iupconv_end:					;
  7747 00001A2D C3                      	retn
  7748                                  
  7749                                  ;iupConv endp
  7750                                  
  7751                                  	; 29/01/2023
  7752                                  init_contc_specialcase:
  7753                                  	; MSDOS 3.3 & MSDOS 6.0
  7754                                  						; This routine is called if control-C
  7755 00001A2E 83C406                  	add	sp,6				;  is type during the date/time prompt
  7756 00001A31 56                      	push	si				;  at initialization time.  The desired
  7757 00001A32 89D6                    	mov	si,dx				;  response is to make it look like the
  7758 00001A34 C74401000D              	mov	word [si+1],0D00h		;  user typed <CR> by "popping" the
  7759 00001A39 5E                      	pop	si				;  INT 21h stuff off the stack, putting
  7760 00001A3A CF                      	iret					;  a <CR> in the user's buffer, and
  7761                                  						;  returning directly to the user.
  7762                                  						; In this case the user is TCODE.
  7763                                  
  7764                                  ; ----------------------------------------------------------------------------
  7765                                  
  7766                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7767                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1C62h (CODERES:0F22h)
  7768                                  
  7769                                  	; MSDOS 6.0
  7770                                  ; ****************************************************************
  7771                                  ; *
  7772                                  ; * ROUTINE:	 Setup_for_messages
  7773                                  ; *
  7774                                  ; * FUNCTION:	 Sets up system for PARSE and EXTENDED ERROR
  7775                                  ; *		 messages as follows:
  7776                                  ; *
  7777                                  ; *		 IF /P and /MSG are entered
  7778                                  ; *		    keep PARSE and EXTENDED ERRORS in memory
  7779                                  ; *		 ELSE IF /P is entered
  7780                                  ; *		    use PARSE and EXTENDED ERRORS on disk
  7781                                  ; *		    remove PARSE ERRORS from memory
  7782                                  ; *		 ELSE
  7783                                  ; *		    remove PARSE ERRORS from memory
  7784                                  ; *		 ENDIF
  7785                                  ; *
  7786                                  ; * INPUT:	 PERMCOM	Set up with user input
  7787                                  ; *		 EXT_MSG	Set up with user input
  7788                                  ; *		 System set up to retain PARSE ERRORS
  7789                                  ; *
  7790                                  ; * OUTPUT:	 registers unchanged
  7791                                  ; *
  7792                                  ; ****************************************************************
  7793                                  
  7794                                  setup_for_messages: ;proc near		
  7795                                  
  7796 00001A3B 53                      	push	bx
  7797 00001A3C 1E                      	push	ds				; save data segment
  7798 00001A3D 06                      	push	es				; save environment segment
  7799 00001A3E 50                      	push	ax				;
  7800 00001A3F 52                      	push	dx				;
  7801 00001A40 57                      	push	di				;
  7802 00001A41 8CC8                    	mov	ax,cs				; get local segment to ES and DS
  7803 00001A43 8ED8                    	mov	ds,ax				;
  7804 00001A45 8EC0                    	mov	es,ax				;
  7805                                  
  7806 00001A47 803E[8D01]00            	cmp	byte [PermCom],0		; was permcom set?
  7807 00001A4C 743C                    	jz	short no_permcom		; No - don't worry about messages
  7808                                  
  7809                                  ;*	We're permanent. Install our message services int 2f handler.
  7810                                  
  7811 00001A4E 06                      	push	es
  7812                                  	;mov	ax,(GET_INTERRUPT_VECTOR shl 8) or 2Fh
  7813 00001A4F B82F35                  	mov	ax,352Fh
  7814 00001A52 CD21                    	int	21h
  7815                                  			; DOS - 2+ - GET INTERRUPT VECTOR
  7816                                  			; AL = interrupt number
  7817                                  			; Return: ES:BX = value of interrupt vector
  7818 00001A54 891E[9B03]              	mov	[Int2fHandler],bx
  7819 00001A58 8C06[9D03]              	mov	[Int2fHandler+2],es
  7820 00001A5C 07                      	pop	es
  7821                                  
  7822                                  ;	DS = RESGROUP seg addr
  7823                                  
  7824                                  ; M005; We will not hook int 2fh on any command.com other than the first.
  7825                                  ; M005; Carousel loads as a permanent command.com and when we exit Carousel,
  7826                                  ; M005; it just wipes our arena out. So, int 2fh is still hooked and the
  7827                                  ; M005; first int 2fh call after exit from Carousel (from the DOS terminate
  7828                                  ; M005; call) goes off into space.
  7829                                  
  7830 00001A5D 803E[C020]00            	cmp	byte [FirstCom],0		; M005
  7831 00001A62 7416                    	je	short no_msg_hook		; M005
  7832                                  ;
  7833                                  ; M005; !!!SLIMIEST CAROUSEL HACK OFF ALL!!!
  7834                                  ; M005; Carousel plays around with the interrupt vector tables. He saves it
  7835                                  ; M005; before loading a new command.com. Then, it takes hold of the current
  7836                                  ; M005; command.com's PSP and then looks at all interrupt vectors whose
  7837                                  ; M005; segment matches the command.com PSP and then updates these segments
  7838                                  ; M005; to the new command.com's PSP in his saved vector table. Whenever we
  7839                                  ; M005; we pop into his menu, he puts this saved table into the vector table.
  7840                                  ; M005; If we now quit, Carousel just wipes out command.com's arena and then
  7841                                  ; M005; issues a terminate. Unfortunately, the int 2fh vector is pointing at
  7842                                  ; M005; the command.com that was wiped out and so the next int 2fh call will
  7843                                  ; M005; bomb. To prevent Carousel from doing this clever(1**$$#) patching, we
  7844                                  ; M005; renormalize our int 2fh pointer so that its cs is not the same as the
  7845                                  ; M005; command.com PSP. Now, he does no such patching and our int 2fh vector
  7846                                  ; M005; remains nice and happy. The renormalized pointer points at a far 
  7847                                  ; M005; jump to the actual int 2fh entry point.
  7848                                  ;
  7849 00001A64 1E                      	push	ds				; M005
  7850                                  	;mov	dx,offset DATARES:Carousel_i2f_Hook ; M005
  7851 00001A65 BA[C300]                	mov     dx,Carousel_i2f_Hook
  7852 00001A68 83EA10                  	sub	dx,10h				; renormalize offset; M005
  7853 00001A6B 8CD8                    	mov	ax,ds				; M005
  7854 00001A6D 40                      	inc	ax				; Relocated cs ; M005
  7855 00001A6E 8ED8                    	mov	ds,ax				; M005
  7856                                  	;mov	ax,(SET_INTERRUPT_VECTOR shl 8) or 2Fh
  7857 00001A70 B82F25                  	mov	ax,252Fh
  7858 00001A73 CD21                    	int	21h
  7859                                  			; DOS - SET INTERRUPT VECTOR
  7860                                  			; AL = interrupt number
  7861                                  			; DS:DX = new vector to be used for specified interrupt
  7862 00001A75 1F                      	pop	ds				; M005
  7863                                  	;mov	word ptr Carousel_i2f_Hook+3,ds	; M005
  7864 00001A76 8C1E[C600]              	mov	[Carousel_i2f_Hook+3],ds
  7865                                  						; patch in the cs for jump
  7866                                  no_msg_hook:					; M005
  7867 00001A7A 803E[811C]01            	cmp	byte [ext_msg],1 ; SET_EXTENDED_MSG
  7868 00001A7F 7516                    	jne	short permcom_end		; no /msg - exit
  7869                                  
  7870                                  permcom_slash_msg:				; Keep messages in memory
  7871                                  	;mov	di,offset ResGroup:ExtMsgEnd 	; get address of resident end
  7872 00001A81 BF[F60B]                	mov     di,ExtMsgEnd
  7873 00001A84 893E[9F03]              	mov	[ResMsgEnd],di			; save it
  7874 00001A88 EB0D                    	jmp	short permcom_end		; exit
  7875                                  
  7876                                  no_permcom:					
  7877                                  	;cmp	byte [ext_msg],SET_EXTENDED_MSG	; was /msg specified?
  7878 00001A8A 803E[811C]01            	cmp	byte [ext_msg],1
  7879 00001A8F 7506                    	jne	short permcom_end		; no - no error
  7880                                  	;mov	dx,LessArgs_Ptr			; get message number for "Required parameter missing"
  7881 00001A91 BA0200                  	mov	dx,2
  7882 00001A94 E81CFF                  	call	RPrintParse
  7883                                  
  7884                                  permcom_end:
  7885 00001A97 5F                      	pop	di				;
  7886 00001A98 5A                      	pop	dx				;
  7887 00001A99 58                      	pop	ax				;
  7888 00001A9A 07                      	pop	es				; get environment back
  7889 00001A9B 1F                      	pop	ds				;
  7890 00001A9C 5B                      	pop	bx
  7891                                  
  7892 00001A9D C3                      	retn					;
  7893                                  
  7894                                  ;setup_for_messages	endp
  7895                                  
  7896                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7897                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1CC5h
  7898                                  
  7899                                  	; MSDOS 6.0
  7900                                  
  7901                                  ;***	CheckHelp - print help text and exit if /? is on command line
  7902                                  ;
  7903                                  ;	ENTRY	command-line tail at 81h
  7904                                  ;
  7905                                  ;	EXIT	return if /? not found
  7906                                  ;		terminate if /? found
  7907                                  ;
  7908                                  ;	USED	AX,BX,CX,DX,SI,DI
  7909                                  ;
  7910                                  ;	EFFECTS	Help text displayed if /? found on command line
  7911                                  
  7912                                  CheckHelp:	; proc
  7913                                  	;assume	cs:RESGROUP,ds:RESGROUP,es:RESGROUP,ss:RESGROUP
  7914                                  
  7915 00001A9E BE8100                  	mov	si,81h			; DS:SI = ptr to command-line tail
  7916                                  	;mov	di,offset RESGROUP:Parse_Command
  7917 00001AA1 BF[861C]                	mov	di,PARSE_COMMAND
  7918                                  					; ES:DI = ptr to primary parse block
  7919 00001AA4 31C9                    	xor	cx,cx			; CX = # positional param's found
  7920 00001AA6 31D2                    	xor	dx,dx			; DX will be ptr to result buffer
  7921                                  chParse:
  7922                                  	;call	dword ptr Init_Parse
  7923 00001AA8 FF1E[7A1C]              	call	far [Init_Parse]	; call system parser
  7924                                  
  7925                                  	;;cmp	ax,END_OF_LINE
  7926                                  	;cmp	ax,-1 ; 0FFFFh	
  7927                                  	;je	short chRet		; end of command line, no /? found
  7928                                  	;;cmp	ax,RESULT_NO_ERROR
  7929                                  	;;cmp	ax,0
  7930                                  	;;je	short chWhich		; valid syntax element found
  7931                                  	;;jmp	short chParse		; go parse more
  7932                                  	;and	ax,ax ; cmp ax,0
  7933                                  	;jnz	short chParse ; jne
  7934                                  	; 10/06/2023
  7935 00001AAC 40                      	inc	ax	; cmp ax,-1
  7936 00001AAD 7413                    	jz	short chRet   ; 0FFFFh -> 0
  7937 00001AAF 48                      	dec	ax	; cmp ax,0
  7938 00001AB0 75F6                    	jnz	short chParse ; 1 -> 0
  7939                                  	; ax = 0
  7940                                  chWhich:
  7941                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_?_Syn
  7942 00001AB2 813E[0D1D][081D]        	cmp     word [COMND1_SYN],COMMAND_?_SYN ; "/?"
  7943 00001AB8 7409                    	je	short chHelp		; /? found - display help & exit
  7944                                  	;cmp	Comnd1_Syn,offset RESGROUP:Command_C_Syn
  7945 00001ABA 813E[0D1D][EE1C]        	cmp     word [COMND1_SYN],COMMAND_C_SYN ; "/C"
  7946                                  	;je	short chRet		; /c found - ignore rest of line
  7947                                  	; 29/01/2023
  7948 00001AC0 75E6                    	jne	short chParse
  7949                                  	; MSDOS 6.0
  7950                                          ;;cmp	Comnd1_Syn,offset RESGROUP:Command_K_Syn
  7951                                        	;cmp	word [COMND1_SYN],COMMAND_K_SYN ; "/K"
  7952                                  	;je	short chRet		; /k found - ignore rest of line
  7953                                  	;jmp	short chParse		; anything else - ignore, keep looking
  7954                                  chRet:
  7955 00001AC2 C3                      	retn
  7956                                  chHelp:
  7957                                  	;mov	si,offset RESGROUP:HelpMsgs	; SI = ptr to msg ptr list
  7958 00001AC3 BE[9220]                	mov	si,HelpMsgs
  7959                                  chHelpNext:
  7960 00001AC6 AD                      	lodsw					; AX = ptr to msg
  7961 00001AC7 09C0                    	or	ax,ax
  7962 00001AC9 7407                    	jz	short chHelpDone		; end of list - all done
  7963 00001ACB 89C2                    	mov	dx,ax				; DX = ptr to msg
  7964 00001ACD E8A5F7                  	call	RPrint				; display msg
  7965 00001AD0 EBF4                    	jmp	short chHelpNext		; go do next msg
  7966                                  
  7967                                  chHelpDone:
  7968 00001AD2 CD20                    	int	20h				; terminate program
  7969                                  ;chRet:
  7970 00001AD4 C3                      	retn
  7971                                  
  7972                                  ;CheckHelp	endp
  7973                                  
  7974                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  7975                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D03h
  7976                                  
  7977                                  	; MSDOS 6.0
  7978                                  
  7979                                  ;***** Setup_res_end -- This routine determines the resident size of COMMAND.
  7980                                  ;
  7981                                  ; It determines based on 2 factors:
  7982                                  ;	1. Is this is the first COMMAND?
  7983                                  ;	2. Is COMMAND to be loaded into HIMEM?
  7984                                  ;   The strategy works as follows:
  7985                                  ;
  7986                                  ;	if (First COMMAND)
  7987                                  ;	then if (COMMAND in HIMEM)
  7988                                  ;		ResSize = resident_data;
  7989                                  ;	     else
  7990                                  ;		ResSize = resident_data + resident_code;
  7991                                  ;	else
  7992                                  ;	   ResSize = resident_data;
  7993                                  ;
  7994                                  ; Int 2fh calls have been added to determine whether or not we are the first
  7995                                  ; COMMAND and whether DOS is in HIMEM.
  7996                                  ;
  7997                                  ;	ENTRY: ResMsgEnd = resident size of data in paras
  7998                                  ;
  7999                                  ;	EXIT:  ResSize = resident size in low memory
  8000                                  ;
  8001                                  ;	REGISTERS AFFECTED: ax,cx,dx
  8002                                  ;
  8003                                  
  8004                                  GET_HMA_ADDR	equ	4A02h
  8005                                  
  8006                                  Setup_res_end:	;proc near
  8007                                  	
  8008 00001AD5 1E                      	push	ds
  8009 00001AD6 8CC8                    	mov	ax,cs
  8010 00001AD8 8ED8                    	mov	ds,ax				;ds = RESGROUP
  8011                                  	;assume	ds:RESGROUP
  8012                                  
  8013 00001ADA 8B0E[9F03]              	mov	cx,[ResMsgEnd]			;set resident size = data
  8014                                  
  8015                                  ;ifndef	ROMDOS
  8016                                  
  8017                                  ;M042 -- Begin changes
  8018                                  ;If messages are to be kept behind, we need to round up the messages to
  8019                                  ;the next para boundary. This is because we have a dummy segment between the
  8020                                  ;data and the resident code segment so that the code segment starts on a
  8021                                  ;para boundary
  8022                                  
  8023                                  	;cmp	cx,offset RESGROUP:ExtMsgEnd	;messages to be resident?
  8024 00001ADE 81F9[F60B]              	cmp	cx,ExtMsgEnd
  8025 00001AE2 7506                    	jne	short calc_res			;no, continue
  8026 00001AE4 83C10F                  	add	cx,15				;round up
  8027 00001AE7 83E1F0                  	and	cx,0FFF0h
  8028                                  calc_res:
  8029                                  
  8030                                  ;M042 -- End changes
  8031                                  
  8032                                  	; 18/07/2024
  8033                                  	;xor	ax,ax
  8034                                         	
  8035 00001AEA 803E[C020]01            	cmp	byte [FirstCom],1		;is it first command.com?
  8036                                  	;jne	short not_first			;no, do not keep code
  8037                                  	; 06/06/2023
  8038 00001AEF 751A                    	jne	short not_first2
  8039                                  
  8040                                  ;We issue a version check call with al=01 to detect if DOS is in HMA. If so,
  8041                                  ;bit 4 of dh is set
  8042                                  
  8043 00001AF1 53                      	push	bx
  8044 00001AF2 51                      	push	cx
  8045                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ;is DOS in HIMEM? ;M013
  8046 00001AF3 B80633                  	mov	ax,3306h
  8047 00001AF6 CD21                    	int	21h
  8048                                  		; DOS - 5+ Get TRUE Version Number
  8049                                  		; (BL major, BH minor, DL revision, DH flags)
  8050 00001AF8 59                      	pop	cx
  8051                                  
  8052                                  ;bugbug: remove version check after testing
  8053                                  
  8054 00001AF9 80FB05                  	cmp	bl,5				;bl has true version ; M013
  8055 00001AFC 7207                    	jb	short oldver
  8056                                  
  8057 00001AFE 31C0                    	xor	ax,ax
  8058 00001B00 80E610                  	and	dh,10h				;is DOS in HMA ; M013
  8059                                  	;pop	bx
  8060                                  	;jnz	short not_first			;DOS in HIMEM, code not
  8061                                  						;	resident
  8062                                  	; 29/01/2023
  8063 00001B03 7503                    	jnz	short not_first_pop
  8064                                  oldver:
  8065                                  	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8066                                  	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8067                                  	; 06/06/2023
  8068                                  	; 29/01/2023
  8069                                  	;mov	ax,EndCode-(RCODE_START+100h) ; 23/04/2023
  8070                                  	; 03/05/2023
  8071 00001B05 B8(F908)                	mov	ax,EndCode-RCODE_START	; 06/06/2023
  8072                                  
  8073                                  not_first_pop:
  8074                                  	; 29/01/2023
  8075 00001B08 5B                      	pop	bx
  8076                                  
  8077                                  not_first:
  8078                                  
  8079                                  ;Note that ax = 0 (side effect of int 2fh), if the code is not to be retained
  8080                                  
  8081 00001B09 01C1                    	add	cx,ax
  8082                                  
  8083                                  not_first2:	; 06/06/2023
  8084                                  
  8085                                  ;endif	;not ROMDOS
  8086                                  
  8087 00001B0B 83C10F                  	add	cx,15				;round up to next para
  8088 00001B0E D1E9                    	shr	cx,1
  8089 00001B10 D1E9                    	shr	cx,1
  8090 00001B12 D1E9                    	shr	cx,1
  8091 00001B14 D1E9                    	shr	cx,1				;ax = para size of res code
  8092 00001B16 890E[A103]              	mov	[ResSize],cx			;store resident size
  8093                                  
  8094 00001B1A 1F                      	pop	ds
  8095                                  	;assume	ds:nothing
  8096 00001B1B C3                      	retn
  8097                                  
  8098                                  ;ifndef	ROMDOS
  8099                                  
  8100                                  ;bugbug: remove this code (for version independent COMMAND) after testing
  8101                                  
  8102                                  	; 29/01/2023
  8103                                  ;oldver:
  8104                                  ;	pop	bx
  8105                                  ;	;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8106                                  ;	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8107                                  ;	; 29/01/2023
  8108                                  ;	mov	ax,EndCode-RCODE_START
  8109                                  ;	jmp	short not_first
  8110                                  
  8111                                  ;endif	;not ROMDOS
  8112                                  
  8113                                  ;setup_res_end	endp
  8114                                  
  8115                                  ;ifndef	ROMDOS
  8116                                  
  8117                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8118                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8119                                  
  8120                                  	; MSDOS 6.0
  8121                                  ;*** Move_res_code -- This routine moves the resident code to its final 
  8122                                  ; location. We check if DOS is in HIMEM. If so, we try to load ourselves
  8123                                  ; in HIMEM. If we fail, then we remain low and update ResSize to reflect
  8124                                  ; the correct resident size. When remaining low, we have to check if we 
  8125                                  ; need to overlay the messages part of the data segment which is determined
  8126                                  ; by the /msg switch.
  8127                                  ;
  8128                                  ;	ENTRY: ResMsgEnd = end of resident data
  8129                                  ;
  8130                                  ;	EXIT:  The resident code is either up high or in its final location
  8131                                  ;		down low.
  8132                                  ;
  8133                                  ;	REGISTERS AFFECTED: ax,bx,cx,dx,si,di
  8134                                  	
  8135                                  Move_res_code:	;proc near
  8136                                  
  8137 00001B1C 1E                      	push	ds
  8138 00001B1D 06                      	push	es
  8139                                  
  8140 00001B1E 8CC8                    	mov	ax,cs
  8141 00001B20 8ED8                    	mov	ds,ax
  8142                                  	;assume	ds:RESGROUP
  8143                                  
  8144                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) or 06h ; M013
  8145 00001B22 B80633                  	mov	ax,3306h
  8146 00001B25 CD21                    	int	21h				;DOS in HIMEM?
  8147                                  		; DOS - 5+ Get TRUE Version Number
  8148                                  		; (BL major, BH minor, DL revision, DH flags)
  8149                                  
  8150 00001B27 80E610                  	and	dh,10h				; M013
  8151 00001B2A 750E                    	jnz	short move_high			;yes, move code high
  8152                                  
  8153                                  ;Check if messages have been discarded or not
  8154                                  
  8155                                  load_low:
  8156 00001B2C 1E                      	push	ds
  8157 00001B2D 07                      	pop	es				;es = RESGROUP
  8158 00001B2E 8B3E[9F03]              	mov	di,[ResMsgEnd]			;end offset in DATARES
  8159                                  	;;mov	bx,offset RESGROUP:ExtMsgEnd	;end offset of messages
  8160                                  	;mov	bx,ExtMsgEnd
  8161                                  	; 29/01/2023
  8162 00001B32 81FF[F60B]              	cmp	di,ExtMsgEnd
  8163                                  	;cmp	di,bx				;are messages to be kept?
  8164 00001B36 7431                    	je	short no_move			;yes, dont move code
  8165                                  
  8166 00001B38 EB37                    	jmp	short setup_move		;es:di points at dest.
  8167                                  
  8168                                  move_high:
  8169                                  
  8170                                  ;We have to call DOS to get the load address in HIMEM for COMMAND
  8171                                  ;We pass in bx the number of bytes we need
  8172                                  
  8173                                  	;mov	bx,offset CODERES:EndCode
  8174                                  	; 29/01/2023
  8175                                  	;;mov	bx,81Ah ; MSDOS 5.0 COMMAND.COM
  8176                                  	; 06/06/2023
  8177                                  	;mov	bx,EndCode-(RCODE_START+100h) ; 23/04/2023 ; 06/06/2023
  8178                                  	; 03/05/2023
  8179 00001B3A BB(F908)                	mov	bx,EndCode-RCODE_START ; 06/06/2023
  8180                                  
  8181                                  ;M030;
  8182                                  ; Set di=0ffffh so that we load low in case no one answers this int 2fh
  8183                                  
  8184 00001B3D BFFFFF                  	mov	di,0FFFFh			;DT - in case no-one handles
  8185                                  						;this ; M030
  8186 00001B40 B8024A                  	mov	ax,GET_HMA_ADDR ; 4A02h
  8187 00001B43 CD2F                    	int	2Fh
  8188                                  
  8189                                  ;If the offset = 0xffff, then no HMA available
  8190                                  
  8191 00001B45 83FFFF                  	cmp	di,0FFFFh			;HMA available?
  8192 00001B48 C606[3400]01            	mov	byte [ComInHMA],1		;assume command.com in HMA
  8193 00001B4D 7522                    	jne	short setup_move		;no error, es:di = memory
  8194                                  
  8195                                  	;mov	byte [ComInHMA],0		;could not load in HMA
  8196                                  	; 29/01/2023	
  8197 00001B4F FE0E[3400]              	dec	byte [ComInHMA] ; 1 -> 0
  8198                                  
  8199                                  ;Zero means that we do not have enough HIMEM. Remain low and update
  8200                                  ;ResSize to reflect this
  8201                                  
  8202 00001B53 8B0E[9F03]              	mov	cx,[ResMsgEnd]			;size of data in bytes
  8203                                  	;;mov	ax,offset CODERES:EndCode	;size of code in bytes
  8204                                  	;;mov	ax,81Ah ; MSDOS 5.0 COMMAND.COM
  8205                                  	;mov	ax,EndCode-RCODE_START
  8206                                  	;add	cx,ax
  8207                                  	; 06/06/2023
  8208                                  	; 29/01/2023
  8209                                  	;add	cx,(EndCode-(RCODE_START+100h))+15 ; 23/04/2023 ; 06/06/2023
  8210                                  	;add	cx,15				;round up to next para
  8211                                  	; 03/05/2023
  8212 00001B57 81C1(0809)              	add	cx,(EndCode-RCODE_START)+15 ; 06/06/2023
  8213 00001B5B D1E9                    	shr	cx,1
  8214 00001B5D D1E9                    	shr	cx,1
  8215 00001B5F D1E9                    	shr	cx,1
  8216 00001B61 D1E9                    	shr	cx,1				;ax = para size of res code
  8217 00001B63 890E[A103]              	mov	[ResSize],cx			;store resident size
  8218 00001B67 EBC3                    	jmp	short load_low			;let code remain low
  8219                                  
  8220                                  no_move:
  8221                                  	; 05/05/2023
  8222                                  	;mov	cl,4
  8223 00001B69 83C70F                  	add	di,0Fh
  8224 00001B6C 83E7F0                  	and	di,0FFF0h			;round it to a para offset
  8225 00001B6F EB0B                    	jmp	short patch_up
  8226                                  
  8227                                  setup_move:
  8228                                  	;mov	si,offset RESGROUP:StartCode
  8229                                  	; 03/05/2023
  8230 00001B71 BE[000C]                	mov	si,RCODE_START  ; Start addr of Resident Code (CODERES segment)
  8231                                  				; 0D40h for MSDOS 5.0 COMMAND.COM
  8232                                  	;mov	cx,offset CODERES:EndCode	;cx = bytes to move
  8233                                  	;mov	cx,81Ah ; MSDOS 5.0 COMMAND.COM
  8234                                  	; 06/06/2023
  8235                                  	;mov	cx,EndCode-(RCODE_START+100h) ; 23/04/2023
  8236                                  	; 03/05/2023
  8237 00001B74 B9(F908)                	mov	cx,EndCode-RCODE_START	; 06/06/2023
  8238                                  
  8239 00001B77 FC                      	cld
  8240 00001B78 57                      	push	di				;need di for patching offset
  8241 00001B79 F3A4                    	rep	movsb
  8242 00001B7B 5F                      	pop	di
  8243                                  
  8244                                  patch_up:
  8245 00001B7C E84200                  	call	patch_stub
  8246 00001B7F 07                      	pop	es
  8247 00001B80 1F                      	pop	ds
  8248                                  	;assume	ds:nothing
  8249 00001B81 C3                      	retn
  8250                                  
  8251                                  ;Move_res_code endp
  8252                                  
  8253                                  ;else	;ROMDOS
  8254                                  ;
  8255                                  ;;***	Move_res_code - ROMDOS version - locate ROM resident
  8256                                  ;
  8257                                  ;Move_res_code	proc
  8258                                  ;
  8259                                  ;	push	es
  8260                                  ;
  8261                                  ;	invoke	FindROMRes		; ES:DI = ptr to ROM resident code
  8262                                  ;	call	patch_stub
  8263                                  ;
  8264                                  ;	pop	es
  8265                                  ;	ret
  8266                                  ;
  8267                                  ;Move_res_code	endp
  8268                                  ;
  8269                                  ;	assume	ds:NOTHING		; to match ending assume above
  8270                                  ;
  8271                                  ;endif	;ROMDOS
  8272                                  
  8273                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8274                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1D52h
  8275                                  
  8276                                  	; MSDOS 6.0
  8277                                  ;*** Alloc_env -- This routine allocates the temporary environment for the
  8278                                  ; Init code to initialize the COMSPEC. This is not a complete environment. 
  8279                                  ; Later on, at EndInit time, a proper sized environment is allocated and
  8280                                  ; the contents of this temporary environment are copied to it. This routine
  8281                                  ; will not be called in case a valid environment is passed to command.com
  8282                                  ;
  8283                                  ;       ENTRY:  FirstCom and initial EnvirSeg set
  8284                                  ;
  8285                                  ;       EXIT:   ax = EnvirSeg = segment of newly allocated environment segment
  8286                                  ;
  8287                                  ;       REGISTERS AFFECTED: ax,bx,cx,dx
  8288                                  
  8289                                  alloc_env:	;proc near
  8290                                  	;assume ds:nothing
  8291                                  	
  8292 00001B82 1E                              push    ds
  8293 00001B83 06                      	push	es
  8294 00001B84 56                      	push	si
  8295 00001B85 57                      	push	di
  8296                                  
  8297                                  ; 29/01/2023 - MSDOS 6.0 COMMAND.COM
  8298                                  %if 0
  8299                                          push    ss
  8300                                          pop     ds
  8301                                  	;assume ds:RESGROUP
  8302                                  
  8303                                          mov     ax,[EnvirSeg]
  8304                                  
  8305                                          cmp	byte [AllocedEnv],0
  8306                                          je	short alloc_cont
  8307                                          jmp     alloc_done
  8308                                  
  8309                                  alloc_cont:
  8310                                          sub     di,di                           ; default start
  8311                                          ;mov	bx,SIZE Environment             ; default size needed
  8312                                  	; 29/01/2023
  8313                                  	mov	bx,ENVIRONSIZ
  8314                                  
  8315                                          cmp	byte [FirstCom],0		; first COMMAND.COM?
  8316                                          je	short alloc_seg			; no
  8317                                  
  8318                                  ;   Check EnvirSeg; if non-zero, then scan it for PATH and COMSPEC;
  8319                                  ;   Record their respective locations and do not add the default vars.
  8320                                  
  8321                                  	or      ax,ax
  8322                                  	jz	short alloc_new			; no previous environment
  8323                                  
  8324                                          mov     es,ax
  8325                                  	;assume es:nothing
  8326                                  
  8327                                  _find_path:
  8328                                          mov     al,0
  8329                                          sub     di,di
  8330                                  comp_path:
  8331                                          scasb                                   ; end of env?
  8332                                  	je	short _find_prompt		; yes
  8333                                          dec     di
  8334                                          mov     cx,PathStrLen ; mov cx,5 ; "PATH="
  8335                                          ;mov	si,offset RESGROUP:PathString
  8336                                  	mov	si,PathString	
  8337                                          repe    cmpsb
  8338                                          je	short got_path
  8339                                          mov	cx,256
  8340                                          repne   scasb                           ; find next NULL
  8341                                          jmp     short comp_path
  8342                                  
  8343                                  got_path:
  8344                                          mov	byte [PathString],0		; don't add it
  8345                                  
  8346                                  _find_prompt:
  8347                                          sub     di,di
  8348                                  comp_prompt:
  8349                                  	scasb                                   ; end of env?
  8350                                  	je	short find_comspec		; yes
  8351                                  	dec     di
  8352                                  	mov     cx,PrmptStrLen2 ; mov cx,7
  8353                                  	;mov	si,offset RESGROUP:PrmptString
  8354                                  	mov	si,PrmptString
  8355                                          repe    cmpsb
  8356                                          je	short got_prompt
  8357                                          mov     cx,256
  8358                                          repne   scasb                           ; find next NULL
  8359                                          jmp	short comp_prompt
  8360                                  
  8361                                  got_prompt:
  8362                                  	mov	byte [PrmptString],0		; don't add it
  8363                                  
  8364                                  find_comspec:
  8365                                          sub     di,di
  8366                                  comp_comspec:
  8367                                          scasb                                   ; end of env?
  8368                                          je	short got_envend		; yes
  8369                                          dec     di
  8370                                          mov	cx,ComspStrLen ; mov cx,8
  8371                                  	;mov	si,offset RESGROUP:ComspString
  8372                                  	mov	si,ComspString
  8373                                          repe    cmpsb
  8374                                          je	short got_comspec
  8375                                          mov     cx,256
  8376                                          repne   scasb                           ; find next NULL
  8377                                          jmp	short comp_comspec
  8378                                  
  8379                                  got_comspec:
  8380                                          mov     [ComspOffset],di
  8381                                  
  8382                                  find_envend:
  8383                                          sub     di,di
  8384                                          mov     cx,ENVBIG                       ; max env size
  8385                                  comp_envend:
  8386                                          dec     cx                              ;
  8387                                          scasb                                   ; end of env?
  8388                                          je	short got_envend		; yes
  8389                                          repne   scasb
  8390                                          jmp	short comp_envend
  8391                                  
  8392                                  got_envend:
  8393                                          dec     di
  8394                                          lea     bx,[di+SIZE Environment]        ; add room for the basics
  8395                                  
  8396                                  ;   We want to fall through to alloc_new and set up default
  8397                                  ;   path and prompt ONLY IF this is the first process;  in all other
  8398                                  ;   cases, we assume it is a bad idea to try editing the user's environment
  8399                                  
  8400                                          push    ds
  8401                                          ;mov	ds,ds:[PDB_Parent_Pid]
  8402                                          mov	ds,[PDB.PARENT_PID]
  8403                                  	;cmp	ds:[PDB_Parent_Pid],0           ; is parent's parent pid field 0?
  8404                                  	cmp	word [PDB.PARENT_PID],0
  8405                                  	pop     ds
  8406                                          jne	short alloc_seg			; no, we're not the first process
  8407                                                                                  ; so don't muck with the env.
  8408                                  alloc_new:
  8409                                  	inc	byte [AllocedEnv]		; note we have virgin env.
  8410                                  
  8411                                  alloc_seg:
  8412                                  
  8413                                  ; Allocate default environment size
  8414                                  
  8415                                          mov     cx,bx                           ; save byte-granular size in CX
  8416                                          add     bx,15
  8417                                          shr     bx,1
  8418                                          shr     bx,1
  8419                                          shr     bx,1
  8420                                          shr     bx,1                            ; BX = # paras
  8421                                  	mov	ah,ALLOC
  8422                                  	int	21h
  8423                                          jnc	short init_ok
  8424                                          jmp     init_nomem                      ; insufficient memory, error
  8425                                  
  8426                                  ; If a previous environment existed (ie, DI != 0), then copy it into
  8427                                  ; the new buffer
  8428                                  
  8429                                  init_ok:
  8430                                  	mov	es,ax
  8431                                  	;assume	es:nothing                      ; es = temp env segment
  8432                                  
  8433                                  	or      di,di
  8434                                          jz	short copy_path
  8435                                  
  8436                                          push    cx
  8437                                          push    ds
  8438                                          mov     ds,[EnvirSeg]
  8439                                          ;assume ds:nothing
  8440                                          sub     si,si
  8441                                          mov     cx,di
  8442                                          sub     di,di
  8443                                          rep     movsb
  8444                                          pop     ds
  8445                                          ;assume ds:RESGROUP
  8446                                          pop     cx
  8447                                          sub     cx,di
  8448                                  
  8449                                  copy_path:
  8450                                  
  8451                                  ; First clear out (the rest of) the buffer
  8452                                  
  8453                                          push    di
  8454                                          sub     ax,ax
  8455                                          rep     stosb
  8456                                          pop     di
  8457                                  
  8458                                  ; Initialize the path string (PATH=) first
  8459                                  
  8460                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8461                                  	mov	si,PathString
  8462                                          cmp     byte [si],al			; add it?
  8463                                          je	short init_prompt		; no
  8464                                  	;mov	cx,PathStrLen+1                 ;
  8465                                  	mov	cx,6 ; db "PATH=",0
  8466                                          rep     movsb                           ;
  8467                                          cmp     [AllocedEnv],al			; virgin env?
  8468                                          je	short init_prompt		; no
  8469                                  
  8470                                  ; Establish a more reasonable default for the PATH
  8471                                  
  8472                                  	;mov	ah,GET_DEFAULT_DRIVE
  8473                                  	mov	ah,19h
  8474                                  	int	21h
  8475                                          add     al,'A'                          ; convert to letter
  8476                                          mov     [DefPathString],al              ;
  8477                                          mov     [DefPath2String],al             ; now our default paths are complete
  8478                                  
  8479                                          mov     dl,0                            ; get dir for default drive
  8480                                          push    ds                              ;
  8481                                          push    es                              ;
  8482                                          pop     ds                              ;
  8483                                          mov     byte [di],'\'			;
  8484                                          lea     si,[di+1]                       ; set DS:SI -> available space
  8485                                  	;mov	ah,Current_Dir                  ;
  8486                                          mov	ah,47h
  8487                                  	int     21h                             ;
  8488                                          pop     ds                              ;
  8489                                  
  8490                                  	;mov	cx,DefPathStrLen+1              ;
  8491                                  	mov	cx,9 ; db "C:\MSDOS",0
  8492                                  	;mov	dx,offset RESGROUP:DefPathString
  8493                                  	mov	dx,DefPathString 
  8494                                  	mov	si,dx                           ;
  8495                                          ;mov	ah,CHDir                        ;
  8496                                          mov	ah,3Bh
  8497                                  	int     21h                             ;
  8498                                          jnc	short init_setpath		; DefPathString exists!
  8499                                  
  8500                                  	;mov	cx,DefPath2StrLen+1		;
  8501                                          mov	cx,7 ; db "C:\DOS",0
  8502                                  	;mov	dx,offset RESGROUP:DefPath2String
  8503                                  	mov	dx,DefPath2String
  8504                                          mov     si,dx                           ;
  8505                                          ;mov	ah,CHDir                        ;
  8506                                          mov	ah,3Bh
  8507                                          int     21h                             ;
  8508                                          jc	short init_prompt		; DefPath2String doesn't exist
  8509                                  
  8510                                  init_setpath:
  8511                                          mov     dx,di                           ; success
  8512                                          push    ds                              ; so restore prev dir
  8513                                          push    es                              ;
  8514                                          pop     ds                              ; DS:DX -> prev dir
  8515                                          ;mov	ah,CHDir                        ;
  8516                                          mov	ah,3Bh
  8517                                          int     21h                             ;
  8518                                          pop     ds                              ;
  8519                                  
  8520                                          dec     di                              ; then copy in DefPathString
  8521                                          rep     movsb                           ; DS:SI -> "C:\\DOS\0"
  8522                                  
  8523                                  ; Initialize the default prompt
  8524                                  
  8525                                  init_prompt:
  8526                                          push    di                              ;
  8527                                          sub     ax,ax                           ;
  8528                                          mov     cx,64                           ; insure any data read in
  8529                                          rep     stosb                           ; from Current_Dir is zapped
  8530                                          pop     di                              ;
  8531                                  
  8532                                  	cmp	[AllocedEnv],al			; virgin env?
  8533                                          je	short init_comspec		; no
  8534                                          ;mov	si,offset RESGROUP:PrmptString  ; DS:SI -> "PROMPT=$P$G\0"
  8535                                          mov	si,PrmptString
  8536                                  	cmp     [si],al				; add it?
  8537                                          je      short init_comspec		; no
  8538                                  	;mov	cx,PrmptStrLen+1                ;
  8539                                          mov	cl,12  ; db "PROMPT=$P$G",0
  8540                                  	rep     movsb                           ;
  8541                                  
  8542                                  ; Initialize the Comspec string
  8543                                  
  8544                                  init_comspec:
  8545                                          cmp	[ComspOffset],ax		; add it?
  8546                                          jne	short init_done			; no
  8547                                          lea     ax,[di+ComspStrLen]             ;
  8548                                          mov	[ComspOffset],ax		;
  8549                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8550                                          mov	si,ComspString
  8551                                  	;mov	cx,ComspStrLen2+1               ;
  8552                                          mov	cx,21 ; db "COMSPEC=\COMMAND.COM",0
  8553                                  	rep     movsb                           ;
  8554                                  
  8555                                  init_done:
  8556                                          mov     ax,es                           ; return env seg in ax
  8557                                          mov     [EnvirSeg],ax			; save env seg
  8558                                          inc	byte [AllocedEnv]		; remember that *we* alloced it
  8559                                  %endif
  8560                                  
  8561                                  ; 29/01/2023 - MSDOS 5.0 COMMAND.COM (RESGROUP:1DC4h)
  8562                                  %if 1
  8563                                  	;mov	bx,10
  8564 00001B86 BB0A00                  	mov	bx,ENVIRONSIZ>>4 ; 160/16
  8565 00001B89 B448                    	mov	ah,48h
  8566 00001B8B CD21                    	int	21h    	; DOS - 2+ - ALLOCATE MEMORY
  8567                                  			; BX = number of 16-byte paragraphs desired
  8568 00001B8D 722C                    	jc	short init_nomem
  8569                                  
  8570                                  init_ok:
  8571 00001B8F 8EC0                    	mov	es,ax
  8572                                  	;assume	es:nothing                      ; es = temp env segment
  8573                                  
  8574 00001B91 31FF                    	xor	di,di
  8575 00001B93 89F8                    	mov	ax,di
  8576                                  	;mov	cx,160	
  8577 00001B95 B9A000                          mov     cx,ENVIRONSIZ
  8578 00001B98 F3AA                            rep	stosb
  8579                                  
  8580                                  init_pathstr:
  8581                                  
  8582                                  ; Initialize the path string (PATH=) first
  8583                                  
  8584 00001B9A 16                      	push	ss
  8585 00001B9B 1F                      	pop	ds
  8586                                  
  8587                                          ;mov	si,offset RESGROUP:PathString   ; DS:SI -> "PATH=\0"
  8588 00001B9C BE[531C]                	mov	si,PathString
  8589 00001B9F BF0000                  	mov	di,0
  8590                                  init_cp_pathstr:
  8591 00001BA2 AC                      	lodsb
  8592 00001BA3 AA                      	stosb
  8593 00001BA4 08C0                    	or	al,al
  8594 00001BA6 75FA                    	jnz	short init_cp_pathstr
  8595                                  
  8596                                  ; Initialize the Comspec string
  8597                                  
  8598                                  init_comspec:
  8599                                          ;mov	si,offset RESGROUP:ComspString  ; DS:SI -> "COMSPEC=\\COMMAND.COM\0"
  8600 00001BA8 BE[591C]                        mov	si,ComspString
  8601                                  	; 05/05/2023
  8602 00001BAB BF0600                  	mov	di,6
  8603                                  init_cp_compstr:
  8604 00001BAE AC                      	lodsb
  8605 00001BAF AA                      	stosb
  8606 00001BB0 08C0                    	or	al,al
  8607 00001BB2 75FA                    	jnz	short init_cp_compstr
  8608                                  
  8609                                  init_done:
  8610 00001BB4 8CC0                            mov     ax,es                           ; return env seg in ax
  8611                                          ;mov	[EnvirSeg],ax			; save env seg
  8612                                          ;inc	byte [AllocedEnv]		; remember that *we* alloced it
  8613                                  %endif	
  8614                                  
  8615                                  	; 29/01/2023
  8616                                  alloc_done:
  8617 00001BB6 5F                      	pop	di
  8618 00001BB7 5E                      	pop	si
  8619 00001BB8 07                      	pop	es
  8620 00001BB9 1F                              pop     ds
  8621                                  	;assume	ds:nothing
  8622 00001BBA C3                      	retn
  8623                                  
  8624                                  	; 29/01/2023
  8625                                  init_nomem:
  8626                                  
  8627                                  ;We call the error routine from here. This routine never returns. It either
  8628                                  ;terminates COMMAND with error( if it is not the first invocation ) or hangs
  8629                                  ;the system ( if it is the first COMMAND.COM ).
  8630                                  
  8631 00001BBB E80000                  	call	Alloc_error
  8632                                  
  8633                                  ;Alloc_env	endp
  8634                                  
  8635                                  ;*** Alloc_error: This routine just jumps to the actual label where we 
  8636                                  ; check if this is a permanent or secondary command.com and take the 
  8637                                  ; appropriate action.
  8638                                  ;
  8639                                  ;	ENTRY:	ds = RESGROUP = DATARES
  8640                                  ;
  8641                                  ;	EXIT:	None - does not return
  8642                                  ;
  8643                                  ;	REGISTERS AFFECTED: Does not matter
  8644                                  ;
  8645                                  
  8646                                  ;public Alloc_error
  8647                                  Alloc_error:	;proc	near
  8648                                  
  8649                                  	;jmp	RESGROUP:BadMemErr
  8650                                  	; 29/01/2023
  8651 00001BBE E946F1                  	jmp	BadMemErr	
  8652                                  	
  8653                                  ;Alloc_error	endp
  8654                                  
  8655                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8656                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1DFFh
  8657                                  
  8658                                  	; MSDOS 6.0
  8659                                  ;*** Patch_stub -- This routine patches in the segment and offset values in
  8660                                  ; the stub table of the various entry points in the resident code segment.
  8661                                  ; Some of them are interrupt entry points and some of them are entries from
  8662                                  ; the transient to the resident code segment.
  8663                                  ;
  8664                                  ;	ENTRY:	ds = RESGROUP
  8665                                  ;		es:di = segment:offset of final location of resident code
  8666                                  ;
  8667                                  ;	EXIT:	All segments and offsets patched into the stub table
  8668                                  ;
  8669                                  ;	REGISTERS AFFECTED: ax, bx, cx, dx, si, di
  8670                                  
  8671                                  patch_stub:	;proc near
  8672                                  	;assume	ds:RESGROUP
  8673                                  	
  8674 00001BC1 06                      	push	es
  8675                                  
  8676 00001BC2 8CC3                    	mov	bx,es			;bx = resident code segment
  8677 00001BC4 89FA                    	mov	dx,di
  8678                                  	;mov	di,offset DATARES:Int2f_Entry
  8679 00001BC6 BF[0400]                	mov	di,Int2f_Entry
  8680                                  	;mov	si,offset RESGROUP:Reloc_Table
  8681 00001BC9 BE[A620]                	mov	si,Reloc_Table
  8682 00001BCC 1E                      	push	ds
  8683 00001BCD 07                      	pop	es			;es = RESGROUP = DATARES
  8684                                  
  8685                                  ;bx:dx = segment:offset of resident code segment
  8686                                  ;es:di = entry point table in stub
  8687                                  ;ds:si = offset table in INIT segment -- offsets of code entry points now
  8688                                  
  8689                                  	;mov	cx,NUM_RELOC_ENTRIES	;number of entry points
  8690 00001BCE B90B00                  	mov	cx,11 ; MSDOS 5.0 COMMAND.COM
  8691                                  patchlp:
  8692 00001BD1 AD                      	lodsw				;get current offset
  8693 00001BD2 01D0                    	add	ax,dx			;offset it by code seg location 
  8694 00001BD4 AB                      	stosw				;store offset
  8695 00001BD5 89D8                    	mov	ax,bx			
  8696 00001BD7 AB                      	stosw				;store segment 
  8697 00001BD8 E2F7                    	loop	patchlp
  8698                                  
  8699 00001BDA 07                      	pop	es
  8700 00001BDB C3                      	retn
  8701                                  
  8702                                  ;Patch_stub	endp
  8703                                  
  8704                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8705                                  
  8706                                  	; MSDOS 6.0
  8707                                  ;*** Patch_segs -- This routine patches the segment values in the dword 
  8708                                  ; pointers that the stub uses to jump to the actual handler. These values 
  8709                                  ; are temporarily needed to handle these interrupts if they occur before
  8710                                  ; the resident is relocated to its final position and all the addresses of
  8711                                  ; the handlers have been updated.
  8712                                  ;
  8713                                  ;	ENTRY:	es = PSP segment = code segment
  8714                                  ;
  8715                                  ;	EXIT:	Current segment values patched into the jump table in the
  8716                                  ;		stub.
  8717                                  ;
  8718                                  ;	REGISTERS AFFECTED: ax, cx, di
  8719                                  
  8720                                  patch_segs:	;proc near
  8721                                  
  8722                                  	;mov	di,offset RESGROUP:Int2f_Entry
  8723 00001BDC BF[0400]                	mov	di,Int2f_Entry 
  8724 00001BDF B90400                  	mov	cx,4			;we have to patch 4 handlers
  8725 00001BE2 83C702                  	add	di,2
  8726 00001BE5 8CC0                    	mov	ax,es
  8727                                  pseglp:
  8728 00001BE7 AB                      	stosw				;store the segment value
  8729 00001BE8 83C702                  	add	di,2			;skip the next offset value
  8730 00001BEB E2FA                    	loop	pseglp
  8731                                  
  8732 00001BED C3                      	retn
  8733                                  
  8734                                  ;Patch_segs	endp
  8735                                  
  8736                                  	; 29/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8737                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E2Ch
  8738                                  
  8739                                  	; MSDOS 6.0
  8740                                  ;*** get_XMMAddr -- This routine gets the call address for the XMM driver
  8741                                  ; by issuing the appropriate int 2fh. This is stored in a stub variable 
  8742                                  ; and is used by the stub when we have to jump to the resident in HMA
  8743                                  ;
  8744                                  ;	ENTRY:	ds = RESGROUP
  8745                                  ;
  8746                                  ;	EXIT:	XMMCallAddr = XMM driver far call address
  8747                                  ;
  8748                                  ;	REGISTERS AFFECTED:
  8749                                  ;
  8750                                  
  8751                                  get_XMMAddr:	;proc near
  8752                                  	;assume	ds:RESGROUP
  8753                                  
  8754 00001BEE 06                      	push	es
  8755                                  
  8756                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_INSTALL_CHECK
  8757 00001BEF B80043                  	mov	ax,4300h
  8758 00001BF2 CD2F                    	int	2Fh
  8759                                  		; - Multiplex - XMS - INSTALLATION CHECK
  8760                                  		; Return: AL = 80h XMS driver installed
  8761                                  		; AL <> 80h no driver
  8762 00001BF4 3C80                    	cmp	al,80h			; Q: installed
  8763 00001BF6 750D                    	jne	short cXMMexit		; N: set error, quit
  8764                                  ;
  8765                                  ; get the XMM control functions entry point, save it, we
  8766                                  ; need to call it later.
  8767                                  ;
  8768                                  	;mov	ax,XMM_MULTIPLEX SHL 8 + XMM_FUNCTION_ADDR
  8769 00001BF8 B81043                  	mov	ax,4310h
  8770 00001BFB CD2F                    	int	2Fh
  8771                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
  8772                                  		; Return: ES:BX -> driver entry point
  8773                                  
  8774 00001BFD 891E[3000]              	mov	[XMMCallAddr], bx
  8775 00001C01 8C06[3200]              	mov	[XMMCallAddr+2],es
  8776                                  cXMMexit:
  8777 00001C05 07                      	pop	es
  8778 00001C06 C3                      	retn				; done
  8779                                  
  8780                                  ;get_XMMAddr	endp
  8781                                  
  8782                                  ;=============================================================================
  8783                                  ; UNINIT.ASM, MSDOS 6.0, 1991
  8784                                  ;=============================================================================
  8785                                  ; 24/09/2018 - Retro DOS v3.0
  8786                                  
  8787                                  ; (30/04/2018 - Retro DOS v2.0, MSDOS 2.11 COMMAND.COM)
  8788                                  
  8789                                  ; TITLE	COMMAND Initialization messages
  8790                                  
  8791                                  ;INIT	SEGMENT PUBLIC PARA
  8792                                  
  8793                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8794                                  
  8795                                  	; 25/09/2018
  8796                                  	; (15 bytes filler)
  8797 00001C07 00                      	db 0
  8798                                  	;db "25/9/2018 ETAN"
  8799                                  	; 15/06/2023
  8800 00001C08 31352F362F32303233-     	db "15/6/2023 ETAN"	
  8800 00001C11 204554414E         
  8801 00001C16 00                      	db 0
  8802                                  
  8803                                  ; 30/01/2023
  8804                                  %if 0
  8805                                  	; MSDOS 3.3 COMMAND.COM - offset 145Eh
  8806                                  	;dw 0
  8807                                  COPYRIGHTMSG:	; MSDOS 3.3 COMMAND.COM - offset 1460h
  8808                                  	db 0Dh,0Ah
  8809                                  	db 0Dh,0Ah
  8810                                  	db 'Microsoft(R) MS-DOS(R)  Version 3.30'
  8811                                  	db 0Dh,0Ah
  8812                                  	db '             (C)Copyright Microsoft Corp 1981-1987               '
  8813                                  	db ' ',0Dh,0Ah
  8814                                  	db '                                                   ',
  8815                                  	db 0Dh,0Ah,0
  8816                                  
  8817                                  	times 43 db 20h
  8818                                  
  8819                                  _152Fh:	db 'Specified COMMAND search directory bad',0Dh,0Ah,0
  8820                                  BADCOMLKMES:
  8821                                  	dw _152Fh
  8822                                  
  8823                                  _155Ah:	db 'Specified COMMAND search directory bad access denied',0Dh,0Ah,0
  8824                                  BADCOMACCMSG:
  8825                                  	dw _155Ah
  8826                                  
  8827                                  _1593h:	db 'Access denied',0Dh,0Ah,0
  8828                                  ACCDENERR:
  8829                                  	dw _1593h
  8830                                  
  8831                                  _15A5h:	db 'Out of environment space',0Dh,0Ah,0
  8832                                  OUTENVMSG:
  8833                                  	dw _15A5h
  8834                                  
  8835                                  BADVERMSG:
  8836                                  	db 'Incorrect DOS version',0Dh,0Ah,'$'
  8837                                  
  8838                                  BADENVSIZMSG:
  8839                                  	db 'Invalid environment size specified',0Dh,0Ah,'$'
  8840                                  
  8841                                  HEADERPTR:
  8842                                  	dw COPYRIGHTMSG
  8843                                  %endif
  8844                                  
  8845                                  ; 30/01/2023
  8846                                  ;align 16
  8847                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8848                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1E50h 
  8849                                  ICONDEV:
  8850 00001C17 2F4445562F                      db '/DEV/'
  8851 00001C1C 434F4E000000000000      	db 'CON',0,0,0,0,0,0	; Room for 8 char device	
  8852                                  BADCSPFL:
  8853 00001C25 00                      	db 0
  8854                                  COMSPECT:
  8855 00001C26 5C434F4D4D414E442E-     	db '\COMMAND.COM',0
  8855 00001C2F 434F4D00           
  8856 00001C33 00                      	db 0
  8857                                  AUTOBAT:
  8858 00001C34 003A5C4155544F4558-     	db 0,':\AUTOEXEC.BAT',0,0Dh
  8858 00001C3D 45432E424154000D   
  8859                                  ;KAUTOBAT:
  8860                                  	;db 0,':\KAUTOEXEC.BAT',0,0Dh 
  8861                                  PRDATTM:
  8862 00001C45 FF                      	db -1 ; 0FFh		; Init not to prompt for date time
  8863                                  INITADD:
  8864 00001C46 00000000                	dd 0
  8865                                  print_add:
  8866 00001C4A [DD4D]                  	dw Printf_Init
  8867 00001C4C 0000                    	dw 0
  8868                                  triage_add:
  8869 00001C4E [A52C]                  	dw Triage_Init
  8870 00001C50 0000                    	dw 0
  8871                                  ;CHUCKENV:
  8872                                  AllocedEnv:
  8873 00001C52 00                      	db 0
  8874                                  
  8875                                  ; 30/01/2023 - MSDOS 3.3
  8876                                  ;COMSPOFFSET:
  8877                                  ;ECOMLOC:
  8878                                  ;	;dw 0Eh
  8879                                  ;	;dw offset ENVIRONMENT:ECOMSPEC-10h
  8880                                  ;	dw ECOMSPEC-ENVIRONMENT ; 30/04/2018	
  8881                                  ;COMSPSTRING:
  8882                                  ;	db 'COMSPEC='
  8883                                  
  8884                                  ; 30/01/2023 - MSDOS 5.0 & MSDOS 6.0
  8885                                  PathString:
  8886 00001C53 504154483D00            	db 'PATH=',0
  8887                                  PathStrLen equ $-PathString-1
  8888                                  ; MSDOS 6.0
  8889                                  ;DefPathString:
  8890                                  ;	db 'C:\MSDOS',0
  8891                                  ;DefPathStrLen equ  $-DefPathString-1
  8892                                  ;DefPath2String:
  8893                                  ;	db 'C:\DOS',0
  8894                                  ;DefPath2StrLen equ $-DefPath2String-1
  8895                                  ;
  8896                                  ;PrmptString:
  8897                                  ;	db 'PROMPT=$P$G',0
  8898                                  ;PrmptStrLen equ $-PrmptString-1
  8899                                  ;PrmptStrLen2 equ 7		; length of PROMPT=
  8900                                  ;ComspOffset:
  8901                                  ;	dw 0
  8902                                  ComspString:
  8903 00001C59 434F4D535045433D5C-     	db 'COMSPEC=\COMMAND.COM',0
  8903 00001C62 434F4D4D414E442E43-
  8903 00001C6B 4F4D00             
  8904                                  ComspStrLen equ 8		; length of COMSPEC=
  8905                                  ComspStrLen2 equ $-ComspString-1
  8906                                  				; length of full COMSPEC
  8907                                  	; 29/01/2023
  8908                                  ;equal_sign:
  8909                                  ;equalsign:
  8910                                  ;	db '='
  8911                                  ;letter_a:
  8912                                  ;lcasea:
  8913                                  ;	db 'a'
  8914                                  ;letter_z:
  8915                                  ;lcasez:
  8916                                  ;	db 'z'
  8917                                  	; 30/01/2023
  8918                                  ;;slash_chr:
  8919                                  ;;	db '/'
  8920                                  ;;bslash_chr:
  8921                                  ;;	db '\'
  8922                                  ;space_chr:
  8923                                  ;;space:
  8924                                  ;	db 20h
  8925                                  ;;letter_p:
  8926                                  ;;	db 'p'
  8927                                  ;;letter_d:
  8928                                  ;;	db 'd'
  8929                                  ;;letter_c:
  8930                                  ;;	db 'c'
  8931                                  	; 16/04/2023
  8932                                  ; MSDOS 5.0 & MSDOS 6.0
  8933                                  ;scswitch:
  8934                                  ;	db 'C'		; Single command
  8935                                  ;;skswitch:
  8936                                  ;	db 'K' ; MSDOS 6.0
  8937                                  ;;letter_A:
  8938                                  ;ucasea: ; 21/01/2023 
  8939                                  ;	db 'A'
  8940                                  
  8941                                  	; 30/01/2023
  8942                                  EnvSiz:
  8943 00001C6E 0000                    	dw 0		; size user wants to allocate
  8944                                  EnvMax:
  8945 00001C70 0000                    	dw 0		; maximum size allowed
  8946                                  OldEnv:
  8947 00001C72 0000                    	dw 0		; envirseg at initialization
  8948                                  UsedEnv:
  8949 00001C74 0000                    	dw 0		; amount of envirseg used
  8950                                  	; MSDOS 5.0 & MSDOS 6.0
  8951                                  PARS_MSG_OFF:
  8952 00001C76 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE OFFSET
  8953                                  PARS_MSG_SEG:
  8954 00001C78 0000                    	dw 0		; SAVED PARSE ERROR MESSAGE SEGMENT
  8955                                  
  8956                                  ;Do not separate the following two words. Used to call transient PARSE routine
  8957                                  
  8958                                  Init_Parse:
  8959                                  	;dw 4FFBh	; MSDOS 5.0 COMMAND.COM (TRANGROUP:APPEND_PARSE)
  8960                                  init_p:
  8961 00001C7A [D94D]                  	dw append_parse
  8962                                  initend:
  8963 00001C7C 0000                    	dw 0		; segment address of end of init
  8964                                  TrnSize:
  8965 00001C7E 0000                    	dw 0		; size of transient in paragraphs
  8966                                  
  8967                                  ; 23/07/2024 - Retro DOS v4.1 (& 4.0) COMMAND.COM
  8968                                  ;%if 0
  8969                                  resetenv:
  8970                                  	;dw 0		; set if we need to setblck env at endinit
  8971                                  	; 23/07/2024
  8972 00001C80 00                      	db 0
  8973                                  ;%endif
  8974                                  
  8975                                  ext_msg:
  8976 00001C81 00                      	db 0		; set if /MSG switch entered
  8977                                  eswitch:
  8978 00001C82 00                      	db 0		; set if /e was entered
  8979                                  dswitch:
  8980 00001C83 00                      	db 0		; set if /d was entered
  8981                                  parsemes_ptr:
  8982 00001C84 0000                    	dw 0		; word to store parse error number
  8983                                  
  8984                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  8985                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:1ED6h 
  8986                                  
  8987                                  	; MSDOS 6.0 (UINIT.ASM, 1991)
  8988                                  ;  The following parse control block is used for COMMAND. This block is
  8989                                  ;  used for parsing during initialization. The syntax for COMMAND is:
  8990                                  ;  COMMAND [/?] [d:][path][/P][/F][/D][/E:xxxxx][/MSG][/C executable]
  8991                                  ;
  8992                                  ;  Anything on the command line after the /C switch will be passed to the
  8993                                  ;  executable command, so if /C is used, it must be specified last. The
  8994                                  ;  /MSG switch can only be specified if the /P switch is specified.
  8995                                  ;
  8996                                  ;  The /? switch causes help text to be displayed. Any other options
  8997                                  ;  on the command line are ignored. Command.com will not load if /?
  8998                                  ;  is specified.
  8999                                  
  9000                                  INTERNAT_INFO:		; used for country info after parsing is completed
  9001                                  PARSE_COMMAND:
  9002 00001C86 [891C]                  	dw COMMAND_PARMS
  9003 00001C88 00                      	db 0			; no extra delimiter
  9004                                  COMMAND_PARMS:
  9005 00001C89 0002                    	db 0,2			; 1 positional parm
  9006 00001C8B [9F1C]                  	dw COMMAND_FILE
  9007 00001C8D [9F1C]                  	dw COMMAND_FILE
  9008                                          ; MSDOS 5.0
  9009 00001C8F 07                      	db 7			; 7 switches
  9010                                  	; MSDOS 6.0
  9011                                  	;db 8 			; 8 switches
  9012 00001C90 [A81C]                  	dw COMMAND_SWITCH1
  9013 00001C92 [B41C]                  	dw COMMAND_SWITCH2
  9014 00001C94 [C01C]                  	dw COMMAND_SWITCH3
  9015 00001C96 [CC1C]                  	dw COMMAND_SWITCH4
  9016 00001C98 [E51C]                  	dw COMMAND_SWITCH5
  9017 00001C9A [F11C]                  	dw COMMAND_SWITCH6
  9018 00001C9C [FF1C]                  	dw COMMAND_SWITCH7
  9019                                  	;dw COMMAND_SWITCH8 ; MSDOS 6.0
  9020 00001C9E 00                      	db 0			; no keywords
  9021                                  
  9022                                  COMMAND_FILE:
  9023 00001C9F 0102                    	dw 0201h		; filespec - optional
  9024 00001CA1 0100                    	dw 1			; capitalize - file table
  9025 00001CA3 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9026 00001CA5 [131D]                  	dw NO_VAL 		;
  9027 00001CA7 00                      	db 0			; no keywords
  9028                                  
  9029                                  COMMAND_SWITCH1:
  9030 00001CA8 0000                    	dw 0			; no match flags
  9031 00001CAA 0200                    	dw 2			; capitalize by char table
  9032 00001CAC [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9033 00001CAE [131D]                  	dw NO_VAL 		;
  9034 00001CB0 01                      	db 1			; 1 keyword
  9035                                  COMMAND_P_SYN:
  9036 00001CB1 2F5000                  	db '/P',0		; /P switch
  9037                                  
  9038                                  COMMAND_SWITCH2:
  9039 00001CB4 0000                    	dw 0			; no match flags
  9040 00001CB6 0200                    	dw 2			; capitalize by char table
  9041 00001CB8 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9042 00001CBA [131D]                  	dw NO_VAL 		;
  9043 00001CBC 01                      	db 1			; 1 keyword
  9044                                  COMMAND_F_SYN:
  9045 00001CBD 2F4600                  	db '/F',0		; /F switch
  9046                                  
  9047                                  COMMAND_SWITCH3:
  9048 00001CC0 0000                    	dw 0			; no match flags
  9049 00001CC2 0200                    	dw 2			; capitalize by char table
  9050 00001CC4 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9051 00001CC6 [131D]                  	dw NO_VAL 		;
  9052 00001CC8 01                      	db 1			; 1 keyword
  9053                                  COMMAND_D_SYN:
  9054 00001CC9 2F4400                  	db '/D',0		; /D switch
  9055                                  
  9056                                  COMMAND_SWITCH4:
  9057 00001CCC 0080                    	dw 8000h		; numeric value - required
  9058 00001CCE 0000                    	dw 0			; no function flags
  9059 00001CD0 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9060 00001CD2 [D81C]                  	dw COMMAND_E_VAL	; pointer to value list
  9061 00001CD4 01                      	db 1			; 1 keyword
  9062                                  COMMAND_E_SYN:
  9063 00001CD5 2F4500                  	db '/E',0		; /E switch
  9064                                  
  9065                                  COMMAND_E_VAL:
  9066 00001CD8 01                      	db 1			;
  9067 00001CD9 01                      	db 1			; 1 range
  9068 00001CDA 01                      	db 1			; returned if result
  9069                                  	;dd ENVSML,ENVBIG	; minimum & maximum value
  9070                                  	; MSDOS 5.0 COMMAND.COM
  9071                                  	; (RESGROUP:1F2Bh)
  9072 00001CDB A0000000                	dd 160	 ; ENVSML
  9073 00001CDF 00800000                	dd 32768 ; ENVBIG
  9074 00001CE3 00                      	db 0			; no numeric values
  9075 00001CE4 00                      	db 0			; no string values
  9076                                  
  9077                                  COMMAND_SWITCH5:
  9078 00001CE5 0000                    	dw 0			; no match flags
  9079 00001CE7 0200                    	dw 2			; capitalize by char table
  9080 00001CE9 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9081 00001CEB [131D]                  	dw NO_VAL 		;
  9082 00001CED 01                      	db 1			; 1 keyword
  9083                                  COMMAND_C_SYN:
  9084 00001CEE 2F4300                  	db '/C',0		; /C switch
  9085                                  
  9086                                  COMMAND_SWITCH6:
  9087 00001CF1 0000                    	dw 0			; no match flags
  9088 00001CF3 0200                    	dw 2			; capitalize by char table
  9089 00001CF5 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9090 00001CF7 [131D]                  	dw NO_VAL 		;
  9091 00001CF9 01                      	db 1			; 1 keyword
  9092                                  COMMAND_M_SYN:
  9093 00001CFA 2F4D534700              	db '/MSG',0		; /MSG switch
  9094                                  
  9095                                  COMMAND_SWITCH7:
  9096 00001CFF 0000                    	dw 0			; no match flags
  9097 00001D01 0200                    	dw 2			; capitalize by char table
  9098 00001D03 [0B1D]                  	dw COMND1_OUTPUT	; result buffer
  9099 00001D05 [131D]                  	dw NO_VAL 		;
  9100 00001D07 01                      	db 1			; 1 keyword
  9101                                  COMMAND_?_SYN:
  9102 00001D08 2F3F00                  	db '/?',0 		; /? switch
  9103                                  
  9104                                  	; MSDOS 6.0
  9105                                  ;COMMAND_SWITCH8:
  9106                                  ;	dw 0			; no match flags
  9107                                  ;	dw 2			; capitalize by char table
  9108                                  ;	dw COMND1_OUTPUT	; result buffer
  9109                                  ;	dw NO_VAL 		;
  9110                                  ;	db 1			; 1 keyword
  9111                                  ;COMMAND_K_SYN:
  9112                                  ;	db '/K',0		; /K switch
  9113                                  
  9114                                  COMND1_OUTPUT:
  9115                                  COMND1_TYPE:
  9116 00001D0B 00                      	db 0			; type
  9117                                  COMND1_CODE:
  9118 00001D0C 00                      	db 0			; return value
  9119                                  COMND1_SYN:
  9120 00001D0D 0000                    	dw 0			; synonym pointer
  9121                                  COMND1_ADDR:
  9122 00001D0F 00000000                	dd 0			; numeric value / address
  9123                                  				; of string value
  9124                                  NO_VAL:
  9125 00001D13 00                      	db 0			; no values
  9126                                  num_positionals:
  9127 00001D14 0000                    	dw 0			; counter for positionals
  9128                                  old_parse_ptr:
  9129 00001D16 0000                    	dw 0			; SI position before calling parser
  9130                                  
  9131                                  	; 30/01/2023
  9132                                  ;***	INITIALIZATION MESSAGES
  9133                                  ;	-------------------------
  9134                                  ;	include	comimsg.inc	;M00
  9135                                  ;-----------------------------------------------------------------------------	
  9136                                  
  9137                                  BADVERMSG:
  9138 00001D18 17                      	db 23
  9139 00001D19 496E636F7272656374-     	db 'Incorrect DOS version',0Dh,0Ah
  9139 00001D22 20444F532076657273-
  9139 00001D2B 696F6E0D0A         
  9140                                  OUTENVMSG:
  9141 00001D30 1A                      	db 26
  9142 00001D31 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
  9142 00001D3A 7669726F6E6D656E74-
  9142 00001D43 2073706163650D0A   
  9143                                  COPYRIGHTMSG:
  9144 00001D4B 5E                      	db 94
  9145 00001D4C 0D0A                    	db 0Dh,0Ah
  9146 00001D4E 0D0A                    	db 0Dh,0Ah
  9147 00001D50 4D6963726F736F6674-     	db 'Microsoft(R) MS-DOS(R) Version 5.00',0Dh,0Ah
  9147 00001D59 285229204D532D444F-
  9147 00001D62 532852292056657273-
  9147 00001D6B 696F6E20352E30300D-
  9147 00001D74 0A                 
  9148 00001D75 202020202020202020-     	db '             (C)Copyright Microsoft Corp 1981-1991.',0Dh,0Ah
  9148 00001D7E 20202020284329436F-
  9148 00001D87 70797269676874204D-
  9148 00001D90 6963726F736F667420-
  9148 00001D99 436F72702031393831-
  9148 00001DA2 2D313939312E0D0A   
  9149                                  BADCOMLKMES:
  9150 00001DAA 28                      	db 40
  9151 00001DAB 537065636966696564-     	db 'Specified COMMAND search directory bad',0Dh,0Ah
  9151 00001DB4 20434F4D4D414E4420-
  9151 00001DBD 736561726368206469-
  9151 00001DC6 726563746F72792062-
  9151 00001DCF 61640D0A           
  9152                                  BADCOMACCMSG:
  9153 00001DD3 36                      	db 54
  9154 00001DD4 537065636966696564-     	db 'Specified COMMAND search directory bad '
  9154 00001DDD 20434F4D4D414E4420-
  9154 00001DE6 736561726368206469-
  9154 00001DEF 726563746F72792062-
  9154 00001DF8 616420             
  9155 00001DFB 616363657373206465-     	db 'access denied',0Dh,0Ah
  9155 00001E04 6E6965640D0A       
  9156                                  HELPMSG1:
  9157 00001E0A 3C                      	db 60
  9158 00001E0B 537461727473206120-     	db 'Starts a new instance of the MS-DOS command interpreter.',0Dh,0Ah
  9158 00001E14 6E657720696E737461-
  9158 00001E1D 6E6365206F66207468-
  9158 00001E26 65204D532D444F5320-
  9158 00001E2F 636F6D6D616E642069-
  9158 00001E38 6E7465727072657465-
  9158 00001E41 722E0D0A           
  9159 00001E45 0D0A                    	db 0Dh,0Ah
  9160                                  HELPMSG2:
  9161 00001E47 46                      	db 70
  9162 00001E48 434F4D4D414E44205B-     	db 'COMMAND [[drive:]path] [device] [/E:nnnnn] [/P] [/C string] [/MSG]'
  9162 00001E51 5B64726976653A5D70-
  9162 00001E5A 6174685D205B646576-
  9162 00001E63 6963655D205B2F453A-
  9162 00001E6C 6E6E6E6E6E5D205B2F-
  9162 00001E75 505D205B2F43207374-
  9162 00001E7E 72696E675D205B2F4D-
  9162 00001E87 53475D             
  9163 00001E8A 0D0A                    	db 0Dh,0Ah
  9164 00001E8C 0D0A                    	db 0Dh,0Ah
  9165                                  HELPMSG3:
  9166 00001E8E 48                              db 72
  9167 00001E8F 20205B64726976653A-     	db '  [drive:]path    Specifies the directory containing COMMAND.COM '
  9167 00001E98 5D7061746820202020-
  9167 00001EA1 537065636966696573-
  9167 00001EAA 207468652064697265-
  9167 00001EB3 63746F727920636F6E-
  9167 00001EBC 7461696E696E672043-
  9167 00001EC5 4F4D4D414E442E434F-
  9167 00001ECE 4D20               
  9168 00001ED0 66696C652E0D0A          	db 'file.',0Dh,0Ah
  9169                                  HELPMSG4:
  9170 00001ED7 4D                      	db 77
  9171 00001ED8 202064657669636520-     	db '  device          Specifies the device to use for command input and '
  9171 00001EE1 202020202020202020-
  9171 00001EEA 537065636966696573-
  9171 00001EF3 207468652064657669-
  9171 00001EFC 636520746F20757365-
  9171 00001F05 20666F7220636F6D6D-
  9171 00001F0E 616E6420696E707574-
  9171 00001F17 20616E6420         
  9172 00001F1C 6F75747075742E0D0A      	db 'output.',0Dh,0Ah
  9173                                  HELPMSG5:
  9174 00001F25 45                      	db 69
  9175 00001F26 20202F453A6E6E6E6E-     	db '  /E:nnnnn        Sets the initial environment size to nnnnn bytes.'
  9175 00001F2F 6E2020202020202020-
  9175 00001F38 536574732074686520-
  9175 00001F41 696E697469616C2065-
  9175 00001F4A 6E7669726F6E6D656E-
  9175 00001F53 742073697A6520746F-
  9175 00001F5C 206E6E6E6E6E206279-
  9175 00001F65 7465732E           
  9176 00001F69 0D0A                    	db 0Dh,0Ah
  9177                                  HELPMSG6:
  9178 00001F6B 4D                      	db 77
  9179 00001F6C 20202F502020202020-     	db '  /P              Makes the new command interpreter permanent '
  9179 00001F75 202020202020202020-
  9179 00001F7E 4D616B657320746865-
  9179 00001F87 206E657720636F6D6D-
  9179 00001F90 616E6420696E746572-
  9179 00001F99 707265746572207065-
  9179 00001FA2 726D616E656E7420   
  9180 00001FAA 2863616E2774206578-     	db '(can',27h,'t exit).',0Dh,0Ah
  9180 00001FB3 6974292E0D0A       
  9181                                  HELPMSG7:
  9182 00001FB9 50                      	db 80
  9183 00001FBA 20202F432073747269-     	db '  /C string       Carries out the command specified by string, and '
  9183 00001FC3 6E6720202020202020-
  9183 00001FCC 43617272696573206F-
  9183 00001FD5 75742074686520636F-
  9183 00001FDE 6D6D616E6420737065-
  9183 00001FE7 636966696564206279-
  9183 00001FF0 20737472696E672C20-
  9183 00001FF9 616E6420           
  9184 00001FFD 7468656E2073746F70-     	db 'then stops.',0Dh,0Ah
  9184 00002006 732E0D0A           
  9185                                  HELPMSG8:
  9186 0000200A 4E                      	db 78
  9187 0000200B 20202F4D5347202020-     	db '  /MSG            Specifies that all error messages be stored in '
  9187 00002014 202020202020202020-
  9187 0000201D 537065636966696573-
  9187 00002026 207468617420616C6C-
  9187 0000202F 206572726F72206D65-
  9187 00002038 737361676573206265-
  9187 00002041 2073746F7265642069-
  9187 0000204A 6E20               
  9188 0000204C 6D656D6F72792E2059-     	db 'memory. You',0Dh,0Ah
  9188 00002055 6F750D0A           
  9189                                  HELPMSG9:
  9190 00002059 38                      	db 56
  9191 0000205A 202020202020202020-     	db '                  need to specify /P with this switch.',0Dh,0Ah
  9191 00002063 202020202020202020-
  9191 0000206C 6E65656420746F2073-
  9191 00002075 706563696679202F50-
  9191 0000207E 207769746820746869-
  9191 00002087 73207377697463682E-
  9191 00002090 0D0A               
  9192                                  HelpMsgs:
  9193 00002092 [0A1E]                          dw HELPMSG1
  9194 00002094 [471E]                  	dw HELPMSG2
  9195 00002096 [8E1E]                  	dw HELPMSG3
  9196 00002098 [D71E]                  	dw HELPMSG4
  9197 0000209A [251F]                  	dw HELPMSG5
  9198 0000209C [6B1F]                  	dw HELPMSG6
  9199 0000209E [B91F]                  	dw HELPMSG7
  9200 000020A0 [0A20]                  	dw HELPMSG8
  9201 000020A2 [5920]                  	dw HELPMSG9
  9202                                  
  9203                                  	; 23/04/2023
  9204 000020A4 0000                    	dw 0
  9205                                  
  9206                                  ;-----------------------------------------------------------------------------
  9207                                  
  9208                                  ;SR;
  9209                                  ; This table of offsets is used by the init code to calculate the new offsets
  9210                                  ;for these labels after the resident code has been relocated
  9211                                  
  9212                                  ;Reloc_Table:
  9213                                  	;dw offset CODERES:MsgInt2fHandler
  9214                                  	;dw offset CODERES:Int_2e
  9215                                  	;dw offset CODERES:ContC
  9216                                  	;dw offset CODERES:DskErr
  9217                                  	;dw offset CODERES:Exec_Ret
  9218                                  	;dw offset CODERES:TRemCheck
  9219                                  	;dw offset CODERES:TrnLodCom1
  9220                                  	;dw offset CODERES:LodCom
  9221                                  	;dw offset CODERES:MsgRetriever
  9222                                  	;dw offset CODERES:THeadFix
  9223                                  	;dw offset CODERES:Lh_OffUnlink	; M003
  9224                                  
  9225                                  	; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9226                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:22F6h
  9227                                  
  9228                                  Reloc_Table:			          ; MSDOS 5.0 CODERES address
  9229 000020A6 1707                    	dw MsgInt2fHandler - RCODE_START  ; 738h
  9230 000020A8 7301                    	dw Int_2e - RCODE_START		  ; 177h	
  9231 000020AA 3300                    	dw ContC - RCODE_START		  ; 035h
  9232 000020AC 3404                    	dw DSKERR - RCODE_START		  ; 445h
  9233 000020AE 2700                    	dw Exec_Ret - RCODE_START	  ; 029h
  9234 000020B0 9702                    	dw TRemCheck - RCODE_START	  ; 2A3h
  9235 000020B2 1104                    	dw TrnLodCom1 - RCODE_START	  ; 422h
  9236 000020B4 AA01                    	dw LodCom - RCODE_START		  ; 1AEh
  9237 000020B6 5A07                    	dw MsgRetriever - RCODE_START	  ; 77Bh
  9238 000020B8 B602                    	dw THeadFix - RCODE_START	  ; 2C2h
  9239 000020BA D307                    	dw Lh_OffUnlink - RCODE_START	  ; 7F4h
  9240                                  
  9241                                  NUM_RELOC_ENTRIES equ ($-Reloc_Table)/2
  9242                                  
  9243                                  ResJmpTable:
  9244 000020BC 00000000                	dd 0			; stores prev stub jump table addr
  9245                                  FirstCom:
  9246 000020C0 00                      	db 0			; flag set if first command.com
  9247                                  DevFlag:
  9248 000020C1 00                      	db 0
  9249                                  PathFlag:
  9250 000020C2 00                      	db 0
  9251                                  
  9252                                  	; MSDOS 5.0 COMMAND.COM - RESGROUP:2313h
  9253                                  	;times 13 db 0
  9254                                  
  9255                                  ; 30/01/2023
  9256                                  coderes_end equ $
  9257                                  
  9258                                  ;INIT	ENDS
  9259                                  
  9260                                  ;	END
  9261                                  
  9262                                  ;-----------------------------------------------------------------------------
  9263                                  ; 14/10/2018 (Retro DOS v3.0 COMMAND.COM Signature)
  9264                                  ;-----------------------------------------------------------------------------
  9265                                  
  9266                                  ;db	"Retro DOS v3.0 COMMAND.COM by Erdogan Tan [2018]"
  9267                                  	; 30/01/2023
  9268 000020C3 00                      db	0
  9269                                  ;db	"Retro DOS v4.0 COMMAND.COM by Erdogan Tan [2023]"
  9270 000020C4 526574726F20444F53-     db	"Retro DOS v4 COMMAND.COM by Erdogan Tan [2024]" ; 21/07/2024	
  9270 000020CD 20763420434F4D4D41-
  9270 000020D6 4E442E434F4D206279-
  9270 000020DF 204572646F67616E20-
  9270 000020E8 54616E205B32303234-
  9270 000020F1 5D                 
  9271 000020F2 00                      db	0
  9272                                  
  9273                                  ;-----------------------------------------------------------------------------
  9274                                  ; 24/09/2018 (Retro DOS v3.0 COMMAND)
  9275                                  ;-----------------------------------------------------------------------------
  9276                                  
  9277                                  ;TAIL    SEGMENT PUBLIC PARA
  9278                                  ;        ORG     0
  9279                                  ;TRANSTART LABEL WORD
  9280                                  ;TAIL    ENDS
  9281                                  
  9282                                  ;ALIGN 16  ; 25/09/2018
  9283                                  
  9284                                  ; 30/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9285                                  
  9286                                  numbertodiv equ ($-StartCode)+100h ; 16/04/2023
  9287                                  numbertomod equ (numbertodiv % 16)
  9288                                  
  9289                                  %if numbertomod>0 & numbertomod<16
  9290 000020F3 00<rep Dh>              	times (16-numbertomod) db 0
  9291                                  %endif
  9292                                  
  9293                                  ; 30/01/2023
  9294                                  ;TRANSTART:
  9295                                  
  9296                                  ; 21/04/2018 (Retro DOS v2.0 COMMAND)
  9297                                  ;	times	128 db 0	
  9298                                  
  9299                                  ;-----------------------------------------------------------------------------
  9300                                  ; SEGMENT - TRANSCODE
  9301                                  ;-----------------------------------------------------------------------------
  9302                                  
  9303                                  ;TRANGROUP: ; 21/04/2018
  9304                                  
  9305                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9306                                  ;-----------------------------------------------------------------------------
  9307                                  
  9308                                  ; MSDOS 3.3 COMMAND.COM Transient Portion Addresses
  9309                                  
  9310                                  ; 21/04/2018 - Retro DOS v2.0
  9311                                  ; transcom.s (COMMAND.COM source file 2 of 2) code/data addresses 
  9312                                  ; (these values must be changed when transcom.s source code is changed
  9313                                  ; and data offsets are changed)
  9314                                  ;
  9315                                  ; 30/04/2018
  9316                                  ; 29/04/2018
  9317                                  
  9318                                  ; 24/09/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9319                                  ;COMMAND      EQU  012CH
  9320                                  ;DATINIT      EQU  2091H
  9321                                  ;HEADCALL     EQU  428FH
  9322                                  ;TRANSPACEEND EQU  4D5CH
  9323                                  ;TRANDATAEND  EQU  3F44H
  9324                                  
  9325                                  ; 29/04/2018 (original MSDOS 3.3 COMMAND.COM TrnSeg offset addresses)
  9326                                  ;TRIAGE_INIT  EQU  1F15H
  9327                                  ;PRINTF_INIT  EQU  34E0H 
  9328                                  
  9329                                  ;GETEXTERRNUM EQU  1EEEH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr	
  9330                                  
  9331                                  ;TPA	EQU  4293H
  9332                                  ;TRNLEN	EQU  04D6H
  9333                                  
  9334                                  ; 20/10/2018 - Retro DOS v3.0 COMMAND.COM transient portion addresses
  9335                                  ;COMMAND      EQU  012CH
  9336                                  ;DATINIT      EQU  206FH
  9337                                  ;HEADCALL     EQU  426FH
  9338                                  ; 09/01/2023
  9339                                  ;TRANSPACEEND EQU  4D3CH
  9340                                  ;TRANDATAEND  EQU  3F24H
  9341                                  ;TRIAGE_INIT  EQU  1EF3H
  9342                                  ;PRINTF_INIT  EQU  34BFH 
  9343                                  ;
  9344                                  ;GETEXTERRNUM EQU  1ECCH  ; TRIAGEERROR (GET_EXT_ERR_NUMBER) proc addr
  9345                                  
  9346                                  ;-----------------------------------------------------------------------------
  9347                                  ; ARENA.INC, MSDOS 6.0, 1991
  9348                                  ;-----------------------------------------------------------------------------
  9349                                  ; 13/10/2018 - Retro DOS 3.0
  9350                                  ; 17/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9351                                  
  9352                                  ;BREAK <Memory arena structure>
  9353                                  
  9354                                  ; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  9355                                  
  9356                                  ; arena item
  9357                                  
  9358                                  struc ARENA
  9359 00000000 ??                        .signature:	resb 1		; 4D for valid item, 5A for last item
  9360 00000001 ????                      .owner:	resw 1		; owner of arena item
  9361 00000003 ????                      .size:	resw 1		; size in paragraphs of item
  9362                                  endstruc
  9363                                  
  9364                                  ;-----------------------------------------------------------------------------
  9365                                  ;START OF TRANSIENT PORTION
  9366                                  ;This code is loaded at the end of memory and may be overwritten by
  9367                                  ;memory-intensive user programs.
  9368                                  ;-----------------------------------------------------------------------------
  9369                                  
  9370                                  ; 16/04/2023
  9371                                  TRANSTART EQU ($-StartCode)+100h ; 18/04/2023
  9372                                  ; 29/09/2018
  9373                                  ; 31/01/2023 
  9374                                  ;TRANSTART:		; Offset 1660h in original MSDOS 3.3 COMMAND.COM
  9375                                  			; 09/01/2023
  9376                                  			; Offset 2320h in original MSDOS 5.0 COMMAND.COM
  9377                                  
  9378                                  ; 25/09/2018
  9379                                  ; (original MSDOS 3.3 COMMAND.COM TRIAGEERROR offset address)
  9380                                  ;
  9381                                  ; 'GET_EXT_ERR_NUMBER' ('TRIAGEERROR') procedure is at offset 354Eh 
  9382                                  ; in MSDOS 3.3 COMMAND.COM (It is at offset 1EEEh in transient porsion).	 	
  9383                                  ;
  9384                                  ;TRIAGEERROR EQU TRANSTART+GETEXTERRNUM-100H
  9385                                  ;
  9386                                  ;
  9387                                  ;COMTRANS:
  9388                                  ;
  9389                                  ; 20/10/2018 - Retro DOS v3.0	
  9390                                  ;INCBIN	"TRANCOM3.BIN"
  9391                                  ;
  9392                                  ;COMLEN	EQU $-COMTRANS ; End of COMMAND load.
  9393                                  ;
  9394                                  ; 29/04/2018
  9395                                  ;BSS_SIZE EQU TRANSPACEEND-TRANDATAEND	
  9396                                  ;
  9397                                  ;TIMES BSS_SIZE db 0
  9398                                  ;
  9399                                  ;COMLEN	EQU $-COMTRANS ; 30/04/2018
  9400                                  
  9401                                  ;COMMANDCOMSIZE equ $ - 100h
  9402                                  
  9403                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9404                                  ; ============================================================================
  9405                                  ; --- ('trancom5.s', 31/01/2023 - modified from 'trancom3.s', 20/10/2018) ----
  9406                                  ; ============================================================================
  9407                                  
  9408                                  ; ----------------------------------------------------------------------------
  9409                                  ; START OF TRANSIENT PORTION
  9410                                  ; ----------------------------------------------------------------------------
  9411                                  ; SEGMENT - TRANSCODE
  9412                                  ; ----------------------------------------------------------------------------
  9413                                  
  9414                                  ; 18/04/2023
  9415                                  section .TRANGROUP  vstart=0  ; 31/01/2023 - Retro DOS v4.0 (& v4.1) 
  9416                                  
  9417                                  ; 18/04/2023
  9418                                  ;-----------------------------------------------------------------------------
  9419                                  ; TRANSCODE segment offset 0
  9420                                  TRANSIENTSTART:
  9421                                  
  9422                                  	; 31/01/2023
  9423 00000000 00<rep 100h>            	times 256 db 0		; Allow for 100H parameter area
  9424                                  
  9425                                  ;============================================================================
  9426                                  ; TCODE.ASM, MSDOS 6.0, 1991
  9427                                  ;============================================================================
  9428                                  ; 12/10/2018 - Retro DOS v3.0
  9429                                  ; 31/01/2023 - Retro DOS v4.0 (& v4.1)
  9430                                  
  9431                                  ;[ORG 100h]
  9432                                  
  9433                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0100h
  9434                                  
  9435                                  ; ---------------------------------------------------------------------------
  9436                                  		
  9437                                  		; 31/01/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9438                                  		; (TRANGROUP:0100h)
  9439                                  SETDRV:
  9440 00000100 B40E                    	mov	ah,0Eh
  9441                                  	;mov	ah,SET_DEFAULT_DRIVE ; 0Eh
  9442 00000102 CD21                    	int	21h	; DOS -	SELECT DISK
  9443                                  			; DL = new default drive number
  9444                                  			;		(0 = A, 1 = B, ..)
  9445                                  			; Return: AL = number of logical drives
  9446                                  
  9447                                  ; ---------------------------------------------------------------------------
  9448                                  
  9449                                  ; TCOMMAND is the recycle point in COMMAND. Nothing is known here.
  9450                                  ; No registers (CS:IP) no flags, nothing.
  9451                                  
  9452                                  TCOMMAND:
  9453 00000104 2E8E1E[C58A]            	mov	ds,[cs:RESSEG]
  9454 00000109 B8FFFF                  	mov	ax,-1
  9455 0000010C 8706[9001]              	xchg	ax,[VerVal]
  9456 00000110 83F8FF                  	cmp	ax,-1
  9457 00000113 7404                    	je	short NOSETVER2
  9458 00000115 B42E                    	mov	ah,2Eh
  9459                                  	;mov	ah,SET_VERIFY_ON_WRITE ; 2Eh
  9460 00000117 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
  9461                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
  9462                                  NOSETVER2:
  9463 00000119 2EFF1E[C38A]            	call	far [cs:HEADCALL]   ; Make sure header fixed
  9464 0000011E 31ED                    	xor	bp,bp		    ; Flag transient not read
  9465 00000120 833E[8E01]FF            	cmp	word [SingleCom],-1
  9466 00000125 7505                    	jne	short COMMAND
  9467                                  _$EXITPREP:
  9468 00000127 0E                      	push	cs
  9469 00000128 1F                      	pop	ds
  9470 00000129 E92220                  	jmp	_$EXIT		; Have finished the single command
  9471                                  
  9472                                  ; ---------------------------------------------------------------------------
  9473                                  ;
  9474                                  ; Main entry point from resident portion.
  9475                                  ;
  9476                                  ;   If BP <> 0, then we have just loaded transient portion otherwise we are
  9477                                  ;   just beginning the processing of another command.
  9478                                  ;
  9479                                  ; ---------------------------------------------------------------------------
  9480                                  
  9481                                  ; We are not always sure of the state of the world at this time. We presume
  9482                                  ; worst case and initialize the relevant registers: segments and stack.
  9483                                  
  9484                                  COMMAND:
  9485 0000012C FC                      	cld
  9486 0000012D 8CC8                    	mov	ax,cs
  9487 0000012F FA                      	cli
  9488 00000130 8ED0                    	mov	ss,ax
  9489                                  	;mov	sp,offset TRANGROUP:STACK
  9490                                  				; 07/06/2023
  9491 00000132 BC[A395]                	mov	sp,STACK	; 09854h for MSDOS 5.0 COMMAND.COM
  9492                                  				; 0AF24h for MSDOS 6.22 COMMAND.COM
  9493 00000135 FB                      	sti
  9494                                  		
  9495 00000136 8EC0                    	mov	es,ax
  9496                                  		
  9497                                  	; MSDOS 6.0
  9498 00000138 8ED8                    	mov	ds,ax		;AN000; set DS to transient
  9499                                  	;ASSUME	ES:TRANGROUP,DS:TRANGROUP ;AC000;
  9500                                  	;invoke	TSYSLOADMSG	;AN000; preload messages
  9501                                  	; 31/01/2023
  9502 0000013A E8914D                  	call	TSYSLOADMSG
  9503 0000013D C606[3A8E]00            	mov	byte [append_exec],0 ;AN041; set internal append state off
  9504                                  
  9505                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9506                                  	;mov	ds,[ss:RESSEG]
  9507                                  	; 31/01/2023
  9508 00000142 8E1E[C58A]              	mov	ds,[RESSEG]
  9509 00000146 36C606[A188]80          	mov	byte [ss:UCOMBUF],128 ; Init UCOMBUF	
  9510 0000014C 36C606[2489]80          	mov	byte [ss:COMBUF],128  ; Init COMBUF (Autoexec doing DATE)
  9511                                  
  9512                                  ; If we have just loaded the transient, then we do NOT need to initialize the
  9513                                  ; command buffer. ????  DO WE NEED TO RESTORE THE USERS DIRECTORY ????
  9514                                  ; I guess not: the only circumstances in which we reload the command processor
  9515                                  ; is after a transient program execution. In this case, we let the current
  9516                                  ; directory lie where it may.
  9517                                  
  9518 00000152 09ED                    	or	bp,bp		; See if just read
  9519 00000154 7409                    	jz	short TESTRDIR	; Not read, check user directory
  9520 00000156 36C706[A288]010D        	mov	word [ss:UCOMBUF+1],0D01h ; Reset buffer
  9521 0000015D EB17                    	jmp	short NOSETBUF
  9522                                  TESTRDIR:
  9523 0000015F 803E[8C01]00            	cmp	byte [RestDir],0
  9524 00000164 7410                    	jz	short NOSETBUF	; User directory OK
  9525 00000166 1E                      	push	ds
  9526                                  
  9527                                  ; We have an unusual situation to handle. The user *may* have changed his
  9528                                  ; directory as a result of an internal command that got aborted. Restoring it
  9529                                  ; twice may not help us: the problem may never go away. We just attempt it
  9530                                  ; once and give up.
  9531                                  
  9532 00000167 C606[8C01]00            	mov	byte [RestDir],0 ; Flag users dirs OK
  9533                                  
  9534                                  	; Restore users directory
  9535 0000016C 0E                      	push	cs
  9536 0000016D 1F                      	pop	ds
  9537 0000016E BA[A789]                	mov	dx,USERDIR1
  9538 00000171 B43B                    	mov	ah,3Bh
  9539                                  	;mov	ah,CHDir ; 3Bh
  9540 00000173 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
  9541                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
  9542 00000175 1F                      	pop	ds
  9543                                  NOSETBUF:
  9544 00000176 803E[0102]00            	cmp	byte [PipeFiles],0
  9545 0000017B 740A                    	jz	short NOPCLOSE	; Don't bother if they don't exist
  9546 0000017D 803E[0002]00            	cmp	byte [PipeFlag],0
  9547 00000182 7503                    	jnz	short NOPCLOSE	; Don't del if still piping
  9548 00000184 E86A2B                  	call	PIPEDEL
  9549                                  NOPCLOSE:
  9550                                  	;mov	byte [0BE9h],0	; MSDOS 3.3
  9551                                  	; 31/01/2023
  9552 00000187 C606[8401]00            	mov	byte [ExtCom],0 ; Flag internal command
  9553 0000018C 8CC8                    	mov	ax,cs		; Get segment we're in
  9554 0000018E 8ED8                    	mov	ds,ax
  9555 00000190 50                      	push	ax
  9556                                  			; 07/06/2023 (INTERNATVARS addr = STACK addr)
  9557 00000191 BA[A395]                	mov	dx,INTERNATVARS ; 09854h for MSDOS 5.0 COMMAND.COM
  9558                                  				; 0AF24h for MSDOS 6.22 COMMAND.COM
  9559 00000194 B80038                  	mov	ax,3800h
  9560                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
  9561 00000197 CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
  9562                                  			; get current-country info
  9563                                  			; DS:DX	-> buffer for returned info
  9564 00000199 58                      	pop	ax
  9565 0000019A 2B06[C78A]              	sub	ax,[TPA]	; AX=size of TPA in paragraphs
  9566 0000019E 53                      	push	bx
  9567 0000019F BB1000                  	mov	bx,16
  9568 000001A2 F7E3                    	mul	bx		; DX:AX=size of TPA in bytes
  9569 000001A4 5B                      	pop	bx
  9570 000001A5 09D2                    	or	dx,dx		; See if over 64K
  9571 000001A7 7403                    	jz	short SAVSIZ	; OK if not
  9572 000001A9 B8FFFF                  	mov	ax,-1		; If so, limit to 65535 bytes
  9573                                  SAVSIZ:
  9574                                  
  9575                                  ; AX is the number of bytes free in the buffer between the resident and the
  9576                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
  9577                                  
  9578 000001AC 3D0002                  	cmp	ax,512
  9579 000001AF 7603                    	jbe	short GOTSIZE
  9580                                  	;and	ax,~1FFh
  9581 000001B1 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FF
  9582                                  GOTSIZE:
  9583 000001B4 A3[E68A]                	mov	[BYTCNT],ax	; Max no. of bytes that can be buffered
  9584 000001B7 8E1E[C58A]              	mov	ds,[RESSEG]	; All batch work must use resident seg.
  9585                                  
  9586 000001BB F606[8801]01            	test	byte [EchoFlag],1 
  9587 000001C0 741E                    	jz	short GETCOM	; Don't do the CRLF
  9588 000001C2 E80B2B                  	call	SINGLETEST
  9589 000001C5 7219                    	jb	short GETCOM
  9590 000001C7 F606[0002]FF            	test	byte [PipeFlag],0FFh ; -1
  9591 000001CC 7512                    	jnz	short GETCOM
  9592                                  				; G  Don't print prompt in FOR
  9593 000001CE F606[9401]FF            	test	byte [ForFlag],0FFh ; -1
  9594 000001D3 750B                    	jnz	short GETCOM
  9595                                  				; G  Don't print prompt if in batch
  9596 000001D5 F706[3401]FFFF          	test	word [Batch],0FFFFh ; -1
  9597 000001DB 7503                    	jnz	short GETCOM
  9598 000001DD E8F323                  	call	CRLF2
  9599                                  GETCOM:
  9600 000001E0 C606[9901]00            	mov	byte [Call_Flag],0 ; G Reset call flags
  9601 000001E5 C606[9A01]00            	mov	byte [Call_Batch_Flag],0
  9602 000001EA B419                    	mov	ah,19h
  9603                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
  9604 000001EC CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
  9605 000001EE 36A2[D98A]              	mov	[ss:CURDRV],al
  9606 000001F2 F606[0002]FF            	test	byte [PipeFlag],0FFh ; -1 ; Pipe has highest presedence
  9607 000001F7 7403                    	jz	short NOPIPE
  9608 000001F9 E9C02B                  	jmp	PIPEPROC	; Continue the pipeline
  9609                                  NOPIPE:
  9610 000001FC F606[8801]01            	test	byte [EchoFlag],1
  9611 00000201 7417                    	jz	short NOPDRV	; No prompt if echo off
  9612 00000203 E8CA2A                  	call	SINGLETEST
  9613 00000206 7212                    	jb	short NOPDRV
  9614 00000208 F606[9401]FF            	test	byte [ForFlag],0FFh ; G  Don't print prompt in FOR	
  9615 0000020D 750B                    	jnz	short NOPDRV
  9616 0000020F F706[3401]FFFF          	test	word [Batch],0FFFFh ; G  Don't print prompt if in batch
  9617 00000215 750D                    	jnz	short TESTFORBAT
  9618 00000217 E87B1B                  	call	PRINT_PROMPT	; Prompt the user
  9619                                  NOPDRV:
  9620 0000021A F606[9401]FF            	test	byte [ForFlag],0FFh ; FOR has next highest precedence
  9621 0000021F 7403                    	jz	short TESTFORBAT
  9622 00000221 E9B70B                  	jmp	FORPROC		; Continue the FOR
  9623                                  
  9624                                  TESTFORBAT:
  9625 00000224 36C606[708A]00          	mov	byte [ss:RE_INSTR],0 ; Turn redirection back off	
  9626 0000022A C606[AF01]00            	mov	byte [Re_OutStr],0  ; [0C09h] for MSDOS 3.3 
  9627 0000022F C606[AE01]00            	mov	byte [Re_Out_App],0 ; [0C08h] for MSDOS 3.3
  9628 00000234 C606[9301]00            	mov	byte [IfFlag],0	; no more ifs...
  9629 00000239 F706[3401]FFFF          	test	word [Batch],0FFFFh ; Batch has lowest precedence
  9630 0000023F 7441                    	jz	short ISNOBAT
  9631                                  
  9632                                  	; 31/01/2023
  9633                                  
  9634                                  	; MSDOS 6.0
  9635                                  
  9636                                  ;	Bugbug:	MULT_SHELL_GET no longer used?
  9637                                  
  9638 00000241 06                      	push	es			;AN000; save ES
  9639 00000242 1E                      	push	ds			;AN000; save DS
  9640                                  	;mov	ax,mult_shell_get	;AN000; check to see if SHELL has command
  9641                                  	; 05/02/2023
  9642 00000243 B80219                  	mov	ax,1902h
  9643 00000246 8E06[3401]              	mov	es,[Batch]		;AN000; get batch segment
  9644                                  	;mov	di,20h
  9645 0000024A BF2000                  	mov	di,BATCHSEGMENT.BatFile	;AN000; get batch file name
  9646 0000024D 0E                      	push	cs			;AN000; get local segment to DS
  9647 0000024E 1F                      	pop	ds			;AN000;
  9648                                  	;mov	dx,offset trangroup:combuf ;AN000; pass communications buffer
  9649 0000024F BA[2489]                	mov	dx,COMBUF
  9650 00000252 CD2F                    	int	2Fh			;AN000; call the shell
  9651                                  		; - Multiplex - DOS 4.x only SHELLB.COM - COMMAND.COM INTERFACE
  9652                                  		; ES:DI -> ASCIZ full filename of current batch file, with at least the
  9653                                  		; final filename element uppercased
  9654                                  		; DS:DX -> buffer for results
  9655                                  	;cmp	al,0FFh
  9656 00000254 3CFF                    	cmp	al,shell_action 	;AN000; does shell have a commmand?
  9657 00000256 1F                      	pop	ds			;AN000; restore DS
  9658 00000257 07                      	pop	es			;AN000; restore ES
  9659 00000258 7424                    	jz	short JDOCOM1		;AN000; yes - go process command
  9660                                  
  9661                                  	; MSDOS 3.3 (& MSDOS 6.0)
  9662 0000025A 1E                      	push	ds
  9663 0000025B E81603                  	call	READBAT			; Continue BATCH
  9664 0000025E 1F                      	pop	ds
  9665 0000025F C606[9D01]00            	mov	byte [NullFlag],0	;G reset no command flag
  9666 00000264 F706[3401]FFFF          	test	word [Batch],0FFFFh
  9667 0000026A 7512                    	jnz	short JDOCOM1		;G if batch still in progress continue
  9668 0000026C 8B1E[9B01]              	mov	bx,[Next_Batch]
  9669                                  	; 31/01/2023
  9670 00000270 09DB                    	or	bx,bx
  9671                                  	;cmp	bx,0			;G see if there is a new batch file
  9672 00000272 740A                    	jz	short JDOCOM1		;G no - go do command
  9673 00000274 891E[3401]              	mov	[Batch],bx		;G get segment of next batch file
  9674 00000278 C706[9B01]0000          	mov	word [Next_Batch],0	;G reset next batch
  9675                                  JDOCOM1:
  9676 0000027E 0E                      	push	cs
  9677 0000027F 1F                      	pop	ds
  9678 00000280 EB55                    	jmp	short DOCOM1
  9679                                  ISNOBAT:
  9680 00000282 833E[8E01]00            	cmp	word [SingleCom],0
  9681 00000287 741C                    	jz	short REGCOM
  9682                                  	;mov	si,[SEMIPERMCOM] ;  MSDOS 6.0
  9683 00000289 BEFFFF                  	mov	si,0FFFFh 	 ;  MSDOS 3.3 & MSDOS 5.0
  9684 0000028C 8736[8E01]              	xchg	si,[SingleCom]
  9685 00000290 BF[2689]                	mov	di,COMBUF+2
  9686 00000293 31C9                    	xor	cx,cx
  9687                                  SINGLELOOP:
  9688 00000295 AC                      	lodsb
  9689 00000296 AA                      	stosb
  9690 00000297 41                      	inc	cx
  9691 00000298 3C0D                    	cmp	al,0Dh
  9692 0000029A 75F9                    	jnz	short SINGLELOOP
  9693 0000029C 49                      	dec	cx
  9694 0000029D 0E                      	push	cs
  9695 0000029E 1F                      	pop	ds
  9696 0000029F 880E[2589]              	mov	[COMBUF+1],cl
  9697                                  
  9698                                  ; do NOT issue a trailing CRLF...
  9699                                  
  9700 000002A3 EB32                    	jmp	short DOCOM1
  9701                                  
  9702                                  	;nop
  9703                                  
  9704                                  	; 31/01/2023 - Retro DOS v4.0 COMMAND.COM
  9705                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:02A6h
  9706                                  
  9707                                  ; We have a normal command.  
  9708                                  ; Printers are a bizarre quantity. Sometimes they are a stream and
  9709                                  ; sometimes they aren't. At this point, we automatically close all spool
  9710                                  ; files and turn on truncation mode.
  9711                                  
  9712                                  REGCOM:
  9713                                  	;mov	ax,(ServerCall shl 8) + 9
  9714                                  	; 31/01/2023
  9715 000002A5 B8095D                  	mov	ax,5D09h
  9716                                  	;mov	ax,(SERVERCALL<<8)+9
  9717 000002A8 CD21                    	int	21h	; DOS -	3.1+ internal -	FLUSH REDIRECTED PRINTER OUTPUT
  9718                                  	;mov	ax,(ServerCall shl 8) + 8
  9719 000002AA B8085D                  	mov	ax,5D08h
  9720                                  	;mov	ax,(SERVERCALL<<8)+8
  9721 000002AD B201                    	mov	dl,1
  9722 000002AF CD21                    	int	21h	; DOS -	3.1+ internal -	SET REDIRECTED PRINTER MODE
  9723                                  			; DL = 00h redirected output is	combined
  9724                                  			;      01h redirected output placed in separate	jobs
  9725                                  			; start	new print job now
  9726 000002B1 0E                      	push	cs
  9727 000002B2 1F                      	pop	ds	; Need local segment to point to buffer
  9728 000002B3 BA[A188]                	mov	dx,UCOMBUF
  9729                                  
  9730                                  	; MSDOS 6.0
  9731                                  ;	Try to read interactive command line via DOSKey.
  9732                                  ;	If that fails, use DOS Buffered Keyboard Input.
  9733                                  
  9734                                  	; 31/01/2023
  9735 000002B6 B81048                  	mov	ax,4810h	; AX = DOSKey Read Line function
  9736 000002B9 CD2F                    	int	2Fh
  9737 000002BB 09C0                    	or	ax,ax
  9738 000002BD 7404                    	jz	short GOTCOM	; DOSKey gave us a command line
  9739                                  
  9740 000002BF B40A                    	mov	ah,0Ah
  9741                                  	;mov	ah,Std_Con_String_Input	; AH = DOS Buffered Keyboard Input
  9742 000002C1 CD21                    	int	21h	; DOS -	BUFFERED KEYBOARD INPUT
  9743                                  			; DS:DX	-> buffer
  9744                                  GOTCOM:
  9745 000002C3 8A0E[A188]              	mov	cl,[UCOMBUF]
  9746 000002C7 30ED                    	xor	ch,ch
  9747 000002C9 83C103                  	add	cx,3
  9748 000002CC BE[A188]                	mov	si,UCOMBUF
  9749 000002CF BF[2489]                	mov	di,COMBUF
  9750 000002D2 F3A4                    	rep	movsb		; Transfer it to the cooked buffer
  9751                                  DOCOM:
  9752 000002D4 E8FC22                  	call	CRLF2
  9753                                  DOCOM1:
  9754 000002D7 E88026                  	call	PRESCAN		; Cook the input buffer
  9755 000002DA 7406                    	jz	short NOPIPEPROC
  9756 000002DC E95C2A                  	jmp	PIPEPROCSTRT	; Fire up the pipe
  9757                                  
  9758                                  NULLCOMJ:
  9759 000002DF E9FA00                  	jmp	NULLCOM
  9760                                  
  9761                                  NOPIPEPROC:
  9762 000002E2 E8542D                  	call	PARSELINE
  9763 000002E5 730B                    	jnb	short OKPARSE	; user error? or maybe we goofed?
  9764                                  BADPARSE:
  9765 000002E7 0E                      	push	cs
  9766 000002E8 1F                      	pop	ds
  9767 000002E9 BA[3E7F]                	mov	dx,BADNAM_PTR	; 31/01/2023
  9768 000002EC E8F84A                  	call	std_eprintf
  9769 000002EF E912FE                  	jmp	TCOMMAND
  9770                                  
  9771                                  OKPARSE:
  9772                                  	;test	byte [ARGV0_ARG_FLAGS],2
  9773                                  	;test	byte [ARG+ARGV_ELE.argflags],2 ; wildcard
  9774                                  	; 01/02/2023
  9775 000002F2 F606[568E]02            	test	byte [ARG+ARGV_ELE.argflags],2
  9776 000002F7 75EE                    	jnz	short BADPARSE	; ambiguous commands not allowed
  9777                                  	;cmp	word [ARG_ARGVCNT],0  ; there WAS a command, wasn't there?
  9778 000002F9 833E[1491]00            	cmp	word [ARG+ARG_UNIT.argvcnt],0
  9779 000002FE 74DF                    	jz	short NULLCOMJ
  9780                                  	;cmp	word [ARGV0_ARGLEN],0 ; probably an unnecessary check...
  9781 00000300 833E[598E]00            	cmp	word [ARG+ARGV_ELE.arglen],0
  9782 00000305 74D8                    	jz	short NULLCOMJ	; guarantees argv[0] at least x<NULL>
  9783                                  
  9784 00000307 BE[2689]                	mov	si,COMBUF+2
  9785 0000030A BF[4F8B]                	mov	di,IDLEN
  9786                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9787                                  				; Make FCB with blank scan-off
  9788                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9789 0000030D B80129                  	mov	ax,2901h
  9790 00000310 CD21                    	int	21h	; DOS -	PARSE FILENAME
  9791                                  			; DS:SI	-> string to parse
  9792                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9793                                  			; AL = bit mask	to control parsing
  9794                                  	;mov	bx,[ARG_ARGV]
  9795 00000312 8B1E[548E]              	mov	bx,[ARG+ARG_UNIT.argv] ; mov bx,[ARG]
  9796 00000316 807F013A                	cmp	byte [bx+1],':'	; was a drive specified?
  9797 0000031A 751B                    	jne	short DRVGD	; no, use default of zero...
  9798 0000031C 8A17                    	mov	dl,[bx]		; pick-up drive letter
  9799                                  	;mov	dl,[bx+ARGV_ELE.argpointer] ; mov dl,[bx+0]
  9800                                  	;and	dl,~20h
  9801 0000031E 80E2DF                  	and	dl,0DFh		; uppercase the sucker
  9802                                  	;sub	dl,[CAPITAL_A]	; convert it to a drive number, A=0
  9803                                  	; 31/01/2023
  9804 00000321 80EA41                  	sub	dl,'A'
  9805 00000324 3CFF                    	cmp	al,-1		; See what PARSE said about our drive letter.
  9806 00000326 740C                    	je	short DRVBADJ	; It was invalid.
  9807                                  	;mov	di,[ARGV0_ARGSTARTEL]
  9808 00000328 8B3E[578E]              	mov	di,[ARG+ARGV_ELE.argstartel]
  9809 0000032C 803D00                  	cmp	byte [di],0	; is there actually a command there?
  9810 0000032F 7506                    	jne	short DRVGD	; if not, we have:  "d:", "d:\", "d:/"
  9811 00000331 E9CCFD                  	jmp	SETDRV		; and set drive to new drive spec
  9812                                  DRVBADJ:
  9813 00000334 E92525                  	jmp	DRVBAD
  9814                                  DRVGD:
  9815 00000337 8A05                    	mov	al,[di]
  9816 00000339 A2[E58A]                	mov	[SPECDRV],al
  9817 0000033C B020                    	mov	al,' '
  9818 0000033E B90900                  	mov	cx,9
  9819 00000341 47                      	inc	di
  9820 00000342 F2AE                    	repne	scasb		; Count number of letters in command name
  9821 00000344 B008                    	mov	al,8
  9822 00000346 28C8                    	sub	al,cl
  9823 00000348 A2[4F8B]                	mov	[IDLEN],al	; IDLEN is truly the length
  9824 0000034B BF8100                  	mov	di,81h
  9825 0000034E 56                      	push	si
  9826 0000034F BE[2689]                	mov	si,COMBUF+2	; Skip over all leading delims
  9827 00000352 E88B22                  	call	scanoff
  9828                                  
  9829                                  	; 01/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
  9830                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0356h
  9831                                  
  9832                                  	; MSDOS 6.0
  9833                                  ;SR;
  9834                                  ; We are going to skip over the first char always. The logic is that the
  9835                                  ;command tail can never start from the first character. The code below is 
  9836                                  ;trying to figure out the command tail and copy it to the command line 
  9837                                  ;buffer in the PSP. However, if the first character happens to be a switch
  9838                                  ;character and the user given command line is a full 128 bytes, we try to
  9839                                  ;copy 128 bytes to the PSP while it can take only 127 chars. This extra
  9840                                  ;char overwrites the code and leads to a crash on future commands.
  9841                                  
  9842 00000355 46                      	inc	si ;  MSDOS 6.0
  9843                                  DO_SKIPCOM:
  9844 00000356 AC                      	lodsb			; move command line pointer over
  9845 00000357 E88E22                  	call	DELIM		; pathname -- have to do it ourselves
  9846 0000035A 740A                    	jz	short DO_SKIPPED ; 'cause parse_file_descriptor is dumb
  9847 0000035C 3C0D                    	cmp	al,0Dh		; can't always depend on argv[0].arglen
  9848 0000035E 7406                    	jz	short DO_SKIPPED ; to be the same length as the user-
  9849 00000360 3A06[C98A]              	cmp	al,[SWITCHAR]	; specified command string
  9850 00000364 75F0                    	jnz	short DO_SKIPCOM 
  9851                                  DO_SKIPPED:
  9852 00000366 4E                      	dec	si
  9853 00000367 31C9                    	xor	cx,cx
  9854                                  COMTAIL:
  9855 00000369 AC                      	lodsb
  9856 0000036A AA                      	stosb			; Move command tail to 80h
  9857 0000036B 3C0D                    	cmp	al,0Dh
  9858 0000036D E0FA                    	loopne	COMTAIL
  9859 0000036F 4F                      	dec	di
  9860 00000370 89FD                    	mov	bp,di
  9861 00000372 F6D1                    	not	cl
  9862 00000374 880E8000                	mov	[80h],cl
  9863 00000378 5E                      	pop	si
  9864                                  ;-----
  9865                                  ; Some of these comments are sadly at odds with this brave new code.
  9866                                  ;-----
  9867                                  ; If the command has 0 parameters must check here for
  9868                                  ; any switches that might be present.
  9869                                  ; SI -> first character after the command.
  9870                                  
  9871                                  	;mov	di,arg.argv[0].argsw_word
  9872                                  	;mov	di,[ARGV0_ARGSW_WORD]
  9873 00000379 8B3E[5B8E]              	mov	di,[ARG+ARGV_ELE.argsw_word]
  9874 0000037D 893E[DC8A]              	mov	[COMSW],di	; ah yes, the old addressing mode problem...
  9875                                  	;mov	SI,arg.argv[1 * SIZE argv_ele].argpointer  
  9876                                  				; s = argv[1];
  9877                                  	;mov	si,[ARGV1_ARGPOINTER]
  9878 00000381 8B36[5F8E]              	mov	si,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argpointer]
  9879 00000385 09F6                    	or	si,si		;   if (s == NULL)
  9880 00000387 7502                    	jnz	short DOPARSE	;	s = bp; (buffer end)
  9881 00000389 89EE                    	mov	si,bp
  9882                                  DOPARSE:
  9883 0000038B BF5C00                  	mov	di,FCB ; 5Ch
  9884                                  	;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9885                                  	; 01/02/2023
  9886 0000038E B80129                  	mov	ax,2901h
  9887                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9888 00000391 CD21                    	int	21h	; DOS -	PARSE FILENAME
  9889                                  			; DS:SI	-> string to parse
  9890                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9891                                  			; AL = bit mask	to control parsing
  9892 00000393 A2[DA8A]                	mov	[PARM1],al	; Save result of parse
  9893                                  	;mov	di,arg.argv[1*SIZE argv_ele].argsw_word
  9894                                  	;mov	di,[ARGV1_ARGSW_WORD]
  9895 00000396 8B3E[668E]              	mov	di,[ARG+ARGV_ELE.SIZE+ARGV_ELE.argsw_word]
  9896 0000039A 893E[DE8A]              	mov	[ARG1S],di
  9897                                  	;mov	si,arg.argv[2*SIZE argv_ele].argpointer    
  9898                                  				; s = argv[2];
  9899                                  	;mov	si,[ARGV2_ARGPOINTER]
  9900 0000039E 8B36[6A8E]              	mov	si,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argpointer]
  9901 000003A2 09F6                    	or	si,si		; if (s == NULL)
  9902 000003A4 7502                    	jnz	short DOPARSE2
  9903 000003A6 89EE                    	mov	si,bp		;     s = bp; (buffer end)
  9904                                  DOPARSE2:			
  9905 000003A8 BF6C00                  	mov	di,FCB+10h ; 6Ch
  9906                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 01h
  9907 000003AB B80129                  	mov	ax,2901h
  9908                                  	;mov	ax,(Parse_File_Descriptor<<8)|01h
  9909 000003AE CD21                    	int	21h	; DOS -	PARSE FILENAME
  9910                                  			; DS:SI	-> string to parse
  9911                                  			; ES:DI	-> buffer to fill with unopened	FCB
  9912                                  			; AL = bit mask	to control parsing
  9913 000003B0 A2[DB8A]                	mov	[PARM2],al	; Save result
  9914                                  	;mov	di,[ARGV2_ARGSW_WORD]
  9915                                  	;mov	di,arg.argv[2*SIZE argv_ele].argsw_word
  9916 000003B3 8B3E[718E]              	mov	di,[ARG+(2*ARGV_ELE.SIZE)+ARGV_ELE.argsw_word]
  9917 000003B7 893E[E08A]              	mov	[ARG2S],di
  9918                                  	;mov	di,[ARGV0_ARGSW_WORD]
  9919                                  	;mov	di,arg.argv[0].argsw_word
  9920 000003BB 8B3E[5B8E]              	mov	di,[ARG+ARGV_ELE.argsw_word]
  9921 000003BF F7D7                    	not	di		; ARGTS doesn't include the flags
  9922                                  	;and	di,[ARG_ARGSWINFO] ; from COMSW...
  9923                                  	;and	di,arg.argswinfo	
  9924 000003C1 233E[1691]              	and	di,[ARG+ARG_UNIT.argswinfo]
  9925 000003C5 893E[E28A]              	mov	[ARGTS],di
  9926                                  
  9927 000003C9 A0[4F8B]                	mov	al,[IDLEN]
  9928 000003CC 8A16[E58A]              	mov	dl,[SPECDRV]
  9929 000003D0 08D2                    	or	dl,dl		; if a drive was specified...
  9930 000003D2 7505                    	jnz	short EXTERNALJ1 ; it MUST be external, by this time
  9931 000003D4 FEC8                    	dec	al		; (I don't know why -- old code did it)
  9932 000003D6 E9D623                  	jmp	FNDCOM		; otherwise, check internal com table
  9933                                  EXTERNALJ1:
  9934 000003D9 E9D824                  	jmp	EXTERNAL
  9935                                  NULLCOM:
  9936 000003DC 8E1E[C58A]              	mov	ds,[RESSEG]
  9937 000003E0 F706[3401]FFFF          	test	word [Batch],0FFFFh ; -1 ;G Are we in a batch file?
  9938 000003E6 7405                    	jz	short NOSETFLAG	  ;G only set flag if in batch
  9939 000003E8 C606[9D01]01            	mov	byte [NullFlag],1 ;G set flag to indicate no command
  9940                                  	;mov	byte [NullFlag],nullcommand ; 1
  9941                                  NOSETFLAG:
  9942 000003ED 833E[8E01]FF            	cmp	word [SingleCom],0FFFFh ; -1
  9943 000003F2 7403                    	je	short EXITJ
  9944 000003F4 E9E9FD                  	jmp	GETCOM
  9945                                  EXITJ:
  9946 000003F7 E92DFD                  	jmp	_$EXITPREP
  9947                                  
  9948                                  ;============================================================================
  9949                                  ; MSHALO.ASM, MSDOS 6.0, 1991
  9950                                  ;============================================================================
  9951                                  ; 12/10/2018 - Retro DOS v3.0
  9952                                  
  9953                                  ; 05/02/2023 - Retro DOS v5.0 (& v4.1) COMMAND.COM
  9954                                  
  9955                                  ;	SCCSID = @(#)ibmhalo.asm	1.1 85/04/10
  9956                                  ;   On 2K (800h) boundaries beginning at address C0000h and ending at EF800h
  9957                                  ;   there is a header that describes a block of rom program.  This header
  9958                                  ;   contains information needed to initialize a module and to provide PCDOS
  9959                                  ;   with a set of reserved names for execution.
  9960                                  ;
  9961                                  ;   This header has the following format:
  9962                                  ;
  9963                                  ;   rom_header	STRUC
  9964                                  ;	Signature1  DB	55h
  9965                                  ;	Signature2  DB	AAh
  9966                                  ;	rom_length  DB	?		; number of 512 byte pieces
  9967                                  ;	init_jmp    DB	3 dup (?)
  9968                                  ;	name_list   name_struc <>
  9969                                  ;   rom_header	ENDS
  9970                                  ;
  9971                                  ;   name_struc	STRUC
  9972                                  ;	name_len    DB	?
  9973                                  ;	name_text   DB	? DUP (?)
  9974                                  ;	name_jmp    DB	3 DUP (?)
  9975                                  ;   name_struc	ENDS
  9976                                  ;
  9977                                  ;   The name list is a list of names that are reserved by a particular section
  9978                                  ;   of a module.  This list of names is terminated by a null name (length
  9979                                  ;   is zero).
  9980                                  ;
  9981                                  ;   Consider now, the PCDOS action when a user enters a command:
  9982                                  ;
  9983                                  ;	COMMAND.COM has control.
  9984                                  ;	o   If location FFFFEh has FDh then
  9985                                  ;	o	Start scanning at C0000h, every 800h for a byte 55h followed
  9986                                  ;		    by AAh, stop scan if we get above or = F0000H
  9987                                  ;	o	When we've found one, compare the name entered by the user
  9988                                  ;		    with the one found in the rom.  If we have a match, then
  9989                                  ;		    set up the environment for execution and do a long jump
  9990                                  ;		    to the near jump after the found name.
  9991                                  ;	o	If no more names in the list, then continue scanning the module
  9992                                  ;		    for more 55h followed by AAh.
  9993                                  ;	o   We get to this point only if there is no matching name in the
  9994                                  ;		rom.  We now look on disk for the command.
  9995                                  ;
  9996                                  ;   This gives us the flexibility to execute any rom cartridge without having
  9997                                  ;   to 'hard-code' the name of the cartridge into PCDOS.  Rom modules that
  9998                                  ;   want to be invisible to the DOS should not have any names in their lists
  9999                                  ;   (i.e. they have a single null name).
 10000                                  ;
 10001                                  ;   Consider a new release of BASIC, say, that patches bugs in the ROM version.
 10002                                  ;   Clearly this version will be available on disk.  How does a user actually
 10003                                  ;   invoke this new BASIC??  He cannot call it BASIC on the disk because the
 10004                                  ;   EXEC loader will execute the ROM before it even looks at the disk!	Only
 10005                                  ;   solution:
 10006                                  ;
 10007                                  ;   o	Keep things consistent and force the user to have his software named
 10008                                  ;	differently from the ROM names (BASIC1, BASIC2, etc).
 10009                                  
 10010                                  struc ROM_HEADER
 10011 00000000 ??                          .signature1: resb 1
 10012 00000001 ??                          .signature2: resb 1
 10013 00000002 ??                          .rom_length: resb 1
 10014 00000003 ??????                      .init_jmp:	 resb 3
 10015 00000006 ??                          .name_list:	 resb 1
 10016                                      .size:
 10017                                  endstruc
 10018                                  
 10019                                  struc NAME_STRUC
 10020 00000000 ??                          .name_len:	resb 1
 10021 00000001 ??                          .name_text:	resb 1
 10022 00000002 ??????                      .name_jmp:	resb 3
 10023                                      .size:	
 10024                                  endstruc
 10025                                  
 10026                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 03D1h
 10027                                  
 10028                                  ; =============== S U B	R O U T	I N E =======================================
 10029                                  
 10030                                  ;ASSUME	CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
 10031                                  
 10032                                  ; 05/02/2023
 10033                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:03FBh
 10034                                  
 10035                                  ; Check for IBM PC Jr rom cartrides. DS:DX is a pointer to name
 10036                                  
 10037                                  ROM_SCAN:
 10038 000003FA 06                      	push	es
 10039 000003FB 56                      	push	si
 10040 000003FC 57                      	push	di
 10041 000003FD 51                      	push	cx
 10042 000003FE 50                      	push	ax
 10043 000003FF 53                      	push	bx
 10044                                  
 10045                                  	; check for PC Jr signature in rom
 10046                                  
 10047 00000400 B800F0                  	mov	ax,0F000h
 10048 00000403 8EC0                    	mov	es,ax
 10049 00000405 26803EFEFFFD            	cmp	byte [es:0FFFEh],0FDh
 10050 0000040B 7408                    	je	short SCAN_IT
 10051                                  NO_ROM:
 10052 0000040D F8                      	clc
 10053                                  ROM_RET:
 10054 0000040E 5B                      	pop	bx
 10055 0000040F 58                      	pop	ax
 10056 00000410 59                      	pop	cx
 10057 00000411 5F                      	pop	di
 10058 00000412 5E                      	pop	si
 10059 00000413 07                      	pop	es
 10060 00000414 C3                      	retn
 10061                                  
 10062                                  	; start scanning at C000h
 10063                                  SCAN_IT:
 10064 00000415 B800C0                  	mov	ax,0C000h
 10065                                  SCAN_ONE:
 10066 00000418 8EC0                    	mov	es,ax
 10067 0000041A 31FF                    	xor	di,di
 10068                                  
 10069                                  	; check for a valid header
 10070                                  SCAN_MODULE:
 10071 0000041C 26813D55AA              	cmp	word [es:di],0AA55h
 10072 00000421 740A                    	je	short SCAN_LIST
 10073 00000423 058000                  	add	ax,80h
 10074                                  SCAN_END:
 10075 00000426 3D00F0                  	cmp	ax,0F000h
 10076 00000429 72ED                    	jb	short SCAN_ONE
 10077 0000042B EBE0                    	jmp	short NO_ROM
 10078                                  
 10079                                  	; trundle down list of names
 10080                                  SCAN_LIST:
 10081                                  	;mov	bl,[es:di+2]	; number of 512-byte jobbers
 10082 0000042D 268A5D02                	mov	bl,[es:di+ROM_HEADER.rom_length]
 10083 00000431 30FF                    	xor	bh,bh		; nothing in the high byte
 10084 00000433 D1E3                    	shl	bx,1
 10085 00000435 D1E3                    	shl	bx,1		; number of paragraphs
 10086 00000437 83C37F                  	add	bx,7Fh
 10087 0000043A 83E380                  	and	bx,0FF80h	; round to 2k	
 10088                                  	;mov	di,6
 10089                                  	; 05/05/2023
 10090 0000043D BF0600                  	mov	di,ROM_HEADER.name_list
 10091                                  	;nop
 10092                                  SCAN_NAME:
 10093 00000440 268A0D                  	mov	cl,[es:di]	; length of name
 10094 00000443 47                      	inc	di		; point to name
 10095 00000444 30ED                    	xor	ch,ch
 10096 00000446 09C9                    	or	cx,cx		; zero length name
 10097 00000448 7504                    	jnz	short SCAN_TEST	; nope... compare
 10098 0000044A 01D8                    	add	ax,bx		; yep, skip to next block
 10099 0000044C EBD8                    	jmp	short SCAN_END
 10100                                  
 10101                                  	; compare a single name
 10102                                  SCAN_TEST:
 10103 0000044E 89D6                    	mov	si,dx
 10104 00000450 46                      	inc	si
 10105 00000451 F3A6                    	repe cmpsb		 ; compare name
 10106 00000453 7407                    	jz	short SCAN_FOUND ; success!
 10107                                  SCAN_NEXT:
 10108 00000455 01CF                    	add	di,cx		; failure, next name piece
 10109 00000457 83C703                  	add	di,3
 10110 0000045A EBE4                    	jmp	short SCAN_NAME
 10111                                  
 10112                                  	; found a name. save entry location
 10113                                  SCAN_FOUND:	
 10114 0000045C 803C3F                  	cmp	byte [si],'?'
 10115 0000045F 7405                    	je	short SCAN_SAVE
 10116 00000461 803C20                  	cmp	byte [si],' '
 10117 00000464 75EF                    	jne	short SCAN_NEXT
 10118                                  SCAN_SAVE:
 10119 00000466 2E8C06[CA8C]            	mov	[cs:ROM_CS],es
 10120 0000046B 2E893E[C88C]            	mov	[cs:ROM_IP],di
 10121 00000470 F9                      	stc
 10122 00000471 EB9B                    	jmp	short ROM_RET
 10123                                  
 10124                                  ; ---------------------------------------------------------------------------
 10125                                  
 10126                                  ; execute a rom-placed body of code. allocate largest block
 10127                                  
 10128                                  ROM_EXEC:
 10129 00000473 BBFFFF                  	mov	bx,0FFFFh
 10130                                  	; 05/02/2023
 10131 00000476 B448                    	mov	ah,48h
 10132                                  	;mov	ah,ALLOC ; 48h
 10133 00000478 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10134                                  			; BX = number of 16-byte paragraphs desired
 10135 0000047A B448                    	mov	ah,48h
 10136                                  	;mov	ah,ALLOC ; 48h
 10137 0000047C CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10138                                  			; BX = number of 16-byte paragraphs desired
 10139 0000047E 53                      	push	bx
 10140 0000047F 50                      	push	ax
 10141                                  
 10142                                  	; set terminate addresses
 10143                                  
 10144 00000480 B82225                  	mov	ax,2522h
 10145                                  	;;mov	ax,(set_interrupt_vector SHL 8) + int_terminate
 10146                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+INT_TERMINATE
 10147 00000483 1E                      	push	ds
 10148 00000484 2E8E1E[C58A]            	mov	ds,[cs:RESSEG]
 10149                                  	;mov	dx,offset RESGROUP:EXEC_WAIT
 10150                                  	;mov	dx,131h ; MSDOS 3.3
 10151                                  	; 05/02/2023
 10152                                  	;mov	dx,0D6Bh ; MSDOS 5.0
 10153 00000489 BA[290C]                	mov	dx,Exec_Wait
 10154 0000048C CD21                    	int	21h	; DOS -	SET INTERRUPT VECTOR
 10155                                  			; AL = interrupt number
 10156                                  			; DS:DX	= new vector to	be used	for specified interrupt
 10157 0000048E 8CDA                    	mov	dx,ds
 10158 00000490 8EC2                    	mov	es,dx
 10159 00000492 1F                      	pop	ds
 10160                                  		
 10161                                  	; and create program header and dup all jfn's
 10162                                  
 10163 00000493 5A                      	pop	dx
 10164 00000494 B455                    	mov	ah,55h
 10165                                  	;mov	ah,DUP_PDB ; 55h
 10166 00000496 CD21                    	int	21h	; DOS -	2+ internal - CREATE PSP
 10167                                  			; DX = segment number at which to set up PSP
 10168                                  			; SI = (DOS 3+)	value to place in memory size field at DX:[0002h]
 10169                                  		
 10170                                  	; set up dma address
 10171                                  
 10172 00000498 8EDA                    	mov	ds,dx
 10173 0000049A BA8000                  	mov	dx,80h
 10174 0000049D B41A                    	mov	ah,1Ah
 10175                                  	;mov	ah,Set_DMA ; 1Ah
 10176 0000049F CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 10177                                  			; DS:DX	-> disk	transfer buffer
 10178                                  
 10179                                  	; copy in environment info
 10180                                  
 10181 000004A1 26A1[2703]              	mov	ax,[es:EnvirSeg]
 10182                                  	;mov	[2Ch],ax
 10183 000004A5 A32C00                  	mov	[PDB.ENVIRON],ax
 10184                                  
 10185                                  	; set up correct size of block
 10186                                  
 10187 000004A8 5B                      	pop	bx		; BX has size, DS has segment
 10188 000004A9 8CDA                    	mov	dx,ds
 10189 000004AB 01DA                    	add	dx,bx
 10190                                  	;mov	[2],dx
 10191 000004AD 89160200                	mov	[PDB.BLOCK_LEN],dx
 10192                                  
 10193                                  	; change ownership of block
 10194                                  
 10195 000004B1 8CDA                    	mov	dx,ds
 10196 000004B3 4A                      	dec	dx
 10197 000004B4 8EDA                    	mov	ds,dx
 10198 000004B6 42                      	inc	dx	
 10199                                  	;mov	[1],dx
 10200 000004B7 89160100                	mov	[ARENA.owner],dx
 10201 000004BB 8EDA                    	mov	ds,dx
 10202                                  
 10203                                  	; set up correct stack
 10204                                  
 10205 000004BD 81FB0010                	cmp	bx,1000h
 10206 000004C1 7202                    	jb	short GOT_STACK
 10207 000004C3 31DB                    	xor	bx,bx
 10208                                  GOT_STACK:
 10209 000004C5 B104                    	mov	cl,4
 10210 000004C7 D3E3                    	shl	bx,cl
 10211 000004C9 8CDA                    	mov	dx,ds
 10212 000004CB 8ED2                    	mov	ss,dx
 10213 000004CD 89DC                    	mov	sp,bx
 10214 000004CF 31C0                    	xor	ax,ax
 10215 000004D1 50                      	push	ax
 10216                                  
 10217                                  	; set up initial registers and go to the guy
 10218                                  
 10219 000004D2 F7D0                    	not	ax
 10220 000004D4 2EFF36[CA8C]            	push	word [cs:ROM_CS]
 10221 000004D9 2EFF36[C88C]            	push	word [cs:ROM_IP]
 10222 000004DE 8EC2                    	mov	es,dx
 10223 000004E0 CB                      	retf	; far return
 10224                                  
 10225                                  ;============================================================================
 10226                                  ; TBATCH.ASM, MSDOS 6.0, 1991
 10227                                  ;============================================================================
 10228                                  ; 12/10/2018 - Retro DOS v3.0
 10229                                  
 10230                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 04B9h
 10231                                  
 10232                                  ; =============== S U B	R O U T	I N E =======================================
 10233                                  
 10234                                  ;Break	<PromptBat - Open or wait for batch file>
 10235                                  
 10236                                  ; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10237                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:04E2h
 10238                                  
 10239                                  ; Open the batch file. If we cannot find the batch file. If the media is
 10240                                  ; changeable, we prompt for the change. Otherwise, we terminate the batch
 10241                                  ; file. Leave segment registers alone.
 10242                                  
 10243                                  PROMPTBAT:
 10244 000004E1 E84808                  	call	BATOPEN
 10245 000004E4 7201                    	jc	short PROMPTBAT1
 10246 000004E6 C3                      	retn
 10247                                  PROMPTBAT1:
 10248                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10249                                  	; MSDOS 6.0 COMMAND.COM
 10250 000004E7 83FA02                  	cmp	dx,ERROR_FILE_NOT_FOUND ;AN022; Ask for diskette if file not found
 10251 000004EA 740A                    	je	short BAT_REMCHECK	;AN022;
 10252 000004EC 83FA03                  	cmp	dx,ERROR_PATH_NOT_FOUND ;AN022; Ask for diskette if path not found
 10253 000004EF 7405                    	je	short BAT_REMCHECK	;AN022; Otherwise, issue message and exit
 10254                                  	;invoke	output_batch_name	;AN022; set up batch name in bwdbuf
 10255 000004F1 E83500                  	call	output_batch_name
 10256 000004F4 EB13                    	jmp	short BATDIE		;AN022;
 10257                                  
 10258                                  	; 05/02/2023
 10259                                  	; MSDOS 3.3 COMMAND.COM
 10260                                  	;cmp	dx,ACCDENPTR
 10261                                  	;jz	short BATDIE
 10262                                  
 10263                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10264                                  BAT_REMCHECK:				;AN022; Go see if media is removable
 10265 000004F6 2EFF1E[CF8A]            	call	far [cs:RCH_ADDR]	; DX has error number
 10266 000004FB 7417                    	jz	short ASKFORBAT		; Media is removable
 10267                                  
 10268                                  ; The media is not changeable. Turn everything off.
 10269                                  
 10270 000004FD E83D0B                  	call	FOROFF
 10271 00000500 E8692A                  	call	PipeOff
 10272 00000503 A2[9301]                	mov	[IfFlag],al	; No If in progress.	
 10273 00000506 BA[387F]                	mov	dx,BADBAT_PTR
 10274                                  BATDIE:
 10275 00000509 E8F003                  	call	BATCHOFF
 10276 0000050C 0E                      	push	cs
 10277 0000050D 1F                      	pop	ds
 10278                                  	;invoke	std_eprintf	;AC022; display message ;  MSDOS 6.0
 10279                                  	; 05/02/2023
 10280 0000050E E8D648                  	call	std_eprintf	; MSDOS 6.0
 10281                                  	;call	STD_PRINTF	; MSDOS 3.3
 10282                                  
 10283                                  ; TCOMMAND resets the stack. This is the equivalent of a non-local goto.
 10284                                  
 10285 00000511 E9F0FB                  	jmp	TCOMMAND
 10286                                  
 10287                                  ; Ask the user to reinsert the batch file
 10288                                  
 10289                                  ASKFORBAT:
 10290 00000514 1E                      	push	ds
 10291 00000515 0E                      	push	cs
 10292 00000516 1F                      	pop	ds
 10293                                  
 10294                                  	; MSDOS 6.0
 10295                                  	;mov	dx,offset TRANGROUP:NEEDBAT_ptr  ;AN022;
 10296 00000517 BA[3B7F]                	mov	dx,NEEDBAT_PTR
 10297                                  	;invoke	std_eprintf	 	;Prompt for batch file on stderr
 10298                                  	; 05/02/2023
 10299 0000051A E8CA48                  	call	std_eprintf
 10300                                  	;mov	dx,offset trangroup:pausemes_ptr
 10301 0000051D BA[AD7F]                	mov	dx,PAUSEMES_PTR
 10302                                  	;invoke std_eprintf		;AN000; get second part of message
 10303 00000520 E8C448                  	call	std_eprintf
 10304                                  					;AN000; print it to stderr
 10305                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10306                                  	;call	STD_EPRINTF
 10307 00000523 E82E00                  	call	GETKEYSTROKE
 10308 00000526 1F                      	pop	ds
 10309 00000527 EBB8                    	jmp	short PROMPTBAT
 10310                                  
 10311                                  
 10312                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10313                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:052Ah
 10314                                  
 10315                                  	; MSDOS 6.0
 10316                                  ;****************************************************************
 10317                                  ;*
 10318                                  ;* ROUTINE:	Output_batch_name
 10319                                  ;*
 10320                                  ;* FUNCTION:	Sets up batch name to be printed on extended error
 10321                                  ;*
 10322                                  ;* INPUT:	DX - extended error number
 10323                                  ;*
 10324                                  ;* OUTPUT:	Ready to call print routine
 10325                                  ;*
 10326                                  ;****************************************************************
 10327                                  ;
 10328                                  ;public	output_batch_name		;AN022;
 10329                                  
 10330                                  output_batch_name:	;proc near	;AN022;
 10331                                  
 10332 00000529 1E                      	push	ds			;AN022; save resident segment
 10333 0000052A 8E1E[3401]              	mov	ds,[Batch]		;AN022; get batch file segment
 10334                                  	;assume	DS:nothing		;AN022;
 10335                                  	;;mov	SI,BatFile		;AN022; get offset of batch file
 10336                                  	; 05/02/2023
 10337                                  	;mov	si,20h
 10338                                  	; 24/04/2023
 10339 0000052E BE2000                  	mov	si,BATCHSEGMENT.BatFile
 10340                                  	;invoke	dstrlen 		;AN022; get length of string
 10341 00000531 E83C27                  	call	dstrlen
 10342                                  	;mov	di,offset Trangroup:bwdbuf
 10343                                  					;AN022; target for batch name
 10344 00000534 BF[CE8B]                	mov	di,BWDBUF
 10345 00000537 F3A4                    	rep	movsb			;AN022; move the name
 10346                                  
 10347 00000539 0E                      	push	cs			;AN022; get local segment
 10348 0000053A 1F                      	pop	ds			;AN022;
 10349                                  	;assume	DS:trangroup		;AN022;
 10350                                  	; 05/02/2023
 10351 0000053B 8916[1B7F]              	mov	[extend_buf_ptr],dx	;AN022; put message number in block
 10352                                  	;mov	byte [msg_disp_class],1
 10353 0000053F C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class
 10354                                  					;AN022; set up extended error msg class
 10355                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 10356 00000544 BA[1B7F]                	mov	dx,extend_buf_ptr	
 10357                                  					;AN022; get extended message pointer
 10358                                  	;mov	string_ptr_2,offset trangroup:bwdbuf 
 10359 00000547 C706[B58C][CE8B]        	mov	word [string_ptr_2],BWDBUF	
 10360                                  					;AN022; point to substitution
 10361                                  	;mov	byte [extend_buf_sub],1
 10362 0000054D C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst
 10363                                  					;AN022; set up for one subst
 10364 00000552 1F                      	pop	ds			;AN022; restore data segment
 10365 00000553 C3                      	retn				;AN022; return
 10366                                  
 10367                                  ;output_batch_name    endp		;AN022;
 10368                                  
 10369                                  
 10370                                  ; =============== S U B	R O U T	I N E =======================================
 10371                                  
 10372                                  ;Break	<GetKeystroke - get a keystroke and flush queue>
 10373                                  
 10374                                  ; Read the next keystroke. Since there may be several characters in the queue
 10375                                  ; after the one we ask for (function keys/Kanji), we need to flush the queue
 10376                                  ; AFTER waiting.
 10377                                  
 10378                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10379                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0555h
 10380                                  
 10381                                  GETKEYSTROKE:
 10382                                  	; 05/02/2023
 10383                                  	; MSDOS 3.3
 10384                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_NO_ECHO
 10385                                  	;;mov	ax,0C08h
 10386                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT_NO_ECHO
 10387                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10388                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10389                                  	;;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10390                                  	;;mov	ax,0C00h
 10391                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)+0
 10392                                  	;int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 10393                                  	;		; AL must be 01h,06h,07h,08h,or 0Ah.
 10394                                  	;retn
 10395                                  
 10396                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10397                                  	; MSDOS 6.0
 10398 00000554 52                      	push	dx			;AN000;  3/3/KK
 10399                                  	;mov	ax,(ECS_call SHL 8) OR GetInterimMode
 10400                                  					;AN000;  3/3/KK
 10401 00000555 B80263                  	mov	ax,6302h
 10402 00000558 CD21                    	int	21h			;AN000;  3/3/KK
 10403                                  		; DOS - 3.2+ only - GET KOREAN (HONGEUL) INPUT MODE
 10404                                  	
 10405 0000055A 52                      	push	dx			;AN000;  save interim state 3/3/KK
 10406                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10407                                  					;AN000;  3/3/KK
 10408 0000055B B80163                  	mov	ax,6301h
 10409 0000055E B201                    	mov	dl,1
 10410                                  	;mov	dl,InterimMode		;AN000;  3/3/KK
 10411 00000560 CD21                    	int	21h			;AN000;  3/3/KK
 10412                                  		; DOS - 3.2+ only - SET KOREAN (HONGEUL) INPUT MODE
 10413                                  		; DL = new mode
 10414                                  		; 00h return only full characters on DOS keyboard input functions
 10415                                  		; 01h return partially-formed characters also
 10416                                  	
 10417                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo
 10418 00000562 B8080C                  	mov	ax,0C08h
 10419 00000565 CD21                    	int	21h			; Get character with KB buffer flush
 10420                                  		; DOS - CLEAR KEYBOARD BUFFER
 10421                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10422                                  
 10423                                  	;mov	ax,(STD_CON_INPUT_FLUSH SHL 8) + 0
 10424 00000567 B8000C                  	mov	ax,0C00h
 10425 0000056A CD21                    	int	21h
 10426                                  		; DOS - CLEAR KEYBOARD BUFFER
 10427                                  		; AL must be 01h, 06h, 07h, 08h, or 0Ah.
 10428                                  
 10429                                  	;mov	ax,(ECS_call SHL 8) OR SetInterimMode
 10430                                  					;AN000;  3/3/KK
 10431 0000056C B80163                  	mov	ax,6301h
 10432 0000056F 5A                      	pop	dx			;AN000;  restore interim state 3/3/KK
 10433 00000570 CD21                    	int	21h			;AN000;  3/3/KK
 10434 00000572 5A                      	pop	dx			;AN000;  3/3/KK
 10435                                  	
 10436 00000573 C3                      	retn
 10437                                  
 10438                                  ; =============== S U B	R O U T	I N E =======================================
 10439                                  
 10440                                  ; Break	<ReadBat - read 1 line from batch file>
 10441                                  
 10442                                  ; ReadBat - read a single line from the batch file. 
 10443                                  ; Perform all substitutions as appropriate.
 10444                                  
 10445                                  	; 05/02/2023 - Retro DOS v4.0 COMMAND.COM
 10446                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0575h
 10447                                  
 10448                                  READBAT:
 10449                                  	;ASSUME	DS:ResGroup,ES:TranGroup
 10450                                  		
 10451                                  	;mov	byte [Suppress],1
 10452                                  				; initialize line suppress status
 10453 00000574 C606[8901]01            	mov	byte [Suppress],YES_ECHO
 10454 00000579 F606[7E01]FF            	test	byte [Batch_Abort],-1 ; 0FFh
 10455 0000057E 751F                    	jnz	short TRYING_TO_ABORT
 10456 00000580 C606[7D01]01            	mov	byte [In_Batch],1 ; set flag to indicate batch job
 10457                                  
 10458                                  	; MSDOS 6.0
 10459                                  
 10460                                  ;M037; Start of changes
 10461                                  ; We check here if we have set the flag indicating that the batchfile is at
 10462                                  ;EOF. In this case, we do not want to continue with the normal processing.
 10463                                  ;We call GetBatByt once more so that the batch segment gets freed up, the
 10464                                  ;batch file gets closed etc. and then return as if everything is done.
 10465                                  
 10466                                  	; 05/02/2023
 10467 00000585 1E                      	push	ds
 10468 00000586 8E1E[3401]              	mov	ds,[Batch]
 10469                                  	;cmp	byte [2],0
 10470 0000058A 803E020000              	cmp	byte [BATCHSEGMENT.BatchEOF],0
 10471                                  				; are we at EOF in batchfile
 10472 0000058F 1F                      	pop	ds
 10473 00000590 740A                    	jz	short CONTBAT	; no, continue normal processing
 10474                                  	;invoke	GetBatByt	; frees up batchseg
 10475 00000592 E8D303                  	call	GETBATBYT
 10476 00000595 26A2[2689]              	mov	[es:COMBUF+2],al
 10477                                  				; stuff CR into command buffer
 10478                                  				; as a dummy command
 10479                                  	;;invoke CrLf2		; print a CR-LF
 10480                                  	;call	CRLF2
 10481                                  	;;return		; done batch processing
 10482                                  	;retn
 10483                                  	; 24/04/2023
 10484 00000599 E93720                  	jmp	CRLF2
 10485                                  
 10486                                  ;M037; End of changes
 10487                                  		
 10488                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10489                                  CONTBAT:
 10490 0000059C E842FF                  	call	PROMPTBAT
 10491                                  
 10492                                  TRYING_TO_ABORT:
 10493 0000059F BF[2689]                	mov	di,COMBUF+2
 10494                                  
 10495                                  ; Save position and try to scan for first non delimiter.
 10496                                  
 10497                                  TESTNOP:
 10498 000005A2 8CD8                    	mov	ax,ds
 10499 000005A4 8E1E[3401]              	mov	ds,[Batch]
 10500 000005A8 FF360800                	push	word [BATCHSEGMENT.BatSeek]
 10501 000005AC FF360A00                	push	word [BATCHSEGMENT.BatSeek+2]
 10502                                  				; save current location.
 10503 000005B0 8ED8                    	mov	ds,ax
 10504 000005B2 E84B06                  	call	SKIPDELIM	; skip to first non-delim
 10505                                  
 10506                                  ; If the first non-delimiter is not a : (label), we reseek back to the
 10507                                  ; beginning and read the line.
 10508                                  
 10509 000005B5 3C3A                    	cmp	al,':'		; is it a label?
 10510 000005B7 59                      	pop	cx
 10511 000005B8 5A                      	pop	dx		; restore position in bat file
 10512 000005B9 7431                    	jz	short NOPLINE	; yes, resync everything.
 10513 000005BB F706[3401]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10514 000005C1 7438                    	jz	short RDBAT	; no, go read batch file
 10515                                  
 10516                                  	;cmp	al,'@'
 10517 000005C3 3C40                    	cmp	al,No_Echo_Char	; see if user wants to suppress line
 10518 000005C5 7507                    	jne	short SET_BAT_POS ; no - go and set batch file position
 10519                                  	;mov	byte [Suppress],0
 10520 000005C7 C606[8901]00            	mov	byte [Suppress],NO_ECHO ; yes set flag to indicate
 10521 000005CC EB2D                    	jmp	short RDBAT	; go read batch file
 10522                                  	;nop
 10523                                  SET_BAT_POS:
 10524 000005CE 1E                      	push	ds
 10525 000005CF 8E1E[3401]              	mov	ds,[Batch]
 10526                                  	;mov	[8],dx
 10527 000005D3 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; reseek back to beginning
 10528                                  	;mov	[10],cx
 10529 000005D7 890E0A00                	mov	[BATCHSEGMENT.BatSeek+2],cx
 10530 000005DB 1F                      	pop	ds
 10531                                  	;;mov	ax,(LSEEK SHL 8) + 0
 10532                                  	; 05/02/2023
 10533 000005DC B80042                  	mov	ax,4200h
 10534                                  	;mov	ax,(LSEEK*256) ; 4200h ; ; seek back
 10535 000005DF CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 10536                                  			; AL = method: offset from beginning of	file
 10537                                  	;mov	word [cs:BATBUFPOS],0FFFFh
 10538                                  	; 24/04/2023
 10539                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:05E3h
 10540 000005E1 26C706[CC95]FFFF        	mov	word [es:BATBUFPOS],-1; 0FFFFh
 10541                                  	;mov	word [cs:BATBUFPOS],-1 ; nuke batch buffer position
 10542 000005E8 31C9                    	xor	cx,cx		; Initialize line length to zero
 10543 000005EA EB0F                    	jmp	short RDBAT
 10544                                  
 10545                                  	;nop
 10546                                  
 10547                                  ; The first non-delimiter is a :. This line is not echoed and is ignored.
 10548                                  ; We eat characters until a CR is seen.
 10549                                  
 10550                                  NOPLINE:
 10551 000005EC E80501                  	call	SKIPTOEOL
 10552 000005EF E87603                  	call	GETBATBYT	; eat trailing LF
 10553                                  	;test	word [Batch],0FFFFh
 10554 000005F2 F706[3401]FFFF          	test	word [Batch],-1 ; are we done with the batch file?
 10555 000005F8 75A8                    	jnz	short TESTNOP	; no, go get another line
 10556                                  READBAT_RETN:			; Hit EOF
 10557 000005FA C3                      	retn
 10558                                  
 10559                                  ; ---------------------------------------------------------------------------
 10560                                  
 10561                                  ; Read a line into the buffer pointed to by ES:DI. If any %s are seen in the
 10562                                  ; input, we are to consider two special cases:
 10563                                  ;
 10564                                  ;   %0 to %9	These represent replaceable parameters from the batch segment
 10565                                  ;   %sym%	This is a symbol from the environment
 10566                                  
 10567                                  RDBAT:
 10568 000005FB E86A03                  	call	GETBATBYT
 10569 000005FE 41                      	inc	cx		; Inc the line length
 10570                                  
 10571                                  	; 05/02/2023
 10572                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0601h
 10573 000005FF E8BF1D                  	call	testkanj
 10574 00000602 740C                    	jz	short RDBAT1
 10575                                  	;cmp	cx,127
 10576 00000604 83F97F                  	cmp	cx,COMBUFLEN-1
 10577 00000607 7350                    	jnb	short TOOLONG
 10578 00000609 AA                      	stosb
 10579 0000060A E85B03                  	call    GETBATBYT
 10580 0000060D 41                      	inc	cx
 10581 0000060E EB0A                    	jmp	short SAVBATBYT
 10582                                  RDBAT1:
 10583 00000610 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10584 00000614 7343                    	jnb	short TOOLONG	   ; Yes - handle it, handle it
 10585                                  
 10586                                  ; See if we have a parameter character.
 10587                                  
 10588 00000616 3C25                    	cmp	al,'%'		; Check for parameter
 10589 00000618 7449                    	je	short NEEDPARM
 10590                                  
 10591                                  ; no parameter character. Store it as usual and see if we are done.
 10592                                  
 10593                                  SAVBATBYT:
 10594 0000061A AA                      	stosb			; End of line found?
 10595 0000061B 3C0D                    	cmp	al,0Dh
 10596 0000061D 75DC                    	jne	short RDBAT	; no, go for more
 10597                                  
 10598                                  ; We have read in an entire line. 
 10599                                  ; Decide whether we should echo the command line or not.
 10600                                  
 10601                                  FOUND_EOL:
 10602 0000061F 81EF[2789]              	sub	di,COMBUF+3
 10603 00000623 89F8                    	mov	ax,di		; remember that we've not counted the CR
 10604 00000625 26A2[2589]              	mov	[es:COMBUF+1],al
 10605                                  				; Set length of line
 10606 00000629 E83C03                  	call	GETBATBYT	; Eat linefeed
 10607 0000062C E8E906                  	call	BATCLOSE
 10608 0000062F 803E[8901]00            	cmp	byte [Suppress],NO_ECHO ; 0
 10609 00000634 7407                    	jz	short RESET
 10610 00000636 F606[8801]01            	test	byte [EchoFlag],1  ; To echo or not to echo, that is the
 10611 0000063B 7504                    	jnz	short TRY_NEXTFLAG ; question. (Profound, huh?)
 10612                                  RESET:
 10613 0000063D 0E                      	push	cs
 10614 0000063E 1F                      	pop	ds		; Go back to local segment
 10615 0000063F 74B9                    	jz	short READBAT_RETN ; no echoing here...
 10616                                  TRY_NEXTFLAG:
 10617 00000641 803E[9D01]01            	cmp	byte [NullFlag],nullcommand ; 1
 10618                                  				;G was there a command last time?
 10619 00000646 7403                    	jz	short NO_CRLF_PRINT
 10620                                  				;G no - don't print crlf
 10621 00000648 E8881F                  	call	CRLF2		;G Print out prompt
 10622                                  NO_CRLF_PRINT:
 10623 0000064B E84717                  	call	PRINT_PROMPT
 10624 0000064E 0E                      	push	cs		;G change data segment
 10625 0000064F 1F                      	pop	ds
 10626 00000650 BA[2689]                	mov	dx,COMBUF+2	; get command line for echoing
 10627 00000653 E8D61F                  	call	CRPRINT
 10628                                  	;call	CRLF2
 10629                                  	;retn
 10630                                  	; 06/02/2023
 10631 00000656 E97A1F                  	jmp	CRLF2
 10632                                  
 10633                                  ; The line was too long. Eat remainder of input text up until the CR
 10634                                  
 10635                                  TOOLONG:
 10636 00000659 3C0D                    	cmp	al,0Dh		; Has the end of the line been reached?
 10637 0000065B 7403                    	jz	short LTLCONT	; Yes, continue
 10638 0000065D E89400                  	call	SKIPTOEOL	; Eat remainder of line	
 10639                                  LTLCONT:
 10640 00000660 AA                      	stosb			; Terminate the command
 10641 00000661 EBBC                    	jmp	short FOUND_EOL	; Go process the valid part of the line
 10642                                  
 10643                                  ; We have found a parameter lead-in character. Check for the 0-9 case first
 10644                                  
 10645                                  NEEDPARM:
 10646 00000663 E80203                  	call	GETBATBYT	; get next character
 10647 00000666 3C25                    	cmp	al,'%'		; Check for two consecutive %
 10648 00000668 74B0                    	je	short SAVBATBYT	; if so, replace with a single %
 10649 0000066A 3C0D                    	cmp	al,0Dh		; Check for end-of-line
 10650 0000066C 74AC                    	je	short SAVBATBYT	; yes, treat it normally
 10651                                  
 10652                                  ; We have found %<something>. If the <something> is in the range 0-9, we
 10653                                  ; retrieve the appropriate parameter from the batch segment. Otherwise we
 10654                                  ; see if the <something> has a terminating % and then look up the contents
 10655                                  ; in the environment.
 10656                                  
 10657                                  PAROK:
 10658 0000066E 2C30                    	sub	al,'0'
 10659 00000670 7239                    	jb	short NEEDENV	; look for parameter in the environment
 10660 00000672 3C09                    	cmp	al,9
 10661 00000674 7735                    	ja	short NEEDENV
 10662                                  
 10663                                  ; We have found %<number>. This is taken from the parameters in the
 10664                                  ; allocated batch area.
 10665                                  
 10666 00000676 98                      	cbw
 10667 00000677 89C3                    	mov	bx,ax		; move index into AX
 10668 00000679 D1E3                    	shl	bx,1		; convert word index into byte ptr
 10669 0000067B 06                      	push	es
 10670 0000067C 8E06[3401]              	mov	es,[Batch]
 10671                                  
 10672                                  ; The structure of the batch area is:
 10673                                  ;
 10674                                  ;   BYTE    type of segment
 10675                                  ;   DWORD   offset for next line
 10676                                  ;   10 WORD pointers to parameters. -1 is empty parameter
 10677                                  ;   ASCIZ   file name (with . and ..)
 10678                                  ;   BYTES   CR-terminated parameters
 10679                                  ;   BYTE    0 flag to indicate end of parameters
 10680                                  ;
 10681                                  ; Get pointer to BX'th argument
 10682                                  
 10683                                  	;;mov	si,[es:bx+0Bh]
 10684                                  	; 05/02/2023
 10685                                  	;mov	si,[es:bx+0Ch] 	; MSDOS 5.0 COMMAND.COM
 10686 00000680 268B770C                	mov	si,[es:bx+BATCHSEGMENT.BatParm]
 10687 00000684 07                      	pop	es
 10688                                  
 10689                                  ; Is there a parameter here?
 10690                                  
 10691 00000685 83FEFF                  	cmp	si,-1		; Check if parameter exists
 10692 00000688 7503                    	jnz	short YES_THERE_IS ; Yes go get it
 10693 0000068A E96EFF                  	jmp	RDBAT		; Ignore if it doesn't
 10694                                  
 10695                                  ; Copy in the found parameter from batch segment
 10696                                  
 10697                                  YES_THERE_IS:
 10698 0000068D 1E                      	push	ds
 10699 0000068E 8E1E[3401]              	mov	ds,[Batch]
 10700 00000692 49                      	dec	cx		; Don't count '%' in line length
 10701                                  COPYPARM:
 10702 00000693 AC                      	lodsb			; From resident segment
 10703 00000694 3C0D                    	cmp	al,0Dh		; Check for end of parameter
 10704 00000696 740F                    	je	short ENDPARAM
 10705 00000698 41                      	inc	cx		; Inc the line length
 10706 00000699 81F98000                	cmp	cx,COMBUFLEN ; 128 ; Is it too long?
 10707 0000069D 7303                    	jnb	short LINETOOL	; Yes - handle it, handle it
 10708 0000069F AA                      	stosb
 10709 000006A0 EBF1                    	jmp	short COPYPARM
 10710                                  
 10711                                  ; We have copied up to the limit. Stop copying and eat remainder of batch
 10712                                  ; line. We need to make sure that the tooLong code isn't fooled into
 10713                                  ; believing that we are at EOL. Clobber AL too.
 10714                                  
 10715                                  LINETOOL:
 10716 000006A2 30C0                    	xor	al,al
 10717 000006A4 1F                      	pop	ds
 10718 000006A5 EBB2                    	jmp	short TOOLONG
 10719                                  
 10720                                  ; We have copied in an entire parameter. Go back for more
 10721                                  
 10722                                  ENDPARAM:
 10723 000006A7 1F                      	pop	ds
 10724 000006A8 E950FF                  	jmp	RDBAT
 10725                                  
 10726                                  ; We have found % followed by something other than 0-9. We presume that there
 10727                                  ; will be a following % character. In between is an environment variable that
 10728                                  ; we will fetch and replace in the batch line with its value.
 10729                                  
 10730                                  NEEDENV:
 10731                                  	; MSDOS 6.0 COMMAND.COM
 10732                                  	; 05/02/2023 
 10733 000006AB 49                      	dec     cx 		;AN070; Don't count "%"
 10734                                  
 10735                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10736 000006AC 1E                      	push	ds
 10737 000006AD 57                      	push	di
 10738                                  				; temp spot for name
 10739 000006AE BF[508B]                	mov	di,ID
 10740 000006B1 0430                    	add	al,'0'		; reconvert character
 10741 000006B3 AA                      	stosb			; store it in appropriate place
 10742                                  
 10743                                  ; loop getting characters until the next % is found or until EOL
 10744                                  
 10745                                  GETENV1:
 10746 000006B4 E8B102                  	call	GETBATBYT	; get the byte
 10747 000006B7 AA                      	stosb			; store it
 10748 000006B8 3C0D                    	cmp	al,0Dh		; EOL?
 10749 000006BA 7514                    	jne	short GETENV15	; no, see if it the term char
 10750                                  
 10751                                  ; The user entered a string with a % but no trailing %. We copy the string.
 10752                                  
 10753 000006BC 26C645FF00              	mov	byte [es:di-1],0 ; nul terminate the string
 10754 000006C1 BE[508B]                	mov	si,ID 		; point to buffer
 10755 000006C4 5F                      	pop	di		; point to line buffer
 10756 000006C5 0E                      	push	cs
 10757 000006C6 1F                      	pop	ds
 10758 000006C7 E88B02                  	call	STRCPY
 10759                                  	; 05/02/2023
 10760 000006CA 72D6                    	jc	short LINETOOL	;  MSDOS 6.0 COMMAND.COM
 10761                                  	; 24/04/2023
 10762                                  	;dec	di  		;  MSDOS 3.3 COMMAND.COM	
 10763 000006CC 1F                      	pop	ds
 10764 000006CD E94AFF                  	jmp	SAVBATBYT
 10765                                  GETENV15:
 10766 000006D0 3C25                    	cmp	al,'%'		; terminating %?
 10767 000006D2 75E0                    	jne	short GETENV1	; no, go suck out more characters
 10768                                  
 10769                                  ; M017 - following DEC is wrong, because we replace the % with a = here.
 10770                                  ; This was the source of bug #1.
 10771                                  ;	dec	cx		;AN070; Don't count "%"
 10772                                  
 10773 000006D4 B03D                    	mov	al,'='		; terminate  with =
 10774 000006D6 268845FF                	mov	[es:di-1],al
 10775                                  
 10776                                  ; ID now either has a =-terminated string which we are to find in the
 10777                                  ; environment or a non =-terminated string which will not be found in the
 10778                                  ; environment.
 10779                                  
 10780                                  GETENV2:
 10781 000006DA BE[508B]                	mov	si,ID
 10782 000006DD 0E                      	push	cs
 10783 000006DE 1F                      	pop	ds		; DS:SI points to name
 10784 000006DF 51                      	push	cx
 10785 000006E0 E8341C                  	call	find_name_in_environment
 10786 000006E3 59                      	pop	cx
 10787 000006E4 06                      	push	es
 10788 000006E5 1F                      	pop	ds
 10789 000006E6 0E                      	push	cs
 10790 000006E7 07                      	pop	es
 10791 000006E8 89FE                    	mov	si,di
 10792 000006EA 5F                      	pop	di		; get back pointer to command line
 10793                                  
 10794                                  ; If the parameter was not found, there is no need to perform any replacement.
 10795                                  ; We merely pretend that we've copied the parameter.
 10796                                  
 10797 000006EB 7203                    	jc	short GETENV6
 10798                                  
 10799                                  ; ES:DI points to command line being built
 10800                                  ; DS:SI points either to nul-terminated environment object AFTER =
 10801                                  
 10802 000006ED E86502                  	call	STRCPY		; (let RdBat handle overflow)
 10803                                  	; 24/04/2022
 10804                                  	;dec	di 		; MSDOS 3.3 COMMAND.COM
 10805                                  GETENV6:
 10806 000006F0 1F                      	pop	ds
 10807 000006F1 E907FF                  	jmp	RDBAT		; go back to batch file
 10808                                  
 10809                                  ; =============== S U B	R O U T	I N E =======================================
 10810                                  
 10811                                  ;   SkipToEOL - read from batch file until end of line
 10812                                  
 10813                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10814                                  SKIPTOEOL:
 10815 000006F4 F706[3401]FFFF          	test	word [Batch],-1 ; 0FFFFh
 10816                                  	;jnz	short SKIPTOEOL1  	
 10817                                  	;retn			; no batch file in effect
 10818                                  	
 10819 000006FA 7407                    	jz	short SKIPTOEOL2 ; Retro DOS v3.0 COMMAND.COM
 10820                                  SKIPTOEOL1:
 10821 000006FC E86902                  	call	GETBATBYT
 10822 000006FF 3C0D                    	cmp	al,0Dh		; eol character?
 10823 00000701 75F1                    	jnz	short SKIPTOEOL	; no, go eat another
 10824                                  SKIPTOEOL2:
 10825 00000703 C3                      	retn
 10826                                  
 10827                                  ; =============== S U B	R O U T	I N E =======================================
 10828                                  
 10829                                  ;Break	<Allocate and deallocate the transient portion>
 10830                                  
 10831                                  ; Free Transient. Modify ES,AX,flags
 10832                                  
 10833                                  	; 06/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10834                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0708h
 10835                                  FREE_TPA:
 10836 00000704 06                      	push	es
 10837 00000705 8E06[C58A]              	mov	es,[RESSEG]
 10838 00000709 268E06[4703]            	mov	es,[es:Res_Tpa]
 10839 0000070E B449                    	mov	ah,49h
 10840                                  	;mov	ah,DEALLOC ; 49h
 10841 00000710 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 10842                                  			; ES = segment address of area to be freed
 10843 00000712 07                      	pop	es
 10844 00000713 C3                      	retn
 10845                                  
 10846                                  ; =============== S U B	R O U T	I N E =======================================
 10847                                  
 10848                                  ; Allocate transient. Modify AX,BX,DX,flags
 10849                                  
 10850                                  	; 06/02/2023
 10851                                  ALLOC_TPA:
 10852 00000714 06                      	push	es
 10853 00000715 8E06[C58A]              	mov	es,[RESSEG]
 10854 00000719 BBFFFF                  	mov	bx,0FFFFh 	; Re-allocate the transient	
 10855 0000071C B448                    	mov	ah,48h
 10856                                  	;mov	ah,ALLOC ; 48h
 10857 0000071E CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10858                                  			; BX = number of 16-byte paragraphs desired
 10859 00000720 53                      	push	bx	  	; Save size of block
 10860 00000721 B448                    	mov	ah,48h
 10861                                  	;mov	ah,ALLOC ; 48h
 10862 00000723 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 10863                                  			; BX = number of 16-byte paragraphs desired
 10864                                  
 10865                                  ; Attempt to align TPA on 64K boundary
 10866                                  
 10867 00000725 5B                      	pop	bx		; Restore size of block
 10868 00000726 26A3[4703]              	mov	[es:Res_Tpa],ax
 10869                                  				; Save segment to beginning of block
 10870 0000072A A3[D58A]                	mov	[TRAN_TPA],ax
 10871                                  
 10872                                  ; Is the segment already aligned on a 64K boundary
 10873                                  
 10874 0000072D 89C2                    	mov	dx,ax		; Save segment
 10875 0000072F 25FF0F                  	and	ax,0FFFh	; Test if above boundary
 10876 00000732 7507                    	jnz	short CALC_TPA
 10877 00000734 89D0                    	mov	ax,dx
 10878 00000736 2500F0                  	and	ax,0F000h	; Test if multiple of 64K
 10879 00000739 7523                    	jnz	short NOROUND
 10880                                  CALC_TPA:
 10881 0000073B 89D0                    	mov	ax,dx
 10882 0000073D 2500F0                  	and	ax,0F000h
 10883 00000740 050010                  	add	ax,1000h	; Round up to next 64K boundary
 10884 00000743 7219                    	jc	short NOROUND	; Memory wrap if carry set
 10885                                  
 10886                                  ; Make sure that new boundary is within allocated range
 10887                                  
 10888 00000745 268B16[4703]            	mov	dx,[es:Res_Tpa]
 10889 0000074A 01DA                    	add	dx,bx		; Compute maximum address
 10890 0000074C 39C2                    	cmp	dx,ax		; Is 64K address out of range?
 10891 0000074E 720E                    	jb	short NOROUND
 10892                                  
 10893                                  ; Make sure that we won't overwrite the transient
 10894                                  
 10895 00000750 8CCB                    	mov	bx,cs		; CS is beginning of transient
 10896 00000752 39C3                    	cmp	bx,ax
 10897 00000754 7208                    	jb	short NOROUND
 10898                                  
 10899                                  ; The area from the 64K boundary to the beginning of the transient must
 10900                                  ; be at least 64K.
 10901                                  
 10902 00000756 29C3                    	sub	bx,ax
 10903                                  	;cmp	bx,4096
 10904 00000758 81FB0010                	cmp	bx,1000h	; Size greater than 64K?	
 10905 0000075C 7304                    	jnb	short ROUNDDONE
 10906                                  NOROUND:
 10907 0000075E 26A1[4703]              	mov	ax,[es:Res_Tpa]
 10908                                  ROUNDDONE:
 10909 00000762 26A3[3903]              	mov	[es:LTpa],ax	; Re-compute everything
 10910 00000766 A3[C78A]                	mov	[TPA],ax
 10911 00000769 89C3                    	mov	bx,ax
 10912 0000076B 8CC8                    	mov	ax,cs
 10913 0000076D 29D8                    	sub	ax,bx
 10914 0000076F 53                      	push	bx
 10915 00000770 BB1000                  	mov	bx,16
 10916 00000773 F7E3                    	mul	bx
 10917 00000775 5B                      	pop	bx
 10918 00000776 09D2                    	or	dx,dx
 10919 00000778 7403                    	jz	short SAVSIZ2
 10920 0000077A B8FFFF                  	mov	ax,-1
 10921                                  SAVSIZ2:
 10922                                  
 10923                                  ; AX is the number of bytes free in the buffer between the resident and the
 10924                                  ; transient with a maximum of 64K-1. We round this down to a multiple of 512.
 10925                                  
 10926 0000077D 3D0002                  	cmp	ax,512
 10927 00000780 7603                    	jbe	short GOTSIZE2
 10928                                  	;and	ax,~1FFh
 10929 00000782 2500FE                  	and	ax,0FE00h	; NOT 511 = NOT 1FFh
 10930                                  GOTSIZE2:
 10931 00000785 A3[E68A]                	mov	[BYTCNT],ax
 10932 00000788 07                      	pop	es
 10933 00000789 C3                      	retn
 10934                                  
 10935                                  ; =============== S U B	R O U T	I N E =======================================
 10936                                  
 10937                                  ;Break	<BatCom - enter a batch file>
 10938                                  
 10939                                  ; The exec search has determined that the user has requested a batch file for
 10940                                  ; execution. We parse the arguments, create the batch segment, and signal
 10941                                  ; batch processing.
 10942                                  
 10943                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 10944                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:078Eh
 10945                                  BATCOM:	
 10946                                  
 10947                                  ;ASSUME	DS:TRANGROUP, ES:NOTHING
 10948                                  
 10949                                  ; Batch parameters are read with ES set to segment of resident part
 10950                                  
 10951                                  	; MSDOS 6.0
 10952 0000078A 8E06[C58A]              	mov	es,[RESSEG]
 10953                                  	;ASSUME	ES:RESGROUP
 10954                                  	;cmp	byte [es:Call_Batch_Flag],1
 10955 0000078E 26803E[9A01]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 10956                                  					;AN043; If in CALL,
 10957 00000794 7403                    	jz	short skip_ioset	;AN043; redirection was already set up
 10958                                  	;invoke	IOSET			; Set up any redirection
 10959 00000796 E8E623                  	call	IOSET
 10960                                  skip_ioset:				;AN043;
 10961 00000799 E868FF                  	call	FREE_TPA		; G
 10962                                  	;cmp	byte [es:Call_Batch_Flag],1
 10963 0000079C 26803E[9A01]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 10964 000007A2 7403                    	jz	short GETECHO 		; G if we're in a call, don't execute
 10965                                  
 10966                                  	; 12/02/2023
 10967                                  	; MSDOS 3.3
 10968                                  	;call	IOSET
 10969                                  	;mov	es,[RESSEG]
 10970                                  	;call	FREE_TPA
 10971                                  	;;cmp	byte [es:CALL_BATCH_FLAG],1
 10972                                  	;cmp	byte [es:CALL_BATCH_FLAG],call_in_progress
 10973                                  	;jz	short GETECHO		; G if we're in a call, don't execute
 10974                                  
 10975                                  	; MSDOS 3.3 (& MSDOS 6.0)
 10976                                  
 10977                                  ; Since BATCH has lower precedence than PIPE or FOR. If a new BATCH file is
 10978                                  ; being started it MUST be true that no FOR or PIPE is currently in progress.
 10979                                  ; Don't execute if in call
 10980                                  
 10981 000007A4 E89608                  	call	FOROFF
 10982                                  GETECHO:
 10983 000007A7 E8C227                  	call	PipeOff
 10984 000007AA 26A0[8801]              	mov	al,[es:EchoFlag]	; preserve echo state for chaining
 10985 000007AE 2401                    	and	al,1			; Save current echo state
 10986                                  
 10987 000007B0 50                      	push	ax
 10988 000007B1 31C0                    	xor	ax,ax
 10989 000007B3 26F706[3401]FFFF        	test	word [es:Batch],-1 	; Are we in a batch file?
 10990 000007BA 7414                    	jz	short LEAVEBAT	   	; No, nothing to save
 10991 000007BC 26A1[3401]              	mov	ax,[es:Batch] 		; Get current batch segment
 10992                                  	;cmp	byte [es:Call_Batch_Flag],1
 10993 000007C0 26803E[9A01]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 10994 000007C6 7408                    	jz	short LEAVEBAT
 10995                                  
 10996                                  ;  We are in a chained batch file, save batlast from previous batch segment
 10997                                  ;  so that if we're in a CALL, we will return to the correct batch file.
 10998                                  
 10999 000007C8 06                      	push	es
 11000 000007C9 8EC0                    	mov	es,ax		; Get current batch segment
 11001                                  	;mov	ax,[es:02h] ; MSDOS 3.3 COMMAND.COM
 11002                                  				; Get previous batch segment
 11003                                  	; 12/02/2023
 11004                                  	;mov	ax,[es:03h] ; MSDOS 6.0 (&5.0) COMMAND.COM	
 11005 000007CB 26A10300                	mov	ax,[es:BATCHSEGMENT.BatLast]
 11006 000007CF 07                      	pop	es
 11007                                  LEAVEBAT:
 11008 000007D0 50                      	push	ax		; Keep segment until new one created
 11009                                  	;cmp	byte [es:Call_Batch_Flag],1
 11010 000007D1 26803E[9A01]01          	cmp	byte [es:Call_Batch_Flag],call_in_progress
 11011 000007D7 7403                    	jz	short STARTBAT
 11012 000007D9 E82001                  	call	BATCHOFF
 11013                                  
 11014                                  ; Find length of batch file
 11015                                  
 11016                                  STARTBAT:
 11017 000007DC 26C606[9A01]00          	mov	byte [es:Call_Batch_Flag],0 ; Reset call flag
 11018 000007E2 BE[ED89]                	mov	si,EXECPATH
 11019                                  
 11020                                  	; 12/02/2023
 11021                                  	; MSDOS 6.0
 11022 000007E5 B811B7                  	mov	ax,0B711h
 11023                                  	;mov	ax,AppendTruename
 11024                                  				;AN042; Get the real path where the batch file
 11025 000007E8 CD2F                    	int	2Fh		;AN042;    was found with APPEND
 11026 000007EA B44E                    	mov	ah,4Eh
 11027                                  	;mov	ah,Find_First	;AN042; The find_first will return it
 11028 000007EC 89F2                    	mov	dx,si		;AN042; Get the string
 11029 000007EE B91300                  	mov	cx,13h
 11030                                  	;mov	cx,search_attr	;AN042; filetypes to search for
 11031 000007F1 CD21                    	int	21h		;AN042;
 11032                                  
 11033                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11034 000007F3 E87A24                  	call	dstrlen
 11035                                  ;
 11036                                  ; Allocate batch area:
 11037                                  ;   BYTE    type of segment
 11038                                  ;   WORD    segment of last batch file
 11039                                  ;   WORD    segment for FOR command
 11040                                  ;   BYTE    FOR flag state on entry to batch file
 11041                                  ;   DWORD   offset for next line
 11042                                  ;   10 WORD pointers to parameters.  -1 is empty parameter
 11043                                  ;   ASCIZ   file name (with . and ..)
 11044                                  ;   BYTES   CR-terminated parameters
 11045                                  ;   BYTE    0 flag to indicate end of parameters
 11046                                  ;
 11047                                  ; We allocate the maximum size for the command line and use setblock to shrink
 11048                                  ; later when we've squeezed out the extra
 11049                                  ;
 11050 000007F6 89CB                    	mov	bx,cx		; length of file name.
 11051                                  	;add	bx,190	; MSDOS 3.3 (BATCHSEGMENT struc size = 32)
 11052                                  	; 12/02/2023
 11053                                  	;add	bx,191	; MSDOS 6.0 (BATCHSEGMENT struc size = 33) 
 11054                                  	; 25/04/2023
 11055 000007F8 81C3BF00                	add	bx,15+BATCHSEGMENT.SIZE+COMBUFLEN+15
 11056                                  					; structure + max len + round up
 11057 000007FC 51                      	push	cx
 11058 000007FD B104                    	mov	cl,4
 11059 000007FF D3EB                    	shr	bx,cl		; convert to paragraphs
 11060 00000801 53                      	push	bx		; Save size of batch segment
 11061 00000802 B448                    	mov	ah,48h
 11062                                  	;mov	ah,ALLOC ; 48h ; Allocate batch segment
 11063 00000804 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 11064                                  				; BX = number of 16-byte paragraphs desired
 11065 00000806 5B                      	pop	bx		; Get size of batch segment
 11066                                  
 11067                                  ; This should *NEVER* return an error. The transient is MUCH bigger than
 11068                                  ; the batch segment. This may not be true, however, in a multitasking system.
 11069                                  ; G This error will occur with nesting of batch files. We also need to
 11070                                  ; G make sure that we don't overlay the transient.
 11071                                  
 11072 00000807 7221                    	jc	short MEM_ERROR	;G not enough memory - exit
 11073                                  
 11074 00000809 50                      	push	ax		;G save batch segment
 11075 0000080A 01D8                    	add	ax,bx		;G get end of batch segment
 11076 0000080C 83C020                  	add	ax,20h		;G add some tpa work area
 11077 0000080F 8CCB                    	mov	bx,cs		;G get the transient segment
 11078                                  
 11079                                  	; MSDOS 6.0
 11080                                  ; M006; We cant check just for above. If the batchseg goes into a UMB, the
 11081                                  ; M006; batchseg is always above the transient. We need to change this code
 11082                                  ; M006; to only check for an overlap
 11083                                  
 11084                                  	;;mov	dx,offset TRANGROUP:TranSpaceEnd ; M006
 11085                                  	; 12/02/2023
 11086                                  	;;mov	dx,98C5h ; MSDOS 5.0 COMMAND.COM
 11087                                  	;mov	dx,TRANSPACEEND		
 11088                                  	;add	dx,15		;round up para; M006
 11089 00000811 BA2396                  	mov	dx,TRANSPACEEND+15
 11090                                  
 11091 00000814 D3EA                    	shr	dx,cl		;para size of transient; M006
 11092 00000816 01DA                    	add	dx,bx		;dx = top of transient; M006
 11093                                  
 11094 00000818 39D8                    	cmp	ax,bx		; M006
 11095 0000081A 7211                    	jb	short ENOUGH_MEM
 11096                                  				; Batchseg below transient
 11097                                  				; enough memory ; M006
 11098 0000081C 39D0                    	cmp	ax,dx		; M006
 11099 0000081E 770D                    	ja	short ENOUGH_MEM	
 11100                                  				; Batchseg above transient
 11101                                  				; enough memory ; M006
 11102                                  
 11103                                  ; M006; Batchseg overlaps transient -- insufficient memory
 11104                                  
 11105 00000820 58                      	pop	ax		; restore ax; M006
 11106                                  
 11107                                  	; 12/02/2023
 11108                                  	; MSDOS 3.3
 11109                                  ; M006;	cmp	ax,bx		;G do we end before the transient
 11110                                  ; M006;	pop	ax		;G get batch segment back
 11111                                  ; M006;	jb	short ENOUGH_MEM ;G we have enough memory - continue
 11112                                  
 11113                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11114 00000821 06                      	push	es		;G no we're hitting the transient
 11115 00000822 8EC0                    	mov	es,ax
 11116 00000824 B80049                  	mov	ax,4900h
 11117                                  	;mov	ax,DEALLOC*256 ; 4900h ;G deallocate the batch segment
 11118 00000827 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11119                                  			; ES = segment address of area to be freed
 11120 00000829 07                      	pop	es
 11121                                  MEM_ERROR:
 11122 0000082A E9B800                  	jmp	NO_MEMORY	;G Set up for message and exit
 11123                                  
 11124                                  ENOUGH_MEM:
 11125                                  	; 12/02/2023 - Retro DOS v4.0 COMMAND.COM
 11126                                  	; MSDOS 6.0
 11127 0000082D 58                      	pop	ax		; restore ax; M006
 11128                                  
 11129                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11130 0000082E 26A3[3401]              	mov	[es:Batch],ax
 11131 00000832 E8DFFE                  	call	ALLOC_TPA
 11132                                  
 11133                                  ; Initialize batch segment
 11134                                  
 11135 00000835 5A                      	pop	dx		; length of name
 11136 00000836 58                      	pop	ax		;G get saved batch segment back
 11137 00000837 26FF06[9701]            	inc	word [es:Nest]	;G increment # batch files in progress
 11138 0000083C 06                      	push	es
 11139 0000083D 268E06[3401]            	mov	es,[es:Batch]
 11140                                  	;mov	byte [ES:0],0
 11141                                  				; signal batch file type
 11142 00000842 26C606000000            	mov	byte [es:BATCHSEGMENT.BatType],BATCHTYPE ; 0
 11143                                  	;;mov	[es:2],ax	; MSDOS 3.3
 11144                                  				;G save segment of last batch file
 11145                                  	;mov	[es:3],ax	; MSDOS 6.0
 11146 00000848 26A30300                	mov	[es:BATCHSEGMENT.BatLast],ax
 11147 0000084C 1E                      	push	ds
 11148 0000084D 8E1E[C58A]              	mov	ds,[RESSEG]	;G set to resident data
 11149                                  
 11150 00000851 31C0                    	xor	ax,ax
 11151 00000853 8A1E[9401]              	mov	bl,[ForFlag]	;G get the current FOR state
 11152                                  	;;mov	[es:6],bl	; MSDOS 3.3
 11153                                  				;G save it in the batch segment
 11154                                  	;mov	[es:7],bl	; MSDOS 6.0 	
 11155 00000857 26881E0700              	mov	[es:BATCHSEGMENT.BatForFlag],bl
 11156 0000085C F6C3FF                  	test	bl,-1		;G are we in a FOR?
 11157 0000085F 7406                    	jz	short FOR_NOT_ON ;G no, for segment set to 0	
 11158                                  	;mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11159                                  	;mov	byte [ForFlag],0 ;G reset forflag
 11160                                  	; 26/07/2024
 11161 00000861 A2[9401]                	mov	[ForFlag],al ; 0
 11162 00000864 A1[9501]                	mov	ax,[ForPtr]	;G yes, get current FOR segment	
 11163                                  FOR_NOT_ON:
 11164                                  	;;mov	[es:4],ax	; MSDOS 3.3
 11165                                  				;G save FOR segment in batch segment
 11166                                  	;mov	[es:5],ax	; MSDOS 6.0		
 11167 00000867 26A30500                	mov	[es:BATCHSEGMENT.BatForPtr],ax	
 11168 0000086B 31C0                    	xor	ax,ax
 11169 0000086D A3[9501]                	mov	[ForPtr],ax	;G make sure for segment is not active
 11170 00000870 8A1E[8801]              	mov	bl,[EchoFlag]
 11171 00000874 1F                      	pop	ds
 11172                                  	;mov	[es:1],bl 
 11173                                  				 ;G save echo state of parent
 11174 00000875 26881E0100              	mov	[es:BATCHSEGMENT.BatEchoFlag],bl
 11175                                  ;SR;
 11176                                  ; Initialize the new BatchEOF flag we have added to 0
 11177                                  
 11178                                  	; MSDOS 6.0
 11179                                  	;mov	byte [es:2],0
 11180 0000087A 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 11181                                  
 11182                                  	;mov	[es:08h],ax  ; MSDOS 6.0
 11183 00000880 26A30800                	mov	[es:BATCHSEGMENT.BatSeek],ax ; point to beginning of file
 11184                                  	;mov	[es:0Ah],ax  ; MSDOS 6.0	
 11185 00000884 26A30A00                	mov	[es:BATCHSEGMENT.BatSeek+2],ax
 11186                                  
 11187                                  ; Initialize pointers
 11188                                  
 11189 00000888 48                      	dec	ax		; put -1 into AX
 11190                                  	;;mov	di,0Bh  ; MSDOS 3.3
 11191                                  				; point to parm area
 11192                                  	;mov	di,0Ch	; MSDOS 6.0
 11193 00000889 BF0C00                  	mov	di,BATCHSEGMENT.BatParm
 11194 0000088C 89FB                    	mov	bx,di
 11195 0000088E B90A00                  	mov	cx,10
 11196 00000891 F3AB                    	rep stosw		; Init to no parms
 11197                                  
 11198                                  ; Move in batch file name
 11199                                  
 11200 00000893 89D1                    	mov	cx,dx
 11201 00000895 F3A4                    	rep	movsb
 11202                                  
 11203                                  ; Now copy the command line into batch segment, parsing the arguments along
 11204                                  ; the way. Segment will look like this:
 11205                                  ;
 11206                                  ;   <arg0>CR<arg1>CR...<arg9>CR<arg10>CR...<ARGn>CR 0
 11207                                  ;
 11208                                  ; or, in the case of fewer arguments:
 11209                                  ;
 11210                                  ;   <arg0>CR<arg1>CR...<arg6>CR CR CR ... CR 0
 11211                                  
 11212 00000897 BE[2689]                	mov	si,COMBUF+2
 11213                                  	;mov	cx,10		; at most 10 arguments
 11214                                  	; 07/06/2023
 11215 0000089A B10A                    	mov	cl,10
 11216                                  EACHPARM:
 11217 0000089C E8411D                  	call	scanoff		; skip to argument
 11218                                  
 11219                                  ; AL is first non-delimiter. DS:SI points to char = AL
 11220                                  
 11221 0000089F 3C0D                    	cmp	al,0Dh		; end of road?
 11222 000008A1 741D                    	jz	short HAVPARM	; yes, no more arguments
 11223                                  
 11224                                  ; If CX = 0 then we have stored the most parm we can. Skip store
 11225                                  
 11226 000008A3 E306                    	jcxz	MOVPARM		; Only first 10 parms get pointers
 11227                                  
 11228                                  ; Go into allocated piece and stick in new argument pointer.
 11229                                  
 11230 000008A5 26893F                  	mov	[es:bx],di	; store batch pointer
 11231 000008A8 83C302                  	add	bx,2		; advance arg counter
 11232                                  
 11233                                  ; Move the parameter into batch segment
 11234                                  
 11235                                  MOVPARM:
 11236 000008AB AC                      	lodsb			; get byte
 11237 000008AC E8391D                  	call	DELIM		; if delimiter
 11238 000008AF 7407                    	jz	short ENDPARM	; then done with parm
 11239 000008B1 AA                      	stosb			; store byte
 11240 000008B2 3C0D                    	cmp	al,0Dh		; if CR then not delimiter
 11241 000008B4 740A                    	jz	short HAVPARM	; but end of parm list, finish
 11242 000008B6 EBF3                    	jmp	short MOVPARM
 11243                                  
 11244                                  ; We have copied a parameter up until the first separator.
 11245                                  ; Terminate it with CR.
 11246                                  
 11247                                  ENDPARM:
 11248 000008B8 B00D                    	mov	al,0Dh
 11249 000008BA AA                      	stosb
 11250 000008BB E3DF                    	jcxz	EACHPARM	; if no parameters, don't dec
 11251 000008BD 49                      	dec	cx		; remember that we've seen one.	
 11252 000008BE EBDC                    	jmp	short EACHPARM
 11253                                  
 11254                                  ; We have parsed the entire line. Terminate the arg list
 11255                                  
 11256                                  HAVPARM:
 11257 000008C0 30C0                    	xor	al,al		; Nul terminate the parms
 11258 000008C2 AA                      	stosb
 11259                                  
 11260                                  ; Now we know EXACTLY how big the BATCH segment is. Round up size (from DI)
 11261                                  ; into paragraphs and setblock to the appropriate size
 11262                                  
 11263 000008C3 8D5D0F                  	lea	bx,[di+15]
 11264 000008C6 B104                    	mov	cl,4
 11265 000008C8 D3EB                    	shr	bx,cl
 11266 000008CA B44A                    	mov	ah,4Ah
 11267                                  	;mov	ah,SETBLOCK ; 4Ah
 11268 000008CC CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 11269                                  			; ES = segment address of block	to change
 11270                                  			; BX = new size	in paragraphs
 11271 000008CE 07                      	pop	es
 11272 000008CF 06                      	push	es
 11273 000008D0 1F                      	pop	ds		; Simply batch FCB setup
 11274 000008D1 833E[8E01]FF            	cmp	word [SingleCom],-1 ; 0FFFFh
 11275 000008D6 7506                    	jne	short NOBATSING
 11276 000008D8 C706[8E01]F0FF          	mov	word [SingleCom],0FFF0h ; Flag single command BATCH job
 11277                                  
 11278                                  NOBATSING:
 11279                                  
 11280                                  ; Enter the batch file with the current echo state
 11281                                  
 11282 000008DE 58                      	pop	ax		; Get original echo state
 11283 000008DF A2[8801]                	mov	[EchoFlag],al	; restore it
 11284 000008E2 E91FF8                  	jmp	TCOMMAND
 11285                                  
 11286                                  ; The following is executed if there isn't enough memory for batch segment
 11287                                  
 11288                                  NO_MEMORY:
 11289 000008E5 5A                      	pop	dx		; even up our stack 
 11290 000008E6 58                      	pop	ax
 11291 000008E7 58                      	pop	ax
 11292 000008E8 E829FE                  	call	ALLOC_TPA	; reallocate memory
 11293                                  
 11294                                  	; 12/02/2023
 11295                                  	; MSDOS 3.3
 11296                                  	;mov	dx,INSFMEMMESPTR
 11297                                  	;jmp	CERROR
 11298                                  
 11299                                  	; MSDOS 6.0
 11300                                  	;mov	byte [msg_disp_class],1
 11301 000008EB C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class
 11302                                  				;AN000; set up extended error msg class
 11303                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 11304 000008F0 BA[1B7F]                	mov	dx,extend_buf_ptr
 11305                                  	;			;AC000; get extended message pointer
 11306                                  	;mov	word [extend_buf_ptr],8
 11307 000008F3 C706[1B7F]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 11308                                  				;AN000; get message number in control block
 11309 000008F9 E95820                  	jmp	cerror		;g print error message and go...
 11310                                  
 11311                                  ; =============== S U B	R O U T	I N E =======================================
 11312                                  
 11313                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11314                                  BATCHOFF:
 11315 000008FC 50                      	push	ax
 11316 000008FD 06                      	push	es
 11317 000008FE 1E                      	push	ds
 11318 000008FF 53                      	push	bx
 11319                                  
 11320 00000900 2E8E06[C58A]            	mov	es,[cs:RESSEG]
 11321                                  	;mov	ds,[cs:RESSEG]
 11322                                  	; 26/07/2024
 11323 00000905 06                      	push	es
 11324 00000906 1F                      	pop	ds
 11325                                  
 11326 00000907 A1[3401]                	mov	ax,[Batch]	; Free the batch segment
 11327 0000090A 09C0                    	or	ax,ax
 11328 0000090C 7442                    	jz	short NOTFREE
 11329                                  
 11330 0000090E 06                      	push	es
 11331 0000090F 8EC0                    	mov	es,ax
 11332 00000911 F606[8801]01            	test	byte [EchoFlag],1
 11333                                  				;G Is echo on?
 11334 00000916 7505                    	jnz	short ECHO_LAST_LINE
 11335                                  				;G Yes - echo last line in file
 11336                                  	;mov	byte [SUPPRESS],0
 11337 00000918 C606[8901]00            	mov	byte [Suppress],NO_ECHO
 11338                                  				;G no - don't echo last line in file	
 11339                                  ECHO_LAST_LINE:
 11340                                  	;mov	bl,[es:1]
 11341 0000091D 268A1E0100              	mov	bl,[es:BATCHSEGMENT.BatEchoFlag]
 11342                                  				; G get echo state
 11343 00000922 881E[8801]              	mov	[EchoFlag],bl
 11344                                  				; G  and restore it
 11345                                  	;;mov	bx,[es:4]  ; MSDOS 3.3
 11346                                  	;mov	bx,[es:5]  ; MSDOS 6.0
 11347 00000926 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr]
 11348                                  				;G Get FOR segment
 11349 0000092B 891E[9501]              	mov	[ForPtr],bx	;G  and restore it
 11350                                  	;;mov	bl,[es:6]  ; MSDOS 3.3
 11351                                  	;mov	bl,[es:7]  ; MSDOS 6.0	
 11352 0000092F 268A1E0700              	mov	bl,[es:BATCHSEGMENT.BatForFlag]
 11353                                  				;G Get FOR flag
 11354 00000934 881E[9401]              	mov	[ForFlag],bl
 11355                                  				;G  and restore it
 11356                                  	;;mov	bx,[es:2] ; MSDOS 3.3
 11357                                  	;mov	bx,[es:3] ; MSDOS 6.0	
 11358 00000938 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 11359                                  				;G  Get old batch segment
 11360                                  
 11361 0000093D B449                    	mov	ah,49h
 11362                                  	;mov	ah,DEALLOC ; 49h
 11363 0000093F CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 11364                                  			; ES = segment address of area to be freed
 11365 00000941 07                      	pop	es
 11366 00000942 891E[9B01]              	mov	[Next_Batch],bx	;G reset batch segment	
 11367 00000946 26FF0E[9701]            	dec	word [es:Nest]
 11368 0000094B 31C0                    	xor	ax,ax
 11369 0000094D A3[3401]                	mov	[Batch],ax	; No batch in progress
 11370                                  NOTFREE:
 11371 00000950 5B                      	pop	bx
 11372 00000951 1F                      	pop	ds
 11373 00000952 07                      	pop	es
 11374 00000953 58                      	pop	ax
 11375 00000954 C3                      	retn
 11376                                  
 11377                                  ; =============== S U B	R O U T	I N E =======================================
 11378                                  
 11379                                  	; 12/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11380                                  
 11381                                  ; StrCpy - copy string, checking count in CX against COMBUFLEN
 11382                                  ;	Entry : DS:SI ==> source string
 11383                                  ;		ES:DI ==> destination string
 11384                                  ;		CX = current length of destination string
 11385                                  ;	Exit  : string copied, CX updated, Carry set if length limit exceeded
 11386                                  
 11387                                  	; 12/02/2023	
 11388                                  	; MSDOS 3.3
 11389                                  ;STRCPY:
 11390                                  	;push	ax
 11391                                  ;CCYCLE:
 11392                                  	;lodsb
 11393                                  	;stosb
 11394                                  	;or	al,al
 11395                                  	;jnz	short CCYCLE
 11396                                  	;pop	ax
 11397                                  	;retn
 11398                                  
 11399                                  ;Procedure StrCpy,NEAR
 11400                                  
 11401                                  	; 12/02/2023
 11402                                  	; MSDOS 6.0
 11403                                  STRCPY:
 11404 00000955 50                      	push	ax
 11405                                  ccycle:
 11406 00000956 AC                      	lodsb
 11407 00000957 41                      	inc	cx
 11408                                  	;cmp	cx,128
 11409 00000958 81F98000                	cmp	cx,COMBUFLEN
 11410                                  	;jb	short ccopy
 11411                                  	;stc			; set carry to signal error
 11412                                  	;jmp	short ccend
 11413                                  	; 12/02/2023
 11414 0000095C F5                      	cmc
 11415 0000095D 7205                    	jc	short ccend
 11416                                  ccopy:
 11417 0000095F AA                      	stosb
 11418 00000960 08C0                    	or	al,al
 11419 00000962 75F2                    	jnz	short ccycle
 11420                                  ccend:
 11421 00000964 49                      	dec	cx		; discount extra byte
 11422 00000965 4F                      	dec	di		; back up pointer
 11423 00000966 58                      	pop	ax
 11424 00000967 C3                      	retn			; return carry clear
 11425                                  
 11426                                  ;EndProc StrCpy
 11427                                  
 11428                                  ;============================================================================
 11429                                  ; TBATCH2.ASM, MSDOS 6.0, 1991
 11430                                  ;============================================================================
 11431                                  ; 12/10/2018 - Retro DOS v3.0
 11432                                  
 11433                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0892h
 11434                                  
 11435                                  ; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11436                                  
 11437                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 0977h
 11438                                  
 11439                                  ; =============== S U B	R O U T	I N E =======================================
 11440                                  
 11441                                  ;Break	<GetBatByt - retrieve a byte from the batch file>
 11442                                  
 11443                                  ; Get one byte from the batch file and return it in AL. End-of-file returns
 11444                                  ; <CR> and ends batch mode. DS must be set to resident segment.
 11445                                  ; AH, DX destroyed.
 11446                                  
 11447                                  GETBATBYT:
 11448 00000968 53                      	push	bx
 11449 00000969 51                      	push	cx
 11450 0000096A 1E                      	push	ds
 11451 0000096B F606[7E01]FF            	test	byte [Batch_Abort],-1
 11452                                  	;jnz	short BATEOF
 11453                                  	; 14/02/2023
 11454 00000970 7403                    	jz	short getbatbyt1
 11455 00000972 E9D100                  	jmp	BATEOF
 11456                                  getbatbyt1:
 11457 00000975 F706[3401]FFFF          	test	word [Batch],-1
 11458                                  	;jz	short BATEOF
 11459                                  	; 14/02/2023
 11460 0000097B 7503                    	jnz	short getbatbyt2
 11461 0000097D E9C600                  	jmp	BATEOF
 11462                                  getbatbyt2:
 11463 00000980 06                      	push	es
 11464 00000981 8E06[3401]              	mov	es,[Batch]
 11465                                  
 11466                                  	; MSDOS 6.0
 11467                                  ;M020;
 11468                                  ;Check if we have already reached EOF (BatchEOF flag set. Then, we do not
 11469                                  ;try to read from the batchfile again.
 11470                                  
 11471                                  	;cmp	byte [es:2],0
 11472 00000985 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11473                                  				;already reached EOF?	;M020
 11474 0000098B 7403                    	jz	short not_eof	;no, read batch file	;M020
 11475 0000098D E99C00                  	jmp	At_EOF		;yes, no more reads	;M020
 11476                                  not_eof:						;M020
 11477                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11478                                  	;add	word [es:8],1	; MSDOS 6.0
 11479 00000990 268306080001            	add	word [es:BATCHSEGMENT.BatSeek],1
 11480                                  	;adc	word [es:10],0	; MSDOS 6.0
 11481 00000996 2683160A0000            	adc	word [es:BATCHSEGMENT.BatSeek+2],0
 11482 0000099C 07                      	pop	es
 11483                                  
 11484                                  ; See if we have bytes buffered...
 11485                                  
 11486 0000099D 8CC8                    	mov	ax,cs
 11487 0000099F 8ED8                    	mov	ds,ax
 11488 000009A1 8B1E[CC95]              	mov	bx,[BATBUFPOS]
 11489 000009A5 83FBFF                  	cmp	bx,-1
 11490 000009A8 7540                    	jnz	short UNBUF
 11491                                  
 11492                                  ; There are no bytes in the buffer. Let's try to fill it up.
 11493                                  
 11494 000009AA BA[CE95]                	mov	dx,BATBUF
 11495 000009AD 8B0E[6384]              	mov	cx,[BATBUFLEN] ; max to read.
 11496 000009B1 8B1E[F98D]              	mov	bx,[BATHAND]
 11497                                  	; 14/02/2023
 11498 000009B5 B43F                    	mov	ah,3Fh
 11499                                  	;mov	ah,READ ; 3Fh	; Get one more byte from batch file
 11500 000009B7 CD21                    	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 11501                                  			; BX = file handle,CX = number	of bytes to read
 11502                                  			; DS:DX	-> buffer
 11503                                  	; MSDOS 6.0
 11504 000009B9 7321                    	jnc	short bat_read_ok	;AN022; if no error - continue
 11505                                  	;invoke	get_ext_error_number	;AN022; get the error
 11506 000009BB E83413                  	call	get_ext_error_number
 11507 000009BE 1E                      	push	ds			;AN022; save local segment
 11508 000009BF 8E1E[C58A]              	mov	ds,[RESSEG]		;AN022; get resident segment
 11509                                  	;assume ds:resgroup		;AN022;
 11510 000009C3 89C2                    	mov	dx,ax			;AN022; put error in DX
 11511                                  	;invoke	output_batch_name	;AN022; set up to print the error
 11512 000009C5 E861FB                  	call	output_batch_name
 11513 000009C8 1F                      	pop	ds			;AN022;
 11514                                  	;assume	ds:trangroup		;AN022;
 11515                                  	;invoke	std_eprintf		;AN022; print out the error
 11516 000009C9 E81B44                  	call	std_eprintf
 11517                                  	;mov	byte ptr combuf+2,end_of_line_in
 11518 000009CC C606[2689]0D            	mov	byte [COMBUF+2],END_OF_LINE_IN ; 0Dh
 11519                                  	;				;AN022; terminate the batch line for parsing
 11520                                  	;mov	byte ptr combuf+3,end_of_line_out 
 11521 000009D1 C606[2789]00            	mov	byte [COMBUF+3],END_OF_LINE_OUT ; 0
 11522                                  	;				;AN022; terminate the batch line for output
 11523                                  ;M020;
 11524                                  ;Old bug! We jump to BatEof from here without ds=RESGROUP. Probably, this
 11525                                  ;error is never hit (and it shouldn't be)
 11526                                  
 11527 000009D6 8E1E[C58A]              	mov	ds,[RESSEG]		; ds = RESGROUP ; M020
 11528 000009DA EB6A                    	jmp	short BATEOF		;AN022; terminate the batch file
 11529                                  bat_read_ok:				;AN022;
 11530                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11531 000009DC 89C1                    	mov	cx,ax
 11532                                  	;jcxz	TURN_OFF ; MSDOS 3.3
 11533                                  	; 14/02/2023
 11534 000009DE E320                    	jcxz	BATEOFDS ; MSDOS 6.0
 11535 000009E0 890E[EE95]              	mov	[BATBUFEND],cx
 11536 000009E4 31DB                    	xor	bx,bx
 11537 000009E6 891E[CC95]              	mov	[BATBUFPOS],bx
 11538                                  
 11539                                  	; Buffered bytes!
 11540                                  UNBUF:
 11541 000009EA 8A87[CE95]              	mov	al,[BATBUF+bx]		; get next byte
 11542 000009EE 43                      	inc	bx
 11543 000009EF 3B1E[EE95]              	cmp	bx,[BATBUFEND]		; beyond end of buffer?
 11544 000009F3 7203                    	jb	short SETBUFPOS
 11545 000009F5 BBFFFF                  	mov	bx,-1
 11546                                  SETBUFPOS:
 11547 000009F8 891E[CC95]              	mov	[BATBUFPOS],bx
 11548 000009FC 3C1A                    	cmp	al,1Ah			; ^Z for termination?
 11549 000009FE 7575                    	jne	short GETBYTEDONE
 11550                                  
 11551                                  ;We get here only when we hit an EOF
 11552                                  	
 11553                                  	; MSDOS 6.0
 11554                                  BATEOFDS:
 11555                                  ;SR;
 11556                                  ; HACK!!! A massive hack being put in here to get batch processing to work
 11557                                  ;properly on EOF. Previously, a CR was returned and batch processing turned
 11558                                  ;off the moment we hit an EOF. Unfortunately, if the last line had no CR-LF,
 11559                                  ;batch processing is turned off before the last line is processed and so 
 11560                                  ;this line would never be executed. 
 11561                                  ;   	To fix this, a new flag BatchEOF has been introduced. This flag is
 11562                                  ;set to 4 if there is no CR-LF before the EOF -- this is determined by looking
 11563                                  ;at the buffer contents. If there is no LF ( we assume that presence of LF
 11564                                  ;indicated a CR-LF combination), then we set BatchEOF to 4 and return a 
 11565                                  ;fake CR to the caller. This decrements BatchEOF. On the next call to this
 11566                                  ;routine, BatchEOF is decremented to 2 and a fake lF is returned. On the 
 11567                                  ;third call, BatchEOF becomes zero and batch processing is turned off,
 11568                                  ;now that the last line has been processed. If the EOF is the first char read into the buffer 
 11569                                  ;during this call, and there was a CR-LF previously, we are going to fake
 11570                                  ;another redundant CR-LF. There is no work-around I can think of.
 11571                                  ; 	I would love to restructure this entire routine and its caller to
 11572                                  ;make the flow really easy to understand but I guess this will have to wait.
 11573                                  ;
 11574 00000A00 06                      	push	es
 11575 00000A01 8E06[C58A]              	mov	es,[RESSEG]
 11576                                  ;SR;
 11577                                  ; If we had already set the BatchEOF flag on a previous call (BatchEOF == 2
 11578                                  ;or BatchEOF == 1 now), then do not do the LF check.
 11579                                  ;
 11580 00000A05 268E06[3401]            	mov	es,[es:Batch]
 11581                                  	;cmp	byte [es:2],0
 11582 00000A0A 26803E020000            	cmp	byte [es:BATCHSEGMENT.BatchEOF],0
 11583 00000A10 7516                    	jnz	short crpresent
 11584                                  
 11585                                  	;inc	byte [es:2]
 11586 00000A12 26FE060200              	inc	byte [es:BATCHSEGMENT.BatchEOF]
 11587                                  					;match the dec following
 11588 00000A17 8B1E[EE95]              	mov	bx,[BATBUFEND]
 11589 00000A1B 80BF[CD95]0A            	cmp	byte [bx+BATBUF-1],0Ah	;was a LF present?
 11590 00000A20 7406                    	je	short crpresent		;yes, no need to fake it
 11591                                  
 11592                                  	;add	byte [es:2],3
 11593 00000A22 268006020003            	add	byte [es:BATCHSEGMENT.BatchEOF],3
 11594                                  					;BatchEOF == 4 to fake CR-LF
 11595                                  crpresent:
 11596                                  ;;	;pop	es
 11597                                  
 11598                                  	;ASSUME	DS:TranGroup
 11599                                  	; 14/02/2023
 11600 00000A28 8E1E[C58A]              	mov	ds,[RESSEG]
 11601                                  	;ASSUME	DS:ResGroup
 11602                                  ;SR;
 11603                                  ; The shift operation is done here to replace the decrement. This is because
 11604                                  ;we can jump to this label directly from above when bogus calls are made to
 11605                                  ;this routine even after batch processing is turned off. The shift ensures
 11606                                  ;maintains the following invariance : 4 -> 2; 2 -> 1 ; 1 -> 0; 0 -> 0. Thus,
 11607                                  ;it is used as a decrement and also as a NOP to just fall through on bogus 
 11608                                  ;calls.
 11609                                  ;	We turn batch processing off if BatchEOF == 1 or BatchEOF == 0.
 11610                                  ;BatchEOF == 1 when we fall through from BatEOFDS and BatchEOF == 0 on a 
 11611                                  ;direct jump to BATEOF. If BatchEOF == 4, we return a fake CR-LF without 
 11612                                  ;turning batch processing off.
 11613                                  
 11614                                  At_EOF:					;new label added ;M020
 11615                                  	;shr	byte [es:2],1
 11616 00000A2C 26D02E0200              	shr	byte [es:BATCHSEGMENT.BatchEOF],1
 11617                                  					;decrement the flag
 11618 00000A31 7412                    	jz	short turn_off		;zero,turn batch off
 11619                                  	;cmp	byte [es:2],1
 11620 00000A33 26803E020001            	cmp	byte [es:BATCHSEGMENT.BatchEOF],1				
 11621 00000A39 7405                    	jz	short ret_lf		;BatchEOF was 2, return LF
 11622                                  ;
 11623                                  ;BatchEOF == 4, indicates return fake CR now and fake LF next.
 11624                                  ;
 11625 00000A3B B00D                    	mov	al,0Dh			;return fake CR.
 11626 00000A3D 07                      	pop	es
 11627 00000A3E EB35                    	jmp	short GETBYTEDONE
 11628                                  ret_lf:
 11629 00000A40 B00A                    	mov	al,0Ah			;return fake LF
 11630 00000A42 07                      	pop	es
 11631 00000A43 EB30                    	jmp	short GETBYTEDONE		
 11632                                  turn_off:
 11633 00000A45 07                      	pop	es
 11634                                  ;BATEOF:
 11635                                  	; MSDOS 3.3
 11636                                  ;TURN_OFF:
 11637                                  	;mov	ds,[RESSEG]
 11638                                  
 11639                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11640                                  BATEOF:
 11641 00000A46 E8B3FE                  	call	BATCHOFF
 11642 00000A49 E8CC02                  	call	BATCLOSE
 11643                                  
 11644                                  ;;;	mov	BatchEOF,0	;make sure BatchEOF = 0
 11645                                  
 11646                                  ;SR; BugBug
 11647                                  ; There is a good reason why this carriage return is being returned here. 
 11648                                  ;This was part of the old code, thanks to some brain-damaged coding. Because,
 11649                                  ;of the way the caller is structured, a fake CR has to be returned again on
 11650                                  ;EOF to ensure the termination of the caller's loop. If echo is on, this
 11651                                  ;results in an extra linefeed after the batchfile is run if the last line of
 11652                                  ;the batchfile already had a CR-LF. 
 11653                                  ;NB: Do not confuse this with the faked CR. The fake CR-LF was to mark
 11654                                  ;the end-of-line. This CR is to mark the end-of-file.
 11655                                  
 11656 00000A4C B00D                    	mov	al,0Dh			; If end-of-file, then end of line
 11657 00000A4E F606[7E01]FF            	test	byte [Batch_Abort],-1
 11658 00000A53 C606[7E01]00            	mov	byte [Batch_Abort],0
 11659 00000A58 7407                    	jz	short CONT_GET_BYT
 11660 00000A5A BF[2689]                	mov	di,COMBUF+2		; reset pointer to beginning of buffer
 11661 00000A5D 31C9                    	xor	cx,cx			; zero line length
 11662 00000A5F EB14                    	jmp	short GETBYTEDONE
 11663                                  CONT_GET_BYT:
 11664 00000A61 833E[8E01]F0            	cmp	word [SingleCom],0FFF0h ; See if we need to set SINGLECOM
 11665 00000A66 750D                    	jne	short GETBYTEDONE
 11666 00000A68 833E[9701]00            	cmp	word [Nest],0		;G See if we have nested batch files
 11667 00000A6D 7506                    	jnz	short GETBYTEDONE	;G Yes - don't exit just yet
 11668 00000A6F C706[8E01]FFFF          	mov	word [SingleCom],0FFFFh	; -1 ; Cause termination
 11669                                  GETBYTEDONE:
 11670 00000A75 1F                      	pop	ds
 11671 00000A76 59                      	pop	cx
 11672 00000A77 5B                      	pop	bx
 11673 00000A78 C3                      	retn
 11674                                  
 11675                                  ; ---------------------------------------------------------------------------
 11676                                  
 11677                                  ;break	<$If - conditional execution>
 11678                                  
 11679                                  	; 17/04/2023
 11680                                  ;IFERRORP:
 11681                                  ;	pop	ax
 11682                                  ;IFERROR:
 11683                                  ;	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 11684                                  ;FORERROR:
 11685                                  ;	mov	dx,SYNTMES_PTR
 11686                                  ;	jmp	cerror
 11687                                  
 11688                                  ; ---------------------------------------------------------------------------
 11689                                  
 11690                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 11691                                  _$IF:
 11692                                  	; MSDOS 6.0
 11693                                  ; Turn off any pipes in progress.
 11694 00000A79 1E                      	push	ds			;AN004; save local DS
 11695 00000A7A 8E1E[C58A]              	mov	ds,[RESSEG]		;AN004; get resident segment
 11696                                  	;assume	ds:resgroup		;AN004;
 11697 00000A7E 803E[0102]00            	cmp	byte [PipeFiles],0	;AN004; Only turn off if present.
 11698 00000A83 7403                    	jz	short IFNoPipe		;AN004; no pipe - continue
 11699                                  	;invoke	PipeDel 		;AN004; turn off piping
 11700 00000A85 E86922                  	call	PIPEDEL	
 11701                                  IFNoPipe:				;AN004;
 11702 00000A88 1F                      	pop	ds			;AN004; get local DS back
 11703                                  	;assume	ds:trangroup		;AN004;
 11704                                  
 11705                                  	; MSDOS 3.3 (&MSDOS 6.0)
 11706 00000A89 C606[D88A]00            	mov	byte [IFNOTFLAG],0
 11707 00000A8E C706[A094]0000          	mov	word [IF_NOT_COUNT],0
 11708 00000A94 BE8100                  	mov	si,81h
 11709                                  IFREENT:
 11710 00000A97 E8461B                  	call	scanoff
 11711 00000A9A 3C0D                    	cmp	al,0Dh
 11712 00000A9C 743C                    	je	short IFERROR
 11713 00000A9E 89F5                    	mov	bp,si
 11714 00000AA0 BF[B482]                	mov	di,IFTAB		; Prepare to search if table	
 11715                                  	;mov	ch,0
 11716                                  	; 17/04/2023
 11717 00000AA3 30ED                    	xor	ch,ch
 11718                                  IFINDCOM:
 11719 00000AA5 89EE                    	mov	si,bp
 11720 00000AA7 8A0D                    	mov	cl,[di]
 11721 00000AA9 47                      	inc	di
 11722 00000AAA E33E                    	jcxz	IFSTRING
 11723 00000AAC EB02                    	jmp	short FIRSTCOMP
 11724                                  IFCOMP:
 11725 00000AAE 7510                    	jnz	short IF_DIF
 11726                                  FIRSTCOMP:
 11727 00000AB0 AC                      	lodsb
 11728 00000AB1 268A25                  	mov	ah,[es:di]
 11729 00000AB4 47                      	inc	di
 11730 00000AB5 38E0                    	cmp	al,ah
 11731 00000AB7 7405                    	je	short IFLP
 11732 00000AB9 80CC20                  	or	ah,20h			; Try lower case
 11733 00000ABC 38E0                    	cmp	al,ah
 11734                                  IFLP:
 11735 00000ABE E2EE                    	loop	IFCOMP
 11736                                  IF_DIF:
 11737 00000AC0 9F                      	lahf
 11738 00000AC1 01CF                    	add	di,cx			; Bump to next position without affecting flags
 11739 00000AC3 8B1D                    	mov	bx,[di]			; Get handler address
 11740 00000AC5 47                      	inc	di
 11741 00000AC6 47                      	inc	di
 11742 00000AC7 9E                      	sahf
 11743 00000AC8 75DB                    	jnz	short IFINDCOM
 11744 00000ACA AC                      	lodsb
 11745 00000ACB 3C0D                    	cmp	al,0Dh
 11746                                  IFERRJ:
 11747 00000ACD 740B                    	jz	short IFERROR
 11748 00000ACF E8161B                  	call	DELIM
 11749 00000AD2 75D1                    	jnz	short IFINDCOM
 11750 00000AD4 E8091B                  	call	scanoff
 11751 00000AD7 FFE3                    	jmp	bx
 11752                                  
 11753                                  	; 17/04/2023
 11754                                  IFERRORP:
 11755 00000AD9 58                      	pop	ax
 11756                                  IFERROR:
 11757                                  	; 14/02/2023 - Retro DOS v4.0 COMMAND.COM
 11758                                  FORERROR:
 11759 00000ADA BA[B37F]                	mov	dx,SYNTMES_PTR
 11760 00000ADD E9741E                  	jmp	cerror
 11761                                  
 11762                                  IFNOT:
 11763 00000AE0 F616[D88A]              	not	byte [IFNOTFLAG]
 11764 00000AE4 FF06[A094]              	inc	word [IF_NOT_COUNT]
 11765 00000AE8 EBAD                    	jmp	short IFREENT
 11766                                  
 11767                                  ; We are comparing two strings for equality. First, find the end of the
 11768                                  ; first string.
 11769                                  
 11770                                  IFSTRING:
 11771 00000AEA 56                      	push	si			; save away pointer for later compare
 11772 00000AEB 31C9                    	xor	cx,cx			; count of chars in first string
 11773                                  FIRST_STRING:
 11774 00000AED AC                      	lodsb				; get character
 11775 00000AEE 3C0D                    	cmp	al,0Dh			; end of line?
 11776 00000AF0 74E7                    	jz	short IFERRORP		; yes => error
 11777 00000AF2 E8F31A                  	call	DELIM			; is it a delimiter?
 11778 00000AF5 7403                    	jz	short EQUAL_CHECK 	; yes, go find equal sign
 11779 00000AF7 41                      	inc	cx			; remember 1 byte for the length
 11780 00000AF8 EBF3                    	jmp	short FIRST_STRING 	; go back for more
 11781                                  EQUAL_CHECK:
 11782 00000AFA 3C3D                    	cmp	al,'='			; is char we have an = sign?
 11783 00000AFC 7407                    	je	short EQUAL_CHECK2 	; yes, go find second one.
 11784 00000AFE 3C0D                    	cmp	al,0Dh			; end of line?
 11785 00000B00 74D7                    	je	short IFERRORP		; yes, syntax error
 11786 00000B02 AC                      	lodsb				; get next char
 11787 00000B03 EBF5                    	jmp	short EQUAL_CHECK
 11788                                  
 11789                                  ; The first = has been found. The next char had better be an = too.
 11790                                  
 11791                                  EQUAL_CHECK2:
 11792 00000B05 AC                      	lodsb				; get potential = char
 11793 00000B06 3C3D                    	cmp	al,'='			; is it good?	
 11794                                  	;jnz	short IFERRPJ		; no, error
 11795                                  	; 17/04/2023
 11796 00000B08 75CF                    	jne	short IFERRORP
 11797                                  
 11798                                  ; Find beginning of second string.
 11799                                  
 11800 00000B0A E8D31A                  	call	scanoff
 11801 00000B0D 3C0D                    	cmp	al,0Dh
 11802                                  	;jz	short IFERRPJ
 11803                                  	; 17/04/2023
 11804 00000B0F 74C8                    	je	short IFERRORP
 11805 00000B11 5F                      	pop	di
 11806                                  
 11807                                  ; DS:SI points to second string
 11808                                  ; CX has number of chars in first string
 11809                                  ; ES:DI points to first string
 11810                                  
 11811 00000B12 F3A6                    	repe	cmpsb
 11812 00000B14 7414                    	jz	short MATCH		; match found!
 11813                                  
 11814                                  ; No match. Let's find out what was wrong. The character that did not match
 11815                                  ; has been advanced over. Let's back up to it.
 11816                                  
 11817 00000B16 4E                      	dec	si
 11818                                  
 11819                                  ; If it is EOL, then syntax error
 11820                                  
 11821 00000B17 803C0D                  	cmp	byte [si],0Dh
 11822                                  	;jz	short IFERRJ
 11823                                  	; 17/04/2023
 11824 00000B1A 74BE                    	je	short IFERROR
 11825                                  
 11826                                  ; Advance pointer over remainder of unmatched text to next delimiter
 11827                                  
 11828                                  SKIPSTRINGEND:
 11829 00000B1C AC                      	lodsb
 11830                                  NOTMATCH:
 11831 00000B1D 3C0D                    	cmp	al,0Dh
 11832                                  IFERRORJ2:
 11833                                  	;jz	short IFERRJ
 11834                                  	; 17/04/2023
 11835 00000B1F 74B9                    	jz	short IFERROR
 11836 00000B21 E8C41A                  	call	DELIM
 11837 00000B24 75F6                    	jnz	short SKIPSTRINGEND
 11838                                  
 11839                                  ; Signal that we did NOT have a match
 11840                                  
 11841 00000B26 B0FF                    	mov	al,-1
 11842 00000B28 EB37                    	jmp	short IFRET
 11843                                  
 11844                                  	; 17/04/2023
 11845                                  ;IFERRPJ:
 11846                                  	;jmp	IFERRORP
 11847                                  
 11848                                  ; The compare succeeded. Was the second string longer than the first?
 11849                                  ; We do this by seeing if the next char is a delimiter.
 11850                                  
 11851                                  MATCH:
 11852 00000B2A AC                      	lodsb
 11853 00000B2B E8BA1A                  	call	DELIM
 11854 00000B2E 75ED                    	jnz	short NOTMATCH ; not same.
 11855 00000B30 30C0                    	xor	al,al
 11856 00000B32 EB2D                    	jmp	short IFRET
 11857                                  
 11858                                  ; ---------------------------------------------------------------------------
 11859                                  
 11860                                  IFEXISTS:
 11861                                  
 11862                                  IFEXIST_ATTR	EQU	ATTR_HIDDEN+ATTR_SYSTEM  ; 2+4 = 6
 11863                                  
 11864                                  ;MOREDELIM:
 11865 00000B34 AC                      	lodsb
 11866 00000B35 E8B01A                  	call	DELIM
 11867 00000B38 75FA                    	jnz	short IFEXISTS
 11868                                  	;jnz	short MOREDELIM
 11869                                  
 11870 00000B3A BA[CE8B]                	mov	dx,DIRBUF
 11871 00000B3D B8001A                  	mov	ax,1A00h
 11872                                  	;mov	ax,Set_DMA*256 ; 1A00h
 11873 00000B40 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 11874                                  			; DS:DX	-> disk	transfer buffer
 11875 00000B42 BB0200                  	mov	bx,2	; if(0) [|not](|1) exist[1|2] file(2|3)
 11876 00000B45 031E[A094]              	add	bx,[IF_NOT_COUNT]
 11877                                  	;mov	ax,ARG_ARGV
 11878                                  	;mov	ax,ARG+ARG_UNIT.argv
 11879 00000B49 B8[548E]                	mov	ax,ARG
 11880 00000B4C E80326                  	call	argv_calc		; convert arg index to pointer
 11881 00000B4F 8B17                    	mov	dx,[bx]
 11882                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 11883                                  	;mov	cx,6
 11884 00000B51 B90600                  	mov	cx,IFEXIST_ATTR ; filetypes to search for
 11885 00000B54 B8004E                  	mov	ax,4E00h
 11886                                  	;mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 11887 00000B57 CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 11888                                  			; CX = search attributes
 11889                                  			; DS:DX	-> ASCIZ filespec
 11890                                  			; (drive,path, and wildcards allowed)
 11891 00000B59 7204                    	jc	short IF_EX_C ; carry is how to determine error
 11892 00000B5B 30C0                    	xor	al,al
 11893 00000B5D EB02                    	jmp	short IFRET
 11894                                  
 11895                                  	;nop
 11896                                  IF_EX_C:
 11897 00000B5F B0FF                    	mov	al,-1			; false 'n' fall through...
 11898                                  IFRET:
 11899 00000B61 F606[D88A]FF            	test	byte [IFNOTFLAG],-1 ; 0FFh
 11900 00000B66 7402                    	jz	short REALTEST
 11901 00000B68 F6D0                    	not	al
 11902                                  REALTEST:
 11903 00000B6A 08C0                    	or	al,al
 11904 00000B6C 7403                    	jz	short IFTRUE
 11905 00000B6E E993F5                  	jmp	TCOMMAND
 11906                                  
 11907                                  IFTRUE:
 11908 00000B71 E86C1A                  	call	scanoff
 11909 00000B74 89F1                    	mov	cx,si
 11910 00000B76 81E98100                	sub	cx,81h
 11911 00000B7A 280E8000                	sub	[80h],cl
 11912 00000B7E 8A0E8000                	mov	cl,[80h]
 11913 00000B82 880E[2589]              	mov	[COMBUF+1],cl
 11914 00000B86 BF[2689]                	mov	di,COMBUF+2
 11915 00000B89 FC                      	cld
 11916 00000B8A F3A4                    	rep	movsb
 11917 00000B8C B00D                    	mov	al,0Dh
 11918 00000B8E AA                      	stosb
 11919                                  
 11920                                  ; Signal that an IF was done. 
 11921                                  ; This prevents the redirections from getting lost.
 11922                                  
 11923 00000B8F 1E                      	push	ds
 11924 00000B90 8E1E[C58A]              	mov	ds,[RESSEG]
 11925 00000B94 C606[9301]FF            	mov	byte [IfFlag],-1
 11926 00000B99 1F                      	pop	ds
 11927                                  
 11928                                  ; Go do the command
 11929                                  
 11930 00000B9A E93AF7                  	jmp	DOCOM1
 11931                                  
 11932                                  ; ---------------------------------------------------------------------------
 11933                                  
 11934                                  IFERRORJ3:
 11935 00000B9D EB80                    	jmp	IFERRORJ2
 11936                                  
 11937                                  IFERLEV:
 11938 00000B9F B70A                    	mov	bh,10
 11939 00000BA1 30DB                    	xor	bl,bl
 11940                                  GETNUMLP:
 11941 00000BA3 AC                      	lodsb
 11942 00000BA4 3C0D                    	cmp	al,0Dh
 11943 00000BA6 74F5                    	je	short IFERRORJ3
 11944 00000BA8 E83D1A                  	call	DELIM
 11945 00000BAB 740C                    	jz	short GOTNUM
 11946 00000BAD 2C30                    	sub	al,'0'
 11947 00000BAF 86C3                    	xchg	al,bl
 11948 00000BB1 F6E7                    	mul	bh
 11949 00000BB3 00D8                    	add	al,bl
 11950 00000BB5 86C3                    	xchg	al,bl
 11951 00000BB7 EBEA                    	jmp	short GETNUMLP
 11952                                  GOTNUM:
 11953 00000BB9 1E                      	push	ds
 11954 00000BBA 8E1E[C58A]              	mov	ds,[RESSEG]
 11955 00000BBE 8A26[8501]              	mov	ah,[RetCode]
 11956 00000BC2 1F                      	pop	ds
 11957 00000BC3 30C0                    	xor	al,al
 11958 00000BC5 38DC                    	cmp	ah,bl
 11959 00000BC7 7398                    	jnb	short IFRET
 11960 00000BC9 FEC8                    	dec	al
 11961 00000BCB EB94                    	jmp	short IFRET
 11962                                  
 11963                                  ; ---------------------------------------------------------------------------
 11964                                  
 11965                                  ; Shift the parameters in the batch structure by 1 and set up the new argument.
 11966                                  ; This is a NOP if no batch in progress.
 11967                                  
 11968                                  _SHIFT:
 11969 00000BCD 8E1E[C58A]              	mov	ds,[RESSEG]
 11970 00000BD1 A1[3401]                	mov	ax,[Batch]		; get batch pointer
 11971 00000BD4 09C0                    	or	ax,ax			; in batch mode?
 11972 00000BD6 7501                    	jnz	short SHIFT1		; yes, operate in batch segment	
 11973                                  SHIFT_RETN:				; no, done.
 11974 00000BD8 C3                      	retn
 11975                                  SHIFT1:
 11976 00000BD9 8EC0                    	mov	es,ax
 11977 00000BDB 8ED8                    	mov	ds,ax
 11978                                  
 11979                                  ; Now move the batch args down by 1 word
 11980                                  
 11981                                  	;;mov	di,0Bh ; MSDOS 3.3 COMMAND.COM
 11982                                  	;mov	di,0Ch ; MSDOS 5.0 COMMAND.COM
 11983 00000BDD BF0C00                  	mov	di,BATCHSEGMENT.BatParm ; point to parm table
 11984 00000BE0 8D7502                  	lea	si,[di+2]		; make source = dest + 2
 11985 00000BE3 B90900                  	mov	cx,9			; move 9 parameters
 11986 00000BE6 F3A5                    	rep	movsw			; SHIFT down
 11987                                  
 11988                                  ; If the last parameter (the one not moved) is empty (= -1) then we are done.
 11989                                  ; We have copied it into the previous position.
 11990                                  
 11991 00000BE8 833DFF                  	cmp	word [di],-1	; if last one was not in use then
 11992 00000BEB 74EB                    	je	short SHIFT_RETN ; No new parm
 11993                                  
 11994                                  ; This last pointer is NOT nul. Get it and scan to find the next argument.
 11995                                  ; Assume, first, that there is no next argument.
 11996                                   
 11997 00000BED 8B35                    	mov	si,[di]
 11998 00000BEF C705FFFF                	mov	word [di],-1		; Assume no parm
 11999                                  
 12000                                  ; The parameters are CR separated. Scan for end of this parm.
 12001                                  
 12002                                  SKIPCRLP:
 12003 00000BF3 AC                      	lodsb
 12004 00000BF4 3C0D                    	cmp	al,0Dh
 12005 00000BF6 75FB                    	jne	short SKIPCRLP
 12006                                  
 12007                                  ; We are now pointing at next arg. If it is 0 (end of original line) then we
 12008                                  ; are finished. There are no more parms and the pointer has been previously
 12009                                  ; initialized to indicate it.
 12010                                  
 12011 00000BF8 803C00                  	cmp	byte [si],0
 12012 00000BFB 74DB                    	jz	short SHIFT_RETN 	; End of parms
 12013 00000BFD 8935                    	mov	[di],si			; Pointer to next parm as %9
 12014 00000BFF C3                      	retn
 12015                                  
 12016                                  ; =============== S U B	R O U T	I N E =======================================
 12017                                  
 12018                                  ; Skip delim reads bytes from the batch file until a non-delimiter is seen.
 12019                                  ; returns char in AL, carry set -> eof
 12020                                  
 12021                                  SKIPDELIM:
 12022 00000C00 F706[3401]FFFF          	test	word [Batch],-1		; batch file empty. OOPS!
 12023 00000C06 740A                    	jz	short SKIPERR
 12024 00000C08 E85DFD                  	call	GETBATBYT		; get a char
 12025 00000C0B E8DA19                  	call	DELIM			; check for ignoreable chars
 12026 00000C0E 74F0                    	jz	short SKIPDELIM		; ignore this char.
 12027 00000C10 F8                      	clc
 12028 00000C11 C3                      	retn
 12029                                  SKIPERR:
 12030 00000C12 F9                      	stc
 12031                                  GOTO_RETN:
 12032 00000C13 C3                      	retn
 12033                                  
 12034                                  ; ---------------------------------------------------------------------------
 12035                                  
 12036                                  ;  CALL is an internal command that transfers control to a .bat, .exe, or
 12037                                  ;  .com file. This routine strips the CALL off the command line, sets
 12038                                  ;  the CALL_FLAG to indicate a call in progress, and returns control to
 12039                                  ;  DOCOM1 in TCODE to reprocess the command line and execute the file
 12040                                  ;  being CALLed.
 12041                                  
 12042                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12043                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0C27h
 12044                                  _$CALL:
 12045                                  
 12046                                  ;  strip off CALL from command line
 12047                                  
 12048                                  	;ASSUME DS:trangroup,ES:trangroup
 12049                                  
 12050 00000C14 56                      	push	si
 12051 00000C15 57                      	push	di
 12052 00000C16 50                      	push	ax
 12053 00000C17 51                      	push	cx
 12054 00000C18 BE[2689]                	mov	si,COMBUF+2
 12055 00000C1B E8C219                  	call	scanoff			;get to first non-delimeter
 12056                                  	;add	si,4
 12057 00000C1E 83C604                  	add	si,length_call		;point to char past CALL
 12058 00000C21 BF[2689]                	mov	di,COMBUF+2
 12059                                  	;mov	cx,124		
 12060 00000C24 B97C00                  	mov	cx,COMBUFLEN-length_call 
 12061                                  					;get length of buffer
 12062 00000C27 F3A4                    	rep	movsb			;move it
 12063 00000C29 59                      	pop	cx
 12064 00000C2A 58                      	pop	ax
 12065 00000C2B 5F                      	pop	di
 12066 00000C2C 5E                      	pop	si
 12067                                  
 12068                                  ;  set call flag to indicate call in progress
 12069                                  
 12070 00000C2D 1E                      	push	ds
 12071 00000C2E 8E1E[C58A]              	mov	ds,[RESSEG]
 12072 00000C32 C606[9901]01            	mov	byte [Call_Flag],call_in_progress ; 1
 12073 00000C37 C606[9A01]01            	mov	byte [Call_Batch_Flag],call_in_progress ; 1
 12074                                  
 12075                                  ; Turn off any pipes in progress.
 12076                                  
 12077 00000C3C 803E[0102]00            	cmp	byte [PipeFiles],0 	; Only turn off if present.
 12078 00000C41 7403                    	jz	short _NOPIPE
 12079 00000C43 E8AB20                  	call	PIPEDEL
 12080                                  _NOPIPE:
 12081 00000C46 1F                      	pop	ds
 12082 00000C47 C3                      	retn
 12083                                  
 12084                                  ; ---------------------------------------------------------------------------
 12085                                  
 12086                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12087                                  _GOTO:
 12088 00000C48 8E1E[C58A]              	mov	ds,[RESSEG]
 12089 00000C4C F706[3401]FFFF          	test	word [Batch],-1	; If not in batch mode, a nop
 12090 00000C52 74BF                    	jz	short GOTO_RETN
 12091 00000C54 31D2                    	xor	dx,dx
 12092 00000C56 1E                      	push	ds
 12093 00000C57 8E1E[3401]              	mov	ds,[Batch]
 12094                                  	;mov	[8],dx	; MSDOS 5.0 COMMAND.COM
 12095 00000C5B 89160800                	mov	[BATCHSEGMENT.BatSeek],dx ; Back to start
 12096                                  	;mov	[10],dx	; MSDOS 5.0 COMMAND.COM
 12097 00000C5F 89160A00                	mov	[BATCHSEGMENT.BatSeek+2],dx ; Back to start
 12098                                  
 12099                                  	; MSDOS 6.0
 12100                                  ;M037
 12101                                  ; Clear EOF indicator because we have reseeked to the beginning of the file.
 12102                                  ;
 12103 00000C63 C606020000              	mov	byte [BATCHSEGMENT.BatchEOF],0
 12104                                  					; clear eof indicator ;M037
 12105                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12106 00000C68 1F                      	pop	ds
 12107                                  GOTOOPEN:
 12108 00000C69 E875F8                  	call	PROMPTBAT
 12109                                  	;mov	di,5Dh
 12110 00000C6C BF5D00                  	mov	di,FCB+1		; Get the label
 12111 00000C6F B90B00                  	mov	cx,11
 12112 00000C72 B020                    	mov	al,' '
 12113 00000C74 F2AE                    	repne	scasb
 12114 00000C76 7501                    	jnz	short NOINC
 12115 00000C78 41                      	inc	cx
 12116                                  NOINC:
 12117 00000C79 83E90B                  	sub	cx,11
 12118 00000C7C F7D9                    	neg	cx
 12119                                  	;mov	[cs:GOTOLEN],cx
 12120                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12121 00000C7E 26890E[CE8B]            	mov	[es:GOTOLEN],cx	; MSDOS 5.0 (& 6.0)
 12122                                  
 12123                                  ; At beginning of file. Skip to first non-delimiter char
 12124                                  
 12125 00000C83 E87AFF                  	call	SKIPDELIM
 12126 00000C86 721C                    	jb	short BADGOTO
 12127 00000C88 3C3A                    	cmp	al,':'
 12128 00000C8A 7426                    	jz	short CHKLABEL
 12129                                  LABLKLP:				; Look for the label
 12130 00000C8C E8D9FC                  	call	GETBATBYT
 12131 00000C8F 3C0A                    	cmp	al,0Ah
 12132 00000C91 7509                    	jne	short LABLKTST
 12133                                  
 12134                                  ; At beginning of line. Skip to first non-delimiter char
 12135                                  
 12136 00000C93 E86AFF                  	call	SKIPDELIM
 12137 00000C96 720C                    	jb	short BADGOTO
 12138 00000C98 3C3A                    	cmp	al,':'
 12139 00000C9A 7416                    	je	short CHKLABEL
 12140                                  LABLKTST:
 12141 00000C9C F706[3401]FFFF          	test	word [Batch],0FFFFh ; -1
 12142 00000CA2 75E8                    	jnz	short LABLKLP
 12143                                  BADGOTO:
 12144 00000CA4 E87100                  	call	BATCLOSE
 12145                                  
 12146                                  	; MSDOS 6.0
 12147                                  ;SR;
 12148                                  ; At this point we are terminating without freeing up any nested batch 
 12149                                  ;segments i.e if the error occurred within a called batch file. This routine
 12150                                  ;will traverse the linked list of batch segments and free all of them.
 12151                                  ;
 12152 00000CA7 E8BB00                  	call	free_batch		; free up nested batch segments
 12153                                  
 12154                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12155 00000CAA 0E                      	push	cs
 12156 00000CAB 1F                      	pop	ds
 12157 00000CAC BA[B07F]                	mov	dx,BADLAB_PTR
 12158 00000CAF E9A21C                  	jmp	cerror
 12159                                  
 12160                                  ; Found the :.	Skip to first non-delimiter char
 12161                                  
 12162                                  CHKLABEL:
 12163 00000CB2 E84BFF                  	call	SKIPDELIM
 12164 00000CB5 72ED                    	jb	short BADGOTO
 12165 00000CB7 BF5D00                  	mov	di,FCB+1 ; 5Dh
 12166                                  	;mov	cx,[cs:GOTOLEN]
 12167                                  	; 14/02/2023
 12168 00000CBA 268B0E[CE8B]            	mov	cx,[es:GOTOLEN]	 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12169 00000CBF EB05                    	jmp	short GOTBYTE
 12170                                  
 12171                                  NEXTCHRLP:
 12172 00000CC1 51                      	push	cx
 12173 00000CC2 E8A3FC                  	call	GETBATBYT
 12174 00000CC5 59                      	pop	cx
 12175                                  GOTBYTE:
 12176                                  	; 18/03/2023
 12177                                  	; 14/02/2023
 12178                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CD9h
 12179 00000CC6 E8F816                  	call	testkanj
 12180 00000CC9 7413                    	jz	short NOTKANJ1
 12181 00000CCB 263A05                  	cmp	al,[es:di]
 12182 00000CCE 75CC                    	jne	short LABLKTST
 12183 00000CD0 47                      	inc	di
 12184 00000CD1 49                      	dec	cx
 12185 00000CD2 E3C8                    	jcxz	LABLKTST
 12186 00000CD4 51                      	push	cx
 12187 00000CD5 E890FC                  	call	GETBATBYT
 12188 00000CD8 59                      	pop	cx
 12189 00000CD9 263A05                  	cmp	al,[es:di]
 12190 00000CDC EB0C                    	jmp	short KNEXTLABCHR
 12191                                  NOTKANJ1:
 12192                                  	; 14/02/2023
 12193                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0CF1h
 12194 00000CDE 0C20                    	or	al,20h
 12195 00000CE0 263A05                  	cmp	al,[es:di]
 12196                                  	;jne	short TRYUPPER
 12197                                  	;jmp	short NEXTLABCHR
 12198                                  	; 25/04/2023
 12199 00000CE3 7407                    	je	short NEXTLABCHR 
 12200                                  TRYUPPER:
 12201 00000CE5 2C20                    	sub	al,20h
 12202 00000CE7 263A05                  	cmp	al,[es:di]
 12203                                  KNEXTLABCHR:
 12204 00000CEA 75B0                    	jnz	short LABLKTST
 12205                                  NEXTLABCHR:
 12206 00000CEC 47                      	inc	di
 12207 00000CED E2D2                    	loop	NEXTCHRLP
 12208 00000CEF E876FC                  	call	GETBATBYT
 12209                                  	; 14/02/2023
 12210 00000CF2 26833E[CE8B]08          	cmp	word [es:GOTOLEN],8 ;  MSDOS 5.0 (& 6.0) COMMAND.COM
 12211                                  	;cmp	word [cs:GOTOLEN],8 ; Is the label at least 8 chars long?
 12212 00000CF8 7D04                    	jge	short GOTOCONT	; Yes, then the next char doesn't matter
 12213 00000CFA 3C20                    	cmp	al,' '
 12214 00000CFC 779E                    	ja	short LABLKTST
 12215                                  GOTOCONT:
 12216 00000CFE 3C0D                    	cmp	al,0Dh
 12217 00000D00 7407                    	je	short SKIPLFEED
 12218                                  TONEXTBATLIN:
 12219 00000D02 E863FC                  	call	GETBATBYT
 12220 00000D05 3C0D                    	cmp	al,0Dh
 12221 00000D07 75F9                    	jne	short TONEXTBATLIN
 12222                                  SKIPLFEED:
 12223 00000D09 E85CFC                  	call	GETBATBYT
 12224                                  
 12225                                  	; MSDOS 6.0
 12226                                  ;SR;
 12227                                  ; The BatchEOF flag is set in GetBatByt to indicate that we are faking a 
 12228                                  ;CR-LF for the last line. On a goto, this flag has to be cleared, because
 12229                                  ;BatchEOF == 1 now, after returning a CR-LF. The next call to GetBatByt
 12230                                  ;to get the EOF has not been made yet because we encountered the Goto. On
 12231                                  ;all other cases, EOF will be hit while trying to read the next line and
 12232                                  ;we are fine. I know, I know, what a massive hack from hell!! God help us!!
 12233                                  ;
 12234 00000D0C 06                      	push	es
 12235 00000D0D 8E06[3401]              	mov	es,[Batch]
 12236 00000D11 26C606020000            	mov	byte [es:BATCHSEGMENT.BatchEOF],0
 12237                                  					;invalidate fake CR-LF flag
 12238 00000D17 07                      	pop	es
 12239                                  
 12240                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12241                                  	;call	BATCLOSE
 12242                                  	;retn
 12243                                  	; 14/02/2023
 12244                                  	;jmp	short BATCLOSE
 12245                                  
 12246                                  ; =============== S U B	R O U T	I N E =======================================
 12247                                  
 12248                                  BATCLOSE:
 12249 00000D18 2E8B1E[F98D]            	mov	bx,[cs:BATHAND]
 12250 00000D1D 83FB05                  	cmp	bx,5
 12251 00000D20 7204                    	jb	short CLOSERETURN
 12252                                  	; 14/02/2023
 12253 00000D22 B43E                    	mov	ah,3Eh
 12254                                  	;mov	ah,CLOSE ; 3Eh
 12255 00000D24 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 12256                                  			; BX = file handle
 12257                                  CLOSERETURN:
 12258 00000D26 C606[7D01]00            	mov	byte [In_Batch],0 ; reset flag	
 12259 00000D2B C3                      	retn
 12260                                  
 12261                                  ; =============== S U B	R O U T	I N E =======================================
 12262                                  
 12263                                  ; Open the BATCH file, If open fails, AL is drive of batch file (A=1)
 12264                                  ; Also, fills internal batch buffer. If access denied, then AX = -1
 12265                                  
 12266                                  	; 14/02/2023
 12267                                  BATOPEN:
 12268 00000D2C 1E                      	push	ds
 12269 00000D2D 8E1E[3401]              	mov	ds,[Batch]
 12270                                  	;;mov	dx,1Fh	; MSDOS 3.3 COMMAND.COM
 12271                                  	;mov	dx,20h	; MSDOS 5.0 COMMAND.COM
 12272 00000D31 BA2000                  	mov	dx,BATCHSEGMENT.BatFile
 12273 00000D34 B8003D                  	mov	ax,3D00h
 12274                                  	;mov	ax,(OPEN<<8) ; 3D00h ; Open the batch file
 12275 00000D37 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 12276                                  			; DS:DX	-> ASCIZ filename
 12277                                  			; AL = access mode
 12278                                  			; 0 - read
 12279 00000D39 721C                    	jc	short SETERRDL
 12280                                  	;mov	dx,[8]
 12281 00000D3B 8B160800                	mov	dx,[BATCHSEGMENT.BatSeek]
 12282                                  	;mov	cx,[10]
 12283 00000D3F 8B0E0A00                	mov	cx,[BATCHSEGMENT.BatSeek+2]
 12284 00000D43 1F                      	pop	ds
 12285                                  	;mov	[cs:BATHAND],ax
 12286 00000D44 26A3[F98D]              	mov	[es:BATHAND],ax ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12287 00000D48 89C3                    	mov	bx,ax
 12288 00000D4A B80042                  	mov	ax,4200h
 12289                                  	;mov	ax,(LSEEK<<8) ; 4200h ; Go to the right spot
 12290 00000D4D CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 12291                                  			; AL = method: offset from beginning of	file
 12292                                  
 12293                                  	;mov	word [cs:BATBUFPOS],-1 ; 0FFFFh
 12294                                  					; nuke batch buffer position
 12295 00000D4F 26C706[CC95]FFFF        	mov	word [es:BATBUFPOS],-1 ; MSDOS 5.0 (& 6.0) COMMAND.COM
 12296                                  BATOPEN_RETN:
 12297 00000D56 C3                      	retn
 12298                                  
 12299                                  SETERRDL:
 12300 00000D57 89D3                    	mov	bx,dx
 12301                                  	; MSDOS 6.0
 12302                                  	;invoke	get_ext_error_number 	;AN022; get the extended error
 12303                                  	; 14/02/2023
 12304 00000D59 E8960F                  	call	get_ext_error_number
 12305 00000D5C 89C2                    	mov	dx,ax		     	;AN022; save extended error in DX
 12306                                  
 12307                                  	; MSDOS 3.3
 12308                                  	;mov	dx,INSERTDSKPTR
 12309                                  	;call	GET_EXT_ERR_NUMBER
 12310                                  
 12311                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12312 00000D5E 8A07                    	mov	al,[bx]			; Get drive spec
 12313 00000D60 2C40                    	sub	al,'@'			; A = 1
 12314 00000D62 1F                      	pop	ds
 12315 00000D63 F9                      	stc				; SUB mucked over carry
 12316 00000D64 C3                      	retn
 12317                                  
 12318                                  ; =============== S U B	R O U T	I N E =======================================
 12319                                  
 12320                                  ;Free_batch : This routine traverses the linked batch segments freeing all
 12321                                  ;the batch and FOR segments until all of them are freed. It also restores
 12322                                  ;the old state of the EchoFlag.
 12323                                  ;
 12324                                  ;	ENTRY:	ds = RESGROUP
 12325                                  ;
 12326                                  ;	EXIT: 	All batch & FOR segments freed.
 12327                                  ;		EchoFlag restored to old state before batch process.
 12328                                  ;
 12329                                  ;	REGISTERS AFFECTED: bx, cx
 12330                                  
 12331                                  	; 14/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12332                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0D7Eh
 12333                                  
 12334                                  free_batch: ;proc near
 12335                                  	;assume	ds:RESGROUP,es:nothing
 12336                                  
 12337 00000D65 06                      	push	es
 12338 00000D66 8B1E[9B01]              	mov	bx,[Next_Batch]
 12339 00000D6A 09DB                    	or	bx,bx
 12340 00000D6C 7431                    	jz	short fb_ret
 12341                                  _ClearBatch:
 12342 00000D6E 8EC3                    	mov	es,bx			; get batch segment
 12343                                  	;mov	bx,es:BatForPtr		; get old FOR segment
 12344 00000D70 268B1E0500              	mov	bx,[es:BATCHSEGMENT.BatForPtr] ; [es:5]
 12345                                  	;cmp	bx,0			; is a FOR in progress
 12346                                  	; 27/07/2024
 12347 00000D75 21DB                    	and	bx,bx
 12348 00000D77 7408                    	jz	short no_bat_for	; no - don't deallocate
 12349 00000D79 06                      	push	es			;
 12350 00000D7A 8EC3                    	mov	es,bx			; yes - free it up...
 12351 00000D7C B449                    	mov	ah,49h
 12352                                  	;mov	ah,DEALLOC		;
 12353 00000D7E CD21                    	int	21h			;
 12354 00000D80 07                      	pop	es			; restore to batch segment
 12355                                  no_bat_for:
 12356                                  	;mov	cl,[es:1]
 12357 00000D81 268A0E0100              	mov	cl,[es:BATCHSEGMENT.BatEchoFlag]
 12358                                  					; get old echo flag
 12359                                  	;mov	bx,[es:3]
 12360 00000D86 268B1E0300              	mov	bx,[es:BATCHSEGMENT.BatLast]
 12361                                  					; get old batch segment
 12362 00000D8B B449                    	mov	ah,49h
 12363                                  	;mov	ah,DEALLOC		; free it up...
 12364 00000D8D CD21                    	int	21h
 12365                                  	; 14/02/2023
 12366                                  	;mov	[Batch],bx		; get ready to deallocate next batch
 12367 00000D8F FF0E[9701]              	dec	word [Nest]		; is there another batch file?
 12368 00000D93 75D9                    	jnz	short _ClearBatch	; keep going until no batch file
 12369                                  	
 12370 00000D95 880E[8801]              	mov	[EchoFlag],cl		;restore echo status
 12371 00000D99 C706[3401]0000          	mov	word [Batch],0		;no batch process in progress
 12372                                  fb_ret:
 12373 00000D9F 07                      	pop	es
 12374 00000DA0 C3                      	ret
 12375                                  
 12376                                  ;free_batch endp
 12377                                  
 12378                                  ;============================================================================
 12379                                  ; TFOR.ASM, MSDOS 6.0, 1991
 12380                                  ;============================================================================
 12381                                  ; 10/10/2018 - Retro DOS v3.0
 12382                                  
 12383                                  ; All batch proccessing has DS set to segment of resident portion
 12384                                  ;ASSUME DS:RESGROUP,ES:TRANGROUP
 12385                                  
 12386                                  ; MSDOS 3.3 COMMAND.COM, transient portion/segment offset 0BE9h
 12387                                  
 12388                                  ; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12389                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:0DBFh
 12390                                  
 12391                                  ; ---------------------------------------------------------------------------
 12392                                  
 12393                                  	; 15/02/2023
 12394                                  FORTERM:
 12395                                  	; MSDOS 6.0
 12396 00000DA1 0E                      	push	cs			;AN037; Get local segment into
 12397 00000DA2 1F                      	pop	ds			;AN037;  DS, ES
 12398 00000DA3 0E                      	push	cs			;AN037;
 12399 00000DA4 07                      	pop	es			;AN037;
 12400                                  
 12401                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12402 00000DA5 E89502                  	call	FOROFF
 12403                                  	;mov	ds,[cs:RESSEG]
 12404 00000DA8 268E1E[C58A]            	mov	ds,[es:RESSEG] ; 15/02/2023 - MSDOS 5.0
 12405 00000DAD 813E[8E01]00FF          	cmp	word [SingleCom],0FF00h
 12406 00000DB3 750F                    	jne	short BAT_CRLF
 12407 00000DB5 833E[9701]00            	cmp	word [Nest],0		;See if we have nested batch files
 12408 00000DBA 7508                    	jne	short BAT_CRLF		;Yes - don't exit just yet
 12409 00000DBC C706[8E01]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause a terminate
 12410 00000DC2 EB12                    	jmp	short NOFORP2
 12411                                  BAT_CRLF:
 12412 00000DC4 F606[8801]01            	test	byte [EchoFlag],1 	; Is echo on?
 12413 00000DC9 740B                    	jz	short NOFORP2		; no - exit
 12414 00000DCB F706[3401]FFFF          	test	word [Batch],-1 ; 0FFFFh
 12415                                  					; print CRLF if in batch
 12416 00000DD1 7403                    	jz	short NOFORP2
 12417 00000DD3 E8FD17                  	call	CRLF2
 12418                                  NOFORP2:
 12419 00000DD6 E92BF3                  	jmp	TCOMMAND
 12420                                  
 12421                                  ; ---------------------------------------------------------------------------
 12422                                  
 12423                                  ;------
 12424                                  ;   For-loop processing. For loops are of the form:
 12425                                  ;	    for %<loop-variable> in (<list>) do <command>
 12426                                  ; where <command> may contain references of the form %<variable>, which are
 12427                                  ; later substituted with the items in <list>. The for-loop structure is
 12428                                  ; set-up by the procedure '$for'; successive calls to 'forproc' execute
 12429                                  ; <command> once for each item in <list>. All of the information needed for
 12430                                  ; loop processing is stored on a piece of memory gotten from 'alloc'. This
 12431                                  ; structure is actually fairly large, on the order of 700 bytes, and includes
 12432                                  ; a complete copy of the original command-line structure as parsed by
 12433                                  ; 'parseline', loop control variables, and a dma buffer for the
 12434                                  ; 'FindFirst/FindNext' expansion of wildcard filenames in <list>. When loop
 12435                                  ; processing has completed, this chunk of memory is returned to the system.
 12436                                  ;
 12437                                  ;   All of the previously defined variables, in 'datares', used for loop
 12438                                  ; processing may be erased. Only one, (DW) ForPtr, need be allocated.
 12439                                  ;
 12440                                  ;   The error message, 'for_alloc_mes', should be moved into the file
 12441                                  ; containing all of the other error messages.
 12442                                  ;
 12443                                  ;   Referencing the allocated for-loop structure is a little tricky.
 12444                                  ; At the moment, a byte is defined as part of a new segment, 'for_segment'.
 12445                                  ; When 'forproc' actually runs, ES and DS are set to point to the base of the
 12446                                  ; new chunk of memory.	References to this byte, 'f', thus assemble correctly
 12447                                  ; as offsets of ES or DS. 'f' would not be necessary, except that the
 12448                                  ; assembler translates an instruction such as 'mov AX, [for_minarg]' as an
 12449                                  ; immediate move of the offset of 'for_minarg' into AX. In other words, in
 12450                                  ; terms of PDP-11 mnemonics, the assembler ACTUALLY assembles
 12451                                  ;	mov  AX, #for_minarg 	; AX := 02CA (for example)
 12452                                  ; instead of
 12453                                  ;	mov  AX, for_minarg	; AX := [02CA] (contents of 02CA)
 12454                                  ; By using 'f', we pretend that we are actually referencing an allocated
 12455                                  ; structure, and the assembler coughs up the code we want. Notice that it
 12456                                  ; doesn't matter whether we put brackets around the location or not -- the
 12457                                  ; assembler is "smart" enough to know that we want an address instead of the
 12458                                  ; contents of that location.
 12459                                  ;
 12460                                  ;   Finally, there now exists the potential to easily implement nested loops.
 12461                                  ; One method would be to have a link field in each for-structure pointing to
 12462                                  ; its parent.  Variable references that couldn't be resolved in the local
 12463                                  ; frame would cause a search of prior frames. For-structures would still be
 12464                                  ; allocated and released in exactly the same fashion. The only limit on the
 12465                                  ; number of nested loops would be memory size (although at 700 bytes a pop,
 12466                                  ; memory wouldn't last THAT long). Alternately, a small structure could be
 12467                                  ; maintained in the resident data area. This structure would be an array of
 12468                                  ; control-variable names and pointers to for-structure blocks. This would
 12469                                  ; greatly speed up the resolution of non-local variable references. However,
 12470                                  ; since space in the resident is precious, we would have to compromise on a
 12471                                  ; "reasonable" level of nesting -- 10, 16, 32 levels, whatever. For-structure
 12472                                  ; allocation and de-allocation would have to be modified slightly to take this
 12473                                  ; new structure into account.
 12474                                  ;
 12475                                  ;   Oops, just one more thing. Forbuf need not be a part of the for-structure.
 12476                                  ; It could just as well be one structure allocated in 'transpace'. Actually,
 12477                                  ; it may be easier to allocate it as part of 'for_segment'.
 12478                                  ;------
 12479                                  		; include fordata.asm
 12480                                  
 12481                                  ; Data structure definitions included by tfor.asm
 12482                                  
 12483                                  struc FOR_INFO
 12484 00000000 <res 444h>                .FOR_ARGS:	  resb  ARG_UNIT.SIZE	; argv[] structure 
 12485 00000444 ??                        .FOR_COM_START: resb  1		; beginning of <command>
 12486 00000445 ????                      .FOR_EXPAND:	  resw  1		; * or ? item in <list>?
 12487 00000447 ????                      .FOR_MINARG:	  resw  1		; beginning of <list>
 12488 00000449 ????                      .FOR_MAXARG:	  resw  1		; end of <list>
 12489 0000044B <res 80h>                 .FORBUF:	  resw  64		; temporary buffer
 12490 000004CB <res 80h>                 .FORDMA:	  resw  64		; FindFirst/Next buffer
 12491 0000054B ??                        .FOR_VAR:	  resb  1		; loop control variable
 12492                                    .size:
 12493                                  endstruc
 12494                                  					; ARG_UNIT.SIZE = 1348 (544h)
 12495                                  					; ARG_UNIT.SIZE = 1092 ; 27/07/2024
 12496                                  _$FOR_EXIT:
 12497 00000DD9 EBC6                    	jmp	short FORTERM		; exceeding maxarg means all done
 12498                                  
 12499                                  ; ---------------------------------------------------------------------------
 12500                                  
 12501                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12502                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12503                                  	;	     & Retro DOS v4.1 COMMAND.COM (2024 modification)
 12504                                  FORPROC:
 12505 00000DDB A1[9501]                	mov	ax,[ForPtr]
 12506 00000DDE 8ED8                    	mov	ds,ax
 12507 00000DE0 8EC0                    	mov	es,ax			; operate in for-info area
 12508                                  	;;mov	dx,5CBh	; MSDOS 5.0 & 6.22
 12509                                  	;mov	dx,4CBh ; PCDOS 7.1 ; 27/07/2024
 12510 00000DE2 BACB04                  	mov	dx,FOR_INFO.FORDMA	; 1348+1+2+2+2+128 = 1483 = 5CBh
 12511                                  		; PCDOS 7.1 COMMAND.COM ; 1092+1+2+2+2+128 = 1227 = 4CBh
 12512 00000DE5 B8001A                  	mov	ax,1A00h
 12513                                  	;mov	ax,Set_DMA*256 ; 1A00h
 12514 00000DE8 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 12515                                  			; DS:DX	-> disk	transfer buffer
 12516                                  FOR_BEGIN:
 12517                                  	;;cmp	word [545h],0
 12518                                  	;cmp	word [445h] ; 27/07/2024
 12519 00000DEA 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12520 00000DEF 7404                    	jz	short FOR_BEGIN1
 12521                                  					; non-zero for_expand equals FALSE
 12522                                  	;;inc	word [547h]
 12523                                  	;inc	word [447h] ; 27/07/2024
 12524 00000DF1 FF064704                	inc	word [FOR_INFO.FOR_MINARG]
 12525                                  FOR_BEGIN1:
 12526                                  	;mov	bx,[447h] ; 27/07/2024
 12527 00000DF5 8B1E4704                	mov	bx,[FOR_INFO.FOR_MINARG] ; current item in <list> to examine
 12528                                  	;cmp	bx,[449h] ; 27/07/2024
 12529 00000DF9 3B1E4904                	cmp	bx,[FOR_INFO.FOR_MAXARG]
 12530 00000DFD 7FDA                     	jg	short _$FOR_EXIT	; exceeding maxarg means all done
 12531                                  	;mov	ax,0
 12532 00000DFF B80000                  	mov	ax,FOR_INFO.FOR_ARGS ; 0 
 12533 00000E02 E84D23                  	call	argv_calc		; compute argv[x] address
 12534                                  	;mov	cx,[bx+3]
 12535 00000E05 8B4F03                  	mov	cx,[bx+ARGV_ELE.argstartel]
 12536 00000E08 8B17                    	mov	dx,[bx]
 12537                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 12538                                  	;test	byte [bx+2],4		; Is there a path separator in this arg?
 12539 00000E0A F6470204                	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 12540 00000E0E 7512                    	jnz	short FORSUB		; Yes, argstartel should be correct
 12541 00000E10 8B37                    	mov	si,[bx]
 12542                                  	;mov	si,[bx+ARGV_ELE.argpointer]
 12543                                  
 12544                                  	;mov	al,[cs:LPAREN]
 12545                                  	; 15/02/2023
 12546                                  	; MSDOS 6.0 (& 5.0) COMMAND.com
 12547                                  	;mov	al,'('	; mov al,lparen
 12548                                  	;cmp	[si-1],	al		; If the current token is the first
 12549                                  	; 27/07/2024
 12550 00000E12 807CFF28                	cmp	byte [si-1],'('
 12551 00000E16 750A                    	jne	short FORSUB		;  one in the list and originally had
 12552 00000E18 41                      	inc	cx			;  the opening paren as its first char,
 12553                                  					;  the argstartel ptr needs to be
 12554                                  					;  advanced passed it before the prefix
 12555                                  					;  length is computed.
 12556                                  	;mov	al,':'
 12557                                  	;cmp	[si+1],	al		; If the token begins with "(d:",
 12558                                  	; 27/07/2024
 12559 00000E19 807C013A                	cmp	byte [si+1],':'
 12560 00000E1D 7503                    	jne	short FORSUB		;  argstartel has to be moved over the
 12561 00000E1F 83C102                  	add	cx,2			;  rest of the prefix as well.
 12562                                  FORSUB:
 12563 00000E22 29D1                    	sub	cx,dx			; compute length of pathname prefix
 12564                                  	;;cmp	word [545h],0
 12565                                  	;cmp	word [445h],0 ; 27/07/2024
 12566 00000E24 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12567                                  					; are we still expanding a name?
 12568 00000E29 7416                    	jz	short FOR_FIND_NEXT
 12569                                  					; if so, get next matching filename
 12570                                  	;test	byte [bx+2],2
 12571 00000E2B F6470202                	test	byte [bx+ARGV_ELE.argflags],2 ; wildcard
 12572 00000E2F 7505                    	jnz	short FOR_FIND_FIRST
 12573                                  					; should we expand THIS (new) arg?
 12574                                  	;mov	cx,[bx+5]
 12575                                  					; else, just copy all of it directly
 12576 00000E31 8B4F05                  	mov	cx,[bx+ARGV_ELE.arglen]
 12577 00000E34 EB1D                    	jmp	short FOR_SMOOSH
 12578                                  
 12579                                  	;nop
 12580                                  	; 15/02/2023
 12581                                  FOR_FIND_FIRST:
 12582 00000E36 51                      	push	cx
 12583 00000E37 31C9                    	xor	cx,cx
 12584 00000E39 B8004E                  	mov	ax,4E00h
 12585                                  	;mov	ax,Find_First*256 ; 4E00h
 12586 00000E3C CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 12587                                  			; CX = search attributes
 12588                                  			; DS:DX	-> ASCIZ filespec
 12589                                  			; (drive,path, and wildcards allowed)
 12590 00000E3E 59                      	pop	cx
 12591 00000E3F EB05                    	jmp	short FOR_RESULT
 12592                                  
 12593                                  	;nop
 12594                                  FOR_FIND_NEXT:
 12595 00000E41 B8004F                  	mov	ax,4F00h
 12596                                  	;mov	ax,Find_Next*256 ;4F00h
 12597 00000E44 CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 12598                                  			; [DTA]	= data block from
 12599                                  			; last AH = 4Eh/4Fh call
 12600                                  FOR_RESULT:
 12601 00000E46 B8FFFF                  	mov	ax,-1 ; 0FFFFh		; assume worst case
 12602 00000E49 7201                    	jc	short FOR_CHECK
 12603                                  	; 15/02/2023
 12604 00000E4B 40                      	inc	ax ; ax = 0
 12605                                  	;mov	ax,0			; Find* returns 0 for SUCCESS
 12606                                  FOR_CHECK:				; record success of findfirst/next
 12607                                  	;;mov	[545h],ax
 12608                                  	;mov	[445h],ax ; 27/07/2024
 12609 00000E4C A34504                  	mov	[FOR_INFO.FOR_EXPAND],ax
 12610 00000E4F 09C0                    	or	ax,ax			; anything out there?
 12611 00000E51 7597                    	jnz	short FOR_BEGIN		; if not, try next arg
 12612                                  FOR_SMOOSH:
 12613                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 12614 00000E53 8B37                    	mov	si,[bx] 		; copy argv[arg][0,CX] into destbuf
 12615                                  	;;mov	di,54Bh	; MSDOS 5.0 & 6.22 COMMAND.COM
 12616                                  	;mov	di,44Bh ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12617 00000E55 BF4B04                  	mov	di,FOR_INFO.FORBUF	; some days this will be the entire
 12618 00000E58 F3A4                    	rep	movsb			; arg, some days just the path prefix
 12619                                  					
 12620 00000E5A 833E450400              	cmp	word [FOR_INFO.FOR_EXPAND],0
 12621                                  					; if we're not expanding, we can
 12622 00000E5F 7509                    	jnz	short FOR_MAKE_COM 	; skip the following
 12623                                  	; 15/02/2023
 12624                                  	;;mov	si,05E9h ; MSDOS 3.3 & 5.0 & 6.22 COMMAND.COM ; 27/07/2024
 12625                                  	; 27/07/2024
 12626                                  	;mov	si,04E9h ; PCDOS 7.1 COMMAND.COM
 12627 00000E61 BEE904                  	mov	si,FOR_INFO.FORDMA+FIND_BUF.PNAME ; 14/10/2018
 12628                                  FOR_MORE:
 12629                                  	;cmp	byte [si],0		; tack on matching filename
 12630                                  	;jz	short FOR_MAKE_COM
 12631                                  	;movsb
 12632                                  	;jnz	short FOR_MORE
 12633                                  	; 25/04/2023
 12634 00000E64 AC                      	lodsb
 12635 00000E65 AA                      	stosb
 12636 00000E66 08C0                    	or	al,al
 12637 00000E68 75FA                    	jnz	short FOR_MORE
 12638                                  FOR_MAKE_COM:
 12639                                  	; 25/04/2023
 12640                                  	;xor	al,al			; tack a null byte onto the end
 12641                                  	;stosb				; of the substitute string
 12642 00000E6A 31C9                    	xor	cx,cx			; character count for command line
 12643 00000E6C F7D1                    	not	cx			; negate it -- take advantage of loopnz
 12644 00000E6E 31DB                    	xor	bx,bx			; argpointer
 12645 00000E70 BF[2689]                	mov	di,COMBUF+2
 12646                                  	; 15/02/2023
 12647                                  	;;mov	bl,[544h] ; MSDOS 5.0-6.22 ; 27/07/2024
 12648                                  	; 27/07/2024
 12649                                  	;mov	bl,[444h] ; PCDOS 7.1 COMMAND.COM 
 12650 00000E73 8A1E4404                	mov	bl,[FOR_INFO.FOR_COM_START] ; argindex
 12651                                  	;;mov	dh,[64Bh]
 12652                                  	;mov	dh,[54Bh] ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12653 00000E77 8A364B05                	mov	dh,[FOR_INFO.FOR_VAR]
 12654                                  					; %<for-var> is replaced by [forbuf]
 12655 00000E7B 0E                      	push	cs			; time to form the <command> string
 12656 00000E7C 07                      	pop	es
 12657                                  	;assume ES:trangroup
 12658                                  	;mov	ax,FOR_INFO.FOR_ARGS
 12659 00000E7D B80000                  	mov	ax,0			; translate offset to pointer
 12660 00000E80 E8CF22                  	call	argv_calc
 12661                                  	;mov	si,[bx+9]
 12662 00000E83 8B7709                  	mov	si,[bx+ARGV_ELE.arg_ocomptr]
 12663                                  					; mov ptr passed beginning space
 12664 00000E86 46                      	inc	si
 12665                                  FOR_MAKE_LOOP:
 12666 00000E87 8A04                    	mov	al,[si]			; the <command> arg, byte by byte
 12667 00000E89 46                      	inc	si
 12668 00000E8A 3C25                    	cmp	al,'%'			; looking for %<control-variable>
 12669 00000E8C 7514                    	jne	short FOR_STOSB 	; no % ... add byte to string
 12670 00000E8E 3834                    	cmp	[si],dh			; got the right <variable>?
 12671 00000E90 7510                    	jnz	short FOR_STOSB		; got a %, but wrong <variable>
 12672 00000E92 46                      	inc	si			; skip over <for-variable>
 12673                                  
 12674 00000E93 56                      	push	si
 12675                                  	; 15/02/2023
 12676                                  	;;mov	si,54Bh	; MSDOS 5.0-6.22 ; 27/07/2024
 12677                                  	; 27/07/2024
 12678                                  	;mov	si,44Bh ; PCDOS 7.1 COMMAND.COM
 12679 00000E94 BE4B04                  	mov	si,FOR_INFO.FORBUF
 12680                                  					; substitute the <item> for <variable>
 12681                                  					; to make a final <command> to execute
 12682                                  SLOOP:					
 12683 00000E97 AC                      	lodsb				; grab all those <item> bytes, and
 12684 00000E98 AA                      	stosb				; add 'em to the <command> string,
 12685 00000E99 08C0                    	or	al,al			; until we run into a null
 12686 00000E9B E0FA                    	loopne	SLOOP
 12687 00000E9D 4F                      	dec	di			; adjust length and <command> pointer
 12688 00000E9E 41                      	inc	cx			; so we can overwrite the null
 12689 00000E9F 5E                      	pop	si
 12690 00000EA0 EBE5                    	jmp	short FOR_MAKE_LOOP
 12691                                  					; got back for more <command> bytes
 12692                                  FOR_STOSB:
 12693 00000EA2 AA                      	stosb				; take a byte from the <command> arg
 12694 00000EA3 49                      	dec	cx			; and put it into the <command> to be
 12695                                  					; executed (and note length, too)
 12696 00000EA4 3C0D                    	cmp	al,0Dh
 12697 00000EA6 75DF                    	jne	short FOR_MAKE_LOOP	; If not done, loop.
 12698                                  FOR_MADE_COM:
 12699 00000EA8 F6D1                    	not	cl
 12700                                  	;mov	[cs:COMBUF+1],cl
 12701                                  	;mov	ds,[cs:RESSEG]
 12702                                  	; 15/02/2023 - Retro DOS v4.0 COMMAND.COM
 12703                                  	; MSDOS 5.0 COMMAND.COM
 12704 00000EAA 26880E[2589]            	mov	[es:COMBUF+1],cl
 12705 00000EAF 268E1E[C58A]            	mov	ds,[es:RESSEG]
 12706                                  	;assume DS:resgroup
 12707 00000EB4 F606[8801]01            	test	byte [EchoFlag],1 	; shall we echo this <command>, dearie?
 12708 00000EB9 742F                    	jz	short NOECHO3
 12709                                  	;cmp	byte [NullFlag],nullcommand
 12710 00000EBB 803E[9D01]01            	cmp	byte [NullFlag],1 	;G was there a command last time?
 12711 00000EC0 7403                    	jz	short NO_CRLF_PR  	;G no - don't print crlf
 12712                                  
 12713 00000EC2 E80E17                  	call	CRLF2		  	;G Print out prompt
 12714                                  NO_CRLF_PR:
 12715 00000EC5 C606[9D01]00            	mov	byte [NullFlag],0 	;G reset no command flag
 12716 00000ECA 0E                      	push	cs
 12717 00000ECB 1F                      	pop	ds
 12718 00000ECC 57                      	push	di
 12719 00000ECD E8C50E                  	call	PRINT_PROMPT	  	;G Prompt the user
 12720 00000ED0 5F                      	pop	di
 12721                                  
 12722 00000ED1 26C645FF00              	mov	byte [es:di-1],0  	; yeah, PRINT it out...	
 12723 00000ED6 C706[B58C][2689]        	mov	word [string_ptr_2],COMBUF+2
 12724                                  	; 17/04/2023
 12725 00000EDC BA[E280]                	mov	dx,string_buf_ptr
 12726 00000EDF E80D3F                  	call	std_printf
 12727 00000EE2 26C645FF0D              	mov	byte [es:di-1],0Dh
 12728 00000EE7 E9EAF3                  	jmp	DOCOM		  	; run silent, run deep...
 12729                                  NOECHO3:
 12730 00000EEA C606[9D01]00            	mov	byte [NullFlag],0
 12731 00000EEF 0E                      	push	cs
 12732 00000EF0 1F                      	pop	ds
 12733 00000EF1 E9E3F3                  	jmp	DOCOM1
 12734                                  
 12735                                  FORNESTERRJ:				; no multi-loop processing... yet!
 12736 00000EF4 E84601                  	call	FOROFF
 12737 00000EF7 E92901                  	jmp	FORNESTERR
 12738                                  
 12739                                  ; ---------------------------------------------------------------------------
 12740                                  
 12741                                  FORERRORJ:
 12742 00000EFA E9DDFB                  	jmp	FORERROR
 12743                                  
 12744                                  ; ---------------------------------------------------------------------------
 12745                                  
 12746                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F24h
 12747                                  
 12748                                  	; 07/06/2023 - Retro DOS v4.2 COMMAND.COM
 12749                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:0FFEh
 12750                                  
 12751                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 12752                                  	; PCDOS 7.1 COMMAND.COM - TRANGROUP:1040h
 12753                                  _$FOR:
 12754 00000EFD 8E06[C58A]              	mov	es,[RESSEG]
 12755 00000F01 26803E[9401]00          	cmp	byte [es:ForFlag],0 ; is another one already running?
 12756 00000F07 75EB                    	jnz	short FORNESTERRJ   ; if flag is set.... boom!
 12757                                  
 12758                                  ; Turn off any pipes in progress.
 12759                                  
 12760 00000F09 26803E[0102]00          	cmp	byte [es:PipeFiles],0 ; Only turn off if present.
 12761 00000F0F 7403                    	jz	short NO_PIPE
 12762 00000F11 E8DD1D                  	call	PIPEDEL
 12763                                  NO_PIPE:
 12764 00000F14 31D2                    	xor	dx,dx			; counter (0 <= DX < argvcnt)
 12765 00000F16 E8F400                  	call	NEXTARG			; move to next argv[n]
 12766 00000F19 72DF                    	jc	short FORERRORJ		; no more args -- bad forloop
 12767 00000F1B 3C25                    	cmp	al,'%'			; next arg MUST start with '%'...
 12768 00000F1D 75DB                    	jne	short FORERRORJ
 12769 00000F1F 89C5                    	mov	bp,ax			; save forloop variable
 12770 00000F21 AC                      	lodsb
 12771 00000F22 08C0                    	or	al,al			; and MUST end immediately...
 12772 00000F24 75D4                    	jnz	short FORERRORJ
 12773 00000F26 E8E400                  	call	NEXTARG			; let's make sure the next arg is 'in'
 12774 00000F29 72CF                    	jb	short FORERRORJ
 12775                                  	;and	ax,0DFDFh
 12776 00000F2B 25DFDF                  	and	ax,~2020h		; uppercase the letters
 12777                                  	; 15/02/2023
 12778                                  	;cmp	ax,4E49h  	; MSDOS 5.0
 12779                                  	;cmp	ax,[IN_WORD] 	; MSDOS 3.3
 12780                                  	;cmp	ax,in_word	; MSDOS 5.0
 12781 00000F2E 3D494E                  	cmp	ax,'IN'
 12782 00000F31 75C7                    	jnz	short FORERRORJ
 12783 00000F33 AC                      	lodsb
 12784                                  
 12785                                  	; 15/02/2023
 12786                                  	; MSDOS 3.3
 12787                                  	;or	al,al			; it, too, must end right away
 12788                                  	;jz	short CHECKLPAREN
 12789                                  	;cmp	al,[LPAREN]
 12790                                  	;jnz	short FORERRORJ
 12791                                  	;;add	word [bx+ARGV_ELE.argpointer],2 ; add word [bx+0],2
 12792                                  	;add	word [bx],2
 12793                                  	;;add	word [bx+9],2
 12794                                  	;add	word [bx+ARGV_ELE.arg_ocomptr],2
 12795                                  	;;sub	word [bx+5],2
 12796                                  	;sub	word [bx+ARGV_ELE.arglen],2
 12797                                  	;mov	ax,[si-1]
 12798                                  	;jmp	short LPCHECK
 12799                                  
 12800                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12801                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Bh
 12802                                  
 12803                                  	; MSDOS 6.0
 12804                                  ; Compaq bug fix -- exit from this loop on error
 12805                                  
 12806 00000F34 08C0                    	or	al,al
 12807 00000F36 75C2                    	jne	short FORERRORJ		; jump on error
 12808                                  
 12809                                  ;	je	short CHECKLPAREN
 12810                                  ;
 12811                                  ; Not null. Perhaps there are no spaces between this and the (:
 12812                                  ;   FOR %i in(foo bar...
 12813                                  ; Check for the Lparen here
 12814                                  ;
 12815                                  ;;	cmp	al,lparen
 12816                                  ;;	jnz	short FORERRORJ
 12817                                  ;
 12818                                  ; The token was in(... We strip off the "in" part to simulate a separator
 12819                                  ; being there in the first place.
 12820                                  ;
 12821                                  ;;	add	word [bx+ARGV_ELE.argpointer],2 ; advance source pointer
 12822                                  ;;	add	word [bx+ARGV_ELE.arg_ocomptr],2
 12823                                  ;;						; advance original string
 12824                                  ;;	sub	word [bx+ARGV_ELE.arglen],2 	; decrement the appropriate length
 12825                                  ;
 12826                                  ; SI now points past the in(.  Simulate a nextarg call that results in the
 12827                                  ; current value.
 12828                                  ;
 12829                                  ;;	mov	ax,[si-1]		; get lparen and next char
 12830                                  ;;	jmp	short LPCHECK
 12831                                  ;
 12832                                  ; end of Compaq bug fix
 12833                                  
 12834                                  ; ---------------------------------------------------------------------------
 12835                                  
 12836                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12837                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:0F5Fh
 12838                                  
 12839                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12840                                  CHECKLPAREN:
 12841 00000F38 E8D200                  	call	NEXTARG			; lparen delimits beginning of <list>
 12842 00000F3B 72BD                    	jc	short FORERRORJ
 12843                                  LPCHECK:
 12844                                  	; 15/02/2023
 12845                                  	; MSDOS 5.0 (% MSDOS 6.0)
 12846                                  	;;cmp	al,[LPAREN]
 12847                                  	;cmp	al,lparen
 12848 00000F3D 3C28                    	cmp	al,'('
 12849 00000F3F 75B9                    	jne	short FORERRORJ
 12850 00000F41 80FC00                  	cmp	ah,0
 12851 00000F44 7410                    	je	short FOR_PAREN_TOKEN
 12852                                  	;;cmp	ah,[RPAREN]		; special case:  null list
 12853                                  	;cmp	ah,rparen
 12854 00000F46 80FC29                  	cmp	ah,')'
 12855 00000F49 7503                    	jne	short FOR_LIST_NOT_EMPTY
 12856 00000F4B E953FE                  	jmp	FORTERM
 12857                                  FOR_LIST_NOT_EMPTY:
 12858                                  	;inc	word [bx+ARGV_ELE.argpointer] ; inc word [bx+0]
 12859 00000F4E FF07                    	inc	word [bx]		; Advance ptr past "("
 12860                                  	;dec	word [bx+5]		; Adjust the rest of this argv entry
 12861 00000F50 FF4F05                  	dec	word [bx+ARGV_ELE.arglen] ; to agree.
 12862 00000F53 46                      	inc	si			; Inc si so check for ")" works
 12863 00000F54 EB0D                    	jmp	short FOR_LIST
 12864                                  
 12865                                  	;nop
 12866                                  FOR_PAREN_TOKEN:
 12867 00000F56 E8B400                  	call	NEXTARG			; what have we in our <list>?
 12868 00000F59 729F                    	jc	short FORERRORJ
 12869                                  	; 15/02/2023
 12870                                  	;;;cmp	ax,[RPAREN+1]
 12871                                  	;;cmp	ax,[NULLRPAREN]		; special case:  null list
 12872                                  	;cmp	ax,nullrparen
 12873 00000F5B 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 12874 00000F5E 7503                    	jne	short FOR_LIST
 12875 00000F60 E93EFE                  	jmp	FORTERM
 12876                                  
 12877                                  ;FORERORJJ:
 12878                                  	;jmp	FORERROR
 12879                                  
 12880                                  FOR_LIST:				; skip over rest of <list>
 12881 00000F63 89D1                    	mov	cx,dx			; first arg of <list>
 12882                                  
 12883                                  SKIP_LIST:
 12884                                  	;add	si,[bx+5]
 12885 00000F65 037705                  	add	si,[bx+ARGV_ELE.arglen]
 12886 00000F68 83EE03                  	sub	si,3			; si = ptr to last char of token
 12887                                  	; 15/02/2023
 12888                                  	;;mov	al,[RPAREN]
 12889                                  	;mov	al,rparen
 12890 00000F6B B029                    	mov	al,')'
 12891 00000F6D 3804                    	cmp	[si],al			; Is this the last element in <list>
 12892 00000F6F 7408                    	je	short FOR_END_LIST 	; Yes, exit loop.
 12893 00000F71 E89900                  	call	NEXTARG			; No, get next arg <list>
 12894                                  	;jc	short FORERORJJ		; If no more and no rparen, error.
 12895                                  	;jmp	short SKIP_LIST
 12896                                  	; 15/02/2023
 12897 00000F74 73EF                    	jnc	short SKIP_LIST
 12898                                  
 12899                                  	; 15/02/2023
 12900                                  FORERORJJ:
 12901 00000F76 E961FB                  	jmp	FORERROR
 12902                                  
 12903                                  FOR_END_LIST:
 12904 00000F79 89D7                    	mov	di,dx			; record position of last arg in <list>
 12905 00000F7B C60400                  	mov	byte [si],0		; Zap the rparen
 12906                                  	; 15/02/2023
 12907                                  	;;;cmp	ax,[RPAREN+1]
 12908                                  	;;cmp	ax,[NULLRPAREN] 	; Was this token only a rparen
 12909                                  	;cmp	ax,nullparen
 12910 00000F7E 83F829                  	cmp	ax,29h	; db 29h,0 ; db ')',0
 12911 00000F81 7401                    	je	short FOR_DO		; Yes, continue
 12912 00000F83 47                      	inc	di			; No, inc position of last arg
 12913                                  FOR_DO:
 12914 00000F84 E88600                  	call	NEXTARG			; now we had BETTER find a 'do'...
 12915 00000F87 72ED                    	jc	short FORERORJJ
 12916                                  	;and	ax,0DFDFh
 12917 00000F89 25DFDF                  	and	ax,~2020h		; uppercase the letters
 12918                                  	; 15/02/2023
 12919                                  	;;cmp	ax,[DO_WORD]
 12920                                  	;cmp	ax,do_word ; 4F44h
 12921 00000F8C 3D444F                  	cmp	ax,'DO'	 ; 4F44h
 12922 00000F8F 75E5                    	jne	short FORERORJJ
 12923 00000F91 AC                      	lodsb
 12924 00000F92 08C0                    	or	al,al			; and it had BETTER be ONLY a 'do'...
 12925 00000F94 75E0                    	jnz	short FORERORJJ
 12926                                  		
 12927 00000F96 E87400                  	call	NEXTARG			; on to the beginning of <command>
 12928 00000F99 72DB                    	jc	short FORERORJJ		; null <command> not legal
 12929                                  
 12930 00000F9B 50                      	push	ax
 12931 00000F9C 53                      	push	bx
 12932 00000F9D 51                      	push	cx
 12933 00000F9E 52                      	push	dx			; preserve registers against disaster
 12934 00000F9F 57                      	push	di
 12935 00000FA0 56                      	push	si
 12936 00000FA1 55                      	push	bp
 12937 00000FA2 E85FF7                  	call	FREE_TPA		; need to make free memory, first
 12938 00000FA5 E89500                  	call	FOROFF
 12939                                  	;mov	bx,264
 12940 00000FA8 BB0801                  	mov	bx,FOR_INFO.size-ARG_UNIT.SIZE
 12941 00000FAB E8C524                  	call	SAVE_ARGS		; extra bytes needed for for-info
 12942 00000FAE 9C                      	pushf
 12943 00000FAF 26A3[9501]              	mov	[es:ForPtr],ax
 12944 00000FB3 E85EF7                  	call	ALLOC_TPA		; ALLOC_TPA clobbers registers...
 12945 00000FB6 9D                      	popf
 12946 00000FB7 5D                      	pop	bp
 12947 00000FB8 5E                      	pop	si
 12948 00000FB9 5F                      	pop	di
 12949 00000FBA 5A                      	pop	dx
 12950 00000FBB 59                      	pop	cx
 12951 00000FBC 5B                      	pop	bx
 12952 00000FBD 58                      	pop	ax
 12953 00000FBE 723C                    	jc	short FOR_ALLOC_ERR
 12954                                  
 12955 00000FC0 06                      	push	es			; save resgroup seg...
 12956 00000FC1 26FF36[9501]            	push	word [es:ForPtr]
 12957 00000FC6 07                      	pop	es
 12958                                  	;assume es:for_segment
 12959 00000FC7 49                      	dec	cx			; forproc wants min pointing before
 12960 00000FC8 4F                      	dec	di			; first arg, max right at last one
 12961                                  	; 15/02/2023
 12962                                  	;;mov	[547h],cx
 12963                                  	; 27/07/2024
 12964                                  	;mov	[447h],cx ; PCDOS 7.1 COMMAND.COM
 12965 00000FC9 26890E4704              	mov	[es:FOR_INFO.FOR_MINARG],cx
 12966                                  	;;mov	[549h],di
 12967                                  	;mov	[449h],di ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 12968 00000FCE 26893E4904              	mov	[es:FOR_INFO.FOR_MAXARG],di
 12969                                  	;;mov	[544h],dl
 12970                                  	;mov	[444h],dl ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 12971 00000FD3 2688164404              	mov	[es:FOR_INFO.FOR_COM_START],dl
 12972                                  	;;mov	word [545h],0FFFFh ; -1
 12973                                  	;mov	[445h],0FFFFh ; PCDOS 7.1 COMMAND.COM ; 27/07/2024
 12974 00000FD8 26C7064504FFFF          	mov	word [es:FOR_INFO.FOR_EXPAND],-1
 12975                                  					; non-zero means FALSE
 12976 00000FDF 89E8                    	mov	ax,bp
 12977                                  	;;mov	[64Bh],ah
 12978                                  	;mov	[54Bh],ah ; 27/07/2024 ; PCDOS 7.1 COMMAND.COM
 12979 00000FE1 2688264B05              	mov	[es:FOR_INFO.FOR_VAR],ah
 12980 00000FE6 07                      	pop	es
 12981                                  	;assume es:resgroup
 12982 00000FE7 26FE06[9401]            	inc	byte [es:ForFlag]
 12983 00000FEC 26833E[8E01]FF          	cmp	word [es:SingleCom],-1
 12984 00000FF2 7507                    	jne	short FOR_RET
 12985 00000FF4 26C706[8E01]00FF        	mov	word [es:SingleCom],0FF00h
 12986                                  FOR_RET:
 12987 00000FFB C3                      	retn
 12988                                  
 12989                                  FOR_ALLOC_ERR:
 12990                                  	; 15/02/2023
 12991                                  	; MSDOS 3.3
 12992                                  	;mov	dx,INSFMEMMESPTR
 12993                                  	;jmp	CERROR
 12994                                  
 12995                                  	; 15/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 12996                                  	; MSDOS 6.0
 12997                                  	;mov	byte [msg_disp_class],1
 12998 00000FFC C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class
 12999                                  					;AN000; set up extended error msg class
 13000                                  	;mov	dx,offset TranGroup:Extend_Buf_ptr
 13001 00001001 BA[1B7F]                	mov	dx,extend_buf_ptr
 13002                                  					;AC000; get extended message pointer
 13003                                  	;mov	word [extend_buf_ptr],8
 13004 00001004 C706[1B7F]0800          	mov	word [extend_buf_ptr],ERROR_NOT_ENOUGH_MEMORY
 13005                                  					;AN000; get message number in control block
 13006 0000100A E94719                  	jmp	cerror
 13007                                  
 13008                                  
 13009                                  ; =============== S U B	R O U T	I N E =======================================
 13010                                  
 13011                                  NEXTARG:
 13012 0000100D 42                      	inc	dx			; next argv[n]
 13013                                  	;cmp	dx,[ARG_ARGVCNT]
 13014 0000100E 3B16[1491]              	cmp	dx,[ARG+ARG_UNIT.argvcnt]
 13015                                  					; make sure we don't run off end
 13016 00001012 7D0D                    	jge	short NEXTARG_ERR 	;  of argv[]...	
 13017 00001014 89D3                    	mov	bx,dx
 13018                                  	;mov	ax,ARG_ARGV
 13019                                  	;mov	ax,ARG+ARG_UNIT.argv
 13020 00001016 B8[548E]                	mov	ax,ARG
 13021 00001019 E83621                  	call	argv_calc		; convert array index to pointer
 13022 0000101C 8B37                    	mov	si,[bx]			; load pointer to argstring
 13023                                  	;mov	si,[bx+ARGV_ELE.argpointer] ; mov si,[bx+0]
 13024 0000101E AD                      	lodsw				; and load first two chars
 13025 0000101F F8                      	clc
 13026 00001020 C3                      	retn
 13027                                  NEXTARG_ERR:
 13028 00001021 F9                      	stc
 13029 00001022 C3                      	retn
 13030                                  
 13031                                  ; ---------------------------------------------------------------------------
 13032                                  
 13033                                  FORNESTERR:
 13034 00001023 1E                      	push	ds
 13035 00001024 8E1E[C58A]              	mov	ds,[RESSEG]
 13036                                  	;ASSUME DS:RESGROUP
 13037 00001028 BA[7980]                	mov	dx,FORNESTMES_PTR
 13038 0000102B 813E[8E01]00FF          	cmp	word [SingleCom],0FF00h
 13039 00001031 7506                    	jne	short NOFORP3
 13040 00001033 C706[8E01]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Cause termination
 13041                                  NOFORP3:
 13042 00001039 1F                      	pop	ds
 13043 0000103A E91719                  	jmp	cerror
 13044                                  
 13045                                  ; =============== S U B	R O U T	I N E =======================================
 13046                                  
 13047                                  ; General routine called to free the for segment. We also clear the forflag
 13048                                  ; too. Change no registers.
 13049                                  
 13050                                  FOROFF:
 13051 0000103D 50                      	push	ax
 13052 0000103E 06                      	push	es
 13053 0000103F 2E8E06[C58A]            	mov	es,[cs:RESSEG]
 13054 00001044 26A1[9501]              	mov	ax,[es:ForPtr]
 13055 00001048 09C0                    	or	ax,ax
 13056 0000104A 7408                    	jz	short FREEDONE
 13057 0000104C 06                      	push	es
 13058 0000104D 8EC0                    	mov	es,ax
 13059                                  	; 15/02/2023
 13060 0000104F B449                    	mov	ah,49h
 13061                                  	;mov	ah,DEALLOC ; 49h
 13062 00001051 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 13063                                  			; ES = segment address of area to be freed
 13064 00001053 07                      	pop	es
 13065                                  FREEDONE:
 13066 00001054 26C706[9501]0000        	mov	word [es:ForPtr],0
 13067 0000105B 26C606[9401]00          	mov	byte [es:ForFlag],0
 13068 00001061 07                      	pop	es
 13069 00001062 58                      	pop	ax
 13070 00001063 C3                      	retn
 13071                                  
 13072                                  ;============================================================================
 13073                                  ; TCMD1A.ASM, MSDOS 6.0, 1991
 13074                                  ;============================================================================
 13075                                  ; 09/10/2018 - Retro DOS v3.0
 13076                                  
 13077                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 0ECBh
 13078                                  
 13079                                  ; ---------------------------------------------------------------------------
 13080                                  
 13081                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13082                                  
 13083                                  %if 0
 13084                                  
 13085                                  ; The DIR command displays the contents of a directory.
 13086                                  ;
 13087                                  ; ****************************************************************
 13088                                  ; *
 13089                                  ; * ROUTINE:	 CATALOG - display file(s) in directory
 13090                                  ; *
 13091                                  ; * FUNCTION:	 PARSE command line for drive, file, or path name.
 13092                                  ; *		 DIR allows two switches, /P (pause) and /W (wide).
 13093                                  ; *		 If an error occurs issue and error message and
 13094                                  ; *		 transfer control to CERROR.
 13095                                  ; *
 13096                                  ; * INPUT:	 command line at offset 81H
 13097                                  ; *
 13098                                  ; * OUTPUT:	 none
 13099                                  ; *
 13100                                  ; ****************************************************************
 13101                                  
 13102                                  CATALOG:
 13103                                  	; MSDOS 3.3
 13104                                  
 13105                                  	;mov	ax,ARG_ARGV
 13106                                  	;mov	ax,ARG+ARG_UNIT.argv
 13107                                  	mov	ax,ARG
 13108                                  	mov	dx,0FFFFh
 13109                                  	xor	cx,cx
 13110                                  	xor	si,si
 13111                                  DIR1:
 13112                                  	;cmp	cx,[ARG_ARGVCNT]
 13113                                  	cmp	cx,[ARG+ARG_UNIT.argvcnt]
 13114                                  	jnb	short DIR6 ; No more arguments
 13115                                  	mov	bx,cx
 13116                                  	call	ARGV_CALC
 13117                                  	;or	si,[bx+7]
 13118                                  	or	si,[bx+ARGV_ELE.argsw_word]
 13119                                  	test	si,7FFCh  ; test si,~8003
 13120                                  	jnz	short DIR2  ; /A,/B,/V switches (are invalid)
 13121                                  	;test	byte [bx+2],1
 13122                                  	test	byte [bx+ARGV_ELE.argflags],sw_flag  ; 1
 13123                                  	jz	short DIR3
 13124                                  	jmp	short DIR5
 13125                                  DIR2:
 13126                                  	mov	dx,BADPARMPTR
 13127                                  	jmp	CERROR
 13128                                  DIR3:
 13129                                  	or	cx,cx
 13130                                  	jnz	short DIR4	
 13131                                  	;cmp	word [bx+5],3
 13132                                  	cmp	word [bx+ARGV_ELE.arglen],3
 13133                                  	jz	short DIR5
 13134                                  	;add	word [bx+ARGV_ELE.argpointer],3 ; add word [bx+0],3
 13135                                  	add	word [bx],3
 13136                                  	;add	word [bx+9],3
 13137                                  	add	word [bx+ARGV_ELE.arg_ocomptr],3
 13138                                  	;add	word [bx+3],3
 13139                                  	add	word [bx+ARGV_ELE.argstartel],3
 13140                                  	;sub	word [bx+5],3
 13141                                  	sub	word [bx+ARGV_ELE.arglen],3
 13142                                  DIR4:
 13143                                  	cmp	dx,0FFFFh
 13144                                  	jnz	short DIR2
 13145                                  	mov	dx,bx
 13146                                  DIR5:
 13147                                  	inc	cx
 13148                                  	jmp	short DIR1
 13149                                  DIR6:
 13150                                  	mov	[COMSW],si
 13151                                  	push	dx
 13152                                  	xor	al,al
 13153                                  	cmp	dx,0FFFFh
 13154                                  	jz	short DIR7
 13155                                  	mov	bx,dx
 13156                                  	;mov	di,[bx+ARGV_ELE.argpointer]  ;mov di,[bx+0]
 13157                                  	mov	di,[bx]
 13158                                  	cmp	byte [di+1],':'
 13159                                  	jnz	short DIR7
 13160                                  	mov	al,[di]
 13161                                  	or	al,20h		; Lowercase drive name	
 13162                                  	sub	al,'a'-1 ; 60h  ; Convert to drive number (0,1..)
 13163                                  DIR7:
 13164                                  	;mov	[5CH],al
 13165                                  	mov	[FCB],al
 13166                                  	call	OKVOLARG
 13167                                  	mov	al,'?'		; *.* is default file spec.
 13168                                  	;mov	di,5Dh
 13169                                  	mov	di,FCB+1
 13170                                  	mov	cx,11
 13171                                  	rep stosb
 13172                                  
 13173                                  ; Begin by processing any switches that may have been specified.
 13174                                  ; BITS will contain any information about switches that was
 13175                                  ; found when the command line was parsed.
 13176                                  
 13177                                  	mov	ax,[COMSW]	; Get switches from command
 13178                                  	mov	[_BITS],ax	; initialize switches
 13179                                  	mov	word [COMSW],0	; initialize flags
 13180                                  	mov	byte [LINPERPAG],23 ; Set default for lines per page
 13181                                  	;test	al,1
 13182                                  	test	al,SWITCHW	; /W ?
 13183                                  	;mov	al,1
 13184                                  	mov	al,NORMPERLIN
 13185                                  	jz	short DIR8
 13186                                  	;mov	al,5
 13187                                  	mov	al,WIDEPERLIN
 13188                                  DIR8:
 13189                                  	mov	[LINLEN],al	; Set number of entries per line
 13190                                  	mov	[LINCNT],al
 13191                                  	mov	word [FILECNT],0 ; Keep track of how many files found
 13192                                  	mov	dx,DIRBUF
 13193                                  	mov	ah,Set_DMA ; 1Ah
 13194                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 13195                                  			; DS:DX	-> disk	transfer buffer
 13196                                  	;mov	dl,[5Ch]
 13197                                  	mov	dl,[FCB]
 13198                                  	call	SAVUDIR
 13199                                  	pop	bx
 13200                                  	cmp	bx,0FFFFh
 13201                                  	jz	short DIR9
 13202                                  	;mov	dx,[bx+ARGV_ELE.argpointer] ; mov dx,[bx+0]
 13203                                  	mov	dx,[bx]
 13204                                  
 13205                                  ; The user may have specified a device. Search for the path and see if the
 13206                                  ; attributes indicate a device.
 13207                                  
 13208                                  	mov	ah,Find_First ; 4Eh
 13209                                  	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 13210                                  			; CX = search attributes
 13211                                  			; DS:DX	-> ASCIZ filespec
 13212                                  			; (drive,path, and wildcards allowed)
 13213                                  	jc	short DIR10
 13214                                  			; Check device atrribute..
 13215                                  	;test	byte [DIRBUF_ATTRIB2],40h
 13216                                  	;test	byte [DIRBUF_ATTRIB2],ATTR_DEVICE
 13217                                  	; 14/10/2018
 13218                                  	;test	byte [DIRBUF+21],40h
 13219                                  	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 13220                                  	jz	short DIR10	; no, go do normal operation
 13221                                  	mov	word [COMSW],-2 ; 0FFFEh  ; Signal device
 13222                                  DIR9:
 13223                                  	jmp	short DOHEADER
 13224                                  DIR10:
 13225                                  	;mov	dx,[bx+ARGV_ELE.argpointer]
 13226                                  	mov	dx,[bx]
 13227                                  	mov	ah,CHDir ; 3Bh
 13228                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13229                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13230                                  	jnc	short DOHEADER
 13231                                  	;mov	si,[bx+3]
 13232                                  	mov	si,[bx+ARGV_ELE.argstartel]
 13233                                  	cmp	dx,si
 13234                                  	jz	short DIR_NO_DRIVE
 13235                                  	xor	cl,cl
 13236                                  	xchg	cl,[si]
 13237                                  	mov	ah,CHDir ; 3Bh
 13238                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13239                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13240                                  	xchg	cl,[si]
 13241                                  	jnc	short DIR_NO_DRIVE
 13242                                  	mov	al,[si-1]
 13243                                  	call	PATHCHRCMP
 13244                                  	jnz	short DIR11
 13245                                  	mov	al,[si-2]
 13246                                  	call	PATHCHRCMP
 13247                                  	jz	short DIR12
 13248                                  	xchg	cl,[si-1]
 13249                                  	mov	ah,CHDir ; 3Bh
 13250                                  	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 13251                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 13252                                  	xchg	cl,[si-1]
 13253                                  	jnc	short DIR_NO_DRIVE
 13254                                  DIR11:
 13255                                  	mov	ch,':'
 13256                                  	cmp	ch,[si-1]
 13257                                  	jnz	short DIR12
 13258                                  	;mov	cx,[bx+ARGV_ELE.argpointer] ; mov cx,[bx+0]
 13259                                  	mov	cx,[bx]
 13260                                  	xchg	cx,si
 13261                                  	sub	cx,si
 13262                                  	cmp	cx,2
 13263                                  	jz	short DIR_NO_DRIVE
 13264                                  DIR12:
 13265                                  	mov	dx,BADCDPTR
 13266                                  	;test	byte [bx+2],4
 13267                                  	test	byte [bx+ARGV_ELE.argflags],4 ; path_sep
 13268                                  	jnz	short DIRERROR
 13269                                  DIRNF:
 13270                                  	mov	dx,FNOTFOUNDPTR
 13271                                  DIRERROR:
 13272                                  	jmp	CERROR
 13273                                  DIR_NO_DRIVE:
 13274                                  	cmp	word [si],'..'
 13275                                  	jnz	short DOREALPARSE
 13276                                  	cmp	byte [si+2],0
 13277                                  	jnz	short DOREALPARSE
 13278                                  	inc	word [COMSW]
 13279                                  	jmp	short DOHEADER
 13280                                  DOREALPARSE:
 13281                                  	mov	di,FCB ; 5Ch	
 13282                                  	;mov	ax,290Eh
 13283                                  	mov	ax,(Parse_File_Descriptor<<8)|0Eh
 13284                                  	int	21h	; DOS -	PARSE FILENAME
 13285                                  			; DS:SI	-> string to parse
 13286                                  			; ES:DI	-> buffer to fill with unopened	FCB
 13287                                  			; AL = bit mask	to control parsing
 13288                                  	cmp	byte [si],0
 13289                                  	jz	short DOHEADER
 13290                                  	dec	word [COMSW]
 13291                                  DOHEADER:
 13292                                  		
 13293                                  ; Display the header
 13294                                  
 13295                                  	push	bx
 13296                                  	call	BUILD_DIR_STRING
 13297                                  	mov	dx,DIRBUF
 13298                                  	mov	[VOL_DIR],dx
 13299                                  	mov	dx,DIRHEADPTR
 13300                                  	call	PRINTF_CRLF
 13301                                  	pop	bx
 13302                                  	cmp	bx,0FFFFh
 13303                                  	jz	short DOSEARCH
 13304                                  
 13305                                  ; If there were chars left after parse or device, then invalid file name
 13306                                  
 13307                                  	cmp	word [COMSW],0
 13308                                  	jz	short DOSEARCH	; nothing left; good parse
 13309                                  	jl	short DIRNFFIX	; not .. => error file not found
 13310                                  	call	RESTUDIR
 13311                                  	mov	dx,BADCDPTR
 13312                                  	jmp	CERROR		; was .. => error directory not found
 13313                                  DIRNFFIX:
 13314                                  	call	RESTUDIR
 13315                                  	jmp	short DIRNF
 13316                                  
 13317                                  ; We are assured that everything is correct. Let's go and search. Use
 13318                                  ; attributes that will include finding directories. Perform the first search
 13319                                  ; and reset our directory afterward.
 13320                                  
 13321                                  DOSEARCH:
 13322                                  	;mov	byte [55h],0FFh
 13323                                  	mov	byte [FCB-7],0FFh
 13324                                  	;mov	byte [5Bh],10h
 13325                                  	mov	byte [FCB-1],10h
 13326                                  
 13327                                  ; Caution! Since we are using an extended FCB, we will *also* be returning
 13328                                  ; the directory information as an extended FCB. We must bias all fetches into
 13329                                  ; DIRBUF by 8 (Extended FCB part + drive)
 13330                                  
 13331                                  	mov	ah,Dir_Search_First ; 11h
 13332                                  	mov	dx,FCB-7 ; 55h
 13333                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 13334                                  			; DS:DX	-> FCB
 13335                                  
 13336                                  ; Restore the user's directory. We preserve, though, the return from the
 13337                                  ; previous system call for later checking.
 13338                                  
 13339                                  FOUND_FIRST_FILE:
 13340                                  	push	ax		; save return state
 13341                                  	call	RESTUDIR	; restore user's dir	
 13342                                  	pop	ax		; get return state back
 13343                                  
 13344                                  ; Main scanning loop. Entry has AL = Search first/next error code. Test for
 13345                                  ; no more.
 13346                                  
 13347                                  DIRSTART:
 13348                                  	inc	al		; 0FFh = file not found
 13349                                  	jnz	short DISPLAY	; Either an error or we are finished
 13350                                  	jmp	CHKCNT
 13351                                  DISPLAY:
 13352                                  	inc	word [FILECNT]	; Keep track of how many we find
 13353                                  	mov	si,DIRBUF+8	; SI -> information returned by sys call
 13354                                  	;call	SHONAME
 13355                                  	call	DISPLAYNAME
 13356                                  	;test	byte [_BITS],1
 13357                                  	test	byte [_BITS],SWITCHW ; W switch set?
 13358                                  	jz	short DIRTEST	; If so, no size, date, or time
 13359                                  	jmp	NEXENT
 13360                                  DIRTEST:
 13361                                  	;test	byte [DIRBUF_ATTRIB1],10h
 13362                                  	; 14/10/2018
 13363                                  	;test	byte [DIRBUF_ATTRIB1],ATTR_DIRECTORY
 13364                                  	;test	byte [DIRBUF+19],10h
 13365                                  	test	byte [DIRBUF+8+DIR_ENTRY.DIR_ATTR],ATTR_DIRECTORY
 13366                                  	jz	short FILEENT
 13367                                  	mov	dx,DMESPTR
 13368                                  	call	STD_PRINTF
 13369                                  	jmp	short NOFSIZ
 13370                                  FILEENT:
 13371                                  	;mov	dx,[DIRBUF_FSIZ_L]
 13372                                  	;mov	dx,[DIRBUF+36]
 13373                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_L]
 13374                                  	mov	[FILESIZE_L],dx
 13375                                  	;mov	dx,[DIRBUF_FSIZ_H]
 13376                                  	;mov	dx,[DIRBUF+38]
 13377                                  	mov	dx,[DIRBUF+8+DIR_ENTRY.DIR_SIZE_H]
 13378                                  	mov	[FILESIZE_H],dx
 13379                                  	mov	dx,FSIZEMESPTR
 13380                                  	call	STD_PRINTF	; Print size of file
 13381                                  NOFSIZ:
 13382                                  	;mov	ax,[DIRBUF_FDATE]  ; Get date
 13383                                  	;mov	ax,[DIRBUF+32]
 13384                                  	mov	ax,[DIRBUF+8+DIR_ENTRY.DIR_DATE]
 13385                                  	or	ax,ax
 13386                                  	jz	short NEXENT	; Skip if no date
 13387                                  	mov	di,CHARBUF
 13388                                  	push	ax
 13389                                  	mov	ax,'  '
 13390                                  	stosw
 13391                                  	pop	ax
 13392                                  	mov	bx,ax
 13393                                  	and	ax,1Fh		; Get day
 13394                                  	mov	dl,al
 13395                                  	mov	ax,bx
 13396                                  	mov	cl,5
 13397                                  	shr	ax,cl		; Align month
 13398                                  	and	al,0Fh		; Get month
 13399                                  	mov	dh,al
 13400                                  	mov	cl,bh
 13401                                  	shr	cl,1		; Align year
 13402                                  	xor	ch,ch
 13403                                  	add	cx,80		; Relative 1980
 13404                                  	cmp	cl,100
 13405                                  	jb	short MILLENIUM
 13406                                  	sub	cl,100
 13407                                  MILLENIUM:
 13408                                  	call	DATE_CXDX
 13409                                  	;mov	cx,[DIRBUF_FTIME]
 13410                                  	;mov	cx,[DIRBUF+30]
 13411                                  	mov	cx,[DIRBUF+8+DIR_ENTRY.DIR_TIME]
 13412                                  	jcxz	PRBUF		; Time field present?
 13413                                  	mov	ax,2020h
 13414                                  	stosw
 13415                                  	shr	cx,1
 13416                                  	shr	cx,1
 13417                                  	shr	cx,1
 13418                                  	shr	cl,1
 13419                                  	shr	cl,1		; Hours in CH, minutes in CL
 13420                                  	mov	bl,[TIME_24]
 13421                                  	or	bl,80h		; Tell P_TIME called from DIR
 13422                                  	call	P_TIME		; Don't care about DX, never used with DIR
 13423                                  PRBUF:
 13424                                  	xor	ax,ax
 13425                                  	stosb
 13426                                  	mov	dx,CHARBUF
 13427                                  	mov	[STRING_PTR_2],dx
 13428                                  	mov	dx,STRINGBUF2PTR
 13429                                  	call	STD_PRINTF
 13430                                  NEXENT:
 13431                                  	dec	byte [LINCNT]
 13432                                  	jnz	short SAMLIN
 13433                                  NEXLIN:
 13434                                  	mov	al,[LINLEN]
 13435                                  	mov	[LINCNT],al
 13436                                  	call	CRLF2
 13437                                  	dec	byte [LINPERPAG]
 13438                                  	jnz	short SCROLL
 13439                                  	;test	byte [_BITS],2
 13440                                  	test	byte [_BITS],SWITCHP ; P switch present?
 13441                                  	jz	short SCROLL	; If not, just continue
 13442                                  	mov	byte [LINPERPAG],23
 13443                                  	call	PAUSE
 13444                                  	jmp	short SCROLL
 13445                                  SAMLIN:
 13446                                  	mov	dx,TABPTR	; Output a tab
 13447                                  	call	STD_PRINTF
 13448                                  SCROLL:
 13449                                  	mov	ah,Dir_Search_Next ; 12h
 13450                                  	;mov	dx,55h
 13451                                  	mov	dx,FCB-7	; DX -> Unopened FCB
 13452                                  	int	21h	; DOS -	SEARCH NEXT USING FCB
 13453                                  			; DS:DX	-> FCB
 13454                                  			; Return: AL = status
 13455                                  	jmp	DIRSTART
 13456                                  CHKCNT:
 13457                                  	test	word [FILECNT],0FFFFh ; -1
 13458                                  	jnz	short TRAILER
 13459                                  	jmp	DIRNF
 13460                                  TRAILER:
 13461                                  	mov	al,[LINLEN]
 13462                                  	cmp	al,[LINCNT]
 13463                                  	jz	short MMESSAGE
 13464                                  	call	CRLF2
 13465                                  MMESSAGE:
 13466                                  	mov	dx,DIRMESPTR
 13467                                  	mov	si,[FILECNT]
 13468                                  	mov	[DIR_NUM],si
 13469                                  	call	STD_PRINTF
 13470                                  DTFREE:
 13471                                  	mov	ah,GET_DRIVE_FREESPACE ; 36h
 13472                                  	;mov	dl,[5Ch]
 13473                                  	mov	dl,[FCB]
 13474                                  	int	21h	; DOS -	2+ - GET DISK SPACE
 13475                                  			; DL = drive code (0 = default,	1 = A,2 = B,etc.)
 13476                                  	cmp	ax,-1
 13477                                  	jnz	short DTFREE1
 13478                                  DTRET:
 13479                                  	retn
 13480                                  DTFREE1:
 13481                                  	mul	cx
 13482                                  	mul	bx
 13483                                  	mov	[BYTES_FREE],ax
 13484                                  	mov	[BYTES_FREE+2],dx
 13485                                  	mov	dx,BYTEMESPTR
 13486                                  	jmp	STD_PRINTF
 13487                                  
 13488                                  ; =============== S U B	R O U T	I N E =======================================
 13489                                  
 13490                                  SHONAME:
 13491                                  DISPLAYNAME:
 13492                                  	; MSDOS 3.3
 13493                                  	mov	di,CHARBUF
 13494                                  	mov	cx,8
 13495                                  	rep	movsb
 13496                                  	mov	al,' '
 13497                                  	stosb
 13498                                  	mov	cx,3
 13499                                  	rep	movsb
 13500                                  	xor	ax,ax
 13501                                  	stosb
 13502                                  	push	dx
 13503                                  	mov	dx,CHARBUF
 13504                                  	mov	[STRING_PTR_2],dx
 13505                                  	mov	dx,STRINGBUF2PTR
 13506                                  	call	STD_PRINTF
 13507                                  	pop	dx
 13508                                  	retn
 13509                                  
 13510                                  %endif
 13511                                  
 13512                                  ;============================================================================
 13513                                  ; DIR.ASM, MSDOS 6.0, 1991
 13514                                  ;============================================================================
 13515                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13516                                  
 13517                                  	; MSDOS 6.0
 13518                                  %if 0
 13519                                  
 13520                                  ;***	DIR.ASM - DIR internal command
 13521                                  
 13522                                  comment	% =================================================================
 13523                                  
 13524                                  This module replaces TCMD1A.ASM.  The old module was titled 
 13525                                  "PART4 COMMAND Transient routines".
 13526                                  
 13527                                  From residual documentation, I surmise that TCMD.ASM originally
 13528                                  contained the internal commands DIR, PAUSE, ERASE, TYPE, VOL, and
 13529                                  VER.  The file seems to have been successively split:
 13530                                  
 13531                                    TCMD -> TCMD1,TCMD2 -> TCMD1A,TCMD1B,TCMD2A,TCMD2B
 13532                                  
 13533                                  TCMD1A.ASM contained only the DIR command.
 13534                                  
 13535                                  Usage:
 13536                                  ------
 13537                                  
 13538                                  DIR <filespec> /w /p /b /s /l /c /o<sortorder> /a<attriblist>
 13539                                  
 13540                                  DIR /?
 13541                                  
 13542                                  
 13543                                  <filespec> may include any or none of:  drive; directory path;
 13544                                             wildcarded filename.  If drive or directory path are
 13545                                  	   omitted, the current defaults are used.  If the
 13546                                  	   file name or extension is omitted, wildcards are
 13547                                  	   assumed.
 13548                                  
 13549                                  /w	Wide listing format.  Files are displayed in compressed
 13550                                  	'name.ext' format.  Subdirectory files are enclosed in
 13551                                  	brackets, '[dirname]'.
 13552                                  
 13553                                  /p	Paged, or prompted listing.  A screenful is displayed
 13554                                  	at a time.  The name of the directory being listed appears
 13555                                  	at the top of each page.
 13556                                  
 13557                                  	Bugbug:  pages nead to be uniform length..?
 13558                                  
 13559                                  /b	Bare listing format.  Turns off /w or /p.  Files are 
 13560                                  	listed in compressed 'name.ext' format, one per line,
 13561                                  	without additional information.  Good for making batch
 13562                                  	files or for piping.  When used with /s, complete
 13563                                  	pathnames are listed.
 13564                                  
 13565                                  /s	Descend subdirectory tree.  Performs command on current
 13566                                  	or specified directory, then for each subdirectory below
 13567                                  	that directory.  Directory header and footer is displayed
 13568                                  	for each directory where matching files are found, unless
 13569                                  	used with /b.  /b suppresses headers and footers.
 13570                                  
 13571                                  	Tree is explored depth first, alphabetically within the
 13572                                  	same level.
 13573                                  
 13574                                  	Bugbug:  hidden directories aren't searched.
 13575                                  
 13576                                  /l	Display file names, extensions and paths in lowercase.	;M010
 13577                                  
 13578                                  /c	Display file compression ratio, if the file is on a MagicDrv
 13579                                  	compressed volume.
 13580                                  
 13581                                  /o	Sort order.  /o alone sorts by default order (dirs-first, name,
 13582                                  	extension).  A sort order may be specified after /o.  Any of
 13583                                  	the following characters may be used: nedsgc (name, extension,
 13584                                  	date/time, size, group-dirs-first, compression ratio).	Placing
 13585                                  	a '-' before any letter causes a downward sort on that field.
 13586                                  	E.g., /oe-d means sort first by extension in alphabetical order,
 13587                                  	then within each extension sort by date and time in reverse
 13588                                  	chronological order.
 13589                                  
 13590                                  /a	Attribute selection.  Without /a, hidden and system files
 13591                                  	are suppressed from the listing.  With /a alone, all files
 13592                                  	are listed.  An attribute list may follow /a, consisting of
 13593                                  	any of the following characters:  hsdar (hidden, system,
 13594                                  	directory, archive, read-only).  A '-' before any letter
 13595                                  	means 'not' that attribute.  E.g., /ar-d means files that
 13596                                  	are marked read-only and are not directory files.  Note
 13597                                  	that hidden or system files may be included in the listing.
 13598                                  	They are suppressed without /a but are treated like any other
 13599                                  	attribute with /a.
 13600                                  
 13601                                  /?	Help listing.  Display DIR useage information.	;M008;Handled externally
 13602                                  
 13603                                  /h has been removed.					;M008
 13604                                  
 13605                                  DIRCMD	An environment variable named DIRCMD is parsed before the
 13606                                  	DIR command line.  Any command line options may be specified
 13607                                  	in DIRCMD, and become defaults.  /? will be ignored in DIRCMD.
 13608                                  	A filespec may be specified in DIRCMD and will be used unless
 13609                                  	a filespec is specified on the command line.  Any switch
 13610                                  	specified in DIRCMD may be overridden on the command line.
 13611                                  	If the original DIR default action is desired for a particular
 13612                                  	switch, the switch letter may be preceded by a '-' on the
 13613                                  	command line.  E.g.,
 13614                                  
 13615                                  	  /-w	use long listing format
 13616                                  	  /-p	don't page the listing
 13617                                  	  /-b	don't use bare format
 13618                                  	  /-s	don't descend subdirectory tree
 13619                                  	  /-o	display files in disk order
 13620                                  	  /-a	suppress hidden and system files
 13621                                  
 13622                                  Notes:
 13623                                  ------
 13624                                  
 13625                                  For sorted listings, file entries are loaded into the TPA buffer, which
 13626                                  is usually about 64K in size.  This allows sorts of up to 3000 files at
 13627                                  a time.  Each entry takes up 21 bytes in the buffer (see EntryStruc below).
 13628                                  The byte after the last entry is 0FFh.  The first byte of each entry is
 13629                                  a flag byte which is made zero when the entry is loaded, and made one
 13630                                  when the entry is used.
 13631                                  
 13632                                  Revision History
 13633                                  ================
 13634                                  M01	md	7/13/90 	Use ROM BIOS data area to obtain screen height
 13635                                  				in the absence of ANSI.SYS
 13636                                  
 13637                                  M007	sa	8/1/90		Allow /p/b combination
 13638                                  
 13639                                  M008	sa	8/1/90		Remove /h parameter.  Eliminate code used
 13640                                  				to internally handle /? message.
 13641                                  
 13642                                  M010	sa	8/5/90		Add support for /l (lowercase) option.
 13643                                  
 13644                                  M011	sa	8/5/90		Patch up bug where MS-DOS does not load the
 13645                                  				first FCB with the drive number when the drive
 13646                                  				letter in the command line is preceded by a
 13647                                  				switch.  Now dir manually loads the drive
 13648                                  				number after parsing.
 13649                                  
 13650                                  M018	md	8/12/90 	Increment the screen height by 1 when obtained
 13651                                  				from the ROM BIOS.
 13652                                  
 13653                                  M023	sa	8/31/90		Prevent DIR from failing if it encounters
 13654                                  				a subdirectory having len(pathname)>MAXPATH.
 13655                                  				Just skip over that subdirectory.
 13656                                  
 13657                                  M028	dbo	9/24/90		When country=US, sort by strict character
 13658                                  				byte value, rather than collating table.
 13659                                  				This to match MS-DOS Shell's sort order.
 13660                                  
 13661                                  ========================================================================= %
 13662                                  
 13663                                  %endif
 13664                                  
 13665                                  ; 16/02/2023
 13666                                  
 13667                                  NUM_DIR_SWS	equ	14	; # of dir switch synonyms in Dir_Sw_Ptrs list
 13668                                  
 13669                                  ;OptionRec	record	inmem:1,lcase:1,bare:1,subd:1,pagd:1,wide:1
 13670                                  ;
 13671                                  ;		on/off bit record for /l, /b, /s, /p, /w, /c options
 13672                                  ;		(order is hard-coded; see OnOffSw)
 13673                                  ;		Inmem is set when entries are loaded in memory.
 13674                                  
 13675                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13676                                  mask.wide  equ 1
 13677                                  mask.pagd  equ 2
 13678                                  mask.subd  equ 4
 13679                                  mask.bare  equ 8
 13680                                  mask.lcase equ 16
 13681                                  mask.inmem equ 32
 13682                                  ;
 13683                                  mask.dev    equ 1
 13684                                  mask.baddir equ 2	
 13685                                  
 13686                                  NUM_ATTR_LTRS	equ	6	; length of attribute letter list
 13687                                  
 13688                                  NUM_ORDER_LTRS	equ	5	; length of sort order letter list
 13689                                  
 13690                                  ;ResultBuffer	struc		; structure of parse result buffer
 13691                                  ;ValueType	db	?
 13692                                  ;ValueTag	db	?
 13693                                  ;SynPtr		dw	?
 13694                                  ;ValuePtr	dd	?
 13695                                  ;ResultBuffer	ends
 13696                                  
 13697                                  ;ErrorRec	record	baddir:1,dev:1
 13698                                  ;
 13699                                  ;		Error bits are:
 13700                                  ;		  Invalid directory format
 13701                                  ;		  File is device
 13702                                  
 13703                                  ;EntryStruc	struc			; our private directory entry structure
 13704                                  ;used		db	?		; =0 until entry used, then =1
 13705                                  ;filename	db	8 dup (?)	; filename
 13706                                  ;fileext	db	3 dup (?)	; extension
 13707                                  ;fileattr	db	?		; file attributes
 13708                                  ;filetime	dw	?		; file time
 13709                                  ;filedate	dw	?		; file date
 13710                                  ;filesize	dd	?		; file size
 13711                                  ;EntryStruc	ends
 13712                                  
 13713                                  ;shove	macro	val		; hose-bag 8086 doesn't push immediate
 13714                                  ;	mov	ax,val		; invisible, dangerous use of AX!
 13715                                  ;	push	ax
 13716                                  ;	endm
 13717                                  
 13718                                  ;	public	Catalog		; our entry point
 13719                                  ;
 13720                                  ;	break	<DIR (Catalog) principal routines>
 13721                                  ;
 13722                                  ;	assume	cs:TRANGROUP,ds:TRANGROUP,es:nothing,ss:TRANGROUP
 13723                                  ; ---------------------------------------------------------------------------
 13724                                  ;	Bugbug:	Each routine should start with it's own ASSUME.
 13725                                  
 13726                                  ;----------------------------------------------------------------------------
 13727                                  ;----------------------------------------------------------------------------
 13728                                  
 13729                                  ; 16/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 13730                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:108Dh
 13731                                  
 13732                                  ;***	Catalog - DIR command main routine
 13733                                  ;
 13734                                  ;	ENTRY	FCB #1 in PSP has drive# from cmd-line or default
 13735                                  ;		Cmd-line tail text is at 81h, terminated by 0Dh
 13736                                  ;		CS, DS, ES, SS = TRANGROUP seg addr
 13737                                  ;		Tpa = TPA buffer seg addr
 13738                                  ;		BytCnt = # bytes in TPA buffer
 13739                                  ;
 13740                                  ;	EXIT	nothing
 13741                                  ;
 13742                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 13743                                  ;
 13744                                  ;	ERROR EXITS
 13745                                  ;
 13746                                  ;	  Errors are handled by setting up error message pointers
 13747                                  ;	   for Std_EPrintf and jumping to CError. Syntax errors in
 13748                                  ;	   the environment variable, however, are handled by printing
 13749                                  ;	   an error message and continuing.
 13750                                  ;
 13751                                  ;	EFFECTS
 13752                                  ;
 13753                                  ;	  Directory listing is displayed (on standard output).
 13754                                  ;	  APPEND is disabled. HeadFix routine is expected to
 13755                                  ;	   restore APPEND state.
 13756                                  ;	  Working directory may be changed. The user's default
 13757                                  ;	   directory is saved and flagged for restoration by RestUDir
 13758                                  ;	   during COMMAND cycle.
 13759                                  ;	  Lots of variables may be changed in TRANSPACE segment.
 13760                                  ;
 13761                                  ;	NOTES
 13762                                  ;
 13763                                  ;	  ES = TRANGROUP seg addr except when used to address the
 13764                                  ;	   the TPA buffer, where directory entries are loaded from disk.
 13765                                  
 13766                                  	; 16/02/2023
 13767                                  CATALOG:
 13768 00001064 E8A400                  	call	SetDefaults
 13769 00001067 E8C800                  	call	ParseEnvironment
 13770 0000106A E8E000                  	call	ParseCmdLine
 13771 0000106D 7303                    	jnc	short catalog1	; no parse error
 13772 0000106F E99600                  	jmp	catErr		; error msg is set up
 13773                                  catalog1:
 13774 00001072 E80901                  	call	SetOptions
 13775 00001075 E8DF00                  	call	SetCollatingTable
 13776                                  
 13777                                  ;	Drive # to operate on has already been placed in FCB by
 13778                                  ;	COMMAND preprocessing. OkVolArg & PathCrunch depend on that.
 13779                                  
 13780                                  	;;;test	Bits,mask bare
 13781                                  	;;test 	word [_Bits],8
 13782                                  	;test	byte [_Bits],8
 13783 00001078 F606[208C]08            	test	byte [_Bits],mask.bare
 13784 0000107D 750A                    	jnz	short catalog2	; don't display volume info for /b
 13785                                  	;invoke	OkVolArg	; find & display volume info
 13786 0000107F E8E20B                  	call	OkVolArg
 13787                                  	;sub	byte [LeftOnpage],2
 13788 00001082 832E[EF8A]02            	sub	word [LeftOnPage],2
 13789                                  				; record display lines used by volume info
 13790 00001087 EB14                    	jmp	short catCrunch
 13791                                  
 13792                                  ;	OkVolArg side effects:
 13793                                  ;	APPEND is disabled;
 13794                                  ;	DTA established at DirBuf;
 13795                                  ;	Filename fields in FCB are wildcarded.
 13796                                  
 13797                                  catalog2:
 13798                                  ;	OkVolArg wasn't executed, so we have to do these ourselves.
 13799                                  
 13800                                  	;invoke	DisAppend	; disable APPEND
 13801 00001089 E8A50B                  	call	DisAppend
 13802                                  
 13803                                  	;mov	dx,offset TRANGROUP:DirBuf
 13804 0000108C BA[CE8B]                	mov	dx,DIRBUF
 13805 0000108F B41A                    	mov	ah,1Ah
 13806                                  	;mov	ah,Set_DMA
 13807 00001091 CD21                    	int	21h		; set DTA
 13808                                  
 13809                                  
 13810                                  	;mov	di,FCB	; 5Ch	; ES:DI = ptr to FCB
 13811                                  	;inc	di		; ES:DI = ptr to filename field of FCB
 13812                                  	; 28/07/2024
 13813 00001093 BF5D00                  	mov	di,FCB+1 ; 5Dh
 13814 00001096 B03F                    	mov	al,'?'		; AL = wildcard character
 13815 00001098 B90B00                  	mov	cx,11
 13816 0000109B F3AA                    	rep	stosb		; wildcard filename field
 13817                                  
 13818                                  catCrunch:
 13819 0000109D E83901                  	call	CrunchPath	; crunch pathname to get directory and filename
 13820 000010A0 7230                    	jc	short catRecErr	; handle recorded or extended error
 13821                                  
 13822                                  ;	User's directory has been saved, we've changed to specified directory.
 13823                                  ;	ComSw = error bits for later use
 13824                                  ;	FCB contains parsed filename
 13825                                  
 13826                                  	;cmp	byte [COMSW],0
 13827 000010A2 833E[DC8A]00            	cmp	word [COMSW],0
 13828 000010A7 7529                    	jne	short catRecErr	; handle recorded error
 13829                                  
 13830 000010A9 E88701                  	call	InstallCtrlC	; install control-C handler
 13831 000010AC E8CF08                  	call	ZeroTotals	; zero grand totals
 13832 000010AF E84304                  	call	ListDir		; list main directory
 13833 000010B2 7244                    	jc	short catExtErr
 13834                                  
 13835                                  	;;;test	Bits,mask subd
 13836                                  	;;test	word [_Bits],4
 13837                                  	;test	byte [_Bits],4
 13838 000010B4 F606[208C]04            	test	byte [_Bits],mask.subd
 13839 000010B9 7405                    	jz	short catalog3	; subdirectories option not set
 13840 000010BB E88D01                  	call	ListSubds	; list subdirectories
 13841 000010BE 7238                    	jc	short catExtErr
 13842                                  catalog3:
 13843                                  ;	Check if any files were found.
 13844                                  
 13845                                  	;;;test	Bits,mask bare
 13846                                  	;;test	word [_Bits],8
 13847                                  	;test	byte [_Bits],8
 13848 000010C0 F606[208C]08            	test	byte [_Bits],mask.bare
 13849 000010C5 750A                    	jnz	short catRet	; don't bother for bare format
 13850                                  
 13851 000010C7 A1[F78A]                	mov	ax,[FileCntTotal]
 13852 000010CA 09C0                    	or	ax,ax
 13853 000010CC 7417                    	jz	short catNoFiles ; no files found
 13854                                  
 13855 000010CE E8A702                  	call	DisplayTotals	; display trailing grand totals
 13856                                  	;jmp	short catRet	; all done
 13857                                  	; 25/04/2023
 13858                                  catRet:
 13859 000010D1 C3                      	retn
 13860                                  
 13861                                  catRecErr:
 13862                                  
 13863                                  ;	ComSw may have error bit set. If not, do extended error.
 13864                                  
 13865                                  	;;;test	ComSw,mask dev
 13866                                  	;;test	word [COMSW],1
 13867                                  	;test	byte [COMSW],1
 13868 000010D2 F606[DC8A]01            	test	byte [COMSW],mask.dev
 13869 000010D7 750C                    	jnz	short catNoFiles 
 13870                                  				; filename is device, respond 'file not found'
 13871                                  	;;test	ComSw,mask baddir
 13872                                  	;;test	word [COMSW],2
 13873                                  	;test	byte [COMSW],2
 13874 000010D9 F606[DC8A]02            	test	byte [COMSW],mask.baddir
 13875 000010DE 7418                    	jz	short catExtErr	; no ComSw error bits, must be extended error
 13876                                  	;mov	dx,offset TRANGROUP:BadCd_Ptr
 13877                                  				; invalid directory
 13878 000010E0 BA[5680]                	mov	dx,badcd_ptr
 13879 000010E3 EB23                    	jmp	short catErr
 13880                                  
 13881                                  catNoFiles:
 13882                                  
 13883                                  ;	Display header and force 'file not found' message.
 13884                                  
 13885 000010E5 E81107                  	call	DisplayHeader
 13886 000010E8 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 13887 000010EB C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 13888 000010F0 BA[1B7F]                	mov	dx,extend_buf_ptr
 13889 000010F3 A3[1B7F]                	mov	[extend_buf_ptr],ax
 13890 000010F6 EB10                    	jmp	short catErr
 13891                                  
 13892                                  catExtErr:
 13893                                  
 13894                                  ;	DOS has returned an error status. Get the extended error#, and
 13895                                  ;	set up an error message, changing 'No more files' error 
 13896                                  ;	to 'File not found' error.
 13897                                  
 13898 000010F8 E8E70B                  	call	Set_Ext_Error_Msg
 13899 000010FB 833E[1B7F]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 13900 00001100 7506                    	jne	short catalog4  ; catErr
 13901 00001102 C706[1B7F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 13902                                  catalog4:
 13903                                  
 13904                                  ;	Error exit. Error message information has been set up
 13905                                  ;	for Std_EPrintf.
 13906                                  
 13907                                  catErr:
 13908 00001108 E94918                  	jmp	cerror		; go to COMMAND error recycle point
 13909                                  
 13910                                  	; 25/04/2023
 13911                                  ;catRet:
 13912                                  	;retn
 13913                                  
 13914                                  ; ---------------------------------------------------------------------------
 13915                                  
 13916                                  ;***	SetDefaults - set default pathname, options
 13917                                  ;
 13918                                  ;	ENTRY	DS = TRANGROUP seg addr
 13919                                  ;
 13920                                  ;	EXIT	nothing
 13921                                  ;
 13922                                  ;	USED	AX,DI
 13923                                  ;
 13924                                  ;	EFFECTS
 13925                                  ;	  SrcBuf = '*',EOL - default pathname
 13926                                  ;	  PathPos = ptr to pathname
 13927                                  ;	  PathCnt = length of pathname
 13928                                  
 13929                                  	; 16/02/2023
 13930                                  SetDefaults:
 13931 0000110B BF[348D]                	mov	di,SrcBuf		; DI = ptr to pathname buffer
 13932 0000110E 893E[248C]              	mov	[PathPos],di		; PathPos = ptr to pathname
 13933                                  	;mov	al,STAR
 13934 00001112 B02A                    	mov	al,'*'
 13935 00001114 AA                      	stosb
 13936                                  	;mov	al,END_OF_LINE_IN
 13937 00001115 B00D                    	mov	al,0Dh ; cr
 13938 00001117 AA                      	stosb				; SrcBuf = '*',0Dh
 13939 00001118 C706[228C]0100          	mov	word [PathCnt],1	; PathCnt = pathname length
 13940                                  
 13941 0000111E 31C0                    	xor	ax,ax			; AX = 0
 13942 00001120 A3[DC8A]                	mov	[COMSW],ax		; = no error
 13943 00001123 A3[208C]                	mov	[_Bits],ax		; = options off
 13944 00001126 A2[D18C]                	mov	[DestBuf],al		; = no sort
 13945 00001129 C606[288C]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM ; 6
 13946 0000112E A2[298C]                	mov	[AttrSelect],al		; exclude hidden, system files
 13947                                  peRet:	; 25/04/2023
 13948 00001131 C3                      	retn
 13949                                  
 13950                                  ; ---------------------------------------------------------------------------
 13951                                  
 13952                                  ;***	ParseEnvironment - find and parse our environment variable
 13953                                  ;
 13954                                  ;	Find our environment variable and parse it. If a parse
 13955                                  ;	error occurs, issue an error message. The parse results
 13956                                  ;	up to the error will still have effect. Always leave
 13957                                  ;	the option variables in a useable state.
 13958                                  ;
 13959                                  ;	ENTRY	DS = TRANGROUP seg addr
 13960                                  ;
 13961                                  ;	EXIT	nothing
 13962                                  ;
 13963                                  ;	USED	AX,BX,CX,DX,SI,DI
 13964                                  ;
 13965                                  ;	EFFECTS
 13966                                  ;
 13967                                  ;	  Bits may contain new option settings.
 13968                                  ;	  DestBuf may contain new series of sort codes.
 13969                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 13970                                  ;	  SrcBuf may contain a new default pathname/filespec.
 13971                                  ;	  PathPos, PathCnt updated for new pathname.
 13972                                  ;
 13973                                  ;	  If a parse error occurred, an error message will be issued.
 13974                                  
 13975                                  	; 16/02/2023
 13976                                  ParseEnvironment:
 13977 00001132 E87603                  	call	GetEnvValue		; get environment variable value
 13978 00001135 72FA                    	jc	short peRet		; name not found in environment
 13979                                  
 13980                                  ;	SI = ptr to value of environment variable, in TRANGROUP seg
 13981                                  
 13982 00001137 E8B904                  	call	Parse_Line		; parse environment value
 13983 0000113A 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 13984                                  	;cmp	ax,END_OF_LINE
 13985 0000113D 74F2                    	je	short peRet		; successful completion
 13986                                  
 13987                                  ;	Some kind of parse error occurred.
 13988                                  ;	We're set up for a Std_EPrintf call.
 13989                                  
 13990 0000113F E8A53C                  	call	std_eprintf		; display the parse error
 13991                                  	;mov	byte [Msg_Disp_Class],util_msg_class ; -1
 13992                                  					; restore default msg class
 13993 00001142 C606[197F]FF            	mov	byte [msg_disp_class],0FFh ; -1
 13994                                  	;mov	dx,offset TRANGROUP:ErrParsEnv_Ptr
 13995 00001147 BA[5A81]                	mov	dx,errparsenv_ptr
 13996                                  	;;invoke Printf_Crlf		; "(Error occurred in environment.."
 13997                                  	;call	Printf_Crlf
 13998                                  	; 25/04/2023
 13999                                  	;retn
 14000 0000114A E9943C                  	jmp	Printf_Crlf
 14001                                  					;M008;Internal handling of /? removed
 14002                                  ;peOk:	and	Bits,not mask help	; disallow /h in environment variable
 14003                                  	; 25/04/2023
 14004                                  ;peRet:
 14005                                  	;retn
 14006                                  
 14007                                  ; ---------------------------------------------------------------------------
 14008                                  
 14009                                  ;***	ParseCmdLine - parse and record command line parameters
 14010                                  ;
 14011                                  ;	ENTRY	PSP offset 81h is beginning of cmd line buffer
 14012                                  ;		DS, ES, CS = TRANGROUP seg addr
 14013                                  ;
 14014                                  ;	EXIT	CY = set if parse error occurred
 14015                                  ;
 14016                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 14017                                  ;		AX = system parser error code
 14018                                  ;		DX = ptr to message block
 14019                                  ;
 14020                                  ;	USED	AX,BX,CX,DX,SI,DI
 14021                                  ;
 14022                                  ;	EFFECTS
 14023                                  ;
 14024                                  ;	  Bits may contain new option settings.
 14025                                  ;	  DestBuf may contain new series of sort codes.
 14026                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 14027                                  ;	  SrcBuf may contain a new default pathname/filespec.
 14028                                  ;	  PathPos, PathCnt updated for new pathname.
 14029                                  ;
 14030                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 14031                                  ;	  Msg_Disp_Class = parse error class
 14032                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 14033                                  ;	  Message block (see DX) is set up for parse error message
 14034                                  
 14035                                  	; 16/02/2023
 14036                                  ParseCmdLine:
 14037 0000114D BE8100                  	mov	si,81h			; SI = ptr to cmd-line tail text
 14038 00001150 E8A004                  	call	Parse_Line		; parse cmd line tail
 14039 00001153 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 14040                                  	;;cmp	ax,END_OF_LINE
 14041                                  	; 25/04/2023
 14042                                  	;je	short pcOk		; parse completed successfully
 14043                                  
 14044                                  ;	A parse error occurred. We're all set up for message output.
 14045                                  
 14046                                  	; 25/04/2023
 14047                                  	; cf = 1 (ax < 0FFFFh)
 14048                                  	;stc		   		; return failure
 14049                                  	;jmp	short pcRet
 14050                                  	; 25/04/2023
 14051                                  	;retn
 14052                                  pcOk:
 14053                                  	; 25/04/2023
 14054                                  	;cf = 0 (ax = 0FFFFh)
 14055                                  	;clc				; return success
 14056                                  pcRet:
 14057 00001156 C3                      	retn
 14058                                  
 14059                                  ; ---------------------------------------------------------------------------
 14060                                  
 14061                                  ;***	SetCollatingTable - set up character collating table for sorting
 14062                                  ;
 14063                                  ;	If country is other than USA, try to get a collating table
 14064                                  ;	for character sorting. For USA, use straight byte values.
 14065                                  ;	This is so DIR behaves like the MS-DOS Shell, which sorts
 14066                                  ;	by straight byte values in the USA for better performance.
 14067                                  ;
 14068                                  ;	ENTRY	ES = TRANGROUP seg addr
 14069                                  ;
 14070                                  ;	EXIT	nothing
 14071                                  ;
 14072                                  ;	USED	AX,BX,CX,DX,DI
 14073                                  ;
 14074                                  ;	EFFECTS
 14075                                  ;
 14076                                  ;	  If collating table is set -
 14077                                  ;	    CountryPtrId = 6.
 14078                                  ;	    CountryPtr points to collating table.
 14079                                  ;
 14080                                  ;	  Otherwise -
 14081                                  ;	    CountryPtrId = 0.
 14082                                  
 14083                                  SetCollatingTable:
 14084                                  
 14085                                  ;	Begin modification M028
 14086                                  
 14087                                  	;mov	dx,offset TRANGROUP:InternatVars
 14088                                  	;			; DS:DX = ptr to international info buffer
 14089 00001157 BA[A395]                	mov	dx,INTERNATVARS
 14090 0000115A B80038                  	mov	ax,3800h
 14091                                  	;mov	ax,INTERNATIONAL << 8
 14092                                  	;;mov	ax,INTERNATIONAL shl 8
 14093                                  				; AX = 'Get current country info'
 14094 0000115D CD21                    	int	21h		; call DOS
 14095 0000115F 7217                    	jc	short scNoTable	; error - so don't collate
 14096                                  
 14097                                  ;	BX = country code
 14098                                  
 14099 00001161 83FB01                  	cmp	bx,1
 14100 00001164 7412                    	je	short scNoTable	; we're in USA, don't collate
 14101                                  
 14102                                  ;	End modification M028
 14103                                  
 14104                                  ;*	Country code is other than USA. Try to get a collating table.
 14105                                  
 14106 00001166 B80665                  	mov	ax,6506h
 14107                                  	;mov	ax,(GETEXTCNTRY << 8) + SETCOLLATE
 14108                                  	;;mov	ax,(GETEXTCNTRY shl 8) + SETCOLLATE
 14109                                  				; AH = 'Get Extended Country Info'
 14110                                  				; AL = 'Get Pointer to Collating Table'
 14111 00001169 BBFFFF                  	mov	bx,-1		; BX = code page of interest = CON
 14112 0000116C B90500                  	mov	cx,5		; CX = length of info buffer
 14113 0000116F 89DA                    	mov	dx,bx		; DX = country ID = default
 14114                                  	;mov	di,offset TRANGROUP:CountryPtrInfo
 14115 00001171 BF[C395]                	mov	di,CountryPtrInfo
 14116                                  				; ES:DI = ptr to info buffer
 14117 00001174 CD21                    	int	21h		; call DOS
 14118 00001176 7305                    	jnc	short scRet	; success
 14119                                  
 14120                                  ;*	Set CountryPtrId = 0 to signal no collating table.
 14121                                  
 14122                                  scNoTable:			;M028
 14123 00001178 C606[C395]00            	mov	byte [CountryPtrId],0
 14124                                  scRet:
 14125 0000117D C3                      	retn
 14126                                  
 14127                                  ; ---------------------------------------------------------------------------
 14128                                  
 14129                                  ;***	SetOptions - check and set options
 14130                                  ;
 14131                                  ;	ENTRY	nothing
 14132                                  ;
 14133                                  ;	EXIT	nothing
 14134                                  ;
 14135                                  ;	USED	AX,BX,CX,DX
 14136                                  ;
 14137                                  ;	EFFECTS
 14138                                  ;
 14139                                  ;	  Bits may contain modified option settings.
 14140                                  ;	  Display_Ioctl table, including LinPerPag variable, is filled in.
 14141                                  ;	  LeftOnPage is initialized to # lines till end of page is handled.
 14142                                  ;	  PerLine is set according to /w presence.
 14143                                  
 14144                                  	; 16/02/2023
 14145                                  SetOptions:
 14146                                  
 14147                                  ;	If bare listing requested, cancel wide listings.
 14148                                  
 14149                                  	;;;test	Bits,mask bare
 14150                                  	;;test	word [_Bits],8
 14151                                  	;test	byte [_Bits],8
 14152 0000117E F606[208C]08            	test	byte [_Bits],mask.bare
 14153 00001183 7405                    	jz	short setopts1
 14154                                  	;;;and	Bits,not mask wide	;M007;Allow /p with /b
 14155                                  	;;and	word [_Bits],0FFFEh
 14156                                  	;;and	byte [_Bits],0FEh
 14157 00001185 8026[208C]FE            	and	byte [_Bits],~mask.wide ; 0FEh
 14158                                  setopts1:
 14159                                  ;	Set # lines per display page.
 14160                                  
 14161                                  ;M01  Obtain screen height from ROM BIOS data area
 14162                                  ;
 14163                                  ;M01	mov	LinPerPag,LINESPERPAGE	; default value
 14164                                  
 14165 0000118A 1E                      	push	ds
 14166                                  	;mov	ax,ROMBIOS_DATA 	; Get ROM Data segment
 14167 0000118B B84000                  	mov	ax,40h
 14168 0000118E 8ED8                    	mov	ds,ax			;
 14169                                  	;Assume	DS:ROMBIOS_DATA
 14170                                  
 14171                                  	;mov	al,[CRT_Rows] ; [84h]	; Get max rows
 14172 00001190 A08400                  	mov	al,[84h]
 14173 00001193 1F                      	pop	ds			;
 14174                                  	;Assume	DS:Trangroup
 14175                                  
 14176 00001194 08C0                    	or	al,al			; If zero specified
 14177 00001196 7502                    	jnz	short setopts2		;
 14178                                  
 14179                                  	;mov	al,LINESPERPAGE 	; assume 24 rows
 14180 00001198 B019                    	mov	al,25	; MSDOS 5.0 COMMAND.COM (TRANGROUP:11D1h)
 14181                                  setopts2:
 14182 0000119A 30E4                    	xor	ah,ah
 14183                                  setopts3:
 14184 0000119C FEC0                    	inc	al			; height + 1 ;M018
 14185                                  
 14186 0000119E A3[1B8E]                	mov	[LinPerPag],ax		; set the rows now
 14187                                  
 14188                                  ; Now the console driver can change the rows if it knows better (M01 end)
 14189                                  
 14190                                  	;mov	ax,(IOCTL shl 8)+GENERIC_IOCTL_HANDLE
 14191                                  					; IOCTL for handles
 14192 000011A1 B80C44                  	mov	ax,440Ch
 14193                                  	;mov	bx,STDOUT		; handle #
 14194 000011A4 BB0100                  	mov	bx,1
 14195                                  	;mov	ch,IOC_SC		; screen
 14196 000011A7 B503                    	mov	ch,3
 14197                                  	;mov	cl,get_generic		; get display info
 14198 000011A9 B17F                    	mov	cl,7Fh
 14199 000011AB BA[0B8E]                	mov	dx,Display_Ioctl	; info block
 14200 000011AE CD21                    	int	21h			; call DOS
 14201                                  
 14202 000011B0 A1[1B8E]                	mov	ax,[LinPerPag]		; AX = # lines per page
 14203 000011B3 A3[EF8A]                	mov	[LeftOnPage],ax		; initialize # lines left on page
 14204                                  
 14205                                  ;	Set # entries per line.
 14206                                  
 14207                                  	;mov	byte [PerLine],NORMPERLIN
 14208                                  					; # entries per line without /w
 14209 000011B6 C606[EC8A]01            	mov	byte [PerLine],1
 14210                                  	;;;test	Bits,mask wide
 14211                                  	;;test	word [_Bits],1
 14212                                  	;test	byte [_Bits],1
 14213 000011BB F606[208C]01            	test	byte [_Bits],mask.wide
 14214 000011C0 7405                    	jz	short setopts4
 14215                                  	;mov	byte [PerLine],WIDEPERLIN
 14216                                  					; # entries per line with /w
 14217 000011C2 C606[EC8A]05            	mov	byte [PerLine],5
 14218                                  setopts4:
 14219                                  				;M011;start;The following code checks if a drive
 14220                                  				;letter has been parsed into SrcBuf, and if
 14221                                  				;so, the correct drive number is loaded into
 14222                                  				;the first FCB, at offset 5C.
 14223                                  
 14224                                  	;cmp	TRANGROUP:[SrcBuf+1],COLON_CHAR	; is this a drive letter?
 14225 000011C7 803E[358D]3A            	cmp	byte [SrcBuf+1],':'
 14226 000011CC 750A                    	jne	short soRet
 14227                                  	;mov	al,TRANGROUP:[SrcBuf]		; load drive letter into al
 14228 000011CE A0[348D]                	mov	al,[SrcBuf]
 14229                                  	;and	al,not 20h			; capitalize ASCII drive letter (LowerCase-32)-->UpperCase
 14230 000011D1 24DF                    	and	al,0DFh ; ~20h ; not 20h
 14231 000011D3 2C40                    	sub	al,'@'				; convert to 1-based number (1=A)
 14232 000011D5 A25C00                  	mov	[FCB],al  ; [5Ch]		; store in first FCB
 14233                                  						;M011;end
 14234                                  soRet:
 14235 000011D8 C3                      	retn
 14236                                  
 14237                                  ; ---------------------------------------------------------------------------
 14238                                  
 14239                                  ;***	CrunchPath - analyze supplied or default pathname
 14240                                  ;
 14241                                  ;	ENTRY	PathPos = ptr to pathname buffer
 14242                                  ;		PathCnt = length of pathname, not incl trailing delimiter
 14243                                  ;		Pathname in buffer must end in delimiter (like CR) and
 14244                                  ;		 must have space for another char after the delimiter.
 14245                                  ;
 14246                                  ;	EXIT	CY = clear if no error
 14247                                  ;		We are changed to directory found in pathname
 14248                                  ;		Previous directory ready to be restored via RestUDir
 14249                                  ;		FCB filename fields contain filename (possibly w/ wildcards)
 14250                                  ;
 14251                                  ;		If error occurred,
 14252                                  ;		CY = set
 14253                                  ;		ComSw = error bits (see ErrorRec)
 14254                                  ;		If ComSw not set,
 14255                                  ;		Ready for DOS Get Extended Error call
 14256                                  
 14257                                  	; 16/02/2023
 14258                                  CrunchPath:
 14259 000011D9 E8E101                  	call	FileIsDevice
 14260 000011DC 7507                    	jne	short crpath1	; not a device, skip ahead
 14261                                  	;;;or	ComSw,mask dev	; signal file is device
 14262                                  	;;or	word [COMSW],1
 14263                                  	;or	byte [COMSW],1
 14264 000011DE 800E[DC8A]01            	or	byte [COMSW],mask.dev
 14265 000011E3 EB2F                    	jmp	short cpErr	; return error
 14266                                  crpath1:
 14267 000011E5 FF36[248C]              	push	word [PathPos]	; save ptr to pathname
 14268 000011E9 C606[2C8C]FF            	mov	byte [DirFlag],-1
 14269                                  				; tell PathCrunch not to parse file into FCB
 14270 000011EE E88B14                  	call	PathCrunch	; change to directory in pathname
 14271 000011F1 C606[2C8C]00            	mov	byte [DirFlag],0
 14272                                  				; reset our little flag
 14273 000011F6 5E                      	pop	si		; SI = ptr to pathname
 14274 000011F7 7208                    	jc	short cpNoDir	; didn't find directory path
 14275 000011F9 741A                    	jz	short cpRet	; found directory path w/ no filename
 14276                                  				;  - leave wildcard default in FCB and return
 14277                                  
 14278                                  ;*	We found a directory, and there was a filename attached.
 14279                                  ;	DestTail = ptr to ASCIIZ filename
 14280                                  
 14281 000011FB 8B36[CE8C]              	mov	si,[DestTail]	; SI = ptr to filename
 14282 000011FF EB28                    	jmp	short cpFile	; go parse the file into FCB
 14283                                  
 14284                                  ;*	PathCrunch failed to find a directory in the pathname.
 14285                                  ;
 14286                                  ;	Msg_Numb = error code
 14287                                  ;	DestIsDir = nonzero if path delimiter char's occur in pathname
 14288                                  ;	SI = ptr to pathname (now an ASCIIZ string)
 14289                                  
 14290                                  cpNoDir:
 14291 00001201 A1[388E]                	mov	ax,[Msg_Numb]	  ; AX = error code from PathCrunch
 14292 00001204 09C0                    	or	ax,ax
 14293 00001206 750C                    	jnz	short cpErr	  ; error occurred - return it
 14294 00001208 803E[CC8C]00            	cmp	byte [DestIsDir],0
 14295 0000120D 7407                    	je	short cpMaybe	  ; no path delimiters seen, maybe it's a file
 14296                                  crpath3:
 14297                                  	;;;or	ComSw,mask baddir ; signal invalid directory name
 14298                                  	;;or	word [COMSW],2
 14299                                  	;or	byte [COMSW],2
 14300 0000120F 800E[DC8A]02            	or	byte [COMSW],mask.baddir
 14301                                  	;jmp	short cpErr	  ; return error
 14302                                  	; 16/02/2023
 14303                                  cpErr:
 14304 00001214 F9                      	stc			  ; return error
 14305                                  cpRet:
 14306 00001215 C3                      	retn
 14307                                  
 14308                                  cpMaybe:
 14309                                  ;	SI = ptr to pathname
 14310                                  
 14311                                  	;cmp	byte [si+1],COLON_CHAR
 14312 00001216 807C013A                	cmp	byte [si+1],':'
 14313 0000121A 7501                    	jne	short crpath2	  ; no drive specifier, skip ahead
 14314 0000121C AD                      	lodsw			  ; SI = ptr past drive specifier "d:"
 14315                                  crpath2:
 14316 0000121D 813C2E2E                	cmp	word [si],".."
 14317 00001221 7506                    	jne	short cpFile	  ; if not "..", treat as a file
 14318 00001223 807C0200                	cmp	byte [si+2],0
 14319                                  	;jne	short cpFile	  ; or if there's more after "..", treat as file
 14320                                  	;;;;or	ComSw,mask baddir ; signal invalid directory
 14321                                  	;;;or	word [COMSW],2
 14322                                  	;;or	byte [COMSW],2
 14323                                  	;or	byte [COMSW],mask.baddir
 14324                                  	;jmp	short cpErr	  ; return error
 14325                                  	; 16/02/2023
 14326 00001227 74E6                    	je	short crpath3
 14327                                  
 14328                                  ;	The preceding code was taken from the old DIR routine.
 14329                                  ;	It's garbage, I'm afraid. It's meant to check for ".."
 14330                                  ;	occurring when we're at the root directory. Too bad it
 14331                                  ;	doesn't handle problems with "..\..", etc.
 14332                                  
 14333                                  ;	We're ready to parse a filename into the FCB.
 14334                                  ;	SI = ptr to ASCIIZ filename
 14335                                  
 14336                                  cpFile:	
 14337 00001229 BF5C00                  	mov	di,FCB	; 5Ch	; DI = ptr to FCB
 14338 0000122C B80E29                  	mov	ax,290Eh
 14339                                  	;mov	ax,(Parse_File_Descriptor<<8)|0Eh
 14340                                  	;;mov	ax,(Parse_File_Descriptor shl 8) or 0Eh
 14341                                  				; wildcards already in FCB used as defaults
 14342 0000122F CD21                    	int	21h
 14343 00001231 F8                      	clc			; return success
 14344                                  	;jmp	short cpRet
 14345                                  	; 16/02/2023
 14346 00001232 C3                      	retn
 14347                                  
 14348                                  ;cpErr:
 14349                                  ;	stc			; return error
 14350                                  ;cpRet:
 14351                                  ;	retn
 14352                                  
 14353                                  ; ---------------------------------------------------------------------------
 14354                                  
 14355                                  ;***	InstallCtrlC - install our private control-C handler
 14356                                  ;
 14357                                  ;	Put our control-c handler in front of command.com's default
 14358                                  ;	handler, to make sure the user's default directory gets restored.
 14359                                  ;	This shouldn't be necessary, but, for now, there are situations
 14360                                  ;	where the TDATA segment is left in a modified state when a
 14361                                  ;	control-c occurs.  This means that the transient will be
 14362                                  ;	reloaded, and the user's directory cannot be restored.
 14363                                  ;
 14364                                  ;	Bugbug:  fix the wider problem?  Involves message services.  Ugly.
 14365                                  ;
 14366                                  ;	ENTRY	nothing
 14367                                  ;
 14368                                  ;	EXIT	nothing
 14369                                  ;
 14370                                  ;	USED	AX,BX,DX
 14371                                  ;
 14372                                  ;	EFFECTS
 14373                                  ;
 14374                                  ;	  CtrlCHandler address placed in int 23 vector.
 14375                                  ;
 14376                                  ;	NOTE
 14377                                  ;
 14378                                  ;	  Command.com's basic control-c handler will be restored
 14379                                  ;	  to the int 23 vector by the HeadFix routine, after DIR finishes.
 14380                                  
 14381                                  	; 16/02/2023
 14382                                  InstallCtrlC:
 14383 00001233 06                      	push	es			; preserve ES
 14384 00001234 B82335                  	mov	ax,3523h
 14385                                  	;mov	ax,(GET_INTERRUPT_VECTOR<<8)+23h
 14386                                  	;;mov	ax,(GET_INTERRUPT_VECTOR shl 8) + 23h
 14387 00001237 CD21                    	int	21h
 14388 00001239 891E[C895]              	mov	[OldCtrlCHandler],bx	; save old int 23 vector
 14389 0000123D 8C06[CA95]              	mov	[OldCtrlCHandler+2],es	 
 14390 00001241 07                      	pop	es			; restore ES
 14391                                  
 14392 00001242 BA[8919]                	mov	dx,CtrlCHandler 	; DS:DX = ptr to CtrlCHandler
 14393 00001245 B82325                  	mov	ax,2523h
 14394                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)+23h
 14395                                  	;;mov	ax,(SET_INTERRUPT_VECTOR shl 8) + 23h
 14396 00001248 CD21                    	int	21h
 14397 0000124A C3                      	retn
 14398                                  
 14399                                  ; ---------------------------------------------------------------------------
 14400                                  
 14401                                  ;***	ListSubds - search and list files in subdirectories
 14402                                  ;
 14403                                  ;	ENTRY	Current directory (on selected drive) is top of subdir tree
 14404                                  ;		FCB is still set up for file searches
 14405                                  ;		Bits, AttrSpecified, AttrSelect, DestBuf all still set up
 14406                                  ;
 14407                                  ;	EXIT	CY = clear if no error
 14408                                  ;		FileCnt = # files found & displayed
 14409                                  ;		FileSiz = total size of files found
 14410                                  ;
 14411                                  ;		If error,
 14412                                  ;		CY = set
 14413                                  ;		Ready for DOS Get Extended Error call
 14414                                  ;
 14415                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 14416                                  ;
 14417                                  ;	EFFECTS
 14418                                  ;
 14419                                  ;	  FileCntTotal, FileSizTotal are updated.
 14420                                  ;	  Subdirectories may be listed on standard output device.
 14421                                  ;
 14422                                  ;	NOTES
 14423                                  ;
 14424                                  ;	  ListSubds seeds the recursive entry point lsNode with a ptr
 14425                                  ;	   to a buffer where we'll stack up subdirectory filenames.
 14426                                  ;	   Each name is stored ASCIIZ.
 14427                                  
 14428                                  	; 16/02/2023
 14429                                  ListSubds:
 14430                                  	;invoke	SetRest1		; make sure user's dir gets restored
 14431 0000124B E8971A                  	call	SetRest1
 14432                                  
 14433 0000124E BB[8E8D]                	mov	bx,ScanBuf   		; BX = ptr to child name buffer
 14434                                  lsNode:
 14435 00001251 C60700                  	mov	byte [bx],0		; start with null child name
 14436                                  lsLoop:
 14437 00001254 E8F001                  	call	FindNextChild		; search for next subdirectory
 14438 00001257 7235                    	jc	short lsErr		; search failed - examine error
 14439                                  
 14440 00001259 89DA                    	mov	dx,bx			; DX = ptr to child's name
 14441 0000125B E84004                  	call	ChangeDir		; enter child directory
 14442                                  
 14443                                  					; M023;start
 14444 0000125E 7306                    	jnc	short lstsd1		; check for error
 14445                                  	;cmp	ax,3
 14446 00001260 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND	; error due to len(pathname)>MAXPATH?
 14447 00001263 74EF                    	je	short lsLoop		; yes, skip over this subdirectory
 14448                                  	;jmp	short lsRet		; no, other error: DIR must fail
 14449                                  	; 16/02/2023			; M023;end
 14450 00001265 C3                      	retn
 14451                                  lstsd1:	
 14452 00001266 53                      	push	bx
 14453 00001267 E88B02                  	call	ListDir			; list the directory
 14454 0000126A 5B                      	pop	bx
 14455                                  
 14456                                  ;	Note we're ignoring errors returned here.
 14457                                  
 14458 0000126B 89DF                    	mov	di,bx			; DI = ptr to child's name
 14459 0000126D B90D00                  	mov	cx,13			; CX = max name length w/ null
 14460 00001270 30C0                    	xor	al,al			; AL = zero byte to look for
 14461 00001272 F2AE                    	repne	scasb			; DI = ptr to next name pos'n in buf
 14462 00001274 53                      	push	bx			; save ptr to child's name
 14463 00001275 89FB                    	mov	bx,di			; BX = ptr to next name pos'n in buf
 14464 00001277 E8D7FF                  	call	lsNode			; recurse from new node
 14465 0000127A 5B                      	pop	bx			; BX = ptr to child's name
 14466 0000127B 9C                      	pushf				; save error condition
 14467                                  	
 14468                                  	;;shove	0
 14469                                  	;mov	ax,0
 14470 0000127C 29C0                    	sub	ax,ax ; 0
 14471 0000127E 50                      	push	ax
 14472                                  	;shove	".."
 14473 0000127F B82E2E                  	mov	ax,'..'  ; 2E2Eh
 14474 00001282 50                      	push	ax
 14475 00001283 89E2                    	mov	dx,sp			; DX = ptr to "..",0 on stack
 14476 00001285 E81604                  	call	ChangeDir		; return to parent directory
 14477 00001288 58                      	pop	ax			; restore stack
 14478 00001289 58                      	pop	ax
 14479                                  
 14480 0000128A 9D                      	popf				; restore error condition from child
 14481                                  	;jc	short lsRet		; return error
 14482                                  	;jmp	short lsLoop		; look for more children
 14483                                  	; 16/02/2023
 14484 0000128B 73C7                    	jnc	short lsLoop
 14485 0000128D C3                      	retn
 14486                                  lsErr:
 14487 0000128E E8610A                  	call	get_ext_error_number	; AX = extended error code
 14488                                  	;cmp	ax,2
 14489 00001291 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 14490 00001294 7406                    	je	short lsRet		; file not found, we're ok
 14491                                  	;cmp	ax,18
 14492 00001296 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 14493 00001299 7401                    	je	short lsRet		; no more files, we're ok
 14494 0000129B F9                      	stc				; return other errors
 14495                                  lsRet:	
 14496 0000129C C3                      	retn
 14497                                  
 14498                                  ; ---------------------------------------------------------------------------
 14499                                  
 14500                                  	;break	<DIR support routines>
 14501                                  
 14502                                  ;***	SUPPORT ROUTINES
 14503                                  
 14504                                  ; ----------------------
 14505                                  
 14506                                  ;***	CheckChild - check potential subdirectory name for FindNextChild
 14507                                  ;
 14508                                  ;	ENTRY	DirBuf contains DOS Find-buffer with potential child
 14509                                  ;		BX = ptr to last child's name
 14510                                  ;		BP = ptr to temp child's name
 14511                                  ;
 14512                                  ;	EXIT	nothing
 14513                                  ;
 14514                                  ;	USED	AX,CX,SI,DI
 14515                                  ;
 14516                                  ;	EFFECTS
 14517                                  ;
 14518                                  ;	  Filename pointed to by BP may be changed.
 14519                                  ;
 14520                                  ;	NOTES
 14521                                  ;
 14522                                  ;	  Potential filename replaces temp filename if:
 14523                                  ;	   it's a subdirectory file;
 14524                                  ;	   it doesn't start with a '.';
 14525                                  ;	   it's alphanumerically greater than last child's name;
 14526                                  ;	   and it's alphanumerically less than temp name.
 14527                                  
 14528                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14529                                  	; 07/06/2023
 14530                                  CheckChild:
 14531                                  	;test	DirBuf.find_buf_attr,ATTR_DIRECTORY
 14532 0000129D F606[E38B]10            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DIRECTORY ; 10h
 14533 000012A2 741D                    	jz	short ccRet	; not a subdirectory file- return
 14534                                  
 14535                                  	; 16/02/2023
 14536 000012A4 BE[EC8B]                	mov	si,DIRBUF+FIND_BUF.PNAME
 14537 000012A7 803C2E                  	cmp	byte [si],'.'
 14538                                  	;;cmp	DirBuf.find_buf_pname,'.'
 14539                                  	;cmp	byte [DIRBUF+FIND_BUF.PNAME],'.'
 14540 000012AA 7415                    	je	short ccRet	; starts with a dot- return
 14541                                  
 14542                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14543                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14544 000012AC 89DF                    	mov	di,bx
 14545 000012AE E80404                  	call	CmpAscz		; compare candidate to last child's name
 14546 000012B1 760E                    	jna	short ccRet	; it's not above it- return
 14547                                  
 14548                                  
 14549                                  	; 07/06/2023
 14550                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14551                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14552                                  	; si = DIRBUF+FIND_BUF.PNAME
 14553 000012B3 89EF                    	mov	di,bp
 14554 000012B5 E8FD03                  	call	CmpAscz		; compare candidate to temp name
 14555 000012B8 7307                    	jnb	short ccRet	; it's not below it- return
 14556                                  
 14557                                  ;	New kid is alright. Copy to temp.
 14558                                  
 14559                                  	; 07/06/2023
 14560                                  	;;mov	si,offset TRANGROUP:DirBuf+find_buf_pname
 14561                                  	;mov	si,DIRBUF+FIND_BUF.PNAME
 14562                                  	; si = DIRBUF+FIND_BUF.PNAME
 14563 000012BA 89EF                    	mov	di,bp
 14564 000012BC B90D00                  	mov	cx,13
 14565 000012BF F3A4                    	rep	movsb
 14566                                  ccRet:
 14567 000012C1 C3                      	retn
 14568                                  
 14569                                  ; ---------------------------------------------------------------------------
 14570                                  
 14571                                  ;***	CmpEntry - compare one directory entry to another in sort order
 14572                                  ;
 14573                                  ;	Compare one directory entry against another according to
 14574                                  ;	the sort codes in DestBuf. One or more comparisons
 14575                                  ;	may be made of file name, extension, time/date, and
 14576                                  ;	size.  Comparisons may be made for upward or downward
 14577                                  ;	sort order.
 14578                                  ;
 14579                                  ;	ENTRY	ES:BX = ptr to entry to compare
 14580                                  ;		ES:BP = ptr to entry to be compared against
 14581                                  ;		DestBuf contains sort codes (see DestBuf)
 14582                                  ;		DS = TRANGROUP seg addr
 14583                                  ;
 14584                                  ;	EXIT	BX = unchanged
 14585                                  ;		BP = unchanged
 14586                                  ;		Condition flags set for same, above, or below
 14587                                  ;		 comparing BX entry against BP entry.
 14588                                  ;		 'Same, above, below' translate to 'same, after, before'.
 14589                                  ;
 14590                                  ;	USED:	AX,CX,DX,SI,DI
 14591                                  
 14592                                  	; 16/02/2023
 14593                                  CmpEntry:
 14594 000012C2 BE[D18C]                	mov	si,DestBuf	; (DS:SI) = ptr to sort codes
 14595                                  ceLoop:
 14596 000012C5 31C0                    	xor	ax,ax		; AX = 0
 14597 000012C7 8A04                    	mov	al,[si]		; AL = sort code
 14598 000012C9 08C0                    	or	al,al
 14599 000012CB 741C                    	jz	short ceDone	; sort code is zero, we're done
 14600 000012CD 46                      	inc	si		; DS:SI = ptr to next sort code
 14601 000012CE 56                      	push	si		; save ptr to next sort code
 14602 000012CF FEC8                    	dec	al
 14603 000012D1 D0E0                    	shl	al,1
 14604                                  	;sal	al,1		; AX = index into cmp call table
 14605                                  				; CY set for downward sort order
 14606 000012D3 89C6                    	mov	si,ax		; SI = index into cmp call table
 14607 000012D5 2E8B84[EA12]            	mov	ax,[cs:si+FieldCmps]
 14608                                  				; AX = addr of compare routine
 14609 000012DA 7204                    	jc	short ceDn	; downwards sort - go swap entries
 14610 000012DC FFD0                    	call	ax 		; do upwards sort
 14611 000012DE EB06                    	jmp	short ceNs
 14612                                  ceDn:
 14613 000012E0 87DD                    	xchg	bx,bp		; swap entry ptrs for downward sort order
 14614 000012E2 FFD0                    	call	ax		; do sort
 14615 000012E4 87DD                    	xchg	bx,bp		; swap ptrs back
 14616                                  ceNs:
 14617 000012E6 5E                      	pop	si		; SI = ptr to next sort code
 14618 000012E7 74DC                    	je	short ceLoop	; compare showed no difference, keep trying
 14619                                  ceDone:
 14620                                  
 14621                                  ;	Get here either from unequal compare or sort code = 0.
 14622                                  ;	In the latter case, condition codes indicate equality,
 14623                                  ;	which is correct.
 14624                                  
 14625 000012E9 C3                      	retn
 14626                                  
 14627                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14628                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:1339h)
 14629                                  
 14630                                  FieldCmps:		; call table of entry comparisons
 14631 000012EA [F412]                  	dw	CmpName
 14632 000012EC [FF12]                  	dw	CmpExt
 14633 000012EE [3D13]                  	dw	CmpTime
 14634 000012F0 [5913]                  	dw	CmpSize
 14635 000012F2 [5E13]                  	dw	CmpType
 14636                                  
 14637                                  ; ---------------------------------------------------------------------------
 14638                                  
 14639                                  ;***	CmpName - compare file name of two entries
 14640                                  ;***	CmpExt - compare extension of two entries
 14641                                  ;
 14642                                  ;	ENTRY	ES:BX = ptr to one entry
 14643                                  ;		ES:BP = ptr to another entry
 14644                                  ;
 14645                                  ;	EXIT	BX = unchanged
 14646                                  ;		BP = unchanged
 14647                                  ;		Condition flags set for same, above, or below
 14648                                  ;		comparing BX entry to BP entry.
 14649                                  ;
 14650                                  ;	USED:	AX,CX,DX,SI,DI
 14651                                  
 14652                                  	; 16/02/2023
 14653                                  CmpName:
 14654 000012F4 89DE                    	mov	si,bx		; ES:SI = ptr to BX entry
 14655 000012F6 89EF                    	mov	di,bp		; ES:DI = ptr to BP entry
 14656                                  	;;add	si,filename	; ES:SI = ptr to BX name
 14657                                  	;add	si,1
 14658                                  	; 25/04/2023
 14659 000012F8 46                      	inc	si
 14660                                  	;;add	di,filename	; ES:DI = ptr to BP name
 14661                                  	;add	di,1
 14662                                  	; 25/04/2023
 14663 000012F9 47                      	inc	di
 14664                                  	;mov	cx,size filename
 14665                                  				; CX = length of name
 14666 000012FA B90800                  	mov	cx,8
 14667 000012FD EB0C                    	jmp	short CmpStr
 14668                                  
 14669                                  CmpExt:
 14670                                  	; 07/06/2023
 14671                                  	;mov	si,bx		; ES:SI = ptr to BX entry
 14672                                  	;mov	di,bp		; ES:DI = ptr to BP entry
 14673                                  	;;add	si,fileext	; ES:SI = ptr to BX extension
 14674                                  	;add	si,9
 14675                                  	;;add	di,fileext	; ES:DI = ptr to BP extension
 14676                                  	;add	di,9
 14677                                  	;
 14678 000012FF BE0900                  	mov	si,9
 14679 00001302 89F7                    	mov	di,si ; mov di,9
 14680 00001304 01DE                    	add	si,bx
 14681 00001306 01EF                    	add	di,bp
 14682                                  	;
 14683                                  	;mov	cx,size fileext	; CX = length of extension field
 14684 00001308 B90300                  	mov	cx,3
 14685                                  
 14686                                  ;	Bugbug:	use symbol for subfunction code.
 14687                                  
 14688                                  CmpStr:	
 14689 0000130B 803E[C395]06            	cmp	byte [CountryPtrId],6
 14690 00001310 7527                    	jne	short cnNoCollTable
 14691                                  				; no collating table available
 14692                                  
 14693                                  ;*	Compare strings using collating table.
 14694                                  ;
 14695                                  ;	ES:SI = ptr to 1st string
 14696                                  ;	ES:DI = ptr to 2nd string
 14697                                  ;	CX = length
 14698                                  
 14699 00001312 55                      	push	bp		; preserve BP
 14700 00001313 53                      	push	bx		; preserve BX
 14701 00001314 1E                      	push	ds		; preserve DS
 14702 00001315 C51E[C495]              	lds	bx,[CountryPtr]	; DS:BX = ptr to collating table
 14703                                  	;assume	ds:NOTHING
 14704 00001319 8B2F                    	mov	bp,[bx]		; BP = size of collating table
 14705 0000131B 43                      	inc	bx
 14706 0000131C 43                      	inc	bx		; DS:BX = ptr to collating values
 14707                                  				; DS:[BX]-2 = size of table
 14708 0000131D 31C0                    	xor	ax,ax		; AX = 0 for starters
 14709                                  
 14710                                  ;	Bugbug:	Investigate removing collating table length checks.
 14711                                  
 14712                                  cnNextChar:
 14713 0000131F 268A05                  	mov	al,[es:di]	; AL = AX = char from 2nd string
 14714 00001322 47                      	inc	di		; ES:DI = ptr to next char 2nd string
 14715 00001323 39E8                    	cmp	ax,bp		; compare to collating table length
 14716 00001325 7301                    	jae	short cn1 	; char not in table
 14717 00001327 D7                      	xlat				
 14718                                  cn1:				; AL = AX = collating value
 14719 00001328 89C2                    	mov	dx,ax		; DX = collating value from 2nd string
 14720                                  	;lods	byte ptr es:[si]
 14721 0000132A 26AC                    	es	lodsb		; AL = AX = char from 1st string
 14722                                  				; ES:SI = ptr to next char 1st string
 14723 0000132C 39E8                    	cmp	ax,bp		; compare to collating table length
 14724 0000132E 7301                    	jae	short cn2	; char not in table
 14725 00001330 D7                      	xlat				
 14726                                  cn2:				; AL = AX = collating value
 14727 00001331 39D0                    	cmp	ax,dx		; compare collating values
 14728 00001333 E1EA                    	loope	cnNextChar	; until unequal or no more left
 14729                                  
 14730 00001335 1F                      	pop	ds		; restore DS
 14731                                  	;assume	ds:TRANGROUP
 14732 00001336 5B                      	pop	bx		; restore BX
 14733 00001337 5D                      	pop	bp		; restore BP
 14734 00001338 C3                      	retn
 14735                                  
 14736                                  ;*	If no collating table is available, simply compare raw ASCII values.
 14737                                  ;	Don't we wish we could just do this all the time? Sigh.
 14738                                  
 14739                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14740                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:138Dh)
 14741                                  cnNoCollTable:
 14742                                  	;repe	cmps byte ptr es:[si],[di]
 14743                                  				;db 0F3h,26h,0A6h,0C3h
 14744 00001339 F3                      	repe	; 0F3h
 14745 0000133A 26                      	es	; 26h
 14746 0000133B A6                      	cmpsb	; 0A6h
 14747 0000133C C3                      	retn	; 0C3h
 14748                                  
 14749                                  ; ---------------------------------------------------------------------------
 14750                                  
 14751                                  ;***	CmpTime - compare entries by date/time
 14752                                  ;
 14753                                  ;	ENTRY	ES:BX = ptr to one entry
 14754                                  ;		ES:BP = ptr to another entry
 14755                                  ;
 14756                                  ;	EXIT	BX = unchanged
 14757                                  ;		BP = unchanged
 14758                                  ;		Condition flags set for same, above, or below
 14759                                  ;		 comparing BX entry to BP entry.
 14760                                  ;
 14761                                  ;	USED:	CX,SI,DI
 14762                                  ;
 14763                                  ;	NOTE	Filetime and filedate fields in our private entry
 14764                                  ;		structure must be adjacent and in that order.
 14765                                  
 14766                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14767                                  	; 07/06/2023
 14768                                  CmpTime:
 14769 0000133D 89DE                    	mov	si,bx
 14770 0000133F 89EF                    	mov	di,bp
 14771                                  	;add	si,filedate + size filedate - 1
 14772 00001341 83C610                  	add	si,16 ; 15+2-1
 14773                                  	;add	di,filedate + size filedate - 1
 14774 00001344 83C710                  	add	di,16 ; 15+2-1
 14775                                  	; 07/06/2023
 14776 00001347 BE1000                  	mov	si,16
 14777                                  CmpST2:		; 07/06/2023
 14778 0000134A 89F7                    	mov	di,si	; mov di,16
 14779 0000134C 01DE                    	add	si,bx
 14780 0000134E 01EF                    	add	di,bp
 14781                                  
 14782                                  	;mov	cx,size filetime + size filedate
 14783 00001350 B90400                  	mov	cx,4 ; 2+2
 14784 00001353 FD                      	std
 14785                                  	;repe	cmps byte ptr es:[si],[di]
 14786                                  				;db 0F3h,26h,0A6h, 0FCh,0C3h
 14787 00001354 F3                      	repe	; 0F3h
 14788 00001355 26                      	es	; 26h
 14789 00001356 A6                      	cmpsb	; 0A6h
 14790                                  	
 14791 00001357 FC                      	cld	; 0FCh
 14792 00001358 C3                      	retn	; 0C3h
 14793                                  
 14794                                  ; ---------------------------------------------------------------------------
 14795                                  
 14796                                  ;***	CmpSize - compare entries by size
 14797                                  ;
 14798                                  ;	ENTRY	ES:BX = ptr to one entry
 14799                                  ;		ES:BP = ptr to another entry
 14800                                  ;
 14801                                  ;	EXIT	BX = unchanged
 14802                                  ;		BP = unchanged
 14803                                  ;		Condition flags set for same, above, or below
 14804                                  ;		 comparing BX entry to BP entry.
 14805                                  ;
 14806                                  ;	USED:	CX,SI,DI
 14807                                  
 14808                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14809                                  	; 07/06/2023
 14810                                  CmpSize:
 14811                                  	;mov	si,bx
 14812                                  	;mov	di,bp
 14813                                  	;;add	si,filesize + size filesize - 1
 14814                                  	;add	si,20  ; 17+4-1
 14815                                  	;;add	di,filesize + size filesize - 1
 14816                                  	;add	di,20  ; 17+4-1
 14817                                  	; 07/06/2023
 14818 00001359 BE1400                  	mov	si,20
 14819                                  	;;;
 14820 0000135C EBEC                    	jmp	short CmpST2 ; 07/06/2023
 14821                                  	;;;
 14822                                  ;CmpST2:
 14823                                  ;	mov	di,si	; mov di,20
 14824                                  ;	add	si,bx
 14825                                  ;	add	di,bp
 14826                                  ;
 14827                                  ;	;mov	cx,size filesize
 14828                                  ;	mov	cx,4
 14829                                  ;	std
 14830                                  ;	;repe	cmps byte ptr es:[si],[di]
 14831                                  ;				;db 0F3h,26h,0A6h
 14832                                  ;	repe	; 0F3h
 14833                                  ;	es	; 26h
 14834                                  ;	cmpsb	; 0A6h
 14835                                  ;
 14836                                  ;	cld
 14837                                  ;	retn
 14838                                  
 14839                                  ; ---------------------------------------------------------------------------
 14840                                  
 14841                                  ;***	CmpType - compare entries by file type (subdirectory or not)
 14842                                  ;
 14843                                  ;	ENTRY	ES:BX = ptr to one entry
 14844                                  ;		ES:BP = ptr to another entry
 14845                                  ;
 14846                                  ;	EXIT	BX = unchanged
 14847                                  ;		BP = unchanged
 14848                                  ;		Condition flags set for same, above, or below
 14849                                  ;		 comparing BX entry to BP entry.
 14850                                  ;
 14851                                  ;	USED:	AX
 14852                                  
 14853                                  	; 16/02/2023 - Retro DOS v4.0 COMMAND.COM
 14854                                  CmpType:
 14855                                  	;mov	al,es:[bx].fileattr
 14856 0000135E 268A470C                	mov	al,[es:bx+12]
 14857                                  	;mov	ah,es:[bp].fileattr
 14858 00001362 268A660C                	mov	ah,[es:bp+12]
 14859                                  	;and	ax,(ATTR_DIRECTORY shl 8) + ATTR_DIRECTORY
 14860                                  	;and	ax,1010h
 14861 00001366 251010                  	and	ax,(ATTR_DIRECTORY<<8)+ATTR_DIRECTORY
 14862 00001369 38C4                    	cmp	ah,al
 14863 0000136B C3                      	retn
 14864                                  
 14865                                  ; ---------------------------------------------------------------------------
 14866                                  
 14867                                  ;***	DefaultAttr - set default attribute conditions
 14868                                  ;
 14869                                  ;	ENTRY	nothing
 14870                                  ;
 14871                                  ;	EXIT	CY clear
 14872                                  ;
 14873                                  ;	USED
 14874                                  ;
 14875                                  ;	EFFECTS
 14876                                  ;
 14877                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 14878                                  
 14879                                  	; 16/02/2023
 14880                                  DefaultAttr:
 14881                                  	;mov	byte [AttrSpecified],6
 14882 0000136C C606[288C]06            	mov	byte [AttrSpecified],ATTR_HIDDEN+ATTR_SYSTEM
 14883                                  					; specify H and S
 14884 00001371 C606[298C]00            	mov	byte [AttrSelect],0	; H and S must be off
 14885 00001376 F8                      	clc				; return success
 14886                                  dtRet:	; 18/02/2023
 14887 00001377 C3                      	retn
 14888                                  
 14889                                  ; ---------------------------------------------------------------------------
 14890                                  
 14891                                  ;***	DisplayTotals - display grand total stats
 14892                                  ;
 14893                                  ;	If we searched subdirectories, display the total # files found
 14894                                  ;	 and total size of files found.
 14895                                  ;	Display disk space remaining.
 14896                                  ;
 14897                                  ;	ENTRY	FileCntTotal, FileSizTotal contain correct values
 14898                                  ;		Bits contains setting of /s
 14899                                  ;		FCB contains drive #
 14900                                  ;
 14901                                  ;	EXIT	nothing
 14902                                  ;
 14903                                  ;	USES	AX,DX
 14904                                  ;		FileSiz
 14905                                  
 14906                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14907                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:13D1h
 14908                                  
 14909                                  DisplayTotals:
 14910                                  	;;;test	Bits,mask subd
 14911                                  	;;test	word [_Bits],4
 14912                                  	;test	byte [_Bits],4
 14913 00001378 F606[208C]04            	test	byte [_Bits],mask.subd
 14914 0000137D 741D                    	jz	short dtFree		; no subdirectories- do bytes free
 14915                                  
 14916 0000137F E85112                  	call	CRLF2			; start on new line
 14917 00001382 E8C403                  	call	UseLine
 14918                                  
 14919 00001385 BA[5781]                	mov	dx,total_ptr
 14920 00001388 E8643A                  	call	std_printf		; "Total:",cr,lf
 14921 0000138B E8BB03                  	call	UseLine
 14922                                  
 14923 0000138E A1[F78A]                	mov	ax,[FileCntTotal]	; AX = # files found mod 64K
 14924 00001391 BE[FB8A]                	mov	si,FileSizTotal
 14925 00001394 BF[F38A]                	mov	di,FileSiz
 14926 00001397 A5                      	movsw
 14927 00001398 A5                      	movsw				; move total size to size variable
 14928 00001399 E87605                  	call	DisplayCntSiz		; display file count & size &
 14929                                  dtFree: 				;   (maybe) compression ratio
 14930 0000139C B436                    	mov	ah,36h
 14931                                  	;mov	ah,GET_DRIVE_FREESPACE	; AH = DOS Get Free Space function
 14932 0000139E 8A165C00                	mov	dl,[FCB] ; [5Ch]	; DL = drive#
 14933 000013A2 CD21                    	int	21h			; call DOS
 14934 000013A4 83F8FF                  	cmp	ax,-1			; check 'invalid drive' return code
 14935 000013A7 74CE                    	jz	short dtRet		; can't get drive space - return
 14936 000013A9 F7E1                    	mul	cx
 14937 000013AB F7E3                    	mul	bx
 14938 000013AD A3[BC8C]                	mov	[Bytes_Free],ax
 14939 000013B0 8916[BE8C]              	mov	[Bytes_Free+2],dx
 14940 000013B4 BA[697F]                	mov	dx,bytmes_ptr
 14941 000013B7 E8353A                  	call	std_printf		; "nnn bytes free",cr,lf
 14942                                  	;call	UseLine
 14943                                  ;dtRet:
 14944                                  	;retn
 14945                                  	; 18/02/2023
 14946 000013BA E98C03                  	jmp	UseLine
 14947                                  
 14948                                  ; ---------------------------------------------------------------------------
 14949                                  
 14950                                  ;***	FileIsDevice - see if file looks like a device
 14951                                  ;
 14952                                  ;	ENTRY	PathPos = ptr to pathname
 14953                                  ;		PathCnt = length of pathname w/o terminating char
 14954                                  ;		DirBuf is DOS DTA
 14955                                  ;
 14956                                  ;	EXIT	ZR = set if file looks like a device
 14957                                  ;
 14958                                  ;	USED	AX,BX,CX,DX,DI
 14959                                  ;
 14960                                  ;	EFFECTS
 14961                                  ;
 14962                                  ;	  DTA buffer holds results of Find First function
 14963                                  ;
 14964                                  ;	NOTES
 14965                                  ;
 14966                                  ;	  We try to flag devices in two ways. First, we try
 14967                                  ;	  the DOS Find First function. It returns attribute bit 6
 14968                                  ;	  set on a successful find if it identifies a device name.
 14969                                  ;	  Unfortunately, it returns 'path not found' for a device
 14970                                  ;	  name terminated with colon, such as "CON:". So, we look
 14971                                  ;	  for any colon in the pathname after the 2nd character,
 14972                                  ;	  and flag the pathname as a device if we find one.
 14973                                  
 14974                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 14975                                  FileIsDevice:
 14976 000013BD 8B16[248C]              	mov	dx,[PathPos]	 ; DX = ptr to pathname
 14977                                  
 14978 000013C1 89D7                    	mov	di,dx
 14979 000013C3 033E[228C]              	add	di,[PathCnt]	 ; DI = ptr to byte after pathname
 14980 000013C7 30DB                    	xor	bl,bl		 ; BL = NUL to terminate pathname with
 14981 000013C9 861D                    	xchg	bl,[di] 	 ; BL = saved pathname terminating char
 14982                                  
 14983 000013CB 31C9                    	xor	cx,cx		 ; CX = attribute mask (normal search)
 14984 000013CD B44E                    	mov	ah,4Eh
 14985                                  	;mov	ah,Find_First	 ; AH = DOS Find First function code
 14986 000013CF CD21                    	int	21h	 	 ; call DOS
 14987 000013D1 861D                    	xchg	bl,[di]		 ; restore pathname terminating char
 14988 000013D3 720A                    	jc	short piCol	 ; didn't find a dir entry, check for colon
 14989                                  
 14990                                  ;	Found a dir entry, see if Find First thinks it's a device.
 14991                                  
 14992                                  	;test	byte [DIRBUF+21],40h
 14993 000013D5 F606[E38B]40            	test	byte [DIRBUF+FIND_BUF.ATTR],ATTR_DEVICE
 14994 000013DA 7403                    	jz	short piCol	 ; device attribute not set, look for colon
 14995 000013DC 31C9                    	xor	cx,cx		 ; it's a device, return ZR flag
 14996                                  	;jmp	short piRet
 14997                                  	; 25/04/2023
 14998                                  piRet:
 14999 000013DE C3                      	retn
 15000                                  
 15001                                  ;	Device attribute not returned by Find First function. But
 15002                                  ;	let's check for a colon anywhere in the pathname after the
 15003                                  ;	second byte.
 15004                                  ;
 15005                                  ;	DI = ptr to byte after pathname
 15006                                  
 15007                                  piCol:
 15008 000013DF 4F                      	dec	di		 ; DI = ptr to last char in pathname
 15009 000013E0 B03A                    	mov	al,':'
 15010                                  	;mov	al,COLON_CHAR	 ; AL = colon char to search for
 15011 000013E2 8B0E[228C]              	mov	cx,[PathCnt]	 ; CX = # chars to scan
 15012 000013E6 49                      	dec	cx
 15013 000013E7 49                      	dec	cx		 ; ignore 1st two chars of pathname
 15014 000013E8 09C9                    	or	cx,cx
 15015 000013EA 78F2                    	js	short piRet	 ; if < 2 chars in pathname, just return
 15016 000013EC 09FF                    	or	di,di		 ; clear ZR in case CX = 0
 15017 000013EE FD                      	std			 ; scan downward
 15018 000013EF F2AE                    	repne	scasb
 15019 000013F1 FC                      	cld			 ; restore default upward direction
 15020                                  
 15021                                  ;	After scanning, the ZR flag is set to indicate presence of a colon.
 15022                                  ;piRet:
 15023 000013F2 C3                      	retn
 15024                                  
 15025                                  ;FileIsDevice endp
 15026                                  
 15027                                  ; ---------------------------------------------------------------------------
 15028                                  
 15029                                  ;***	FindFirst - find first directory entry to display
 15030                                  ;***	FindNext - find next directory entry to display
 15031                                  ;
 15032                                  ;	ENTRY	Bits<inmem> = set if entries are loaded in TPA
 15033                                  ;		AttrSpecified, AttrSelect are set
 15034                                  ;
 15035                                  ;	EXIT	CY = clear if successful
 15036                                  ;		BX = offset in TPA buffer of directory entry found
 15037                                  ;
 15038                                  ;		If unsuccessful,
 15039                                  ;		CY = set
 15040                                  ;		AX = DOS error code
 15041                                  ;		DOS Get Extended Error call will get error code
 15042                                  ;
 15043                                  ;		NOTE: if entries were loaded into TPA, AX contains
 15044                                  ;		ERROR_NO_MORE_FILES when no more entries are available,
 15045                                  ;		but DOS Get Extended Error call WON'T return the correct
 15046                                  ;		error. That's ok, because we'll see the value in AX
 15047                                  ;		and recognize it as a non-error condition.
 15048                                  ;
 15049                                  ;	USED	AX,CX,DX,SI,DI
 15050                                  ;
 15051                                  ;	EFFECTS
 15052                                  ;
 15053                                  ;	  Entries in memory may be marked as output.
 15054                                  ;	  If not sorted, entry is loaded at TPA.
 15055                                  ;
 15056                                  ;	NOTES
 15057                                  ;
 15058                                  ;	  If we don't find a qualifying file, we return after the final
 15059                                  ;	   DOS Find File call. A DOS Get Extended Error call will then
 15060                                  ;	   indicate an appropriate condition.
 15061                                  
 15062                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15063                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15064                                  	
 15065                                  FindFirst:
 15066                                  	;mov	ax,offset TRANGROUP:GetFirst
 15067 000013F3 B8[CA14]                	mov	ax,GetFirst
 15068 000013F6 EB03                    	jmp	short ffFindEntry
 15069                                  
 15070                                  	; 18/02/2023
 15071                                  FindNext:
 15072                                  	;mov	ax,offset TRANGROUP:GetNext
 15073 000013F8 B8[D814]                	mov	ax,GetNext
 15074                                  
 15075                                  ;	AX = address of correct disk get routine to use.
 15076                                  
 15077                                  ffFindEntry:
 15078 000013FB 06                      	push	es			; save TRANGROUP seg addr
 15079                                  	;;;test	Bits,mask inmem
 15080                                  	;;test	word [_Bits],20h
 15081                                  	;test	byte [_Bits],20h
 15082 000013FC F606[208C]20            	test	byte [_Bits],mask.inmem
 15083 00001401 7405                    	jz	short ffDisk		; entries not in memory, search disk
 15084                                  
 15085                                  ;	Entries are loaded in memory to sort out. Find the first one.
 15086                                  ;	There will always be one, or LoadEntries would've failed.
 15087                                  
 15088 00001403 E81A00                  	call	FindInMem		; find first entry in TPA
 15089 00001406 EB16                    	jmp	short ffRet		; return what TPA search returns
 15090                                  
 15091                                  ;	Get entry from disk.
 15092                                  
 15093                                  ffDisk:
 15094 00001408 FFD0                    	call	ax			; get entry from disk
 15095 0000140A 720E                    	jc	short ffGetErr		; get & return error
 15096 0000140C 8E06[C78A]              	mov	es,[TPA]		; ES = seg addr of TPA
 15097 00001410 31FF                    	xor	di,di			; ES:DI = ptr to TPA
 15098 00001412 89FB                    	mov	bx,di			; BX = offset of entry in TPA
 15099 00001414 E85601                  	call	LoadEntry		; load entry to TPA
 15100 00001417 F8                      	clc				; return success
 15101 00001418 EB04                    	jmp	short ffRet
 15102                                  
 15103                                  ffGetErr:
 15104 0000141A E8D508                  	call	 get_ext_error_number	; AX = DOS error code
 15105 0000141D F9                      	stc
 15106                                  ffRet:
 15107 0000141E 07                      	pop	es			; ES = TRANGROUP seg addr again
 15108 0000141F C3                      	retn
 15109                                  
 15110                                  ; ---------------------------------------------------------------------------
 15111                                  
 15112                                  ;***	FindInMem - find next directory entry in TPA buffer
 15113                                  ;
 15114                                  ;	ENTRY	TPA is loaded (see LoadEntries)
 15115                                  ;
 15116                                  ;	EXIT	BX = offset in TPA of entry found
 15117                                  ;
 15118                                  ;		If no more files,
 15119                                  ;		CY = set
 15120                                  ;		AX = DOS 'no more files' error code
 15121                                  ;
 15122                                  ;	USED	AX,BX,CX,DX,SI,DI,BP,ES
 15123                                  ;
 15124                                  ;	EFFECTS
 15125                                  ;
 15126                                  ;	  Entry found is flagged as 'used' (see EntryStruc).
 15127                                  
 15128                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15129                                  FindInMem:
 15130 00001420 8E06[C78A]              	mov	es,[TPA]		; ES = TPA seg addr
 15131 00001424 31DB                    	xor	bx,bx			; ES:BX = ptr to 1st entry in TPA
 15132 00001426 FC                      	cld				; make sure default string direction is up
 15133                                  	
 15134 00001427 E86D00                  	call	FindOneInMem		; locate an entry
 15135 0000142A 720E                    	jc	short fiNoMore		; none left, set up 'no more files' error
 15136                                  
 15137                                  ;	BX = ptr to entry in TPA
 15138                                  
 15139                                  fiBest:
 15140 0000142C 89DD                    	mov	bp,bx			; BP = ptr to best entry so far
 15141                                  fiNext:
 15142 0000142E E87300                  	call	FindNextInMem		; locate next entry
 15143 00001431 720C                    	jc	short fiFound		; no more, best entry so far wins
 15144                                  
 15145                                  ;	BX = ptr to next entry
 15146                                  
 15147 00001433 E88CFE                  	call	CmpEntry		; compare it to best found so far (BP)
 15148 00001436 73F6                    	jnb	short fiNext		; it's not better, go look at next one
 15149 00001438 EBF2                    	jmp	short fiBest		; it's better, go mark it as best so far
 15150                                  
 15151                                  fiNoMore:
 15152                                  
 15153                                  ;	No more entries available in TPA. Set up 'no more files' error.
 15154                                  
 15155                                  	;mov	ax,18
 15156 0000143A B81200                  	mov	ax,ERROR_NO_MORE_FILES	; AX = 'no more files' error code
 15157 0000143D F9                      	stc				; return error
 15158                                  	;jmp	short fiRet
 15159                                  	; 18/02/2023
 15160 0000143E C3                      	retn
 15161                                  
 15162                                  fiFound:
 15163 0000143F 89EB                    	mov	bx,bp			; BX = ptr to best entry found
 15164 00001441 26C60701                	mov	byte [es:bx],1		; mark entry 'used'
 15165 00001445 F8                      	clc				; return success
 15166                                  fiRet:
 15167 00001446 C3                      	retn
 15168                                  
 15169                                  ; ---------------------------------------------------------------------------
 15170                                  
 15171                                  ;***	FindNextChild - find next subdirectory in current directory
 15172                                  ;
 15173                                  ;	ENTRY	BX = ptr to last child found, ASCIIZ filename
 15174                                  ;		DirBuf is established DTA
 15175                                  ;
 15176                                  ;	EXIT	BX = ptr (same addr) to next child found, ASCIIZ filename
 15177                                  ;
 15178                                  ;		If failure,
 15179                                  ;		CY = set
 15180                                  ;		DOS Get Extended Error call will get error
 15181                                  ;
 15182                                  ;	USED	AX,CX,DX,SI,DI,BP
 15183                                  ;
 15184                                  ;	EFFECTS
 15185                                  ;
 15186                                  ;	  DirBuf is used for find first/next calls.
 15187                                  ;
 15188                                  ;	NOTES
 15189                                  ;
 15190                                  ;	  We keep on checking files until DOS returns an error. If
 15191                                  ;	  the error is 'no more files' and the temp filename is not
 15192                                  ;	  the initial high tag, copy the temp to the child's name spot
 15193                                  ;	  and return success. Otherwise, send the error back to caller.
 15194                                  ;
 15195                                  ;	  This routine depends on DS,ES,CS, & SS all being equal.
 15196                                  
 15197                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15198                                  FindNextChild:
 15199 00001447 83EC0C                  	sub	sp,12			; make temp filename buf on stack
 15200                                  	;shove	00FFh			; temp filename = high tag
 15201 0000144A B8FF00                  	mov	ax,0FFh
 15202 0000144D 50                      	push	ax
 15203 0000144E 89E5                    	mov	bp,sp			; BP = ptr to temp filename buf
 15204                                  	;shove	"*"	
 15205 00001450 B02A                    	mov	al,'*'  ; ax = 002Ah
 15206 00001452 50                      	push	ax
 15207                                  	;;shove	".*" 
 15208                                  	;mov	ax,"*."
 15209                                  	;mov	ax,2E2Ah
 15210 00001453 B42E                    	mov	ah,'.'
 15211 00001455 50                      	push	ax
 15212 00001456 E8F904                  	call	GetDriveLtr		; AX = "d:"
 15213 00001459 50                      	push	ax
 15214 0000145A 89E2                    	mov	dx,sp			; DX = ptr to "d:*.*",0 on stack
 15215                                  
 15216                                  ;	See that the stack is restored properly at the end of this proc.
 15217                                  
 15218                                  	;mov	cx,10h
 15219 0000145C B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15220 0000145F B44E                    	mov	ah,4Eh
 15221                                  	;mov	ah,Find_First
 15222 00001461 CD21                    	int	21h			; DOS- Find First matching file
 15223 00001463 722C                    	jc	short fcRet		; return error
 15224                                  
 15225 00001465 E835FE                  	call	CheckChild		; check child against last, temp
 15226                                  fcNext:	
 15227                                  	;mov	cx,10h
 15228 00001468 B91000                  	mov	cx,ATTR_DIRECTORY	; CX = attributes for file search
 15229 0000146B B44F                    	mov	ah,4Fh
 15230                                  	;mov	ah,Find_Next
 15231 0000146D CD21                    	int	21h			; DOS- Find Next matching file
 15232 0000146F 7205                    	jc	short fcErr		; examine error
 15233                                  
 15234 00001471 E829FE                  	call	CheckChild		; check child against last, temp
 15235 00001474 EBF2                    	jmp	short fcNext		; go find another child
 15236                                  
 15237                                  fcErr:
 15238 00001476 E87908                  	call	get_ext_error_number	; AX = extended error code
 15239                                  	;cmp	ax,18
 15240 00001479 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	; no more files?
 15241 0000147C 7512                    	jne	short fcNope		; some other error- return it
 15242                                  
 15243                                  ;	We ran out of files. See if we qualified at least one.
 15244                                  
 15245 0000147E 807E00FF                	cmp	byte [bp],0FFh
 15246 00001482 740C                    	je	short fcNope		; temp filename is unused- no child
 15247                                  
 15248                                  ;	Move temp filename to child name position.
 15249                                  
 15250 00001484 89EE                    	mov	si,bp			; SI = ptr to temp filename
 15251 00001486 89DF                    	mov	di,bx			; DI = ptr to child name pos'n
 15252                                  fcMove:
 15253 00001488 AC                      	lodsb				; AL = next byte of filename
 15254 00001489 AA                      	stosb				; store byte
 15255 0000148A 08C0                    	or	al,al
 15256 0000148C 7403                    	jz	short fcRet		; byte was zero, return success (CY clear)
 15257 0000148E EBF8                    	jmp	short fcMove		; go move another byte
 15258                                  fcNope:
 15259 00001490 F9                      	stc				; return error
 15260                                  fcRet:
 15261 00001491 9F                      	lahf
 15262 00001492 83C414                  	add	sp,20			; restore stack
 15263 00001495 9E                      	sahf
 15264 00001496 C3                      	retn
 15265                                  
 15266                                  ; ---------------------------------------------------------------------------
 15267                                  
 15268                                  ;***	FindOneInMem - find the first available entry in TPA
 15269                                  ;***	FindNextInMem - find the next available entry in TPA
 15270                                  ;
 15271                                  ;	ENTRY	ES = TPA seg addr
 15272                                  ;		BX = ptr to entry in TPA
 15273                                  ;
 15274                                  ;	EXIT	BX = ptr to entry found
 15275                                  ;		CY = set if no more entries available in TPA
 15276                                  ;
 15277                                  ;	USED	AL
 15278                                  
 15279                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15280                                  FindOneInMem:
 15281 00001497 268A07                  	mov	al,[es:bx]		; examine 'used' byte of starting entry
 15282 0000149A 3C01                    	cmp	al,1
 15283 0000149C 7406                    	je	short FindNextInMem	; entry has already been used
 15284 0000149E 3CFF                    	cmp	al,0FFh
 15285 000014A0 7407                    	je	short foNoMore		; 0FFh, we're at the end of the list
 15286                                  
 15287                                  ;	BX = ptr to entry that hasn't been output yet.
 15288                                  
 15289 000014A2 F8                      	clc				; return success
 15290 000014A3 C3                      	retn
 15291                                  
 15292                                  FindNextInMem:
 15293 000014A4 83C315                  	add	bx,21
 15294                                  	;add	bx,size EntryStruc	; BX = ptr to next entry
 15295 000014A7 EBEE                    	jmp	short FindOneInMem	; go look at it
 15296                                  foNoMore:
 15297 000014A9 F9                      	stc				; ran out of entries, return failure
 15298 000014AA C3                      	retn
 15299                                  
 15300                                  ; ---------------------------------------------------------------------------
 15301                                  
 15302                                  ;***	GetEnvValue - get value of our environment variable
 15303                                  ;
 15304                                  ;	ENTRY	DS, ES = TRANGROUP seg addr
 15305                                  ;
 15306                                  ;	EXIT	CY = set if environment variable not in environment
 15307                                  ;
 15308                                  ;		Otherwise:
 15309                                  ;		SI = ptr to environment variable asciiz value in TRANGROUP
 15310                                  ;
 15311                                  ;	USED	AX,BX,CX,DX,DI
 15312                                  ;		(We assume the (almost) worst, since we don't know about
 15313                                  ;		Find_Name_In_Environment.)
 15314                                  ;
 15315                                  ;	EFFECTS
 15316                                  ;
 15317                                  ;	  ScanBuf is loaded with value text
 15318                                  
 15319                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15320                                  GetEnvValue:
 15321 000014AB 06                      	push	es				; save ES
 15322                                  	;mov	si,offset TRANGROUP:DirEnvVar	; DS:SI = ptr to variable name
 15323 000014AC BE[9F81]                	mov	si,DirEnvVar
 15324                                  	;invoke	Find_Name_In_Environment
 15325 000014AF E8650E                  	call	find_name_in_environment
 15326 000014B2 7214                    	jc	short geRet			; name not found in environment
 15327                                  
 15328                                  ;	ES:DI = ptr to value of environment variable
 15329                                  ;	We're assuming DS, CS, and SS are unchanged.
 15330                                  
 15331 000014B4 1E                      	push	ds
 15332 000014B5 06                      	push	es
 15333 000014B6 1F                      	pop	ds
 15334 000014B7 07                      	pop	es
 15335                                  
 15336                                  	;assume	ds:nothing
 15337                                  
 15338                                  ;	DS = seg addr of environment variable value (in environment segment)
 15339                                  ;	ES = TRANGROUP seg addr
 15340                                  
 15341 000014B8 89FE                    	mov	si,di				; DS:SI = ptr to value string
 15342                                  	;mov	di,offset TRANGROUP:ScanBuf	; ES:DI = ptr to dest buffer
 15343 000014BA BF[8E8D]                	mov	di,ScanBuf
 15344                                  geLoop:
 15345                                  ;@@:	
 15346 000014BD AC                      	lodsb
 15347 000014BE 08C0                    	or	al,al
 15348 000014C0 AA                      	stosb
 15349                                  	;loopnz	@B		; move the string, including trailing null
 15350 000014C1 E0FA                    	loopnz	geLoop
 15351                                  
 15352 000014C3 06                      	push	es
 15353 000014C4 1F                      	pop	ds		; DS = TRANGROUP seg addr again
 15354                                  	;assume	ds:TRANGROUP
 15355                                  
 15356                                  	;mov	si,offset TRANGROUP:ScanBuf	; SI = ptr to var value
 15357 000014C5 BE[8E8D]                	mov	si,ScanBuf
 15358                                  geRet:
 15359 000014C8 07                      	pop	es				; restore ES
 15360 000014C9 C3                      	retn
 15361                                  
 15362                                  ; ---------------------------------------------------------------------------
 15363                                  
 15364                                  ;***	GetFirst - get first directory entry from disk
 15365                                  ;
 15366                                  ;	ENTRY	DOS DTA established at DirBuf
 15367                                  ;		FCB contains drive # and filename
 15368                                  ;		Current directory (on selected drive) is the one to search
 15369                                  ;		AttrSpecified & AttrSelect masks set
 15370                                  ;
 15371                                  ;	EXIT	CY = clear if success
 15372                                  ;		DirBuf contains extended FCB for file found
 15373                                  ;
 15374                                  ;		If unsuccessful,
 15375                                  ;		CY = set
 15376                                  ;		Ready for DOS Get Extended Error call
 15377                                  ;
 15378                                  ;	USED	AX,DX
 15379                                  ;
 15380                                  ;	EFFECTS
 15381                                  ;
 15382                                  ;	  FCB-7 = 0FFh to mark extended FCB
 15383                                  ;	  FCB-1 = attribute mask to find all files
 15384                                  ;	  These fields should remain unmodified for GetNext calls.
 15385                                  ;
 15386                                  ;***	GetNext - get next directory entry from disk
 15387                                  ;
 15388                                  ;	ENTRY	As for GetFirst, plus
 15389                                  ;		FCB-7 set up as extended FCB w/ find-all attribute byte
 15390                                  ;
 15391                                  ;	EXIT	As for GetFirst
 15392                                  ;
 15393                                  ;	USED	AX,DX
 15394                                  
 15395                                  	; 18/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15396                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:144Fh
 15397                                  GetFirst:
 15398                                  	;mov	byte [55h],0FFh	; -1
 15399 000014CA C6065500FF              	mov	byte [FCB-7],0FFh	; signal extended FCB
 15400                                  	;mov	byte [5Bh],16h
 15401 000014CF C6065B0016              	mov	byte [FCB-1],ATTR_ALL ; 16h
 15402                                  					; find any file
 15403                                  	; 07/06/2023
 15404                                  	;mov	dx,FCB-7 ; 55h		; DX = ptr to extended FCB
 15405 000014D4 B411                    	mov	ah,11h
 15406                                  	;mov	ah,Dir_Search_First	; AH = DOS Find First function code
 15407                                  	; 07/06/2023
 15408                                  	;int	21h			; call DOS
 15409                                  	;shl	al,1			; CY = set if error
 15410                                  	;jc	short gfRet		; return error
 15411                                  	;jmp	short gfFound		; go look at attr's
 15412                                  	; 07/06/2023
 15413 000014D6 EB02                    	jmp	short GetFrstNxt
 15414                                  GetNext:
 15415                                  	; 07/06/2023
 15416                                  	;;mov	dx,55h
 15417                                  	;mov	dx,FCB-7		; DX = ptr to extended FCB
 15418 000014D8 B412                    	mov	ah,12h
 15419                                  	;mov	ah,Dir_Search_Next	; AH = DOS Find Next function code
 15420                                  GetFrstNxt:
 15421                                  	; 07/06/2023
 15422 000014DA BA5500                  	mov	dx,FCB-7 ; mov dx,55h
 15423                                  	;
 15424 000014DD CD21                    	int	21h			; call DOS
 15425 000014DF D0E0                    	shl	al,1			; CY = set if error
 15426 000014E1 7211                    	jc	short gfRet		; return error
 15427                                  
 15428                                  ;*	Found an entry. Check attributes.
 15429                                  gfFound:
 15430                                  	;;mov	al,[DirBuf+8].dir_attr	; AL = file attributes
 15431                                  	;mov	al,[DIRBUF+19]
 15432 000014E3 A0[E18B]                	mov	al,[DIRBUF+8+DIR_ENTRY.DIR_ATTR]
 15433 000014E6 8A26[288C]              	mov	ah,[AttrSpecified]	; AH = mask of pertinent attr's
 15434 000014EA 20E0                    	and	al,ah			; AL = pertinent attr's of file
 15435 000014EC 2226[298C]              	and	ah,[AttrSelect]		; AH = attr settings to match
 15436 000014F0 38E0                    	cmp	al,ah
 15437 000014F2 75E4                    	jne	short GetNext		; attr's don't match, look for another
 15438                                  gfRet:
 15439 000014F4 C3                      	retn
 15440                                  
 15441                                  ; ---------------------------------------------------------------------------
 15442                                  
 15443                                  ;***	ListDir - search for and list files in the current directory
 15444                                  ;
 15445                                  ;	List header, files, and trailer for current directory on selected
 15446                                  ;	drive. Header & trailer are listed if at least one file is found.
 15447                                  ;	If no qualifying files are found, no display output occurs.
 15448                                  ;
 15449                                  ;	ENTRY	Current directory (on selected drive) is the one to be listed
 15450                                  ;		FCB contains selected drive # and filename spec
 15451                                  ;		Option bits, attribute masks, and sort codes set up
 15452                                  ;
 15453                                  ;	EXIT	CY = clear if no error
 15454                                  ;		FileCnt = # files found & displayed
 15455                                  ;
 15456                                  ;		If error,
 15457                                  ;		CY = set
 15458                                  ;		Ready for DOS Get Extended Error call
 15459                                  ;
 15460                                  ;	USED	AX,BX,CX,DX,SI,DI,BP
 15461                                  ;		FileSiz
 15462                                  ;
 15463                                  ;	EFFECTS
 15464                                  ;
 15465                                  ;	  FileCntTotal, FileSizTotal are updated.
 15466                                  ;	  Files found are listed. A directory header and trailer are
 15467                                  ;	   displayed only if files are found.
 15468                                  
 15469                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15470                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:155Eh
 15471                                  
 15472                                  ListDir:
 15473 000014F5 31C0                    	xor	ax,ax ; 0
 15474 000014F7 A3[F18A]                	mov	[FileCnt],ax		; zero file count
 15475 000014FA A3[F38A]                	mov	[FileSiz],ax		; zero file size accumulator
 15476 000014FD A3[F58A]                	mov	[FileSiz+2],ax
 15477                                  	;cmp	byte [DestBuf],0	; check for sort code
 15478                                  	; 31/07/2024
 15479 00001500 3806[D18C]              	cmp	[DestBuf],al ; 0
 15480 00001504 740A                    	je	short ld1		; no sort
 15481 00001506 E83000                  	call	LoadEntries		; load entries for sorted listing
 15482 00001509 7305                    	jnc	short ld1		; no error - continue
 15483 0000150B E8E407                  	call	get_ext_error_number	; AX = DOS error code
 15484                                  	; 19/02/2023
 15485                                  	;stc
 15486 0000150E EB12                    	jmp	short ldErr		; return error
 15487                                  ld1:
 15488 00001510 E8E0FE                  	call	FindFirst		; find first file
 15489 00001513 720D                    	jc	short ldErr		; not found, return error
 15490                                  
 15491                                  ;	BX = offset in TPA buffer of entry found
 15492                                  
 15493 00001515 E8E102                  	call	DisplayHeader		; if at least one file, display header
 15494                                  ldNext:
 15495 00001518 E8B902                  	call	DisplayFile		; display the file entry
 15496                                  ;ldNext:
 15497 0000151B E8DAFE                  	call	FindNext		; find another file
 15498 0000151E 7202                    	jc	short ldErr		; not found
 15499                                  	;call	DisplayFile		; display entry
 15500                                  	;jmp	short ldNext		; go find another one
 15501                                  	; 19/02/2023
 15502 00001520 EBF6                    	jmp	short ldNext
 15503                                  ldErr:
 15504                                  	;cmp	ax,2
 15505 00001522 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND
 15506 00001525 7407                    	je	short ldDone		; file not found, we're done
 15507                                  	;cmp	ax,18
 15508 00001527 83F812                  	cmp	ax,ERROR_NO_MORE_FILES
 15509 0000152A 7402                    	je	short ldDone		; no more files, we're done
 15510 0000152C F9                      	stc
 15511                                  	;jmp	short ldRet
 15512                                  	; 19/02/2023
 15513 0000152D C3                      	retn
 15514                                  ldDone:
 15515 0000152E 833E[F18A]00            	cmp	word [FileCnt],0
 15516                                  	;je	short ld2		; no files found, just return
 15517                                  	; 25/04/2023
 15518 00001533 7403                    	jz	short ldRet
 15519 00001535 E8CA03                  	call	DisplayTrailer		; display trailing info
 15520                                  	; 08/06/2023
 15521                                  	; cf=0
 15522                                  ;ld2:	
 15523                                  	;clc				; return success
 15524                                  ldRet:
 15525 00001538 C3                      	retn
 15526                                  
 15527                                  ; ---------------------------------------------------------------------------
 15528                                  
 15529                                  ;***	LoadEntries - attempt to load entries from current directory
 15530                                  ;
 15531                                  ;	Load all qualifying directory entries from the current directory
 15532                                  ;	into the TPA. If an error is returned by FindFirst/FindNext calls
 15533                                  ;	other than 'no more files', return to caller with carry flag set.
 15534                                  ;	If we run out of buffer space, display a message that we haven't
 15535                                  ;	enough memory to sort this directory, but return without error.
 15536                                  ;	Other routines know whether or not entries have been loaded by
 15537                                  ;	the 'inmem' flag bit, which we set here.
 15538                                  ;
 15539                                  ;	The TPA is usually 64K - 512 bytes long. At 20 bytes per entry,
 15540                                  ;	this allows sorting over 3000 entries in a directory.
 15541                                  ;
 15542                                  ;	ENTRY	Tpa = buffer seg addr
 15543                                  ;		BytCnt = buffer length, in bytes
 15544                                  ;		Current directory (on selected drive) is the one to load
 15545                                  ;		FCB contains drive # and filespec
 15546                                  ;		Bits, AttrSpecified, AttrSelect, & DestBuf (sort codes) are set
 15547                                  ;
 15548                                  ;	EXIT	CY = set if error
 15549                                  ;		If error, DOS Get Extended Error will get error info
 15550                                  ;
 15551                                  ;	USED	AX,CX,DX,SI,DI
 15552                                  ;
 15553                                  ;	EFFECTS
 15554                                  ;
 15555                                  ;	  Inmem bit of Bits = set if load succeeded.
 15556                                  ;	  Tpa buffer contains directory entries.
 15557                                  ;	  Byte after last entry = 0FFh.
 15558                                  
 15559                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15560                                  LoadEntries:
 15561 00001539 06                      	push	es			; save TRANGROUP seg addr
 15562 0000153A 8E06[C78A]              	mov	es,[TPA]		; ES = TPA seg addr
 15563 0000153E 31FF                    	xor	di,di			; ES:DI = destination ptr
 15564                                  	;;;and	Bits,not mask inmem	; signal entries not loaded
 15565                                  	;;and	word [_Bits],0FFDFh
 15566                                  	;and	byte [_Bits],0DFh	; not 20h
 15567 00001540 8026[208C]DF            	and	byte [_Bits],~mask.inmem ; ~20h
 15568                                  
 15569 00001545 E882FF                  	call	GetFirst		; look for first file
 15570 00001548 7221                    	jc	short leRet		; return any error
 15571 0000154A E82000                  	call	LoadEntry		; load entry into TPA
 15572                                  leNext:
 15573 0000154D E888FF                  	call	GetNext			; get another file
 15574 00001550 720F                    	jc	short leLoaded		; assume any error is no more files
 15575 00001552 A1[E68A]                	mov	ax,[BYTCNT]		; AX = size of TPA
 15576 00001555 29F8                    	sub	ax,di			; AX = bytes left in TPA
 15577                                  	;cmp	ax,size EntryStruc+2	; insist on entry size + 2 bytes
 15578 00001557 83F817                  	cmp	ax,23 ; 21+2 
 15579 0000155A 720E                    	jb	short leOk		; not enough memory left, give up
 15580 0000155C E80E00                  	call	LoadEntry		; load entry into TPA
 15581 0000155F EBEC                    	jmp	short leNext		; go get another file
 15582                                  
 15583                                  leLoaded:
 15584 00001561 26C605FF                	mov	byte [es:di],0FFh	; mark end of entry list
 15585                                  	;;;or	Bits,mask inmem		; signal entries loaded in memory
 15586                                  	;;or	word [_Bits],20h
 15587                                  	;or	byte [_Bits],20h
 15588 00001565 800E[208C]20            	or	byte [_Bits],mask.inmem
 15589                                  	; 25/04/2023
 15590                                  	; cf = 0
 15591                                  leOk:
 15592 0000156A F8                      	clc				; return no error
 15593                                  leRet:
 15594 0000156B 07                      	pop	es			; ES = TRANGROUP seg addr again
 15595 0000156C C3                      	retn
 15596                                  
 15597                                  
 15598                                  ; ---------------------------------------------------------------------------
 15599                                  
 15600                                  ;***	LoadEntry - load directory entry from DirBuf ext'd FCB
 15601                                  ;
 15602                                  ;	ENTRY	ES:DI = ptr to load point in TPA
 15603                                  ;		DirBuf contains extended FCB of entry to load
 15604                                  ;
 15605                                  ;	EXIT	ES:DI = ptr to next byte available in TPA
 15606                                  ;
 15607                                  ;	USED	AX,CX,SI
 15608                                  ;
 15609                                  ;	NOTES
 15610                                  ;
 15611                                  ;	  I could've used symbolic offsets and sizes of fields from
 15612                                  ;	   the dir_entry struc to do this, but this is time-critical,
 15613                                  ;	   so I hard-wired the structure of the DOS 4.x returned FCB,
 15614                                  ;	   as well as our private directory entry structure.
 15615                                  ;
 15616                                  ;	  We force a zero size for subdirectory files. A zero size is
 15617                                  ;	   ordinarily returned for subdirectories, but with Novell
 15618                                  ;	   Netware 286 or 386 loaded, we can't depend on it. Bug #1594.
 15619                                  
 15620                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15621                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:15DDh
 15622                                  LoadEntry:
 15623                                  	;mov	si,offset TRANGROUP:Dirbuf+8	; DS:SI = ptr to filename
 15624 0000156D BE[D68B]                	mov	si,DIRBUF+8
 15625 00001570 30C0                    	xor	al,al				; AL = 0
 15626 00001572 AA                      	stosb					; 'used' byte = false
 15627 00001573 B90B00                  	mov	cx,11
 15628 00001576 F3A4                    	rep	movsb				; transfer filename & extension
 15629 00001578 AC                      	lodsb					; AL = attrib byte
 15630 00001579 AA                      	stosb					; store attrib byte
 15631                                  	;add	si,10 ; 22-11-1
 15632                                  	;add	si,dir_time-dir_attr-1		; skip to time field
 15633 0000157A 83C60A                  	add	si,(DIR_ENTRY.DIR_TIME-DIR_ENTRY.DIR_ATTR)-1
 15634 0000157D A5                      	movsw					; transfer time
 15635 0000157E A5                      	movsw					; transfer date
 15636 0000157F 46                      	inc	si				; skip alloc unit
 15637 00001580 46                      	inc	si
 15638                                  	;and	al,10h
 15639 00001581 2410                    	and	al,ATTR_DIRECTORY
 15640 00001583 7503                    	jnz	short leSetDirSize		; force zero size for subdir
 15641 00001585 A5                      	movsw
 15642 00001586 A5                      	movsw					; transfer size
 15643 00001587 C3                      	retn
 15644                                  leSetDirSize:
 15645 00001588 31C0                    	xor	ax,ax ; 0
 15646 0000158A AB                      	stosw
 15647 0000158B AB                      	stosw					; store zero size
 15648 0000158C C3                      	retn
 15649                                  
 15650                                  ; ---------------------------------------------------------------------------
 15651                                  
 15652                                  ;***	NoOrder - turn sorting off
 15653                                  ;
 15654                                  ;	ENTRY	nothing
 15655                                  ;
 15656                                  ;	EXIT	CY clear
 15657                                  ;
 15658                                  ;	USED	AX
 15659                                  ;
 15660                                  ;	EFFECTS
 15661                                  ;
 15662                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 15663                                  
 15664                                  	; 19/02/2023
 15665                                  NoOrder:
 15666 0000158D C606[D18C]00            	mov	byte [DestBuf],0
 15667                                  				; no sort
 15668 00001592 F8                      	clc			; no error
 15669 00001593 C3                      	retn
 15670                                  
 15671                                  ; ---------------------------------------------------------------------------
 15672                                  
 15673                                  ;***	OnOffSw - record occurence of on/off option switch
 15674                                  ;
 15675                                  ;	ENTRY	DI = index into word list of switches
 15676                                  ;
 15677                                  ;	EXIT	CY clear
 15678                                  ;
 15679                                  ;	USED	AX,CX
 15680                                  ;
 15681                                  ;	EFFECTS
 15682                                  ;
 15683                                  ;	  Bits modified to indicate option state.
 15684                                  
 15685                                  	; 19/02/2023
 15686                                  OnOffSw:
 15687 00001594 89F9                    	mov	cx,di		; CX = index into word list of options
 15688 00001596 D1E9                    	shr	cx,1
 15689 00001598 D1E9                    	shr	cx,1		; CX = bit position of option
 15690 0000159A B80100                  	mov	ax,1		
 15691 0000159D D3E0                    	shl	ax,cl		; AX = bit mask of option
 15692 0000159F F7C70200                	test	di,2		; check if it is a negated option
 15693 000015A3 7405                    	jz	short oo1	; it's negated
 15694                                  	;or	Bits,ax		; turn option on
 15695 000015A5 0906[208C]              	or	[_Bits],ax
 15696                                  	;jmp	short ooRet
 15697                                  	; 19/02/2023
 15698                                  	;cf=0
 15699 000015A9 C3                      	retn
 15700                                  oo1:	
 15701 000015AA F7D0                    	not	ax		; AX = complemented bit mask of option
 15702                                  	;and	Bits,ax		; turn option off
 15703 000015AC 2106[208C]              	and	[_Bits],ax
 15704                                  ooRet:
 15705                                  	; 19/02/2023
 15706                                  	;cf=0
 15707                                  	;clc			; always return success
 15708 000015B0 C3                      	retn
 15709                                  
 15710                                  ; ---------------------------------------------------------------------------
 15711                                  
 15712                                  ;***	ParseAttr - parse and record /A option
 15713                                  ;
 15714                                  ;	ENTRY	BX = ptr to system parser result buffer for /A occurence
 15715                                  ;
 15716                                  ;	EXIT	CY = set if error occurs parsing attribute conditions
 15717                                  ;
 15718                                  ;		For parse error, we set up for Std_EPrintf call:
 15719                                  ;		AX = parse error code, like system parser
 15720                                  ;		DX = ptr to message block
 15721                                  ;
 15722                                  ;	USED	AX,CX,DX,DI
 15723                                  ;
 15724                                  ;	EFFECTS
 15725                                  ;
 15726                                  ;	  AttrSpecified, AttrSelect are updated with new attribute conditions.
 15727                                  ;	  If parse error occurs, attribute conditions parsed so far hold.
 15728                                  ;
 15729                                  ;	  For parse error, we set up for Std_EPrintf call:
 15730                                  ;	  Msg_Disp_Class = parse error message class
 15731                                  ;	  Message block (see DX) is set up for parse error message
 15732                                  
 15733                                  	; 19/02/2023
 15734                                  ParseAttr:
 15735 000015B1 56                      	push	si			; save SI
 15736 000015B2 C606[288C]00            	mov	byte [AttrSpecified],0	; cancel all attribute conditions
 15737                                  
 15738                                  ;	Each /A invocation starts by assuming all files are to be listed.
 15739                                  
 15740                                  	;;mov	si,word ptr [bx].ValuePtr
 15741                                  					; SI = ptr to string after /A
 15742                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 15743 000015B7 8B7704                  	mov	si,[bx+4]
 15744                                  paLoop:	
 15745 000015BA BA0100                  	mov	dx,1			; DX = 1 (for un-negated attribute)
 15746 000015BD AC                      	lodsb				; AL = next char in string
 15747 000015BE 08C0                    	or	al,al
 15748                                  	;jz	short paOk		; it's terminating null, we're done
 15749                                  	; 19/02/2023
 15750 000015C0 742F                    	jz	short paRet ; cf=0
 15751 000015C2 3C2D                    	cmp	al,'-'
 15752 000015C4 7502                    	jne	short pa1		; not '-', go look for letter
 15753 000015C6 4A                      	dec	dx			; DX = 0 (for negated attribute)
 15754 000015C7 AC                      	lodsb				; AL = next char
 15755                                  pa1:	
 15756                                  	;mov	di,offset TRANGROUP:AttrLtrs 
 15757                                  					; DI = ptr to attrib letter list
 15758 000015C8 BF[5784]                	mov	di,AttrLtrs ; "RHSvDA"
 15759                                  	;mov	cx,6
 15760 000015CB B90600                  	mov	cx,NUM_ATTR_LTRS ; 6	; CX = length of attrib letter list
 15761 000015CE F2AE                    	repne	scasb			; look for our letter in the list
 15762 000015D0 751B                    	jne	short paErr		; not found, return error
 15763                                  
 15764 000015D2 F7D1                    	not	cx
 15765                                  	;add	cx,6
 15766 000015D4 83C106                  	add	cx,NUM_ATTR_LTRS	; CX = attrib bit #, 0-5
 15767                                  
 15768                                  ;	Note that we rely on AttrLtrs to be in the attribute bit order,
 15769                                  ;	starting from bit 0.
 15770                                  
 15771                                  ;	Record this attribute bit in AttrSpecified.
 15772                                  
 15773 000015D7 B001                    	mov	al,1
 15774 000015D9 D2E0                    	shl	al,cl			; AL = mask for our bit
 15775 000015DB 0806[288C]              	or	[AttrSpecified],al	; set it in the 'specified' mask
 15776                                  
 15777                                  ;	Record the selected state for this attribute in AttrSelect.
 15778                                  ;	DX = 0 or 1, the selected state for this attribute.
 15779                                  
 15780 000015DF F6D0                    	not	al			; AL = mask for all other bits
 15781 000015E1 2006[298C]              	and	[AttrSelect],al		; clear our bit
 15782 000015E5 D2E2                    	shl	dl,cl			; DL = our bit state in position
 15783 000015E7 0816[298C]              	or	[AttrSelect],dl		; set selected attr state
 15784 000015EB EBCD                    	jmp	short paLoop		; go look at next char
 15785                                  
 15786                                  ;	The attribute letter string is invalid.
 15787                                  
 15788                                  paErr:	
 15789 000015ED E87303                  	call	SetupParamError		; set message up for Std_EPrintf
 15790 000015F0 F9                      	stc		   		; return error
 15791                                  	; 19/02/2023
 15792                                  	;jmp	short paRet
 15793                                  ;paOk:
 15794                                  	;clc				; return success		
 15795                                  paRet:	
 15796 000015F1 5E                      	pop	si			; restore SI
 15797 000015F2 C3                      	retn
 15798                                  
 15799                                  ; ---------------------------------------------------------------------------
 15800                                  
 15801                                  ;***	ParseLine - parse a line of text
 15802                                  ;
 15803                                  ;	Parse text until an EOL (CR or NUL) is found, or until a parse
 15804                                  ;	error occurs.
 15805                                  ;
 15806                                  ;	ENTRY	DS:SI = ptr to text
 15807                                  ;		CS, DS, ES = TRANGROUP seg addr
 15808                                  ;
 15809                                  ;	EXIT	AX = last return code from system parser
 15810                                  ;		CX = # positional parameters (pathnames) found - 0 or 1
 15811                                  ;
 15812                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 15813                                  ;		DX = ptr to message block
 15814                                  ;
 15815                                  ;	USED	BX,CX,DX,SI,DI
 15816                                  ;
 15817                                  ;	EFFECTS
 15818                                  ;
 15819                                  ;	  Bits may contain new option settings.
 15820                                  ;	  DestBuf may contain new series of sort codes.
 15821                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 15822                                  ;	  SrcBuf may contain a new default pathname/filespec.
 15823                                  ;	  PathPos, PathCnt updated for new pathname.
 15824                                  ;
 15825                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 15826                                  ;	  Msg_Disp_Class = parse error class
 15827                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 15828                                  ;	  Message block (see DX) is set up for parse error message
 15829                                  
 15830                                  	; 19/02/2023
 15831                                  Parse_Line:
 15832                                  	; 04/05/2023
 15833 000015F3 BF[2485]                	mov	di,PARSE_DIR		; ES:DI = ptr to parse block
 15834 000015F6 31C9                    	xor	cx,cx			; CX = # positionals found
 15835                                  plPars:
 15836 000015F8 E8C00B                  	call	Parse_With_Msg		; call parser
 15837 000015FB 83F8FF                  	cmp	ax,-1
 15838                                  	;cmp	ax,END_OF_LINE ; 0FFFFh ; -1
 15839 000015FE 7411                    	je	short plRet		; EOL encountered, return
 15840 00001600 83F800                  	cmp	ax,RESULT_NO_ERROR ; 0
 15841 00001603 750C                    	jne	short plRet		; parse error occurred, return
 15842                                  
 15843                                  ;	Parse call succeeded. We have a filespec or a switch.
 15844                                  ;	DX = ptr to result buffer
 15845                                  
 15846 00001605 89D3                    	mov	bx,dx			; BX = ptr to parse result buffer
 15847 00001607 803F05                  	cmp	byte [bx],RESULT_FILESPEC ; 5
 15848 0000160A 7406                    	je	short plFil		; we have a filespec
 15849                                  
 15850 0000160C E85900                  	call	ParseSwitch		; else we have a switch
 15851                                  	;jc	short plRet		; error parsing switch, return
 15852                                  	;jmp	short plPars		; parse more
 15853                                  	; 19/02/2023
 15854 0000160F 73E7                    	jnc	short plPars
 15855                                  plRet:
 15856 00001611 C3                      	retn	
 15857                                  plFil:	
 15858 00001612 E8B200                  	call	CopyPathname		; copy pathname into our buffer
 15859 00001615 EBE1                    	jmp	short plPars		; parse more
 15860                                  ;plRet:
 15861                                  ;	retn
 15862                                  
 15863                                  ; ---------------------------------------------------------------------------
 15864                                  
 15865                                  ;***	ParseOrder - parse and record /O option
 15866                                  ;
 15867                                  ;	ENTRY	BX = ptr to system parser result buffer for /O occurence
 15868                                  ;
 15869                                  ;	EXIT	CY = set if error occurs parsing order
 15870                                  ;
 15871                                  ;		For parse error, we set up for Std_EPrintf call:
 15872                                  ;		AX = parse error code, like system parser
 15873                                  ;		DX = ptr to message block
 15874                                  ;
 15875                                  ;	USED	AX,CX,DX,DI
 15876                                  ;
 15877                                  ;	EFFECTS
 15878                                  ;
 15879                                  ;	  DestBuf is updated with sort code bytes. See DestBuf description.
 15880                                  ;
 15881                                  ;	  For parse error, we set up for Std_EPrintf call:
 15882                                  ;	  Msg_Disp_Class = parse error message class
 15883                                  ;	  Message block (see DX) is set up for parse error message
 15884                                  
 15885                                  	; 19/02/2023
 15886                                  ParseOrder:
 15887 00001617 56                      	push	si			; save SI
 15888 00001618 53                      	push	bx			; save ptr to result buffer
 15889                                  
 15890                                  	;;mov	si,word ptr [bx].ValuePtr
 15891                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 15892 00001619 8B7704                  	mov	si,[bx+4]		; SI = ptr to order letters
 15893                                  	;mov	bx,offset TRANGROUP:DestBuf
 15894                                  	; 08/06/2023 (BugFix)
 15895 0000161C BB[D18C]                	mov	bx,DestBuf		; BX = ptr to sort code buffer
 15896 0000161F 8A04                    	mov	al,[si]			; AL = 1st char of order string
 15897 00001621 08C0                    	or	al,al
 15898 00001623 750E                    	jnz	short poLtr		; not NUL, go parse letters
 15899                                  
 15900                                  ;	We have /O alone. Set standard sort order.
 15901                                  ;	Note hardwired dependency on character order in OrderLtrs.
 15902                                  
 15903 00001625 C60705                  	mov	byte [bx],5		; sort 1st by group (subdirs 1st)
 15904 00001628 43                      	inc	bx
 15905 00001629 C60701                  	mov	byte [bx],1		; then by name
 15906 0000162C 43                      	inc	bx
 15907 0000162D C60702                  	mov	byte [bx],2		; then by extension
 15908 00001630 43                      	inc	bx
 15909 00001631 EB2F                    	jmp	short poOk		; return success
 15910                                  
 15911                                  ;	We have /O<something>. Parse sort order letters.
 15912                                  
 15913                                  poLtr:	
 15914 00001633 30D2                    	xor	dl,dl			; DL = 0 (upward sort)
 15915 00001635 AC                      	lodsb				; AL = next sort order letter
 15916 00001636 08C0                    	or	al,al
 15917 00001638 7428                    	jz	short poOk		; NUL found, return success
 15918                                  
 15919 0000163A 3C2D                    	cmp	al,'-'
 15920 0000163C 7503                    	jne	short po1		; not '-', go look for letter
 15921 0000163E B280                    	mov	dl,80h			; DL = downward sort mask
 15922 00001640 AC                      	lodsb				; AL = next char
 15923                                  po1:
 15924                                  	;mov	di,offset TRANGROUP:OrderLtrs
 15925                                  	; 08/06/2023 (BugFix)
 15926 00001641 BF[5D84]                	mov	di,OrderLtrs	;"NEDSG" ; DI = ptr to list of letters
 15927 00001644 B90500                  	mov	cx,NUM_ORDER_LTRS ; 5	; CX = length of list
 15928 00001647 F2AE                    	repne	scasb			; look for our letter in the list
 15929 00001649 7510                    	jne	short poErr		; not found, return error
 15930                                  
 15931 0000164B F7D9                    	neg	cx
 15932 0000164D 83C105                  	add	cx,NUM_ORDER_LTRS ; 5	; CL = sort order code, 1-6
 15933                                  
 15934 00001650 08D1                    	or	cl,dl			; CL = sort code with up/dn bit
 15935 00001652 880F                    	mov	[bx],cl			; store sort order code in buffer
 15936 00001654 43                      	inc	bx			; BX = ptr to next spot in buffer
 15937                                  	;cmp	bx,offset TRANGROUP:EndDestBuf
 15938 00001655 81FB[288D]              	cmp	bx,EndDestBuf
 15939                                  	;jae	short poErr		; too many letters
 15940                                  	;
 15941                                  	;jmp	short poLtr		; go look at next char
 15942                                  	; 19/02/2023
 15943 00001659 72D8                    	jb	short poLtr
 15944                                  
 15945                                  ;	The sort order string is invalid.  
 15946                                  
 15947                                  poErr:
 15948 0000165B 5B                      	pop	bx			; BX = ptr to result buffer
 15949 0000165C E80403                  	call	SetupParamError		; set message up for Std_EPrintf
 15950 0000165F F9                      	stc				; return failure
 15951 00001660 EB04                    	jmp	short poRet
 15952                                  poOk:	
 15953 00001662 C60700                  	mov	byte [bx],0		; mark end of sort code list
 15954 00001665 5B                      	pop	bx			; BX = ptr to result buffer
 15955                                  	; 19/02/2023
 15956                                  	;cf=0
 15957                                  	;clc				; return success
 15958                                  poRet:
 15959 00001666 5E                      	pop	si			; restore SI
 15960 00001667 C3                      	retn
 15961                                  
 15962                                  ; ---------------------------------------------------------------------------
 15963                                  
 15964                                  ;***	ParseSwitch - parse a switch
 15965                                  ;
 15966                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 15967                                  ;		     a switch
 15968                                  ;
 15969                                  ;	EXIT	CY = set if parse error occurred
 15970                                  ;
 15971                                  ;		If parse error occurred, we're set up for Std_EPrintf call:
 15972                                  ;		AX = parse error code, like system parser
 15973                                  ;		DX = ptr to message block
 15974                                  ;
 15975                                  ;	USED	AX,BX,DX
 15976                                  ;
 15977                                  ;	EFFECTS
 15978                                  ;
 15979                                  ;	  Bits may contain new option settings.
 15980                                  ;	  DestBuf may contain new series of sort codes.
 15981                                  ;	  AttrSpecified, AttrSelect may contain new attribute conditions.
 15982                                  ;
 15983                                  ;	  If parse error occurred, we're set up for Std_EPrintf call:
 15984                                  ;	  Msg_Disp_Class = parse error class
 15985                                  ;	  Byte after last parameter in text is zeroed to make ASCIIZ string
 15986                                  ;	  Message block (see DX) is set up for parse error message
 15987                                  
 15988                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 15989                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16E2h
 15990                                  ParseSwitch:
 15991 00001668 51                      	push	cx			; save CX
 15992 00001669 57                      	push	di			; save DI
 15993                                  
 15994                                  	;;mov	ax,[bx].SynPtr		; AX = synonym ptr
 15995                                  	;mov	ax,[bx+ResultBuffer.SynPtr]
 15996 0000166A 8B4702                  	mov	ax,[bx+2]
 15997                                  	;mov	di,offset TRANGROUP:Dir_Sw_Ptrs
 15998 0000166D BF[7485]                	mov	di,Dir_Sw_Ptrs		; ES:DI = ptr to list of synonym ptrs
 15999 00001670 B90E00                  	mov	cx,NUM_DIR_SWS ; 14	; CX = # of dir switches in list
 16000 00001673 FC                      	cld				; scan direction = upward
 16001 00001674 F2AF                    	repne	scasw			; locate synonym ptr in list
 16002                                  	;sub	di,offset TRANGROUP:Dir_Sw_Ptrs + 2
 16003 00001676 81EF[7685]              	sub	di,Dir_Sw_Ptrs+2
 16004                                  
 16005                                  ;	DI = index into word list of synonym ptrs
 16006                                  
 16007 0000167A 2EFF95[8216]            	call	word [cs:di+SwHandler]	; use same index into call table
 16008                                  
 16009 0000167F 5F                      	pop	di			; restore DI
 16010 00001680 59                      	pop	cx			; restore CX
 16011                                  
 16012 00001681 C3                      	retn
 16013                                  
 16014                                  ; ---------------------------------------------------------------------------
 16015                                  
 16016                                  ;	Order in this table must correspond to order in Dir_Sw_Ptrs list.
 16017                                  ;	Simple on/off switches must occur first in both lists, and must be
 16018                                  ;	  in order of option bits in Bits, starting with bit 0.
 16019                                  
 16020                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16021                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:16FCh
 16022                                  
 16023                                  SwHandler:
 16024 00001682 [9415]                  	dw	OnOffSw		; /-W
 16025 00001684 [9415]                  	dw	OnOffSw		; /W
 16026 00001686 [9415]                  	dw	OnOffSw		; /-P
 16027 00001688 [9415]                  	dw	OnOffSw		; /P
 16028 0000168A [9415]                  	dw	OnOffSw		; /-S
 16029 0000168C [9415]                  	dw	OnOffSw		; /S
 16030 0000168E [9415]                  	dw	OnOffSw		; /-B
 16031 00001690 [9415]                  	dw	OnOffSw		; /B
 16032 00001692 [9415]                  	dw	OnOffSw		; /-L	;M010
 16033 00001694 [9415]                  	dw	OnOffSw		; /L	;M010
 16034 00001696 [8D15]                  	dw	NoOrder		; /-O
 16035 00001698 [1716]                  	dw	ParseOrder	; /O
 16036 0000169A [6C13]                  	dw	DefaultAttr	; /-A
 16037 0000169C [B115]                  	dw	ParseAttr	; /A
 16038                                  
 16039                                  ; ---------------------------------------------------------------------------
 16040                                  
 16041                                  	;break	<DIR utility routines>
 16042                                  
 16043                                  ;***	UTILITY ROUTINES
 16044                                  ; ---------------------- 
 16045                                  
 16046                                  ; ---------------------------------------------------------------------------
 16047                                  
 16048                                  ;***	ChangeDir - change directory on target drive
 16049                                  ;
 16050                                  ;	ENTRY	FCB contains drive #
 16051                                  ;		DS:DX = ptr to ASCIIZ string w/o drive specifier
 16052                                  ;
 16053                                  ;	EXIT	Changed current directory on drive
 16054                                  ;
 16055                                  ;		If error,
 16056                                  ;		CY = set
 16057                                  ;		DOS Get Extended Error call will get error
 16058                                  ;
 16059                                  ;	USED	AX,DX,SI,DI
 16060                                  ;
 16061                                  ;	EFFECTS
 16062                                  ;
 16063                                  ;	  DirBuf is used to build "d:string".
 16064                                  
 16065                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16066                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1718h
 16067                                  
 16068                                  ChangeDir:
 16069                                  	;mov	di,offset TRANGROUP:DirBuf
 16070 0000169E BF[CE8B]                	mov	di,DIRBUF
 16071 000016A1 E8AE02                  	call	GetDriveLtr	; AX = "d:"
 16072 000016A4 AB                      	stosw			; put drive specifier in buffer
 16073 000016A5 89D6                    	mov	si,dx		; SI = ptr to argument string
 16074                                  cdLoop:
 16075 000016A7 AC                      	lodsb
 16076 000016A8 AA                      	stosb			; move byte to buffer
 16077 000016A9 08C0                    	or	al,al
 16078 000016AB 75FA                    	jne	short cdLoop	; continue until null transferred
 16079                                  
 16080                                  	;mov	dx,offset TRANGROUP:DirBuf
 16081 000016AD BA[CE8B]                	mov	dx,DIRBUF	; DX = ptr to "d:string"
 16082                                  	;mov	ah,CHDir
 16083 000016B0 B43B                    	mov	ah,3Bh
 16084 000016B2 CD21                    	int	21h		; change directory
 16085 000016B4 C3                      	retn			; return what CHDIR returns
 16086                                  
 16087                                  ; ---------------------------------------------------------------------------
 16088                                  
 16089                                  ;***	CmpAscz - compare two ASCIIZ strings alphanumerically
 16090                                  ;
 16091                                  ;	ENTRY	DS:SI = ptr to one ASCIIZ string
 16092                                  ;		ES:DI = ptr to another ASCIIZ string
 16093                                  ;
 16094                                  ;	EXIT	flags set after REPE CMPSB
 16095                                  ;
 16096                                  ;	USED	AL,CX,SI,DI
 16097                                  ;
 16098                                  ;	NOTES
 16099                                  ;
 16100                                  ;	Maximum run of comparison is length of DS:SI string.
 16101                                  ;	This ensures that two identical strings followed by
 16102                                  ;	random characters will compare correctly.
 16103                                  
 16104                                  	; 19/02/2023
 16105                                  CmpAscz:
 16106                                  	; 07/06/2023
 16107 000016B5 56                      	push	si ; *
 16108                                  	;
 16109 000016B6 57                      	push	di
 16110                                  
 16111 000016B7 89F7                    	mov	di,si
 16112 000016B9 30C0                    	xor	al,al
 16113 000016BB B9FFFF                  	mov	cx,0FFFFh
 16114 000016BE F2AE                    	repne	scasb
 16115 000016C0 F7D1                    	not	cx
 16116                                  
 16117 000016C2 5F                      	pop	di
 16118 000016C3 F3A6                    	repe	cmpsb
 16119                                  
 16120                                  	; 07/06/2023
 16121 000016C5 5E                      	pop	si ; *
 16122                                  	;
 16123 000016C6 C3                      	retn
 16124                                  
 16125                                  ; ---------------------------------------------------------------------------
 16126                                  
 16127                                  ;***	CopyPathname - copy pathname to our buffer
 16128                                  ;
 16129                                  ;	ENTRY	BX = ptr to parse result buffer after system parser processed
 16130                                  ;		     a filespec
 16131                                  ;
 16132                                  ;	EXIT	nothing
 16133                                  ;
 16134                                  ;	USED	AX
 16135                                  ;
 16136                                  ;	EFFECTS
 16137                                  ;
 16138                                  ;	  SrcBuf may contain a new pathname/filespec.
 16139                                  ;	  PathPos, PathCnt updated for new pathname.
 16140                                  
 16141                                  	; 19/02/2023
 16142                                  CopyPathname:
 16143 000016C7 56                      	push	si
 16144                                  	;;lds	si,dword ptr [bx].ValuePtr  ; load far ptr from result buffer
 16145                                  	;lds	si,[bx+ResultBuffer.ValuePtr]
 16146 000016C8 C57704                  	lds	si,[bx+4]
 16147                                  	;invoke	Move_To_SrcBuf		    ; copy pathname to SrcBuf
 16148 000016CB E8DB15                  	call	Move_To_SrcBuf
 16149 000016CE 5E                      	pop	si
 16150 000016CF C3                      	retn
 16151                                  
 16152                                  ; ---------------------------------------------------------------------------
 16153                                  
 16154                                  ;***	CountFile - update counters with current file
 16155                                  ;
 16156                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16157                                  ;
 16158                                  ;	EXIT	nothing
 16159                                  ;
 16160                                  ;	USED	AX,DX
 16161                                  ;
 16162                                  ;	EFFECTS
 16163                                  ;
 16164                                  ;	  FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 16165                                  
 16166                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16167                                  CountFile:
 16168 000016D0 06                      	push	es			; save TRANGROUP seg addr
 16169 000016D1 8E06[C78A]              	mov	es,[TPA]		; ES = TPA seg addr
 16170                                  
 16171 000016D5 FF06[F18A]              	inc	word [FileCnt]		; # files this directory
 16172 000016D9 FF06[F78A]              	inc	word [FileCntTotal]	; # files total
 16173 000016DD 7504                    	jnz	short cntf1
 16174 000016DF FF06[F98A]              	inc	word [FileCntTotal+2]
 16175                                  cntf1:
 16176                                  	;mov	ax,word ptr es:[bx].filesize
 16177                                  					; AX = low word of file size
 16178                                  	;mov	dx,word ptr es:[bx].filesize+2
 16179                                  					; DX = high word of file size
 16180 000016E3 268B4711                	mov	ax,[es:bx+17] ; [es:bx+EntryStruc.filesize]
 16181 000016E7 268B5713                	mov	dx,[es:bx+19] ; [es:bx+EntryStruc.filesize+2]
 16182 000016EB 0106[F38A]              	add	[FileSiz],ax
 16183 000016EF 1116[F58A]              	adc	[FileSiz+2],dx		; size of this directory
 16184 000016F3 0106[FB8A]              	add	[FileSizTotal],ax
 16185 000016F7 1116[FD8A]              	adc	[FileSizTotal+2],dx	; total size of files listed
 16186                                  
 16187 000016FB 07                      	pop	es			; ES = TRANGROUP seg addr again
 16188                                  dbRet:	; 19/02/2023
 16189 000016FC C3                      	retn
 16190                                  
 16191                                  ; ---------------------------------------------------------------------------
 16192                                  
 16193                                  ;***	DisplayBare - display filename in bare format
 16194                                  ;
 16195                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16196                                  ;
 16197                                  ;	EXIT	DX = # char's displayed, including dot
 16198                                  ;
 16199                                  ;	USED	AX,CX,SI,DI
 16200                                  ;
 16201                                  ;	EFFECTS
 16202                                  ;
 16203                                  ;	  Filename is displayed in name.ext format, followed by cr/lf.
 16204                                  ;	  If /s is on, complete pathname is displayed.
 16205                                  ;
 16206                                  ;	NOTE
 16207                                  ;
 16208                                  ;	  Directory pseudofiles . and .. and suppressed in bare listing.
 16209                                  
 16210                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16211                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1775h
 16212                                  
 16213                                  DisplayBare:
 16214                                  ;	Suppress . and .. files from bare listing.
 16215                                  
 16216 000016FD 8CD9                    	mov	cx,ds			; CX = saved TRANGROUP seg addr
 16217 000016FF 8E1E[C78A]              	mov	ds,[TPA]		; DS:BX = ptr to file entry
 16218                                  	;assume	ds:NOTHING
 16219                                  	;cmp	ds:[bx].filename,'.'	; check 1st char of filename
 16220 00001703 807F012E                	cmp	byte [bx+1],'.' ; [bx+EntrStruc.filename]
 16221 00001707 8ED9                    	mov	ds,cx			; DS = TRANGROUP seg addr again
 16222                                  	;assume	ds:TRANGROUP
 16223 00001709 74F1                    	je	short dbRet		; it's . or .. - don't display
 16224                                  
 16225                                  	;;;test	Bits,mask subd
 16226                                  	;;test	word [_Bits],4
 16227                                  	;test	byte [_Bits],4
 16228 0000170B F606[208C]04            	test	byte [_Bits],mask.subd
 16229 00001710 7431                    	jz	short dbNameExt		; not /s - display filename only
 16230                                  
 16231                                  	;invoke	Build_Dir_String
 16232 00001712 E83907                  	call	build_dir_string
 16233                                  	;mov	di,offset TRANGROUP:BwdBuf
 16234 00001715 BF[CE8B]                	mov	di,BWDBUF		; ES:DI = ptr to dir string
 16235                                     
 16236                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16237                                  	;;test	word [_Bits],10h
 16238                                  	;test	byte [_Bits],10h
 16239 00001718 F606[208C]10            	test	byte [_Bits],mask.lcase
 16240                                  	;jz	@F			;M010;lowercase not needed
 16241 0000171D 7405                    	jz	short dbare1
 16242 0000171F 89FE                    	mov	si,di			;M010;DS:SI --> ASCIIZ string in BwdBuf	
 16243 00001721 E88002                  	call	LowercaseString		;M010;path string is in BwdBuf
 16244                                  dbare1:
 16245                                  ;@@:	
 16246                                  	;xor	al,al			; AL = 0
 16247                                  	; 19/02/2023
 16248 00001724 31C0                    	xor	ax,ax
 16249 00001726 B9FFFF                  	mov	cx,0FFFFh
 16250 00001729 FC                      	cld
 16251 0000172A F2AE                    	repne	scasb			; ES:DI = ptr to byte after null
 16252 0000172C 4F                      	dec	di			; ES:DI = ptr to null byte
 16253                                  
 16254 0000172D 26807DFF5C              	cmp	byte [es:di-1],'\'
 16255                                  	;je	@F
 16256 00001732 7403                    	je	short dbare2		; already terminated w/ '\'
 16257                                  
 16258                                  	;mov	ax,'\'			; AX = '\',0
 16259 00001734 B05C                    	mov	al,'\'
 16260 00001736 AB                      	stosw				; add to dir string
 16261                                  ;@@:
 16262                                  dbare2:
 16263                                  	;mov	String_Ptr_2,offset TRANGROUP:BwdBuf
 16264 00001737 C706[B58C][CE8B]        	mov	word [string_ptr_2],BWDBUF
 16265                                  	;mov	dx,offset TRANGROUP:String_Buf_Ptr
 16266 0000173D BA[E280]                	mov	dx,string_buf_ptr
 16267                                  	;invoke	Std_Printf		; display device & directory path
 16268 00001740 E8AC36                  	call	std_printf
 16269                                  dbNameExt:
 16270 00001743 E82D00                  	call	DisplayDotForm		; display name.ext
 16271                                  	;invoke	CrLf2			; display cr/lf
 16272 00001746 E88A0E                  	call	CRLF2
 16273                                  	; 19/02/2023
 16274                                  	;call	UseLine			;M007;Allow /p with /b
 16275                                  ;dbRet:
 16276                                  	;retn
 16277                                  
 16278                                  	; 19/02/2023
 16279                                  	;jmp	short UseLine
 16280                                  
 16281                                  ; ---------------------------------------------------------------------------
 16282                                  
 16283                                  ;***	UseLine - use a display line, start a new page if none left
 16284                                  ;
 16285                                  ;	ENTRY	nothing
 16286                                  ;
 16287                                  ;	EXIT	nothing
 16288                                  ;
 16289                                  ;	USED	flags
 16290                                  
 16291                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16292                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A04h
 16293                                  UseLine:
 16294 00001749 FF0E[EF8A]              	dec	word [LeftOnPage]
 16295 0000174D 833E[EF8A]02            	cmp	word [LeftOnPage],2
 16296 00001752 771E                    	ja	short ulRet
 16297                                  	; 19/02/2023
 16298                                  	;call	EndPage
 16299                                  ;ulRet:
 16300                                  	;retn
 16301                                  
 16302                                  	; 19/02/2023
 16303                                  	;jmp	short EndPage
 16304                                  
 16305                                  ; ---------------------------------------------------------------------------
 16306                                  
 16307                                  ;***	EndPage - end the current display page
 16308                                  ;
 16309                                  ;	ENTRY	LeftOnPage = # lines left on display page
 16310                                  ;		Current directory (on selected drive) is the one being listed
 16311                                  ;		Bits contains /p setting
 16312                                  ;
 16313                                  ;	EXIT	LeftOnPage = # lines left for next page
 16314                                  ;
 16315                                  ;	USED	AX,DX
 16316                                  ;
 16317                                  ;	EFFECTS
 16318                                  ;
 16319                                  ;	  Pause is invoked to display a message and wait for a keystroke.
 16320                                  ;	  BwdBuf (same as DirBuf) used to build directory string.
 16321                                  
 16322                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16323                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19B8h
 16324                                  
 16325                                  EndPage:
 16326                                  	;;;test	Bits,mask pagd
 16327                                  	;;test	word [_Bits],2
 16328                                  	;test	byte [_Bits],2
 16329 00001754 F606[208C]02            	test	byte [_Bits],mask.pagd
 16330 00001759 7410                    	jz	short epNew		; paged display isn't enabled
 16331                                  
 16332 0000175B 53                      	push	bx			; save BX
 16333 0000175C 51                      	push	cx			; save CX
 16334                                  
 16335                                  	;invoke	Pause			; "Press any key to continue..."
 16336 0000175D E85502                  	call	PAUSE
 16337                                  
 16338                                  	;invoke	Build_Dir_String
 16339 00001760 E8EB06                  	call	build_dir_string
 16340                                  	;mov	dx,offset TRANGROUP:DirCont_Ptr
 16341 00001763 BA[5D81]                	mov	dx,dircont_ptr
 16342                                  	;invoke	Printf_Crlf		; "(continuing <dir>)", cr/lf
 16343 00001766 E87836                  	call	Printf_Crlf
 16344                                  
 16345 00001769 59                      	pop	cx			; restore CX
 16346 0000176A 5B                      	pop	bx			; restore BX
 16347                                  epNew:	
 16348 0000176B A1[1B8E]                	mov	ax,[LinPerPag]		; AX = # lines per page
 16349 0000176E 48                      	dec	ax			; AX = # lines till next EndPage
 16350 0000176F A3[EF8A]                	mov	[LeftOnPage],ax		; LeftOnPage = countdown variable
 16351                                  ulRet:	
 16352                                  	; 19/02/2023
 16353 00001772 C3                      	retn
 16354                                  
 16355                                  ; ---------------------------------------------------------------------------
 16356                                  
 16357                                  ;***	DisplayDotForm - display filename in compressed dot format
 16358                                  ;
 16359                                  ;	Display name.ext, with no cr/lf's. Dot is displayed only
 16360                                  ;	if the filename has a nonblank extension.
 16361                                  ;
 16362                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16363                                  ;
 16364                                  ;	EXIT	DX = # char's displayed, including dot
 16365                                  ;
 16366                                  ;	USED	AX,CX,SI,DI
 16367                                  ;
 16368                                  ;	EFFECTS
 16369                                  ;
 16370                                  ;	  Filename is displayed in name.ext format.
 16371                                  ;
 16372                                  ;	NOTE
 16373                                  ;
 16374                                  ;	  We allow for bogus filenames that have blanks embedded
 16375                                  ;	  in the name or extension.
 16376                                  
 16377                                  ;	Bugbug:	might be a good performance gain if we buffered
 16378                                  ;	up the output and used DOS function 9.
 16379                                  
 16380                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16381                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:17C8h
 16382                                  
 16383                                  DisplayDotForm:
 16384 00001773 1E                      	push	ds			; save TRANGROUP seg addr
 16385 00001774 06                      	push	es			; save ES
 16386 00001775 2EA1[C78A]              	mov	ax,[cs:TPA]		; AX = TPA seg addr
 16387 00001779 8ED8                    	mov	ds,ax			; DS:BX = ptr to entry
 16388                                  	;assume	ds:nothing
 16389 0000177B 8EC0                    	mov	es,ax			; ES:BX = ptr to entry
 16390                                  
 16391                                  	; 08/06/2023
 16392                                  	;mov	di,bx			; ES:DI = ptr to entry
 16393                                  	;;;add	di,filename + size filename - 1
 16394                                  	;add	di,8 ; 1+8-1		; ES:DI = ptr to last char in name field
 16395                                  	;;mov	cx,size filename	; CX = length of name field
 16396                                  	;mov	cx,8
 16397                                  	; 08/06/2023
 16398 0000177D B90800                  	mov	cx,8
 16399 00001780 89CF                    	mov	di,cx
 16400 00001782 01DF                    	add	di,bx	
 16401                                  	
 16402 00001784 B020                    	mov	al,' '
 16403 00001786 FD                      	std				; scan down
 16404 00001787 F3AE                    	repe	scasb			; scan for nonblank
 16405                                  
 16406                                  ;	Assume file name has at least one character.
 16407                                  
 16408 00001789 41                      	inc	cx			; CX = # chars in name
 16409 0000178A 89CA                    	mov	dx,cx			; DX = # chars to be displayed
 16410                                  
 16411 0000178C 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 16412                                  	;;add	si,filename		; DS:SI = ptr to name
 16413                                  	;add	si,1 
 16414                                  	;		; add si,EntryStruc.filename
 16415                                  	; 25/04/2023
 16416 0000178E 46                      	inc	si
 16417                                  NextNameChar:
 16418 0000178F FC                      	cld
 16419 00001790 AC                      	lodsb				; AL = next char
 16420                                  
 16421                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16422                                  	;;test	word [ss:_Bits],10h
 16423                                  	;test	byte [ss:_Bits],10h
 16424 00001791 36F606[208C]10          	test	byte [ss:_Bits],mask.lcase
 16425                                  	;jz	short @F		;M010;lowercase not required
 16426 00001797 7403                    	jz	short ddf1
 16427 00001799 E8FD01                  	call	LowerCase		;M010;filename char is in AL
 16428                                  ddf1:
 16429                                  ;@@:	
 16430                                  	;invoke	Print_Char		; display it
 16431 0000179C E86006                  	call	PRINT_CHAR
 16432 0000179F E2EE                    	loop	NextNameChar
 16433                                  
 16434                                  ;	Now do extension.
 16435                                  
 16436 000017A1 89DF                    	mov	di,bx			; ES:DI = ptr to entry
 16437                                  	;add	di,fileext + size fileext - 1
 16438 000017A3 83C70B                  	add	di,11 ; 9+3-1		; ES:DI = ptr to last char in ext field
 16439                                  	;mov	cx,size fileext		; CX = length of ext field
 16440 000017A6 B90300                  	mov	cx,3
 16441 000017A9 B020                    	mov	al,' '
 16442 000017AB FD                      	std				; scan down
 16443 000017AC F3AE                    	repe	scasb			; scan for nonblank
 16444 000017AE 7420                    	je	short ddDone		; no nonblank chars in ext
 16445                                  
 16446 000017B0 41                      	inc	cx			; CX = # chars in ext
 16447 000017B1 01CA                    	add	dx,cx			; DX = total # chars to be displayed
 16448 000017B3 42                      	inc	dx			;      including dot
 16449                                  
 16450 000017B4 B02E                    	mov	al,'.'
 16451 000017B6 E84606                  	call	PRINT_CHAR
 16452 000017B9 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 16453                                  	;add	si,fileext		; DS:SI = ptr to ext
 16454 000017BB 83C609                  	add	si,9
 16455                                  
 16456                                  NextExtChar:
 16457 000017BE FC                      	cld
 16458 000017BF AC                      	lodsb				; AL = next char
 16459                                  
 16460                                  	;;;test	CS:Bits,mask lcase	;M010;check for lowercase option
 16461                                  	;;test	word [cs:_Bits],10h
 16462                                  	;test	byte [cs:_Bits],10h
 16463 000017C0 2EF606[208C]10          	test	byte [cs:_Bits],mask.lcase
 16464                                  	;jz	short @F		;M010;lowercase not required
 16465 000017C6 7403                    	jz	short ddf2
 16466 000017C8 E8CE01                  	call	LowerCase		;M010;fileext char is in AL
 16467                                  ;@@:	
 16468                                  ddf2:
 16469                                  	;invoke	Print_Char		; display it
 16470 000017CB E83106                  	call	PRINT_CHAR
 16471 000017CE E2EE                    	loop	NextExtChar
 16472                                  ddDone:
 16473 000017D0 07                      	pop	es			; restore ES
 16474 000017D1 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 16475                                  	;assume	ds:TRANGROUP
 16476 000017D2 FC                      	cld				; leave direction flag = up
 16477 000017D3 C3                      	retn
 16478                                  
 16479                                  ; ---------------------------------------------------------------------------
 16480                                  
 16481                                  ;***	DisplayFile - display file entry, update counters
 16482                                  ;
 16483                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16484                                  ;		Bits contains /w, /p settings
 16485                                  ;
 16486                                  ;	EXIT	nothing
 16487                                  ;
 16488                                  ;	USED	AX,CX,DX,SI,DI,BP
 16489                                  ;
 16490                                  ;	EFFECTS
 16491                                  ;
 16492                                  ;	  Entry is displayed.  
 16493                                  ;	  If not /b,
 16494                                  ;	    Cursor is left at end of entry on screen.
 16495                                  ;	    FileCnt, FileCntTotal, FileSiz, FileSizTotal are updated.
 16496                                  ;	  If /b,
 16497                                  ;	    Cursor is left at beginning of next line.
 16498                                  ;	    Cnt's and Siz's aren't updated.
 16499                                  
 16500                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16501                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:182Eh
 16502                                  
 16503                                  DisplayFile:
 16504                                  	;;;test	Bits,mask bare
 16505                                  	;;test	word [_Bits],8
 16506                                  	;test	byte [_Bits],8
 16507 000017D4 F606[208C]08            	test	byte [_Bits],mask.bare
 16508 000017D9 7405                    	jz	short dfNorm		; not /b - do normal display
 16509                                  
 16510 000017DB E81FFF                  	call	DisplayBare		; display file in bare format
 16511 000017DE EB18                    	jmp	short dfRet
 16512                                  dfNorm:	
 16513 000017E0 E87800                  	call	DisplayNext		; pos'n cursor for next entry
 16514                                  	;;;test	Bits,mask wide
 16515                                  	;;test	word [_Bits],1
 16516                                  	;test	byte [_Bits],1
 16517 000017E3 F606[208C]01            	test	byte [_Bits],mask.wide
 16518 000017E8 7405                    	jz	short dfFull		; full format
 16519 000017EA E83701                  	call	DisplayWide		; wide format
 16520 000017ED EB06                    	jmp	short dfCnt
 16521                                  dfFull:	
 16522 000017EF E83400                  	call	DisplayName		; display filename & extension
 16523 000017F2 E88D00                  	call	DisplayTheRest		; display size, date, time
 16524                                  dfCnt:
 16525 000017F5 E8D8FE                  	call	CountFile		; update file counters
 16526                                  dfRet:
 16527                                  dhRet:	; 19/02/2023
 16528 000017F8 C3                      	retn
 16529                                  
 16530                                  ; ---------------------------------------------------------------------------
 16531                                  
 16532                                  ;***	DisplayHeader - display directory header of working directory
 16533                                  ;
 16534                                  ;	ENTRY	Current directory (on selected drive) is the one to display
 16535                                  ;		LeftOnPage = # lines left on display page
 16536                                  ;
 16537                                  ;	EXIT	nothing
 16538                                  ;
 16539                                  ;	ERROR EXIT
 16540                                  ;
 16541                                  ;	  Build_Dir_String will exit through CError with "Invalid drive
 16542                                  ;	   specification" if there's a problem obtaining the current 
 16543                                  ;	   directory pathname.
 16544                                  ;
 16545                                  ;	USED	AX,DX,SI,DI
 16546                                  ;
 16547                                  ;	EFFECTS
 16548                                  ;
 16549                                  ;	  BwdBuf (which is really the same buffer as DirBuf, which
 16550                                  ;	   we are using for the DTA) contains the directory string.
 16551                                  ;	  LeftOnPage is adjusted.
 16552                                  
 16553                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16554                                  
 16555                                  DisplayHeader:
 16556                                  	;;;test	Bits,mask bare
 16557                                  	;;test	word [_Bits],8
 16558                                  	;test	byte [_Bits],8
 16559 000017F9 F606[208C]08            	test	byte [_Bits],mask.bare
 16560 000017FE 75F8                    	jnz	short dhRet		; /b - don't display header
 16561                                  
 16562                                  	;;;test	Bits,mask subd
 16563                                  	;;test	word [_Bits],4
 16564                                  	;test	byte [_Bits],4
 16565 00001800 F606[208C]04            	test	byte [_Bits],mask.subd
 16566 00001805 7408                    	jz	short dhNorm		; not /s
 16567                                  
 16568                                  ;	For subdirectory listings, put a blank line before the header.
 16569                                  
 16570                                  	;invoke	Crlf2			; start with a blank line
 16571 00001807 E8C90D                  	call	CRLF2
 16572 0000180A E83CFF                  	call	UseLine
 16573 0000180D EB05                    	jmp	short dhCom
 16574                                  dhNorm:
 16575 0000180F B020                    	mov	al,' ' ; 20h
 16576                                  	;mov	al,BLANK		; if not /s, precede by a blank
 16577 00001811 E8EB05                  	call	PRINT_CHAR		; print a leading blank
 16578                                  dhCom:
 16579 00001814 E83706                  	call	build_dir_string
 16580 00001817 BA[6280]                	mov	dx,dirhead_ptr
 16581 0000181A E8D235                  	call	std_printf		; print header & cr/lf
 16582 0000181D E829FF                  	call	UseLine
 16583 00001820 E8B00D                  	call	CRLF2			; another cr/lf
 16584                                  	;call	UseLine
 16585                                  ;dhRet:
 16586                                  	;retn
 16587                                  
 16588                                  	; 19/02/2023
 16589 00001823 E923FF                  	jmp	UseLine
 16590                                  
 16591                                  ; ---------------------------------------------------------------------------
 16592                                  
 16593                                  ;***	DisplayName - display file name & extension
 16594                                  ;
 16595                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16596                                  ;
 16597                                  ;	EXIT	nothing
 16598                                  ;
 16599                                  ;	USED	AX,CX,DX,SI,DI
 16600                                  ;
 16601                                  ;	EFFECTS
 16602                                  ;
 16603                                  ;	  Filename & extension are displayed in spread format.
 16604                                  ;	  Cursor is left at end of extension.
 16605                                  
 16606                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16607                                  	; 08/06/2023
 16608                                  DisplayName:
 16609 00001826 1E                      	push	ds			; save TRANGROUP seg addr
 16610 00001827 8E1E[C78A]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 16611                                  	;assume	ds:nothing
 16612 0000182B 89DE                    	mov	si,bx			; DS:SI = ptr to entry
 16613                                  	;add	si,filename		; DS:SI = ptr to filename
 16614                                  	;add	si,1  ; EntryStruc.filename
 16615                                  	; 08/06/2023
 16616 0000182D 46                      	inc	si
 16617 0000182E BF[FF8A]                	mov	di,CHARBUF		; ES:DI = ptr to CharBuf
 16618                                  
 16619 00001831 B90800                  	mov	cx,8
 16620 00001834 FC                      	cld
 16621 00001835 F3A4                    	rep	movsb			; move filename to CharBuf
 16622 00001837 B020                    	mov	al,' '
 16623 00001839 AA                      	stosb				; add a blank
 16624                                  	;mov	cx,3
 16625                                  	; 08/06/2023
 16626 0000183A B103                    	mov	cl,3
 16627 0000183C F3A4                    	rep	movsb			; add extension
 16628 0000183E 30C0                    	xor	al,al
 16629 00001840 AA                      	stosb				; add a NULL
 16630                                  
 16631 00001841 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 16632                                  	;assume	ds:TRANGROUP
 16633                                  
 16634                                  	;;;test	Bits,mask lcase		;M010;check for lowercase option
 16635                                  	;;test	word [_Bits],10h
 16636                                  	;test	byte [_Bits],10h
 16637 00001842 F606[208C]10            	test	byte [_Bits],mask.lcase
 16638 00001847 7406                    	jz	short dn1		;M010;lowercase not required
 16639 00001849 BE[FF8A]                	mov	si,CHARBUF		;M010;DS:SI --> ASCIIZ string
 16640 0000184C E85501                  	call	LowercaseString		;M010;filename.ext string is in CharBuf
 16641                                  dn1:	
 16642 0000184F C706[B58C][FF8A]        	mov	word [string_ptr_2],CHARBUF
 16643 00001855 BA[E280]                	mov	dx,string_buf_ptr
 16644                                  	;call	std_printf		; print filename & extension
 16645                                  	;retn
 16646                                  	; 19/02/2023
 16647 00001858 E99435                  	jmp	std_printf
 16648                                  
 16649                                  ; ---------------------------------------------------------------------------
 16650                                  
 16651                                  ;***	DisplayNext - move display cursor to next entry position
 16652                                  ;
 16653                                  ;	ENTRY	LeftOnLine = # entries can still be printed on this line
 16654                                  ;		LeftOnPage = # lines can still be printed for this page
 16655                                  ;		FileCnt = # files in this dir displayed before this one
 16656                                  ;		Bits contains /w setting
 16657                                  ;
 16658                                  ;	EXIT	nothing
 16659                                  ;
 16660                                  ;	USED	AX,DX
 16661                                  ;
 16662                                  ;	EFFECTS
 16663                                  ;
 16664                                  ;	  LeftOnLine will be updated to reflect the entry about to be
 16665                                  ;	   displayed.
 16666                                  ;	  LeftOnPage may be updated.
 16667                                  
 16668                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16669                                  
 16670                                  DisplayNext:
 16671 0000185B 833E[F18A]00            	cmp	word [FileCnt],0
 16672 00001860 7415                    	je	short dn1st		; 1st file in directory
 16673 00001862 803E[EB8A]00            	cmp	byte [LeftOnLine],0
 16674 00001867 7E08                    	jng	short dnEol		; no more room on this line
 16675                                  
 16676                                  ;	We are in wide mode (LeftOnLine is always 0 otherwise) and
 16677                                  ;	we still have room for more on this line.
 16678                                  ;	Tab to next position.
 16679                                  
 16680 00001869 BA[F180]                	mov	dx,tab_ptr
 16681 0000186C E88035                  	call	std_printf
 16682 0000186F EB0C                    	jmp	short dnDone
 16683                                  dnEol:	
 16684                                  ;	Start this entry on a new line.
 16685                                  
 16686 00001871 E85F0D                  	call	CRLF2		; start on new line
 16687 00001874 E8D2FE                  	call	UseLine
 16688                                  dn1st:
 16689 00001877 A0[EC8A]                	mov	al,[PerLine]
 16690 0000187A A2[EB8A]                	mov	[LeftOnLine],al	; reset # entries left on line
 16691                                  
 16692                                  dnDone:
 16693 0000187D FE0E[EB8A]              	dec	byte [LeftOnLine]
 16694                                  				; reflect the entry about to be displayed
 16695 00001881 C3                      	retn
 16696                                  
 16697                                  ; ---------------------------------------------------------------------------
 16698                                  
 16699                                  ;***	DisplayTheRest - display file size/dir, date, time
 16700                                  ;
 16701                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16702                                  ;		Display cursor is at end of file extension
 16703                                  ;
 16704                                  ;	EXIT	nothing
 16705                                  ;
 16706                                  ;	USED	AX,CX,DX,SI,DI,BP
 16707                                  ;
 16708                                  ;	EFFECTS
 16709                                  ;
 16710                                  ;	  File size, date, & time are displayed.
 16711                                  
 16712                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16713                                  DisplayTheRest	:
 16714 00001882 06                      	push	es			; save TRANGROUP seg addr
 16715 00001883 8E06[C78A]              	mov	es,[TPA]		; ES = TPA seg addr
 16716 00001887 89DD                    	mov	bp,bx			; BP = offset of entry in TPA
 16717                                  	;;test	es:[bp].fileattr,ATTR_DIRECTORY
 16718                                  	;test	byte [es:bp+EntryStruc.fileattr],10h
 16719 00001889 26F6460C10              	test	byte [es:bp+12],ATTR_DIRECTORY
 16720 0000188E 7408                    	jz	short drNonDir		; not a directory file
 16721                                  
 16722                                  ;	For a directory file, display <DIR> instead of size.
 16723                                  
 16724 00001890 BA[F480]                	mov	dx,dmes_ptr
 16725 00001893 E85935                  	call	std_printf
 16726 00001896 EB16                    	jmp	short drCom		; skip to common fields
 16727                                  
 16728                                  drNonDir:
 16729                                  ;	For a non-directory file, display file size.
 16730                                  
 16731                                  	;;mov	dx,word ptr es:[bp].filesize
 16732                                  	;mov	dx,[es:bp+EntryStruc.filesize]
 16733 00001898 268B5611                	mov	dx,[es:bp+17]
 16734 0000189C 8916[B18C]              	mov	[File_Size_Low],dx
 16735                                  	;;mov	dx,word ptr es:[bp].filesize+2
 16736                                  	;mov	dx,[es:bp+EntryStruc.filesize+2]
 16737 000018A0 268B5613                	mov	dx,[es:bp+19]
 16738 000018A4 8916[B38C]              	mov	[File_Size_High],dx
 16739 000018A8 BA[D480]                	mov	dx,disp_file_size_ptr
 16740 000018AB E84135                  	call	std_printf
 16741                                  drCom:
 16742                                  ;	For all files, display date & time.
 16743                                  
 16744                                  	;;mov	ax,es:[bp].filedate	; AX = date word
 16745                                  	;mov	ax,[es:bp+EntryStruc.filedate]
 16746 000018AE 268B460F                	mov	ax,[es:bp+15]
 16747 000018B2 09C0                    	or	ax,ax			; test for null date (DOS 1.x)
 16748 000018B4 7448                    	jz	short drDone		; no date, skip date/time display
 16749 000018B6 89C3                    	mov	bx,ax			; BX = date word
 16750 000018B8 83E01F                  	and	ax,1Fh			; AX = day of month
 16751 000018BB 88C2                    	mov	dl,al			; DL = day of month
 16752 000018BD 89D8                    	mov	ax,bx			; AX = date word
 16753 000018BF B105                    	mov	cl,5
 16754 000018C1 D3E8                    	shr	ax,cl			; shift day out
 16755 000018C3 240F                    	and	al,0Fh			; AL = month
 16756 000018C5 88C6                    	mov	dh,al			; DH = month
 16757 000018C7 88F9                    	mov	cl,bh
 16758 000018C9 D0E9                    	shr	cl,1			; CL = year - 1980
 16759 000018CB 30ED                    	xor	ch,ch			; CX = year - 1980
 16760 000018CD 83C150                  	add	cx,80			; CX = 2-digit year
 16761 000018D0 80F964                  	cmp	cl,100
 16762 000018D3 7203                    	jb	short dr_1		; not year 2000 yet, skip ahead
 16763 000018D5 80E964                  	sub	cl,100			; adjust for 21st century
 16764                                  dr_1:	
 16765 000018D8 86F2                    	xchg	dh,dl			; DX = month/day
 16766 000018DA 890E[3281]              	mov	[DirDat_Yr],cx		; move year to msg block
 16767 000018DE 8916[3481]              	mov	[DirDat_Mo_Day],dx	; move month/day to msg block
 16768                                  	;;mov	cx,es:[bp].filetime	; CX = file time
 16769                                  	;mov	cx,[es:bp+EntryStruc.filetime]
 16770 000018E2 268B4E0D                	mov	cx,[es:bp+13]
 16771 000018E6 E310                    	jcxz	drPrint			; no time field - go print
 16772 000018E8 D1E9                    	shr	cx,1
 16773 000018EA D1E9                    	shr	cx,1
 16774 000018EC D1E9                    	shr	cx,1			; CH = hours
 16775 000018EE D0E9                    	shr	cl,1
 16776 000018F0 D0E9                    	shr	cl,1			; CL = minutes
 16777 000018F2 86E9                    	xchg	ch,cl			; CX = hr/min
 16778 000018F4 890E[3D81]              	mov	[DirTim_Hr_Min],cx	; move time to msg block
 16779                                  drPrint:
 16780 000018F8 BA[2D81]                	mov	dx,dirdattim_ptr
 16781 000018FB E8F134                  	call	std_printf		; print date & time
 16782                                  drDone:
 16783 000018FE 07                      	pop	es			; ES = TRANGROUP seg addr again	
 16784 000018FF 89EB                    	mov	bx,bp			; BX = offset of entry in TPA again
 16785                                  dtrRet:
 16786                                  	; 19/02/2023
 16787 00001901 C3                      	retn
 16788                                  
 16789                                  ; ---------------------------------------------------------------------------
 16790                                  
 16791                                  ;***	DisplayTrailer - display trailing lines for directory listing
 16792                                  ;
 16793                                  ;	ENTRY	LeftOnPage = # lines left on display page
 16794                                  ;		FileCnt = # files listed
 16795                                  ;		FileSiz = total size of files listed
 16796                                  ;
 16797                                  ;	EXIT	nothing
 16798                                  ;
 16799                                  ;	USED
 16800                                  ;
 16801                                  ;	EFFECTS
 16802                                  ;
 16803                                  ;	  Trailing info lines are displayed
 16804                                  
 16805                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16806                                  
 16807                                  DisplayTrailer:
 16808                                  	;;;test	Bits,mask bare
 16809                                  	;;test	word [_Bits],8
 16810                                  	;test	byte [_Bits],8
 16811 00001902 F606[208C]08            	test	byte [_Bits],mask.bare
 16812 00001907 75F8                    	jnz	short dtrRet		; /b - don't display trailer
 16813                                  
 16814 00001909 E8C70C                  	call	CRLF2			; start on new line
 16815 0000190C E83AFE                  	call	UseLine
 16816 0000190F A1[F18A]                	mov	ax,[FileCnt]		; AX = # files found
 16817                                  
 16818                                  ;	DisplayTotals uses this entry point.
 16819                                  ;
 16820                                  DisplayCntSiz:
 16821                                  ;	AX = # files
 16822                                  ;	FileSiz = dword total size of files
 16823                                  
 16824 00001912 A3[BA8C]                	mov	[Dir_Num],ax		; load # files
 16825 00001915 BA[5B7F]                	mov	dx,dirmes_ptr		; DX = ptr to message block
 16826 00001918 E8D434                  	call	std_printf		; "nnn File(s)"
 16827                                  
 16828 0000191B BA[4981]                	mov	dx,bytes_ptr
 16829 0000191E E8CE34                  	call	std_printf		; "nnn bytes",cr,lf
 16830                                  	; 19/02/2023
 16831                                  	;call	UseLine
 16832                                  ;dtrRet:
 16833                                  	;retn
 16834                                  
 16835                                  	; 19/02/2023
 16836 00001921 E925FE                  	jmp	UseLine
 16837                                  
 16838                                  ; ---------------------------------------------------------------------------
 16839                                  
 16840                                  ;***	DisplayWide - display filename in wide format
 16841                                  ;
 16842                                  ;	ENTRY	BX = offset of entry in TPA buffer
 16843                                  ;
 16844                                  ;	EXIT	nothing
 16845                                  ;
 16846                                  ;	USED	AX,CX,DX,SI,DI
 16847                                  ;
 16848                                  ;	EFFECTS
 16849                                  ;
 16850                                  ;	  Name.ext is displayed. Cursor left at end of field (padded
 16851                                  ;	  with blanks). Subdirectory files are displayed as [name.ext].
 16852                                  
 16853                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16854                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:198Ah
 16855                                  
 16856                                  DisplayWide:
 16857 00001924 1E                      	push	ds			; save TRANGROUP seg addr
 16858 00001925 8E1E[C78A]              	mov	ds,[TPA]		; DS:BX = ptr to entry
 16859                                  	;assume	ds:nothing
 16860                                  
 16861                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 16862                                  	;test	byte [bx+EntryStruc.fileattr],10h
 16863 00001929 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 16864 0000192D 7405                    	jz	short dw1		; not a subdirectory file
 16865 0000192F B05B                    	mov	al,'['
 16866 00001931 E8CB04                  	call	PRINT_CHAR		; prefix subdirectory
 16867                                  dw1:	
 16868 00001934 E83CFE                  	call	DisplayDotForm		; display name.ext
 16869                                  
 16870                                  ;	DX = # chars displayed in name.ext
 16871                                  
 16872                                  	;;test	ds:[bx].fileattr,ATTR_DIRECTORY
 16873                                  	;test	byte [bx+EntryStruc.fileattr],10h
 16874 00001937 F6470C10                	test	byte [bx+12],ATTR_DIRECTORY
 16875 0000193B 7405                    	jz	short dw2		; not a subdirectory file
 16876 0000193D B05D                    	mov	al,']'
 16877 0000193F E8BD04                  	call	PRINT_CHAR		; postfix subdirectory
 16878                                  dw2:
 16879                                  ;	Pad field with blanks.
 16880                                  
 16881                                  	;mov	cx,size filename + size fileext + 1
 16882 00001942 B90C00                  	mov	cx,12 ; 8+3+1
 16883                                  					; CX = field size
 16884 00001945 29D1                    	sub	cx,dx			; CX = # pad char's
 16885 00001947 E307                    	jcxz	dwDone
 16886 00001949 B020                    	mov	al,' '
 16887                                  dw3:	
 16888 0000194B E8B104                  	call	PRINT_CHAR
 16889 0000194E E2FB                    	loop	dw3
 16890                                  dwDone:	
 16891 00001950 1F                      	pop	ds			; DS = TRANGROUP seg addr again
 16892                                  	;assume	ds:TRANGROUP
 16893 00001951 C3                      	retn
 16894                                  
 16895                                  ; ---------------------------------------------------------------------------
 16896                                  
 16897                                  ;***	GetDriveLtr - get target drive letter
 16898                                  ;
 16899                                  ;	ENTRY	FCB contains drive #
 16900                                  ;
 16901                                  ;	EXIT	AX = "d:"
 16902                                  ;
 16903                                  ;	USED	nothing
 16904                                  
 16905                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16906                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19D8h
 16907                                  GetDriveLtr:
 16908 00001952 A05C00                  	mov	al,[FCB] ; 5Ch	; AL = target drive #
 16909 00001955 08C0                    	or	al,al
 16910 00001957 7505                    	jnz	short gdl1	; not current drive default, skip ahead
 16911 00001959 A0[D98A]                	mov	al,[CURDRV]	; AL = current drive #
 16912 0000195C FEC0                    	inc	al		; AL = 1-based drive #
 16913                                  gdl1:	
 16914 0000195E 0440                    	add	al,'A'-1 ; 40h	; AL = target drive letter
 16915 00001960 B43A                    	mov	ah,':'		; AX = "d:"
 16916 00001962 C3                      	retn
 16917                                  
 16918                                  ; ---------------------------------------------------------------------------
 16919                                  
 16920                                  ;***	SetupParamError - set up for Std_EPrintf parameter parse error message
 16921                                  ;
 16922                                  ;	Do for our /O and /A string parsers what Parse_With_Msg does
 16923                                  ;	for system parser calls. Set up a message substitution block,
 16924                                  ;	etc. for invalid value strings. I copied the procedure from
 16925                                  ;	Setup_Parse_Error_Msg.
 16926                                  ;
 16927                                  ;	ENTRY	BX = ptr to system parser result buffer (contains ptr to str)
 16928                                  ;		
 16929                                  ;
 16930                                  ;	EXIT	AX = system parser error return code for bad param format
 16931                                  ;		DX = ptr to message description block for Std_EPrintf
 16932                                  ;
 16933                                  ;	USED	SI
 16934                                  ;
 16935                                  ;	EFFECTS
 16936                                  ;
 16937                                  ;	  Msg_Disp_Class = parse error message class
 16938                                  ;	  Message block (see DX) is set up for parse error message
 16939                                  
 16940                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16941                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:19E9h
 16942                                  SetupParamError:
 16943 00001963 B80900                  	mov	ax,9			; parse error #
 16944 00001966 C606[197F]02            	mov	byte [msg_disp_class],parse_msg_class
 16945                                  	;mov	byte [msg_disp_class],2
 16946 0000196B A3[1B7F]                	mov	[extend_buf_ptr],ax
 16947                                  	;mov	si,[bx+ResultBuffer.ValuePtr]
 16948 0000196E 8B7704                  	mov	si,[bx+4]
 16949 00001971 8936[B58C]              	mov	[string_ptr_2],si
 16950 00001975 C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst
 16951                                  	;mov	byte [extend_buf_sub],1
 16952 0000197A BA[1B7F]                	mov	dx,extend_buf_ptr
 16953 0000197D C3                      	retn
 16954                                  
 16955                                  ; ---------------------------------------------------------------------------
 16956                                  
 16957                                  ;***	ZeroTotals - zero grand total file count, size
 16958                                  ;
 16959                                  ;	ENTRY	nothing
 16960                                  ;
 16961                                  ;	EXIT	nothing
 16962                                  ;
 16963                                  ;	USED	AX
 16964                                  ;
 16965                                  ;	EFFECTS
 16966                                  ;
 16967                                  ;	  FileCntTotal & FileSizTotal are zeroed.
 16968                                  ;
 16969                                  ;	NOTES
 16970                                  ;
 16971                                  ;	  FileCntTotal throuth csecUsedTotal must be together!
 16972                                  	
 16973                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 16974                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A13h	
 16975                                  ZeroTotals:
 16976 0000197E BF[F78A]                	mov	di,FileCntTotal
 16977                                  
 16978                                  	;mov	cx,size FileCntTotal+size FileSizTotal
 16979 00001981 B90800                  	mov	cx,8
 16980                                  
 16981 00001984 30C0                    	xor	al,al
 16982 00001986 F3AA                    	rep	stosb
 16983 00001988 C3                      	retn	
 16984                                  
 16985                                  ; ---------------------------------------------------------------------------
 16986                                  
 16987                                  ;***	CtrlCHandler - our own control-c handler
 16988                                  ;
 16989                                  ;	Make sure user's default directory gets restored. See notes
 16990                                  ;	at InstallCtrlCHandler.
 16991                                  ;
 16992                                  ;	ENTRY	control-c
 16993                                  ;
 16994                                  ;	EXIT	to OldCtrlCHandler
 16995                                  ;
 16996                                  ;	USED	DS,flags
 16997                                  ;
 16998                                  ;	EFFECTS
 16999                                  ;
 17000                                  ;	  Restore user's default directory.
 17001                                  ;
 17002                                  ;	NOTES
 17003                                  ;
 17004                                  ;	  This handler is only installed after calling PathCrunch,
 17005                                  ;	  which sets UserDir1, so the restoration will work.
 17006                                  ;
 17007                                  ;	  The original control-c vector will be restored, whether
 17008                                  ;	  or not this one is invoked, in the HeadFix routine.
 17009                                  
 17010                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17011                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A1Eh
 17012                                  
 17013                                  CtrlCHandler:	;proc	far
 17014                                  
 17015                                  ;SR;
 17016                                  ; Save all registers used: ds, dx, ax. I know ax is being used by the 
 17017                                  ;CtrlC handler, am not sure about ds & dx. Save them to be safe
 17018                                  ;
 17019 00001989 1E                      	push	ds
 17020 0000198A 0E                      	push	cs
 17021 0000198B 1F                      	pop	ds			; DS = TRANGROUP seg addr
 17022 0000198C 50                      	push	ax
 17023 0000198D 52                      	push	dx
 17024 0000198E E8FF0A                  	call	RestUDir		; restore user's default directory
 17025 00001991 5A                      	pop	dx
 17026 00001992 58                      	pop	ax
 17027 00001993 1F                      	pop	ds
 17028 00001994 2EFF2E[C895]            	jmp	far [cs:OldCtrlCHandler]
 17029                                  					; go to previous int 23 handler
 17030                                  
 17031                                  ; ---------------------------------------------------------------------------
 17032                                  
 17033                                  ;M010;start
 17034                                  ;***	LowerCase - convert ASCII character in AL to lowercase
 17035                                  ;
 17036                                  ;	ENTRY	AL = character to be displayed
 17037                                  ;
 17038                                  ;	EXIT	AL is lowercase
 17039                                  ;
 17040                                  ;	USED	nothing
 17041                                  
 17042                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17043                                  LowerCase:
 17044 00001999 3C41                    	cmp	al,'A'			; ensure AL is in range 'A'-'Z'
 17045 0000199B 7206                    	jb	short lcRet
 17046 0000199D 3C5A                    	cmp	al,'Z'
 17047 0000199F 7702                    	ja	short lcRet
 17048                                  
 17049 000019A1 0C20                    	or	al,20h			; convert to ASCII lowercase (UpperCase+32)-->LowerCase
 17050                                  lcRet:
 17051 000019A3 C3                      	retn
 17052                                  
 17053                                  ; ---------------------------------------------------------------------------
 17054                                  
 17055                                  ;***	LowercaseString - convert ASCIIZ string at DS:SI to lowercase
 17056                                  ;
 17057                                  ;	ENTRY	DS:SI points to start of ASCIIZ string
 17058                                  ;		ES = DS
 17059                                  ;
 17060                                  ;	EXIT	nothing
 17061                                  ;	
 17062                                  ;	USED	AL,SI
 17063                                  
 17064                                  	; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17065                                  LowercaseString:
 17066 000019A4 57                      	push	di			; save di
 17067 000019A5 89F7                    	mov	di,si			; ES:DI --> ASCIIZ string
 17068 000019A7 FC                      	cld
 17069                                  NextChar: 
 17070 000019A8 AC                      	lodsb				; get character from string into al
 17071 000019A9 08C0                    	or	al,al			; are we at end of string?
 17072 000019AB 7406                    	jz	short EndOfString
 17073                                  
 17074 000019AD E8E9FF                  	call	LowerCase		; convert character to lowercase
 17075 000019B0 AA                      	stosb				; store character back into buffer
 17076 000019B1 EBF5                    	jmp	short NextChar		; repeat until end of string
 17077                                  
 17078                                  EndOfString:
 17079 000019B3 5F                      	pop	di			; restore di
 17080 000019B4 C3                      	retn
 17081                                  
 17082                                  ;M010;end
 17083                                  
 17084                                  ;============================================================================
 17085                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 17086                                  ;============================================================================
 17087                                  ; 09/10/2018 - Retro DOS v3.0
 17088                                  
 17089                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1195h
 17090                                  
 17091                                  ; 19/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17092                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1A4Ah
 17093                                  
 17094                                  ; =============== S U B	R O U T	I N E =======================================
 17095                                  
 17096                                  PAUSE:
 17097 000019B5 BA[AD7F]                	mov	dx,PAUSEMES_PTR ; 19/02/2023
 17098 000019B8 E83434                  	call	std_printf
 17099 000019BB E896EB                  	call	GETKEYSTROKE
 17100                                  	;call	CRLF2
 17101                                  	;retn
 17102                                  	; 19/02/2023
 17103 000019BE E9120C                  	jmp	CRLF2
 17104                                  
 17105                                  ; ---------------------------------------------------------------------------
 17106                                  
 17107                                  ;****************************************************************
 17108                                  ;*
 17109                                  ;* ROUTINE:	DEL/ERASE - erase file(s)
 17110                                  ;*
 17111                                  ;* FUNCTION:	PARSE command line for file or path name and /P
 17112                                  ;*		and invoke PATHCRUNCH. If an error occurs, set
 17113                                  ;*		up an error message and transfer control to CERROR.
 17114                                  ;*		Otherwise, transfer control to NOTEST2 if /P not
 17115                                  ;*		entered or SLASHP_ERASE if /P entered.
 17116                                  ;*
 17117                                  ;* INPUT:	command line at offset 81H
 17118                                  ;*
 17119                                  ;* OUTPUT:	if no error:
 17120                                  ;*		FCB at 5ch set up with filename(s) entered
 17121                                  ;*		Current directory set to entered directory
 17122                                  ;*
 17123                                  ;****************************************************************
 17124                                  
 17125                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17126                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1A57h
 17127                                  	; 10/06/2023
 17128                                  ERASE:
 17129                                  	; MSDOS 6.0
 17130                                  
 17131                                  	;assume	ds:trangroup,es:trangroup
 17132                                  
 17133 000019C1 BE8100                  	mov	si,81h		;AC000; get command line
 17134 000019C4 C706[DC8A]0000          	mov	word [COMSW],0 	;AN000; clear switch indicator
 17135 000019CA BF[1985]                	mov	di,PARSE_ERASE
 17136                                  				;AN000; Get address of PARSE_ERASE
 17137 000019CD 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 17138                                  erase_scan:
 17139 000019CF 31D2                    	xor	dx,dx		;AN000;
 17140 000019D1 E8E707                  	call	Parse_With_Msg	;AC018; call parser
 17141                                  
 17142                                  	;cmp	ax,-1  ; 0FFFFh
 17143                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 17144                                  	;je	short good_line	;AN000; yes - done parsing
 17145                                  	;;cmp	ax,0
 17146                                  	;;cmp	ax,RESULT_NO_ERROR ; 0
 17147                                  	;and	ax,ax		;AC000; did we have an error?
 17148                                  	;jnz	short errj2	;AC000; yes exit
 17149                                  	; 10/06/2023
 17150 000019D4 40                      	inc	ax  ; cmp ax,-1
 17151 000019D5 743C                    	jz	short good_line ; 0FFFFh -> 0
 17152 000019D7 48                      	dec	ax  ; cmp ax,0	
 17153 000019D8 7566                    	jnz	short errj2  ; 1 -> 0
 17154                                  	; ax = 0
 17155                                  
 17156 000019DA 813E[F695][8C84]        	cmp	word [PARSE1_SYN],SLASH_P_SYN ; "/P"
 17157                                  				;AN000; was /P entered?
 17158 000019E0 741C                    	je	short set_erase_prompt
 17159                                  				;AN000; yes - go set prompt
 17160                                  ;
 17161                                  ; Must be filespec since no other matches occurred. move filename to srcbuf
 17162                                  ;
 17163 000019E2 56                      	push	si		;AC000; save position in line
 17164 000019E3 C536[F895]              	lds	si,[PARSE1_ADDR]
 17165                                  				;AC000; get address of filespec
 17166                                  	;cmp	byte [si+1],colon_char
 17167 000019E7 807C013A                	cmp	byte [si+1],':'	;AC000; drive specified?
 17168 000019EB 750B                    	jne	short erase_drive_ok
 17169                                  				;AC000; no - continue
 17170                                  	;cmp	byte [si+2],END_OF_LINE_OUT	
 17171 000019ED 807C0200                	cmp	byte [si+2],0	;AC000; was only drive entered?
 17172 000019F1 7505                    	jne	short erase_drive_ok
 17173                                  				;AC000; no - continue
 17174 000019F3 B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2 
 17175                                  				;AN022; get message number in control block
 17176 000019F6 EB3D                    	jmp	short extend_setup
 17177                                  				;AC000; exit
 17178                                  erase_drive_ok:
 17179 000019F8 E8AE12                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 17180 000019FB 5E                      	pop	si		;AC000; get position back
 17181 000019FC EBD1                    	jmp	short erase_scan
 17182                                  				;AN000; continue parsing
 17183                                  set_erase_prompt:
 17184 000019FE 833E[DC8A]00            	cmp	word [COMSW],0 	;AN018; was /P already entered?
 17185 00001A03 7408                    	jz	short ok_to_set_erase_prompt
 17186                                  				;AN018; no go set switch
 17187                                  	;mov	ax,1
 17188 00001A05 B80100                  	mov	ax,MoreArgs_Ptr 
 17189                                  				;AN018; set up too many arguments
 17190 00001A08 E8BF07                  	call	setup_parse_error_msg
 17191                                  				;AN018; set up an error message
 17192 00001A0B EB33                    	jmp	short errj2	;AN018; exit
 17193                                  
 17194                                  ok_to_set_erase_prompt: 	;AN018;
 17195 00001A0D FF06[DC8A]              	inc	word [COMSW]	;AN000; indicate /p specified
 17196 00001A11 EBBC                    	jmp	short erase_scan
 17197                                  				;AN000; continue parsing
 17198                                  good_line:			;G  We know line is good
 17199 00001A13 E8660C                  	call	PathCrunch
 17200 00001A16 730D                    	jnc	short checkdr
 17201 00001A18 A1[388E]                	mov	ax,[Msg_Numb]	;AN022; get message number
 17202                                  	;cmp	ax,0		;AN022; was message flag set?
 17203 00001A1B 09C0                    	or	ax,ax
 17204 00001A1D 7516                    	jnz	short extend_setup
 17205                                  				;AN022; yes - print out message
 17206                                  	;cmp	byte [DestIsDir],0
 17207 00001A1F 3806[CC8C]              	cmp	[DestIsDir],al 	; No CHDIRs worked
 17208 00001A23 750D                    	jnz	short badpath_err
 17209                                  				;AC022; see if they should have
 17210                                  checkdr:
 17211 00001A25 833E[DC8A]00            	cmp	word [COMSW],0 	;AN000; was /p specified
 17212 00001A2A 7403                    	jz	short notest2j	;AN000; no - go to notest2
 17213 00001A2C E9071B                  	jmp	slashp_erase	;AN000; yes - go to slashp_erase
 17214                                  notest2j:
 17215 00001A2F E99F1A                  	jmp	notest2
 17216                                  
 17217                                  badpath_err:			;AN022; "Path not found" message
 17218 00001A32 B80300                  	mov	ax,ERROR_PATH_NOT_FOUND ; 3
 17219                                  				;AN022; set up error number
 17220                                  extend_setup:			;AN022;
 17221                                  	;mov	byte [msg_disp_class],1
 17222 00001A35 C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class
 17223                                  				;AN022; set up extended error msg class
 17224 00001A3A BA[1B7F]                	mov	dx,extend_buf_ptr
 17225                                  				;AC022; get extended message pointer
 17226 00001A3D A3[1B7F]                	mov	[extend_buf_ptr],ax
 17227                                  				;AN022; get message number in control block
 17228                                  errj2:				;AC022; exit jump
 17229 00001A40 E9110F                  	jmp	cerror		;AN022;
 17230                                  
 17231                                  ; 20/02/2023
 17232                                  %if 0
 17233                                  	; MSDOS 3.3
 17234                                  	mov	dx,BADARGSPTR
 17235                                  	mov	si,80h
 17236                                  	lodsb
 17237                                  	or	al,al
 17238                                  	jz	short ERRJ2
 17239                                  	call	SCANOFF
 17240                                  	cmp	al,0Dh		; Return key
 17241                                  	jz	short ERRJ2	; If so no parameters specified
 17242                                  	push	dx
 17243                                  	push	si
 17244                                  	mov	dx,FNOTFOUNDPTR
 17245                                  ERASE_SCAN:
 17246                                  	lodsb
 17247                                  	call	DELIM
 17248                                  	jz	short ERASE_CHKDELIMCHR
 17249                                  	cmp	al,0Dh
 17250                                  	jz	short GOOD_LINE
 17251                                  	jmp	short ERASE_SCAN
 17252                                  ERASE_CHKDELIMCHR:
 17253                                  	cmp	al,20h
 17254                                  	jg	short ERRJ2
 17255                                  	lodsb
 17256                                  	call	DELIM
 17257                                  	jz	short ERASE_CHKDELIMCHR
 17258                                  	cmp	al,0Dh
 17259                                  	jz	short GOOD_LINE
 17260                                  	mov	dx,BADARGSPTR
 17261                                  	jmp	short ERRJ2
 17262                                  GOOD_LINE:
 17263                                  	pop	si
 17264                                  	pop	dx
 17265                                  	push	si
 17266                                  	call	PATHCRUNCH
 17267                                  	jnc	short CHECKDR
 17268                                  	cmp	byte [DESTISDIR],0 ; No CHDIRs worked	
 17269                                  	jz	short CHECKDR	   ; see if they should have
 17270                                  BADCDERR:
 17271                                  	pop	si
 17272                                  	mov	dx,BADCDPTR
 17273                                  ERRJ2:
 17274                                  	jmp	CERROR
 17275                                  CHECKDR:
 17276                                  	mov	dx,FNOTFOUNDPTR
 17277                                  	pop	cx
 17278                                  	mov	al,' '
 17279                                  	;cmp	[5Dh],al
 17280                                  	cmp	[FCB+1],al
 17281                                  	jz	short ERRJ2
 17282                                  	add	cx,3
 17283                                  	cmp	si,cx
 17284                                  	jnz	short NOTEST2J
 17285                                  	mov	al,':'
 17286                                  	cmp	[si-2],al
 17287                                  	jz	short ERRJ2
 17288                                  NOTEST2J:
 17289                                  	jmp	NOTEST2
 17290                                  %endif
 17291                                  
 17292                                  ; ---------------------------------------------------------------------------
 17293                                  
 17294                                  ; ****************************************************************
 17295                                  ; *
 17296                                  ; * ROUTINE:	 CRENAME - rename file(s)
 17297                                  ; *
 17298                                  ; * FUNCTION:	 PARSE command line for one full filespec and one
 17299                                  ; *		 filename. Invoke PATHCRUNCH on the full filespec.
 17300                                  ; *		 Make sure the second filespec only contains a
 17301                                  ; *		 filename. If both openands are valid, attempt
 17302                                  ; *		 to rename the file.
 17303                                  ; *
 17304                                  ; * INPUT:	 command line at offset 81H
 17305                                  ; *
 17306                                  ; * OUTPUT:	 none
 17307                                  ; *
 17308                                  ; ****************************************************************
 17309                                  
 17310                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17311                                  CRENAME:
 17312                                  	; MSDOS 6.0
 17313                                  	;assume	ds:trangroup,es:trangroup
 17314                                  
 17315 00001A43 BE8100                  	mov	si,81h		;AC000; Point to command line
 17316 00001A46 BF[9085]                	mov	di,PARSE_RENAME
 17317                                  				;AN000; Get address of PARSE_RENAME
 17318 00001A49 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 17319 00001A4B 31D2                    	xor	dx,dx		;AN000;
 17320 00001A4D E86B07                  	call	Parse_With_Msg	;AC018; call parser
 17321                                  	;cmp	ax,RESULT_NO_ERROR ; 0
 17322 00001A50 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 17323                                  ;	jz	short crename_no_parse_error
 17324                                  				;AC000; no - continue
 17325 00001A52 752C                    	jnz	short crename_parse_error
 17326                                  				;AC000; Yes, fail. (need long jump)
 17327                                  ;
 17328                                  ;  Get first file name returned from parse into our buffer
 17329                                  ;
 17330                                  crename_no_parse_error:
 17331 00001A54 56                      	push	si		;AN000; save position in line
 17332 00001A55 C536[F895]              	lds	si,[PARSE1_ADDR]
 17333                                  				;AN000; get address of filespec
 17334 00001A59 E84D12                  	call    Move_To_SrcBuf	;AN000; move to srcbuf
 17335 00001A5C 5E                      	pop	si		;AN000; restore position in line
 17336                                  
 17337 00001A5D 31D2                    	xor	dx,dx		;AN000; clear dx
 17338 00001A5F E85907                  	call	Parse_With_Msg	;AC018; call parser
 17339                                  	;cmp	ax,RESULT_NO_ERROR
 17340 00001A62 21C0                    	and	ax,ax ; 0 ?	;AN000; did we have an error?
 17341 00001A64 751A                    	jnz	short crename_parse_error
 17342                                  				;AN000; Yes, fail.
 17343                                  ;
 17344                                  ;  Check the second file name for drive letter colon
 17345                                  ;
 17346 00001A66 56                      	push	si		;AN000; save position in line
 17347 00001A67 C536[F895]              	lds	si,[PARSE1_ADDR]
 17348                                  				;AC000; get address of path
 17349                                  	;mov	al,':'		;AC000;
 17350                                  	;cmp	[si+1],al	;AC000; Does the 2nd parm have a drive spec?
 17351 00001A6B 807C013A                	cmp	byte [si+1],':'
 17352 00001A6F 7511                    	jnz	short ren_no_drive
 17353                                  				;AN000; Yes, error
 17354                                  	;mov	byte [msg_disp_class],2
 17355 00001A71 C606[197F]02            	mov	byte [msg_disp_class],parse_msg_class
 17356                                  				;AN000; set up parse error msg class
 17357 00001A76 BA[1B7F]                	mov	dx,extend_buf_ptr
 17358                                  				;AC000; get extended message pointer
 17359                                  	;mov	word [extend_buf_ptr],0Ah
 17360 00001A79 C706[1B7F]0A00          	mov	word [extend_buf_ptr],BadParm_Ptr
 17361                                  				;AN000; get "Invalid parameter" message number
 17362 00001A7F 5E                      	pop	si		;AN000;
 17363                                  crename_parse_error:		;AC022;
 17364 00001A80 EB64                    	jmp	short errj	;AC000;
 17365                                  
 17366                                  ;  Get second file name returned from parse into the fCB. Save
 17367                                  ;  character after file name so we can later check to make sure it
 17368                                  ;  isn't a path character.
 17369                                  
 17370                                  ren_no_drive:
 17371 00001A82 BF6C00                  	mov	di,FCB+10h ; 6Ch
 17372                                  				;AC000; set up to parse second file name
 17373                                  	;mov	ax,(Parse_File_Descriptor SHL 8) OR 01H ;AC000;
 17374 00001A85 B80129                  	mov	ax,2901h
 17375 00001A88 CD21                    	int	21h		;AC000; do the function
 17376 00001A8A AC                      	lodsb			;AC000; Load char after filename
 17377 00001A8B A2[C48C]                	mov	[One_Char_Val],al
 17378                                  				;AN000; save char after filename
 17379 00001A8E 5E                      	pop	si		;AN000; get line position back
 17380                                  ;
 17381                                  ; We have source and target. See if any args beyond.
 17382                                  ;
 17383 00001A8F BF[9085]                	mov	di,PARSE_RENAME
 17384                                  				;AC000; get address of parse_rename
 17385 00001A92 E81007                  	call	parse_check_eol ;AC000; are we at end of line?
 17386 00001A95 75E9                    	jnz	short crename_parse_error
 17387                                  				;AN000; no, fail.
 17388                                  
 17389 00001A97 E8E20B                  	call	PathCrunch
 17390 00001A9A BA[2C7F]                	mov	dx,BADCPMES_PTR
 17391 00001A9D 74A1                    	jz	short errj2	; If 1st parm a dir, print error msg
 17392 00001A9F 730F                    	jnc	short notest3
 17393 00001AA1 A1[388E]                	mov	ax,[Msg_Numb]	;AN022; get message number
 17394                                  	;cmp	ax,0		;AN022; was message flag set?
 17395 00001AA4 21C0                    	and	ax,ax ; 0 ?
 17396 00001AA6 758D                    	jnz	short extend_setup
 17397                                  				;AN022; yes - print out message
 17398                                  	;cmp	byte [DestIsDir],0
 17399 00001AA8 3806[CC8C]              	cmp	[DestIsDir],al	; No CHDIRs worked
 17400 00001AAC 7402                    	jz	short notest3 	; see if they should have
 17401 00001AAE EB82                    	Jmp	badpath_err	;AC022; set up error
 17402                                  notest3:
 17403 00001AB0 A0[C48C]                	mov	al,[One_Char_Val]
 17404                                  				;AN000; move char into AX
 17405 00001AB3 BA[4A7F]                	mov	dx,INORNOT_PTR 
 17406                                  				; Load invalid fname error ptr
 17407 00001AB6 E8B50B                  	call	pathchrcmp	; Is the char in al a path sep?
 17408 00001AB9 742B                    	jz	short errj	; Yes, error - 2nd arg must be
 17409                                  				;  filename only.
 17410                                  	;mov	ah,FCB_Rename
 17411 00001ABB B417                    	mov	ah,17h
 17412 00001ABD BA5C00                  	mov	dx,FCB ; 5Ch
 17413 00001AC0 CD21                    	int	21h
 17414 00001AC2 3CFF                    	cmp	al,0FFh		; Did an error occur??
 17415 00001AC4 7506                    	jne	short renameok
 17416                                  
 17417 00001AC6 E82902                  	call	get_ext_error_number
 17418                                  				;AN022; get extended error
 17419 00001AC9 50                      	push	ax		;AC022; Save results
 17420 00001ACA B0FF                    	mov	al,0FFh		; Restore original error state
 17421                                  renameok:
 17422 00001ACC 50                      	push	ax
 17423 00001ACD E8C009                  	call	RestUDir
 17424 00001AD0 58                      	pop	ax
 17425 00001AD1 FEC0                    	inc	al
 17426                                  	;;retnz
 17427                                  	;jz	short rn1
 17428                                  	;retn	
 17429 00001AD3 7514                    	jnz	short ret56
 17430                                  rn1:
 17431 00001AD5 58                      	pop	ax		;AC022; get the error number back
 17432 00001AD6 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2 
 17433                                  				;AN022; error file not found?
 17434 00001AD9 7408                    	jz	short use_renerr
 17435                                  				;AN022; yes - use generic error message
 17436 00001ADB 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5 
 17437                                  				;AN022; error file not found?
 17438 00001ADE 7403                    	jz	short use_renerr
 17439                                  				;AN022; yes - use generic error message
 17440 00001AE0 E952FF                  	jmp	extend_setup	;AN022; need long jump - use extended error
 17441                                  
 17442                                  use_renerr:
 17443 00001AE3 BA[297F]                	mov	dx,RENERR_PTR	;AC022;
 17444                                  errj:
 17445 00001AE6 E96B0E                  	jmp	cerror
 17446                                  ret56:
 17447                                  ;typefil_ret:	; 20/02/2023 ; 17/04/2023	
 17448 00001AE9 C3                      	retn
 17449                                  
 17450                                  ; 20/02/2023
 17451                                  %if 0
 17452                                  	; MSDOS 3.3
 17453                                  	mov	dx,BADARGSPTR
 17454                                  	call	SCANOFF
 17455                                  	cmp	al,0Dh
 17456                                  	jz	short ERRJ2
 17457                                  	call	PATHCRUNCH
 17458                                  	mov	dx,BADCPMESPTR
 17459                                  	jz	short ERRJ2
 17460                                  	jnb	short CRENAME_NO_PARSE_ERROR
 17461                                  	cmp	byte [DESTISDIR],0 ; No CHDIRs worked	
 17462                                  	jz	short CRENAME_NO_PARSE_ERROR ; see if they should have
 17463                                  	jmp	short BADCDERR
 17464                                  
 17465                                  ;  Get first file name returned from parse into our buffer
 17466                                  
 17467                                  CRENAME_NO_PARSE_ERROR:
 17468                                  	mov	si,[PATHPOS]
 17469                                  	call	SCANOFF
 17470                                  	cmp	al,0Dh
 17471                                  	mov	dx,BADARGSPTR
 17472                                  	jz	short ERRJ
 17473                                  	mov	al,':'
 17474                                  	mov	dx,BADPARMPTR
 17475                                  	cmp	[si+1],al
 17476                                  	jz	short ERRJ
 17477                                  
 17478                                  ;  Get second file name returned from parse into the FCB. Save
 17479                                  ;  character after file name so we can later check to make sure it
 17480                                  ;  isn't a path character.
 17481                                  
 17482                                  REN_NO_DRIVE:
 17483                                  	;mov	di,6Ch
 17484                                  	mov	di,FCB+10h
 17485                                  	mov	ax,(Parse_File_Descriptor<<8)|01h ; 2901h
 17486                                  	int	21h	; DOS -	PARSE FILENAME
 17487                                  			; DS:SI	-> string to parse
 17488                                  			; ES:DI	-> buffer to fill with unopened	FCB
 17489                                  			; AL = bit mask	to control parsing
 17490                                  	mov	al,' '
 17491                                  	;cmp	[6Dh],al
 17492                                  	cmp	[FCB+10h+1],al	; Check if parameter exists
 17493                                  	jz	short ERRJ	; Error if missing parameter
 17494                                  	lodsb
 17495                                  	mov	dx,INORNOTPTR
 17496                                  	call	PATHCHRCMP
 17497                                  	jz	short ERRJ
 17498                                  	mov	ah,FCB_RENAME ; 17h
 17499                                  	mov	dx,FCB ; 5Ch
 17500                                  	int	21h	; DOS -	RENAME FILE via	FCB
 17501                                  			; DS:DX	-> FCB
 17502                                  			; FCB contains new name	starting at byte 17h.
 17503                                  	cmp	al,0FFh		; Did an error occur??	
 17504                                  	jnz	short RENAMEOK
 17505                                  	stc
 17506                                  	mov	dx,RENERRPTR
 17507                                  	call	GET_EXT_ERR_NUMBER ; get extended error
 17508                                  	push	dx
 17509                                  	mov	al,0FFh		; Restore original error state
 17510                                  RENAMEOK:
 17511                                  	push	ax
 17512                                  	call	RESTUDIR
 17513                                  	pop	ax
 17514                                  	inc	al
 17515                                  	jz	short RENAME_ERR
 17516                                  RENAME_RETN:
 17517                                  TYPELP_RET:
 17518                                  	retn
 17519                                  RENAME_ERR:
 17520                                  	pop	dx
 17521                                  ERRJ:				; Retro DOS v3.0
 17522                                  	call	STD_EPRINTF
 17523                                  	jmp	TCOMMAND
 17524                                  
 17525                                  ; ---------------------------------------------------------------------------
 17526                                  
 17527                                  ;ERRJ:
 17528                                  ;	jmp	CERROR
 17529                                  
 17530                                  ; ---------------------------------------------------------------------------
 17531                                  
 17532                                  ;TYPELP_RET:
 17533                                  ;	retn
 17534                                  
 17535                                  %endif
 17536                                  
 17537                                  ; ---------------------------------------------------------------------------
 17538                                  
 17539                                  ;****************************************************************
 17540                                  ;*
 17541                                  ;* ROUTINE:	TYPEFIL - Display the contents of a file to the
 17542                                  ;*		standard output device
 17543                                  ;*
 17544                                  ;* SYNTAX:	TYPE filespec
 17545                                  ;*
 17546                                  ;* FUNCTION:	If a valid filespec is found, read the file until
 17547                                  ;*		1Ah and display the contents to STDOUT.
 17548                                  ;*
 17549                                  ;* INPUT:	command line at offset 81H
 17550                                  ;*
 17551                                  ;* OUTPUT:	none
 17552                                  ;*
 17553                                  ;****************************************************************
 17554                                  
 17555                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17556                                  TYPEFIL:
 17557                                  	; MSDOS 6.0	
 17558                                  	;assume	ds:trangroup,es:trangroup
 17559                                  
 17560 00001AEA BE8100                  	mov	si,81h
 17561 00001AED BF[0785]                	mov	di,PARSE_MRDIR
 17562                                  				;AN000; Get address of PARSE_MRDIR
 17563 00001AF0 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 17564 00001AF2 31D2                    	xor	dx,dx		;AN000;
 17565 00001AF4 E8C406                  	call	Parse_With_Msg	;AC018; call parser
 17566                                  	;cmp	ax,RESULT_NO_ERROR
 17567 00001AF7 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 17568 00001AF9 751E                    	jnz	short typefil_parse_error
 17569                                  				;AN000; yes - issue error message
 17570                                  
 17571 00001AFB 56                      	push	si		;AC000; save position in line
 17572 00001AFC C536[F895]              	lds	si,[PARSE1_ADDR]
 17573                                  				;AC000; get address of filespec
 17574 00001B00 E8A611                  	call	Move_To_SrcBuf	;AC000; move to srcbuf
 17575 00001B03 5E                      	pop	si		;AC000; get position back
 17576 00001B04 BF[0785]                	mov	di,PARSE_MRDIR
 17577                                  				;AC000; get address of parse_mrdir
 17578 00001B07 E89B06                  	call	parse_check_eol ;AC000; are we at end of line?
 17579                                  	;jz	short gottarg 	;AC000; yes - continue
 17580                                  	; 20/02/2023
 17581                                  ;typefil_parse_error:		;AN000; no - set up error message and exit
 17582                                  	;jmp	cerror
 17583 00001B0A 750D                    	jnz	short typefil_parse_error
 17584                                  gottarg:
 17585 00001B0C E8DF0F                  	call	SETPATH
 17586 00001B0F F606[D08C]02            	test	byte [DestInfo],00000010b ; 2
 17587                                  				; Does the filespec contain wildcards
 17588 00001B14 7406                    	jz	short nowilds 	; No, continue processing
 17589 00001B16 BA[4A7F]                	mov	dx,INORNOT_PTR	; Yes, report error
 17590                                  	; 20/02/2023
 17591                                  typefil_parse_error:
 17592 00001B19 E9380E                  	jmp	cerror
 17593                                  nowilds:
 17594                                  	;mov	ax,ExtOpen SHL 8 ;AC000; open the file
 17595 00001B1C B8006C                  	mov	ax,6C00h
 17596                                  	;mov	bx,read_open_mode ; 0
 17597                                  				;AN000; get open mode for TYPE
 17598 00001B1F 31C9                    	xor	cx,cx		;AN000; no special files
 17599 00001B21 89CB                    	mov	bx,cx ; 20/02/2023
 17600 00001B23 BA0101                  	mov	dx,101h
 17601                                  	;mov	dx,read_open_flag ; 101h
 17602                                  				;AN000; set up open flags
 17603 00001B26 BE[348D]                	mov	si,SrcBuf	;AN030; get file name
 17604 00001B29 CD21                    	int	21h
 17605 00001B2B 7313                    	jnc	short typecont	; If open worked, continue. Otherwise load
 17606                                  
 17607                                  typerr: 			;AN022;
 17608 00001B2D 0E                      	push	cs		;AN022; make sure we have local segment
 17609 00001B2E 1F                      	pop	ds		;AN022;
 17610 00001B2F E8B001                  	call	Set_Ext_Error_Msg ;AN022;
 17611 00001B32 C706[B58C][348D]        	mov	word [string_ptr_2],SrcBuf 
 17612                                  				;AC022; get address of failed string
 17613                                  	;mov	byte [extend_buf_sub],1
 17614 00001B38 C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst
 17615                                  				;AC022; put number of subst in control block
 17616 00001B3D E9140E                  	jmp	cerror		;AC022; exit
 17617                                  
 17618                                  typecont:
 17619 00001B40 89C3                    	mov	bx,ax		;AC000; get Handle
 17620                                  ;M043
 17621                                  ; We should do the LSEEK for filesize only if this handle belongs to a file
 17622                                  ;and not if it belongs to a device. If device, set TypeFilSiz+2 to -1 to
 17623                                  ;indicate it is a device.
 17624                                  ;
 17625                                  	;mov	ax,(IOCTL shl 8) or 0
 17626 00001B42 B80044                  	mov	ax,4400h
 17627 00001B45 CD21                    	int	21h
 17628                                  
 17629 00001B47 F6C280                  	test	dl,80h		;is it a device?
 17630 00001B4A 7408                    	jz	short not_device
 17631                                  				;no, a file
 17632                                  
 17633 00001B4C C706[F295]FFFF          	mov	word [TypeFilSiz+2],-1
 17634                                  				;indicate it is a device
 17635 00001B52 EB17                    	jmp	short dotype
 17636                                  not_device:
 17637                                  ;SR;
 17638                                  ; Find the filesize by seeking to the end and then reset file pointer to
 17639                                  ;start of file
 17640                                  
 17641                                  	;mov	ax,(LSEEK shl 8) or 2
 17642 00001B54 B80242                  	mov	ax,4202h
 17643 00001B57 31D2                    	xor	dx,dx
 17644 00001B59 89D1                    	mov	cx,dx		;seek  to end of file
 17645 00001B5B CD21                    	int	21h
 17646                                  
 17647 00001B5D A3[F095]                	mov	[TypeFilSiz],ax
 17648 00001B60 8916[F295]              	mov	[TypeFilSiz+2],dx ;store filesize
 17649                                  	;mov	ax,(LSEEK shl 8) or 0
 17650 00001B64 B80042                  	mov	ax,4200h
 17651 00001B67 31D2                    	xor	dx,dx
 17652 00001B69 CD21                    	int	21h	        ;reset file pointer to start
 17653                                  dotype:				;M043
 17654 00001B6B C606[A294]00            	mov	byte [zflag],0 	; Reset ^Z flag
 17655 00001B70 8E1E[C78A]              	mov	ds,[TPA]
 17656 00001B74 31D2                    	xor	dx,dx
 17657                                  	;ASSUME	DS:NOTHING
 17658                                  typelp:
 17659 00001B76 2E803E[A294]00          	cmp	byte [cs:zflag],0
 17660                                  				;AC050; Is the ^Z flag set?
 17661                                  	;retnz			; Yes, return
 17662                                  	; 17/04/2023
 17663 00001B7C 7401                    	jz	short tf1
 17664 00001B7E C3                      	retn
 17665                                  tf1:
 17666 00001B7F 2E8B0E[E68A]            	mov	cx,[cs:BYTCNT]	;AC056; No, continue
 17667                                  
 17668                                  ;Update the filesize left to read
 17669                                  
 17670 00001B84 2E833E[F295]FF          	cmp	word [cs:TypeFilSiz+2],-1
 17671                                  				;is it a device? M043
 17672 00001B8A 7431                    	je	short typ_read	;yes, just read from it; M043
 17673                                  
 17674 00001B8C 2E833E[F295]00          	cmp	word [cs:TypeFilSiz+2],0
 17675                                  				;more than 64K left?
 17676 00001B92 740D                    	jz	short lt64k	;no, do word subtraction
 17677 00001B94 2E290E[F095]            	sub	[cs:TypeFilSiz],cx
 17678 00001B99 2E831E[F295]00          	sbb	word [cs:TypeFilSiz+2],0
 17679                                  				;update filesize
 17680 00001B9F EB1C                          	jmp	short typ_read	;do the read
 17681                                  lt64k:
 17682 00001BA1 2E3B0E[F095]            	cmp	cx,[cs:TypeFilSiz]
 17683                                  				;readsize <= buffer?
 17684 00001BA6 7610                    	jbe	short gtbuf	; yes, just update readsize
 17685                                  
 17686                                  ;Buffer size is larger than bytes to read
 17687                                  
 17688 00001BA8 2E8B0E[F095]            	mov	cx,[cs:TypeFilSiz]
 17689 00001BAD E361                    	jcxz	typelp_ret
 17690 00001BAF 2EC706[F095]0000        	mov	word [cs:TypeFilSiz],0
 17691 00001BB6 EB05                    	jmp	short typ_read
 17692                                  gtbuf:
 17693 00001BB8 2E290E[F095]            	sub	[cs:TypeFilSiz],cx
 17694                                  				;update filesize remaining
 17695                                  typ_read:
 17696                                  	;mov	ah,read
 17697 00001BBD B43F                    	mov	ah,3Fh
 17698 00001BBF CD21                    	int	21h		
 17699 00001BC1 7303                    	jnc	short tf2	;M043
 17700 00001BC3 E967FF                  	jmp	typerr		;M043
 17701                                  tf2:				;M043
 17702                                  ;M043;	jc	typerr		;AN022; Exit if error
 17703                                  
 17704 00001BC6 89C1                    	mov	cx,ax
 17705 00001BC8 E346                    	jcxz	typelp_ret	;AC000; exit if nothing read
 17706 00001BCA 1E                      	push	ds
 17707 00001BCB 07                      	pop	es		; Check to see if a ^Z was read.
 17708                                  	;assume es:nothing
 17709 00001BCC 31FF                    	xor	di,di
 17710 00001BCE 50                      	push	ax
 17711 00001BCF B01A                    	mov	al,1Ah
 17712 00001BD1 F2AE                    	repnz	scasb
 17713 00001BD3 58                      	pop	ax
 17714 00001BD4 91                      	xchg	ax,cx
 17715                                  	;cmp	ax,0
 17716 00001BD5 21C0                    	and	ax,ax
 17717 00001BD7 7506                    	jnz	short foundz	; Yes, handle it
 17718 00001BD9 807DFF1A                	cmp	byte [di-1],1Ah	; No, double check
 17719 00001BDD 750A                    	jnz	short typecont2	; No ^Z, continue
 17720                                  foundz:
 17721 00001BDF 29C1                    	sub	cx,ax		; Otherwise change cx so that only those
 17722 00001BE1 49                      	dec	cx		;  bytes up to but NOT including the ^Z
 17723 00001BE2 0E                      	push	cs		;  will be typed.
 17724 00001BE3 07                      	pop	es
 17725                                  	;assume es:trangroup
 17726 00001BE4 26F616[A294]            	not	byte [es:zflag]	; Turn on ^Z flag so that the routine
 17727                                  typecont2:			;  will quit after this write.
 17728 00001BE9 53                      	push	bx
 17729 00001BEA BB0100                  	mov	bx,1
 17730                                  	;mov	ah,Write
 17731 00001BED B440                    	mov	ah,40h
 17732 00001BEF CD21                    	int	21h
 17733 00001BF1 5B                      	pop	bx
 17734 00001BF2 720C                    	jc	short Error_outputj
 17735 00001BF4 39C8                    	cmp	ax,cx
 17736 00001BF6 7503                    	jnz	short tf3	;M043
 17737 00001BF8 E97BFF                  	jmp	typelp		;M043
 17738                                  tf3:				;M043
 17739                                  ;M043;	jz	short typelp
 17740 00001BFB 49                      	dec	cx
 17741 00001BFC 39C8                    	cmp	ax,cx
 17742                                  	;;retz			; One less byte OK (^Z)
 17743                                  	;jnz	short Error_outputj
 17744                                  ;tf4:
 17745                                  	;retn
 17746 00001BFE 7410                    	jz	short typelp_ret ; 20/02/2023
 17747                                  
 17748                                  Error_outputj:
 17749 00001C00 BB0100                  	mov	bx,1
 17750                                  	;mov	ax,IOCTL SHL 8
 17751 00001C03 B80044                  	mov	ax,4400h
 17752 00001C06 CD21                    	int	21h
 17753 00001C08 F6C280                  	test	dl,80h
 17754                                  	;test	dl,devid_ISDEV
 17755                                  	;;retnz			; If device, no error message
 17756                                  	;jnz	short tf4
 17757 00001C0B 7503                    	jnz	short typelp_ret
 17758 00001C0D E9440A                  	jmp	error_output
 17759                                  typelp_ret:
 17760 00001C10 C3                      	retn
 17761                                  
 17762                                  ; 20/02/2023
 17763                                  %if 0
 17764                                  	; MSDOS 3.3
 17765                                  	mov	si,81h
 17766                                  	call	SCANOFF		; Skip to first non-delim
 17767                                  	cmp	al,0Dh
 17768                                  	jnz	short GOTTARG
 17769                                  	mov	dx,BADARGSPTR
 17770                                  
 17771                                  	;jmp	CERROR
 17772                                  	jmp	short ERRJ	; No args
 17773                                  GOTTARG:
 17774                                  	call	SETPATH
 17775                                  	test	byte [DESTINFO],2
 17776                                  	jz	short NOWILDS
 17777                                  	mov	dx,INORNOTPTR
 17778                                  
 17779                                  	;jmp	CERROR
 17780                                  	jmp	short ERRJ
 17781                                  NOWILDS:
 17782                                  	mov	ax,OPEN*256 ; 3D00h
 17783                                  	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 17784                                  			; DS:DX	-> ASCIZ filename
 17785                                  			; AL = access mode
 17786                                  			; 0 - read
 17787                                  	jnc	short TYPECONT
 17788                                  	mov	dx,FNOTFOUNDPTR
 17789                                  	cmp	ax,2
 17790                                  	jz	short ERRJ
 17791                                  	mov	dx,BADCPMESPTR
 17792                                  	stc
 17793                                  	call	GET_EXT_ERR_NUMBER
 17794                                  	
 17795                                  	;jmp	CERROR
 17796                                  	jmp	short ERRJ
 17797                                  TYPECONT:
 17798                                  	mov	byte [ZFLAG],0	; Reset ^Z flag
 17799                                  	mov	bx,ax		; Handle
 17800                                  	mov	ds,[TPA]
 17801                                  	xor	dx,dx
 17802                                  TYPELP:
 17803                                  	cmp	byte [cs:ZFLAG],0 ; Is the ^Z flag set?		
 17804                                  	jnz	short RENAME_RETN ; Yes, return	
 17805                                  	mov	cx,[cs:BYTCNT]	; No, continue
 17806                                  	mov	ah,READ ; 3Fh
 17807                                  	int	21h	; DOS -	2+ - READ FROM FILE WITH HANDLE
 17808                                  			; BX = file handle,CX = number	of bytes to read
 17809                                  			; DS:DX	-> buffer
 17810                                  	mov	cx,ax
 17811                                  	jcxz	TYPELP_RET	; exit if nothing read
 17812                                  				; Check to see if a ^Z was read.
 17813                                  	push	ds
 17814                                  	pop	es		
 17815                                  	xor	di,di
 17816                                  	push	ax
 17817                                  	mov	al,1Ah
 17818                                  	repne	scasb
 17819                                  	pop	ax
 17820                                  	xchg	ax,cx
 17821                                  	cmp	ax,0
 17822                                  	jnz	short FOUNDZ	; Yes, handle it
 17823                                  	cmp	byte [di-1],1Ah	; No, double check
 17824                                  	jnz	short TYPECONT2	; No ^Z, continue
 17825                                  FOUNDZ:
 17826                                  	sub	cx,ax		; Otherwise change cx so that only those
 17827                                  	dec	cx		;  bytes up to but NOT including the ^Z
 17828                                  	push	cs		;  will be typed.
 17829                                  	pop	es
 17830                                  	not	byte [cs:ZFLAG]	; Turn on ^Z flag so that the routine
 17831                                  				;  will quit after this write.
 17832                                  TYPECONT2:
 17833                                  	push	bx
 17834                                  	mov	bx,1
 17835                                  	mov	ah,WRITE ; 40h
 17836                                  	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 17837                                  			; BX = file handle, CX = number of bytes to write,
 17838                                  			; DS:DX -> buffer
 17839                                  	pop	bx
 17840                                  	jc	short ERROR_OUTPUTJ
 17841                                  	cmp	ax,cx
 17842                                  	jz	short TYPELP
 17843                                  	dec	cx
 17844                                  	cmp	ax,cx		; One less byte OK (^Z)
 17845                                  	jnz	short ERROR_OUTPUTJ
 17846                                  TYPEFIL_RETN:
 17847                                  	retn
 17848                                  ERROR_OUTPUTJ:
 17849                                  	mov	bx,1
 17850                                  	mov	ax,IOCTL*256 ; 4400h
 17851                                  	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 17852                                  			; BX = file or device handle
 17853                                  	;test	dl,devid_ISDEV
 17854                                  	test	dl,80h
 17855                                  	jnz	short TYPEFIL_RETN ; If device, no error message
 17856                                  	jmp	ERROR_OUTPUT
 17857                                  %endif
 17858                                  
 17859                                  ; ---------------------------------------------------------------------------
 17860                                  
 17861                                  ; VOLUME command displays the volume ID on the specified drive
 17862                                  
 17863                                  	; 20/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17864                                  	; 10/06/2023
 17865                                  VOLUME:
 17866                                  	; MSDOS 6.0
 17867 00001C11 BE8100                  	mov	si,81h
 17868 00001C14 BF[F584]                	mov	di,PARSE_VOL
 17869                                  				;AN000; Get address of PARSE_VOL
 17870 00001C17 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 17871 00001C19 31D2                    	xor	dx,dx		;AN000;
 17872 00001C1B E89D05                  	call	Parse_With_Msg	;AC018; call parser
 17873                                  
 17874                                  	;cmp	ax,-1 ; 0FFFFh
 17875                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 17876                                  	;je	short OkVolArg	;AC000; Yes, display default volume ID
 17877                                  	;;cmp	ax,RESULT_NO_ERROR
 17878                                  	;;cmp	ax,0		;AC000; did we have an error?
 17879                                  	;or	ax,ax ; 0?
 17880                                  	;jnz	short badvolarg	;AC000; Yes, fail.
 17881                                  	; 10/06/2023
 17882 00001C1E 40                      	inc	ax  ; cmp ax,-1
 17883 00001C1F 7443                    	jz	short OkVolArg ; 0FFFFh -> 0
 17884 00001C21 48                      	dec	ax  ; cmp ax,0
 17885 00001C22 750A                    	jnz	short badvolarg ; 1 -> 0
 17886                                  	; ax = 0
 17887                                  
 17888                                  ; We have parsed off the drive. See if there are any more chars left
 17889                                  
 17890 00001C24 BF[F584]                	mov	di,PARSE_VOL
 17891                                  				;AC000; get address of parse_vol
 17892 00001C27 31D2                    	xor	dx,dx		;AC000;
 17893 00001C29 E87905                  	call	parse_check_eol ;AC000; call parser
 17894 00001C2C 7436                    	jz	short OkVolArg	;AC000; yes, end of road
 17895                                  
 17896                                  ; The line was not interpretable. Report an error.
 17897                                  
 17898                                  badvolarg:
 17899 00001C2E E9230D                  	jmp	cerror
 17900                                  
 17901                                  ; 20/02/2023
 17902                                  %if 0
 17903                                  	; MSDOS 3.3
 17904                                  	mov	si,81h
 17905                                  	call	SCANOFF		; Skip to first non-delim
 17906                                  	;mov	ah,[5Ch]
 17907                                  	mov	ah,[FCB]
 17908                                  	;mov	byte [5Ch],0
 17909                                  	mov	byte [FCB],0
 17910                                  	cmp	al,0Dh		; are we at end of line?
 17911                                  	jz	short OKVOLARG	; Yes, display default volume ID
 17912                                  	;mov	[5Ch],ah
 17913                                  	mov	[FCB],ah
 17914                                  	lodsb
 17915                                  	lodsb
 17916                                  	cmp	al,':'
 17917                                  	jnz	short VOLUME_ERR
 17918                                  	call	SCANOFF
 17919                                  	cmp	al,0Dh
 17920                                  	jz	short OKVOLARG
 17921                                  VOLUME_ERR:
 17922                                  	mov	dx,BADDRVPTR
 17923                                  	jmp	CERROR
 17924                                  
 17925                                  ; ---------------------------------------------------------------------------
 17926                                  
 17927                                  OKVOLARG:
 17928                                  	call	CRLF2
 17929                                  	push	ds
 17930                                  	pop	es
 17931                                  	;mov	di,55h
 17932                                  	mov	di,FCB-7	; Set up extended FCB
 17933                                  	mov	al,-1
 17934                                  	stosb
 17935                                  	xor	ax,ax
 17936                                  	stosw
 17937                                  	stosw
 17938                                  	stosb
 17939                                  	mov	al,8		; Look for volume label
 17940                                  	stosb
 17941                                  	inc	di		; Skip drive byte
 17942                                  	mov	cx,11
 17943                                  	mov	al,'?'
 17944                                  	rep stosb
 17945                                  	mov	dx,DIRBUF
 17946                                  	mov	ah,Set_DMA ; 1Ah
 17947                                  	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 17948                                  			; DS:DX	-> disk	transfer buffer
 17949                                  	;mov	dx,55h
 17950                                  	mov	dx,FCB-7
 17951                                  	mov	ah,Dir_Search_First ; 11h
 17952                                  	int	21h	; DOS -	SEARCH FIRST USING FCB
 17953                                  			; DS:DX	-> FCB
 17954                                  	jmp	PRINTVOL
 17955                                  %endif
 17956                                  
 17957                                  ; ---------------------------------------------------------------------------
 17958                                  
 17959                                  ;***	DisAppend - disable APPEND
 17960                                  ;
 17961                                  ;	ENTRY	nothing
 17962                                  ;
 17963                                  ;	EXIT	nothing
 17964                                  ;
 17965                                  ;	USED	AX,BX
 17966                                  ;
 17967                                  ;	EFFECTS
 17968                                  ;
 17969                                  ;	  APPEND is disabled. If it was active, it will be re-enabled
 17970                                  ;	  after the command finishes, by the HeadFix routine.
 17971                                  ;
 17972                                  ;	NOTE
 17973                                  ;
 17974                                  ;	  This routine must not be called more than once during a single
 17975                                  ;	  command cycle. The second call would permanently disable APPEND.
 17976                                  
 17977                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 17978                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1CDFh
 17979                                  
 17980                                  	; MSDOS 6.0
 17981                                  DisAppend:
 17982 00001C31 1E                      	push	ds			; save DS
 17983 00001C32 06                      	push	es			; save ES
 17984 00001C33 57                      	push	di
 17985                                  
 17986                                  	;mov	ax,APPENDINSTALL	; AX = Append Installed Check code
 17987 00001C34 B800B7                  	mov	ax,0B700h
 17988 00001C37 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 17989 00001C39 08C0                    	or	al,al
 17990 00001C3B 7423                    	jz	short daRet		; APPEND not installed, return
 17991                                  
 17992                                  	;mov	ax,APPENDDOS		; AX = Get Append Version code
 17993 00001C3D B802B7                  	mov	ax,0B702h
 17994 00001C40 CD2F                    	int	2Fh			; talk to APPEND via multiplex
 17995 00001C42 83F8FF                  	cmp	ax,0FFFFh
 17996 00001C45 7519                    	jne	short daRet		; it's not a local version, return
 17997                                  
 17998                                  	;mov	ax,APPENDGETSTATE	; AX = Get Function State code
 17999 00001C47 B806B7                  	mov	ax,0B706h
 18000 00001C4A CD2F                    	int	2Fh			; talk to APPEND via multiplex
 18001                                  
 18002 00001C4C 8E1E[C58A]              	mov	ds,[RESSEG]		; DS = resident seg addr
 18003                                  
 18004 00001C50 891E[AB01]              	mov	[Append_State],bx	; Append_State = saved APPEND state
 18005 00001C54 C606[AD01]FF            	mov	byte [Append_Flag],-1	; Append_Flag = true, restore state
 18006                                  
 18007 00001C59 31DB                    	xor	bx,bx			; BX = APPEND state = off
 18008                                  	;mov	ax,APPENDSETSTATE	; AX = Set Append State code
 18009 00001C5B B807B7                  	mov	ax,0B707h
 18010 00001C5E CD2F                    	int	2Fh			; talk to APPEND via multiplex
 18011                                  daRet:	
 18012 00001C60 5F                      	pop	di
 18013 00001C61 07                      	pop	es			; restore ES
 18014 00001C62 1F                      	pop	ds			; restore DS
 18015                                  
 18016 00001C63 C3                      	retn
 18017                                  
 18018                                  ; ---------------------------------------------------------------------------
 18019                                  
 18020                                  ; Find the Volume ID on the disk.
 18021                                  
 18022                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18023                                  
 18024                                  	; MSDOS 6.0
 18025                                  OkVolArg:
 18026 00001C64 E8CAFF                  	call	DisAppend		; disable APPEND
 18027 00001C67 E86909                  	call	CRLF2
 18028                                  	;mov	al,blank			
 18029 00001C6A B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 18030 00001C6C E89001                  	call	PRINT_CHAR		;AN051;  before volume message
 18031 00001C6F 1E                      	push	ds
 18032 00001C70 07                      	pop	es
 18033                                  
 18034                                  ; Volume IDs are only findable via extended FCBs or find_first with attributes
 18035                                  ; of volume_id ONLY.
 18036                                  
 18037 00001C71 BF5500                  	mov	di,FCB-7 ; 55h		; Point to extended FCB beginning
 18038 00001C74 B0FF                    	mov	al,-1			; Tag to indicate Extention
 18039 00001C76 AA                      	stosb
 18040 00001C77 31C0                    	xor	ax,ax			; Zero padding to volume label
 18041 00001C79 AB                      	stosw
 18042 00001C7A AB                      	stosw
 18043 00001C7B AA                      	stosb
 18044 00001C7C B008                    	mov	al,ATTR_VOLUME_ID ; 8	; Look for volume label
 18045 00001C7E AA                      	stosb
 18046 00001C7F 47                      	inc	di			; Skip drive byte; it is already set
 18047 00001C80 B90B00                  	mov	cx,11			; fill in remainder of file
 18048 00001C83 B03F                    	mov	al,'?'
 18049 00001C85 F3AA                    	rep	stosb
 18050                                  
 18051                                  ; Set up transfer address (destination of search first information)
 18052                                  
 18053 00001C87 BA[CE8B]                	mov	dx,DIRBUF
 18054                                  	;mov	ah,Set_DMA
 18055 00001C8A B41A                    	mov	ah,1Ah
 18056 00001C8C CD21                    	int	21h
 18057                                  
 18058                                  ; Do the search
 18059                                  
 18060 00001C8E BA5500                  	mov	dx,FCB-7 ; 55h
 18061                                  	;mov	ah,Dir_Search_First
 18062 00001C91 B411                    	mov	ah,11h
 18063 00001C93 CD21                    	int	21h
 18064                                  
 18065                                  ;********************************
 18066                                  ; Print volume ID info
 18067                                  
 18068 00001C95 50                      	push	ax			;AC000; AX return from SEARCH_FIRST for VOL ID
 18069 00001C96 A05C00                  	mov	al,[FCB]  ; [5Ch]	;AC000; get drive letter
 18070 00001C99 0440                    	add	al,'@'  ; add al,40h
 18071 00001C9B 3C40                    	cmp	al,'@'
 18072 00001C9D 7505                    	jne	short drvok
 18073 00001C9F A0[D98A]                	mov	al,[CURDRV]
 18074                                  	;add	al,capital_A
 18075 00001CA2 0441                    	add	al,'A'
 18076                                  drvok:
 18077 00001CA4 A2[C68C]                	mov	[vol_drv],al		;AC000; get drive letter into argument
 18078 00001CA7 58                      	pop	ax			;AC000; get return code back
 18079 00001CA8 08C0                    	or	al,al			;AC000; volume label found?
 18080 00001CAA 7405                    	jz	short Get_vol_name	;AC000; volume label exists - go get it
 18081 00001CAC BA[1680]                	mov	dx,VolMes_Ptr_2		;AC000; set up no volume message
 18082 00001CAF EB13                    	jmp	short print_serial	;AC000; go print it
 18083                                  
 18084                                  Get_vol_name:
 18085 00001CB1 BF[FF8A]                	mov	di,CHARBUF
 18086 00001CB4 89FA                    	mov	dx,di
 18087 00001CB6 BE[D68B]                	mov	si,DIRBUF+8		;AN000;  3/3/KK
 18088 00001CB9 B90B00                  	mov	cx,11			;AN000;  3/3/KK
 18089 00001CBC F3A4                    	rep	movsb			;AN000;  3/3/KK
 18090                                  
 18091 00001CBE 30C0                    	xor	al,al			;AC000; store a zero to terminate the string
 18092 00001CC0 AA                      	stosb
 18093 00001CC1 BA[2480]                	mov	dx,VolMes_Ptr		;AC000; set up message
 18094                                  
 18095                                  print_serial:
 18096                                  
 18097                                  ; Attempt to get the volume serial number from the disk. If an error
 18098                                  ; occurs, do not print volume serial number.
 18099                                  
 18100 00001CC4 52                      	push	dx			;AN000; save message offset
 18101                                  	;mov	ax,(GetSetMediaID SHL 8)
 18102 00001CC5 B80069                  	mov	ax,6900h		;AC036; Get the volume serial info
 18103 00001CC8 8A1E5C00                	mov	bl,[FCB] ; [5Ch]	;AN000; get drive number from FCB
 18104 00001CCC BA[1D8E]                	mov	dx,vol_ioctl_buf	;AN000;target buffer
 18105 00001CCF CD21                    	int	21h			;AN000; do the call
 18106                                  			; DOS - 4.0 internal - GET/SET DISK SERIAL NUMBER
 18107                                  			; AL = 00h get serial number / 01h set serial number
 18108                                  			; BL = drive (0=default, 1=A, 2=B, etc)
 18109                                  			; DS:DX -> disk info
 18110 00001CD1 5A                      	pop	dx			;AN000; get message offset back
 18111 00001CD2 720B                    	jc	short printvol_end	;AN000; if error, just go print label
 18112 00001CD4 E81831                  	call	std_printf		;AC000; go print volume message
 18113                                  	;mov	al,blank				
 18114 00001CD7 B020                    	mov	al,' ' ; 20h		;AN051; Print out a blank
 18115 00001CD9 E82301                  	call	PRINT_CHAR		;AN051;  before volume message
 18116 00001CDC BA[3D80]                	mov	dx,VolSerMes_Ptr 	;AN000; get serial number message
 18117                                  printvol_end:
 18118 00001CDF E90D31                  	jmp	std_printf		;AC000; go print and exit
 18119                                  
 18120                                  ; ---------------------------------------------------------------------------
 18121                                  
 18122                                  ;****************************************************************
 18123                                  ;*
 18124                                  ;* ROUTINE:	Set_ext_error_msg
 18125                                  ;*
 18126                                  ;* FUNCTION:	Sets up extended error message for printing
 18127                                  ;*
 18128                                  ;* INPUT:	return from INT 21
 18129                                  ;*
 18130                                  ;* OUTPUT:	extended error message set up in extended error
 18131                                  ;*		buffer.
 18132                                  ;*
 18133                                  ;****************************************************************
 18134                                  	
 18135                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18136                                  
 18137                                  	; MSDOS 6.0
 18138                                  Set_Ext_Error_Msg:			;AN000;
 18139 00001CE2 E80D00                  	call	get_ext_error_number	;AC022; get the extended error
 18140 00001CE5 C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class
 18141                                  	;mov	byte [msg_disp_class],1	;AN000; set up extended error msg class
 18142 00001CEA BA[1B7F]                	mov	dx,extend_buf_ptr 	;AC000; get extended message pointer
 18143 00001CED A3[1B7F]                	mov	[extend_buf_ptr],ax	;AN000; get message number in control block
 18144 00001CF0 F9                      	stc				;AN000; make sure carry is set
 18145 00001CF1 C3                      	retn				;AN000; return
 18146                                  
 18147                                  ; ---------------------------------------------------------------------------
 18148                                  
 18149                                  ;****************************************************************
 18150                                  ;*
 18151                                  ;* ROUTINE:	Get_ext_error_number
 18152                                  ;*
 18153                                  ;* FUNCTION:	Does get extended error function call
 18154                                  ;*
 18155                                  ;* INPUT:	return from INT 21
 18156                                  ;*
 18157                                  ;* OUTPUT:	AX - extended error number
 18158                                  ;*
 18159                                  ;****************************************************************
 18160                                  
 18161                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18162                                  
 18163                                  	; MSDOS 6.0
 18164                                  get_ext_error_number:			;AN022;
 18165                                  
 18166                                  	;SaveReg <BX,CX,DX,SI,DI,BP,ES,DS>
 18167                                  					;AN022; save registers
 18168 00001CF2 53                      	push	bx
 18169 00001CF3 51                      	push	cx
 18170 00001CF4 52                      	push	dx
 18171 00001CF5 56                      	push	si
 18172 00001CF6 57                      	push	di
 18173 00001CF7 55                      	push	bp
 18174 00001CF8 06                      	push	es
 18175 00001CF9 1E                      	push	ds
 18176                                  	;mov	ah,GetExtendedError	;AN022; get extended error
 18177 00001CFA B459                    	mov	ah,59h
 18178 00001CFC 31DB                    	xor	bx,bx			;AN022; clear BX
 18179 00001CFE CD21                    	int	21h			;AN022;
 18180                                  			; DOS - 3+ - GET EXTENDED ERROR CODE
 18181                                  			; BX = version code (0000h for DOS 3.x)
 18182                                  
 18183                                  	;RestoreReg  <DS,ES,BP,DI,SI,DX,CX,BX>
 18184                                  					;AN022; restore registers
 18185 00001D00 1F                      	pop	ds
 18186 00001D01 07                      	pop	es
 18187 00001D02 5D                      	pop	bp
 18188 00001D03 5F                      	pop	di
 18189 00001D04 5E                      	pop	si
 18190 00001D05 5A                      	pop	dx
 18191 00001D06 59                      	pop	cx
 18192 00001D07 5B                      	pop	bx
 18193                                  
 18194 00001D08 C3                      	retn				;AN022; return
 18195                                  
 18196                                  ;============================================================================
 18197                                  ; TCMD2A.ASM, MSDOS 6.0, 1991
 18198                                  ;============================================================================
 18199                                  ; 08/10/2018 - Retro DOS v3.0
 18200                                  
 18201                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1379h
 18202                                  
 18203                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 18204                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 1DB7h
 18205                                  
 18206                                  ; ---------------------------------------------------------------------------
 18207                                  
 18208                                  ; MSDOS 6.0
 18209                                  ;***	Version - display DOS version
 18210                                  ;
 18211                                  ;	SYNTAX	ver [/debug]
 18212                                  ;
 18213                                  ;		/debug - display additional DOS configuration info
 18214                                  ;
 18215                                  ;	ENTRY	command-line tail is in PSP
 18216                                  ;
 18217                                  ;	EXIT	if successful, nothing
 18218                                  ;		if parse fails,
 18219                                  ;		  parse error message is set up (for Std_EPrintf)
 18220                                  ;		    AX = system parser error code
 18221                                  ;		    DX = ptr to message block
 18222                                  ;		  we jump to CError
 18223                                  ;
 18224                                  ;	EFFECTS
 18225                                  ;	  If parse fails, a parse error message is displayed.
 18226                                  ;	  Otherwise, version message is displayed.
 18227                                  ;	  If /debug is specified, additional DOS info is displayed.
 18228                                  
 18229                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18230                                  VERSION:
 18231                                  	;assume	ds:TRANGROUP,es:TRANGROUP
 18232                                  
 18233                                  ;	Parse command line for /debug switch.
 18234                                  
 18235 00001D09 BE8100                  	mov	si,81h			; DS:SI = ptr to command tail
 18236 00001D0C BF[AD85]                	mov	di,PARSE_VER		; ES:DI = ptr to parse block
 18237 00001D0F 31C9                    	xor	cx,cx			; CX = # positional param's found
 18238 00001D11 E8A704                  	call	Parse_With_Msg
 18239                                  
 18240 00001D14 B301                    	mov	bl,1			; BL = flag = /debug present
 18241                                  	;cmp	ax,RESULT_NO_ERROR
 18242                                  	;cmp	ax,0
 18243                                  	;je	short verPrintVer	; something parsed - must be /debug
 18244 00001D16 09C0                    	or	ax,ax
 18245 00001D18 740C                    	jz	short verPrintVer 
 18246 00001D1A FECB                    	dec	bl			; BL = flag = no /debug present
 18247                                  	;cmp	ax,END_OF_LINE ; -1
 18248 00001D1C 83F8FF                  	cmp	ax,-1 ; 0FFFFh
 18249 00001D1F 7405                    	je	short verPrintVer	; reached end of line - ok
 18250                                  
 18251                                  ; 20/07/2024 - Retro DOS v4.1 (& v4.0) COMMAND.COM
 18252                                  %if 0
 18253                                  	je	short verPrintVer	; reached end of line - ok
 18254                                  %else
 18255 00001D21 7414                    	je	short not_truever_sw
 18256                                  %endif
 18257                                  
 18258                                  ;	The parse failed. Error message has been set up.
 18259                                  
 18260 00001D23 E92E0C                  	jmp	cerror
 18261                                  
 18262                                  verPrintVer:
 18263                                  
 18264                                  ; 20/07/2024 - Retro DOS v4.1 (& v4.0) COMMAND.COM
 18265                                  %if 1
 18266                                  check_t_switch:
 18267 00001D26 813E[F695][CD85]        	cmp	word [PARSE1_SYN],SLASH_T_SYN ; "/T" ; /t switch
 18268 00001D2C 7509                    	jne	short not_truever_sw
 18269 00001D2E BA[DF85]                	mov	dx,RD4CMD_VER_MSG
 18270 00001D31 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9 ; print the message
 18271 00001D33 CD21                    	int	21h
 18272 00001D35 EB43                    	jmp	short verDone
 18273                                  not_truever_sw:
 18274                                  %endif
 18275 00001D37 53                      	push	bx			; save /debug flag
 18276 00001D38 E89808                  	call	CRLF2
 18277 00001D3B E83F00                  	call	PRINT_VERSION
 18278 00001D3E E89208                  	call	CRLF2
 18279 00001D41 5B                      	pop	bx   			; BL = /debug flag
 18280 00001D42 08DB                    	or	bl,bl
 18281 00001D44 7434                    	jz	short verDone		; /debug is false - we're done
 18282                                  
 18283                                  ;*	For /debug, display DOS internal revision and DOS location
 18284                                  ;	(low memory, HMA, or ROM).
 18285                                  
 18286                                  ;	Bugbug:	use symbols for bitmasks below.
 18287                                  
 18288                                  	;mov	ax,(Set_CTRL_C_Trapping shl 8) + 6 ; M013
 18289 00001D46 B80633                  	mov	ax,3306h
 18290 00001D49 CD21                    	int	21h
 18291                                  		; DOS - 5+ Get TRUE Version Number
 18292                                  		; (BL major, BH minor, DL revision, DH flags)
 18293 00001D4B 88D0                    	mov	al,dl			;revision number in dl; M013
 18294 00001D4D 88F7                    	mov	bh,dh			;flags in dh now; M013
 18295                                  ;M032	and	al,7			; AL = DOS internal revision
 18296 00001D4F 3C19                    	cmp	al,'Z'-'A' ; 25	 ;M032	; revision in A-to-Z range?
 18297                                  	;jbe	short @f	 ;M032	; A-to-Z revision ok
 18298 00001D51 7602                    	jbe	short ver1
 18299 00001D53 B0E9                    	mov	al,'*'-'A' ; -23 ;M032	; beyond Z, just say revision *
 18300                                  ;@@:
 18301                                  ver1:
 18302 00001D55 0441                    	add	al,'A' ; 41h		; AL = DOS internal rev letter
 18303 00001D57 A2[C48C]                	mov	[One_Char_Val],al
 18304 00001D5A BA[6B81]                	mov	dx,dosrev_ptr
 18305 00001D5D E88F30                  	call	std_printf		; print DOS internal revision
 18306                                  
 18307 00001D60 B104                    	mov	cl,4
 18308 00001D62 D2EF                    	shr	bh,cl			; CY = DOS in ROM
 18309 00001D64 7209                    	jc	short verRom
 18310 00001D66 D0EF                    	shr	bh,1			; CY = DOS in HMA
 18311 00001D68 720A                    	jc	short verHma
 18312                                  
 18313                                  ;	DOS isn't in ROM or HMA, so it must be in lower memory.
 18314                                  
 18315                                  	;mov	dx,offset TRANGROUP:DosLow_Ptr
 18316 00001D6A BA[7F81]                	mov	dx,DosLow_Ptr
 18317 00001D6D EB08                    	jmp	short verPrintLoc
 18318                                  verRom: 
 18319                                  	;mov	dx,offset TRANGROUP:DosRom_Ptr
 18320 00001D6F BA[7981]                	mov	dx,DosRom_Ptr
 18321 00001D72 EB03                    	jmp	short verPrintLoc
 18322                                  verHma: 
 18323                                  	;mov	dx,offset TRANGROUP:DosHma_Ptr
 18324 00001D74 BA[7C81]                	mov	dx,DosHma_Ptr
 18325                                  verPrintLoc:
 18326 00001D77 E87530                  	call	std_printf
 18327                                  verDone:
 18328 00001D7A E95608                  	jmp	CRLF2
 18329                                  
 18330                                  ; 21/02/2023
 18331                                  ;	; MSDOS 3.3
 18332                                  ;VERSION:
 18333                                  ;	call	CRLF2
 18334                                  ;	call	PRINT_VERSION
 18335                                  ;	jmp	CRLF2
 18336                                  
 18337                                  ; =============== S U B	R O U T	I N E =======================================
 18338                                  
 18339                                  	; 21/02/2023 - Retro DOS v4.0
 18340                                  PRINT_VERSION:
 18341                                  	;mov	ah,GET_VERSION ; 30h
 18342 00001D7D B430                    	mov	ah,30h
 18343 00001D7F CD21                    	int	21h	; DOS -	GET DOS	VERSION
 18344                                  			; Return: AL = major version number (00h for DOS 1.x)
 18345 00001D81 50                      	push	ax
 18346 00001D82 30E4                    	xor	ah,ah
 18347 00001D84 A3[C08C]                	mov	[Major_Ver_Num],ax
 18348 00001D87 58                      	pop	ax
 18349 00001D88 86E0                    	xchg	ah,al
 18350 00001D8A 30E4                    	xor	ah,ah
 18351 00001D8C A3[C28C]                	mov	[Minor_Ver_Num],ax
 18352 00001D8F BA[FD7F]                	mov	dx,VerMes_Ptr
 18353 00001D92 E95A30                  	jmp	std_printf
 18354                                  
 18355                                  ; =============== S U B	R O U T	I N E =======================================
 18356                                  
 18357                                  	; 21/02/2023 - Retro DOS v4.0
 18358                                  PRINT_PROMPT:
 18359 00001D95 1E                      	push	ds
 18360 00001D96 0E                      	push	cs
 18361 00001D97 1F                      	pop	ds		; Make sure DS is in TRANGROUP
 18362 00001D98 06                      	push	es
 18363 00001D99 E87805                  	call	find_prompt	; Look for prompt string
 18364 00001D9C 7206                    	jc	short PP0	; Can't find one	
 18365 00001D9E 26803D00                	cmp	byte [es:di],0
 18366 00001DA2 7524                    	jnz	short PP1
 18367                                  PP0:				; Use default prompt
 18368 00001DA4 E86700                  	call	PRINT_DRIVE
 18369 00001DA7 B03E                    	mov	al,'>'
 18370                                  	;mov	al,SYM
 18371 00001DA9 E85300                  	call	PRINT_CHAR
 18372 00001DAC EB36                    	jmp	short PP5
 18373                                  ;PP1:
 18374                                  ;	mov	al,[es:di]	; Get a char
 18375                                  ;	inc	di
 18376                                  ;	or	al,al
 18377                                  ;	jz	short PP5	; Nul terminated
 18378                                  ;	; 21/02/2023
 18379                                  ;	cmp	al,'$' ; 24h
 18380                                  ;	;cmp	al,[DOLLAR]	; Meta character
 18381                                  ;	jz	short PP2	; Nope
 18382                                  ;	call	PRINT_CHAR
 18383                                  ;	jmp	short PP1
 18384                                  PP2:
 18385 00001DAE 268A05                  	mov	al,[es:di]
 18386 00001DB1 47                      	inc	di
 18387                                  	;mov	bx,CLSSTRING+2	; "[2J"
 18388 00001DB2 BB[8982]                	mov	bx,PROMPT_TABLE-3
 18389 00001DB5 08C0                    	or	al,al
 18390 00001DB7 742B                    	jz	short PP5
 18391                                  PP3:
 18392 00001DB9 83C303                  	add	bx,3
 18393                                  	; 21/02/2023
 18394 00001DBC E82C06                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 18395                                  	;call	UPCONV_MAPCALL  ; MSDOS 3.3
 18396 00001DBF 3A07                    	cmp	al,[bx]
 18397 00001DC1 7416                    	jz	short PP4
 18398 00001DC3 803F00                  	cmp	byte [bx],0
 18399 00001DC6 75F1                    	jnz	short PP3
 18400                                  	;jmp	short PP1
 18401                                  	; 21/02/2023
 18402                                  PP1:
 18403 00001DC8 268A05                  	mov	al,[es:di]	; Get a char
 18404 00001DCB 47                      	inc	di
 18405 00001DCC 08C0                    	or	al,al
 18406 00001DCE 7414                    	jz	short PP5	; Nul terminated
 18407                                  	; 21/02/2023
 18408 00001DD0 3C24                    	cmp	al,'$' ; 24h
 18409                                  	;cmp	al,[DOLLAR]	; Meta character
 18410 00001DD2 74DA                    	jz	short PP2	; Nope
 18411 00001DD4 E82800                  	call	PRINT_CHAR
 18412 00001DD7 EBEF                    	jmp	short PP1
 18413                                  PP4:
 18414 00001DD9 06                      	push	es
 18415 00001DDA 57                      	push	di
 18416 00001DDB 0E                      	push	cs
 18417 00001DDC 07                      	pop	es
 18418 00001DDD FF5701                  	call	word [bx+1]
 18419 00001DE0 5F                      	pop	di
 18420 00001DE1 07                      	pop	es
 18421 00001DE2 EBE4                    	jmp	short PP1
 18422                                  PP5:
 18423 00001DE4 07                      	pop	es		; Restore segments
 18424 00001DE5 1F                      	pop	ds
 18425 00001DE6 C3                      	retn
 18426                                  
 18427                                  ; ---------------------------------------------------------------------------
 18428                                  
 18429                                  PRINT_BACK:
 18430                                  	; 21/02/2023
 18431 00001DE7 BA[F780]                	mov	dx,dback_ptr
 18432 00001DEA E90230                  	jmp	std_printf
 18433                                  
 18434                                  ; ---------------------------------------------------------------------------
 18435                                  
 18436                                  PRINT_EQ:
 18437 00001DED B03D                    	mov	al,'='
 18438 00001DEF EB0E                    	jmp	short PRINT_CHAR
 18439                                  
 18440                                  ; ---------------------------------------------------------------------------
 18441                                  
 18442                                  PRINT_ESC:
 18443 00001DF1 B01B                    	mov	al,1Bh
 18444 00001DF3 EB0A                    	jmp	short PRINT_CHAR
 18445                                  
 18446                                  ; ---------------------------------------------------------------------------
 18447                                  
 18448                                  	; 21/02/2023
 18449                                  PRINT_G:
 18450                                  	;mov	al,[RABRACKET]
 18451 00001DF5 B03E                    	mov	al,'>' ; 3Eh
 18452 00001DF7 EB06                    	jmp	short PRINT_CHAR
 18453                                  
 18454                                  ; ---------------------------------------------------------------------------
 18455                                  
 18456                                  	; 21/02/2023
 18457                                  PRINT_L:
 18458                                  	;mov	al,[LABRACKET]
 18459 00001DF9 B03C                    	mov	al,'<' ; 3Ch
 18460 00001DFB EB02                    	jmp	short PRINT_CHAR
 18461                                  
 18462                                  ; ---------------------------------------------------------------------------
 18463                                  
 18464                                  	; 21/02/2023
 18465                                  Print_B:
 18466                                  	;mov	al,[VBAR]
 18467 00001DFD B07C                    	mov	al,'|' ; 7Ch
 18468                                  
 18469                                  ; =============== S U B	R O U T	I N E =======================================
 18470                                  
 18471                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18472                                  PRINT_CHAR:
 18473                                  	; MSDOS 6.0
 18474                                  
 18475                                  ;	Bugbug:	Why bother with ds,es here?
 18476                                  		
 18477 00001DFF 06                      	push	es
 18478 00001E00 1E                      	push	ds
 18479 00001E01 07                      	pop	es
 18480 00001E02 57                      	push	di
 18481 00001E03 52                      	push	dx
 18482 00001E04 88C2                    	mov	dl,al		;AC000; Get char into al
 18483                                  	;mov	ah,STD_CON_OUTPUT
 18484                                  				;AC000; print the char to stdout
 18485 00001E06 B402                    	mov	ah,2
 18486 00001E08 CD21                    	int	21h		;AC000;
 18487 00001E0A 5A                      	pop	dx
 18488 00001E0B 5F                      	pop	di
 18489 00001E0C 07                      	pop	es
 18490 00001E0D C3                      	retn
 18491                                  
 18492                                  ;21/02/2023
 18493                                  %if 0
 18494                                  	; MSDOS 3.3
 18495                                  	push	es
 18496                                  	push	ds
 18497                                  	pop	es
 18498                                  	push	di
 18499                                  	push	dx
 18500                                  	mov	di,ONE_CHAR_VAL	
 18501                                  	stosb
 18502                                  	mov	dx,ONECHRVALPTR
 18503                                  	call	STD_PRINTF
 18504                                  	pop	dx
 18505                                  	pop	di
 18506                                  	pop	es
 18507                                  	retn
 18508                                  %endif
 18509                                  
 18510                                  ; ---------------------------------------------------------------------------
 18511                                  
 18512                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18513                                  PRINT_DRIVE:
 18514                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18515 00001E0E B419                    	mov	ah,19h
 18516 00001E10 CD21                    	int	21h	; DOS -	GET DEFAULT DISK NUMBER
 18517 00001E12 0441                    	add	al,'A'
 18518                                  	;add	al,[CAPITAL_A]
 18519                                  	;call	PRINT_CHAR
 18520                                  	;retn
 18521                                  	; 21/02/2023
 18522 00001E14 EBE9                    	jmp	short PRINT_CHAR
 18523                                  
 18524                                  ; ---------------------------------------------------------------------------
 18525                                  
 18526                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18527                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EB6h
 18528                                  
 18529                                  build_dir_for_prompt:
 18530 00001E16 30D2                    	xor	dl,dl
 18531 00001E18 BE[CE8B]                	mov	si,BWDBUF
 18532 00001E1B 89F7                    	mov	di,si
 18533 00001E1D A0[D98A]                	mov	al,[CURDRV]
 18534 00001E20 0441                    	add	al,'A'
 18535 00001E22 B43A                    	mov	ah,':'
 18536 00001E24 AB                      	stosw
 18537 00001E25 A0[CA8A]                	mov	al,[DIRCHAR]
 18538 00001E28 AA                      	stosb
 18539 00001E29 87F7                    	xchg	si,di
 18540 00001E2B 893E[B58C]              	mov	[string_ptr_2],di
 18541                                  	;mov	ah,CURRENT_DIR ; 47h
 18542 00001E2F B447                    	mov	ah,47h
 18543 00001E31 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 18544                                  			; DL = drive (0=default,1=A,etc.)
 18545                                  			; DS:SI	points to 64-byte buffer area
 18546                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 18547 00001E33 BA[E280]                	mov	dx,string_buf_ptr
 18548 00001E36 7303                    	jnc	short doprint
 18549                                  	;mov	dx,BADCURDRVPTR	; MSDOS 3.3
 18550 00001E38 BA[AA7F]                	mov	dx,BADCURDRV
 18551                                  doprint:
 18552                                  	;call	std_printf
 18553                                  	;retn
 18554 00001E3B E9B12F                  	jmp	std_printf
 18555                                  
 18556                                  ; =============== S U B	R O U T	I N E =======================================
 18557                                  
 18558                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18559                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1EDFh
 18560                                  
 18561                                  build_dir_for_chdir:
 18562 00001E3E E80D00                  	call	build_dir_string
 18563 00001E41 BA[CE8B]                	mov	dx,DIRBUF
 18564 00001E44 8916[B58C]              	mov	[string_ptr_2],dx
 18565                                  	;mov	dx,offset trangroup:string_buf_ptr ; MSDOS 6.0
 18566                                  	;mov	dx,STRINGBUF2PTR ; MSDOS 3.3
 18567 00001E48 BA[E280]                	mov	dx,string_buf_ptr
 18568                                  	;call	std_printf
 18569                                  	;retn
 18570                                  	; 21/02/2023
 18571                                  	;jmp	short doprint
 18572 00001E4B E9A12F                  	jmp	std_printf
 18573                                  
 18574                                  
 18575                                  ; =============== S U B	R O U T	I N E =======================================
 18576                                  
 18577                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18578                                  build_dir_string:
 18579 00001E4E 8A165C00                	mov	dl,[FCB] ; mov dl,[5Ch]
 18580 00001E52 88D0                    	mov	al,dl
 18581 00001E54 0440                    	add	al,'@'	; 40h
 18582 00001E56 3C40                    	cmp	al,'@'
 18583 00001E58 7506                    	jne	short gotdrive
 18584 00001E5A 0206[D98A]              	add	al,[CURDRV]
 18585 00001E5E FEC0                    	inc	al
 18586                                  gotdrive:
 18587 00001E60 50                      	push	ax
 18588 00001E61 BE[D18B]                	mov	si,BWDBUF+3
 18589                                  	;mov	ah,CURRENT_DIR ; 47h
 18590 00001E64 B447                    	mov	ah,47h
 18591 00001E66 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 18592                                  			; DL = drive (0=default,1=A,etc.)
 18593                                  			; DS:SI	points to 64-byte buffer area
 18594 00001E68 7305                    	jnc	short dpbisok
 18595 00001E6A 0E                      	push	cs
 18596 00001E6B 1F                      	pop	ds
 18597 00001E6C E9ED09                  	jmp	DRVBAD
 18598                                  dpbisok:
 18599 00001E6F BF[CE8B]                	mov	di,BWDBUF
 18600 00001E72 89FA                    	mov	dx,di
 18601 00001E74 58                      	pop	ax
 18602 00001E75 B43A                    	mov	ah,':'
 18603 00001E77 AB                      	stosw
 18604 00001E78 A0[CA8A]                	mov	al,[DIRCHAR]
 18605 00001E7B AA                      	stosb
 18606 00001E7C C3                      	retn
 18607                                  
 18608                                  ; ---------------------------------------------------------------------------
 18609                                  
 18610                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18611                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:1F1Fh
 18612                                  PATH:
 18613                                  	; MSDOS 6.0
 18614 00001E7D 30C0                    	xor	al,al			;AN049; Set up holding buffer
 18615 00001E7F BF[F387]                	mov	di,SRCXNAME		;AN049;  for PATH while parsing
 18616 00001E82 AA                      	stosb				;AN049; Initialize PATH to null
 18617 00001E83 4F                      	dec	di			;AN049; point to the start of buffer
 18618 00001E84 E8DE0C                  	call	PGETARG 		; Pre scan for arguments
 18619 00001E87 7460                    	jz	short disppath		; Print the current path
 18620                                  	;cmp	al,semicolon		;AC049; NUL path argument?
 18621 00001E89 3C3B                    	cmp	al,';' ; 3Bh
 18622 00001E8B 7503                    	jne	short pathslp 		;AC049;
 18623 00001E8D 46                      	inc	si			;AN049; point past semicolon
 18624 00001E8E EB1B                    	jmp	short scan_white	;AC049; Yes - make sure nothing else on line
 18625                                  pathslp:					; Get the user specified path
 18626 00001E90 AC                      	lodsb				; Get a character
 18627 00001E91 3C0D                    	cmp	al,0Dh
 18628                                  	;cmp	al,END_OF_LINE_IN	;AC049; Is it end of line?
 18629 00001E93 7434                    	je	short path_eol		;AC049; yes - end of command
 18630 00001E95 E82905                  	call	testkanj		;See if DBCS
 18631 00001E98 7405                    	jz	short notkanj2		;No - continue
 18632 00001E9A AA                      	stosb				;AC049; Yes - store the first byte
 18633 00001E9B AC                      	lodsb				;skip second byte of DBCS
 18634                                  path_hold:				;AN049;
 18635 00001E9C AA                      	stosb				;AC049; Store a byte in the PATH buffer
 18636 00001E9D EBF1                    	jmp	short pathslp		;continue parsing
 18637                                  notkanj2:
 18638 00001E9F E84905                  	call	UPCONV			;upper case the character
 18639                                  
 18640 00001EA2 3C3B                    	cmp	al,';' ; 3Bh
 18641                                  	;cmp	al,semicolon		;AC049; ';' not a delimiter on PATH
 18642 00001EA4 74F6                    	je	short path_hold		;AC049; go store it
 18643 00001EA6 E83F07                  	call	DELIM			;delimiter?
 18644 00001EA9 75F1                    	jnz	short path_hold		;AC049; no - go store character
 18645                                  scan_white:				;AN049; make sure were at EOL
 18646 00001EAB AC                      	lodsb				;AN049; get a character
 18647 00001EAC 3C0D                    	cmp	al,0Dh
 18648                                  	;cmp	al,END_OF_LINE_IN	;AN049; end of line?
 18649 00001EAE 7419                    	je	short path_eol		;AN049; yes - go set path
 18650 00001EB0 3C20                    	cmp	al,' ' ; 20h
 18651                                  	;cmp	al,blank		;AN049; whitespace?
 18652 00001EB2 74F7                    	je	short scan_white	;AN049; yes - continue scanning
 18653                                  	;cmp	al,9
 18654 00001EB4 3C09                    	cmp	al,tab_chr ; 9		;AN049; whitespace?
 18655 00001EB6 74F3                    	je	short scan_white	;AN049; yes - continue scanning
 18656                                  
 18657 00001EB8 BA[1B7F]                	mov	dx,extend_buf_ptr 	;AN049; no - set up error message
 18658                                  	;mov	word [extend_buf_ptr],1	;AN049; get "Too many parameters" message number
 18659 00001EBB C706[1B7F]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 18660                                  	;mov	byte [msg_disp_class],2		
 18661                                  					;AN049; set up parse error msg class
 18662 00001EC1 C606[197F]02            	mov	byte [msg_disp_class],parse_msg_class
 18663 00001EC6 E98B0A                  	jmp	cerror			;AN049;
 18664                                  path_eol:				;AN049; Parsing was clean
 18665 00001EC9 30C0                    	xor	al,al			;AN049; null terminate the PATH
 18666 00001ECB AA                      	stosb				;AN049;    buffer
 18667 00001ECC E84004                  	call	find_path		;AN049; Find PATH in environment
 18668 00001ECF E81404                  	call	delete_path		;AC049; Delete any offending name
 18669 00001ED2 E8CA04                  	call	scan_double_null	;AC049; Scan to end of environment
 18670 00001ED5 E89A04                  	call	move_name		;AC049; move in PATH=
 18671 00001ED8 BE[F387]                	mov	si,SRCXNAME		;AN049; Set up source as PATH buffer
 18672                                  store_path:				;AN049; Store the PATH in the environment
 18673 00001EDB AC                      	lodsb				;AN049; Get a character
 18674                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN049; null character?
 18675 00001EDC 20C0                    	and	al,al ; al=0 ?
 18676 00001EDE 7405                    	jz	short got_paths		;AN049; yes - exit
 18677 00001EE0 E82A05                  	call	store_char		;AN049; no - store character
 18678 00001EE3 EBF6                    	jmp	short store_path	;AN049; continue
 18679                                  got_paths:				;AN049; we're finished
 18680 00001EE5 31C0                    	xor	ax,ax			;	null terminate the PATH in
 18681 00001EE7 AB                      	stosw				;    	the environment
 18682 00001EE8 C3                      	retn
 18683                                  disppath:
 18684 00001EE9 E82304                  	call	find_path		;AN049;
 18685 00001EEC E80300                  	call	print_path
 18686                                  	;call	CRLF2
 18687                                  	;retn
 18688                                  	; 21/02/2023
 18689 00001EEF E9E106                  	jmp	CRLF2
 18690                                  
 18691                                  ; 21/02/2023
 18692                                  %if 0
 18693                                  	; MSDOS 3.3
 18694                                  	call	FIND_PATH		; Find PATH in environment
 18695                                  	call	PGETARG			; Pre scan for arguments
 18696                                  	jz	short DISPPATH		; Print the current path
 18697                                  	call	DELETE_PATH		; Delete any offending name
 18698                                  	call	SCAN_DOUBLE_NULL	; Scan to end of environment	
 18699                                  	call	MOVE_NAME		; Move in PATH=
 18700                                  	call	PGETARG
 18701                                  	cmp	al,';'
 18702                                  	jz	short GOTPATHS
 18703                                  PATHSLP:
 18704                                  	lodsb
 18705                                  	cmp	al,0Dh			; End of line (CR) ?		
 18706                                  	jz	short GOTPATHS		; yes - exit
 18707                                  	;call	UPCONV	; MSDOS 6.0
 18708                                  	call	UPCONV_MAPCALL		; convert to uppercase
 18709                                  	cmp	al,';'			; ';' not a delimiter on PATH
 18710                                  	jz	short NOTDELIM		; go set path
 18711                                  	call	DELIM			; is it delim/null char ?
 18712                                  	jz	short GOTPATHS		; yes - exit
 18713                                  NOTDELIM:
 18714                                  	call	STORE_CHAR		; no - store character
 18715                                  	jmp	short PATHSLP
 18716                                  GOTPATHS:
 18717                                  	xor	ax,ax			; null terminate the PATH
 18718                                  	stosw				; in the environment
 18719                                  	retn
 18720                                  DISPPATH:
 18721                                  	call	PRINT_PATH
 18722                                  	call	CRLF2
 18723                                  	retn
 18724                                  %endif
 18725                                  
 18726                                  ; =============== S U B	R O U T	I N E =======================================
 18727                                  
 18728                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18729                                  print_path:
 18730 00001EF2 26803D00                	cmp	byte [es:di],0
 18731 00001EF6 750A                    	jnz	short path1
 18732                                  path0:
 18733 00001EF8 BA[7080]                	mov	dx,NULLPATH_PTR
 18734 00001EFB 0E                      	push	cs
 18735 00001EFC 07                      	pop	es
 18736 00001EFD 0E                      	push	cs
 18737 00001EFE 1F                      	pop	ds
 18738 00001EFF E9ED2E                  	jmp	std_printf
 18739                                  path1:
 18740 00001F02 06                      	push	es
 18741 00001F03 1F                      	pop	ds
 18742 00001F04 83EF05                  	sub	di,5
 18743 00001F07 89FE                    	mov	si,di
 18744 00001F09 E8AD04                  	call	SCASB2		; Look for null
 18745                                  	;cmp	cx,0FFh ; 255
 18746                                  	; 21/02/2023
 18747                                  	;ch = 0
 18748 00001F0C 80F9FF                  	cmp	cl,255
 18749 00001F0F 74E7                    	je	short path0
 18750 00001F11 0E                      	push	cs
 18751 00001F12 07                      	pop	es
 18752 00001F13 BF[318C]                	mov	di,Arg_Buf
 18753                                  	;mov	dx,100h ; 256
 18754                                  	;sub	dx,cx
 18755                                  	;xchg	dx,cx
 18756                                  	; 21/02/2023
 18757 00001F16 F6D9                    	neg	cl ; 256-cl
 18758 00001F18 F3A4                    	rep	movsb
 18759 00001F1A BA[B880]                	mov	dx,arg_buf_ptr
 18760 00001F1D 0E                      	push	cs
 18761 00001F1E 1F                      	pop	ds
 18762 00001F1F E9CD2E                  	jmp	std_printf
 18763                                  
 18764                                  ; ---------------------------------------------------------------------------
 18765                                  
 18766                                  ; ****************************************************************
 18767                                  ; *
 18768                                  ; * ROUTINE:	 CLS
 18769                                  ; *
 18770                                  ; * FUNCTION:	 Clear the screen using INT 10h. If ANSI.SYS is
 18771                                  ; *		 installed, send a control string to clear the
 18772                                  ; *		 screen.
 18773                                  ; *
 18774                                  ; * INPUT:	 command line at offset 81H
 18775                                  ; *
 18776                                  ; * OUTPUT:	 none
 18777                                  ; *
 18778                                  ; ****************************************************************
 18779                                  
 18780                                  	; MSDOS 6.0
 18781                                  
 18782                                  ANSI_installed	equ 0FFh
 18783                                  
 18784                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 18785                                  CLS:
 18786                                  	;;mov	ah,Mult_ANSI		;AN000; see if ANSI.SYS installed
 18787                                  	;mov	ah,1Ah
 18788                                  	;mov	al,0			;AN000;
 18789 00001F22 B8001A                  	mov	ax,1A00h
 18790 00001F25 CD2F                    	int	2Fh			;AN000;
 18791                                  		; - Multiplex - DOS 4+ ANSI.SYS internal - INSTALLATION CHECK
 18792                                  		; Return: AL = FFh if installed
 18793 00001F27 3CFF                    	cmp	al,ANSI_installed	;AN000;
 18794 00001F29 7429                    	je	short ansicls 		;AN000; installed - go do ANSI CLS
 18795                                  
 18796                                  check_lines:
 18797                                  	;mov	ax,(IOCTL SHL 8) + generic_ioctl_handle ; 440Ch
 18798 00001F2B B80C44                  	mov	ax,440Ch		;AN000; get lines per page on display
 18799                                  	;mov	bx,stdout		;AN000; lines for stdout
 18800 00001F2E BB0100                  	mov	bx,1   ; handle
 18801                                  	;;mov	ch,ioc_sc		;AN000; type is display
 18802                                  	;mov	ch,3   ; CON device	
 18803                                  	;;mov	cl,get_generic		;AN000; get information
 18804                                  	;mov	cl,7Fh ; minor function, get display info
 18805                                  	; 25/04/2023
 18806 00001F31 B97F03                  	mov	cx,037Fh
 18807 00001F34 BA[0B8E]                	mov	dx,Display_Ioctl	;AN000;
 18808 00001F37 CD21                    	int	21h			;AN000;
 18809 00001F39 720A                    	jc	short no_variable	;AN000; function had error, use default
 18810                                  		; 21/02/2023
 18811                                  		; ds:dx = parameter block
 18812                                  		; --- https://stanislavs.org/helppc/int_21-44-c.html ---
 18813                                  		; offset 00h  byte  level (0 for DOS 4.0)
 18814                                  		;   	 01h  byte  reserved
 18815                                  		;   	 02h  word  length of following data
 18816                                  		;   	 04h  word  control flags
 18817                                  		;	       bit 0 set for blink, clear for intensity
 18818                                  		;	       bits 1 to 15 reserved
 18819                                  		;   	 06h  byte  mode type (1=text, 2=graphics)
 18820                                  		;   	 07h  byte  reserved
 18821                                  		;   	 08h  word  colors; 0=monochrome, n=bits per pixel
 18822                                  		;   	 0Ah  word  pixel columns
 18823                                  		;   	 0Ch  word  pixel rows
 18824                                  		;   	 0Eh  word  character columns
 18825                                  		;   	 10h  word  character rows
 18826                                  	
 18827                                  	;mov	ax,[LinPerPag] ; [Display_Ioctl+10h]
 18828                                  	;				;AN000; get number of rows returned
 18829                                  	;mov	dh,al			;AN000; set number of rows
 18830                                  	;mov	ax,[display_width] ; [Display_Ioctl+0Eh]
 18831                                  	;				;AN000; get number of columns returned
 18832                                  	;mov	dl,al			;AN000; set number of columns
 18833                                  	; 21/02/2023
 18834 00001F3B 8A16[198E]              	mov	dl,[display_width]
 18835 00001F3F 8A36[1B8E]              	mov	dh,[LinPerPag]
 18836 00001F43 EB3B                    	jmp	short regcls		;AN000; go do cls
 18837                                  
 18838                                  no_variable:
 18839                                  	;;mov	bx,stdout		;AC000; set handle as stdout
 18840                                  	;mov	bx,1
 18841                                  	; bx = 1
 18842                                  	;mov	ax,IOCTL SHL 8		;AC000; do ioctl - get device info
 18843 00001F45 B80044                  	mov	ax,4400h
 18844 00001F48 CD21                    	int	21h			;AC000;
 18845 00001F4A F6C280                  	test	dl,80h
 18846                                  	;test	dl,devid_ISDEV		;AC000; is handle a device
 18847 00001F4D 7405                    	jz	short ansicls 		;AC000; If a file put out ANSI
 18848 00001F4F F6C210                  	test	dl,10h
 18849                                  	;test	dl,devid_SPECIAL	;AC000;
 18850 00001F52 7505                    	jnz	short cls_normal	;AC000; If not special CON, do ANSI
 18851                                  
 18852                                  ansicls:
 18853 00001F54 E85200                  	call	ansi_cls		;AN000; clear the screen
 18854 00001F57 EB2C                    	jmp	short cls_ret		;AN000; exit
 18855                                  
 18856                                  ; Get video mode
 18857                                  
 18858                                  cls_normal:				;AC000;
 18859                                  	;mov	ah,get_video_state	;AC000; set up to get video state
 18860 00001F59 B40F                    	mov	ah,0Fh
 18861                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 18862 00001F5B CD10                    	int	10h
 18863 00001F5D 3C03                    	cmp	al,3
 18864                                  	;cmp	al,video_alpha		;AC000; see if in text mode
 18865 00001F5F 760A                    	jbe	short DoAlpha
 18866 00001F61 3C07                    	cmp	al,7
 18867                                  	;cmp	al,video_bw		;AC000; see if black & white card
 18868 00001F63 7406                    	je	short DoAlpha
 18869                                  
 18870                                  ; We are in graphics mode. Bogus IBM ROM does not scroll correctly. We will
 18871                                  ; be just as bogus and set the mode that we just got. This will blank the
 18872                                  ; screen too.
 18873                                  
 18874                                  	;mov	ah,set_video_mode	;AC000; set video mode call
 18875 00001F65 B400                    	mov	ah,0
 18876                                  	;int	video_io_int		;AC000; do int 10h - BIOS video IO
 18877 00001F67 CD10                    	int	10h
 18878 00001F69 EB1A                    	jmp	short cls_ret		;AC000; exit
 18879                                  
 18880                                  DoAlpha:
 18881                                  
 18882                                  ; Get video mode and number of columns to scroll
 18883                                  
 18884                                  ;M01 - INT 10 Function 0F doesn't reliably return the number of rows on some
 18885                                  ;M01   adaptors. We circumvent this by reaching directly into the BIOS data
 18886                                  ;M01   area
 18887                                  ;M01   Commented out code here is the original
 18888                                  ;M01	mov	ah,get_video_state	;AC000; set up to get current video state
 18889                                  ;M01	int	video_io_int		;AC000; do int 10h - BIOS video IO
 18890                                  ;M01	mov	dl,ah
 18891                                  ;M01	mov	dh,linesperpage 	;AC000; have 25 rows on the screen
 18892                                  
 18893                                  ;M01   Following code lifted from a fix Compaq applied to ANSI
 18894                                  
 18895 00001F6B 1E                      	push	ds
 18896                                  	;mov	ax,ROMBIOS_DATA 	; GET ROM Data segment	M01
 18897 00001F6C B84000                  	mov	ax,40h
 18898 00001F6F 8ED8                    	mov	ds,ax			;  *			M01
 18899                                  
 18900                                  	;mov	dx,[CRT_Cols]		; Get Columns - assume < 256 M01
 18901 00001F71 8A164A00                	mov	dl,[4Ah]
 18902                                  	;mov	dh,[CRT_Rows]		; GET MAX NUM OF ROWS	M01
 18903 00001F75 8A368400                	mov	dh,[84h]
 18904 00001F79 1F                      	pop	ds			;			M01
 18905                                  
 18906 00001F7A 08F6                    	or	dh,dh			; Q:ZERO		M01
 18907 00001F7C 7502                    	jnz	short regcls		;  *JMP IF NO		M01
 18908                                  
 18909                                  	;mov	dh,LINESPERPAGE 	; SET TO 24 ROWS	M01
 18910                                  	; 25/04/2023
 18911 00001F7E B619                    	mov	dh,25
 18912                                  regcls:
 18913 00001F80 FEC6                    	inc	dh			; height+1		M018
 18914 00001F82 E80100                  	call	reg_cls 		; go clear the screen
 18915                                  cls_ret:
 18916 00001F85 C3                      	retn				; exit
 18917                                  
 18918                                  ; ---------------------------------------------------------------------------
 18919                                  
 18920                                  ; 21/02/2023
 18921                                  %if 0
 18922                                  	; MSDOS 3.3
 18923                                  CLS:
 18924                                  	mov	bx,STDOUT ; 1
 18925                                  	mov	ax,IOCTL*256 ; 4400h
 18926                                  	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 18927                                  			; BX = file or device handle
 18928                                  	test	dl,80h	; devid_ISDEV
 18929                                  	jz	short ANSICLS	; If a file put out ANSI
 18930                                  	test	dl,10h  ; devid_SPECIAL
 18931                                  	jz	short ANSICLS	; If not special CON, do ANSI
 18932                                  
 18933                                  	mov	ax,(GET_INTERRUPT_VECTOR<<8)|29h ; 3529h
 18934                                  	int	21h	; DOS -	2+ - GET INTERRUPT VECTOR
 18935                                  			; AL = interrupt number
 18936                                  			; Return: ES:BX	= value	of interrupt vector
 18937                                  	mov	dx,es
 18938                                  	mov	ax,(GET_INTERRUPT_VECTOR<<8)|20h ; 3520h
 18939                                  	int	21h	; DOS -	2+ - GET INTERRUPT VECTOR
 18940                                  			; AL = interrupt number
 18941                                  			; Return: ES:BX	= value	of interrupt vector
 18942                                  	mov	ax,es
 18943                                  	cmp	dx,ax	; If not default driver, do ANSI
 18944                                  	ja	short ANSICLS
 18945                                  
 18946                                  	mov	ah,0Fh
 18947                                  	int	10h	; - VIDEO - GET	CURRENT	VIDEO MODE
 18948                                  			; Return: AH = number of columns on screen
 18949                                  			; AL = current video mode
 18950                                  			; BH = current active display page
 18951                                  	cmp	al,3
 18952                                  	jbe	short DOALPHA
 18953                                  	cmp	al,7
 18954                                  	jz	short DOALPHA
 18955                                  	mov	ah,0
 18956                                  	int	10h	; - VIDEO - SET	VIDEO MODE
 18957                                  			; AL = mode
 18958                                  	retn
 18959                                  
 18960                                  DOALPHA:
 18961                                  	mov	ah,0Bh	; Set overscan to black
 18962                                  	xor	bx,bx
 18963                                  	int	10h	; - VIDEO - SET	COLOR PALETTE
 18964                                  			; BH = 00h, BL = border color
 18965                                  			; BH = 01h, BL = palette (0-3)
 18966                                  	mov	ah,0Fh
 18967                                  	int	10h	; - VIDEO - GET	CURRENT	VIDEO MODE
 18968                                  			; Return: AH = number of columns on screen
 18969                                  			; AL = current video mode
 18970                                  			; BH = current active display page
 18971                                  	mov	dl,ah
 18972                                  	dec	dl
 18973                                  	mov	dh,24
 18974                                  	xor	ax,ax
 18975                                  	mov	cx,ax
 18976                                  	mov	bx,700h
 18977                                  	mov	ah,6
 18978                                  	int	10h	; - VIDEO - SCROLL PAGE	UP
 18979                                  			; AL = number of lines to scroll window	
 18980                                  			;	(0 = blank whole window)
 18981                                  			; BH = attributes to be	used on	blanked	lines
 18982                                  			; CH,CL	= row,column of	upper left corner of window 
 18983                                  			;	  to scroll
 18984                                  			; DH,DL	= row,column of	lower right corner of window
 18985                                  	xor	dx,dx
 18986                                  	mov	bh,0
 18987                                  	mov	ah,2
 18988                                  	int	10h	; - VIDEO - SET	CURSOR POSITION
 18989                                  			; DH,DL	= row,column (0,0 = upper left)
 18990                                  			; BH = page number
 18991                                  	retn
 18992                                  
 18993                                  ANSICLS:
 18994                                  	mov	si,CLSSTRING
 18995                                  	lodsb
 18996                                  	mov	cl,al
 18997                                  	xor	ch,ch
 18998                                  	mov	ah,RAW_CON_IO ; 6
 18999                                  CLRLOOP:
 19000                                  	lodsb
 19001                                  	mov	dl,al
 19002                                  	int	21h	; DOS -	DIRECT CONSOLE I/O CHARACTER OUTPUT
 19003                                  			; DL = character <> FFh
 19004                                  			;  Return: ZF set = no character
 19005                                  			;   ZF clear = character recieved, AL = character
 19006                                  	loop	CLRLOOP
 19007                                  	retn
 19008                                  %endif
 19009                                  
 19010                                  ; ---------------------------------------------------------------------------
 19011                                  
 19012                                  ; MSDOS 6.0
 19013                                  
 19014                                  ; ****************************************************************
 19015                                  ; *
 19016                                  ; * ROUTINE:	 REG_CLS
 19017                                  ; *
 19018                                  ; * FUNCTION:	 Clear the screen using INT 10H.
 19019                                  ; *
 19020                                  ; * INPUT:	 DL = NUMBER OF COLUMNS
 19021                                  ; *		 DH = NUMBER OF ROWS
 19022                                  ; *
 19023                                  ; * OUTPUT:	 none
 19024                                  ; *
 19025                                  ; ****************************************************************
 19026                                  
 19027                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19028                                  reg_cls:
 19029                                  ; Set overscan to black.
 19030                                  
 19031 00001F86 FECE                    	dec	dh			; decrement rows and columns
 19032 00001F88 FECA                    	dec	dl			;  to zero base
 19033 00001F8A 52                      	push	dx			; save rows,columns
 19034                                  	;mov	ah,set_color_palette	; set up to set the color to blank
 19035 00001F8B B40B                    	mov	ah,0Bh
 19036 00001F8D 31DB                    	xor	bx,bx
 19037                                  	;int	video_io_int		; do int 10h - BIOS video IO
 19038 00001F8F CD10                    	int	10h
 19039 00001F91 5A                      	pop	dx			;  restore rows,colums
 19040                                  
 19041 00001F92 31C0                    	xor	ax,ax			; zero out ax
 19042 00001F94 89C1                    	mov	cx,ax			;  and cx
 19043                                  
 19044                                  ; Scroll active page
 19045                                  
 19046                                  	;mov	ah,scroll_video_page	; set up to scroll page up
 19047 00001F96 B406                    	mov	ah,6
 19048                                  	;mov	bh,video_attribute	; attribute for blank line
 19049 00001F98 B707                    	mov	bh,7
 19050 00001F9A 30DB                    	xor	bl,bl			; set BL to 0
 19051                                  	;int	video_io_int		; do int 10h - BIOS video IO
 19052 00001F9C CD10                    	int	10h
 19053                                  
 19054                                  ; Seek to cursor to 0,0
 19055                                  
 19056                                  ;M022 following two lines added
 19057                                  	;mov	ah,get_video_state	; get current video page in BH
 19058 00001F9E B40F                    	mov	ah,0Fh
 19059                                  	;int	video_io_int
 19060 00001FA0 CD10                    	int	10h
 19061                                  	;mov	ah,set_cursor_position	; set up to set cursor position
 19062 00001FA2 B402                    	mov	ah,2
 19063 00001FA4 31D2                    	xor	dx,dx			; row and column 0
 19064                                  ;M022	mov	bh,0
 19065                                  	;int	video_io_int		; do into 10h - BIOS video IO
 19066 00001FA6 CD10                    	int	10h
 19067                                  
 19068 00001FA8 C3                      	retn
 19069                                  
 19070                                  ; ---------------------------------------------------------------------------
 19071                                  
 19072                                  ; MSDOS 6.0
 19073                                  
 19074                                  ; ****************************************************************
 19075                                  ; *
 19076                                  ; * ROUTINE:	 ANSI_CLS
 19077                                  ; *
 19078                                  ; * FUNCTION:	 Clear the screen using by writing a control code
 19079                                  ; *		 to STDOUT.
 19080                                  ; *
 19081                                  ; * INPUT:	 none
 19082                                  ; *
 19083                                  ; * OUTPUT:	 none
 19084                                  ; *
 19085                                  ; ****************************************************************
 19086                                  
 19087                                  	; 21/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19088                                  ansi_cls:			;AC000;
 19089 00001FA9 BE[8782]                	mov	si,CLSSTRING
 19090                                  			; db 4,1Bh,'[2J'
 19091 00001FAC AC                      	lodsb
 19092 00001FAD 88C1                    	mov	cl,al	; al = 4
 19093 00001FAF 30ED                    	xor	ch,ch
 19094                                  	;mov	ah,Raw_CON_IO
 19095 00001FB1 B406                    	mov	ah,6
 19096                                  clrloop:
 19097 00001FB3 AC                      	lodsb
 19098 00001FB4 88C2                    	mov	dl,al
 19099 00001FB6 CD21                    	int	21h
 19100                                  		; DOS - DIRECT CONSOLE I/O CHARACTER OUTPUT
 19101 00001FB8 E2F9                    	loop	clrloop
 19102 00001FBA C3                      	retn
 19103                                  
 19104                                  ;============================================================================
 19105                                  ; TCMD2B.ASM, MSDOS 6.0, 1991
 19106                                  ;============================================================================
 19107                                  ; 08/10/2018 - Retro DOS v3.0
 19108                                  
 19109                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 156Dh
 19110                                  
 19111                                  ; 21/02/2023 - Retro DOS v4.0 (& v4.1)
 19112                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 206Bh
 19113                                  
 19114                                  ; ---------------------------------------------------------------------------
 19115                                  
 19116                                  ; ****************************************************************
 19117                                  ; *
 19118                                  ; * ROUTINE:	 CTTY - Change console
 19119                                  ; *
 19120                                  ; * SYNTAX:	 CTTY device
 19121                                  ; *
 19122                                  ; * FUNCTION:	 If a valid console device is specified, CTTY will
 19123                                  ; *		 duplicate the device handle to STDIN, STDOUT and
 19124                                  ; *		 STDERR. This routine returns to LODCOM1.
 19125                                  ; *
 19126                                  ; * INPUT:	 command line at offset 81H
 19127                                  ; *
 19128                                  ; * OUTPUT:	 none
 19129                                  ; *
 19130                                  ; ****************************************************************
 19131                                  
 19132                                  	; 21/02/2023 - Retro DOS v4.0
 19133                                  	; 10/06/2023
 19134                                  CTTY:
 19135                                  	; MSDOS 6.0
 19136 00001FBB 1E                      	push	ds			;AN000; Get local ES
 19137 00001FBC 07                      	pop	es			;AN000;
 19138 00001FBD BE8100                  	mov	si,81h			;AC000; Get command argument for CTTY
 19139 00001FC0 BF[9B85]                	mov	di,PARSE_CTTY
 19140                                  					;AC000; Get address of PARSE_CTTY
 19141 00001FC3 31C9                    	xor	cx,cx			;AC000; clear cx,dx
 19142 00001FC5 31D2                    	xor	dx,dx			;AC000;
 19143 00001FC7 E85423                  	call	cmd_parse		;AC000; call parser
 19144                                  
 19145                                  	;cmp	ax,-1 ; 0FFFFh
 19146                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 19147                                  	;je	short ctty_error	;AN000; yes - error
 19148                                  	;;cmp	ax,RESULT_NO_ERROR ; 0	;AN000; did an error occur
 19149                                  	;and	ax,ax ; ax > 0 ?
 19150                                  	;jnz	short ctty_error	;AN000; YES -ERROR
 19151                                  	; 10/06/2023
 19152 00001FCA 40                      	inc	ax  ; cmp ax,-1
 19153 00001FCB 7434                    	jz	short ctty_error  ; 0FFFFh -> 0
 19154 00001FCD 48                      	dec	ax  ; cmp ax,0
 19155 00001FCE 7531                    	jnz	short ctty_error  ; 1 -> 0
 19156                                  	; ax = 0
 19157                                  
 19158 00001FD0 56                      	push	si			;AN000; save position in line
 19159 00001FD1 C536[F895]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 19160 00001FD5 BF[348D]                	mov	di,SrcBuf		;AN000; get address of srcbuf
 19161                                  ctty_move_filename:			;AN000; put filespec in srcbuf
 19162 00001FD8 AC                      	lodsb				;AN000; get a char from buffer
 19163 00001FD9 AA                      	stosb				;AN000; store in srcbuf
 19164                                  	;cmp	al,END_OF_LINE_OUT ; 0	;AN000; it char a terminator?
 19165 00001FDA 08C0                    	or	al,al ; al = 0 ?
 19166 00001FDC 75FA                    	jnz	short ctty_move_filename ; 26/04/2023
 19167                                  					;AN000; no - keep moving
 19168 00001FDE 5E                      	pop	si			;AN000; get line position back
 19169 00001FDF BF[9B85]                	mov	di,PARSE_CTTY		;AC000; Get address of PARSE_CTTY
 19170 00001FE2 E8C001                  	call	parse_check_eol 	;AN000; are we at end of line?
 19171                                  	;jz	short nocolon 		;AN000; yes - continue
 19172                                  	; 21/02/2023
 19173 00001FE5 751A                    	jnz	short ctty_error
 19174                                  ;ctty_error:
 19175                                  	;jmp	short isbaddev		;AC000; yes - exit
 19176                                  
 19177                                  	; 21/02/2023
 19178                                  	; MSDOS 3.3
 19179                                  	;call	SETPATH
 19180                                  	;dec	si
 19181                                  	;dec	si
 19182                                  	;cmp	byte [si],':'
 19183                                  	;jnz	short NOCOLON
 19184                                  	;mov	byte [si],0
 19185                                  nocolon:
 19186                                  	; 21/02/2023
 19187                                  	; MSDOS 6.0
 19188 00001FE7 BA[348D]                	mov	dx,SrcBuf
 19189                                  ;NOCOLON:
 19190                                  	; MSDOS 3.3 & MSDOS 6.0
 19191                                  	;;mov	ax,(OPEN SHL 8) OR 2 ; Read and write
 19192                                  	;mov	ax,(OPEN<<8)|2 ; 3D02h
 19193 00001FEA B8023D                  	mov	ax,3D02h ; 21/02/2023
 19194 00001FED CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 19195                                  			; DS:DX	-> ASCIZ filename
 19196                                  			; AL = access mode
 19197                                  			; 2 - read & write
 19198 00001FEF 7210                    	jc	short isbaddev
 19199 00001FF1 89C3                    	mov	bx,ax
 19200                                  	;mov	ax,IOCTL*256 ; 4400h
 19201 00001FF3 B80044                  	mov	ax,4400h
 19202 00001FF6 CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 19203                                  			; BX = file or device handle
 19204 00001FF8 F6C280                  	test	dl,80h
 19205 00001FFB 750C                    	jnz	short devisok
 19206                                  closedev:
 19207                                  	;mov	ah,CLOSE ; 3Eh ; Close initial handle
 19208 00001FFD B43E                    	mov	ah,3Eh
 19209 00001FFF CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 19210                                  			; BX = file handle
 19211                                  ctty_error:
 19212                                  isbaddev:
 19213 00002001 BA[7680]                	mov	dx,BADDEV_PTR
 19214 00002004 E8E82D                  	call	std_printf
 19215 00002007 EB40                    	jmp	short resret
 19216                                  
 19217                                  	;nop
 19218                                  devisok:
 19219                                  	; 21/02/2023
 19220                                  	; MSDOS 6.0
 19221 00002009 52                      	push	dx		;AN007; save device info
 19222                                  	; 08/06/2023 (BugFix)
 19223 0000200A A1[FA80]                	mov	ax,[acrlf_ptr]	;AN021; get message number for 0d, 0a
 19224                                  	;mov	dh,util_msg_class
 19225 0000200D B6FF                    	mov	dh,-1 ; 0FFh	;AN021; this is a utility message
 19226 0000200F 53                      	push	bx		;AN021; save handle
 19227 00002010 E8C12E                  	call	TSYSGETMSG	;AN021; get the address of the message
 19228 00002013 89F2                    	mov	dx,si		;AN021; get address into dx
 19229                                  	;mov	ax,(Write shl 8)
 19230 00002015 B80040                  	mov	ax,4000h	;AN007; write to device
 19231 00002018 B90200                  	mov	cx,2		;AN007; write two bytes
 19232 0000201B CD21                    	int	21h		;AN007;
 19233 0000201D 5B                      	pop	bx		;AN021; get back handle
 19234 0000201E 5A                      	pop	dx		;AN007; get back device info
 19235 0000201F 72DC                    	jc	short closedev	;AN007; if error, quit
 19236                                  
 19237                                  	; MSDOS 3.3 & MSDOS 6.0
 19238 00002021 30F6                    	xor	dh,dh
 19239 00002023 80CA03                  	or	dl,3
 19240                                  	;;mov	ax,(IOCTL SHL 8) OR 1
 19241                                  	;mov	ax,(IOCTL<<8)|1 ; 4401h
 19242 00002026 B80144                  	mov	ax,4401h
 19243 00002029 CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 19244                                  			; BX = device handle,DH = 0
 19245                                  			; DL = device information to set 
 19246                                  			;	(bits 0-7 from	function 0)
 19247 0000202B 53                      	push	bx
 19248 0000202C B90300                  	mov	cx,3
 19249 0000202F 31DB                    	xor	bx,bx
 19250                                  iclloop:			; Close basic handles
 19251                                  	;mov	ah,CLOSE ; 3Eh
 19252 00002031 B43E                    	mov	ah,3Eh
 19253 00002033 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 19254                                  			; BX = file handle
 19255 00002035 43                      	inc	bx
 19256 00002036 E2F9                    	loop	iclloop
 19257 00002038 5B                      	pop	bx		; Get handle
 19258                                  	;mov	ah,XDUP ; 45h
 19259 00002039 B445                    	mov	ah,45h
 19260 0000203B CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 19261                                  			; BX = file handle to duplicate
 19262                                  	;mov	ah,XDUP ; 45h
 19263 0000203D B445                    	mov	ah,45h
 19264 0000203F CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 19265                                  			; BX = file handle to duplicate
 19266                                  	;mov	ah,XDUP ; 45h
 19267 00002041 B445                    	mov	ah,45h
 19268 00002043 CD21                    	int	21h	; DOS -	2+ - CREATE DUPLICATE HANDLE (DUP)
 19269                                  			; BX = file handle to duplicate
 19270                                  	;mov	ah,CLOSE ; 3Eh
 19271 00002045 B43E                    	mov	ah,3Eh
 19272 00002047 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 19273                                  			; BX = file handle
 19274                                  resret:
 19275 00002049 8E1E[C58A]              	mov	ds,[RESSEG]
 19276 0000204D 1E                      	push	ds
 19277                                  	;mov	ax,[18h]
 19278 0000204E A11800                  	mov	ax,[PDB.JFN_TABLE] ; Get new 0 and 1
 19279 00002051 A3[8A01]                	mov	[Io_Save],ax
 19280                                  	;;;mov	ax,31Eh ; MSDOS 3.3
 19281                                  	;;mov	ax,LODCOM1
 19282                                  	;;mov	ax,offset DATARES:TrnLodCom1_Trap  ; MSDOS 6.0
 19283                                  	;mov	ax,175h ; MSDOS 6.0
 19284 00002054 B8[7400]                	mov	ax,TrnLodCom1_Trap
 19285 00002057 50                      	push	ax
 19286                                  
 19287 00002058 CB                      	retf		; Far return
 19288                                  
 19289                                  ; ---------------------------------------------------------------------------
 19290                                  
 19291                                  ;****************************************************************
 19292                                  ;*
 19293                                  ;* ROUTINE:	CHCP - Change code page internal command
 19294                                  ;*		(added DOS 3.30 07/21/86)
 19295                                  ;*
 19296                                  ;* SYNTAX:	CHCP [xxx]
 19297                                  ;*		where xxx is a valid code page
 19298                                  ;*
 19299                                  ;* FUNCTION:	If xxx is specified, CHCP will use INT 21H function
 19300                                  ;*		6402H to set the code page to xxxx. If no parameters
 19301                                  ;*		are specified, CHCP will use INT 21H function 6401H
 19302                                  ;*		to get global code page and display it to the user.
 19303                                  ;*
 19304                                  ;* INPUT:	command line at offset 81H
 19305                                  ;*
 19306                                  ;* OUTPUT:	none
 19307                                  ;*
 19308                                  ;****************************************************************
 19309                                  
 19310                                  NLSFUNC_installed equ  0FFh
 19311                                  set_global_cp	  equ  2
 19312                                  get_global_cp	  equ  1
 19313                                  
 19314                                  	; 21/02/2023 - Retro DOS v4.0
 19315                                  	; 09/06/2023
 19316                                  	; 10/06/2023
 19317                                  CHCP:
 19318                                  	; MSDOS 6.0
 19319 00002059 1E                      	push	ds		;AN000; Get local ES
 19320 0000205A 07                      	pop	es		;AN000;
 19321 0000205B BE8100                  	mov	si,81h		;AC000; Get command argument for CHCP
 19322 0000205E BF[B284]                	mov	di,PARSE_CHCP
 19323                                  				;AN000; Get address of PARSE_CHCP
 19324 00002061 31C9                    	xor	cx,cx		;AC000; clear cx,dx
 19325 00002063 31D2                    	xor	dx,dx		;AC000;
 19326 00002065 E85301                  	call    Parse_With_Msg	;AC018; call parser
 19327                                  
 19328                                  	;cmp	ax,-1
 19329                                  	;;cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 19330                                  	;;jne	short setcp	;AC000; no go get number & set code page
 19331                                  	;je	short getcp	;AC000; yes - no parm - get code page
 19332                                  ;setcp:
 19333                                  	;;cmp	ax,0
 19334                                  	;;cmp	ax,RESULT_NO_ERROR
 19335                                  	;			;AN000; did we have an error?
 19336                                  	;;jne	short cp_error	;AC018; yes - go issue message
 19337                                  	;and	ax,ax ; ax > 0 ?
 19338                                  	;jnz	short cp_error	
 19339                                  	; 10/06/2023
 19340 00002068 40                      	inc	ax  ; cmp ax,-1	
 19341 00002069 745C                    	jz	short getcp ; 0FFFFh -> 0
 19342 0000206B 48                      	dec	ax  ; cmp ax,0
 19343 0000206C 7556                    	jnz	short cp_error ; 1 -> 0
 19344                                  	; ax = 0
 19345                                  
 19346                                  	;;push	cx		;AN000; save positional count
 19347                                  	;mov	bx,PARSE1_ADDR	;AN000; get number returned
 19348                                  	;;mov	cx,[bx]		;AN000;  into cx
 19349                                  	;;mov	[system_cpage],cx
 19350                                  	;			;AN000; save user input number
 19351                                  	;;pop	cx		;AC000; restore positional count
 19352                                  	;; 21/02/2023
 19353                                  	;mov	di,[bx]
 19354                                  	;mov	[system_cpage],di
 19355                                  	; 09/06/2023	
 19356 0000206E 8B1E[F895]              	mov	bx,[PARSE1_ADDR]
 19357 00002072 891E[2F8C]              	mov	[system_cpage],bx
 19358                                  	;
 19359 00002076 BF[B284]                	mov	di,PARSE_CHCP	;AN000; Get address of PARSE_CHCP
 19360 00002079 E82901                  	call	parse_check_eol ;AN000; are we at end of line?
 19361 0000207C 7546                    	jnz	short cp_error	;AC000; no - exit
 19362                                  okset:
 19363                                  	;;mov	ah,NLSFUNC	;AN000; see if NLSFUNC installed
 19364                                  	;mov	ah,14h
 19365                                  	;mov	al,0		;AN000;
 19366 0000207E B80014                  	mov	ax,1400h
 19367 00002081 CD2F                    	int	2Fh		;AN000;
 19368                                  	;cmp	al,0FFh
 19369 00002083 3CFF                    	cmp	al,NLSFUNC_installed
 19370                                  				;AN000;
 19371 00002085 7405                    	je	short got_NLS 	;AN000; Yes - continue
 19372 00002087 BA[A47F]                	mov	dx,NLSFUNC_PTR
 19373                                  				;AN000; no - set up error message
 19374 0000208A EB38                    	jmp	short cp_error	;AN000; error exit
 19375                                  
 19376                                  ; 21/02/2023
 19377                                  %if 0
 19378                                  	; MSDOS 3.3
 19379                                  	mov	si,81h
 19380                                  	call	SCANOFF
 19381                                  	cmp	al,0Dh ; CR
 19382                                  	jnz	short SETCP
 19383                                  	jmp	short GETCP
 19384                                  
 19385                                  	;nop
 19386                                  SETCP:
 19387                                  	xor	bx,bx
 19388                                  	mov	cx,bx
 19389                                  	mov	ax,bx
 19390                                  GET_CP_DIGIT:
 19391                                  	lodsb
 19392                                  	cmp	al,'0'
 19393                                  	jb	short CHRNOTNUMBER
 19394                                  	cmp	al,'9'
 19395                                  	ja	short CHRNOTNUMBER
 19396                                  	sub	al,'0'
 19397                                  	inc	cl
 19398                                  	cmp	cl,4
 19399                                  	ja	short CHCP_BADPARM
 19400                                  	mov	dx,bx
 19401                                  	shl	dx,1
 19402                                  	shl	dx,1
 19403                                  	add	bx,dx
 19404                                  	shl	bx,1
 19405                                  	add	bx,ax
 19406                                  	jmp	short GET_CP_DIGIT
 19407                                  CP_NEXTCHR:
 19408                                  	lodsb
 19409                                  CHRNOTNUMBER:
 19410                                  	cmp	al,' '		; SPACE
 19411                                  	jz	short CP_NEXTCHR
 19412                                  	cmp	al,9		; TAB
 19413                                  	jz	short CP_NEXTCHR
 19414                                  	cmp	al,0Dh		; CR
 19415                                  	jz	short SET_CP_TBL_NUM
 19416                                  CHCP_BADPARM:
 19417                                  	mov	dx,BADPARMPTR
 19418                                  	jmp	CERROR
 19419                                  ;GOT_NLS:
 19420                                  %endif
 19421                                  	; 21/02/2023
 19422                                  got_NLS:
 19423                                  	; MSDOS 6.0
 19424 0000208C 8B1E[2F8C]              	mov	bx,[system_cpage]
 19425                                  				;AN000; get user input code page
 19426                                  ;SET_CP_TBL_NUM:
 19427                                  	;mov	[SYSTEM_CPAGE],bx ; MSDOS 3.3
 19428                                  	;
 19429                                  	; MSDOS 3.3 & MSDOS 6.0
 19430                                  	;;mov	ah,GETSETCDPG 	;get/set global code page function
 19431                                  	;mov	ah,66h
 19432                                  	;;mov	al,set_global_cp 
 19433                                  	;mov	al,2		;minor - set
 19434                                  	; 26/04/2023
 19435 00002090 B80266                  	mov	ax,6602h
 19436 00002093 CD21                    	int	21h
 19437                                  		; DOS - 3.3+ - SET GLOBAL CODE PAGE TABLE
 19438                                  		; BX = active code page
 19439                                  		; DX = system code page (active page at boot time)
 19440                                  
 19441 00002095 733F                    	jnc	short chcp_return
 19442                                  				;no error - exit
 19443                                  
 19444 00002097 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ; 2
 19445 0000209A 7515                    	jnz	short chcp_other_error
 19446                                  
 19447                                  	;mov	ah,GETEXTENDEDERROR ; 59h
 19448 0000209C B459                    	mov	ah,59h
 19449 0000209E 31DB                    	xor	bx,bx
 19450 000020A0 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 19451                                  			; BX = version code (0000h for DOS 3.x)
 19452                                  
 19453 000020A2 83F80D                  	cmp	ax,ERROR_INVALID_DATA ; 0Dh ; invalid code page
 19454 000020A5 7505                    	jne	short no_countrysys ; 26/04/2023
 19455                                  	;mov	dx,FNOTFOUNDPTR ; MSDOS 3.3
 19456 000020A7 BA[A77F]                	mov	dx,INV_CODE_PAGE
 19457                                  	;jmp	cerror
 19458 000020AA EB18                    	jmp	short cp_error
 19459                                  
 19460                                  	; 21/02/2023
 19461                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 19462                                  no_countrysys:
 19463                                  ;M045;	mov	byte [msg_disp_class],ext_msg_class	   
 19464                                  ;					;AN000; set up extended error msg class
 19465                                  ;M045;	mov	dx,extend_buf_ptr	;AC000; get extended message pointer
 19466                                  ;M045;	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND
 19467                                  					;AN000; get message number in control block
 19468 000020AC BA[8881]                	mov	dx,NoCntry_Ptr
 19469 000020AF EB13                    	jmp	short cp_error
 19470                                  
 19471                                  chcp_other_error:		; end of p716
 19472                                  	;mov	ah,GETEXTENDEDERROR ; 59h ;error - see what it is
 19473 000020B1 B459                    	mov	ah,59h
 19474 000020B3 31DB                    	xor	bx,bx
 19475 000020B5 CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 19476                                  			; BX = version code (0000h for DOS 3.x)
 19477 000020B7 83F841                  	cmp	ax,65		;was it access denied?
 19478 000020BA 7505                    	jne	short none_set	;no - assume all failed
 19479 000020BC BA[887F]                	mov	dx,cp_not_all_ptr
 19480                                  				;set up message
 19481                                  	;jmp	cerror		;AC000; error exit
 19482 000020BF EB03                    	jmp     short cp_error
 19483                                  none_set:
 19484 000020C1 BA[7A7F]                	mov	dx,cp_not_set_ptr
 19485                                  				;set up message
 19486                                  cp_error:
 19487 000020C4 E98D08                  	jmp	cerror		;exit
 19488                                  getcp:
 19489                                  	;;mov	ah,GETSETCDPG ; 66h
 19490                                  	;mov	ah,66h		;get/set global code page function	
 19491                                  	;;mov	al,get_global_cp ; 1
 19492                                  	;mov	al,1		;minor - get
 19493                                  	; 26/04/2023
 19494 000020C7 B80166                  	mov	ax,6601h
 19495 000020CA CD21                    	int	21h	; DOS -	3.3+ - GET GLOBAL CODE PAGE TABLE
 19496 000020CC 891E[2F8C]              	mov	[system_cpage],bx
 19497                                  				;get active cp for output
 19498 000020D0 BA[967F]                	mov	dx,cp_active_ptr
 19499 000020D3 E8192D                  	call	std_printf	;print it out
 19500                                  chcp_return:
 19501 000020D6 C3                      	retn
 19502                                  
 19503                                  ; ---------------------------------------------------------------------------
 19504                                  
 19505                                  ; ****************************************************************
 19506                                  ; *
 19507                                  ; * ROUTINE:	 TRUENAME
 19508                                  ; *
 19509                                  ; * FUNCTION:	 Entry point for the internal TRUENAME command.
 19510                                  ; *		 Parses the command line. If a path is found, set
 19511                                  ; *		 SRCXNAME to path. If only a drive letter is found,
 19512                                  ; *		 set SRCXNAME to the drive letter. If no path
 19513                                  ; *		 is found, set the path of SRCXNAME to dot (.) for
 19514                                  ; *		 current directory. Use the NAME TRANSLATE system
 19515                                  ; *		 call to get the real name and  then display the 
 19516                                  ; *		 real name. If an error occurs issue an error
 19517                                  ; *		 message and transfer control to  CERROR.
 19518                                  ; *
 19519                                  ; * INPUT:	 command line at offset 81H
 19520                                  ; *
 19521                                  ; * OUTPUT:	 none
 19522                                  ; *
 19523                                  ; ****************************************************************
 19524                                  
 19525                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19526                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2197h
 19527                                  	; 10/06/2023
 19528                                  TRUENAME:				;AN000; TRUENAME entry point
 19529 000020D7 1E                      	push	ds			;AN000; Get local ES
 19530 000020D8 07                      	pop	es			;AN000;
 19531 000020D9 BE8100                  	mov	si,81h			;AN000; Get command line
 19532 000020DC BF[1085]                	mov	di,PARSE_CHDIR		;AN000; Get address of PARSE_CHDIR
 19533 000020DF 31C9                    	xor	cx,cx			;AN000; clear cx,dx
 19534 000020E1 31D2                    	xor	dx,dx			;AN000;
 19535 000020E3 E8D500                  	call	Parse_With_Msg		;AC018; call parser
 19536                                  
 19537 000020E6 BF[F387]                	mov	di,SRCXNAME		;AN000; get address of srcxname
 19538                                  	;cmp	ax,0FFFFh
 19539                                  	;;cmp	ax,END_OF_LINE		;AN000; are we at end of line?
 19540                                  	;je	short tn_eol		;AN000; yes - go process
 19541                                  	;; 22/02/2023
 19542                                  	;;cmp	ax,0
 19543                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 19544                                  	;;jne	short tn_parse_error	;AN000; yes - go issue message
 19545                                  	;and	ax,ax ; ax = 0 ?
 19546                                  	;jnz	short tn_parse_error ; no, parse error
 19547                                  	; 10/06/2023
 19548 000020E9 40                      	inc	ax  ; 0FFFFh -> 0 ; cmp ax,0FFFFh
 19549 000020EA 7433                    	jz	short tn_eol ; ah = 0 ; *
 19550 000020EC 48                      	dec	ax  ; 1 -> 0 ; cmp ax, 0
 19551 000020ED 752D                    	jnz	short tn_parse_error
 19552                                  
 19553                                  	;cmp	byte [PARSE1_TYPE],6
 19554 000020EF 803E[F495]06            	cmp	byte [PARSE1_TYPE],result_drive
 19555                                  					;AN000; was a drive entered?
 19556                                  	;je	short tn_drive		;AN000; yes - go process
 19557                                  	;jmp	short tn_filespec	;AN000; nothing else - must be filespec
 19558                                  	; 23/02/2023
 19559 000020F4 7512                    	jne	short tn_filespec
 19560                                  
 19561                                  ;tn_eol: 
 19562                                  ;	;mov	ah,0			;AN000; no parameters on line
 19563                                  ;	mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 19564                                  ;	;mov	al,dot_chr		;AN000;   for current dir
 19565                                  ;	mov	al,'.'
 19566                                  ;	stosw				;AN000; store in srcxname
 19567                                  ;	jmp	short tn_doit		;AN000; go do command
 19568                                  
 19569                                  tn_drive:				;AN000; a drive was entered
 19570 000020F6 56                      	push	si			;AN000; save position in line
 19571 000020F7 BE[F895]                	mov	si,PARSE1_ADDR		;AN000; get address of drive
 19572 000020FA AC                      	lodsb				;AN000; get the drive number
 19573 000020FB 0440                    	add	al,"A"-1 ; 40h		;AN000; convert it to char
 19574 000020FD AA                      	stosb				;AN000; store it in srcxname
 19575                                  	;mov	ax,dot_colon		;AN000; get colon and . and
 19576 000020FE B83A2E                  	mov	ax,':.' ; 2E3Ah ; ah=".", al=":"
 19577 00002101 AB                      	stosw				;AN000;  store in srcxname
 19578                                  	;mov	al,0
 19579 00002102 B000                    	mov	al,END_OF_LINE_OUT	;AN000; put a terminator char
 19580 00002104 AA                      	stosb				;AN000;
 19581 00002105 5E                      	pop	si			;AN000; get line position back
 19582 00002106 EB0C                    	jmp	short tn_check_eol	;AN000; check to make sure eol
 19583                                  
 19584                                  tn_filespec:				;AN000; a filespec was entered
 19585 00002108 56                      	push	si			;AN000; save position in line
 19586 00002109 C536[F895]              	lds	si,[PARSE1_ADDR]	;AN000; get address of filespec
 19587                                  
 19588                                  tn_move_filename:			;AN000; put filespec in srcxname
 19589 0000210D AC                      	lodsb				;AN000; get a char from buffer
 19590 0000210E AA                      	stosb				;AN000; store in srcxname
 19591                                  	;;cmp	al,0
 19592                                  	;cmp	al,END_OF_LINE_OUT	;AN000; it char a terminator?
 19593 0000210F 08C0                    	or	al,al ; al = 0 ?
 19594 00002111 75FA                    	jnz	short tn_move_filename	;AN000; no - keep moving
 19595 00002113 5E                      	pop	si			;AN000; get line position back
 19596                                  
 19597                                  tn_check_eol:				;AN000; make sure no extra parms
 19598 00002114 BF[1085]                	mov	di,PARSE_CHDIR		;AN000; get address of parse_chdir
 19599 00002117 E88B00                  	call	parse_check_eol 	;AN000; are we at end of line?
 19600 0000211A 7406                    	jz	short tn_doit 		;AN000; Yes - do the command
 19601                                  tn_parse_error: 			;AN000; A parse error occurred
 19602 0000211C E93508                  	jmp	cerror			;AN000; Go to error routine
 19603                                  
 19604                                  tn_eol: 
 19605                                  	;23/02/2023
 19606                                  	;;mov	ah,0			;AN000; no parameters on line
 19607                                  	;mov	ah,END_OF_LINE_OUT	;AN000; set buffer to .
 19608                                  	;;mov	al,dot_chr		;AN000;   for current dir
 19609                                  	;mov	al,'.'
 19610                                  	; 10/06/2023
 19611                                  	;mov	ax,002Eh
 19612                                  	; ah = 0 ; *
 19613 0000211F B02E                    	mov	al,'.'  ;dot_chr ; 2Eh
 19614                                  	;
 19615 00002121 AB                      	stosw				;AN000; store in srcxname
 19616                                  	; 23/02/2023
 19617                                  	;jmp	short tn_doit		;AN000; go do command
 19618                                  
 19619                                  tn_doit:				;AN000;
 19620 00002122 BE[F387]                	mov	si,SRCXNAME		;AN000; set up srcxname as source
 19621 00002125 BF[2489]                	mov	di,COMBUF		;AN000; set up combuf as target (need big target)
 19622                                  	;mov	ah,xNameTrans		;AN000; do name translate call
 19623 00002128 B460                    	mov	ah,60h
 19624 0000212A CD21                    	int	21h			;AN000;
 19625 0000212C 7311                    	jnc	short tn_print_xname	;AN000; If no error - print result
 19626                                  
 19627 0000212E E8B1FB                  	call	Set_Ext_Error_Msg	;AN000; get extended message
 19628 00002131 C706[B58C][F387]        	mov	word [string_ptr_2],SRCXNAME
 19629                                  					;AN000; get address of failed string
 19630                                  	;mov	byte [extend_buf_sub],1
 19631 00002137 C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst
 19632                                  					;AN000; put number of subst in control block
 19633 0000213C E91508                  	jmp	cerror			;AN000; Go to error routine
 19634                                  
 19635                                  tn_print_xname: 			;AN000;
 19636 0000213F C706[B58C][2489]        	mov	word [string_ptr_2],COMBUF
 19637                                  					;AN000; Set up address of combuf
 19638 00002145 BA[E280]                	mov	dx,string_buf_ptr	;AN000; Set up address of print control block
 19639 00002148 E88804                  	call	CRLF2			;AN000; print a crlf
 19640                                  	;call	Printf_Crlf		;AN000; print it out
 19641                                  	;retn				;AN000;
 19642                                  	; 23/02/2023
 19643 0000214B E9932C                  	jmp	Printf_Crlf
 19644                                  
 19645                                  ; ---------------------------------------------------------------------------
 19646                                  
 19647                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19648                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2219h
 19649                                  _$EXIT:
 19650                                  	; MSDOS 6.0
 19651 0000214E 1E                      	push	ds			;AN000; save data segment
 19652 0000214F 8E1E[C58A]              	mov	ds,[RESSEG]		;AN000; get resident data segment
 19653                                  	;assume	ds:resgroup		;AN000;
 19654                                  
 19655 00002153 803E[8D01]00            	cmp	byte [PermCom],0	;AN045; is this a permanent COMMAND?
 19656 00002158 740A                    	jz	short free_com		;AN045; no - free everything
 19657                                  
 19658                                  ;	We're a permanent command.
 19659                                  ;	Unless this is a singlecom (int 2Eh), don't deallocate transient.
 19660                                  
 19661 0000215A 833E[8E01]FF            	cmp	word [SingleCom],-1	;M034
 19662 0000215F 7412                    	je	short no_reset		;M034 ; exit singlecom
 19663 00002161 E9A0DF                  	jmp	TCOMMAND		;permanent command, recycle
 19664                                  
 19665                                  free_com:
 19666                                  	;mov	ax,(multdos shl 8 or message_2f)
 19667 00002164 B82E12                  	mov	ax,122Eh		;AN060; reset parse message pointers
 19668                                  	;mov	dl,SET_CRITICAL_MSG	;AN000; set up critical error message address
 19669 00002167 B205                    	mov	dl,5
 19670 00002169 8B3E[A301]              	mov	di,[Crit_Msg_Off] 	;AN000; old offset of critical messages
 19671 0000216D 8E06[A501]              	mov	es,[Crit_Msg_Seg] 	;AN000; old segment of critical messages
 19672 00002171 CD2F                    	int	2Fh			;AN000; go set it
 19673                                  no_reset:				;AN045;
 19674 00002173 1F                      	pop	ds			;AN000; restore local data segment
 19675                                  	;assume	ds:trangroup		;AN000;
 19676                                  ;M040
 19677                                  ; Restore user directory if the restore flag is set. RestUDir1 checks for
 19678                                  ;this, restores user dir if flag is set and resets the flag.
 19679                                  
 19680                                  	;invoke	RestUDir1		;restore user dir if needed ;M040
 19681 00002174 E80C03                  	call	RestUDir1
 19682 00002177 8E06[C58A]              	mov	es,[RESSEG]
 19683                                  	;assume	es:resgroup
 19684                                  
 19685 0000217B 26A1[2901]              	mov	ax,[es:Parent]
 19686                                  	;mov	[es:16h],ax
 19687                                  	;mov	[es:PDB_Parent_PID],ax
 19688 0000217F 26A31600                	mov	[es:PDB.PARENT_PID],ax
 19689 00002183 26A1[2B01]              	mov	ax,[es:OldTerm]
 19690                                  	;mov	[es:0Ah],ax
 19691                                  	;mov	[es:PDB_Exit],ax
 19692 00002187 26A30A00                	mov	[es:PDB.EXIT],ax
 19693 0000218B 26A1[2D01]              	mov	ax,[es:OldTerm+2]
 19694                                  	;mov	[es:0Ch],ax
 19695                                  	;mov	[es:PDB_Exit+2],ax
 19696 0000218F 26A30C00                	mov	[es:PDB.EXIT+2],ax
 19697                                  
 19698 00002193 06                      	push	es
 19699 00002194 8E06[D58A]              	mov	es,[TRAN_TPA]
 19700                                  	;mov	ah,DEALLOC
 19701 00002198 B449                    	mov	ah,49h
 19702 0000219A CD21                    	int	21h			; Now running in "free" space
 19703 0000219C 07                      	pop	es
 19704                                  
 19705                                  	;mov	ah,Exit
 19706 0000219D B44C                    	mov	ah,4Ch
 19707                                  	;mov	al,byte ptr RetCode
 19708 0000219F 26A0[8501]              	mov	al,[es:RetCode]
 19709 000021A3 CD21                    	int	21h
 19710                                  
 19711                                  	;..........
 19712                                  
 19713                                  ; 23/02/2023
 19714                                  %if 0
 19715                                  _$EXIT:
 19716                                  	; MSDOS 3.3
 19717                                  	mov	es,[RESSEG]
 19718                                  	mov	ax,[es:PARENT]
 19719                                  	;mov	[es:16h],ax
 19720                                  	mov	[es:PDB.PARENT_PID],ax
 19721                                  	mov	ax,[es:OLDTERM]
 19722                                  	;mov	[es:0Ah],ax
 19723                                  	mov	[es:PDB.EXIT],ax
 19724                                  	mov	ax,[es:OLDTERM+2]
 19725                                  	;mov	[es:0Ch],ax
 19726                                  	mov	[es:PDB.EXIT+2],ax
 19727                                  	push	es
 19728                                  	mov	es,[TRAN_TPA]
 19729                                  	mov	ah,DEALLOC ; 49h
 19730                                  	int	21h	; DOS -	2+ - FREE MEMORY
 19731                                  			; ES = segment address of area to be freed
 19732                                  	pop	es
 19733                                  	mov	ah,EXIT ; 4Ch
 19734                                  	;mov	al,byte [0BEAh] ;  MSDOS 3.3 COMMAND.cOm offset 168Ah
 19735                                  	mov	al,byte [es:RETCODE]
 19736                                  	int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
 19737                                  ;;here:
 19738                                  ;;	jmp	short here
 19739                                  %endif
 19740                                  
 19741                                  ; ---------------------------------------------------------------------------
 19742                                  
 19743                                  ; MSDOS 6.0
 19744                                  ; ****************************************************************
 19745                                  ; *
 19746                                  ; * ROUTINE:	 PARSE_CHECK_EOL
 19747                                  ; *
 19748                                  ; * FUNCTION:	 Calls parser to see if end of line occurred.
 19749                                  ; *		 If not end of line, set up to print parse
 19750                                  ; *		 error message. ASSUMES NO MORE PARAMETERS ARE
 19751                                  ; *		 EXPECTED!
 19752                                  ; *
 19753                                  ; * INPUT:	 DS:SI	  last output from parser
 19754                                  ; *		 ES:DI	  points to parse block
 19755                                  ; *		 CX	  last output from parser
 19756                                  ; *
 19757                                  ; * OUTPUT:	 AX	  parser return code
 19758                                  ; *
 19759                                  ; *		 if end of line found
 19760                                  ; *		     zero flag set
 19761                                  ; *		 else
 19762                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 19763                                  ; *
 19764                                  ; ****************************************************************
 19765                                  
 19766                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19767                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2270h
 19768                                  
 19769                                  parse_check_eol:
 19770 000021A5 31D2                    	xor	dx,dx			;AN000;
 19771 000021A7 8936[2D8C]              	mov	[parse_last],si 	;AN018; save start of parameter
 19772 000021AB E87021                  	call	cmd_parse		;AN000; call parser
 19773 000021AE 3CFF                    	cmp	al,-1 ; 0FFh
 19774                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN000; Are we at end of line?
 19775 000021B0 7408                    	je	short parse_good_eol	;AN000; yes - no problem
 19776                                  	;cmp	ax,0
 19777                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; was any error found?
 19778 000021B2 21C0                    	and	ax,ax ; ax = 0 ?
 19779 000021B4 7501                    	jnz	short ok_to_setup_pmsg	;AN018; yes - continue
 19780 000021B6 40                      	inc	ax			;AN018; set AX to 1 and turn off zero flag
 19781                                  ok_to_setup_pmsg:
 19782 000021B7 E81000                  	call	setup_parse_error_msg	;AN018; go set up error message
 19783                                  parse_good_eol:
 19784                                  parse_msg_good:	; 23/02/2023
 19785 000021BA C3                      	retn				;AN000;
 19786                                  
 19787                                  ; ---------------------------------------------------------------------------
 19788                                  
 19789                                  ; MSDOS 6.0
 19790                                  ; ****************************************************************
 19791                                  ; *
 19792                                  ; * ROUTINE:	 PARSE_WITH_MSG
 19793                                  ; *
 19794                                  ; * FUNCTION:	 Calls parser. If an error occurred, the error
 19795                                  ; *		 message is set up.
 19796                                  ; *
 19797                                  ; * INPUT:	 DS:SI	  last output from parser
 19798                                  ; *		 ES:DI	  points to parse block
 19799                                  ; *		 CX	  last output from parser
 19800                                  ; *
 19801                                  ; * OUTPUT:	 AX	  parser return code
 19802                                  ; *
 19803                                  ; *		 if no error
 19804                                  ; *		     outputs from parser
 19805                                  ; *		 else
 19806                                  ; *		     MSG_DISPLAY_CLASS set to parse error
 19807                                  ; *		     error message set up for STD_PRINTF
 19808                                  ; *
 19809                                  ; ****************************************************************
 19810                                  
 19811                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19812                                  Parse_With_Msg:
 19813 000021BB 8936[2D8C]              	mov	[parse_last],si 	;AN018; save start of parameter
 19814 000021BF E85C21                  	call	cmd_parse		;AN018; call parser
 19815 000021C2 3CFF                    	cmp	al,-1 ; 0FFh
 19816                                  	;cmp	al,END_OF_LINE	; 0FFh	;AN018; Are we at end of line?
 19817 000021C4 74F4                    	je	short parse_msg_good	;AN018; yes - no problem
 19818                                  	;cmp	ax,0
 19819                                  	;cmp	ax,RESULT_NO_ERROR	;AN018; did an error occur
 19820 000021C6 09C0                    	or	ax,ax ; ax = 0 ?
 19821 000021C8 74F0                    	jz	short parse_msg_good	;AN018; yes - no problem
 19822                                  	; 23/02/2023
 19823                                  	;call	setup_parse_error_msg	;AN018; go set up error message
 19824                                  ;parse_msg_good:
 19825                                  	;retn				;AN018;
 19826                                  	; 23/02/2023
 19827                                  	;jmp	short setup_parse_error_msg	
 19828                                  
 19829                                  ; ---------------------------------------------------------------------------
 19830                                  
 19831                                  ; MSDOS 6.0
 19832                                  ; ****************************************************************
 19833                                  ; *
 19834                                  ; * ROUTINE:	 SETUP_PARSE_ERROR_MSG
 19835                                  ; *
 19836                                  ; * FUNCTION:	 Calls parser.	If an error occurred, the error
 19837                                  ; *		 message is set up.
 19838                                  ; *
 19839                                  ; * INPUT:	 AX	     Parse error number
 19840                                  ; *		 SI	     Set to past last parameter
 19841                                  ; *		 Parse_last  Set to start of last parameter
 19842                                  ; *
 19843                                  ; * OUTPUT:	 MSG_DISPLAY_CLASS set to parse error
 19844                                  ; *		 error message set up for STD_PRINTF
 19845                                  ; *
 19846                                  ; ****************************************************************
 19847                                  
 19848                                  	; 23/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 19849                                  setup_parse_error_msg:
 19850 000021CA C606[197F]02            	mov	byte [msg_disp_class],parse_msg_class
 19851                                  	;mov	byte [msg_disp_class],2	;AC018; Set up parse message class
 19852 000021CF BA[1B7F]                	mov	dx,extend_buf_ptr	;AC018; get extended message pointer
 19853 000021D2 C60400                  	mov	byte [si],END_OF_LINE_OUT ; 0
 19854                                  					;AC018; terminate the parameter string
 19855 000021D5 A3[1B7F]                	mov	[extend_buf_ptr],ax	;AC018; get message number in control block
 19856 000021D8 83F802                  	cmp	ax,2
 19857                                  	;cmp	ax,LessArgs_Ptr 	;AC018; if required parameter missing
 19858 000021DB 740D                    	je	short setup_parse_msg_ret
 19859                                  					;AN018;    no subst
 19860 000021DD 8B36[2D8C]              	mov	si,[parse_last] 	;AC018; get start of parameter
 19861 000021E1 8936[B58C]              	mov	[string_ptr_2],si 	;AC018; get address of failed string
 19862 000021E5 C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst
 19863                                  					;AC018; put number of subst in control block
 19864                                  	;mov	byte [extend_buf_sub],1
 19865                                  setup_parse_msg_ret:
 19866 000021EA 46                      	inc	si			;AN018; make sure zero flag not set
 19867 000021EB C3                      	retn				;AC018;
 19868                                  
 19869                                  ;============================================================================
 19870                                  ; TENV.ASM, MSDOS 6.0, 1991
 19871                                  ;============================================================================
 19872                                  ; 08/10/2018 - Retro DOS v3.0
 19873                                  
 19874                                  ; TITLE	Part6 COMMAND Transient routines.
 19875                                  
 19876                                  ;	Environment utilities and misc. routines
 19877                                  
 19878                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1690h
 19879                                  
 19880                                  ; 23/02/2023 - Retro DOS v4.0 (& v4.1)
 19881                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 22BDh
 19882                                  
 19883                                  ; ---------------------------------------------------------------------------
 19884                                  
 19885                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 19886                                  ADD_PROMPT:
 19887 000021EC E8FC00                  	call	delete_prompt	; Delete any existing prompt
 19888 000021EF E8AD01                  	call	scan_double_null
 19889                                  
 19890                                  ADD_PROMPT2:
 19891 000021F2 56                      	push	si
 19892 000021F3 E89B01                  	call	GETARG
 19893 000021F6 5E                      	pop	si
 19894 000021F7 7501                    	jnz	short ADD_PROMPT3
 19895                                  ADD_PROMPT_RETN:
 19896 000021F9 C3                      	retn
 19897                                  ADD_PROMPT3:			; Pre scan for arguments
 19898 000021FA E87501                  	call	move_name	; Move in name
 19899 000021FD E89101                  	call	GETARG
 19900 00002200 56                      	push	si
 19901 00002201 EB53                    	jmp	short ADD_NAME
 19902                                  
 19903                                  ;break	The SET command
 19904                                  
 19905                                  ; Input: DS:SI points to a CR terminated string
 19906                                  ; Output: carry flag is set if no room
 19907                                  ;	  otherwise name is added to environment
 19908                                  
 19909                                  DISP_ENVJ:
 19910 00002203 E9BC00                  	jmp	DISP_ENV
 19911                                  
 19912                                  ADD_NAME_TO_ENVIRONMENT:
 19913 00002206 E88801                  	call	GETARG
 19914 00002209 74F8                    	jz	short DISP_ENVJ
 19915                                  
 19916                                  ; check if line contains exactly one equals sign
 19917                                  
 19918 0000220B 31DB                    	xor	bx,bx		; = count is 0
 19919 0000220D 56                      	push	si		; Save pointer to beginning of line
 19920                                  EQLP:
 19921 0000220E AC                      	lodsb			; Get a char
 19922 0000220F 3C0D                    	cmp	al,13 ; 0Dh	; IF CR we're all done
 19923 00002211 740F                    	je	short QUEQ	
 19924 00002213 3C3D                    	cmp	al,'='		; Look for = sign	
 19925 00002215 75F7                    	jne	short EQLP	; not there, get next char
 19926 00002217 FEC3                    	inc	bl		; Otherwise increment EQ count
 19927 00002219 803C0D                  	cmp	byte [si],13	; Look for CR following = sign
 19928 0000221C 75F0                    	jne	short EQLP
 19929 0000221E FEC7                    	inc	bh		; Set BH=1 means no parameters
 19930 00002220 EBEC                    	jmp	short EQLP	; And look for more
 19931                                  QUEQ:
 19932 00002222 5E                      	pop	si		; Restore beginning of line
 19933 00002223 FECB                    	dec	bl		; Zero flag means only one EQ
 19934 00002225 7406                    	jz	short ONEQ	; Good line
 19935 00002227 BA[B37F]                	mov	dx,SYNTMES_PTR
 19936 0000222A E92707                  	jmp	cerror
 19937                                  ONEQ:
 19938 0000222D 53                      	push	bx
 19939 0000222E E8BD00                  	call	delete_name_in_environment
 19940 00002231 5B                      	pop	bx
 19941 00002232 FECF                    	dec	bh
 19942 00002234 74C3                    	jz	short ADD_PROMPT_RETN
 19943 00002236 E86601                  	call	scan_double_null
 19944 00002239 89FB                    	mov	bx,di		; Save ptr to beginning of env var name
 19945 0000223B E83401                  	call	move_name
 19946 0000223E 56                      	push	si
 19947 0000223F 87DF                    	xchg	bx,di		; Switch ptrs to beginning and end of
 19948                                  				;  env var name
 19949                                  		
 19950                                  ; We want to special-case COMSPEC. This is to reduce the amount of code
 19951                                  ; necessary in the resident for re-reading the transient. Let's look for
 19952                                  ; COMSPEC=
 19953                                  
 19954 00002241 C606[6284]00            	mov	byte [comspec_flag],0 ; MSDOS 6.0 ; clear flag ; M024
 19955 00002246 BE[9781]                	mov	si,COMSPECSTR ; "COMSPEC="
 19956 00002249 B90400                  	mov	cx,4
 19957 0000224C F3A7                    	repe	cmpsw
 19958 0000224E 7504                    	jnz	short NOT_COMSPEC
 19959                                  				; Zero set => exact match
 19960 00002250 FE06[6284]              	inc	byte [comspec_flag] ; MSDOS 6.0 ; comspec is changing ; M024
 19961                                  	;mov	byte [COMSPEC_FLAG],1
 19962                                  NOT_COMSPEC:
 19963 00002254 89DF                    	mov	di,bx		; Load ptr to end of env var name
 19964                                  ADD_NAME:
 19965 00002256 5E                      	pop	si		; Add the value of the new env var
 19966 00002257 56                      	push	si		;  to the environment.
 19967                                  ADD_NAME1:
 19968 00002258 AC                      	lodsb
 19969 00002259 3C0D                    	cmp	al,13 ; 0Dh
 19970 0000225B 7405                    	je	short ADD_NAME_RET
 19971 0000225D E8AD01                  	call	store_char
 19972 00002260 EBF6                    	jmp	short ADD_NAME1
 19973                                  ADD_NAME_RET:
 19974 00002262 5E                      	pop	si
 19975 00002263 803E[6284]00            	cmp	byte [comspec_flag],0
 19976                                  				; If the new env var is comspec,	
 19977                                  ADD_NAME_JZ_RET:
 19978 00002268 748F                    	jz	short ADD_PROMPT_RETN 
 19979                                  				;  copy the value into the
 19980                                  				;  comspec var in the resident
 19981                                  
 19982                                  ; We have changed the COMSPEC variable. We need to update the resident
 19983                                  ; pieces necessary to reread in the info. First, skip all delimiters
 19984                                  
 19985 0000226A E87303                  	call	scanoff
 19986 0000226D 8E06[C58A]              	mov	es,[RESSEG]	;  comspec var in the resident
 19987                                  
 19988                                  ; Make sure that the printer knows where the beginning of the string is
 19989                                  
 19990 00002271 BF[3601]                	mov	di,ComSpec
 19991 00002274 89FB                    	mov	bx,di
 19992                                  
 19993                                  ; Generate drive letter for display
 19994                                  
 19995 00002276 31C0                    	xor	ax,ax		;g assume no drive first
 19996 00002278 26A2[7F01]              	mov	[es:ComDrv],al
 19997                                  	; 23/02/2023
 19998                                  	; MSDOS 6.0 (& 5.0)
 19999 0000227C 50                      	push	ax		;AN000; 3/3/KK
 20000 0000227D 8A04                    	mov	al,[si]		;AN000; 3/3/KK
 20001 0000227F E83F01                  	call	testkanj	;AN000; 3/3/KK	
 20002 00002282 58                      	pop	ax		;AN000; 3/3/KK
 20003 00002283 7518                    	jnz	short _GOTDRIVE
 20004                                  	;
 20005 00002285 807C013A                	cmp	byte [si+1],':'	; drive specified?
 20006 00002289 7512                    	jne	short _GOTDRIVE
 20007 0000228B 8A04                    	mov	al,[si]		; get his specified drive
 20008                                  	; 23/02/2023
 20009 0000228D E85B01                  	call	UPCONV
 20010                                  	;call	UPCONV_MAPCALL	; convert to uppercase
 20011 00002290 2C41                    	sub	al,'A'		; convert to 0-based
 20012 00002292 83C702                  	add	di,2
 20013 00002295 FEC0                    	inc	al		; convert to 1-based number
 20014 00002297 26A2[7F01]              	mov	[es:ComDrv],al
 20015                                  
 20016                                  ; Stick the drive letter in the prompt message. Nothing special needs to be
 20017                                  ; done here..
 20018                                  	;add	al,40h
 20019 0000229B 0440                    	add	al,'A'-1
 20020                                  _GOTDRIVE:
 20021                                  	; 23/02/2023
 20022                                  	;;mov	[es:0BD9h],di	; MSDOS 3.3 COMMAND.COM offset 1734h
 20023                                  	;mov	[es:PUTBACKSUBSTPTR],di
 20024                                  	;mov	[es:0233h],di	; MSDOS 5.0 COMMAND.COM offset 236Eh
 20025 0000229D 26893E[1501]            	mov	[es:PutBackComSpec],di
 20026                                  				;g point to beginning of name after drive
 20027                                  	;;mov	[es:0A21h],al	; MSDOS 3.3 COMMAND.COM offset 1739h
 20028                                  	;mov	[es:PUTBACKDRV],al
 20029                                  	;mov	[es:0238h],al	; MSDOS 5.0 COMMAND.COM offset 2373h
 20030 000022A2 26A2[1A01]              	mov	[es:PutBackDrv],al
 20031                                  
 20032                                  ; Copy chars until delim      	
 20033                                  
 20034 000022A6 89DF                    	mov	di,bx
 20035                                  COPY_COMSPEC:
 20036 000022A8 AC                      	lodsb
 20037 000022A9 E83C03                  	call	DELIM
 20038 000022AC 7407                    	jz	short COPYDONE
 20039 000022AE 3C0D                    	cmp	al,13 ; 0Dh
 20040 000022B0 7403                    	je	short COPYDONE
 20041 000022B2 AA                      	stosb
 20042 000022B3 EBF3                    	jmp	short COPY_COMSPEC
 20043                                  COPYDONE:
 20044 000022B5 30C0                    	xor	al,al		; Null terminate the string and quit
 20045 000022B7 AA                      	stosb
 20046                                  	;mov	byte [comspec_flag],0
 20047 000022B8 A2[6284]                	mov	[comspec_flag],al ; 0 ; 23/02/2023
 20048 000022BB 4F                      	dec	di
 20049 000022BC 26893E[7601]            	mov	[es:ComSpec_End],di
 20050 000022C1 C3                      	retn
 20051                                  
 20052                                  DISP_ENV:
 20053 000022C2 8E1E[C58A]              	mov	ds,[RESSEG]
 20054 000022C6 8E1E[2703]              	mov	ds,[EnvirSeg]
 20055                                  	; assume ds:nothing
 20056 000022CA 31F6                    	xor	si,si
 20057                                  PENVLP:
 20058 000022CC 803C00                  	cmp	byte [si],0
 20059 000022CF 7497                    	jz	short ADD_NAME_JZ_RET
 20060 000022D1 BF[318C]                	mov	di,Arg_Buf
 20061                                  PENVLP2:
 20062 000022D4 AC                      	lodsb
 20063 000022D5 AA                      	stosb
 20064 000022D6 08C0                    	or	al,al
 20065 000022D8 75FA                    	jnz	short PENVLP2
 20066 000022DA BA[B880]                	mov	dx,arg_buf_ptr
 20067 000022DD 1E                      	push	ds
 20068 000022DE 06                      	push	es
 20069 000022DF 1F                      	pop	ds
 20070                                  	; assume ds:nothing
 20071 000022E0 E8FE2A                  	call	Printf_Crlf
 20072 000022E3 1F                      	pop	ds
 20073 000022E4 EBE6                    	jmp	short PENVLP
 20074                                  
 20075                                  ; =============== S U B	R O U T	I N E =======================================
 20076                                  
 20077                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20078                                  delete_path:
 20079 000022E6 BE[8B81]                	mov	si,PATH_TEXT ; "PATH="
 20080 000022E9 EB03                    	jmp	short delete_name_in_environment
 20081                                  
 20082                                  ; =============== S U B	R O U T	I N E =======================================
 20083                                  
 20084                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20085                                  delete_prompt:
 20086 000022EB BE[9081]                	mov	si,PROMPT_TEXT ; "PROMPT="
 20087                                  
 20088                                  ; ---------------------------------------------------------------------------
 20089                                  
 20090                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20091                                  delete_name_in_environment:
 20092                                  
 20093                                  ; Input: DS:SI points to a "=" terminated string
 20094                                  ; Output: carry flag is set if name not found
 20095                                  ;	  otherwise name is deleted
 20096                                  
 20097 000022EE 56                      	push	si
 20098 000022EF 1E                      	push	ds
 20099 000022F0 E82C00                  	call	FIND		; ES:DI points to name
 20100 000022F3 7217                    	jc	short del1
 20101 000022F5 89FE                    	mov	si,di		; Save it
 20102 000022F7 E8BF00                  	call	SCASB2		; Scan for the nul
 20103 000022FA 87F7                    	xchg	si,di
 20104                                  ;SR;
 20105                                  ; If we have only one env string, then the double null is lost when the last
 20106                                  ;string is deleted and we have an invalid empty environment with only a 
 20107                                  ;single null. To avoid this, we will look for the double null case and then
 20108                                  ;move an extra null char.
 20109                                  ; Bugbug: The only possible problem is that the last pathstring 
 20110                                  ;will be followed by a triple null. Is this really a problem?
 20111                                  
 20112                                  	; MSDOS 6.0
 20113 000022FC 26803C00                	cmp	byte [es:si],0	;null char?
 20114 00002300 7501                    	jnz	short not_dnull	;no, we are at a double null
 20115 00002302 4E                      	dec	si		;point at the double null
 20116                                  not_dnull:
 20117                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20118 00002303 E86901                  	call	GETENVSIZ
 20119 00002306 29F1                    	sub	cx,si
 20120 00002308 06                      	push	es
 20121 00002309 1F                      	pop	ds		; ES:DI points to name
 20122                                  				; DS:SI points to next name
 20123 0000230A F3A4                    	rep	movsb
 20124                                  del1:
 20125 0000230C 1F                      	pop	ds
 20126 0000230D 5E                      	pop	si
 20127                                  find_retn:
 20128 0000230E C3                      	retn
 20129                                  
 20130                                  ; =============== S U B	R O U T	I N E =======================================
 20131                                  
 20132                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20133                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:23E2h
 20134                                  find_path:
 20135 0000230F BE[8B81]                	mov	si,PATH_TEXT ; "PATH="
 20136 00002312 EB03                    	jmp	short find_name_in_environment
 20137                                  
 20138                                  ; =============== S U B	R O U T	I N E =======================================
 20139                                  
 20140                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20141                                  find_prompt:
 20142 00002314 BE[9081]                	mov	si,PROMPT_TEXT ; "PROMPT="
 20143                                  
 20144                                  ; ---------------------------------------------------------------------------
 20145                                  
 20146                                  find_name_in_environment:
 20147                                  
 20148                                  ; Input: DS:SI points to a "=" terminated string
 20149                                  ; Output: ES:DI points to the arguments in the environment
 20150                                  ;	  zero is set if name not found
 20151                                  ;	  carry flag is set if name not valid format
 20152                                  
 20153 00002317 E80500                  	call	FIND		; Find the name
 20154 0000231A 72F2                    	jc	short find_retn	; Carry means not found	
 20155 0000231C E99600                  	jmp	SCASB1		; Scan for = sign
 20156                                  
 20157                                  ; ---------------------------------------------------------------------------
 20158                                  	;nop
 20159                                  
 20160                                  ; =============== S U B	R O U T	I N E =======================================
 20161                                  
 20162                                  ; On return of FIND1, ES:DI points to beginning of name
 20163                                  
 20164                                  FIND:
 20165 0000231F FC                      	cld
 20166 00002320 E84100                  	call	COUNT0		; CX = Length of name
 20167 00002323 8E06[C58A]              	mov	es,[RESSEG]
 20168                                  	;assume es:RESGROUP
 20169 00002327 268E06[2703]            	mov	es,[es:EnvirSeg]
 20170                                  	;assume es:NOTHING
 20171 0000232C 31FF                    	xor	di,di
 20172                                  find1:	
 20173 0000232E 51                      	push	cx
 20174 0000232F 56                      	push	si
 20175 00002330 57                      	push	di
 20176                                  find11:
 20177 00002331 AC                      	lodsb
 20178                                  	; 23/02/2023 
 20179                                  	; MSDOS 6.0 (& 5.0)
 20180 00002332 E88C00                  	call	testkanj	
 20181 00002335 740F                    	jz	short notkanj3
 20182 00002337 4E                      	dec	si
 20183 00002338 AD                      	lodsw
 20184 00002339 47                      	inc	di
 20185 0000233A 47                      	inc	di
 20186 0000233B 263B45FE                	cmp	ax,[es:di-2]
 20187 0000233F 7511                    	jne	short find12
 20188 00002341 49                      	dec	cx
 20189 00002342 E2ED                    	loop	find11
 20190 00002344 EB0C                    	jmp	short find12
 20191                                  notkanj3:
 20192 00002346 E8A200                  	call	UPCONV		; MSDOS 5.0 (& 6.0)
 20193                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 20194 00002349 47                      	inc	di
 20195 0000234A 263A45FF                	cmp	al,[es:di-1]
 20196 0000234E 7502                    	jne	short find12
 20197 00002350 E2DF                    	loop	find11
 20198                                  find12:
 20199 00002352 5F                      	pop	di
 20200 00002353 5E                      	pop	si
 20201 00002354 59                      	pop	cx
 20202 00002355 74B7                    	jz	short find_retn
 20203 00002357 51                      	push	cx
 20204 00002358 E85E00                  	call	SCASB2		; Scan for a nul
 20205 0000235B 59                      	pop	cx
 20206 0000235C 26803D00                	cmp	byte [es:di],0
 20207 00002360 75CC                    	jnz	short find1
 20208 00002362 F9                      	stc			; Indicate not found
 20209 00002363 C3                      	retn
 20210                                  
 20211                                  ; =============== S U B	R O U T	I N E =======================================
 20212                                  
 20213                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20214                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2437h
 20215                                  COUNT0:
 20216 00002364 1E                      	push	ds
 20217 00002365 07                      	pop	es
 20218                                  	;assume es:nothing
 20219 00002366 89F7                    	mov	di,si
 20220                                  ;COUNT1:
 20221 00002368 57                      	push	di		; Count number of chars until "="
 20222 00002369 E84900                  	call	SCASB1
 20223                                  	; 23/02/2023
 20224                                  ;	jmp	short COUNTX
 20225                                  ;COUNT2:
 20226                                  ;	push	di		; Count number of chars until nul
 20227                                  ;	call	SCASB2
 20228                                  ;COUNTX:
 20229 0000236C 59                      	pop	cx
 20230 0000236D 29CF                    	sub	di,cx
 20231 0000236F 87F9                    	xchg	di,cx
 20232                                  move_name_retn:
 20233 00002371 C3                      	retn
 20234                                  
 20235                                  ; =============== S U B	R O U T	I N E =======================================
 20236                                  
 20237                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20238                                  move_name:
 20239 00002372 803C0D                  	cmp	byte [si],13 ; 0Dh
 20240 00002375 74FA                    	je	short move_name_retn
 20241 00002377 AC                      	lodsb
 20242                                  	; 23/02/2023 
 20243                                  	; MSDOS 6.0 (& 5.0)
 20244 00002378 E84600                  	call	testkanj		
 20245 0000237B 7409                    	jz	short notkanj1
 20246 0000237D E88D00                  	call	store_char
 20247 00002380 AC                      	lodsb
 20248 00002381 E88900                  	call	store_char
 20249 00002384 EBEC                    	jmp	short move_name
 20250                                  notkanj1: 
 20251 00002386 E86200                  	call	UPCONV
 20252                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3
 20253 00002389 E88100                  	call	store_char
 20254 0000238C 3C3D                    	cmp	al,'='
 20255 0000238E 75E2                    	jne	short move_name
 20256                                  getarg_retn:
 20257 00002390 C3                      	retn
 20258                                  
 20259                                  ; =============== S U B	R O U T	I N E =======================================
 20260                                  
 20261                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20262                                  GETARG:
 20263 00002391 BE8000                  	mov	si,80h
 20264 00002394 AC                      	lodsb
 20265 00002395 08C0                    	or	al,al
 20266 00002397 74F7                    	jz	short getarg_retn
 20267 00002399 E84402                  	call	scanoff
 20268 0000239C 3C0D                    	cmp	al,13 ; 0Dh
 20269                                  sdn_retn:
 20270 0000239E C3                      	retn
 20271                                  
 20272                                  ; =============== S U B	R O U T	I N E =======================================
 20273                                  
 20274                                  ; Point ES:DI to the final NULL string. Note that in an empty environment,
 20275                                  ; there is NO double NULL, merely a string that is empty.
 20276                                  
 20277                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20278                                  scan_double_null:
 20279 0000239F 8E06[C58A]              	mov	es,[RESSEG]
 20280 000023A3 268E06[2703]            	mov	es,[es:EnvirSeg]
 20281 000023A8 31FF                    	xor	di,di
 20282                                  
 20283                                  ; Top cycle-point. If the string here is empty, then we are done
 20284                                  
 20285                                  sdn1:
 20286 000023AA 26803D00                	cmp	byte [es:di],0	; nul string?
 20287 000023AE 74EE                    	jz	short sdn_retn	; yep, all done
 20288 000023B0 E80600                  	call	SCASB2
 20289 000023B3 EBF5                    	jmp	short sdn1
 20290                                  
 20291                                  ; =============== S U B	R O U T	I N E =======================================
 20292                                  
 20293                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20294                                  SCASB1:
 20295 000023B5 B03D                    	mov	al,'='		; Scan for an =
 20296 000023B7 EB02                    	jmp	short SCASBX
 20297                                  
 20298                                  ; =============== S U B	R O U T	I N E =======================================
 20299                                  
 20300                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20301                                  SCASB2:
 20302 000023B9 30C0                    	xor	al,al		; Scan for a nul
 20303                                  
 20304                                  ; ---------------------------------------------------------------------------
 20305                                  
 20306                                  	; 23/02/2023
 20307                                  SCASBX:
 20308 000023BB B90001                  	mov	cx,256
 20309 000023BE F2AE                    	repne	scasb
 20310 000023C0 C3                      	retn
 20311                                  
 20312                                  ; =============== S U B	R O U T	I N E =======================================
 20313                                  
 20314                                  ; MSDOS 6.0
 20315                                  
 20316                                  ;Bugbug: This is Kanji stuff - put it in conditionals
 20317                                  
 20318                                  	; 23/02/2023 - Retro DOS v4.0 COMMAND.COM
 20319                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:249Ah
 20320                                  testkanj:
 20321 000023C1 1E                      	push	ds			;AN000;  3/3/KK
 20322 000023C2 56                      	push	si			;AN000;  3/3/KK
 20323 000023C3 50                      	push	ax			;AN000;  3/3/KK
 20324 000023C4 2E8E1E[C58A]            	mov	ds,[cs:RESSEG]		;AN000;  Get resident segment
 20325 000023C9 C536[A701]              	lds	si,[Dbcs_Vector_Addr]	;AN000;  get DBCS vector
 20326                                  ktlop:					;AN000;  3/3/KK
 20327 000023CD 833C00                  	cmp	word [si],0		;AN000;  end of Table 3/3/KK
 20328 000023D0 740E                    	je	short notlead 		;AN000;  3/3/KK
 20329 000023D2 58                      	pop	ax			;AN000;  3/3/KK
 20330 000023D3 50                      	push	ax			;AN000;  3/3/KK
 20331 000023D4 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 20332 000023D6 7208                    	jb	short notlead 		;AN000;  3/3/KK
 20333 000023D8 46                      	inc	si			;AN000;  3/3/KK
 20334 000023D9 3A04                    	cmp	al,[si]			;AN000;  3/3/KK
 20335 000023DB 7607                    	jbe	short islead		;AN000;  3/3/KK
 20336 000023DD 46                      	inc	si			;AN000;  3/3/KK
 20337 000023DE EBED                    	jmp	short ktlop		;AN000;  try another range ; 3/3/KK
 20338                                  notlead:				;AN000;  3/3/KK
 20339 000023E0 31C0                    	xor	ax,ax			;AN000;  set zero 3/3/KK
 20340 000023E2 EB03                    	jmp	short ktret		;AN000;  3/3/KK
 20341                                  islead: 				;AN000;  3/3/KK
 20342 000023E4 31C0                    	xor	ax,ax			;AN000;  reset zero 3/3/KK
 20343 000023E6 40                      	inc	ax			;AN000;  3/3/KK
 20344                                  ktret:					;AN000;  3/3/KK
 20345 000023E7 58                      	pop	ax			;AN000;  3/3/KK
 20346 000023E8 5E                      	pop	si			;AN000;  3/3/KK
 20347 000023E9 1F                      	pop	ds			;AN000;  3/3/KK
 20348 000023EA C3                      	retn				;AN000;  3/3/KK
 20349                                  
 20350                                  ; =============== S U B	R O U T	I N E =======================================
 20351                                  
 20352                                  ; MSDOS 6.0
 20353                                  
 20354                                  ; ****************************************************************
 20355                                  ; *
 20356                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 20357                                  ; *
 20358                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 20359                                  ; *		 the character in AL from the file upper case table
 20360                                  ; *		 in DOS if character if above  ascii 128, else
 20361                                  ; *		 subtracts 20H if between "a" and "z".
 20362                                  ; *
 20363                                  ; * INPUT:	 AL	      char to be upper cased
 20364                                  ; *		 FUCASE_ADDR  set to the file upper case table
 20365                                  ; *
 20366                                  ; * OUTPUT:	 AL	      upper cased character
 20367                                  ; *
 20368                                  ; ****************************************************************
 20369                                  
 20370                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20371                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:24C4h
 20372                                  UPCONV:
 20373 000023EB 3C80                    	cmp	al,80h			;AN000;  see if char is > ascii 128
 20374 000023ED 7213                    	jb	short oth_fucase	;AN000;  no - upper case math
 20375 000023EF 2C80                    	sub	al,80h			;AN000;  only upper 128 chars in table
 20376 000023F1 1E                      	push	ds			;AN000;
 20377 000023F2 53                      	push	bx			;AN000;
 20378 000023F3 8E1E[C58A]              	mov	ds,[RESSEG]		;AN000;  get resident data segment
 20379                                  	;lds	bx,dword ptr FUCase_Addr+1
 20380 000023F7 C51E[9F01]              	lds	bx,[FUCase_Addr+1]	;AN000;  get table address
 20381 000023FB 83C302                  	add	bx,2			;AN000;  skip over first word
 20382                                  	;xlat	ds:byte ptr [bx]	;AN000;  convert to upper case
 20383 000023FE D7                      	xlat
 20384 000023FF 5B                      	pop	bx			;AN000;
 20385 00002400 1F                      	pop	ds			;AN000;
 20386                                  	;jmp	short upconv_end	;AN000;  we finished - exit
 20387                                  	; 24/02/2023
 20388 00002401 C3                      	retn
 20389                                  oth_fucase:				;AN000;
 20390 00002402 3C61                    	cmp	al,'a' ; small_a	;AC000; if between "a" and "z",
 20391 00002404 7206                    	jb	short upconv_end	;AC000;    subtract 20h to get
 20392 00002406 3C7A                    	cmp	al,'z' ; small_z	;AC000;    upper case equivalent.
 20393 00002408 7702                    	ja	short upconv_end	;AC000;
 20394 0000240A 2C20                    	sub	al,20h			;AC000; Change lower-case to upper
 20395                                  upconv_end:				;AN000;
 20396 0000240C C3                      	retn
 20397                                  
 20398                                  ; ---------------------------------------------------------------------------
 20399                                  
 20400                                  ; MSDOS 3.3
 20401                                  
 20402                                  	; 24/02/2023
 20403                                  ;UPCONV_MAPCALL:
 20404                                  	;			; If between "a" and "z"
 20405                                  	;cmp	al,[small_a]
 20406                                  	;jb	short UPCONV_END
 20407                                  	;cmp	al,[small_z]
 20408                                  	;ja	short UPCONV_END
 20409                                  	;sub	al,20h		; Change lower-case to upper
 20410                                  ;UPCONV_END:
 20411                                  	;call	far [cs:MAP_CALL] ; (far) call to char mapping routine 
 20412                                  	;			  ; 	  for (current) country
 20413                                  	;retn
 20414                                  
 20415                                  ; =============== S U B	R O U T	I N E =======================================
 20416                                  
 20417                                  ; STORE A CHAR IN environment, GROWING IT IF NECESSARY
 20418                                  
 20419                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 20420                                  	; 10/06/2023
 20421                                  store_char:
 20422 0000240D 51                      	push	cx
 20423 0000240E 53                      	push	bx
 20424                                  
 20425                                  	; 24/02/2023
 20426                                  	;;16/10/2018
 20427                                  	; MSDOS 6.0
 20428 0000240F 06                      	push	es		;AN056;*
 20429 00002410 1E                      	push	ds		;AN056; Save local DS
 20430 00002411 8E1E[C58A]              	mov	ds,[RESSEG]	;AN056; Get resident segment
 20431 00002415 8E06[2703]              	mov	es,[EnvirSeg]	;AN056; Get environment segment
 20432 00002419 1F                      	pop	ds		;AN056; Get local segment back
 20433                                  
 20434                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20435 0000241A E85200                  	call	GETENVSIZ
 20436 0000241D 89CB                    	mov	bx,cx		; Save room for double nul	
 20437 0000241F 83EB02                  	sub	bx,2
 20438 00002422 39DF                    	cmp	di,bx
 20439 00002424 723F                    	jb	short store1
 20440 00002426 50                      	push	ax
 20441 00002427 51                      	push	cx
 20442 00002428 53                      	push	bx		; Save Size of environment
 20443 00002429 E8D8E2                  	call	FREE_TPA
 20444 0000242C 5B                      	pop	bx
 20445 0000242D 83C302                  	add	bx,2		; Recover true environment size
 20446                                  
 20447 00002430 81FB0080                	cmp	bx,8000h	; Don't let environment grow > 32K	
 20448 00002434 7203                    	jb	short envsiz_ok
 20449                                  bad_env_size:			;AN056;
 20450 00002436 F9                      	stc
 20451 00002437 EB16                    	jmp	short envnoset
 20452                                  	;nop
 20453                                  envsiz_ok:
 20454 00002439 B104                    	mov	cl,4
 20455 0000243B D3EB                    	shr	bx,cl		; Convert back to paragraphs
 20456 0000243D 43                      	inc	bx
 20457                                  	; 24/02/2023
 20458                                  	; MSDOS 6.0
 20459 0000243E 8CC1                    	mov	cx,es		;AN056; Get environment segment
 20460 00002440 01D9                    	add	cx,bx		;AN056; Add in size of environment
 20461 00002442 83C120                  	add	cx,20h		;AN056; Add in some TPA
 20462 00002445 8CC8                    	mov	ax,cs		;AN056; Get the transient segment
 20463 00002447 39C1                    	cmp	cx,ax		;AN056; Are we hitting the transient?
 20464 00002449 73EB                    	jnb	short bad_env_size
 20465                                  				;AN056; Yes - don't do it!!!
 20466                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20467 0000244B B44A                    	mov	ah,4Ah
 20468                                  	;mov	ah,SETBLOCK ; 4Ah
 20469 0000244D CD21                    	int	21h	; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20470                                  			; ES = segment address of block	to change
 20471                                  			; BX = new size	in paragraphs
 20472                                  envnoset:
 20473 0000244F 9C                      	pushf
 20474 00002450 06                      	push	es
 20475 00002451 8E06[C58A]              	mov	es,[RESSEG]
 20476 00002455 E8BCE2                  	call	ALLOC_TPA
 20477 00002458 07                      	pop	es
 20478 00002459 9D                      	popf
 20479 0000245A 59                      	pop	cx
 20480 0000245B 58                      	pop	ax
 20481                                  	; 24/02/2023
 20482                                  	;pop	es ; MSDOS 6.0	;AN056;*	
 20483 0000245C 7307                    	jnc	short store1
 20484                                  	; 10/06/2023 (BugFix)
 20485 0000245E 07                      	pop	es ; MSDOS 6.0	;AN056;*	
 20486 0000245F BA[327F]                	mov	dx,ENVERR_PTR
 20487 00002462 E9EF04                  	jmp	cerror
 20488                                  store1:	
 20489 00002465 AA                      	stosb
 20490 00002466 26C7050000              	mov	word [es:di],0	; NULL IS AT END
 20491                                  	; 24/02/2023
 20492 0000246B 07                      	pop	es ; MSDOS 6.0	;AN056;*
 20493 0000246C 5B                      	pop	bx
 20494 0000246D 59                      	pop	cx
 20495 0000246E C3                      	retn
 20496                                  
 20497                                  ; =============== S U B	R O U T	I N E =======================================
 20498                                  
 20499                                  	; 24/02/2023
 20500                                  GETENVSIZ:
 20501                                  
 20502                                  ;Get size of environment in bytes, rounded up to paragraph boundry
 20503                                  ;ES has environment segment
 20504                                  ;Size returned in CX, all other registers preserved
 20505                                  
 20506 0000246F 06                      	push	es
 20507 00002470 50                      	push	ax
 20508 00002471 8CC0                    	mov	ax,es
 20509 00002473 48                      	dec	ax		;Point at arena	
 20510 00002474 8EC0                    	mov	es,ax
 20511                                  	;mov	ax,[es:3]
 20512 00002476 26A10300                	mov	ax,[es:ARENA.size]
 20513 0000247A B104                    	mov	cl,4
 20514 0000247C D3E0                    	shl	ax,cl		;Convert to bytes
 20515 0000247E 89C1                    	mov	cx,ax
 20516 00002480 58                      	pop	ax
 20517 00002481 07                      	pop	es
 20518                                  getenvsiz_retn:
 20519 00002482 C3                      	retn
 20520                                  
 20521                                  ; =============== S U B	R O U T	I N E =======================================
 20522                                  
 20523                                  	; 24/02/2023
 20524                                  RestUDir1:
 20525 00002483 1E                      	push	ds
 20526 00002484 8E1E[C58A]              	mov	ds,[RESSEG]
 20527 00002488 803E[8C01]00            	cmp	byte [RestDir],0
 20528 0000248D 1F                      	pop	ds
 20529 0000248E 74F2                    	jz	short getenvsiz_retn
 20530                                  
 20531                                  ; =============== S U B	R O U T	I N E =======================================
 20532                                  
 20533                                  	; 24/02/2023
 20534                                  RestUDir:
 20535 00002490 BA[A789]                	mov	dx,USERDIR1
 20536 00002493 B43B                    	mov	ah,3Bh
 20537                                  	;mov	ah,CHDir ; 3Bh
 20538 00002495 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 20539                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 20540 00002497 30C0                    	xor	al,al
 20541                                  	;call	SETREST
 20542                                  	;retn
 20543                                  	; 24/02/2023
 20544 00002499 E94B08                  	jmp	SETREST	
 20545                                  
 20546                                  ;============================================================================
 20547                                  ; TENV2.ASM, MSDOS 6.0, 1991
 20548                                  ;============================================================================
 20549                                  ; 07/10/2018 - Retro DOS v3.0
 20550                                  
 20551                                  ; TITLE	Part6 COMMAND Transient routines.
 20552                                  
 20553                                  ;	Environment utilities and misc. routines
 20554                                  
 20555                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 18C2h
 20556                                  
 20557                                  ; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20558                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2577h
 20559                                  
 20560                                  ; ---------------------------------------------------------------------------
 20561                                  
 20562                                  ; ****************************************************************
 20563                                  ; *
 20564                                  ; * ROUTINE:	 $CHDIR
 20565                                  ; *
 20566                                  ; * FUNCTION:	 Entry point for CHDIR command. Parse the command
 20567                                  ; *		 line. If path is found, CHDIR to path. If a drive
 20568                                  ; *		 letter is found, get and display the current dir
 20569                                  ; *		 of the specified drive. If nothing is found, get
 20570                                  ; *		 and display the current dir of the default drive.
 20571                                  ; *
 20572                                  ; * INPUT:	 command line at offset 81H
 20573                                  ; *
 20574                                  ; * OUTPUT:	 none
 20575                                  ; *
 20576                                  ; ****************************************************************
 20577                                  
 20578                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20579                                  	; 10/06/2023
 20580                                  _$CHDIR:
 20581                                  	; MSDOS 6.0
 20582 0000249C BE8100                  	mov	si,81h
 20583 0000249F BF[1085]                	mov	di,PARSE_CHDIR
 20584                                  				;AN000; Get address of PARSE_CHDIR
 20585 000024A2 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20586 000024A4 31D2                    	xor	dx,dx		;AN000;
 20587 000024A6 E812FD                  	call	Parse_With_Msg	;AC018; call parser
 20588                                  	
 20589                                  	;cmp	ax,-1
 20590                                  	;;cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 20591                                  	;je	short bwdj	; No args
 20592                                  	;;cmp	ax,0
 20593                                  	;;cmp	ax,RESULT_NO_ERROR
 20594                                  	;			;AC000; did we have an error?
 20595                                  	;or	ax,ax ; ax = 0 ?
 20596                                  	;jnz	short ChDirErr	;AC018; yes - exit
 20597                                  	
 20598                                  	; 10/06/2023
 20599 000024A9 40                      	inc	ax	; cmp ax,-1
 20600 000024AA 7414                    	jz	short bwdj ; 0FFFFh -> 0
 20601 000024AC 48                      	dec	ax	; cmp ax,0
 20602 000024AD 756D                    	jnz	short ChDirErr ; 1 -> 0
 20603                                  	; ax = 0	
 20604                                  
 20605                                  	;cmp	byte [PARSE1_TYPE],6
 20606 000024AF 803E[F495]06            	cmp	byte [PARSE1_TYPE],result_drive
 20607                                  				;AC000; was a drive entered?
 20608 000024B4 7511                    	jne	short REALCD	; no
 20609                                  
 20610                                  ; D: was found. See if there is anything more.
 20611                                  
 20612 000024B6 BF[1085]                	mov	di,PARSE_CHDIR
 20613                                  				;AC000; get address of parse_chdir
 20614 000024B9 31D2                    	xor	dx,dx		;AC000;
 20615 000024BB E8E7FC                  	call	parse_check_eol ;AC000; call parser
 20616 000024BE 755C                    	jnz	short ChDirErr	;AC000;
 20617                                  bwdj:
 20618 000024C0 E87BF9                  	call	build_dir_for_chdir
 20619                                  				; Drive only specified
 20620 000024C3 E80D01                  	call	CRLF2
 20621                                  chdir_retn:
 20622 000024C6 C3                      	retn
 20623                                  
 20624                                  	; 24/02/2023
 20625                                  	; MSDOS 3.3
 20626                                  	;mov	ax,[COMSW]
 20627                                  	;or	ax,[ALLSWITCH]
 20628                                  	;mov	dx,BADPARMPTR
 20629                                  	;jnz	short CHDIR_ERR
 20630                                  	;mov	si,81h
 20631                                  	;call	SCANOFF
 20632                                  	;cmp	al,0Dh		; are we at end of line?
 20633                                  	;je	short BWDJ	; No args
 20634                                  	;inc	si
 20635                                  	;lodsb
 20636                                  	;cmp	al,':'
 20637                                  	;jne	short REALCD
 20638                                  	;push	si
 20639                                  	;call	SCANOFF
 20640                                  	;pop	si
 20641                                  	;cmp	al,0Dh		; was a drive entered?
 20642                                  	;jne	short REALCD	; no
 20643                                  ;BWDJ:
 20644                                  	;call	BUILD_DIR_FOR_CHDIR ; Drive only specified
 20645                                  	;call	CRLF2
 20646                                  ;CHDIR_RETN:
 20647                                  	;retn
 20648                                  
 20649                                  	; 24/02/2023
 20650                                  	; MSDOS 6.0
 20651                                  REALCD:
 20652 000024C7 56                      	push	si		;AN000; save position in line
 20653 000024C8 C536[F895]              	lds	si,[PARSE1_ADDR]
 20654                                  				;AN000; get address of filespec
 20655 000024CC E8DA07                  	call	Move_To_SrcBuf	;AN000; move to srcbuf
 20656 000024CF 5E                      	pop	si		;AN000; restore position in line
 20657 000024D0 BF[1085]                	mov	di,PARSE_CHDIR	;AC000; get address of parse_chdir
 20658 000024D3 31D2                    	xor	dx,dx		;AC000;
 20659 000024D5 E8CDFC                  	call	parse_check_eol ;AC000; call parser
 20660 000024D8 7542                    	jnz	short ChDirErr	;AC000;
 20661                                  	
 20662 000024DA E81106                  	call	SETPATH
 20663 000024DD F606[D08C]02            	test	byte [DestInfo],2
 20664 000024E2 7518                    	jnz	short BadChDir
 20665                                  
 20666                                  	; 26/04/2023
 20667 000024E4 B43B                    	mov	ah,3Bh
 20668                                  	;mov	ah,CHDir
 20669 000024E6 CD21                    	int	21h
 20670 000024E8 73DC                    	jnc	short chdir_retn
 20671                                  	
 20672 000024EA E805F8                  	call	get_ext_error_number
 20673                                  				;AN022; get the extended error
 20674 000024ED 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 20675                                  				;AN022; see if path not found
 20676 000024F0 740A                    	je	short BadChDir	;AN022; yes - issue old message
 20677                                  ;SR;
 20678                                  ; We want to issue "Invalid Directory" message even if the path is valid
 20679                                  ;but is not a directory. The extended error returns "Access denied" which
 20680                                  ;is kind of confusing. Issue the old message if access denied error is 
 20681                                  ;returned
 20682                                  
 20683 000024F2 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 20684 000024F5 7405                    	je	short BadChDir
 20685                                  	
 20686 000024F7 E89E00                  	call	set_ext_error_subst ;AN022;
 20687 000024FA EB20                    	jmp	short ChDirErr	;AN022;
 20688                                  
 20689                                  BadChDir:
 20690 000024FC BA[5680]                	mov	dx,badcd_ptr
 20691                                  ;ChDirErr:
 20692                                  ;	call	std_eprintf
 20693                                  ;mkdir_retn:
 20694                                  	;retn
 20695                                  	; 24/02/2023
 20696 000024FF EB1B                    	jmp	short ChDirErr	;AN022;
 20697                                  
 20698                                  	; 24/02/2023
 20699                                  	; MSDOS 3.3
 20700                                  ;REALCD:
 20701                                  	;call	SETPATH
 20702                                  	;test	byte [DESTINFO],2
 20703                                  	;jnz	short BADCHDIR
 20704                                  	;mov	ah,CHDir ; 3Bh
 20705                                  	;int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 20706                                  	;		; DS:DX	-> ASCIZ directory name	(may include drive)
 20707                                  	;jnc	short CHDIR_RETN
 20708                                  ;BADCHDIR:
 20709                                  	;mov	dx,BADCDPTR
 20710                                  ;CHDIR_ERR:
 20711                                  	;call	STD_EPRINTF
 20712                                  ;MKDIR_RETN:
 20713                                  	;retn
 20714                                  
 20715                                  ; =============== S U B	R O U T	I N E =======================================
 20716                                  
 20717                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20718                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:25E2h
 20719                                  _$MKDIR:
 20720                                  	; MSDOS 6.0
 20721 00002501 E86300                  	call	SETRMMK
 20722 00002504 7216                    	jc	short MkDirErr
 20723                                  
 20724 00002506 B439                    	mov	ah,39h
 20725                                  	;mov	ah,MKDIR
 20726 00002508 CD21                    	int	21h
 20727 0000250A 7313                    	jnc	short mkdir_retn
 20728                                  
 20729 0000250C E8E3F7                  	call	get_ext_error_number	
 20730                                  				;AN022; get the extended error
 20731 0000250F 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 20732                                  				;AN022; see if path not found
 20733 00002512 742A                    	je	short MD_other_err
 20734                                  				;AN022; yes - issue old message
 20735 00002514 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 20736                                  				;AN022; access denied?
 20737 00002517 7407                    	je	short badmderr	;AN022; yes - see if file exists
 20738                                  	
 20739 00002519 E87C00                  	call	set_ext_error_subst
 20740                                  				;AN022;
 20741                                  	;jmp	short MkDirerr	;AC022; yes - go print it
 20742                                  	; 24/02/2023
 20743                                  ChDirErr:
 20744                                  MkDirErr:
 20745                                  RmDirErr:
 20746 0000251C E8C828                  	call	std_eprintf
 20747                                  mkdir_retn:
 20748                                  rmdir_retn:
 20749 0000251F C3                      	retn
 20750                                  	
 20751                                  badmderr:
 20752 00002520 BA[F387]                	mov	dx,SRCXNAME	;AN006; Set Disk transfer address
 20753 00002523 B41A                    	mov	ah,1Ah
 20754                                  	;mov	ah,Set_DMA	;AN006;
 20755 00002525 CD21                    	int	21h		;AN006;
 20756                                  	
 20757 00002527 B44E                    	mov	ah,4Eh
 20758                                  	;mov	ah,Find_First	;AN006; see if file/dir exists
 20759                                  	;mov	cx,10h
 20760 00002529 B91000                  	mov	cx,ATTR_DIRECTORY
 20761                                  				;AN006;   search for directory
 20762 0000252C CD21                    	int	21h		;AN006;
 20763 0000252E 720E                    	jc	short MD_other_err
 20764                                  				;AN006; doesn't exist - must be something else
 20765                                  	;;mov	dl,SRCXNAME.find_buf_attr
 20766                                  				;AN006; we found a file/dir
 20767                                  	;mov	dl,[SRCXNAME+21] 
 20768 00002530 8A16[0888]              	mov	dl,[SRCXNAME+FIND_BUF.ATTR]
 20769 00002534 F6C210                  	test	dl,ATTR_DIRECTORY
 20770                                  				;AN006; was it a directory?
 20771 00002537 7405                    	jz	short MD_other_err
 20772                                  				;AN006; no - must have been a file
 20773 00002539 BA[4681]                	mov	dx,MD_EXISTS_PTR
 20774                                  				;AN006; set up already exists error
 20775 0000253C EBDE                    	jmp	short MkDirErr	;AN006; make sure we didn't have network error
 20776                                  MD_other_err:			;AN006;
 20777 0000253E BA[5980]                	mov	dx,badmkd_ptr
 20778                                  ;MkDirErr:
 20779                                  	;call	std_eprintf
 20780                                  	;retn
 20781                                  	; 24/02/2023
 20782 00002541 EBD9                    	jmp	short MkDirErr
 20783                                  
 20784                                  	; 24/02/2023
 20785                                  	; MSDOS 3.3
 20786                                  	;call	SETRMMK
 20787                                  	;jb	short MKDIRERR
 20788                                  	;mov	ah,MKDIR ; 39h
 20789                                  	;int	21h	; DOS -	2+ - CREATE A SUBDIRECTORY (MKDIR)
 20790                                  	;		; DS:DX	-> ASCIZ pathname (may include drive)
 20791                                  	;jnc	short MKDIR_RETN
 20792                                  	;mov	dx,BADMKDPTR
 20793                                  	;call	GET_EXT_ERR_NUMBER
 20794                                  ;MKDIRERR:
 20795                                  	;call	STD_EPRINTF
 20796                                  	;retn
 20797                                  
 20798                                  ; =============== S U B	R O U T	I N E =======================================
 20799                                  
 20800                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20801                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2656h
 20802                                  _$RMDIR:
 20803 00002543 E82100                  	call	SETRMMK
 20804 00002546 72D4                    	jb	short RmDirErr
 20805 00002548 7518                    	jnz	short badrderr
 20806                                  
 20807 0000254A B43A                    	mov	ah,3Ah
 20808                                  	;mov	ah,RMDIR ; 3Ah
 20809 0000254C CD21                    	int	21h	; DOS -	2+ - REMOVE A DIRECTORY	ENTRY (RMDIR)
 20810                                  			; DS:DX	-> ASCIZ pathname (may include drive)
 20811 0000254E 73CF                    	jnc	short rmdir_retn ; 24/02/2023
 20812                                  
 20813                                  	; 24/02/2023
 20814                                  	; MSDOS 6.0
 20815 00002550 E89FF7                  	call	get_ext_error_number
 20816                                  				;AN022; get the extended error
 20817 00002553 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ; 3
 20818                                  				;AN022; see if path not found
 20819 00002556 740A                    	je	short badrderr	;AN022; yes - issue old message
 20820 00002558 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 20821                                  				;AN022; access denied?
 20822 0000255B 7405                    	je	short badrderr	;AN022; yes - issue old message
 20823                                  
 20824 0000255D E83800                  	call	set_ext_error_subst
 20825                                  				;AN022;
 20826 00002560 EBBA                    	jmp	short RmDirErr	;AC022; yes - go print it
 20827                                  
 20828                                  	; MSDOS 6.0
 20829                                  badrderr:
 20830                                  	; 24/02/2023
 20831 00002562 BA[5C80]                	mov	dx,badrmd_ptr
 20832 00002565 EBB5                    	jmp	short RmDirErr
 20833                                  ;RmDirErr:
 20834                                  	;call	std_eprintf
 20835                                  ;;rmdir_retn
 20836                                  	;retn
 20837                                  
 20838                                  	; 24/02/2023
 20839                                  	; MSDOS 3.3
 20840                                  	;mov	dx,BADRMDPTR
 20841                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 20842                                  ;RMDIRERR:
 20843                                  	;call	STD_EPRINTF
 20844                                  ;RMDIR_RETN:
 20845                                  	;retn
 20846                                  
 20847                                  ; =============== S U B	R O U T	I N E =======================================
 20848                                  
 20849                                  ; 	<Common MkDir/RmDir set up code>
 20850                                  ;****************************************************************
 20851                                  ;*
 20852                                  ;* ROUTINE:	SETRMMK
 20853                                  ;*
 20854                                  ;* FUNCTION:	Parse routine for the internal MKDIR and RMDIR
 20855                                  ;*		commands. Parses the command line for a required
 20856                                  ;*		filespec.
 20857                                  ;*
 20858                                  ;* INPUT:	command line at offset 81H
 20859                                  ;*
 20860                                  ;* OUTPUT:	carry clear
 20861                                  ;*		    DS:DX points to ASCIIZ argument
 20862                                  ;*		carry set
 20863                                  ;*		    DS:DX has error message pointer
 20864                                  ;*
 20865                                  ;****************************************************************
 20866                                  
 20867                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20868                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2624h
 20869                                  SETRMMK:
 20870                                  	; MSDOS 6.0
 20871 00002567 BE8100                  	mov	si,81h
 20872 0000256A BF[0785]                	mov	di,PARSE_MRDIR 	;AN000; Get address of PARSE_MRDIR
 20873 0000256D 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 20874 0000256F 31D2                    	xor	dx,dx		;AN000;
 20875                                  	;invoke	Parse_With_Msg	;AC000; call parser
 20876 00002571 E847FC                  	call	Parse_With_Msg
 20877                                  	;cmp	ax,0
 20878                                  	;cmp	ax,RESULT_NO_ERROR
 20879 00002574 09C0                    	or	ax,ax ; 0 ?	;AC000; did we have an error?
 20880 00002576 7519                    	jnz	short noargerr	;AC000; yes - exit
 20881                                  
 20882 00002578 BF[F387]                	mov	di,SRCXNAME
 20883                                  				;AN000; get address of srcxname
 20884 0000257B 57                      	push	di		;AN000; save address
 20885 0000257C 56                      	push	si		;AN000; save position in line
 20886 0000257D C536[F895]              	lds	si,[PARSE1_ADDR]
 20887                                  				;AN000; get address of path
 20888                                  mrdir_move_filename:		;AN000; put filespec in srcxname
 20889 00002581 AC                      	lodsb			;get a char from buffer
 20890 00002582 AA                      	stosb			;AN000; store in srcxname
 20891                                  	;cmp	al,0
 20892                                  	;cmp	al,END_OF_LINE_OUT
 20893 00002583 20C0                    	and	al,al ; 0 ?	;AC000; it char a terminator?
 20894 00002585 75FA                    	jnz	short mrdir_move_filename
 20895                                  				;AC000; no - keep moving
 20896 00002587 5E                      	pop	si		;AN000; get line position back
 20897                                  
 20898                                  ; we have scanned an argument.	See if any args beyond.
 20899                                  
 20900 00002588 BF[0785]                	mov	di,PARSE_MRDIR
 20901 0000258B E817FC                  	call	parse_check_eol ;AC000; are we at end of line?
 20902 0000258E 5A                      	pop	dx		;AC000; get address of SRCXNAME
 20903                                  	;retz			;yes - return no error
 20904 0000258F 7406                    	jz	short setrmmk_retn
 20905                                  noargerr:
 20906 00002591 BA[1B7F]                	mov	dx,extend_buf_ptr
 20907                                  				;AC000; get extended message pointer
 20908 00002594 31C0                    	xor	ax,ax
 20909 00002596 F9                      	stc
 20910                                  setrmmk_retn:
 20911 00002597 C3                      	retn
 20912                                  
 20913                                  	; 24/02/2023
 20914                                  	; MSDOS 3.3
 20915                                  ;SETRMMK:
 20916                                  	;mov	si,81h
 20917                                  	;call	SCANOFF
 20918                                  	;cmp	al,0Dh
 20919                                  	;je	short NOARGERR
 20920                                  	;mov	dx,si
 20921                                  ;SETRMMK1:
 20922                                  	;lodsb
 20923                                  	;call	DELIM
 20924                                  	;jz	short SETRMMK3
 20925                                  	;cmp	al,0Dh
 20926                                  	;jne	short SETRMMK1
 20927                                  	;mov	byte [si-1],0
 20928                                  ;SETRMMK2:
 20929                                  	;retn
 20930                                  ;SETRMMK3:
 20931                                  	;mov	byte [si-1],0
 20932                                  	;push	si
 20933                                  	;call	SCANOFF
 20934                                  	;pop	si
 20935                                  	;cmp	al,0Dh
 20936                                  	;je	short SETRMMK2
 20937                                  ;NOARGERR:
 20938                                  	;mov	dx,BADARGSPTR
 20939                                  	;xor	ax,ax
 20940                                  	;stc
 20941                                  ;SETRMMK_RETN:
 20942                                  	;retn
 20943                                  
 20944                                  ; =============== S U B	R O U T	I N E =======================================
 20945                                  
 20946                                  ; MSDOS 6.0
 20947                                  
 20948                                  ;****************************************************************
 20949                                  ;*
 20950                                  ;* ROUTINE:	Set_ext_error_subst
 20951                                  ;*
 20952                                  ;* FUNCTION:	Sets up substitution for extended error
 20953                                  ;*
 20954                                  ;* INPUT:	AX - extended error number
 20955                                  ;*		DX - offset of string
 20956                                  ;*
 20957                                  ;* OUTPUT:	Extend_Buf_Ptr set up for STD_EPRINTF
 20958                                  ;*
 20959                                  ;****************************************************************
 20960                                  
 20961                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20962                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:267Ch
 20963                                  set_ext_error_subst:
 20964                                  	;mov	byte [msg_disp_class],1
 20965 00002598 C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class
 20966                                  					;AN022; set up extended error msg class
 20967 0000259D 8916[B58C]              	mov	[string_ptr_2],dx 	;AN022; get address of failed string
 20968                                  	;mov	byte [extend_buf_sub],1
 20969 000025A1 C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst 
 20970                                  	;AN022; put number of subst in control block
 20971 000025A6 BA[1B7F]                	mov	dx,extend_buf_ptr 	;AN022; get extended message pointer
 20972 000025A9 A3[1B7F]                	mov	[extend_buf_ptr],ax	;AN022; get message number in control block
 20973                                  savudir_err_retn: ; 24/02/2023
 20974 000025AC C3                      	retn				;AN022; return
 20975                                  
 20976                                  ; =============== S U B	R O U T	I N E =======================================
 20977                                  
 20978                                  ; <SavUDir - preserve the users current directory on a particular drive>
 20979                                  
 20980                                  ; SavUDir - move the user's current directory on a drive into UserDir1
 20981                                  ; SavUDir1 - move the user's current directory on a drive into a specified
 20982                                  ;   buffer
 20983                                  ;
 20984                                  ;   Inputs:	DL has 1-based drive number
 20985                                  ;		ES:DI has destination buffer (SavUDir1 only)
 20986                                  ;   Outputs:	Carry Clear
 20987                                  ;		    DS = TranGroup
 20988                                  ;		Carry Set
 20989                                  ;		    AX has error code
 20990                                  ;   Registers Modified: AX, SI
 20991                                  
 20992                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 20993                                  SAVUDIR:
 20994 000025AD BF[A789]                	mov	di,USERDIR1
 20995                                  ; --------------
 20996                                  SAVUDIR1:
 20997 000025B0 88D0                    	mov	al,dl
 20998 000025B2 0440                    	add	al,'@' ; 40h
 20999 000025B4 3C40                    	cmp	al,'@' ; 40h
 21000 000025B6 7506                    	jne	short GOTUDRV
 21001 000025B8 0206[D98A]              	add	al,[CURDRV]
 21002 000025BC FEC0                    	inc	al		; A = 1
 21003                                  GOTUDRV:
 21004 000025BE AA                      	stosb
 21005 000025BF 8A26[CA8A]              	mov	ah,[DIRCHAR]
 21006 000025C3 B03A                    	mov	al,':' ; 3Ah
 21007 000025C5 AB                      	stosw
 21008 000025C6 06                      	push	es
 21009 000025C7 1F                      	pop	ds
 21010 000025C8 89FE                    	mov	si,di
 21011 000025CA B447                    	mov	ah,47h ; 24/02/2023
 21012                                  	;mov	ah,CURRENT_DIR	; 47h
 21013 000025CC CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 21014                                  			; DL = drive (0=default,1=A,etc.)
 21015                                  			; DS:SI	points to 64-byte buffer area
 21016 000025CE 72DC                    	jc	short savudir_err_retn ; 24/02/2023
 21017 000025D0 0E                      	push	cs
 21018 000025D1 1F                      	pop	ds
 21019 000025D2 C3                      	retn
 21020                                  
 21021                                  ; =============== S U B	R O U T	I N E =======================================
 21022                                  
 21023                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21024                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:26B7h
 21025                                  CRLF2:
 21026 000025D3 52                      	push	dx
 21027 000025D4 BA[FA80]                	mov	dx,acrlf_ptr
 21028 000025D7 1E                      	push	ds
 21029 000025D8 0E                      	push	cs
 21030 000025D9 1F                      	pop	ds
 21031 000025DA E81228                  	call	std_printf
 21032 000025DD 1F                      	pop	ds
 21033 000025DE 5A                      	pop	dx
 21034 000025DF C3                      	retn
 21035                                  
 21036                                  ; =============== S U B	R O U T	I N E =======================================
 21037                                  
 21038                                  ; These routines (SCANOFF, DELIM) are called in batch processing when DS
 21039                                  ; may NOT be TRANGROUP
 21040                                  
 21041                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21042                                  scanoff:
 21043 000025E0 AC                      	lodsb
 21044 000025E1 E80400                  	call	DELIM
 21045 000025E4 74FA                    	jz	short scanoff
 21046 000025E6 4E                      	dec	si		; Point to first non-delimiter
 21047                                  scanoff_retn:
 21048 000025E7 C3                      	retn
 21049                                  
 21050                                  ; =============== S U B	R O U T	I N E =======================================
 21051                                  
 21052                                  ; Input:    AL is character to classify
 21053                                  ; Output:   Z set if delimiter
 21054                                  ;	    NZ set otherwise
 21055                                  ; Registers modified: none
 21056                                  
 21057                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21058                                  DELIM:
 21059 000025E8 3C20                    	cmp	al,' '	 ;20h
 21060 000025EA 74FB                    	je	short scanoff_retn
 21061 000025EC 3C3D                    	cmp	al,'='  ; 3Dh
 21062 000025EE 74F7                    	je	short scanoff_retn
 21063 000025F0 3C2C                    	cmp	al,','	; 2Ch
 21064 000025F2 74F3                    	je	short scanoff_retn
 21065 000025F4 3C3B                    	cmp	al,';'	 ;3Bh
 21066 000025F6 74EF                    	je	short scanoff_retn
 21067 000025F8 3C09                    	cmp	al,9		; Check for TAB character
 21068 000025FA 74EB                    	je	short scanoff_retn
 21069 000025FC 3C0A                    	cmp	al,0Ah		; Check for line feed character - BAS
 21070 000025FE C3                      	retn
 21071                                  
 21072                                  
 21073                                  ; =============== S U B	R O U T	I N E =======================================
 21074                                  
 21075                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21076                                  FCB_TO_ASCZ:			
 21077                                  	; Convert DS:SI to ASCIZ ES:DI
 21078 000025FF B90800                  	mov	cx,8
 21079                                  MAINNAME:
 21080 00002602 AC                      	lodsb
 21081 00002603 3C20                    	cmp	al,' ' ; 20h
 21082 00002605 7401                    	jz	short SKIPSPC
 21083 00002607 AA                      	stosb
 21084                                  SKIPSPC:
 21085 00002608 E2F8                    	loop	MAINNAME
 21086 0000260A AC                      	lodsb
 21087 0000260B 3C20                    	cmp	al,' '
 21088 0000260D 740F                    	je	short GOTNAME
 21089 0000260F 88C4                    	mov	ah,al
 21090                                  	; 24/02/2023
 21091 00002611 B02E                    	mov	al,'.' ; 2Eh  ; MSDOS 5.0 (& 6.0)
 21092                                  	;mov	al,[DOT_CHR]  ; MSDOS 3.3
 21093                                  	;stosb
 21094                                  	;xchg	al,ah
 21095                                  	;stosb
 21096                                  	; 24/02/2023
 21097 00002613 AB                      	stosw
 21098 00002614 B102                    	mov	cl,2
 21099                                  EXTNAME:
 21100 00002616 AC                      	lodsb
 21101 00002617 3C20                    	cmp	al,' '
 21102 00002619 7403                    	je	short GOTNAME
 21103 0000261B AA                      	stosb
 21104 0000261C E2F8                    	loop	EXTNAME
 21105                                  GOTNAME:
 21106 0000261E 30C0                    	xor	al,al
 21107 00002620 AA                      	stosb
 21108                                  STRCOMP_RETN:
 21109 00002621 C3                      	retn
 21110                                  
 21111                                  ; =============== S U B	R O U T	I N E =======================================
 21112                                  
 21113                                  ; Compare ASCIZ DS:SI with ES:DI.
 21114                                  ; SI,DI destroyed.
 21115                                  
 21116                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21117                                  STRCOMP:	
 21118 00002622 A6                      	cmpsb
 21119 00002623 75FC                    	jnz	short STRCOMP_RETN ; Strings not equal
 21120 00002625 807CFF00                	cmp	byte [si-1],0	; Hit NUL terminator?	
 21121                                  	;jz	short STRCOMP_RETN ; Yes, strings equal
 21122                                  	;jmp	short STRCOMP	; Equal so far, keep going
 21123                                  	; 24/02/2023
 21124 00002629 75F7                    	jnz	short STRCOMP
 21125 0000262B C3                      	retn
 21126                                  
 21127                                  ; =============== S U B	R O U T	I N E =======================================
 21128                                  
 21129                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21130                                  CRPRINT:
 21131 0000262C 50                      	push	ax
 21132                                  	;mov	al,13	; 0Dh
 21133 0000262D B00D                    	mov	al,0Dh
 21134 0000262F 51                      	push	cx
 21135 00002630 57                      	push	di
 21136 00002631 89D7                    	mov	di,dx
 21137 00002633 B9FFFF                  	mov	cx,65535 ; 0FFFFh
 21138 00002636 06                      	push	es
 21139 00002637 1E                      	push	ds
 21140 00002638 07                      	pop	es
 21141 00002639 F2AE                    	repne	scasb		; LOOK FOR TERMINATOR
 21142 0000263B C645FF00                	mov	byte [di-1],0	; nul terminate the string
 21143 0000263F 07                      	pop	es
 21144 00002640 8916[B58C]              	mov	[string_ptr_2],dx
 21145                                  	;mov	dx,STRINGBUF2PTR  ; MSDOS 3.3 (Retro DOS v3.0 COMMAND.COM)
 21146 00002644 BA[E280]                	mov	dx,string_buf_ptr ; MSDOS 5.0 (& 6.0)
 21147 00002647 E8A527                  	call	std_printf
 21148                                  	;mov	byte [di-1],13
 21149 0000264A C645FF0D                	mov	byte [di-1],0Dh	; now put the CR back
 21150 0000264E 7204                    	jb	short error_output
 21151 00002650 5F                      	pop	di
 21152 00002651 59                      	pop	cx
 21153 00002652 58                      	pop	ax
 21154 00002653 C3                      	retn
 21155                                  
 21156                                  ; ---------------------------------------------------------------------------
 21157                                  
 21158                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21159                                  error_output:
 21160 00002654 0E                      	push	cs
 21161 00002655 1F                      	pop	ds
 21162 00002656 8E06[C58A]              	mov	es,[RESSEG]
 21163 0000265A BA[2F7F]                	mov	dx,NOSPACE_PTR
 21164 0000265D 26803E[0002]00          	cmp	byte [es:PipeFlag],0
 21165 00002663 7406                    	jz	short go_to_error
 21166 00002665 E80409                  	call	PipeOff
 21167 00002668 BA[7C80]                	mov	dx,PIPEEMES_PTR
 21168                                  go_to_error:
 21169 0000266B E9E602                  	jmp	cerror
 21170                                  
 21171                                  ; =============== S U B	R O U T	I N E =======================================
 21172                                  
 21173                                  ;---- Mod for path invocation ----
 21174                                  
 21175                                  	; 24/02/2023 - Retro DOS v4.0 (& v4.1)
 21176                                  pathchrcmp:
 21177                                  	; 18/03/2023	
 21178                                  	;push	ax
 21179                                  	;mov	ah,'/' ; 2Fh
 21180                                  	;cmp	[SWITCHAR],ah
 21181 0000266E 803E[C98A]2F            	cmp	byte [SWITCHAR],'/' ; 2Fh
 21182 00002673 7404                    	je	short noslasht
 21183 00002675 3C2F                    	cmp	al,'/'
 21184 00002677 7402                    	je	short pccont
 21185                                  noslasht:
 21186 00002679 3C5C                    	cmp	al,'\' ; 5Ch
 21187                                  pccont:	
 21188                                  	;pop	ax
 21189 0000267B C3                      	retn
 21190                                  
 21191                                  ; =============== S U B	R O U T	I N E =======================================
 21192                                  
 21193                                  ; PATHCRUNCH -
 21194                                  ;
 21195                                  ; ENTRY FCB (in PSP) contains drive # to crunch on
 21196                                  ;       PathPos = ptr to string with pathname in it
 21197                                  ;       PathCnt = length of string
 21198                                  ;
 21199                                  ; EXIT  PathPos = ptr after pathname (w/ NULL) in string
 21200                                  ;       PathCnt = length left in string
 21201                                  ;       DestIsDir = nonzero if pathname delimiter char's found in pathname
 21202                                  ;       DestInfo<bit1> = set if wildcard char's found in pathname
 21203                                  ;       If path crunched successfully,
 21204                                  ;         CY = clear
 21205                                  ;         Current directory is changed to directory in pathname
 21206                                  ;         UserDir1 contains previous directory for use by RestUDir
 21207                                  ;         RestDir = nonzero to flag later restoration of user's dir
 21208                                  ;         DestTail = ptr to beginning of filename
 21209                                  ;         If filename found in pathname,
 21210                                  ;           ZR = clear
 21211                                  ;           FCB filename fields contain filename
 21212                                  ;         If filename not found (pure directory path),
 21213                                  ;           ZR = set
 21214                                  ;           FCB filename fields are wildcarded with ?'s
 21215                                  ;       If pathcrunch failed (no ChDir's worked),
 21216                                  ;         CY = set
 21217                                  ;         Msg_Numb = extended error code
 21218                                  ;
 21219                                  ; NOTE  DIR asks PathCrunch to forego parsing the filename into the
 21220                                  ;       FCB by setting DirFlag. In this case, the FCB is returned
 21221                                  ;       with the filename wildcarded.
 21222                                  
 21223                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 21224                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2767h
 21225                                  
 21226                                  PathCrunch:
 21227                                  	; MSDOS 6.0
 21228 0000267C C706[388E]0000          	mov     word [Msg_Numb],0
 21229                                  				;AN022; Set up message flag
 21230                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21231                                  	;mov	dl,[5Ch]
 21232 00002682 8A165C00                	mov	dl,[FCB]	; DL = drive # (1 = A)
 21233 00002686 E824FF                  	call	SAVUDIR		; save current directory in UserDir1
 21234                                  	; MSDOS 6.0
 21235 00002689 7233                     	jc	short pcrunch_cderrj
 21236                                  				;AN022; if error on current dir - report
 21237 0000268B E86004                  	call	SETPATH		; scan past switches, whitespace
 21238                                  
 21239                                  ;       DX = ptr to pathname, NULL-terminated
 21240                                  ;       PathPos = ptr to byte after NULL at end of pathname
 21241                                  
 21242                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21243 0000268E F606[D08C]02            	test	byte [DestInfo],2 ; test if wildcards (? or *) seen
 21244 00002693 752C                    	jnz	short trypeel	; wildcard seen, peel filename
 21245                                  
 21246                                  	;mov	ah,CHDir ; 3Bh
 21247 00002695 B43B                    	mov	ah,3Bh
 21248 00002697 CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21249                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21250                                  	; MSDOS 6.0
 21251 00002699 7313                    	jnc	short chdir_worked	;AN022; no error - continue
 21252                                  	
 21253 0000269B E854F6                  	call	get_ext_error_number    ;AN022; get the extended error
 21254 0000269E 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found
 21255 000026A1 741E                    	je	short trypeel		;AC022;    keep trying
 21256 000026A3 83F805                  	cmp	ax,ERROR_ACCESS_DENIED  ;AN022; if access denied
 21257 000026A6 7419                    	je	short trypeel		;AC022;    keep trying
 21258 000026A8 A3[388E]                	mov	[Msg_Numb],ax           ;AN022; set up message flag
 21259 000026AB E99C00                  	jmp	peelfail                ;AN022; exit with other error
 21260                                  
 21261                                  	; MSDOS 3.3
 21262                                  	;jc	short trypeel
 21263                                  chdir_worked:
 21264                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21265 000026AE E83406                  	call	SetRest1	; set 'Restore Directory' flag true
 21266 000026B1 B03F                    	mov	al,'?'		; if pure dir, wildcard filename in FCB
 21267 000026B3 BF5D00                  	mov	di,5Dh  ; FCB+1
 21268 000026B6 B90B00                  	mov	cx,11
 21269 000026B9 F3AA                    	rep	stosb
 21270 000026BB 30C0                    	xor	al,al		; return carry clear, zero set
 21271 000026BD C3                      	retn
 21272                                  
 21273                                  pcrunch_cderrj: 		;AN022; need this for long jmp
 21274 000026BE E98100                  	jmp	pcrunch_cderr	;AN022;
 21275                                  
 21276                                  trypeel:
 21277 000026C1 8B36[248C]              	mov	si,[PathPos]
 21278 000026C5 4E                      	dec	si		; SI = ptr to NULL at end of pathname
 21279 000026C6 8A44FF                  	mov	al,[si-1]	; AL = last char of pathname
 21280                                  	; 25/02/2023
 21281                                  	; MSDOS 5.0 (& 6.0)
 21282 000026C9 803E[538E]00            	cmp	byte [KPARSE],0
 21283 000026CE 7505                    	jnz	short delstrt	; Last char is 2nd KANJI byte, might be '\'
 21284                                  	
 21285 000026D0 E89BFF                  	call	pathchrcmp
 21286 000026D3 7475                    	jz	short peelfail	; Trailing '/'
 21287                                  delstrt:
 21288 000026D5 89F1                    	mov	cx,si		; CX = ptr to NULL at end of pathname
 21289 000026D7 89D6                    	mov	si,dx		; SI = ptr to start of pathname
 21290 000026D9 52                      	push	dx		; save ptr to pathname
 21291                                  delloop:
 21292 000026DA 39CE                    	cmp	si,cx
 21293                                  	;jz	short BADRET
 21294                                  	; 25/02/2023
 21295 000026DC 7413                    	je	short gotdele	; no char's left, we have what we have
 21296 000026DE AC                      	lodsb			; AL = next char of pathname
 21297 000026DF E8DFFC                  	call	testkanj
 21298 000026E2 7403                    	jz	short notkanj8	; not Kanji, move along
 21299 000026E4 46                      	inc	si
 21300 000026E5 EBF3                    	jmp	short delloop	
 21301                                  
 21302                                  	; 25/02/2023
 21303                                  	; MSDOS 3.3
 21304                                  	;mov	al,[si]
 21305                                  	;call	PATHCHRCMP
 21306                                  	;jz	short TRYCD
 21307                                  	;dec	si
 21308                                  	;jmp	short delloop
 21309                                  
 21310                                  notkanj8:
 21311 000026E7 E884FF                  	call	pathchrcmp
 21312 000026EA 75EE                    	jnz	short delloop	; not a path delimiter, keep looking
 21313 000026EC 89F2                    	mov	dx,si
 21314 000026EE 4A                      	dec	dx		; DX = ptr to last delimiter found	
 21315 000026EF EBE9                    	jmp	short delloop	; go look for more
 21316                                  
 21317                                  	; 25/02/2023
 21318                                  	; MSDOS 5.0 (& 6.0)
 21319                                  gotdele:
 21320 000026F1 89D6                    	mov	si,dx		; SI = ptr to pathname or last delim
 21321 000026F3 5A                      	pop	dx		; DX = ptr to pathname
 21322 000026F4 39D6                    	cmp	si,dx
 21323 000026F6 7454                    	je	short badret	; didn't find path delim
 21324 000026F8 89F1                    	mov	cx,si		; CX = ptr to last path delimiter
 21325 000026FA 89D6                    	mov	si,dx		; SI = ptr to pathname
 21326                                  delloop2:			; Set value of KPARSE
 21327 000026FC 39CE                    	cmp	si,cx
 21328 000026FE 7412                    	je	short trycd	; roll up till SI meets CX
 21329 00002700 C606[538E]00            	mov	byte [KPARSE],0
 21330 00002705 AC                      	lodsb
 21331 00002706 E8B8FC                  	call	testkanj
 21332 00002709 74F1                    	jz	short delloop2
 21333 0000270B 46                      	inc	si
 21334 0000270C FE06[538E]              	inc	byte [KPARSE]
 21335 00002710 EBEA                    	jmp	short delloop2
 21336                                  
 21337                                  trycd:
 21338 00002712 50                      	push	ax
 21339                                  	; 25/02/2023
 21340 00002713 B02E                    	mov	al,'.'
 21341                                  	;mov	al,[DOT_CHR]	; AL = '.'
 21342                                  	; MSDOS 6.0
 21343 00002715 384401                  	cmp	[si+1],al	; check for '.' after path delim
 21344                                  				;M019; allow continuation if '. ' or 
 21345                                  				;M019; '..' is not found.
 21346 00002718 7509                    	jne	short trycd1	;M019; '.' not found
 21347 0000271A 384402                  	cmp	[si+2],al	;M019; check for '..'
 21348 0000271D 7404                    	je	short trycd1	;M019; found '..'
 21349 0000271F 807C0200                	cmp	byte [si+2],0	;M019; check for '. ' (null terminated)
 21350                                  trycd1:	
 21351 00002723 58                      	pop     ax
 21352 00002724 7424                    	jz	short peelfail	; if . or .., pure cd should have worked
 21353                                  
 21354                                  	; 25/02/2023
 21355                                  	; MSDOS 3.3
 21356                                  	;cmp	[si+1],	al	; check for '.' after path delim
 21357                                  	;pop	ax
 21358                                  	;jz	short PEELFAIL	; if . or .., pure cd should have worked
 21359                                  
 21360                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21361 00002726 8A44FF                  	mov	al,[si-1]
 21362 00002729 3C3A                    	cmp	al,':' 		; Special case d:\file
 21363 0000272B 741F                    	je	short badret
 21364                                  	; 25/02/2023
 21365                                  	; MSDOS 6.0
 21366 0000272D 803E[538E]00            	cmp	byte [KPARSE],0
 21367 00002732 7505                    	jnz	short notdoublesl
 21368 00002734 E837FF                  	call	pathchrcmp
 21369                                  	;jnz	short notdoublesl
 21370                                  				; Last char is 2nd KANJI byte, might be '\'
 21371                                  	; 25/02/2023
 21372 00002737 7411                    	jz	short peelfail 
 21373                                  ;peelfail:
 21374                                  	;stc
 21375                                  	;retn
 21376                                  
 21377                                  notdoublesl:
 21378 00002739 C60400                  	mov	byte [si],0
 21379                                  	;mov	ah,CHDir ; 3Bh
 21380 0000273C B43B                    	mov	ah,3Bh
 21381 0000273E CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21382                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21383 00002740 7320                    	jnc	short cdsucc
 21384                                  
 21385                                  	; 25/02/2023
 21386                                  	; MSDOS 6.0
 21387                                  pcrunch_cderr:
 21388 00002742 E8ADF5                  	call	get_ext_error_number
 21389                                  				;AN022; get the extended error
 21390 00002745 A3[388E]                	mov	[Msg_Numb],ax	;AN022; set up message flag
 21391 00002748 09F6                    	or	si,si		;AN022; set up zero flag to not zero
 21392                                  peelfail: ; 25/02/2023
 21393 0000274A F9                      	stc			;AN022; set up carry flag
 21394                                  pcrunch_retn:
 21395 0000274B C3                      	retn
 21396                                  
 21397                                  badret:
 21398                                  	; MSDOS 3.3 & MSDOS 6.0
 21399 0000274C 8A04                    	mov	al,[si]
 21400 0000274E E81DFF                  	call	pathchrcmp	; Special case 'DIRCHAR'file
 21401 00002751 F9                      	stc
 21402 00002752 75F7                    	jnz	short pcrunch_retn
 21403 00002754 30DB                    	xor	bl,bl
 21404 00002756 865C01                  	xchg	bl,[si+1]
 21405                                  	;mov	ah,CHDir ; 3Bh
 21406 00002759 B43B                    	mov	ah,3Bh
 21407 0000275B CD21                    	int	21h	; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 21408                                  			; DS:DX	-> ASCIZ directory name	(may include drive)
 21409                                  	;jc	short pcrunch_retn ; MSDOS 3.3
 21410                                  	; 25/02/2023
 21411 0000275D 72E3                    	jc	short pcrunch_cderr
 21412                                  				;AN022; go to error exit 
 21413 0000275F 885C01                  	mov	[si+1],bl
 21414                                  cdsucc:
 21415 00002762 E88005                  	call	SetRest1
 21416 00002765 46                      	inc	si		; Reset zero
 21417 00002766 8936[CE8C]              	mov	[DestTail],si
 21418                                  	; 25/02/2023
 21419                                  	; MSDOS 6.0
 21420 0000276A 9C                      	pushf			;AN015; save flags
 21421 0000276B 803E[2C8C]FF            	cmp	byte [DirFlag],-1
 21422                                  				;AN015; don't do parse if in DIR
 21423 00002770 7408                    	je	short pcrunch_end
 21424                                  				;AN015;
 21425                                  	; MSDOS 3.3 & MSDOS 6.0
 21426 00002772 BF5C00                  	mov	di,FCB  ; 5Ch
 21427                                  	;mov	ax,(Parse_File_Descriptor<<8)|2 ; 2902h
 21428 00002775 B80229                  	mov	ax,2902h	
 21429 00002778 CD21                    	int	21h		; Parse with default drive
 21430                                  			; DOS -	PARSE FILENAME
 21431                                  			; DS:SI	-> string to parse
 21432                                  			; ES:DI	-> buffer to fill with unopened	FCB
 21433                                  			; AL = bit mask	to control parsing
 21434                                  	; MSDOS 3.3
 21435                                  	;retn
 21436                                  
 21437                                  pcrunch_end:
 21438 0000277A 9D                      	popf			;AN015; get flags back
 21439 0000277B C3                      	retn
 21440                                  
 21441                                  ;============================================================================
 21442                                  ; TMISC1.ASM, MSDOS 6.0, 1991
 21443                                  ;============================================================================
 21444                                  ; 05/10/2018 - Retro DOS v3.0
 21445                                  
 21446                                  ;TITLE	Part7 COMMAND Transient Routines
 21447                                  
 21448                                  ;	More misc routines
 21449                                  
 21450                                  ;---------------------------
 21451                                  ; We can get rid of this switch processing code if we can take
 21452                                  ; care of the remaining two calls to switch, later in the file.
 21453                                  ; However, I have not checked whether or not any other files use
 21454                                  ; switch -- after all, it IS public!
 21455                                  ;---------------------------
 21456                                  
 21457                                  ; 28/03/2023
 21458                                  SWCOUNT  EQU  6  ; MSDOS 6.0		; Length of switch_list
 21459                                  ;SWCOUNT EQU  5  ; MSDOS 3.3	
 21460                                  
 21461                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1AC2h
 21462                                  
 21463                                  ; 25/02/2023 - Retro DOS v4.0 (& v4.1)
 21464                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2869h
 21465                                  
 21466                                  ; ---------------------------------------------------------------------------
 21467                                  
 21468                                  	; 25/02/2023
 21469                                  RETSW:
 21470 0000277C 93                      	xchg	ax,bx		; Put switches in AX
 21471 0000277D C3                      	retn
 21472                                  
 21473                                  ; =============== S U B	R O U T	I N E =======================================
 21474                                  
 21475                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 21476                                  SWITCH:
 21477 0000277E 31DB                    	xor	bx,bx		; Initialize - no switches set
 21478                                  SWLOOP:
 21479 00002780 E85DFE                  	call	scanoff		; Skip any delimiters
 21480 00002783 3A06[C98A]              	cmp	al,[SWITCHAR]	; Is it a switch specifier?
 21481 00002787 75F3                    	jnz	short RETSW	; No -- we're finished
 21482 00002789 81CB0080                	or	bx,8000h
 21483                                  	;or	bx,FSWITCH	; Indicate there is a switch specified
 21484 0000278D 46                      	inc	si		; Skip over the switch character
 21485 0000278E E84FFE                  	call	scanoff
 21486 00002791 3C0D                    	cmp	al,0Dh
 21487 00002793 74E7                    	je	short RETSW	; Oops
 21488 00002795 46                      	inc	si
 21489                                  
 21490                                  	; Convert lower case input to upper case
 21491                                  
 21492 00002796 E852FC                  	call	UPCONV
 21493                                  	;call	UPCONV_MAPCALL	; MSDOS 3.3
 21494                                  
 21495 00002799 BF[5184]                	mov	di,switch_list	; "?VBAPW" (for MSDOS 6.0)
 21496                                  				; ("VBAPW" (for MSDOS 3.3))
 21497 0000279C B90600                  	mov	cx,6  ; MSDOS 6.0
 21498                                  	;mov	cx,5  ; MSDOS 3.3
 21499                                  	;mov	cx,SWCOUNT ; 5 (for MSDOS 3.3), (6 (for MSDOS 6.0))
 21500                                  		
 21501                                  	;nop
 21502                                  		
 21503 0000279F F2AE                    	repne	scasb		; Look for matching switch
 21504 000027A1 7507                    	jnz	short BADSW
 21505 000027A3 B80100                  	mov	ax,1
 21506 000027A6 D3E0                    	shl	ax,cl		; Set a bit for the switch
 21507 000027A8 09C3                    	or	bx,ax
 21508                                  BADSW: 				; Retro DOS v3.0 COMMAND.COM modificiation
 21509 000027AA EBD4                    	jmp	short SWLOOP
 21510                                  ;BADSW:
 21511                                  	;jmp	short SWLOOP
 21512                                  ;DRVBAD:
 21513                                  ;	mov	dx,baddrv_ptr
 21514                                  ;	jmp	cerror
 21515                                  EXTERNALJ:
 21516 000027AC E90501                  	jmp	EXTERNAL
 21517                                  FNDCOM:				; search the internal command table
 21518 000027AF 08C0                    	or	al,al		; Get real length of first arg
 21519 000027B1 74F9                    	jz	short EXTERNALJ	; If 0, it must begin with "\" so has
 21520                                  				;  to be external.
 21521                                  ; barryf code starts here
 21522                                  
 21523 000027B3 E82703                  	call	test_append	; see if APPEND installed
 21524 000027B6 7429                    	jz	short CONTCOM	; not loaded
 21525                                  
 21526                                  APPEND_INTERNAL:
 21527 000027B8 8A0E[4F8B]              	mov	cl,[IDLEN]
 21528 000027BC B500                    	mov	ch,0
 21529 000027BE 890E[248C]              	mov	[PathPos],cx
 21530                                  	
 21531                                  	; 25/02/2023	
 21532                                  	; MSDOS 6.0
 21533 000027C2 FE06[3A8E]              	inc 	byte [append_exec]
 21534                                  				;AN041; set APPEND to ON
 21535 000027C6 E8B603                  	call	IOSET		; re-direct the o'l io
 21536                                  
 21537 000027C9 BE[4F8B]                	mov	si,IDLEN	; address command name, DS already set	
 21538 000027CC BAFFFF                  	mov	dx,-1 ; 0FFFFh	; set invoke function
 21539                                  		
 21540                                  	; MSDOS 6.0
 21541 000027CF BF[D94D]                	mov	di,append_parse
 21542                                  				;AN010; Get the entry point for PARSE for APPEND
 21543                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21544 000027D2 B801AE                  	mov	ax,0AE01h
 21545 000027D5 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal
 21546                                  			; - INSTALLABLE	COMMAND	- EXECUTE
 21547                                  			; DX = FFFFh, DS:SI -> buffer
 21548                                  			; Return: buffer at DS:SI filled with a	length byte
 21549                                  			; followed by the uppercase internal command
 21550                                  			; to execute (if length not 0)
 21551                                  	; 25/02/2023
 21552                                  	; INT 2Fh
 21553                                  	; 	AX = AE01h
 21554                                  	; entry:
 21555                                  	; 	DX = magic value FFFFh
 21556                                  	; 	CH = 00h
 21557                                  	; 	CL = length of command name
 21558                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 21559                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 21560                                  	; return:
 21561                                  	;	DS:SI buffer updated
 21562                                  	;	if length byte is nonzero, the following bytes contain
 21563                                  	;	the uppercase internal command to execute and the command line
 21564                                  	; 	buffer contains the command's parameters
 21565                                  	;	(the first DS:[SI] bytes are ignored)
 21566                                  	;
 21567                                  	; Format of COMMAND.COM command line buffer:
 21568                                  	;	Offset  Size    Description
 21569                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 21570                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 21571                                  	;	N BYTEs command line text, terminated by 0Dh
 21572                                  	;
 21573                                  	; Format of command name buffer:
 21574                                  	;	Offset  Size    Description
 21575                                  	;	00h     BYTE    length of command name
 21576                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 21577                                  
 21578 000027D7 803E[4F8B]00            	cmp	byte [IDLEN],0 ; execute requested
 21579 000027DC 7503                    	jne	short CONTCOM
 21580 000027DE E9A300                  	jmp	CMD_DONE
 21581                                  
 21582                                  	;nop
 21583                                  CONTCOM:			; continue with internal scan
 21584 000027E1 BF[D082]                	mov	di,COMTAB
 21585 000027E4 31C9                    	xor	cx,cx
 21586                                  FINDCOM:
 21587 000027E6 BE[508B]                	mov	si,ID		; pointer to command argument
 21588 000027E9 8A0D                    	mov	cl,[di]		; load length of internal command
 21589 000027EB 47                      	inc	di		; advance past length
 21590 000027EC E3BE                    	jcxz	EXTERNALJ 	; if it's zero, we're out of internals
 21591 000027EE 3A0E[4F8B]              	cmp	cl,[IDLEN]	; that of the command argument
 21592 000027F2 7506                    	jne	short ABCD	; lengths not equal ==> strings not eq
 21593 000027F4 890E[248C]              	mov	[PathPos],cx	; store length of command
 21594 000027F8 F3A6                    	repe	cmpsb
 21595                                  ABCD:					
 21596 000027FA 9F                      	lahf			; save the good ol' flags
 21597 000027FB 01CF                    	add	di,cx		; skip over remaining internal, if any
 21598 000027FD 8A05                    	mov	al,[di]		; load drive-check indicator byte (DCIB)
 21599 000027FF A2[D78A]                	mov	[CHKDRV],al	; save command flag byte in chkdrv
 21600 00002802 47                      	inc	di		; increment DI (OK, OK, I'll stop)
 21601 00002803 8B1D                    	mov	bx,[di]		; load internal command address
 21602 00002805 47                      	inc	di		; skip over the puppy
 21603 00002806 47                      	inc	di
 21604                                  		
 21605                                  	; MSDOS 6.0
 21606 00002807 8B15                    	mov	dx,[di]		; load ptr to help msg #s
 21607 00002809 47                      	inc	di
 21608 0000280A 47                      	inc	di
 21609 0000280B 9E                      	sahf			; remember those flags?
 21610 0000280C 75D8                    	jnz	short FINDCOM	; well, if all the cmps worked...
 21611                                  
 21612                                  ; All messages get redirected.
 21613                                  
 21614 0000280E 803E[3A8E]00            	cmp     byte [append_exec],0
 21615                                  				;AN041; APPEND just executed?
 21616 00002813 7503                    	jnz 	short DONT_SET_IO
 21617                                  				;AN041; Yes - this junk is already set
 21618 00002815 E86703                  	call	IOSET		; re-direct the ol' i/o
 21619                                  
 21620                                  DONT_SET_IO:			;AN041;
 21621                                  
 21622                                  ; Check for /?. Certain commands, flagged fLimitHelp,
 21623                                  ; respond to /? only if it is the only command-line argument.
 21624                                  
 21625 00002818 A1[DC8A]                	mov	ax,[COMSW]	; AX = switches after command
 21626 0000281B 0B06[E28A]              	or	ax,[AllSwitch]	; AX = all switches
 21627                                  	;and	ax,SwitchQues	
 21628 0000281F 83E020                  	and	ax,20h
 21629 00002822 7426                    	jz	short DRIVE_CHECK
 21630                                  				; /? not in command line
 21631 00002824 F606[D78A]04            	test	byte [CHKDRV],4	
 21632                                  	;test	byte [CHKDRV],fLimitHelp
 21633 00002829 7407                    	jz	short DO_HELP	; /? allowed in combination
 21634                                  
 21635                                  ; Make sure /? is the only argument on the command line.
 21636                                  
 21637 0000282B 833E[1491]02            	cmp	word [ARG+ARG_UNIT.argvcnt],2
 21638 00002830 7518                    	jne	short DRIVE_CHECK
 21639                                  				; /? not only arg - ignore
 21640                                  
 21641                                  ; Note: this is all the check we need, even against things like /??.
 21642                                  ; Our argv parser breaks /?? into two args, /? and ?.
 21643                                  
 21644                                  DO_HELP:
 21645                                  ; DX = ptr to word list of msg #s, terminated by zero word
 21646                                  
 21647 00002832 89D6                    	mov	si,dx		; SI = ptr to list of msg #s
 21648                                      	;mov	ax,no_subst	; AL = no subst's code
 21649 00002834 B80000                  	mov	ax,0
 21650 00002837 50                      	push	ax		; build subst block on stack
 21651                                  
 21652                                  NEXT_HELP_MSG:
 21653 00002838 AD                      	lodsw			; AX = help msg # or zero
 21654 00002839 09C0                    	or	ax,ax
 21655 0000283B 7409                    	jz	short HELP_DONE
 21656 0000283D 50                      	push	ax		; SS:SP = ptr to subst block
 21657                                  				; (msg # and no_subst byte)
 21658                                  ;; We assume DS = SS.
 21659                                  	
 21660 0000283E 89E2                    	mov     dx,sp		; DS:DX = ptr to subst block
 21661 00002840 E8AC25                  	call	std_printf	; display help message	
 21662 00002843 58                      	pop	ax		; remove msg # from stack
 21663 00002844 EBF2                    	jmp	short NEXT_HELP_MSG
 21664                                  
 21665                                  HELP_DONE:
 21666 00002846 58                      	pop	ax		; clean up stack
 21667 00002847 E9BAD8                  	jmp	TCOMMAND	
 21668                                  
 21669                                  	; 25/02/2023
 21670                                  	; MSDOS 3.3
 21671                                  	;sahf			; remember those flags?
 21672                                  	;jnz	short FINDCOM	; well, if all the cmps worked...
 21673                                  	;call	IOSET		; re-direct the ol' i/o
 21674                                  
 21675                                  DRIVE_CHECK:
 21676 0000284A F606[D78A]01            	test	byte [CHKDRV],1
 21677                                  	;test	byte [CHKDRV],FCHECKDRIVE 
 21678                                  				; did we wanna check those drives?
 21679 0000284F 7411                    	jz	short NOCHECK
 21680 00002851 A0[DA8A]                	mov	al,[PARM1]	; parse_file_descriptor results tell
 21681 00002854 0A06[DB8A]              	or	al,[PARM2]	; us whether those drives were OK
 21682 00002858 3CFF                    	cmp	al,-1
 21683 0000285A 7506                    	jne	short NOCHECK
 21684                                  	;jmp	DRVBAD
 21685                                  	; 25/02/2023
 21686                                  DRVBAD:
 21687 0000285C BA[777F]                	mov	dx,baddrv_ptr
 21688 0000285F E9F200                  	jmp	cerror
 21689                                  
 21690                                  ; The user may have omitted the space between the command and its arguments.
 21691                                  ; We need to copy the remainder of the user's command line into the buffer.
 21692                                  ; Note that thisdoes not screw up the arg structure; it points into COMBUF not
 21693                                  ; into the command line at 80.
 21694                                  
 21695                                  NOCHECK:
 21696 00002862 E85B02                  	call	cmd_copy
 21697                                  SWITCHECK:
 21698                                  	;test	byte [CHKDRV],2
 21699 00002865 F606[D78A]02            	test	byte [CHKDRV],fSwitchAllowed 
 21700                                  				; Does the command take switches
 21701 0000286A 7516                    	jnz	short REALWORK	; Yes, process the command
 21702 0000286C E82F00                  	call	noswit		; No, check to see if any switches
 21703 0000286F 7511                    	jnz	short REALWORK	; None, process the command
 21704                                  
 21705                                  	; MSDOS 6.0
 21706                                  	;mov	byte [msg_disp_class],2
 21707 00002871 C606[197F]02            	mov	byte [msg_disp_class],parse_msg_class
 21708                                  				;AN000; set up parse error msg class
 21709 00002876 BA[1B7F]                	mov	dx,extend_buf_ptr	
 21710                                  				;AC000; get extended message pointer
 21711                                  	;mov	word [extend_buf_ptr],3
 21712 00002879 C706[1B7F]0300          	mov	word [extend_buf_ptr],BadSwt_Ptr
 21713                                  				;AN000; get "Invalid switch" message number
 21714 0000287F E9D200                  	jmp	cerror		; Print error and chill out...
 21715                                  
 21716                                  	; 25/02/2023
 21717                                  	; MSDOS 3.3
 21718                                  	;mov	dx,BADPARMPTR
 21719                                  	;jmp	CERROR
 21720                                  
 21721                                  REALWORK:
 21722 00002882 FFD3                    	call	bx		; do some real work, at last
 21723                                  
 21724                                  ; See if we're in a batch CALL command. If we are, reprocess the command line,
 21725                                  ; otherwise, go get another command.
 21726                                  
 21727                                  CMD_DONE:
 21728 00002884 0E                      	push	cs		; g  restore data segment
 21729 00002885 1F                      	pop	ds		; g
 21730 00002886 1E                      	push	ds
 21731 00002887 8E1E[C58A]              	mov	ds,[RESSEG]	; g  save data segment
 21732                                  	;cmp	byte [Call_Flag],1
 21733                                  				; G  Is a call in progress?
 21734 0000288B 803E[9901]01            	cmp	byte [Call_Flag],call_in_progress
 21735 00002890 C606[9901]00            	mov	byte [Call_Flag],0
 21736                                  				; G  Either way, reset flag
 21737 00002895 1F                      	pop	ds		; g  get data segment back
 21738 00002896 7403                    	jz	short INCALL	; G
 21739 00002898 E969D8                  	jmp	TCOMMAND	; chill out...
 21740                                  INCALL:
 21741 0000289B E939DA                  	jmp	DOCOM1
 21742                                  
 21743                                  ; =============== S U B	R O U T	I N E =======================================
 21744                                  
 21745                                  	; 25/02/2023
 21746                                  noswit:
 21747 0000289E 57                      	push	di		; Save di
 21748 0000289F BF8100                  	mov	di,81h		; di = ptr to command args
 21749 000028A2 BE8000                  	mov	si,80h		; Get address of length of command args
 21750 000028A5 AC                      	lodsb			; Load length
 21751 000028A6 88C1                    	mov	cl,al		; Move length to cl
 21752 000028A8 30ED                    	xor	ch,ch		; Zero ch
 21753 000028AA 2EA0[C98A]              	mov	al,[cs:SWITCHAR] ; al = switch character
 21754                                  	;cmp	al,0		; Turn off ZF
 21755                                  	; 25/02/2023
 21756 000028AE 20C0                    	and	al,al
 21757 000028B0 F2AE                    	repne	scasb		; Scan for a switch character and return
 21758 000028B2 5F                      	pop	di		;  with ZF set if one was found
 21759 000028B3 C3                      	retn
 21760                                  
 21761                                  ; ---------------------------------------------------------------------------
 21762                                  
 21763                                  	; 25/02/2023 - Retro DOS v4.0 COMMAND.COM
 21764                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:29A6h
 21765                                  
 21766                                  EXTERNAL:
 21767 000028B4 E82602                  	call	test_append	; check to see if append installed
 21768 000028B7 7403                    	jz	short NOT_BARRYF
 21769                                  				; no - truly external command
 21770 000028B9 E9FCFE                  	jmp	APPEND_INTERNAL	; yes - go to Barryf code
 21771                                  
 21772                                  NOT_BARRYF:
 21773 000028BC 2EC606[D88A]00          	mov	byte [cs:FILTYP],0
 21774 000028C2 2E8A16[E58A]            	mov	dl,[cs:SPECDRV]
 21775 000028C7 2E8816[4F8B]            	mov	[cs:IDLEN],dl
 21776 000028CC 2EC606[C78C]00          	mov	byte [cs:ROM_CALL],0
 21777 000028D2 52                      	push	dx
 21778 000028D3 BA[4F8B]                	mov	dx,IDLEN
 21779 000028D6 E821DB                  	call	ROM_SCAN
 21780 000028D9 5A                      	pop	dx
 21781                                  	;jnc	short POSTSAVE
 21782 000028DA 7305                    	jnc	short DO_SCAN
 21783 000028DC 2EFE06[C78C]            	inc	byte [cs:ROM_CALL]
 21784                                  	;jmp	short POSTSAVE
 21785                                  
 21786                                  	;nop
 21787                                  DO_SCAN:
 21788                                  POSTSAVE:
 21789 000028E1 BF[ED89]                	mov	di,EXECPATH
 21790 000028E4 C60500                  	mov	byte [di],0	; Initialize to current directory
 21791                                  	
 21792 000028E7 2E803E[C78C]00          	cmp	byte [cs:ROM_CALL],0
 21793                                  	;jz	short RESEARCH
 21794                                  	; 25/02/2023
 21795                                  	;jmp	short NEOEXECUTE
 21796 000028ED 750F                    	jnz	short NEOEXECUTE	
 21797                                  
 21798                                  	;nop
 21799                                  RESEARCH:
 21800 000028EF E86E08                  	call	path_search	; find the mother (result in execpath)
 21801 000028F2 09C0                    	or	ax,ax		; did we find anything?
 21802                                  	;jz	short BADCOMJ45	; null means no (sob)
 21803                                  	; 25/02/2023
 21804 000028F4 7459                    	jz	short BADCOM
 21805 000028F6 83F804                  	cmp	ax,4		; 04H and 08H are .exe and .com
 21806                                  				; fuckin' sixteen-bit machine ought
 21807                                  	;jl	short BATCOMJ	; to be able to handle a SIXTEEN-BIT
 21808                                  				; DISPLACEMENT!!
 21809                                  	;;jmp	short NEOEXECUTE
 21810                                  	;jmp	short EXECUTE	
 21811                                  	; 25/02/2023
 21812 000028F9 7D03                    	jnl	short EXECUTE ; jge
 21813                                  
 21814                                  	; 02H is .bat
 21815                                  
 21816                                  	;nop
 21817                                  BATCOMJ:
 21818 000028FB E98CDE                  	jmp	BATCOM
 21819                                  
 21820                                  	; 25/02/2023
 21821                                  ;BADCOMJ45:
 21822                                  	;jmp	short BADCOM
 21823                                  
 21824                                  	;nop
 21825                                  EXECUTE:
 21826                                  NEOEXECUTE:
 21827 000028FE E87E02                  	call	IOSET
 21828                                  
 21829                                  ; MSDOS 6.0
 21830                                  ;M051
 21831                                  ; Previously LoadHigh was jumping to the execute label above. This was wrong
 21832                                  ;because IOSET was getting invoked twice resulting in 2 sets of redirections.
 21833                                  ;After a close, this would still leave one open active resulting in sharing
 21834                                  ;errors on subsequent opens of the redirected file.
 21835                                  
 21836                                  LH_EXECUTE:			;M051	
 21837 00002901 8E06[D58A]              	mov	es,[TRAN_TPA]
 21838                                  	;mov	ah,DEALLOC ; 49h
 21839 00002905 B449                    	mov	ah,49h
 21840 00002907 CD21                    	int	21h	; DOS -	2+ - FREE MEMORY
 21841                                  			; ES = segment address of area to be freed
 21842                                  				; Now running in "free" space
 21843 00002909 8E06[C58A]              	mov	es,[RESSEG]
 21844 0000290D 26FE06[8401]            	inc	byte [es:ExtCom] ; Indicate external command
 21845 00002912 26C606[8C01]00          	mov	byte [es:RestDir],0 
 21846                                  				; Since USERDIR1 is in transient, insure
 21847                                  				; this flag value for re-entry to COMMAND
 21848                                  	; MSDOS 6.0
 21849 00002918 BE[ED89]                	mov	si,EXECPATH	  ; offset TRANGROUP:EXECPATH	
 21850 0000291B BF[4B03]                	mov	di,SafePathBuffer ; offset RESGROUP:SAFEPATHBUFFER
 21851                                  	;mov	cx,LENMSGORPATHBUF
 21852 0000291E B95000                  	mov	cx,80
 21853 00002921 FC                      	cld
 21854 00002922 F3A4                    	rep	movsb		; copy program pathname to resident
 21855                                  
 21856                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21857 00002924 BF5C00                  	mov	di,FCB ; 5Ch
 21858 00002927 89FE                    	mov	si,di
 21859                                  	;mov	cx,82 ; 52h	; moving (100h-5Ch)/2 = 80h-2Eh
 21860 00002929 B152                    	mov	cl,82 ; 25/02/2023
 21861 0000292B F3A5                    	rep	movsw		; Transfer parameters to resident header
 21862                                  	
 21863                                  	; 25/02/2023
 21864                                  	;mov	dx,EXECPATH  ; MSDOS 3.3
 21865                                  	; MSDOS 6.0 (& 5.0)
 21866                                  	;mov	dx,offset RESGROUP:SAFEPATHBUFFER
 21867 0000292D BA[4B03]                	mov	dx,SafePathBuffer
 21868 00002930 06                      	push	es
 21869 00002931 1F                      	pop	ds
 21870                                  
 21871                                  	;mov	bx,offset RESGROUP:EXEC_BLOCK
 21872 00002932 BB[2703]                	mov	bx,Exec_Block  ; = offset EnvirSeg
 21873                                  	;mov	ax,EXEC*256 ; 4B00h
 21874 00002935 B8004B                  	mov	ax,4B00h
 21875                                  	;test	byte [ROM_CALL],-1 ; 0FFh ; MSDOS 3.3
 21876 00002938 2EF606[C78C]FF          	test	byte [cs:ROM_CALL],-1 ; MSDOS 6.0 (& 5.0)
 21877 0000293E 7403                    	jz	short OK_EXEC
 21878 00002940 E930DB                  	jmp	ROM_EXEC
 21879                                  
 21880                                  OK_EXEC:
 21881                                  
 21882                                  ; we are now running in free space. Anything we do from here on may get
 21883                                  ; trashed. Move the stack (also in free space) to allocated space because
 21884                                  ; since EXEC restores the stack, somebody may trash what is on the stack.
 21885                                  
 21886 00002943 8CC1                    	mov	cx,es
 21887 00002945 8ED1                    	mov	ss,cx
 21888 00002947 BC[2004]                	mov	sp,RStack
 21889                                  	; MSDOS 3.3
 21890                                  	;jmp	far [EXEC_ADDR]	; Jmp to the EXEC in the resident
 21891                                  	; 25/02/2023
 21892                                  	; MSDOS 6.0
 21893 0000294A 2EFF2E[CB8A]            	jmp	far [cs:EXEC_ADDR] ; Jmp to the EXEC in the resident
 21894                                  
 21895                                  ; ---------------------------------------------------------------------------
 21896                                  
 21897                                  	;  25/02/2023 - Retro DOS v4.0 COMMAND.COM
 21898                                  BADCOM:
 21899 0000294F 0E                      	push	cs
 21900 00002950 1F                      	pop	ds
 21901 00002951 BA[3E7F]                	mov	dx,BADNAM_PTR
 21902                                  cerror:		
 21903 00002954 E89024                  	call	std_eprintf
 21904 00002957 E9AAD7                  	jmp	TCOMMAND
 21905                                  
 21906                                  ; =============== S U B	R O U T	I N E =======================================
 21907                                  
 21908                                  ; Prescan converts the input buffer into a canonicalized form.
 21909                                  ; All redirections and pipes are removed.
 21910                                  
 21911                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 21912                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2A51h
 21913                                  
 21914                                  PRESCAN:
 21915 0000295A 31C9                    	xor	cx,cx
 21916 0000295C 8E06[C58A]              	mov	es,[RESSEG]
 21917 00002960 BE[2689]                	mov	si,COMBUF+2
 21918 00002963 89F7                    	mov	di,si
 21919                                  COUNTQUOTES:
 21920 00002965 AC                      	lodsb			; get a byte
 21921 00002966 3C22                    	cmp	al,22h	; '"'	; is it a quote?
 21922 00002968 7504                    	jne	short COUNTEND	; no, try for end of road
 21923 0000296A FEC5                    	inc	ch		; bump count
 21924 0000296C EBF7                    	jmp	short COUNTQUOTES
 21925                                  				; go get next char
 21926                                  COUNTEND:
 21927 0000296E 3C0D                    	cmp	al,0Dh	; 13	; end of road?
 21928 00002970 75F3                    	jne	short COUNTQUOTES
 21929                                  				; no, go back for next char
 21930                                  	; 26/02/2023
 21931                                  	; MSDOS 5.0 (& 6.0)
 21932 00002972 51                      	push	cx		; save count
 21933 00002973 89FE                    	mov	si,di		; restore pointer to begining
 21934                                  KanjiScan:
 21935 00002975 AC                      	lodsb			; get a byte
 21936 00002976 E848FA                  	call	testkanj	; is it a leadin byte
 21937 00002979 740F                    	jz	short KanjiQuote
 21938                                  				; no, check for quotes
 21939 0000297B 88C4                    	mov	ah,al		; save leadin
 21940 0000297D AC                      	lodsb			; get trailing byte
 21941 0000297E 3D2020                  	cmp	ax,2020h
 21942                                  	;cmp	ax,DB_SPACE	; is it Kanji space
 21943 00002981 75F2                    	jne	short KanjiScan	; no, go get next
 21944 00002983 C744FE2020              	mov	word [si-2],2020h
 21945                                  				; replace with spaces
 21946 00002988 EBEB                    	jmp	short KanjiScan	; go get next char
 21947                                  	
 21948                                  KanjiQuote:
 21949 0000298A 3C22                    	cmp	al,22h	; '"'	; beginning of quoted string
 21950 0000298C 750D                    	jne	short KanjiEnd	; no, check for end
 21951 0000298E FECD                    	dec	ch		; drop count
 21952 00002990 74E3                    	jz	short KanjiScan	; if count is zero, no quoting
 21953                                  KanjiQuoteLoop:
 21954 00002992 AC                      	lodsb			; get next byte
 21955 00002993 3C22                    	cmp	al,22h	; '"'	; is it another quote
 21956 00002995 75FB                    	jne	short KanjiQuoteLoop
 21957                                  				; no, get another
 21958 00002997 FECD                    	dec	ch		; yes, drop count
 21959 00002999 EBDA                    	jmp	short KanjiScan	; go get next char
 21960                                  KanjiEnd:
 21961 0000299B 3C0D                    	cmp	al,13 ; 0Dh	; end of line character?
 21962 0000299D 75D6                    	jne	short KanjiScan	; go back to beginning
 21963 0000299F 59                      	pop	cx		; get back original count
 21964                                  	; 26/04/2023
 21965 000029A0 89FE                    	mov	si,di		; restore pointer to beginning
 21966                                  	
 21967                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21968                                  PRESCANLP:
 21969 000029A2 AC                      	lodsb
 21970                                  	; 26/02/2023
 21971 000029A3 E81BFA                  	call	testkanj
 21972 000029A6 740C                    	jz	short NOTKANJ6
 21973                                  	; MSDOS 6.0
 21974 000029A8 8805                    	mov	[di],al
 21975 000029AA 47                      	inc	di		; fake STOSB into DS
 21976 000029AB AC                      	lodsb			; grab second byte
 21977 000029AC 8805                    	mov	[di],al		; fake stosb into DS
 21978 000029AE FEC1                    	inc	cl
 21979 000029B0 FEC1                    	inc	cl
 21980 000029B2 EBEE                    	jmp	short PRESCANLP
 21981                                  
 21982                                  NOTKANJ6:
 21983                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21984 000029B4 3C22                    	cmp	al,'"'	; 22h	; " character
 21985 000029B6 7510                    	jne	short TRYGREATER
 21986 000029B8 FECD                    	dec	ch
 21987 000029BA 740C                    	jz	short TRYGREATER
 21988                                  QLOOP:
 21989 000029BC 8805                    	mov	[di],al
 21990 000029BE 47                      	inc	di
 21991 000029BF FEC1                    	inc	cl
 21992 000029C1 AC                      	lodsb
 21993 000029C2 3C22                    	cmp	al,'"'		; " character
 21994 000029C4 75F6                    	jne	short QLOOP
 21995 000029C6 FECD                    	dec	ch
 21996                                  TRYGREATER:
 21997 000029C8 3C3E                    	cmp	al,'>' ; 3Eh
 21998                                  	;cmp	al,rabracket	; MSDOS 6.0 (& 5.0)
 21999                                  	;;cmp	al,[RABRACKET]	; MSDOS 3.3
 22000 000029CA 7557                    	jne	short NOOUT
 22001                                  
 22002                                  ; We have found a ">" char. We need to see if there is another ">"
 22003                                  ; following it.
 22004                                  
 22005 000029CC 3804                    	cmp	[si],al
 22006 000029CE 7506                    	jne	short NOAPPND
 22007 000029D0 AC                      	lodsb
 22008 000029D1 26FE06[AE01]            	inc	byte [es:Re_Out_App] ; Flag >>
 22009                                  NOAPPND:
 22010                                  ; Now we attempt to find the file name. First, scan off all whitespace
 22011                                  
 22012 000029D6 E807FC                  	call	scanoff
 22013                                  
 22014                                  	; 26/02/2023
 22015                                  	; MSDOS 6.0
 22016 000029D9 3C3C                    	cmp	al,'<' ; 3Ch
 22017                                  	;cmp	al,labracket	;AN040; was there no filename?
 22018 000029DB 7404                    	je	short REOUT_ERRSET
 22019                                  				;AN040; yes - set up error
 22020                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22021 000029DD 3C0D                    	cmp	al,0Dh
 22022 000029DF 750D                    	jnz	short GOTREOFIL
 22023                                  
 22024                                  ; There was no file present. Set us up at end-of-line.
 22025                                  
 22026                                  REOUT_ERRSET:			;AN040; set up for an error
 22027 000029E1 C6050D                  	mov	byte [di],0Dh	; Clobber first ">"
 22028 000029E4 26C706[AF01]0900        	mov	word [es:Re_OutStr],9
 22029                                  				; Cause an error later
 22030 000029EB E9A900                  	jmp	PRESCANEND
 22031                                  
 22032                                  GOTREOFIL:
 22033 000029EE 57                      	push	di
 22034                                  	;mov	di,offset RESGROUP:RE_OUTSTR
 22035 000029EF BF[AF01]                	mov	di,Re_OutStr
 22036 000029F2 89FB                    	mov	bx,di
 22037 000029F4 06                      	push	es
 22038                                  
 22039                                  	; 26/02/2023
 22040                                  	; MSDOS 6.0
 22041                                  SETREOUTSTR:			; Get the output redirection name
 22042                                  				; MSKK06 07/14/89
 22043 000029F5 51                      	push	cx		; save cx
 22044 000029F6 B94D00                  	mov	cx,64+13	; CX = max string length
 22045                                  SETREOUTSTR_LOOP:
 22046 000029F9 AC                      	lodsb
 22047 000029FA 3C0D                    	cmp	al,0Dh
 22048 000029FC 741A                    	je	short GOTRESTR_J
 22049 000029FE E8E7FB                  	call	DELIM
 22050 00002A01 7415                    	jz	short GOTRESTR_J
 22051 00002A03 3A06[C98A]              	cmp	al,[SWITCHAR]
 22052 00002A07 740F                    	je	short GOTRESTR_J
 22053 00002A09 3C22                    	cmp	al,'"' ; 22h 	;AN033; Is the character a quote?
 22054 00002A0B 7413                    	je	short PIPEERRSYNJ5_J
 22055                                  				;AN033; Yes - get out quick - or system crashes
 22056 00002A0D 3C3C                    	cmp	al,'<' ; 3Ch
 22057                                  	;cmp	al,labracket	;AN002; Is char for input redirection
 22058 00002A0F 7404                    	je	short ABRACKET_TERM
 22059                                  				;AN002; yes - end of string
 22060 00002A11 3C3E                    	cmp	al,'>' ; 3Eh
 22061                                  	;cmp	al,rabracket	;AN002; Is char for output redirection
 22062 00002A13 7506                    	jne	short NO_ABRACKET
 22063                                  				;AN002; no - not end of string
 22064                                  ABRACKET_TERM:			;AN002; have end of string by < or >
 22065 00002A15 4E                      	dec	si		;AN002; back up over symbol
 22066 00002A16 B020                    	mov	al,20h ; BLANK	;AN002; show delimiter as char
 22067                                  GOTRESTR_J:
 22068 00002A18 59                      	pop	cx		; MSKK06 07/14/89
 22069 00002A19 EB58                    	jmp	short GOTRESTR	;AN002; go process it
 22070                                  NO_ABRACKET:			;AN002; NOT AT END OF STRING
 22071 00002A1B AA                      	stosb			; store it into resgroup
 22072 00002A1C E2DB                    	loop	SETREOUTSTR_LOOP
 22073                                  				; MSKK06 07/14/89
 22074 00002A1E EBF8                    	jmp	short GOTRESTR_J
 22075                                  PIPEERRSYNJ5_J:
 22076 00002A20 59                      	pop	cx		; recover CX
 22077 00002A21 EB4B                    	jmp	short PIPEERRSYNJ5
 22078                                  
 22079                                  	; 26/02/2023
 22080                                  ;	; MSDOS 3.3
 22081                                  ;SETREOUTSTR_LOOP:		; Get the output redirection name
 22082                                  ;	lodsb
 22083                                  ;	cmp	al,0Dh
 22084                                  ;	jz	short GOTRESTR
 22085                                  ;	call	DELIM
 22086                                  ;	jz	short GOTRESTR
 22087                                  ;	cmp	al,[SWITCHAR]
 22088                                  ;	je	short GOTRESTR
 22089                                  ;	cmp	al,'"'
 22090                                  ;	jne	short NO_ABRACKET
 22091                                  ;	dec	ch
 22092                                  ;NO_ABRACKET:
 22093                                  ;	stosb
 22094                                  ;	jmp	short SETREOUTSTR_LOOP
 22095                                  
 22096                                  NOOUT:
 22097                                  	; 26/02/2023
 22098                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22099 00002A23 3C3C                    	cmp	al, '<' ; 3Ch
 22100                                  	;cmp	al,labracket	; MSDOS 6.0
 22101                                  	;;cmp	al,[LABRACKET]  ; MSDOS 3.3
 22102 00002A25 7523                    	jne	short CHKPIPE
 22103 00002A27 89F3                    	mov	bx,si		; Save loc of "<"
 22104 00002A29 E8B4FB                  	call	scanoff
 22105                                  	; MSDOS 6.0
 22106 00002A2C 3C3E                    	cmp	al,'>' ; 3Eh
 22107                                  	;cmp	al,rabracket	;AN040; was there no filename?
 22108 00002A2E 7404                    	je	short REIN_ERRSET ;AN040; yes - set up error
 22109                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22110 00002A30 3C0D                    	cmp	al,0Dh
 22111 00002A32 750B                    	jne	short GOTREIFIL
 22112                                  REIN_ERRSET:			;AN040; set up for error
 22113 00002A34 C6050D                  	mov	byte [di],0Dh	; Clobber "<"
 22114 00002A37 C706[708A]0900          	mov	word [RE_INSTR],9 
 22115                                  				; Cause an error later
 22116 00002A3D EB58                    	jmp	short PRESCANEND
 22117                                  GOTREIFIL:
 22118 00002A3F 57                      	push	di
 22119 00002A40 BF[708A]                	mov	di,RE_INSTR
 22120 00002A43 89FB                    	mov	bx,di
 22121 00002A45 06                      	push	es
 22122 00002A46 0E                      	push	cs
 22123 00002A47 07                      	pop	es		; store in TRANGROUP
 22124                                  	; 26/04/2023
 22125                                  	;jmp	short SETREOUTSTR_LOOP  ; MSDOS 3.3 COMMAND.COM
 22126 00002A48 EBAB                    	jmp	short SETREOUTSTR ; MSDOS 5.0 (& 6.0) COMMAND.COM
 22127                                  				; Get the input redirection name
 22128                                  CHKPIPE:
 22129 00002A4A 88C4                    	mov	ah,al
 22130                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22131 00002A4C 80FC7C                  	cmp	ah,'|' ; 7Ch
 22132                                  	;cmp	ah,ALTPIPECHR ; 7Ch
 22133                                  	;je	short ISPIPE3
 22134                                  	;; MSDOS 6.0
 22135                                  	;cmp	ah,'|' ; 7Ch
 22136                                  	;;cmp	al,vbar ; 7Ch
 22137                                  	;;;cmp	ah,[VBAR]  ; MSDOS 3.3
 22138 00002A4F 7539                    	jne	short CONTPRESCAN
 22139                                  ISPIPE3:
 22140                                  ; Only push the echo flag if we are entering the pipe for the first time.
 22141                                  
 22142 00002A51 26803E[0002]00          	cmp	byte [es:PipeFlag],0
 22143 00002A57 7505                    	jne	short NOECHOPUSH
 22144 00002A59 26D026[8801]            	shl	byte [es:EchoFlag],1 ; push echo state and turn it off
 22145                                  NOECHOPUSH:
 22146 00002A5E 26FE06[0002]            	inc	byte [es:PipeFlag]
 22147 00002A63 E87AFB                  	call	scanoff
 22148 00002A66 3C0D                    	cmp	al,0Dh
 22149 00002A68 7404                    	je	short PIPEERRSYNJ5
 22150                                  	; 26/02/2023
 22151 00002A6A 3C7C                    	cmp	al,'|' ; 7Ch
 22152                                  	;cmp	al,ALTPIPECHR ; 7Ch
 22153                                  	;je	short PIPEERRSYNJ5
 22154                                  	;; MSDOS 6.0
 22155                                  	;cmp	al,'|' ; 7Ch
 22156                                  	;;cmp	al,vbar ; 7Ch
 22157                                  	;;;cmp	al,[VBAR]  ; MSDOS 3.3	
 22158 00002A6C 751C                    	jne	short CONTPRESCAN
 22159                                  
 22160                                  PIPEERRSYNJ5:
 22161 00002A6E 06                      	push	es
 22162 00002A6F 1F                      	pop	ds
 22163 00002A70 E99E02                  	jmp	PIPEERRSYN
 22164                                  
 22165                                  ; Trailing :s are allowed on devices. Check to be sure that there is more
 22166                                  ; than just a : in the redir string.
 22167                                  
 22168                                  GOTRESTR:
 22169 00002A73 86E0                    	xchg	ah,al
 22170 00002A75 B03A                    	mov	al,':' ; 3Ah
 22171 00002A77 29FB                    	sub	bx,di		; compute negative of number of chars
 22172 00002A79 83FBFF                  	cmp	bx,-1		; is there just a :?
 22173 00002A7C 7407                    	je	short NOTRAILCOL ; yep, don't change
 22174 00002A7E 263845FF                	cmp	[es:di-1],al	; Trailing ':' OK on devices
 22175 00002A82 7501                    	jne	short NOTRAILCOL
 22176 00002A84 4F                      	dec	di		; Back up over trailing ':'
 22177                                  NOTRAILCOL:
 22178 00002A85 30C0                    	xor	al,al
 22179 00002A87 AA                      	stosb			; NUL terminate the string
 22180 00002A88 07                      	pop	es
 22181 00002A89 5F                      	pop	di		; Remember the start
 22182                                  CONTPRESCAN:
 22183 00002A8A 8825                    	mov	[di],ah		; "delete" the redirection string
 22184 00002A8C 47                      	inc	di
 22185 00002A8D 80FC0D                  	cmp	ah,0Dh
 22186 00002A90 7405                    	je	short PRESCANEND
 22187 00002A92 FEC1                    	inc	cl
 22188 00002A94 E90BFF                  	jmp	PRESCANLP
 22189                                  PRESCANEND:
 22190 00002A97 26803E[0002]00          	cmp	byte [es:PipeFlag],0
 22191 00002A9D 7414                    	jz	short ISNOPIPE
 22192                                  
 22193                                  	; 26/02/2023
 22194                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA0h
 22195                                  	;;mov	di,3C0h		; offset RESGROUP:PIPESTR
 22196                                  	;;			; (EndInit+160]
 22197                                  	;mov	di,offset RESGROUP:PIPESTR
 22198 00002A9F BF[A202]                	mov	di,PipeStr	; RESGROUP:EndInit+160
 22199                                  	;;MSDOS 5.0 COMMAND.COM - TRANGROUP:2BA3h
 22200                                  	;;mov	[es:3BEh],di	; [es:EndInit+158]
 22201 00002AA2 26893E[A002]            	mov	[es:PipePtr],di	; RESGROUP:EndInit+158
 22202                                  	
 22203 00002AA7 BE[2689]                	mov	si,COMBUF+2
 22204 00002AAA E833FB                  	call	scanoff
 22205                                  PIPESETLP:			; Transfer the pipe into the resident
 22206 00002AAD AC                      	lodsb			; pipe buffer
 22207 00002AAE AA                      	stosb
 22208 00002AAF 3C0D                    	cmp	al,0Dh
 22209 00002AB1 75FA                    	jnz	short PIPESETLP
 22210                                  ISNOPIPE:
 22211 00002AB3 880E[2589]              	mov	[COMBUF+1],cl
 22212 00002AB7 26803E[0002]00          	cmp	byte [es:PipeFlag],0
 22213 00002ABD 0E                      	push	cs
 22214 00002ABE 07                      	pop	es
 22215 00002ABF C3                      	retn
 22216                                  
 22217                                  ; =============== S U B	R O U T	I N E =======================================
 22218                                  
 22219                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22220                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2BC1h
 22221                                  cmd_copy:
 22222 00002AC0 BE[2689]                	mov	si,COMBUF+2
 22223 00002AC3 E81AFB                  	call	scanoff		; advance past separators...
 22224 00002AC6 0336[248C]              	add	si,[PathPos]
 22225 00002ACA BF8100                  	mov	di,81h
 22226 00002ACD 31C9                    	xor	cx,cx
 22227                                  cmdcopy:
 22228 00002ACF AC                      	lodsb
 22229 00002AD0 AA                      	stosb
 22230 00002AD1 3C0D                    	cmp	al,0Dh
 22231 00002AD3 7403                    	je	short copy_done
 22232 00002AD5 41                      	inc	cx
 22233 00002AD6 EBF7                    	jmp	short cmdcopy
 22234                                  copy_done:
 22235 00002AD8 880E8000                	mov	[80h],cl
 22236 00002ADC C3                      	retn
 22237                                  
 22238                                  ; =============== S U B	R O U T	I N E =======================================
 22239                                  
 22240                                  	; 25/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22241                                  test_append:
 22242 00002ADD BB[2489]                	mov	bx,COMBUF	; barry can address
 22243 00002AE0 BE[4F8B]                	mov	si,IDLEN	; address command name, DS already set 	
 22244 00002AE3 BAFFFF                  	mov	dx,-1
 22245 00002AE6 B800AE                  	mov	ax,0AE00h
 22246 00002AE9 CD2F                    	int	2Fh	; - Multiplex -	DOS 3.3+ internal 
 22247                                  			; - INSTALLABLE	COMMAND	- INSTALL CHECK
 22248                                  			; DX = FFFFh,[BX -> command line
 22249                                  			; Return: AL = FFh if this command is a TSR extension 
 22250                                  			;		   to COMMAND.COM
 22251                                  			; AL = 00h if the command should be executed as	usual
 22252                                  	;cmp	al,0
 22253 00002AEB 08C0                    	or	al,al ; 25/02/2023
 22254 00002AED C3                      	retn
 22255                                  
 22256                                  	; 25/02/2023
 22257                                  	; INT 2Fh
 22258                                  	; 	AX = AE00h
 22259                                  	; entry:
 22260                                  	; 	DX = magic value FFFFh
 22261                                  	; 	CH = FFh
 22262                                  	; 	CL = length of command line tail
 22263                                  	; 	DS:BX -> command line buffer  -- (offset COMBUF)
 22264                                  	; 	DS:SI -> command name buffer  -- (offset IDLEN)
 22265                                  	; return:
 22266                                  	;	AL = FFh if this command is a TSR extension to COMMAND.COM
 22267                                  	;	AL = 00h if the command should be executed as usual
 22268                                  	;
 22269                                  	; Format of COMMAND.COM command line buffer:
 22270                                  	;	Offset  Size    Description
 22271                                  	;	00h     BYTE    max length of command line, as in INT 21/AH=0Ah
 22272                                  	;	01h     BYTE    count of bytes to follow, excluding terminating 0Dh
 22273                                  	;	N BYTEs command line text, terminated by 0Dh
 22274                                  	;
 22275                                  	; Format of command name buffer:
 22276                                  	;	Offset  Size    Description
 22277                                  	;	00h     BYTE    length of command name
 22278                                  	;	01h    N BYTEs  uppercased command name (blank-padded to 11 chars)
 22279                                  
 22280                                  ;============================================================================
 22281                                  ; TMISC2.ASM, MSDOS 6.0, 1991
 22282                                  ;============================================================================
 22283                                  ; 05/10/2018 - Retro DOS v3.0
 22284                                  
 22285                                  ;	More misc routines
 22286                                  
 22287                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1D9Bh
 22288                                  
 22289                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22290                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2BEFh
 22291                                  
 22292                                  ; =============== S U B	R O U T	I N E =======================================
 22293                                  
 22294                                  SETPATH:
 22295                                  
 22296                                  ; ENTRY PathPos = ptr to string
 22297                                  ;       PathCnt = length of string
 22298                                  ;
 22299                                  ; EXIT  PathPos = ptr to string after pathname
 22300                                  ;       PathCnt = length of rest of string
 22301                                  ;       DX = ptr to pathname in string, made ASCIIZ
 22302                                  ;       DestIsDir = 1 if pathname delimiters appeared in pathname, 0 otherwise
 22303                                  ;       DestInfo = 2 if wildcards (?, *) appeared in pathname, 0 otherwise
 22304                                  ;
 22305                                  ;       A null character is dropped at the end of the pathname. If the
 22306                                  ;       character in that spot previously was CR, it is copied into the
 22307                                  ;       following byte. So there must be at least two two character 
 22308                                  ;       positions in the buffer following the pathname.
 22309                                  
 22310                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22311                                  	; 11/06/2023
 22312                                  	; MSDOS 6.0
 22313                                  	;mov	ax,[PathCnt]	;AC000; get length of string
 22314                                  	;mov	si,[PathPos]	;AC000; get start of source buffer
 22315                                  
 22316                                  	; 26/02/2023
 22317                                  	; MSDOS 3.3
 22318                                  	;mov	si,80h
 22319                                  	;lodsb
 22320                                  	;xor	ah,ah
 22321                                  	;mov	[PATCNT],ax
 22322                                  	;mov	[PATHPOS],si
 22323                                  GETPATH:
 22324                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22325 00002AEE C606[D08C]00            	mov	byte [DestInfo],0
 22326 00002AF3 C606[CC8C]00            	mov	byte [DestIsDir],0
 22327 00002AF8 8B36[248C]              	mov	si,[PathPos]	; SI = ptr to string
 22328 00002AFC 8B0E[228C]              	mov	cx,[PathCnt]	; CX = string length
 22329 00002B00 89F2                    	mov	dx,si		; DX = ptr to string
 22330 00002B02 E34D                    	jcxz	PATHDONE	; string length is zero, we're done
 22331 00002B04 51                      	push	cx		; save string length
 22332 00002B05 56                      	push	si		; save ptr to string
 22333 00002B06 E875FC                  	call	SWITCH
 22334                                  
 22335                                  ;       After Switch, SI has been scanned past any switches, and
 22336                                  ;       switches that COMMAND intrinsically recognizes are recorded in AX.
 22337                                  
 22338 00002B09 A3[268C]                	mov	[PathSw],ax	; PathSw = switch occurrence mask
 22339 00002B0C 5B                      	pop	bx		; BX = ptr to original string
 22340 00002B0D 29F3                    	sub	bx,si		; BX = -(# chars scanned by Switch)
 22341 00002B0F 59                      	pop	cx		; CX = string length
 22342 00002B10 01D9                    	add	cx,bx		; CX = string length from current SI
 22343 00002B12 89F2                    	mov	dx,si		; DX = ptr to current string
 22344                                  SKIPPATH:
 22345                                  	; 26/02/2023
 22346                                  	; MSDOS 6.0
 22347 00002B14 C606[538E]00            	mov	byte [KPARSE],0
 22348                                  SKIPPATH2:
 22349 00002B19 E336                    	jcxz	PATHDONE	; string length is zero, we're done
 22350 00002B1B 49                      	dec	cx		; CX = length left after next char
 22351 00002B1C AC                      	lodsb			; AL = next char of string
 22352                                  				; SI = ptr to char after this one
 22353                                  	; 26/02/2023
 22354 00002B1D E8A1F8                  	call	testkanj
 22355 00002B20 7408                    	jz	short TESTPPSEP
 22356 00002B22 49                      	dec	cx
 22357 00002B23 46                      	inc	si
 22358 00002B24 FE06[538E]              	inc	byte [KPARSE]
 22359 00002B28 EBEF                    	jmp	short SKIPPATH2
 22360                                  TESTPPSEP:
 22361 00002B2A E841FB                  	call	pathchrcmp	; compare AL to path delimiter char
 22362 00002B2D 7504                    	jnz	short TESTPMETA	; it's not a path delim
 22363 00002B2F FE06[CC8C]              	inc	byte [DestIsDir]
 22364                                  				; DestIsDir = 1, signalling path char
 22365                                  TESTPMETA:
 22366 00002B33 3C3F                    	cmp	al,'?'
 22367 00002B35 7505                    	jne	short TESTPSTAR	; char is not '?'
 22368 00002B37 800E[D08C]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 22369                                  TESTPSTAR:
 22370 00002B3C 3C2A                    	cmp	al,'*'
 22371                                  	;cmp	al,[STAR] ; MSDOS 3.3	
 22372 00002B3E 7505                    	jne	short TESTPDELIM ; char is not '*'
 22373 00002B40 800E[D08C]02            	or	byte [DestInfo],2 ; DestInfo = 2, signalling wildcard
 22374                                  TESTPDELIM:
 22375 00002B45 E8A0FA                  	call	DELIM		; compare AL to all delimiters
 22376 00002B48 7406                    	jz	short PATHDONEDEC ; delimiter found, back up & leave
 22377 00002B4A 3A06[C98A]              	cmp	al,[SWITCHAR]
 22378 00002B4E 75C4                    	jne	short SKIPPATH	; char isn't switch, go get next char
 22379                                  PATHDONEDEC:
 22380 00002B50 4E                      	dec	si		; SI = ptr to char after pathname
 22381                                  PATHDONE:
 22382 00002B51 30C0                    	xor	al,al		; AL = NULL
 22383 00002B53 8604                    	xchg	al,[si]		; place NULL after pathname
 22384 00002B55 46                      	inc	si		; SI = ptr to byte after NULL
 22385 00002B56 3C0D                    	cmp	al,0Dh		; were we at end of line?
 22386 00002B58 7502                    	jne	short NOPSTORE	; not EOL, finish up
 22387 00002B5A 8804                    	mov	[si],al		; save EOL after NULL
 22388                                  NOPSTORE:
 22389 00002B5C 8936[248C]              	mov	[PathPos],si	; PathPos = ptr to char after NULL
 22390 00002B60 890E[228C]              	mov	[PathCnt],cx	; PathCnt = length of string left
 22391                                  SETPATH_RETN:
 22392 00002B64 C3                      	retn
 22393                                  
 22394                                  ; ---------------------------------------------------------------------------
 22395                                  
 22396                                  PGETARG:
 22397 00002B65 BE8000                  	mov	si,80h
 22398 00002B68 AC                      	lodsb
 22399 00002B69 08C0                    	or	al,al
 22400 00002B6B 74F7                    	jz	short SETPATH_RETN
 22401 00002B6D E80300                  	call	PSCANOFF
 22402 00002B70 3C0D                    	cmp	al,0Dh
 22403 00002B72 C3                      	retn
 22404                                  
 22405                                  ; ---------------------------------------------------------------------------
 22406                                  
 22407                                  PSCANOFF:
 22408 00002B73 AC                      	lodsb
 22409 00002B74 E871FA                  	call	DELIM
 22410 00002B77 7504                    	jnz	short PSCANOFFD
 22411 00002B79 3C3B                    	cmp	al,';' ; 3Bh
 22412 00002B7B 75F6                    	jne	short PSCANOFF	; ';' is not a delimiter
 22413                                  PSCANOFFD:
 22414 00002B7D 4E                      	dec	si		; Point to first non-delimiter
 22415 00002B7E C3                      	retn
 22416                                  
 22417                                  ; =============== S U B	R O U T	I N E =======================================
 22418                                  
 22419                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22420                                  IOSET:
 22421                                  	; ALL REGISTERS PRESERVED
 22422 00002B7F 1E                      	push	ds
 22423 00002B80 52                      	push	dx
 22424 00002B81 50                      	push	ax
 22425 00002B82 53                      	push	bx
 22426 00002B83 51                      	push	cx
 22427 00002B84 2E8E1E[C58A]            	mov	ds,[cs:RESSEG]
 22428 00002B89 803E[0002]00            	cmp	byte [PipeFlag],0
 22429 00002B8E 750D                    	jne	short NOREDIR
 22430 00002B90 F606[9301]FF            	test	byte [IfFlag],0FFh
 22431 00002B95 7506                    	jnz	short NOREDIR
 22432 00002B97 E88E00                  	call	TESTDOREIN
 22433 00002B9A E80600                  	call	TESTDOREOUT
 22434                                  NOREDIR:
 22435 00002B9D 59                      	pop	cx
 22436 00002B9E 5B                      	pop	bx
 22437 00002B9F 58                      	pop	ax
 22438 00002BA0 5A                      	pop	dx
 22439 00002BA1 1F                      	pop	ds
 22440 00002BA2 C3                      	retn
 22441                                  
 22442                                  ; =============== S U B	R O U T	I N E =======================================
 22443                                  
 22444                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22445                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CF3h
 22446                                  TESTDOREOUT:
 22447 00002BA3 803E[AF01]00            	cmp	byte [Re_OutStr],0
 22448                                  	;je	short NOREOUT  ; MSDOS 3.3
 22449                                  	; 26/02/2023
 22450 00002BA8 7502                    	jne	short REOUTEXISTS
 22451 00002BAA EB7B                    	jmp	NOREOUT 
 22452                                  REOUTEXISTS:
 22453 00002BAC 803E[AE01]00            	cmp	byte [Re_Out_App],0
 22454 00002BB1 745D                    	je	short REOUTCRT
 22455                                  
 22456 00002BB3 BA[AF01]                	mov	dx,Re_OutStr
 22457                                  
 22458                                  	; 26/02/2023
 22459                                  	; MSDOS 6.0
 22460                                  	;mov	ax,(OPEN SHL 8) OR 2 ;AC011; Open for read/write
 22461 00002BB6 B8023D                  	mov	ax,3D02h
 22462                                  	; MSDOS 3.3
 22463                                  	;mov	ax,(OPEN<<8)|1  ; 3D01h ; Open for write
 22464                                  	
 22465                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22466 00002BB9 50                      	push	ax
 22467 00002BBA CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 22468                                  			; DS:DX	-> ASCIZ filename
 22469                                  			; AL = access mode
 22470                                  			; 1 - write
 22471 00002BBC 5B                      	pop	bx
 22472 00002BBD 724B                    	jc	short OpenWriteError
 22473                                  
 22474                                  	; 26/02/2023
 22475                                  	; MSDOS 6.0
 22476 00002BBF 89C3                    	mov	bx,ax
 22477                                  	;mov	ax,IOCTL<<8		;AN035; Get attributes of handle
 22478 00002BC1 B80044                  	mov	ax,4400h
 22479 00002BC4 CD21                    	int	21h			;AN035;
 22480                                  			; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 22481                                  			; BX = file or device handle
 22482 00002BC6 F6C280                  	test	dl,80h
 22483                                  	;test	dl,devid_ISDEV		;AN035; Is it a device?
 22484 00002BC9 7554                    	jnz	short SET_REOUT		;AN035; Yes, don't read from it
 22485                                  	
 22486                                  	;mov	ax,(LSEEK SHL 8) OR 2
 22487 00002BCB B80242                  	mov	ax,4202h
 22488 00002BCE B9FFFF                  	mov	cx,-1			;AC011; MOVE TO EOF -1
 22489 00002BD1 89CA                    	mov	dx,cx			;AC011;
 22490 00002BD3 CD21                    	int	21h
 22491                                  			; DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 22492                                  			; AL = method: offset from end of file
 22493 00002BD5 0E                      	push	cs			;AN011; Get transient seg to DS
 22494 00002BD6 1F                      	pop	ds			;AN011;
 22495                                  	
 22496                                  	;mov	ax,(READ SHL 8) 	;AN011; Read one byte from the
 22497 00002BD7 B8003F                  	mov	ax,3F00h
 22498 00002BDA B90100                  	mov	cx,1			;AN011;  file into one_char_val
 22499 00002BDD BA[C48C]                	mov	dx,One_Char_Val		;AN011;
 22500 00002BE0 CD21                    	int	21h			;AN011;
 22501                                  			; DOS - 2+ - READ FROM FILE WITH HANDLE
 22502                                  			; BX = file handle, CX = number of bytes to read
 22503                                  			; DS:DX -> buffer
 22504 00002BE2 7226                    	jc	short OpenWriteError	;AN011; If error, exit
 22505 00002BE4 39C8                    	cmp	ax,cx			;AN017; Did we read 1 byte?
 22506 00002BE6 7517                    	jnz	short reout_0_length	;AN017; No - file must be 0 length
 22507                                  	
 22508 00002BE8 803E[C48C]1A            	cmp	byte [One_Char_Val],1Ah	;AN011; Was char an eof mark?
 22509 00002BED 8E1E[C58A]              	mov	ds,[RESSEG]		;AN011; Get resident segment back
 22510 00002BF1 752C                    	jne	short SET_REOUT		;AN011; No, just continue
 22511                                  	
 22512                                  	;mov	ax,(LSEEK<<8)|1		;AN011; EOF mark found
 22513 00002BF3 B80142                  	mov	ax,4201h
 22514 00002BF6 B9FFFF                  	mov	cx,-1			;AN011; LSEEK back one byte
 22515                                  setreout_p:	; 26/02/2023
 22516 00002BF9 89CA                    	mov	dx,cx			;AN011;
 22517 00002BFB CD21                    	int	21h			;AN011;
 22518 00002BFD EB20                    	jmp	short SET_REOUT
 22519                                  reout_0_length: 			;AN017; We have a 0 length file
 22520                                  	; ds = cs ; 26/02/2023
 22521                                  	;mov	ds,[cs:RESSEG] ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2D50h
 22522                                  					;AN017; Get resident segment back
 22523                                  	; 26/02/2023
 22524 00002BFF 8E1E[C58A]              	mov	ds,[RESSEG]
 22525                                  	;mov	ax,(LSEEK SHL 8)	;AN017; Move to beginning of file
 22526 00002C03 B80042                  	mov	ax,4200h
 22527 00002C06 31C9                    	xor	cx,cx			;AN017; Offset is 0
 22528                                  	;mov	dx,cx			;AN017;
 22529                                  	;int	21h			;AN017;
 22530                                  	;jmp	short SET_REOUT 	;AN017; now finish setting up redirection
 22531                                  	; 26/02/2023
 22532 00002C08 EBEF                    	jmp	short setreout_p
 22533                                  
 22534                                  	; 26/02/2023
 22535                                  	; MSDOS 3.3
 22536                                  	;xor	dx,dx
 22537                                  	;xor	cx,cx
 22538                                  	;mov	bx,ax
 22539                                  	;mov	ax,(LSEEK<<8)|2 ; 4202h
 22540                                  	;int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 22541                                  	;		; AL = method: offset from end of file
 22542                                  	;jmp	short SET_REOUT
 22543                                  		
 22544                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22545                                  OpenWriteError:	
 22546                                  	;cmp	ax,5
 22547 00002C0A 83F805                  	cmp	ax,ERROR_ACCESS_DENIED
 22548 00002C0D F9                      	stc
 22549                                  	;;je	short REDIRERR ; MSDOS 3.3
 22550                                  	; 26/02/2023
 22551                                  	;jnz	short REOUTCRT
 22552                                  	;jmp	REDIRERR
 22553 00002C0E 743B                    	je	short REDIRERR
 22554                                  
 22555                                  REOUTCRT:	
 22556 00002C10 BA[AF01]                	mov	dx,Re_OutStr
 22557 00002C13 31C9                    	xor	cx,cx
 22558                                  	;mov	ah,CREAT ; 3Ch
 22559 00002C15 B43C                    	mov	ah,3Ch
 22560 00002C17 50                      	push	ax
 22561 00002C18 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 22562                                  			; CX = attributes for file
 22563                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 22564 00002C1A 5B                      	pop	bx
 22565                                  	;jc	short REDIRERR ; MSDOS 3.3
 22566                                  	; 26/02/2023
 22567                                  	;jnc	short NOREDIRERR
 22568                                  	;jmp	REDIRERR
 22569 00002C1B 722E                    	jc	short REDIRERR
 22570                                  	
 22571                                  NOREDIRERR:
 22572 00002C1D 89C3                    	mov	bx,ax
 22573                                  SET_REOUT:
 22574                                  
 22575                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdout
 22576                                  ; spot. We invalidate the new JFN we got.
 22577                                  
 22578 00002C1F B0FF                    	mov	al,0FFh
 22579                                  	;xchg	al,[bx+18h]
 22580 00002C21 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 22581 00002C24 A21900                  	mov	[PDB.JFN_TABLE+1],al
 22582                                  NOREOUT:
 22583                                  IOSET_RETN:	; 17/04/2023
 22584 00002C27 C3                      	retn
 22585                                  
 22586                                  ; =============== S U B	R O U T	I N E =======================================
 22587                                  
 22588                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22589                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 22590                                  TESTDOREIN:
 22591 00002C28 2E803E[708A]00          	cmp	byte [cs:RE_INSTR],0
 22592 00002C2E 74F7                    	jz	short IOSET_RETN
 22593 00002C30 1E                      	push	ds
 22594 00002C31 0E                      	push	cs
 22595 00002C32 1F                      	pop	ds
 22596 00002C33 BA[708A]                	mov	dx,RE_INSTR
 22597                                  	;mov	ax,OPEN*256 ; 3D00h
 22598 00002C36 B8003D                  	mov	ax,3D00h
 22599 00002C39 89C3                    	mov	bx,ax
 22600 00002C3B CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 22601                                  			; DS:DX	-> ASCIZ filename
 22602                                  			; AL = access mode
 22603                                  			; 0 - read
 22604 00002C3D 1F                      	pop	ds
 22605                                  
 22606 00002C3E 720B                    	jc	short REDIRERR
 22607                                  
 22608 00002C40 89C3                    	mov	bx,ax
 22609 00002C42 B0FF                    	mov	al,0FFh
 22610                                  
 22611                                  ; Mega sleaze!! We move the SFN from the new handle spot into the old stdin
 22612                                  ; spot. We invalidate the new JFN we got.
 22613                                  
 22614                                  	;xchg	al,[bx+18h]
 22615 00002C44 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 22616 00002C47 A21800                  	mov	[PDB.JFN_TABLE],al
 22617 00002C4A C3                      	retn
 22618                                  
 22619                                  ; ---------------------------------------------------------------------------
 22620                                  
 22621                                  ; We had some kind of error on the redirection. Figure out what the
 22622                                  ; appropriate message should be; BX has the system call that failed
 22623                                  
 22624                                  REDIRERR:
 22625 00002C4B 0E                      	push	cs
 22626 00002C4C 1F                      	pop	ds
 22627 00002C4D E82E00                  	call	TriageError  ; MSDOS 6.0
 22628                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 22629                                  
 22630                                  ; At this point, we have recognized the network-generated access denied error.
 22631                                  ; The correct message is in DX
 22632                                  
 22633 00002C50 83F841                  	cmp	ax,65
 22634 00002C53 7408                    	je	short _CERRORJ	;AC000; just issue message returned
 22635 00002C55 80FF3D                  	cmp	bh,OPEN ; 3Dh
 22636 00002C58 7406                    	je	short OpenError
 22637 00002C5A BA[357F]                	mov	dx,FULLDIR_PTR
 22638                                  _CERRORJ:
 22639 00002C5D E9F4FC                  	jmp	cerror
 22640                                  
 22641                                  OpenError:
 22642                                  ; The system call was an OPEN. Report either file not found or path not found.
 22643                                  
 22644                                  	; 26/02/2023
 22645                                  	; MSDOS 6.0
 22646                                  	;mov	byte [cs:msg_disp_class],1
 22647 00002C60 2EC606[197F]01          	mov	byte [cs:msg_disp_class],ext_msg_class
 22648                                  				;AN000; set up extended error msg class
 22649 00002C66 BA[1B7F]                	mov	dx,extend_buf_ptr
 22650                                  				;AC000; get extended message pointer
 22651 00002C69 2EA3[1B7F]              	mov	[cs:extend_buf_ptr],ax
 22652                                  				;AN000; get message number in control block
 22653 00002C6D E9E4FC                  	jmp	cerror
 22654                                  
 22655                                  	; 26/02/2023
 22656                                  	; MSDOS 3.3
 22657                                  	;mov	dx,FNOTFOUNDPTR
 22658                                  	;;cmp	ax,2
 22659                                  	;cmp	ax,ERROR_FILE_NOT_FOUND
 22660                                  	;je	short _CERRORJ
 22661                                  	;mov	dx,ACCDENPTR
 22662                                  	;;cmp	ax,5 ; Access denied error
 22663                                  	;cmp	ax,ERROR_ACCESS_DENIED
 22664                                  	;je	short _CERRORJ
 22665                                  	;	; ERROR_PATH_NOT_FOUND
 22666                                  	;mov	dx,PNOTFOUNDPTR
 22667                                  	;jmp	CERROR
 22668                                  
 22669                                  ; =============== S U B	R O U T	I N E =======================================
 22670                                  
 22671                                  ; Compute length of string (including NUL) in DS:SI into CX. Change no other
 22672                                  ; registers
 22673                                  
 22674                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 22675                                  dstrlen:
 22676 00002C70 50                      	push	ax
 22677 00002C71 31C9                    	xor	cx,cx
 22678 00002C73 FC                      	cld
 22679                                  dloop:
 22680 00002C74 AC                      	lodsb
 22681 00002C75 41                      	inc	cx
 22682 00002C76 08C0                    	or	al,al
 22683 00002C78 75FA                    	jnz	short dloop
 22684 00002C7A 29CE                    	sub	si,cx
 22685 00002C7C 58                      	pop	ax
 22686                                  TRIAGEERR_RETN:
 22687 00002C7D C3                      	retn
 22688                                  
 22689                                  ; =============== S U B	R O U T	I N E =======================================
 22690                                  
 22691                                  ;Break	<Extended error support>
 22692                                  
 22693                                  TriageError:  ; MSDOS 6.0
 22694                                  
 22695                                  ; TriageError will examine the return from a carry-set system call and
 22696                                  ; return the correct error if applicable.
 22697                                  ;
 22698                                  ;   Inputs:	outputs from a carry-settable system call
 22699                                  ;		No system calls may be done in the interrim
 22700                                  ;   Outputs:	If carry was set on input
 22701                                  ;		   carry set on output
 22702                                  ;		   DX contains trangroup offset to printf message
 22703                                  ;		else
 22704                                  ;		   No registers changed
 22705                                  
 22706                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1EEEh
 22707                                  
 22708                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22709                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2D92h
 22710                                  
 22711                                  GET_EXT_ERR_NUMBER:  ; MSDOS 3.3
 22712 00002C7E 73FD                    	jnc	short TRIAGEERR_RETN ; no carry => do nothing...
 22713 00002C80 9C                      	pushf
 22714 00002C81 53                      	push	bx
 22715 00002C82 51                      	push	cx
 22716 00002C83 56                      	push	si
 22717 00002C84 57                      	push	di
 22718 00002C85 55                      	push	bp
 22719 00002C86 06                      	push	es
 22720 00002C87 1E                      	push	ds
 22721 00002C88 50                      	push	ax
 22722 00002C89 52                      	push	dx
 22723 00002C8A B459                    	mov	ah,59h
 22724                                  	;mov	ah,GETEXTENDEDERROR
 22725 00002C8C CD21                    	int	21h	; DOS -	3+ - GET EXTENDED ERROR	CODE
 22726                                  			; BX = version code (0000h for DOS 3.x)
 22727 00002C8E 59                      	pop	cx
 22728 00002C8F 5B                      	pop	bx		; restore original AX
 22729 00002C90 BA[417F]                	mov	dx,ACCDEN_PTR
 22730 00002C93 83F841                  	cmp	ax,65		; network access denied?
 22731 00002C96 7404                    	je	short NoMove	; Yes, return it.
 22732 00002C98 89D8                    	mov	ax,bx
 22733 00002C9A 89CA                    	mov	dx,cx
 22734                                  NoMove:
 22735 00002C9C 1F                      	pop	ds
 22736 00002C9D 07                      	pop	es
 22737 00002C9E 5D                      	pop	bp
 22738 00002C9F 5F                      	pop	di
 22739 00002CA0 5E                      	pop	si
 22740 00002CA1 59                      	pop	cx
 22741 00002CA2 5B                      	pop	bx
 22742 00002CA3 9D                      	popf
 22743 00002CA4 C3                      	retn
 22744                                  
 22745                                  ; =============== S U B	R O U T	I N E =======================================
 22746                                  
 22747                                  	; Far call from resident portion/segment of COMMAND.COM
 22748                                  
 22749                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F15h
 22750                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DB9h
 22751                                  
 22752                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22753                                  Triage_Init:
 22754 00002CA5 E8D6FF                  	call	TriageError	 ; MSDOS 6.0
 22755                                  	;call	GET_EXT_ERR_NUMBER ; MSDOS 3.3
 22756 00002CA8 CB                      	retf
 22757                                  
 22758                                  ; =============== S U B	R O U T	I N E =======================================
 22759                                  
 22760                                  ; MSDOS 6.0
 22761                                  
 22762                                  ; ****************************************************************
 22763                                  ; *
 22764                                  ; * ROUTINE:	 MOVE_TO_SRCBUF
 22765                                  ; *
 22766                                  ; * FUNCTION:	 Move ASCIIZ string from DS:SI to SRCBUF.  Change
 22767                                  ; *		 terminating 0 to 0dH.	Set PATHCNT to length of
 22768                                  ; *		 string.  Set PATHPOS to start of SRCBUF.
 22769                                  ; *
 22770                                  ; * INPUT:	 DS:SI points to ASCIIZ string
 22771                                  ; *		 ES    points to TRANGROUP
 22772                                  ; *
 22773                                  ; * OUTPUT:	 SRCBUF filled in with string terminated by 0dH
 22774                                  ; *		 PATHCNT set to length of string
 22775                                  ; *		 PATHPOS set to start of SRCBUF
 22776                                  ; *		 CX,AX	 changed
 22777                                  ; *
 22778                                  ; ****************************************************************
 22779                                  
 22780                                  	; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22781                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2CABh
 22782                                  Move_To_SrcBuf:
 22783 00002CA9 56                      	push	si			;AN000;  save si,di
 22784 00002CAA 57                      	push	di			;AN000;
 22785 00002CAB 51                      	push	cx			;AN000;
 22786 00002CAC BF[348D]                	mov	di,SrcBuf		;AN000;  set ES:DI to srcbuf
 22787 00002CAF 31C9                    	xor	cx,cx			;AN000; clear cx for counint
 22788 00002CB1 89C8                    	mov	ax,cx			;AN000; clear ax
 22789 00002CB3 57                      	push	di			;AN000; save start of srcbuf
 22790 00002CB4 AC                      	lodsb				;AN000; get a character from DS:SI
 22791                                  mts_get_chars:				;AN000;
 22792                                  	;cmp	al,0			;AN000; was it a null char?
 22793 00002CB5 20C0                    	and 	al,al ; al = 0 ?
 22794 00002CB7 7405                    	jz	short mts_end_string	;AN000; yes - exit
 22795 00002CB9 AA                      	stosb				;AN000; no - store it in srcbuf
 22796 00002CBA 41                      	inc	cx			;AN000; increment length count
 22797 00002CBB AC                      	lodsb				;AN000; get a character from DS:SI
 22798 00002CBC EBF7                    	jmp	short mts_get_chars	;AN000; go check it
 22799                                  mts_end_string: 			;AN000; we've reached the end of line
 22800                                  	;mov	al,END_OF_LINE_IN	;AN000; store 0Dh in srcbuf
 22801 00002CBE B00D                    	mov	al,0Dh
 22802 00002CC0 AA                      	stosb				;AN000;
 22803 00002CC1 5F                      	pop	di			;AN000; restore start of srcbuf
 22804 00002CC2 0E                      	push	cs			;AN000; set DS to local segment
 22805 00002CC3 1F                      	pop	ds			;AN000;
 22806 00002CC4 890E[228C]              	mov	[PathCnt],cx		;AN000; set patchcnt to length count
 22807 00002CC8 893E[248C]              	mov	[PathPos],di		;AN000; set pathpos to start of srcbuf
 22808 00002CCC 59                      	pop	cx			;AN000; restore cx,di,si
 22809 00002CCD 5F                      	pop	di			;AN000;
 22810 00002CCE 5E                      	pop	si			;AN000;
 22811 00002CCF C3                      	retn				;AN000; exit
 22812                                  
 22813                                  ;============================================================================
 22814                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 22815                                  ;============================================================================
 22816                                  ; 03/10/2018 - Retro DOS v3.0
 22817                                  
 22818                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 1F19h
 22819                                  
 22820                                  ; 26/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 22821                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 2DE4h
 22822                                  
 22823                                  ; =============== S U B	R O U T	I N E =======================================
 22824                                  
 22825                                  	; 26/02/2023
 22826                                  SINGLETEST:
 22827 00002CD0 1E                      	push	ds
 22828 00002CD1 2E8E1E[C58A]            	mov	ds,[cs:RESSEG]
 22829 00002CD6 833E[8E01]00            	cmp	word [SingleCom],0
 22830 00002CDB 7406                    	jz	short TESTDONE
 22831 00002CDD 813E[8E01]FFEF          	cmp	word [SingleCom],0EFFFh
 22832                                  TESTDONE:
 22833 00002CE3 1F                      	pop	ds
 22834 00002CE4 C3                      	retn
 22835                                  
 22836                                  ; =============== S U B	R O U T	I N E =======================================
 22837                                  
 22838                                  	; 26/02/2023
 22839                                  SetRest1:
 22840 00002CE5 B001                    	mov	al,1
 22841                                  
 22842                                  ; ---------------------------------------------------------------------------
 22843                                  
 22844                                  SETREST:
 22845 00002CE7 1E                      	push	ds
 22846 00002CE8 8E1E[C58A]              	mov	ds,[RESSEG]
 22847 00002CEC A2[8C01]                	mov	[RestDir],al
 22848 00002CEF 1F                      	pop	ds
 22849 00002CF0 C3                      	retn
 22850                                  
 22851                                  ; =============== S U B	R O U T	I N E =======================================
 22852                                  
 22853                                  ; Note that we need to handle the same thing that RestDir handles: the
 22854                                  ; requirement that we try only once to restore the user's environment after
 22855                                  ; and INT 24 or the like. If the condition that causes the INT 24 does not
 22856                                  ; disappear, we just give up.
 22857                                  
 22858                                  	; 26/02/2023 - Retro DOS v4.0 COMMAND.COM
 22859                                  PIPEDEL:
 22860 00002CF1 1E                      	push	ds
 22861 00002CF2 52                      	push	dx
 22862 00002CF3 2E8E1E[C58A]            	mov	ds,[cs:RESSEG]
 22863                                  	;mov	dx,320h	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E0Ch
 22864                                  			; Pipe1 = offset RESGROUP:EndInit
 22865 00002CF8 BA[0202]                	mov	dx,Pipe1	; Clean up in case ^C
 22866                                  	;mov	ah,Unlink ; 41h 
 22867 00002CFB B441                    	mov	ah,41h
 22868 00002CFD CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 22869                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 22870                                  			;		(no wildcards allowed)
 22871                                  
 22872                                  	;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM - TRANGROUP:2E13h
 22873                                  			; Pipe2 = offset RESGROUP:EndInit+79
 22874 00002CFF BA[5102]                	mov	dx,Pipe2
 22875                                  	;mov	ah,Unlink ; 41h
 22876 00002D02 B441                    	mov	ah,41h
 22877 00002D04 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 22878                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 22879                                  			;		(no wildcards allowed)
 22880 00002D06 5A                      	pop	dx
 22881 00002D07 E86202                  	call	PipeOff
 22882 00002D0A C606[0102]00            	mov	byte [PipeFiles],0
 22883 00002D0F 1F                      	pop	ds
 22884 00002D10 C3                      	retn
 22885                                  
 22886                                  ; ---------------------------------------------------------------------------
 22887                                  
 22888                                  	; 26/02/2023
 22889                                  PIPEERRSYN:
 22890 00002D11 BA[B37F]                	mov	dx,SYNTMES_PTR
 22891 00002D14 E8DAFF                  	call	PIPEDEL
 22892 00002D17 0E                      	push	cs
 22893 00002D18 1F                      	pop	ds
 22894 00002D19 E938FC                  	jmp	cerror
 22895                                  
 22896                                  ; ---------------------------------------------------------------------------
 22897                                  
 22898                                  	; 26/02/2023
 22899                                  PIPERR:
 22900 00002D1C 9C                      	pushf
 22901 00002D1D E85EFF                  	call    TriageError
 22902                                  	;call	GET_EXT_ERR_NUMBER  ; MSDOS 3.3
 22903 00002D20 50                      	push	ax		; Save results from TriageError
 22904 00002D21 52                      	push	dx
 22905 00002D22 BA[7C80]                	mov	dx,PIPEEMES_PTR
 22906 00002D25 E8C9FF                  	call	PIPEDEL
 22907 00002D28 0E                      	push	cs
 22908 00002D29 1F                      	pop	ds
 22909 00002D2A E8BA20                  	call	std_eprintf
 22910 00002D2D 5A                      	pop	dx		; Restore results from TriageError
 22911 00002D2E 58                      	pop	ax
 22912 00002D2F 9D                      	popf
 22913 00002D30 83F841                  	cmp	ax,65
 22914 00002D33 7503                    	jne	short TCOMMANDJ
 22915 00002D35 E91CFC                  	jmp	cerror
 22916                                  
 22917                                  TCOMMANDJ:
 22918 00002D38 E9C9D3                  	jmp	TCOMMAND
 22919                                  
 22920                                  ; ---------------------------------------------------------------------------
 22921                                  
 22922                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 22923                                  PIPEPROCSTRT:
 22924 00002D3B 8E1E[C58A]              	mov	ds,[RESSEG]
 22925 00002D3F FE06[0102]              	inc	byte [PipeFiles] ; Flag that the pipe files exist
 22926                                  
 22927                                  	; MSDOS 6.0
 22928 00002D43 06                      	push	es
 22929 00002D44 57                      	push	di
 22930 00002D45 1E                      	push	ds
 22931 00002D46 56                      	push	si
 22932                                  	
 22933 00002D47 1E                      	push	ds
 22934 00002D48 06                      	push	es
 22935 00002D49 1F                      	pop	ds			;ds = TRANGROUP
 22936 00002D4A BE[D985]                	mov	si,TempVarName		;ds:si = "TEMP="
 22937                                  
 22938                                  ;Some hideous code in Find_Name_In_Environment. Expects ds = TRANGROUP and
 22939                                  ;so the routine is not really general
 22940                                  
 22941 00002D4D E8C7F5                  	call	find_name_in_environment
 22942                                  					;es:di points at path
 22943 00002D50 1F                      	pop	ds			;ds = DATARES again
 22944 00002D51 721F                    	jc	short no_temp_path
 22945                                  	
 22946 00002D53 1E                      	push	ds
 22947 00002D54 06                      	push	es
 22948 00002D55 1F                      	pop	ds
 22949 00002D56 07                      	pop	es			;swap ds and es
 22950 00002D57 89FE                    	mov	si,di			;ds:si points at path
 22951                                  	
 22952 00002D59 E8AA02                  	call	skip_white		;skip white space chars
 22953                                  
 22954                                  ;This copies the path into both buffers -- Pipe1 & Pipe2
 22955                                  
 22956 00002D5C E8B302                  	call	copy_pipe_path		;copy the pipe path
 22957                                  	
 22958                                  ;Check if the TEMP path is valid
 22959                                  
 22960 00002D5F 06                      	push	es
 22961 00002D60 1F                      	pop	ds			;ds = DATARES
 22962                                  	;mov	dx,offset DATARES:Pipe1	;ds:dx = path to look for
 22963                                  	;mov	dx,320h ; MSDOS 5.0 - offset EndInit
 22964 00002D61 BA[0202]                	mov	dx,Pipe1
 22965                                  	;mov	ax,(CHMOD shl 8) or 0
 22966 00002D64 B80043                  	mov	ax,4300h
 22967 00002D67 CD21                    	int	21h
 22968 00002D69 7207                    	jc	short no_temp_path
 22969                                  	
 22970 00002D6B F7C11000                	test	cx,10h			;is it a directory?
 22971 00002D6F 7501                    	jnz	short no_temp_path	;yes, continue (carry clear)
 22972                                  	
 22973 00002D71 F9                      	stc				;no, indicate fail
 22974                                  no_temp_path:
 22975 00002D72 5E                      	pop	si
 22976 00002D73 1F                      	pop	ds
 22977 00002D74 5F                      	pop	di
 22978 00002D75 07                      	pop	es
 22979 00002D76 730B                    	jnc	short crt_temp		;path found, create tempfiles
 22980                                  
 22981                                  	; 27/02/2023
 22982                                  	; MSDOS 3.3
 22983                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 22984                                  	;				; Get current drive
 22985                                  	;int	21h ; DOS - GET DEFAULT DISK NUMBER
 22986                                  	;add	al,[cs:CAPITAL_A]
 22987                                  	;mov	byte [PIPE2],al		; Make pipe files in root of def drv
 22988                                  	;mov	bx,PIPE1
 22989                                  	;mov	[bx],al
 22990                                  	;xor	ah,ah			; nul terminate path names
 22991                                  	;mov	byte [PIPE1+3],ah
 22992                                  	;mov	byte [PIPE2+3],ah
 22993                                  
 22994                                  	; MSDOS 6.0
 22995                                  ;SR;
 22996                                  ; We want to create temp files in the current directory rather than in the 
 22997                                  ;root of the drive. This is because the number of files that can be present
 22998                                  ;in the root directory is fixed, whereas it is not so in subdirectories.
 22999                                  
 23000                                  	;mov	ah,'.'
 23001                                  	;mov	[Pipe1],ah	; = RESGROUP:EndInit
 23002                                  	;mov	[Pipe2],ah	; = RESGROUP:EndInit+79
 23003                                  	;xor	ah,ah
 23004                                  	;mov	[Pipe1+1],ah	; = RESGROUP:EndInit+1
 23005                                  	;mov	[Pipe2+1],ah		;create files in current dir
 23006                                  	; 27/02/2023
 23007 00002D78 B92E00                  	mov	cx,002Eh
 23008 00002D7B 890E[0202]              	mov	[Pipe1],cx
 23009 00002D7F 890E[5102]              	mov	[Pipe2],cx
 23010                                  crt_temp:
 23011                                  	; MSDOS 6.0
 23012                                  	;mov	dx,offset DATARES:Pipe1	; = RESGROUP:EndInit
 23013                                  	;mov	dx,320h ; MSDOS 5.0 COMMAND.COM
 23014 00002D83 BA[0202]                	mov	dx,Pipe1
 23015                                  	; MSDOS 3.3
 23016                                  	;mov	dx,bx
 23017                                  	
 23018                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23019 00002D86 31C9                    	xor	cx,cx
 23020                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 23021 00002D88 B45A                    	mov	ah,5Ah
 23022 00002D8A CD21                    	int	21h
 23023                                  		; DOS -	3+ - CREATE UNIQUE FILE
 23024                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 23025                                  		; receive generated filename
 23026                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 23027 00002D8C 728E                    	jc	short PIPERR	; Couldn't create
 23028                                  
 23029 00002D8E 89C3                    	mov	bx,ax
 23030                                  	;mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 23031 00002D90 B43E                    	mov	ah,3Eh
 23032 00002D92 CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 23033                                  			; BX = file handle
 23034                                  	;;mov	dx,PIPE2
 23035                                  	;mov	dx,36Fh ; MSDOS 5.0 COMMAND.COM
 23036 00002D94 BA[5102]                	mov	dx,Pipe2
 23037                                  	;mov	ah,CREATETEMPFILE ; 5Ah ; the CreateTemp call
 23038 00002D97 B45A                    	mov	ah,5Ah
 23039 00002D99 CD21                    	int	21h
 23040                                  		; DOS -	3+ - CREATE UNIQUE FILE
 23041                                  		; DS:DX	-> ASCIZ directory path	name ending with a '' + 13 bytes to
 23042                                  		; receive generated filename
 23043                                  		; CX = file attributes (only bits 0,1,2,5 may be set)
 23044                                  	; 17/04/2023
 23045                                  	;jc	short PIPERR
 23046                                  	; 27/02/2023
 23047 00002D9B 7303                    	jnc	short pps1
 23048 00002D9D E97CFF                  	jmp	PIPERR
 23049                                  pps1:
 23050 00002DA0 89C3                    	mov	bx,ax
 23051 00002DA2 B43E                    	mov	ah,CLOSE ; 3Eh	; Don't proliferate handles
 23052 00002DA4 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 23053                                  				; BX = file handle
 23054                                  	;call	near ptr TESTDOREIN ; Set up a redirection if specified
 23055 00002DA6 E87FFE                  	call	TESTDOREIN
 23056 00002DA9 8B36[A002]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 23057 00002DAD 833E[8E01]FF            	cmp	word [SingleCom],-1
 23058 00002DB2 7506                    	jne	short NOSINGP
 23059 00002DB4 C706[8E01]00F0          	mov	word [SingleCom],0F000h ; Flag single command pipe
 23060                                  NOSINGP:
 23061 00002DBA EB29                    	jmp	short FIRSTPIPE
 23062                                  
 23063                                  ; ---------------------------------------------------------------------------
 23064                                  
 23065                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 23066                                  PIPEPROC:
 23067 00002DBC 8026[8801]FE            	and	byte [EchoFlag],0FEh  ; force current echo to be off
 23068 00002DC1 8B36[A002]              	mov	si,[PipePtr]	; offset RESGROUP:EndInit+158
 23069 00002DC5 AC                      	lodsb
 23070                                  	; 27/02/2023
 23071 00002DC6 3C7C                    	cmp	al,'|'		
 23072                                  	;;cmp	al,ALTPIPECHR	; Alternate pipe char? 	
 23073                                  	;je	short ISPIPE1	; Yes
 23074                                  	;cmp	al,'|'
 23075                                  	;;cmp	al,[cs:VBAR]
 23076 00002DC8 7403                    	je	short ISPIPE1
 23077 00002DCA E98400                  	jmp	PIPEEND		; Pipe done
 23078                                  ISPIPE1:
 23079 00002DCD 8B16[2303]              	mov	dx,[InPipePtr]	; Get the input file name
 23080                                  	;mov	ax,OPEN*256 ; 3D00h
 23081 00002DD1 B8003D                  	mov	ax,3D00h
 23082 00002DD4 CD21                    	int	21h	; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 23083                                  			; DS:DX	-> ASCIZ filename
 23084                                  			; AL = access mode
 23085                                  			; 0 - read
 23086                                  PIPEERRJ:
 23087 00002DD6 7303                    	jnc	short NO_PIPEERR
 23088 00002DD8 E941FF                  	jmp	PIPERR		; Lost the pipe file
 23089                                  NO_PIPEERR:
 23090 00002DDB 89C3                    	mov	bx,ax
 23091 00002DDD B0FF                    	mov	al,0FFh
 23092                                  	;xchg	al,[bx+18h]
 23093 00002DDF 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23094 00002DE2 A21800                  	mov	[PDB.JFN_TABLE],al	; Redirect
 23095                                  FIRSTPIPE:
 23096 00002DE5 BF[2689]                	mov	di,COMBUF+2
 23097 00002DE8 31C9                    	xor	cx,cx
 23098 00002DEA 803C0D                  	cmp	byte [si],0Dh	; '|<CR>'
 23099 00002DED 7503                    	jne	short PIPEOK1
 23100                                  PIPEERRSYNJ:
 23101 00002DEF E91FFF                  	jmp	PIPEERRSYN
 23102                                  PIPEOK1:
 23103                                  	;;;mov	al,[cs:VBAR]
 23104                                  	; 27/02/2023
 23105                                  	;;mov	al,vbar
 23106                                  	;mov	al,'|'
 23107                                  	;cmp	[si],al		; '||'
 23108                                  	;je	short PIPEERRSYNJ
 23109 00002DF2 803C7C                  	cmp	byte [si],'|'
 23110                                  	;cmp	byte [si],ALTPIPECHR ; '##' or '|#'?
 23111 00002DF5 74F8                    	je	short PIPEERRSYNJ
 23112                                  PIPECOMLP:
 23113 00002DF7 AC                      	lodsb
 23114 00002DF8 AA                      	stosb
 23115                                  	; 27/02/2023
 23116 00002DF9 E8C5F5                  	call	testkanj
 23117 00002DFC 7405                    	jz	short NOTKANJ5
 23118 00002DFE A4                      	movsb
 23119                                  ;  Added following 2 commands to the fix pipe bug.
 23120 00002DFF 41                      	inc	cx		;AN000;  3/3/KK
 23121 00002E00 41                      	inc	cx		;AN000;  3/3/KK
 23122 00002E01 EBF4                    	jmp	short PIPECOMLP
 23123                                  NOTKANJ5:
 23124 00002E03 3C0D                    	cmp	al,0Dh
 23125 00002E05 7438                    	je	short LASTPIPE
 23126 00002E07 41                      	inc	cx
 23127                                  	; 27/02/2023
 23128 00002E08 3C7C                    	cmp	al,'|'
 23129                                  	;cmp	al,ALTPIPECHR
 23130                                  	;je	short ISPIPE2
 23131                                  	;;cmp	al,[cs:VBAR]
 23132                                  	;cmp	al,vbar
 23133 00002E0A 75EB                    	jne	short PIPECOMLP
 23134                                  ISPIPE2:
 23135 00002E0C 26C645FF0D              	mov	byte [es:di-1],0Dh
 23136 00002E11 49                      	dec	cx
 23137                                  	;mov	[cs:COMBUF+1],cl
 23138                                  	; 27/02/2023
 23139 00002E12 26880E[2589]            	mov	[es:COMBUF+1],cl
 23140 00002E17 4E                      	dec	si
 23141                                  	;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 23142 00002E18 8936[A002]              	mov	[PipePtr],si		; On to next pipe element
 23143                                  			; mov [EndInit+158],si
 23144 00002E1C 8B16[2503]              	mov	dx,[OutPipePtr]
 23145 00002E20 51                      	push	cx
 23146 00002E21 31C9                    	xor	cx,cx
 23147                                  	;mov	ax,CREAT*256 ; 3C00h
 23148 00002E23 B8003C                  	mov	ax,3C00h
 23149 00002E26 CD21                    	int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 23150                                  			; CX = attributes for file
 23151                                  			; DS:DX	-> ASCIZ filename (may include drive and path)
 23152 00002E28 59                      	pop	cx
 23153 00002E29 72AB                    	jc	short PIPEERRJ		; Lost the file
 23154 00002E2B 89C3                    	mov	bx,ax
 23155 00002E2D B0FF                    	mov	al,0FFh
 23156                                  	;xchg	al,[bx+18h]
 23157 00002E2F 864718                  	xchg	al,[bx+PDB.JFN_TABLE]
 23158 00002E32 A21900                  	mov	[PDB.JFN_TABLE+1],al
 23159 00002E35 8716[2303]              	xchg	dx,[InPipePtr]	; Swap for next element of pipe
 23160 00002E39 8916[2503]              	mov	[OutPipePtr],dx
 23161 00002E3D EB0D                    	jmp	short PIPECOM
 23162                                  LASTPIPE:
 23163                                  	;mov	[cs:COMBUF+1],cl 
 23164                                  	; 27/02/2023
 23165 00002E3F 26880E[2589]            	mov	[es:COMBUF+1],cl
 23166 00002E44 4E                      	dec	si
 23167                                  	;mov	[3BEh],si ; MSDOS 5.0 COMMAND.COM
 23168 00002E45 8936[A002]              	mov	[PipePtr],si	; Point at the CR (anything not '|' will do)
 23169                                  		; mov [EndInit+158],si
 23170 00002E49 E857FD                  	call	TESTDOREOUT	; Set up the redirection if specified
 23171                                  PIPECOM:
 23172 00002E4C 0E                      	push	cs
 23173 00002E4D 1F                      	pop	ds
 23174 00002E4E E991D4                  	jmp	NOPIPEPROC	; Process the pipe element
 23175                                  PIPEEND:
 23176 00002E51 E89DFE                  	call	PIPEDEL
 23177 00002E54 813E[8E01]00F0          	cmp	word [SingleCom],0F000h
 23178 00002E5A 7506                    	jnz	short NOSINGP2
 23179 00002E5C C706[8E01]FFFF          	mov	word [SingleCom],-1 ; 0FFFFh ; Make it return
 23180                                  NOSINGP2:
 23181 00002E62 E99FD2                  	jmp	TCOMMAND
 23182                                  
 23183                                  ; =============== S U B	R O U T	I N E =======================================
 23184                                  
 23185                                  ; Date and time are set during initialization and use
 23186                                  ; this routines since they need to do a long return
 23187                                  
 23188                                  	; 27/02/2023 - Retro DOS v4.0 COMMAND.COM
 23189                                  DATINIT:
 23190 00002E65 2E8C1E[C58A]            	mov	[cs:RESSEG],ds	; SetInitFlag needs resseg initialized
 23191 00002E6A 06                      	push	es
 23192 00002E6B 1E                      	push	ds		; Going to use the previous stack
 23193 00002E6C 8CC8                    	mov	ax,cs		; Set up the appropriate segment registers
 23194 00002E6E 8EC0                    	mov	es,ax
 23195 00002E70 8ED8                    	mov	ds,ax
 23196 00002E72 E85920                  	call	TSYSLOADMSG ; MSDOS 6.0 ; AN000; preload messages
 23197 00002E75 BA[A395]                	mov	dx,INTERNATVARS
 23198 00002E78 B80038                  	mov	ax,3800h
 23199                                  	;mov	ax,INTERNATIONAL*256 ; 3800h
 23200 00002E7B CD21                    	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 23201                                  			; get current-country info
 23202                                  			; DS:DX	-> buffer for returned info
 23203                                  	; 20/10/2018
 23204 00002E7D C70681000D00            	mov	word [81h],0Dh ; Want to prompt for date during initialization
 23205 00002E83 C606[2489]80            	mov	byte [COMBUF],128 ; Init COMBUF
 23206 00002E88 C706[2589]010D          	mov	word [COMBUF+1],0D01h
 23207 00002E8E E80600                  	call	DATE
 23208 00002E91 E86200                  	call	CTIME
 23209 00002E94 1F                      	pop	ds
 23210 00002E95 07                      	pop	es
 23211 00002E96 CB                      	retf	; far return
 23212                                  
 23213                                  ; =============== S U B	R O U T	I N E =======================================
 23214                                  
 23215                                  ; MSDOS 6.0
 23216                                  
 23217                                  ; ****************************************************************
 23218                                  ; *
 23219                                  ; * ROUTINE:	 DATE - Set system date
 23220                                  ; *
 23221                                  ; * FUNCTION:	 If a date is specified, set the system date,
 23222                                  ; *		 otherwise display the current system date and
 23223                                  ; *		 prompt the user for a new date.  If an invalid
 23224                                  ; *		 date is specified, issue an error message and
 23225                                  ; *		 prompt for a new date.  If the user enters
 23226                                  ; *		 nothing when prompted for a date, terminate.
 23227                                  ; *
 23228                                  ; * INPUT:	 command line at offset 81H
 23229                                  ; *
 23230                                  ; * OUTPUT:	 none
 23231                                  ; *
 23232                                  ; ****************************************************************
 23233                                  
 23234                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23235                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:2FC4h
 23236                                  	; 11/06/2023
 23237                                  DATE:
 23238 00002E97 BE8100                  	mov	si,81h			; Accepting argument for date inline
 23239 00002E9A BF[D184]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 23240 00002E9D 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 23241 00002E9F 31D2                    	xor	dx,dx			;AN000;
 23242 00002EA1 E87A14                  	call	cmd_parse		;AC000; call parser
 23243                                  	
 23244                                  	; 27/02/2023
 23245                                  	;cmp	ax,-1
 23246                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 23247                                  	;je	short PRMTDAT 		;AC000; yes - go ask for date
 23248                                  	;;cmp	ax,0
 23249                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 23250                                  	;;jne	short DATERR		;AN000; yes - go issue message
 23251                                  	; 26/04/2023
 23252                                  	;or	ax,ax ; ax = 0 ?
 23253                                  	;jnz	short DATERR
 23254                                  	;;jmp	short COMDAT		;AC000; we have a date
 23255                                  	; 11/06/2023
 23256 00002EA4 40                      	inc	ax  ; cmp ax,-1
 23257 00002EA5 7428                    	jz	short PRMTDAT ; 0FFFFh -> 0
 23258 00002EA7 48                      	dec	ax  ; cmp ax,0
 23259 00002EA8 7541                    	jnz	short DATERR ; 1 -> 0
 23260                                  	; ax = 0
 23261                                  	
 23262                                  	; 27/02/2023
 23263                                  COMDAT:
 23264 00002EAA 8B0E[0096]              	mov	cx,[DATE_YEAR]		;AC000; get parts of date in
 23265 00002EAE 8A36[0296]              	mov	dh,[DATE_MONTH]		;AC000;  cx and dx for set
 23266 00002EB2 8A16[0396]              	mov	dl,[DATE_DAY]		;AC000;  date function call.
 23267 00002EB6 51                      	push	cx			;AC000; save date
 23268 00002EB7 52                      	push	dx			;AC000;
 23269 00002EB8 B90100                  	mov	cx,1			;AC000; set 1 positional entered
 23270 00002EBB 31D2                    	xor	dx,dx			;AN029;
 23271 00002EBD E85E14                  	call	cmd_parse		;AN029; call parser
 23272 00002EC0 3CFF                    	cmp	al,0FFh ; -1
 23273                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 23274 00002EC2 5A                      	pop	dx			;AC000; retrieve date
 23275 00002EC3 59                      	pop	cx			;AC000;
 23276 00002EC4 7525                    	jnz	short DATERR		;AC000; extra stuff on line - try again
 23277                                  	; 26/04/2023
 23278                                  	;mov	ah,SET_DATE		;yes - set date
 23279 00002EC6 B42B                    	mov	ah,2Bh
 23280 00002EC8 CD21                    	int	21h
 23281                                  			; DOS - SET CURRENT DATE
 23282                                  			; DL = day, DH = month, CX = year
 23283                                  			; Return: AL = 00h if no error /= FFh if bad value sent to routine
 23284 00002ECA 08C0                    	or	al,al
 23285 00002ECC 751D                    	jnz	short DATERR
 23286                                  date_end:
 23287 00002ECE C3                      	retn
 23288                                  
 23289                                  PRMTDAT:
 23290                                  	; Print "Current date is
 23291                                  
 23292 00002ECF E81208                  	call	GetDate 		;AN000; get date for output
 23293 00002ED2 86F2                    	xchg	dh,dl			;AN000; switch month & day
 23294 00002ED4 890E[C97F]              	mov	[CurDat_yr],cx		;AC000; put year into message control block
 23295 00002ED8 8916[CB7F]              	mov	[CurDat_mo_day],dx	;AC000; put month and day into message control block
 23296 00002EDC BA[B97F]                	mov	dx,CurDat_Ptr		;AC000; set up message for output
 23297 00002EDF E80D1F                  	call	std_printf
 23298                                  
 23299                                  ;AD061; mov	word [CurDat_yr],0	;AC000; reset year, month and day
 23300                                  ;AD061; mov	word [CurDat_mo_day],0 	;AC000;  pointers in control block
 23301                                  
 23302                                  GET_NEW_DATE:				;AN000;
 23303 00002EE2 E8BC00                  	call	GETDAT			;AC000; prompt user for date
 23304                                  	
 23305                                  	; 11/06/2023
 23306                                  	;cmp	ax,0FFFFh ; -1
 23307                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 23308                                  	;je	short date_end		;AC000; yes - exit
 23309                                  	; 26/04/2023
 23310                                  	;;cmp	ax,0
 23311                                  	;;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 23312                                  	;;;jnz	short DATERR		;AN000; yes - go issue message
 23313                                  	;; 27/02/2023
 23314                                  	;;jz	short COMDAT
 23315                                  	; 26/04/2023
 23316                                  	;and	ax,ax ; 0 ?
 23317                                  	;jz	short COMDAT
 23318                                  
 23319                                  	; 11/06/2023
 23320 00002EE5 40                      	inc	ax  ; cmp ax,-1
 23321 00002EE6 74E6                    	jz	short date_end ; 0FFFFh -> 0
 23322 00002EE8 48                      	dec	ax  ; cmp ax,0
 23323 00002EE9 74BF                    	jz	short COMDAT ; 1 -> 0
 23324                                  	; ax > 0
 23325                                  
 23326                                  ;COMDAT:
 23327                                  ;	....
 23328                                  DATERR:
 23329 00002EEB E8E5F6                  	call	CRLF2			;AN028; print out a blank line
 23330 00002EEE BA[B67F]                	mov	dx,BADDAT_PTR
 23331 00002EF1 E8FB1E                  	call	std_printf
 23332 00002EF4 EBEC                    	jmp	short GET_NEW_DATE	;AC000; get date again
 23333                                  
 23334                                  ; =============== S U B	R O U T	I N E =======================================
 23335                                  
 23336                                  ; MSDOS 6.0
 23337                                  
 23338                                  ; TIME gets and sets the time
 23339                                  
 23340                                  ; ****************************************************************
 23341                                  ; *
 23342                                  ; * ROUTINE:	 TIME - Set system time
 23343                                  ; *
 23344                                  ; * FUNCTION:	 If a time is specified, set the system time,
 23345                                  ; *		 otherwise display the current system time and
 23346                                  ; *		 prompt the user for a new time.  If an invalid
 23347                                  ; *		 time is specified, issue an error message and
 23348                                  ; *		 prompt for a new time.  If the user enters
 23349                                  ; *		 nothing when prompted for a time, terminate.
 23350                                  ; *
 23351                                  ; * INPUT:	 command line at offset 81H
 23352                                  ; *
 23353                                  ; * OUTPUT:	 none
 23354                                  ; *
 23355                                  ; ****************************************************************
 23356                                  
 23357                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23358                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:302Dh
 23359                                  	; 11/06/2023
 23360                                  CTIME:
 23361 00002EF6 BE8100                  	mov	si,81h			; Accepting argument for time inline
 23362 00002EF9 BF[E384]                	mov	di,PARSE_TIME		;AN000; Get address of PARSE_time
 23363 00002EFC 31C9                    	xor	cx,cx			;AN000; clear counter for positionals
 23364 00002EFE 31D2                    	xor	dx,dx			;AN000;
 23365 00002F00 E81B14                  	call	cmd_parse		;AC000; call parser
 23366                                  	
 23367                                  	; 27/02/2023
 23368                                  	;cmp	ax,-1
 23369                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 23370                                  	;je	short PRMTTIM 		;AC000; yes - prompt for time
 23371                                  	;;cmp	ax,0
 23372                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 23373                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 23374                                  	;and	ax,ax ; ax = 0 ?
 23375                                  	;jnz	short TIMERR
 23376                                  	;;jmp	short COMTIM		;AC000; we have a time
 23377                                  	; 11/06/2023
 23378 00002F03 40                      	inc	ax  ; cmp ax,-1
 23379 00002F04 742C                    	jz	short PRMTTIM ; 0FFFFh -> 0
 23380 00002F06 48                      	dec	ax  ; cmp ax,0
 23381 00002F07 7548                    	jnz	short TIMERR ; 1 -> 0
 23382                                  	; ax = 0
 23383                                  	
 23384                                  	; 27/02/2023
 23385                                  COMTIM:
 23386 00002F09 8A2E[0896]              	mov	ch,[TIME_HOUR]		;AC000; get parts of time in
 23387 00002F0D 8A0E[0996]              	mov	cl,[TIME_MINUTES]	;AC000;  cx and dx for set
 23388 00002F11 8A36[0A96]              	mov	dh,[TIME_SECONDS]	;AC000;  time function call
 23389 00002F15 8A16[0B96]              	mov	dl,[TIME_FRACTION]	;AC000;
 23390 00002F19 51                      	push	cx			;AC000; save time
 23391 00002F1A 52                      	push	dx			;AC000;
 23392 00002F1B B90100                  	mov	cx,1			;AC000; set 1 positional parm entered
 23393 00002F1E 31D2                    	xor	dx,dx			;AN029;
 23394 00002F20 E8FB13                  	call	cmd_parse		;AN029; call parser
 23395 00002F23 3CFF                    	cmp	al, -1
 23396                                  	;cmp	al,END_OF_LINE		;AN029; Are we at end of line?
 23397 00002F25 5A                      	pop	dx			;AC000; retieve time
 23398 00002F26 59                      	pop	cx			;AC000;
 23399 00002F27 7528                    	jnz	short TIMERR		;AC000; extra stuff on line - try again
 23400                                  SAVTIM:
 23401                                  	;mov	ah,SET_TIME
 23402 00002F29 B42D                    	mov	ah,2Dh
 23403 00002F2B CD21                    	int	21h
 23404 00002F2D 08C0                    	or	al,al
 23405 00002F2F 7520                    	jnz	short TIMERR		;AC000; if an error occured, try again
 23406                                  time_end:
 23407 00002F31 C3                      	retn
 23408                                  
 23409                                  PRMTTIM:
 23410                                  	;Printf "Current time is ... "
 23411                                  
 23412                                  	;mov	ah,Get_Time		;AC000; get the current time
 23413 00002F32 B42C                    	mov	ah,2Ch
 23414 00002F34 CD21                    	int	21h			;AC000;   Get time in CX:DX
 23415 00002F36 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 23416 00002F38 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 23417 00002F3A 890E[EB7F]              	mov	[CurTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 23418 00002F3E 8916[ED7F]              	mov	[CurTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 23419 00002F42 BA[E67F]                	mov	dx,CurTim_Ptr		;AC000; set up message for output
 23420 00002F45 E8A71E                  	call	std_printf
 23421                                  
 23422                                  ;AD061; mov	word [CurTim_hr_min],0 	;AC000; reset hour, minutes, seconds, and hundredths
 23423                                  ;AD061; mov	word [CurTim_Sec_hn],0 	;AC000;  pointers in control block
 23424                                  
 23425                                  GET_NEW_TIME:
 23426 00002F48 E8AE00                  	call	GETTIM			;AC000;
 23427                                  	
 23428                                  	; 11/06/2023
 23429                                  	;cmp	ax,-1
 23430                                  	;;cmp	ax,END_OF_LINE		;AC000; are we at end of line?
 23431                                  	;je	short time_end		;AC000;
 23432                                  	;;cmp	ax,0
 23433                                  	;;cmp	ax,RESULT_NO_ERROR	;AN000; did we have an error?
 23434                                  	;;jne	short TIMERR		;AN000; yes - go issue message
 23435                                  	;or	ax,ax  ; ax = 0 ?
 23436                                  	;;jnz	short TIMERR
 23437                                  	; 27/02/2023
 23438                                  	;jz	short COMTIM
 23439                                  
 23440                                  	; 11/06/2023
 23441 00002F4B 40                      	inc	ax  ; cmp ax,-1
 23442 00002F4C 74E3                    	jz	short time_end ; 0FFFFh -> 0
 23443 00002F4E 48                      	dec	ax  ; cmp ax,0
 23444 00002F4F 74B8                    	jz	short COMTIM ; 1 -> 0
 23445                                  	; ax > 0
 23446                                  
 23447                                  ;COMTIM:
 23448                                  ;	....
 23449                                  TIMERR:
 23450 00002F51 E87FF6                  	call	CRLF2			;AN028; print out a blank line
 23451 00002F54 BA[E37F]                	mov	dx,BadTim_Ptr
 23452 00002F57 E8951E                  	call	std_printf		; Print error message
 23453 00002F5A EBEC                    	jmp	short GET_NEW_TIME	;AC000; Try again
 23454                                  
 23455                                  ; =============== S U B	R O U T	I N E =======================================
 23456                                  
 23457                                  ; MSDOS 6.0
 23458                                  
 23459                                  ; Set the special flag in the INIT flag to the value in CX.
 23460                                  
 23461                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23462                                  SetInitFlag:
 23463 00002F5C 8E1E[C58A]              	mov	ds,[RESSEG]
 23464                                  
 23465 00002F60 8026[FF01]FD            	and	byte [InitFlag],~INITSPECIAL ; 0FDh ; not initspecial
 23466                                  	;and	byte [InitFlag],0FDh
 23467 00002F65 080E[FF01]              	or	byte [InitFlag],cl
 23468 00002F69 0E                      	push	cs
 23469 00002F6A 1F                      	pop	ds
 23470 00002F6B C3                      	retn
 23471                                  
 23472                                  ; =============== S U B	R O U T	I N E =======================================
 23473                                  
 23474                                  ; MSDOS 6.0
 23475                                  
 23476                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23477                                  PipeOff:
 23478 00002F6C 1E                      	push	ds
 23479 00002F6D 50                      	push	ax
 23480 00002F6E 2E8E1E[C58A]            	mov	ds,[cs:RESSEG]
 23481 00002F73 30C0                    	xor	al,al
 23482 00002F75 8606[0002]              	xchg	[PipeFlag],al
 23483 00002F79 08C0                    	or	al,al
 23484 00002F7B 7404                    	jz	short PipeOffDone
 23485 00002F7D D02E[8801]              	shr	byte [EchoFlag],1
 23486                                  PipeOffDone:
 23487 00002F81 58                      	pop	ax
 23488 00002F82 1F                      	pop	ds
 23489 00002F83 C3                      	retn
 23490                                  
 23491                                  ; =============== S U B	R O U T	I N E =======================================
 23492                                  
 23493                                  ; MSDOS 6.0
 23494                                  
 23495                                  	; 27/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23496                                  PRINT_TIME:
 23497                                  	;mov	ah,Get_Time
 23498 00002F84 B42C                    	mov	ah,2Ch
 23499 00002F86 CD21                    	int	21h			; Get time in CX:DX
 23500                                  
 23501 00002F88 06                      	push	es
 23502 00002F89 0E                      	push	cs
 23503 00002F8A 07                      	pop	es
 23504 00002F8B 86E9                    	xchg	ch,cl			;AN000; switch hours & minutes
 23505 00002F8D 86F2                    	xchg	dh,dl			;AN000; switch seconds & hundredths
 23506 00002F8F 2E890E[2481]            	mov	[cs:PromTim_hr_min],cx	;AC000; put hours and minutes into message subst block
 23507 00002F94 2E8916[2681]            	mov	[cs:PromTim_Sec_hn],dx	;AC000; put seconds and hundredths into message subst block
 23508 00002F99 BA[1F81]                	mov	dx,promtim_ptr		;AC000; set up message for output
 23509 00002F9C E8501E                  	call	std_printf
 23510                                  
 23511                                  ;AD061; mov	word [cs:PromTim_hr_min],0
 23512                                  					;AC000; reset hour, minutes, seconds, and hundredths
 23513                                  ;AD061; mov	word [cs:PromTim_Sec_hn],0
 23514                                  					;AC000;  pointers in control block
 23515 00002F9F 07                      	pop	es
 23516 00002FA0 C3                      	retn
 23517                                  
 23518                                  ; =============== S U B	R O U T	I N E =======================================
 23519                                  
 23520                                  ; MSDOS 6.0
 23521                                  
 23522                                  ; ****************************************************************
 23523                                  ; *
 23524                                  ; * ROUTINE:	 GETDAT - Prompt user for date
 23525                                  ; *
 23526                                  ; * FUNCTION:	 Gets the date format from the COUNTRY DEPENDENT
 23527                                  ; *		 INFORMATION and issues the "Enter new date"
 23528                                  ; *		 message with the proper date format. COMBUF
 23529                                  ; *		 is reset to get a date from the command line.
 23530                                  ; *		 The PARSE_DATE blocks are then reset and the
 23531                                  ; *		 PARSE function call is issued.
 23532                                  ; *
 23533                                  ; * INPUT:	 NONE
 23534                                  ; *
 23535                                  ; * OUTPUT:	 COMBUF
 23536                                  ; *		 PARSER RETURN CODES
 23537                                  ; *
 23538                                  ; ****************************************************************
 23539                                  
 23540                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23541                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:30E2h
 23542                                  GETDAT:
 23543                                  	;mov	ax,(International SHL 8)
 23544 00002FA1 B80038                  	mov	ax,3800h
 23545                                  					; Determine what format the date
 23546 00002FA4 BA5C00                  	mov	dx,5Ch			;  should be entered in and
 23547 00002FA7 CD21                    	int	21h			;  print a message describing it
 23548                                  			; DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION
 23549                                  			; get current-country info
 23550                                  			; DS:DX -> buffer for returned info
 23551 00002FA9 89D6                    	mov	si,dx
 23552 00002FAB AD                      	lodsw
 23553 00002FAC 2E8B16[FD80]            	mov	dx,[cs:usadat_ptr]	;AC000; get mm-dd-yy
 23554 00002FB1 48                      	dec	ax
 23555 00002FB2 780C                    	js	short printformat
 23556 00002FB4 2E8B16[0081]            	mov	dx,[cs:eurdat_ptr]	;AC000; get dd-mm-yy
 23557 00002FB9 7405                    	jz	short printformat
 23558 00002FBB 2E8B16[0381]            	mov	dx,[cs:japdat_ptr]	;AC000; get yy-mm-dd
 23559                                  printformat:
 23560 00002FC0 89D0                    	mov	ax,dx			;AN000; get message number of format
 23561                                  	;mov	dh,util_msg_class	;AN000; this is a utility message
 23562 00002FC2 B6FF                    	mov	dh,-1 ; 0FFh
 23563 00002FC4 E80D1F                  	call	TSYSGETMSG		;AN000; get the address of the message
 23564 00002FC7 2E8936[DA7F]            	mov	[cs:NewDat_Format],si	;AN000; put the address in subst block
 23565 00002FCC BA[D57F]                	mov	dx,NewDat_Ptr		;AC000; get address of message to print
 23566 00002FCF E81D1E                  	call	std_printf
 23567                                  	;mov	word [cs:NewDat_Format],no_subst
 23568                                  					;AN000; reset subst block
 23569 00002FD2 2EC706[DA7F]0000        	mov	word [cs:NewDat_Format],0
 23570                                  
 23571                                  	; 28/02/2023
 23572 00002FD9 BF[D184]                	mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 23573                                  ; 28/02/2023
 23574                                  gettim_p:	
 23575                                  	;mov	ah,Std_Con_String_Input
 23576 00002FDC B40A                    	mov	ah,0Ah
 23577 00002FDE BA[2489]                	mov	dx,COMBUF
 23578 00002FE1 B90200                  	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 23579 00002FE4 E875FF                  	call	SetInitFlag		;  prompting for date.
 23580 00002FE7 CD21                    	int	21h			; Get input line
 23581 00002FE9 31C9                    	xor	cx,cx			; Reset bit in InitFlag that indicates
 23582 00002FEB E86EFF                  	call	SetInitFlag		;  prompting for date.
 23583 00002FEE E8E2F5                  	call	CRLF2
 23584                                  	; 28/02/2023
 23585                                  	;mov	di,PARSE_DATE		;AN000; Get address of PARSE_DATE
 23586                                  ;gettim_p: ; 28/02/2023
 23587 00002FF1 BE[2689]                	mov	si,COMBUF+2
 23588                                  	;xor	cx,cx	 ; cx = 0	;AN000; clear counter for positionals
 23589 00002FF4 31D2                    	xor	dx,dx			;AN000;
 23590                                  	;call	cmd_parse		;AC000; call parser
 23591                                  	;retn
 23592                                  	; 28/02/2023
 23593 00002FF6 E92513                  	jmp	cmd_parse
 23594                                  
 23595                                  ; =============== S U B	R O U T	I N E =======================================
 23596                                  
 23597                                  ; MSDOS 6.0
 23598                                  
 23599                                  ; ****************************************************************
 23600                                  ; *
 23601                                  ; * ROUTINE:	 GETTIME - Prompt user for time
 23602                                  ; *
 23603                                  ; * FUNCTION:	 Gets the time format from the COUNTRY DEPENDENT
 23604                                  ; *		 INFORMATION and issues the "Enter new time"
 23605                                  ; *		 message. COMBUF is reset to get a time from the
 23606                                  ; *		 command line. The PARSE_TIME blocks are then
 23607                                  ; *		 reset and the PARSE function call is issued.
 23608                                  ; *
 23609                                  ; * INPUT:	 NONE
 23610                                  ; *
 23611                                  ; * OUTPUT:	 COMBUF
 23612                                  ; *		 PARSER RETURN CODES
 23613                                  ; *
 23614                                  ; ****************************************************************
 23615                                  
 23616                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23617                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:313Dh
 23618                                  GETTIM:
 23619 00002FF9 31C9                    	xor	cx,cx			; Initialize hours and minutes to zero
 23620 00002FFB BA[F47F]                	mov	dx,NewTim_Ptr
 23621 00002FFE E8EE1D                  	call	std_printf
 23622                                  
 23623                                  	; 28/02/2023
 23624 00003001 BF[E384]                	mov	di,PARSE_TIME
 23625 00003004 EBD6                    	jmp	short gettim_p
 23626                                  
 23627                                  ; 28/02/2023
 23628                                  ;	;mov	ah,Std_Con_String_Input
 23629                                  ;	mov	ah,0Ah
 23630                                  ;	mov	dx,COMBUF
 23631                                  ;	mov	cx,INITSPECIAL ; 2	; Set bit in InitFlag that indicates
 23632                                  ;	call	SetInitFlag		;  prompting for time.
 23633                                  ;	int	21h			; Get input line
 23634                                  ;	; 28/02/2023
 23635                                  ;	xor	cx,cx			; Reset bit in InitFlag that indicates
 23636                                  ;	call	SetInitFlag		;  prompting for time.
 23637                                  ;	call	CRLF2
 23638                                  ;	; 28/02/2023
 23639                                  ;	;mov	si,COMBUF+2
 23640                                  ;	; 28/02/2023
 23641                                  ;	mov	di,PARSE_TIME		;AN000; Get address of PARSE_TIME
 23642                                  ;	; 28/02/2023
 23643                                  ;	jmp	short gettim_p	
 23644                                  ;	; 28/02/2023
 23645                                  ;	;;xor	cx,cx			;AN000; clear counter for positionals
 23646                                  ;	;xor	dx,dx			;AN000;
 23647                                  ;	;call	cmd_parse		;AC000; call parser
 23648                                  ;	;retn
 23649                                  
 23650                                  
 23651                                  ; =============== S U B	R O U T	I N E =======================================
 23652                                  
 23653                                  ; MSDOS 6.0
 23654                                  
 23655                                  ;Skip_white: Skips over the whitespace chars that could be present after
 23656                                  ;the '=' sign in the environment variable before the actual path.
 23657                                  ;
 23658                                  ;	ENTRY:	ds:si = arguments of the environment variable
 23659                                  ;
 23660                                  ;	EXIT:	ds:si = start of the path
 23661                                  ;
 23662                                  ;	REGISTERS AFFECTED: ax
 23663                                  
 23664                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23665                                  skip_white:
 23666 00003006 FC                      	cld
 23667                                  skw_lp:
 23668 00003007 AC                      	lodsb
 23669 00003008 3C20                    	cmp	al,' '			;blank char?
 23670 0000300A 74FB                    	jz	short skw_lp		;yes, skip it
 23671 0000300C 3C09                    	cmp	al,9			;tab char?
 23672 0000300E 74F7                    	jz	short skw_lp		;yes, skip it
 23673 00003010 4E                      	dec	si			;point at first non-white
 23674 00003011 C3                      	retn
 23675                                  
 23676                                  ; =============== S U B	R O U T	I N E =======================================
 23677                                  
 23678                                  ; MSDOS 6.0
 23679                                  
 23680                                  ;Copy_pipe_path: This routine copies the path from the TEMP environment
 23681                                  ;variable into the path buffers Pipe1 & Pipe2.
 23682                                  ;
 23683                                  ;	ENTRY:	ds:si = path to be copied
 23684                                  ;		es = RESGROUP
 23685                                  ;
 23686                                  ;	EXIT:	Path copied into Pipe1 and Pipe2.
 23687                                  ;
 23688                                  ;	REGISTERS AFFECTED: si, di, cx, ax
 23689                                  
 23690                                  	; 28/02/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 23691                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3174h
 23692                                  
 23693                                  copy_pipe_path:
 23694 00003012 B9FFFF                  	mov	cx,0FFFFh ; 65535
 23695 00003015 30C0                    	xor	al,al
 23696                                  
 23697 00003017 89F7                    	mov	di,si
 23698 00003019 06                      	push	es			;save es
 23699 0000301A 1E                      	push	ds
 23700 0000301B 07                      	pop	es			;es:di = path to be copied
 23701                                  	
 23702 0000301C FC                      	cld
 23703 0000301D 57                      	push	di
 23704 0000301E F2AE                    	repnz	scasb			;look for the null char
 23705 00003020 5F                      	pop	di
 23706                                  
 23707 00003021 07                      	pop	es			;es = RESGROUP again
 23708                                  
 23709 00003022 F7D1                    	not	cx			;length including the null
 23710                                  
 23711                                  	;;mov	di,320h ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit)
 23712                                  	;mov	di,offset DATARES:Pipe1
 23713 00003024 BF[0202]                	mov	di,Pipe1  ; (offset RESGROUP:EndInit)
 23714 00003027 57                      	push	di
 23715 00003028 51                      	push	cx			
 23716 00003029 F3A4                    	rep	movsb			;copy path into Pipe1
 23717 0000302B 59                      	pop	cx
 23718 0000302C 5F                      	pop	di
 23719                                  
 23720 0000302D 1E                      	push	ds
 23721 0000302E 06                      	push	es
 23722 0000302F 1F                      	pop	ds			;ds:si = Pipe1
 23723 00003030 89FE                    	mov	si,di
 23724                                  	;;mov	di,36Fh ; MSDOS 5.0 COMMAND.COM ; (RESGROUP:EndInit+79)
 23725                                  	;mov	di,offset DATARES:Pipe2	;es:di = Pipe2
 23726 00003032 BF[5102]                	mov	di,Pipe2  ; (offset RESGROUP:EndInit+79)
 23727 00003035 F3A4                    	rep	movsb			;copy path into Pipe2
 23728 00003037 1F                      	pop	ds
 23729 00003038 C3                      	retn
 23730                                  
 23731                                  ; 28/02/2023
 23732                                  %if 0
 23733                                  
 23734                                  ;============================================================================
 23735                                  ; TCODE4.ASM, MSDOS 2.11 (& MSDOS 3.3), 1983 (& 1987)
 23736                                  ;============================================================================
 23737                                  ; 05/10/2018 - Retro DOS v3.0
 23738                                  
 23739                                  ; DATE - Gets and sets the time
 23740                                  
 23741                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 20C0h
 23742                                  
 23743                                  ; =============== S U B	R O U T	I N E =======================================
 23744                                  
 23745                                  DATE_CXDX:
 23746                                  	mov	bx,cx
 23747                                  
 23748                                  ; =============== S U B	R O U T	I N E =======================================
 23749                                  
 23750                                  P_DATE:
 23751                                  	mov	ax,bx
 23752                                  	mov	cx,dx
 23753                                  	mov	dl,100
 23754                                  	div	dl
 23755                                  	xchg	al,ah
 23756                                  	xchg	ax,dx
 23757                                  	mov	bh,'0'-' ' ; 10h  ; Enable leading zero suppression
 23758                                  	;mov	ax,[INTERNATVARS]
 23759                                  	mov	ax,[INTERNATVARS+INTERNAT_BLOCK.Date_tim_format]
 23760                                  	or	ax,ax
 23761                                  	jz	short USPDAT
 23762                                  	dec	ax
 23763                                  	jz	short EUPDAT
 23764                                  	mov	bh,0	 ; Disable leading zero suppression	
 23765                                  	call	P_YR
 23766                                  	call	P_DSEP
 23767                                  	call	P_MON
 23768                                  	call	P_DSEP
 23769                                  	call	P_DAY
 23770                                  	retn
 23771                                  
 23772                                  USPDAT:
 23773                                  	call	P_MON
 23774                                  	call	P_DSEP
 23775                                  	call	P_DAY
 23776                                  PLST:
 23777                                  	call	P_DSEP
 23778                                  	call	P_YR
 23779                                  	retn
 23780                                  
 23781                                  EUPDAT:
 23782                                  	call	P_DAY
 23783                                  	call	P_DSEP
 23784                                  	call	P_MON
 23785                                  	jmp	short PLST
 23786                                  
 23787                                  ; ---------------------------------------------------------------------------
 23788                                  
 23789                                  P_MON:
 23790                                  	mov	al,ch
 23791                                  	call	OUT2
 23792                                  	retn
 23793                                  
 23794                                  ; ---------------------------------------------------------------------------
 23795                                  
 23796                                  P_DSEP:
 23797                                  	;mov	al,[DATE_SEP] ; INTERNATVARS+11
 23798                                  	mov	al,[INTERNATVARS+INTERNAT_BLOCK.Date_sep]
 23799                                  	stosb
 23800                                  	retn
 23801                                  
 23802                                  ; ---------------------------------------------------------------------------
 23803                                  
 23804                                  P_DAY:
 23805                                  	mov	al,cl
 23806                                  	call	OUT2
 23807                                  	retn
 23808                                  
 23809                                  ; ---------------------------------------------------------------------------
 23810                                  
 23811                                  P_YR:
 23812                                  	mov	al,dh
 23813                                  	or	al,al
 23814                                  	jz	short TWODIGYR	; Two instead of 4 digit year
 23815                                  	call	OUT2
 23816                                  TWODIGYR:
 23817                                  	mov	al,dl
 23818                                  	call	OUT2
 23819                                  DATE_RETN:
 23820                                  	retn
 23821                                  
 23822                                  ; =============== S U B	R O U T	I N E =======================================
 23823                                  
 23824                                  DATE:				 ; Accepting argument for date inline
 23825                                  	mov	si,81h
 23826                                  	call	SCANOFF
 23827                                  	cmp	al,0Dh
 23828                                  	jz	short PRMTDAT
 23829                                  	jmp	short COMDAT
 23830                                  
 23831                                  	;nop
 23832                                  PRMTDAT:
 23833                                  	; MSDOS 3.3
 23834                                  	mov	dx,CURDATPTR
 23835                                  	call	STD_PRINTF	; Print "Current date is "	
 23836                                  	call	PRINT_DATE
 23837                                  GETDAT:	
 23838                                  	mov	dx,NEWDATPTR
 23839                                  	call	STD_PRINTF	 ; Print "Enter new date: "
 23840                                  
 23841                                  	mov	ax,INTERNATIONAL*256 ; 3800h 
 23842                                  				; Determine what format the date
 23843                                  	mov	dx,5Ch		;  should be entered in and
 23844                                  	int	21h	; DOS -	2+ - GET COUNTRY-DEPENDENT INFORMATION
 23845                                  			; get current-country info
 23846                                  			; DS:DX	-> buffer for returned info
 23847                                  	mov	si,dx		;  print a message describing it
 23848                                  	lodsw
 23849                                  	mov	dx,USADATPTR	; get mm-dd-yy
 23850                                  	dec	ax
 23851                                  	js	short PRINTFORMAT
 23852                                  	mov	dx,EURDATPTR	; get dd-mm-yy
 23853                                  	jz	short PRINTFORMAT
 23854                                  	mov	dx,JAPDATPTR	; get yy-mm-dd
 23855                                  PRINTFORMAT:
 23856                                  	call	STD_PRINTF
 23857                                  	mov	ah,Std_Con_String_Input	; 0Ah
 23858                                  	mov	dx,COMBUF
 23859                                  	mov	cx,INITSPECIAL ;2 ; Set bit in InitFlag that indicate
 23860                                  	call	SETINITFLAG	;  prompting for date.
 23861                                  	int	21h		; Get input line
 23862                                  	xor	cx,cx		; Reset bit in InitFlag that indicates
 23863                                  	call	SETINITFLAG	;  prompting for date.
 23864                                  	call	CRLF2
 23865                                  	mov	si,COMBUF+2
 23866                                  	cmp	byte [si],0Dh
 23867                                  	jz	short DATE_RETN
 23868                                  COMDAT:
 23869                                  	;mov	ax,[INTERNATVARS]
 23870                                  	mov	ax,[INTERNATVARS+INTERNAT_BLOCK.Date_tim_format]
 23871                                  	or	ax,ax
 23872                                  	jz	short USSDAT
 23873                                  	dec	ax
 23874                                  	jz	short EUSDAT
 23875                                  	call	GET_YR
 23876                                  	jc	short DATERRJ
 23877                                  	call	GET_DSEP
 23878                                  	jc	short DATERRJ
 23879                                  	call	GET_MON
 23880                                  	jc	short DATERRJ
 23881                                  	call	GET_DSEP
 23882                                  	jc	short DATERRJ
 23883                                  	call	GET_DAY
 23884                                  DAT_SET:
 23885                                  	jnc	short DATSET
 23886                                  	jmp	DATERR
 23887                                  
 23888                                  ; ---------------------------------------------------------------------------
 23889                                  
 23890                                  DATSET:
 23891                                  	lodsb
 23892                                  	cmp	al,' '
 23893                                  	jz	short DATSET
 23894                                  	cmp	al,9
 23895                                  	jz	short DATSET
 23896                                  	cmp	al,0Dh
 23897                                  	jnz	short DATERR
 23898                                  	mov	ah,SET_DATE ; 2Bh
 23899                                  	int	21h	; DOS -	SET CURRENT DATE
 23900                                  			; DL = day,DH = month,	CX = year
 23901                                  			; Return: AL = 00h if no error 
 23902                                  			; 	     = FFh if bad value sent to routine
 23903                                  	or	al,al
 23904                                  	jnz	short DATERR
 23905                                  DAT_SET_RETN:
 23906                                  	retn
 23907                                  
 23908                                  ; ---------------------------------------------------------------------------
 23909                                  
 23910                                  USSDAT:
 23911                                  	call	GET_MON
 23912                                  	jb	short DATERR
 23913                                  	call	GET_DSEP
 23914                                  DATERRJ:
 23915                                  	jc	short DATERR
 23916                                  	call	GET_DAY
 23917                                  TGET:
 23918                                  	jc	short DATERR
 23919                                  	call	GET_DSEP
 23920                                  	jc	short DATERR
 23921                                  	call	GET_YR
 23922                                  	jmp	short DAT_SET
 23923                                  
 23924                                  ; ---------------------------------------------------------------------------
 23925                                  
 23926                                  EUSDAT:
 23927                                  	call	GET_DAY
 23928                                  	jc	short DATERR
 23929                                  	call	GET_DSEP
 23930                                  	jc	short DATERR
 23931                                  	call	GET_MON
 23932                                  	jmp	short TGET
 23933                                  
 23934                                  ; =============== S U B	R O U T	I N E =======================================
 23935                                  
 23936                                  GET_MON:
 23937                                  	call	GETNUM		; Get one or two digit number
 23938                                  	jc	short DAT_SET_RETN
 23939                                  	mov	dh,ah		; Put in position
 23940                                  	retn
 23941                                  
 23942                                  
 23943                                  ; =============== S U B	R O U T	I N E =======================================
 23944                                  
 23945                                  GET_DAY:
 23946                                  		call	GETNUM
 23947                                  		mov	dl,ah		; Put in position
 23948                                  GET_DAY_RETN:
 23949                                  		retn
 23950                                  
 23951                                  ; =============== S U B	R O U T	I N E =======================================
 23952                                  
 23953                                  GET_YR:
 23954                                  	call	GETNUM
 23955                                  	jc	short GET_DAY_RETN
 23956                                  	mov	cx,1900
 23957                                  	call	GET_DSEP
 23958                                  	pushf
 23959                                  	dec	si
 23960                                  	popf
 23961                                  	jz	short BIAS
 23962                                  	cmp	byte [si],0Dh
 23963                                  	je	short BIAS
 23964                                  	cmp	byte [si],' '
 23965                                  	je	short BIAS
 23966                                  	cmp	byte [si],9
 23967                                  	je	short BIAS
 23968                                  	push	bx
 23969                                  	mov	bl,100
 23970                                  	mov	al,ah
 23971                                  	mul	bl
 23972                                  	pop	bx
 23973                                  	mov	cx,ax
 23974                                  	call	GETNUM
 23975                                  	jc	short GET_DAY_RETN
 23976                                  BIAS:
 23977                                  	mov	al,ah
 23978                                  	mov	ah,0
 23979                                  	add	cx,ax
 23980                                  BIAS_RETN:
 23981                                  	retn
 23982                                  
 23983                                  ; ---------------------------------------------------------------------------
 23984                                  
 23985                                  DATERR:
 23986                                  	mov	dx,BADDATPTR
 23987                                  	call	STD_PRINTF
 23988                                  	jmp	GETDAT
 23989                                  
 23990                                  ; =============== S U B	R O U T	I N E =======================================
 23991                                  
 23992                                  GET_DSEP:
 23993                                  	lodsb
 23994                                  	cmp	al,'/'
 23995                                  	je	short BIAS_RETN
 23996                                  	;cmp	al,'.'
 23997                                  	cmp	al,[DOT_CHR]
 23998                                  	je	short BIAS_RETN
 23999                                  	;cmp	al,'-'
 24000                                  	cmp	al,[CHAR_SUB]
 24001                                  	je	short BIAS_RETN
 24002                                  	stc
 24003                                  	retn
 24004                                  
 24005                                  ; =============== S U B	R O U T	I N E =======================================
 24006                                  
 24007                                  ; TIME gets and sets the time
 24008                                  
 24009                                  CTIME:
 24010                                  	mov	si,81h		; Accepting argument for time inline
 24011                                  	call	SCANOFF
 24012                                  	cmp	al,0Dh
 24013                                  	je	short PRMTTIM
 24014                                  	mov	bx,2E3Ah ; ":."
 24015                                  	call	INLINE
 24016                                  	jmp	COMTIM
 24017                                  
 24018                                  ; =============== S U B	R O U T	I N E =======================================
 24019                                  
 24020                                  PRINT_TIME:
 24021                                  	mov	ah,Get_Time ; 2Ch ; Get time in CX:DX
 24022                                  	int	21h	; DOS -	GET CURRENT TIME
 24023                                  			; Return: CH = hours,CL = minutes,DH = seconds
 24024                                  			; DL = hundredths of seconds
 24025                                  	push	di
 24026                                  	push	es
 24027                                  	push	cs
 24028                                  	pop	es
 24029                                  	mov	di,CHARBUF
 24030                                  	mov	bl,1	; Always 24 hour time
 24031                                  	call	P_TIME
 24032                                  	xor	ax,ax
 24033                                  	stosb
 24034                                  	mov	dx,CHARBUF
 24035                                  	mov	[STRING_PTR_2],dx
 24036                                  	mov	dx,STRINGBUF2PTR
 24037                                  	call	STD_PRINTF
 24038                                  	pop	es
 24039                                  	pop	di
 24040                                  P_TIME_RETN:
 24041                                  	retn
 24042                                  
 24043                                  ; =============== S U B	R O U T	I N E =======================================
 24044                                  
 24045                                  P_TIME:
 24046                                  	mov	al,ch	
 24047                                  	test	bl,7Fh		; Ignore high bit
 24048                                  	jnz	short T24	; 24 hr time?
 24049                                  	mov	bh,'a'		; Assume A.M.
 24050                                  	cmp	al,12		; In the afternoon?
 24051                                  	jb	short MORN
 24052                                  	mov	bh,'p'
 24053                                  	jz	short MORN
 24054                                  	sub	al,12		; Keep it to 12 hours or less
 24055                                  MORN:
 24056                                  	or	al,al		; Before 1 am?
 24057                                  	jnz	short T24
 24058                                  	mov	al,12
 24059                                  T24:
 24060                                  	push	bx
 24061                                  	mov	bh,'0'-' ' ; 10h ; Enable leading zero suppression
 24062                                  	call	OUT2
 24063                                  	call	P_TSEP
 24064                                  	mov	al,cl
 24065                                  	call	OUT2
 24066                                  	pop	bx
 24067                                  	push	bx
 24068                                  	test	bl,80h
 24069                                  	jnz	short PAP	; If from DIR, go directly to am pm
 24070                                  	mov	bh,0		; Disable leading zero suppression
 24071                                  	call	P_TSEP
 24072                                  	mov	al,dh
 24073                                  	call	OUT2
 24074                                  	;mov	al,'.'
 24075                                  	mov	al,[DECIMAL_SEP]
 24076                                  	stosb
 24077                                  	mov	al,dl
 24078                                  	call	OUT2
 24079                                  PAP:
 24080                                  	pop	bx
 24081                                  	test	bl,7Fh		; Ignore high bit
 24082                                  	jnz	short P_TIME_RETN
 24083                                  	mov	al,bh
 24084                                  	stosb
 24085                                  	retn
 24086                                  
 24087                                  ; =============== S U B	R O U T	I N E =======================================
 24088                                  
 24089                                  P_TSEP:
 24090                                  	;mov	al,[TIME_SEP]
 24091                                  	mov	al,[INTERNATVARS+INTERNAT_BLOCK.Time_sep]
 24092                                  	stosb
 24093                                  P_TSEP_RETN:
 24094                                  	retn
 24095                                  
 24096                                  ; ---------------------------------------------------------------------------
 24097                                  
 24098                                  PRMTTIM:
 24099                                  	mov	dx,CURTIMPTR
 24100                                  	call	STD_PRINTF	; Print "Current time is "
 24101                                  	call	PRINT_TIME
 24102                                  GETTIM:
 24103                                  	xor	cx,cx		; Initialize hours and minutes to zero
 24104                                  	mov	dx,NEWTIMPTR
 24105                                  	call	STD_PRINTF
 24106                                  	;mov	bx,':.'
 24107                                  	mov	bx,[TIMECHARS] 
 24108                                  	call	GETBUF
 24109                                  COMTIM:
 24110                                  	jz	short P_TSEP_RETN ; If no time present, don't change it	
 24111                                  	jc	short TIMEERR
 24112                                  	mov	cx,dx
 24113                                  	xor	dx,dx
 24114                                  	lodsb
 24115                                  	cmp	al,0Dh
 24116                                  	je	short SAVTIM
 24117                                  	cmp	al,' '
 24118                                  	je	short GOTSEC2
 24119                                  	cmp	al,9
 24120                                  	je	short GOTSEC2
 24121                                  	cmp	al,bl
 24122                                  	je	short GOTSEC
 24123                                  	cmp	al,bh
 24124                                  	jne	short TIMEERR
 24125                                  GOTSEC:
 24126                                  	call	GETNUM
 24127                                  	jc	short TIMEERR
 24128                                  	mov	dh,ah		; Position seconds
 24129                                  	lodsb
 24130                                  	cmp	al,0Dh
 24131                                  	je	short SAVTIM
 24132                                  	cmp	al,' '
 24133                                  	je	short GOTSEC2
 24134                                  	cmp	al,9
 24135                                  	je	short GOTSEC2
 24136                                  	;cmp	al,'.'
 24137                                  	cmp	al,[DECIMAL_SEP]
 24138                                  	jne	short TIMEERR
 24139                                  	call	GETNUM
 24140                                  	jc	short TIMEERR
 24141                                  	mov	dl,ah
 24142                                  GOTSEC2:
 24143                                  	lodsb
 24144                                  	cmp	al,' '
 24145                                  	je	short GOTSEC2
 24146                                  	cmp	al,9
 24147                                  	je	short GOTSEC2
 24148                                  	cmp	al,0Dh
 24149                                  	jne	short TIMEERR
 24150                                  SAVTIM:
 24151                                  	mov	ah,SET_TIME ; 2Dh
 24152                                  	int	21h	; DOS -	SET CURRENT TIME
 24153                                  			; CH = hours,CL = minutes,DH = seconds,
 24154                                  			;		DL = hundredths of seconds
 24155                                  			; Return: AL = 00h if no error 
 24156                                  			;	     = FFh if bad value sent to routine
 24157                                  	or	al,al
 24158                                  P_TSEP_JRETN:
 24159                                  	jz	short P_TSEP_RETN ; Error in time?
 24160                                  TIMEERR:
 24161                                  	mov	dx,BADTIMPTR
 24162                                  	call	STD_PRINTF	; Print "Enter new time: "
 24163                                  	jmp	short GETTIM
 24164                                  
 24165                                  ; =============== S U B	R O U T	I N E =======================================
 24166                                  
 24167                                  GETBUF:
 24168                                  	mov	ah,Std_Con_String_Input ; 0Ah
 24169                                  	mov	dx,COMBUF
 24170                                  	mov	cx,2
 24171                                  	call	SETINITFLAG
 24172                                  	int	21h		; Get input line
 24173                                  	xor	cx,cx
 24174                                  	call	SETINITFLAG
 24175                                  	call	CRLF2
 24176                                  	mov	si,COMBUF+2
 24177                                  	cmp	byte [si],0Dh	; Check if new time entered
 24178                                  	jz	short P_TSEP_JRETN
 24179                                  
 24180                                  ; =============== S U B	R O U T	I N E =======================================
 24181                                  
 24182                                  INLINE:
 24183                                  	call	GETNUM		; Get one or two digit number
 24184                                  	jnb	short INLINE1
 24185                                  	retn
 24186                                  INLINE1:
 24187                                  	mov	dh,ah		; Put in position
 24188                                  	lodsb
 24189                                  	cmp	al,bl
 24190                                  	jz	short NEXT
 24191                                  	cmp	al,bh
 24192                                  	jz	short NEXT
 24193                                  	dec	si		; Clears zero flag
 24194                                  	clc
 24195                                  	mov	dl,0
 24196                                  	retn			; Time may have only an hour specified
 24197                                  NEXT:
 24198                                  	call	GETNUM
 24199                                  	mov	dl,ah		; Put in position
 24200                                  INLINE_RETN:
 24201                                  	retn
 24202                                  
 24203                                  ;============================================================================
 24204                                  ; TCODE5.ASM, MSDOS 2.11 (& MSDOS 3.3), 1983 (& 1987)
 24205                                  ;============================================================================
 24206                                  ; 05/10/2018 - Retro DOS v3.0
 24207                                  
 24208                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2370h
 24209                                  
 24210                                  ; =============== S U B	R O U T	I N E =======================================
 24211                                  
 24212                                  GETNUM:
 24213                                  	call	INDIG
 24214                                  	jb	short INLINE_RETN
 24215                                  	mov	ah,al		; Save first digit
 24216                                  	call	INDIG		; Another digit?
 24217                                  	jb	short OKRET
 24218                                  	aad			; Convert unpacked BCD to decimal
 24219                                  	mov	ah,al
 24220                                  OKRET:
 24221                                  	or	al,1
 24222                                  GETNUM_RETN:
 24223                                  	retn
 24224                                  
 24225                                  ; =============== S U B	R O U T	I N E =======================================
 24226                                  
 24227                                  INDIG:
 24228                                  	mov	al,[si]
 24229                                  	sub	al,'0'
 24230                                  	jc	short GETNUM_RETN
 24231                                  	cmp	al,10
 24232                                  	cmc
 24233                                  	jc	short GETNUM_RETN
 24234                                  	inc	si
 24235                                  	retn
 24236                                  
 24237                                  ; =============== S U B	R O U T	I N E =======================================
 24238                                  
 24239                                  OUT2:				; Output binary number as two ASCII digits
 24240                                  	aam			; Convert binary to unpacked BCD
 24241                                  	xchg	al,ah
 24242                                  	or	ax,3030h	; Add "0" bias to both digits
 24243                                  	cmp	al,'0'		; Is MSD zero?
 24244                                  	jnz	short NOSUP
 24245                                  	sub	al,bh		; Suppress leading zero if enabled
 24246                                  NOSUP:
 24247                                  	mov	bh,0		; Disable zero suppression
 24248                                  	stosw
 24249                                  	retn
 24250                                  
 24251                                  ; ---------------------------------------------------------------------------
 24252                                  	;stosb
 24253                                  	;retn
 24254                                  
 24255                                  ;============================================================================
 24256                                  ; TPIPE.ASM, MSDOS 6.0, 1991
 24257                                  ;============================================================================
 24258                                  ; 03/10/2018 - Retro DOS v3.0
 24259                                  
 24260                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23A3h
 24261                                  
 24262                                  ; =============== S U B	R O U T	I N E =======================================
 24263                                  
 24264                                  ; Set the special flag in the INIT flag to the value in CX.
 24265                                  
 24266                                  SETINITFLAG:
 24267                                  	mov	ds,[RESSEG]
 24268                                  	;and	byte [INITFLAG],0FDh
 24269                                  	and	byte [INITFLAG],~INITSPECIAL
 24270                                  	or	byte [INITFLAG],cl
 24271                                  	push	cs
 24272                                  	pop	ds
 24273                                  	retn
 24274                                  
 24275                                  ; =============== S U B	R O U T	I N E =======================================
 24276                                  
 24277                                  PIPEOFF:
 24278                                  	push	ds
 24279                                  	push	ax
 24280                                  	mov	ds,[cs:RESSEG]
 24281                                  	xor	al,al
 24282                                  	xchg	al,byte [PIPEFLAG]
 24283                                  	or	al,al
 24284                                  	jz	short PIPEOFFDONE
 24285                                  	shr	byte [ECHOFLAG],1
 24286                                  PIPEOFFDONE:
 24287                                  	pop	ax
 24288                                  	pop	ds
 24289                                  	retn
 24290                                  
 24291                                  ; ---------------------------------------------------------------------------
 24292                                  	;db    0,0,0,0,0
 24293                                  	;times 5 db 0
 24294                                  
 24295                                  align 16
 24296                                  
 24297                                  %endif
 24298                                  
 24299                                  ;============================================================================
 24300                                  ; PARSE2.ASM, MSDOS 6.0, 1991
 24301                                  ;============================================================================
 24302                                  ; 03/10/2018 - Retro DOS v3.0
 24303                                  
 24304                                  ;----------------------------------------------------------------------------
 24305                                  ; PARSELINE takes an MSDOS command line and maps it into a UNIX-style
 24306                                  ; argv[argvcnt] array. The most important difference between this array and
 24307                                  ; the tradition UNIX format is the extra cparse information included with
 24308                                  ; each argument element.
 24309                                  ;---------------
 24310                                  ; ENTRY:
 24311                                  ;	BL	     special delimiter for cparse -- not implemented)
 24312                                  ;---------------
 24313                                  ; EXIT:
 24314                                  ;	CF	    set if error
 24315                                  ;	AL	    error code (carry set). Note AH clobbered in any event.
 24316                                  ;	argv[]	    array of cparse flags and pointers to arguments
 24317                                  ;	argvcnt     argument count
 24318                                  ;---------------
 24319                                  ; NOTE(S):
 24320                                  ;	*   BL (special delimiter) is ignored, for now (set to space).
 24321                                  ;	*   Parseflags record contains cparse flags, as follows:
 24322                                  ;		sw_flag 	--	was this arg a switch?
 24323                                  ;		wildcard	--	whether or not it contained a * or ?
 24324                                  ;		path_sep	--	maybe it was a pathname
 24325                                  ;		unused		--	for future expansion
 24326                                  ;		special_delim	--	was there an initial special delimiter?
 24327                                  ;	*   argv[] and argvcnt are undefined if CF/AL indicates an error.
 24328                                  ;	*   Relationship between input, cparse output, and comtail can be
 24329                                  ;	    found in the following chart. Despite the claim of the cparse
 24330                                  ;	    documentation that, "Token buffer always starts d: for non switch
 24331                                  ;	    tokens", such is not the case (see column two, row two).
 24332                                  ;	    Similarly, [STARTEL] is not null when the command line is one of
 24333                                  ;	    the forms, "d:", "d:\", or "d:/". In fact, *STARTEL (i.e., what
 24334                                  ;	    STARTEL addresses) will be null. This is clearly just a
 24335                                  ;	    documentation error.
 24336                                  ;	*   cparse also returns a switch code in BP for each switch it
 24337                                  ;	    recognizes on the command line.
 24338                                  ;	*   arglen for each token does NOT include the terminating null.
 24339                                  ;	*   Finally, note that interesting constructions like 'foodir/*.exe'
 24340                                  ;	    parse as three separate tokens, and the asterisk is NOT a wildcard.
 24341                                  ;	    For example, 'for %i in (foodir/*.exe) do echo %i' will first
 24342                                  ;	    echo 'foodir', then '*', then '.exe'. Using cparse for command-
 24343                                  ;	    line parsing may result in slightly different behavior than
 24344                                  ;	    previously observed with the old COMMAND.COM command-line parser.
 24345                                  ;
 24346                                  ;	    Input		    Cparse		Command Line (80H)
 24347                                  ;	\alan\foo.bat		c:\alan\foo.bat 	\alan\foo.bat
 24348                                  ;	alan\foo.bat		alan\foo.bat		alan\foo.bat
 24349                                  ;	foo.bat 		foo.bat 		foo.bat
 24350                                  ;	c:\alan\foo.bat 	c:\alan\foo.bat 	c:\alan\foo.bat
 24351                                  ;	c:alan\foo.bat		c:alan\foo.bat		c:alan\foo.bat
 24352                                  ;	c:foo.bat		c:foo.bat		c:foo.bat
 24353                                  
 24354                                  ; =============== S U B	R O U T	I N E =======================================
 24355                                  
 24356                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 23D0h
 24357                                  
 24358                                  ; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24359                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 319Bh
 24360                                  
 24361                                  ; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 24362                                  ; MSDOS 6.22 - COMMAND.COM, transient portion/segment offset 3745h
 24363                                  
 24364                                  ; 27/07/2024 - Retro DOS v4.0-v4.1-v4.2-v5.0 COMMAND.COM (PARSELINE)
 24365                                  ; PCDOS 7.1 - COMMAND.COM, transient portion/segment offset 35F5h
 24366                                  
 24367                                  PARSELINE:
 24368 00003039 50                      	push	ax			; most of these are clobbered
 24369 0000303A 53                      	push	bx			; by cparse...
 24370 0000303B 51                      	push	cx
 24371 0000303C 52                      	push	dx
 24372 0000303D 57                      	push	di
 24373 0000303E 56                      	push	si
 24374 0000303F 9C                      	pushf
 24375                                  	;mov	byte [cpyflag],0  ; Turn "CPARSE called from COPY flag" off
 24376 00003040 C706[1A94]FFFF          	mov	word [LASTARG],-1 ; last argument at which to accumulate
 24377 00003046 31C0                    	xor	ax,ax
 24378                                  	;;mov	cx,1348
 24379                                  	; 27/07/2024
 24380                                  	;mov	cx,1092  ; PCDOS 7.1 COMMAND.COM
 24381 00003048 B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092
 24382 0000304B A2[B98C]                	mov	[cpyflag],al ; 0 ; 27/07/2024
 24383 0000304E BF[548E]                	mov	di,ARG
 24384 00003051 F3AA                    	rep	stosb
 24385                                  	;mov	word [ARGBUF_PTR],ARG_ARGBUF
 24386 00003053 C706[9893][1891]        	mov	word [ARGBUF_PTR],ARG+ARG_UNIT.argbuf
 24387                                  	;mov	word [ARG_ARGSWINFO],0 ; switch information, and info to date
 24388                                  	;mov	word [ARG+ARG_UNIT.argswinfo],0
 24389 00003059 A3[1691]                	mov	[ARG+ARG_UNIT.argswinfo],ax ; 0 ; 27/07/2024
 24390                                  	;mov	word [ARG_ARGVCNT],0 ; initialize argvcnt/argv[]
 24391                                  	;mov	word [ARG+ARG_UNIT.argvcnt],0
 24392 0000305C A3[1491]                	mov	[ARG+ARG_UNIT.argvcnt],ax ; 0 ; 27/07/2024 
 24393 0000305F BE[2689]                	mov	si,COMBUF+2	; prescan leaves cooked input in combuf
 24394                                  
 24395                                  ; This next section of code (up to pcont:)  makes sure that si is set up for
 24396                                  ; parsing. It should point at COMBUF if FORFLAG is set and arg.argforcombuf
 24397                                  ; otherwise. This is done so that commands can get arg pointers into their
 24398                                  ; original command line (or an exact copy of it) in arg_ocomptr.
 24399                                  ; Arg.argforcombuf is used so that the for loop processor will always be able
 24400                                  ; to get a hold of its original command line; even after COMBUF is blasted by
 24401                                  ; the command to be repeated or the transient part of command has been
 24402                                  ; reloaded.
 24403                                  
 24404 00003062 1E                      	push	ds
 24405 00003063 8E1E[C58A]              	mov	ds,[RESSEG]
 24406                                  	;cmp	byte [ForFlag],0
 24407 00003067 3806[9401]              	cmp	[ForFlag],al ; 0 ; 27/07/2024
 24408 0000306B 1F                      	pop	ds
 24409 0000306C 7510                    	jnz	short PCONT
 24410                                  	;mov	di,ARG_ARGFORCOMBUF
 24411 0000306E BF[1892]                	mov	di,ARG+ARG_UNIT.argforcombuf
 24412 00003071 30ED                    	xor	ch,ch
 24413 00003073 8A0E[2589]              	mov	cl,[COMBUF+1]
 24414 00003077 FEC1                    	inc	cl
 24415 00003079 F3A4                    	rep	movsb
 24416                                  	;mov	si,ARG_ARGFORCOMBUF
 24417 0000307B BE[1892]                	mov	si,ARG+ARG_UNIT.argforcombuf
 24418                                  PCONT:
 24419 0000307E BF[9A93]                	mov	di,TPBUF	; destination is temporary token buffer
 24420 00003081 B320                    	mov	bl,' '		; no special delimiter, for now
 24421                                  PARSELOOP:
 24422 00003083 8936[1C94]              	mov	[COMPTR],si	; save ptr into original command buffer
 24423 00003087 31ED                    	xor	bp,bp		; switch information put here by cparse
 24424 00003089 C606[368E]00            	mov	byte [expand_star],0 ; don't expand *'s to ?'s
 24425 0000308E E84FF5                  	call	scanoff		; skip leading blanks...
 24426 00003091 E8C510                  	call	cparse		; byte off a token (args in SI, DI, BL)
 24427 00003094 730B                    	jnb	short MORE_PRSE
 24428 00003096 09ED                    	or	bp,bp		; Check for trailing switch character
 24429 00003098 7403                    	jz	short PARSEDONE
 24430 0000309A E81700                  	call	newarg		; We hit CR but BP is non-zero. The
 24431                                  				;   typical cause of this is that a
 24432                                  				;   switch char IMMEDIATELY preceeds
 24433                                  				;   the CR. We have an argument, but it
 24434                                  				;   is sort of an error.
 24435                                  	;jmp	short PARSEDONE	; We're done (found the CR).
 24436                                  	; 01/03/2023
 24437                                  PARSEDONE:
 24438 0000309D 9D                      	popf
 24439 0000309E F8                      	clc
 24440 0000309F EB0C                    	jmp	short PARSE_EXIT
 24441                                  
 24442                                  MORE_PRSE:
 24443 000030A1 C606[B98C]02            	mov	byte [cpyflag],2
 24444                                  				; tell CPARSE that 1st token is done
 24445 000030A6 E80B00                  	call	newarg		; add to argv array (CX has char count)
 24446 000030A9 73D8                    	jnb	short PARSELOOP	; was everything OK?
 24447                                  	;jmp	short PARSE_ERROR ; NO, it wasn't -- bug out (CF set)
 24448                                  	; 01/03/2023
 24449                                  ;PARSEDONE:
 24450                                  	;popf
 24451                                  	;clc
 24452                                  	;jmp	short PARSE_EXIT
 24453                                  
 24454                                  PARSE_ERROR:			; error entry (er, exit) point
 24455 000030AB 9D                      	popf
 24456 000030AC F9                      	stc
 24457                                  PARSE_EXIT:			; depend on not changing CF
 24458 000030AD 5E                      	pop	si
 24459 000030AE 5F                      	pop	di
 24460 000030AF 5A                      	pop	dx
 24461 000030B0 59                      	pop	cx
 24462 000030B1 5B                      	pop	bx
 24463 000030B2 58                      	pop	ax
 24464 000030B3 C3                      	retn
 24465                                  
 24466                                  ; =============== S U B	R O U T	I N E =======================================
 24467                                  
 24468                                  ; NEWARG adds the supplied argstring and cparse data to arg.argv[].
 24469                                  ;
 24470                                  ; ENTRY:
 24471                                  ;   BH			argflags
 24472                                  ;   CX			character count in argstring
 24473                                  ;   DI			pointer to argstring
 24474                                  ;   comptr		ptr to starting loc of current token in original command
 24475                                  ;   [STARTEL]		cparse's answer to where the last element starts
 24476                                  ; EXIT:
 24477                                  ;   argbufptr		points to next free section of argbuffer
 24478                                  ;   arg.argbuf		contains null-terminated argument strings
 24479                                  ;   arg.argvcnt 	argument count
 24480                                  ;   arg.argv[]		array of flags and pointers
 24481                                  ;   arg.arg_ocomptr	ptr to starting loc of current token in original command
 24482                                  ;   CF			set if error
 24483                                  ;   AL			carry set:  error code; otherwise, zero
 24484                                  
 24485                                  	; 01/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24486                                  	; 12/06/2023 - Retro DOS v4.2 COMMAND.COM
 24487                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM 
 24488                                  	;	     & Retro DOS v4.1 COMMAND.COM (2024 modification)
 24489                                  newarg:
 24490 000030B4 53                      	push	bx
 24491 000030B5 51                      	push	cx
 24492 000030B6 52                      	push	dx
 24493 000030B7 57                      	push	di
 24494 000030B8 56                      	push	si
 24495 000030B9 9C                      	pushf
 24496 000030BA E86200                  	call	arg_switch		; if it's a switch, record switch info
 24497                                  					; LEAVE SWITCH ON COMMAND LINE!!
 24498                                  	;;;jc	short newarg_done 	; previous arg's switches -- and leave
 24499                                  
 24500                                  	;cmp	word [ARG_ARGVCNT],64	; check to ensure we've not
 24501 000030BD 833E[1491]40            	cmp	word [ARG+ARG_UNIT.argvcnt],ARGMAX ; 64
 24502 000030C2 7D50                    	jge	short to_many_args	; exceeded array limits
 24503 000030C4 88FE                    	mov	dh,bh			
 24504                                  	;mov	bx,[ARG_ARGVCNT]	; save argflags	
 24505 000030C6 8B1E[1491]              	mov	bx,[ARG+ARG_UNIT.argvcnt] ; argv[argvcnt++] = arg data
 24506                                  	;inc	word [ARG_ARGVCNT]
 24507 000030CA FF06[1491]              	inc	word [ARG+ARG_UNIT.argvcnt]
 24508                                  	;mov	ax,ARG_ARGV
 24509 000030CE B8[548E]                	mov	ax,ARG+ARG_UNIT.argv
 24510 000030D1 E87E00                  	call	argv_calc		; convert offset to pointer
 24511                                  	;mov	[BX].argsw_word,0 	; no switch information, yet...
 24512                                  	;mov	word [bx+7],0
 24513 000030D4 C747070000              	mov	word [bx+ARGV_ELE.argsw_word],0
 24514                                  	;mov	[BX].arglen,CX		; argv[argvcnt].arglen = arg length
 24515                                  	;mov	[bx+5],cx
 24516 000030D9 894F05                  	mov	[bx+ARGV_ELE.arglen],cx 
 24517                                  	;mov	[BX].argflags,DH 	; argv[argvcnt].argflags = cparse flags
 24518                                  	;mov	[bx+2],dh
 24519 000030DC 887702                  	mov	[bx+ARGV_ELE.argflags],dh
 24520 000030DF 8B36[9893]              	mov	si,[ARGBUF_PTR]
 24521                                  	;mov	[BX].argpointer,SI 	; argv[argvcnt].argpointer = [argbufptr]
 24522                                  	;mov	[bx+ARGV_ELE.argpointer],si
 24523 000030E3 8937                    	mov	[bx],si			
 24524 000030E5 0336[FB8D]              	add	si,[STARTEL]		; save startel from new location
 24525 000030E9 29FE                    	sub	si,di			; form pointer into argbuf
 24526                                  	;mov	[BX].argstartel,SI ; argv[argvcnt].argstartel = new [STARTEL]
 24527                                  	;mov	[bx+3],si
 24528 000030EB 897703                  	mov	[bx+ARGV_ELE.argstartel],si
 24529 000030EE 8B36[1C94]              	mov	si,[COMPTR]
 24530                                  	;mov	[BX].arg_ocomptr,si ; arg_ocomptr = ptr into original com line
 24531                                  	;mov	[bx+9],si
 24532 000030F2 897709                  	mov	[bx+ARGV_ELE.arg_ocomptr],si
 24533 000030F5 89FE                    	mov	si,di			; now save argstring in argbuffer
 24534 000030F7 8B3E[9893]              	mov	di,[ARGBUF_PTR]		; load the argbuf pointer and make
 24535                                  
 24536                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 24537                                  ; PCDOS 7.1 COMMAND.COM
 24538                                  %if 0
 24539                                  	add	di,cx			; sure we're not about to run off
 24540                                  	;cmp	DI,OFFSET TRANGROUP:arg.argbuf+ARGBLEN-1
 24541                                  	;;cmp	di,ARG_ARGBUF+255
 24542                                  	;cmp	di,ARG+ARG_UNIT.argbuf+127
 24543                                  	cmp	di,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 24544                                  	jge	short buf_oflow		; the end of the buffer (plus null byte)
 24545                                  	sub	di,cx
 24546                                  %else
 24547                                  	; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 24548                                  	;mov	bx,ARG_ARGBUF+127
 24549 000030FB BB[9791]                	mov	bx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 24550 000030FE 29FB                    	sub	bx,di	; sure we're not about to run off
 24551 00003100 39CB                    	cmp	bx,cx
 24552 00003102 7302                    	jnb	short newarg_@
 24553 00003104 89D9                    	mov	cx,bx	
 24554                                  %endif
 24555                                  
 24556                                  newarg_@:	; 27/07/2024
 24557 00003106 FC                      	cld
 24558 00003107 F3A4                    	rep	movsb
 24559 00003109 B000                    	mov	al,ANULL ; 0		; tack a null byte on the end
 24560 0000310B AA                      	stosb
 24561 0000310C 893E[9893]              	mov	[ARGBUF_PTR],di		; update argbufptr after copy
 24562                                  newarg_done:
 24563 00003110 9D                      	popf
 24564 00003111 F8                      	clc
 24565 00003112 EB05                    	jmp	short newarg_exit
 24566                                  
 24567                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 24568                                  ; PCDOS 7.1 COMMAND.COM
 24569                                  %if 0
 24570                                  to_many_args:
 24571                                  	mov	ax,1
 24572                                  	jmp	short newarg_error
 24573                                  buf_oflow:
 24574                                  	mov	ax,2
 24575                                  %else
 24576                                  ; 27/07/2024 - Retro DOS v5.0 COMMAND.COM
 24577                                  ;buf_oflow:
 24578                                  ;	; 27/07/2024
 24579                                  ;	; PCDOS 7.1 COMMAND.COM
 24580                                  ;	sub	di,cx
 24581                                  ;	;mov	cx,ARG_ARGBUF+7Fh
 24582                                  ;	mov	cx,ARG+ARG_UNIT.argbuf+ARGBLEN-1
 24583                                  ;	sub	cx,di
 24584                                  ;	jmp     short newarg_@
 24585                                  to_many_args:
 24586 00003114 B80100                  	mov	ax,1
 24587                                  %endif
 24588                                  
 24589                                  newarg_error:
 24590 00003117 9D                      	popf
 24591 00003118 F9                      	stc
 24592                                  newarg_exit:
 24593 00003119 5E                      	pop	si
 24594 0000311A 5F                      	pop	di
 24595 0000311B 5A                      	pop	dx
 24596 0000311C 59                      	pop	cx
 24597 0000311D 5B                      	pop	bx
 24598 0000311E C3                      	retn
 24599                                  
 24600                                  ; =============== S U B	R O U T	I N E =======================================
 24601                                  
 24602                                  ; ARG_SWITCH decides if an argument might really be a switch. In the
 24603                                  ; event that it is, and we can recognize
 24604                                  ;
 24605                                  ; ENTRY:
 24606                                  ;   As in <newarg>.
 24607                                  ; EXIT:
 24608                                  ;   CF	    --	    clear (wasn't a switch); set (was a switch)
 24609                                  ; NOTE(S):
 24610                                  ;   *	The mechanism mapping a switch into a bit-value depends entirely
 24611                                  ;	on the order of definition in the <switch_list> variable and the
 24612                                  ;	values chosen to define the bits in CMDT:COMEQU.ASM. Change either
 24613                                  ;	<switch_list> or the definitions in CMDT:COMEQU.ASM -- and rewrite
 24614                                  ;	this mechanism. This code taken from CMDT:TCODE.ASM.
 24615                                  ;   *	The <switch_list> declared below is redundant to one declared in
 24616                                  ;	TDATA.ASM, and used in TCODE.ASM.
 24617                                  ;   *	An ugly routine.
 24618                                  
 24619                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 24620                                  arg_switch:
 24621 0000311F 50                      	push	ax
 24622 00003120 53                      	push	bx
 24623 00003121 51                      	push	cx
 24624 00003122 57                      	push	di
 24625 00003123 9C                      	pushf
 24626 00003124 F6C701                  	test	bh,1 ; sw_flag		; is it a switch? (preserve flag word)
 24627 00003127 741C                    	jz	short arg_no_switch0
 24628 00003129 833E[1A94]FF            	cmp	word [LASTARG],-1 	; have we encountered any REAL args yet?
 24629 0000312E 741B                    	je	short arg_no_switch1 	; no, so leading switches don't matter
 24630 00003130 8B1E[1A94]              	mov	bx,[LASTARG]		; yes, add switch info to last REAL arg
 24631                                  	;mov	ax,offset TRANGROUP:arg.argv
 24632                                  	;mov	ax,ARG_ARGV
 24633 00003134 B8[548E]                	mov	ax,ARG+ARG_UNIT.argv  ; ARG+0
 24634 00003137 E81800                  	call	argv_calc
 24635                                  	;or	[BX].argsw_word,BP
 24636                                  	;or	[bx+7],bp
 24637 0000313A 096F07                  	or	[bx+ARGV_ELE.argsw_word],bp
 24638                                  	;or	arg.argswinfo,BP
 24639                                  	;or	[ARG_ARGSWINFO],bp
 24640 0000313D 092E[1691]              	or	[ARG+ARG_UNIT.argswinfo],bp
 24641                                  arg_yes_switch:
 24642 00003141 9D                      	popf
 24643 00003142 F9                      	stc
 24644 00003143 EB08                    	jmp	short arg_switch_exit
 24645                                  
 24646                                  arg_no_switch0:
 24647                                  	;mov	ax,[ARG_ARGVCNT]
 24648 00003145 A1[1491]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 24649 00003148 A3[1A94]                	mov	[LASTARG],ax
 24650                                  arg_no_switch1:
 24651 0000314B 9D                      	popf
 24652 0000314C F8                      	clc
 24653                                  arg_switch_exit:
 24654 0000314D 5F                      	pop	di
 24655 0000314E 59                      	pop	cx
 24656 0000314F 5B                      	pop	bx
 24657 00003150 58                      	pop	ax
 24658 00003151 C3                      	retn
 24659                                  
 24660                                  ; =============== S U B	R O U T	I N E =======================================
 24661                                  
 24662                                  ; ARGV_CALC maps an array index into a byte-offset from the base of
 24663                                  ; the supplied array.  Method used for computing the address is:
 24664                                  ;	Array Index * Array Elt Size + Base Addr = Elt Addr
 24665                                  ; ENTRY:
 24666                                  ;   AX	    --	    base of array
 24667                                  ;   BX	    --	    array index
 24668                                  ; EXIT:
 24669                                  ;   BX	    --	    byte offset
 24670                                  
 24671                                  	; 01/03/2023 - Retro DOS v4.0 COMMAND.COM
 24672                                  argv_calc:
 24673 00003152 50                      	push	ax		; Save base
 24674 00003153 88D8                    	mov	al,bl		; al = array index
 24675                                  	;mov	bl,11
 24676 00003155 B30B                    	mov	bl,ARGV_ELE.SIZE ; bl = size of an argv element
 24677 00003157 F6E3                    	mul	bl		; ax = base offset
 24678 00003159 5B                      	pop	bx		; Get base
 24679 0000315A 01D8                    	add	ax,bx		; Add in base offset
 24680 0000315C 93                      	xchg	ax,bx		; Restore ax and put byte offset in bx
 24681 0000315D C3                      	retn
 24682                                  
 24683                                  ; ---------------------------------------------------------------------------
 24684                                  	
 24685                                  	;db 0Ah dup(0)
 24686                                  	;times 10 db 0
 24687                                  
 24688 0000315E 90<rep 2h>              align 16
 24689                                  
 24690                                  ;============================================================================
 24691                                  ; PATH1.ASM, MSDOS 6.0, 1991
 24692                                  ;============================================================================
 24693                                  ; 03/10/2018 - Retro DOS v3.0
 24694                                  
 24695                                  ;----------------------------------------------------------------------------
 24696                                  ;    PATH.ASM contains the routines to perform pathname incovation. Path and
 24697                                  ;    Parse share a temporary buffer and argv[] definitions. <Path_Search>,
 24698                                  ;    given a pathname, attempts to find a corresponding executable or batch
 24699                                  ;    file on disk. Directories specified in the user's search path will be
 24700                                  ;    searched for a matching file, if a match is not found in the current
 24701                                  ;    directory and if the pathname is actually only an MSDOS filename.
 24702                                  ;    <Path_Search> assumes that the parsed command name can be found in
 24703                                  ;    argv[0] -- in other words, <Parseline> should be executed prior to
 24704                                  ;    <Path_Search>. Alternatively, the command name and appropriate
 24705                                  ;    information could be placed in argv[0], or <Path_Search> could be
 24706                                  ;    (easily) modified to make no assumptions about where its input is found.
 24707                                  ;    Please find enclosed yet another important routine, <Save_Args>, which
 24708                                  ;    places the entire arg/argv[]/argbuf structure on a piece of newly
 24709                                  ;    allocated memory. This is handy for for-loop processing, and anything
 24710                                  ;    else that wants to save the whole shebang and then process other command
 24711                                  ;    lines.
 24712                                  ;
 24713                                  ; Alan L, OS/MSDOS				    August 15, 1983
 24714                                  ;
 24715                                  ; ENTRY:
 24716                                  ;   <Path_Search>:	    argv[0].
 24717                                  ;   <Save_Args>:	    bytes to allocate in addition to arg structure
 24718                                  ; EXIT:
 24719                                  ;   <Path_Search>:	    success flag, best pathname match in EXECPATH.
 24720                                  ;   <Save_Args>:	    success flag, segment address of new memory
 24721                                  ; NOTE(S):
 24722                                  ;   *	<Argv_calc> handily turns an array index into an absolute pointer.
 24723                                  ;	The computation depends on the size of an argv[] element (arg_ele).
 24724                                  ;   *	<Parseline> calls <cparse> for chunks of the command line. <Cparse>
 24725                                  ;	does not function as specified; see <Parseline> for more details.
 24726                                  ;   *	<Parseline> now knows about the flags the internals of COMMAND.COM
 24727                                  ;	need to know about. This extra information is stored in a switch_flag
 24728                                  ;	word with each command-line argument; the switches themselves will not
 24729                                  ;	appear in the resulting arg structure.
 24730                                  ;   *	With the exception of CARRY, flags are generally preserved across calls.
 24731                                  ;----------------------------------------------------------------------------
 24732                                  
 24733                                  ; =============== S U B	R O U T	I N E =======================================
 24734                                  
 24735                                  ; PATH_SEARCH tries to find the file it's given, somewhere. An initial value
 24736                                  ; of *argv[0].argstartel == 0 implies that there is no command (empty line
 24737                                  ; or 'd:' or 'd:/'). This check is done in strip; otherwise, strip formats
 24738                                  ; the filename/pathname into tpbuf. Search(tpbuf) is executed to see if we
 24739                                  ; have a match, either in the current working directory if we were handed
 24740                                  ; a filename, or in the specified directory, given a pathname. If this call
 24741                                  ; fails, and we were given a pathname, then Path_Search fails. Otherwise,
 24742                                  ; Path_Crunch is repeatedly invoked on tpbuf[STARTEL] (if there's a drive
 24743                                  ; prefix, we want to skip it) for each pathstring in userpath. Success on
 24744                                  ; either the first invocation of search or on one of the succeeding calls
 24745                                  ; sets up the appropriate information for copying the successful pathname
 24746                                  ; prefix (if any) into the result buffer, followed by the successful filename
 24747                                  ; match (from [search_best_buf]). The result is returned in in EXECPATH.
 24748                                  ;
 24749                                  ; ENTRY:
 24750                                  ;   argv[0]		--	command name and associated information
 24751                                  ; EXIT:
 24752                                  ;   AX			--	non-zero indicates type of file found
 24753                                  ;   EXECPATH		--	successful pathname (AX non-zero)
 24754                                  ; NOTE(S):
 24755                                  ;   1)	Uses the temporary buffer, tpbuf, from the parse routines.
 24756                                  ;   2)	Some files are more equal than others.	See search: for rankings.
 24757                                  ;   3)	Path_Search terminates as soon as a call to search succeeds, even
 24758                                  ;	if search returns an .exe or .bat.
 24759                                  ;   5)	Clobbers dma address.
 24760                                  
 24761                                  PBUFLEN 	EQU	128		; length of EXECPATH
 24762                                  PATH_SEP_CHAR	EQU	';'
 24763                                  
 24764                                  ;parseflags RECORD special_delim:1, unused:4, path_sep:1, wildcard:1, sw_flag:1
 24765                                  
 24766                                  	;special_delim equ 128
 24767                                  	;path_sep equ 4
 24768                                  	;wildcard equ 2
 24769                                  	;sw_flag  equ 1
 24770                                  
 24771                                  ;----------------------------------------------------------------------------
 24772                                  
 24773                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2510h
 24774                                  
 24775                                  ; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 24776                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 32D1h
 24777                                  
 24778                                  path_search:
 24779 00003160 53                      	push	bx
 24780 00003161 51                      	push	cx
 24781 00003162 52                      	push	dx		; could use a "stack 'em" instruction
 24782 00003163 56                      	push	si
 24783 00003164 57                      	push	di
 24784 00003165 55                      	push	bp
 24785 00003166 9C                      	pushf
 24786                                  
 24787                                  	;test	ds:arg.argv[0].argflags, (MASK wildcard) + (MASK sw_flag)
 24788                                  	;test	byte [ARGV0_ARG_FLAGS],3
 24789 00003167 F606[568E]03            	test	byte [ARG+ARGV_ELE.argflags],3 ; wildcard+sw_flag
 24790 0000316C 7403                    	jz	short path_search_ok
 24791                                  path_failure_jmp:
 24792 0000316E E9C100                  	jmp	path_failure	; ambiguous commands not allowed
 24793                                  
 24794                                  path_search_ok:
 24795 00003171 E85201                  	call	STORE_PCHAR	; figure out the pathname separator
 24796 00003174 BA[1E94]                	mov	dx,FBUF		; clobber old dma value with
 24797 00003177 B8001A                  	mov	ax,Set_DMA*256 ; 1A00h ; a pointer to our dma buffer
 24798 0000317A CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 24799                                  			; DS:DX	-> disk	transfer buffer
 24800 0000317C 06                      	push	es
 24801 0000317D E88FF1                  	call	find_path	; get a handle (ES:DI) on user path
 24802 00003180 8C06[4994]              	mov	[pathinfo+0],es	; and squirrel it away
 24803 00003184 893E[4B94]              	mov	[pathinfo+2],di	; "old" pathstring pointer
 24804 00003188 893E[4D94]              	mov	[pathinfo+4],di	; "new" pathstring pointer
 24805 0000318C 07                      	pop	es
 24806                                  	
 24807 0000318D BB8000                  	mov	bx,PBUFLEN ; 128 ; copy/format argv[0] into temp buffer
 24808 00003190 BE[ED89]                	mov	si,EXECPATH
 24809 00003193 E88002                  	call	STRIP
 24810 00003196 72D6                    	jc	short path_failure_jmp ; if possible, of course
 24811                                  		
 24812 00003198 89F2                    	mov	dx,si		; search (EXECPATH, error_message)
 24813 0000319A C706[9E94][777F]        	mov	word [search_error],baddrv_ptr
 24814 000031A0 E89F01                  	call	PSEARCH		; must do at least one search
 24815 000031A3 09C0                    	or	ax,ax		; find anything?
 24816 000031A5 7469                    	jz	short path_noinit
 24817                                  				; failure ... search farther	
 24818 000031A7 89C5                    	mov	bp,ax		; success... save filetype code	
 24819 000031A9 BF[ED89]                	mov	di,EXECPATH
 24820                                  	;mov	si,ds:arg.argv[0].argpointer
 24821                                  	;mov	si,[ARG_ARGV]
 24822 000031AC 8B36[548E]              	mov	si,[ARG+ARGV_ELE.argpointer]
 24823                                  	;mov	cx,ds:arg.argv[0].argstartel
 24824                                  	;mov	cx,[ARGV0_ARGSTARTEL]
 24825 000031B0 8B0E[578E]              	mov	cx,[ARG+ARGV_ELE.argstartel]
 24826 000031B4 29F1                    	sub	cx,si		; compute prefix bytes to copy
 24827                                  
 24828                                  ; We have the number of bytes in the prefix (up to the final component).
 24829                                  ; We need to form the complete pathname including leading drive and current
 24830                                  ; directory.
 24831                                  ;
 24832                                  ; Is there a drive letter present?
 24833                                  
 24834 000031B6 B43A                    	mov	ah,':'
 24835 000031B8 83F902                  	cmp	cx,2		; room for drive letter?
 24836 000031BB 7205                    	jb	short adddrive	; no, stick it in
 24837 000031BD 386401                  	cmp	[si+1],	ah	; colon present?
 24838 000031C0 7408                    	je	short movedrive	; yes, just move it
 24839                                  adddrive:
 24840 000031C2 A0[D98A]                	mov	al,[CURDRV]	; get current drive
 24841 000031C5 0441                    	add	al,'A'		; convert to uppercase letter
 24842 000031C7 AB                      	stosw			; store d:
 24843 000031C8 EB05                    	jmp	short checkpath
 24844                                  
 24845                                  movedrive:
 24846 000031CA AD                      	lodsw			; move d:
 24847 000031CB AB                      	stosw
 24848 000031CC 83E902                  	sub	cx,2		; 2 bytes less to move
 24849                                  checkpath:
 24850 000031CF 0C20                    	or	al,20h
 24851 000031D1 88C2                    	mov	dl,al		
 24852                                  	;sub	dl,60h
 24853 000031D3 80EA60                  	sub	dl,'a'-1	; convert to 1-based for current dir
 24854                                  
 24855                                  ; Stick in beginning path char
 24856                                  
 24857 000031D6 A0[4F94]                	mov	al,[psep_char]
 24858 000031D9 AA                      	stosb
 24859                                  
 24860                                  ; Is there a leading /? If so, then no current dir copy is necessary.
 24861                                  ; Otherwise, get current dir for DL.
 24862                                  
 24863 000031DA 83F901                  	cmp	cx,1		; is there room for path char?
 24864 000031DD 720A                    	jb	short addpath	; no, go add path
 24865 000031DF AC                      	lodsb
 24866 000031E0 49                      	dec	cx
 24867 000031E1 3A06[4F94]              	cmp	al,[psep_char]	; is there a path separator?
 24868 000031E5 741C                    	je	short movepath	; yes, go move remainder of path
 24869 000031E7 41                      	inc	cx
 24870 000031E8 4E                      	dec	si		; undo the lodsb
 24871                                  addpath:
 24872 000031E9 56                      	push	si
 24873 000031EA 89FE                    	mov	si,di		; remainder of buffer
 24874 000031EC B80047                  	mov	ax,Current_Dir*256 ; 4700h
 24875 000031EF CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 24876                                  			; DL = drive (0=default,1=A,etc.)
 24877                                  			; DS:SI	points to 64-byte buffer area
 24878                                  
 24879                                  ; The previous current dir will succeed a previous find_first already worked.
 24880                                  ;
 24881                                  ; Find end of string.
 24882                                  
 24883 000031F1 89F7                    	mov	di,si
 24884 000031F3 5E                      	pop	si
 24885 000031F4 A0[4F94]                	mov	al,[psep_char]
 24886 000031F7 803D00                  	cmp	byte [di],0	; root (empty dir string)?
 24887 000031FA 7407                    	jz	short movepath	; yes, no need for path char
 24888                                  scanend:
 24889                                  	;cmp	byte [di],0	; end of string?
 24890                                  	;jz	short foundend
 24891                                  	;inc	di
 24892                                  	;jmp	short scanend
 24893                                  	; 18/03/2023 - Retro DOS v4.0 COMMAND.COM
 24894 000031FC 47                      	inc	di
 24895 000031FD 803D00                  	cmp	byte [di],0
 24896 00003200 75FA                    	jnz	short scanend
 24897                                  
 24898                                  ; Stick in a trailing path char.
 24899                                  
 24900                                  foundend:
 24901 00003202 AA                      	stosb
 24902                                  
 24903                                  ; Move remaining part of path. Skip leading path char if present.
 24904                                  
 24905                                  movepath:
 24906 00003203 3804                    	cmp	[si],al		; first char a path char?
 24907 00003205 7502                    	jne	short copypath
 24908                                  	; 26/04/2023
 24909 00003207 46                      	inc	si		; move past leading char
 24910 00003208 49                      	dec	cx		; drop from count
 24911                                  copypath:
 24912 00003209 E302                    	jcxz	_copydone	; no chars to move!	
 24913 0000320B F3A4                    	rep	movsb
 24914                                  _copydone:
 24915 0000320D E9A100                  	jmp	path_success
 24916                                  				; run off and form complete pathname
 24917                                  path_noinit:
 24918                                  	;test	ds:arg.argv[0].argflags, MASK path_sep
 24919                                  	;test	byte [ARGV0_ARG_FLAGS],4
 24920 00003210 F606[568E]04            	test	byte [ARG+ARGV_ELE.argflags],4 ; path_sep
 24921 00003215 751B                    	jnz	short path_failure
 24922                                  				; complete pathname specified ==> fail
 24923                                  	;mov	bh,';'
 24924 00003217 B73B                    	mov	bh,PATH_SEP_CHAR
 24925                                  				; semicolon terminates pathstring
 24926                                  	;mov	dx,ds:arg.argv[0].argstartel
 24927                                  				; this is where the last element starts
 24928                                  	;mov	dx,[ARGV0_ARGSTARTEL]
 24929 00003219 8B16[578E]              	mov	dx,[ARG+ARGV_ELE.argstartel]
 24930                                  	;sub	dx,ds:arg.argv[0].argpointer
 24931                                  				; form pointer into EXECPATH,
 24932                                  	;sub	dx,[ARG_ARGV]
 24933 0000321D 2B16[548E]              	sub	dx,[ARG+ARGV_ELE.argpointer]
 24934 00003221 81C2[ED89]              	add	dx,EXECPATH	; skipping over drive spec, if any
 24935                                  path_loop:
 24936 00003225 E8AD00                  	call	path_crunch	; pcrunch (EXECPATH, pathinfo)
 24937 00003228 89C5                    	mov	bp,ax		; save filetype code
 24938 0000322A 9F                      	lahf			; save flags, just in case
 24939 0000322B 09ED                    	or	bp,bp		; did path_crunch find anything?		
 24940 0000322D 7508                    	jnz	short path_found 
 24941 0000322F 9E                      	sahf			; see? needed those flags, after all!
 24942 00003230 73F3                    	jnc	short path_loop	; is there anything left to the path?
 24943                                  path_failure:
 24944 00003232 31C0                    	xor	ax,ax
 24945 00003234 E98700                  	jmp	path_exit
 24946                                  
 24947                                  path_found:				; pathinfo[] points to winner
 24948 00003237 BF[ED89]                	mov	di,EXECPATH
 24949                                  	;mov	cx,pathinfo[4] 
 24950 0000323A 8B0E[4D94]              	mov	cx,[pathinfo+4]	; "new" pointer -- end of string
 24951                                  	;mov	si,pathinfo[2]
 24952 0000323E 8B36[4B94]              	mov	si,[pathinfo+2]	; "old" pointer -- beginning of string
 24953                                  
 24954                                  ;	BAS Nov 20/84
 24955                                  ;   Look at the pathname and expand . and .. if they are the first element
 24956                                  ;   in the pathname (after the drive letter)
 24957                                  
 24958 00003242 06                      	push	es
 24959                                  	;push	pathinfo[0]
 24960 00003243 FF36[4994]              	push	word [pathinfo+0]
 24961 00003247 07                      	pop	es
 24962                                  ;SR;
 24963                                  ; Oops! Gets fooled if path= \;..
 24964                                  ; We should also check if a drive letter is really present
 24965                                  ;
 24966 00003248 26807C022E              	cmp	byte [es:si+2],'.'
 24967                                  				; Look for Current dir at start of path
 24968 0000324D 7534                    	jne	short path_cpy
 24969                                  
 24970                                  	; 18/03/2023
 24971                                  	; MSDOS 6.0
 24972 0000324F 26807C013A              	cmp	byte [es:si+1],':'
 24973                                  				; does path have drive letter?
 24974 00003254 752D                    	jne	short path_cpy	; no, copy the path string
 24975                                  
 24976 00003256 51                      	push	cx		; Save pointer to end of string
 24977                                  	;mov	al,[es:si]
 24978                                  	;mov	[di],al		; Copy drive letter, :, and root char
 24979                                  	;mov	al,[es:si+1]	; to EXECPATH
 24980                                  	;mov	[di+1],al
 24981                                  	; 05/05/2023
 24982 00003257 268B04                  	mov	ax,[es:si]
 24983 0000325A 8905                    	mov	[di],ax
 24984 0000325C A0[4F94]                	mov	al,[psep_char]
 24985 0000325F 884502                  	mov	[di+2],al
 24986 00003262 56                      	push	si		; Save pointer to begining of string
 24987 00003263 268A14                  	mov	dl,[es:si]	; Convert device letter for cur dir
 24988 00003266 80CA20                  	or	dl,20h
 24989                                  	;sub	dl,60h
 24990 00003269 80EA60                  	sub	dl,'a'-1
 24991 0000326C 89FE                    	mov	si,di		; pointer to EXECPATH
 24992 0000326E 83C603                  	add	si,3		; Don't wipe out drive and root info
 24993 00003271 B80047                  	mov	ax,Current_Dir*256 ; 4700h
 24994 00003274 CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 24995                                  			; DL = drive (0=default,1=A,etc.)
 24996                                  			; DS:SI	points to 64-byte buffer area
 24997 00003276 E8F7F9                  	call	dstrlen		; Determine length of present info
 24998 00003279 01CE                    	add	si,cx		; Don't copy over drive and root info
 24999 0000327B 4E                      	dec	si
 25000 0000327C 89F7                    	mov	di,si		; Point to end of target string
 25001 0000327E 5E                      	pop	si		; Restore pointer to begining of string
 25002 0000327F 83C603                  	add	si,3		; Point past drive letter, :, .
 25003 00003282 59                      	pop	cx		; Restore pointer to end of string
 25004                                  path_cpy:
 25005 00003283 07                      	pop	es
 25006 00003284 29F1                    	sub	cx,si		; yields character count
 25007 00003286 1E                      	push	ds		; time to switch segments
 25008 00003287 FF36[4994]              	push	word [pathinfo+0]
 25009                                  				; string lives in this segment
 25010 0000328B 1F                      	pop	ds
 25011 0000328C FC                      	cld
 25012                                  
 25013                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25014                                  	; MSDOS 5.0 (& MSDOS 5.0)
 25015                                  	;;rep	movsb ; 3/3/KK	; copy the prefix path into EXECPATH
 25016                                  kloop:
 25017 0000328D AC                      	lodsb			;AN000;  3/3/KK
 25018 0000328E AA                      	stosb			;AN000;  3/3/KK
 25019 0000328F E82FF1                  	call	testkanj	;AN000;  3/3/KK
 25020 00003292 7410                    	jz	short _notkanj1	;AN000;  3/3/KK
 25021 00003294 49                      	dec	cx		;AN000;  3/3/KK
 25022 00003295 E307                    	jcxz	popdone		;AN000;  Ignore boundary error 3/3/KK
 25023 00003297 A4                      	movsb			;AN000;  3/3/KK
 25024 00003298 49                      	dec	cx		;AN000;  3/3/KK
 25025 00003299 83F901                  	cmp	cx,1		;AN000;  One char (the terminator) left ? 3/3/KK
 25026 0000329C 77EF                    	ja	short kloop	;AN000;  no.  3/3/KK
 25027                                  popdone:			;AN000;  3/3/KK
 25028 0000329E 1F                      	pop	ds		;AN000;  Yes ES:DI->terminator, last char is 3/3/KK
 25029 0000329F A0[4F94]                	mov	al,[psep_char]	;AN000;  KANJI 3/3/KK
 25030 000032A2 EB0C                    	jmp	short path_store
 25031                                  				;AN000;  3/3/KK
 25032                                  _notkanj1:
 25033                                  	; 26/04/2023
 25034 000032A4 E2E7                    	loop	kloop
 25035 000032A6 1F                      	pop	ds		; return to our segment
 25036 000032A7 4F                      	dec	di		; overwrite terminator
 25037 000032A8 A0[4F94]                	mov	al,[psep_char]	; with a pathname separator
 25038 000032AB 3A45FF                  	cmp	al,[di-1]
 25039 000032AE 7401                    	je	short path_success
 25040                                  path_store:
 25041 000032B0 AA                      	stosb
 25042                                  path_success:
 25043 000032B1 BE[5194]                	mov	si,search_best_buf
 25044 000032B4 31C9                    	xor	cx,cx
 25045                                  path_succ_loop:
 25046 000032B6 AC                      	lodsb			; append winning filename to path
 25047 000032B7 AA                      	stosb			; (including terminating null)	
 25048 000032B8 08C0                    	or	al,al
 25049 000032BA 75FA                    	jnz	short path_succ_loop
 25050 000032BC 89E8                    	mov	ax,bp		; retrieve filetype code
 25051                                  path_exit:
 25052 000032BE 9D                      	popf
 25053 000032BF 5D                      	pop	bp
 25054 000032C0 5F                      	pop	di
 25055 000032C1 5E                      	pop	si		; chill out...
 25056 000032C2 5A                      	pop	dx
 25057 000032C3 59                      	pop	cx
 25058 000032C4 5B                      	pop	bx
 25059 000032C5 C3                      	retn
 25060                                  
 25061                                  ; =============== S U B	R O U T	I N E =======================================
 25062                                  
 25063                                  ; STORE_PCHAR determines the pathname-element separator and squirrels
 25064                                  ; it away. In other words, must we say '/bin/ls' or '\bin\ls'?
 25065                                  ;
 25066                                  ; ENTRY:
 25067                                  ; EXIT:
 25068                                  ; NOTE(S):
 25069                                  ;   *	Uses <psep_char>, defined in <path_search>.
 25070                                  
 25071                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25072                                  STORE_PCHAR:
 25073 000032C6 50                      	push	ax
 25074 000032C7 B02F                    	mov	al,'/'		; is the pathname-element separator
 25075 000032C9 E8A2F3                  	call	pathchrcmp	; a regular slash?
 25076 000032CC 7402                    	jz	short STORE_SLASH
 25077                                  				; if yes, remember slash
 25078 000032CE B05C                    	mov	al,'\'
 25079                                  	; 18/03/2023
 25080                                  	;mov	[psep_char],al	; otherwise, remember back-slash
 25081                                  	;pop	ax
 25082                                  	;retn
 25083                                  STORE_SLASH:
 25084 000032D0 A2[4F94]                	mov	[psep_char],al
 25085 000032D3 58                      	pop	ax
 25086 000032D4 C3                      	retn
 25087                                  
 25088                                  ; =============== S U B	R O U T	I N E =======================================
 25089                                  
 25090                                  ; PATH_CRUNCH takes a prefix from a prefix string, and a suffix from
 25091                                  ; EXECPATH, and smooshes them into tpbuf. The caller may supply an
 25092                                  ; additional separator to use for breaking up the path-string. Null is the
 25093                                  ; default. Once the user-string has been formed, search is invoked to see
 25094                                  ; what's out there.
 25095                                  ;
 25096                                  ; ENTRY:
 25097                                  ;   BH			--	additional terminator character
 25098                                  ;   SI			--	pointer into pathstring to be dissected
 25099                                  ;   DX			--	pointer to stripped filename
 25100                                  ; EXIT:
 25101                                  ;   AX			--	non-zero (file type), zero (nothing found)
 25102                                  ;   SI			--	moves along pathstring from call to call
 25103                                  ;   [search_best_buf]	--	name of best file (AX non-zero)
 25104                                  ;   [tpbuf]		--	clobbered
 25105                                  ; NOTE(S):
 25106                                  ;   *	Implicit in this code is the ability to specify when to search
 25107                                  ;	the current directory (if at all) through the PATH defined by
 25108                                  ;	the user, a la UNIX (e.g., PATH=;c:\bin;c:\etc searches the
 25109                                  ;	current directory before the bin and etc directories of drive c).
 25110                                  
 25111                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25112                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3454h
 25113                                  	
 25114                                  path_crunch:
 25115 000032D5 53                      	push	bx
 25116 000032D6 51                      	push	cx
 25117 000032D7 52                      	push	dx
 25118 000032D8 57                      	push	di
 25119 000032D9 56                      	push	si
 25120                                  	;pushf	; ** ; 18/03/2023
 25121 000032DA E8E9FF                  	call	STORE_PCHAR	; figure out pathname separator
 25122 000032DD BF[9A93]                	mov	di,TPBUF	; destination of concatenated string
 25123 000032E0 8B36[4D94]              	mov	si,[pathinfo+4]	; "new" pointer to start with
 25124 000032E4 8936[4B94]              	mov	[pathinfo+2],si	; becomes "old" pointer
 25125 000032E8 1E                      	push	ds		; save old segment pointer
 25126 000032E9 FF36[4994]              	push	word [pathinfo+0]
 25127                                  				; replace with pointer to userpath's
 25128 000032ED 1F                      	pop	ds		; segment
 25129                                  	; 26/04/2023
 25130 000032EE 30C9                    	xor	cl,cl		;AN000; clear flag for later use 3/3/KK	
 25131                                  path_cr_copy:
 25132 000032F0 AC                      	lodsb			; get a pathname byte
 25133 000032F1 08C0                    	or	al,al		; check for terminator(s)
 25134 000032F3 7414                    	jz	short path_seg	; null terminates segment & pathstring
 25135 000032F5 38F8                    	cmp	al,bh
 25136 000032F7 7410                    	je	short path_seg	; BH terminates a pathstring segment
 25137                                  	;
 25138                                  	; 18/03/2023
 25139                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 25140 000032F9 E8C5F0                  	call	testkanj	;AN000; 3/3/KK
 25141 000032FC 7406                    	jz	short _notkanj2	;AN000; 3/3/KK
 25142 000032FE AA                      	stosb			;AN000; 3/3/KK
 25143 000032FF A4                      	movsb			;AN000; 3/3/KK
 25144 00003300 B101                    	mov	cl,1 ; *	;AN000; CL=1 means latest stored char is DBCS 3/3/KK	
 25145 00003302 EBEC                    	jmp	short path_cr_copy
 25146                                  _notkanj2:
 25147 00003304 30C9                    	xor	cl,cl ; *	;AN000; CL=0 means latest stored char is SBCS 3/3/KK
 25148                                  	;
 25149 00003306 AA                      	stosb
 25150 00003307 EBE7                    	jmp	short path_cr_copy
 25151                                  
 25152                                  path_seg:
 25153 00003309 1F                      	pop	ds		; restore old data segment
 25154 0000330A 8936[4D94]              	mov	[pathinfo+4],si	; save "new" pointer for next time
 25155 0000330E 88C3                    	mov	bl,al		; remember if we saw null or not...
 25156                                  				;;; REMOVE NEXT 3 LINES FOR CURDIR SPEC
 25157 00003310 31C0                    	xor	ax,ax		; in case nothing in pathstr...
 25158 00003312 81FF[9A93]              	cmp	di,TPBUF	; was there really anything in pathstr?		
 25159 00003316 7421                    	je	short path_cr_leave
 25160                                  				; if nothing was copied, pathstr empty
 25161                                  path_cr_look:
 25162 00003318 A0[4F94]                	mov	al,[psep_char]	; form complete pathname
 25163                                  	;
 25164                                  	; 18/03/2023
 25165                                  	; MSDOS 6.0
 25166 0000331B 08C9                    	or	cl,cl ; *	;AN000; 3/3/KK
 25167 0000331D 7505                    	jnz	short path_cr_store
 25168                                  				;AN000; this is a trailing byte of ECS code 3/3/KK
 25169                                  	;
 25170 0000331F 3A45FF                  	cmp	al,[di-1]	; add pathname separator for suffix
 25171 00003322 7401                    	je	short path_cr_l1
 25172                                  path_cr_store:
 25173 00003324 AA                      	stosb
 25174                                  path_cr_l1:
 25175 00003325 89D6                    	mov	si,dx
 25176                                  path_cr_l2:
 25177 00003327 AC                      	lodsb			; tack the stripped filename onto
 25178 00003328 AA                      	stosb			; the end of the path, up to and
 25179 00003329 08C0                    	or	al,al		; including the terminating null
 25180 0000332B 75FA                    	jnz	short path_cr_l2
 25181 0000332D BA[9A93]                	mov	dx,TPBUF	; and look for an appropriate file...	
 25182 00003330 C706[9E94][7380]        	mov	word [search_error],BADPMES_PTR
 25183                                  	;invoke search
 25184 00003336 E80900                  	call	PSEARCH		; results are in AX & search_best_buf
 25185                                  
 25186                                  	; 18/03/2023
 25187                                  ;path_cr_leave:
 25188                                  	;or	bl,bl		; did we finish off the pathstring?
 25189                                  	;jz	short path_cr_empty
 25190                                  	;			; null in BL means all gone...
 25191                                  	;popf	; **		; otherwise, plenty left
 25192                                  	;clc
 25193                                  	;jmp	short path_cr_exit
 25194                                  ;path_cr_empty:
 25195                                  	;popf	; **
 25196                                  	;stc
 25197                                  ;path_cr_exit:
 25198                                  
 25199                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25200                                  path_cr_leave:
 25201                                  	;popf ; ** ; 18/03/2023
 25202 00003339 80FB01                  	cmp	bl,1	; if bl = 0 -> cf = 1 (path_cr_empty:)
 25203                                  	
 25204                                  path_cr_exit:
 25205 0000333C 5E                      	pop	si
 25206 0000333D 5F                      	pop	di
 25207 0000333E 5A                      	pop	dx
 25208 0000333F 59                      	pop	cx
 25209 00003340 5B                      	pop	bx
 25210 00003341 C3                      	retn
 25211                                  
 25212                                  ;============================================================================
 25213                                  ; PATH2.ASM, MSDOS 6.0, 1991
 25214                                  ;============================================================================
 25215                                  ; 02/10/2018 - Retro DOS v3.0
 25216                                  
 25217                                  ;----------------------------------------------------------------------------
 25218                                  ;   SEARCH, when given a pathname, attempts to find a file with
 25219                                  ; one of the following extensions: .com, .exe, .bat (highest to
 25220                                  ; lowest priority). Where conflicts arise, the extension with
 25221                                  ; the highest priority is favored.
 25222                                  ; ENTRY:
 25223                                  ;   DX		--	pointer to null-terminated pathname
 25224                                  ;   fbuf	--	dma buffer for findfirst/next
 25225                                  ; EXIT:
 25226                                  ;   AX		--	8)  file found with .com extension
 25227                                  ;			4)  file found with .exe extension
 25228                                  ;			2)  file found with .bat extension
 25229                                  ;			0)  no such file to be found
 25230                                  ;   (if AX is non-zero:)
 25231                                  ;   [search_best]	identical to AX
 25232                                  ;   [search_best_buf]	null-terminated filename
 25233                                  ; NOTES:
 25234                                  ;   1) Requires caller to have allocated a dma buffer and executed a setdma.
 25235                                  ;---------------
 25236                                  ; CONSTANTS:
 25237                                  ;---------------
 25238                                  SEARCH_FILE_NOT_FOUND	EQU	0
 25239                                  SEARCH_COM		EQU	8
 25240                                  SEARCH_EXE		EQU	4
 25241                                  SEARCH_BAT		EQU	2
 25242                                  FNAME_LEN		EQU	8
 25243                                  FNAME_MAX_LEN		EQU	13
 25244                                  DOT			EQU	'.'
 25245                                  WILDCHAR		EQU	'?'
 25246                                  
 25247                                  
 25248                                  ; =============== S U B	R O U T	I N E =======================================
 25249                                  
 25250                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 26D6h
 25251                                  
 25252                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25253                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:34C9h
 25254                                  	
 25255                                  PSEARCH:
 25256 00003342 51                      	push	cx
 25257 00003343 52                      	push	dx
 25258 00003344 57                      	push	di
 25259 00003345 56                      	push	si
 25260                                  	;pushf	; ** ; 18/03/2023
 25261 00003346 52                      	push	dx		; check drivespec (save pname ptr)
 25262 00003347 89D7                    	mov	di,dx		; working copy of pathname
 25263 00003349 BE[5E94]                	mov	si,search_curdir_buf
 25264 0000334C 31D2                    	xor	dx,dx		; zero means current drive
 25265 0000334E 807D013A                	cmp	byte [di+1],':'	; is there a drive spec?
 25266 00003352 7508                    	jne	short SEARCH_DIR_CHECK
 25267 00003354 8A15                    	mov	dl,[di]		; get the drive byte
 25268 00003356 80E2DF                  	and	dl,0DFh ; ~20h	; uppercase the sucker
 25269 00003359 80EA40                  	sub	dl,'@' ; 40h	; and convert to drive number
 25270                                  SEARCH_DIR_CHECK:
 25271 0000335C B80047                  	mov	ax,Current_Dir*256 ; 4700h
 25272 0000335F CD21                    	int	21h	; DOS -	2+ - GET CURRENT DIRECTORY
 25273                                  			; DL = drive (0=default,1=A,etc.)
 25274                                  			; DS:SI	points to 64-byte buffer area
 25275 00003361 5A                      	pop	dx		; directory? If we can't we'll		
 25276 00003362 724C                    	jc	short SEARCH_INVALID_DRIVE
 25277                                  				; assume it's a bad drive...
 25278 00003364 B91300                  	mov	cx,search_attr	; 13h
 25279                                  				; filetypes to search for
 25280 00003367 B8004E                  	mov	ax,Find_First*256 ; 4E00h ; request first match, if any
 25281 0000336A CD21                    	int	21h	; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
 25282                                  			; CX = search attributes
 25283                                  			; DS:DX	-> ASCIZ filespec
 25284                                  			; (drive,path, and wildcards allowed)
 25285 0000336C 7249                    	jc	short SEARCH_NO_FILE
 25286 0000336E C606[5094]00            	mov	byte [search_best],SEARCH_FILE_NOT_FOUND ; 0
 25287 00003373 C606[5194]00            	mov	byte [search_best_buf],ANULL
 25288                                  				; 0 ; nothing's been found, yet
 25289                                  SEARCH_LOOP:
 25290 00003378 E84300                  	call	SEARCH_FTYPE	; determine if .com, &c...
 25291 0000337B 3A06[5094]              	cmp	al,[search_best]
 25292                                  				; better than what we've found so far?
 25293 0000337F 7E13                    	jle	short SEARCH_NEXT
 25294                                  				; no, look for another	
 25295 00003381 A2[5094]                	mov	[search_best],al
 25296                                  				; found something... save its code	
 25297                                  	;mov	si,offset TRANGROUP:fbuf.find_buf_pname
 25298                                  	;mov	si,FBUF_PNAME
 25299 00003384 BE[3C94]                	mov	si,FBUF+FIND_BUF.PNAME ; FBUF+30
 25300 00003387 BF[5194]                	mov	di,search_best_buf
 25301 0000338A B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25302 0000338D FC                      	cld
 25303 0000338E F3A4                    	rep	movsb		; save complete pathname representation
 25304 00003390 3C08                    	cmp	al,SEARCH_COM	; 8
 25305                                  				; have we found the best of all?	
 25306 00003392 740A                    	je	short SEARCH_DONE
 25307                                  SEARCH_NEXT:			; keep on looking
 25308 00003394 B91300                  	mov	cx,search_attr ; 13h
 25309 00003397 B8004F                  	mov	ax,Find_Next*256 ; 4F00h ; next match
 25310 0000339A CD21                    	int	21h	; DOS -	2+ - FIND NEXT ASCIZ (FINDNEXT)
 25311                                  			; [DTA]	= data block from
 25312                                  			; last AH = 4Eh/4Fh call
 25313 0000339C 73DA                    	jnc	short SEARCH_LOOP
 25314                                  SEARCH_DONE:			; it's all over with...
 25315 0000339E A0[5094]                	mov	al,[search_best]
 25316                                  				; pick best to return with
 25317                                  	; 18/03/2023
 25318                                  	; MSDOS 6.0
 25319 000033A1 803E[0A8E]01            	cmp	byte [ext_entered],1
 25320                                  				;AN005; Did user request a specific ext?
 25321 000033A6 7411                    	je	short SEARCH_EXIT
 25322                                  				;AN005; no - exit
 25323 000033A8 A0[0A8E]                	mov	al,[ext_entered]
 25324                                  				;AN005; yes - get the real file type back
 25325 000033AB A2[5094]                	mov	[search_best],al
 25326                                  				;AN005; save the real file type
 25327                                  	;
 25328 000033AE EB09                    	jmp	short SEARCH_EXIT
 25329                                  
 25330                                  SEARCH_INVALID_DRIVE:		; Tell the user path/drive
 25331 000033B0 8B16[9E94]              	mov	dx,[search_error]
 25332                                  				; appropriate error message
 25333 000033B4 E8381A                  	call	std_printf	; and pretend no file found
 25334                                  
 25335                                  SEARCH_NO_FILE:			; couldn't find a match
 25336                                  	;mov	ax,SEARCH_FILE_NOT_FOUND ; 0
 25337                                  	; 18/03/2023
 25338 000033B7 31C0                    	xor	ax,ax
 25339                                  SEARCH_EXIT:
 25340                                  	;popf	; ** ; 18/03/2023
 25341 000033B9 5E                      	pop	si
 25342 000033BA 5F                      	pop	di
 25343 000033BB 5A                      	pop	dx
 25344 000033BC 59                      	pop	cx
 25345 000033BD C3                      	retn
 25346                                  
 25347                                  ; =============== S U B	R O U T	I N E =======================================
 25348                                  
 25349                                  ; SEARCH_FTYPE determines the type of a file by examining its extension.
 25350                                  ;
 25351                                  ; ENTRY:
 25352                                  ;   fbuf    --	dma buffer containing filename
 25353                                  ; EXIT:
 25354                                  ;   AX	    --	file code, as given in search header
 25355                                  ; NOTE(S):
 25356                                  ;   *	Implicit assumption that NULL == search_file_not_found
 25357                                  
 25358                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25359                                  
 25360                                  SEARCH_FTYPE:
 25361 000033BE 57                      	push	di
 25362 000033BF 56                      	push	si
 25363                                  	;mov	ax,ANULL ; 0	; find the end of the filename
 25364                                  	; 18/02/2023
 25365 000033C0 31C0                    	xor	ax,ax ; ax = 0		
 25366                                  	;mov	di,offset TRANGROUP:fbuf.find_buf_pname
 25367                                  	;mov	di,FBUF_PNAME
 25368 000033C2 BF[3C94]                	mov	di,FBUF+FIND_BUF.PNAME ; FBUF+1Eh
 25369 000033C5 B90D00                  	mov	cx,FNAME_MAX_LEN ; 13
 25370 000033C8 FC                      	cld
 25371 000033C9 F2AE                    	repnz	scasb		; search for the terminating null
 25372 000033CB 7535                    	jnz	short FTYPE_EXIT
 25373                                  				; weird... no null byte at end
 25374 000033CD 83EF05                  	sub	di,5		; . + E + X + T + NULL
 25375                                  
 25376                                  	; Compare .COM
 25377                                  
 25378 000033D0 BE[4584]                	mov	si,comext ; ".COM"
 25379 000033D3 89F8                    	mov	ax,di
 25380 000033D5 A7                      	cmpsw
 25381 000033D6 7508                    	jnz	short FTYPE_EXE
 25382 000033D8 A7                      	cmpsw
 25383 000033D9 7505                    	jnz	short FTYPE_EXE
 25384                                  	;mov	ax,8
 25385 000033DB B80800                  	mov	ax,SEARCH_COM	; success!
 25386 000033DE EB22                    	jmp	short FTYPE_EXIT
 25387                                  
 25388                                  	; Compare .EXE
 25389                                  FTYPE_EXE:			; still looking... now for '.exe'
 25390 000033E0 89C7                    	mov	di,ax
 25391 000033E2 BE[4984]                	mov	si,exeext ; ".EXE"
 25392 000033E5 A7                      	cmpsw
 25393 000033E6 7508                    	jnz	short FTYPE_BAT
 25394 000033E8 A7                      	cmpsw
 25395 000033E9 7505                    	jnz	short FTYPE_BAT
 25396                                  	;mov	ax,4
 25397 000033EB B80400                  	mov	ax,SEARCH_EXE	; success!
 25398 000033EE EB12                    	jmp	short FTYPE_EXIT
 25399                                  
 25400                                  	; Compare .BAT
 25401                                  FTYPE_BAT:			; still looking... now for '.bat'
 25402 000033F0 89C7                    	mov	di,ax
 25403 000033F2 BE[4D84]                	mov	si,batext ; ".BAT"
 25404 000033F5 A7                      	cmpsw
 25405 000033F6 7508                    	jnz	short FTYPE_FAIL
 25406 000033F8 A7                      	cmpsw
 25407 000033F9 7505                    	jnz	short FTYPE_FAIL
 25408                                  	;mov	ax,2
 25409 000033FB B80200                  	mov	ax,SEARCH_BAT	; success!
 25410 000033FE EB02                    	jmp	short FTYPE_EXIT
 25411                                  
 25412                                  FTYPE_FAIL:			; file doesn't match what we need
 25413                                  	;mov	ax,ANULL ; 0
 25414                                  	; 18/03/2023
 25415 00003400 29C0                    	sub	ax,ax  ; ax = 0
 25416                                  FTYPE_EXIT:
 25417                                  	; 18/03/2023
 25418                                  	; MSDOS 6.0
 25419 00003402 803E[0A8E]01            	cmp	byte [ext_entered],1
 25420                                  				;AN005; was an extension entered?
 25421 00003407 740A                    	jz	short FTYPE_DONE
 25422                                  				;AN005; no - exit
 25423                                  	;cmp	ax,ANULL	;AN005; was any match found
 25424 00003409 21C0                    	and	ax,ax  ; ax = 0 ?
 25425 0000340B 7406                    	jz	short FTYPE_DONE
 25426                                  				;AN005; no - exit
 25427 0000340D A2[0A8E]                	mov	[ext_entered],al
 25428                                  				;AN005; save the match type found
 25429 00003410 B80800                  	mov	ax,SEARCH_COM	;AN005; send back best was found to stop search
 25430                                  FTYPE_DONE:
 25431 00003413 5E                      	pop	si
 25432 00003414 5F                      	pop	di
 25433 00003415 C3                      	retn
 25434                                  
 25435                                  ; =============== S U B	R O U T	I N E =======================================
 25436                                  
 25437                                  ; STRIP copies the source string (argv[0]) into the destination buffer,
 25438                                  ; replacing any extension with wildcards.
 25439                                  ;
 25440                                  ; ENTRY:
 25441                                  ;	BX	--	maximum length of destination buffer
 25442                                  ;	DS:SI	--	address of destination buffer
 25443                                  ;	argv[0] --	command name to be stripped
 25444                                  ; EXIT:
 25445                                  ;	CF	--	set if failure, clear if successful
 25446                                  ; NOTE(S):
 25447                                  
 25448                                  	; 18/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25449                                  
 25450                                  STRIP:
 25451 00003416 50                      	push	ax
 25452 00003417 53                      	push	bx
 25453 00003418 51                      	push	cx
 25454 00003419 52                      	push	dx
 25455 0000341A 57                      	push	di
 25456 0000341B 56                      	push	si
 25457                                  	;pushf	; ** ; 18/03/2023
 25458                                  		
 25459                                  	; 05/05/2023
 25460                                  	; MSDOS 6.0
 25461 0000341C C606[0A8E]01            	mov	byte [ext_entered],1
 25462                                  				;AN005; assume no extension on file name
 25463                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25464                                  	;mov	dx,[ARG_ARGV]
 25465                                  	;mov	dx,ds:arg.argv[0].argpointer
 25466                                  				; save pointer to beginning of argstring
 25467                                  	;mov	dx,[ARGV0_ARGPOINTER]
 25468 00003421 8B16[548E]              	mov	dx,[ARG+ARGV_ELE.argpointer]
 25469                                  	;mov	di,ds:arg.argv[0].argstartel
 25470                                  				; beginning of last pathname element
 25471                                  	;mov	di,[ARGV0_ARGSTARTEL] ; beginning of last pathname element
 25472 00003425 8B3E[578E]              	mov	di,[ARG+ARGV_ELE.argstartel]
 25473 00003429 803D00                  	cmp	byte [di],0	; *STARTEL == NULL means no command
 25474 0000342C 743D                    	je	short STRIP_ERROR
 25475 0000342E 89D1                    	mov	cx,dx		; compute where end of argstring lies
 25476                                  	;add	cx,ds:arg.argv[0].arglen
 25477                                  	;add	cx,[ARGV0_ARGLEN]
 25478 00003430 030E[598E]              	add	cx,[ARG+ARGV_ELE.arglen]
 25479 00003434 29F9                    	sub	cx,di		; and then find length of last element
 25480 00003436 41                      	inc	cx		; include null as well
 25481 00003437 B02E                    	mov	al,'.'
 25482                                  	;mov	al,DOT		; let's find the filetype extension
 25483 00003439 FC                      	cld
 25484 0000343A F2AE                    	repnz	scasb		; wind up pointing to either null or dot
 25485                                  
 25486                                  	; 18/03/2023
 25487                                  	; MSDOS 6.0
 25488 0000343C E307                    	jcxz	PROCESS_EXT	;AN005; if no extension found, just continue
 25489 0000343E B000                    	mov	al,0 ; 18/03/2023
 25490                                  	;mov	byte [ext_entered],0
 25491 00003440 A2[0A8E]                	mov	[ext_entered],al
 25492                                  				;AN005; we found an extension
 25493                                  	;;mov	al,ANULL	;AN005; continue scanning until the
 25494                                  	;mov	al,0
 25495 00003443 F2AE                    	repnz	scasb		;AN005; end of line is reached.
 25496                                  PROCESS_EXT:
 25497                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25498 00003445 89F9                    	mov	cx,di		; pointer to end of argstring yields
 25499 00003447 29D1                    	sub	cx,dx		; number of bytes to be copied
 25500 00003449 83EB04                  	sub	bx,4		; can argstring fit into dest. buffer?
 25501 0000344C 39D9                    	cmp	cx,bx
 25502 0000344E 7F1B                    	jg	short STRIP_ERROR
 25503                                  				; if not, we must have a bad pathname
 25504 00003450 89F7                    	mov	di,si		; destination buffer
 25505 00003452 89D6                    	mov	si,dx		; source is beginning of pathname
 25506 00003454 FC                      	cld
 25507 00003455 F3A4                    	rep	movsb		; SI=arg,DI=buffer,CX=argend-argbeg
 25508                                  
 25509                                  	; 18/03/2023
 25510                                  	; MSDOS 6.0
 25511 00003457 803E[0A8E]01            	cmp	byte [ext_entered],1
 25512                                  				;AN005; if an extension was entered
 25513 0000345C 750A                    	jne	short SKIP_WILDS
 25514                                  				;AN005;    don't set up wildcard ext.
 25515                                  
 25516                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25517 0000345E 4F                      	dec	di		; overwrite null or dot
 25518 0000345F AA                      	stosb			; with a dot
 25519 00003460 B03F                    	mov	al,'?'
 25520                                  	;mov	al,WILDCHAR	; now add wildcards
 25521 00003462 AA                      	stosb
 25522 00003463 AA                      	stosb
 25523 00003464 AA                      	stosb
 25524 00003465 B000                    	mov	al,0
 25525                                  	;mov	al,ANULL	; and a terminating null	
 25526 00003467 AA                      	stosb
 25527                                  SKIP_WILDS:
 25528                                  	;popf	; ** ; 18/03/2023
 25529 00003468 F8                      	clc
 25530 00003469 EB01                    	jmp	short STRIP_EXIT ; chill out...
 25531                                  
 25532                                  STRIP_ERROR:
 25533                                  	;popf	; ** ; 18/03/2023
 25534 0000346B F9                      	stc
 25535                                  STRIP_EXIT:
 25536 0000346C 5E                      	pop	si
 25537 0000346D 5F                      	pop	di
 25538 0000346E 5A                      	pop	dx
 25539 0000346F 59                      	pop	cx
 25540 00003470 5B                      	pop	bx
 25541 00003471 58                      	pop	ax
 25542 00003472 C3                      	retn
 25543                                  
 25544                                  ; =============== S U B	R O U T	I N E =======================================
 25545                                  
 25546                                  ; SAVE_ARGS attempts to preserve the existing argv[]/argvcnt/argbuffer
 25547                                  ;
 25548                                  ; structure in newly allocated memory. The argv[] structure is found at the
 25549                                  ; beginning of this area. The caller indicates how much extra space is
 25550                                  ; needed in the resulting structure; Save_Args returns a segment number and
 25551                                  ; an offset into that area, indicating where the caller may preserve its own
 25552                                  ; data. Note that <argvcnt> can be found at <offset-2>.
 25553                                  ; ENTRY:
 25554                                  ;   BX	    --	size (in bytes) of extra area to allocate
 25555                                  ; EXIT:
 25556                                  ;   AX	    --	segment of new area.
 25557                                  ;   CF	    --	set if unable to save a copy.
 25558                                  ; NOTE(S):
 25559                                  ;   1)	The allocated area will be AT LEAST the size requested -- since
 25560                                  ;	the underlying MSDOS call, <alloc> returns an integral number of
 25561                                  ;	paragraphs.
 25562                                  ;   2)	It is an error if MSDOS can't allocate AT LEAST as much memory
 25563                                  ;	as the caller of Save_Args requests.
 25564                                  ;   3)	AX is undefined if CF indicates an error.
 25565                                  
 25566                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25567                                  
 25568                                  SAVE_ARGS:
 25569 00003473 53                      	push	bx
 25570 00003474 51                      	push	cx
 25571 00003475 52                      	push	dx
 25572 00003476 57                      	push	di
 25573 00003477 56                      	push	si
 25574 00003478 55                      	push	bp
 25575                                  	; 01/05/2023
 25576                                  	; 26/04/2023
 25577                                  	;pushf ; **
 25578                                  	;add	bx,1363		; space for arg structure, round up
 25579 00003479 81C35304                	add	bx,ARG_UNIT.SIZE+15 ; 1348+15
 25580                                  			; 1092+15 ; 31/07/2024
 25581 0000347D B104                    	mov	cl,4		; to paragraph size and convert
 25582 0000347F D3EB                    	shr	bx,cl		; size in bytes to size in paragraphs
 25583 00003481 B80048                  	mov	ax,ALLOC*256 ; 4800h
 25584 00003484 CD21                    	int	21h	; DOS -	2+ - ALLOCATE MEMORY
 25585                                  			; BX = number of 16-byte paragraphs desired
 25586 00003486 7242                    	jc	short SAVE_ERROR ; ***
 25587 00003488 89C5                    	mov	bp,ax		; save segment id
 25588 0000348A 06                      	push	es		; save TRANGROUP address
 25589 0000348B 8EC0                    	mov	es,ax		; switch to new memory segment
 25590                                  	; assume es:nothing
 25591                                  	;mov	cx,1348		; get back structure size
 25592 0000348D B94404                  	mov	cx,ARG_UNIT.SIZE ; 1092 ; 31/07/2024
 25593 00003490 31FF                    	xor	di,di		; destination is new memory area
 25594                                  	;mov	si,ARG_ARGV
 25595 00003492 BE[548E]                	mov	si,ARG		; source is arg structure
 25596 00003495 F3A4                    	rep	movsb		; move that sucker!
 25597                                  	;mov	cx,arg.argvcnt 	; adjust argv pointers
 25598                                  	;mov	cx,[ARG_ARGVCNT]
 25599 00003497 8B0E[1491]              	mov	cx,[ARG+ARG_UNIT.argvcnt]
 25600 0000349B 31C0                    	xor	ax,ax		; base address for argv_calc
 25601                                  
 25602                                  ;	Bugbug:	What did they mean by this?
 25603                                  ;	Note that the replacement line produces exactly the same code.
 25604                                  ;;	mov	SI, OFFSET TRANGROUP:arg.argbuf - OFFSET arg_unit.argbuf
 25605                                  ;	mov	SI, OFFSET TRANGROUP:arg
 25606                                  
 25607                                  	;mov	si,ARG_ARGV
 25608 0000349D BE[548E]                	mov	si,ARG	
 25609                                  SAVE_PTR_LOOP:
 25610 000034A0 49                      	dec	cx		; exhausted all args?
 25611 000034A1 7C24                    	jl	short SAVE_DONE
 25612 000034A3 89CB                    	mov	bx,cx		; get arg index and
 25613 000034A5 E8AAFC                  	call	argv_calc	; convert to a pointer
 25614                                  	;mov	dx,ds:arg.argv[bx].argpointer
 25615                                  	;mov	dx,[ARG_ARGV+bx]
 25616 000034A8 8B97[548E]              	mov	dx,[ARG+ARGV_ELE.argpointer+bx]
 25617 000034AC 29F2                    	sub	dx,si		; adjust argpointer
 25618                                  	;mov	es:argv[BX].argpointer,dx
 25619                                  	;mov	[es:bx+ARGV_ELE.argpointer],dx ; mov [es:bx+0],dx
 25620 000034AE 268917                  	mov	[es:bx],dx
 25621                                  	;mov	dx,ds:arg.argv[bx].argstartel
 25622                                  	;mov	dx,[ARGV0_ARGSTARTEL+bx]
 25623 000034B1 8B97[578E]              	mov	dx,[ARG+ARGV_ELE.argstartel+bx]
 25624 000034B5 29F2                    	sub	dx,si		; and adjust argstartel
 25625                                  	;mov	es:argv[bx].argstartel,dx
 25626                                  	;mov	[es:bx+3],dx
 25627 000034B7 26895703                	mov	[es:bx+ARGV_ELE.argstartel],dx
 25628                                  	;mov	dx,ds:arg.argv[bx].arg_ocomptr
 25629                                  	;mov	dx,[ARGV0_OCOMPTR+bx]
 25630 000034BB 8B97[5D8E]              	mov	dx,[ARG+ARGV_ELE.arg_ocomptr+bx]
 25631 000034BF 29F2                    	sub	dx,si		; and adjust arg_ocomptr
 25632                                  	;mov	es:argv[bx].arg_ocomptr,dx
 25633                                  	;mov	[es:bx+9],dx
 25634 000034C1 26895709                	mov	[es:bx+ARGV_ELE.arg_ocomptr],dx
 25635 000034C5 EBD9                    	jmp	short SAVE_PTR_LOOP
 25636                                  SAVE_DONE:
 25637 000034C7 07                      	pop	es		; back we go to TRANGROUP
 25638                                  	; assume es:nothing
 25639 000034C8 89E8                    	mov	ax,bp		; restore segment id
 25640                                  	; 26/04/2023
 25641                                  	; cf = 0 ; *
 25642                                  	;jmp	short SAVE_OK
 25643                                  
 25644                                  	; 26/04/2023
 25645                                  ;SAVE_ERROR:
 25646                                  ;	; 26/04/2023
 25647                                  ;	;popf ; **
 25648                                  ;	stc
 25649                                  ;	jmp	short SAVE_EXIT
 25650                                  
 25651                                  SAVE_OK:
 25652                                  	; 26/04/2023
 25653                                  	;popf ; **
 25654                                  	; 26/04/2023
 25655                                  	; cf = 0 ; *
 25656                                  	;clc
 25657                                  SAVE_EXIT:
 25658                                  SAVE_ERROR:	; 26/04/2023 (cf=1) ; ***
 25659 000034CA 5D                      	pop	bp
 25660 000034CB 5E                      	pop	si
 25661 000034CC 5F                      	pop	di
 25662 000034CD 5A                      	pop	dx
 25663 000034CE 59                      	pop	cx
 25664 000034CF 5B                      	pop	bx
 25665                                  answ_no:	; 26/04/2023
 25666 000034D0 C3                      	retn
 25667                                  
 25668                                  ;============================================================================
 25669                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (1)
 25670                                  ;============================================================================
 25671                                  ; 02/10/2018 - Retro DOS v3.0
 25672                                  
 25673                                  ; Title	COMMAND Language midifiable Code Transient
 25674                                  
 25675                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2843h
 25676                                  
 25677                                  ; =============== S U B	R O U T	I N E =======================================
 25678                                  
 25679                                  ; ****************************************************************
 25680                                  ; *
 25681                                  ; * ROUTINE:	 NOTEST2 - execution of DEL/ERASE command
 25682                                  ; *
 25683                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 25684                                  ; *		 user for Y/N if necessary. If an error occurs,
 25685                                  ; *		 set up an error message and go to CERROR.
 25686                                  ; *
 25687                                  ; * INPUT:	 FCB at 5ch set up with filename(s) entered
 25688                                  ; *		 Current directory set to entered directory
 25689                                  ; *
 25690                                  ; * OUTPUT:	 none
 25691                                  ; *
 25692                                  ; ****************************************************************
 25693                                  ;
 25694                                  ; ARE YOU SURE prompt when deleting *.*
 25695                                  
 25696                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25697                                  
 25698                                  notest2:
 25699 000034D1 B90B00                  	mov	cx,11
 25700 000034D4 BE5D00                  	mov	si,FCB+1 ; 5Dh
 25701                                  ambspec:
 25702 000034D7 AC                      	lodsb
 25703 000034D8 3C3F                    	cmp	al,'?'
 25704 000034DA 7502                    	jne	short allfil
 25705 000034DC E2F9                    	loop	ambspec
 25706                                  allfil:
 25707                                  	; 19/03/2023
 25708                                  	;cmp	cx,0
 25709 000034DE 09C9                    	or	cx,cx
 25710 000034E0 752E                    	jnz	short noprmpt
 25711                                  askagn:	
 25712 000034E2 BA[FA7F]                	mov	dx,SureMes_Ptr	; "Are you sure (Y/N)?"
 25713 000034E5 E80719                  	call	std_printf
 25714 000034E8 BE8000                  	mov	si,80h
 25715 000034EB 89F2                    	mov	dx,si
 25716 000034ED C7047800                	mov	word [si],120	; zero length
 25717                                  	;mov	ax,0C0Ah
 25718 000034F1 B80A0C                  	mov	ax,(STD_CON_INPUT_FLUSH<<8)|Std_Con_String_Input
 25719 000034F4 CD21                    	int	21h	; DOS -	CLEAR KEYBOARD BUFFER
 25720                                  			; AL must be 01h,06h,07h,08h or 0Ah.
 25721 000034F6 AD                      	lodsw
 25722 000034F7 08E4                    	or	ah,ah
 25723 000034F9 74E7                    	jz	short askagn
 25724 000034FB E8E2F0                  	call	scanoff
 25725                                  	; 19/03/2023
 25726                                  	; MSDOS 6.0
 25727 000034FE E80C02                  	call	char_in_xlat	; Convert to upper case
 25728                                  	;retc			; return if function not supported
 25729                                  	; 19/03/2023
 25730                                  	;jnc	short check_yn
 25731                                  ;answ_no:
 25732                                  	;retn
 25733 00003501 72CD                    	jc	short answ_no
 25734                                  
 25735                                  	; 19/03/2023
 25736                                  	; AL = 0 if it was (country depended) NO character
 25737                                  	; AL = 1 if it was (country depenced) YES character
 25738                                  
 25739                                  	; MSDOS 3.3
 25740                                  	;call	UPCONV
 25741                                  
 25742                                  	; 19/03/2023	
 25743                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25744                                  	;cmp	al,[CAPITAL_N]
 25745                                  	;jne	short CHECK_Y
 25746                                  	;retn
 25747                                  ;CHECK_Y:
 25748                                  	;cmp	al,[CAPITAL_Y]
 25749                                  	;pushf
 25750                                  	;call	CRLF2
 25751                                  	;popf
 25752                                  	;jne	short ASKAGN
 25753                                  
 25754                                  check_yn:
 25755                                  	; 19/03/2023
 25756                                  	;cmp	al,0	; NO character
 25757 00003503 08C0                    	or	al,al
 25758 00003505 74C9                    	jz	short answ_no
 25759                                  	;cmp	al,1	 ;YES character
 25760 00003507 FEC8                    	dec	al ; 1 -> 0 --> zf = 1
 25761 00003509 9C                      	pushf
 25762 0000350A E8C6F0                  	call	CRLF2
 25763 0000350D 9D                      	popf
 25764 0000350E 75D2                    	jnz	short askagn
 25765                                  noprmpt:
 25766 00003510 B413                    	mov	ah,FCB_Delete ; 13h
 25767 00003512 BA5C00                  	mov	dx,FCB ; 5Ch
 25768 00003515 CD21                    	int	21h	; DOS -	DELETE FILE via	FCB
 25769                                  			; DS:DX	-> FCB with filename field filled with
 25770                                  			; template for deletion ('?' wildcard allowed,but not '*')
 25771                                  			; Return: AL = 00h file	found,FFh file	not found
 25772 00003517 FEC0                    	inc	al
 25773 00003519 7403                    	jz	short eraerr
 25774                                  	; 26/04/2023
 25775                                  	;call	RestUDir
 25776                                  ;answ_no:
 25777                                  	;retn
 25778 0000351B E972EF                  	jmp	RestUDir ; 26/04/2023
 25779                                  
 25780                                  	; 19/03/2023
 25781                                  	; MSDOS 6.0
 25782                                  eraerr:
 25783                                  	;invoke	set_ext_error_msg
 25784                                  				;AN022; set up the extended error
 25785 0000351E E8C1E7                  	call	Set_Ext_Error_Msg
 25786 00003521 52                      	push	dx		;AN022; save message
 25787                                  	;invoke	RESTUDIR
 25788 00003522 E86BEF                  	call	RestUDir
 25789 00003525 5A                      	pop	dx		;AN022; restore message
 25790                                  	
 25791 00003526 833E[1B7F]12            	cmp	word [extend_buf_ptr],ERROR_NO_MORE_FILES ; 18
 25792                                  				;AN022; convert no more files to
 25793 0000352B 7506                    	jne	short cerrorj2	;AN022;  file not found
 25794 0000352D C706[1B7F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2  
 25795                                  				;AN000; get message number in control block
 25796                                  cerrorj2:
 25797 00003533 E91EF4                  	jmp	cerror
 25798                                  	
 25799                                  	; 19/03/2023
 25800                                  	; MSDOS 3.3
 25801                                  ;ERAERR:	
 25802                                  	;mov	ah,Set_DMA ; 1Ah
 25803                                  	;mov	dx,FCB ; 5Ch
 25804                                  	;int	21h		; DOS -	SET DISK TRANSFER AREA ADDRESS
 25805                                  	;			; DS:DX	-> disk	transfer buffer
 25806                                  	;mov	ah,Dir_Search_First ; 11h
 25807                                  	;int	21h		; DOS -	SEARCH FIRST USING FCB
 25808                                  	;			; DS:DX	-> FCB
 25809                                  	;push	ax
 25810                                  	;call	RESTUDIR
 25811                                  	;pop	ax
 25812                                  	;mov	dx,FNOTFOUNDPTR
 25813                                  	;inc	al
 25814                                  	;jz	short CERRORJ
 25815                                  	;mov	dx,ACCDENPTR
 25816                                  	;jmp	CERROR
 25817                                  
 25818                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 25819                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:36D4h
 25820                                  
 25821                                  ; ****************************************************************
 25822                                  ; *
 25823                                  ; * ROUTINE:	 SLASHP_ERASE - execution of DEL/ERASE /P
 25824                                  ; *
 25825                                  ; * FUNCTION:	 Delete files based on user parsed input. Prompt
 25826                                  ; *		 user for Y/N where necessary. If an error occurs
 25827                                  ; *		 set up and error message and transfer control
 25828                                  ; *		 to CERROR.
 25829                                  ; *
 25830                                  ; * INPUT:	 FCB at 5Ch set up with filename(s) entered
 25831                                  ; *		 Current directory set to entered directory
 25832                                  ; *
 25833                                  ; * OUTPUT:	 none
 25834                                  ; *
 25835                                  ; ****************************************************************
 25836                                  
 25837                                  	; 19/03/2023
 25838                                  slashp_erase:				;AN000; entry point
 25839                                  	;invoke	build_dir_string	;AN000; set up current directory string for output
 25840 00003536 E815E9                  	call	build_dir_string
 25841                                  
 25842 00003539 B41A                    	mov	ah,Set_DMA ; 1Ah	;AN000; issue set dta int 21h
 25843                                  	;mov	dx,offset trangroup:destdir
 25844 0000353B BA[8B8B]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 25845 0000353E CD21                    	int	21h			;AN000;
 25846                                  
 25847                                  	;mov	ah,11h
 25848 00003540 B411                    	mov	ah,Dir_Search_First	;AN000; do dir search first int 21h
 25849 00003542 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000; use FCB at 5Ch for target
 25850 00003545 CD21                    	int	21h			;AN000;
 25851 00003547 FEC0                    	inc	al			;AN000; did an error occur
 25852                                  	;jz	short eraerr		;AN022; go to error exit
 25853                                  	; 26/04/2023
 25854 00003549 7502                    	jnz	short delete_prompt_loop
 25855                                  
 25856                                  	; 26/04/2023
 25857                                  stop_del:
 25858 0000354B EBD1                    	jmp	short eraerr		;AN022; go to error exit - need long jmp
 25859                                  
 25860                                  delete_prompt_loop:			;AN000;
 25861                                  	;mov	si,offset trangroup:destdir+1
 25862 0000354D BE[8C8B]                	mov	si,DESTDIR+1		;AN000; set up FCB as source
 25863                                  	;mov	di,offset trangroup:dest
 25864 00003550 BF[5B8B]                	mov	di,DEST			;AN000; set up dest as target
 25865 00003553 A0[CA8A]                	mov	al,[DIRCHAR]		;AN000; store a "\" in the first char
 25866 00003556 AA                      	stosb				;AN000;   of DEST
 25867                                  	;invoke	FCB_TO_ASCZ		;AN000; convert filename from FCB to ASCIIZ string
 25868 00003557 E8A5F0                  	call	FCB_TO_ASCZ
 25869                                  
 25870                                  slashp_askagn:				;AN000;
 25871 0000355A E876F0                  	call	CRLF2			;AN000; print out carriage return, line feed
 25872                                  	;mov	dx,offset trangroup:bwdbuf
 25873 0000355D BA[CE8B]                	mov	dx,BWDBUF		;AN000; print out current directory string
 25874 00003560 89D3                    	mov	bx,dx			;AN000; get string pointer in bx
 25875 00003562 807F0300                	cmp	byte [bx+3],END_OF_LINE_OUT ; 0
 25876                                  					;AN000; see if only D:\,0
 25877 00003566 7504                    	jnz	short not_del_root	;AN000; no continue
 25878 00003568 C6470200                	mov	byte [bx+2],END_OF_LINE_OUT ; 0
 25879                                  					;AN000; yes, get rid of \ ;
 25880                                  not_del_root:				;AN000;
 25881 0000356C 8916[B58C]              	mov	[string_ptr_2],dx 	;AN000;
 25882                                  	;mov	dx,offset trangroup:string_buf_ptr
 25883 00003570 BA[E280]                	mov	dx,string_buf_ptr	;AN000;
 25884                                  	;invoke	std_printf		;AN000;
 25885 00003573 E87918                  	call	std_printf
 25886                                  	;mov	dx,offset trangroup:dest
 25887 00003576 BA[5B8B]                	mov	dx,DEST			;AN000; print out file name string
 25888 00003579 8916[B58C]              	mov	[string_ptr_2],dx 	;AN000;
 25889                                  	;mov	dx,offset trangroup:string_buf_ptr
 25890 0000357D BA[E280]                	mov	dx,string_buf_ptr	;AN000;
 25891                                  	;invoke	std_printf		;AN000;
 25892 00003580 E86C18                  	call	std_printf
 25893                                  	;mov	dx,offset trangroup:Del_Y_N_Ptr
 25894 00003583 BA[F77F]                	mov	dx,Del_Y_N_Ptr		;AN000; issue ", Delete (Y/N)?" message
 25895                                  	;invoke	std_printf		;AN000;
 25896 00003586 E86618                  	call	std_printf
 25897                                  
 25898                                  ;;M029	mov	si,80H			;AN000; set up buffer for input
 25899                                  ;;M029	mov	dx,si			;AN000;
 25900                                  ;;M029	mov	word ptr [si],combuflen ;AN000;
 25901                                  ;;M029	mov	ax,(std_con_input_flush shl 8) or std_con_string_input	;AN000;
 25902                                  ;;M029	int	21h			;AN000; get input from the user
 25903                                  ;;M029	lodsw				;AN000;
 25904                                  ;;M029	or	ah,ah			;AN000; was a character entered?
 25905                                  ;;M029	jz	short slashp_askagn	;AN000; no - ask again
 25906                                  ;;M029	invoke	scanoff 		;AN000; scan off leading delimiters
 25907                                  
 25908                                  ;	Get a single character input.
 25909                                  
 25910                                  	;;mov	ax,(STD_CON_INPUT_FLUSH shl 8) or STD_CON_INPUT	;M029
 25911                                  	;mov	ax,(STD_CON_INPUT_FLUSH<<8)|STD_CON_INPUT
 25912 00003589 B8010C                  	mov	ax,0C01h
 25913 0000358C CD21                    	int	21h			;M029
 25914                                  
 25915 0000358E E87C01                  	call	char_in_xlat		;AN000; yes - upper case it
 25916                                  	;retc				;AN000; return if function not supported
 25917                                  	; 19/03/2023
 25918 00003591 7301                    	jnc	short slashp_check_yn
 25919                                  slashp_ans_no:
 25920 00003593 C3                      	retn
 25921                                  
 25922                                  slashp_check_yn:
 25923                                  	; 19/03/2023
 25924                                  	; AL = 0 if it was (country depended) NO character
 25925                                  	; AL = 1 if it was (country depenced) YES character
 25926                                  
 25927                                  	;cmp	al,capital_n		;AN000; was it no?
 25928                                  	;cmp	al,0
 25929 00003594 20C0                    	and	al,al ; 0
 25930 00003596 7420                    	jz	short next_del_file	;AN000; yes - don't delete file
 25931                                  	;cmp	al,capital_y		;AN000; was it yes?
 25932                                  	;cmp	al,1
 25933 00003598 FEC8                    	dec	al  ; 1-> 0 --> zf = 1
 25934                                  	;jz	short delete_this_file	;AN000; yes - delete the file
 25935                                  	;jmp	short slashp_askagn	;AN000; it was neither - ask again
 25936                                  	; 19/03/2023
 25937 0000359A 75BE                    	jnz	short slashp_askagn
 25938                                  
 25939                                  delete_this_file:			;AN000;
 25940 0000359C B413                    	mov	ah,FCB_Delete ; 13h	;AN000; delete the file
 25941                                  	;mov	dx,offset trangroup:destdir
 25942 0000359E BA[8B8B]                	mov	dx,DESTDIR		;AN000; use Destdir for target
 25943 000035A1 CD21                    	int	21h			;AN000;
 25944 000035A3 FEC0                    	inc	al			;AN000; did an error occur?
 25945 000035A5 7511                    	jnz	short next_del_file	;AN000; no - get next file
 25946                                  ;
 25947                                  ;M041; Begin changes
 25948                                  ; We got an error deleting the file. If this is access denied, we can go on
 25949                                  ;to the next file after printing an error message.
 25950                                  ;
 25951                                  	;invoke	Get_ext_error_number	;see what error we got
 25952 000035A7 E848E7                  	call	get_ext_error_number
 25953 000035AA 83F805                  	cmp	ax,ERROR_ACCESS_DENIED ; 5
 25954                                  					;is it access denied?
 25955 000035AD 759C                    	jne	short stop_del		;no, some other error
 25956                                  	;invoke	CrLf2			;print a CR-LF
 25957 000035AF E821F0                  	call	CRLF2
 25958                                  	;invoke set_ext_error_msg	;error message
 25959 000035B2 E82DE7                  	call	Set_Ext_Error_Msg
 25960                                  	;invoke	std_eprintf		;"Access denied"
 25961 000035B5 E82F18                  	call	std_eprintf
 25962                                  	; 26/04/2023
 25963                                  	;jmp	short next_del_file	;try next file
 25964                                  	; 26/04/2023
 25965                                  ;stop_del:
 25966                                  ;;
 25967                                  ;;M041; End changes
 25968                                  ;;
 25969                                  ;	jmp	eraerr			;AN022; go to error exit - need long jmp
 25970                                  
 25971                                  next_del_file:				;AN000;
 25972                                  ;
 25973                                  ; M050 - begin
 25974                                  ; 	Norton Utilities 5.0 has a bug. DiskMon when invoked
 25975                                  ;       with /protect+ and /light+ makes it intercept all
 25976                                  ;       deletes. This hook does not save and restore the DTA correctly.
 25977                                  ;       They save the DWORD in a WORD by mistake! They save both the
 25978                                  ;       segment and the offset in the SAME variable (WORD)!!!
 25979                                  ;
 25980 000035B8 B41A                    	mov	ah,Set_DMA ; 1Ah
 25981                                  	;mov	dx,offset trangroup:destdir
 25982 000035BA BA[8B8B]                	mov	dx,DESTDIR
 25983 000035BD CD21                    	int	21h
 25984                                  ;
 25985                                  ; M050 - end
 25986                                  
 25987 000035BF B412                    	mov	ah,Dir_Search_Next ; 12h
 25988                                  					;AN000; search for another file
 25989 000035C1 BA5C00                  	mov	dx,FCB	; 5Ch		;AN000;
 25990 000035C4 CD21                    	int	21h			;AN000;
 25991 000035C6 FEC0                    	inc	al			;AN000; was a file found?
 25992                                  	;jz	short slash_p_exit	;AN000; no - exit
 25993                                  	;jmp	delete_prompt_loop	;AN000; yes - continue (need long jump)
 25994                                  	; 26/04/2023
 25995 000035C8 7583                    	jnz	short delete_prompt_loop
 25996                                  
 25997                                  slash_p_exit:
 25998                                  	;invoke	get_ext_error_number	;AN022; get the extended error number
 25999 000035CA E825E7                  	call	get_ext_error_number
 26000 000035CD 83F812                  	cmp	ax,ERROR_NO_MORE_FILES	;AN022; was error file not found?
 26001 000035D0 7403                    	jz	short good_erase_exit 	;AN022; yes - clean exit
 26002 000035D2 E960E4                  	jmp	extend_setup		;AN022; go issue error message
 26003                                  
 26004                                  good_erase_exit:
 26005                                  	;invoke	restudir		;AN000; we're finished - restore user's dir
 26006 000035D5 E8B8EE                  	call	RestUDir
 26007                                  	;call	CRLF2			;AN000; print out carriage return, line feed
 26008                                  	;retn				;AN000; exit
 26009                                  	; 19/03/2023
 26010 000035D8 E9F8EF                  	jmp	CRLF2
 26011                                  
 26012                                  ; =============== S U B	R O U T	I N E =======================================
 26013                                  
 26014                                  ; ECHO, BREAK, and VERIFY commands. Check for "ON" and "OFF"
 26015                                  
 26016                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26017                                  _ECHO:
 26018 000035DB E89900                  	call	ON_OFF
 26019 000035DE 7212                    	jb	short DOEMES
 26020 000035E0 8E1E[C58A]              	mov	ds,[RESSEG]
 26021 000035E4 7506                    	jnz	short ECH_OFF
 26022 000035E6 800E[8801]01            	or	byte [EchoFlag],1
 26023 000035EB C3                      	retn
 26024                                  
 26025                                  ECH_OFF:
 26026 000035EC 8026[8801]FE            	and	byte [EchoFlag],0FEh
 26027 000035F1 C3                      	retn
 26028                                  
 26029                                  	; 19/03/2023
 26030                                  	; MSDOS 6.0 (& MSDOS 5.0)
 26031                                  ;CERRORJ:
 26032                                  	;jmp	cerror
 26033                                  
 26034                                  ; There was no discrenable ON or OFF after the ECHO. If there is nothing but
 26035                                  ; delimiters on the command line, we issue the ECHO is ON/OFF message.
 26036                                  
 26037                                  DOEMES:
 26038                                  	; 19/03/2023
 26039                                  	; MSDOS 6.0
 26040                                  	;cmp	cl,0		;AC000; was anything on the line?
 26041 000035F2 20C9                    	and	cl,cl
 26042 000035F4 7409                    	jz	short PECHO	; just display current state.
 26043 000035F6 BA8200                  	mov	dx,82h		; Skip one char after "ECHO"
 26044 000035F9 E830F0                  	call	CRPRINT
 26045 000035FC E9D4EF                  	jmp	CRLF2
 26046                                  
 26047                                  	; 19/03/2023
 26048                                  	; MSDOS 3.3
 26049                                  	;call	MOVE_TO_FIRST_ARG
 26050                                  	;jz	short PECHO
 26051                                  	;mov	dx,82h
 26052                                  	;call	CRPRINT
 26053                                  	;jmp	CRLF2
 26054                                  
 26055                                  PECHO:
 26056                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26057 000035FF 8E1E[C58A]              	mov	ds,[RESSEG]
 26058 00003603 8A1E[8801]              	mov	bl,[EchoFlag]
 26059 00003607 0E                      	push	cs
 26060 00003608 1F                      	pop	ds
 26061 00003609 80E301                  	and	bl,1
 26062 0000360C BA[9E80]                	mov	dx,EchoMes_Ptr
 26063 0000360F EB24                    	jmp	short PYN
 26064                                  
 26065                                  ; ---------------------------------------------------------------------------
 26066                                  
 26067                                  	; 19/03/2023
 26068                                  	; MSDOS 3.3
 26069                                  CERRORJ:
 26070 00003611 E940F3                  	jmp	cerror
 26071                                  
 26072                                  ; =============== S U B	R O U T	I N E =======================================
 26073                                  
 26074                                  	; 19/03/2023
 26075                                  	; MSDOS 3.3
 26076                                  ;MOVE_TO_FIRST_ARG:
 26077                                  	;mov	si,81h
 26078                                  	;call	SCANOFF
 26079                                  	;cmp	al,0Dh
 26080                                  	;retn
 26081                                  
 26082                                  ; =============== S U B	R O U T	I N E =======================================
 26083                                  
 26084                                  CNTRLC:
 26085 00003614 E86000                  	call	ON_OFF
 26086 00003617 B80133                  	mov	ax,(Set_CTRL_C_Trapping<<8)|1 ; 3301h
 26087 0000361A 720C                    	jc	short PCNTRLC
 26088 0000361C 7505                    	jnz	short CNTRLC_OFF
 26089 0000361E B201                    	mov	dl,1
 26090 00003620 CD21                    	int	21h	; DOS -	EXTENDED CONTROL-BREAK CHECKING
 26091                                  			; AL = 00h get state / 01h set state / 02h set AND get
 26092                                  			; DL = 00h for OFF or 01h for ON
 26093 00003622 C3                      	retn
 26094                                  
 26095                                  ; ---------------------------------------------------------------------------
 26096                                  
 26097                                  CNTRLC_OFF:
 26098 00003623 30D2                    	xor	dl,dl
 26099 00003625 CD21                    	int	21h		; Turn off ^C check
 26100 00003627 C3                      	retn
 26101                                  
 26102                                  ; ---------------------------------------------------------------------------
 26103                                  
 26104                                  PCNTRLC:
 26105                                  	; 19/03/2023
 26106                                  	; MSDOS 6.0
 26107                                  	;cmp	cl,0		;AC000; rest of line blank?
 26108 00003628 08C9                    	or	cl,cl
 26109 0000362A 75E5                    	jnz	short CERRORJ 	; no, oops!
 26110                                  
 26111                                  	; 19/03/2023
 26112                                  	; MSDOS 3.3
 26113                                  	;call	MOVE_TO_FIRST_ARG
 26114                                  	;jnz	short CERRORJ
 26115                                  ;pccont:
 26116                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26117 0000362C 30C0                    	xor	al,al
 26118 0000362E CD21                    	int	21h		; get Ctrl-Break state (ah=33h)
 26119 00003630 88D3                    	mov	bl,dl
 26120 00003632 BA[8280]                	mov	dx,CtrlcMes_Ptr
 26121                                  
 26122                                  ; ---------------------------------------------------------------------------
 26123                                  
 26124                                  PYN:	; write "ON" or "OFF" state 
 26125                                  
 26126                                  	; 26/04/2023
 26127                                  	; 19/03/2023
 26128                                  	; MSDOS 3.3
 26129                                  	;call	STD_PRINTF
 26130                                  	;mov	dx,ONMES_PTR	;AC000; get ON pointer
 26131                                  	;or	bl,bl
 26132                                  	;jnz	short PRINTVAL
 26133                                  	;mov	dx,OFFMES_PTR	;AC000; get OFF pointer
 26134                                  	
 26135                                  	; 26/04/2023
 26136                                  	; 19/03/2023
 26137                                  	; MSDOS 6.0
 26138 00003635 BE[AF80]                	mov	si,ONMES_PTR
 26139 00003638 08DB                    	or	bl,bl
 26140 0000363A 7503                    	jnz	short PRINTVAL
 26141 0000363C BE[AC80]                	mov	si,OFFMES_PTR
 26142                                  PRINTVAL:
 26143                                  	; 19/03/2023
 26144                                  	; MSDOS 3.3
 26145                                  	;jmp	STD_PRINTF
 26146                                  
 26147                                  	; 19/03/2023
 26148                                  	; MSDOS 6.0
 26149 0000363F 52                      	push	dx		;AN000; save offset of message block
 26150 00003640 89D3                    	mov	bx,dx		;AN000; save offset value
 26151 00003642 AD                      	lodsw			;AN000; get message number of on or off
 26152 00003643 B6FF                    	mov	dh,util_msg_class ; -1 ; 0FFh
 26153                                  				;AN000; this is a utility message
 26154 00003645 E88C18                  	call	TSYSGETMSG	;AN000; get the address of the message
 26155                                  	;add	bx,5
 26156 00003648 83C305                  	add	bx,Ptr_off_pos	;AN000; point to offset of ON/OFF
 26157                                  	
 26158 0000364B 8937                    	mov	[bx],si		;AN000; put the offset in the message block
 26159 0000364D 5A                      	pop	dx		;AN000; get message back
 26160 0000364E E89E17                  	call	std_printf	;AC000; go print message
 26161 00003651 C7070000                	mov	word [bx],0	;AN000; zero out message pointer
 26162 00003655 C3                      	retn			;AN000; exit
 26163                                  
 26164                                  ; =============== S U B	R O U T	I N E =======================================
 26165                                  
 26166                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.CO
 26167                                  VERIFY:
 26168 00003656 E81E00                  	call	ON_OFF
 26169 00003659 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 26170 0000365C 720A                    	jc	short PVERIFY
 26171 0000365E 7503                    	jnz	short VER_OFF
 26172 00003660 CD21                    	int	21h	; DOS -	SET VERIFY FLAG
 26173                                  			; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 26174 00003662 C3                      	retn
 26175                                  
 26176                                  ; ---------------------------------------------------------------------------
 26177                                  
 26178                                  VER_OFF:
 26179 00003663 FEC8                    	dec	al
 26180 00003665 CD21                    	int	21h		; Turn off verify after write
 26181 00003667 C3                      	retn
 26182                                  
 26183                                  ; ---------------------------------------------------------------------------
 26184                                  
 26185                                  PVERIFY:
 26186                                  	; 19/03/2023
 26187                                  	; MSDOS 6.0
 26188                                  	;cmp	cl,0		;AC000; is rest of line blank?
 26189 00003668 20C9                    	and	cl,cl
 26190 0000366A 75A5                    	jnz	short CERRORJ 	; nope...
 26191                                  
 26192                                  	 ;19/03/2023
 26193                                  	; MSDOS 3.3
 26194                                  	;call	MOVE_TO_FIRST_ARG
 26195                                  	;jnz	short CERRORJ
 26196                                  
 26197 0000366C B454                    	mov	ah,Get_Verify_On_Write ; 54h
 26198 0000366E CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 26199                                  				; Return: AL = 00h if flag OFF
 26200                                  				; AL = 01h if flag ON
 26201 00003670 88C3                    	mov	bl,al
 26202 00003672 BA[9080]                	mov	dx,VeriMes_Ptr
 26203 00003675 EBBE                    	jmp	short PYN
 26204                                  
 26205                                  ; =============== S U B	R O U T	I N E =======================================
 26206                                  
 26207                                  ; ****************************************************************
 26208                                  ; *
 26209                                  ; * ROUTINE:	 ON_OFF
 26210                                  ; *
 26211                                  ; * FUNCTION:	 Parse the command line for an optional ON or
 26212                                  ; *		 OFF string for the BREAK, VERIFY, and ECHO
 26213                                  ; *		 routines.
 26214                                  ; *
 26215                                  ; * INPUT:	 command line at offset 81H
 26216                                  ; *		 PARSE_BREAK control block
 26217                                  ; *
 26218                                  ; * OUTPUT:	 If carry is clear
 26219                                  ; *		    If ON is found
 26220                                  ; *		       Zero flag set
 26221                                  ; *		    If OFF is found
 26222                                  ; *		       Zero flag clear
 26223                                  ; *		 If carry set
 26224                                  ; *		    If nothing on command line
 26225                                  ; *		       CL set to zero
 26226                                  ; *		    If error
 26227                                  ; *		       CL contains error value from parse
 26228                                  ; *
 26229                                  ; ****************************************************************
 26230                                  
 26231                                  	; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26232                                  ON_OFF:
 26233 00003677 BE8100                  	mov	si,81h
 26234                                  
 26235                                  	; 19/03/2023
 26236                                  	; MSDOS 3.3
 26237                                  	;call	SCANOFF		; scan off leading blanks & equal
 26238                                  	;cmp	al,0Dh		; are we at end of line?
 26239                                  	;je	short BAD_ONF	; yes, return error
 26240                                  	;lodsw
 26241                                  	;or	ax,2020h	; convert to lowercase
 26242                                  	;cmp	ax,6E6Fh ;'on'
 26243                                  	;je	short ON_CHECK
 26244                                  	;cmp	ax,666Fh ;'of'
 26245                                  	;jne	short BAD_ONF
 26246                                  	;lodsb
 26247                                  	;or	al,20h		; convert to lowercase		
 26248                                  	;cmp	al,66h	 ; 'f'
 26249                                  	;jne	short BAD_ONF	
 26250                                  	;or	al,66h ; or al,'f'
 26251                                  	;jmp	short OFF_CHECK
 26252                                  ;ON_CHECK:
 26253                                  	;xor	al,al
 26254                                  ;OFF_CHECK:
 26255                                  	;lahf
 26256                                  	;mov	bx,ax
 26257                                  	;call	SCANOFF		; scan off leading blanks & equal
 26258                                  	;cmp	al,0Dh		; are we at end of line?	
 26259                                  	;jne	short BAD_ONF	; no, return error
 26260                                  	;mov	ax,bx
 26261                                  	;sahf
 26262                                  	;clc
 26263                                  	;retn
 26264                                  
 26265                                  	; 19/03/2023
 26266                                  	; MSDOS 6.0
 26267                                  scan_on_off:			;AN032; scan off leading blanks & equal
 26268 0000367A AC                      	lodsb			;AN032; get a char
 26269                                  	;cmp	al,blank	;AN032; if whitespace
 26270 0000367B 3C20                    	cmp	al,20h
 26271 0000367D 74FB                    	je	short scan_on_off
 26272                                  				;AN032;    keep scanning
 26273 0000367F 3C09                    	cmp	al,tab_chr	;AN032; if tab
 26274                                  	;cmp	al,09h
 26275 00003681 74F7                    	je	short scan_on_off
 26276                                  				;AN032;    keep scanning
 26277                                  	;cmp	al,equal_chr	;AN032; if equal char
 26278 00003683 3C3D                    	cmp	al,'=' ; 3Dh
 26279 00003685 7401                    	je	short parse_on_off
 26280                                  				;AN032;    start parsing
 26281 00003687 4E                      	dec	si		;AN032; if none of above - back up
 26282                                  
 26283                                  parse_on_off:			;AN032;    and start parsing
 26284 00003688 BF[8F84]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26285 0000368B 31C9                    	xor	cx,cx		;AN000; clear cx,dx
 26286 0000368D 31D2                    	xor	dx,dx		;AN000;
 26287 0000368F E88C0C                  	call	cmd_parse	;AC000; call parser
 26288                                  	;cmp	ax,-1 ; 0FFFFh
 26289 00003692 83F8FF                  	cmp	ax,END_OF_LINE	;AC000; are we at end of line?
 26290 00003695 742E                    	je	short BADONF	;AC000; yes, return error
 26291                                  	;cmp	ax,RESULT_NO_ERROR ;AN000; did an error occur
 26292                                  	;cmp	ax,0
 26293 00003697 21C0                    	and	ax,ax ; ax = 0 ?
 26294 00003699 7404                    	jz	short on_off_there
 26295                                  				;AN000; no - continue
 26296 0000369B 89C1                    	mov	cx,ax		;AN000; yes - set cl to error code
 26297 0000369D EB26                    	jmp	short BADONF	;AN000; return error
 26298                                  
 26299                                  on_off_there:
 26300 0000369F 803E[F595]FF            	cmp	byte [PARSE1_CODE],-1 ; 0FFh
 26301                                  				;AN014; was a valid positional present?
 26302 000036A4 7505                    	jnz	short good_on_off
 26303                                  				;AN014; yes - continue
 26304 000036A6 B90A00                  	mov	cx,BadParm_Ptr	;AN014; something other than ON/OFF
 26305                                  	;mov	cx,10 ; 0Ah
 26306 000036A9 EB1A                    	jmp	short BADONF	;AN014; return error
 26307                                  
 26308                                  good_on_off:				;AN014;
 26309 000036AB 31C0                    	xor	ax,ax		;AC000; set up return code for
 26310 000036AD 0A06[F595]              	or	al,[PARSE1_CODE]
 26311                                  				;AC000;    ON or OFF in AX
 26312 000036B1 9C                      	pushf			;AN000; save flags
 26313 000036B2 BF[8F84]                	mov	di,PARSE_BREAK	;AN000; Get address of PARSE_BREAK
 26314 000036B5 31D2                    	xor	dx,dx		;AN000;
 26315 000036B7 E8640C                  	call	cmd_parse	;AN000; call parser
 26316 000036BA 83F8FF                  	cmp	ax,END_OF_LINE	;AN000; are we at end of line?
 26317                                  	;cmp	ax,-1 ; 0FFFFh
 26318 000036BD 7503                    	jne	short BADONF_flags
 26319                                  				;AN000; NO, return error
 26320 000036BF 9D                      	popf			;AN000; restore flags
 26321 000036C0 F8                      	clc			;AC000; no error
 26322                                  	;jmp	short on_off_end
 26323                                  				;AN000; return to caller
 26324                                  	; 26/04/2023
 26325 000036C1 C3                      	retn
 26326                                  
 26327                                  BADONF_flags:
 26328 000036C2 89C1                    	mov	cx,ax
 26329 000036C4 9D                      	popf
 26330                                  
 26331                                  ; ---------------------------------------------------------------------------
 26332                                  
 26333                                  ; No discernable ON or OFF has been found. Put an error message pointer in DX
 26334                                  ; and return the error
 26335                                  
 26336                                  BADONF:
 26337 000036C5 BA[5F80]                	mov	dx,bad_on_off_ptr
 26338 000036C8 F9                      	stc
 26339                                  on_off_end:
 26340 000036C9 C3                      	retn
 26341                                  
 26342                                  ; 19/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26343                                  %if 0
 26344                                  
 26345                                  ;============================================================================
 26346                                  ; TCMD1B.ASM, MSDOS 6.0, 1991
 26347                                  ;============================================================================
 26348                                  ; 02/10/2018 - Retro DOS v3.0
 26349                                  
 26350                                  ; Print volume ID info
 26351                                  
 26352                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2982h
 26353                                  
 26354                                  ; ---------------------------------------------------------------------------
 26355                                  
 26356                                  PRINTVOL:
 26357                                  	push	ax		; AX return from SEARCH_FIRST for VOL ID
 26358                                  	mov	al,[FCB] ; 5Ch	; get drive letter
 26359                                  	add	al,'@'
 26360                                  	cmp	al,'@'
 26361                                  	jnz	short DRVOK
 26362                                  	mov	al,[CURDRV]
 26363                                  	add	al,[CAPITAL_A]
 26364                                  DRVOK:
 26365                                  	mov	[VOL_DRV],al	; get drive letter into argument
 26366                                  	pop	ax		; get return code back
 26367                                  	mov	dx,NOVOL ; "has	no label" 
 26368                                  	or	al,al		; volume label found?
 26369                                  	jnz	short PRINTVOL2	; print no volume message
 26370                                  GOODVOL:
 26371                                  	; MSDOS 3.3
 26372                                  	mov	di,CHARBUF
 26373                                  	mov	dx,di
 26374                                  	mov	si,IS	; "is "
 26375                                  	call	STRCPY
 26376                                  	dec	di
 26377                                  	mov	si,DIRBUF+8
 26378                                  	mov	cx,11
 26379                                  	rep	movsb
 26380                                  	xor	ax,ax
 26381                                  	;xor	al,al  ; MSDOS 6.0
 26382                                  	stosb			; store a zero to terminate the string
 26383                                  PRINTVOL2:
 26384                                  	mov	[VOLNAME_ADDR],dx
 26385                                  	mov	dx,VOLMESPTR
 26386                                  	jmp	PRINTF_CRLF
 26387                                  
 26388                                  	; MSDOS 6.0
 26389                                  ;drvok:
 26390                                  ;	mov	vol_drv,al	;AC000; get drive letter into argument
 26391                                  ;	pop	ax		;AC000; get return code back
 26392                                  ;	or	al,al		;AC000; volume label found?
 26393                                  ;	jz	Get_vol_name	;AC000; volume label exists - go get it
 26394                                  ;	mov	dx,offset trangroup:VolMes_ptr_2 
 26395                                  ;				;AC000; set up no volume message
 26396                                  ;	jmp	short print_serial ;AC000; go print it
 26397                                  ;
 26398                                  ;Get_vol_name:
 26399                                  ;	mov	di,offset trangroup:charbuf
 26400                                  ;	mov	dx,di
 26401                                  ;	mov	si,offset trangroup:dirbuf + 8	;AN000;  3/3/KK
 26402                                  ;	mov	cx,11				;AN000;  3/3/KK
 26403                                  ;	rep	movsb				;AN000;  3/3/KK
 26404                                  ;
 26405                                  ;	xor	al,al		;AC000; store a zero to terminate the string
 26406                                  ;	stosb
 26407                                  ;	mov	dx,offset trangroup:VolMes_ptr	;AC000; set up message
 26408                                  ;
 26409                                  ;PRINT_SERIAL:
 26410                                  ;
 26411                                  ;; Attempt to get the volume serial number from the disk.  If an error
 26412                                  ;; occurs, do not print volume serial number.
 26413                                  ;
 26414                                  ;	push	dx		;AN000; save message offset
 26415                                  ;	mov	ax,(GetSetMediaID SHL 8) 
 26416                                  ;				;AC036; Get the volume serial info
 26417                                  ;	mov	bl,DS:[FCB]	;AN000; get drive number from FCB
 26418                                  ;	mov	dx,offset trangroup:vol_ioctl_buf ;AN000;target buffer
 26419                                  ;	int	21h		;AN000; do the call
 26420                                  ;	pop	dx		;AN000; get message offset back
 26421                                  ;	jc	printvol_end	;AN000; if error, just go print label
 26422                                  ;	call	std_printf	;AC000; go print volume message
 26423                                  ;	mov	al,blank	;AN051; Print out a blank
 26424                                  ;	invoke	print_char	;AN051;   before volume message
 26425                                  ;	mov	dx,offset trangroup:VolSerMes_ptr 
 26426                                  ;				;AN000; get serial number message
 26427                                  ;printvol_end:
 26428                                  ;	jmp	std_printf	;AC000; go print and exit
 26429                                  
 26430                                  %endif
 26431                                  
 26432                                  ;============================================================================
 26433                                  ; TUCODE.ASM, MSDOS 6.0, 1991 (2)
 26434                                  ;============================================================================
 26435                                  ; 02/10/2018 - Retro DOS v3.0
 26436                                  
 26437                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29BFh
 26438                                  
 26439                                  ; =============== S U B	R O U T	I N E =======================================
 26440                                  
 26441                                  	; 20/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26442                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3876h
 26443                                  	
 26444                                  PRINT_DATE:
 26445                                  	; 20/03/2023
 26446                                  	; MSDOS 3.3
 26447                                  	;push	es
 26448                                  	;push	di
 26449                                  	;push	cs
 26450                                  	;pop	es
 26451                                  	;mov	di,ARG_BUF
 26452                                  	;mov	ah,Get_Date ; 2Ah
 26453                                  	;int	21h	; DOS -	GET CURRENT DATE
 26454                                  	;		; Return: DL = day,DH = month,	CX = year
 26455                                  	;		; AL = day of the week (0=Sunday,1=Monday,etc.)
 26456                                  	;cbw
 26457                                  	;call	GETDATE
 26458                                  	;call	P_DATE
 26459                                  	;xor	al,al
 26460                                  	;stosb
 26461                                  	;mov	dx,ARG_BUF_PTR
 26462                                  	;call	STD_PRINTF
 26463                                  		; 20/03/2023 (MSDOS 3.3 COMMAND.COM - TRANGROUP:29DAh)
 26464                                  	;pop	es ; !!??!! 
 26465                                  	;pop	di
 26466                                  	;retn
 26467                                  
 26468                                  	; 20/03/2023
 26469                                  	; MSDOS 6.0
 26470 000036CA 06                      	push	es
 26471 000036CB 57                      	push	di
 26472 000036CC 0E                      	push	cs
 26473 000036CD 07                      	pop	es
 26474 000036CE E81300                  	call	GetDate 		; get date
 26475 000036D1 86F2                    	xchg	dh,dl			;AN000; switch month & day
 26476 000036D3 890E[1681]              	mov	[promptDat_yr],cx 	;AC000; put year into message control block
 26477 000036D7 8916[1881]              	mov	[promptDat_moday],dx	;AC000; put month and day into message control block
 26478 000036DB BA[0681]                	mov	dx,promptdat_ptr	;AC000; set up message for output
 26479 000036DE E80E17                  	call	std_printf
 26480                                  	;AD061; mov word [promptDat_yr],0 ;AC000; reset year, month and day
 26481                                  	;AD061; mov word [promptDat_moday],0 ;AC000; pointers in control block
 26482 000036E1 5F                      	pop	di			;AC000; restore di,es
 26483 000036E2 07                      	pop	es			;AC000;
 26484 000036E3 C3                      	retn
 26485                                  
 26486                                  ; ---------------------------------------------------------------------------
 26487                                  
 26488                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26489                                  
 26490                                  ;GETDATE:
 26491                                  	; 21/03/2023
 26492                                  	; MSDOS 3.3
 26493                                  	;mov	si,ax
 26494                                  	;shl	si,1
 26495                                  	;add	si,ax
 26496                                  	;add	si,WEEKTAB ; "SunMonTueWedThuFriSat"
 26497                                  	;mov	bx,cx
 26498                                  	;mov	cx,3
 26499                                  	;rep	movsb
 26500                                  	;mov	al,' '
 26501                                  	;stosb
 26502                                  	;retn
 26503                                  
 26504                                  	; 21/03/2023
 26505                                  	; MSDOS 6.0
 26506                                  
 26507                                  ; Do GET DATE system call and set up 3 character day of week in ARG_BUF
 26508                                  ; for output. Date will be returned in CX,DX.
 26509                                  
 26510                                  GetDate:
 26511 000036E4 BF[318C]                	mov	di,Arg_Buf		;AC000; target for day of week
 26512 000036E7 B42A                    	mov	ah,Get_Date ;2Ah	;AC000; get current date
 26513 000036E9 CD21                    	int	21h			;AC000; Get date in CX:DX
 26514 000036EB 98                      	cbw				;AC000;
 26515 000036EC 51                      	push	cx			;AN000; save date returned in
 26516 000036ED 52                      	push	dx			;AN000;  CX:DX
 26517 000036EE 89C6                    	mov	si,ax
 26518 000036F0 D1E6                    	shl	si,1
 26519 000036F2 01C6                    	add	si,ax			; SI=AX*3
 26520 000036F4 89F1                    	mov	cx,si			;AN000; save si
 26521 000036F6 A1[D27F]                	mov	ax,[WeekTab]		;AN000; get message number of weektab
 26522 000036F9 B6FF                    	mov	dh,util_msg_class ;0FFh	;AN000; this is a utility message
 26523 000036FB 57                      	push	di			;AN000; save argument buffer
 26524 000036FC E8D517                  	call	TSYSGETMSG		;AN000; get the address of the message
 26525 000036FF 5F                      	pop	di			;AN000; retrieve argument buffer
 26526 00003700 01CE                    	add	si,cx			;AC000; get day of week
 26527 00003702 B90300                  	mov	cx,3
 26528 00003705 F3A4                      	rep	movsb
 26529 00003707 B000                    	mov	al,END_OF_LINE_OUT ; 0	;AC000; terminate the string
 26530 00003709 AA                      	stosb
 26531 0000370A 5A                      	pop	dx			;AN000; get back date
 26532 0000370B 59                      	pop	cx			;AN000;
 26533 0000370C C3                      	retn
 26534                                  
 26535                                  ; =============== S U B	R O U T	I N E =======================================
 26536                                  
 26537                                  	; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26538                                  
 26539                                  	; MSDOS 6.0
 26540                                  
 26541                                  ; This routine determines whether the character in AL is a
 26542                                  ; Yes or No character. On return, if AL=0, the character is
 26543                                  ; No, if AL=1, the character is Yes.
 26544                                  
 26545                                  ;	assume	ds:trangroup
 26546                                  
 26547                                  char_in_xlat:	; proc	near
 26548                                  	; 21/03/2023
 26549 0000370D 88C2                    	mov	dl,al			;AC000; get character into DX
 26550 0000370F 30F6                    	xor	dh,dh			;AC000;
 26551                                  	;mov	ax,(GetExtCntry<<8)+35	;AC000; Yes/No char call
 26552 00003711 B82365                  	mov	ax,6523h
 26553 00003714 CD21                    	int	21h			;AC000;
 26554 00003716 C3                      	retn
 26555                                  
 26556                                  ;char_in_xlat	endp
 26557                                  
 26558                                  ;============================================================================
 26559                                  ; TENV.ASM, MSDOS 6.0, 1991
 26560                                  ;============================================================================
 26561                                  ; 02/10/2018 - Retro DOS v3.0
 26562                                  
 26563                                  ;	Environment utilities and misc. routines
 26564                                  
 26565                                  ; MSDOS 6.0
 26566                                  ; ****************************************************************
 26567                                  ; *
 26568                                  ; * ROUTINE:	 UPCONV     (ADDED BY EMG 4.00)
 26569                                  ; *
 26570                                  ; * FUNCTION:	 This routine returns the upper case equivalent of
 26571                                  ; *		 the character in AL from the file upper case table
 26572                                  ; *		 in DOS if character if above  ascii 128, else
 26573                                  ; *		 subtracts 20H if between "a" and "z".
 26574                                  ; *
 26575                                  ; * INPUT:	 AL	      char to be upper cased
 26576                                  ; *		 FUCASE_ADDR  set to the file upper case table
 26577                                  ; *
 26578                                  ; * OUTPUT:	 AL	      upper cased character
 26579                                  ; *
 26580                                  ; ****************************************************************
 26581                                  ;
 26582                                  ;assume	ds:trangroup				;AN000;
 26583                                  ;
 26584                                  ;upconv	proc	near				;AN000;
 26585                                  ;
 26586                                  ;	cmp	al,80h				;AN000;  see if char is > ascii 128
 26587                                  ;	jb	oth_fucase			;AN000;  no - upper case math
 26588                                  ;	sub	al,80h				;AN000;  only upper 128 chars in table
 26589                                  ;	push	ds				;AN000;
 26590                                  ;	push	bx				;AN000;
 26591                                  ;	mov	ds,[resseg]			;AN000;  get resident data segment
 26592                                  ;assume	ds:resgroup				;AN000;
 26593                                  ;	lds	bx,dword ptr FUCase_Addr+1	;AN000;  get table address
 26594                                  ;	add	bx,2				;AN000;  skip over first word
 26595                                  ;	xlat	ds:byte ptr [bx]		;AN000;  convert to upper case
 26596                                  ;	pop	bx				;AN000;
 26597                                  ;	pop	ds				;AN000;
 26598                                  ;assume	ds:trangroup				;AN000;
 26599                                  ;	jmp	short upconv_end		;AN000;  we finished - exit
 26600                                  ;
 26601                                  ;oth_fucase:					;AN000;
 26602                                  ;	cmp	al,small_a			;AC000; if between "a" and "z",
 26603                                  ;	jb	upconv_end			;AC000;     subtract 20h to get
 26604                                  ;	cmp	al,small_z			;AC000;    upper case equivalent.
 26605                                  ;	ja	upconv_end			;AC000;
 26606                                  ;	sub	al,20h				;AC000; Change lower-case to upper
 26607                                  ;
 26608                                  ;upconv_end:					;AN000;
 26609                                  ;	ret
 26610                                  ;
 26611                                  ;upconv	endp					;AN000;
 26612                                  
 26613                                  
 26614                                  ; =============== S U B	R O U T	I N E =======================================
 26615                                  
 26616                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 29F2h
 26617                                  
 26618                                  ; 21/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26619                                  %if 0
 26620                                  
 26621                                  UPCONV:
 26622                                  	cmp	al,80h
 26623                                  	jb	short OTH_UCASE
 26624                                  	sub	al,80h
 26625                                  	push	ds
 26626                                  	push	bx
 26627                                  	mov	ds,[RESSEG]
 26628                                  	lds	bx,[UPPERCASETBL]
 26629                                  	add	bx,2
 26630                                  	xlat
 26631                                  	pop	bx
 26632                                  	pop	ds
 26633                                  	jmp	short UPCONV_RETN
 26634                                  
 26635                                  OTH_UCASE:
 26636                                  	cmp	al,'a'
 26637                                  	jb	short UPCONV_RETN
 26638                                  	cmp	al,'z'
 26639                                  	ja	short UPCONV_RETN
 26640                                  	sub	al,20h
 26641                                  
 26642                                  UPCONV_RETN:
 26643                                  	retn
 26644                                  
 26645                                  %endif
 26646                                  
 26647                                  ;============================================================================
 26648                                  ; COPY.ASM, MSDOS 6.0, 1991
 26649                                  ;============================================================================
 26650                                  ; 01/10/2018 - Retro DOS v3.0
 26651                                  
 26652                                  ;	title	COMMAND COPY routines.
 26653                                  
 26654                                  ;/*
 26655                                  ; *                      Microsoft Confidential
 26656                                  ; *                      Copyright (C) Microsoft Corporation 1991
 26657                                  ; *                      All Rights Reserved.
 26658                                  ; */
 26659                                  
 26660                                  ;***	COPY.ASM
 26661                                  
 26662                                  ;Source files:  copy.asm, copypr1.asm, copypr2.asm
 26663                                  
 26664                                  
 26665                                  ;***	MODIFICATION HISTORY
 26666                                  
 26667                                  ;11/01/83 EE  Added a few lines at the end of SCANSRC2 to get multiple
 26668                                  ;	     file concatenations (eg copy a.*+b.*+c.*) to work properly.
 26669                                  ;11/02/83 EE  Commented out the code in CPARSE which added drive designators
 26670                                  ;	     to tokens which begin with path characters so that PARSELINE
 26671                                  ;	     will work correctly.
 26672                                  ;11/04/83 EE  Commented out the code in CPARSE that considered paren's to be
 26673                                  ;	     individual tokens. That distinction is no longer needed for
 26674                                  ;	     FOR loop processing.
 26675                                  ;11/17/83 EE  CPARSE upper case conversion is now flag dependent. Flag is
 26676                                  ;	     1 when Cparse is called from COPY.
 26677                                  ;11/17/83 EE  Took out the comment chars around code described in 11/04/83
 26678                                  ;	     mod. It now is conditional on flag like previous mod.
 26679                                  ;11/21/83 NP  Added printf
 26680                                  ;12/09/83 EE  CPARSE changed to use CPYFLAG to determine when a colon should
 26681                                  ;	     be added to a token.
 26682                                  ;05/30/84 MZ  Initialize all copy variables. Fix confusion with destclosed
 26683                                  ;	     NOTE: DestHand is the destination handle. There are two
 26684                                  ;	     special values: -1 meaning destination was never opened and
 26685                                  ;	     0 which means that the destination has been openned and
 26686                                  ;	     closed.
 26687                                  ;06/01/84 MZ  Above reasoning totally specious. Returned things to normal
 26688                                  ;06/06/86 EG  Change to fix problem of source switches /a and /b getting
 26689                                  ;	     lost on large and multiple file (wildcard) copies.
 26690                                  ;06/09/86 EG  Change to use xnametrans call to verify that source and
 26691                                  ;	     destination are not equal.
 26692                                  ;
 26693                                  ;06/24/90 DO  If the destination of a file concatenation is the same as
 26694                                  ;	     first source file AND we run out of disk space before
 26695                                  ;	     completing the concatenation, restore the first source
 26696                                  ;	     file as best we can. See SeekEnd and CopErr. Bug #859.
 26697                                  ;
 26698                                  ;M031 SR 10/11/90  Bug #3069. Use deny write sharing mode to open files
 26699                                  ;		instead of compatibility mode. This gives lesser sharing
 26700                                  ;		violations when files are opened for read on a copy.
 26701                                  
 26702                                  ; ---------------------------------------------------------------------------
 26703                                  ;***	COPY CODE
 26704                                  ; ---------------------------------------------------------------------------
 26705                                  
 26706                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2A15h
 26707                                  
 26708                                  ; 23/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 26709                                  ; MSDOS 5.0 - COMMAND.COM, transient portion/segment offset 38C3h
 26710                                  
 26711                                  COPY:
 26712                                  	; 	Initialize internal variables.
 26713                                  
 26714 00003717 31C0                    	xor	ax,ax		; AX = 0
 26715 00003719 A3[B78C]                	mov	[Copy_num],ax	; # files copied (destinations) = 0
 26716 0000371C A3[E58D]                	mov	[SRCPT],ax	; cmd line ptr for source scan = 0
 26717 0000371F A3[318D]                	mov	[SrcTail],ax	; ptr to last element of source pathname = 0
 26718 00003722 A2[E48A]                	mov	[CFLAG],al	; 'destination file created' = false
 26719 00003725 A3[E88A]                	mov	[NXTADD],ax	; ptr into TPA buffer = 0
 26720 00003728 A3[E08A]                	mov	[DestSwitch],ax	; destination switches = none
 26721 0000372B A3[FB8D]                	mov	[STARTEL],ax	; CParse ptr to last pathname element = 0
 26722 0000372E A3[CE8C]                	mov	[DestTail],ax	; ptr to last element of dest pathname = 0
 26723 00003731 A2[E58A]                	mov	[DestClosed],al	; 'destination file closed' = false
 26724 00003734 A2[CD8C]                	mov	[DestSiz],al	; length of destination pathname = 0
 26725 00003737 A2[308D]                	mov	[SrcSiz],al	; length of source pathname = 0
 26726 0000373A A2[D08C]                	mov	[DestInfo],al	; destination pathname flags = none
 26727 0000373D A2[338D]                	mov	[SrcInfo],al	; source pathname flags = none
 26728 00003740 A2[E78D]                	mov	[INEXACT],al	; 'inexact copy' = false
 26729 00003743 A2[CC8C]                	mov	[DestVars],al	; 'dest pathname is directory' = false  ;*!*
 26730 00003746 A2[2F8D]                	mov	[SrcVars],al	; 'source pathname is directory' = false
 26731 00003749 A2[A789]                	mov	[USERDIR1],al	; saved working directory = null
 26732 0000374C A2[E88D]                	mov	[NOWRITE],al	; 'no write' (source = dest) = false
 26733 0000374F A2[D88A]                	mov	[RDEOF],al	; 'read end of file' = false
 26734 00003752 A3[8B8D]                	mov	[SRCHAND],ax	; source handle = 0
 26735 00003755 A3[F08D]                	mov	[CPDATE],ax	; copy date = 0
 26736 00003758 A3[F28D]                	mov	[CPTIME],ax	; copy time = 0
 26737 0000375B A2[8D8D]                	mov	[SRCISDEV],al	; 'source is device' = false
 26738                                  	; 23/03/2023
 26739                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM	
 26740 0000375E A2[F88D]                	mov	[OCtrlZ],al	; 'Ctrl+Z removed from original' = false
 26741 00003761 A3[F48D]                	mov	[OFilePtr_Lo],ax
 26742 00003764 A3[F68D]                	mov	[OFilePtr_Hi],ax ; original destination file ptr = null
 26743 00003767 A2[EC8D]                	mov	[TERMREAD],al	; 'terminate read' = false
 26744 0000376A A2[2A8C]                	mov	[comma],al	; '"+,," found' = false
 26745 0000376D A2[2B8C]                	mov	[plus_comma],al ; '"+,," found last time' = false (?)
 26746 00003770 A2[378E]                	mov	[msg_flag],al	;AN022; 'non-utility msg issued' = false
 26747 00003773 A3[E28A]                	mov	[AllSwitch],ax	; all switches = none
 26748 00003776 A2[DB8A]                	mov	[ArgC],al	; source/dest argument count = 0
 26749 00003779 A2[EE8D]                	mov	[PLUS],al	; '"+" in command line' = false
 26750 0000377C A2[E98D]                	mov	[BINARY],al	; 'binary copy' = false
 26751 0000377F A2[ED8D]                	mov	[ASCII],al	; 'ascii copy' = false
 26752 00003782 A3[F18A]                	mov	[FileCnt],ax	; # files copied (destinations) = 0
 26753 00003785 A3[EA8D]                	mov	[WRITTEN],ax	; 'destination written to' = false
 26754 00003788 A2[DA8A]                	mov	[Concat],al	; 'concatenating' = false
 26755 0000378B A2[2C8D]                	mov	[MELCOPY],al	; 'Mel Hallerman copy' = false
 26756 0000378E A3[2D8D]                	mov	[MELSTART],ax	; Mel Hallerman cmd line ptr = 0
 26757                                  
 26758                                  	;	Initialize buffers with double-nulls.
 26759                                  
 26760 00003791 A3[8E8D]                	mov	[ScanBuf],ax
 26761 00003794 A3[D18C]                	mov	[DestBuf],ax
 26762 00003797 A3[348D]                	mov	[SrcBuf],ax
 26763 0000379A A3[148C]                	mov	[SDIRBUF],ax
 26764 0000379D A3[CE8B]                	mov	[DIRBUF],ax
 26765 000037A0 A3[8B8B]                	mov	[DestFcb],ax
 26766                                  
 26767 000037A3 A2[EF8D]                	mov	[objcnt],al	; # CParse cmd-line objects found = 0
 26768                                  		
 26769 000037A6 48                      	dec	ax ; -1		; AX = 0FFFFh
 26770 000037A7 A3[288D]                	mov	[DESTHAND],ax	; destination handle = 'never opened'
 26771 000037AA A2[EA8A]                	mov	[FRSTSRCH],al	; 'first search for source' = true
 26772 000037AD A2[2B8D]                	mov	[FIRSTDEST],al	; 'first time for dest' = true
 26773 000037B0 A2[CC8C]                	mov	[DestIsDir],al	; 'haven't analyzed destination' ; *!*
 26774                                  		
 26775 000037B3 BE8100                  	mov	si,81h		; SI = ptr to command line
 26776                                  	;mov	bl,[PLUS_CHR]	; BL = special delimiter = "+"
 26777                                  	; 23/03/2023
 26778 000037B6 B32B                    	mov	bl,'+'
 26779 000037B8 FE06[368E]              	inc	byte [expand_star] ; CParse 'expand * to ?s' = true
 26780 000037BC C606[B98C]01            	mov	byte [cpyflag],1 ; CParse 'called from COPY' = true
 26781                                  
 26782                                  	;*	Scan the command line for destination information.
 26783                                  
 26784                                  DESTSCAN:
 26785 000037C1 31ED                    	xor	bp,bp			; BP = switch flag accumulator
 26786 000037C3 BF[8E8D]                	mov	di,ScanBuf		; ES:DI = ptr to pathname buf
 26787                                  	; 23/03/2023
 26788 000037C6 8936[2D8C]              	mov	[parse_last],si		;AN018; save cmd line ptr
 26789 000037CA E88C09                  	call	cparse			; parse next object
 26790 000037CD 9C                      	pushf				; save CParse flags
 26791 000037CE FE06[EF8D]              	inc	byte [objcnt]		; count object
 26792 000037D2 F6C780                  	test	bh,80h
 26793 000037D5 7405                    	jz	short NOCOPY		; no "+" delimiter
 26794 000037D7 C606[EE8D]01            	mov	byte [PLUS],1		; "+" delimiter occurred
 26795                                  NOCOPY:
 26796 000037DC F6C701                  	test	bh,1
 26797 000037DF 742E                    	jz	short TESTP2		; not a switch
 26798                                  
 26799                                  	;	Found a switch.
 26800                                  
 26801                                  	; 23/03/2023 - Retro DOS v4.0 COMMAND.COM
 26802                                  	; MSDOS 6.0
 26803 000037E1 F7C51000                	test	bp,10h
 26804                                  	;test	bp,SwitchV ; 10h	;AN038; Verify requested?
 26805 000037E5 740B                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 26806 000037E7 F606[E28A]10            	test	byte [AllSwitch],10h
 26807                                  	;test	byte [AllSwitch],SwitchV ;AN038; Verify already entered?
 26808 000037EC 7404                    	jz	short NOT_SLASHV	;AN038; No - set the switch
 26809                                  ;AD018; ;or	word [AllSwitch],FBadSwitch ;AN038; Set up bad switch
 26810                                  	;or	bp,FBadSwitch		;AN018; Set up bad switch
 26811 000037EE 81CD0040                	or	bp,4000h
 26812                                  NOT_SLASHV:
 26813 000037F2 092E[E08A]              	or	[DestSwitch],bp		; assume destination
 26814 000037F6 092E[E28A]              	or	[AllSwitch],bp		; keep tabs on all switches
 26815                                  
 26816                                  	; 23/03/2023
 26817                                  	; MSDOS 6.0
 26818                                  	;test	bp,not SwitchCopy	;AN018; Bad switch?
 26819 000037FA F7C5E37F                	test	bp,7FE3h ; test bp,~SwitchCopy
 26820 000037FE 740A                    	jz	short NOT_BAD_SWITCH	;AN018; Switches are okay
 26821 00003800 9D                      	popf				;AN018; fix up stack
 26822 00003801 B80300                  	mov	ax,BadSwt_Ptr ; 3	;AN018; get "Invalid switch" message number
 26823 00003804 E8C3E9                  	call	setup_parse_error_msg	;AN018; setup to print the message
 26824 00003807 E94AF1                  	jmp	cerror			;AC018; exit
 26825                                  NOT_BAD_SWITCH:
 26826 0000380A 9D                      	popf				; restore CParse flags
 26827 0000380B 7233                    	jc	short CHECKDONE		; found CR
 26828 0000380D EBB2                    	jmp	short DESTSCAN		; continue scanning for destination
 26829                                  TESTP2:
 26830 0000380F 9D                      	popf				; restore CParse flags
 26831 00003810 722E                    	jc	short CHECKDONE		; found CR
 26832 00003812 F6C780                  	test	bh,80h
 26833 00003815 7504                    	jnz	short GOTPLUS		; found a "+pathname" argument
 26834 00003817 FE06[DB8A]              	inc	byte [ArgC]		; count independent pathname args
 26835                                  GOTPLUS:
 26836 0000381B 56                      	push	si			; save cmd line ptr
 26837 0000381C A1[FB8D]                	mov	ax,[STARTEL]		; AX = ptr to last path element
 26838 0000381F BE[8E8D]                	mov	si,ScanBuf		; SI = ptr to path string
 26839 00003822 29F0                    	sub	ax,si			; AX = offset of last element
 26840 00003824 BF[D18C]                	mov	di,DestBuf		; DI = ptr to destination buf
 26841 00003827 01F8                    	add	ax,di			; AX = ptr to last element in
 26842                                  					;  destination path buffer
 26843 00003829 A3[CE8C]                	mov	[DestTail],ax		; save ptr to last element
 26844 0000382C 880E[CD8C]              	mov	[DestSiz],cl		; save path string length
 26845 00003830 41                      	inc	cx			; CX = mov length (incl null)
 26846 00003831 F3A4                    	rep	movsb			; DestBuf = possible destination path
 26847 00003833 883E[D08C]              	mov	[DestInfo],bh		; save CParse info flags
 26848 00003837 C706[E08A]0000          	mov	word [DestSwitch],0	; clear destination switches
 26849 0000383D 5E                      	pop	si			; SI = ptr into cmd line again
 26850 0000383E EB81                    	jmp	short DESTSCAN		;AC018; continue scanning for dest
 26851                                  
 26852                                  CHECKDONE:
 26853                                  	;	We reached the CR. The destination scan is finished.
 26854                                  
 26855                                  	;	Disallow "copy file1+" as file overwriting itself.
 26856                                  	;
 26857                                  	;	(Note that "copy file1+file2+" will be accepted, and
 26858                                  	;	equivalent to "copy file1+file2".)
 26859                                  
 26860                                  	;	Bugbug: it looks like "copy /x file1+" would slip
 26861                                  	;	through this check, since the switch would count
 26862                                  	;	as another object in ObjCnt.
 26863                                  
 26864 00003840 803E[EE8D]01            	cmp	byte [PLUS],1		; "+" with
 26865 00003845 7514                    	jnz	short CDCONT
 26866 00003847 803E[DB8A]01            	cmp	byte [ArgC],1		; one arg,
 26867 0000384C 750D                    	jnz	short CDCONT
 26868 0000384E 803E[EF8D]02            	cmp	byte [objcnt],2		; two objects..
 26869 00003853 7506                    	jnz	short CDCONT
 26870 00003855 BA[447F]                	mov	dx,OVERWR_PTR
 26871 00003858 E91A06                  	jmp	COPYERR			; is file overwrite
 26872                                  
 26873                                  CDCONT:
 26874 0000385B A0[EE8D]                	mov	al,[PLUS]		; AL = '"+" occurred'
 26875 0000385E A2[DA8A]                	mov	[Concat],al		; if "+" occurred, we're concatenating
 26876 00003861 D0E0                    	shl	al,1
 26877 00003863 D0E0                    	shl	al,1
 26878 00003865 A2[E78D]                	mov	[INEXACT],al		; therefore making an inexact copy
 26879                                  	;mov	dx,BADARGSPTR ; MSDOS 3.3 ; 18/04/2023
 26880 00003868 A0[DB8A]                	mov	al,[ArgC]		; AL = # independent arguments
 26881                                  
 26882                                  	; 23/03/2023
 26883                                  	; MSDOS 3.3		
 26884                                  	;or	al,al
 26885                                  	;jz	short CERROR4J
 26886                                  	; MSDOS 6.0
 26887 0000386B 08C0                    	or	al,al
 26888 0000386D 750B                    	jnz	short TRY_TOO_MANY	; more than 0 args; check if too many
 26889                                  		
 26890 0000386F BA[1B7F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 26891 00003872 C706[1B7F]0200          	mov	word [extend_buf_ptr],LessArgs_Ptr ; 2
 26892                                  	;mov	word [extend_buf_ptr],2	; set msg # "param missing"
 26893 00003878 EB0D                    	jmp	short CERROR_PARSEJ	; take parse error exit		
 26894                                  
 26895                                  	; more than 0 args; check if too many
 26896                                  TRY_TOO_MANY:
 26897 0000387A 3C02                    	cmp	al,2
 26898 0000387C 7611                    	jbe	short ACOUNTOK		; <= 2 arguments - ok
 26899                                  
 26900                                  	; 23/03/2023
 26901                                  	; MSDOS 6.0
 26902 0000387E BA[1B7F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 26903 00003881 C706[1B7F]0100          	mov	word [extend_buf_ptr],MoreArgs_Ptr
 26904                                  	;mov	word [extend_buf_ptr],1 ; set msg # "too many params"
 26905                                  CERROR_PARSEJ:
 26906 00003887 C606[197F]02            	mov	byte [msg_disp_class],parse_msg_class ; 2
 26907                                  					; parse error message	
 26908                                  CERROR4J:
 26909 0000388C E9C5F0                  	jmp	cerror
 26910                                  
 26911                                  ACOUNTOK:
 26912 0000388F BD[CC8C]                	mov	bp,DestVars		; BP = base of dest variables
 26913                                  
 26914 00003892 3C01                    	cmp	al,1
 26915 00003894 7520                    	jnz	short GOT2ARGS
 26916                                  
 26917                                  	;	Only one independent pathname argument on command line.
 26918                                  	;	Set destination to d:*.*, where d: is current drive.
 26919                                  
 26920                                  	;	Bugbug: but is this appropriate for "copy x:file1+x:file2"?
 26921                                  	;	The two files would be appended as d:file1, rather than x:file1.
 26922                                  
 26923 00003896 A0[D98A]                	mov	al,[CURDRV]		; AL = current drive (0 = A)
 26924                                  	;add	al,[CAPITAL_A]		; AL = current drive letter
 26925                                  	; 23/03/2023
 26926 00003899 0441                    	add	al,'A'
 26927 0000389B B43A                    	mov	ah,':'			; AX = "d:"
 26928                                  	;mov	byte [bp+1],2
 26929 0000389D C6460102                	mov	byte [bp+VARSTRUC.SIZ],2 ; pathname length = 2
 26930                                  
 26931 000038A1 BF[D18C]                	mov	di,DestBuf		; ES:DI = ptr to dest path buf
 26932 000038A4 AB                      	stosw				; store "d:"
 26933                                  		
 26934 000038A5 C706[E08A]0000          	mov	word [DestSwitch],0	; clear destination switches
 26935                                  	;mov	byte [bp+4],2		
 26936 000038AB C6460402                	mov	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 26937                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 26938                                  	;mov	byte [bp+0],0		
 26939 000038AF C6460000                	mov	byte [bp],0
 26940 000038B3 E87408                  	call	SETSTARS		; add wildcards
 26941                                  GOT2ARGS:
 26942                                  	;	If destination pathname is "d:", add full wildcard filename
 26943                                  
 26944                                  	;cmp	byte [bp+1],2
 26945 000038B6 807E0102                	cmp	byte [bp+VARSTRUC.SIZ],2
 26946 000038BA 7516                    	jnz	short NOTSHORTDEST	; not two chars, can't be "d:"
 26947 000038BC B03A                    	mov	al,':'  ; 3Ah
 26948 000038BE 3806[D28C]              	cmp	byte [DestBuf+1],al
 26949 000038C2 750E                    	jnz	short NOTSHORTDEST	; it's just a 2-character filename
 26950                                  	;or	byte [bp+4],2
 26951 000038C4 804E0402                	or	byte [bp+VARSTRUC.INFO],2 ; mark destination 'wildcard present'
 26952 000038C8 BF[D38C]                	mov	di,DestBuf+2		; ES:DI = ptr after "d:"
 26953                                  	;mov	byte [bp+VARSTRUC.ISDIR],0 ; mark destination 'not a directory'
 26954                                  	;mov	byte [bp+0],0		
 26955 000038CB C6460000                	mov	byte [bp],0
 26956 000038CF E85808                  	call	SETSTARS		; add wildcards
 26957                                  NOTSHORTDEST:
 26958                                  	;	If destination pathname ends with "\", try to make
 26959                                  	;	sure it's "d:\".
 26960                                  
 26961                                  	;mov	di,[bp+2]
 26962 000038D2 8B7E02                  	mov	di,[bp+VARSTRUC.TTAIL]	; DI = ptr to last path element
 26963 000038D5 803D00                  	cmp	byte [di],0
 26964 000038D8 7515                    	jnz	short CHKSWTCHES	; not a null, so last char not "\"
 26965                                  
 26966 000038DA BA[5680]                	mov	dx,badcd_ptr
 26967 000038DD B03A                    	mov	al,':'
 26968 000038DF 3845FE                  	cmp	[di-2],al
 26969 000038E2 75A8                    	jne	short CERROR4J		; it's not "d:\", exit with error msg
 26970                                  	;mov	byte [bp+0],2
 26971                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; destination 'is a directory'
 26972 000038E4 C6460002                	mov	byte [bp],2
 26973                                  	;or	byte [bp+4],6
 26974 000038E8 804E0406                	or	byte [bp+VARSTRUC.INFO],6 ; destination wildcarded and contains
 26975                                  					  ;  path character
 26976 000038EC E83B08                  	call	SETSTARS		; add wildcards
 26977                                  CHKSWTCHES:
 26978                                  	;	We have enough information about the destination for now.
 26979                                  
 26980                                  	;	Turn on verify if requested. Save the current verify flag.
 26981                                  
 26982                                  	; 23/03/2023
 26983                                  	; MSDOS 6.0 (& MSDOS 5.0) COMMAND.COM
 26984                                  	;mov	dx,BADPARMPTR
 26985                                  	
 26986 000038EF A1[E28A]                	mov	ax,[AllSwitch]		; AX = all switch flags
 26987                                  
 26988                                  	; 23/03/2023
 26989                                  	; MSDOS 3.3
 26990                                  	;;test	ax,~SWITCHCOPY ; 7FE3h
 26991                                  	;test	ax,NOT_SWITCHCOPY ; 7FE3h ; 13/10/2018
 26992                                  	;jnz	short CERROR4J
 26993                                  	
 26994                                  	; 23/03/2023
 26995                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26996                                  	;test	ax,SwitchV ; 10h
 26997                                  	; 18/04/2023
 26998                                  	;test	ax,10h
 26999 000038F2 A810                    	test	al,10h  ; test al,SwitchV
 27000 000038F4 7414                    	jz	short NOVERIF		; no /v, no verify
 27001                                  
 27002 000038F6 B454                    	mov	ah,Get_Verify_On_Write ; 54h
 27003 000038F8 CD21                    	int	21h		; DOS -	2+ - GET VERIFY	FLAG
 27004                                  				; Return: AL = 00h if flag OFF
 27005                                  				; AL = 01h if flag ON
 27006 000038FA 1E                      	push	ds
 27007 000038FB 8E1E[C58A]              	mov	ds,[RESSEG]
 27008 000038FF 30E4                    	xor	ah,ah
 27009 00003901 A3[9001]                	mov	[VerVal],ax		; save current verify flag
 27010 00003904 1F                      	pop	ds
 27011 00003905 B8012E                  	mov	ax,(SET_VERIFY_ON_WRITE<<8)|1 ; 2E01h
 27012 00003908 CD21                    	int	21h		; DOS -	SET VERIFY FLAG
 27013                                  				; DL = 00h,AL = 01h VERIFY on / 00h VERIFY off
 27014                                  NOVERIF:
 27015                                  	;*	Scan for first source.
 27016                                  
 27017 0000390A 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27018 0000390C BE8100                  	mov	si,81h			; SI = ptr into command line
 27019                                  	;mov	bl,[PLUS_CHR]		; BL = special CParse delimiter = "+"
 27020                                  	; 23/03/2023
 27021 0000390F B32B                    	mov	bl,'+' ; 2Bh
 27022                                  SCANFSRC:
 27023 00003911 BF[8E8D]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27024 00003914 E84208                  	call	cparse			; parse first source pathname
 27025 00003917 F6C701                  	test	bh,1			; switch?
 27026 0000391A 75F5                    	jnz	short SCANFSRC		; yes, try again
 27027 0000391C 092E[E08A]              	or	[DestSwitch],bp		; include copy-wide switches on dest
 27028                                  
 27029                                  ;	Set ascii copying mode if concatenating, unless /b is specified.
 27030                                  
 27031                                  	; 23/03/2023
 27032 00003920 F7C50800                	test	bp,8
 27033                                  	;test	bp,SWITCHB
 27034 00003924 750C                    	jnz	short NOSETCASC		; /b - explicit binary copy
 27035 00003926 803E[DA8A]00            	cmp	byte [Concat],0
 27036 0000392B 7405                    	jz	short NOSETCASC		; we're not concatenating
 27037 0000392D C606[ED8D]04            	mov	byte [ASCII],4
 27038                                  	;mov	byte [ASCII],SWITCHA	; set ascii copy
 27039                                  NOSETCASC:
 27040 00003932 E8B503                  	call	SOURCE_SET		; set source variables
 27041 00003935 E84400                  	call	FRSTSRC			; set up first source copy
 27042 00003938 E99500                  	jmp	FIRSTENT		; jump into the copy loop
 27043                                  
 27044                                  ; ---------------------------------------------------------------------------
 27045                                  
 27046                                  	; 24/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27047                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3AE9h
 27048                                  ENDCOPY:
 27049                                  	;*	End of the road. Close destination, display # files
 27050                                  	;	copied (meaning # destinations), and go back to main
 27051                                  	;	transient COMMAND code.
 27052                                  
 27053 0000393B E8C102                  	call	CLOSEDEST
 27054                                  ENDCOPY2:
 27055 0000393E BA[4D7F]                	mov	dx,copied_ptr
 27056 00003941 8B36[F18A]              	mov	si,[FileCnt]
 27057 00003945 8936[B78C]              	mov	[Copy_num],si
 27058 00003949 E8A314                  	call	std_printf
 27059 0000394C E9B5C7                  	jmp	TCOMMAND		; stack could be messed up
 27060                                  
 27061                                  ; ---------------------------------------------------------------------------
 27062                                  
 27063                                  SRCNONEXIST:
 27064                                  	;*	Source doesn't exist. If concatenating, ignore and continue.
 27065                                  	;	Otherwise, say 'file not found' and quit.
 27066                                  
 27067 0000394F 803E[DA8A]00            	cmp	byte [Concat],0
 27068 00003954 7543                    	jne	short NEXTSRC		; concatenating - go on to next source
 27069                                  
 27070                                  	; 24/03/2023
 27071                                  	; MSDOS 3.3
 27072                                  	;mov	dx,SRCBUF
 27073                                  	;mov	[STRING_PTR_1],dx
 27074                                  	;mov	dx,STRINGBUF1PTR
 27075                                  	;call	STD_PRINTF
 27076                                  	;mov	dx,FNOTFOUNDPTR
 27077                                  	;jmp	COPYERR
 27078                                  
 27079                                  	; 24/*03/2023
 27080                                  	; MSDOS 6.0
 27081                                  	;	Set up error message.
 27082 00003956 C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 27083                                  				  	; extended error msg
 27084 0000395B BA[1B7F]                	mov	dx,extend_buf_ptr	; DX = ptr to msg block
 27085 0000395E C706[1B7F]0200          	mov	word [extend_buf_ptr],ERROR_FILE_NOT_FOUND ; 2
 27086                                  					; 'file not found' msg#
 27087 00003964 C706[B58C][348D]        	mov	word [string_ptr_2],SrcBuf
 27088                                  					; point at bad pathname
 27089 0000396A C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst ; 1
 27090                                  					; 1 substitution
 27091 0000396F E90305                  	jmp	COPYERR			; print msg and clean up
 27092                                  
 27093                                  ; ---------------------------------------------------------------------------
 27094                                  
 27095                                  SOURCEPROC:
 27096                                  
 27097                                  	;*	Preparatory processing for each source file.
 27098                                  	;	Called at FrstSrc for first source file.
 27099                                  
 27100 00003972 E87503                  	call	SOURCE_SET		; set source variables & ascii/binary
 27101 00003975 803E[DA8A]00            	cmp	byte [Concat],0
 27102 0000397A 750B                    	jne	short LEAVECFLAG	; concatenating - leave CFlag alone
 27103                                  
 27104                                  ; ---------------------------------------------------------------------------
 27105                                  
 27106                                  FRSTSRC:
 27107 0000397C 31C0                    	xor	ax,ax
 27108 0000397E A2[E48A]                	mov	[CFLAG],al		; 'destination not created'
 27109 00003981 A3[E88A]                	mov	[NXTADD],ax		; copy buffer ptr = 0
 27110 00003984 A2[E58A]                	mov	[DestClosed],al		; 'destination not closed'
 27111                                  
 27112                                  LEAVECFLAG:
 27113 00003987 8936[E58D]              	mov	[SRCPT],si		; save cmd-line ptr
 27114 0000398B BF[A789]                	mov	di,USERDIR1		; DI = ptr to buf for user's 
 27115                                  						;   current dir
 27116 0000398E BD[2F8D]                	mov	bp,SrcVars		; BP = base of source variables
 27117 00003991 E84606                  	call	BUILDPATH		; cd to source dir, figure
 27118                                  						;   out stuff about source
 27119 00003994 8B36[318D]              	mov	si,[SrcTail]		; SI = ptr to source filename
 27120 00003998 C3                      	retn
 27121                                  
 27122                                  ; ---------------------------------------------------------------------------
 27123                                  
 27124                                  	; 25/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27125                                  NEXTSRC:
 27126                                  	;*	Next source. Come here after handling each pathname.
 27127                                  	;	We're done unless there are additional source pathnames
 27128                                  	;	to be appended.
 27129                                  	;
 27130                                  	;	Note that all files matching an ambiguous pathname
 27131                                  	;	are processed before coming here.
 27132                                  
 27133 00003999 803E[EE8D]00            	cmp	byte [PLUS],0
 27134                                  	;jne	short MORECP		; copying "+" sources - keep going
 27135                                  	; 26/04/2023
 27136                                  ;ENDCOPYJ2:
 27137                                  	;jmp	short ENDCOPY
 27138 0000399E 749B                    	je	short ENDCOPY
 27139                                  MORECP:
 27140 000039A0 31ED                    	xor	bp,bp			; BP = switch flags accumulator
 27141 000039A2 8B36[E58D]              	mov	si,[SRCPT]		; SI = ptr to current pos'n in cmd line
 27142                                  	;mov	bl,[PLUS_CHR]		; BL = special delimiter = "+"
 27143 000039A6 B32B                    	mov	bl,'+' ; 2Bh
 27144                                  SCANSRC:
 27145 000039A8 BF[8E8D]                	mov	di,ScanBuf		; DI = ptr to pathname buf
 27146 000039AB E8AB07                  	call	cparse			; parse first source name
 27147                                  	;jb	short ENDCOPYJ2		; CR found - we're done
 27148                                  	; 26/04/2023
 27149 000039AE 728B                    	jb	short ENDCOPY
 27150                                  
 27151 000039B0 F6C780                  	test	bh,80h
 27152                                  	;jz	short ENDCOPYJ2		; no "+" delimiter - we're done
 27153                                  	; 26/04/2023
 27154 000039B3 7486                    	jz	short ENDCOPY
 27155                                  
 27156 000039B5 F6C701                  	test	bh,1
 27157 000039B8 75EE                    	jnz	short SCANSRC		; switch found - keep looking
 27158                                  
 27159                                  	;	ScanBuf contains the next source pathname.
 27160                                  
 27161 000039BA E8B5FF                  	call	SOURCEPROC		; prepare this source
 27162 000039BD 803E[2A8C]01            	cmp	byte [comma],1		; was +,, found last time?
 27163 000039C2 7507                    	jnz	short NOSTAMP		;  no - try for a file
 27164 000039C4 C606[2B8C]01            	mov	byte [plus_comma],1	; yes - set flag
 27165 000039C9 EB84                    	jmp	short SRCNONEXIST	; we know we won't find it
 27166                                  
 27167                                  NOSTAMP:
 27168 000039CB C606[2B8C]00            	mov	byte [plus_comma],0	; reset +,, flag
 27169                                  
 27170                                  ; ---------------------------------------------------------------------------
 27171                                  
 27172                                  FIRSTENT:
 27173                                  
 27174                                  ;M047
 27175                                  ; The only case we need to worry about is when the source is wildcarded and
 27176                                  ;the destination is not. For this case, ConCat is not yet set to indicate
 27177                                  ;concatenation. We check for this case.
 27178                                  ;
 27179                                  ;NB: This change has been backed out and replaced by M048. This is not the
 27180                                  ;right place to do this check.
 27181                                  
 27182                                  	;	This is where we enter the loop with the first source.
 27183                                  
 27184 000039D0 BF5C00                  	mov	di,FCB ; 5Ch		; DI = ptr to FCB
 27185 000039D3 B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27186 000039D6 CD21                    	int	21h		; DOS -	PARSE FILENAME
 27187                                  				; DS:SI	-> string to parse
 27188                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27189                                  				; AL = bit mask	to control parsing
 27190 000039D8 803C00                  	cmp	byte [si],0		; did we parse the whole thing?
 27191 000039DB 7516                    	jne	short SRCHDONE		; no, error, simulate 'not found'
 27192 000039DD A1[348D]                	mov	ax,[SrcBuf]		; AX = possible "d:"
 27193 000039E0 80FC3A                  	cmp	ah,':'
 27194 000039E3 7402                    	je	short DRVSPEC1		; AX = definite "d:"
 27195 000039E5 B040                    	mov	al,'@'	; 40h		; AL = drive 'letter' for current drive
 27196                                  DRVSPEC1:
 27197 000039E7 0C20                    	or	al,20h			; AL = lowercase drive letter
 27198 000039E9 2C60                    	sub	al,60h			; AL = drive id (0=current,1=A,..)
 27199                                  	;mov	[5Ch],al
 27200 000039EB A25C00                  	mov	[FCB],al		; put drive id in FCB
 27201                                  
 27202                                  	;	FCB contains drive and filename to search.
 27203                                  		
 27204 000039EE B411                    	mov	ah,Dir_Search_First ; 11h  ; AH = 'Find First File'	
 27205 000039F0 E8FC00                  	call	SEARCH
 27206                                  SRCHDONE:
 27207 000039F3 9C                      	pushf				; save flags from Search
 27208 000039F4 E88CEA                  	call	RestUDir1		; restore users current directory
 27209 000039F7 9D                      	popf				; restore flags from search
 27210 000039F8 7403                    	jz	short NEXTAMBIG0	; found the source - continue
 27211 000039FA E952FF                  	jmp	SRCNONEXIST		; didn't find the source
 27212                                  
 27213                                  NEXTAMBIG0:
 27214 000039FD 30C0                    	xor	al,al
 27215 000039FF 8606[EA8A]              	xchg	al,[FRSTSRCH]
 27216 00003A03 08C0                    	or	al,al
 27217 00003A05 740B                    	jz	short NEXTAMBIG
 27218                                  SETNMEL:
 27219 00003A07 B90C00                  	mov	cx,12
 27220 00003A0A BF[148C]                	mov	di,SDIRBUF
 27221 00003A0D BE[CE8B]                	mov	si,DIRBUF
 27222 00003A10 F3A4                    	rep	movsb			; save very first source name
 27223                                  NEXTAMBIG:
 27224 00003A12 30C0                    	xor	al,al
 27225 00003A14 A2[E88D]                	mov	[NOWRITE],al		; turn off nowrite
 27226 00003A17 8B3E[318D]              	mov	di,[SrcTail]
 27227 00003A1B BE[CF8B]                	mov	si,DIRBUF+1
 27228 00003A1E E8DEEB                  	call	FCB_TO_ASCZ		; SrcBuf has complete name
 27229                                  MELDO:
 27230 00003A21 803E[DA8A]00            	cmp	byte [Concat],0
 27231 00003A26 7507                    	jnz	short SHOWCPNAM		; concatenating - show name
 27232 00003A28 F606[338D]02            	test	byte [SrcInfo],2	; wildcard - show name
 27233 00003A2D 7409                    	jz	short DOREAD
 27234                                  SHOWCPNAM:
 27235                                  	; 25/03/2023
 27236                                  	; MSDOS 3.3
 27237                                  	;mov	dx,SRCBUF
 27238                                  	;mov	[STRING_PTR_2],dx
 27239                                  	;mov	dx,STRINGBUF2PTR
 27240                                  	;call	STD_PRINTF
 27241                                  	;call	CRLF2
 27242                                  	; 25/03/2023 - Retro DOS 4.0 COMMAND.COM
 27243                                  	; MSDOS 6.0 (& MSDOS 5.0
 27244 00003A2F BA[C680]                	mov	dx,file_name_ptr
 27245 00003A32 E8BA13                  	call	std_printf
 27246 00003A35 E89BEB                  	call	CRLF2
 27247                                  DOREAD:
 27248 00003A38 E8C500                  	call	DOCOPY
 27249 00003A3B 803E[DA8A]00            	cmp	byte [Concat],0
 27250 00003A40 750A                    	jnz	short NODCLOSE		; concatenating - don't close dest
 27251                                  
 27252 00003A42 E8BA01                  	call	CLOSEDEST		; close current destination
 27253 00003A45 7205                    	jc	short NODCLOSE		; concatenating - dest not closed
 27254                                  
 27255 00003A47 C606[E48A]00            	mov	byte [CFLAG],0		; 'destination not created'
 27256                                  NODCLOSE:
 27257 00003A4C 803E[DA8A]00            	cmp	byte [Concat],0		
 27258 00003A51 740A                    	jz	short NOFLUSH
 27259                                  
 27260                                  ;	Concatenating - flush output between source files so LostErr
 27261                                  ;	stuff works correctly.
 27262                                  
 27263                                  	;invoke	FlshFil  ; MSDOS 6.0
 27264                                  	; 25/03/2023
 27265 00003A53 E8E202                  	call	FlshFil
 27266                                  	;call	FLUSHFIL ; MSDOS 3.3
 27267                                  
 27268 00003A56 F606[2C8D]FF            	test	byte [MELCOPY],0FFh
 27269                                  	;jz	short NOFLUSH
 27270                                  	;jmp	short DOMELCOPY
 27271                                  	; 25/03/2023
 27272 00003A5B 750C                    	jnz	short DOMELCOPY
 27273                                  NOFLUSH:
 27274 00003A5D E88300                  	call	SEARCHNEXT		; try next match
 27275 00003A60 755D                    	jnz	short NEXTSRCJ		; not found - finished with 
 27276                                  					;   this source spec
 27277 00003A62 C606[E58A]00            	mov	byte [DestClosed],0	; 'destination not closed'
 27278 00003A67 EBA9                    	jmp	short NEXTAMBIG		; do next ambig match
 27279                                  
 27280                                  DOMELCOPY:
 27281 00003A69 803E[2C8D]FF            	cmp	byte [MELCOPY],0FFh
 27282 00003A6E 740D                    	je	short CONTMEL
 27283 00003A70 8B36[E58D]              	mov	si,[SRCPT]
 27284 00003A74 8936[2D8D]              	mov	[MELSTART],si
 27285 00003A78 C606[2C8D]FF            	mov	byte [MELCOPY],0FFh
 27286                                  
 27287                                  CONTMEL:
 27288 00003A7D 31ED                    	xor	bp,bp
 27289 00003A7F 8B36[E58D]              	mov	si,[SRCPT]
 27290                                  	;mov	bl,[PLUS_CHR]
 27291                                  	; 25/03/2023
 27292 00003A83 B32B                    	mov	bl,'+'
 27293                                  SCANSRC2:
 27294 00003A85 BF[8E8D]                	mov	di,ScanBuf
 27295 00003A88 E8CE06                  	call	cparse
 27296 00003A8B F6C780                  	test	bh,80h
 27297 00003A8E 7432                    	jz	short NEXTMEL		; no "+" - go back to start
 27298 00003A90 F6C701                  	test	bh,1
 27299 00003A93 75F0                    	jnz	short SCANSRC2		; switch - keep scanning
 27300 00003A95 E8DAFE                  	call	SOURCEPROC
 27301 00003A98 E8E8E9                  	call	RestUDir1
 27302 00003A9B BF[4F8B]                	mov	di,DESTFCB2
 27303 00003A9E B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 27304 00003AA1 CD21                    	int	21h		; DOS -	PARSE FILENAME
 27305                                  				; DS:SI	-> string to parse
 27306                                  				; ES:DI	-> buffer to fill with unopened	FCB
 27307                                  				; AL = bit mask	to control parsing
 27308 00003AA3 BB[158C]                	mov	bx,SDIRBUF+1
 27309 00003AA6 BE[508B]                	mov	si,DESTFCB2+1
 27310 00003AA9 8B3E[318D]              	mov	di,[SrcTail]
 27311                                  
 27312 00003AAD E8FB04                  	call	BUILDNAME
 27313                                  
 27314 00003AB0 803E[DA8A]00            	cmp	byte [Concat],0
 27315 00003AB5 7405                    	je	short MELDOJ		; not concatenating - continue
 27316                                  
 27317                                  	;	Yes, turn off nowrite because this part of the code 
 27318                                  	;	is only reached after the first file has been dealt with.
 27319                                  
 27320 00003AB7 C606[E88D]00            	mov	byte [NOWRITE],0
 27321                                  MELDOJ:
 27322 00003ABC E962FF                  	jmp	MELDO
 27323                                  NEXTSRCJ:
 27324 00003ABF E9D7FE                  	jmp	NEXTSRC
 27325                                  
 27326                                  NEXTMEL:
 27327 00003AC2 E83A01                  	call	CLOSEDEST
 27328 00003AC5 31C0                    	xor	ax,ax
 27329 00003AC7 A2[E48A]                	mov	[CFLAG],al
 27330 00003ACA A3[E88A]                	mov	[NXTADD],ax
 27331 00003ACD A2[E58A]                	mov	[SPECDRV],al
 27332 00003AD0 8B36[2D8D]              	mov	si,[MELSTART]
 27333 00003AD4 8936[E58D]              	mov	[SRCPT],si
 27334 00003AD8 E80800                  	call	SEARCHNEXT
 27335 00003ADB 7403                    	jz	short SETNMELJ
 27336 00003ADD E95EFE                  	jmp	ENDCOPY2
 27337                                  SETNMELJ:
 27338 00003AE0 E924FF                  	jmp	SETNMEL
 27339                                  
 27340                                  ; ---------------------------------------------------------------------------
 27341                                  
 27342                                  SEARCHNEXT:
 27343 00003AE3 B412                    	mov	ah,Dir_Search_Next ; 12h
 27344 00003AE5 F606[338D]02            	test	byte [SrcInfo],2
 27345 00003AEA 7503                    	jnz	short SEARCH		; do search-next if ambig
 27346 00003AEC 08E4                    	or	ah,ah			; reset zero flag
 27347 00003AEE C3                      	retn
 27348                                  
 27349                                  ; ---------------------------------------------------------------------------
 27350                                  
 27351                                  SEARCH:
 27352 00003AEF 50                      	push	ax
 27353 00003AF0 B41A                    	mov	ah,Set_DMA ; 1Ah
 27354 00003AF2 BA[CE8B]                	mov	dx,DIRBUF	; put result of search in dirbuf
 27355 00003AF5 CD21                    	int	21h	; DOS -	SET DISK TRANSFER AREA ADDRESS
 27356                                  			; DS:DX	-> disk	transfer buffer
 27357 00003AF7 58                      	pop	ax		; restore search first/next command
 27358 00003AF8 BA5C00                  	mov	dx,FCB ; 5Ch
 27359 00003AFB CD21                    	int	21h		; Do the search
 27360 00003AFD 08C0                    	or	al,al
 27361 00003AFF C3                      	retn
 27362                                  
 27363                                  ; ---------------------------------------------------------------------------
 27364                                  
 27365                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27366                                  DOCOPY:
 27367 00003B00 BE[348D]                	mov	si,SrcBuf	; do name translate of source
 27368 00003B03 BF[F387]                	mov	di,SRCXNAME	; save for name comparison
 27369 00003B06 B460                    	mov	ah,xNameTrans ; 60h
 27370 00003B08 CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 27371                                  			; DS:SI	-> ASCIZ relative path string or directory name
 27372                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 27373 00003B0A C606[D88A]00            	mov	byte [RDEOF],0	; no EOF yet
 27374                                  
 27375                                  	; MSDOS 6.0
 27376                                  	;mov	ax,ExtOpen shl 8	; open the file
 27377                                  	; 26/03/2023
 27378 00003B0F B8006C                  	mov	ax,6C00h
 27379                                  ;M046
 27380                                  ; For reads, the sharing mode should be deny none so that any process can
 27381                                  ;open this file again in any other sharing mode. This is mainly to allow
 27382                                  ;multiple command.com's to access the same file without getting sharing
 27383                                  ;violations
 27384                                  ;
 27385                                  	;mov	bx,deny_none|read_open_mode
 27386 00003B12 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 27387 00003B15 31C9                    	xor	cx,cx			; no special files
 27388                                  	;mov	dx,read_open_flag	; set up open flags
 27389 00003B17 BA0101                  	mov	dx,101h
 27390 00003B1A CD21                    	int	21h
 27391                                  	; 26/03/2023
 27392 00003B1C 7230                    	jc	short Error_On_Source
 27393                                  	;jnc	short OPENOK
 27394                                  
 27395                                  	;	Bogosity: IBM wants us to issue Access Denied in this case.
 27396                                  	;	They asked for it...
 27397                                  
 27398                                  	;jmp	short Error_On_Source ;AC022; clean up and exit
 27399                                  
 27400                                  	; 26/03/2023
 27401                                  	; MSDOS 3.3
 27402                                  	;mov	dx,SRCBUF
 27403                                  	;mov	ax,OPEN*256 ; 3D00h
 27404                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 27405                                  	;			; DS:DX	-> ASCIZ filename
 27406                                  	;			; AL = access mode
 27407                                  	;			; 0 - read
 27408                                  	;jnc	short OPENOK
 27409                                  	;call	GET_EXT_ERR_NUMBER
 27410                                  	;pushf
 27411                                  	;cmp	ax,65
 27412                                  	;jnz	short DOCOPY_ERR
 27413                                  	;mov	dx,ACCDENPTR
 27414                                  	;call	STD_PRINTF
 27415                                  ;DOCOPY_ERR:
 27416                                  	;popf
 27417                                  	;retn
 27418                                  
 27419                                  	; 26/03/2023
 27420                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27421                                  OPENOK:
 27422 00003B1E 89C3                    	mov	bx,ax
 27423 00003B20 891E[8B8D]              	mov	[SRCHAND],bx		; save handle
 27424 00003B24 B80057                  	mov	ax,File_Times*256 ; 5700h
 27425 00003B27 CD21                    	int	21h		; DOS -	2+ - GET FILE'S DATE/TIME
 27426                                  				; BX = file handle
 27427                                  
 27428 00003B29 7223                    	jc	short Error_On_Source ; MSDOS 6.0
 27429                                  
 27430 00003B2B 8916[F08D]              	mov	[CPDATE],dx		; save date
 27431 00003B2F 890E[F28D]              	mov	[CPTIME],cx		; save time
 27432                                  
 27433                                  	; MSDOS 6.0
 27434                                  	;jmp	short No_Copy_Xa 	; (xa copy code removed)
 27435                                  	; 26/04/2023
 27436                                  No_Copy_Xa:
 27437                                  	; 26/03/2023
 27438                                  	;mov	bx,[SRCHAND]		;AN022; get handle back
 27439                                  
 27440                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27441 00003B33 B80044                  	mov	ax,(IOCTL<<8) ; 4400h
 27442 00003B36 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 27443                                  				; BX = file or device handle
 27444                                  	;and	dl,devid_ISDEV ; 80h
 27445                                  	; 18/04/2023
 27446 00003B38 80E280                  	and	dl,80h ; devid_ISDEV
 27447 00003B3B 8816[8D8D]              	mov	[SRCISDEV],dl		; set source info
 27448 00003B3F 7436                    	jz	short COPYLP		; source not a device
 27449 00003B41 803E[E98D]00            	cmp	byte [BINARY],0
 27450 00003B46 742F                    	je	short COPYLP		; ascii device ok
 27451 00003B48 BA[7F80]                	mov	dx,INBDEV_PTR		; cannot do binary input
 27452 00003B4B E92703                  	jmp	COPYERR
 27453                                  
 27454                                  Error_On_Source:			;AN022; we have a BAD error
 27455 00003B4E E891E1                  	call	Set_Ext_Error_Msg	;AN022; set up the error message
 27456 00003B51 C706[B58C][348D]        	mov	word [string_ptr_2],SrcBuf
 27457                                  				;AN022; get address of failed string
 27458 00003B57 C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst ; 1
 27459                                  				;AN022; put number of subst in control block
 27460 00003B5C E88812                  	call	std_eprintf		;AN022; print it
 27461                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 27462 00003B5F 8B1E[8B8D]              	mov	bx,[SRCHAND]
 27463                                  	;cmp	word [SRCHAND],0	;AN022; did we open the file?
 27464                                  	;je	short No_Close_Src	;AN022; no - don't close
 27465 00003B63 09DB                    	or	bx,bx
 27466 00003B65 7403                    	jz	short No_Close_Src
 27467                                  	;call	CLOSESRC		;AN022; clean up
 27468                                  	; 26/03/2023
 27469 00003B67 E89000                  	call	CLOSESRC2 ; bx = [SRCHAND]
 27470                                  No_Close_Src:				;AN022;
 27471 00003B6A 803E[E48A]00            	cmp	byte [CFLAG],0		;AN022; was destination created?
 27472 00003B6F 7403                    	je	short EndCopyJ3		;AN022; no - just cleanup and exit
 27473 00003B71 E9C7FD                  	jmp	ENDCOPY			;AN022; clean up concatenation and exit
 27474                                  EndCopyJ3:				;AN022;
 27475 00003B74 E9C7FD                  	jmp	ENDCOPY2		;AN022;
 27476                                  
 27477                                  	; 26/04/2023
 27478                                  ;No_Copy_Xa:
 27479                                  ;	; 26/03/2023
 27480                                  ;	;mov	bx,[SRCHAND]		;AN022; get handle back
 27481                                  ;
 27482                                  ;	; MSDOS 3.3 (& MSDOS 6.0)
 27483                                  ;	mov	ax,(IOCTL<<8) ; 4400h
 27484                                  ;	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 27485                                  ;				; BX = file or device handle
 27486                                  ;	;and	dl,devid_ISDEV ; 80h
 27487                                  ;	; 18/04/2023
 27488                                  ;	and	dl,80h ; devid_ISDEV
 27489                                  ;	mov	[SRCISDEV],dl		; set source info
 27490                                  ;	jz	short COPYLP		; source not a device
 27491                                  ;	cmp	byte [BINARY],0
 27492                                  ;	je	short COPYLP		; ascii device ok
 27493                                  ;	mov	dx,INBDEV_PTR		; cannot do binary input
 27494                                  ;	jmp	COPYERR
 27495                                  
 27496                                  COPYLP:
 27497                                  	; 26/03/2023
 27498 00003B77 8B1E[8B8D]              	mov	bx,[SRCHAND] ; ? ; 26/03/2023
 27499 00003B7B 8B0E[E68A]              	mov	cx,[BYTCNT]
 27500 00003B7F 8B16[E88A]              	mov	dx,[NXTADD]
 27501 00003B83 29D1                    	sub	cx,dx			; compute available space
 27502 00003B85 750E                    	jnz	short GOTROOM
 27503 00003B87 E8AE01                  	call	FlshFil   ; MSDOS 6.0
 27504                                  	;call	FLUSHFIL  ; MSDOS 3.3
 27505 00003B8A 803E[EC8D]00            	cmp	byte [TERMREAD],0
 27506 00003B8F 7565                    	jne	short CLOSESRC		; give up
 27507 00003B91 8B0E[E68A]              	mov	cx,[BYTCNT]
 27508                                  GOTROOM:
 27509 00003B95 1E                      	push	ds
 27510 00003B96 8E1E[C78A]              	mov	ds,[TPA]
 27511 00003B9A B43F                    	mov	ah,READ ; 3Fh
 27512 00003B9C CD21                    	int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
 27513                                  				; BX = file handle,CX = number of bytes to read
 27514                                  				; DS:DX	-> buffer
 27515 00003B9E 1F                      	pop	ds
 27516                                  	;jc	short CLOSESRC	; MSDOS 3.3
 27517                                  	; 26/03/2023
 27518 00003B9F 72AD                    	jc	short Error_On_Source ; MSDOS 6.0
 27519 00003BA1 89C1                    	mov	cx,ax			; get count
 27520 00003BA3 E351                    	jcxz	CLOSESRC		; no more to read
 27521 00003BA5 803E[8D8D]00            	cmp	byte [SRCISDEV],0
 27522 00003BAA 7507                    	jne	short NOTESTA		; is a device, ascii mode
 27523 00003BAC 803E[ED8D]00            	cmp	byte [ASCII],0
 27524 00003BB1 741B                    	je	short BINREAD
 27525                                  NOTESTA:
 27526 00003BB3 89CA                    	mov	dx,cx
 27527 00003BB5 8B3E[E88A]              	mov	di,[NXTADD]
 27528 00003BB9 B01A                    	mov	al,1Ah
 27529 00003BBB 06                      	push	es
 27530 00003BBC 8E06[C78A]              	mov	es,[TPA]		; scan for EOF
 27531 00003BC0 F2AE                    	repne	scasb
 27532 00003BC2 07                      	pop	es
 27533 00003BC3 7505                    	jnz	short USEALL
 27534 00003BC5 FE06[D88A]              	inc	byte [RDEOF]
 27535 00003BC9 41                      	inc	cx
 27536                                  USEALL:
 27537 00003BCA 29CA                    	sub	dx,cx
 27538 00003BCC 89D1                    	mov	cx,dx
 27539                                  BINREAD:
 27540 00003BCE 030E[E88A]              	add	cx,[NXTADD]
 27541 00003BD2 890E[E88A]              	mov	[NXTADD],cx
 27542 00003BD6 3B0E[E68A]              	cmp	cx,[BYTCNT]		; is buffer full?
 27543 00003BDA 720C                    	jb	short TESTDEV		; if not, we may have found eof
 27544                                  	; 26/03/2023
 27545 00003BDC E85901                  	call	FlshFil
 27546                                  	;call	FLUSHFIL
 27547 00003BDF 803E[EC8D]00            	cmp	byte [TERMREAD],0
 27548 00003BE4 7510                    	jne	short CLOSESRC		; give up
 27549 00003BE6 EB8F                    	jmp	short COPYLP
 27550                                  TESTDEV:
 27551 00003BE8 803E[8D8D]00            	cmp	byte [SRCISDEV],0	; if file then EOF
 27552 00003BED 7407                    	je	short CLOSESRC
 27553 00003BEF 803E[D88A]00            	cmp	byte [RDEOF],0
 27554 00003BF4 7481                    	je	short COPYLP		; on device, go till ^Z
 27555                                  CLOSESRC:
 27556 00003BF6 8B1E[8B8D]              	mov	bx,[SRCHAND]
 27557                                  CLOSESRC2:
 27558 00003BFA B43E                    	mov	ah,CLOSE ; 3Eh
 27559 00003BFC CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 27560                                  				; BX = file handle
 27561                                  CLOSESRCDEST_RETN:
 27562 00003BFE C3                      	retn
 27563                                  
 27564                                  ; ---------------------------------------------------------------------------
 27565                                  
 27566                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27567                                  CLOSEDEST:
 27568                                  
 27569                                  	;	We are called to close the destination.
 27570                                  	;	We need to note whether or not there is any internal data left
 27571                                  	;	to be flushed out.
 27572                                  
 27573 00003BFF 803E[E58A]00            	cmp	byte [DestClosed],0
 27574 00003C04 75F8                    	jne	short CLOSESRCDEST_RETN	; don't double close
 27575 00003C06 A0[E08A]                	mov	al,[DestSwitch]
 27576 00003C09 E8C502                  	call	SETASC			; check for b or a switch
 27577 00003C0C 742E                    	jz	short BINCLOS		;   on destination
 27578 00003C0E 8B1E[E88A]              	mov	bx,[NXTADD]
 27579                                  ;
 27580                                  ;M048 -- TryFlush changes the state of ConCat flag. So, before we append a
 27581                                  ;^Z, let's always flush out. This way if the ConCat flag changes, we will
 27582                                  ;just return without appending a ^Z incorrectly for the first file (since we
 27583                                  ;are concatenating now). Also, in case it is a single file copy, we will
 27584                                  ;anyway write the ^Z out separately. The only drawback is that there is a
 27585                                  ;performance overhead on single ASCII file copies which now always involve
 27586                                  ;2 writes instead of 1 before. Is this really that important?
 27587                                  ;
 27588                                  ;M048;	cmp	bx,[BYTCNT]		; is memory full?
 27589                                  ;M048;	jne	short PutZ
 27590                                  
 27591                                  	; 26/03/2023
 27592                                  	; MSDOS 3.3
 27593                                  	;cmp	bx,[BYTCNT]		; is memory full?
 27594                                  	;jne	short PUTZ
 27595                                  
 27596                                  	; 26/03/2023
 27597 00003C12 E81601                  	call	TRYFLUSH		; flush (and double-check for concat)	
 27598 00003C15 7402                    	jz	short NOCONC
 27599                                  CONCHNG:
 27600 00003C17 F9                      	stc
 27601 00003C18 C3                      	retn
 27602                                  
 27603                                  NOCONC:	
 27604 00003C19 31DB                    	xor	bx,bx
 27605                                  PUTZ:
 27606 00003C1B 1E                      	push	ds
 27607 00003C1C 8E1E[C78A]              	mov	ds,[TPA]
 27608 00003C20 C7071A00                	mov	word [bx],1Ah	; add EOF mark (ctrl-Z)
 27609 00003C24 1F                      	pop	ds
 27610 00003C25 FF06[E88A]              	inc	word [NXTADD]	; make sure our ^z gets written	
 27611 00003C29 C606[E88D]00            	mov	byte [NOWRITE],0
 27612 00003C2E A1[EA8D]                	mov	ax,[WRITTEN]
 27613 00003C31 0306[E88A]              	add	ax,[NXTADD]
 27614 00003C35 7205                    	jc	short BINCLOS	; > 1
 27615 00003C37 83F801                  	cmp	ax,1
 27616 00003C3A 740C                    	je	short FORGETITJ	; Written = 0 NxtAdd = 1 (the ^Z)
 27617                                  BINCLOS:
 27618 00003C3C E8EC00                  	call	TRYFLUSH
 27619 00003C3F 75D6                    	jnz	short CONCHNG
 27620                                  
 27621                                  	; 26/04/2023
 27622 00003C41 833E[EA8D]00            	cmp	word [WRITTEN],0
 27623                                  	; 26/03/2023
 27624 00003C46 7503                    	jnz	short NO_FORGET
 27625                                  FORGETITJ:
 27626                                  	;jz	short FORGETIT	; never wrote nothing
 27627                                  	; 26/03/2023
 27628 00003C48 E98500                  	jmp	FORGETIT ; 18/04/2023
 27629                                  NO_FORGET:			; wrote something
 27630 00003C4B 8B1E[288D]              	mov	bx,[DESTHAND]
 27631 00003C4F 8B0E[F28D]              	mov	cx,[CPTIME]
 27632 00003C53 8B16[F08D]              	mov	dx,[CPDATE]
 27633 00003C57 803E[E78D]00            	cmp	byte [INEXACT],0 ; copy not exact?
 27634 00003C5C 7431                    	je	short DODCLOSE	; if no, copy date & time
 27635 00003C5E B42C                    	mov	ah,Get_Time ; 2Ch
 27636 00003C60 CD21                    	int	21h		; DOS -	GET CURRENT TIME
 27637                                  				; Return: CH = hours,CL = minutes,DH = seconds
 27638                                  				; DL = hundredths of seconds
 27639 00003C62 D0E1                    	shl	cl,1
 27640 00003C64 D0E1                    	shl	cl,1		; left justify min in cl
 27641 00003C66 D1E1                    	shl	cx,1
 27642 00003C68 D1E1                    	shl	cx,1
 27643 00003C6A D1E1                    	shl	cx,1		; hours to high 5 bits, min to 5-10
 27644 00003C6C D0EE                    	shr	dh,1		; divide seconds by 2 (now 5 bits)
 27645 00003C6E 08F1                    	or	cl,dh		; and stick into low 5 bits of cx
 27646 00003C70 51                      	push	cx		; save packed time
 27647 00003C71 B42A                    	mov	ah,Get_Date ; 2Ah
 27648 00003C73 CD21                    	int	21h		; DOS -	GET CURRENT DATE
 27649                                  				; Return: DL = day,DH = month,	CX = year
 27650                                  				; AL = day of the week (0=Sunday,1=Monday,etc.)
 27651 00003C75 81E9BC07                	sub	cx,1980
 27652 00003C79 86E9                    	xchg	ch,cl
 27653 00003C7B D1E1                    	shl	cx,1		; year to high 7 bits
 27654 00003C7D D0E6                    	shl	dh,1		; month to high 3 bits
 27655 00003C7F D0E6                    	shl	dh,1
 27656 00003C81 D0E6                    	shl	dh,1
 27657 00003C83 D0E6                    	shl	dh,1
 27658 00003C85 D0E6                    	shl	dh,1		; most sig bit of month in carry
 27659 00003C87 80D500                  	adc	ch,0		; put that bit next to year
 27660 00003C8A 08F2                    	or	dl,dh		; or low three of month into day
 27661 00003C8C 88EE                    	mov	dh,ch		; get year and high bit of month
 27662 00003C8E 59                      	pop	cx
 27663                                  DODCLOSE:
 27664 00003C8F 83FB00                  	cmp	bx,0
 27665 00003C92 7E36                    	jle	short CLOSEDONE
 27666 00003C94 B80157                  	mov	ax,(File_Times<<8)|1 ; 5701h
 27667 00003C97 CD21                    	int	21h		; DOS -	2+ - SET FILE'S DATE/TIME
 27668                                  				; BX = file handle,CX = time to be set
 27669                                  				; DX = date to be set
 27670                                  	; 26/03/2023
 27671                                  	; MSDOS 6.0
 27672 00003C99 721A                    	jc	short Cleanup_Err ;AN022; handle error
 27673                                  
 27674                                  	;	See if the destination has *anything* in it.
 27675                                  	;	If not, just close and delete it.
 27676                                  
 27677 00003C9B B80242                  	mov	ax,(LSEEK<<8)+2 ; 4202h	; seek to EOF
 27678 00003C9E 31D2                    	xor	dx,dx
 27679 00003CA0 89D1                    	mov	cx,dx
 27680 00003CA2 CD21                    	int	21h	; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 27681                                  			; AL = method: offset from end of file
 27682                                  	;	DX:AX is file size
 27683                                  
 27684 00003CA4 09C2                    	or	dx,ax
 27685 00003CA6 9C                      	pushf
 27686 00003CA7 B80044                  	mov	ax,(IOCTL<<8)+0 ; 4400h	; get the destination attributes
 27687 00003CAA CD21                    	int	21h	; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 27688                                  			; BX = file or device handle
 27689 00003CAC 52                      	push	dx		; save them away
 27690 00003CAD B43E                    	mov	ah,CLOSE ; 3Eh
 27691 00003CAF CD21                    	int	21h	; DOS -	2+ - CLOSE A FILE WITH HANDLE
 27692                                  			; BX = file handle
 27693 00003CB1 5A                      	pop	dx
 27694                                  
 27695                                  	; 26/03/2023 - Retro DOS v4.0 COMMAND.COM
 27696                                  	; MSDOS 6.0
 27697 00003CB2 730D                    	jnc	short Close_Cont ;AN022; handle error on close
 27698 00003CB4 9D                      	popf			;AN022; get the flags back
 27699                                  Cleanup_Err: 			;AN022;
 27700 00003CB5 E85A00                  	call	CleanUpErr	;AN022; attempt to delete the target
 27701                                  	; 26/03/2023
 27702                                  	;call	DestDelete	;AN022; attempt to delete the target
 27703                                  	;jmp	short FILECLOSED
 27704                                  	;			;AN022; close the file
 27705                                  	; 26/03/2023
 27706                                  DestDel_fclosed:
 27707 00003CB8 E82700                  	call	DestDelete
 27708                                  FILECLOSED:
 27709 00003CBB FE06[E58A]              	inc	byte [DestClosed]
 27710                                  RET50:
 27711 00003CBF F8                      	clc
 27712 00003CC0 C3                      	retn
 27713                                  	
 27714                                  Close_Cont:			;AN022; no error - co
 27715                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27716 00003CC1 9D                      	popf
 27717 00003CC2 7506                    	jnz	short CLOSEDONE
 27718 00003CC4 F7C28000                	test	dx,80h		; is the destination a device?
 27719                                  	;jnz	short CLOSEDONE	; yes, copy succeeded
 27720                                  	;call	DestDelete
 27721                                  	;jmp	short FILECLOSED
 27722                                  	; 26/03/2023
 27723 00003CC8 74EE                    	jz	short DestDel_fclosed
 27724                                  CLOSEDONE:
 27725 00003CCA FF06[F18A]              	inc	word [FileCnt]
 27726                                  	; 26/03/2023
 27727 00003CCE EBEB                    	jmp	short FILECLOSED
 27728                                  	
 27729                                  ;FILECLOSED:
 27730                                  ;	inc	byte [DestClosed]
 27731                                  ;RET50:
 27732                                  	;clc
 27733                                  	;retn
 27734                                  
 27735                                  FORGETIT:
 27736 00003CD0 8B1E[288D]              	mov	bx,[DESTHAND]
 27737 00003CD4 E8B8FF                  	call	DODCLOSE	 ; close the dest	
 27738 00003CD7 E80800                  	call	DestDelete
 27739 00003CDA C706[F18A]0000          	mov	word [FileCnt],0 ; no files transferred
 27740 00003CE0 EBDD                    	jmp	short RET50
 27741                                  
 27742                                  ; ---------------------------------------------------------------------------
 27743                                  
 27744                                  	; 26/03/2023
 27745                                  DestDelete:
 27746 00003CE2 BA[D18C]                	mov	dx,DestBuf
 27747 00003CE5 B441                    	mov	ah,Unlink ; 41h
 27748 00003CE7 CD21                    	int	21h	; DOS -	2+ - DELETE A FILE (UNLINK)
 27749                                  			; DS:DX	-> ASCIZ pathname of file to delete 
 27750                                  			;		(no wildcards allowed)
 27751 00003CE9 C3                      	retn
 27752                                  
 27753                                  ; ---------------------------------------------------------------------------
 27754                                  
 27755                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27756                                  SOURCE_SET:
 27757 00003CEA 56                      	push	si
 27758 00003CEB A1[FB8D]                	mov	ax,[STARTEL]
 27759 00003CEE BE[8E8D]                	mov	si,ScanBuf	; adjust to copy
 27760 00003CF1 29F0                    	sub	ax,si
 27761 00003CF3 BF[348D]                	mov	di,SrcBuf
 27762 00003CF6 01F8                    	add	ax,di
 27763 00003CF8 A3[318D]                	mov	[SrcTail],ax
 27764 00003CFB 880E[308D]              	mov	[SrcSiz],cl	; save its size
 27765 00003CFF 41                      	inc	cx		; include the nul
 27766 00003D00 F3A4                    	rep	movsb		; save this source
 27767 00003D02 883E[338D]              	mov	[SrcInfo],bh	; save info about it
 27768 00003D06 5E                      	pop	si
 27769 00003D07 89E8                    	mov	ax,bp		; switches so far
 27770 00003D09 E8C501                  	call	SETASC		; set a,b switches accordingly
 27771 00003D0C E86FEA                  	call	SWITCH		; get any more switches on this arg
 27772                                  	;call	SETASC		; set
 27773                                  	;retn
 27774                                  	; 26/03/2023
 27775 00003D0F E9BF01                  	jmp	SETASC
 27776                                  
 27777                                  ; =============== S U B	R O U T	I N E =======================================
 27778                                  
 27779                                  ; MSDOS 6.0
 27780                                  
 27781                                  ;****************************************************************
 27782                                  ;*
 27783                                  ;* ROUTINE:	CleanupErr
 27784                                  ;*
 27785                                  ;* FUNCTION:	Issues extended error message for destination
 27786                                  ;*		if not alreay issued
 27787                                  ;*
 27788                                  ;* INPUT:	return from INT 21
 27789                                  ;*
 27790                                  ;* OUTPUT:	none
 27791                                  ;*
 27792                                  ;****************************************************************
 27793                                  
 27794                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27795                                  	; MSDOS 6.0 (MSDOS 5.0) COMMAND.COM
 27796                                  CleanUpErr:	; proc	near		;AN022;
 27797                                  
 27798 00003D12 803E[378E]00            	cmp	byte [msg_flag],0	;AN022; have we already issued a message?
 27799 00003D17 7511                    	jnz	short CleanupErr_Cont	;AN022; yes - don't issue duplicate error
 27800 00003D19 E8C6DF                  	call	Set_Ext_Error_Msg	;AN022; set up error message
 27801 00003D1C C706[B58C][D18C]        	mov	word [string_ptr_2],DestBuf 
 27802                                  					;AN022; get address of failed string
 27803 00003D22 C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 27804                                  					;AN022; put number of subst in control block
 27805 00003D27 E8BD10                  	call	std_eprintf		;AN022; issue the error message
 27806                                  CleanupErr_Cont:			;AN022;
 27807 00003D2A C3                      	retn				;AN022; return to caller
 27808                                  
 27809                                  ;CleanUpErr	endp			;AN022;
 27810                                  
 27811                                  ;============================================================================
 27812                                  ; COPYPR1.ASM, MSDOS 6.0, 1991
 27813                                  ;============================================================================
 27814                                  ; 01/10/2018 - Retro DOS v3.0
 27815                                  
 27816                                  ; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 2FBBh
 27817                                  
 27818                                  ; =============== S U B	R O U T	I N E =======================================
 27819                                  
 27820                                  ;***	TryFlush - flush copy buffer, double-check for concatenation
 27821                                  ;
 27822                                  ;	EXIT	ZR set if concatenate flag unchanged
 27823                                  
 27824                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27825                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3EEAh
 27826                                  TRYFLUSH:
 27827 00003D2B A0[DA8A]                	mov	al,[Concat]
 27828 00003D2E 50                      	push	ax
 27829                                  	;call	FLUSHFIL
 27830 00003D2F E80600                  	call	FlshFil
 27831 00003D32 58                      	pop	ax
 27832 00003D33 3A06[DA8A]              	cmp	al,[Concat]
 27833 00003D37 C3                      	retn
 27834                                  
 27835                                  ; =============== S U B	R O U T	I N E =======================================
 27836                                  
 27837                                  	; 26/03/2023
 27838                                  	; MSDOS 3.3
 27839                                  ;FLUSHFIL:
 27840                                  	;mov	al,[BINARY]
 27841                                  	;mov	ah,[ASCII]
 27842                                  	;push	ax
 27843                                  	;call	FLSHFIL
 27844                                  	;pop	ax
 27845                                  	;mov	[ASCII],ah
 27846                                  	;mov	[BINARY],al
 27847                                  	;retn
 27848                                  
 27849                                  ; =============== S U B	R O U T	I N E =======================================
 27850                                  
 27851                                  ;***	Flshfil - write out any data remaining in copy buffer.
 27852                                  ;
 27853                                  ;	Inputs:
 27854                                  ;	  [NXTADD] = No. of bytes to write
 27855                                  ;	  [CFLAG] <> 0 if file has been created
 27856                                  ;	Outputs:
 27857                                  ;	  [NXTADD] = 0
 27858                                  
 27859                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 27860                                  FlshFil:
 27861 00003D38 C606[EC8D]00            	mov	byte [TERMREAD],0
 27862 00003D3D 803E[E48A]00            	cmp	byte [CFLAG],0
 27863 00003D42 7403                    	jz	short NotExists
 27864 00003D44 E99600                  	jmp	Exists
 27865                                  NotExists:
 27866 00003D47 E8A101                  	call	BUILDDEST		; find out all about the destination
 27867 00003D4A E8F903                  	call	COMPNAME		; source and dest. the same?
 27868 00003D4D 7519                    	jnz	short ProcDest		; if not, go ahead
 27869 00003D4F 803E[8D8D]00            	cmp	byte [SRCISDEV],0
 27870 00003D54 7512                    	jnz	short ProcDest		; same name on device ok
 27871 00003D56 803E[DA8A]00            	cmp	byte [Concat],0		; concatenation?
 27872 00003D5B BA[447F]                	mov	dx,OVERWR_PTR
 27873                                  	;je	short COPERR		; not concatenating - overwrite error
 27874                                  	; 26/03/2023
 27875 00003D5E 7503                    	jne	short No_Concat_Err
 27876 00003D60 E91201                  	jmp	COPYERR
 27877                                  	
 27878                                  No_Concat_Err:	; concatenating
 27879 00003D63 C606[E88D]01            	mov	byte [NOWRITE],1 	; flag not writing (just seeking)
 27880                                  ProcDest:
 27881                                  	; MSDOS 6.0
 27882                                  	;mov	ax,(ExtOpen<<8)		; open the file
 27883                                  	; 26/03/2023
 27884 00003D68 B8006C                  	mov	ax,6C00h
 27885 00003D6B BE[D18C]                	mov	si,DestBuf		; get file name
 27886                                  ;M046
 27887                                  ; For writes, we want to deny writes by anyone else at the same time that we
 27888                                  ;are writing to it. For instance, on a network, 2 workstations could try
 27889                                  ;writing to the same file. Also, because we opened the source file with
 27890                                  ;DENY NONE, it is fine if the source and destination files are the same as
 27891                                  ;would happen when we append to an existing file.
 27892                                  
 27893                                  	; 26/03/2023
 27894                                  	;mov	bx,deny_write|write_open_mode
 27895 00003D6E BB2100                  	mov	bx,21h			; get open mode for copy; M046
 27896 00003D71 31C9                    	xor	cx,cx			; no special files
 27897                                  	;mov	dx,write_open_flag	; set up open flags
 27898 00003D73 BA0101                  	mov	dx,101h	
 27899                                  
 27900 00003D76 803E[E88D]00            	cmp	byte [NOWRITE],0
 27901 00003D7B 7503                    	jne	short DoDestOpen	; don't actually create if nowrite set
 27902                                  	;mov	dx,creat_open_flag	; set up create flags
 27903 00003D7D BA1201                  	mov	dx,112h
 27904                                  
 27905                                  	; 26/03/2023
 27906                                  	; MSDOS 3.3
 27907                                  	;mov	ax,(OPEN*256)+1 ; 3D01h ; open file, write access
 27908                                  	;cmp	byte [NOWRITE],0
 27909                                  	;jne	short DODESTOPEN
 27910                                  	;mov	ah,CREAT ; 3Ch
 27911                                  	;xor	cx,cx
 27912                                  ;DODESTOPEN:
 27913                                  	;mov	dx,DESTBUF
 27914                                  	;int	21h	; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
 27915                                  	;		; CX = attributes for file
 27916                                  	;		; DS:DX	-> ASCIZ filename (may include drive and path)
 27917                                  
 27918                                  ; 26/03/2023
 27919                                  ;	; MSDOS 3.3 - COMMAND.COM, transient portion/segment offset 301Ch
 27920                                  ;	;mov	dx,FULDIRPTR
 27921                                  ;	;call	GET_EXT_ERR_NUMBER
 27922                                  ;	;jc	short COPERR
 27923                                  ;
 27924                                  ;	; 01/10/2018
 27925                                  ;	;jnc	short DEST_OPEN_OKAY
 27926                                  ;		
 27927                                  ;	;mov	dx,FULDIRPTR
 27928                                  ;	;call	GET_EXT_ERR_NUMBER
 27929                                  ;	;jmp	short COPERR
 27930                                  ;
 27931                                  ;	jc	short DEST_OPEN_ERROR
 27932                                  
 27933                                  	; 26/03/2023
 27934                                  DoDestOpen:
 27935 00003D80 CD21                    	int     21h	; DOS - 4.0 - EXTENDED OPEN/CREATE
 27936                                  			; BL = open mode as in AL for normal open (INT 21h/AH=3Dh)
 27937                                  			; BH = flags
 27938                                  			; CX = create attribute
 27939                                  			; DL = action if file exists/does not exists
 27940                                  			; DH = 00h (reserved), DS:SI -> ASCIZ file name
 27941                                  
 27942                                  ;	We assume that the error is normal.
 27943                                  ;	TriageError will correct the DX value appropriately.
 27944                                  	
 27945 00003D82 7311                    	jnc	short Dest_Open_Okay
 27946                                  Xa_Set_Error:				;AN030; error occurred on XA
 27947 00003D84 E85BDF                  	call	Set_Ext_Error_Msg	;AN030; get extended error
 27948                                  
 27949                                  	; 26/04/2023 - Retro DOS v4.0 ( 4.1) COMMAND.COM
 27950                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:3F46h
 27951                                  Ext_Err_Set:				;AN030;
 27952 00003D87 C706[B58C][D18C]        	mov	word [string_ptr_2],DestBuf
 27953                                  					;AN000; get address of failed string
 27954 00003D8D C606[1D7F]01            	mov	byte [extend_buf_sub],one_subst ; 1 
 27955                                  					;AN030; put number of subst in control block
 27956                                  CopErrJ2:				;AN030;
 27957 00003D92 E9E000                  	jmp	COPYERR			;AN030; go issue message
 27958                                  
 27959                                  ;DEST_OPEN_OKAY:
 27960                                  	; 26/03/2023
 27961                                  Dest_Open_Okay:
 27962 00003D95 A3[288D]                	mov	[DESTHAND],ax		; save handle
 27963 00003D98 C606[E48A]01            	mov	byte [CFLAG],1		; destination now exists
 27964 00003D9D 89C3                    	mov	bx,ax
 27965 00003D9F B80044                  	mov	ax,IOCTL*256 ; 4400h 	; get device stuff
 27966 00003DA2 CD21                    	int	21h	   	; DOS - 2+ - IOCTL - GET DEVICE INFORMATION
 27967                                  			   	; BX = file or device handle
 27968                                  
 27969 00003DA4 8816[2A8D]              	mov	[DESTISDEV],dl		; set dest info
 27970                                  	; 18/04/2023
 27971 00003DA8 F6C280                  	test	dl,80h
 27972                                  	;test	dl,devid_ISDEV
 27973 00003DAB 7430                    	jz	short Exists		; Dest not a device
 27974                                  
 27975                                  ;	Destination is device.
 27976                                  
 27977 00003DAD A0[E08A]                	mov	al,[DestSwitch]
 27978                                  	; 26/03/2023
 27979 00003DB0 240C                    	and	al,0Ch
 27980                                  	;and	al,SWITCHA+SWITCHB ; 4+8
 27981 00003DB2 7509                    	jnz	short TestBoth
 27982 00003DB4 A0[ED8D]                	mov	al,[ASCII]		; neither set, use current setting
 27983 00003DB7 0A06[E98D]              	or	al,[BINARY]
 27984 00003DBB 7416                    	jz	short ExSetA		; neither set, default to ascii
 27985                                  TestBoth:
 27986 00003DBD 7A1E                    	jpe	short Exists		; both are set, ignore
 27987 00003DBF A808                    	test	al,8
 27988                                  	;test	al,SWITCHB
 27989 00003DC1 741A                    	jz	short Exists
 27990                                  	;mov	ax,(IOCTL shl 8) or 1
 27991 00003DC3 B80144                  	mov	ax,(IOCTL<<8)|1 ; 4401h
 27992 00003DC6 30F6                    	xor	dh,dh
 27993                                  	; 18/04/2023
 27994 00003DC8 80CA20                  	or	dl,20h
 27995                                  	;or	dl,devid_RAW
 27996 00003DCB 8816[2A8D]              	mov	[DESTISDEV],dl
 27997 00003DCF CD21                    	int	21h	; DOS -	2+ - IOCTL - SET DEVICE	INFORMATION
 27998                                  			; BX = device handle,DH = 0
 27999                                  			; DL = device information to set (bits 0-7 from	function 0)
 28000 00003DD1 EB0A                    	jmp	short Exists
 28001                                  
 28002                                  	; 26/03/2023
 28003                                  	; 01/10/2018 - Retro DOS v3.0 modification
 28004                                  ;DEST_OPEN_ERROR:
 28005                                  	;mov	dx,FULDIRPTR
 28006                                  	;call	GET_EXT_ERR_NUMBER
 28007                                  ;COPERR:
 28008                                  	; 26/03/2023
 28009                                  ;CopyErrj:
 28010                                  	;jmp	short COPYERR
 28011                                  
 28012                                  ExSetA:
 28013                                  ;	What we read in may have been in binary mode, flag zapped write OK
 28014                                  
 28015 00003DD3 C606[ED8D]04            	mov	byte [ASCII],4
 28016                                  	;mov	byte [ASCII],SWITCHA	; set ascii mode
 28017 00003DD8 800E[E78D]04            	or	byte [INEXACT],4
 28018                                  	;or	byte [INEXACT],SWITCHA	; ascii -> inexact
 28019                                  Exists:
 28020 00003DDD 803E[E88D]00            	cmp	byte [NOWRITE],0
 28021 00003DE2 7524                    	jnz	short NoChecking	; if nowrite don't bother with name check
 28022 00003DE4 803E[2B8C]01            	cmp	byte [plus_comma],1	; don't check if just doing +,,
 28023 00003DE9 741D                    	jz	short NoChecking
 28024 00003DEB E85803                  	call	COMPNAME		; source and dest. the same?
 28025 00003DEE 7518                    	jnz	short NoChecking	; if not, go ahead
 28026 00003DF0 803E[8D8D]00            	cmp	byte [SRCISDEV],0
 28027 00003DF5 7511                    	jne	short NoChecking	; same name on device ok
 28028                                  
 28029                                  ;	At this point we know in append (would have gotten overwrite error
 28030                                  ;	on first destination create otherwise), and user trying to specify
 28031                                  ;	destination which has been scribbled already (if dest had been named
 28032                                  ;	first, NoWrite would be set).
 28033                                  
 28034 00003DF7 BA[477F]                	mov	dx,LOSTERR_PTR		; tell him he's not going to get it
 28035                                  	;invoke	Std_EprintF		;ac022;
 28036                                  	; 26/03/2023
 28037 00003DFA E8EA0F                  	call	std_eprintf ; MSDOS 6.0 (& 5.0)
 28038                                  	;call	STD_PRINTF  ; MSDOS 3.3	
 28039 00003DFD C706[E88A]0000          	mov	word [NXTADD],0		; set return
 28040 00003E03 FE06[EC8D]              	inc	byte [TERMREAD]		; tell read to give up
 28041                                  Ret60:
 28042 00003E07 C3                      	retn
 28043                                  
 28044                                  NoChecking:
 28045 00003E08 8B1E[288D]              	mov	bx,[DESTHAND]		; get handle
 28046 00003E0C 31C9                    	xor	cx,cx
 28047 00003E0E 870E[E88A]              	xchg	cx,[NXTADD]
 28048 00003E12 E3F3                    	jcxz	Ret60			; if nothing to write, forget it
 28049 00003E14 FF06[EA8D]              	inc	word [WRITTEN]		; flag that we wrote something
 28050 00003E18 803E[E88D]00            	cmp	byte [NOWRITE],0	; if nowrite set, just seek cx bytes
 28051 00003E1D 7514                    	jnz	short SeekEnd
 28052 00003E1F 31D2                    	xor	dx,dx
 28053 00003E21 1E                      	push	ds
 28054 00003E22 8E1E[C78A]              	mov	ds,[TPA]
 28055 00003E26 B440                    	mov	ah,Write ; 40h
 28056 00003E28 CD21                    	int	21h	; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28057                                  			; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 28058 00003E2A 1F                      	pop	ds
 28059 00003E2B BA[2F7F]                	mov	dx,NOSPACE_PTR
 28060                                  	;jc	short COPERRP		; failure
 28061                                  	; 26/03/2023
 28062                                  	; MSDOS 6.0
 28063 00003E2E 7326                    	jnc	short NoChecking2
 28064 00003E30 E951FF                  	jmp	Xa_Set_Error
 28065                                  
 28066                                  	; 18/04/2023
 28067                                  	; 26/03/2023
 28068                                  SeekEnd:
 28069 00003E33 31D2                    	xor	dx,dx
 28070 00003E35 87D1                    	xchg	dx,cx
 28071                                  	;mov	ax,(LSEEK shl 8) or 1
 28072 00003E37 B80142                  	mov	ax,(LSEEK<<8)|1 ; 4201h
 28073 00003E3A CD21                    	int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
 28074                                  				; AL = method: offset from present location
 28075                                  
 28076                                  	; 26/03/2023
 28077                                  	; MSDOS 6.0
 28078                                  
 28079                                  ;	Save the file pointer in DX:AX to restore the file
 28080                                  ;	with in case the copy should fail.
 28081                                  
 28082 00003E3C A3[F48D]                	mov	[OFilePtr_Lo],ax
 28083 00003E3F 8916[F68D]              	mov	[OFilePtr_Hi],dx
 28084                                  
 28085                                  	; 26/03/2023
 28086                                  	; MSDOS 3.3  MSDOS 6.0
 28087                                  
 28088 00003E43 803E[D88A]00            	cmp	byte [RDEOF],0
 28089 00003E48 740B                    	jz	short Retz60
 28090                                  
 28091                                  ;	^Z has been read - we must set the file size to the current
 28092                                  ;	file pointer location
 28093                                  
 28094 00003E4A B440                    	mov	ah,Write ; 40h
 28095 00003E4C CD21                    	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 28096                                  				; BX = file handle,CX = number	of bytes to write,DS:DX -> buffer
 28097                                  
 28098                                  	; 26/03/2023
 28099                                  	; MSDOS 6.0
 28100 00003E4E 727E                    	jc	short Xa_Set_Error_Jmp	;AC022; failure
 28101                                  
 28102                                  ;	Make note that ^Z was removed, in case the
 28103                                  ;	copy should fail and we need to restore the file.
 28104                                  
 28105 00003E50 C606[F88D]1A            	mov	byte [OCtrlZ],1Ah
 28106                                  Retz60:
 28107 00003E55 C3                      	retn
 28108                                  
 28109                                  NoChecking2:
 28110 00003E56 29C1                    	sub	cx,ax
 28111 00003E58 74AD                    	jz	short Ret60		; wrote all supposed to
 28112                                  	; 18/04/2023
 28113 00003E5A F606[2A8D]80            	test	byte [DESTISDEV],80h ; devid_ISDEV
 28114                                  	;test	byte [DESTISDEV],devid_ISDEV ;80h
 28115 00003E5F 7414                    	jz	short COPYERR		; is a file, error
 28116 00003E61 F606[2A8D]20            	test	byte [DESTISDEV],20h  ; devid_RAW
 28117                                  	;test	byte [DESTISDEV],devid_RAW ; 20h
 28118 00003E66 750A                    	jnz	short DevWrtErr	; is a raw device, error
 28119 00003E68 803E[E78D]00            	cmp	byte [INEXACT],0
 28120 00003E6D 7598                    	jnz	short Ret60		; inexact so ok
 28121 00003E6F 49                      	dec	cx
 28122                                  ;Retz60:
 28123 00003E70 7495                    	jz	short Ret60		; wrote one byte less (the ^z)		
 28124                                  
 28125                                  DevWrtErr:
 28126 00003E72 BA[B280]                	mov	dx,DEVWMES_PTR
 28127                                  	; 26/03/2023
 28128                                  COPYERR:
 28129                                  	;invoke	Std_EPrintF		;AC022;
 28130 00003E75 E86F0F                  	call	std_eprintf  ; MSDOS 6.0
 28131                                  	;call	STD_PRINTF   ; MSDOS 3.3
 28132                                  CopErrP:
 28133 00003E78 FE06[E58A]              	inc	byte [DestClosed]
 28134 00003E7C 803E[E48A]00            	cmp	byte [CFLAG],0
 28135 00003E81 7448                    	jz	short EndCopyJ		; never actually got it open
 28136 00003E83 8B1E[288D]              	mov	bx,[DESTHAND]
 28137 00003E87 83FB00                  	cmp	bx,0
 28138 00003E8A 7E33                    	jle	short NoClose
 28139                                  
 28140                                  ;	Check to see if we should save part of the destination file.
 28141                                  
 28142                                  	; 26/03/2023
 28143                                  	; MSDOS 6.0
 28144 00003E8C 8B0E[F68D]              	mov	cx,[OFilePtr_Hi]	; CX = hi word of original file ptr
 28145 00003E90 8B16[F48D]              	mov	dx,[OFilePtr_Lo]	; DX = lo word of original file ptr
 28146                                  			
 28147 00003E94 89C8                    	mov	ax,cx
 28148 00003E96 09D0                    	or	ax,dx
 28149 00003E98 7421                    	jz	short ceClose		; null file ptr means nothing to save
 28150                                  
 28151                                  ;	Destination was also the first source. Do the best we can to
 28152                                  ;	restore it. Truncate it back to the size we took from it (which
 28153                                  ;	may have been due to a Ctrl-Z, so may not have included the whole
 28154                                  ;	file). If a Ctrl-Z was originally read, put it back.
 28155                                  
 28156 00003E9A B80042                  	mov	ax,(LSEEK<<8) ; 4200h
 28157 00003E9D CD21                    	int	21h
 28158                                  
 28159 00003E9F 31C9                    	xor	cx,cx			; CX = # bytes to write = 0
 28160 00003EA1 B440                    	mov	ah,Write ; 40h
 28161 00003EA3 CD21                    	int	21h			; truncate file
 28162                                  
 28163 00003EA5 803E[F88D]00            	cmp	byte [OCtrlZ],0
 28164 00003EAA 7408                    	je	short ceClose0		; no ctrl-z removed from original
 28165 00003EAC 41                      	inc	cx			; CX = # bytes to write = 1
 28166 00003EAD BA[F88D]                	mov	dx,OCtrlZ		; DS:DX = ptr to original ctrl-z
 28167 00003EB0 B440                    	mov	ah,Write ; 40h
 28168 00003EB2 CD21                    	int	21h			; write ctrl-z
 28169                                  ceClose0:
 28170 00003EB4 B43E                    	mov	ah,CLOSE ; 3Eh
 28171 00003EB6 CD21                    	int	21h			; close it
 28172                                  ;;	;mov	byte [CFLAG],0
 28173 00003EB8 E980FA                  	jmp	ENDCOPY			; and go home
 28174                                  
 28175                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28176                                  ceClose:
 28177 00003EBB B43E                    	mov	ah,CLOSE ; 3Eh		; close the file
 28178 00003EBD CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28179                                  				; BX = file handle
 28180                                  NoClose:
 28181 00003EBF BA[D18C]                	mov	dx,DestBuf
 28182 00003EC2 B441                    	mov	ah,Unlink ; 41h 	; and delete it
 28183 00003EC4 CD21                    	int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
 28184                                  				; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
 28185 00003EC6 C606[E48A]00            	mov	byte [CFLAG],0
 28186                                  EndCopyJ:
 28187 00003ECB E96DFA                  	jmp	ENDCOPY
 28188                                  
 28189                                  Xa_Set_Error_Jmp:			;AN022; go set up error message
 28190 00003ECE E9B3FE                  	jmp	Xa_Set_Error
 28191                                  
 28192                                  ;============================================================================
 28193                                  ; COPYPR2.ASM, MSDOS 6.0, 1991
 28194                                  ;============================================================================
 28195                                  ; 01/10/2018 - Retro DOS v3.0
 28196                                  
 28197                                  ; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 311Fh
 28198                                  
 28199                                  	; 26/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28200                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4095h
 28201                                  
 28202                                  ; =============== S U B	R O U T	I N E =======================================
 28203                                  
 28204                                  ;***	SetAsc - set Ascii, Binary, Inexact flags based on switches
 28205                                  ;
 28206                                  ;	Given switch vector in AX,
 28207                                  ;	  Set Ascii flag if /a is set
 28208                                  ;	  Clear Ascii flag if /b is set
 28209                                  ;	  Binary set if /b specified
 28210                                  ;	  Leave Ascii unchanged if neither or both are set
 28211                                  ; 	Also sets Inexact if Ascii is ever set. 
 28212                                  ;	AL = Ascii on exit, flags set
 28213                                  
 28214                                  	; 26/03/2023
 28215                                  SETASC:
 28216                                  	;and	al,SWITCHA+SWITCHB ; 0Ch ; AL = /a, /b flags
 28217 00003ED1 240C                    	and	al,0Ch ; 4+8
 28218 00003ED3 7A10                    	jpe	short LOADSW	; even parity - both or neither
 28219 00003ED5 50                      	push	ax
 28220                                  	;and	al,SWITCHB  ; 8
 28221 00003ED6 2408                    	and	al,8
 28222 00003ED8 A2[E98D]                	mov	[BINARY],al
 28223 00003EDB 58                      	pop	ax
 28224                                  	;and	al,SWITCHA
 28225 00003EDC 2404                    	and	al,4	
 28226 00003EDE A2[ED8D]                	mov	[ASCII],al
 28227 00003EE1 0806[E78D]              	or	[INEXACT],al
 28228                                  LOADSW:
 28229 00003EE5 A0[ED8D]                	mov	al,[ASCII]
 28230 00003EE8 08C0                    	or	al,al
 28231 00003EEA C3                      	retn
 28232                                  
 28233                                  ; =============== S U B	R O U T	I N E =======================================
 28234                                  
 28235                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28236                                  BUILDDEST:
 28237 00003EEB 803E[CC8C]FF            	cmp	byte [DestIsDir],-1 ; 0FFh
 28238 00003EF0 750C                    	jnz	short KNOWABOUTDEST	; figuring already done
 28239 00003EF2 BF[A789]                	mov	di,USERDIR1
 28240 00003EF5 BD[CC8C]                	mov	bp,DestVars
 28241 00003EF8 E8DF00                  	call	BUILDPATH
 28242 00003EFB E885E5                  	call	RestUDir1
 28243                                  
 28244                                  ;	We now know all about the destination
 28245                                  
 28246                                  KNOWABOUTDEST:
 28247 00003EFE 30C0                    	xor	al,al
 28248 00003F00 8606[2B8D]              	xchg	al,[FIRSTDEST]
 28249 00003F04 08C0                    	or	al,al
 28250 00003F06 7503                    	jnz	short FIRSTDST
 28251 00003F08 E98C00                  	jmp	NOFIRSTDEST
 28252                                  
 28253                                  FIRSTDST:
 28254                                  ;	Create an fcb of the original dest.
 28255                                  
 28256 00003F0B 8B36[CE8C]              	mov	si,[DestTail]
 28257 00003F0F BF[8B8B]                	mov	di,DestFcb
 28258 00003F12 B80029                  	mov	ax,Parse_File_Descriptor*256 ; 2900h
 28259 00003F15 CD21                    	int	21h		; DOS -	PARSE FILENAME
 28260                                  				; DS:SI	-> string to parse
 28261                                  				; ES:DI	-> buffer to fill with unopened	FCB
 28262                                  				; AL = bit mask	to control parsing
 28263 00003F17 803C00                  	cmp	byte [si],0
 28264 00003F1A 7406                    	jz	short GOODPARSE
 28265                                  
 28266                                  	; 27/03/2023	
 28267                                  	; MSDOS 6.0
 28268                                  	;mov	byte [di+1],"|"	;AD052; must be illegal file name character
 28269                                  	
 28270 00003F1C BA[357F]                	mov	dx,FULLDIR_PTR		;AN052; issue "file creation error"
 28271 00003F1F E953FF                  	jmp	COPYERR			;AN052;
 28272                                  GOODPARSE:
 28273 00003F22 A1[D18C]                	mov	ax,[DestBuf]		; AX = possible "d:"
 28274 00003F25 80FC3A                  	cmp	ah,':'
 28275 00003F28 7402                    	jz	short DRVSPEC4
 28276 00003F2A B040                    	mov	al,'@'  ; 40h
 28277                                  DRVSPEC4:
 28278                                  ;	AX = "d:" for following FCB drive computation
 28279                                  
 28280 00003F2C 8A0E[ED8D]              	mov	cl,[ASCII]		; CL = saved Ascii flag
 28281 00003F30 0C20                    	or	al,20h
 28282 00003F32 2C60                    	sub	al,60h
 28283 00003F34 A2[8B8B]                	mov	[DestFcb],al		; store drive # in FCB
 28284                                  
 28285                                  ;*	Figure out what copy mode we're in.
 28286                                  ;	Letters stand for unambiguous, * for ambiguous pathnames.
 28287                                  ;	+n stands for additional sources delimited by +'s.
 28288                                  ;
 28289                                  ;	copy a b	not concatenating
 28290                                  ;	copy a *	not concatenating
 28291                                  ;	copy * a	concatenating
 28292                                  ;	copy * *	not concatenating
 28293                                  ;	copy a+n b	concatenating
 28294                                  ;	copy *+n a	concatenating
 28295                                  ;	copy *+n *	concatenating, Mel Hallerman style
 28296                                  
 28297                                  ;	Bugbug:  copy *.a+a.b *.t  picks up only 1st *.a file.. Why?
 28298                                  ;		 copy a.b+*.a *.t  picks up all *.a files.
 28299                                  
 28300 00003F37 A0[D08C]                	mov	al,[DestInfo]		; AL = destination CParse flags
 28301 00003F3A 8A26[338D]              	mov	ah,[SrcInfo]		; AH = source CParse flags
 28302 00003F3E 250202                  	and	ax,202h			; AH,AL = source,dest wildcard flags
 28303 00003F41 08C0                    	or	al,al
 28304 00003F43 7413                    	jz	short NOTMELCOPY 	; no destination wildcard
 28305                                  
 28306                                  ;	Destination is wildcarded.
 28307                                  	
 28308 00003F45 38E0                    	cmp	al,ah
 28309 00003F47 750F                    	jnz	short NOTMELCOPY ; no source wildcard
 28310                                  
 28311                                  ;	Source and destination are both wildcarded.
 28312                                  
 28313 00003F49 803E[EE8D]00            	cmp	byte [PLUS],0
 28314 00003F4E 7408                    	jz	short NOTMELCOPY	; no +'s in source
 28315                                  
 28316                                  ;	Source and destination are wildcarded, and source includes +'s.
 28317                                  ;	It's Mel Hallorman copy time.
 28318                                  
 28319 00003F50 FE06[2C8D]              	inc	byte [MELCOPY]		; 'Mel copy' = true
 28320 00003F54 30C0                    	xor	al,al
 28321 00003F56 EB06                    	jmp	short SETCONC
 28322                                  
 28323                                  NOTMELCOPY:
 28324 00003F58 3402                    	xor	al,2			; AL=0 -> ambiguous destination, 2 otherwise
 28325 00003F5A 20E0                    	and	al,ah
 28326 00003F5C D0E8                    	shr	al,1			; AL=1 -> ambiguous source, unambiguous dest
 28327                                  					;   (implies concatenation)
 28328                                  SETCONC:
 28329 00003F5E 0A06[EE8D]              	or	al,[PLUS]		; "+" always infers concatenation
 28330                                  
 28331                                  ;	Whew. AL = 1 if concatenating, 0 if not.
 28332                                  
 28333 00003F62 A2[DA8A]                	mov	[Concat],al
 28334 00003F65 D0E0                    	shl	al,1
 28335 00003F67 D0E0                    	shl	al,1
 28336 00003F69 A2[E78D]                	mov	[INEXACT],al		; concatenation -> inexact copy
 28337 00003F6C 803E[E98D]00            	cmp	byte [BINARY],0
 28338 00003F71 7524                    	jne	short NOFIRSTDEST 	; explicit binary copy	
 28339                                  
 28340 00003F73 A2[ED8D]                	mov	[ASCII],al		; otherwise, concatenate in ascii mode	
 28341 00003F76 08C9                    	or	cl,cl
 28342 00003F78 751D                    	jnz	short NOFIRSTDEST 	; Ascii flag set before, data read correctly	
 28343 00003F7A 08C0                    	or	al,al
 28344 00003F7C 7419                    	jz	short NOFIRSTDEST 	; Ascii flag did not change state
 28345                                  
 28346                                  ;	At this point there may already be binary read data in the read
 28347                                  ;	buffer. We need to find the first ^Z (if there is one) and trim the
 28348                                  ;	amount of data in the buffer correctly.
 28349                                  
 28350 00003F7E 8B0E[E88A]              	mov	cx,[NXTADD]
 28351 00003F82 E313                    	jcxz	NOFIRSTDEST		; no data, everything ok
 28352 00003F84 B01A                    	mov	al,1Ah
 28353 00003F86 06                      	push	es
 28354 00003F87 31FF                    	xor	di,di
 28355 00003F89 8E06[C78A]              	mov	es,[TPA]
 28356 00003F8D F2AE                    	repne	scasb			; scan for EOF
 28357 00003F8F 07                      	pop	es
 28358 00003F90 7505                    	jnz	short NOFIRSTDEST 	; no ^z in buffer, everything ok
 28359 00003F92 4F                      	dec	di			; point at ^z
 28360 00003F93 893E[E88A]              	mov	[NXTADD],di		; new buffer length
 28361                                  
 28362                                  NOFIRSTDEST:
 28363 00003F97 BB[CF8B]                	mov	bx,DIRBUF+1		; Source of replacement chars
 28364 00003F9A 803E[DA8A]00            	cmp	byte [Concat],0
 28365 00003F9F 7403                    	jz	short GOTCHRSRC		; Not a concat
 28366 00003FA1 BB[158C]                	mov	bx,SDIRBUF+1		; Source of replacement chars
 28367                                  GOTCHRSRC:
 28368 00003FA4 BE[8C8B]                	mov	si,DestFcb+1		; Original dest name
 28369 00003FA7 8B3E[CE8C]              	mov	di,[DestTail]		; Where to put result
 28370                                  
 28371                                  ; --------------- S U B	R O U T	I N E --------------------------------------- 
 28372                                  
 28373                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28374                                  BUILDNAME:
 28375 00003FAB B90800                  	mov	cx,8
 28376                                  BUILDMAIN:
 28377 00003FAE AC                      	lodsb
 28378 00003FAF 3C3F                    	cmp	al,'?'
 28379 00003FB1 7502                    	jne	short NOTAMBIG
 28380 00003FB3 8A07                    	mov	al,[bx]
 28381                                  NOTAMBIG:
 28382 00003FB5 3C20                    	cmp	al,' '
 28383 00003FB7 7401                    	je	short NOSTORE
 28384 00003FB9 AA                      	stosb
 28385                                  NOSTORE:
 28386 00003FBA 43                      	inc	bx
 28387 00003FBB E2F1                    	loop	BUILDMAIN
 28388 00003FBD B103                    	mov	cl,3
 28389                                  	;mov	al,' ' ; 20h
 28390                                  	;cmp	[si],al
 28391                                  	; 27/03/2023
 28392 00003FBF 803C20                  	cmp	byte [si],20h ; ' '
 28393 00003FC2 7412                    	je	short ENDDEST		; No extension
 28394                                  	;mov	al,[DOT_CHR]
 28395                                  	; 27/03/2023
 28396 00003FC4 B02E                    	mov	al,'.' ; 2Eh ; dot_chr
 28397 00003FC6 AA                      	stosb
 28398                                  BUILDEXT:
 28399 00003FC7 AC                      	lodsb
 28400 00003FC8 3C3F                    	cmp	al,'?'
 28401 00003FCA 7502                    	jne	short NOTAMBIGE
 28402 00003FCC 8A07                    	mov	al,[bx]
 28403                                  NOTAMBIGE:
 28404 00003FCE 3C20                    	cmp	al,' '
 28405 00003FD0 7401                    	je	short NOSTOREE
 28406 00003FD2 AA                      	stosb
 28407                                  NOSTOREE:
 28408 00003FD3 43                      	inc	bx
 28409 00003FD4 E2F1                    	loop	BUILDEXT
 28410                                  ENDDEST:
 28411 00003FD6 30C0                    	xor	al,al
 28412 00003FD8 AA                      	stosb				; NUL terminate
 28413 00003FD9 C3                      	retn
 28414                                  
 28415                                  ; =============== S U B	R O U T	I N E =======================================
 28416                                  	
 28417                                  	; 28/03/2023
 28418                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28419                                  BUILDPATH:
 28420 00003FDA F6460402                	test	byte [bp+VARSTRUC.INFO],2 ; test byte [bp+4],2
 28421 00003FDE 7543                    	jnz	short NOTPFILE		; If ambig don't bother with open
 28422 00003FE0 89EA                    	mov	dx,bp			; Set DX to spec
 28423 00003FE2 83C205                  	add	dx,VARSTRUC.BUF 	; add dx,5
 28424                                  
 28425                                  	; 27/03/2023
 28426                                  	; MSDOS 6.0
 28427 00003FE5 57                      	push	di			;AN000;
 28428 00003FE6 B8006C                  	mov	ax,(ExtOpen<<8)	; 6C00h	;AC000; open the file
 28429                                  	;mov	bx,deny_none|read_open_mode
 28430 00003FE9 BB4000                  	mov	bx,40h			; open mode for COPY ;M046
 28431 00003FEC 31C9                    	xor	cx,cx			;AN000; no special files
 28432 00003FEE 89D6                    	mov	si,dx			;AN030; get file name offset
 28433                                  	;mov	dx,read_open_flag	;AN000; set up open flags
 28434 00003FF0 BA0101                  	mov	dx,101h
 28435 00003FF3 CD21                    	INT	21h
 28436 00003FF5 5F                      	pop	di			;AN000;
 28437 00003FF6 7315                    	jnc	short PURE_FILE		;AN022; is pure file
 28438 00003FF8 E8F7DC                  	call	get_ext_error_number	;AN022; get the extended error
 28439                                  	;cmp	ax,2
 28440 00003FFB 83F802                  	cmp	ax,ERROR_FILE_NOT_FOUND ;AN022; if file not found - okay
 28441 00003FFE 7423                    	jz	short NOTPFILE		;AN022;
 28442                                  	;cmp	ax,3
 28443 00004000 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 28444 00004003 741E                    	jz	short NOTPFILE		;AN022;
 28445                                  	;cmp	ax,5
 28446 00004005 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 28447 00004008 7419                    	jz	short NOTPFILE		;AN022;
 28448 0000400A E928DA                  	jmp	extend_setup		;AN022; exit with error
 28449                                  
 28450                                  	; 27/03/2023
 28451                                  	; MSDOS 3.3
 28452                                  	;mov	ax,OPEN*256 ; 3D00h
 28453                                  	;int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
 28454                                  	;			; DS:DX	-> ASCIZ filename
 28455                                  	;			; AL = access mode
 28456                                  	;			; 0 - read
 28457                                  	;jc	short NOTPFILE
 28458                                  
 28459                                  PURE_FILE:
 28460 0000400D 89C3                    	mov	bx,ax
 28461 0000400F B80044                  	mov	ax,IOCTL*256 ; 4400h
 28462 00004012 CD21                    	int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
 28463                                  				; BX = file or device handle
 28464 00004014 B43E                    	mov	ah,CLOSE ;3Eh
 28465 00004016 CD21                    	int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
 28466                                  				; BX = file handle
 28467                                  	; 18/04/2023
 28468 00004018 F6C280                  	test	dl,80h
 28469                                  	;test	dl,devid_ISDEV ; test dl,80h
 28470 0000401B 7553                    	jnz	short ISADEV
 28471 0000401D F6460404                	test	byte [bp+VARSTRUC.INFO],4 ; test byte [bp+4],4
 28472 00004021 744D                    	jz	short ISADEV
 28473                                  NOTPFILE:
 28474 00004023 8B5605                  	mov	dx,[bp+VARSTRUC.BUF] ; mov dx,[bp+5]
 28475                                  	
 28476                                  	; 27/03/2023	
 28477                                  	; MSDOS 6.0
 28478 00004026 80FA00                  	cmp	dl,0		     	;AN034; If no drive specified, get
 28479 00004029 7405                    	je	short SET_DRIVE_SPEC	;AN034;    default drive dir
 28480                                  
 28481 0000402B 80FE3A                  	cmp	dh,':'
 28482 0000402E 7402                    	je	short DRVSPEC5
 28483                                  SET_DRIVE_SPEC:
 28484 00004030 B240                    	mov	dl,'@' ; 40h
 28485                                  DRVSPEC5:
 28486 00004032 80CA20                  	or	dl,20h
 28487 00004035 80EA60                  	sub	dl,60h		; A = 1
 28488 00004038 E875E5                  	call	SAVUDIR1
 28489                                  	
 28490                                  	; 27/03/2023
 28491                                  	; MSDOS 6.0
 28492 0000403B 7306                    	jnc	short CURDIR_OK		;AN022; if error - exit
 28493 0000403D E8B2DC                  	call	get_ext_error_number	;AN022; get the extended error
 28494 00004040 E9F2D9                  	jmp	extend_setup		;AN022; exit with error
 28495                                  
 28496                                  CURDIR_OK:
 28497 00004043 89EA                    	mov	dx,bp
 28498                                  	;add	dx,5
 28499 00004045 83C205                  	add	dx,VARSTRUC.BUF		; Set DX for upcomming CHDIRs
 28500                                  	;mov	bh,[bp+4]
 28501 00004048 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 28502 0000404B 80E706                  	and	bh,6
 28503 0000404E 80FF06                  	cmp	bh,6			; Ambig and path ?
 28504 00004051 7518                    	jne	short CHECKAMB		; jmp if no
 28505                                  	;mov	si,[bp+2]
 28506 00004053 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 28507 00004056 B33A                    	mov	bl,':'
 28508 00004058 385CFE                  	cmp	[si-2],bl
 28509 0000405B 7506                    	jne	short KNOWNOTSPEC
 28510                                  	;mov	byte [bp+VARSTRUC.ISDIR],2
 28511                                  					; Know is d:/file
 28512                                  	;mov	byte [bp+0],2
 28513 0000405D C6460002                	mov	byte [bp],2
 28514 00004061 EB05                    	jmp	short DOPCDJ
 28515                                  KNOWNOTSPEC:
 28516                                  	;mov	byte [bp+VARSTRUC.ISDIR],1
 28517                                  					; Know is path/file
 28518                                  	;mov	byte [bp+0],1		
 28519 00004063 C6460001                	mov	byte [bp],1
 28520 00004067 4E                      	dec	si
 28521                                  DOPCDJ:
 28522 00004068 E98300                  	jmp	DOPCD
 28523                                  CHECKAMB:
 28524 0000406B 80FF02                  	cmp	bh,2
 28525 0000406E 7505                    	jnz	short CHECKCD
 28526                                  ISSIMPFILE:
 28527                                  ISADEV:
 28528                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 28529                                  	;mov	byte [bp+0],0		
 28530 00004070 C6460000                	mov	byte [bp],0
 28531 00004074 C3                      	retn
 28532                                  CHECKCD:
 28533 00004075 E86DEC                  	call	SetRest1
 28534 00004078 B43B                    	mov	ah,CHDir ; 3Bh
 28535 0000407A CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 28536                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 28537 0000407C 7239                    	jb	short NOTPDIR
 28538 0000407E 89D7                    	mov	di,dx
 28539 00004080 31C0                    	xor	ax,ax
 28540 00004082 89C1                    	mov	cx,ax
 28541 00004084 49                      	dec	cx
 28542                                  	; 14/06/2023
 28543                                  	;repne	scasb	 ; MSDOS 3.3
 28544                                  
 28545                                  	; 27/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28546                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:424Ah)
 28547                                  	; MSDOS 6.0
 28548                                  Kloop:					;AN000;  3/3/KK
 28549 00004085 268A05                  	mov	al,[es:di]		;AN000;  3/3/KK
 28550 00004088 47                      	inc	di			;AN000;  3/3/KK
 28551 00004089 08C0                    	or	al,al			;AN000;  3/3/KK
 28552 0000408B 740C                    	jz	short DONE		;AN000;  3/3/KK
 28553 0000408D 30E4                    	xor	ah,ah			;AN000;  3/3/KK
 28554 0000408F E82FE3                  	call	testkanj		;AN000;  3/3/KK
 28555 00004092 74F1                    	jz	short Kloop		;AN000;  3/3/KK
 28556 00004094 47                      	inc	di			;AN000;  3/3/KK
 28557 00004095 FEC4                    	inc	ah			;AN000;  3/3/KK
 28558 00004097 EBEC                    	jmp	short Kloop		;AN000;  3/3/KK
 28559                                  DONE:
 28560 00004099 4F                      	dec	di
 28561 0000409A A0[CA8A]                	mov	al,[DIRCHAR]
 28562                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 28563                                  	;mov	byte [bp+0],2
 28564 0000409D C6460002                	mov	byte [bp],2
 28565                                  	; 27/03/2023
 28566                                  	; MSDOS 6.0
 28567 000040A1 08E4                    	or	ah,ah			;AN000; 3/3/KK
 28568 000040A3 7505                    	jnz	short _STORE_PCHAR	;AN000; 3/3/KK	 this is the tra
 28569                                  	;
 28570 000040A5 3A45FF                  	cmp	al,[di-1]
 28571 000040A8 7405                    	jz	short GOTSRCSLSH
 28572                                  _STORE_PCHAR:
 28573 000040AA AA                      	stosb
 28574                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 ; know path/file
 28575                                  	;mov	byte [bp+0],1
 28576 000040AB C6460001                	mov	byte [bp],1
 28577                                  GOTSRCSLSH:
 28578                                  	;or	byte [bp+4],6
 28579 000040AF 804E0406                	or 	byte [bp+VARSTRUC.INFO],6 
 28580 000040B3 E87400                  	call	SETSTARS
 28581                                  NOTPDIR_RETN:
 28582 000040B6 C3                      	retn
 28583                                  
 28584                                  	; 28/03/2023
 28585                                  NOTPDIR:
 28586                                  	; MSDOS 6.0
 28587 000040B7 E838DC                  	call	get_ext_error_number	;AN022; get the extended error
 28588                                  	;cmp	ax,3
 28589 000040BA 83F803                  	cmp	ax,ERROR_PATH_NOT_FOUND ;AN022; if path not found - okay
 28590 000040BD 7405                    	je	short NOTPDIR_TRY	;AN022;
 28591                                  	;cmp	ax,5
 28592 000040BF 83F805                  	cmp	ax,ERROR_ACCESS_DENIED	;AN022; if access denied - okay
 28593 000040C2 7560                    	jne	short EXTEND_SETUPJ	;AN022; otherwise - exit error
 28594                                  NOTPDIR_TRY:
 28595                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28596                                  	;mov	byte [bp+VARSTRUC.ISDIR],0
 28597                                  	;mov	byte [bp+0],0
 28598 000040C4 C6460000                	mov	byte [bp],0
 28599                                  	;mov	bh,[bp+4]
 28600 000040C8 8A7E04                  	mov	bh,[bp+VARSTRUC.INFO]
 28601 000040CB F6C704                  	test	bh,4
 28602 000040CE 74E6                    	jz	short NOTPDIR_RETN	; Know pure file, no path seps
 28603                                  	;mov	byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
 28604                                  	;mov	byte [bp+0],2		
 28605 000040D0 C6460002                	mov	byte [bp],2
 28606                                  	;mov	si,[bp+2]
 28607 000040D4 8B7602                  	mov	si,[bp+VARSTRUC.TTAIL]
 28608 000040D7 803C00                  	cmp	byte [si],0
 28609 000040DA 744B                    	je	short BADCDERRJ2	; Trailing '/'	
 28610                                  	;mov	bl,[DOT_CHR]
 28611                                  	; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 28612                                  	; MSDOS 6.0 (& 5.0) COMMAND.COM
 28613 000040DC B32E                    	mov	bl,'.'  ; 2Eh ; dot_chr
 28614 000040DE 381C                    	cmp	[si],bl
 28615 000040E0 7445                    	je	short BADCDERRJ2	; If . or .. pure cd should have worked
 28616 000040E2 B33A                    	mov	bl,':'  ; 3Ah
 28617 000040E4 385CFE                  	cmp	[si-2],bl
 28618 000040E7 7405                    	je	short DOPCD		; Know d:/file
 28619                                  	;mov	byte [bp+VARSTRUC.ISDIR],1 
 28620                                  					; Know path/file
 28621                                  	;mov	byte [bp+0],1
 28622 000040E9 C6460001                	mov	byte [bp],1
 28623 000040ED 4E                      	dec	si			; Point at last '/'
 28624                                  DOPCD:
 28625 000040EE 30DB                    	xor	bl,bl
 28626 000040F0 861C                    	xchg	bl,[si]			; Stick in a NUL
 28627 000040F2 E8F0EB                  	call	SetRest1
 28628                                  
 28629                                  	; 28/03/2023
 28630                                  	; MSDOS 6.0 (& MSDOS 5.0)
 28631 000040F5 39F2                    	cmp	dx,si			;AN000;  3/3/KK
 28632 000040F7 771B                    	ja	short LookBack		;AN000;  3/3/KK
 28633 000040F9 56                      	push	si			;AN000;  3/3/KK
 28634 000040FA 51                      	push	cx			;AN000;  3/3/KK
 28635 000040FB 89F1                    	mov	cx,si			;AN000;  3/3/KK
 28636 000040FD 89D6                    	mov	si,dx			;AN000;  3/3/KK
 28637                                  Kloop2: 				;AN000;  3/3/KK
 28638 000040FF AC                      	lodsb				;AN000;  3/3/KK
 28639 00004100 E8BEE2                  	call	testkanj		;AN000;  3/3/KK
 28640 00004103 7409                    	jz	short NotKanj4		;AN000;  3/3/KK
 28641 00004105 AC                      	lodsb				;AN000;  3/3/KK
 28642 00004106 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 28643 00004108 72F5                    	jb	short Kloop2		;AN000;  3/3/KK
 28644 0000410A 59                      	pop	cx			;AN000;  3/3/KK
 28645 0000410B 5E                      	pop	si			;AN000;  3/3/KK
 28646 0000410C EB0B                    	jmp	short DoCdr		;AN000;  3/3/KK  Last char is ECS code, don't check for
 28647                                  					;		 trailing path sep
 28648                                  NotKanj4:				;AN000;  3/3/KK
 28649 0000410E 39CE                    	cmp	si,cx			;AN000;  3/3/KK
 28650 00004110 72ED                    	jb	short Kloop2		;AN000;  3/3/KK
 28651 00004112 59                      	pop	cx			;AN000;  3/3/KK
 28652 00004113 5E                      	pop	si			;AN000;  3/3/KK
 28653                                  LookBack:				;AN000;  3/3/KK
 28654                                  	; 28/03/2023
 28655                                  	; MSDOS 3.3 & MSDOS 6.0
 28656 00004114 3A5CFF                  	cmp	bl,[si-1]		; if double slash, then complain.
 28657 00004117 740E                    	je	short BADCDERRJ2
 28658                                  DoCdr:
 28659 00004119 B43B                    	mov	ah,CHDir ; 3Bh
 28660 0000411B CD21                    	int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
 28661                                  				; DS:DX	-> ASCIZ directory name	(may include drive)
 28662 0000411D 861C                    	xchg	bl,[si]
 28663 0000411F 7395                    	jnc	short NOTPDIR_RETN
 28664                                  	
 28665                                  	; 28/03/2023
 28666                                  	; MSDOS 3.3
 28667                                  ;BADCDERRJ2:
 28668                                  	;stc
 28669                                  	;jmp	BADCDERR
 28670                                  
 28671                                  	; 28/03/2023
 28672                                  	; MSDOS 6.0 (& MSDOS 5.0)
 28673 00004121 E8CEDB                  	call	get_ext_error_number	;AN022; get the extended error
 28674                                  EXTEND_SETUPJ:					;AN022;
 28675 00004124 E90ED9                  	jmp	extend_setup		;AN022; go issue the error message
 28676                                  BADCDERRJ2:
 28677 00004127 E908D9                  	jmp	badpath_err		;AC022; go issue path not found message
 28678                                  
 28679                                  ; =============== S U B	R O U T	I N E =======================================
 28680                                  
 28681                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28682                                  SETSTARS:
 28683                                  	;mov	[bp+2],di
 28684 0000412A 897E02                  	mov	[bp+VARSTRUC.TTAIL],di
 28685                                  	;add	byte [bp+1],12
 28686 0000412D 8046010C                	add	byte [bp+VARSTRUC.SIZ],12
 28687                                  	;;mov	ax,[DOT_QMARK] ; '?.' (2E3Fh)
 28688                                  	; 28/03/2023
 28689                                  	; MSDOS 6.0
 28690 00004131 B83F2E                  	mov	ax,dot_qmark ; 2E3Fh
 28691                                  	;mov	ax,'?.' ; dot_qmark
 28692                                  
 28693 00004134 B90800                  	mov	cx,8
 28694 00004137 F3AA                    	rep	stosb
 28695 00004139 86C4                    	xchg	al,ah
 28696 0000413B AA                      	stosb
 28697 0000413C 86C4                    	xchg	al,ah
 28698 0000413E B103                    	mov	cl,3
 28699 00004140 F3AA                    	rep	stosb
 28700 00004142 30C0                    	xor	al,al
 28701 00004144 AA                      	stosb
 28702 00004145 C3                      	retn
 28703                                  
 28704                                  ; =============== S U B	R O U T	I N E =======================================
 28705                                  
 28706                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28707                                  COMPNAME:
 28708 00004146 BE[D18C]                	mov	si,DestBuf	; do name translate of target
 28709 00004149 BF[4A88]                	mov	di,TRGXNAME	; save for name comparison
 28710 0000414C B460                    	mov	ah,xNameTrans ; 60h
 28711 0000414E CD21                    	int	21h	; DOS -	RESOLVE	PATH STRING TO CANONICAL PATH STRING
 28712                                  			; DS:SI	-> ASCIZ relative path string or directory name
 28713                                  			; ES:DI	-> 128-byte buffer for ASCIZ canonical fully qualified name
 28714 00004150 BE[F387]                	mov	si,SRCXNAME	; get name translate of source
 28715 00004153 BF[4A88]                	mov	di,TRGXNAME	; get name translate of target
 28716                                  	;call	STRCOMP
 28717                                  	;retn
 28718                                  	; 28/03/2023
 28719 00004156 E9C9E4                  	jmp	STRCOMP
 28720                                  
 28721                                  ;============================================================================
 28722                                  ; CPARSE.ASM, MSDOS 6.0, 1991
 28723                                  ;============================================================================
 28724                                  ; 30/09/2018 - Retro DOS v3.0
 28725                                  ; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28726                                  
 28727                                  ;-----------------------------------------------------------------------;
 28728                                  ; ENTRY:								;
 28729                                  ;	DS:SI	Points input buffer					;
 28730                                  ;	ES:DI	Points to the token buffer				;
 28731                                  ;	BL	Special delimiter for this call 			;
 28732                                  ;		    Always checked last 				;
 28733                                  ;		    set it to space if there is no special delimiter	;
 28734                                  ; EXIT: 								;
 28735                                  ;	DS:SI	Points to next char in the input buffer 		;
 28736                                  ;	ES:DI	Points to the token buffer				;
 28737                                  ;	[STARTEL] Points to start of last element of path in token	;
 28738                                  ;		points to a NUL for no element strings 'd:' 'd:/'       ;
 28739                                  ;	CX	Character count 					;
 28740                                  ;	BH	Condition Code						;
 28741                                  ;			Bit 1H of BH set if switch character		;
 28742                                  ;				Token buffer contains char after	;
 28743                                  ;				switch character			;
 28744                                  ;				BP has switch bits set (ORing only)	;
 28745                                  ;			Bit 2H of BH set if ? or * in token		;
 28746                                  ;				if * found element ? filled		;
 28747                                  ;			Bit 4H of BH set if path sep in token		;
 28748                                  ;			Bit 80H of BH set if the special delimiter	;
 28749                                  ;			   was skipped at the start of this token	;
 28750                                  ;		Token buffer always starts d: for non switch tokens	;
 28751                                  ;	CARRY SET							;
 28752                                  ;	    if CR on input						;
 28753                                  ;		token buffer not altered				;
 28754                                  ;									;
 28755                                  ;	DOES NOT RETURN ON BAD PATH, OR TRAILING SWITCH CHAR ERROR	;
 28756                                  ; MODIFIES:								;
 28757                                  ;	CX, SI, AX, BH, DX and the Carry Flag				;
 28758                                  ;									;
 28759                                  ;-----------------------------------------------------------------------;
 28760                                  
 28761                                  ; Modifications to cparse: recognition of right and left parentheses
 28762                                  ; as integral tokens, and removal of automatic upper-case conversion code.
 28763                                  ;
 28764                                  ; Both modifications were installed in the course of adding a coherent
 28765                                  ; command-line parser to COMMAND.COM which builds a UNIX-style argv[]/argc
 28766                                  ; structure for command-line arguments. This parser relies on cparse to
 28767                                  ; recognize individual tokens.
 28768                                  ;
 28769                                  ; To process for-loops correctly, parentheses must therefore be
 28770                                  ; recognized as tokens. The upper-case conversion code was removed so
 28771                                  ; that commands (such as for and echo) would be able to use the "original"
 28772                                  ; text of the command line.
 28773                                  ;
 28774                                  ; Note also the modification to prevent the automatic conversion of colons
 28775                                  ; into spaces WITHIN THE SOURCE TEXT!
 28776                                  ;
 28777                                  ; Also note that BP is also clobbered if cparse recognizes any switches
 28778                                  ; on the command line.
 28779                                  ;
 28780                                  ; Alan L, OS/MSDOS				    14 August 1983
 28781                                  
 28782                                  ; ---------------------------------------------------------------------------
 28783                                  
 28784                                  ; COMEQU.ASM (MSDOS 6.0, 1991)
 28785                                  
 28786                                  ;FSWITCH	EQU	8000h
 28787                                  ;FBADSWITCH	EQU	4000h
 28788                                  
 28789                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3334h
 28790                                  
 28791                                  ; =============== S U B	R O U T	I N E =======================================
 28792                                  		
 28793                                  	; 28/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 28794                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 431Fh
 28795                                  
 28796                                  cparse:
 28797 00004159 31C0                    	xor	ax,ax
 28798 0000415B 893E[FB8D]              	mov	[STARTEL],di		; No path element (Is DI correct?)
 28799 0000415F A2[FE8D]                	mov	[ELPOS],al		; Start in 8 char prefix
 28800                                  	; MSDOS 3.3
 28801                                  	;mov	[SOURCE],al		
 28802                                  	; MSDOS 6.0
 28803 00004162 A2[FF8D]                	mov	[SKPDEL], al		; No skip delimiter yet
 28804 00004165 88C7                    	mov	bh,al			; Init nothing
 28805 00004167 9C                      	pushf				; save flags
 28806 00004168 57                      	push	di			; save the token buffer addrss
 28807 00004169 31C9                    	xor	cx,cx			; no chars in token buffer
 28808 0000416B 880E[2A8C]              	mov	[comma],cl		; reset comma flag
 28809                                  moredelim:
 28810 0000416F AC                      	lodsb
 28811 00004170 E875E4                  	call	DELIM
 28812 00004173 751D                    	jnz	short SCANCDONE
 28813 00004175 3C20                    	cmp	al,' '
 28814 00004177 74F6                    	jz	short moredelim
 28815 00004179 3C09                    	cmp	al,9
 28816 0000417B 74F2                    	jz	short moredelim
 28817                                  	;xchg	al,[SOURCE]
 28818                                  	; 28/03/2023
 28819 0000417D 8606[FF8D]              	xchg	al,[SKPDEL]
 28820 00004181 08C0                    	or	al,al
 28821 00004183 74EA                    	jz	short moredelim		; One non space/tab delimiter allowed
 28822 00004185 F6C780                  	test	bh,80h			; has a special char been found?
 28823 00004188 7405                    	jz	short no_comma		; no - just exit
 28824 0000418A C606[2A8C]01            	mov	byte [comma],1		; set comma flag
 28825                                  no_comma:
 28826 0000418F E92A01                  	jmp	x_done			; Nul argument
 28827                                  
 28828                                  SCANCDONE:
 28829                                  	; 28/03/2023
 28830                                  	; MSDOS 6.0
 28831                                  	; -----------------------------------
 28832                                  	; Mod to avoid upper-case conversion.
 28833                                  	; -----------------------------------
 28834                                  	; MSDOS 3.3
 28835                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 28836                                  	;jnz	short cpcont1		; 3/3/KK
 28837                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 28838                                  cpcont1:
 28839                                  	; -----------------------------------
 28840                                  	; 28/03/2023
 28841 00004192 38D8                    	cmp	al,bl			; Special delimiter?
 28842 00004194 7505                    	jne	short nospec
 28843 00004196 80CF80                  	or	bh,80h
 28844 00004199 EBD4                    	jmp	short moredelim
 28845                                  nospec:
 28846 0000419B 3C0D                    	cmp	al,0Dh			; a CR?
 28847 0000419D 7503                    	jne	short ncperror
 28848 0000419F E91501                  	jmp	cperror
 28849                                  ncperror:
 28850 000041A2 3A06[C98A]              	cmp	al,[SWITCHAR]		; is the char the switch char?
 28851 000041A6 7503                    	jne	short na_switch		; yes, process...
 28852 000041A8 E91401                  	jmp	a_switch
 28853                                  na_switch:
 28854 000041AB B23A                    	mov	dl,':'
 28855 000041AD 3814                    	cmp	[si],dl
 28856 000041AF 751D                    	jne	short anum_chard	; Drive not specified
 28857                                  	; 28/03/2023
 28858                                  	; MSDOS 6.0 
 28859 000041B1 803E[B98C]01            	cmp	byte [cpyflag],1	; 3/3/KK
 28860 000041B6 7503                    	jne	short cpcont2		; 3/3/KK
 28861 000041B8 E830E2                  	call	UPCONV			; 3/3/KK
 28862                                  cpcont2:
 28863 000041BB E85901                  	call	move_char
 28864 000041BE AC                      	lodsb				; Get the ':'
 28865 000041BF E85501                  	call	move_char
 28866 000041C2 893E[FB8D]              	mov	[STARTEL],di
 28867 000041C6 C606[FD8D]00            	mov	byte [ELCNT],0
 28868 000041CB E9B300                  	jmp	anum_test
 28869                                  anum_chard:
 28870 000041CE 893E[FB8D]              	mov	[STARTEL],di
 28871 000041D2 C606[FD8D]00            	mov	byte [ELCNT],0		; Store of this char sets it to one
 28872 000041D7 803E[B98C]01            	cmp	byte [cpyflag],1	; Was CPARSE called from COPY?
 28873 000041DC 751D                    	jnz	short anum_char		; No, don't add drive spec.
 28874 000041DE E88DE4                  	call	pathchrcmp		; Starts with a pathchar?
 28875 000041E1 7518                    	jnz	short anum_char		; no
 28876 000041E3 50                      	push	ax
 28877 000041E4 A0[D98A]                	mov	al,[CURDRV]		; Insert drive spec
 28878                                  	;add	al,[CAPITAL_A]
 28879                                  	; 28/03/2023
 28880                                  	; MSDOS 6.0
 28881 000041E7 0441                    	add	al,'A' ; 41h
 28882 000041E9 E82B01                  	call	move_char
 28883 000041EC B03A                    	mov	al,':' ; 3Ah
 28884 000041EE E82601                  	call	move_char
 28885 000041F1 58                      	pop	ax
 28886 000041F2 893E[FB8D]              	mov	[STARTEL],di
 28887 000041F6 C606[FD8D]00            	mov	byte [ELCNT],0
 28888                                  anum_char:
 28889                                  	; 28/03/2023
 28890                                  	; MSDOS 6.0
 28891 000041FB E8C3E1                  	call	testkanj		;AC048			
 28892 000041FE 7406                    	jz	short NOTKANJ		;AC048;
 28893 00004200 E81401                  	call	move_char
 28894 00004203 AC                      	lodsb
 28895 00004204 EB78                    	jmp	short notspecial
 28896                                  
 28897                                  NOTKANJ:				;AN048; If not kanji
 28898 00004206 803E[B98C]01            	cmp	byte [cpyflag],1	;AN048; and if we're in COPY
 28899 0000420B 7503                    	jne	short TESTDOT 		;AN048;
 28900 0000420D E8DBE1                  	call	UPCONV			;AN048; upper case the char
 28901                                  TESTDOT:
 28902                                  	; 28/03/2023
 28903                                  	;cmp	al,dot_chr  ; 2Eh
 28904 00004210 3C2E                    	cmp	al,'.'
 28905 00004212 7509                    	jne	short testquest
 28906 00004214 FE06[FE8D]              	inc	byte [ELPOS] 		; flag in extension
 28907 00004218 C606[FD8D]FF            	mov	byte [ELCNT],0FFh	; Store of the '.' resets it to 0
 28908                                  testquest:
 28909 0000421D 3C3F                    	cmp	al,'?'  ; 3Fh
 28910 0000421F 7503                    	jnz	short testsplat
 28911 00004221 80CF02                  	or	bh,2
 28912                                  testsplat:
 28913                                  	;cmp	al,[STAR]
 28914 00004224 3C2A                    	cmp	al,star	; 2Ah
 28915                                  	; 27/04/2023
 28916                                  	;cmp	al,'*' 
 28917 00004226 7530                    	jne	short testpath
 28918 00004228 80CF02                  	or	bh,2
 28919 0000422B 803E[368E]00            	cmp	byte [expand_star],0
 28920 00004230 7504                    	jne	short expand_filename
 28921 00004232 EB24                    	jmp	short testpath
 28922                                  
 28923                                  BADPERR2J:
 28924                                  	;jmp	BADPERR2
 28925                                  	; 28/03/2023
 28926                                  	; MSDOS 6.0
 28927 00004234 EB75                    	jmp	short BADPERR2
 28928                                  
 28929                                  expand_filename:
 28930 00004236 B407                    	mov	ah,7
 28931 00004238 803E[FE8D]00            	cmp	byte [ELPOS],0
 28932 0000423D 7402                    	jz	short gotelcnt
 28933 0000423F B402                    	mov	ah,2
 28934                                  gotelcnt:
 28935 00004241 B03F                    	mov	al,'?'
 28936 00004243 2A26[FD8D]              	sub	ah,[ELCNT]
 28937 00004247 72EB                    	jb	short BADPERR2J
 28938 00004249 86E1                    	xchg	ah,cl
 28939 0000424B E309                    	jcxz	testpathx
 28940                                  qmove:
 28941 0000424D 86E1                    	xchg	ah,cl
 28942 0000424F E8C500                  	call	move_char
 28943 00004252 86E1                    	xchg	ah,cl
 28944 00004254 E2F7                    	loop	qmove
 28945                                  testpathx:
 28946 00004256 86E1                    	xchg	ah,cl
 28947                                  testpath:
 28948 00004258 E813E4                  	call	pathchrcmp
 28949 0000425B 7521                    	jnz	short notspecial
 28950 0000425D 80CF04                  	or	bh,4
 28951 00004260 803E[368E]00            	cmp	byte [expand_star],0
 28952 00004265 7405                    	jz	short no_err_check
 28953 00004267 F6C702                  	test	bh,2			; If just hit a '/', cannot have ? or * yet
 28954 0000426A 7545                    	jnz	short BADPERR
 28955                                  no_err_check:
 28956 0000426C 893E[FB8D]              	mov	[STARTEL],di	  	; New element
 28957 00004270 FF06[FB8D]              	inc	word [STARTEL]	  	; Point to char after /
 28958 00004274 C606[FD8D]FF            	mov	byte [ELCNT],0FFh 	; Store of '/' sets it to 0
 28959 00004279 C606[FE8D]00            	mov	byte [ELPOS],0
 28960                                  notspecial:
 28961 0000427E E89600                  	call	move_char		; just an alphanum string
 28962                                  anum_test:
 28963 00004281 AC                      	lodsb
 28964                                  
 28965                                  	; 28/03/2023
 28966                                  	; MSDOS 6.0
 28967                                  	; -----------------------------------
 28968                                  	; Mod to avoid upper-case conversion.
 28969                                  	; -----------------------------------
 28970                                  	; MSDOS 3.3
 28971                                  	;cmp	byte [CPYFLAG],1	; 3/3/KK
 28972                                  	;jnz	short cpcont3		; 3/3/KK
 28973                                  	;call	UPCONV_MAPCALL		; 3/3/KK
 28974                                  cpcont3:
 28975                                  	; -----------------------------------
 28976                                  
 28977 00004282 E863E3                  	call	DELIM
 28978 00004285 7435                    	jz	short x_done
 28979 00004287 3C0D                    	cmp	al,0Dh
 28980 00004289 7431                    	je	short x_done
 28981 0000428B 3A06[C98A]              	cmp	al,[SWITCHAR]
 28982 0000428F 742B                    	je	short x_done
 28983 00004291 38D8                    	cmp	al,bl
 28984 00004293 7427                    	je	short x_done
 28985 00004295 3C3A                    	cmp	al,':'			; ':' allowed as trailer because of devices
 28986                                  	; 28/03/2023
 28987                                  	; MSDOS 3.3
 28988                                  	;jnz	short ANUM_CHARJ 
 28989                                  	; MSDOS 6.0
 28990 00004297 7403                    	je	short FOO15
 28991 00004299 E95FFF                  	jmp	anum_char
 28992                                  
 28993                                  ; Modification made for parseline.
 28994                                  ; Why would it be necessary to change colons to spaces? In this
 28995                                  ; case, EVERY colon is changed to a space; e.g., 'f:' yields 'f ',
 28996                                  ; but so does 'echo foo:bar' yield 'echo foo bar'.
 28997                                  
 28998                                  FOO15:
 28999 0000429C 803E[B98C]02            	cmp	byte [cpyflag],2
 29000 000042A1 7505                    	jnz	short cpcont4
 29001 000042A3 E87100                  	call	move_char
 29002 000042A6 EBD9                    	jmp	short anum_test
 29003                                  cpcont4:
 29004 000042A8 46                      	inc	si			; Skip the ':'
 29005 000042A9 EB11                    	jmp	short x_done
 29006                                  
 29007                                  	; 28/03/2023
 29008                                  ;ANUM_CHARJ:
 29009                                  	;jmp	anum_char
 29010                                  
 29011                                  BADPERR2:
 29012 000042AB BA[2C7F]                	mov	dx,BADCPMES_PTR
 29013 000042AE E9A3E6                  	jmp	cerror
 29014                                  
 29015                                  BADPERR:
 29016                                  	; 28/03/2023
 29017                                  	;jmp	BADCDERR  ; MSDOS 3.3	
 29018                                  BADCDERR:
 29019                                  	; MSDOS 6.0
 29020 000042B1 BA[5680]                	mov	dx,badcd_ptr		;AC022; Issue "Invalid Directory"
 29021 000042B4 E99DE6                  	jmp	cerror			;AC022;  message
 29022                                  	
 29023                                  cperror:
 29024 000042B7 4E                      	dec	si			; adjust the pointer
 29025 000042B8 5F                      	pop	di			; retrive token buffer address
 29026 000042B9 9D                      	popf				; restore flags
 29027 000042BA F9                      	stc				; set the carry bit
 29028 000042BB C3                      	retn
 29029                                  
 29030                                  x_done:
 29031 000042BC 4E                      	dec	si			; adjust for next round
 29032                                  
 29033                                  ; Mod to recognize right and left parens as integral tokens.
 29034                                  ;x_done2:
 29035 000042BD EB51                    	jmp	short out_token
 29036                                  
 29037                                  a_switch:
 29038 000042BF 80CF01                  	or	bh,1			; Indicate switch
 29039                                  	;or	bp,FSWITCH ; 8000h
 29040                                  	; 28/03/2023
 29041 000042C2 81CD0080                	or	bp,8000h
 29042 000042C6 E817E3                  	call	scanoff
 29043 000042C9 46                      	inc	si
 29044                                  	; 28/03/2023
 29045                                  	; MSDOS 6.0
 29046 000042CA E8F4E0                  	call	testkanj		;AN057; See if DBCS lead byte
 29047 000042CD 740D                    	jz	short a_switch_notkanj	;AN057; no - continue processing
 29048 000042CF E84500                  	call	move_char		;AN057; DBCS - store first byte
 29049 000042D2 AC                      	lodsb				;AN057; get second byte
 29050 000042D3 E84100                  	call	move_char		;AN057; store second byte
 29051                                  	;or	bp,FBADSWITCH ; 4000h	;AN057; DBCS switch is invalid
 29052 000042D6 81CD0040                	or	bp,4000h
 29053 000042DA EB34                    	jmp	short out_token 	;AN057; don't bother checking switch
 29054                                  a_switch_notkanj:			;AN057;
 29055 000042DC 3C0D                    	cmp	al,0Dh
 29056 000042DE 7509                    	jne	short Store_swt
 29057 000042E0 B000                    	mov	al,0
 29058 000042E2 AA                      	stosb
 29059                                  	;or	bp,FBADSWITCH ; 4000h
 29060 000042E3 81CD0040                	or	bp,4000h
 29061 000042E7 EBCE                    	jmp	short cperror		; Trailing switch character error
 29062                                  					;   BP = fSwitch but no switch
 29063                                  					;   bit is set (unknown switch)
 29064                                  Store_swt:
 29065 000042E9 E82B00                  	call	move_char		; store the character
 29066                                  
 29067                                  ; This upconv call must stay. It is used to identify copy-switches
 29068                                  ; on the command line, and won't store anything into the output buffer.
 29069                                  
 29070                                  	;call	UPCONV_MAPCALL ; MSDOS 3.3 (Retro DOS 3.0)
 29071                                  	; 28/03/2023
 29072 000042EC E8FCE0                  	call	UPCONV 	; MSDOS 6.0 & MSDOS 5.0 (Retro DOS 4.0)
 29073                                  	
 29074 000042EF 06                      	push	es
 29075 000042F0 57                      	push	di
 29076 000042F1 51                      	push	cx
 29077 000042F2 0E                      	push	cs
 29078 000042F3 07                      	pop	es
 29079                                  	; 28/03/2023
 29080                                  	; MSDOS 3.3
 29081                                  	;mov	di,SWITCH_LIST ; "VBAPW"
 29082                                  	; MSDOS 6.0
 29083 000042F4 BF[5184]                	mov	di,switch_list ; "?VBAPW"
 29084                                  	; MSDOS 3.3
 29085                                  	;mov	cx,SWCOUNT ; 5
 29086                                  	; MSDOS 6.0
 29087 000042F7 B90600                  	mov	cx,6  ; SWCOUNT = 6
 29088                                  	;or	bp,FBADSWITCH  ; 4000h
 29089 000042FA 81CD0040                	or	bp,4000h
 29090 000042FE F2AE                    	repne	scasb
 29091 00004300 750B                    	jnz	short out_tokenp
 29092                                  	;and	bp,~FBADSWITCH ; 0BFFFh
 29093 00004302 81E5FFBF                	and	bp,0BFFFh
 29094 00004306 B80100                  	mov	ax,1
 29095 00004309 D3E0                    	shl	ax,cl
 29096 0000430B 09C5                    	or	bp,ax
 29097                                  out_tokenp:
 29098 0000430D 59                      	pop	cx
 29099 0000430E 5F                      	pop	di
 29100 0000430F 07                      	pop	es
 29101                                  out_token:
 29102 00004310 B000                    	mov	al,0			; null at the end
 29103 00004312 AA                      	stosb
 29104 00004313 5F                      	pop	di			; restore token buffer pointer	
 29105 00004314 9D                      	popf
 29106 00004315 F8                      	clc				; clear carry flag
 29107 00004316 C3                      	retn
 29108                                  
 29109                                  ; =============== S U B	R O U T	I N E =======================================
 29110                                  
 29111                                  	; 28/03/2023
 29112                                  move_char:
 29113 00004317 AA                      	stosb				; store char in token buffer
 29114 00004318 41                      	inc	cx			; increment char count
 29115 00004319 FE06[FD8D]              	inc	byte [ELCNT]		; increment element count for * substi
 29116 0000431D C3                      	retn
 29117                                  
 29118                                  ;============================================================================
 29119                                  ; PARSE.ASM, MSDOS 6.0, 1991
 29120                                  ;============================================================================
 29121                                  ; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29122                                  
 29123                                  ; -----------------------------
 29124                                  ; (PSDATA.INC, MSDOS 6.0, 1991)
 29125                                  ; -----------------------------
 29126                                  
 29127                                  ;**** Equation field
 29128                                  ;-------- Character code definition
 29129                                  
 29130                                  $P_DBSP1	   equ	20h ; DB_SP_HI	;AN000; 1st byte of DBCS blank
 29131                                  $P_DBSP2	   equ	20h ; DB_SP_LO	;AN000; 2nd byte of DBCS blank
 29132                                  $P_Period	   equ	"."             ;AN020;
 29133                                  $P_Slash	   equ	"/"             ;AN020;
 29134                                  $P_Space	   equ	" "             ;AN000; SBCS blank
 29135                                  $P_Comma	   equ	","             ;AN000;
 29136                                  $P_Switch	   equ	"/"             ;AN000;
 29137                                  $P_Keyword	   equ	"="             ;AN000;
 29138                                  $P_Colon	   equ	":"             ;AN000;
 29139                                  $P_Plus 	   equ	"+"             ;AN000;
 29140                                  $P_Minus	   equ	"-"             ;AN000;
 29141                                  $P_Rparen	   equ	")"             ;AN000;
 29142                                  $P_Lparen	   equ	"("             ;AN000;
 29143                                  ;(deleted ;AN025;) $P_SQuote equ  "'"
 29144                                  $P_DQuote	   equ	'"'             ;AN000;
 29145                                  $P_NULL 	   equ	0		;AN000;
 29146                                  $P_TAB		   equ	9		;AN000;
 29147                                  $P_CR		   equ	0Dh		;AN000;
 29148                                  $P_LF		   equ	0Ah		;AN000;
 29149                                  $P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 29150                                  
 29151                                  $P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 29152                                  $P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 29153                                  
 29154                                  $P_error_filespec  equ  1
 29155                                  
 29156                                  ;----------------------------------------------------------------------------
 29157                                  ; PARMS LABEL	BYTE
 29158                                  ;	DW	PARMSX
 29159                                  ;	DB	2		; NUMBER OF STRINGS (0, 1, 2)
 29160                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 29161                                  ;	DB	" .. "          ; EXTRA DELIMITER LIST,
 29162                                  ;				; TYPICAL ARE ";", "="
 29163                                  ;				; "," & WHITESPACE ALWAYS
 29164                                  ;	DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 29165                                  ;	DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 29166                                  ;----------------------------------------------------------------------------
 29167                                  
 29168                                  struc $P_PARMS_BLK			;AN000;
 29169 00000000 ????                    .$P_PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 29170 00000002 ??                      .$P_Num_Extra:	     resb 1		;AN000; Number of extra stuff
 29171 00000003 ??                      .$P_Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 29172                                  endstruc 				;AN000;
 29173                                  
 29174                                  $P_Len_PARMS	   equ	4		;AN000;
 29175                                  $P_I_Use_Default   equ	0		;AN000; no extra stuff specified
 29176                                  $P_I_Have_Delim    equ	1		;AN000; extra delimiter specified
 29177                                  $P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 29178                                  
 29179                                  ;----------------------------------------------------------------------------
 29180                                  ; PARMSX LABEL	BYTE
 29181                                  ;	DB	minp,maxp		; MIN, MAX POSITIONAL OPERANDS ALLOWED
 29182                                  ;	DW	CONTROL 		; DESCRIPTION OF POSITIONAL 1
 29183                                  ;	:				; REPEATS maxp-1 TIMES
 29184                                  ;	DB	maxs			; # OF SWITCHES
 29185                                  ;	DW	CONTROL 		; DESCRIPTION OF SWITCH 1
 29186                                  ;	:				; REPEATS maxs-1 TIMES
 29187                                  ;	DB	maxk			; # OF KEYWORD
 29188                                  ;	DW	CONTROL 		; DESCRIPTION OF KEYWORD 1
 29189                                  ;	:				; REPEATS maxk-1 TIMES
 29190                                  ;----------------------------------------------------------------------------
 29191                                  
 29192                                  struc $P_PARMSX_BLK			;AN000;
 29193 00000000 ??                      .$P_MinP: 	 resb 1	 ; 27/04/2023	;AN000; Minimum positional number
 29194 00000001 ??                      .$P_MaxP: 	 resb 1			;AN000; Maximum positional number
 29195 00000002 ??                      .$P_1st_Control: resb 1			;AN000; Address of the 1st CONTROL block
 29196                                  endstruc				;AN000;
 29197                                  
 29198                                  ; 31/03/2023
 29199                                  ;----------------------------------------------------------------------------
 29200                                  ; << Control field definition >>
 29201                                  ;
 29202                                  ;CONTROL   LABEL   BYTE
 29203                                  ;	   DW MATCH_FLAGS	; CONTROLS TYPE MATCHED
 29204                                  ;				; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 29205                                  ;				; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 29206                                  ;				; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 29207                                  ;				; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 29208                                  ;				; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 29209                                  ;				; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 29210                                  ;				; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 29211                                  ;				; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 29212                                  ;				; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 29213                                  ;				; 0010H=IGNORE ":" AT END IN MATCH
 29214                                  ;				; 0002H=REPEATS ALLOWED
 29215                                  ;				; 0001H=OPTIONAL
 29216                                  ;	   DW FUNCTION_FLAGS
 29217                                  ;				; 0001H=CAP RESULT BY FILE TABLE
 29218                                  ;				; 0002H=CAP RESULT BY CHAR TABLE
 29219                                  ;				; 0010H=REMOVE ":" AT END
 29220                                  ; (tm10)			; 0020H=colon is not necessary for switch
 29221                                  ;
 29222                                  ;	   DW RESULT		; RESULT BUFFER
 29223                                  ;	   DW VALUES		; VALUE LISTS
 29224                                  ;	   DB nid		; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 29225                                  ;	   DB "...",0		; IF n >0, KEYWORD 1
 29226                                  ;	   :
 29227                                  ;
 29228                                  ;Note:
 29229                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 29230                                  ;      DATE bit simalteniously.
 29231                                  ;
 29232                                  ;      The parser examins each bit along with the following priority.
 29233                                  ;
 29234                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 29235                                  ;      FILE SPEC -> SIMPLE STRING.
 29236                                  ;
 29237                                  ;
 29238                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 29239                                  ;      in the result buffer is capitalized.
 29240                                  ;
 29241                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 29242                                  ;
 29243                                  ;
 29244                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 29245                                  ;      switch, for example, '/A', then STRING points to;
 29246                                  ;
 29247                                  ;		DB    1 	; number of following synonyms
 29248                                  ;		DB   '/A',0
 29249                                  ;
 29250                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 29251                                  ;
 29252                                  ;		DB    1 	; number of following synonyms
 29253                                  ;		DB   'CODEPAGE=',0
 29254                                  ;
 29255                                  ;
 29256                                  ;    - "..." must consist of upper case characters only because the parser
 29257                                  ;      performs pattern matching after converting input to upper case (by
 29258                                  ;      using the current country upper case table)
 29259                                  ;
 29260                                  ;
 29261                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 29262                                  ;      example /A and /B, the format will be;
 29263                                  ;
 29264                                  ;		DB    2 	; number of following synonyms
 29265                                  ;		DB    '/A',0
 29266                                  ;		DB    '/B',0
 29267                                  ;----------------------------------------------------------------------------
 29268                                  
 29269                                  ;**** Match_Flags
 29270                                  
 29271                                  $P_Num_Val	   equ	8000h		;AN000; Numeric Value
 29272                                  $P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 29273                                  $P_Simple_S	   equ	2000h		;AN000; Simple string
 29274                                  $P_Date_S	   equ	1000h		;AN000; Date string
 29275                                  $P_Time_S	   equ	0800h		;AN000; Time string
 29276                                  $P_Cmpx_S	   equ	0400h		;AN000; Complex string
 29277                                  $P_File_Spc	   equ	0200h		;AN000; File Spec
 29278                                  $P_Drv_Only	   equ	0100h		;AN000; Drive Only
 29279                                  $P_Qu_String	   equ	0080h		;AN000; Quoted string
 29280                                  $P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 29281                                  $P_Repeat	   equ	0002h		;AN000; Repeat allowed
 29282                                  $P_Optional	   equ	0001h		;AN000; Optional
 29283                                  
 29284                                  ;**** Function flags
 29285                                  
 29286                                  $P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 29287                                  $P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 29288                                  $P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 29289                                  $P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 29290                                  
 29291                                  ;-------------------------------- Control block structure
 29292                                  struc $P_CONTROL_BLK
 29293 00000000 ????                    .$P_Match_Flag:	   resw 1		;AN000; Controls type matched
 29294 00000002 ????                    .$P_Function_Flag: resw 1		;AN000; Function should be taken
 29295 00000004 ????                    .$P_Result_Buf:	   resw 1		;AN000; Result buffer address
 29296 00000006 ????                    .$P_Value_List:	   resw 1		;AN000; Value list address
 29297 00000008 ??                      .$P_nid:	   resb 1		;AN000; # of keyword/SW synonyms
 29298 00000009 ??                      .$P_KEYorSW:	   resb 1		;AN000; keyword or sw
 29299                                  endstruc
 29300                                  
 29301                                  ; 31/03/2023
 29302                                  ;----------------------------------------------------------------------------
 29303                                  ;
 29304                                  ;VALUES LABEL	BYTE
 29305                                  ;	DB	nval		; NUMBER OF VALUE DEFINITIONS (0 - 3)
 29306                                  ;	+-
 29307                                  ;	| DB	nrng		; NUMBER OF RANGES
 29308                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF RANGE MATCHED
 29309                                  ;	| +DD	X,Y		; RANGE OF VALUES
 29310                                  ;	|	:
 29311                                  ;	| DB	nnval		; NUMBER OF CHOICES
 29312                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF NUMBER CHOICE MATCHED
 29313                                  ;	| +DD	VALUE		; SPECIFIC CHOICE IF NUMBER
 29314                                  ;	|	:
 29315                                  ;	| DB	nstrval 	; NUMBER OF CHOICES
 29316                                  ;	| +DB	ITEM_TAG	; RETURN VALUE IF STRING CHOICE MATCHED
 29317                                  ;	| +DW	STRING		; SPECIFIC CHOICE IF STING
 29318                                  ;	+-	:
 29319                                  ;
 29320                                  ;STRING DB	"...",0		; ASCIIZ STRING IMAGE
 29321                                  ;
 29322                                  ;Note:
 29323                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 29324                                  ;      when no choice lists are provided.
 29325                                  ;
 29326                                  ;    - STRING must consist of upper case characters only because the parser
 29327                                  ;      performs pattern matching after converting input to upper case (by
 29328                                  ;      using the current country upper case table)
 29329                                  ;----------------------------------------------------------------------------
 29330                                  
 29331                                  $P_nval_None	equ 0		;AN000; no value list ID
 29332                                  $P_nval_Range	equ 1		;AN000; range list ID
 29333                                  $P_nval_Value	equ 2		;AN000; value list ID
 29334                                  $P_nval_String	equ 3		;AN000; string list ID
 29335                                  $P_Len_Range	equ 9		;AN000; Length of a range choice(two DD plus one DB)
 29336                                  $P_Len_Value	equ 5		;AN000; Length of a value choice(one DD plus one DB)
 29337                                  $P_Len_String	equ 3		;AN000; Length of a string choice(one DW plus one DB)
 29338                                  $P_No_nrng	equ 0		;AN000; (tm07) no nrng. nnval must not be 0.
 29339                                  
 29340                                  struc $P_VAL_LIST
 29341 00000000 ??                      .$P_NumofList:	resb 1		;AN000; number of following choice
 29342 00000001 ????                    .$P_Val_XL:	resw 1		;AN000; lower word of value
 29343 00000003 ????                    .$P_Val_XH:	resw 1		;AN000; higher word of value
 29344 00000005 ????                    .$P_Val_YL:	resw 1		;AN000; lower word of another value
 29345 00000007 ????                    .$P_Val_YH:	resw 1		;AN000; higher word of another value
 29346                                  endstruc
 29347                                  
 29348                                  ; 31/03/2023
 29349                                  ;----------------------------------------------------------------------------
 29350                                  ;
 29351                                  ;RESULT LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 29352                                  ;	DB	type			; TYPE RETURNED: 0=RESERVED,
 29353                                  ;					;	1=NUMBER, 2=LIST INDEX,
 29354                                  ;					;	3=STRING, 4=COMPLEX,
 29355                                  ;					;	5=FILESPEC, 6=DRIVE
 29356                                  ;					;	7=DATE, 8=TIME
 29357                                  ;					;	9=QUOTED STRING
 29358                                  ;	DB	ITEM_TAG		; MATCHED ITEM TAG
 29359                                  ;
 29360                                  ;	dw	synonym@		; es:@ points to found SYNONYM if provided.
 29361                                  ;
 29362                                  ;       +-
 29363                                  ;       | DD	n			; VALUE IF NUMBER
 29364                                  ;       | or
 29365                                  ;       |	DW i			; INDEX (OFFSET) INTO VALUE LIST
 29366                                  ;       |				; (ES presents Segment address)
 29367                                  ;       | or
 29368                                  ;       |	DD STRING		; OFFSET OF STRING VALUE
 29369                                  ;       | or
 29370                                  ;       |	DB drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 29371                                  ;       | or
 29372                                  ;       |	DW YEAR	   		;(1980-2099)  IN CASE OF DATE
 29373                                  ;       |	DB MONTH   ;(1-12)	 Note: Range check is not performed.
 29374                                  ;       |	DB DATE	   ;(1-31)	 0 is filled when the corresponding field was not specified.
 29375                                  ;       | or
 29376                                  ;       |	DB HOUR	   ;(0-23)	 IN CASE OF TIME
 29377                                  ;       |	DB MINUTES    ;(0-59)	 Note: Range check is not performed .
 29378                                  ;       |	DB SECONDS    ;(0-59)	 0 is filled when the corresponding field was not specified .
 29379                                  ;       |	DB HUNDREDTHS ;(0-99)
 29380                                  ;       +-
 29381                                  ;
 29382                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 29383                                  ;      list.
 29384                                  ;
 29385                                  ;      YEAR: If the input value for the year is less than 100, parser
 29386                                  ;	     adds 1900 to it. For example, when 87 is input to parser for
 29387                                  ;	     the year value, he returns 1987.
 29388                                  ;----------------------------------------------------------------------------
 29389                                  
 29390                                  ;-------------------------------- Result block structure
 29391                                  struc $P_RESULT_BLK;
 29392 00000000 ??                      .$P_Type:	 resb 1		;AN000; Type returned
 29393 00000001 ??                      .$P_Item_Tag:	 resb 1		;AN000; Matched item tag
 29394 00000002 ????                    .$P_SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 29395 00000004 ????????                .$P_Picked_Val:	 resb 4		;AN000; value
 29396                                  endstruc
 29397                                  
 29398                                  ;**** values for the type field in the result block
 29399                                  
 29400                                  $P_EOL		 equ 0		;AN000; End of line
 29401                                  $P_Number	 equ 1		;AN000; Number
 29402                                  $P_List_Idx	 equ 2		;AN000; List Index
 29403                                  $P_String	 equ 3		;AN000; String
 29404                                  $P_Complex	 equ 4		;AN000; Complex
 29405                                  $P_File_Spec	 equ 5		;AN000; File Spec
 29406                                  $P_Drive	 equ 6		;AN000; Drive
 29407                                  $P_Date_F	 equ 7		;AN000; Date
 29408                                  $P_Time_F	 equ 8		;AN000; Time
 29409                                  $P_Quoted_String equ 9		;AN000; Quoted String
 29410                                  
 29411                                  $P_No_Tag	 equ 0FFh	;AN000; No ITEM_TAG found
 29412                                  
 29413                                  ;**** Return code
 29414                                  ;
 29415                                  ; following return code will be returned in the AX register.
 29416                                  
 29417                                  $P_No_Error	 equ 0		;AN000; No error
 29418                                  $P_Too_Many	 equ 1		;AN000; Too many operands
 29419                                  $P_Op_Missing	 equ 2		;AN000; Required operand missing
 29420                                  $P_Not_In_SW	 equ 3		;AN000; Not in switch list provided
 29421                                  $P_Not_In_Key	 equ 4		;AN000; Not in keyword list provided
 29422                                  $P_Out_Of_Range  equ 6		;AN000; Out of range specified
 29423                                  $P_Not_In_Val	 equ 7		;AN000; Not in value list provided
 29424                                  $P_Not_In_Str	 equ 8		;AN000; Not in string list provided
 29425                                  $P_Syntax	 equ 9		;AN000; Syntax error
 29426                                  $P_RC_EOL	 equ -1		;AN000; End of command line
 29427                                  
 29428                                  ;in second byte of $P_Flags, referenced as $P_Flags2:
 29429                                  $P_equ		 equ 01h	;AN000; "=" packed in string buffet
 29430                                  $P_Neg		 equ 02h	;AN000; Negative value
 29431                                  $P_Time12	 equ 04h	;AN000; set when PM is specified
 29432                                  $P_Key_Cmp	 equ 08h	;AN000; set when keyword compare
 29433                                  $P_SW_Cmp	 equ 10h	;AN000; set when switch compare
 29434                                  $P_Extra	 equ 20h	;AN000; set when extra delimiter found
 29435                                  $P_SW		 equ 40h	;AN000; set when switch found (tm08)
 29436                                  $P_Signed	 equ 80h	;AN000; signed numeric specified
 29437                                  
 29438                                  ;-------- Masks
 29439                                  $P_Make_Lower	 equ 20h	;AN000; make lower case character
 29440                                  $P_Make_Upper	 equ 0FFh-$P_Make_Lower ;AN000; make upper case character
 29441                                  
 29442                                  ;-------------
 29443                                  
 29444                                  struc $P_DOS_TBL
 29445 00000000 ??                      .$P_DOS_InfoID:	 resb 1		;AN000; information id for the table
 29446 00000001 ????                    .$P_DOS_TBL_Off: resw 1		;AN000; offset address of the table
 29447 00000003 ????                    .$P_DOS_TBL_Seg: resw 1		;AN000; segment address of the table
 29448                                  endstruc
 29449                                  
 29450                                  $P_DOS_Get_TBL	 equ 65h	;AN000; get uppercase table call
 29451                                  				;AN000; following parameters are set
 29452                                  				;AN000; to get casemap table.
 29453                                  $P_DOSTBL_Def	 equ -1		;AN000; get default
 29454                                  $P_DOSTBL_BL	 equ 5		;AN000; buffer length for Tbl pointer
 29455                                  $P_DOSTBL_File	 equ 4		;AN000; get file uppercase table
 29456                                  $P_DOSTBL_Char	 equ 2		;AN000; get character uppercase table
 29457                                  				; By this call following information
 29458                                  				; is returned.
 29459                                  
 29460                                  ; 03/04/2023
 29461                                  ;-------------------------------- country dependent information
 29462                                  
 29463                                  $P_DOS_Get_CDI	equ 3800h
 29464                                  
 29465                                  struc $P_CDI
 29466 00000000 ????                    .$P_CDI_DateF:	resw 1		;AN000;
 29467 00000002 ????????                .$P_CDI_Money:	resb 4		;AN000;
 29468 00000006 ????                    .$P_CDI_1000:	resb 2		;AN000;
 29469 00000008 ????                    .$P_CDI_Dec:	resb 2		;AN000;
 29470 0000000A ????                    .$P_CDI_DateS:	resb 2		;AN000;
 29471 0000000C ????                    .$P_CDI_TimeS:	resb 2		;AN000;
 29472 0000000E ??                      		resb 1		;AN000;
 29473 0000000F ??                      		resb 1		;AN000;
 29474 00000010 ??                      .$P_CDI_TimeF:	resb 1		;AN000;
 29475 00000011 ????????                		resw 2		;AN000;
 29476 00000015 ????                    		resb 2		;AN000;
 29477 00000017 <res Ah>                		resw 5		;AN000;
 29478                                  endstruc
 29479                                  
 29480                                  $P_Date_MDY	equ 0		;AN000;
 29481                                  $P_Date_DMY	equ 1		;AN000;
 29482                                  $P_Date_YMD	equ 2		;AN000;
 29483                                  
 29484                                  ; ----------------------------
 29485                                  ; (PARSE.ASM, MSDOS 6.0, 1991)
 29486                                  ; ----------------------------
 29487                                  
 29488                                  ;***********************************************************************
 29489                                  ; SysParse;
 29490                                  ;
 29491                                  ;  Function : Parser Entry
 29492                                  ;
 29493                                  ;  Input: DS:SI -> command line
 29494                                  ;	  ES:DI -> parameter block
 29495                                  ;	  psdata_seg -> psdata.inc
 29496                                  ;	  CX = operand ordinal
 29497                                  ;
 29498                                  ;	  Note:  ES is the segment containing all the control blocks defined
 29499                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 29500                                  ;		 is in DS.
 29501                                  ;
 29502                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 29503                                  ;		    invalid value list. But this parser does NOT implement
 29504                                  ;		    this feature. Therefore CY always zero.
 29505                                  ;
 29506                                  ;	   CY = 0   AX = return code
 29507                                  ;		    BL = terminated delimiter code
 29508                                  ;		    CX = new operand ordinal
 29509                                  ;		    SI = set past scaned operand
 29510                                  ;		    DX = selected result buffer
 29511                                  ;
 29512                                  ; Use:	$P_Skip_Delim, $P_Chk_EOL, $P_Chk_Delim, $P_Chk_DBCS
 29513                                  ;	$P_Chk_Swtch, $P_Chk_Pos_Control, $P_Chk_Key_Control
 29514                                  ;	$P_Chk_Sw_Control, $P_Fill_Result
 29515                                  ;
 29516                                  ; Vars: $P_Ordinal(RW), $P_RC(RW), $P_SI_Save(RW), $P_DX(R), $P_Terminator(R)
 29517                                  ;	$P_SaveSI_Cmpx(W), $P_Flags(RW), $P_Found_SYNONYM(R), $P_Save_EOB(W)
 29518                                  ;
 29519                                  ;-------- Modification History -----------------------------------------
 29520                                  ;
 29521                                  ;  4/04/87 : Created by K. K,
 29522                                  ;  4/28/87 : $P_Val_YH assemble error (tm01)
 29523                                  ;	   : JMP SHORT assemble error (tm02)
 29524                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 29525                                  ;  6/12/87 : $P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 29526                                  ;	     DateSW equ 1)	      (tm04)
 29527                                  ;  6/12/87 : $P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 29528                                  ;				      (tm05) in PSDATA.INC
 29529                                  ;  6/12/87 : $P_FileSp_Char and $P_FileSP_Len are missing
 29530                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 29531                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 29532                                  ;	     value-list block	      (tm07)
 29533                                  ;  6/20/87 : Add $P_SW to check if there's an omiting parameter after
 29534                                  ;	     switch (keyword) or not. If there is, backup si for next call
 29535                                  ;	     (tm08)
 29536                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 29537                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 29538                                  ;  6/24/87 : New function flag $P_colon_is_not_necessary for switch
 29539                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 29540                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 29541                                  ;	     in user's routines. $P_Chk_DBCS (tm11)
 29542                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 29543                                  ;					  (tm12)
 29544                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 29545                                  ;					  (tm13)
 29546                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 29547                                  ;					  (tm14)
 29548                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 29549                                  ;					  (tm15)
 29550                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 29551                                  ;
 29552                                  ;  7/24/87 : Quoted strings being returned with quotes.
 29553                                  ;
 29554                                  ;  7/28/87 : Kerry S (;AN018;)
 29555                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 29556                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 29557                                  ;	     affected: $P_Chk_SW_Control.
 29558                                  ;
 29559                                  ;  7/29/87 : Kerry S (;AN019;)
 29560                                  ;	     Now allow the optional bit in match flags for switches.  This
 29561                                  ;	     allows the switch to be encountered with a value or without a
 29562                                  ;	     value and no error is returned.
 29563                                  ;
 29564                                  ;
 29565                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 29566                                  ;  9/14/87   In PROC $P_Get_DecNum, when checking for field separators
 29567                                  ;	     within a date response, instead of checking just for the one
 29568                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 29569                                  ;	     all three chars, "-", "/", and ".". Change $P_Chk_Switch to allow
 29570                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 29571                                  ;
 29572                                  ;  9/1/87  : Kerry S (;AN021)
 29573                                  ;	     In PROC $P_String_Comp, when comparing the switch or keyword on
 29574                                  ;	     the command line with the string in the control block the
 29575                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 29576                                  ;	     on the command line and assuming a match.	This allowed a shorter
 29577                                  ;	     string on the command line than in the synonym list in the control
 29578                                  ;	     block.  I put in a test for a null in the control block so the
 29579                                  ;	     string in the control block must be the same length as the string
 29580                                  ;	     preceeding the colon or equal on the command line.
 29581                                  ;
 29582                                  ;  8/28/87 : Kerry S (;AN022;)
 29583                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 29584                                  ;	     problems for people who included it themselves in a segment other
 29585                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 29586                                  ;	     segment.
 29587                                  ;
 29588                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 29589                                  ;	     in $p_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 29590                                  ;	     into PUSH PSDATA_SEG.  In $P_Get_DecNum PROC, fix AN020
 29591                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 29592                                  ;	     Created FLag, in $P_time_Format PROC, to request the delim in
 29593                                  ;	     BL be used if TIME is being parsed.
 29594                                  ;
 29595                                  ;  9/24/87 : Ed K
 29596                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 29597                                  ;	     invocations with their normally expanded code; made comments
 29598                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 29599                                  ;
 29600                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 29601                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 29602                                  ;	     pointed to by non-existant CONTROL.
 29603                                  ;
 29604                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 29605                                  ;	     A quoted text string can be framed only by double quote.  Remove
 29606                                  ;	     support to frame quoted text string with single quote.
 29607                                  ;	     (apostrophe) $P_SorD_Quote is removed from PSDATA.INC.
 29608                                  ;	     $P_SQuote EQU also removed from PSDATA.INC.  Any references to
 29609                                  ;	     single quote in PROC prologues are left as is for history reasons.
 29610                                  ;
 29611                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 29612                                  ;	     quote chars within a quoted string is supposed to be reported as
 29613                                  ;	     one quote character, but is reported as two quotes.  This changed
 29614                                  ;	     two instructions in PROC $P_Quoted_Str.
 29615                                  ;
 29616                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 29617                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 29618                                  ;
 29619                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 29620                                  ;
 29621                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 29622                                  ;	     psdata buffer should have psdata_seg.
 29623                                  ;
 29624                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 29625                                  ;	     positional missing.
 29626                                  ;
 29627                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 29628                                  ;	     as a line delimiter, should use carriage return.
 29629                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 29630                                  ;
 29631                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 29632                                  ;
 29633                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 29634                                  ;	     endless loop since SI is returned still pointing to start
 29635                                  ;	     of that parm.
 29636                                  ;
 29637                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 29638                                  ;	     Vector to returned string has CS instead of Psdata_Seg, but
 29639                                  ;	     when tried to fix it on previous version, changed similar
 29640                                  ;	     but wrong place.
 29641                                  ;
 29642                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 29643                                  ;	     delimiters between hours, minutes, seconds for time. And period
 29644                                  ;	     and comma are valid delimiters between seconds and 100th second.
 29645                                  ;
 29646                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 29647                                  ;	     in a filespec, then flag an error.
 29648                                  ;
 29649                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 29650                                  ;	     indexed off of the psdata_seg equate instead of the DS register.
 29651                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 29652                                  ;  -->	     local parser data. Why were some references to local data changed
 29653                                  ;	     to do this before, but not all ?????
 29654                                  ;
 29655                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 29656                                  ;
 29657                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, PSDATA_SEG HOSED.
 29658                                  ;
 29659                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 29660                                  ;
 29661                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 29662                                  ;
 29663                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 29664                                  ;	     separator in TIME before hundredths field.
 29665                                  ;
 29666                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 29667                                  ;			strings as keywords.
 29668                                  ;
 29669                                  ;***********************************************************************
 29670                                  
 29671                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29672                                  cmd_parse:
 29673                                  	;call	sysparse
 29674                                  	;retn
 29675                                  
 29676                                  ; -----------------------------------
 29677                                  
 29678                                  	; 29/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29679                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:44E7h
 29680                                  
 29681                                  sysparse:
 29682 0000431E 2EC706[1D86]0000        	mov	word [cs:$P_Flags],0	;AC034; Clear all internal flags
 29683 00004325 2E890E[A786]            	mov	[cs:$P_ORIG_ORD],cx	;AN039; ORIGINAL ORDINAL FROM CX
 29684 0000432A 2E8926[A986]            	mov	[cs:$P_ORIG_STACK],sp	;AN039; ORIGINAL VALUE OF STACK FROM SP
 29685 0000432F 2E8936[AB86]            	mov	[cs:$P_ORIG_SI],si	;AN039; ORIGINAL START PARSE POINTER FROM SI
 29686                                  $P_Redo_Time:				;AN039; try to parse time again
 29687 00004334 FC                      	cld				;AN000; confirm forward direction
 29688 00004335 2E890E[1086]            	mov	[cs:$P_ORDINAL],cx      ;AC034; save operand ordinal
 29689                                  	;mov	word [cs:$P_RC],$P_No_Error
 29690 0000433A 2EC706[1286]0000        	mov	word [cs:$P_RC],0	;AC034; Assume no error
 29691 00004341 2EC706[2586]0000        	mov	word [cs:$P_Found_SYNONYM],0
 29692                                  					;AC034; initalize synonym pointer
 29693 00004348 2EC706[1686]0000        	mov	word [cs:$P_DX],0	;AC034; (tm15)
 29694                                  
 29695                                  ;M029 -- Begin changes
 29696                                  ; The table of special chars $P_FileSp_Char should be initialized on every
 29697                                  ;entry to SysParse. This is in the non-checksum region and any program that
 29698                                  ;corrupts this table but does not corrupt the checksum region will leave
 29699                                  ;command.com parsing in an inconsistent state.
 29700                                  ; NB: The special characters string has been hardcoded here. If any change
 29701                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 29702                                  
 29703 0000434F 2EC706[E286]5B5D        	mov	word [cs:$P_FileSp_Char], '[]'	 ; "[]|<>+=;\""
 29704 00004356 2EC706[E486]7C3C        	mov	word [cs:$P_FileSp_Char+2], '|<'
 29705 0000435D 2EC706[E686]3E2B        	mov	word [cs:$P_FileSp_Char+4], '>+'
 29706 00004364 2EC706[E886]3D3B        	mov 	word [cs:$P_FileSp_Char+6], '=;'
 29707                                  
 29708                                  ;M029 -- End of changes
 29709                                  
 29710 0000436B E83609                  	call	$P_Skip_Delim		;AN000; Move si to 1st non white space
 29711 0000436E 7312                    	jnc	short $P_Start		;AN000; If EOL is not encountered, do parse
 29712                                  
 29713                                  ;--------------------------- End of Line
 29714                                  	;mov	ax,$P_RC_EOL		;AN000; set exit code to -1
 29715 00004370 B8FFFF                  	mov	ax,0FFFFh
 29716 00004373 53                      	push	bx			;AN000;
 29717                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 29718 00004374 268B1D                  	mov	bx,[es:di]		;AN000; Get the PARMSX address to
 29719                                  	
 29720                                  	;cmp	cl,[es:bx+$P_PARMSX_BLK.$P_MinP]
 29721 00004377 263A0F                  	cmp	cl,[es:bx]		;AN000; check ORDINAL to see if the minimum
 29722 0000437A 7304                    	jae	short $P_Fin		;AN000; positional found.
 29723                                  
 29724                                  	;mov	ax,2
 29725 0000437C B80200                  	mov	ax,$P_Op_Missing ; 2	;AN000; If no, set exit code to missing operand
 29726                                  	; 27/04/2023
 29727 0000437F F8                      	clc
 29728                                  $P_Fin: 				;AN000;
 29729 00004380 5B                      	pop	bx			;AN000;
 29730                                  	;jmp	$P_Single_Exit		;AN000; return to the caller
 29731                                  	; 27/04/2023
 29732                                  	; cf = 0
 29733                                  	;clc
 29734 00004381 C3                      	retn
 29735                                  
 29736                                  ;---------------------------
 29737                                  $P_Start:				;AN000;
 29738 00004382 2E8936[1F86]            	mov	[cs:$P_SaveSI_Cmpx],si	;AN000;AC034;  save ptr to command line for later use by complex,
 29739 00004387 53                      	push	bx			;AN000; quoted string or file spec.
 29740 00004388 57                      	push	di			;AN000;
 29741 00004389 55                      	push	bp			;AN000;
 29742 0000438A 8D1E[2786]              	lea	bx,$P_STRING_BUF	;AC034; set buffer to copy from command string
 29743 0000438E 2EF606[1E86]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 29744                                  	;test	byte [cs:$P_Flags2],20h	;AC034; 3/9 extra delimiter encountered ?
 29745 00004394 7543                    	jnz	short $P_Pack_End	;AN000; 3/9 if yes, no need to copy
 29746                                  $P_Pack_Loop:				;AN000;
 29747 00004396 AC                      	lodsb				;AN000; Pick a operand from buffer
 29748 00004397 E8BF09                  	call	$P_Chk_Switch		;AN000; Check switch character
 29749 0000439A 723C                    	jc	short $P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 29750                                  
 29751 0000439C E82709                  	call	$P_Chk_EOL		;AN000; Check EOL character
 29752 0000439F 7437                    	je	short $P_Pack_End_BY_EOL ;AN000; need backup si
 29753                                  
 29754 000043A1 E85409                  	call	$P_Chk_Delim		;AN000; Check delimiter
 29755 000043A4 7518                    	jne	short $P_PL01 		;AN000; If no, process next byte
 29756                                  
 29757 000043A6 2EF606[1E86]20          	test	byte [cs:$P_Flags2],$P_Extra ; 20h
 29758                                  	;test	byte [cs:$P_Flags2],20h ;AC034; 3/9 If yes and white spec,
 29759 000043AC 7505                    	jnz	short $P_Pack_End_backup_si
 29760                                  					;AN000; (tm08)
 29761 000043AE E8F308                  	call	$P_Skip_Delim		;AN000; skip subsequent white space,too
 29762 000043B1 EB26                    	jmp	short $P_Pack_End	;AN000; finish copy by placing NUL at end
 29763                                  
 29764                                  $P_Pack_End_backup_si:			;AN000; (tm08)
 29765 000043B3 2EF606[1E86]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ ; 41h
 29766                                  	;test	byte [cs:$P_Flags2],41h ;AN000;AC034;  (tm08)
 29767 000043B9 741E                    	jz	short $P_Pack_End	;AN000; (tm08)
 29768                                  
 29769 000043BB 4E                      	dec	si			;AN000; (tm08)
 29770 000043BC EB1B                    	jmp	short $P_Pack_End	;AN025; (tm08)
 29771                                  $P_PL01:				;AN000;
 29772 000043BE 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 29773                                  	;cmp	al,'='
 29774 000043C1 3C3D                    	cmp	al,$P_Keyword ; '='	;AN000; if it is equal character,
 29775 000043C3 7506                    	jne	short $P_PL00 		;AN000; then
 29776                                  
 29777 000043C5 2E800E[1E86]01          	or	byte [cs:$P_Flags2],$P_equ
 29778                                  	;or	byte [cs:$P_Flags_2],1	;AC034; remember it in flag
 29779                                  $P_PL00:				;AN000;
 29780 000043CB 43                      	inc	bx			;AN000; ready to see next byte
 29781 000043CC E8B509                  	call	$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 29782 000043CF 73C5                    	jnc	short $P_Pack_Loop	;AN000; if no, process to next byte
 29783                                  
 29784 000043D1 AC                      	lodsb				;AN000; if yes, store
 29785 000043D2 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 29786 000043D5 43                      	inc	bx			;AN000; update pointer
 29787 000043D6 EBBE                    	jmp	short $P_Pack_Loop	;AN000; process to next byte
 29788                                  
 29789                                  $P_Pack_End_BY_EOL:			;AN000;
 29790 000043D8 4E                      	dec	si			;AN000; backup si pointer
 29791                                  $P_Pack_End:				;AN000;
 29792 000043D9 2E8936[1486]            	mov	[cs:$P_SI_Save],si	;AC034; save next pointer, SI
 29793                                  	;mov	byte [cs:bx],0
 29794 000043DE 2EC60700                	mov	byte [cs:bx],$P_NULL	;AN000; put NULL at the end
 29795 000043E2 2E891E[2386]            	mov	[cs:$P_Save_EOB],bx
 29796                                  					;AC034; 3/17/87 keep the address for later use of complex
 29797                                  	;mov	bx,[es:di+$P_PARMS_BLK.$P_PARMSX_Address]
 29798 000043E7 268B1D                  	mov	bx,[es:di]		;AN000; get PARMSX address
 29799 000043EA 8D36[2786]              	lea	si,$P_STRING_BUF	;AC034;
 29800                                  	;cmp	byte [cs:si],'/'
 29801 000043EE 2E803C2F                	cmp	byte [cs:si],$P_Switch	;AN000; the operand begins w/ switch char ?
 29802 000043F2 7436                    	je	short $P_SW_Manager	;AN000; if yes, process as switch
 29803                                  
 29804 000043F4 2E803C22                	cmp	byte [cs:si],$P_DQuote	;M005;is it a string?
 29805 000043F8 7408                    	je	short $P_Positional_Manager
 29806                                  					;M005;if so, process as one!
 29807 000043FA 2EF606[1E86]01          	test	byte [cs:$P_Flags2],$P_equ
 29808                                  	;test	byte [cs:$P_Flags2],1	;AC034; the operand includes equal char ?
 29809 00004400 7554                    	jnz	short $P_Key_Manager	;AN000; if yes, process as keyword
 29810                                  
 29811                                  $P_Positional_Manager:			;AN000; else process as positional
 29812                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 29813 00004402 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 29814 00004406 30E4                    	xor	ah,ah			;AN000; ax = maxp
 29815 00004408 2E3906[1086]            	cmp	[cs:$P_ORDINAL],ax	;AC034; too many positional ?
 29816 0000440D 7312                    	jae	short $P_Too_Many_Error	;AN000; if yes, set exit code to too many
 29817                                  
 29818 0000440F 2EA1[1086]              	mov	ax,[cs:$P_ORDINAL]	;AC034; see what the current ordinal
 29819 00004413 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 29820 00004415 43                      	inc	bx			;AC035; add '2' to
 29821 00004416 43                      	inc	bx			;AC035;  BX reg
 29822                                  					;AN000; now bx points to 1st CONTROL
 29823 00004417 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 29824 00004419 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 29825 0000441C E88800                  	call	$P_Chk_Pos_Control	;AN000; Do process for positional
 29826 0000441F EB69                    	jmp	short $P_Return_to_Caller
 29827                                  					;AN000; and return to the caller
 29828                                  $P_Too_Many_Error:			;AN000;
 29829                                  	;mov	word [cs:$P_RC],1
 29830 00004421 2EC706[1286]0100        	mov	word [cs:$P_RC],$P_Too_Many
 29831                                  					;AC034; set exit code
 29832 00004428 EB60                    	jmp	short $P_Return_to_Caller
 29833                                  					;AN000; and return to the caller
 29834                                  $P_SW_Manager:				;AN000;
 29835                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 29836 0000442A 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 29837 0000442E 30E4                    	xor	ah,ah			;AN000; ax = maxp
 29838 00004430 40                      	inc	ax			;AN000;
 29839 00004431 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 29840 00004433 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 29841 00004435 268A0F                  	mov	cl,[es:bx]		;AN000;
 29842 00004438 30ED                    	xor	ch,ch			;AN000; cx = maxs
 29843 0000443A 09C9                    	or	cx,cx			;AN000; at least one switch ?
 29844 0000443C 740F                    	jz	short $P_SW_Not_Found 	;AN000;
 29845 0000443E 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 29846                                  $P_SW_Mgr_Loop: 			;AN000;
 29847 0000443F 53                      	push	bx			;AN000;
 29848 00004440 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 29849 00004443 E8C100                  	call	$P_Chk_SW_Control	;AN000; do process for switch
 29850 00004446 5B                      	pop	bx			;AN000;
 29851 00004447 7341                    	jnc	short $P_Return_to_Caller
 29852                                  					;AN000; if the CONTROL is for the switch, exit
 29853 00004449 43                      	inc	bx			;AC035; add '2' to
 29854 0000444A 43                      	inc	bx			;AC035;  BX reg
 29855                                  					;AN000; else bx points to the next CONTROL
 29856 0000444B E2F2                    	loop	$P_SW_Mgr_Loop		;AN000; and loop
 29857                                  $P_SW_Not_Found:			;AN000;
 29858                                  	;mov	word [cs:$P_RC],3
 29859 0000444D 2EC706[1286]0300        	mov	word [cs:$P_RC],$P_Not_In_SW
 29860                                  					;AC034; here no CONTROL for the switch has
 29861 00004454 EB34                    	jmp	short $P_Return_to_Caller0
 29862                                  					;AN000; not been found, means error.
 29863                                  $P_Key_Manager: 			;AN000;
 29864                                  	;mov	al,[es:bx+1]		;AN000; get maxp
 29865 00004456 268A4701                	mov	al,[es:bx+$P_PARMSX_BLK.$P_MaxP]
 29866 0000445A 30E4                    	xor	ah,ah			;AN000; ax = maxp
 29867 0000445C 40                      	inc	ax			;AN000;
 29868 0000445D D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 29869 0000445F 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 29870 00004461 268A07                  	mov	al,[es:bx]		;AN000;
 29871 00004464 30E4                    	xor	ah,ah			;AN000; ax = maxs
 29872 00004466 D1E0                    	shl	ax,1			;AN000;
 29873 00004468 40                      	inc	ax			;AN000; ax = ax*2+1
 29874 00004469 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 29875 0000446B 268A0F                  	mov	cl,[es:bx]		;AN000;
 29876 0000446E 30ED                    	xor	ch,ch			;AN000; cx = maxk
 29877 00004470 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 29878 00004472 740F                    	jz	short $P_Key_Not_Found	;AN000;
 29879 00004474 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 29880                                  $P_Key_Mgr_Loop:			;AN000;
 29881 00004475 53                      	push	bx			;AN000;
 29882 00004476 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 29883 00004479 E85A00                  	call	$P_Chk_Key_Control	;AN000; do process for keyword
 29884 0000447C 5B                      	pop	bx			;AN000;
 29885 0000447D 730B                    	jnc	short $P_Return_to_Caller
 29886                                  					;AN000; if the CONTROL is for the keyword, exit
 29887 0000447F 43                      	inc	bx			;AC035; add '2' to
 29888 00004480 43                      	inc	bx			;AC035;  BX reg
 29889                                  					;AN000; else bx points to the next CONTROL
 29890 00004481 E2F2                    	loop	$P_Key_Mgr_Loop 	;AN000; and loop
 29891                                  $P_Key_Not_Found:			;AN000;
 29892                                  	;mov	word [cs:$P_RC],4
 29893 00004483 2EC706[1286]0400        	mov	word [cs:$P_RC],$P_Not_In_Key
 29894                                  					;AC034; here no CONTROL for the keyword has
 29895                                  $P_Return_to_Caller0:
 29896                                  $P_Return_to_Caller:			;AN000; not been found, means error.
 29897 0000448A 5D                      	pop	bp			;AN000;
 29898 0000448B 5F                      	pop	di			;AN000;
 29899 0000448C 5B                      	pop	bx			;AN000;
 29900 0000448D 2E8B0E[1086]            	mov	cx,[cs:$P_ORDINAL]	;AC034; return next ordinal
 29901 00004492 2EA1[1286]              	mov	ax,[cs:$P_RC]		;AC034; return exit code
 29902 00004496 2E8B36[1486]            	mov	si,[cs:$P_SI_Save]	;AC034; return next operand pointer
 29903 0000449B 2E8B16[1686]            	mov	dx,[cs:$P_DX]		;AC034; return result buffer address
 29904 000044A0 2E8A1E[1886]            	mov	bl,[cs:$P_Terminator]	;AC034; return delimiter code found
 29905                                  $P_Single_Exit: 			;AN000;
 29906 000044A5 F8                      	clc				;AN000;
 29907 000044A6 C3                      	retn				;AN000;
 29908                                  
 29909                                  ;***********************************************************************
 29910                                  ; $P_Chk_Pos_Control
 29911                                  ;
 29912                                  ; Function: Parse CONTROL block for a positional
 29913                                  ;
 29914                                  ; Input:     ES:BX -> CONTROL block
 29915                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 29916                                  ;
 29917                                  ; Output:    None
 29918                                  ;
 29919                                  ; Use:	 $P_Fill_Result, $P_Check_Match_Flags
 29920                                  ;
 29921                                  ; Vars: $P_Ordinal(W), $P_RC(W)
 29922                                  ;***********************************************************************
 29923                                  
 29924                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29925                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4671h
 29926                                  
 29927                                  $P_Chk_Pos_Control:
 29928 000044A7 50                      	push	ax			;AN000;
 29929                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 29930 000044A8 268B07                  	mov	ax,[es:bx]		;AN000;
 29931                                  	;test	ax,2
 29932 000044AB A90200                  	test	ax,$P_Repeat		;AN000; repeat allowed ?
 29933 000044AE 7505                    	jnz	short $P_CPC00		;AN000; then do not increment ORDINAL
 29934                                  
 29935 000044B0 2EFF06[1086]            	inc	word [cs:$P_ORDINAL]	;AC034; update the ordinal
 29936                                  $P_CPC00:				;AN000;
 29937                                  	;cmp	byte [cs:si],0
 29938 000044B5 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; no data ?
 29939 000044B9 7516                    	jne	short $P_CPC01		;AN000;
 29940                                  
 29941                                  	;test	ax,1
 29942 000044BB A90100                  	test	ax,$P_Optional		;AN000; yes, then is it optional ?
 29943 000044BE 7509                    	jnz	short $P_CPC02		;AN000;
 29944                                  
 29945 000044C0 2EC706[1286]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 29946                                  					;AC034; no, then error	 3/17/87
 29947 000044C7 EB0B                    	jmp	short $P_CPC_Exit	;AN000;
 29948                                  $P_CPC02:				;AN000;
 29949                                  	; 27/04/2023
 29950                                  	;push	ax ; *			;AN000;
 29951                                  	;
 29952                                  	;;mov	al,3
 29953                                  	;mov	al,$P_String		;AN000; if it is optional return NULL
 29954                                  	;;mov	ah,0FFh
 29955                                  	;mov	ah,$P_No_Tag		;AN000; no item tag indication
 29956                                  	;31/03/2023
 29957 000044C9 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 29958 000044CC E89500                  	call	$P_Fill_Result		;AN000;
 29959                                  	; 27/04/2023
 29960                                  	;pop	ax ; *			;AN000;
 29961 000044CF EB03                    	jmp	short $P_CPC_Exit	;AN000;
 29962                                  $P_CPC01:				;AN000;
 29963 000044D1 E81101                  	call	$P_Check_Match_Flags	;AN000;
 29964                                  $P_CPC_Exit:				;AN000;
 29965 000044D4 58                      	pop	ax			;AN000;
 29966 000044D5 C3                      	retn				;AN000;
 29967                                  
 29968                                  ;***********************************************************************
 29969                                  ; $P_Chk_Key_Control
 29970                                  ;
 29971                                  ; Function: Parse CONTROL block for a keyword
 29972                                  ;
 29973                                  ; Input:     ES:BX -> CONTROL block
 29974                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 29975                                  ;
 29976                                  ; Output:    CY = 1 : not match
 29977                                  ;
 29978                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 29979                                  ;
 29980                                  ; Vars: $P_RC(W), $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 29981                                  ;***********************************************************************
 29982                                  
 29983                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 29984                                  $P_Chk_Key_Control:			;AN000;
 29985 000044D6 F9                      	stc				;AN000;this logic works when the KeySW
 29986 000044D7 C3                      	retn				;AN000;is reset.
 29987                                  
 29988                                  ;***********************************************************************
 29989                                  ; $P_Search_KEYorSW:
 29990                                  ;
 29991                                  ; Function: Seach specified keyword or switch from CONTROL
 29992                                  ;
 29993                                  ; Input:     ES:BX -> CONTROL block
 29994                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 29995                                  ;
 29996                                  ; Output:    CY = 1 : not match
 29997                                  ;
 29998                                  ; Use:	 $P_String_Comp, $P_MoveBP_NUL, $P_Found_SYNONYM
 29999                                  ;***********************************************************************
 30000                                  
 30001                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30002                                  	; 14/06/2023
 30003                                  $P_Search_KEYorSW:
 30004 000044D8 55                      	push	bp			;AN000;
 30005 000044D9 51                      	push	cx			;AN000;
 30006 000044DA 268A4F08                	mov	cl,[es:bx+$P_CONTROL_BLK.$P_nid]
 30007                                  	;mov	cl,[es:bx+8]		;AN000; Get synonym count
 30008                                  	; 14/06/2023
 30009                                  	;xor	ch,ch			;AN000; and set it to cx
 30010                                  	;or	cx,cx			;AN000; No synonyms specified ?
 30011 000044DE 08C9                    	or	cl,cl
 30012 000044E0 740E                    	jz	short $P_KEYorSW_Not_Found
 30013                                  					;AN000; then indicate not found by CY
 30014 000044E2 268D6F09                	lea	bp,[es:bx+$P_CONTROL_BLK.$P_KEYorSW]
 30015                                  	;lea	bp,[es:bx+9]		;AN000; BP points to the 1st synonym
 30016                                  $P_KEYorSW_Loop:			;AN000;
 30017 000044E6 E8F803                  	call	$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 30018 000044E9 7308                    	jnc	short $P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 30019 000044EB E80D00                  	call	$P_MoveBP_NUL		;AN000; else, bp points to the next string
 30020 000044EE E2F6                    	loop	$P_KEYorSW_Loop 	;AN000; loop nid times
 30021                                  $P_KEYorSW_Not_Found:			;AN000;
 30022 000044F0 F9                      	stc				;AN000; indicate not found in synonym list
 30023 000044F1 EB05                    	jmp	short $P_KEYorSW_Exit	;AN000; and exit
 30024                                  $P_KEYorSW_Found:			;AN000;
 30025 000044F3 2E892E[2586]            	mov	[cs:$P_Found_SYNONYM],bp
 30026                                  					;AC034; set synonym pointer
 30027                                  	; 27/04/2023
 30028                                  	; cf = 0
 30029                                  	;clc				;AN000; indicate found
 30030                                  $P_KEYorSW_Exit:			;AN000;
 30031 000044F8 59                      	pop	cx			;AN000;
 30032 000044F9 5D                      	pop	bp			;AN000;
 30033 000044FA C3                      	retn				;AN000;
 30034                                  
 30035                                  ;***********************************************************************
 30036                                  ; $P_MoveBP_NUL
 30037                                  ;***********************************************************************
 30038                                  
 30039                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30040                                  
 30041                                  $P_MoveBP_NUL:
 30042                                  $P_MBP_Loop:				;AN000;
 30043                                  	;cmp	byte [es:bp+0],0
 30044 000044FB 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000; Increment BP that points
 30045 00004500 7403                    	je	short $P_MBP_Exit	;AN000; to the synomym list
 30046 00004502 45                      	inc	bp			;AN000; until
 30047 00004503 EBF6                    	jmp	short $P_MBP_Loop	;AN000; NULL encountered.
 30048                                  $P_MBP_Exit:				;AN000;
 30049 00004505 45                      	inc	bp			;AN000; bp points to next to NULL
 30050 00004506 C3                      	retn				;AN000;
 30051                                  
 30052                                  ;***********************************************************************
 30053                                  ; $P_Chk_SW_Control
 30054                                  ;
 30055                                  ; Function: Parse CONTROL block for a switch
 30056                                  ;
 30057                                  ; Input:     ES:BX -> CONTROL block
 30058                                  ;	     psdata_seg:SI -> $P_STRING_BUF
 30059                                  ;
 30060                                  ; Output:    CY = 1 : not match
 30061                                  ;
 30062                                  ; Use:	 $P_Fill_Result, $P_Search_KEYorSW, $P_Check_Match_Flags
 30063                                  ;
 30064                                  ; Vars:  $P_SaveSI_Cmpx(W), $P_KEYorSW_Ptr(R), $P_Flags(W)
 30065                                  ;***********************************************************************
 30066                                  
 30067                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30068                                  
 30069                                  $P_Chk_SW_Control:
 30070 00004507 2E800E[1E86]10          	or	byte [cs:$P_Flags2],$P_SW_Cmp
 30071                                  	;or	byte [cs:$P_Flags2],10h	;AC034; Indicate switch for later string comparison
 30072 0000450D E8C8FF                  	call	$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 30073 00004510 7251                    	jc	short $P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 30074                                  
 30075 00004512 2E8026[1E86]EF          	and	byte [cs:$P_Flags2],0FFh-$P_SW_Cmp
 30076                                  	;and	byte [cs:$P_Flags2],0EFh
 30077                                  					;AC034; reset the indicator previously set
 30078 00004518 50                      	push	ax			;AN000;       /switch:
 30079 00004519 2EA1[2186]              	mov	ax,[cs:$P_KEYorSW_Ptr]	;AC034;	      ^       ^
 30080 0000451D 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 30081 0000451F 2E0106[1F86]            	add	[cs:$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 30082 00004524 58                      	pop	ax			;AN000;
 30083                                  
 30084 00004525 2E8B36[2186]            	mov	si,[cs:$P_KEYorSW_Ptr]	;AC034; set si at the end or colon
 30085                                  	;cmp	byte [cs:si],0
 30086 0000452A 2E803C00                	cmp	byte [cs:si],$P_NULL	;AN000; any data after colon
 30087 0000452E 7525                    	jne	short $P_CSW00		;AN000; if yes, process match flags
 30088                                  
 30089                                  	;cmp	byte [cs:si],':'
 30090 00004530 2E807CFF3A              	cmp	byte [cs:si-1],$P_Colon
 30091                                  					;AN000; if no, the switch terminated by colon ?
 30092 00004535 7509                    	jne	short $P_Chk_if_data_required
 30093                                  					;AN000; if yes,
 30094                                  
 30095 00004537 2EC706[1286]0900        	mov	word [cs:$P_RC],$P_Syntax
 30096                                  	;mov	word [cs:$P_RC],9	;AC034; return syntax error
 30097 0000453E EB1A                    	jmp	short $P_Chk_SW_Exit	;AN000;
 30098                                  
 30099                                  $P_Chk_if_data_required:		;AN018; no data, no colon
 30100                                  	;cmp	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],0
 30101                                  	; 27/04/2023
 30102 00004540 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 30103 00004544 7414                    	je	short $P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 30104                                  
 30105                                  	;;test	word [es:bx],1 ; $P_Optional
 30106                                  	;test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 30107 00004546 26F60701                	test	byte [es:bx],$P_Optional
 30108                                  					;AN019; see if no value is valid
 30109 0000454A 750E                    	jnz	short $P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 30110                                  
 30111 0000454C 2EC706[1286]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 30112                                  	;mov	word [cs:$P_RC],2	;AC034; return required operand missing
 30113 00004553 EB05                    	jmp	short $P_Chk_SW_Exit	;AN018;
 30114                                  
 30115                                  $P_CSW00:				;AN000;
 30116 00004555 E88D00                  	call	$P_Check_Match_Flags	;AN000; process match flag
 30117 00004558 F8                      	clc				;AN000; indicate match
 30118                                  	;jmp	short $P_Chk_SW_Single_Exit
 30119 00004559 C3                      	retn	; 31/03/2023		;AN000;
 30120                                  	; 31/03/2023
 30121                                  ;$P_Chk_SW_Err0: 			;AN000;
 30122                                  ;	stc				;AN000; not found in switch synonym list
 30123                                  ;	;jmp	short $P_Chk_SW_Single_Exit
 30124                                  ;	retn	; 31/03/2023		;AN000;
 30125                                  	
 30126                                  $P_Chk_SW_Exit: 			;AN000;
 30127 0000455A 50                      	push	ax			;AN000;
 30128                                  	; 31/03/2023
 30129 0000455B B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30130                                  	;;mov	al,3
 30131                                  	;;mov	ah,0FFh
 30132                                  	;mov	al,$P_String		;AN000; set
 30133                                  	;mov	ah,$P_No_Tag		;AN000;    result
 30134 0000455E E80300                  	call	$P_Fill_Result		;AN000; 	 buffer
 30135 00004561 58                      	pop	ax			;AN000;
 30136 00004562 F8                      	clc				;AN000;
 30137                                  	; 31/03/2023
 30138                                  $P_Chk_SW_Err0:
 30139                                  $P_Chk_SW_Single_Exit:			;AN000;
 30140 00004563 C3                      	retn				;AN000;
 30141                                  
 30142                                  ;***********************************************************************
 30143                                  ; $P_Fill_Result
 30144                                  ;
 30145                                  ; Function: Fill the result buffer
 30146                                  ;
 30147                                  ; Input:    AH = Item tag
 30148                                  ;	    AL = type
 30149                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 30150                                  ;		  AL = 2: DX has index(offset) into value list
 30151                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 30152                                  ;		  AL = 7: DX has year, CL has month and CH has date
 30153                                  ;		  AL = 8: DL has hours, DH has minutes, CL has secondsn,
 30154                                  ;			  amd CH has hundredths
 30155                                  ;		  AL = else: psdata_seg:SI points to returned string buffer
 30156                                  ;	    ES:BX -> CONTROL block
 30157                                  ;
 30158                                  ; Output:   None
 30159                                  ;
 30160                                  ; Use:	$P_Do_CAPS_String, $P_Remove_Colon, $P_Found_SYNONYM
 30161                                  ;
 30162                                  ; Vars: $P_DX(W)
 30163                                  ;***********************************************************************
 30164                                  
 30165                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30166                                  
 30167                                  $P_Fill_Result:
 30168 00004564 57                      	push	di			;AN000;
 30169 00004565 268B7F04                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Result_Buf]
 30170                                  	;mov	di,[es:bx+4]		;AN000; di points to result buffer
 30171 00004569 2E893E[1686]            	mov	[cs:$P_DX],di		;AC034; set returned result address
 30172                                  	;mov	[es:di+$P_RESULT_BLK.$P_Type],al
 30173                                  	;;mov	[es:di],al		;AN000; store type
 30174                                  	;mov	[es:di+$P_RESULT_BLK.$P_Item_Tag],ah
 30175                                  	;;mov	[es:di+1],ah		;AN000; store item tag
 30176                                  	; 31/03/2023
 30177 0000456E 268905                  	mov	[es:di],ax
 30178 00004571 50                      	push	ax			;AN000;
 30179 00004572 2EA1[2586]              	mov	ax,[cs:$P_Found_SYNONYM]
 30180                                  					;AC034; if yes,
 30181 00004576 26894502                	mov	[es:di+$P_RESULT_BLK.$P_SYNONYM_Ptr],ax
 30182                                  	;mov	[es:di+2],ax		;AN000;   then set it to the result
 30183 0000457A 58                      	pop	ax			;AN000;
 30184                                  $P_RLT04:				;AN000;
 30185                                  	;cmp	al,1
 30186 0000457B 3C01                    	cmp	al,$P_Number		;AN000; if number
 30187 0000457D 750A                    	jne	short $P_RLT00		;AN000;
 30188                                  $P_RLT02:				;AN000;
 30189 0000457F 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 30190                                  	;mov	[es:di+4],dx		;AN000; then store 32bit
 30191 00004583 26894D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cx
 30192                                  	;mov	[es:di+6],cx		;AN000;	number
 30193 00004587 EB5A                    	jmp	short $P_RLT_Exit	;AN000;
 30194                                  $P_RLT00:				;AN000;
 30195                                  	;cmp	al,2
 30196 00004589 3C02                    	cmp	al,$P_List_Idx		;AN000; if list index
 30197 0000458B 7506                    	jne	short $P_RLT01		;AN000;
 30198 0000458D 26895504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dx
 30199                                  	;mov	[es:di+4],dx		;AN000; then store list index
 30200 00004591 EB50                    	jmp	short $P_RLT_Exit	;AN000;
 30201                                  $P_RLT01:				;AN000;
 30202                                  	;cmp	al,7
 30203 00004593 3C07                    	cmp	al,$P_Date_F ; 7	;AN000; Date format ?
 30204 00004595 74E8                    	je	short $P_RLT02		;AN000;
 30205                                  	;cmp	al,8
 30206 00004597 3C08                    	cmp	al,$P_Time_F ; 8	;AN000; Time format ?
 30207 00004599 74E4                    	je	short $P_RLT02		;AN000;
 30208                                  	;cmp	al,6
 30209 0000459B 3C06                    	cmp	al,$P_Drive  ; 6	;AN000; drive format ?
 30210 0000459D 7506                    	jne	short $P_RLT03		;AN000;
 30211                                  
 30212 0000459F 26885504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],dl
 30213                                  	;mov	[es:di+4],dl		;AN000; store drive number
 30214 000045A3 EB3E                    	jmp	short $P_RLT_Exit	;AN000;
 30215                                  
 30216                                  $P_RLT03:				;AN000;
 30217                                  	;cmp	al,4
 30218 000045A5 3C04                    	cmp	al,$P_Complex		;AN000; complex format ?
 30219 000045A7 750F                    	jne	short $P_RLT05		;AN000;
 30220                                  
 30221 000045A9 2EA1[1F86]              	mov	ax,[cs:$P_SaveSI_Cmpx]	;AC034; then get pointer in command buffer
 30222 000045AD 40                      	inc	ax			;AN000; skip left Parentheses
 30223 000045AE 26894504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],ax
 30224                                  	;mov	[es:di+4],ax		;AN000; store offset
 30225 000045B2 268C5D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],ds
 30226                                  	;mov	[es:di+6],ds		;AN000; store segment
 30227 000045B6 EB2B                    	jmp	short $P_RLT_Exit	;AN000;
 30228                                  
 30229                                  $P_RLT05:				;AN000;
 30230                                  ;------------------------  AL = 3, 5, or 9
 30231 000045B8 26897504                	mov	[es:di+$P_RESULT_BLK.$P_Picked_Val],si
 30232                                  	;mov	[es:di+4],si		;AN000; store offset of STRING_BUF
 30233 000045BC 268C4D06                	mov	[es:di+2+$P_RESULT_BLK.$P_Picked_Val],cs
 30234                                  	;mov	[es:di+6],cs		;AN031; store segment of STRING_BUF
 30235                                  
 30236 000045C0 50                      	push	ax			;AN000;
 30237 000045C1 26F6470201              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_File
 30238                                  	;test	byte [es:bx+2],1	;AN000; need CAPS by file table?
 30239 000045C6 7404                    	jz	short $P_RLT_CAP00	;AN000;
 30240                                  
 30241                                  	;mov	al,4
 30242 000045C8 B004                    	mov	al,$P_DOSTBL_File ; 4	;AN000; use file upper case table
 30243 000045CA EB09                    	jmp	short $P_RLT_CAP02	;AN000;
 30244                                  
 30245                                  $P_RLT_CAP00:				;AN000;
 30246 000045CC 26F6470202              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_CAP_Char
 30247                                  	;test	byte [es:bx+2],2	;AN000; need CAPS by char table ?
 30248 000045D1 7405                    	jz	short $P_RLT_CAP01	;AN000;
 30249                                  
 30250                                  	;mov	al,2
 30251 000045D3 B002                    	mov	al,$P_DOSTBL_Char ; 2	;AN000; use character upper case table
 30252                                  $P_RLT_CAP02:				;AN000;
 30253 000045D5 E80C01                  	call	$P_Do_CAPS_String	;AN000;  process CAPS along the table
 30254                                  $P_RLT_CAP01:				;AN000;
 30255 000045D8 58                      	pop	ax			;AN000;
 30256 000045D9 26F6470210              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_Rm_Colon
 30257                                  	;test	byte [es:bx+2],10h	;AN000; removing colon at end ?
 30258 000045DE 7403                    	jz	short $P_RLT_Exit	;AN000;
 30259                                  
 30260 000045E0 E8DD00                  	call	$P_Remove_Colon 	;AN000; then process it.
 30261                                  $P_RLT_Exit:				;AN000;
 30262 000045E3 5F                      	pop	di			;AN000;
 30263 000045E4 C3                      	retn				;AN000;
 30264                                  
 30265                                  ;***********************************************************************
 30266                                  ; $P_Check_Match_Flags
 30267                                  ;
 30268                                  ; Function:  Check the mutch_flags and make the exit code and set the
 30269                                  ;	     result buffer
 30270                                  ;
 30271                                  ;	    Check for types in this order:
 30272                                  ;		Complex
 30273                                  ;		Date
 30274                                  ;		Time
 30275                                  ;		Drive
 30276                                  ;		Filespec
 30277                                  ;		Quoted String
 30278                                  ;		Simple String
 30279                                  ;
 30280                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 30281                                  ;	     ES:BX -> CONTROL block
 30282                                  ;
 30283                                  ; Output:    None
 30284                                  ;
 30285                                  ; Use:	     $P_Value, P$_SValue, $P_Simple_String, $P_Date_Format
 30286                                  ;	     $P_Time_Format, $P_Complex_Format, $P_File_Foemat
 30287                                  ;	     $P_Drive_Format
 30288                                  ;***********************************************************************
 30289                                  
 30290                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30291                                  
 30292                                  $P_Check_Match_Flags:
 30293 000045E5 2EC606[EB86]00          	mov	byte [cs:$P_err_flag],$P_NULL ; 0
 30294                                  					;AN033;AC034;; clear filespec error flag.
 30295 000045EB 50                      	push	ax			;AN000;
 30296                                  	;mov	ax,[es:bx+$P_CONTROL_BLK.$P_Match_Flag]
 30297 000045EC 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 30298 000045EF 09C0                    	or	ax,ax			;AC035; test ax for zero
 30299 000045F1 7518                    	jnz	short $P_Mat		;AN000; (tm12)
 30300 000045F3 50                      	push	ax			;AN000; (tm12)
 30301 000045F4 53                      	push	bx			;AN000; (tm12)
 30302 000045F5 52                      	push	dx			;AN000; (tm12)
 30303 000045F6 57                      	push	di			;AN000; (tm12)
 30304 000045F7 2EC706[1286]0900        	mov	word [cs:$P_RC],$P_Syntax
 30305                                  	;mov	word [cs:$P_RC],9	;AC034; (tm12)
 30306                                  	; 31/03/2023
 30307 000045FE B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30308                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; (tm12)
 30309                                  	;mov	al,$P_String ; 3	;AN000; (tm12)
 30310 00004601 E860FF                  	call	$P_Fill_Result		;AN000; (tm12)
 30311 00004604 5F                      	pop	di			;AN000; (tm12)
 30312 00004605 5A                      	pop	dx			;AN000; (tm12)
 30313 00004606 5B                      	pop	bx			;AN000; (tm12)
 30314 00004607 58                      	pop	ax			;AN000; (tm12)
 30315                                  	;jmp	short $P_Bridge 	;AC035; (tm12)
 30316                                  	; 31/03/2023
 30317                                  $P_Bridge:	; 18/04/2023		;AN000;
 30318 00004608 E99C00                  	jmp	$P_Match_Exit		;AN000; (tm02)
 30319                                  $P_Mat: 				;AN000; (tm12)
 30320                                  $P_Match01:				;AN000;
 30321                                  	;test	ax,1000h
 30322 0000460B A90010                  	test	ax,$P_Date_S		;AN000; Date string
 30323 0000460E 7412                    	jz	short $P_Match02	;AN000;
 30324 00004610 2EC706[1286]0000        	mov	word [cs:$P_RC],$P_No_Error
 30325                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 30326 00004617 E86503                  	call	$P_Date_Format		;AN000; do process
 30327 0000461A 2E833E[1286]09          	cmp	word [cs:$P_RC],$P_Syntax
 30328                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 30329                                  	; 18/04/2023
 30330 00004620 75E6                    	jne	short $P_Bridge		;AN000;
 30331                                  $P_Match02:				;AN000;
 30332                                  	;test	ax,800h
 30333 00004622 A90008                  	test	ax,$P_Time_S		;AN000; Time string
 30334 00004625 7412                    	jz	short $P_Match03	;AN000;
 30335 00004627 2EC706[1286]0000        	mov	word [cs:$P_RC],$P_No_Error
 30336                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 30337 0000462E E86004                  	call	$P_Time_Format		;AN000; do process
 30338 00004631 2E833E[1286]09          	cmp	word [cs:$P_RC],$P_Syntax
 30339                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 30340                                  	;jne	short $P_Bridge		;AN000; (tm09)
 30341                                  	;jmp	short $P_Match03	;AN025; (tm09)
 30342                                  	; 31/03/2023
 30343 00004637 756E                    	jne	short $P_Match_Exit
 30344                                  ;$P_Bridge:				;AN000;
 30345                                  	;jmp	short $P_Match_Exit	;AN000; (tm02)
 30346                                  $P_Match03:				;AN000;
 30347                                  	;test	ax,8000h
 30348 00004639 A90080                  	test	ax,$P_Num_Val		;AN000; Numeric value
 30349 0000463C 7412                    	jz	short $P_Match04	;AN000;
 30350 0000463E 2EC706[1286]0000        	mov	word [cs:$P_RC],$P_No_Error
 30351                                  	;mov	word [cs:$P_RC],0	;AC034; assume no error
 30352 00004645 E82C01                  	call	$P_Value		;AN000; do process
 30353 00004648 2E833E[1286]09          	cmp	word [cs:$P_RC],$P_Syntax
 30354                                  	;cmp	word [cs:$P_RC],9	;AC034; if error, examine the next type
 30355 0000464E 7557                    	jne	short $P_Match_Exit	;AN000;
 30356                                  $P_Match04:				;AN000;
 30357                                  	;test	ax,4000h
 30358 00004650 A90040                  	test	ax,$P_SNum_Val		;AN000; Signed numeric value
 30359 00004653 7412                    	jz	short $P_Match05	;AN000;
 30360 00004655 2EC706[1286]0000        	mov	word [cs:$P_RC],$P_No_Error
 30361                                  					;AC034; assume no error
 30362 0000465C E8F100                  	call	$P_SValue		;AN000; do process
 30363 0000465F 2E833E[1286]09          	cmp	word [cs:$P_RC],$P_Syntax
 30364                                  					;AC034; if error, examine the next type
 30365 00004665 7540                    	jne	short $P_Match_Exit	;AN000;
 30366                                  $P_Match05:				;AN000;
 30367                                  	;test	ax,100h
 30368 00004667 A90001                  	test	ax,$P_Drv_Only		;AN000; Drive only
 30369 0000466A 7415                    	jz	short $P_Match06	;AN000;
 30370 0000466C 2EC706[1286]0000        	mov	word [cs:$P_RC],$P_No_Error
 30371                                  					;AC034; assume no error
 30372 00004673 E86805                  	call	$P_File_Format		;AN000; 1st, call file format
 30373 00004676 E8E905                  	call	$P_Drive_Format 	;AN000; check drive format, next
 30374 00004679 2E833E[1286]09          	cmp	word [cs:$P_RC],$P_Syntax
 30375                                  					;AC034; if error, examinee the next type
 30376 0000467F 7526                    	jne	short $P_Match_Exit	;AN000;
 30377                                  $P_Match06:				;AN000;
 30378                                  	;test	ax,200h
 30379 00004681 A90002                  	test	ax,$P_File_Spc		;AN000; File spec
 30380 00004684 7412                    	jz	short $P_Match07	;AN000;
 30381 00004686 2EC706[1286]0000        	mov	word [cs:$P_RC],$P_No_Error
 30382                                  					;AC034; assume no error
 30383 0000468D E84E05                  	call	$P_File_Format		;AN000; do process
 30384 00004690 2E833E[1286]09          	cmp	word [cs:$P_RC],$P_Syntax
 30385                                  					;AC034; if error, examine the next type
 30386 00004696 750F                    	jne	short $P_Match_Exit	;AN000;
 30387                                  $P_Match07:				;AN000;
 30388                                  $P_Match08:				;AN000;
 30389                                  	;test	ax,2000h
 30390 00004698 A90020                  	test	ax,$P_Simple_S		;AN000; Simple string
 30391 0000469B 740A                    	jz	short $P_Match09	;AN000;
 30392 0000469D 2EC706[1286]0000        	mov	word [cs:$P_RC],$P_No_Error
 30393                                  					;AC034; assume no error
 30394 000046A4 E8D601                  	call	$P_Simple_String	;AN000; do process
 30395                                  $P_Match09:				;AN000;
 30396                                  $P_Match_Exit:				;AN000;
 30397 000046A7 2E833E[EB86]01          	cmp	word [cs:$P_err_flag],$P_error_filespec
 30398                                  	;cmp	word [cs:$P_err_flag],1 ;AC034; bad filespec ?
 30399 000046AD 750F                    	jne	short $P_Match2_Exit	;AN033; no, continue
 30400 000046AF 2E833E[1286]00          	cmp	word [cs:$P_RC],$P_No_Error
 30401                                  	;cmp	word [cs:$P_RC],0	;AN033;AC034;; check for other errors ?
 30402 000046B5 7507                    	jne	short $P_Match2_Exit	;AN033; no, continue
 30403 000046B7 2EC706[1286]0900        	mov	word [cs:$P_RC],$P_Syntax
 30404                                  	;mov	word [cs:$P_RC],9	;AN033;AC034;; set error flag
 30405                                  $P_Match2_Exit: 			;AN033;
 30406 000046BE 58                      	pop	ax			;AN000;
 30407 000046BF C3                      	retn
 30408                                  
 30409                                  ;***********************************************************************
 30410                                  ; $P_Remove_Colon;
 30411                                  ;
 30412                                  ; Function: Remove colon at end
 30413                                  ;
 30414                                  ; Input:    psdata_seg:SI points to string buffer to be examineed
 30415                                  ;
 30416                                  ; Output:   None
 30417                                  ;
 30418                                  ; Use:	$P_Chk_DBCS
 30419                                  ;***********************************************************************
 30420                                  
 30421                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30422                                  
 30423                                  $P_Remove_Colon:
 30424 000046C0 50                      	push	ax			;AN000;
 30425 000046C1 56                      	push	si			;AN000;
 30426                                  $P_RCOL_Loop:				;AN000;
 30427 000046C2 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 30428 000046C5 08C0                    	or	al,al			;AN000; end of string ?
 30429 000046C7 740F                    	jz	short $P_RCOL_Exit	;AN000; if yes, just exit
 30430                                  
 30431 000046C9 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; is it colon ?
 30432 000046CB 750E                    	jne	short $P_RCOL00		;AN000;
 30433                                  
 30434                                  	;cmp	byte [cs:si+1],0
 30435 000046CD 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; if so, next is NULL ?
 30436 000046D2 7507                    	jne	short $P_RCOL00		;AN000; no, then next char
 30437                                  
 30438 000046D4 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; yes, remove colon
 30439                                  	; 31/03/2023
 30440                                  	;jmp	short $P_RCOL_Exit	;AN000; and exit.
 30441                                  $P_RCOL_Exit:
 30442 000046D8 5E                      	pop	si
 30443 000046D9 58                      	pop	ax
 30444 000046DA C3                      	retn
 30445                                  
 30446                                  $P_RCOL00:				;AN000;
 30447 000046DB E8A606                  	call	$P_Chk_DBCS		;AN000; if not colon, then check if
 30448 000046DE 7301                    	jnc	short $P_RCOL01		;AN000; DBCS leading byte.
 30449                                  
 30450 000046E0 46                      	inc	si			;AN000; if yes, skip trailing byte
 30451                                  $P_RCOL01:				;AN000;
 30452 000046E1 46                      	inc	si			;AN000; si points to next byte
 30453 000046E2 EBDE                    	jmp	short $P_RCOL_Loop	;AN000; loop until NULL encountered
 30454                                  
 30455                                  	; 31/03/2023
 30456                                  ;$P_RCOL_Exit:				;AN000;
 30457                                  	;pop	si			;AN000;
 30458                                  	;pop	ax			;AN000;
 30459                                  	;retn
 30460                                  
 30461                                  ;***********************************************************************
 30462                                  ; $P_Do_CAPS_String;
 30463                                  ;
 30464                                  ; Function: Perform capitalization along with the file case map table
 30465                                  ;	    or character case map table.
 30466                                  ;
 30467                                  ; Input:    AL = 2 : Use character table
 30468                                  ;	    AL = 4 : Use file table
 30469                                  ;	    psdata_seg:SI points to string buffer to be capitalized
 30470                                  ;
 30471                                  ; Output:   None
 30472                                  ;
 30473                                  ; Use:	$P_Do_CAPS_Char, $P_Chk_DBCS
 30474                                  ;***********************************************************************
 30475                                  
 30476                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30477                                  
 30478                                  $P_Do_CAPS_String:
 30479 000046E4 56                      	push	si			;AN000;
 30480 000046E5 52                      	push	dx			;AN000;
 30481 000046E6 88C2                    	mov	dl,al			;AN000; save info id
 30482                                  $P_DCS_Loop:				;AN000;
 30483 000046E8 2E8A04                  	mov	al,[cs:si]		;AN000; load character and
 30484 000046EB E89606                  	call	$P_Chk_DBCS		;AN000; check if DBCS leading byte
 30485 000046EE 720C                    	jc	short $P_DCS00		;AN000; if yes, do not need CAPS
 30486                                  
 30487 000046F0 08C0                    	or	al,al			;AN000; end of string ?
 30488 000046F2 740C                    	jz	short $P_DCS_Exit	;AN000; then exit.
 30489                                  
 30490 000046F4 E80C00                  	call	$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 30491 000046F7 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 30492 000046FA EB01                    	jmp	short $P_DCS01		;AN000; process nexit
 30493                                  $P_DCS00:				;AN000;
 30494 000046FC 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 30495                                  $P_DCS01:				;AN000;
 30496 000046FD 46                      	inc	si			;AN000; si point to next byte
 30497 000046FE EBE8                    	jmp	short $P_DCS_Loop	;AN000; loop until NULL encountered
 30498                                  $P_DCS_Exit:				;AN000;
 30499 00004700 5A                      	pop	dx			;AN000;
 30500 00004701 5E                      	pop	si			;AN000;
 30501 00004702 C3                      	retn
 30502                                  
 30503                                  ;***********************************************************************
 30504                                  ; $P_Do_CAPS_Char;
 30505                                  ;
 30506                                  ; Function: Perform capitalization along with the file case map table
 30507                                  ;	    or character case map table.
 30508                                  ;
 30509                                  ; Input:    DL = 2 : Use character table
 30510                                  ;	    DL = 4 : Use file table
 30511                                  ;	    AL = character to be capitalized
 30512                                  ;
 30513                                  ; Output:   None
 30514                                  ;
 30515                                  ; Use:	INT 21h /w AH=65h
 30516                                  ;***********************************************************************
 30517                                  
 30518                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30519                                  
 30520                                  $P_Do_CAPS_Char:
 30521 00004703 3C80                    	cmp	al,$P_ASCII80	; 80h	;AN000; need upper case table ?
 30522 00004705 730B                    	jae	short $P_DCC_Go		;AN000;
 30523                                  
 30524 00004707 3C61                    	cmp	al,"a"  ; 61h		;AN000; if no,
 30525 00004709 7244                    	jb	short $P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 30526                                  
 30527 0000470B 3C7A                    	cmp	al,"z"  ; 7Ah		;AN000;
 30528 0000470D 7740                    	ja	short $P_CAPS_Ret	;AN000;   if yes, make CAPS
 30529                                  
 30530 0000470F 24DF                    	and	al,$P_Make_Upper ; 0DFh	;AN000;   else do nothing.
 30531                                  	;jmp	short $P_CAPS_Ret	;AN000;
 30532                                  	; 18/04/2023
 30533 00004711 C3                      	retn
 30534                                  
 30535                                  $P_DCC_Go:				;AN000;
 30536 00004712 53                      	push	bx			;AN000;
 30537 00004713 06                      	push	es			;AN000;
 30538 00004714 57                      	push	di			;AN000;
 30539                                  	; 18/04/2023
 30540 00004715 8D3E[DD86]              	lea	di,$P_File_CAP_Ptr	;AC034;
 30541 00004719 80FA04                  	cmp	dl,$P_DOSTBL_File ; 4	;AN000; Use file CAPS table ?
 30542 0000471C 7404                    	je	short $P_DCC00		;AN000;
 30543                                  	; 27/04/2023
 30544 0000471E 8D3E[D886]              	lea	di,$P_Char_CAP_Ptr	;AC034; or use char CAPS table ?
 30545                                  $P_DCC00:				;AN000;
 30546 00004722 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 30547 00004725 7417                    	je	short $P_DCC01		;AN000; if no,
 30548                                  
 30549                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 30550                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 30551                                  ; call, regardless of what base register is currently be defined as PSDATA_SEG.
 30552                                  
 30553 00004727 50                      	push	ax			;AN000; get CAPS table thru DOS call
 30554 00004728 51                      	push	cx			;AN000;
 30555 00004729 52                      	push	dx			;AN000;
 30556 0000472A 0E                      	push	cs			;AC036; pass current base seg into
 30557                                  					;(Note: this used to push CS. BUG...
 30558 0000472B 07                      	pop	es			;AN000;   ES reg, required for
 30559                                  					;get extended country information
 30560                                  	; 31/03/2023
 30561 0000472C B465                    	mov	ah,$P_DOS_Get_TBL ; 65h	;AN000; get extended CDI
 30562                                  	;mov	ah,65h
 30563 0000472E 88D0                    	mov	al,dl			;AN000; upper case table
 30564                                  	;mov	bx,-1 ; 0FFFFh
 30565                                  	;mov	cx,5
 30566                                  	;mov	dx,-1
 30567 00004730 BBFFFF                  	mov	bx,$P_DOSTBL_Def ; -1	;AN000; get active CON
 30568 00004733 B90500                  	mov	cx,$P_DOSTBL_BL  ; 5 	;AN000; buffer length
 30569 00004736 BAFFFF                  	mov	dx,$P_DOSTBL_Def ; -1	;AN000; get for default code page
 30570                                  					;DI already set to point to buffer
 30571 00004739 CD21                    	int	21h			;AN000; es:di point to buffer that
 30572                                  					;now has been filled in with info
 30573 0000473B 5A                      	pop	dx			;AN000;
 30574 0000473C 59                      	pop	cx			;AN000;
 30575 0000473D 58                      	pop	ax			;AN000;
 30576                                  
 30577                                  $P_DCC01:				;AN000;
 30578                                  
 30579                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 30580                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 30581                                  ; regardless of which base reg is currently the PSDATA_SEG reg.
 30582                                  
 30583 0000473E 2E8B5D01                	mov	bx,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Off]
 30584                                  	;mov	bx,[cs:di+1]		;AN000; get offset of table
 30585 00004742 2E8E4503                	mov	es,[cs:di+$P_DOS_TBL.$P_DOS_TBL_Seg]
 30586                                  	;mov	es,[cs:di+3]		;AN000; get segment of table
 30587 00004746 43                      	inc	bx			;AC035; add '2' to
 30588 00004747 43                      	inc	bx			;AC035;  BX reg
 30589                                  					;AN000; skip length field
 30590 00004748 2C80                    	sub	al,$P_ASCII80 ; 80h	;AN000; make char to index
 30591                                  	;xlat	es:[bx] 		;AN000; perform case map
 30592                                  	; 31/03/2023
 30593 0000474A 26D7                    	es	xlat
 30594                                  
 30595 0000474C 5F                      	pop	di			;AN000;
 30596 0000474D 07                      	pop	es			;AN000;
 30597 0000474E 5B                      	pop	bx			;AN000;
 30598                                  $P_CAPS_Ret:				;AN000;
 30599 0000474F C3                      	retn
 30600                                  
 30601                                  ;***********************************************************************
 30602                                  ; $P_Value / $P_SValue
 30603                                  ;
 30604                                  ; Function:  Make 32bit value from psdata_seg:SI and see value list
 30605                                  ;	     and make result buffer.
 30606                                  ;	     $P_SValue is an entry point for the signed value
 30607                                  ;	     and this will simply call $P_Value after the handling
 30608                                  ;	     of the sign character, "+" or "-"
 30609                                  ;
 30610                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 30611                                  ;	     ES:BX -> CONTROL block
 30612                                  ;
 30613                                  ; Output:    None
 30614                                  ;
 30615                                  ; Use:	$P_Fill_Result, $P_Check_OVF
 30616                                  ;
 30617                                  ; Vars: $P_RC(W), $P_Flags(RW)
 30618                                  ;***********************************************************************
 30619                                  
 30620                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30621                                  $P_SValue:
 30622 00004750 50                      	push	ax			;AN000;
 30623                                  	;or	byte [cs:$P_Flags2],80h
 30624 00004751 2E800E[1E86]80          	or	byte [cs:$P_Flags2],$P_Signed
 30625                                  					;AC034; indicate a signed numeric
 30626                                  	;and	byte [cs:$P_Flags2],0FDh
 30627 00004757 2E8026[1E86]FD          	and	byte [cs:$P_Flags2],0FFh-$P_Neg
 30628                                  					;AC034; assume positive value
 30629 0000475D 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 30630 00004760 3C2B                    	cmp	al,'+' ; 2Bh
 30631                                  	;cmp	al,$P_Plus ; '+'	;AN000; "+" ?
 30632 00004762 740A                    	je	short $P_SVal00		;AN000;
 30633                                  
 30634 00004764 3C2D                    	cmp	al,'-' ; 2Dh
 30635                                  	;cmp	al,$P_Minus ; '-'	;AN000; "-" ?
 30636 00004766 7507                    	jne	short $P_Sval01		;AN000; else
 30637                                  
 30638 00004768 2E800E[1E86]02          	or	byte [cs:$P_Flags2],$P_Neg ; 2
 30639                                  					;AC034; set this is negative value
 30640                                  $P_SVal00:				;AN000;
 30641 0000476E 46                      	inc	si			;AN000; skip sign char
 30642                                  $P_Sval01:				;AN000;
 30643 0000476F E80200                  	call	$P_Value		;AN000; and process value
 30644 00004772 58                      	pop	ax			;AN000;
 30645 00004773 C3                      	retn				;AN000;
 30646                                  
 30647                                  ;***********************************************************************
 30648                                  
 30649                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30650                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4955h
 30651                                  
 30652                                  $P_Value:
 30653 00004774 50                      	push	ax			;AN000;
 30654 00004775 51                      	push	cx			;AN000;
 30655 00004776 52                      	push	dx			;AN000;
 30656 00004777 56                      	push	si			;AN000;
 30657 00004778 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 30658 0000477A 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 30659 0000477C 53                      	push	bx			;AN000; save control pointer
 30660                                  $P_Value_Loop:				;AN000;
 30661 0000477D 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 30662 00004780 08C0                    	or	al,al			;AN000; end of line ?
 30663 00004782 7442                    	jz	short $P_Value00	;AN000;
 30664                                  
 30665 00004784 E8EB00                  	call	$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 30666 00004787 7239                    	jc	short $P_Value_Err0	;AN000;
 30667                                  
 30668 00004789 30E4                    	xor	ah,ah			;AN000;
 30669 0000478B 89C5                    	mov	bp,ax			;AN000; save binary number
 30670 0000478D D1E2                    	shl	dx,1			;AN000; to have 2*x
 30671 0000478F D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 30672 00004791 E8CC00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30673 00004794 722C                    	jc	short $P_Value_Err0	;AN000; then error, exit
 30674                                  
 30675 00004796 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 30676 00004798 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 30677 0000479A D1E2                    	shl	dx,1			;AN000; to have 4*x
 30678 0000479C D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 30679 0000479E E8BF00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30680 000047A1 721F                    	jc	short $P_Value_Err0	;AN000; then error, exit
 30681                                  
 30682 000047A3 D1E2                    	shl	dx,1			;AN000; to have 8*x
 30683 000047A5 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 30684 000047A7 E8B600                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30685 000047AA 7216                    	jc	short $P_Value_Err0	;AN000; then error, exit
 30686                                  
 30687 000047AC 01DA                    	add	dx,bx			;AN000; now have 10*x
 30688 000047AE 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 30689 000047B0 E8AD00                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30690 000047B3 720D                    	jc	short $P_Value_Err0	;AN000; then error, exit
 30691                                  
 30692 000047B5 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 30693 000047B7 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 30694 000047BA E8A300                  	call	$P_Check_OVF		;AN000; Overflow occurred ?
 30695 000047BD 7203                    	jc	short $P_Value_Err0	;AN000; then error, exit
 30696                                  
 30697 000047BF 46                      	inc	si			;AN000; update pointer
 30698 000047C0 EBBB                    	jmp	short $P_Value_Loop	;AN000; loop until NULL encountered
 30699                                  
 30700                                  $P_Value_Err0:				;AN000;
 30701 000047C2 5B                      	pop	bx			;AN000;
 30702 000047C3 E98800                  	jmp	$P_Value_Err		;AN000; Bridge
 30703                                  
 30704                                  $P_Value00:				;AN000;
 30705 000047C6 5B                      	pop	bx			;AN000; restore control pointer
 30706 000047C7 2EF606[1E86]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2 
 30707                                  					;AC034; here cx,dx = 32bit value
 30708 000047CD 740A                    	jz	short $P_Value01	;AN000; was it negative ?
 30709                                  
 30710 000047CF F7D1                    	not	cx			;AN000; +
 30711 000047D1 F7D2                    	not	dx			;AN000; |- Make 2's complement
 30712 000047D3 83C201                  	add	dx,1			;AN000; |
 30713 000047D6 83D100                  	adc	cx,0			;AN000; +
 30714                                  $P_Value01:				;AN000; / nval =0
 30715 000047D9 268B7706                	mov	si,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 30716                                  	;mov	si,[es:bx+6]		;AN000; si points to value list
 30717 000047DD 268A04                  	mov	al,[es:si]		;AN000; get nval
 30718 000047E0 3C00                    	cmp	al,$P_nval_None ; 0	;AN000; no value list ?
 30719 000047E2 7505                    	jne	short $P_Value02	;AN000;
 30720                                  
 30721                                  	;mov	al,$P_Number	; 1	;AN000; Set type
 30722                                  	;mov	ah,$P_No_Tag	; 0FFh	;AN000; No ITEM_TAG set
 30723                                  	; 31/03/2023
 30724 000047E4 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 30725 000047E7 EB6F                    	jmp	short $P_Value_Exit	;AN000;
 30726                                  
 30727                                  $P_Value02:				;AN000; / nval = 1
 30728 000047E9 46                      	inc	si			;AN000;
 30729 000047EA 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 30730 000047ED 3C00                    	cmp	al,$P_No_nrng	; 0	;AN000; (tm07)
 30731 000047EF 745D                    	je	short $P_Value03	;AN000; (tm07)
 30732                                  
 30733 000047F1 46                      	inc	si			;AN000; si points to 1st item_tag
 30734                                  $P_Val02_Loop:				;AN000;
 30735 000047F2 2EF606[1E86]80          	test	byte [cs:$P_Flags2],$P_Signed ; 80h
 30736                                  	;test	byte [cs:$P_Flags2],80h	;AC034;
 30737 000047F8 751E                    	jnz	short $P_Val02_Sign	;AN000;
 30738                                  
 30739 000047FA 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 30740                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 30741 000047FE 723B                    	jb	short $P_Val02_Next	;AN000;
 30742 00004800 7706                    	ja	short $P_Val_In		;AN000;
 30743                                  
 30744 00004802 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 30745                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 30746 00004806 7233                    	jb	short $P_Val02_Next	;AN000;
 30747                                  
 30748                                  $P_Val_In:				;AN000;
 30749 00004808 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 30750                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH (tm01)
 30751 0000480C 772D                    	ja	short $P_Val02_Next	;AN000;
 30752 0000480E 7224                    	jb	short $P_Val_Found	;AN000;
 30753                                  
 30754 00004810 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 30755                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 30756 00004814 7725                    	ja	short $P_Val02_Next	;AN000;
 30757                                  
 30758 00004816 EB1C                    	jmp	short $P_Val_Found	;AN000;
 30759                                  
 30760                                  $P_Val02_Sign:				;AN000;
 30761 00004818 263B4C03                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_XH]
 30762                                  	;cmp	cx,[es:si+3]		;AN000; comp cx with XH
 30763 0000481C 7C1D                    	jl	short $P_Val02_Next	;AN000;
 30764 0000481E 7F06                    	jg	short $P_SVal_In	;AN000;
 30765                                  
 30766 00004820 263B5401                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_XL]
 30767                                  	;cmp	dx,[es:si+1]		;AN000; comp dx with XL
 30768 00004824 7C15                    	jl	short $P_Val02_Next	;AN000;
 30769                                  
 30770                                  $P_SVal_In:				;AN000;
 30771 00004826 263B4C07                	cmp	cx,[es:si+$P_VAL_LIST.$P_Val_YH]
 30772                                  	;cmp	cx,[es:si+7]		;AN000; comp cx with YH
 30773 0000482A 7F0F                    	jg	short $P_Val02_Next	;AN000;
 30774 0000482C 7C06                    	jl	short $P_Val_Found	;AN000;
 30775                                  
 30776 0000482E 263B5405                	cmp	dx,[es:si+$P_VAL_LIST.$P_Val_YL]
 30777                                  	;cmp	dx,[es:si+5]		;AN000; comp dx with YL
 30778 00004832 7F07                    	jg	short $P_Val02_Next	;AN000;
 30779                                  
 30780                                  	;jmp	short $P_Val_Found	;AN000;
 30781                                  	; 27/04/2023
 30782                                  $P_Val_Found:				;AN000;
 30783 00004834 B001                    	mov	al,$P_Number ; 1	;AN000;
 30784 00004836 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 30785 00004839 EB1D                    	jmp	short $P_Value_Exit	;AN000;
 30786                                  
 30787                                  $P_Val02_Next:				;AN000;
 30788 0000483B 83C609                  	add	si,$P_Len_Range ; 9 	;AN000;
 30789 0000483E FEC8                    	dec	al			;AN000; loop nrng times in AL
 30790 00004840 75B0                    	jnz	short $P_Val02_Loop	;AN000;
 30791                                  					; / Not found
 30792 00004842 2EC706[1286]0600        	mov	word [cs:$P_RC],$P_Out_Of_Range
 30793                                  	;mov	word [cs:$P_RC],6	;AC034;
 30794                                  	
 30795                                  	;mov	al,$P_Number ; 1	;AN000;
 30796                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 30797                                  	; 31/03/2023
 30798 00004849 B801FF                  	mov	ax,($P_No_Tag<<8)+$P_Number
 30799 0000484C EB0A                    	jmp	short $P_Value_Exit	;AN000;
 30800                                  
 30801                                  	; 27/04/2023
 30802                                  ;$P_Val_Found:				;AN000;
 30803                                  	;mov	al,$P_Number ; 1	;AN000;
 30804                                  	;mov	ah,[es:si]		;AN000; found ITEM_TAG set
 30805                                  	;jmp	short $P_Value_Exit	;AN000;
 30806                                  
 30807                                  $P_Value03:				;AN000; / nval = 2
 30808                                  $P_Value04:				;AN000; / nval = 3 or else
 30809                                  $P_Value_Err:				;AN000;
 30810 0000484E 2EC706[1286]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 30811                                  					;AC034;
 30812                                  	;mov	al,$P_String ; 3	;AN000; Set type
 30813                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 30814                                  	; 31/03/2023
 30815 00004855 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30816                                  $P_Value_Exit:				;AN000;
 30817 00004858 E809FD                  	call	$P_Fill_Result		;AN000;
 30818 0000485B 5E                      	pop	si			;AN000;
 30819 0000485C 5A                      	pop	dx			;AN000;
 30820 0000485D 59                      	pop	cx			;AN000;
 30821 0000485E 58                      	pop	ax			;AN000;
 30822 0000485F C3                      	retn				;AN000;
 30823                                  
 30824                                  ;***********************************************************************
 30825                                  ; $P_Check_OVF
 30826                                  ;
 30827                                  ; Function:  Check if overflow is occurred with consideration of
 30828                                  ;	     signed or un-signed numeric value
 30829                                  ;
 30830                                  ; Input:     Flag register
 30831                                  ;
 30832                                  ; Output:    CY = 1  :	Overflow
 30833                                  ;
 30834                                  ; Vars:     $P_Flags(R)
 30835                                  ;***********************************************************************
 30836                                  
 30837                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30838                                  $P_Check_OVF:
 30839 00004860 9C                      	pushf				;AN000;
 30840 00004861 2EF606[1E86]02          	test	byte [cs:$P_Flags2],$P_Neg ; 2
 30841                                  					;AC034; is it negative value ?
 30842 00004867 7502                    	jnz	short $P_COVF		;AN000; if no, check overflow
 30843 00004869 9D                      	popf				;AN000; by the CY bit
 30844 0000486A C3                      	retn				;AN000;
 30845                                  $P_COVF:				;AN000;
 30846 0000486B 9D                      	popf				;AN000; else,
 30847 0000486C 7002                    	jo	short $P_COVF00		;AN000; check overflow by the OF
 30848 0000486E F8                      	clc				;AN000; indicate it with CY bit
 30849 0000486F C3                      	retn				;AN000; CY=0 means no overflow
 30850                                  $P_0099Err:	; 31/03/2023
 30851                                  $P_COVF00:				;AN000;
 30852 00004870 F9                      	stc				;AN000; and CY=1 means overflow
 30853                                  $P_0099Err2:	; 31/03/2023
 30854 00004871 C3                      	retn				;AN000;
 30855                                  
 30856                                  ;***********************************************************************
 30857                                  ; $P_0099;
 30858                                  ;
 30859                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 30860                                  ;
 30861                                  ; Input:     AL = character code
 30862                                  ;
 30863                                  ; Output:    CY = 1 : AL is not number
 30864                                  ;	     CY = 0 : AL contains binary value
 30865                                  ;***********************************************************************
 30866                                  
 30867                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30868                                  $P_0099:
 30869 00004872 3C30                    	cmp	al,"0"                  ;AN000;
 30870                                  	;jb	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 30871                                  	; 31/03/2023
 30872 00004874 72FB                    	jb	short $P_0099Err2
 30873                                  
 30874 00004876 3C39                    	cmp	al,"9"                  ;AN000;
 30875 00004878 77F6                    	ja	short $P_0099Err	;AN000;  must be 0 =< al =< 9
 30876                                  
 30877 0000487A 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 30878                                  	; 31/03/2023
 30879                                  	;clc				;AN000; indicate no error
 30880 0000487C C3                      	retn				;AN000;
 30881                                  	 ;31/03/2023
 30882                                  ;$P_0099Err:				;AN000;
 30883                                  ;	stc				;AN000; indicate error
 30884                                  ;	retn				;AN000;
 30885                                  
 30886                                  ;***********************************************************************
 30887                                  ; $P_Simple_String
 30888                                  ;
 30889                                  ; Function:  See value list for the simple string
 30890                                  ;	     and make result buffer.
 30891                                  ;
 30892                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 30893                                  ;	     ES:BX -> CONTROL block
 30894                                  ;
 30895                                  ; Output:    None
 30896                                  ;
 30897                                  ; Use:	$P_Fill_Result, $P_String_Comp
 30898                                  ;
 30899                                  ; Vars: $P_RC(W)
 30900                                  ;***********************************************************************
 30901                                  
 30902                                  	; 31/03/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30903                                  
 30904                                  $P_Simple_String:
 30905 0000487D 50                      	push	ax			;AN000;
 30906 0000487E 53                      	push	bx			;AN000;
 30907 0000487F 52                      	push	dx			;AN000;
 30908 00004880 57                      	push	di			;AN000;
 30909 00004881 268B7F06                	mov	di,[es:bx+$P_CONTROL_BLK.$P_Value_List]
 30910                                  	;mov	di,[es:bx+6]		;AN000; di points to value list
 30911 00004885 268A05                  	mov	al,[es:di]		;AN000; get nval
 30912 00004888 08C0                    	or	al,al			;AN000; no value list ?
 30913 0000488A 7502                    	jnz	short $P_Sim00		;AN000; then
 30914                                  	; 31/03/2023
 30915                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 30916 0000488C EB48                    	jmp	short $P_Sim_Exit	;AN000; and set result buffer
 30917                                  $P_Sim00:				;AN000;
 30918 0000488E 3C03                    	cmp	al,$P_nval_String ; 3	;AN000; String choice list provided ?
 30919 00004890 753D                    	jne	short $P_Sim01		;AN000; if no, syntax error
 30920                                  
 30921 00004892 47                      	inc	di			;AN000;
 30922 00004893 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 30923 00004896 B409                    	mov	ah,$P_Len_Range ; 9	;AN000;
 30924 00004898 F6E4                    	mul	ah			;AN000;  Skip nrng field
 30925 0000489A 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 30926 0000489B 01C7                    	add	di,ax			;AN000; di points to nnval
 30927 0000489D 268A05                  	mov	al,[es:di]		;AN000; get nnval
 30928 000048A0 B405                    	mov	ah,$P_Len_Value ; 5	;AN000;
 30929 000048A2 F6E4                    	mul	ah			;AN000; Skip nnval field
 30930 000048A4 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 30931 000048A5 01C7                    	add	di,ax			;AN000; di points to nstrval
 30932 000048A7 268A05                  	mov	al,[es:di]		;AN000; get nstrval
 30933 000048AA 47                      	inc	di			;AC035; add '2' to
 30934 000048AB 47                      	inc	di			;AC035;  DI reg
 30935                                  					;AN000; di points to 1st string in list
 30936                                  $P_Sim_Loop:				;AN000;
 30937 000048AC 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 30938 000048AF E82F00                  	call	$P_String_Comp		;AN000; compare it with operand
 30939 000048B2 7310                    	jnc	short $P_Sim_Found	;AN000; found on list ?
 30940                                  
 30941 000048B4 83C703                  	add	di,$P_Len_String ; 3	;AN000; if no, point to next choice
 30942 000048B7 FEC8                    	dec	al			;AN000; loop nstval times in AL
 30943 000048B9 75F1                    	jnz	short $P_Sim_Loop	;AN000;
 30944                                  					;AN000; / Not found
 30945 000048BB 2EC706[1286]0800        	mov	word [cs:$P_RC],$P_Not_In_Str
 30946                                  	;mov	[cs:$P_RC],8		;AC034;
 30947                                  	; 31/03/2023
 30948                                  	;mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 30949 000048C2 EB12                    	jmp	short $P_Sim_Exit	;AN000;
 30950                                  $P_Sim_Found:				;AN000;
 30951 000048C4 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 30952 000048C8 B002                    	mov	al,$P_List_Idx	; 2	;AN000;
 30953 000048CA 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 30954 000048CD EB0A                    	jmp	short $P_Sim_Exit0	;AN000;
 30955                                  $P_Sim01:				;AN000;
 30956 000048CF 2EC706[1286]0900        	mov	word [cs:$P_RC],$P_Syntax
 30957                                  	;mov	word [cs:$P_RC],9	;AC034;
 30958                                  $P_Sim_Exit:
 30959                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; No ITEM_TAG set
 30960                                  ;$P_Sim_Exit:				;AN000;
 30961                                  	;mov	al,$P_String ; 3	;AN000; Set type
 30962                                  	; 31/03/2023
 30963 000048D6 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 30964                                  $P_Sim_Exit0:				;AN000;
 30965 000048D9 E888FC                  	call	$P_Fill_Result		;AN000;
 30966 000048DC 5F                      	pop	di			;AN000;
 30967 000048DD 5A                      	pop	dx			;AN000;
 30968 000048DE 5B                      	pop	bx			;AN000;
 30969 000048DF 58                      	pop	ax			;AN000;
 30970 000048E0 C3                      	retn				;AN000;
 30971                                  
 30972                                  ;***********************************************************************
 30973                                  ; $P_String_Comp:
 30974                                  ;
 30975                                  ; Function:  Compare two string
 30976                                  ;
 30977                                  ; Input:     psdata_seg:SI -> 1st string
 30978                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 30979                                  ;	     ES:BX -> CONTROL block
 30980                                  ;
 30981                                  ; Output:    CY = 1 if not match
 30982                                  ;
 30983                                  ; Use:	$P_Chk_DBCS, $P_Do_CAPS_Char
 30984                                  ;
 30985                                  ; Vars: $P_KEYor_SW_Ptr(W), $P_Flags(R). $P_KEYorSW_Ptr
 30986                                  ;***********************************************************************
 30987                                  
 30988                                  	; 01/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 30989                                  
 30990                                  $P_String_Comp:
 30991 000048E1 50                      	push	ax			;AN000;
 30992 000048E2 55                      	push	bp			;AN000;
 30993 000048E3 52                      	push	dx			;AN000;
 30994 000048E4 56                      	push	si			;AN000;
 30995 000048E5 B202                    	mov	dl,$P_DOSTBL_Char ; 2	;AN000; use character case map table
 30996                                  $P_SCOM_Loop:				;AN000;
 30997 000048E7 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 30998 000048EA E89704                  	call	$P_Chk_DBCS		;AN000; DBCS ?
 30999 000048ED 723C                    	jc	short $P_SCOM00		;AN000; yes,DBCS
 31000                                  
 31001 000048EF E811FE                  	call	$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 31002                                  	
 31003 000048F2 2EF606[1E86]08          	test	byte [cs:$P_Flags2],$P_Key_Cmp ; 8
 31004                                  					;AC034; keyword search ?
 31005 000048F8 740D                    	jz	short $P_SCOM04		;AN000;
 31006                                  
 31007                                  	;cmp	al,'=' ; 3Dh
 31008 000048FA 3C3D                    	cmp	al,$P_Keyword  ;'='	;AN000; "=" is delimiter
 31009 000048FC 751F                    	jne	short $P_SCOM03		;AN000;IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 31010                                  
 31011 000048FE 26807E0100              	cmp	byte [es:bp+1],$P_NULL	;AN021;   at end of keyword string in the control block THEN
 31012 00004903 7562                    	jne	short $P_SCOM_Differ	;AN021;
 31013                                  
 31014 00004905 EB13                    	jmp	short $P_SCOM05 	;AN000;   keyword found in synonym list
 31015                                  
 31016                                  $P_SCOM04:				;AN000;
 31017 00004907 2EF606[1E86]10          	test	byte [cs:$P_Flags2],$P_SW_Cmp ; 10h 
 31018                                  					;AC034; switch search ?
 31019 0000490D 740E                    	jz	short $P_SCOM03		;AN000;
 31020                                  
 31021 0000490F 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; ":" is delimiter, at end of switch on command line
 31022 00004911 750A                    	jne	short $P_SCOM03		;AN000; continue compares
 31023                                  
 31024 00004913 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN021; IF at end of switch on command AND
 31025 00004918 754D                    	jne	short $P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 31026                                  
 31027                                  $P_SCOM05:				;AN000;   found a match
 31028 0000491A 46                      	inc	si			;AN000; si points to just after "=" or ":"
 31029 0000491B EB58                    	jmp	short $P_SCOM_Same	;AN000; exit
 31030                                  
 31031                                  $P_SCOM03:				;AN000;
 31032 0000491D 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 31033 00004921 751D                    	jne	short $P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 31034                                  
 31035 00004923 08C0                    	or	al,al			;AN000; end of line
 31036 00004925 744E                    	jz	short $P_SCOM_Same	;AN000; if so, exit
 31037                                  
 31038 00004927 46                      	inc	si			;AN000; update operand pointer
 31039 00004928 45                      	inc	bp			;AN000;    and synonym pointer
 31040 00004929 EB13                    	jmp	short $P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 31041                                  
 31042                                  $P_SCOM00:				;AN000; Here al is DBCS leading byte
 31043 0000492B 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 31044 0000492F 7536                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different
 31045                                  
 31046 00004931 46                      	inc	si			;AN000; else, load next byte
 31047 00004932 2E8A04                  	mov	al,[cs:si]		;AN000; and
 31048 00004935 45                      	inc	bp			;AN000;
 31049 00004936 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 31050 0000493A 752B                    	jne	short $P_SCOM_Differ	;AN000; if not match, say different, too
 31051                                  
 31052 0000493C 46                      	inc	si			;AN000; else update operand pointer
 31053 0000493D 45                      	inc	bp			;AN000; 	and synonym pointer
 31054                                  $P_SCOM01:				;AN000;
 31055 0000493E EBA7                    	jmp	short $P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 31056                                  
 31057                                  $P_SCOM_Differ0:			;AN000;
 31058 00004940 2EF606[1E86]40          	test	byte [cs:$P_Flags2],$P_SW ; 40h 
 31059                                  	;test	byte [cs:$P_Flags2],40h	;AC034;(tm10)
 31060 00004946 740E                    	jz	short $P_not_applicable	;AN000;(tm10)
 31061                                  
 31062                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary
 31063                                  	;;test	word [es:bx+2],20h	;AN000;(tm10)
 31064                                  	; 03/04/2023
 31065 00004948 26F6470220              	test	byte [es:bx+$P_CONTROL_BLK.$P_Function_Flag],$P_colon_is_not_necessary	
 31066 0000494D 7407                    	jz	short $P_not_applicable	;AN000;(tm10)
 31067                                  
 31068 0000494F 26807E0000              	cmp	byte [es:bp],$P_NULL	;AN000;(tm10)
 31069 00004954 741F                    	je	short $P_SCOM_Same	;AN025;(tm10)
 31070                                  
 31071                                  $P_not_applicable:			;AN000;(tm10)
 31072                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 31073                                  	;;test	word [es:bx],10h	;AN000; ignore colon option specified ?
 31074                                  	; 03/04/2023
 31075 00004956 26F60710                	test	byte [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 31076 0000495A 740B                    	jz	short $P_SCOM_Differ	;AN000; if no, say different.
 31077                                  
 31078 0000495C 3C3A                    	cmp	al,$P_Colon ; ':' ; 3Ah	;AN000; End up with ":" and
 31079 0000495E 750A                    	jne	short $P_SCOM02		;AN000;    subseqently
 31080                                  
 31081 00004960 26807E0000              	cmp	byte [es:bp],$P_NULL 	;AN000;      NULL ?
 31082                                  	;jne	short $P_SCOM_Differ	;AN000; if no, say different
 31083                                  	;jmp	short $P_SCOM_Same	;AN000; else, say same
 31084                                  	; 01/04/2023
 31085 00004965 740E                    	je	short $P_SCOM_Same
 31086                                  $P_SCOM_Differ:
 31087 00004967 F9                      	stc
 31088 00004968 EB10                    	jmp	short $P_SCOM_Exit
 31089                                  
 31090                                  $P_SCOM02:				;AN000;
 31091 0000496A 3C00                    	cmp	al,$P_NULL ; 0		;AN000; end up NULL and :
 31092 0000496C 75F9                    	jne	short $P_SCOM_Differ	;AN000;
 31093                                  
 31094                                  	;cmp	byte [es:bp],':'
 31095 0000496E 26807E003A              	cmp	byte [es:bp],$P_Colon	;AN000; if no, say different
 31096                                  	;je	short $p_SCOM_Same	;AN000; else, say same
 31097                                  	; 01/04/2023
 31098 00004973 75F2                    	jne	short $P_SCOM_Differ
 31099                                  ;$P_SCOM_Differ: 			;AN000;
 31100                                  	;stc				;AN000; indicate not found
 31101                                  	;jmp	short $P_SCOM_Exit	;AN000;
 31102                                  
 31103                                  $P_SCOM_Same:				;AN000;
 31104 00004975 2E8936[2186]            	mov	[cs:$P_KEYorSW_Ptr],si	;AC034; for later use by keyword or switch
 31105                                  	; 01/04/2023
 31106                                  	;clc
 31107                                  	; cf = 0			;AN000; indicate found
 31108                                  $P_SCOM_Exit:				;AN000;
 31109 0000497A 5E                      	pop	si			;AN000;
 31110 0000497B 5A                      	pop	dx			;AN000;
 31111 0000497C 5D                      	pop	bp			;AN000;
 31112 0000497D 58                      	pop	ax			;AN000;
 31113 0000497E C3                      	retn				;AN000;
 31114                                  
 31115                                  ;***********************************************************************
 31116                                  ; $P_Date_Format
 31117                                  ;
 31118                                  ; Function:  Convert a date string to DOS date format for int 21h
 31119                                  ;	     with format validation.
 31120                                  ;
 31121                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31122                                  ;	     ES:BX -> CONTROL block
 31123                                  ;
 31124                                  ; Output:    None
 31125                                  ;
 31126                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum
 31127                                  ;
 31128                                  ; Vars: $P_RC(W), $P_1st_Val(RW), $P_2nd_Val(RW), $P_3rd_Val(RW)
 31129                                  ;***********************************************************************
 31130                                  
 31131                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31132                                  
 31133                                  $P_Date_Format:
 31134 0000497F 50                      	push	ax			;AN000;
 31135 00004980 51                      	push	cx			;AN000;
 31136 00004981 52                      	push	dx			;AN000;
 31137 00004982 56                      	push	si			;AN000;
 31138 00004983 53                      	push	bx			;AN000;
 31139 00004984 56                      	push	si			;AN000;
 31140 00004985 E89F00                  	call	$P_Set_CDI		;AN000; set country dependent information before process
 31141                                  	; 03/04/2023
 31142                                  	;pop	si			;AN000;
 31143                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 31144                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 31145                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 31146 00004988 31F6                    	xor	si,si
 31147 0000498A 2E8936[D086]            	mov	[cs:$P_1st_Val],si ; 0	;AC034; set initial value
 31148 0000498F 2E8936[D286]            	mov	[cs:$P_2nd_Val],si ; 0	;AC034; set initial value
 31149                                  	;mov	[cs:$P_3rd_Val],si ; 0	;AC034; set initial value
 31150 00004994 5E                      	pop	si
 31151 00004995 E8A900                  	call	$P_Get_DecNum		;AN000; get 1st number
 31152 00004998 7218                    	jc	short $P_DateF_Err0	;AN000;-----------------------+
 31153 0000499A 2EA3[D086]              	mov	[cs:$P_1st_Val],ax	;AC034;			      |
 31154 0000499E 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 31155 000049A0 741A                    	jz	short $P_DateF_YMD	;AN000; 		      |
 31156 000049A2 E89C00                  	call	$P_Get_DecNum		;AN000; get 2nd number	      |
 31157 000049A5 726D                    	jc	short $P_DateF_Error	;AN000; 		      |
 31158 000049A7 2EA3[D286]              	mov	[cs:$P_2nd_Val],ax	;AC034;			      |
 31159 000049AB 08DB                    	or	bl,bl			;AN000; end of line ?	      |
 31160 000049AD 740D                    	jz	short $P_DateF_YMD	;AN000; 		      |
 31161 000049AF E88F00                  	call	$P_Get_DecNum		;AN000; get 3rd number	      |
 31162                                  $P_DateF_Err0:				;AN000; Bridge	  <-----------+
 31163 000049B2 7260                    	jc	short $P_DateF_Error	;AN000;
 31164 000049B4 2EA3[D486]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 31165 000049B8 08DB                    	or	bl,bl			;AN000; end of line ?
 31166 000049BA 7558                    	jnz	short $P_DateF_Error	;AN000;
 31167                                  $P_DateF_YMD:				;AN000;
 31168 000049BC 2E8B1E[AE86]            	mov	bx,[cs:$P_Country_Info+$P_CDI.$P_CDI_DateF]
 31169                                  	;mov	bx,[cs:$P_Country_Info]	;AC034; get date format
 31170 000049C1 83FB02                  	cmp	bx,$P_Date_YMD ; 2	;AN000;
 31171 000049C4 7422                    	je	short $P_DateF00	;AN000;
 31172 000049C6 2EA1[D086]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 31173 000049CA 08E4                    	or	ah,ah			;AN000;
 31174 000049CC 7546                    	jnz	short $P_DateF_Error	;AN000;
 31175 000049CE 88C1                    	mov	cl,al			;AN000; set month
 31176 000049D0 2EA1[D286]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 31177 000049D4 08E4                    	or	ah,ah			;AN000; if overflow, error.
 31178 000049D6 753C                    	jnz	short $P_DateF_Error	;AN000;
 31179 000049D8 88C5                    	mov	ch,al			;AN000; set date
 31180 000049DA 2E8B16[D486]            	mov	dx,[cs:$P_3rd_Val]	;AC034; set year
 31181 000049DF 83FB01                  	cmp	bx,$P_Date_DMY ; 1	;AN000; from here format = MDY
 31182 000049E2 7502                    	jne	short $P_DateF01	;AN000; if it is DMY
 31183 000049E4 86E9                    	xchg	ch,cl			;AN000;  then swap M <-> D
 31184                                  $P_DateF01:				;AN000;
 31185 000049E6 EB19                    	jmp	short $P_DateF02	;AN000;
 31186                                  $P_DateF00:				;AN000; / here format = YMD
 31187 000049E8 2E8B16[D086]            	mov	dx,[cs:$P_1st_Val]	;AC034; set year
 31188 000049ED 2EA1[D286]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 31189 000049F1 08E4                    	or	ah,ah			;AN000; if overflow, error
 31190 000049F3 751F                    	jnz	short $P_DateF_Error	;AN000;
 31191                                  
 31192 000049F5 88C1                    	mov	cl,al			;AN000; set month
 31193 000049F7 2EA1[D486]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 31194 000049FB 08E4                    	or	ah,ah			;AN000; if overflow, error
 31195 000049FD 7515                    	jnz	short $P_DateF_Error	;AN000;
 31196 000049FF 88C5                    	mov	ch,al			;AN000; set date
 31197                                  $P_DateF02:				;AN000;
 31198 00004A01 83FA64                  	cmp	dx,100			;AN000; year is less that 100 ?
 31199 00004A04 7304                    	jae	short $P_DateF03	;AN000;
 31200 00004A06 81C26C07                	add	dx,1900 		;AN000; set year 19xx
 31201                                  $P_DateF03:				;AN000;
 31202 00004A0A 5B                      	pop	bx			;AN000; recover CONTROL block
 31203 00004A0B 5E                      	pop	si			;AN000; recover string pointer
 31204                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 31205                                  	;mov	al,$P_Date_F ; 7	;AN000;   result
 31206                                  	; 03/04/2023
 31207 00004A0C B807FF                  	mov	ax,($P_No_Tag<<8)+$P_Date_F
 31208 00004A0F E852FB                  	call	$P_Fill_Result		;AN000;        buffer
 31209 00004A12 EB0F                    	jmp	short $P_Date_Format_Exit
 31210                                  					;AN000;	to Date
 31211                                  $P_DateF_Error: 			;AN000;
 31212 00004A14 5B                      	pop	bx			;AN000; recover CONTROL block
 31213 00004A15 5E                      	pop	si			;AN000; recover string pointer
 31214                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 31215                                  	;mov	al,$P_String ; 3	;AN000;   result
 31216                                  	; 03/04/2023
 31217 00004A16 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31218 00004A19 E848FB                  	call	$P_Fill_Result		;AN000; 	buffer
 31219                                  					;AN000; to string
 31220 00004A1C 2EC706[1286]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9
 31221                                  					;AC034; indicate syntax error
 31222                                  $P_Date_Format_Exit:			;AN000;
 31223 00004A23 5A                      	pop	dx			;AN000;
 31224 00004A24 59                      	pop	cx			;AN000;
 31225 00004A25 58                      	pop	ax			;AN000;
 31226 00004A26 C3                      	retn				;AN000;
 31227                                  
 31228                                  ;***********************************************************************
 31229                                  ; $P_Set_CDI:
 31230                                  ;
 31231                                  ; Function: Read CDI from DOS if it has not been read yet
 31232                                  ;
 31233                                  ; Input:    None
 31234                                  ;
 31235                                  ; Output:   psdata_seg:SI -> CDI
 31236                                  ;
 31237                                  ; Use:	INT 21h w/ AH = 38h
 31238                                  ;***********************************************************************
 31239                                  
 31240                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31241                                  $P_Set_CDI:
 31242                                  	; 18/04/2023
 31243 00004A27 8D36[AE86]              	lea	si,$P_Country_Info	;AC034;
 31244                                  	;cmp	word [cs:si+$P_CDI.$P_CDI_DateF],-1 ; $P_NeedToBeRead
 31245 00004A2B 2E833CFF                	cmp	word [cs:si],-1 ; $P_NeedToBeRead ; 0FFFFh
 31246                                  					;AN000; already read ?
 31247                                  	;je	short $P_Read_CDI	;AN000;
 31248                                  	;jmp	short $P_Set_CDI_Exit	;AN000; then do nothing
 31249                                  	; 03/04/2023
 31250 00004A2F 750F                    	jne	short $P_Set_CDI_Exit
 31251                                  $P_Read_CDI:				;AN000; else read CDI thru DOS
 31252 00004A31 1E                      	push	ds			;AN000;
 31253 00004A32 52                      	push	dx			;AN000;
 31254 00004A33 50                      	push	ax			;AN000;
 31255 00004A34 0E                      	push	cs			;AC023;
 31256 00004A35 1F                      	pop	ds			;AN000; set segment register
 31257                                  	;mov	ax,3800h
 31258 00004A36 B80038                  	mov	ax,$P_DOS_Get_CDI	;AN000; get country information
 31259 00004A39 89F2                    	mov	dx,si			;AN000; set offset of CDI in local data area
 31260 00004A3B CD21                    	int	21h			;AN000;
 31261 00004A3D 58                      	pop	ax			;AN000;
 31262 00004A3E 5A                      	pop	dx			;AN000;
 31263 00004A3F 1F                      	pop	ds			;AN000;
 31264                                  $P_Set_CDI_Exit:			;AN000;
 31265 00004A40 C3                      	retn				;AN000;
 31266                                  
 31267                                  ;***********************************************************************
 31268                                  ; $P_Get_DecNum:
 31269                                  ;
 31270                                  ; Function:  Read a chcrater code from psdata_seg:SI until specified delimiter
 31271                                  ;	     or NULL encountered. And make a decimal number.
 31272                                  ;
 31273                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31274                                  ;
 31275                                  ; Output:    BL = delimiter code or NULL
 31276                                  ;	     AX = Decimal number
 31277                                  ;	     SI advanced to the next number
 31278                                  ;	     CY = 1 : Syntax error, AL = Latest examineed number
 31279                                  ;
 31280                                  ; Use:	$P_0099
 31281                                  ;***********************************************************************
 31282                                  
 31283                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31284                                  $P_Get_DecNum:
 31285 00004A41 51                      	push	cx			;AN000;
 31286 00004A42 52                      	push	dx			;AN000;
 31287 00004A43 31C9                    	xor	cx,cx			;AN000; cx will have final value
 31288                                  $P_GetNum_Loop: 			;AN000;
 31289 00004A45 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 31290 00004A48 08C0                    	or	al,al			;AN000; end of line ?
 31291 00004A4A 7438                    	jz	short $P_GetNum00	;AN000; if yes, exit
 31292 00004A4C 2E803E[AD86]00          	cmp	byte [cs:$P_Got_Time],0 ;AC034; is this numeric in a time field? ;AC023
 31293 00004A52 740B                    	je	short $P_Do_Date_Delims	;AN000; no, go check out Date delimiters ;AC023
 31294                                  
 31295                                  ; Determine which delimiter(s) to check for. Colon & period  or period only
 31296                                  	;cmp	bl,$P_colon_period
 31297 00004A54 80FB01                  	cmp	bl,1 ; $P_colon_period	;AN032; ;Time
 31298 00004A57 750E                    	jne	short $P_Do_Time_Delim1	;AN032; ;only check for period
 31299                                  
 31300 00004A59 3C3A                    	cmp	al,$P_Colon ; ':'	;AN032; ;Is this a valid delimiter ?
 31301 00004A5B 742B                    	je	short $P_GetNum01	;AN032; ;yes, exit
 31302                                  
 31303                                  	; 03/04/2023
 31304 00004A5D EB08                    	jmp	short $P_Do_Time_Delim1
 31305                                  ;$P_Do_Time_Delim1:			;AN000;
 31306                                  	;cmp	al,$P_Period ; '.'	;;AC032;;AC023;Is this a valid delimiter ?
 31307                                  	;je	short $P_GetNum01	;AC023; yes, exit
 31308                                  	;
 31309                                  	;jmp	short $P_Neither_Delims ;AN023;
 31310                                  
 31311                                  $P_Do_Date_Delims:			;AN000;
 31312                                  ;Regardless of the date delimiter character specified in the country
 31313                                  ;dependent information, check for the presence of any one of these
 31314                                  ;three field delimiters: "-", "/", or ".".
 31315 00004A5F 3C2D                    	cmp	al,$P_Minus ;'-'	;AN020;is this a date delimiter character?
 31316 00004A61 7425                    	je	short $P_GetNum01	;AN020;if yes, exit
 31317                                  
 31318 00004A63 3C2F                    	cmp	al,$P_Slash ; '/'	;AN020;is this a date delimiter character?
 31319 00004A65 7421                    	je	short $P_GetNum01	;AN020;if yes, exit
 31320                                  
 31321                                  $P_Do_Time_Delim1:  ; 03/04/2023
 31322 00004A67 3C2E                    	cmp	al,$P_Period ; '.'	;AN020;is this a date delimiter character?
 31323 00004A69 741D                    	je	short $P_GetNum01	;AN000; if yes, exit
 31324                                  
 31325                                  $P_Neither_Delims:			;AN023;
 31326 00004A6B E804FE                  	call	$P_0099 		;AN000; convert it to binary
 31327 00004A6E 721C                    	jc	short $P_GetNum_Exit	;AN000; if error exit
 31328                                  
 31329 00004A70 B400                    	mov	ah,0			;AN000;
 31330 00004A72 91                      	xchg	ax,cx			;AN000;
 31331 00004A73 BA0A00                  	mov	dx,10			;AN000;
 31332 00004A76 F7E2                    	mul	dx			;AN000; ax = ax * 10
 31333 00004A78 09D2                    	or	dx,dx			;AN000; overflow
 31334 00004A7A 750F                    	jnz	short $P_GetNum02	;AN000; then exit
 31335                                  
 31336 00004A7C 01C8                    	add	ax,cx			;AN000;
 31337 00004A7E 720C                    	jc	short $P_GetNum_Exit	;AN000;
 31338                                  
 31339 00004A80 91                      	xchg	ax,cx			;AN000;
 31340 00004A81 46                      	inc	si			;AN000;
 31341 00004A82 EBC1                    	jmp	short $P_GetNum_Loop	;AN000;
 31342                                  
 31343                                  $P_GetNum00:				;AN000;
 31344 00004A84 88C3                    	mov	bl,al			;AN000; set bl to NULL
 31345                                  	;03/04/2023
 31346                                  	; cf=0
 31347                                  	;clc				;AN000; indicate no error
 31348 00004A86 EB04                    	jmp	short $P_GetNum_Exit	;AN000;
 31349                                  
 31350                                  $P_GetNum01:				;AN000;
 31351 00004A88 46                      	inc	si			;AN000; si points to next number
 31352                                  	;03/04/2023
 31353                                  	; cf=0
 31354                                  	;clc				;AN000; indicate no error
 31355 00004A89 EB01                    	jmp	short $P_GetNum_Exit	;AN000;
 31356                                  
 31357                                  $P_GetNum02:				;AN000;
 31358 00004A8B F9                      	stc				;AN000; indicate error
 31359                                  $P_GetNum_Exit: 			;AN000;
 31360 00004A8C 89C8                    	mov	ax,cx			;AN000;return value
 31361 00004A8E 5A                      	pop	dx			;AN000;
 31362 00004A8F 59                      	pop	cx			;AN000;
 31363 00004A90 C3                      	retn				;AN000;
 31364                                  
 31365                                  ;***********************************************************************
 31366                                  ; $P_Time_Format
 31367                                  ;
 31368                                  ; Function:  Convert a time string to DOS time format for int 21h
 31369                                  ;	     with format validation.
 31370                                  ;
 31371                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31372                                  ;	     ES:BX -> CONTROL block
 31373                                  ;
 31374                                  ; Output:    None
 31375                                  ;
 31376                                  ; Use:	$P_Fill_Result, $P_Set_CDI, $P_Get_DecNum, $P_Time_2412
 31377                                  ;
 31378                                  ; Vars: $P_RC(W), $P_Flags(R), $P_1st_Val(RW), $P_2nd_Val(RW)
 31379                                  ;	$P_3rd_Val(RW), $P_4th_Val(RW)
 31380                                  ;***********************************************************************
 31381                                  
 31382                                  	; 03/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31383                                  
 31384                                  $P_Time_Format:				;AN000;
 31385 00004A91 50                      	push	ax			;AN000;
 31386 00004A92 51                      	push	cx			;AN000;
 31387 00004A93 52                      	push	dx			;AN000;
 31388 00004A94 56                      	push	si			;AN000;
 31389 00004A95 53                      	push	bx			;AN000;
 31390 00004A96 56                      	push	si			;AN000;
 31391 00004A97 E88DFF                  	call	$P_Set_CDI		;AN000; Set country independent
 31392                                  					; information before process
 31393                                  	;test	byte [cs:si+11h], 1
 31394 00004A9A 2EF6441001              	test	byte [cs:si+$P_CDI.$P_CDI_TimeF],1 
 31395                                  					;AN000; 24 hour system
 31396 00004A9F 5E                      	pop	si			;AN000;
 31397 00004AA0 7503                    	jnz	short $P_TimeF00	;AN000; if no, means 12 hour system
 31398 00004AA2 E8F800                  	call	$P_Time_2412		;AN000; this routine handle "am" "pm"
 31399                                  $P_TimeF00:				;AN000;
 31400                                  	;mov	word [cs:$P_1st_Val],0	;AC034; set initial value
 31401                                  	;mov	word [cs:$P_2nd_Val],0	;AC034; set initial value
 31402                                  	;mov	word [cs:$P_3rd_Val],0	;AC034; set initial value
 31403                                  	;mov	word [cs:$P_4th_Val],0	;AC034; set initial value
 31404                                  	;mov	byte [cs:$P_Got_Time],1	;AN023;AC034;; use time delimiter
 31405                                  	; 03/04/2023
 31406 00004AA5 31DB                    	xor	bx,bx
 31407 00004AA7 2E891E[D086]            	mov	[cs:$P_1st_Val],bx ; 0
 31408 00004AAC 2E891E[D286]            	mov	[cs:$P_2nd_Val],bx ; 0
 31409 00004AB1 2E891E[D486]            	mov	[cs:$P_3rd_Val],bx ; 0
 31410 00004AB6 2E891E[D686]            	mov	[cs:$P_4th_Val],bx ; 0
 31411                                  	;inc	bl
 31412                                  	;mov	[cs:$P_Got_Time],bl ; 1
 31413                                  
 31414                                  	;mov	bl,$P_colon_period
 31415                                  	;mov	bl,1 ; $P_colon_period	;AN032; flag, indicates use of
 31416                                  					; delimiters between hours,
 31417                                  					;  minutes,seconds
 31418                                  	; 03/04/2023 - Retro DOS v4.0 COMMAND.COM
 31419 00004ABB FEC3                    	inc	bl ; bl = 1
 31420 00004ABD 2E881E[AD86]            	mov	[cs:$P_Got_Time],bl ; 1
 31421                                  	;
 31422 00004AC2 E87CFF                  	call	$P_Get_DecNum		;AN000; get 1st number
 31423 00004AC5 725D                    	jc	short $P_TimeF_Err0	;AN000;
 31424 00004AC7 2EA3[D086]              	mov	[cs:$P_1st_Val],ax	;AC034;
 31425 00004ACB 08DB                    	or	bl,bl			;AN000; end of line ?
 31426 00004ACD 745F                    	jz	short $P_TimeF_Rlt	;AN000;
 31427 00004ACF E86FFF                  	call	$P_Get_DecNum		;AN000; get 2nd number
 31428 00004AD2 7250                    	jc	short $P_TimeF_Err0	;AC038; if OK
 31429 00004AD4 2EA3[D286]              	mov	[cs:$P_2nd_Val],ax	;AC034;
 31430 00004AD8 08DB                    	or	bl,bl			;AN000; end of line ?
 31431 00004ADA 7452                    	jz	short $P_TimeF_Rlt	;AN000;
 31432 00004ADC B302                    	mov	bl,2 ; $P_period_only	;AN032; flag, which to decimal separator
 31433 00004ADE E860FF                  	call	$P_Get_DecNum		;AN000; get 3rd number
 31434 00004AE1 7241                    	jc	short $P_TimeF_Err0	;AC039; if problem, bridge to error
 31435 00004AE3 2EA3[D486]              	mov	[cs:$P_3rd_Val],ax	;AC034;
 31436 00004AE7 08DB                    	or	bl,bl			;AN000; end of line ?
 31437 00004AE9 7536                    	jnz	short $P_Time_4		;AN039; NOT END OF LINE,
 31438                                  					;AN039;   GO TO 4TH NUMBER
 31439                                  	;test	byte [cs:$P_Flags1],$P_Time_Again ; 2
 31440 00004AEB 2EF606[1D86]02          	test	byte [cs:$P_Flags1],2 	;AN039; HAS TIME PARSE
 31441                                  					;AN039;    BEEN REPEATED?
 31442 00004AF1 753B                    	jnz	short $P_TimeF_Rlt	;AN039; yes, this is really
 31443                                  					;AN039;   the end of line
 31444                                  					;AN039; no, time has not been repeated
 31445 00004AF3 2E8B36[1486]            	mov	si,[cs:$P_SI_Save]	;AN039; get where parser quit
 31446                                  					;AN039;   in command line
 31447 00004AF8 807CFF2C                	cmp	byte [si-1],$P_Comma ; ','
 31448                                  					;AN039; look at delimiter
 31449                                  					;AN039;   from command line
 31450 00004AFC 7530                    	jne	short $P_TimeF_Rlt	;AN039; was not a comma, this is
 31451                                  					;AN039;  really end of line
 31452                                  					;AN039; is comma before hundredths,
 31453                                  					;AN039;   redo TIME
 31454 00004AFE C644FF2E                	mov	byte [si-1],$P_Period ; '.' 
 31455                                  					;AN039; change that ambiguous
 31456                                  					;AN039;    comma to a decimal point
 31457                                  					;AN039;     parse can understand
 31458 00004B02 2EC706[1D86]0000        	mov	word [cs:$P_Flags],0	;AN039; Clear all internal flags
 31459                                  	;or	byte [cs:$P_Flags1],$P_Time_Again
 31460 00004B09 2E800E[1D86]02          	or	byte [cs:$P_Flags1],2	;AN039; indicate TIME
 31461                                  					;AN039; is being repeated
 31462 00004B0F 2E8B0E[A786]            	mov	cx,[cs:$P_ORIG_ORD]	;AN039; ORIGINAL ORDINAL FROM CX
 31463 00004B14 2E8B26[A986]            	mov	sp,[cs:$P_ORIG_STACK]	;AN039; ORIGINAL VALUE
 31464                                  					;AN039;   OF STACK FROM SP
 31465 00004B19 2E8B36[AB86]            	mov	si,[cs:$P_ORIG_SI]	;AN039; ORIGINAL START
 31466                                  					;AN039;   PARSE POINTER FROM SI
 31467 00004B1E E913F8                  	jmp	$P_Redo_Time		;AN039; go try TIME again
 31468                                  $P_Time_4:				;AN039; READY FOR 4TH (HUNDREDTHS) NUMBER
 31469 00004B21 E81DFF                  	call	$P_Get_DecNum		;AN000; get 4th number
 31470                                  $P_TimeF_Err0:				;AN000; Bridge
 31471 00004B24 725E                    	jc	short $P_TimeF_Error	;AN000;
 31472                                  	;
 31473 00004B26 2EA3[D686]              	mov	[cs:$P_4th_Val],ax	;AC034;
 31474 00004B2A 08DB                    	or	bl,bl			;AN000; After hundredth, no data allowed
 31475 00004B2C 7556                    	jnz	short $P_TimeF_Error	;AN000; if some, then error
 31476                                  $P_TimeF_Rlt:				;AN000;
 31477 00004B2E 2EA1[D086]              	mov	ax,[cs:$P_1st_Val]	;AC034;
 31478 00004B32 08E4                    	or	ah,ah			;AN000; if overflow then error
 31479 00004B34 754E                    	jnz	short $P_TimeF_Err	;AN000;
 31480                                  	;test	byte [cs:$P_Flags1],$P_Time12am ; 1
 31481 00004B36 2EF606[1D86]01          	test	byte [cs:$P_Flags1],1	;AN038;if "am" specified
 31482 00004B3C 7408                    	jz	short $P_Time_notAM	;AN038;skip if no "AM" specified
 31483                                  					;since "AM" was specified,
 31484 00004B3E 3C0C                    	cmp	al,12			;AN038: if hour specified as later than noon
 31485 00004B40 7742                    	ja	short $P_TimeF_Err	;AN038; error if "AM" on more than noon
 31486 00004B42 7502                    	jne	short $P_Time_notAM	;AN038; for noon exactly,
 31487 00004B44 30C0                    	xor	al,al			;AN038; set hour = zero
 31488                                  $P_Time_notAM:				;AN038;
 31489                                  	;test	byte [cs:$P_Flags2],$P_Time12
 31490 00004B46 2EF606[1E86]04          	test	byte [cs:$P_Flags2],4	;AC034; if 12 hour system and pm is specified
 31491 00004B4C 740C                    	jz	short $P_TimeSkip00	;AN000; then
 31492 00004B4E 3C0C                    	cmp	al,12			;AN038; if 12:00 o'clock already
 31493 00004B50 7408                    	je	short $P_TimeSkip00	;AN038; it is PM already
 31494 00004B52 040C                    	add	al,12			;AN000; add 12 hours to make it afternoon
 31495 00004B54 722E                    	jc	short $P_TimeF_Err	;AN000; if overflow then error
 31496 00004B56 3C18                    	cmp	al,24			;AN038; after adding 12, now cannot be >24
 31497 00004B58 772A                    	ja	short $P_TimeF_Err	;AN038; if too big, error
 31498                                  $P_TimeSkip00:				;AN000;
 31499 00004B5A 88C2                    	mov	dl,al			;AN000; set hour
 31500 00004B5C 2EA1[D286]              	mov	ax,[cs:$P_2nd_Val]	;AC034;
 31501 00004B60 08E4                    	or	ah,ah			;AN000; if overflow then error
 31502 00004B62 7520                    	jnz	short $P_TimeF_Err	;AN000;
 31503 00004B64 88C6                    	mov	dh,al			;AN000; set minute
 31504 00004B66 2EA1[D486]              	mov	ax,[cs:$P_3rd_Val]	;AC034;
 31505 00004B6A 08E4                    	or	ah,ah			;AN000; if overflow then error
 31506 00004B6C 7516                    	jnz	short $P_TimeF_Err	;AN000;
 31507 00004B6E 88C1                    	mov	cl,al			;AN000; set second
 31508 00004B70 2EA1[D686]              	mov	ax,[cs:$P_4th_Val]	;AC034;
 31509 00004B74 08E4                    	or	ah,ah			;AN000; if overflow then error
 31510 00004B76 750C                    	jnz	short $P_TimeF_Err	;AN000;
 31511 00004B78 88C5                    	mov	ch,al			;AN000; set hundredth
 31512 00004B7A 5B                      	pop	bx			;AN000; recover CONTROL block
 31513 00004B7B 5E                      	pop	si			;AN000; recover string pointer
 31514                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 31515                                  	;mov	al,$P_Time_F ; 8 	;AN000;   result
 31516                                  	; 03/04/2023
 31517 00004B7C B808FF                  	mov	ax,($P_No_Tag<<8)+$P_Time_F
 31518 00004B7F E8E2F9                  	call	$P_Fill_Result		;AN000;        buffer
 31519 00004B82 EB0F                    	jmp	short $P_Time_Format_Exit
 31520                                  					;AN000; to time
 31521                                  $P_TimeF_Error: 			;AN000;
 31522                                  $P_TimeF_Err:				;AN000;
 31523 00004B84 5B                      	pop	bx			;AN000; recover CONTROL block
 31524 00004B85 5E                      	pop	si			;AN000; recover string pointer
 31525                                  	;mov	ah,$P_No_Tag		;AN000; set
 31526                                  	;mov	al,$P_String		;AN000;     result
 31527                                  	; 03/04/2023
 31528 00004B86 B803FF                  	mov	ax,($P_No_Tag<<8)+$P_String
 31529 00004B89 E8D8F9                  	call	$P_Fill_Result		;AN000; 	  buffer
 31530                                  					;AN000; to string
 31531 00004B8C 2EC706[1286]0900        	mov	word [cs:$P_RC],$P_Syntax ; 9	
 31532                                  					;AC034; return syntax error
 31533                                  $P_Time_Format_Exit:			;AN000;
 31534 00004B93 2EC606[AD86]00          	mov	byte [cs:$P_Got_Time],0	;AN023;AC034; finished with this time field
 31535 00004B99 5A                      	pop	dx			;AN000;
 31536 00004B9A 59                      	pop	cx			;AN000;
 31537 00004B9B 58                      	pop	ax			;AN000;
 31538 00004B9C C3                      	retn
 31539                                  
 31540                                  ;***********************************************************************
 31541                                  ; $P_Time_2412:
 31542                                  ;
 31543                                  ; Function:  Remove "a", "p", "am", or "pm" from the end of stinrg
 31544                                  ;
 31545                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31546                                  ;
 31547                                  ; Output:    Set $P_Time12 flag when the string is terminated by "p"
 31548                                  ;	     or "pm"
 31549                                  ;
 31550                                  ; Vars:  $P_Flags(W)
 31551                                  ;***********************************************************************
 31552                                  
 31553                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31554                                  
 31555                                  $P_Time_2412:				;AN000;
 31556 00004B9D 50                      	push	ax			;AN000;
 31557 00004B9E 56                      	push	si			;AN000;
 31558                                  $P_T12_Loop:				;AN000;
 31559 00004B9F 2E8A04                  	mov	al,[cs:si]		;AN000; Move
 31560 00004BA2 46                      	inc	si			;AN000;     si
 31561 00004BA3 08C0                    	or	al,al			;AN000;       to
 31562 00004BA5 75F8                    	jnz	short $P_T12_Loop	;AN000; 	end of string
 31563                                  
 31564 00004BA7 2E8A44FE                	mov	al,[cs:si-2]		;AN000; get char just before NULL
 31565                                  	;or	al,20h
 31566 00004BAB 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 31567 00004BAD 3C70                    	cmp	al,"p"                  ;AN000; only "p" of "pm" ?
 31568 00004BAF 7425                    	je	short $P_T1200		;AN000;
 31569                                  
 31570 00004BB1 3C61                    	cmp	al,"a"                  ;AN000; only "a" of "am" ?
 31571 00004BB3 7413                    	je	short $P_T1201		;AN000;
 31572                                  
 31573 00004BB5 3C6D                    	cmp	al,"m"                  ;AN000; "m" of "am" or "pm"
 31574 00004BB7 751A                    	jne	short $P_T12_Exit	;AN000;
 31575                                  
 31576 00004BB9 4E                      	dec	si			;AN000;
 31577 00004BBA 2E8A44FE                	mov	al,[cs:si-2]		;AN000;
 31578                                  	;or	al,20h
 31579 00004BBE 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case map
 31580 00004BC0 3C70                    	cmp	al,"p"                  ;AN000; "p" of "pm" ?
 31581 00004BC2 7412                    	je	short $P_T1200		;AN000;
 31582                                  
 31583 00004BC4 3C61                    	cmp	al,"a"                  ;AN000; "a" of "am" ?
 31584                                  	;je	short $P_T1201		;AN000; go process "a"
 31585                                  	;jmp	short $P_T12_Exit	;AN000; no special chars found
 31586                                  	; 05/04/2023
 31587 00004BC6 750B                    	jne	short $P_T12_Exit
 31588                                  
 31589                                  ;$P_T1200:				;AN000; "P" found
 31590                                  	;;or	byte [cs:$P_Flags2],$P_Time12
 31591                                  	;or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 31592                                  	;jmp	short $P_Tclr_chr	;AN038; go clear the special char
 31593                                  
 31594                                  $P_T1201:				;AN000; "A" found
 31595                                  	;or	byte [cs:$P_Flags1],$P_Time12AM
 31596 00004BC8 2E800E[1D86]01          	or	byte [cs:$P_Flags1],1	;AN038; flag "AM" found
 31597                                  $P_Tclr_chr:				;AN038;
 31598 00004BCE 2EC644FE00              	mov	byte [cs:si-2],$P_NULL	;AN000; null out special char
 31599                                  $P_T12_Exit:				;AN000;
 31600 00004BD3 5E                      	pop	si			;AN000;
 31601 00004BD4 58                      	pop	ax			;AN000;
 31602 00004BD5 C3                      	retn				;AN000;
 31603                                  
 31604                                  	; 05/04/2023
 31605                                  $P_T1200:				;AN000; "P" found
 31606                                  	;or	byte [cs:$P_Flags2],$P_Time12
 31607 00004BD6 2E800E[1E86]04          	or	byte [cs:$P_Flags2],4	;AC034; flag "PM" found
 31608 00004BDC EBF0                    	jmp	short $P_Tclr_chr	;AN038; go clear the special char
 31609                                  
 31610                                  ;***********************************************************************
 31611                                  ; $P_File_Format;
 31612                                  ;
 31613                                  ; Function:  Check if the input string is valid file spec format.
 31614                                  ;	     And set the result buffer.
 31615                                  ;
 31616                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31617                                  ;	     ES:BX -> CONTROL block
 31618                                  ;
 31619                                  ; Output:    None
 31620                                  ;
 31621                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS, $P_FileSp_Chk
 31622                                  ;
 31623                                  ; Vars: $P_RC(W), $P_SI_Save(W), $P_Terminator(W), $P_SaveSI_Cmpx(R)
 31624                                  ;	$P_SaveSI_Cmpx(R)
 31625                                  ;***********************************************************************
 31626                                  
 31627                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31628                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4DF0h
 31629                                  $P_File_Format:
 31630 00004BDE 50                      	push	ax			;AN000;
 31631 00004BDF 57                      	push	di			;AN000;
 31632 00004BE0 56                      	push	si			;AN000;
 31633 00004BE1 2E8B3E[1F86]            	mov	di,[cs:$P_SaveSI_Cmpx]	;AC034; get user buffer address
 31634 00004BE6 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 31635 00004BE9 08C0                    	or	al,al			;AN000; end of line ?
 31636 00004BEB 7413                    	je	short $P_FileF_Err	;AN000; if yes, error exit
 31637 00004BED E85D00                  	call	$P_FileSp_Chk		;AN000; else, check if file special character
 31638 00004BF0 7523                    	jne	short $P_FileF03	;AN000; if yes,
 31639 00004BF2 2EC606[EB86]01          	mov	byte [cs:$P_err_flag],$P_error_filespec ; 1
 31640                                  					;AN033;AC034;; set error flag- bad char.
 31641 00004BF8 5E                      	pop	si			;AN033;
 31642 00004BF9 2EC60400                	mov	byte [cs:si],$P_NULL	;AN033;
 31643 00004BFD 5F                      	pop	di			;AN033;
 31644 00004BFE EB3E                    	jmp	short $P_FileF02	;AN033;
 31645                                  $P_FileF_Err:				;AN000;
 31646 00004C00 5E                      	pop	si			;AN000;
 31647 00004C01 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000;
 31648 00004C05 5F                      	pop	di			;AN000;
 31649                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Optional
 31650                                  	;test	word [es:bx],1		;AN000; is it optional ?
 31651 00004C06 26F60701                	test	byte [es:bx],$P_Optional ; 1
 31652 00004C0A 7532                    	jnz	short $P_FileF02	;AN000;
 31653 00004C0C 2EC706[1286]0200        	mov	word [cs:$P_RC],$P_Op_Missing
 31654                                  	;mov	word [cs:$P_RC],2	;AC034; 3/17/87
 31655 00004C13 EB29                    	jmp	short $P_FileF02	;AN000;
 31656                                  $P_FileF03:				;AN000;
 31657 00004C15 58                      	pop	ax			;AN000; discard save si
 31658 00004C16 56                      	push	si			;AN000; save new si
 31659                                  $P_FileF_Loop1: 			;AN000;
 31660 00004C17 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 31661 00004C1A 08C0                    	or	al,al			;AN000; end of line ?
 31662 00004C1C 741E                    	jz	short $P_FileF_RLT	;AN000;
 31663 00004C1E E82C00                  	call	$P_FileSp_Chk		;AN000; File special character ?
 31664 00004C21 740B                    	jz	short $P_FileF00	;AN000;
 31665 00004C23 E85E01                  	call	$P_Chk_DBCS		;AN000; no, then DBCS ?
 31666 00004C26 7302                    	jnc	short $P_FileF01	;AN000;
 31667 00004C28 47                      	inc	di			;AN000; if yes, skip next byte
 31668 00004C29 46                      	inc	si			;AN000;
 31669                                  $P_FileF01:				;AN000;
 31670 00004C2A 47                      	inc	di			;AN000;
 31671 00004C2B 46                      	inc	si			;AN000;
 31672 00004C2C EBE9                    	jmp	short $P_FileF_Loop1	;AN000;
 31673                                  $P_FileF00:				;AN000;
 31674 00004C2E 2EA2[1886]              	mov	[cs:$P_Terminator],al	;AC034;
 31675 00004C32 2EC60400                	mov	byte [cs:si],$P_NULL	;AN000; update end of string
 31676 00004C36 47                      	inc	di			;AN000;
 31677 00004C37 2E893E[1486]            	mov	[cs:$P_SI_Save],di	;AC034; update next pointer in command line
 31678                                  $P_FileF_RLT:				;AN000;
 31679 00004C3C 5E                      	pop	si			;AN000;
 31680 00004C3D 5F                      	pop	di			;AN000;
 31681                                  $P_FileF02:				;AN000;
 31682 00004C3E 58                      	pop	ax			;AN000; (tm14)
 31683                                  	;;test	ax,200h
 31684                                  	;test	ax,$P_File_Spc		;AN000; (tm14)
 31685                                  	; 05/04/2023
 31686 00004C3F F6C402                  	test	ah,($P_File_Spc>>8)
 31687 00004C42 7408                    	jz	short $P_Drv_Only_Exit	;AN000; (tm14)
 31688 00004C44 50                      	push	ax			;AN000; (tm14)
 31689                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000; set
 31690                                  	;mov	al,$P_File_Spec ; 5 	;AN000;    result
 31691                                  	; 05/04/2023
 31692 00004C45 B805FF                  	mov	ax,($P_No_Tag<<8)+$P_File_Spec
 31693 00004C48 E819F9                  	call	$P_Fill_Result		;AN000; 	buffer to file spec
 31694 00004C4B 58                      	pop	ax			;AN000;
 31695                                  $P_Drv_Only_Exit:			;AN000; (tm14)
 31696 00004C4C C3                      	retn				;AN000;
 31697                                  
 31698                                  ;***********************************************************************
 31699                                  ; $P_FileSp_Chk
 31700                                  ;
 31701                                  ; Function:  Check if the input byte is one of file special characters
 31702                                  ;
 31703                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31704                                  ;	     AL = character code to be examineed
 31705                                  ;
 31706                                  ; Output:    ZF = 1 , AL is one of special characters
 31707                                  ;***********************************************************************
 31708                                  
 31709                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31710                                  $P_FileSp_Chk:
 31711 00004C4D 53                      	push	bx			;AN000;
 31712 00004C4E 51                      	push	cx			;AN000;
 31713                                  	;lea	bx,[cs:$P_FileSp_Char]	;AC034; special character table
 31714 00004C4F 8D1E[E286]              	lea	bx,$P_FileSp_Char
 31715 00004C53 B90900                  	mov	cx,$P_FileSp_Len ; 9
 31716                                  	;mov	cx,9			;AN000; load length of it
 31717                                  $P_FileSp_Loop: 			;AN000;
 31718 00004C56 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 31719 00004C59 7404                    	je	short $P_FileSp_Exit	;AN000;
 31720 00004C5B 43                      	inc	bx			;AN000;
 31721 00004C5C E2F8                    	loop	$P_FileSp_Loop		;AN000;
 31722 00004C5E 41                      	inc	cx			;AN000; reset ZF
 31723                                  $P_FileSp_Exit: 			;AN000;
 31724 00004C5F 59                      	pop	cx			;AN000;
 31725 00004C60 5B                      	pop	bx			;AN000;
 31726 00004C61 C3                      	retn				;AN000;
 31727                                  
 31728                                  ;***********************************************************************
 31729                                  ; $P_Drive_Format;
 31730                                  ;
 31731                                  ; Function:  Check if the input string is valid drive only format.
 31732                                  ;	     And set the result buffer.
 31733                                  ;
 31734                                  ; Input:     psdata_seg:SI -> $P_STRING_BUF
 31735                                  ;	     ES:BX -> CONTROL block
 31736                                  ;
 31737                                  ; Output:    None
 31738                                  ;
 31739                                  ; Use:	$P_Fill_Result, $P_Chk_DBCS
 31740                                  ;
 31741                                  ; Vars: $P_RC(W)
 31742                                  ;***********************************************************************
 31743                                  
 31744                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31745                                  $P_Drive_Format:
 31746 00004C62 50                      	push	ax			;AN000;
 31747 00004C63 52                      	push	dx			;AN000;
 31748 00004C64 2E8A04                  	mov	al,[cs:si]		;AN000;
 31749 00004C67 08C0                    	or	al,al			;AN000; if null string
 31750 00004C69 7436                    	jz	short $P_Drv_Exit	;AN000; do nothing
 31751 00004C6B E81601                  	call	$P_Chk_DBCS		;AN000; is it leading byte ?
 31752 00004C6E 722A                    	jc	short $P_Drv_Err	;AN000;
 31753                                  	;cmp	word [cs:si+1],3Ah ; $P_Colon  ; ':'
 31754 00004C70 2E837C013A              	cmp	word [cs:si+1],$P_Colon ;AN000; "d", ":", 0  ?
 31755 00004C75 740D                    	je	short $P_DrvF00		;AN000;
 31756                                  	;test	word [es:bx+$P_CONTROL_BLK.$P_Match_Flag],$P_Ig_Colon
 31757                                  	;test	word [es:bx],10h	;AN000; colon can be ignored?
 31758 00004C77 26F60710                	test	byte [es:bx],$P_Ig_Colon ; 10h
 31759 00004C7B 741D                    	jz	short $P_Drv_Err	;AN000;
 31760 00004C7D 2E807C0100              	cmp	byte [cs:si+1],$P_NULL	;AN000; "d", 0  ?
 31761 00004C82 7516                    	jne	short $P_Drv_Err	;AN000;
 31762                                  $P_DrvF00:				;AN000;
 31763 00004C84 0C20                    	or	al,$P_Make_Lower ; 20h	;AN000; lower case
 31764 00004C86 3C61                    	cmp	al,"a" ; 61h            ;AN000; drive letter must
 31765 00004C88 7210                    	jb	short $P_Drv_Err	;AN000; in range of
 31766 00004C8A 3C7A                    	cmp	al,"z" ; 7Ah            ;AN000; "a" - "z"
 31767 00004C8C 770C                    	ja	short $P_Drv_Err	;AN000; if no, error
 31768 00004C8E 2C60                    	sub	al,"a"-1  ; 60h         ;AN000; make text drive to binary drive
 31769 00004C90 88C2                    	mov	dl,al			;AN000; set
 31770                                  	;mov	ah,$P_No_Tag ; 0FFh	;AN000;    result
 31771                                  	;mov	al,$P_Drive ; 6		;AN000; 	 buffer
 31772                                  	; 05/04/2023
 31773 00004C92 B806FF                  	mov	ax,($P_No_Tag<<8)+$P_Drive ; 06FFh
 31774 00004C95 E8CCF8                  	call	$P_Fill_Result		;AN000; 	       to drive
 31775 00004C98 EB07                    	jmp	short $P_Drv_Exit	;AN000;
 31776                                  $P_Drv_Err:				;AN000;
 31777 00004C9A 2EC706[1286]0900        	mov	word [cs:$P_RC],$P_Syntax
 31778                                  	;mov	word [cs:$P_RC],9	;AC034;
 31779                                  $P_Drv_Exit:				;AN000;
 31780 00004CA1 5A                      	pop	dx			;AN000;
 31781 00004CA2 58                      	pop	ax			;AN000;
 31782 00004CA3 C3                      	retn				;AN000;
 31783                                  
 31784                                  ;***********************************************************************
 31785                                  ; $P_Skip_Delim;
 31786                                  ;
 31787                                  ; Function: Skip delimiters specified in the PARMS list, white space
 31788                                  ;	    and comma.
 31789                                  ;
 31790                                  ; Input:    DS:SI -> Command String
 31791                                  ;	    ES:DI -> Parameter List
 31792                                  ;
 31793                                  ; Output:   CY = 1 if the end of line encounterd
 31794                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 31795                                  ;	    AL = Last examineed character
 31796                                  ;
 31797                                  ; Use:	    $P_Chk_EOL, $P_Chk_Delim,
 31798                                  ;
 31799                                  ; Vars:     $P_Flags(R)
 31800                                  ;***********************************************************************
 31801                                  
 31802                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31803                                  
 31804                                  $P_Skip_Delim:				;AN000;
 31805                                  $P_Skip_Delim_Loop:			;AN000;
 31806 00004CA4 AC                      	lodsb				;AN000;
 31807 00004CA5 E81E00                  	call	$P_Chk_EOL		;AN000; is it EOL character ?
 31808 00004CA8 7416                    	je	short $P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 31809                                  
 31810 00004CAA E84B00                  	call	$P_Chk_Delim		;AN000; is it one of delimiters ?
 31811 00004CAD 7514                    	jne	short $P_Skip_Delim_NCY	;AN000; if no, exit w/ CY off
 31812                                  
 31813 00004CAF 2EF606[1E86]20          	test	byte [cs:$P_Flags2],$P_Extra
 31814                                  	;test	byte [cs:$P_Flags2],20h ;AC034; extra delim or comma found ?
 31815 00004CB5 74ED                    	jz	short $P_Skip_Delim_Loop
 31816                                  					;AN000; if no, loop
 31817 00004CB7 2EF606[1E86]41          	test	byte [cs:$P_Flags2],$P_SW+$P_equ
 31818                                  	;;test	byte [cs:$P_Flags2],41h	;AC034; /x , or xxx=zzz , (tm08)
 31819                                  	;jz	short $P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 31820                                  	;dec	si ; *			;AN000; backup si for next call (tm08)
 31821                                  	;;jmp	short $P_Exit_At_Extra	;AN000; else exit w/ CY off
 31822                                  	; 05/04/2023
 31823 00004CBD 7505                    	jnz	short $P_Skip_Delim_Exit ; cf = 0
 31824                                  $P_Exit_At_Extra:			;AN000;
 31825                                  	; cf = 0
 31826                                  	;clc				;AN000; indicate extra delim
 31827 00004CBF C3                      	retn				;AN000;
 31828                                  
 31829                                  $P_Skip_Delim_CY:			;AN000;
 31830 00004CC0 F9                      	stc				;AN000; indicate EOL
 31831 00004CC1 EB01                    	jmp	short $P_Skip_Delim_Exit
 31832                                  					;AN000;
 31833                                  $P_Skip_Delim_NCY:			;AN000;
 31834 00004CC3 F8                      	clc				;AN000; indicate non delim
 31835                                  $P_Skip_Delim_Exit:			;AN000; in this case, need
 31836 00004CC4 4E                      	dec	si ; *			;AN000;  backup index pointer
 31837 00004CC5 C3                      	retn				;AN000;
 31838                                  	; 05/04/2023
 31839                                  ;$P_Exit_At_Extra:			;AN000;
 31840                                  	;clc				;AN000; indicate extra delim
 31841                                  	;retn				;AN000;
 31842                                  
 31843                                  ;***********************************************************************
 31844                                  ; $P_Chk_EOL;
 31845                                  ;
 31846                                  ; Function: Check if AL is one of End of Line characters.
 31847                                  ;
 31848                                  ; Input:    AL = character code
 31849                                  ;	    ES:DI -> Parameter List
 31850                                  ;
 31851                                  ; Output:   ZF = 1 if one of End of Line characters
 31852                                  ;***********************************************************************
 31853                                  
 31854                                  	; 05/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31855                                  
 31856                                  $P_Chk_EOL:
 31857 00004CC6 53                      	push	bx			;AN000;
 31858 00004CC7 51                      	push	cx			;AN000;
 31859 00004CC8 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; Carriage return ?
 31860 00004CCA 7429                    	je	short $P_Chk_EOL_Exit 	;AN000;
 31861 00004CCC 3C00                    	cmp	al,$P_NULL ; 0		;AN000; zero ?
 31862 00004CCE 7425                    	je	short $P_Chk_EOL_Exit 	;AN000;
 31863 00004CD0 26807D0202              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_EOL
 31864                                  	;cmp	byte [es:di+2],2	;AN000; EOL character specified ?
 31865 00004CD5 721E                    	jb	short $P_Chk_EOL_Exit 	;AN000;
 31866 00004CD7 31DB                    	xor	bx,bx			;AN000;
 31867 00004CD9 268A5D03                	mov	bl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 31868                                  	;mov	bl,[es:di+3]		;AN000; get length of delimiter list
 31869 00004CDD 83C304                  	add	bx,$P_Len_PARMS; 4 	;AN000; skip it
 31870 00004CE0 26803900                	cmp	byte [es:bx+di],$P_I_Use_Default
 31871                                  	;cmp	byte [es:bx+di],0	;AN000; No extra EOL character ?
 31872 00004CE4 740D                    	je	short $P_Chk_EOL_NZ	;AN000;
 31873 00004CE6 31C9                    	xor	cx,cx			;AN000; Get number of extra chcracter
 31874 00004CE8 268A09                  	mov	cl,[es:bx+di]		;AN000;
 31875                                  $P_Chk_EOL_Loop:			;AN000;
 31876 00004CEB 43                      	inc	bx			;AN000;
 31877 00004CEC 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 31878 00004CEF 7404                    	je	short $P_Chk_EOL_Exit 	;AN000;
 31879 00004CF1 E2F8                    	loop	$P_Chk_EOL_Loop 	;AN000;
 31880                                  $P_Chk_EOL_NZ:				;AN000;
 31881 00004CF3 3C0D                    	cmp	al,$P_CR ; 0Dh		;AN000; reset ZF
 31882                                  $P_Chk_EOL_Exit:			;AN000;
 31883 00004CF5 59                      	pop	cx			;AN000;
 31884 00004CF6 5B                      	pop	bx			;AN000;
 31885 00004CF7 C3                      	retn				;AN000;
 31886                                  
 31887                                  ;***********************************************************************
 31888                                  ; $P_Chk_Delim;
 31889                                  ;
 31890                                  ; Function: Check if AL is one of delimiter characters.
 31891                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 31892                                  ;	    blanks.
 31893                                  ;
 31894                                  ; Input:    AL = character code
 31895                                  ;	    DS:SI -> Next Character
 31896                                  ;	    ES:DI -> Parameter List
 31897                                  ;
 31898                                  ; Output:   ZF = 1 if one of delimiter characters
 31899                                  ;	    SI points to the next character
 31900                                  ; Vars:  $P_Terminator(W), $P_Flags(W)
 31901                                  ;***********************************************************************
 31902                                  
 31903                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31904                                  
 31905                                  $P_Chk_Delim:
 31906 00004CF8 53                      	push	bx			;AN000;
 31907 00004CF9 51                      	push	cx			;AN000;
 31908 00004CFA 2EC606[1886]20          	mov	byte [cs:$P_Terminator],$P_Space ; 20h
 31909                                  					;AC034; Assume terminated by space
 31910 00004D00 2E8026[1E86]DF          	and	byte [cs:$P_Flags2],0FFh-$P_Extra ; 0DFh
 31911                                  					;AC034;
 31912 00004D06 3C20                    	cmp	al,$P_Space ; 20h ; ' '	;AN000; Space ?
 31913 00004D08 7436                    	je	short $P_Chk_Delim_Exit	;AN000;
 31914                                  
 31915 00004D0A 3C09                    	cmp	al,$P_TAB ; 09h		;AN000; TAB ?
 31916 00004D0C 7432                    	je	short $P_Chk_Delim_Exit	;AN000;
 31917                                  
 31918 00004D0E 3C2C                    	cmp	al,$P_Comma  ; ',' 	;AN000; Comma ?
 31919 00004D10 7431                    	je	short $P_Chk_Delim_Exit0
 31920                                  					;AN000;
 31921                                  $P_Chk_Delim00: 			;AN000;
 31922 00004D12 3C20                    	cmp	al,20h ; $P_DBSP1	;AN000; 1st byte of DBCS Space ?
 31923 00004D14 750C                    	jne	short $P_Chk_Delim01	;AN000;
 31924 00004D16 803C20                  	cmp	byte [si],20h ; $P_DBSP2
 31925                                  					;AN000; 2nd byte of DBCS Space ?
 31926 00004D19 7507                    	jne	short $P_Chk_Delim01	;AN000;
 31927 00004D1B B020                    	mov	al,$P_Space ; 20h	;AN000;
 31928 00004D1D 46                      	inc	si			;AN000; make si point to next character
 31929 00004D1E 38C0                    	cmp	al,al			;AN000; Set ZF
 31930 00004D20 EB1E                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 31931                                  
 31932                                  $P_Chk_Delim01: 			;AN000;
 31933                                  	;cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],$P_I_Have_Delim
 31934 00004D22 26807D0201              	cmp	byte [es:di+$P_PARMS_BLK.$P_Num_Extra],1
 31935                                  	;cmp	byte [es:di+2],1	;AN000; delimiter character specified ?
 31936 00004D27 7217                    	jb	short $P_Chk_Delim_Exit	;AN000;
 31937                                  
 31938 00004D29 31C9                    	xor	cx,cx			;AN000;
 31939 00004D2B 268A4D03                	mov	cl,[es:di+$P_PARMS_BLK.$P_Len_Extra_Delim]
 31940                                  	;mov	cl,[esi:di+3]		;AN000; get length of delimiter list
 31941 00004D2F 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 31942 00004D31 740B                    	jz	short $P_Chk_Delim_NZ	;AN000;
 31943                                  
 31944 00004D33 BB0300                  	mov	bx,$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 31945                                  $P_Chk_Delim_Loop:			;AN000;
 31946 00004D36 43                      	inc	bx			;AN000;
 31947 00004D37 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 31948 00004D3A 7407                    	je	short $P_Chk_Delim_Exit0
 31949                                  					;AN000;
 31950 00004D3C E2F8                    	loop	$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 31951                                  
 31952                                  $P_Chk_Delim_NZ:			;AN000;
 31953 00004D3E 3C20                    	cmp	al,$P_Space ; 20h	;AN000; reset ZF
 31954                                  $P_Chk_Delim_Exit:			;AN000;
 31955 00004D40 59                      	pop	cx			;AN000;
 31956 00004D41 5B                      	pop	bx			;AN000;
 31957 00004D42 C3                      	retn				;AN000;
 31958                                  
 31959                                  $P_Chk_Delim_Exit0:			;AN000;
 31960 00004D43 2EA2[1886]              	mov	[cs:$P_Terminator],al	;AC034; keep terminated delimiter
 31961 00004D47 2EF606[1E86]01          	test	byte [cs:$P_Flags2],$P_equ
 31962                                  	;test	byte [cs:$P_Flags2],1	;AN027;AC034;; if terminating a key=
 31963 00004D4D 7506                    	jnz	short $P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 31964                                  
 31965 00004D4F 2E800E[1E86]20          	or	byte [cs:$P_Flags2],$P_Extra ; 20h
 31966                                  	;or	byte [cs:$P_Flags2],20h	;AC034; flag terminated extra delimiter or comma
 31967                                  $P_No_Set_Extra:			;AN027;
 31968 00004D55 38C0                    	cmp	al,al			;AN000; set ZF
 31969 00004D57 EBE7                    	jmp	short $P_Chk_Delim_Exit ;AN000;
 31970                                  
 31971                                  ;***********************************************************************
 31972                                  ; $P_Chk_Switch;
 31973                                  ;
 31974                                  ; Function: Check if AL is the switch character not in first position of
 31975                                  ;	    $P_STRING_BUF
 31976                                  ;
 31977                                  ; Input:    AL = character code
 31978                                  ;	    BX = current pointer within $P_String_Buf
 31979                                  ;	    SI =>next char on command line (following the one in AL)
 31980                                  ;
 31981                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 31982                                  ;		 position, and has no chance of being part of a date string,
 31983                                  ;		 i.e. should be treated as a delimiter.
 31984                                  ;
 31985                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 31986                                  ;		 position, or is a slash but may be part of a date string, i.e.
 31987                                  ;		 should not be treated as a delimiter.
 31988                                  ;
 31989                                  ; Vars:  $P_Terminator(W)
 31990                                  ;
 31991                                  ; Use:	 $P_0099
 31992                                  ;***********************************************************************
 31993                                  
 31994                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 31995                                  
 31996                                  $P_Chk_Switch:
 31997                                  	; 18/04/2023
 31998 00004D59 8D2E[2786]              	lea	bp,$P_STRING_BUF	;AN020;AC034; BP=OFFSET of $P_String_Buf even in group addressing
 31999                                  
 32000 00004D5D 39EB                    	cmp	bx,bp			;AN000;
 32001 00004D5F 7418                    	je	short $P_STRUC_L2	;AN000;
 32002                                  
 32003 00004D61 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 32004 00004D63 7512                    	jne	short $P_STRUC_L5	;AN000;
 32005                                  
 32006 00004D65 F9                      	stc				;AN020;not in first position and is slash, now see if might be in date string
 32007 00004D66 50                      	push	ax			;AN020;save input char
 32008 00004D67 2E8A47FF                	mov	al,[cs:bx-1]		;AN026;AL=char before the current char
 32009 00004D6B E804FB                  	call	$P_0099 		;AN020;return carry set if not numeric
 32010 00004D6E 7205                    	jc	short $P_STRUC_L7	;AN000;
 32011                                  
 32012 00004D70 8A04                    	mov	al,[si]			;AN020;AL=char after the current char
 32013 00004D72 E8FDFA                  	call	$P_0099			;AN020;return carry set if not numeric
 32014                                  $P_STRUC_L7:				;AN000;
 32015 00004D75 58                      	pop	ax			;AN020;restore AL to input char
 32016                                  	;jmp	short $P_STRUC_L1	;AN000;
 32017                                  	; 18/04/2023
 32018 00004D76 C3                      	retn
 32019                                  
 32020                                  $P_STRUC_L5:				;AN000;
 32021 00004D77 F8                      	clc				;AN020;not a slash
 32022                                  	;jmp	short $P_STRUC_L1	;AN000;
 32023                                  	 ;18/04/2023
 32024 00004D78 C3                      	retn
 32025                                  
 32026                                  $P_STRUC_L2:				;AN000;
 32027 00004D79 3C2F                    	cmp     al,$P_Switch ; '/'	;AN000;
 32028                                  	;jne	short $P_STRUC_L12	;AN000;
 32029                                  	; 18/04/2023
 32030 00004D7B 75FA                    	jne	short $P_STRUC_L5
 32031                                  
 32032 00004D7D 2E800E[1E86]40          	or	byte [cs:$P_Flags2],$P_SW
 32033                                  	;or	byte [cs:$P_Flags2],40h	;AN020;AC034;;could be valid switch, first char and is slash
 32034                                  	; 18/04/2023
 32035                                  ;$P_STRUC_L12:				;AN000;
 32036                                  	;clc				;AN020;CF=0 indicating first char
 32037                                  $P_STRUC_L1:				;AN000;
 32038 00004D83 C3                      	retn				;AN000;
 32039                                  
 32040                                  ;**************************************************************************
 32041                                  ; $P_Chk_DBCS:
 32042                                  ;
 32043                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 32044                                  ;
 32045                                  ;  Input:
 32046                                  ;	  AL	= Code to be examineed
 32047                                  ;
 32048                                  ;  Output:
 32049                                  ;	  If CF is on then a lead byte of DBCS
 32050                                  ;
 32051                                  ; Use: INT 21h w/AH=63
 32052                                  ;
 32053                                  ; Vars:  $P_DBCSEV_Seg(RW), $P_DBCSEV_Off(RW)
 32054                                  ;***************************************************************************
 32055                                  
 32056                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32057                                  
 32058                                  $P_Chk_DBCS:
 32059 00004D84 1E                      	push	ds			;AN000;
 32060 00004D85 56                      	push	si			;AN000;
 32061 00004D86 53                      	push	bx			;AN000; (tm11)
 32062 00004D87 2E833E[1B86]00          	cmp	word [cs:$P_DBCSEV_SEG],0
 32063                                  					;AC034; ALREADY SET ?
 32064 00004D8D 7527                    	jne	short $P_DBCS00		;AN000;
 32065 00004D8F 50                      	push	ax			;AN000;
 32066 00004D90 1E                      	push	ds			;AN000; (tm11)
 32067 00004D91 51                      	push	cx			;AN000;
 32068 00004D92 52                      	push	dx			;AN000;
 32069 00004D93 57                      	push	di			;AN000;
 32070 00004D94 55                      	push	bp			;AN000;
 32071 00004D95 06                      	push	es			;AN000;
 32072 00004D96 31F6                    	xor	si,si			;AN000;
 32073 00004D98 8EDE                    	mov	ds,si			;AN000;
 32074                                  	;mov	ax,$P_DOS_GetEV 	;AN000; GET DBCS EV CALL
 32075 00004D9A B80063                  	mov	ax,6300h
 32076 00004D9D CD21                    	int	21h			;AN000;
 32077 00004D9F 8CDB                    	mov	bx,ds			;AN000; (tm11)
 32078 00004DA1 09DB                    	or	bx,bx			;AN000; (tm11)
 32079 00004DA3 07                      	pop	es			;AN000;
 32080 00004DA4 5D                      	pop	bp			;AN000;
 32081 00004DA5 5F                      	pop	di			;AN000;
 32082 00004DA6 5A                      	pop	dx			;AN000;
 32083 00004DA7 59                      	pop	cx			;AN000;
 32084 00004DA8 1F                      	pop	ds			;AN000; (tm11)
 32085 00004DA9 58                      	pop	ax			;AN000;
 32086 00004DAA 7429                    	jz	short $P_NON_DBCS	;AN000;
 32087                                  $P_DBCS02:				;AN000;
 32088 00004DAC 2E8936[1986]            	mov	[cs:$P_DBCSEV_OFF],si	;AC034; save EV offset
 32089 00004DB1 2E891E[1B86]            	mov	[cs:$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 32090                                  $P_DBCS00:				;AN000;
 32091 00004DB6 2E8B36[1986]            	mov	si,[cs:$P_DBCSEV_OFF]	;AC034; load EV offset
 32092 00004DBB 2E8E1E[1B86]            	mov	ds,[cs:$P_DBCSEV_SEG]	;AC034; and segment
 32093                                  $P_DBCS_LOOP:				;AN000;
 32094 00004DC0 833C00                  	cmp	word [si],0 		;AN000; zero vector ?
 32095 00004DC3 7410                    	je	short $P_NON_DBCS	;AN000; then exit
 32096 00004DC5 3A04                    	cmp	al,[si] 		;AN000;
 32097 00004DC7 7208                    	jb	short $P_DBCS01		;AN000; Check if AL is in
 32098 00004DC9 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 32099 00004DCC 7703                    	ja	short $P_DBCS01		;AN000;      the vector
 32100 00004DCE F9                      	stc				;AN000; if yes, indicate DBCS and exit
 32101 00004DCF EB04                    	jmp	short $P_DBCS_EXIT	;AN000;
 32102                                  $P_DBCS01:				;AN000;
 32103 00004DD1 46                      	inc	si			;AC035; add '2' to
 32104 00004DD2 46                      	inc	si			;AC035;  SI reg
 32105                                  					;AN000; get next vector
 32106 00004DD3 EBEB                    	jmp	short $P_DBCS_LOOP	;AN000; loop until zero vector found
 32107                                  
 32108                                  $P_NON_DBCS:				;AN000;
 32109                                  	; 18/04/2023
 32110                                  	; cf=0
 32111                                  	;clc				;AN000; indicate SBCS
 32112                                  $P_DBCS_EXIT:				;AN000;
 32113 00004DD5 5B                      	pop	bx			;AN000; (tm11)
 32114 00004DD6 5E                      	pop	si			;AN000;
 32115 00004DD7 1F                      	pop	ds			;AN000;
 32116 00004DD8 C3                      	retn				;AN000;
 32117                                  
 32118                                  ;============================================================================
 32119                                  ; TPARSE.ASM, MSDOS 6.0, 1991
 32120                                  ;============================================================================
 32121                                  ; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32122                                  
 32123                                  ; ****************************************************************
 32124                                  ; *
 32125                                  ; * ROUTINE:	 CMD_PARSE
 32126                                  ; *
 32127                                  ; * FUNCTION:	 Interface for transient COMMAND to invoke
 32128                                  ; *		 SYSPARSE.
 32129                                  ; *
 32130                                  ; * INPUT:	 inputs to SYSPARSE
 32131                                  ; *
 32132                                  ; * OUTPUT:	 outputs from SYSPARSE
 32133                                  ; *
 32134                                  ; ****************************************************************
 32135                                  
 32136                                  	; 06/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32137                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:4FF7h
 32138                                  ;cmd_parse:
 32139                                  	;call	sysparse		;AN000;
 32140                                  	;retn				;AN000;
 32141                                  	; 06/04/2023
 32142                                  	;jmp	sysparse
 32143                                  
 32144                                  append_parse:
 32145 00004DD9 E842F5                  	call	sysparse		;AN010;
 32146 00004DDC CB                      	retf				;AN010;
 32147                                  
 32148                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32149                                  %if 0
 32150                                  
 32151                                  ;============================================================================
 32152                                  ; NPRINTF.ASM, PRINTF.ASM, MSDOS 3.3, 1987
 32153                                  ;============================================================================
 32154                                  ; 30/09/2018 - Retro DOS v3.0
 32155                                  
 32156                                  ; BREAK	<Message Printing Routine>
 32157                                  
 32158                                  ;
 32159                                  ;	MSDOS V3.00 PRINT
 32160                                  ;
 32161                                  ;	Message Printing Routine
 32162                                  ;
 32163                                  
 32164                                  ;PRINTF.ASM (MSDOS 3.3, LIBC)
 32165                                  ;
 32166                                  ;TITLE   PRINTF ROUTINE FOR MS-DOS
 32167                                  ;
 32168                                  ; PRINTF(Control String, arg1, arg2,...,argn-1,argn)
 32169                                  ;
 32170                                  ; Characters are output to PFHandle according to the
 32171                                  ; specifications contained in the Control String.
 32172                                  ;
 32173                                  ; The conversion characters are as follow:
 32174                                  ;
 32175                                  ;               %c - output the next argument as a character
 32176                                  ;               %s - output the next argument as a string
 32177                                  ;               %x - output the next argument as a hexidecimal number
 32178                                  ;                    using abcedf
 32179                                  ;               %X - output the next argument as a hexidecimal number
 32180                                  ;                    using ABCDEF
 32181                                  ;               %d - output the next argument as a decimal number
 32182                                  ;
 32183                                  ;
 32184                                  ; Other format specifiers that may precede the conversion character are:
 32185                                  ;
 32186                                  ;               - (minus sign) - causes the field to be left-adjusted
 32187                                  ;               + (plus sign)  - causes the field to be right-adjusted (default)
 32188                                  ;               n - digit specifing the minimum field width (default to 1)
 32189                                  ;               L - specifing a long integer
 32190                                  ;
 32191                                  ;   On entry to PRINTF the stack contains the return address and a pointer
 32192                                  ;   to an argument list.
 32193                                  ;
 32194                                  ;   ____________________
 32195                                  ;   |   Ret Addr       |      <= SP
 32196                                  ;   --------------------
 32197                                  ;   |  Ptr to Arg List |
 32198                                  ;   --------------------
 32199                                  ;
 32200                                  ;   And the argument list contains the following:
 32201                                  ;
 32202                                  ;       String_ptr                  (a pointer to the control string)
 32203                                  ;       Arg 1
 32204                                  ;       Arg 2
 32205                                  ;         .
 32206                                  ;         .
 32207                                  ;         .
 32208                                  ;       Arg n-1
 32209                                  ;       Arg n
 32210                                  ;
 32211                                  ;   If the argument is a %s or %c the arg contains a pointer to the string
 32212                                  ;   or character.
 32213                                  ;
 32214                                  ;   The arguments are used in one-to-one correspondence to % specifiers.
 32215                                  
 32216                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 34E0h
 32217                                  
 32218                                  ; =============== S U B	R O U T	I N E =======================================
 32219                                  
 32220                                  PRINTF_INIT:
 32221                                  	call	STD_PRINTF
 32222                                  	retf
 32223                                  
 32224                                  ; =============== S U B	R O U T	I N E =======================================
 32225                                  
 32226                                  PRINTF_CRLF:
 32227                                  	call	STD_PRINTF
 32228                                  	;call	CRLF2
 32229                                  	;retn
 32230                                  	; 07/04/2023
 32231                                  	jmp	CRLF2
 32232                                  
 32233                                  ; =============== S U B	R O U T	I N E =======================================
 32234                                  
 32235                                  STD_EPRINTF:
 32236                                  	mov	word [cs:PRINTF_HANDLE],2
 32237                                  	jmp	short new_printf
 32238                                  
 32239                                  ; =============== S U B	R O U T	I N E =======================================
 32240                                  
 32241                                  STD_PRINTF:
 32242                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 34F4h
 32243                                  
 32244                                  	mov	word [cs:PRINTF_HANDLE],1
 32245                                  NEW_PRINTF:				;Save the callers' registers
 32246                                  	cld
 32247                                  	push	dx
 32248                                  	push	bp
 32249                                  	mov	bp,sp
 32250                                  	push	cx
 32251                                  	push	bx
 32252                                  	push	ax
 32253                                  	push	di
 32254                                  	push	si
 32255                                  	push	es
 32256                                  	push	ds
 32257                                  	push	cs
 32258                                  	pop	es		;ES points to Printf segment
 32259                                  	mov	di,PRINTF_BUF	;DI points to the output buffer
 32260                                  	mov	bp,[bp+2]  ; dx ;BP points to the argument list
 32261                                  	;mov	si,[ds:bp+0]	;SI points to the control string
 32262                                  	mov	si,[ds:bp] ; bp
 32263                                  	add	bp,2
 32264                                  	xor	bx,bx
 32265                                  	call	CLEAR_FLAGS	; initialize the world
 32266                                  
 32267                                  GET_CHAR:
 32268                                  	lodsb			;Get a character
 32269                                  	cmp	al,'%'		;Is it a conversion specifier?
 32270                                  	jz	short CONV_CHAR	;Yes - find out which one
 32271                                  	or	al,al		;Is it the end of the control string?
 32272                                  	jz	short PRINTF_DONE ;Yes - then we're done
 32273                                  PRINTF_PERCENT:				
 32274                                  	call	OUTCHR		;Otherwise store the character
 32275                                  	jmp	short GET_CHAR	;And go get another
 32276                                  
 32277                                  PRINTF_DONE:
 32278                                  	call	FLUSH
 32279                                  	pop	ds
 32280                                  	pop	es
 32281                                  	pop	si
 32282                                  	pop	di
 32283                                  	pop	ax
 32284                                  	pop	bx
 32285                                  	pop	cx
 32286                                  	pop	bp
 32287                                  	pop	dx
 32288                                  	retn
 32289                                  
 32290                                  CONV_CHAR:
 32291                                  	mov	byte [cs:PRINTF_LEFT],0
 32292                                  
 32293                                  NXT_CONV_CHAR:	
 32294                                  	;Look for any format specifiers preceeding the conversion character
 32295                                  	lodsb
 32296                                  	cmp	al,'%'			;Just print the %
 32297                                  	jz	short PRINTF_PERCENT
 32298                                  	cmp	al,[cs:CHAR_SUB] ; "-"	;Right justify the field	
 32299                                  	jz	short LEFT_ADJ
 32300                                  	cmp	al,[cs:PLUS_CHR] ; "+"	;Left justify the field
 32301                                  	jz	short CONV_CHAR
 32302                                  	cmp	al,[cs:CHAR_L]	 ; "L"	;Is it a long integer
 32303                                  	jz	short LONG_INT
 32304                                  	cmp	al,[cs:char_l]	 ; "l"		
 32305                                  	jz	short LONG_INT
 32306                                  	cmp	al,'0'			;Is it a precision specification
 32307                                  	jb	short LOOK_CONV_CHAR
 32308                                  	cmp	al,'9'
 32309                                  	ja	short LOOK_CONV_CHAR
 32310                                  	cmp	al,'0'
 32311                                  	jnz	short NOT_PAD
 32312                                  	cmp	word [cs:PRINTF_WIDTH],0
 32313                                  	jnz	short NOT_PAD
 32314                                  	mov	ah,'0'
 32315                                  	mov	[cs:PAD_CHAR],ah
 32316                                  NOT_PAD:					;Adjust decimal place on precision
 32317                                  	push	ax
 32318                                  	mov	ax,[cs:PRINTF_WIDTH]
 32319                                  	mov	cx,10
 32320                                  	mul	cx
 32321                                  	pop	dx
 32322                                  	xor	dh,dh
 32323                                  	sub	dl,'0'
 32324                                  	add	ax,dx
 32325                                  	mov	[cs:PRINTF_WIDTH],ax	;And save the total
 32326                                  	jmp	short NXT_CONV_CHAR
 32327                                  
 32328                                  LEFT_ADJ:
 32329                                  	mov	byte [cs:PRINTF_LEFT],1
 32330                                  	jmp	short NXT_CONV_CHAR
 32331                                  
 32332                                  LONG_INT:
 32333                                  	or	byte [cs:PRINTF_LONG],1
 32334                                  	jmp	short NXT_CONV_CHAR
 32335                                  
 32336                                  LOOK_CONV_CHAR:
 32337                                  	and	al,0DFh
 32338                                  	cmp	al,[cs:CHAR_X]	 ; "X"
 32339                                  	jz	short HEX_UP
 32340                                  	cmp	al,[cs:CHAR_D]	 ; "D"
 32341                                  	jz	short DECIMAL
 32342                                  	cmp	al,[cs:CHAR_C]	 ; "C"
 32343                                  	jz	short C_PUT_CHAR
 32344                                  	cmp	al,[cs:CHAR_S]	 ; "S"
 32345                                  	jz	short S_PUT_STRG
 32346                                  	call	CLEAR_FLAGS
 32347                                  	jmp	GET_CHAR
 32348                                  
 32349                                  HEX_UP:
 32350                                  	mov	word [cs:PRINTF_BASE],16 ;Hex conversion
 32351                                  	jmp	short CONV_TO_NUM
 32352                                  DECIMAL:
 32353                                  	mov	word [cs:PRINTF_BASE],10 ;Decimal conversion
 32354                                  	jmp	short CONV_TO_NUM
 32355                                  
 32356                                  C_PUT_CHAR:
 32357                                  	call	NEXT_CHRS
 32358                                  	mov	al,dl
 32359                                  	call	OUTCHR
 32360                                  	call	CLEAR_FLAGS
 32361                                  	jmp	GET_CHAR
 32362                                  
 32363                                  S_PUT_STRG:
 32364                                  	push	si			;Save pointer to control string
 32365                                  	call	NEXT_CHRS
 32366                                  	mov	si,dx
 32367                                  S_PUT_1:
 32368                                  	mov	cx,[cs:PRINTF_WIDTH]
 32369                                  	or	cx,cx
 32370                                  	jz	short S_PUT_2
 32371                                  	cmp	byte [cs:PRINTF_LEFT],0
 32372                                  	jnz	short S_PUT_2
 32373                                  	call	PAD_STRING
 32374                                  S_PUT_2:
 32375                                  	push	si
 32376                                  S_PUT_3:
 32377                                  	lodsb
 32378                                  	or	al,al
 32379                                  	jz	short S_PUT_4
 32380                                  	call	OUTCHR			;Put it into our buffer
 32381                                  	jmp	short S_PUT_3
 32382                                  S_PUT_4:
 32383                                  	pop	si
 32384                                  	cmp	byte [cs:PRINTF_LEFT],0
 32385                                  	jz	short C_S_END
 32386                                  	mov	cx,[cs:PRINTF_WIDTH]
 32387                                  	or	cx,cx
 32388                                  	jz	short C_S_END
 32389                                  	call	PAD_STRING
 32390                                  C_S_END:
 32391                                  	pop	si			;Restore control string pointer
 32392                                  	call	CLEAR_FLAGS
 32393                                  	jmp	GET_CHAR		;Go get another character	
 32394                                  
 32395                                  
 32396                                  ; =============== S U B	R O U T	I N E =======================================
 32397                                  
 32398                                  PAD_STRING:
 32399                                  	xor	dx,dx
 32400                                  	push	si
 32401                                  
 32402                                  COUNT_LOOP:
 32403                                  	lodsb
 32404                                  	or	al,al
 32405                                  	jz	short COUNT_DONE
 32406                                  	inc	dx
 32407                                  	jmp	short COUNT_LOOP
 32408                                  
 32409                                  COUNT_DONE:
 32410                                  	pop	si
 32411                                  	sub	cx,dx
 32412                                  	jbe	short COUNT_RET
 32413                                  	call	PAD
 32414                                  
 32415                                  COUNT_RET:
 32416                                  	retn
 32417                                  
 32418                                  ; ---------------------------------------------------------------------------
 32419                                  
 32420                                  CONV_TO_NUM:
 32421                                  	call	NEXT_CHRS
 32422                                  	mov	ax,dx
 32423                                  	xor	dx,dx
 32424                                  	cmp	byte [cs:PRINTF_LONG],0 
 32425                                  			;Is this is a short or long integer?
 32426                                  	jz	short NOT_LONG_INT
 32427                                  	call	NEXT_CHRS
 32428                                  
 32429                                  NOT_LONG_INT:
 32430                                  	push	bx
 32431                                  	push	si
 32432                                  	mov	si,[cs:PRINTF_BASE]
 32433                                  	mov	cx,[cs:PRINTF_WIDTH]
 32434                                  	call	PNUM
 32435                                  	pop	si
 32436                                  	pop	bx
 32437                                  	call	PAD
 32438                                  	call	CLEAR_FLAGS
 32439                                  	jmp	GET_CHAR
 32440                                  
 32441                                  
 32442                                  ; =============== S U B	R O U T	I N E =======================================
 32443                                  
 32444                                  PNUM:
 32445                                  	dec	cx
 32446                                  	push	ax
 32447                                  	mov	ax,dx
 32448                                  	xor	dx,dx
 32449                                  	div	si
 32450                                  	mov	bx,ax
 32451                                  	pop	ax
 32452                                  	div	si
 32453                                  	xchg	bx,dx
 32454                                  	push	ax
 32455                                  	or	ax,dx
 32456                                  	pop	ax
 32457                                  	jz	short DO_PAD
 32458                                  	push	bx
 32459                                  	call	PNUM
 32460                                  	pop	bx
 32461                                  	jmp	short REM
 32462                                  
 32463                                  DO_PAD:
 32464                                  	cmp	byte [cs:PRINTF_LEFT],0
 32465                                  	jnz	short REM
 32466                                  	call	PAD
 32467                                  REM:
 32468                                  	cmp	bl,10
 32469                                  	jb	short NOT_HEX
 32470                                  	add	bx,6
 32471                                  NOT_HEX:
 32472                                  	mov	al,byte [cs:PRINTF_TABLE+bx] ; "0123456789ABCDEF"
 32473                                  	push	cx
 32474                                  	call	OUTCHR
 32475                                  	pop	cx
 32476                                  	retn
 32477                                  
 32478                                  ; =============== S U B	R O U T	I N E =======================================
 32479                                  
 32480                                  PAD:
 32481                                  	or	cx,cx
 32482                                  	jle	short PAD_DONE
 32483                                  	mov	al,[cs:PAD_CHAR]
 32484                                  PAD_LOOP:
 32485                                  	push	cx
 32486                                  	call	OUTCHR
 32487                                  	pop	cx
 32488                                  	loop	PAD_LOOP
 32489                                  PAD_DONE:
 32490                                  	retn
 32491                                  
 32492                                  ; =============== S U B	R O U T	I N E =======================================
 32493                                  
 32494                                  OUTCHR:
 32495                                  	stosb
 32496                                  	cmp	di,PRINTF_BUF_END ; SRCXNAME
 32497                                  	je	short FLUSH
 32498                                  OUTCHR_RETN:
 32499                                  	retn
 32500                                  
 32501                                  ; =============== S U B	R O U T	I N E =======================================
 32502                                  
 32503                                  FLUSH:
 32504                                  	mov	cx,PRINTF_BUF
 32505                                  	xchg	cx,di
 32506                                  	sub	cx,di
 32507                                  	jz	short OUTCHR_RETN
 32508                                  WRITE_CHARS:
 32509                                  	push	bx
 32510                                  	mov	bx,[cs:PRINTF_HANDLE]
 32511                                  	push	ds
 32512                                  	push	cs
 32513                                  	pop	ds
 32514                                  	mov	dx,PRINTF_BUF
 32515                                  	mov	ah,Write ; 40h
 32516                                  	int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
 32517                                  				; BX = file handle, CX = number	of bytes to write,
 32518                                  				; DS:DX -> buffer
 32519                                  	jnb	short FOOB2_1
 32520                                  	call	GET_EXT_ERR_NUMBER
 32521                                  	cmp	ax,6
 32522                                  	jz	short FOOB2_4
 32523                                  	jmp	short FOOB2_2
 32524                                  
 32525                                  FOOB2_1:
 32526                                  	cmp	cx,ax
 32527                                  	jz	short FOOB2_4
 32528                                  FOOB2_2:
 32529                                  	mov	bx,dx
 32530                                  	add	bx,ax
 32531                                  	cmp	byte [bx],1Ah
 32532                                  	jz	short FOOB2_4
 32533                                  	pop	ds
 32534                                  	pop	bx
 32535                                  	mov	es,[cs:RESSEG]
 32536                                  	mov	dx,NOSPACEPTR
 32537                                  	test	byte [es:PIPEFLAG],0FFh
 32538                                  	jz	short PRINT_ERR_EXIT
 32539                                  	call	PIPEOFF
 32540                                  	mov	dx,PIPEEMESPTR
 32541                                  PRINT_ERR_EXIT:	
 32542                                  	jmp	CERROR
 32543                                  
 32544                                  FOOB2_4:
 32545                                  	pop	ds
 32546                                  	pop	bx
 32547                                  	retn
 32548                                  
 32549                                  ; =============== S U B	R O U T	I N E =======================================
 32550                                  
 32551                                  NEXT_CHRS:
 32552                                  	push	si		;Save pointer to control string
 32553                                  	mov	si,bx		;Get index into argument list
 32554                                  	add	bx,2		;Increment the index
 32555                                  	mov	si,[ds:bp+si]	; Get pointer to next argument
 32556                                  	mov	dx,[si]		; Get (address of the) next argument			
 32557                                  	pop	si
 32558                                  	retn
 32559                                  
 32560                                  ; =============== S U B	R O U T	I N E =======================================
 32561                                  
 32562                                  CLEAR_FLAGS:
 32563                                  	xor	ax,ax
 32564                                  	mov	[cs:PRINTF_LEFT],al	;Reset justifing flag
 32565                                  	mov	[cs:PRINTF_LONG],al	;Reset long flag
 32566                                  	mov	[cs:PRINTF_WIDTH],ax	;Reinitialize width to 0
 32567                                  	mov	al,' '			
 32568                                  	mov	[cs:PAD_CHAR],al 	;Reset padding character
 32569                                  	retn
 32570                                  
 32571                                  ; ---------------------------------------------------------------------------
 32572                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3729h
 32573                                  
 32574                                  	; times 7 db 0
 32575                                  
 32576                                  %endif
 32577                                  
 32578                                  ;============================================================================
 32579                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 32580                                  ;============================================================================
 32581                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32582                                  
 32583                                  ; ----------------------------
 32584                                  ; MSDOS 6.0, MSGSERV.ASM, 1991
 32585                                  ; ----------------------------
 32586                                  
 32587                                  ;; Replacable parameters are described by a sublist structure
 32588                                  
 32589                                  struc $M_SUBLIST_STRUC		;;AN000;;
 32590 00000000 ??                       .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 32591 00000001 ??                       .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 32592 00000002 ????????                 .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 32593 00000006 ??                       .$M_S_ID:	resb 1		;;AN000;; n of %n
 32594 00000007 ??                       .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 32595 00000008 ??                       .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 32596 00000009 ??                       .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 32597 0000000A ??                       .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 32598                                  endstruc
 32599                                  
 32600                                  ; ---------------------------------------------------------------------------
 32601                                  ; ---------------------------------------------------------------------------
 32602                                  
 32603                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32604                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 4FFFh
 32605                                  
 32606                                  Printf_Init:
 32607 00004DDD E80F00                  	call	std_printf
 32608 00004DE0 CB                      	retf
 32609                                  
 32610                                  Printf_Crlf:
 32611 00004DE1 E80B00                  	call	std_printf
 32612                                  	;call	CRLF2
 32613                                  	;retn
 32614                                  	; 07/04/2023
 32615 00004DE4 E9ECD7                  	jmp	CRLF2
 32616                                  
 32617                                  
 32618                                  ;****************************************************************
 32619                                  ;*
 32620                                  ;* ROUTINE:	STD_PRINTF/STD_EPRINTF
 32621                                  ;*
 32622                                  ;* FUNCTION:	Set up to print out a message using SYSDISPMSG.
 32623                                  ;*		Set up substitutions if utility message.  Make
 32624                                  ;*		sure any changes to message variables in TDATA
 32625                                  ;*		are reset to avoid reloading the transient.
 32626                                  ;*
 32627                                  ;* INPUT:	Msg_Disp_Class	-  set to message class
 32628                                  ;*		Msg_Cont_Flag	-  set to control flags
 32629                                  ;*		DS	points to transient segment
 32630                                  ;*
 32631                                  ;*		if utility message:
 32632                                  ;*		DX	points to a block with message number
 32633                                  ;*			(word), number of substitutions (byte),
 32634                                  ;*			followed by substitution list if there
 32635                                  ;*			are substitutions.  If substitutions
 32636                                  ;*			are not in transient segment they must
 32637                                  ;*			be set.
 32638                                  ;*		else
 32639                                  ;*		AX	set to message number
 32640                                  ;*
 32641                                  ;* OUTPUT:	none
 32642                                  ;*
 32643                                  ;****************************************************************
 32644                                  
 32645                                  std_eprintf:
 32646 00004DE7 C706[F187]0200          	mov	word [PRINTF_HANDLE],2 		;AC000;Print to STDERR
 32647 00004DED EB06                    	jmp	short new_printf		;AC000;
 32648                                  
 32649                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32650                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 5012h
 32651                                  	; 15/06/2023
 32652                                  std_printf:
 32653 00004DEF C706[F187]0100          	mov	word [PRINTF_HANDLE],1 		;AC000;Print to STDOUT
 32654                                  
 32655                                  new_printf:
 32656 00004DF5 50                      	push	ax				;AN000;save registers
 32657 00004DF6 53                      	push	bx				;AN000;
 32658 00004DF7 51                      	push	cx				;AN000;
 32659 00004DF8 06                      	push	es				;AN000;get local ES
 32660 00004DF9 1E                      	push	ds				;AN000;
 32661 00004DFA 07                      	pop	es				;AN000;
 32662 00004DFB 57                      	push	di				;AN000;
 32663 00004DFC 56                      	push	si				;AN000;
 32664 00004DFD 52                      	push	dx				;AN000;
 32665                                  
 32666                                  	; 07/04/2023
 32667                                  	;mov	word [print_err_flag],0		;AN000;
 32668 00004DFE 31C9                    	xor	cx,cx
 32669 00004E00 890E[3B8E]              	mov	[print_err_flag],cx ; 0
 32670                                  
 32671 00004E04 89D6                    	mov	si,dx				;AN000;Get offset of message number
 32672 00004E06 AD                      	lodsw					;AN000;load message number
 32673                                  	; 15/06/2023
 32674                                  	;push	ax				;AN000;save it
 32675                                  	;lodsb					;AN000;get number of substitutions
 32676                                  	;mov	cl,al				;AN000;set up CX as # of subst
 32677                                  	;; 07/04/2023
 32678                                  	;;xor	ch,ch				;AN000;SI now points to subst list
 32679                                  	;pop	ax				;AN000;get message number back
 32680                                  	; 15/06/2023
 32681 00004E07 8A0C                    	mov	cl,[si]
 32682 00004E09 46                      	inc	si
 32683                                  	
 32684                                  	;cmp	cx,0				;AN000;Any substitutions?
 32685                                  	; 07/04/2023
 32686 00004E0A 21C9                    	and	cx,cx
 32687 00004E0C 745C                    	jz	short ready_to_print		;AN000;No - continue
 32688                                  
 32689 00004E0E BF[3D8E]                	mov	di,subst_buffer			;AN061; Get address of message subst buffer
 32690 00004E11 57                      	push	di				;AN061; save it
 32691 00004E12 51                      	push	cx				;AN061; save number of subst
 32692                                  
 32693                                  move_subst:
 32694 00004E13 51                      	push	cx				;AN061;save number of subst
 32695 00004E14 89F3                    	mov	bx,si				;AN061;save start of sublist
 32696                                  	;mov	cx,parm_block_size ; 11		;AN061;get size of sublist
 32697                                  	; 07/04/2023
 32698 00004E16 B10B                    	mov	cl,parm_block_size ; 11
 32699 00004E18 F3A4                    	rep	movsb				;AN061;move sublist
 32700                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 32701 00004E1A F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 32702                                  	;test	byte [bx+7],4			;AN061;are we doing date/time?
 32703 00004E1E 7406                    	jz	short move_subst_cont 		;AN061;no - no need to reset
 32704                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],0
 32705                                  	;mov	word [bx+2],0			;AN061;reset original date or time to 0
 32706 00004E20 894F02                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],cx ; 0
 32707                                  	;mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 32708                                  	;mov	word [bx+4],0			;AN061;
 32709 00004E23 894F04                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cx ; 0
 32710                                  
 32711                                  move_subst_cont:				;AN061;
 32712 00004E26 59                      	pop	cx				;AN061;get number of subst back
 32713 00004E27 E2EA                    	loop	move_subst			;AN061;move cx sublists
 32714                                  
 32715 00004E29 59                      	pop	cx				;AN061;get number of subst
 32716 00004E2A 50                      	push	ax				;AN061;save message number
 32717 00004E2B 803E[197F]FF            	cmp	byte [msg_disp_class],util_msg_class
 32718                                  	;cmp	byte [msg_disp_class],0FFh	;AN061;Is this a utility message
 32719 00004E30 740C                    	je	short check_fix			;AN061;YES - go see if substitutions
 32720                                  	;mov	byte [msg_flag],1 ; ext_msg_class
 32721 00004E32 C606[378E]01            	mov	byte [msg_flag],ext_msg_class	;AN061;set message flag
 32722 00004E37 BF[1B7F]                	mov	di,extend_buf_ptr		;AN061; Get address of extended message block
 32723 00004E3A 31C0                    	xor	ax,ax				;AN061;clear ax register
 32724 00004E3C AB                      	stosw					;AN061;clear out message number
 32725 00004E3D AA                      	stosb					;AN061;clear out subst count
 32726                                  
 32727                                  check_fix:					;AN061;
 32728 00004E3E 58                      	pop	ax				;AN061;get message number back
 32729 00004E3F 5F                      	pop	di				;AN061;get start of sublists
 32730 00004E40 89FE                    	mov	si,di				;AN061;get into SI for msgserv
 32731 00004E42 89F3                    	mov	bx,si				;AN061;get into BX for addressing
 32732 00004E44 51                      	push	cx				;AN061;save number of subst
 32733                                  
 32734                                  set_subst:					;AN061;store the segment of the subst
 32735 00004E45 837F0400                	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],0
 32736                                  	;cmp	word [bx+4],0			;AN061;was it set already?
 32737 00004E49 7509                    	jnz	short subst_seg_set		;AN061;if not 0, don't replace it
 32738 00004E4B F6470704                	test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],4
 32739                                  	;test	byte [bx+$M_SUBLIST_STRUC.$M_S_FLAG],date_type
 32740                                  	;test	byte [bx+7],4			;AN061;don't replace if date or time
 32741 00004E4F 7503                    	jnz	short subst_seg_set		;AN061;yes - skip it
 32742 00004E51 8C4F04                  	mov	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE+2],cs
 32743                                  	;mov	word [bx+4],cs			;AN061;set segment value
 32744                                  
 32745                                  subst_seg_set:					;AN061;
 32746 00004E54 83C30B                  	add	bx,parm_block_size ; add bx,11	;AN061;go to next sublist
 32747 00004E57 E2EC                    	loop	set_subst			;AN061;loop CX times
 32748 00004E59 59                      	pop	cx				;AN061;get number of subst back
 32749                                  
 32750 00004E5A 89F3                    	mov	bx,si				;AN061;get start of sublist to BX
 32751 00004E5C 817F02[B58C]            	cmp	word [bx+$M_SUBLIST_STRUC.$M_S_VALUE],string_ptr_2
 32752                                  	;cmp	word [bx+2],string_ptr_2	;AN061;are we using double indirection?
 32753 00004E61 7507                    	jne	short ready_to_print		;AN061;no - we already have address
 32754                                  	; 01/05/2023
 32755 00004E63 8B16[B58C]              	mov	dx,[string_ptr_2] 		;AN061;get address in string_ptr_2
 32756 00004E67 895702                  	mov	[bx+$M_SUBLIST_STRUC.$M_S_VALUE],dx
 32757                                  						;AN061;put it into the subst block
 32758                                  	;mov	[bx+2],dx
 32759                                  
 32760                                  ready_to_print:
 32761 00004E6A 8B1E[F187]              	mov	bx,[PRINTF_HANDLE]		;AN000;get print handle
 32762 00004E6E 8A16[1A7F]              	mov	dl,[msg_cont_flag]		;AN000;set up control flag
 32763 00004E72 8A36[197F]              	mov	dh,[msg_disp_class]		;AN000;set up display class
 32764 00004E76 C606[1A7F]00            	mov	byte [msg_cont_flag],0 ; no_cont_flag
 32765                                  						;AN061;reset flags to avoid
 32766 00004E7B C606[197F]FF            	mov	byte [msg_disp_class],util_msg_class
 32767                                  	;mov	byte [msg_disp_class],0FFh	;AN061; transient reload
 32768                                  
 32769 00004E80 1E                      	push	ds				;AN026;
 32770 00004E81 06                      	push	es				;AN026;
 32771                                  
 32772 00004E82 E83702                  	call	SYSDISPMSG			;AN000;call Rod
 32773                                  
 32774 00004E85 07                      	pop	es				;AN026; restore registers
 32775 00004E86 1F                      	pop	ds				;AN026;
 32776                                  
 32777 00004E87 7303                    	jnc	short print_success		;AN000; everything went okay
 32778 00004E89 A3[3B8E]                	mov	[print_err_flag],ax		;AN000;
 32779                                  
 32780                                  print_success:
 32781 00004E8C 5A                      	pop	dx				;AN061;restore dx
 32782 00004E8D 5E                      	pop	si				;AN000;restore registers
 32783 00004E8E 5F                      	pop	di				;AN000;
 32784 00004E8F 07                      	pop	es				;AN000;restore registers
 32785 00004E90 59                      	pop	cx				;AN000;
 32786 00004E91 5B                      	pop	bx				;AN000;
 32787 00004E92 58                      	pop	ax				;AN000;
 32788 00004E93 833E[3B8E]00            	cmp	word [print_err_flag],0		;AN000; if an error occurred - handle it
 32789 00004E98 7501                    	jnz	short print_err			;AN000;
 32790                                  
 32791 00004E9A C3                      	retn					;AC000;
 32792                                  
 32793                                  print_err:
 32794 00004E9B 0E                      	push	cs
 32795 00004E9C 07                      	pop	es
 32796 00004E9D 833E[F187]02            	cmp	word [PRINTF_HANDLE],2 		;AN026;Print to STDERR?
 32797 00004EA2 7503                    	jne	short not_stderr		;AN026;no - continue
 32798 00004EA4 E95DB2                  	jmp	TCOMMAND			;AN026;Yes - hopless - just exit
 32799                                  
 32800                                  not_stderr:
 32801 00004EA7 A1[3B8E]                	mov	ax,[print_err_flag]		;AN026;get extended error number back
 32802 00004EAA 8E06[C58A]              	mov	es,[RESSEG]			; No, set up for error, load the
 32803                                  						;  right error msg, and jmp to cerror.
 32804 00004EAE 26F606[0002]FF          	test	byte [es:PipeFlag],-1 ; 0FFh
 32805 00004EB4 7408                    	jz	short _go_to_error
 32806 00004EB6 E8B3E0                  	call	PipeOff
 32807 00004EB9 BA[7C80]                	mov	dx,PIPEEMES_PTR
 32808 00004EBC EB0B                    	jmp	short print_err_exit			;AC000;
 32809                                  
 32810                                  _go_to_error:
 32811 00004EBE C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class
 32812                                  	;mov	byte [msg_disp_class],1		;AN000; set up extended error msg class
 32813 00004EC3 BA[1B7F]                	mov	dx,extend_buf_ptr		;AC000; get extended message pointer
 32814 00004EC6 A3[1B7F]                	mov	[extend_buf_ptr],ax		;AN000; get message number in control block
 32815                                  
 32816                                  print_err_exit: 				;AC000;
 32817 00004EC9 0E                      	push	cs
 32818 00004ECA 07                      	pop	es
 32819 00004ECB E986DA                  	jmp	cerror
 32820                                  
 32821                                  ;****************************************************************
 32822                                  ;*
 32823                                  ;* ROUTINE:	TSYSLOADMSG
 32824                                  ;*
 32825                                  ;* FUNCTION:	Interface to call SYSLOADMSG to avoid duplicate
 32826                                  ;*		names since these routines are also used in the
 32827                                  ;*		resident.
 32828                                  ;*
 32829                                  ;* INPUT:	Inputs to SYSLOADMSG
 32830                                  ;*
 32831                                  ;* OUTPUT:	Outputs from SYSLOADMSG
 32832                                  ;*
 32833                                  ;****************************************************************
 32834                                  
 32835                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32836                                  TSYSLOADMSG:
 32837 00004ECE 53                      	push	bx				;AN000;
 32838 00004ECF E80800                  	call	SYSLOADMSG			;AN000; call routine
 32839 00004ED2 5B                      	pop	bx				;AN000;
 32840 00004ED3 C3                      	retn					;AN000; exit
 32841                                  
 32842                                  ;****************************************************************
 32843                                  ;*
 32844                                  ;* ROUTINE:	TSYSGETMSG
 32845                                  ;*
 32846                                  ;* FUNCTION:	Interface to call SYSGETMSG to avoid duplicate
 32847                                  ;*		names since these routines are also used in the
 32848                                  ;*		resident.
 32849                                  ;*
 32850                                  ;* INPUT:	Inputs to SYSGETMSG
 32851                                  ;*
 32852                                  ;* OUTPUT:	Outputs from SYSGETMSG
 32853                                  ;*
 32854                                  ;****************************************************************
 32855                                  
 32856                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32857                                  TSYSGETMSG:
 32858 00004ED4 51                      	push	cx				;AN000;
 32859 00004ED5 E8B500                  	call	SYSGETMSG			;AN000; call routine
 32860 00004ED8 59                      	pop	cx				;AN000;
 32861 00004ED9 C3                      	retn					;AN000; exit
 32862                                  
 32863                                  ;============================================================================
 32864                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 32865                                  ;============================================================================
 32866                                  ; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32867                                  
 32868                                  ; ---------------------------------------------------------------------------
 32869                                  ; MODULE NAME: MSGSERV.SAL
 32870                                  ;
 32871                                  ; DESCRIPTIVE NAME: Message Services SALUT file
 32872                                  ;
 32873                                  ; FUNCTION: This module incorporates all the messages services and
 32874                                  ;	    is called upon at build time to INCLUDE the code requested
 32875                                  ;	    by a utility. Code is requested using the macro MSG_SERVICES.
 32876                                  ;
 32877                                  ; ENTRY POINT: Since this a collection of subroutines, entry point is at
 32878                                  ;	    requested procedure.
 32879                                  ;
 32880                                  ; INPUT: Since this a collection of subroutines, input is dependent on
 32881                                  ;	    function requested.
 32882                                  ;
 32883                                  ; EXIT-NORMAL: In all cases, CARRY FLAG = 0
 32884                                  ;
 32885                                  ; EXIT-ERROR: In all cases, CARRY FLAG = 1
 32886                                  ;
 32887                                  ; INTERNAL REFERENCES: (list of included subroutines)
 32888                                  ;
 32889                                  ;	- SYSLOADMSG
 32890                                  ;	- SYSDISPMSG
 32891                                  ;	- SYSGETMSG
 32892                                  ;
 32893                                  ; EXTERNAL REFERENCES: None
 32894                                  ;
 32895                                  ; NOTES: At build time, some modules must be included. These are only included
 32896                                  ;	 once using assembler switches. Other logic is included at the request
 32897                                  ;	 of the utility.
 32898                                  ;
 32899                                  ;	 COMR and COMT are assembler switches to conditionally assemble code
 32900                                  ;	 for RESIDENT COMMAND.COM and TRANSIENT COMMAND.COM to reduce resident
 32901                                  ;	 storage and multiple EQUates.
 32902                                  ;
 32903                                  ; REVISION HISTORY: Created MAY 1987
 32904                                  ;
 32905                                  ;     Label: DOS - - Message Retriever
 32906                                  ;	     (c) Copyright 1988 Microsoft
 32907                                  ; ---------------------------------------------------------------------------
 32908                                  
 32909                                  ;	Revision History
 32910                                  ;	================
 32911                                  ;
 32912                                  ;	M007	SR	08/24/90	Fixed bug #1818 -- changed
 32913                                  ;				$M_DISPLAY_H_STRING to properly
 32914                                  ;				handle Ctrl-Z being passed
 32915                                  ;
 32916                                  ;	M013	SR	9/12/90	Make SETSTDIO flag false so that all
 32917                                  ;				these routines are no longer assembled.
 32918                                  ;
 32919                                  ;	M016	SR	10/14/90	Bug #3380. Changed SYSLOADMSG so that
 32920                                  ;				CR-LF string also gets reinitialized
 32921                                  ;				on every cycle.
 32922                                  ;
 32923                                  ;	M020	SR	10/26/90	Bug #3380 again. Initialize $M_DIVISOR
 32924                                  ;				& $_MSG_NUM also in SYSLOADMSG.
 32925                                  
 32926                                  ; ---------------------------------------------------------------------------
 32927                                  
 32928                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 32929                                  
 32930                                  ;;; Replacable parameters are described by a sublist structure
 32931                                  ;
 32932                                  ;struc $M_SUBLIST_STRUC		;;AN000;;
 32933                                  ; .$M_S_SIZE:	resb 1		;;AN000;; SUBLIST size (PTR to next SUBLIST)
 32934                                  ; .$M_S_RESV:	resb 1		;;AN000;; RESERVED
 32935                                  ; .$M_S_VALUE:	resd 1 		;;AN000;; Time, Date or PTR to data item
 32936                                  ; .$M_S_ID:	resb 1		;;AN000;; n of %n
 32937                                  ; .$M_S_FLAG:	resb 1		;;AN000;; Data-type flags
 32938                                  ; .$M_S_MAXW:	resb 1		;;AN000;; Maximum field width
 32939                                  ; .$M_S_MINW:	resb 1		;;AN000;; Minimum field width
 32940                                  ; .$M_S_PAD:	resb 1		;;AN000;; Character for Pad field
 32941                                  ;endstruc
 32942                                  
 32943                                  ;; Each class will be defined by this structure.
 32944                                  
 32945                                  struc $M_CLASS_ID		;;AN000;;
 32946 00000000 ??                       .$M_CLS_ID:	  resb 1	;;AN000;; Class identifer
 32947 00000001 ????                     .$M_COMMAND_VER: resw 1	;;AN003;; COMMAND.COM version check
 32948 00000003 ??                       .$M_NUM_CLS_MSG: resb 1	;;AN000;; Total number of message in class
 32949                                   .size:
 32950                                  endstruc
 32951                                  
 32952                                  $M_CLASS_ID_SZ	EQU $M_CLASS_ID.size	;;AN000;;
 32953                                  
 32954                                  ;; Each message will be defined by this structure.
 32955                                  
 32956                                  struc $M_ID			;;AN000;;
 32957 00000000 ????                     .$M_NUM:	resw 1		;;AN000;; Message Number
 32958 00000002 ????                     .$M_TXT_PTR:	resw 1		;;AN000;; Pointer to message text
 32959                                   .size:	
 32960                                  endstruc
 32961                                  
 32962                                  $M_ID_SZ	EQU  $M_ID.size	;;AN000;;
 32963                                  
 32964                                  ; ---------------------------
 32965                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 32966                                  ; ---------------------------
 32967                                  $M_TEMP_BUF_SZ	EQU 64     ;; Size of temporary buffer	 ;AN003;
 32968                                  
 32969                                  ; --------------------------- 
 32970                                  
 32971                                  ; 07/04/2023
 32972                                  $M_NUM_CLS equ 3
 32973                                  
 32974                                  ;; Resident data area definition of variables
 32975                                  
 32976                                  struc $M_RES_ADDRS			;;AN000;;
 32977 00000000 ????????                 .$M_EXT_ERR_ADDRS: resd 1		;;AN000;; Allow pointers to THREE Extended error locations
 32978 00000004 ????????                 .$M_EXT_FILE:	    resd 1		;;AN001;;
 32979 00000008 ????????                 .$M_EXT_COMMAND:   resd 1		;;AN000;;
 32980 0000000C ????????                 .$M_EXT_TERM:	    resd 1		;;AN000;;
 32981 00000010 ????????                 .$M_PARSE_COMMAND: resd 1		;;AN000;;
 32982 00000014 ????????                 .$M_PARSE_ADDRS:   resd 1		;;AN000;; Allow pointers to TWO Parse error locations
 32983 00000018 ????????                 .$M_PARSE_TERM:    resd 1		;;AN000;;
 32984 0000001C ????????                 .$M_CRIT_ADDRS:    resd 1		;;AN000;; Allow pointers to TWO Critical error locations
 32985 00000020 ????????                 .$M_CRIT_COMMAND:  resd 1		;;AN000;;
 32986 00000024 ????????                 .$M_CRIT_TERM:	    resd 1		;;AN000;;
 32987 00000028 ????????                 .$M_DISK_PROC_ADDR: resd 1		;;AN004;; Address of READ_DISK_PROC
 32988 0000002C <res Ch>                 .$M_CLASS_ADDRS:   resd $M_NUM_CLS ; 3	;;AN000;; Allow pointers to specified classes
 32989 00000038 ????????                 .$M_CLS_TERM:	    resd 1		;;AN000;;
 32990 0000003C ????????                 .$M_DBCS_VEC:	    resd 1		;;AN000;; Save DBCS vector
 32991 00000040 ????                     .$M_HANDLE:	    resw 1 		;;AN000;;
 32992 00000042 ??                       .$M_SIZE:	    resb 1		;;AN000;;
 32993 00000043 ????                     .$M_CRLF:	    resb 2  		;;AN004;; CR LF message
 32994 00000045 ??                       .$M_CLASS:	    resb 1		;;AN004;; Saved class
 32995 00000046 ????                     .$M_RETURN_ADDR:   resw 1		;;AN000;;
 32996 00000048 ????                     .$M_MSG_NUM:	    resw 1		;;AN000;;
 32997 0000004A ????                     .$M_DIVISOR:	    resw 1		;;AN000;; Default = 10 (must be a WORD for division)
 32998 0000004C <res 40h>                .$M_TEMP_BUF:	    resb $M_TEMP_BUF_SZ	;;AN000;; Temporary buffer
 32999 0000008C ??                       .$M_BUF_TERM:	    resb 1		;;AN000;;
 33000                                   .size:
 33001                                  endstruc				;;AN000;;
 33002                                  
 33003                                  $M_RES_ADDRS_SZ	EQU $M_RES_ADDRS.size	;;AN000;;
 33004                                  
 33005                                  ;; Important fields of the Get Country Information call
 33006                                  
 33007                                  struc $M_COUNTRY_INFO			;;AN000;; Expected Country infomation
 33008 00000000 <res 4Ch>                .$M_HEADER:	    resb $M_RES_ADDRS_SZ-$M_TEMP_BUF_SZ-1
 33009                                  					;;AN000;; Go past first part of struc
 33010 0000004C ????                     .$M_DATE_FORMAT:   resw 1		;;AN000;; <------- Date Format
 33011 0000004E ??????????               .$M_CURR_SEPARA:   resb 5		;;AN000;;
 33012 00000053 ????                     .$M_THOU_SEPARA:   resb 2		;;AN000;; <------- Thou Separator
 33013 00000055 ????                     .$M_DECI_SEPARA:   resb 2		;;AN000;; <------- Decimal Separator
 33014 00000057 ????                     .$M_DATE_SEPARA:   resb 2		;;AN000;; <------- Date Separator
 33015 00000059 ????                     .$M_TIME_SEPARA:   resb 2		;;AN000;; <------- Time Separator
 33016 0000005B ??                       .$M_CURR_FORMAT:   resb 1		;;AN000;;
 33017 0000005C ??                       .$M_SIG_DIGS_CU:   resb 1		;;AN000;;
 33018 0000005D ??                       .$M_TIME_FORMAT:   resb 1		;;AN000;; <------- Time Format
 33019                                  endstruc				;;AN000;;
 33020                                  
 33021                                  ; ---------------------------------------------------------------------------
 33022                                  
 33023                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33024                                  ;;
 33025                                  ;;	PROC NAME: SYSLOADMSG
 33026                                  ;;
 33027                                  ;;	FUNCTION:
 33028                                  ;;	INPUTS:
 33029                                  ;;
 33030                                  ;;	OUTPUTS:
 33031                                  ;;
 33032                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33033                                  
 33034                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33035                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5107h
 33036                                  
 33037                                  SYSLOADMSG:
 33038 00004EDA 50                      	push	ax				;;AN000;
 33039 00004EDB 53                      	push	bx				;;AN000;
 33040 00004EDC 52                      	push	dx				;;AN000;
 33041 00004EDD 06                      	push	es				;;AN000;
 33042 00004EDE 57                      	push	di				;;AN000;
 33043 00004EDF 31C9                    	xor	cx,cx				;;AN000;  Reset to zero
 33044 00004EE1 8EC1                    	mov	es,cx				;;AN000;
 33045 00004EE3 31FF                    	xor	di,di				;;AN000;
 33046 00004EE5 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33047 00004EE8 B200                    	mov	dl,0 ; DOS_GET_EXTENDED		;;AN000;; Where are the Extended errors in COMMAND.COM
 33048 00004EEA CD2F                    	int	2Fh				;;AN000;; Private interface
 33049                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33050                                  		; DL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)
 33051                                  		; Return: ES:DI -> error table
 33052                                  	
 33053 00004EEC 8C06[F686]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND+2],es
 33054                                  	;mov	[$M_RT+10],es			;;AN000;; Move into first avaliable table location
 33055 00004EF0 893E[F486]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_COMMAND],di
 33056                                  	;mov	[$M_RT+8],di			;;AN000;;
 33057                                  
 33058 00004EF4 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33059 00004EF7 B202                    	mov	dl,2 ; DOS_GET_PARSE		;;AN000;; Where are the Parse errors in COMMAND.COM
 33060 00004EF9 CD2F                    	int	2Fh				;;AN000;; Private interface
 33061                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33062                                  		; DL = subfunction - get critical/SHARE error table (errors 13h-2Bh)
 33063                                  		; ES:DI -> error table
 33064                                  
 33065 00004EFB 8C06[FE86]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND+2],es
 33066                                  	;mov	[$M_RT+18],es			;;AN000;; Move into first avaliable table location
 33067 00004EFF 893E[FC86]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND],di
 33068                                  	;mov	[$M_RT+16],di			;;AN000;;
 33069                                  
 33070 00004F03 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN000;; 2FH Interface
 33071 00004F06 B204                    	mov	dl,4 ; DOS_GET_CRITICAL		;;AN000;; Where are the Critical errors in COMMAND.COM
 33072 00004F08 CD2F                    	int	2Fh				;;AN000;; Private interface
 33073                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33074                                  		; DL = subfunction - get ??? error table
 33075                                  		; ES:DI -> error table
 33076                                  
 33077 00004F0A 8C06[0E87]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND+2],es
 33078                                  	;mov	[$M_RT+34],es			;;AN000;; Move into first avaliable table location
 33079 00004F0E 893E[0C87]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_COMMAND],di
 33080                                  	;mov	[$M_RT+32],di			;;AN000;;
 33081                                  
 33082 00004F12 B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33083 00004F15 B206                    	mov	dl,6 ; DOS_GET_FILE		;;AN001;; Where are the FILE dependant in IFSFUNC.EXE
 33084 00004F17 CD2F                    	int	2Fh					     ;;AN001;; Private interface
 33085                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33086                                  		; DL = subfunction - get ??? error table
 33087                                  		; ES:DI -> error table
 33088                                  
 33089 00004F19 8C06[F286]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE+2],es
 33090                                  	;mov	[$M_RT+6],es			;;AN001;; Move into first avaliable table location
 33091 00004F1D 893E[F086]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_FILE],di
 33092                                  	;mov	[$M_RT+4],di			;;AN001;;
 33093                                  
 33094 00004F21 E8D02F                  	call	$M_MSGSERV_1			;;AN000;; Get addressibility to MSGSERV CLASS 1 (EXTENDED Errors)
 33095                                  						;;AN000;;
 33096 00004F24 8C06[EE86]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS+2],es
 33097                                  	;mov	[$M_RT+2],es			;;AN000;; Move into first avaliable table location
 33098 00004F28 893E[EC86]              	mov	[$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS],di
 33099                                  	;mov	[$M_RT+0],di			;;AN000;;
 33100 00004F2C 8C06[0A87]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS+2],es
 33101                                  	;mov	[$M_RT+30],es			;;AN000;; Move into first avaliable table location
 33102 00004F30 893E[0887]              	mov	[$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS],di
 33103                                  	;mov	[$M_RT+28],di			;;AN000;;
 33104                                  
 33105 00004F34 E8DB2F                  	call	$M_MSGSERV_2			;;AN000;; Get addressibility to MSGSERV CLASS 2 (PARSE Errors)
 33106                                  
 33107 00004F37 8C06[0287]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS+2],es
 33108                                  	;mov	[$M_RT+22],es			;;AN000;; Move into first avaliable table location
 33109 00004F3B 893E[0087]              	mov	[$M_RT+$M_RES_ADDRS.$M_PARSE_ADDRS],di
 33110                                  	;mov	[$M_RT+20],di			;;AN000;;
 33111                                  
 33112 00004F3F B82E12                  	mov	ax,122Eh ; DOS_GET_EXT_PARSE_ADD ;;AN001;; 2FH Interface
 33113 00004F42 B208                    	mov	dl,8 ; DOS_GET_ADDR 		;;AN001;; Where is the READ_DISK_PROC in COMMAND.COM
 33114 00004F44 CD2F                    	int	2Fh				;;AN001;; Private interface
 33115                                  		; Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES
 33116                                  		; DL = subfunction - get ??? error table
 33117                                  		; ES:DI -> error table
 33118                                  
 33119 00004F46 8C06[1687]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR+2],es
 33120                                  	;mov	[$M_RT+42],es			;;AN001;; Move into first avaliable table location
 33121 00004F4A 893E[1487]              	mov	[$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],di
 33122                                  	;mov	[$M_RT+40],di			;;AN001;;
 33123                                  
 33124                                  ;M016; M020
 33125                                  ; Reinitialize the CR-LF string. Also, reinit the buffer terminator just to
 33126                                  ;be safe. Initialize $M_MSG_NUM and $M_DIVISOR also.
 33127                                  
 33128 00004F4E C706[2F87]0D0A          	mov	word [$M_RT+$M_RES_ADDRS.$M_CRLF],0A0Dh
 33129                                  	;mov	word [$M_RT+67],0A0Dh		; Reinit CR-LF ;M016
 33130 00004F54 C606[7887]24            	mov	byte [$M_RT+$M_RES_ADDRS.$M_BUF_TERM],'$'
 33131                                  	;mov	word [$M_RT+140],'$'		; Reinit buffer end;M016
 33132 00004F59 C706[3487]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 33133                                  	;mov	word [$M_RT+72],0		; M020
 33134 00004F5F C706[3687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 33135                                  	;mov	word [$M_RT+74],10		; M020
 33136                                  
 33137                                  	; 07/04/2023 - Retro DOS v4.0 COMMAND.COM
 33138                                  	; --------------------------
 33139                                  	; MSDOS 6.0 SYSMSG.INC, 1991
 33140                                  	; --------------------------
 33141                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP5192h
 33142                                  
 33143                                  	;$M_BUILD_PTRS %$M_NUM_CLS     		;;AN000;; Build all utility classes	
 33144 00004F65 E82D2F                  	call    $M_CLS_3			; Get addressibility to class F
 33145 00004F68 893E[1887]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS],di
 33146                                  	;mov	[$M_RT+44],di
 33147                                  	
 33148 00004F6C E80600                  	CALL	$M_GET_DBCS_VEC 		;;AN000;; Save the DBCS vector
 33149                                  
 33150                                  	; 15/04/2023
 33151                                  	;clc					;;AN000;; Make sure carry is clear
 33152                                  	;jc	short $MIF20
 33153                                  	
 33154 00004F6F 5F                      	pop	di				;;AN000;; Restore REGS
 33155 00004F70 07                      	pop	es				;;AN000;;
 33156 00004F71 5A                      	pop	dx				;;AN000;;
 33157 00004F72 5B                      	pop	bx				;;AN000;;
 33158 00004F73 58                      	pop	ax				;;AN000;;
 33159                                  	;jmp	short $MEN20
 33160                                  	; 15/04/2023
 33161 00004F74 C3                      	retn
 33162                                  
 33163                                  	; 15/04/2023
 33164                                  ;$MIF20:
 33165                                  	;add	sp,10				;;AN000;;
 33166                                  	;stc					;;AN000;; Reset carry flag
 33167                                  ;$MEN20:
 33168                                  	;retn					;;AN000;;
 33169                                  
 33170                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33171                                  ;;
 33172                                  ;;  Proc Name:	$M_GET_DBCS_VEC
 33173                                  ;;
 33174                                  ;;  Function:	Get the DBCS vector and save it for later use
 33175                                  ;;
 33176                                  ;;  Inputs:	None
 33177                                  ;;
 33178                                  ;;  Outputs:	None
 33179                                  ;;
 33180                                  ;;  Regs Changed:
 33181                                  ;;
 33182                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33183                                  
 33184                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33185                                  
 33186                                  $M_GET_DBCS_VEC:
 33187 00004F75 50                      	push	ax				;;AN000;; Save character to check
 33188 00004F76 56                      	push	si				;;AN000;;
 33189 00004F77 1E                      	push	ds				;;AN000;;
 33190 00004F78 B80063                  	mov	ax,6300h ;DOS_GET_DBCS_INFO	;;AN000;; DOS function to get DBSC environment
 33191 00004F7B CD21                    	int	21h				;;AN000;; Get environment pointer
 33192 00004F7D 1E                      	push	ds				;;AN000;; Get environment pointer
 33193 00004F7E 07                      	pop	es				;;AN000;; Get environment pointer
 33194 00004F7F 1F                      	pop	ds				;;AN000;; Get environment pointer
 33195 00004F80 7208                    	jc	short $MIF23
 33196                                  	
 33197 00004F82 8936[2887]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC],si
 33198                                  	;mov	word [$M_RT+60],si		;;AN000;; Save DBCS Vector
 33199 00004F86 8C06[2A87]              	mov	word [$M_RT+$M_RES_ADDRS.$M_DBCS_VEC+2],es
 33200                                  	;mov	word [$M_RT+62],es		;;AN000;;
 33201                                  $MIF23:
 33202 00004F8A 5E                      	pop	si				;;AN000;;
 33203 00004F8B 58                      	pop	ax				;;AN000;; Retrieve character to check
 33204 00004F8C C3                      	retn					;;AN000;; Return
 33205                                  
 33206                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33207                                  ;;
 33208                                  ;;  Proc Name:	SYSGETMSG
 33209                                  ;;
 33210                                  ;;  Function:	The GET service returns the segment, offset and size of the
 33211                                  ;;		message text to the caller based on a message number.
 33212                                  ;;		The GET function will not display the message thus assumes
 33213                                  ;;		caller will handle replaceable parameters.
 33214                                  ;;
 33215                                  ;;  Inputs:
 33216                                  ;;
 33217                                  ;;  Outputs:
 33218                                  ;;
 33219                                  ;;  Psuedocode:
 33220                                  ;;		Call $M_GET_MSG_ADDRESS
 33221                                  ;;		IF MSG_NUM exists THEN
 33222                                  ;;		   Set DS:SI = MSG_TXT_PTR + 1
 33223                                  ;;		   CARRY_FLAG = 0
 33224                                  ;;		ELSE
 33225                                  ;;		   CARRY_FLAG = 1
 33226                                  ;;		ENDIF
 33227                                  ;;
 33228                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33229                                  
 33230                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33231                                  	; 15/06/2023
 33232                                  
 33233                                  	utility_msg_class equ 0FFh ; 18/04/2023
 33234                                  
 33235                                  SYSGETMSG:
 33236                                  	;; Save registers needed later
 33237 00004F8D 50                      	push	ax				;;AN000;; Save changed regs
 33238 00004F8E 06                      	push	es				;;AN000;;
 33239 00004F8F 57                      	push	di				;;AN000;;
 33240 00004F90 55                      	push	bp				;;AN000;;
 33241                                  
 33242 00004F91 E81400                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 33243 00004F94 720D                    	jc	short $MIF31
 33244                                  	
 33245 00004F96 80FEFF                  	cmp	dh,utility_msg_class ; 0FFh	;;AN000;; Were utility messages requested?
 33246                                  	;clc					;;AN000;;
 33247 00004F99 7404                    	je	short $MIF32			;;AN000;;
 33248                                  	; 15/06/2023
 33249 00004F9B F8                      	clc	
 33250                                  
 33251 00004F9C 06                      	push	es				;;AN000;;
 33252                                  	;pop	ds				;;AN000;;
 33253 00004F9D EB01                    	jmp	short $MEN32
 33254                                  $MIF32:
 33255 00004F9F 0E                      	push	cs				;;AN000;;			
 33256                                  	;pop	ds				;;AN000;;
 33257                                  $MEN32:
 33258                                  	; 07/04/2023
 33259 00004FA0 1F                      	pop	ds
 33260 00004FA1 89FE                    	mov	si,di				;;AN000;; Return message in DS:SI
 33261                                  $MIF31:
 33262 00004FA3 5D                      	pop	bp				;;AN000;; Restore changed regs
 33263 00004FA4 5F                      	pop	di				;;AN000;;
 33264 00004FA5 07                      	pop	es				;;AN000;;
 33265 00004FA6 58                      	pop	ax				;;AN000;;
 33266 00004FA7 C3                      	retn					;;AN000;; Return
 33267                                  
 33268                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33269                                  ;;
 33270                                  ;;	PROC NAME: $M_GET_MSG_ADDRESS
 33271                                  ;;
 33272                                  ;;	FUNCTION:  To scan thru classes to return pointer to the message header
 33273                                  ;;	INPUTS:    Access to $M_RES_ADDRESSES
 33274                                  ;;	OUTPUTS:   IF CX = 0 THEN Message was not found
 33275                                  ;;		   IF CX > 1 THEN ES:DI points to the specified message
 33276                                  ;;	REGS CHANGED: ES,DI,CX
 33277                                  ;;
 33278                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33279                                  
 33280                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33281                                  
 33282                                  $M_GET_MSG_ADDRESS:
 33283 00004FA8 56                      	push	si				;;AN000;;
 33284 00004FA9 53                      	push	bx				;;AN000;;
 33285 00004FAA 31F6                    	xor	si,si				;;AN000;; Use SI as an index
 33286 00004FAC 31C9                    	xor	cx,cx				;;AN000;; Use CX as an size
 33287                                  $MDO36:
 33288 00004FAE 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Were utility messages requested?
 33289 00004FB1 7508                    	jne	short $MIF37			;;AN000;; No			
 33290                                  	
 33291                                  	; 07/04/2023
 33292                                  	;;mov	di,[si+89CAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33293 00004FB3 8BBC[1887]              	mov	di,[si+$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS]
 33294                                  	;mov	di,[si+$M_RT+44]		;;AN000;; Get address of class
 33295 00004FB7 89FB                    	mov	bx,di				;;AN000;;
 33296 00004FB9 EB21                    	jmp	short $MEN37
 33297                                  $MIF37:
 33298 00004FBB F6C602                  	test	dh,2 ; parse_err_class		;;AN000;; Were parse errors requested?
 33299 00004FBE 7406                    	jz	short $MIF39
 33300                                  	
 33301                                  	; 07/04/2023
 33302                                  	;;les	di,[si+89AEh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33303 00004FC0 C4BC[FC86]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_PARSE_COMMAND]
 33304                                  	;les	di,[si+$M_RT+16]		;;AN000;; Get address of class
 33305                                  	
 33306                                  	; 07/04/2023
 33307                                  	;mov	bx,es ; *			;;AN000;;
 33308 00004FC4 EB14                    	jmp	short $MEN39
 33309                                  $MIF39:
 33310 00004FC6 83F813                  	cmp	ax,19 ; $M_CRIT_LO		;;AN000;; Is this a critical error?
 33311 00004FC9 720B                    	jnae	short $MIF41  ; jb short $MIF41 ;;AN000;;
 33312                                  
 33313 00004FCB 83F827                  	cmp	ax,39 ; $M_CRIT_HI		;;AN000;;
 33314 00004FCE 7706                    	jnbe	short $MIF41  ; ja short $MIF41 ;;AN000;;
 33315                                  
 33316                                  	; 07/04/2023
 33317                                  	;;les	di,[si+89BAh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33318 00004FD0 C4BC[0887]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_CRIT_ADDRS]
 33319                                  	;les	di,[si+$M_RT+28]		;;AN000;; Get address of class
 33320                                  	
 33321                                  	; 07/04/2023
 33322                                  	;mov	bx,es ; *			;;AN000;;
 33323 00004FD4 EB04                    	jmp	short $MEN41
 33324                                  $MIF41:
 33325                                  	; 07/04/2023
 33326                                  	;;les	di,[si+899Eh] ; MSDOS 5.0 COMMAND.COM ($M_RT at offset 899Eh)
 33327 00004FD6 C4BC[EC86]              	les	di,[si+$M_RT+$M_RES_ADDRS.$M_EXT_ERR_ADDRS]
 33328                                  	;les	di,[si+$M_RT+0]			;;AN000;; Get address of class
 33329                                  	
 33330                                  	; 07/04/2023
 33331                                  	;mov	bx,es ; *			;;AN000;;
 33332                                  $MEN41:
 33333                                  $MEN39:
 33334                                  	; 07/04/2023
 33335 00004FDA 8CC3                    	mov	bx,es ; *
 33336                                  $MEN37:						;;AN000;;
 33337 00004FDC 83FBFF                  	cmp	bx,-1 ; $M_TERMINATING_FLAG	;;AN000;; Are we finished all classes?
 33338 00004FDF 7515                    	jne	short $MIF46			;;AN000;; No
 33339                                  
 33340 00004FE1 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN000;; Was it a UTILITY class?
 33341 00004FE4 7503                    	jne	short $MIF47			;;AN000;; No
 33342 00004FE6 F9                      	stc		     ; **-		;;AN000;; Set the carry flag
 33343                                  	; 07/04/2023
 33344                                  	;jmp	short $MEN47 ; **-
 33345 00004FE7 EB1B                    	jmp	short $MEN36 ; **-
 33346                                  $MIF47:
 33347 00004FE9 A3[3487]                	mov	[$M_RT+$M_RES_ADDRS.$M_MSG_NUM],AX
 33348                                  	;mov	[$M_RT+72],ax			;;AN000;; Save message number
 33349 00004FEC B8FFFF                  	mov	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN000;; Set special message number
 33350 00004FEF BD0100                  	mov	bp,1 ; $M_ONE_REPLACE		;;AN000;; Set one replace in message
 33351 00004FF2 31F6                    	xor	si,si				;;AN000;; Reset the SI index to start again
 33352                                  	; 28/04/2023
 33353                                  	; 07/04/2023
 33354                                  	;clc	; **+				;;AN000;;
 33355                                  ;$MEN47:
 33356                                  	;jmp	short $MEN46 ; ***
 33357 00004FF4 EB0A                    	jmp	short $MEN47 ; ***
 33358                                  $MIF46:
 33359                                  	;cmp	bx,0 ; $M_CLASS_NOT_EXIST	;;AN000;; Does this class exist?
 33360 00004FF6 21DB                    	and	bx,bx ; 0 ?
 33361 00004FF8 7403                    	jz	short $MIF51			;;AN000;; No
 33362                                  	
 33363 00004FFA E84D00                  	call	$M_FIND_SPECIFIED_MSG		;;AN000;; Try to find the message
 33364                                  $MIF51:
 33365 00004FFD 83C604                  	add	si,4 ; $M_ADDR_SZ_FAR 		;;AN000;; Get next class
 33366                                  	; 07/04/2023
 33367                                  	;clc					;;AN000;;
 33368                                  ;$MEN46:
 33369                                  	;jc	short $MEN36 ; **- ; **+	;;AN000;;
 33370                                  $MEN47:	; 07/04/2023	; **+
 33371 00005000 09C9                    	or	cx,cx				;;AN000;; Was the message found?
 33372                                  	;jnz	short $MXL2			;;AN000;; Yes
 33373                                  	;jmp	short $MDO36
 33374                                  	; 07/04/2023
 33375 00005002 74AA                    	jz	short $MDO36	
 33376                                  $MXL2:
 33377                                  $MEN36:
 33378 00005004 9C                      	pushf 					;;AN006;; Save the flag state
 33379                                  	
 33380 00005005 80FE01                  	cmp	dh,1 ; EXT_ERR_CLASS		;;AN006;; Was an extended error requested?
 33381                                  	;jne	short $MIF56			;;AN006;; No
 33382                                  	; 28/04/2023
 33383 00005008 752A                    	jne	short $M_MYRET	
 33384                                  
 33385 0000500A 52                      	push	dx				;;AN006;; Save all needed registers
 33386 0000500B 55                      	push	bp				;;AN006;;
 33387 0000500C 51                      	push	cx				;;AN006;;
 33388 0000500D 06                      	push	es				;;AN006;;
 33389 0000500E 57                      	push	di				;;AN006;;
 33390 0000500F 50                      	push	ax				;;AN006;;
 33391                                  
 33392 00005010 B80005                  	mov	ax,500h ; IFSFUNC_INSTALL_CHECK	;;AN006;; Check if IFSFUNC is installed
 33393 00005013 CD2F                    	int	2Fh				;;AN006;;
 33394                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK
 33395                                  		; Return: AL = 00h not installed, OK to install
 33396                                  		; 01h not installed, can't install
 33397                                  		; FFh installed
 33398                                  
 33399 00005015 3CFF                    	cmp	al,0FFh ; IFSFUNC_INSTALLED	;;AN006;; Is it installed?
 33400 00005017 58                      	pop	ax				;;AN006;; Restore msg number
 33401 00005018 7513                    	jne	short $MIF57			;;AN006;; No (not installed)
 33402                                  
 33403 0000501A 89C3                    	mov	bx,ax				;;AN006;; BX is the extended error number
 33404 0000501C B80205                  	mov	ax,502h ; IFS_GET_ERR_TEXT	;;AN006;; AX is the muliplex number
 33405 0000501F CD2F                    	int	2Fh				;;AN006;; Call IFSFUNC
 33406                                  		; Multiplex - DOS 3+ CRITICAL ERROR HANDLER
 33407                                  
 33408                                  	;jmp	short $MEN57			;;AN006;;
 33409                                  	; 28/04/2023
 33410 00005021 720B                    	jc	short $MEN57
 33411                                  $MIF60:
 33412 00005023 83C406                  	add	sp,6				;;AN006;; Throw away old pointer
 33413 00005026 E81200                  	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 33414                                  $MEN60:
 33415 00005029 5D                      	pop	bp				;;AN006;; Restore other Regs
 33416 0000502A 5A                      	pop	dx				;;AN006;;
 33417                                  $MIF56:
 33418                                  	; 07/04/2023
 33419                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 33420 0000502B EB07                    	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 33421                                  
 33422                                  $MIF57:
 33423 0000502D F9                      	stc					;;AN006;; Carry conditon
 33424                                  $MEN57:
 33425                                  	; 28/04/2023
 33426                                  	;jnc	short $MIF60			;;AN006;;
 33427                                  
 33428 0000502E 5F                      	pop	di				;;AN006;;
 33429 0000502F 07                      	pop	es				;;AN006;; Restore old pointer
 33430 00005030 59                      	pop	cx				;;AN006;;
 33431 00005031 EBF6                    	jmp	short $MEN60
 33432                                  
 33433                                  ;$MIF60:
 33434                                  ;	add	sp,6				;;AN006;; Throw away old pointer
 33435                                  ;	call	$M_SET_LEN_IN_CX		;;AN006;; Get the length of the ASCIIZ string
 33436                                  ;$MEN60:
 33437                                  ;	pop	bp				;;AN006;; Restore other Regs
 33438                                  ;	pop	dx				;;AN006;;
 33439                                  ;$MIF56:
 33440                                  ;	; 07/04/2023
 33441                                  ;	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 33442                                  ;	jmp	short $M_MYRET			;;AN006;; Restore the flag state
 33443                                  
 33444                                  ; 07/04/2023
 33445                                  ; ---------------------------
 33446                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 33447                                  ; ---------------------------
 33448                                  	; $M_POPF macro
 33449                                  	;jmp	short $+3
 33450                                  m_popf_iret:
 33451 00005033 CF                      	iret
 33452                                  $M_MYRET:
 33453 00005034 0E                      	push	cs
 33454 00005035 E8FBFF                  	call	m_popf_iret
 33455                                  	;;; end macro	
 33456                                  ; ---------------------------
 33457                                  
 33458 00005038 5B                      	pop	bx				;;AN000;;
 33459 00005039 5E                      	pop	si				;;AN000;;
 33460 0000503A C3                      	retn					;;AN000;; Return ES:DI pointing to the message
 33461                                  
 33462                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33463                                  
 33464                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33465                                  $M_SET_LEN_IN_CX:			
 33466 0000503B 57                      	push	di				;;AN006;; Save position
 33467 0000503C 50                      	push	ax				;;AN006;;
 33468 0000503D B9FFFF                  	mov	cx,-1 ; 65535 ; 0FFFFh		;;AN006;; Set CX for decrements
 33469 00005040 30C0                    	xor	al,al				;;AN006;; Prepare compare register
 33470 00005042 F2AE                    	repne	scasb				;;AN006;; Scan for zero
 33471 00005044 F7D1                    	not	cx				;;AN006;; Change decrement into number
 33472 00005046 49                      	dec	cx				;;AN006;; Don't include the zero
 33473 00005047 58                      	pop	ax				;;AN006;;
 33474 00005048 5F                      	pop	di				;;AN006;; Restore position
 33475 00005049 C3                      	retn					;;AN006;;
 33476                                  
 33477                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33478                                  ;;
 33479                                  ;;	PROC NAME: $M_FIND_SPECIFIED_MSG
 33480                                  ;;
 33481                                  ;;	FUNCTION:  To scan thru message headers until message is found
 33482                                  ;;	INPUTS:    ES:DI points to beginning of msg headers
 33483                                  ;;		   CX contains the number of messages in class
 33484                                  ;;		   DH contains the message class
 33485                                  ;;	OUPUTS:    IF CX = 0 THEN Message was not found
 33486                                  ;;		   IF CX > 1 THEN ES:DI points to header of specified message
 33487                                  ;;
 33488                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33489                                  
 33490                                  	; 07/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33491                                  	; 15/06/2023
 33492                                  $M_FIND_SPECIFIED_MSG:
 33493 0000504A 83FB01                  	cmp	bx,1				;;AN004;; Do we have an address to CALL?
 33494 0000504D 751F                    	jne	short $MIF64
 33495 0000504F 833E[1487]FF            	cmp	word [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR],-1
 33496                                  	;cmp	word [$M_RT+40],-1 ; 0FFFFh	;;AN004;; Do we have an address to CALL?
 33497                                  	; 15/06/2023 (BugFix)
 33498 00005054 7418                    	je	short $MIF64
 33499                                  
 33500 00005056 83F8FF                  	cmp	ax,0FFFFh ; $M_SPECIAL_MSG_NUM	;;AN004;; Are we displaying a default Ext Err?
 33501 00005059 750B                    	jne	short $MIF65
 33502                                  	
 33503 0000505B 50                      	push	ax				;;AN004;; Reset the special message number
 33504 0000505C A1[3487]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 33505                                  	;mov	ax,[$M_RT+72]			;;AN004;; Get the old message number
 33506 0000505F FF1E[1487]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 33507                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 33508 00005063 58                      	pop	ax				;;AN004;; Reset the special message number
 33509                                  	; 28/04/2023
 33510 00005064 EB04                    	jmp	short $MEN65
 33511                                  	; 18/04/2023
 33512                                  	;jmp	short $MEN64
 33513                                  $MIF65:
 33514 00005066 FF1E[1487]              	call	far [$M_RT+$M_RES_ADDRS.$M_DISK_PROC_ADDR]
 33515                                  						;;AN004;; Call the READ_DISK_PROC to get error text
 33516                                  $MEN65:
 33517                                  	; 28/04/2023
 33518 0000506A 7344                    	jnc	short $MIF75
 33519                                  	;
 33520 0000506C EB19                    	jmp	short $MEN64 ; $MDO76		;;AN004;;
 33521                                  $MIF64:
 33522 0000506E 31C9                    	xor	cx,cx				;;AN002;; CX = 0 will allow us to
 33523 00005070 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 33524 00005073 7406                    	je	short $MIF69
 33525                                  	
 33526 00005075 268A4D03                	mov	cl,[es:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 33527                                  	;mov	cl,[es:di+3]			;;AN001;; Get number of messages in class
 33528 00005079 EB09                    	jmp	short $MEN69
 33529                                  $MIF69:
 33530                                  	;cmp	[cs:di+$M_CLASS_ID.$M_CLS_ID],dh
 33531                                  	;cmp	[cs:di+0],dh
 33532 0000507B 2E3835                  	cmp	[cs:di],dh			;;AN002;; Check if class still exists at
 33533 0000507E 7504                    	jne	short $MIF71
 33534                                  
 33535 00005080 2E8A4D03                	mov	cl,[cs:di+$M_CLASS_ID.$M_NUM_CLS_MSG]
 33536                                  	;mov	cl,[cs:di+3]			;;AN000;; Get number of messages in class
 33537                                  $MIF71:						;;AN001;;
 33538                                  $MEN69:
 33539 00005084 83C704                  	add	di,$M_CLASS_ID_SZ ; add di,4	;;AN000;; Point past the class header
 33540                                  	; 02/05/2023
 33541                                  	;stc					;;AN004;; Flag that we haven't found anything yet
 33542                                  $MEN64:
 33543                                  	;jnc	short $MIF75
 33544                                  	; 28/04/2023
 33545                                  	; (or instruction clears carry flag)
 33546                                  	;clc					;;AN004;; No, reset carry
 33547                                  $MDO76:
 33548 00005087 09C9                    	or	cx,cx				;;AN000;; Do we have any to check?
 33549 00005089 7417                    	jz	short $MEN76
 33550                                  
 33551 0000508B 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;;
 33552 0000508E 7405                    	je	short $MIF78
 33553                                  
 33554                                  	;cmp	ax,[es:di+$M_ID.$M_NUM]		;;AN001;; Is this the message requested?
 33555 00005090 263B05                  	cmp	ax,[es:di]
 33556 00005093 EB03                    	jmp	short $MEN78
 33557                                  $MIF78:
 33558                                  	;cmp	ax,[cs:di+$M_ID.$M_NUM]		;;AN000;; Is this the message requested?
 33559 00005095 2E3B05                  	cmp	ax,[cs:di]
 33560                                  $MEN78:
 33561                                  	;jne	short $MIF76
 33562                                  	;jmp	short $MSR76
 33563                                  	; 07/04/2023
 33564 00005098 740B                    	je	short $MSR76 ; *
 33565                                  $MIF76:
 33566 0000509A 49                      	dec	cx				;;AN000;; No, well do we have more to check?
 33567 0000509B 7405                    	jz	short $MEN76
 33568                                  
 33569 0000509D 83C704                  	add	di,$M_ID_SZ ; add di,4		;;AN000;; Yes, skip past msg header
 33570 000050A0 EBE5                    	jmp	short $MDO76			;;AN000;;
 33571                                  $MEN76:
 33572 000050A2 F9                      	stc					;;AN000;;
 33573                                  ;$MSR76:	; 07/04/2023
 33574                                  	;jc	short $MIF86			;;AN000;;
 33575                                  	; 07/04/2023
 33576                                  	;jc	short $MIF91
 33577 000050A3 EB11                    	jmp	short $MIF91 ;*
 33578                                  $MSR76:	; 07/04/2023 ; *	
 33579 000050A5 80FEFF                  	cmp	dh,utility_msg_class ; -1	;;AN001;; Yes, is it a utility message?
 33580                                  	; 07/04/2023
 33581                                  	;clc					;;AN001;;
 33582 000050A8 7502                    	jne	short $MIF87
 33583                                  
 33584 000050AA 0E                      	push	cs				;;AN000;;
 33585 000050AB 07                      	pop	es				;;AN000;; Return ES:DI pointing to the message
 33586                                  $MIF87:
 33587                                  	;add	di,[es:di+2]
 33588 000050AC 26037D02                	add	di,[es:di+$M_ID.$M_TXT_PTR]     ;;AN000;; Prepare ES:DI pointing to the message
 33589                                  $MIF86:
 33590                                  ;$MIF75:
 33591                                  	; 02/05/2023
 33592                                  	;jc	short $MIF91
 33593                                  $MIF75:	; 28/04/2023
 33594 000050B0 30ED                    	xor	ch,ch				;;AN000;;
 33595 000050B2 268A0D                  	mov	cl,[es:di]			;;AN000;; Move size into CX
 33596 000050B5 47                      	inc	di				;;AN000;; Increment past length
 33597                                  $MIF91:
 33598 000050B6 C606[2E87]00            	mov	byte [$M_RT+$M_RES_ADDRS.$M_SIZE],0 ; $M_NULL
 33599                                  	;mov	byte [$M_RT+66],0		;;AN004;; Reset variable
 33600 000050BB C3                      	retn					;;AN000;; Return
 33601                                  
 33602                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33603                                  ;;
 33604                                  ;;  Proc Name:	SYSDISPMSG
 33605                                  ;;
 33606                                  ;;  Function:	The DISPLAY service will output a defined message to a handle
 33607                                  ;;		requested by the caller. It also provides function to display
 33608                                  ;;		messages when handles are not applicable (ie. DOS function calls
 33609                                  ;;		00h to 0Ah) Replaceable parameters are allowed and are
 33610                                  ;;		defined previous to entry.
 33611                                  ;;
 33612                                  ;;		It is assumes that a PRELOAD function has already determined
 33613                                  ;;		the addressibilty internally to the message retriever services.
 33614                                  ;;  Inputs:
 33615                                  ;;
 33616                                  ;;  Outputs:
 33617                                  ;;
 33618                                  ;;  Psuedocode:
 33619                                  ;;		Save registers needed later
 33620                                  ;;		Get address of the message requested
 33621                                  ;;		IF Message number exists THEN
 33622                                  ;;		  IF replacable parameters were specified THEN
 33623                                  ;;		     Display message with replacable parms
 33624                                  ;;		  ELSE
 33625                                  ;;		     Display string without replacable parms
 33626                                  ;;		  ENDIF
 33627                                  ;;		  IF character input was requested THEN
 33628                                  ;;		     Wait for character input
 33629                                  ;;		  ENDIF
 33630                                  ;;		  Clear CARRY FLAG
 33631                                  ;;		ELSE
 33632                                  ;;		   Set CARRY FLAG
 33633                                  ;;		ENDIF
 33634                                  ;;		Return
 33635                                  ;;
 33636                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33637                                  
 33638                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33639                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5307h
 33640                                  
 33641                                  SYSDISPMSG:
 33642                                  	;; Save registers and values needed later
 33643 000050BC 50                      	push	ax				;;AN000;; Save changed REGs
 33644 000050BD 53                      	push	bx				;;AN000;;
 33645 000050BE 51                      	push	cx				;;AN000;;
 33646 000050BF 55                      	push	bp				;;AN000;;
 33647 000050C0 57                      	push	di				;;AN000;; Save pointer to input buffer (offset)
 33648 000050C1 06                      	push	es				;;AN000;; Save pointer to input buffer (segment)
 33649 000050C2 52                      	push	dx				;;AN000;; Save Input/Class request
 33650                                  
 33651 000050C3 89CD                    	mov	bp,cx				;;AN000;; Use BP to hold replace count
 33652 000050C5 891E[2C87]              	mov	[$M_RT+$M_RES_ADDRS.$M_HANDLE],bx
 33653                                  	;mov	[$M_RT+64],bx			;;AN000;; Save handle
 33654 000050C9 8836[3187]              	mov	[$M_RT+$M_RES_ADDRS.$M_CLASS],dh
 33655                                  	;mov	[$M_RT+69],dh			;;AN004;; Save class
 33656                                  
 33657                                  	;; Get address of the message requested
 33658 000050CD E8D8FE                  	call	$M_GET_MSG_ADDRESS		;;AN000;; Scan thru classes to find message
 33659 000050D0 09C9                    	or	cx,cx				;;AN000;; Was message found?
 33660 000050D2 7420                    	jz	short $MIF93
 33661                                  						;;AN000;; Yes, Message address in ES:DI
 33662                                  	
 33663                                  	;; Test if replacable parameters were specified
 33664 000050D4 09ED                    	or	bp,bp				;;AN000;; Were replacable parameters requested
 33665 000050D6 7505                    	jnz	short $MIF94
 33666                                  
 33667                                  	;; Display string without replacable parms
 33668 000050D8 E82100                  	call	$M_DISPLAY_STRING		;;AN000;; No, great . . . Display message
 33669 000050DB EB03                    	jmp	short $MEN94
 33670                                  $MIF94:
 33671                                  	;; Display message with replacable parms
 33672 000050DD E88401                  	call	$M_DISPLAY_MESSAGE		;;AN000;; Display the message with substitutions
 33673                                  $MEN94:
 33674 000050E0 720D                    	jc	short $MIF97
 33675 000050E2 5A                      	pop	dx				;;AN000;; Get Input/Class request
 33676 000050E3 E8F500                  	call	$M_ADD_CRLF 			;;AN004;; Check if we need to add the CR LF chars.
 33677 000050E6 07                      	pop	es				;;AN000;; Get location of input buffer (if specified)
 33678 000050E7 5F                      	pop	di				;;AN000;;
 33679                                  	;jmp	short $MEN97 ; ***
 33680                                  	; 08/04/2023
 33681                                  	;jmp	short $MEN93 ; **
 33682                                  
 33683                                  	; 08/04/2023
 33684                                  ;$MEN93:
 33685 000050E8 720D                    	jc	short $MIF104
 33686                                  ;$MEN97:
 33687 000050EA 5D                      	pop	bp				;;AN000;;
 33688 000050EB 59                      	pop	cx				;;AN000;;
 33689 000050EC 5B                      	pop	bx				;;AN000;;
 33690 000050ED 58                      	pop	ax				;;AN000;;
 33691 000050EE C3                      	retn
 33692                                   
 33693                                  $MIF97:
 33694                                  	; 08/04/2023
 33695                                  	;add	sp,6				;;AN000;;
 33696                                  	;stc					;;AN000;; Reset carry flag
 33697                                  ;$MEN97: ; ***
 33698                                  	;jmp	short $MEN93
 33699                                  	; 08/04/2023
 33700                                  	;jmp	short $MIF104
 33701                                  	; 08/04/2023
 33702 000050EF 83C40E                  	add	sp,14 ; 6+8
 33703 000050F2 F9                      	stc
 33704 000050F3 C3                      	retn
 33705                                  $MIF93:
 33706                                  	; 08/04/2023
 33707                                  	; (wrong pops ?) - correct order: pop dx, pop es, pop di -
 33708                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:533Bh
 33709 000050F4 07                      	pop	es				;;AN000;; Get pointer to input buffer (segment)
 33710 000050F5 5F                      	pop	di				;;AN000;; Get base pointer to first sublist (offset)
 33711 000050F6 5A                      	pop	dx				;;AN000;; Get base pointer to first sublist (segment)
 33712                                  	;stc	; * 				;;AN000;; Set carry flag
 33713                                  	; 08/04/2023
 33714                                  	;jmp short $MIF104 ; *
 33715                                  
 33716                                  ;$MEN93: ; **
 33717                                  ;	jc	short $MIF104
 33718                                  ;$MEN97: ; 08/04/2023
 33719                                  ;	pop	bp				;;AN000;;
 33720                                  ;	pop	cx				;;AN000;;
 33721                                  ;	pop	bx				;;AN000;;
 33722                                  ;	pop	ax				;;AN000;;
 33723                                  ;	;jmp	short $MEN104
 33724                                  ;	; 08/04/2023
 33725                                  ;	retn
 33726                                  
 33727                                  $MIF104: ; *
 33728 000050F7 83C408                  	add	sp,8				;;AN000;; Eliminate from stack
 33729 000050FA F9                      	stc					;;AN000;;
 33730                                  $MEN104:
 33731 000050FB C3                      	retn					;;AN000;; Return
 33732                                  
 33733                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33734                                  ;;
 33735                                  ;;	PROC NAME: $M_DISPLAY_STRING
 33736                                  ;;
 33737                                  ;;	FUNCTION:  Will display or write string
 33738                                  ;;	INPUTS:    ES:DI points to beginning of message
 33739                                  ;;		   CX contains the length of string to write (if applicable)
 33740                                  ;;	OUTPUTS:   None
 33741                                  ;;	REGS Revised: None
 33742                                  ;;
 33743                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33744                                  
 33745                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33746                                  
 33747                                  $M_DISPLAY_STRING:
 33748 000050FC 50                      	push	ax				;;AN000;;
 33749 000050FD 53                      	push	bx				;;AN000;;
 33750 000050FE 52                      	push	dx				;;AN000;;
 33751 000050FF 8B1E[2C87]              	mov	bx,[$M_RT+$M_RES_ADDRS.$M_HANDLE]
 33752                                  	;mov	bx,[$M_RT+64]			;;AN000;; Retrieve handle
 33753                                  	
 33754 00005103 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE 	;;AN000;; Was there a handle specified?
 33755 00005106 7505                    	jne	short $MIF107
 33756                                  
 33757 00005108 E82600                  	call	$M_DISPLAY_$_STRING		;;AN000;; No, display $ terminated string
 33758 0000510B EB03                    	jmp	short $MEN107
 33759                                  $MIF107:
 33760 0000510D E86E00                  	call	$M_DISPLAY_H_STRING		;;AN000;; Yes, display string to handle
 33761                                  $MEN107:
 33762 00005110 730D                    	jnc	short $MIF110
 33763                                  	
 33764 00005112 B459                    	mov	ah,59h	; DOS_GET_EXT_ERROR	;;AN000;;
 33765                                  	;mov	bx,0	; DOS_GET_EXT_ERROR_BX	;;AN000;; Get extended error
 33766                                  	; 08/04/2023
 33767 00005114 31DB                    	xor	bx,bx
 33768 00005116 CD21                    	int	21h				;;AN000;;
 33769                                  		; DOS - 3+ - GET EXTENDED ERROR CODE
 33770                                  		; BX = version code (0000h for DOS 3.x)
 33771 00005118 30E4                    	xor	ah,ah				;;AN000;; Clear AH
 33772                                  $MEN110: ; 08/04/2023 ; ***
 33773 0000511A 83C406                  	add	sp,6				;;AN000;; Clean up stack
 33774 0000511D F9                      	stc					;;AN000;; Flag that there was an error
 33775                                  	;jmp	short $MEN110 ; ****
 33776                                  	; 08/04/2023
 33777 0000511E C3                      	retn
 33778                                  $MIF110:
 33779                                  	;cmp	bx,$M_NO_HANDLE
 33780 0000511F 83FBFF                  	cmp	bx,0FFFFh ; $M_NO_HANDLE	;;AN000;; Was there a handle specified?
 33781 00005122 7409                    	je	short $MIF112 ; *  ; cf = 0
 33782 00005124 39C8                    	cmp	ax,cx				;;AN001;; Was it ALL written?
 33783 00005126 7405                    	je	short $MIF113 ; ** ; cf = 0
 33784 00005128 E8A700                  	call	$M_GET_EXT_ERR_39		;;AN001;; Set Extended error
 33785                                  	;add	sp,6				;;AN001;; Clean up stack
 33786                                  	;stc					;;AN001;; Flag that there was an error
 33787                                  	; 08/04/2023
 33788 0000512B EBED                    	jmp	short $MEN110 ; ***
 33789                                  	; 08/04/2023
 33790                                  ;$MIF112:
 33791                                  ;$MEN110: ; ****
 33792                                  	;jc	short $MIF117
 33793                                  $MIF112: ; 08/04/2023	; *
 33794                                  $MIF113:	; **
 33795 0000512D 5A                      	pop	dx				;;AN000;; Restore regs
 33796 0000512E 5B                      	pop	bx				;;AN000;;
 33797 0000512F 58                      	pop	ax				;;AN000;;
 33798                                  $MIF117:
 33799 00005130 C3                      	retn
 33800                                  
 33801                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33802                                  ;;
 33803                                  ;;	PROC NAME: $M_DISPLAY_$_STRING
 33804                                  ;;
 33805                                  ;;	FUNCTION:  Will display a $ terminated string
 33806                                  ;;	INPUTS:    ES:DI points to beginning of message text (not the length)
 33807                                  ;;	OUTPUTS:   None
 33808                                  ;;	REGS USED: AX,DX
 33809                                  ;;
 33810                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33811                                  
 33812                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33813                                  
 33814                                  $M_DISPLAY_$_STRING:
 33815 00005131 1E                      	push	ds				;;AN000;;
 33816 00005132 06                      	push	es				;;AN000;;
 33817 00005133 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 33818                                  
 33819                                  	; 08/04/2023
 33820 00005134 B402                    	mov	ah,2 ; DOS_DISP_CHAR
 33821                                  
 33822                                  	;cmp	cx,$M_SINGLE_CHAR		;;AN000;; Is this a single character?
 33823 00005136 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR
 33824 00005139 7518                    	jne	short $MIF119			;;AN000;; No
 33825                                  	
 33826                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 33827 0000513B 268A15                  	mov	dl,[es:di]			;;AN000;; Get the character
 33828 0000513E CD21                    	int	21h				;;AN000;; Write character
 33829                                  		; DOS - DISPLAY OUTPUT
 33830                                  		; DL = character to send to standard output
 33831 00005140 1F                      	pop	ds				;;AN000;;
 33832 00005141 88D0                    	mov	al,dl				;;AN000;; Get the character in AL
 33833 00005143 E8AC00                  	call	$M_IS_IT_DBCS 			;;AN000;; Is this the first byte of a DB character
 33834 00005146 1E                      	push	ds				;;AN000;;
 33835 00005147 06                      	push	es				;;AN000;;
 33836 00005148 1F                      	pop	ds				;;AN000;; Set DS to segment of message text
 33837 00005149 7316                    	jnc	short $MIF120 ; *
 33838                                  
 33839 0000514B 268A5501                	mov	dl,[es:di+1]			;;AN000;; Get the next character
 33840 0000514F CD21                    	int	21h				;;AN000;; Write character
 33841                                  		; DOS - DISPLAY OUTPUT
 33842                                  		; DL = character to send to standard output
 33843                                  	; 08/04/2023
 33844                                  	;clc					;;AN000;; Clear the DBCS indicator
 33845                                  ;$MIF120:
 33846 00005151 EB0D                    	jmp	short $MEN119
 33847                                  $MIF119:
 33848                                  	; 08/04/2023
 33849                                  	;mov	ah,2 ; DOS_DISP_CHAR		;;AN000;; DOS Function to display CHARACTER
 33850                                  ;$MDO123:
 33851 00005153 09C9                    	or	cx,cx				;;AN002;; Are there any left to display?
 33852                                  	;jz	short $MEN123
 33853                                  	; 18/04/2023
 33854 00005155 740A                    	jz	short $MIF120 ; cf = 0
 33855                                  $MDO123: ; 08/04/2023
 33856 00005157 268A15                  	mov	dl,[es:di]			;;AN002;; Get the character
 33857 0000515A CD21                    	int	21h				;;AN002;; Display the character
 33858                                  		; DOS - DISPLAY OUTPUT
 33859                                  		; DL = character to send to standard output
 33860 0000515C 47                      	inc	di				;;AN002;; Set pointer to next character
 33861 0000515D 49                      	dec	cx				;;AN002;; Count this character
 33862 0000515E 75F7                    	jnz	short $MDO123
 33863                                  ;$MEN123:
 33864                                  $MEN119:
 33865 00005160 F8                      	clc					;;AN000;;Char functions used don't return carry as error
 33866                                  $MIF120: ; 08/04/2023 ; *
 33867 00005161 1F                      	pop	ds				;;AN000;;
 33868 00005162 C3                      	retn
 33869                                  
 33870                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33871                                  ;;
 33872                                  ;; Scan_ctrlZ: This routine looks through the string to be printed and 
 33873                                  ;; truncates it at the Ctrl-Z if any present.
 33874                                  ;;
 33875                                  ;;	ENTRY:	ds:dx = String to be displayed
 33876                                  ;;		cx = number of chars to be displayed
 33877                                  ;;
 33878                                  ;;	EXIT:	cx = number of chars to be displayed
 33879                                  ;;
 33880                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33881                                  
 33882                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33883                                  scan_ctrlz:
 33884 00005163 57                      	push	di
 33885 00005164 50                      	push	ax
 33886 00005165 06                      	push	es
 33887 00005166 53                      	push	bx
 33888                                  
 33889 00005167 89D7                    	mov	di,dx
 33890 00005169 1E                      	push	ds
 33891 0000516A 07                      	pop	es   			;es:di points at string
 33892                                  
 33893 0000516B 89CB                    	mov	bx,cx			;save current count
 33894                                  
 33895 0000516D B01A                    	mov	al,1Ah	; Ctrl-Z
 33896 0000516F FC                      	cld
 33897 00005170 F2AE                    	repne	scasb			;find first Ctrl-Z
 33898 00005172 7503                    	jnz	short noCtrlZ		;no CtrlZ found in string
 33899                                  
 33900 00005174 29CB                    	sub	bx,cx
 33901 00005176 4B                      	dec	bx			;bx = new count to display
 33902                                  noCtrlZ:
 33903 00005177 89D9                    	mov	cx,bx			;cx = actual display count
 33904                                  
 33905 00005179 5B                      	pop	bx
 33906 0000517A 07                      	pop	es
 33907 0000517B 58                      	pop	ax
 33908 0000517C 5F                      	pop	di
 33909                                  $MIF127:	; 08/04/2023
 33910 0000517D C3                      	retn
 33911                                  
 33912                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33913                                  ;;
 33914                                  ;;	PROC NAME: $M_DISPLAY_H_STRING
 33915                                  ;;
 33916                                  ;;	FUNCTION:  Will display a string to a specified handle
 33917                                  ;;	INPUTS:    ES:DI points to beginning of message
 33918                                  ;;		   CX contains the number of bytes to write
 33919                                  ;;		   BX contains the handle to write to
 33920                                  ;;	OUPUTS:    None
 33921                                  ;;	REGS USED: AX,DX
 33922                                  ;;
 33923                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 33924                                  
 33925                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 33926                                  
 33927                                  $M_DISPLAY_H_STRING:
 33928 0000517E 31C0                    	xor	ax,ax			;;AN002;; Set number of bytes written to 0
 33929 00005180 09C9                    	or	cx,cx			;;AN002;; For performance, don't write if not necessary
 33930 00005182 74F9                    	jz	short $MIF127
 33931                                  	
 33932 00005184 1E                      	push	ds			;;AN000;;
 33933 00005185 06                      	push	es			;;AN000;;
 33934 00005186 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 33935                                  	
 33936 00005187 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 33937 00005189 89FA                    	mov	dx,di			;;AN000;; Pointer to data to write
 33938                                  
 33939 0000518B 83F901                  	cmp	cx,1 ; $M_SINGLE_CHAR	;;AN000;; Is this a single character?
 33940 0000518E 7528                    	jne	short $MIF128		;;AN000;; No
 33941                                  
 33942 00005190 CD21                    	int	21h			;;AN000;; Write character
 33943                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 33944                                  		; BX = file handle, CX = number of bytes to writ
 33945                                  
 33946 00005192 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 33947 00005193 50                      	push	ax			;;AN000;;
 33948 00005194 268A05                  	mov	al,[es:di] 		;;AN000;; Get the character
 33949 00005197 E85800                  	CALL    $M_IS_IT_DBCS		;;AN000;; Is this the first byte of a DB character
 33950 0000519A 58                      	pop	ax			;;AN000;;
 33951 0000519B 1E                      	push	ds			;;AN000;;
 33952 0000519C 06                      	push	es			;;AN000;;
 33953 0000519D 1F                      	pop	ds			;;AN000;; Set DS to segment of message text
 33954 0000519E 7306                    	jnc	short $MIF129
 33955                                  	
 33956 000051A0 F8                      	clc				;;AN000;; Clear the DBCS indicator
 33957 000051A1 B440                    	mov	ah,40h ; DOS_WRITE_HANDLE ;;AN000;; DOS function to write to a handle
 33958 000051A3 42                      	inc	dx			;;AN000;; Point to next character
 33959 000051A4 CD21                    	int	21h			;;AN000;; Write character
 33960                                  		; DOS - 2+ - WRITE TO FILE WITH HANDLE
 33961                                  		; BX = file handle, CX = number of bytes to write, 
 33962                                  $MIF129:
 33963                                  ;SR;
 33964                                  ; If the single char happened to be a Ctrl-Z, the dos write would return
 33965                                  ;0 chars written making the caller think there was an error writing. To 
 33966                                  ;avoid this, we check if the single char was a Ctrl-Z and if so, return that
 33967                                  ;the char was written, thus fooling the caller.
 33968                                  
 33969 000051A6 9C                      	pushf				;save flags
 33970 000051A7 26803D1A                	cmp	byte [es:di],1Ah	;is char a Ctrl-Z?
 33971 000051AB 7502                    	jne	short m_popf_j		;no, continue
 33972                                  
 33973 000051AD 89C8                    	mov	ax,cx			;yes, fake as if it was written
 33974                                  m_popf_j:
 33975                                  	; 08/04/2023
 33976                                  	;$M_POPF  ; macro in 'sysmsg.inc' (MSDOS 6.0)
 33977 000051AF EB01                    	jmp	short m_popf		;restore flags
 33978                                  
 33979                                  ; 07/04/2023
 33980                                  ; ---------------------------
 33981                                  ; MSDOS 6.0, SYSMSG.INC, 1991
 33982                                  ; ---------------------------
 33983                                  	; $M_POPF macro
 33984                                  	;jmp	short $+3
 33985                                  intret:
 33986 000051B1 CF                      	iret
 33987                                  m_popf:
 33988 000051B2 0E                      	push	cs
 33989 000051B3 E8FBFF                  	call	intret
 33990                                  	;;; end macro	
 33991                                  ; ---------------------------
 33992                                  
 33993 000051B6 EB18                    	jmp	short $MEN128
 33994                                  
 33995                                  $MIF128:
 33996                                  ;SR;
 33997                                  ; Prescan the string looking for Ctrl-Z. We terminate the message the moment 
 33998                                  ;we hit a Ctrl-Z. cx will contain the number of characters to be printed.
 33999                                  
 34000 000051B8 55                      	push	bp			; M007
 34001 000051B9 51                      	push	cx
 34002 000051BA E8A6FF                  	call	scan_ctrlz		;cx = count without Ctrl-Z
 34003 000051BD 89CD                    	mov	bp,cx			;store no ^Z count in bp ;M007
 34004 000051BF 59                      	pop	cx			;get old count back ;M007
 34005                                  	
 34006 000051C0 CD21                    	int	21h			;;AN000;; Write String at DS:SI to handle
 34007                                  	;jnc	short chk_count		;no error, adjust return count
 34008                                  	;jmp	short m_cnt_ok		;error, return with carry set;M007
 34009                                  	; 08/04/2023
 34010 000051C2 720B                    	jc	short m_cnt_ok 
 34011                                  ;M007
 34012                                  ; If we are writing to con and there is a Ctrl-Z in the string, the
 34013                                  ;return count will be much less and if this returns to the caller we can get
 34014                                  ;spurious error messages. We check here if the count returned is same as
 34015                                  ;original count or same as the count if we stop at Ctrl-Z. In the second
 34016                                  ;case, we fake it as if all bytes have been written. If the return count
 34017                                  ;does not match either count, then we had some other disk error (such as
 34018                                  ;insufficient disk space) and we pass it through
 34019                                  
 34020                                  chk_count:
 34021 000051C4 39C1                    	cmp	cx,ax			;have all bytes been written?;M007
 34022 000051C6 7407                    	je	short m_cnt_ok		;there was an error writing ;M007
 34023 000051C8 39C5                    	cmp	bp,ax			;count = Ctrl-Z count? ;M007
 34024 000051CA F8                      	clc				;no error either way ;M007
 34025 000051CB 7502                    	jne	short m_cnt_ok		;no, pass it through ;M007
 34026 000051CD 89C8                    	mov	ax,cx			;return old count ;M007
 34027                                  m_cnt_ok:				; M007
 34028 000051CF 5D                      	pop	bp			; M007
 34029                                  $MEN128:
 34030 000051D0 1F                      	pop	ds			;;AN000;;
 34031                                  ;$MIF127: ; 08/04/2023
 34032 000051D1 C3                      	retn
 34033                                  
 34034                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34035                                  ;;
 34036                                  ;;	PROC NAME: $M_GET_EXT_ERR_39
 34037                                  ;;
 34038                                  ;;	FUNCTION:  Will set registers for extended error #39
 34039                                  ;;	INPUTS:    None
 34040                                  ;;	OUPUTS:    AX,BX,CX set
 34041                                  ;;	REGS USED:
 34042                                  ;;
 34043                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34044                                  
 34045                                  	; 08/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34046                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:542Dh
 34047                                  $M_GET_EXT_ERR_39:
 34048 000051D2 B82700                  	mov	ax,27h ; EXT_ERR_39	;AN001; Set AX=39
 34049                                  	;mov	bx,(ERROR_CLASS_39 SHR 8) + ACTION_39
 34050 000051D5 BB0400                  	mov	bx,4			;AN001; Set BH=1 BL=4
 34051                                  	;mov	ch,LOCUS_39		;AN001; Set CH=1
 34052 000051D8 B501                    	mov	ch,1			;AN001;
 34053 000051DA C3                      	retn				;AN001;
 34054                                  
 34055                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34056                                  ;;
 34057                                  ;;	PROC NAME: $M_ADD_CRLF
 34058                                  ;;
 34059                                  ;;	FUNCTION:  Will decide whether to display a CRLF
 34060                                  ;;	INPUTS:    DX contains the Input/Class requested
 34061                                  ;;	OUTPUTS:   None
 34062                                  ;;	REGS Revised: CX,ES,DI
 34063                                  ;;
 34064                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34065                                  
 34066                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34067                                  
 34068                                  $M_ADD_CRLF:
 34069                                  	;cmp	dh,0FFh
 34070 000051DB 80FEFF                  	cmp	dh,utility_msg_class	;;AN004;; Is it a utility message?
 34071 000051DE 7411                    	je	short $MIF134		;;AN004;; Yes
 34072 000051E0 F6C680                  	test	dh,80h; $M_NO_CRLF_MASK	;;AN004;; Are we to supress the CR LF?
 34073 000051E3 750C                    	jnz	short $MIF135
 34074                                  					;;AN004;; No	
 34075 000051E5 1E                      	push	ds			;;AN004;;
 34076 000051E6 07                      	pop	es			;;AN004;; Set ES to data segment
 34077 000051E7 8D3E[2F87]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_CRLF]
 34078                                  	;lea	di,[$M_RT+67]		;;AN004;; Point at CRLF message
 34079 000051EB B90200                  	mov	cx,2 ; $M_CRLF_SIZE	;;AN004;; Set the message size
 34080 000051EE E80BFF                  	call	$M_DISPLAY_STRING	;;AN004;; Display the CRLF
 34081                                  $MIF135:
 34082                                  $MIF134:
 34083 000051F1 C3                      	retn				;;AN004;; Return
 34084                                  
 34085                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34086                                  ;;
 34087                                  ;;	PROC NAME: $M_IS_IT_DBCS
 34088                                  ;;
 34089                                  ;;	FUNCTION:  Will decide whether character is Single or Double Byte
 34090                                  ;;	INPUTS:    AL contains the byte to be checked
 34091                                  ;;	OUTPUTS:   Carry flag = 0 if byte is NOT in DBCS range
 34092                                  ;;		   Carry flag = 1 if byte IS in DBCS range
 34093                                  ;;	REGS USED: All restored
 34094                                  ;;
 34095                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34096                                  
 34097                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34098                                  
 34099                                  $M_IS_IT_DBCS:
 34100 000051F2 06                      	push	es			;;AN000;; Save Extra Segment register
 34101 000051F3 57                      	push	di			;;AN000;; Save DI register
 34102                                  
 34103 000051F4 C43E[2887]              	les	di,[$M_RT+$M_RES_ADDRS.$M_DBCS_VEC]
 34104                                  	;les	di,[$M_RT+60]		;;AN000;;
 34105 000051F8 09FF                    	or	di,di			;;AN000;; Was the DBCS vector set?
 34106 000051FA 7417                    	jz	short $MIF138		;;AN000;; No
 34107                                  $MDO139:
 34108 000051FC 26833D00                	cmp	word [es:di],0 ; $M_DBCS_TERM
 34109                                  					;;AN000;; Is this the terminating flag?
 34110 00005200 F8                      	clc				;;AN000;;
 34111 00005201 7410                    	jz	short $MEN139
 34112                                  					;;AN000;; No
 34113 00005203 263A05                  	cmp	al,[es:di]		;;AN000;; Does the character fall in the DBCS range?
 34114 00005206 7207                    	jnae	short $MIF141 ; jb	;;AN000;; No		
 34115 00005208 263A4501                	cmp	al,[es:di+1]		;;AN000;; Does the character fall in the DBCS range?
 34116 0000520C 7701                    	jnbe	short $MIF141 ; ja	;;AN000;; No
 34117                                  					;;AN000;; Yes
 34118 0000520E F9                      	stc				;;AN000;; Set carry flag
 34119                                  $MIF141:
 34120 0000520F 47                      	inc	di			;;AN000;;
 34121 00005210 47                      	inc	di			;;AN000;;
 34122 00005211 EBE9                    	jmp	short $MDO139		;;AN000;; Go to next vector
 34123                                  $MEN139:
 34124                                  $MIF138:
 34125 00005213 5F                      	pop	di			;;AN000;; Restore DI register
 34126 00005214 07                      	pop	es			;;AN000;; Restore Extra Segment register
 34127 00005215 C3                      	retn				;;AN000;; Return
 34128                                  
 34129                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34130                                  ;;
 34131                                  ;;	PROC NAME: $M_CONVERT2ASC
 34132                                  ;;
 34133                                  ;;	FUNCTION: Convert a binary number to a ASCII string
 34134                                  ;;	INPUTS: DX:AX contains the number to be converted
 34135                                  ;;		$M_RT_DIVISOR contains the divisor
 34136                                  ;;	OUTPUTS: CX contains the number of characters
 34137                                  ;;		Top of stack  --> Last character
 34138                                  ;;				     . . .
 34139                                  ;;		Bot of stack  --> First character
 34140                                  ;;	REGS USED:
 34141                                  ;;
 34142                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34143                                  
 34144                                  	; 09/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34145                                  	; 15/06/2023
 34146                                  $M_CONVERT2ASC:
 34147 00005216 8F06[3287]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34148                                  	;pop	word [$M_RT+70]			;;AN000;; Save Return Address
 34149                                  	
 34150 0000521A 31DB                    	xor	bx,bx				;;AN000;; Use BX as a swapping register
 34151 0000521C 93                      	xchg	bx,ax				;;AN000;; Initialize - Low Word in BX
 34152 0000521D 92                      	xchg	ax,dx				;;AN000;;	  - High Word in AX
 34153                                  $MDO145:					;;AN000;; DO UNTIL Low Word becomes zero
 34154 0000521E F736[3687]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34155                                  	;div	word [$M_RT+74]			;;AN000;; Divide High Word by divisor
 34156 00005222 93                      	xchg	bx,ax				;;AN000;; Setup to divide Low Word using remainder
 34157                                  						;;AN000;;  and save reduced High Word in BX
 34158 00005223 F736[3687]              	div	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR]
 34159                                  	;div	word [$M_RT+74]			;;AN000;; Divide Low Word by divisor
 34160                                  
 34161 00005227 83FA09                  	cmp	dx,9				;;AN000;; Make a digit of the remainder
 34162 0000522A 7605                    	jna	short $MIF146			;;AN000;; 0-9
 34163 0000522C 80C237                  	add	dl,55	; add dl,37h		;;AN000;; Make A to F ASCII
 34164 0000522F EB03                    	jmp	short $MEN146
 34165                                  $MIF146:
 34166 00005231 80C230                  	add	dl,'0'				;;AN000;; Make 0 to 9 ASCII
 34167                                  $MEN146:
 34168 00005234 52                      	push	dx				;;AN000;; Save the digit on the stack
 34169 00005235 41                      	inc	cx				;;AN000;; Count that digit
 34170 00005236 09C0                    	or	ax,ax				;;AN000;; Are we done?
 34171 00005238 7504                    	jnz	short $MLL149			;;AN000;; No
 34172 0000523A 09DB                    	or	bx,bx				;;AN000;; AX and BX must be ZERO!!
 34173 0000523C 741F                    	jz	short $MEN145 ; * ; ax = 0	;;AN000;; Yes
 34174                                  $MLL149:
 34175 0000523E 83F903                  	cmp	cx,3 ; $M_FIRST_THOU		;;AN000;; Are we at the first thousands mark
 34176                                  ; 28/04/2023
 34177 00005241 740A                    	je	short $MIF153
 34178                                  ;	jne	short $MIF150			;;AN000;; No
 34179                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34180                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 34181                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34182                                  ;	;jne	short $MIF151
 34183                                  ;	; 09/04/2023
 34184                                  ;	jne	short $MEN150
 34185                                  ;						;;AN000;; Yes
 34186                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34187                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34188                                  ;	inc	cx				;;AN000;;
 34189                                  ;$MIF151:
 34190                                  ;	jmp	short $MEN150
 34191                                  
 34192                                  $MIF150:
 34193                                  	; 15/06/2023 (6)
 34194                                  	; MSDOS 6.0
 34195                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54ABh 
 34196                                  	;cmp	cx,6 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark
 34197                                  	; 15/06/2023 (7)
 34198                                  	; MSDOS 6.22
 34199                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C78h 
 34200 00005243 83F907                  	cmp	cx,7 ; $M_SECOND_THOU		;;AN000;; Are we at the first thousands mark	
 34201                                  
 34202                                  ; 28/04/2023
 34203 00005246 7405                    	je	short $MIF153
 34204                                  ;	jne	short $MIF154			;;AN000;; No
 34205                                  ;	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34206                                  ;	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 34207                                  ;	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34208                                  ;	;jne	short $MIF155			;;AN000;; No
 34209                                  ;	; 09/04/2023
 34210                                  ;	jne	short $MEN154
 34211                                  ;						;;AN000;; Yes				
 34212                                  ;	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34213                                  ;	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34214                                  ;	inc	cx				;;AN000;;
 34215                                  ;$MIF155:
 34216                                  ;	jmp	short $MEN154
 34217                                  
 34218                                  $MIF154:
 34219                                  	; 15/06/2023 (9)
 34220                                  	; MSDOS 6.0
 34221                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54BDh 
 34222                                  	;cmp	cx,9 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34223                                  	; 15/06/2023 (11)
 34224                                  	; MSDOS 6.22
 34225                                  	; MSDOS 6.22 COMMAND.COM - TRANGROUP:5C8Ah 
 34226 00005248 83F90B                  	cmp	cx,11 ; $M_THIRD_THOU		;;AN000;; Are we at the first thousands mark
 34227 0000524B 750B                    	jne	short $MIF158			;;AN000;; No  
 34228                                  ; 28/04/2023
 34229                                  $MIF153:
 34230                                  	;cmp	$M_SL.$M_S_PAD,$M_COMMA		;;AN000;; Is the pad character a comma?
 34231 0000524D 807C0A2C                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_PAD],','	
 34232                                  	;cmp	byte [si+0Ah],',' ; $M_COMMA
 34233 00005251 7505                    	jne	short $MIF159			;;AN000;; No
 34234                                  						;;AN000;; Yes
 34235 00005253 FF36[3F87]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_THOU_SEPARA]
 34236                                  	;push	word [$M_RT+83]			;;AN000;; Insert a thousand separator
 34237 00005257 41                      	inc	cx				;;AN000;;
 34238                                  $MIF159:
 34239                                  $MIF158:
 34240                                  $MEN154:
 34241                                  $MEN150:					;;AN000;;
 34242 00005258 93                      	xchg	ax,bx				;;AN000;; Setup to divide the reduced High Word
 34243                                  						;;AN000;;  and Revised Low Word
 34244 00005259 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34245                                  	; 28/04/2023
 34246 0000525B EBC1                    	jmp	short $MDO145
 34247                                  ;$MEN145:
 34248                                  	; 28/04/2023
 34249                                  	;xor	ax,ax				;;AN000;; Reset remainder
 34250                                  $MEN145: ; 09/04/2023 ; * ; ax = 0
 34251 0000525D 31D2                    	xor	dx,dx				;;AN000;; Reset remainder
 34252 0000525F FF36[3287]              	push	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34253                                  	;push	word [$M_RT+70]			;;AN000;; Restore Return Address
 34254 00005263 C3                      	retn					;;AN000;; Return
 34255                                  
 34256                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34257                                  ;;
 34258                                  ;;	PROC NAME: $M_DISPLAY_MESSAGE
 34259                                  ;;
 34260                                  ;;	FUNCTION:  Will display or write entire message (with replacable parameters)
 34261                                  ;;	INPUTS:    ES:DI points to beginning of message
 34262                                  ;;		   DS:SI points to first sublist structure in chain
 34263                                  ;;		   BX contains the handle to write to (if applicable)
 34264                                  ;;		   CX contains the length of string to write (before substitutions)
 34265                                  ;;		   BP contains the count of replacables
 34266                                  ;;
 34267                                  ;;	OUTPUTS:
 34268                                  ;;	REGS USED: All
 34269                                  ;;
 34270                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34271                                  
 34272                                  	; 10/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34273                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:54DBh
 34274                                  
 34275                                  $M_DISPLAY_MESSAGE:
 34276                                  ; $DO						;;AN000;; Note: DS:SI -> message
 34277                                  $MDO165:
 34278 00005264 31D2                    	xor	dx,dx				;;AN000;; Set size = 0
 34279 00005266 09C9                    	or	cx,cx				;;AN000;; Are we finished the message yet?
 34280                                  ;; $IF NZ					;;AN000;; No
 34281 00005268 7421                    	jz	short $MIF166			;;AN000;; Yes
 34282 0000526A B425                    	mov	ah,"%"				;;AN000;; Prepare to scan for %
 34283 0000526C B000                    	mov	al,0				;;AN004;;
 34284                                  ;; $DO						;;AN000;; Scan through string until %
 34285                                  $MDO167:
 34286 0000526E 263825                  	cmp	byte [es:di],ah			;;AN000;; Is this character NOT a %
 34287                                  ;; $LEAVE E,AND					;;AN000;; No
 34288 00005271 750A                    	jne	short $MLL168
 34289 00005273 26386501                	cmp	byte [es:di+1],ah		;;AN000;; Is the next character also a %
 34290                                  ;; $LEAVE NE,AND				;;AN000;; No
 34291 00005277 7404                    	je	short $MLL168
 34292                                  
 34293 00005279 38E0                    	cmp	al,ah				;;AN000;; Was the character before a %
 34294                                  ;; $LEAVE NE					;;AN000;; No, GREAT found it
 34295 0000527B 750E                    	jne	short MEN167
 34296                                  $MLL168:
 34297 0000527D 268A05                  	mov	al,[es:di]			;;AN004;; Yes, (to any of the above)
 34298 00005280 E86FFF                  	call	$M_IS_IT_DBCS			;;AN004;; Is this character the first part of a DBCS?
 34299                                  ;;; $IF C					;;AN004;; Yes
 34300 00005283 7301                    	jnc	short $MIF169
 34301 00005285 47                      	inc	di				;;AN004;; Increment past second part
 34302                                  ;;; $ENDIF					;;AN004;;
 34303                                  $MIF169:
 34304 00005286 47                      	inc	di				;;AN000;; Next character in string
 34305 00005287 42                      	inc	dx				;;AN000;; Size = Size + 1
 34306 00005288 49                      	dec	cx				;;AN000;; Decrement total size
 34307                                  ;; $ENDDO Z					;;AN000;; Exit scan if we're at the end of the line
 34308 00005289 75E3                    	jnz	short $MDO167
 34309                                  $MEN167:
 34310                                  ;; $ENDIF					;;AN000;;
 34311                                  $MIF166:
 34312 0000528B 56                      	push	si				;;AN000;; Save beginning of sublists
 34313 0000528C 87CA                    	xchg	cx,dx				;;AN000;; Get size of message to display (tot sz in DX)
 34314 0000528E 09ED                    	or	bp,bp				;;AN000;; Do we have any replacables to do?
 34315                                  ;; $IF NZ					;;AN000;; Yes
 34316 00005290 7431                    	jz	short $MIF173
 34317 00005292 4D                      	dec	bp				;;AN000;; Decrement number of replacables
 34318                                  
 34319                                  ;; Search through sublists to find applicable one
 34320                                  
 34321 00005293 833E[3487]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34322                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34323                                  ;;; $IF E					;;AN000;; No
 34324 00005298 7529                    	jne	short $MIF174
 34325                                  ;;; $SEARCH					;;AN000;;
 34326                                  $MDO175:
 34327                                  	;mov	al,$M_SL.$M_S_ID ;$M_SL=DS:[SI]	;;AN000;; Get ID byte
 34328 0000529A 8A4406                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_ID]
 34329                                  	;mov	al,[si+6]
 34330 0000529D 0430                    	add	al,30h				;;AN000;; Convert to ASCII
 34331                                  	; 28/04/2023					
 34332 0000529F 263A4501                	cmp	al,[es:di+1]			;;AN000;; Is this the right sublist?
 34333                                  ;;; $EXITIF E					;;AN000;;
 34334                                  	;jne	short $MIF175
 34335                                  ;;; $ORELSE					;;AN000;; No
 34336                                  	;jmp	short $MSR175
 34337                                  	; 28/04/2023
 34338 000052A3 741E                    	je	short $MSR175
 34339                                  $MIF175:
 34340 000052A5 3C30                    	cmp	al,30h ; $M_SPECIAL_CASE	;;AN000;; Does this sublist have ID = 0
 34341                                  ;;; $LEAVE E,AND				;;AN000;; Yes
 34342 000052A7 7504                    	jne	short $MLL178
 34343 000052A9 09D2                    	or	dx,dx				;;AN000;; Are we at the end of the message?
 34344                                  ;;; $LEAVE Z					;;AN000;; No
 34345 000052AB 7404                    	jz	short $MEN175
 34346                                  $MLL178:
 34347                                  	;add	si,$M_SL.$M_S_SIZE		;;AN000;; Next SUBLIST
 34348                                  	;add	si,[si+$M_SUBLIST_STRUC.$M_S_SIZE] ; [si+0]
 34349                                  	;;add	si,[si+0]
 34350 000052AD 0334                    	add	si,[si]
 34351                                  ;;; ENDLOOP					;;AN000;; Yes
 34352 000052AF EBE9                    	jmp	short $MDO175
 34353                                  $MEN175:
 34354 000052B1 803E[3187]FF            	cmp	byte [$M_RT+$M_RES_ADDRS.$M_CLASS],utility_msg_class
 34355                                  	;cmp	byte [$M_RT+69],0FFh		;;AN004;; Is it a utility message?
 34356                                  ;;;; $IF E					;;AN004;; Yes
 34357 000052B6 7508                    	jne	short $MIF180
 34358 000052B8 42                      	inc	dx				;;AN000;; Remember to display CR,LF
 34359 000052B9 42                      	inc	dx				;;AN000;;  at the end of the message
 34360 000052BA 49                      	dec	cx				;;AN000;; Adjust message length
 34361 000052BB 49                      	dec	cx				;;AN000;;
 34362 000052BC 4F                      	dec	di				;;AN000;; Adjust ending address of message
 34363 000052BD 4F                      	dec	di				;;AN000;;
 34364                                  ;;;; $ELSE					;;AN004;; No
 34365 000052BE EB03                    	jmp	short $MEN180
 34366                                  $MIF180:
 34367 000052C0 BAFFFF                  	mov	dx,-1 				;;AN004;; Set special case
 34368                                  ;;;; $ENDIF					;;AN004;;
 34369                                  $MEN180:
 34370                                  ;;; $ENDSRCH					;;AN000;;
 34371                                  $MSR175:
 34372                                  ;; $ENDIF					;;AN000;;
 34373                                  $MIF174:
 34374                                  ; $ENDIF					;;AN000;;
 34375                                  $MIF173:
 34376                                  ;; Prepare and display this part of message
 34377                                  
 34378 000052C3 57                      	push	di				;;AN000;; Save pointer to replace number
 34379 000052C4 29CF                    	sub	di,cx				;;AN000;; Determine beginning of string
 34380 000052C6 E833FE                  	call	$M_DISPLAY_STRING		;;AN000;; Display string until % (or end)
 34381 000052C9 5F                      	pop	di				;;AN000;; Get back pointer to replace number
 34382 000052CA 59                      	pop	cx				;;AN000;; Clean up stack in case error
 34383                                  ; $LEAVE C,LONG					;;AN000;; Fail if carry was set
 34384                                  	;jnc	short $MXL3
 34385                                  	;jmp	$MEN165
 34386                                  	; 02/05/2023
 34387 000052CB 7214                    	jc	short $MEN165
 34388                                  $MXL3:
 34389 000052CD 51                      	push	cx				;;AN000;;
 34390                                  
 34391                                  ;; Save and reset pointer registers
 34392                                  
 34393 000052CE 89D1                    	mov	cx,dx				;;AN000;; Get the size of the rest of the message
 34394                                  	;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h
 34395 000052D0 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0 ; $M_SPECIAL_CASE-30h
 34396                                  	;cmp	byte [si+6],0 			;;AN000;; Is this the %0 case?
 34397                                  ; $IF NE					;;AN000;; No
 34398 000052D4 7412                    	je	short $MIF187			;;AN000;; Yes			
 34399 000052D6 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 34400                                  ;; $IF NZ					;;AN000;; No
 34401 000052D8 7406                    	jz	short $MIF188			;;AN000;; Yes
 34402 000052DA 49                      	dec	cx				;;AN000;; Decrement total size (%)
 34403 000052DB 49                      	dec	cx				;;AN000;; Decrement total size (#)
 34404 000052DC 47                      	inc	di				;;AN000;; Go past %
 34405 000052DD 47                      	inc	di				;;AN000;; Go past replace number
 34406                                  ;; $ELSE					;;AN000;; Yes, (Note this will not leave because INC)
 34407                                  	;jmp	short $MEN188
 34408                                  	; 28/04/2023
 34409 000052DE EB15                    	jmp	short $MEN187
 34410                                  $MIF188:
 34411 000052E0 5E                      	pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 34412                                  ;; $ENDIF					;;AN000;; Yes, Note this will not leave because INC
 34413                                  $MEN188:
 34414                                  ; $ELSE 					;;AN000;;
 34415                                  	;jmp	short $MEN187
 34416                                  	; 28/04/2023
 34417                                  	; zf = 1
 34418                                  	;jmp	short $MEN165 
 34419                                  
 34420                                  ; 28/04/2023
 34421                                  $MXL4:
 34422                                  $MLL214:
 34423                                  $MEN165:
 34424 000052E1 C706[3487]0000          	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 34425                                  	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 34426                                  						;;AN000;; Reset message number to null
 34427 000052E7 C3                      	retn					;;AN000;; Return
 34428                                  
 34429                                  $MIF187:
 34430 000052E8 09C9                    	or	cx,cx				;;AN000;; Are we finished the whole message?
 34431                                  ;; $IF Z					;;AN004;; No
 34432                                  	;jnz	short $MIF192
 34433                                  	;pop	si				;;AN000;; Get back pointer to beginning of SUBLISTs
 34434                                  ;; $ELSE					;;AN000;; No
 34435                                  	;jmp	short $MEN192
 34436                                  	; 28/04/2023
 34437 000052EA 74F4                    	jz	short $MIF188
 34438                                  $MIF192:
 34439 000052EC 83F9FF                  	cmp	cx,-1				;;AN004;; Are we at the end of the message?
 34440                                  ;;; $IF Z					;;AN004;; No
 34441 000052EF 7502                    	jnz	short $MIF194
 34442 000052F1 31C9                    	xor	cx,cx				;;AN004;;
 34443                                  ;;; $ENDIF					;;AN000;;
 34444                                  $MIF194:
 34445 000052F3 09FF                    	or	di,di				;;AN004;; Turn ZF off
 34446                                  ;; $ENDIF					;;AN000;;
 34447                                  $MEN192:
 34448                                  ; $ENDIF					;;AN000;; Note this will not leave because INC
 34449                                  $MEN187:
 34450                                  ; $LEAVE Z					;;AN000;;
 34451 000052F5 74EA                    	jz	short $MEN165
 34452                                  	;
 34453 000052F7 55                      	push	bp				;;AN000;; Save the replace count
 34454 000052F8 57                      	push	di				;;AN000;; Save location to complete message
 34455 000052F9 06                      	push	es				;;AN000;;
 34456 000052FA 51                      	push	cx				;;AN000;; Save size of the rest of the message
 34457 000052FB 31C9                    	xor	cx,cx				;;AN000;; Reset CX used for character count
 34458                                  
 34459                                  ;; Determine what action is required on parameter
 34460                                  
 34461 000052FD 833E[3487]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34462                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34463                                  ; $IF E						;;AN000;;
 34464 00005302 753B                    	jne	short $MIF199
 34465                                  
 34466                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 34467 00005304 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 34468                                  	;test	byte [si+7],0Fh			;;AN000;;
 34469                                  ;; $IF Z					;;AN000;;
 34470 00005308 7508                    	jnz	short $MIF200
 34471                                  
 34472                                  ;; Character type requested
 34473                                  
 34474                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 34475 0000530A C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 34476                                  	;les	di,[si+2]
 34477 0000530D E84801                  	call	$M_CHAR_REPLACE			;;AN000;;
 34478                                  ;; $ELSE					;;AN000;; Get the rest of the message to display
 34479 00005310 EB28                    	jmp	short $MEN200
 34480                                  $MIF200:
 34481                                  ;; ENDIF					;;AN000;;
 34482                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 34483 00005312 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 34484                                  	;test	byte [si+7],0Dh			;;AN000;;
 34485                                  ;; $IF Z,OR					;;AN000;;
 34486 00005316 740C                    	jz	short $MLL202
 34487                                  	;test	byte ptr $M_SL.$M_S_FLAG,NOT Unsgn_Bin_Type AND $M_TYPE_MASK
 34488 00005318 F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 34489                                  	;test	byte [si+7],0Eh			;;AN000;;
 34490                                  ;;; $IF Z,OR					;;AN000;;
 34491 0000531C 7406                    	jz	short $MLL202
 34492                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Bin_Hex_Type and $M_TYPE_MASK
 34493 0000531E F644070C                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Ch
 34494                                  	;test	byte [si+7],0Ch			;;AN000;;
 34495                                  ;;;; $IF Z 					;;AN000;;
 34496 00005322 7508                    	jnz	short $MIF202
 34497                                  $MLL202:
 34498                                  
 34499                                  ;; Numeric type requested
 34500                                  
 34501                                  	;les	di,dword ptr $M_SL.$M_S_VALUE	;;AN000;; Load pointer to replacing parameter
 34502 00005324 C47C02                  	les	di,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 34503 00005327 E85601                  	call	$M_BIN2ASC_REPLACE		;;AN000;;
 34504                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 34505 0000532A EB0E                    	jmp	short $MEN202
 34506                                  $MIF202:
 34507                                  ;;;; ENDIF					;;AN000;;
 34508                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Date_Type and $M_TYPE_MASK
 34509 0000532C F644070B                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Bh
 34510                                  	;test	byte [si+7],0Bh			;;AN000;;
 34511                                  ;;;; $IF E					;;AN000;;
 34512 00005330 7505                    	jnz	short $MIF204
 34513                                  
 34514                                  ;; Date type requested
 34515                                  
 34516 00005332 E8BE01                  	call	$M_DATE_REPLACE			;;AN000;;
 34517                                  ;;;; $ELSE					;;AN000;; Get the rest of the message to display
 34518 00005335 EB03                    	jmp	short $MEN204
 34519                                  $MIF204:					;;AN000;;
 34520                                  
 34521                                  ;; Time type requested (Default if we have not matched until here)
 34522                                  
 34523 00005337 E87002                  	call	$M_TIME_REPLACE			;;AN000;;
 34524                                  
 34525                                  ;;;; $ENDIF					;;AN000;;
 34526                                  $MEN204:
 34527                                  ;;; $ENDIF					;;AN000;;
 34528                                  $MEN202:
 34529                                  ;; $ENDIF					;;AN000;;
 34530                                  $MEN200:
 34531                                  
 34532                                  ;; With the replace information of the Stack, display the replaceable field
 34533                                  
 34534 0000533A E85F00                  	call	$M_DISPLAY_REPLACE		;;AN000;; Display the replace
 34535                                  
 34536                                  ;; None of the above - Extended/Parse replace
 34537                                  ; $ELSE 					;;AN000;;
 34538 0000533D EB03                    	jmp	short $MEN199
 34539                                  $MIF199:
 34540 0000533F E81600                  	call	$M_EXT_PAR_REPLACE		;;AN000;;
 34541                                  ; $ENDIF					;;AN000;;
 34542                                  $MEN199:
 34543                                  
 34544                                  ;; We must go back and complete the message after the replacable parameter if there is any left
 34545                                  
 34546                                  ; $IF NC					;;AN000;; IF there was an error displaying then EXIT
 34547 00005342 7207                    	jc	short $MIF211
 34548                                  	;
 34549 00005344 59                      	pop	cx				;;AN000;; Get size of the rest of the message
 34550 00005345 07                      	pop	es				;;AN000;; Get address of the rest of the message
 34551 00005346 5F                      	pop	di				;;AN000;;
 34552 00005347 5D                      	pop	bp				;;AN000;; Get replacment count
 34553 00005348 5E                      	pop	si				;;AN000;; ELSE get address of first sublist structure
 34554                                  ; $ELSE						;;AN000;;
 34555 00005349 EB03                    	jmp	short $MEN211
 34556                                  $MIF211:
 34557 0000534B 83C40A                  	add	sp,10				;;AN000;; Clean up stack if error
 34558                                  	; 28/04/2023
 34559                                  	;stc					;;AN000;;
 34560                                  ; $ENDIF					;;AN000;;
 34561                                  $MEN211:
 34562 0000534E 833E[3487]00            	cmp	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0 ; $M_NULL
 34563                                  	;cmp	word [$M_RT+72],0		;;AN000;; Is this an Extended/Parse case
 34564                                  ; $ENDDO NE,OR					;;AN000;;
 34565 00005353 758C                    	jne	short $MLL214
 34566                                  ; $ENDDO C,LONG					;;AN000;; Go back and display the rest of the message
 34567                                  	; 10/04/2023
 34568                                  	;jc	short $MXL4
 34569 00005355 E90CFF                  	jmp	$MDO165
 34570                                  
 34571                                  ; 28/04/2023
 34572                                  ;$MXL4:
 34573                                  ;$MLL214:
 34574                                  ;$MEN165:
 34575                                  ;	mov	word [$M_RT+$M_RES_ADDRS.$M_MSG_NUM],0
 34576                                  ;	;mov	word [$M_RT+72],0		;;AN000;; IF there was an error displaying then EXIT
 34577                                  ;						;;AN000;; Reset message number to null
 34578                                  ;	retn					;;AN000;; Return
 34579                                  
 34580                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34581                                  ;;
 34582                                  ;;	PROC NAME: $M_EXT_PAR_REPLACE
 34583                                  ;;
 34584                                  ;;	FUNCTION:
 34585                                  ;;	INPUTS:
 34586                                  ;;	OUPUTS:
 34587                                  ;;
 34588                                  ;;	REGS USED:
 34589                                  ;;
 34590                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34591                                  
 34592                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34593                                  
 34594                                  $M_EXT_PAR_REPLACE:
 34595 00005358 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 34596 0000535A A1[3487]                	mov	ax,[$M_RT+$M_RES_ADDRS.$M_MSG_NUM]
 34597                                  	;mov	ax,[$M_RT+72]			;;AN000;; Prepare for get binary value (LOW)
 34598 0000535D C706[3687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 34599                                  	;mov	word [$M_RT+74],10 ; $M_BASE10	;;AN000;; Set default divisor
 34600 00005363 E8B0FE                  	call	$M_CONVERT2ASC			;;AN000;;
 34601                                  $MDO215:
 34602 00005366 58                      	pop	ax				;;AN000;; Get character in register
 34603 00005367 8887[3887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 34604                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 34605 0000536B 43                      	inc	bx				;;AN000;; Increase buffer count
 34606 0000536C 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 34607 0000536F 7503                    	jne	short $MIF216			;;AN000;; No
 34608 00005371 E80D00                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34609                                  $MIF216:
 34610 00005374 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 34611 00005376 75EE                    	jnz	short $MDO215
 34612                                  
 34613 00005378 B80D0A                  	mov	ax,0A0Dh ; mov ax,$M_CR_LF	;;AN000;; Move char into the buffer
 34614 0000537B 8987[3887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],ax
 34615                                  	;;mov	[bx+$M_RT+76],ax		;;AN000;; Move char into the buffer
 34616 0000537F 43                      	inc	bx				;;AN000;; Increase buffer count
 34617 00005380 43                      	inc	bx				;;AN000;; Increase buffer count
 34618                                  	;call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34619                                  	;retn					;;AN000::
 34620                                  	; 11/04/2023
 34621                                  	;jmp	$M_FLUSH_BUF
 34622                                  
 34623                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34624                                  ;;
 34625                                  ;;	PROC NAME: $M_FLUSH_BUFFER
 34626                                  ;;
 34627                                  ;;	FUNCTION: Display the contents of the temporary buffer
 34628                                  ;;	INPUTS: DI contains the number of bytes to display
 34629                                  ;;	OUTPUTS: BX reset to zero
 34630                                  ;;
 34631                                  ;;	REGS USED:
 34632                                  ;;
 34633                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34634                                  	
 34635                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34636                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:56C8h
 34637                                  
 34638                                  $M_FLUSH_BUF:
 34639 00005381 51                      	push	cx				;;AN000;; Save changed regs
 34640 00005382 06                      	push	es				;;AN000;;
 34641 00005383 57                      	push	di				;;AN000;;
 34642 00005384 1E                      	push	ds				;;AN000;; Set ES pointing to buffer
 34643 00005385 07                      	pop	es				;;AN000;;
 34644 00005386 89D9                    	mov	cx,bx				;;AN000;; Set number of bytes to display
 34645 00005388 31DB                    	xor	bx,bx				;;AN000;; Reset buffer counter
 34646 0000538A 8D3E[3887]              	lea	di,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 34647                                  	;lea	di,[$M_RT+76]			;;AN000;; Reset buffer location pointer
 34648 0000538E E86BFD                  	call	$M_DISPLAY_STRING		;;AN000;; Display the buffer
 34649 00005391 7204                    	jc	short $MIF314
 34650 00005393 5F                      	pop	di				;;AN000;; No, Restore changed regs
 34651 00005394 07                      	pop	es				;;AN000;;
 34652 00005395 59                      	pop	cx				;;AN000;;
 34653                                  	;jmp	short $MEN314
 34654                                  	; 11/04/2023
 34655 00005396 C3                      	retn
 34656                                  $MIF314:
 34657 00005397 83C406                  	add	sp,6				;;AN000;; Fix stack
 34658 0000539A F9                      	stc					;;AN000;;
 34659                                  $MEN314:
 34660 0000539B C3                      	retn					;;AN000;; Return
 34661                                  
 34662                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34663                                  ;;
 34664                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34665                                  
 34666                                  	; 11/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34667                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5609h
 34668                                  
 34669                                  $M_DISPLAY_REPLACE:
 34670 0000539C 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 34671                                  	;;cmp	$M_SL.$M_S_ID,$M_SPECIAL_CASE-30h ; 0
 34672 0000539E 807C0600                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_ID],0	
 34673                                  	;cmp	byte [si+6],0			;;AN000;; Is this the special case (convert to ASCII)
 34674 000053A2 7511                    	jne	short $MIF276
 34675                                  	
 34676 000053A4 C787[3887]202D          	mov	word [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],2D20h ; $M_SPACE_HYP
 34677                                  	;mov	word [bx+$M_RT+76],2D20h	;;AN000;; Move in a " -"
 34678                                  	
 34679 000053AA 43                      	inc	bx				;;AN000;; Increment count
 34680 000053AB 43                      	inc	bx				;;AN000;; Increment count
 34681                                  	
 34682 000053AC C687[3887]20            	mov	byte [bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],20h; $M_SPACE
 34683                                  	;mov	byte [bx+$M_RT+76],20h		;;AN000;; Move in a " "
 34684                                  	
 34685 000053B1 43                      	inc	bx				;;AN000;; Increment count
 34686 000053B2 E8CCFF                  	call	$M_FLUSH_BUF			;;AN000;; Write out " - " to prepare for special case
 34687                                  $MIF276:
 34688 000053B5 5D                      	pop	bp				;;AN000;; Remember the return address
 34689 000053B6 31DB                    	xor	bx,bx				;;AN000;; Use BX for buffer count
 34690 000053B8 31D2                    	xor	dx,dx				;;AN000;; Use DX for count of parms taken off the stack
 34691                                  
 34692 000053BA 880E[2E87]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl	;;AN000;; Save size to later clear stack
 34693                                  	;mov	[$M_RT+66],cl
 34694                                  	
 34695                                  	;mov	al,byte ptr $M_SL.$M_S_MINW	;;AN000;; Get the minimum width
 34696 000053BE 8A4409                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_MINW]
 34697                                  	;mov	al,[si+9]
 34698                                  	
 34699 000053C1 38C8                    	cmp	al,cl				;;AN000;; Do we need pad chars added?
 34700 000053C3 761E                    	jna	short $MIF278
 34701 000053C5 28C8                    	sub	al,cl				;;AN000;; Calculate how many pad chars are needed.
 34702 000053C7 88C6                    	mov	dh,al				;;AN000;; Save the number of pad characters
 34703                                  	
 34704                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 34705 000053C9 F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 34706                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be right aligned?
 34707 000053CD 7414                    	jz	short $MIF279			;;AN000;; No
 34708                                  $MDO280:
 34709                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 34710 000053CF 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 34711                                  	;mov	al,[si+0Ah]
 34712 000053D2 8887[3887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 34713                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 34714                                  	
 34715 000053D6 43                      	inc	bx				;;AN000;;
 34716 000053D7 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; 64		;;AN000;; Is buffer full?
 34717 000053DA 7503                    	jne	short $MIF281
 34718 000053DC E8A2FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34719                                  $MIF281:
 34720 000053DF FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 34721 000053E1 75EC                    	jnz	short $MDO280
 34722                                  $MIF279:
 34723                                  $MIF278:
 34724                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,$M_UNLIM_W
 34725 000053E3 807C0800                	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],0 ; $M_UNLIM_W
 34726                                  	;cmp	byte [si+8],0			;;AN000;; Is maximum width unlimited
 34727 000053E7 740C                    	je	short $MIF286
 34728                                  	
 34729                                  	;cmp	byte ptr $M_SL.$M_S_MAXW,CL	;;AN000;; Will we exceed maximum width?
 34730 000053E9 384C08                  	cmp	byte [si+$M_SUBLIST_STRUC.$M_S_MAXW],cl
 34731                                  	;;cmp	byte [si+8],cl
 34732 000053EC 7307                    	jnb	short $MIF287
 34733                                  
 34734                                  	; 03/05/2023
 34735                                  	;;sub	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Calculate how many extra chars
 34736                                  	;sub	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 34737                                  	;;sub	cl,[si+8]
 34738 000053EE 88CA                    	mov	dl,cl				;;AN000;; Remember how many chars to pop off
 34739                                  	;;mov	cl,byte ptr $M_SL.$M_S_MAXW	;;AN000;; Set new string length
 34740                                  	;mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 34741                                  	;;mov	cl,[si+8]
 34742                                  	; 03/05/2023
 34743 000053F0 8A4C08                  	mov	cl,[si+$M_SUBLIST_STRUC.$M_S_MAXW]
 34744 000053F3 28CA                    	sub	dl,cl
 34745                                  $MIF287:
 34746                                  $MIF286:
 34747 000053F5 09C9                    	or	cx,cx				;;AN000;;
 34748 000053F7 7424                    	jz	short $MIF290			;;AN000;;
 34749                                  $MDO291:
 34750                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type not $M_TYPE_MASK
 34751 000053F9 F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 34752                                  	;test	byte [si+7],0Fh			;;AN000;;
 34753 000053FD 750C                    	jnz	short $MIF292
 34754                                  
 34755                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 34756 000053FF F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 34757                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?			 
 34758 00005403 7406                    	jz	short $MIF292			;;AN000;; No
 34759                                  
 34760 00005405 268A05                  	mov	al,[es:di]			;;AN000;; Get first character from string
 34761 00005408 47                      	inc	di				;;AN000;; Next character in string
 34762 00005409 EB01                    	jmp	short $MEN292
 34763                                  $MIF292:
 34764 0000540B 58                      	pop	ax				;;AN000;; Get character in register
 34765                                  $MEN292:
 34766                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 34767 0000540C 8887[3887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 34768                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move char into the buffer
 34769                                  	; 03/05/2023
 34770 00005410 43                      	inc	bx				;;AN000;; Increase buffer count
 34771 00005411 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ ; cmp bx,64	;;AN000;; Is buffer full?
 34772 00005414 7503                    	jne	short $MIF295			;;AN000;;
 34773 00005416 E868FF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34774                                  $MIF295:
 34775 00005419 FEC9                    	dec	cl				;;AN000;; Have we completed replace?
 34776 0000541B 75DC                    	jnz	short $MDO291
 34777                                  $MIF290:
 34778                                  	;test	byte ptr $M_SL.$M_S_FLAG,Right_Align
 34779 0000541D F6440780                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],80h
 34780                                  	;test	byte [si+7],80h			;;AN000;; Was replaceable parm to be left aligned?
 34781 00005421 7518                    	jnz	short $MIF299			;;AN000;; Yes
 34782 00005423 08F6                    	or	dh,dh				;;AN000;; Do we need pad chars added?
 34783 00005425 7414                    	jz	short $MIF300
 34784                                  $MDO301:
 34785                                  	;mov	al,byte ptr $M_SL.$M_S_PAD	;;AN000;;
 34786 00005427 8A440A                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_PAD]
 34787                                  	;mov	al,[si+0Ah]
 34788                                  
 34789                                  	;mov	byte ptr $M_RT.$M_TEMP_BUF[bx],al
 34790 0000542A 8887[3887]              	mov	[bx+$M_RT+$M_RES_ADDRS.$M_TEMP_BUF],al
 34791                                  	; 03/05/2023
 34792                                  	;mov	[bx+$M_RT+76],al		;;AN000;; Move in a pad char
 34793                                  
 34794 0000542E 43                      	inc	bx				;;AN000;;
 34795 0000542F 83FB40                  	cmp	bx,$M_TEMP_BUF_SZ  ; 64		;;AN000;; Is buffer full?
 34796 00005432 7503                    	jne	short $MIF302			;;AN000;; No
 34797                                  						;;AN000;; Yes
 34798 00005434 E84AFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer
 34799                                  $MIF302:
 34800 00005437 FECE                    	dec	dh				;;AN000;; Have we filled with enough pad chars?
 34801 00005439 75EC                    	jnz	short $MDO301			;;AN000;;
 34802                                  $MIF300:
 34803                                  $MIF299:
 34804                                  	;test	byte ptr $M_SL.$M_S_FLAG,not Char_Type and $M_TYPE_MASK
 34805 0000543B F644070F                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Fh
 34806                                  	;test	byte [si+7],0Fh			;;AN000;;
 34807 0000543F 7506                    	jnz	short $MIF307
 34808                                  	
 34809                                  	;test	$M_SL.$M_S_FLAG,Char_field_ASCIIZ and $M_SIZE_MASK
 34810 00005441 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 34811                                  	;test	byte [si+7],10h			;;AN000;; Is this replace a ASCIIZ string?
 34812                                  	; 11/04/2023
 34813                                  	;jz	short $MIF307			;;AN000;;
 34814                                  	;jmp	short $MEN307			;;AN000;;
 34815 00005445 750C                    	jnz	short $MEN307
 34816                                  $MIF307:
 34817 00005447 08D2                    	or	dl,dl				;;AN000;;
 34818 00005449 7408                    	jz	short $MIF309			;;AN000;;
 34819                                  $MDO310:
 34820 0000544B 8F06[3287]              	pop	word [$M_RT+$M_RES_ADDRS.$M_RETURN_ADDR]
 34821                                  	;pop	word [$M_RT+70]			;;AN000;; Clean Up stack using spare variable
 34822 0000544F FECA                    	dec	dl				;;AN000;; Are we done?
 34823 00005451 75F8                    	jnz	short $MDO310
 34824                                  $MIF309:
 34825                                  $MEN307:
 34826 00005453 E82BFF                  	call	$M_FLUSH_BUF			;;AN000;; Flush the buffer for the final time
 34827 00005456 55                      	push	bp				;;AN000;; Restore the return address
 34828 00005457 C3                      	retn					;;AN000;;
 34829                                  
 34830                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34831                                  ;;
 34832                                  ;;	PROC NAME: $M_CHAR_REPLACE
 34833                                  ;;
 34834                                  ;;	FUNCTION: Will prepare a single char or ASCIIZ string for replace
 34835                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 34836                                  ;;		ES:DI contains the VALUE from SUBLIST
 34837                                  ;;	OUTPUTS: CX contains number of characters on stack
 34838                                  ;;		 Top of stack  --> Last character
 34839                                  ;;					. . .
 34840                                  ;;		 Bot of stack  --> First character
 34841                                  ;;
 34842                                  ;;	OTHER REGS Revised: AX
 34843                                  ;;
 34844                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34845                                  
 34846                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34847                                  
 34848                                  $M_CHAR_REPLACE:
 34849 00005458 5D                      	pop	bp				;;AN000;; Save return address
 34850                                  	;test	$M_SL.$M_S_FLAG,not Char_Field_Char and $M_SIZE_MASK
 34851 00005459 F6440730                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],30h
 34852                                  	;test	byte [si+7],30h			;;AN000;; Was Character specified?
 34853 0000545D 7512                    	jnz	short $MIF317			;;AN000;; No
 34854 0000545F 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 34855 00005462 50                      	push	ax				;;AN000;; Put it on the stack
 34856 00005463 41                      	inc	cx				;;AN000;; Increase the count
 34857 00005464 E88BFD                  	call	$M_IS_IT_DBCS			;;AN000;; Is this the first byte of a DB character
 34858 00005467 7306                    	jnc	short $MIF318
 34859 00005469 268A4501                	mov	al,[es:di+1]			;;AN000;; Get the next character
 34860 0000546D 50                      	push	ax				;;AN000;; Put it on the stack
 34861 0000546E F8                      	clc					;;AN000;; Clear the carry
 34862                                  $MIF318:
 34863 0000546F EB0D                    	jmp	short $MEN317
 34864                                  $MIF317:
 34865                                  $MDO321:
 34866 00005471 268A05                  	mov	al,[es:di]			;;AN000;; Get the character
 34867 00005474 08C0                    	or	al,al				;;AN000;; Is it the NULL?
 34868 00005476 7404                    	jz	short $MEN321			;;AN000;; Yes
 34869 00005478 47                      	inc	di				;;AN000;; Next character
 34870 00005479 41                      	inc	cx				;;AN000;; Increment the count
 34871 0000547A EBF5                    	jmp	short $MDO321
 34872                                  $MEN321:
 34873 0000547C 29CF                    	sub	di,cx				;;AN000;; Set DI at the beginning of the string
 34874                                  $MEN317:
 34875 0000547E 55                      	push	bp				;;AN000;; Restore return address
 34876 0000547F C3                      	retn					;;AN000;;	
 34877                                  
 34878                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34879                                  ;;
 34880                                  ;;	PROC NAME: $M_BIN2ASC_REPLACE
 34881                                  ;;
 34882                                  ;;	FUNCTION: Convert a signed or unsigned binary number to an ASCII string
 34883                                  ;;		  and prepare to display
 34884                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 34885                                  ;;		ES:DI contains the VALUE from SUBLIST
 34886                                  ;;	OUTPUTS: CX contains number of characters on stack
 34887                                  ;;		 Top of stack  --> Last character
 34888                                  ;;					. . .
 34889                                  ;;		 Bot of stack  --> First character
 34890                                  ;;	OTHER REGS Revised: BX,DX,AX
 34891                                  ;;
 34892                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 34893                                  
 34894                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 34895                                  
 34896                                  $M_BIN2ASC_REPLACE:
 34897 00005480 5D                      	pop	bp				;;AN000;; Save return address
 34898 00005481 31D2                    	xor	dx,dx				;;AN000;; Prepare for get binary value (HIGH)
 34899 00005483 31C0                    	xor	ax,ax				;;AN000;; Prepare for get binary value (LOW)
 34900 00005485 C706[3687]1000          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],16 ; $M_BASE16
 34901                                  	;mov	word [$M_RT+74],16  ; $M_BASE16	;;AN000;; Set default divisor
 34902                                  
 34903 0000548B 31DB                    	xor	bx,bx				;;AN000;; Use BX as the NEG flag (if applicable)
 34904                                  
 34905                                  	;test	$M_SL.$M_S_FLAG,not $M_BYTE and $M_SIZE_MASK
 34906 0000548D F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 34907                                  	;test	byte [si+7],20h			;;AN000;; Was BYTE specified?		
 34908 00005491 7511                    	jnz	short $MIF325			;;AN000;; No
 34909                                  	
 34910 00005493 268A05                  	mov	al,[es:di]			;;AN000;; Setup byte in AL
 34911                                  
 34912                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 34913 00005496 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 34914                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?
 34915 0000549A 753D                    	jnz	short $MIF326			;;AN000;; No
 34916                                  			 
 34917 0000549C A880                    	test	al,10000000b ; 80h		;;AN000;; Is this number negative?
 34918 0000549E 7433                    	jz	short $MIF327			;;AN000;; No
 34919                                  						;;AN000;; Yes				
 34920                                  	; 12/04/2023
 34921                                  	;inc	bx				;;AN000;; Remember that it was negative
 34922 000054A0 247F                    	and	al,01111111b			;;AN000;; Make it positive
 34923                                  
 34924                                  	; 12/04/2023 - Retrop DOS v4.0 COMMAND.COM
 34925                                  	;jmp	short $MIF327
 34926 000054A2 EB2E                    	jmp	short $MIF350 ; inc bx
 34927                                  
 34928                                  ; 12/04/2023
 34929                                  %if 0
 34930                                  
 34931                                  $MIF327:
 34932                                  $MIF335:	; 12/04/2023
 34933                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 34934                                  	;mov	word [$M_RT+74],10		;;AN000;;
 34935                                  $MIF326:
 34936                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 34937                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 34938                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 34939                                  	jnz	short $MIF330			;;AN000;; No
 34940                                  						;;AN000;; Yes
 34941                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 34942                                  	;mov	word [$M_RT+74],10		;;AN000;;
 34943                                  $MIF330:
 34944                                  	jmp	short $MEN325
 34945                                  
 34946                                  %endif
 34947                                  
 34948                                  $MIF325:
 34949                                  	;test	$M_SL.$M_S_FLAG,not $M_WORD and $M_SIZE_MASK
 34950 000054A4 F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 34951                                  	;test	byte [si+7],10h			;;AN000;; Was WORD specified?
 34952 000054A8 7513                    	jnz	short $MIF333			;;AN000;; No
 34953                                  						;;AN000;; Yes
 34954 000054AA 268B05                  	mov	ax,[es:di]			;;AN000;; Setup byte in AL
 34955                                  
 34956                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 34957 000054AD F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 34958                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 34959 000054B1 7526                    	jnz	short $MIF334			;;AN000;; No
 34960                                  						;;AN000;; Yes
 34961 000054B3 F6C480                  	test	ah,10000000b ; 80h		;;AN000;; Is this number negative?
 34962 000054B6 741B                    	jz	short $MIF335			;;AN000;; No
 34963                                  						;;AN000;; Yes
 34964                                  	; 12/04/2023
 34965                                  	;inc	bx				;;AN000;; Remember that it was negative
 34966 000054B8 80E47F                  	and	ah,01111111b			;;AN000;; Make it positive
 34967                                  
 34968                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 34969                                  	;jmp	short $MIF335
 34970 000054BB EB15                    	jmp	short $MIF350 ; inc bx
 34971                                  
 34972                                  ; 12/04/2023
 34973                                  %if 0
 34974                                  
 34975                                  $MIF335:
 34976                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 34977                                  	;mov	word [$M_RT+74],10		;;AN000;;
 34978                                  $MIF334:
 34979                                  	test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK ;;AN000;; Was Signed binary specified?
 34980                                  	jnz	short $MIF338
 34981                                  
 34982                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 34983                                  	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 34984                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 34985                                  	jnz	short $MIF338			;;AN000;; No
 34986                                  						;;AN000;; Yes
 34987                                  	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 34988                                  	;mov	word [$M_RT+74],10		;;AN000;;
 34989                                  $MIF338:
 34990                                  	jmp	short $MEN333			;;AN000;;
 34991                                  %endif
 34992                                  
 34993                                  $MIF333:
 34994 000054BD 268B05                  	mov	ax,[es:di]			;;AN000;; Setup Double word in DX:AX
 34995 000054C0 268B5502                	mov	dx,[es:di+2]			;;AN000;;
 34996                                  
 34997                                  	;test	$M_SL.$M_S_FLAG,not Sgn_Bin_Type and $M_TYPE_MASK
 34998 000054C4 F644070D                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Dh
 34999                                  	;test	byte [si+7],0Dh			;;AN000;; Was Signed binary specified?	
 35000 000054C8 750F                    	jnz	short $MIF341			;;AN000;; No
 35001                                  						;;AN000;; Yes
 35002 000054CA F6C680                  	test	dh,10000000b ; 80h		;;AN000;; Is this number negative?
 35003 000054CD 7404                    	jz	short $MIF342			;;AN000;; No
 35004                                  						;;AN000;; Yes
 35005                                  	; 12/04/2023
 35006                                  	;inc	bx				;;AN000;; Remember that it was negative
 35007 000054CF 80E67F                  	and	dh,01111111b			;;AN000;; Make it positive
 35008                                  	
 35009                                  	; 12/04/2023 - Retro DOS v4.0 COMMAND.COM
 35010                                  $MIF350:
 35011 000054D2 43                      	inc	bx
 35012                                  $MIF342:
 35013                                  	; 12/04/2023
 35014                                  $MIF327:
 35015                                  $MIF335:
 35016 000054D3 C706[3687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35017                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35018                                  $MIF341:
 35019                                  $MIF326:
 35020                                  	; 18/04/2023
 35021                                  $MIF334:
 35022                                  	;test	$M_SL.$M_S_FLAG,not Unsgn_Bin_Type and $M_TYPE_MASK
 35023 000054D9 F644070E                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],0Eh
 35024                                  	;test	byte [si+7],0Eh			;;AN000;; Was Signed binary specified?
 35025 000054DD 7506                    	jnz	short $MIF345			;;AN000;; No
 35026                                  						;;AN000;; Yes
 35027 000054DF C706[3687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35028                                  	;mov	word [$M_RT+74],10		;;AN000;;
 35029                                  $MIF345:
 35030                                  $MEN333:
 35031                                  $MEN325:
 35032 000054E5 E82EFD                  	call	$M_CONVERT2ASC			;;AN000;; Convert to ASCII string
 35033                                  
 35034 000054E8 09DB                    	or	bx,bx				;;AN000;; Was number negative?
 35035 000054EA 7405                    	jz	short $MIF349			;;AN000;; No
 35036                                  						;;AN000;; Yes
 35037 000054EC 31D2                    	xor	dx,dx				;;AN000;;
 35038 000054EE B22D                    	mov	dl,'-'	; $M_NEG_SIGN		;;AN000;; Put "-" on the stack with the number
 35039 000054F0 52                      	push	dx				;;AN000;;
 35040                                  $MIF349:
 35041 000054F1 55                      	push	bp				;;AN000;; Restore return address
 35042 000054F2 C3                      	retn					;;AN000;; Return
 35043                                  
 35044                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35045                                  ;;
 35046                                  ;;	PROC NAME: $M_DATE_REPLACE
 35047                                  ;;
 35048                                  ;;	FUNCTION: Convert a date to a decimal ASCII string using current
 35049                                  ;;		  country format and prepare to display
 35050                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35051                                  ;;		ES:DI points at VALUE from SUBLIST
 35052                                  ;;	OUTPUTS: CX contains number of characters on stack
 35053                                  ;;		 Top of stack  --> Last character
 35054                                  ;;					. . .
 35055                                  ;;		 Bot of stack  --> First character
 35056                                  ;;	OTHER REGS Revised: DX,AX
 35057                                  ;;
 35058                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35059                                  
 35060                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35061                                  $M_DATE_REPLACE:
 35062 000054F3 5D                      	pop	bp				;;AN000;; Save return address
 35063                                  
 35064 000054F4 C706[3687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35065                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35066                                  	
 35067 000054FA E86700                  	call	$M_GET_DATE			;;AN000;; Set date format/separator in $M_RT
 35068                                  						;;AN000;; All O.K.?
 35069 000054FD 31D2                    	xor	dx,dx				;;AN000;; Reset DX value
 35070                                  	; 12/04/2023
 35071                                  	;xor	ax,ax				;;AN000;; Reset AX value
 35072                                  	
 35073                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0
 35074                                  	;;cmp	word [$M_RT+76],0		;;AN000;; USA Date Format
 35075                                  	;jne	short $MIF351
 35076                                  	; 12/04/2023
 35077 000054FF A1[3887]                	mov	ax,[$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35078 00005502 09C0                    	or	ax,ax
 35079 00005504 751D                    	jnz	short $MIF351
 35080                                  
 35081 00005506 E87200                  	call	$M_YEAR				;;AN000;; Get Year
 35082 00005509 E88100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35083                                  
 35084 0000550C FF36[4387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35085                                  	;push	word [$M_RT+87]			;;AN000;;
 35086                                  	
 35087 00005510 41                      	inc	cx				;;AN000;; Increment count
 35088 00005511 31C0                    	xor	ax,ax				;;AN000;; Reset AX value
 35089                                  
 35090 00005513 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35091                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35092 00005516 E87400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35093                                  	
 35094 00005519 FF36[4387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35095                                  	;push	word [$M_RT+87]			;;AN000;;
 35096                                  
 35097 0000551D 41                      	inc	cx				;;AN000;; Increment count
 35098 0000551E 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35099                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35100                                  	; 12/04/2023
 35101                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35102 00005521 EB3C                    	jmp	short $MIF354 ; **
 35103                                  $MIF351:
 35104                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],1
 35105                                  	;;cmp	word [$M_RT+76],1		;;AN000;; EUROPE Date Format
 35106                                  	;jne	short $MIF353
 35107                                  	; 12/04/2023
 35108                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] ; *
 35109 00005523 48                      	dec	ax 
 35110 00005524 751D                    	jnz	short $MIF352 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] <> 1
 35111                                  
 35112 00005526 E85200                  	call	$M_YEAR				;;AN000;; Get Year
 35113 00005529 E86100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35114                                  
 35115 0000552C FF36[4387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35116                                  	;push	word [$M_RT+87]			;;AN000;;
 35117                                  	
 35118 00005530 41                      	inc	cx				;;AN000;; Increment count
 35119 00005531 31C0                    	xor	ax,ax				;;AN000;; Reset AX
 35120                                  
 35121 00005533 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35122                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35123 00005536 E85400                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35124                                  
 35125 00005539 FF36[4387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35126                                  	;push	word [$M_RT+87]			;;AN000;;
 35127                                  
 35128 0000553D 41                      	inc	cx				;;AN000;;
 35129                                  	      
 35130 0000553E 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35131                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35132                                  
 35133                                  	; 12/04/2023
 35134                                  	;call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35135 00005541 EB1C                    	jmp	short $MIF354 ; **
 35136                                  	; 12/04/2023
 35137                                  $MIF352:
 35138                                  	; ax = [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT]-1 ; *
 35139 00005543 48                      	dec	ax
 35140                                  	;jz	short $MIF353 ; word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT] = 2
 35141                                  	;xor	ax,ax
 35142                                  	;jmp	short $MIF355
 35143                                  	; 12/04/2023
 35144 00005544 751C                    	jnz	short $MIF355
 35145                                  $MIF353:
 35146                                  	;cmp	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],2
 35147                                  	;;cmp	word [$M_RT+76],2		;;AN000;; JAPAN Date Format
 35148                                  	;jne	short $MIF355
 35149                                  
 35150 00005546 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35151                                  	;mov	al,[si+5]			;;AN000;; Get Day
 35152 00005549 E84100                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35153                                  	
 35154 0000554C FF36[4387]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35155                                  	;push	word [$M_RT+87]			;;AN000;;
 35156                                  
 35157 00005550 41                      	inc	cx				;;AN000;;
 35158                                  
 35159 00005551 8A4404                  	 mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35160                                  	;mov	al,[si+4]			;;AN000;; Get Month
 35161 00005554 E83600                  	call	$M_CONVERTDATE			;;AN000;; Convert it to an ASCII string
 35162                                  	
 35163 00005557 FF36[4387]              	 push	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA]
 35164                                  	;push	word [$M_RT+87]			;;AN000;;
 35165                                  	
 35166 0000555B 41                      	inc	cx				;;AN000;;
 35167                                  
 35168 0000555C E81C00                  	call	$M_YEAR				;;AN000;; Get Year
 35169                                  	; 12/04/2023
 35170                                  $MIF354:
 35171 0000555F E82B00                  	call	$M_CONVERTDATE	; **		;;AN000;; Convert it to an ASCII string
 35172                                  $MIF355:
 35173 00005562 55                      	push	bp				;;AN000;; Restore return address
 35174 00005563 C3                      	retn					;;AN000;; Return
 35175                                  
 35176                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35177                                  ;;
 35178                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35179                                  
 35180                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35181                                  $M_GET_DATE:
 35182                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 35183                                  	;mov	al,0 				;;AN000;; Get current country info
 35184                                  	; 12/04/2023
 35185 00005564 B80038                  	mov	ax,3800h
 35186                                  	;
 35187 00005567 8D16[3887]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35188                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 35189 0000556B CD21                    	int	21h				;;AN000;;
 35190 0000556D 730B                    	jnc	short $MIF357
 35191                                  	;
 35192 0000556F C706[3887]0000          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_DATE_FORMAT],0 ; $M_DEF_DATE_FORM
 35193                                  	;mov	word [$M_RT+76+0],0		;;AN000;; Set default date format (BH)
 35194 00005575 C606[4387]2D            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DATE_SEPARA],'-' ; $M_DEF_DATE_SEP
 35195                                  	;mov	byte [$M_RT+87],'-'		;;AN000;; Set default date separator (BL)
 35196                                  $MIF357:
 35197 0000557A C3                      	retn					;;AN000;;
 35198                                  
 35199                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35200                                  ;;
 35201                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35202                                  
 35203                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35204                                  $M_YEAR:
 35205 0000557B 8B4402                  	mov	ax,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35206                                  	;mov	ax,[si+2]			;;AN000;; Get Year
 35207                                  
 35208                                  	;test	$M_SL.$M_S_FLAG,Date_MDY_4 and $M_DATE_MASK
 35209 0000557E F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35210                                  	;test	byte [si+7],10h			;;AN000;; Was Month/Day/Year (2 Digits) specified?
 35211 00005582 7508                    	jnz	short $MIF359			;;AN000;; No
 35212                                  						;;AN000;; Yes
 35213 00005584 83F863                  	cmp	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35214 00005587 7603                    	jna	short $MIF360			;;AN000;;
 35215 00005589 B86300                  	mov	ax,99 ; $M_MAX_2_YEAR		;;AN000;;
 35216                                  $MIF360:
 35217                                  $MIF359:
 35218 0000558C C3                      	retn					;;AN000;;
 35219                                  
 35220                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35221                                  ;;
 35222                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35223                                  
 35224                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35225                                  $M_CONVERTDATE:
 35226                                  $M_CONVERTTIME: ; *!*!  ; 12/04/2023
 35227 0000558D 8F06[3887]              	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35228                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 35229 00005591 880E[2E87]              	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 35230                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 35231 00005595 E87EFC                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 35232 00005598 49                      	dec	cx				;;AN000;; Test if size only grew by 1
 35233 00005599 3A0E[2E87]              	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 35234 0000559D 7505                    	jne	short $MIF363			;;AN000;; No
 35235 0000559F B83000                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 35236 000055A2 50                      	push	ax				;;AN000;; Save it
 35237 000055A3 41                      	inc	cx				;;AN000;; Count it
 35238                                  $MIF363:
 35239 000055A4 41                      	inc	cx				;;AN000;; Restore CX
 35240 000055A5 FF36[3887]              	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35241                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 35242 000055A9 C3                      	retn
 35243                                  
 35244                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35245                                  ;;
 35246                                  ;;	PROC NAME: $M_TIME_REPLACE
 35247                                  ;;
 35248                                  ;;	FUNCTION: Convert a time to a decimal ASCII string
 35249                                  ;;		  and prepare to display
 35250                                  ;;	INPUTS: DS:SI points at corresponding SUBLIST
 35251                                  ;;		ES:DI points at VALUE from SUBLIST
 35252                                  ;;	OUTPUTS: CX contains number of characters on stack
 35253                                  ;;		 Top of stack  --> Last character
 35254                                  ;;					. . .
 35255                                  ;;		 Bot of stack  --> First character
 35256                                  ;;	REGS USED: BP,CX,AX
 35257                                  ;;
 35258                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35259                                  
 35260                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM							     ;;
 35261                                  $M_TIME_REPLACE:
 35262 000055AA 5D                      	pop	bp				;;AN000;; Save return address
 35263                                  
 35264 000055AB C706[3687]0A00          	mov	word [$M_RT+$M_RES_ADDRS.$M_DIVISOR],10 ; $M_BASE10
 35265                                  	;mov	word [$M_RT+74],10		;;AN000;; Set default divisor
 35266                                  
 35267 000055B1 E87800                  	call	$M_GET_TIME			;;AN000;; All O.K.?
 35268                                  
 35269                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35270 000055B4 F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1
 35271                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35272 000055B8 741A                    	jz	short $MIF365			;;AN000;; No
 35273                                  						;;AN000;; Yes
 35274 000055BA 803E[4987]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 35275                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 35276 000055BF 7513                    	jne	short $MIF366			;;AN000;; No
 35277                                  						;;AN000;; Yes
 35278 000055C1 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35279                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35280 000055C4 3C0C                    	cmp	al,12				;;AN000;; Is hour 12 or less?
 35281 000055C6 7C04                    	jl	short $MLL367 ; jnge		;;AN000;; Yes	
 35282 000055C8 3C17                    	cmp	al,23				;;AN000;; Is hour 24 or greater?
 35283 000055CA 7E04                    	jng	short $MIF367 ; jle		;;AN000;; No
 35284                                  $MLL367:
 35285 000055CC B061                    	mov	al,'a'	; $M_AM			;;AN000;;
 35286                                  	;push	ax				;;AN000;; Push an "a" to represent AM.
 35287                                  	;inc	cx				;;AN000;;
 35288                                  	;jmp	short $MEN367			;;AN000;;
 35289                                  	; 12/04/2023
 35290 000055CE EB02                    	jmp	short $MEN367 ; *
 35291                                  $MIF367:
 35292 000055D0 B070                    	mov	al,'p'	; $M_PM			;;AN000;;
 35293                                  $MEN367:	; * ; 12/04/2023
 35294 000055D2 50                      	push	ax				;;AN000;; Push an "p" to represent PM.
 35295 000055D3 41                      	inc	cx				;;AN000;;
 35296                                  ;$MEN367:
 35297                                  $MIF366:
 35298                                  $MIF365:					;;AN000;;
 35299 000055D4 31C0                    	xor	ax,ax				;;AN000;;
 35300 000055D6 31D2                    	xor	dx,dx				;;AN000;;
 35301                                  	
 35302                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35303 000055D8 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35304                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35305 000055DC 740B                    	jz	short $MIF372			;;AN000;;
 35306                                  
 35307 000055DE 8A4405                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+3]
 35308                                  	;mov	al,[si+5]			;;AN000;; Get Hundreds
 35309 000055E1 E8A9FF                  	call	$M_CONVERTTIME			;;AN000;;
 35310                                  
 35311 000055E4 FF36[4187]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA]
 35312                                  	;push	word [$M_RT+85]			;;AN000;;
 35313 000055E8 41                      	inc	cx				;;AN000;;
 35314                                  $MIF372:
 35315                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSSHH_Cty and $M_SIZE_MASK
 35316 000055E9 F6440720                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],20h
 35317                                  	;test	byte [si+7],20h			;;AN000;; Was Hour/Min/Sec/Hunds (12 Hour) specified?
 35318 000055ED 7506                    	jnz	short $MLL374			;;AN000;; No
 35319                                  
 35320                                  	;test	$M_SL.$M_S_FLAG,Time_HHMMSS_Cty AND $M_SIZE_MASK
 35321 000055EF F6440710                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],10h
 35322                                  	;test	byte [si+7],10h			;;AN000;; Was Hour/Min/Sec (12 Hour) specified?
 35323 000055F3 740B                    	jz	short $MIF374			;;AN000;; No
 35324                                  $MLL374:
 35325 000055F5 8A4404                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+2]
 35326                                  	;mov	al,[si+4]			;;AN000;; Get Seconds
 35327 000055F8 E892FF                  	call	$M_CONVERTTIME			;;AN000;;
 35328                                  
 35329 000055FB FF36[4587]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 35330                                  	;push	word [$M_RT+89]			;;AN000;;
 35331 000055FF 41                      	inc	cx				;;AN000;;
 35332                                  $MIF374:	;;  Do Hour/Min (12 Hour)
 35333 00005600 8A4403                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE+1]
 35334                                  	;mov	al,[si+3]			;;AN000;; Get Minutes
 35335 00005603 E887FF                  	call	$M_CONVERTTIME			;;AN000;;
 35336                                  
 35337 00005606 FF36[4587]              	push	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA]
 35338                                  	;push	word [$M_RT+89]			;;AN000;;
 35339 0000560A 41                      	inc	cx				;;AN000;;
 35340                                  
 35341 0000560B 8A4402                  	mov	al,[si+$M_SUBLIST_STRUC.$M_S_VALUE]
 35342                                  	;mov	al,[si+2]			;;AN000;; Get Hours
 35343                                  
 35344                                  	;test	$M_SL.$M_S_FLAG,Time_Cty_Type and $M_TIME_MASK
 35345 0000560E F6440701                	test	byte [si+$M_SUBLIST_STRUC.$M_S_FLAG],1 
 35346                                  	;test	byte [si+7],1			;;AN000;; Is this a request for current country info?
 35347 00005612 7413                    	jz	short $MIF376			;;AN000;; No
 35348                                  
 35349 00005614 803E[4987]00            	cmp	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],0
 35350                                  	;cmp	byte [$M_RT+93],0		;;AN000;; Is the current country format 12 Hour?
 35351 00005619 750C                    	jne	short $MIF377			;;AN000;; No
 35352                                  
 35353 0000561B 3C0D                    	cmp	al,13				;;AN000;; Is hour less than 12?
 35354 0000561D 7C02                    	jnge	short $MIF378 ; jl
 35355 0000561F 2C0C                    	sub	al,12				;;AN000;; Set to a 12 hour value
 35356                                  $MIF378:
 35357                                  	;cmp	al,0				;;AN000;; Is hour less than 12?
 35358                                  	;jne	short $MIF380			;;AN000;; No
 35359                                  	; 12/04/2023
 35360 00005621 20C0                    	and	al,al
 35361 00005623 7502                    	jnz	short $MIF380	
 35362 00005625 B00C                    	mov	al,12				;;AN000;; Set to a 12 hour value
 35363                                  $MIF380:
 35364                                  $MIF377:
 35365                                  $MIF376:
 35366 00005627 E8ECFB                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to ASCII
 35367 0000562A 55                      	push	bp				;;AN000;; Restore return address
 35368 0000562B C3                      	retn					;;AN000;; Return
 35369                                  
 35370                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35371                                  ;;
 35372                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35373                                  
 35374                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35375                                  $M_GET_TIME:
 35376                                  	;mov	ah,38h ; DOS_GET_COUNTRY	;;AN000;; Call DOS for country dependant info
 35377                                  	;mov	al,0 				;;AN000;; Get current country info
 35378                                  	; 12/04/2023
 35379 0000562C B80038                  	mov	ax,3800h
 35380                                  	;
 35381 0000562F 8D16[3887]              	lea	dx,[$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35382                                  	;lea	dx,[$M_RT+76]			;;AN000;; Set up addressibility to buffer
 35383 00005633 CD21                    	int	21h				;;AN000;;
 35384 00005635 7310                    	jnc	short $MIF384
 35385                                  
 35386 00005637 C706[4987]0100          	mov	word [$M_RT+$M_COUNTRY_INFO.$M_TIME_FORMAT],1 ; $M_DEF_TIME_FORM
 35387                                  	;mov	word [$M_RT+93],1		;;AN000;; Set default time format (BH)
 35388 0000563D C606[4587]3A            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_TIME_SEPARA],':' ; $M_DEF_TIME_SEP
 35389                                  	;mov	byte [$M_RT+89],':'		;;AN000;; Set default time separator (BL)
 35390 00005642 C606[4187]2E            	mov	byte [$M_RT+$M_COUNTRY_INFO.$M_DECI_SEPARA],'.' ; $M_DEF_DECI_SEP
 35391                                  	;mov	byte [$M_RT+85],'.'		;;AN000;; Set default time separator (BL)		
 35392                                  $MIF384:
 35393 00005647 C3                      	retn					;;AN000;;
 35394                                  
 35395                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35396                                  ;;
 35397                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 35398                                  
 35399                                  	; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35400                                  
 35401                                  ; 12/04/2023 
 35402                                  ;; ($M_CONVERTTIME is same with $M_CONVERTDATE)
 35403                                  %if 0
 35404                                  $M_CONVERTTIME:
 35405                                  $M_CONVERTDATE: ; *!*!  ; 12/04/2023
 35406                                  	pop	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35407                                  	;pop	word [$M_RT+76]			;;AN000;; Save return address
 35408                                  	mov	[$M_RT+$M_RES_ADDRS.$M_SIZE],cl
 35409                                  	;mov	[$M_RT+66],cl			;;AN000;; Save the size before conversion
 35410                                  	call	$M_CONVERT2ASC			;;AN000;; Convert it to an ASCII string
 35411                                  	dec	cx				;;AN000;; Test if size only grew by 1
 35412                                  	cmp	cl,[$M_RT+$M_RES_ADDRS.$M_SIZE] ;;AN000;; Did size only grow by one?
 35413                                  	jne	short $MIF386			;;AN000;; No
 35414                                  	mov	ax,'0' ; $M_TIMEDATE_PAD ; 30h  ;;AN000;; Get a pad character (0)
 35415                                  	push	ax				;;AN000;; Save it
 35416                                  	inc	cx				;;AN000;; Count itount it
 35417                                  $MIF386:
 35418                                  	inc	cx				;;AN000;; Restore CX
 35419                                  	push	word [$M_RT+$M_RES_ADDRS.$M_TEMP_BUF]
 35420                                  	;push	word [$M_RT+76]			;;AN000;; Restore return address
 35421                                  	retn
 35422                                  %endif
 35423                                  
 35424                                  ; ----------------------------
 35425                                  ; MSDOS 6.0, TPRINTF.ASM, 1991
 35426                                  ; ----------------------------
 35427                                  ; include msgdcl.inc
 35428                                  ; ----------------------------
 35429                                  
 35430                                  ;============================================================================
 35431                                  ; LOADHIGH.ASM, MSDOS 6.0, 1991
 35432                                  ;============================================================================
 35433                                  ; 12/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35434                                  
 35435                                  ; This is a new module added to support loading programs into UMBs provided
 35436                                  ; by DOS 5.0. 
 35437                                  ; ---------------------------------------------------------------------------
 35438                                  ; Usage:
 35439                                  ;
 35440                                  ; LOADHIGH [/L:umb[,size][;umb[,size]]*] <filespec>
 35441                                  ;
 35442                                  ; <filespec> has to be a filename that is not wildcarded.
 35443                                  
 35444                                  ; ---------------------------------------------------------------------------
 35445                                  ;
 35446                                  ;	Revision History
 35447                                  ;	================
 35448                                  ;
 35449                                  ;	M009	SR	08/01/90	Set flags to indicate that we are
 35450                                  ;				loading and high and also remember
 35451                                  ;				current UMB state.
 35452                                  ;
 35453                                  ;	M016	SR	08/09/90	Give special error message on attempt
 35454                                  ;				to loadhigh batch files and invalid
 35455                                  ;				filename on Loadhigh command line.
 35456                                  ;
 35457                                  ;	M039	SR	11/19/90	Bug #4270. Copy all the whitespaces
 35458                                  ;				after the program name also as part
 35459                                  ;				of the command line being passed to
 35460                                  ;				the program to be invoked.
 35461                                  ;
 35462                                  ; ---------------------------------------------------------------------------
 35463                                  
 35464                                  ; ---------------------------------------------------------------------------
 35465                                  ;
 35466                                  ;	include highload.inc		; Grab code for ParseVar and such
 35467                                  
 35468                                  iCmdLine	equ	81h		; PSP:81h points to command-line
 35469                                  
 35470                                  ;
 35471                                  ; ---------------------------------------------------------------------------
 35472                                  
 35473                                  ;****	LoadHigh -- Main routine for Loadhigh command
 35474                                  ;
 35475                                  ;	ENTRY	Command line tail is at PSP:iCmdLine terminated by 0dh
 35476                                  ;		CS = DS = SS = TRANGROUP
 35477                                  ;
 35478                                  ;	EXIT	None
 35479                                  ;
 35480                                  ;	USED	ax, bx, cx, dx, si, di, es
 35481                                  ;
 35482                                  ;	ERROR EXITS
 35483                                  ;		Message pointers are setup at the error locations and then
 35484                                  ;	we jump back to CERROR which is the transient error recycle point.
 35485                                  ;	Apart from parse errors, the other errors handled are too many
 35486                                  ;	switches anf invalid filenames.
 35487                                  ;
 35488                                  ;	EFFECTS
 35489                                  ;		The allocation strategy and the state of the arena chain are
 35490                                  ;	put in the requested state according to the given options. If a 
 35491                                  ;	filename is also given, it is executed as well.
 35492                                  ; ---------------------------------------------------------------------------
 35493                                  
 35494                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35495                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5927h
 35496                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35497                                  LoadHigh:
 35498 00005648 1E                      	push	ds
 35499 00005649 07                      	pop	es
 35500                                  
 35501 0000564A E86700                  	call	SkipLhDelims
 35502                                  
 35503                                  ;Get command tail to be passed to the program. This includes any whitespace
 35504                                  ;chars between the program name and its parameters as well.
 35505                                  ;On return, ds:si points at the start of the command tail.
 35506                                  
 35507 0000564D 56                      	push	si
 35508 0000564E E81400                  	call	ParseLhCmd
 35509 00005651 5E                      	pop	si
 35510 00005652 720E                    	jc	short LhErr
 35511                                  	
 35512 00005654 E87500                  	call	SetupCmdLine		;setup pgm's command line
 35513                                  
 35514 00005657 E8C800                  	call	SetupPath		;setup path for file
 35515 0000565A 7206                    	jc	short LhErr		;file not found
 35516                                  
 35517                                  ;Set allocation strategy to HighFirst and link in UMBs for exec. This will
 35518                                  ;be reset after return from the Exec
 35519                                  ;We will also set a resident flag to indicate that UMBs were activated for
 35520                                  ;the Exec. On return from the Exec, this flag will be used to deactivate UMBs
 35521                                  
 35522 0000565C E8A600                  	call	HideUMBs		;prepare upper-memory for load
 35523                                  
 35524 0000565F E99FD2                  	jmp	LH_EXECUTE		;go and exec file ;M051
 35525                                  
 35526                                  LhErr:
 35527                                  ;The error message has been setup at this stage
 35528                                  
 35529 00005662 E9EFD2                  	jmp	cerror			;print error message and recycle 
 35530                                  
 35531                                  ; ---------------------------------------------------------------------------
 35532                                  					
 35533                                  ;*** 	ParseLhCmd - parses any command-line options
 35534                                  ;
 35535                                  ;	ENTRY	None
 35536                                  ;
 35537                                  ;	EXIT	Carry clear -- command line parsed successfully
 35538                                  ;		Carry set -- appropriate error message setup
 35539                                  ;
 35540                                  ;	USED	ax, si
 35541                                  ;
 35542                                  ;	EFFECTS
 35543                                  ;		Options set up (see highvar.inc)
 35544                                  ;		Filename to be executed setup
 35545                                  ;
 35546                                  ;	ParseLhCmd calls InitVar to initialize data filled in by ParseVar,
 35547                                  ;	then calls ParseVar itself to actually parse the commmand-line.  On
 35548                                  ;	return from ParseVar, DS:SI will point to the beginning of the child
 35549                                  ;	module's name on the command-line; thus it calls LhCopyFilename to
 35550                                  ;	prepare the command-line for that program.
 35551                                  ; ---------------------------------------------------------------------------
 35552                                  
 35553                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35554                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5944h
 35555                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35556                                  	; 11/06/2023
 35557                                  ParseLhCmd:
 35558                                  	;mov	si,81h
 35559 00005665 BE8100                  	mov	si,iCmdLine	;ds:si points at command line
 35560                                  
 35561 00005668 C706[DC8A]0000          	mov	word [COMSW],0
 35562 0000566E BF[D085]                	mov	di,Parse_LoadHi
 35563 00005671 31C9                    	xor	cx,cx
 35564 00005673 E845CB                  	call	Parse_With_Msg
 35565                                  
 35566                                  	; 11/06/2023
 35567                                  	;cmp	ax,0FFFFh ; -1
 35568                                  	;jz	short PLhCmd2
 35569                                  	;cmp	ax,0
 35570                                  	;jnz	short PLhCmd1
 35571                                  	; 11/06/2023
 35572 00005676 40                      	inc	ax ; cmp ax,-1
 35573 00005677 7408                    	jz	short PLhCmd2 ; 0FFFFh -> 0
 35574 00005679 48                      	dec	ax ; cmp ax,0
 35575 0000567A 7504                    	jnz	short PLhCmd1 ; 1 -> 0
 35576                                  	; ax = 0
 35577                                  
 35578 0000567C 89D3                    	mov	bx,dx
 35579                                  	; 14/04/2023
 35580                                  	;call	LhCopyFilename
 35581                                  	;; 13/04/2023
 35582                                  	;;;jc	short PLhCmd2  ; !!! jmp short PLhCmd2 !!!
 35583                                  	;;jmp	short PLhCmd2
 35584                                  	;retn
 35585                                  	; 14/04/2023
 35586 0000567E EB02                    	jmp	short LhCopyFilename
 35587                                  PLhCmd1:
 35588 00005680 F9                      	stc
 35589                                  PLhCmd2:
 35590 00005681 C3                      	retn
 35591                                  
 35592                                  ; ---------------------------------------------------------------------------
 35593                                  
 35594                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35595                                  
 35596                                  ; ---------------------------------------------------------------------------
 35597                                  ; HIGHlOAD.INC, MSDOS 6.0, 1992
 35598                                  ; ---------------------------------------------------------------------------
 35599                                  
 35600                                  	; 13/04/2023
 35601                                  	; MSDOS 5.0 COMMAND.COM only !
 35602                                  	; (Procedure names are not from original Microsoft source code!)
 35603                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 35604                                  ;set_strategy:
 35605                                  	;mov	ax,5800h	; DOS_CHECK_STRATEGY
 35606                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35607                                  	;		; AL = function code: get allocation strategy
 35608                                  	;mov	bx,ax
 35609                                  	;or	bx,80h
 35610                                  	;mov	ax,5801h	; DOS_SET_STRATEGY
 35611                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35612                                  	;		; AL = function code: set allocation strategy
 35613                                  	;retn
 35614                                  
 35615                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 35616                                  ;set_umblink:
 35617                                  	;mov	ax,5803h	; DOS_SET_UMBLINK
 35618                                  	;mov	bx,1
 35619                                  	;int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35620                                  	;		; AL = function code: (DOS 5beta) set UMB link state
 35621                                  	;retn
 35622                                  
 35623                                  ; ---------------------------------------------------------------------------
 35624                                  
 35625                                  ;***	LhCopyFilename -- copy filename from command line to buffer
 35626                                  ;
 35627                                  ;	ENTRY	ds:si points at primary argument (filename)
 35628                                  ;
 35629                                  ;	EXIT	Carry set -- filename has wildcards.  In this event, DX will
 35630                                  ;				already contain an appropriate error number.
 35631                                  ;		Carry clear -- filename has been copied as needed; DS:SI
 35632                                  ;				points to first character (most likely space)
 35633                                  ;				after filename.
 35634                                  ;
 35635                                  ;	USED	ax, si
 35636                                  ;
 35637                                  ;	EFFECTS
 35638                                  ;		ExecPath contains the filename
 35639                                  ;
 35640                                  ; If there are any wildcards in the filename, then we have an error
 35641                                  ; ---------------------------------------------------------------------------
 35642                                  
 35643                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35644                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5984h
 35645                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35646                                  LhCopyFilename:
 35647 00005682 1E                      	push	ds
 35648 00005683 56                      	push	si
 35649 00005684 57                      	push	di
 35650 00005685 C57704                  	lds	si,[bx+4]
 35651 00005688 BF[ED89]                	mov	di,EXECPATH
 35652                                  lhcpfn1:
 35653 0000568B AC                      	lodsb
 35654 0000568C 3C2A                    	cmp	al,2Ah ; '*'
 35655 0000568E 740D                    	jz	short lhfilerr
 35656 00005690 3C3F                    	cmp	al,3Fh ; '?'
 35657 00005692 7409                    	jz	short lhfilerr
 35658 00005694 AA                      	stosb
 35659 00005695 08C0                    	or	al,al
 35660 00005697 75F2                    	jnz	short lhcpfn1
 35661                                  	; 14/04/2023
 35662                                  	; cf = 0
 35663                                  	;clc
 35664                                  lhfilerr2:
 35665 00005699 5F                      	pop	di
 35666 0000569A 5E                      	pop	si
 35667 0000569B 1F                      	pop	ds
 35668 0000569C C3                      	retn
 35669                                  lhfilerr:
 35670 0000569D BA[8581]                	mov	dx,LhInvFil_Ptr
 35671 000056A0 F9                      	stc
 35672 000056A1 EBF6                    	jmp	short lhfilerr2
 35673                                  
 35674                                  ; ---------------------------------------------------------------------------
 35675                                  	
 35676                                  	; 14/04/2023
 35677                                  	; 13/04/2023
 35678                                  	; MSDOS 5.0 COMMAND.COM only !
 35679                                  	; (Procedure name is not from original Microsoft source code!)
 35680                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:596Ah
 35681                                  set_strategy:
 35682 000056A3 B80058                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 35683 000056A6 CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35684                                  			; AL = function code: get allocation strategy
 35685 000056A8 89C3                    	mov	bx,ax
 35686 000056AA 81CB8000                	or	bx,80h
 35687 000056AE B80158                  	mov	ax,5801h	; DOS_SET_STRATEGY
 35688 000056B1 CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35689                                  			; AL = function code: set allocation strategy
 35690 000056B3 C3                      	retn
 35691                                  
 35692                                  ; ---------------------------------------------------------------------------
 35693                                  
 35694                                  	; 13/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35695                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59A6h
 35696                                  	; MSDOS 5.0 COMMAND.COM only !
 35697                                  	; (Procedure name is not from original Microsoft source code!)
 35698                                  SkipLhDelims:
 35699 000056B4 BE8100                  	mov	si,81h
 35700 000056B7 E826CF                  	call	scanoff
 35701                                  stfn1:
 35702 000056BA AC                      	lodsb
 35703 000056BB E82ACF                  	call	DELIM
 35704 000056BE 740A                    	jz	short stfn2
 35705 000056C0 3C0D                    	cmp	al,0Dh
 35706 000056C2 7406                    	jz	short stfn2
 35707 000056C4 3A06[C98A]              	cmp	al,[SWITCHAR]
 35708 000056C8 75F0                    	jnz	short stfn1
 35709                                  stfn2:
 35710 000056CA 4E                      	dec	si
 35711 000056CB C3                      	retn
 35712                                  
 35713                                  ; ---------------------------------------------------------------------------
 35714                                  
 35715                                  ;***	SetupCmdLine -- prepare command line for the program
 35716                                  ;
 35717                                  ;	ENTRY	{es/ds}:si = points just after the end of the child program
 35718                                  ;
 35719                                  ;	EXIT	None
 35720                                  ;
 35721                                  ;	USED
 35722                                  ;
 35723                                  ;	EFFECTS		
 35724                                  ;		The rest of the command line following the pgm name is 
 35725                                  ;	moved to the top of the command line buffer (at TRANGROUP:81h)
 35726                                  ;	and a new command line length is put in
 35727                                  ; ---------------------------------------------------------------------------
 35728                                  
 35729                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35730                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59BEh
 35731                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35732                                  SetupCmdLine:
 35733                                  	;mov	di,81h
 35734 000056CC BF8100                  	mov	di,iCmdLine
 35735 000056CF 30C9                    	xor	cl,cl
 35736 000056D1 FEC9                    	dec	cl			;just CR means count = 0
 35737                                  SetCmdL1:
 35738 000056D3 AC                      	lodsb
 35739 000056D4 AA                      	stosb
 35740 000056D5 FEC1                    	inc	cl			;update count
 35741                                  	; 14/04/2023
 35742                                  	; * ; MSDOS 6.0 only !
 35743                                  	;or	al,al	; *
 35744                                  	;jz	short SetCmdL2 ; *
 35745 000056D7 3C0D                    	cmp	al,0Dh			;carriage return?
 35746 000056D9 75F8                    	jnz	short SetCmdL1		;no, continue storing
 35747                                  SetCmdL2:
 35748 000056DB 26880E8000              	mov	[es:80h],cl		;store new cmd line length
 35749 000056E0 C3                      	retn
 35750                                  
 35751                                  ; ---------------------------------------------------------------------------
 35752                                  
 35753                                  ;***	LhSetupErrMsg -- Sets up error messages
 35754                                  ;
 35755                                  ;	ENTRY	ax = error message number
 35756                                  ;
 35757                                  ;	EXIT	None
 35758                                  ;
 35759                                  ;	USED	dx
 35760                                  ;
 35761                                  ;	EFFECTS
 35762                                  ;		Everything setup to display error message
 35763                                  ; ---------------------------------------------------------------------------
 35764                                  	
 35765                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35766                                  LhSetupErrMsg:
 35767 000056E1 C606[197F]01            	mov	byte [msg_disp_class],ext_msg_class ; 1
 35768 000056E6 BA[1B7F]                	mov	dx,extend_buf_ptr
 35769 000056E9 A3[1B7F]                	mov	[extend_buf_ptr],ax
 35770 000056EC C3                      	retn
 35771                                  
 35772                                  ; ---------------------------------------------------------------------------
 35773                                  
 35774                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35775                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59DFh
 35776                                  	; MSDOS 5.0 COMMAND.COM only !
 35777                                  	; (Procedure name is not from original Microsoft source code!)
 35778                                  check_umblink:
 35779 000056ED B80058                  	mov	ax,5800h	; DOS_CHECK_STRATEGY
 35780 000056F0 CD21                    	int	21h 	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35781                                  			 ; AL = function code: get allocation strategy
 35782 000056F2 88C3                    	mov	bl,al
 35783 000056F4 B80258                  	mov	ax,5802h	; DOS_CHECK_UMBLINK
 35784 000056F7 CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35785                                  			; AL = function code: (DOS 5beta) get UMB link state
 35786 000056F9 88C7                    	mov	bh,al
 35787 000056FB 93                      	xchg	ax,bx
 35788 000056FC D0C0                    	rol	al,1
 35789 000056FE 2401                    	and	al,1
 35790 00005700 D0E4                    	shl	ah,1
 35791 00005702 08E0                    	or	al,ah
 35792 00005704 C3                      	retn
 35793                                  
 35794                                  ; ---------------------------------------------------------------------------
 35795                                  
 35796                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35797                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:59F7h
 35798                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35799                                  HideUMBs:
 35800 00005705 1E                      	push	ds
 35801 00005706 E8E4FF                  	call	check_umblink
 35802 00005709 8E1E[C58A]              	mov	ds,[RESSEG]
 35803 0000570D A2[2204]                	mov	[fInHigh],al
 35804 00005710 800E[2204]80            	or	byte [fInHigh],80h
 35805 00005715 1F                      	pop	ds
 35806 00005716 E88AFF                  	call	set_strategy
 35807                                  	;call	set_umblink
 35808                                  	;retn
 35809                                  	; 14/04/023
 35810                                  	;jmp	short set_umblink
 35811                                  
 35812                                  ; ---------------------------------------------------------------------------
 35813                                  
 35814                                  	; 14/04/2023
 35815                                  	; 13/04/2023
 35816                                  	; MSDOS 5.0 COMMAND.COM only !
 35817                                  	; (Procedure name is not from original Microsoft source code!)
 35818                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:597Bh
 35819                                  set_umblink:
 35820 00005719 B80358                  	mov	ax,5803h	; DOS_SET_UMBLINK
 35821 0000571C BB0100                  	mov	bx,1
 35822 0000571F CD21                    	int	21h	; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 35823                                  			; AL = function code: (DOS 5beta) set UMB link state
 35824 00005721 C3                      	retn
 35825                                  
 35826                                  ; ---------------------------------------------------------------------------
 35827                                  
 35828                                  ;***	SetupPath -- Do path search for the file to be executed
 35829                                  ;
 35830                                  ;	ENTRY	None
 35831                                  ;
 35832                                  ;	EXIT	Carry set if file not found or not executable file
 35833                                  ;
 35834                                  ;	EFFECTS
 35835                                  ;		ExecPath contains the full path of the file to be executed
 35836                                  ; ---------------------------------------------------------------------------
 35837                                  
 35838                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35839                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A0Fh
 35840                                  	; MSDOS 5.0 COMMAND.COM only ! (MSDOS 6.0 code is different)
 35841                                  SetupPath:
 35842                                  
 35843                                  ;Juggle around the argv pointers to make argv[1] into argv[0]. This is 
 35844                                  ;because the path search routine that we are about to invoke expects the
 35845                                  ;filename to search for to be argv[0].
 35846                                  ;
 35847                                  ;If our new argv[0] starts with a switcharacter, it's an option... skip right
 35848                                  ;over it by doing the whole move again (smaller, of course, this time).
 35849                                  
 35850                                  
 35851                                  	;mov	ax,arg.argvcnt		;total number of arguments
 35852                                  	; 14/04/2023
 35853                                  	;mov	ax,[ARG_ARGVCNT]
 35854 00005722 A1[1491]                	mov	ax,[ARG+ARG_UNIT.argvcnt]
 35855                                  
 35856 00005725 48                      	dec	ax			;less one - skip "LoadHigh"
 35857                                  	;mov	bx,SIZE Argv_ele
 35858 00005726 BB0B00                  	mov	bx,ARGV_ELE.SIZE ; 11
 35859                                  	;mov	bx,11
 35860 00005729 F7E3                    	mul	bx			;dx:ax = size of argument lists
 35861                                  
 35862                                  	; 14/04/2023
 35863 0000572B 89C1                    	mov	cx,ax			;size to move
 35864                                  
 35865                                  	;mov	di,offset TRANGROUP:Arg	;Copy TO argv[0]
 35866                                  	;mov	di,ARG_ARGV ;mov di,[ARG+ARG_UNIT.argv] ; mov di,[ARG]
 35867 0000572D BF[548E]                	mov	di,ARG	
 35868 00005730 89FE                    	mov	si,di			;
 35869                                  	;add	si,SIZE Argv_ele	;Copy FROM argv[1]
 35870 00005732 83C60B                  	add	si,ARGV_ELE.SIZE ; 11
 35871                                  	
 35872                                  	; 14/04/2023
 35873                                  	;mov	cx,ax
 35874                                  
 35875 00005735 FC                      	cld
 35876 00005736 F3A4                    	rep	movsb			;Move the argument list
 35877                                  	
 35878                                  	;dec	arg.argvcnt		;Fake one less argument, and
 35879                                  	;dec	word [ARG_ARGVCNT]
 35880 00005738 FF0E[1491]              	dec	word [ARG+ARG_UNIT.argvcnt]
 35881                                  	
 35882                                  ; Done moving... argv[0] is now the child program's name, and [1] its first arg
 35883                                  
 35884 0000573C E821DA                  	call	path_search		;look in the path
 35885                                  
 35886                                  ;ax = 0, no file found
 35887                                  ;ax < 4, batch file found -- cant be executed
 35888                                  ;ax = 4,8 => .com or .exe file found
 35889                                  
 35890 0000573F 09C0                    	or	ax,ax			;any file found?
 35891 00005741 740B                    	jz	short no_exec_file	;no, error
 35892                                  
 35893 00005743 83F804                  	cmp	ax,4			;executable file?
 35894                                  	;jl	short no_exec_bat	;no, indicate fail ; M016
 35895                                  	;clc
 35896                                  	;retn
 35897                                  	; 14/04/2023
 35898 00005746 7201                    	jb	short no_exec_bat
 35899 00005748 C3                      	retn 
 35900                                  
 35901                                  no_exec_bat:
 35902 00005749 BA[8281]                	mov	dx,NoExecBat_Ptr	;Setup message ptr ; M016
 35903 0000574C EB06                    	jmp	short lhsp_errret	;return error; M016
 35904                                  
 35905                                  no_exec_file:
 35906 0000574E B80200                  	mov	ax,ERROR_FILE_NOT_FOUND ; 2
 35907 00005751 E88DFF                  	call	LhSetupErrMsg		;setup error message
 35908                                  lhsp_errret:				; M016
 35909 00005754 F9                      	stc
 35910 00005755 C3                      	retn
 35911                                  
 35912                                  ;============================================================================
 35913                                  ; COMMAND.SKL (MESSAGE.SKL), BUILDMSG.C, MSDOS 6.0, 1991
 35914                                  ;============================================================================
 35915                                  ; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 35916                                  
 35917                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5A44h
 35918                                  
 35919                                  ; ---------------------------------------------------------------------------
 35920                                  ; Class 3 message table/structure
 35921                                  ; ---------------------------------------------------------------------------
 35922                                  
 35923                                  $M_CLASS_3_STRUC:
 35924 00005756 FF                      	db 0FFh			; $M_CLASS_ID (Class identifer)
 35925 00005757 0500                    	dw 5			; $M_COMMAND_VER (COMMAND.COM version)
 35926 00005759 A2                      	db 162			; Total number of messages
 35927                                  $M_ID_3_1:
 35928                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:5A48h)
 35929 0000575A FC03                    	dw 1020			; Message Number = 1020
 35930 0000575C 8802                    	dw MSG_1020-$+2 ; 288h	; Message offset from message number (5A48h+0288h=5CD0h)
 35931                                  $M_ID_3_2:
 35932 0000575E F703                    	dw 1015			; Message Number = 1015
 35933 00005760 9402                    	dw MSG_1015-$+2 ; 294h  ; Message offset from message number (5A4Ch+0294h=5CE0h)
 35934                                  $M_ID_3_3:	; 26/04/2023
 35935 00005762 EC03B402                	dw 1004,MSG_1004-$ ; 692
 35936 00005766 0204CA02                	dw 1026,MSG_1026-$ ; 714
 35937 0000576A 0704DA02                	dw 1031,MSG_1031-$ ; 730
 35938 0000576E 0B04E502                	dw 1035,MSG_1035-$ ; 741
 35939 00005772 2604F002                	dw 1062,MSG_1062-$ ; 752
 35940 00005776 0404FB02                	dw 1028,MSG_1028-$ ; 763
 35941 0000577A 15041903                	dw 1045,MSG_1045-$ ; 793
 35942 0000577E 11043203                	dw 1041,MSG_1041-$ ; 818
 35943 00005782 12045003                	dw 1042,MSG_1042-$ ; 848
 35944                                  $M_ID_3_12:
 35945 00005786 13046703                	dw 1043,MSG_1043-$ ; 871
 35946 0000578A EA038303                	dw 1002,MSG_1002-$ ; 899
 35947 0000578E EB03A703                	dw 1003,MSG_1003-$ ; 935
 35948 00005792 EF03BF03                	dw 1007,MSG_1007-$ ; 959
 35949 00005796 F003D603                	dw 1008,MSG_1008-$ ; 982
 35950 0000579A F103E803                	dw 1009,MSG_1009-$ ; 1000
 35951 0000579E F203F903                	dw 1010,MSG_1010-$ ; 1017
 35952 000057A2 F3031504                	dw 1011,MSG_1011-$ ; 1045
 35953 000057A6 F6032C04                	dw 1014,MSG_1014-$ ; 1068
 35954 000057AA F8033904                	dw 1016,MSG_1016-$ ; 1081
 35955 000057AE F9035F04                	dw 1017,MSG_1017-$ ; 1119
 35956 000057B2 FA038004                	dw 1018,MSG_1018-$ ; 1152
 35957                                  $M_ID_3_24:
 35958 000057B6 FB039004                	dw 1019,MSG_1019-$ ; 1168
 35959 000057BA FD039804                	dw 1021,MSG_1021-$ ; 1176
 35960 000057BE FE03B204                	dw 1022,MSG_1022-$ ; 1202
 35961 000057C2 FF03D504                	dw 1023,MSG_1023-$ ; 1237
 35962 000057C6 0004FD04                	dw 1024,MSG_1024-$ ; 1277
 35963 000057CA 01041005                	dw 1025,MSG_1025-$ ; 1296
 35964 000057CE 03042405                	dw 1027,MSG_1027-$ ; 1316
 35965 000057D2 05044105                	dw 1029,MSG_1029-$ ; 1345
 35966 000057D6 06044F05                	dw 1030,MSG_1030-$ ; 1359
 35967 000057DA 08045A05                	dw 1032,MSG_1032-$ ; 1370
 35968 000057DE 09046E05                	dw 1033,MSG_1033-$ ; 1390
 35969 000057E2 0A048005                	dw 1034,MSG_1034-$ ; 1408
 35970 000057E6 0C049205                	dw 1036,MSG_1036-$ ; 1426
 35971 000057EA 0D04A305                	dw 1037,MSG_1037-$ ; 1443
 35972 000057EE 0E04B005                	dw 1038,MSG_1038-$ ; 1456
 35973 000057F2 0F04BF05                	dw 1039,MSG_1039-$ ; 1471
 35974                                  $M_ID_3_40:
 35975 000057F6 1004F805                	dw 1040,MSG_1040-$ ; 1528
 35976 000057FA 14040906                	dw 1044,MSG_1044-$ ; 1545
 35977 000057FE 16041906                	dw 1046,MSG_1046-$ ; 1561
 35978 00005802 17044C06                	dw 1047,MSG_1047-$ ; 1612
 35979 00005806 18046106                	dw 1048,MSG_1048-$ ; 1633
 35980 0000580A 19046F06                	dw 1049,MSG_1049-$ ; 1647
 35981 0000580E 1A047506                	dw 1050,MSG_1050-$ ; 1653
 35982 00005812 1B049006                	dw 1051,MSG_1051-$ ; 1680
 35983 00005816 1C049D06                	dw 1052,MSG_1052-$ ; 1693
 35984 0000581A 1D04B006                	dw 1053,MSG_1053-$ ; 1712
 35985 0000581E 1E04D206                	dw 1054,MSG_1054-$ ; 1746
 35986                                  $M_ID_3_51:
 35987 00005822 1F04F506                	dw 1055,MSG_1055-$ ; 1781
 35988 00005826 2004FF06                	dw 1056,MSG_1056-$ ; 1791
 35989 0000582A 21040A07                	dw 1057,MSG_1057-$ ; 1802
 35990 0000582E 23041307                	dw 1059,MSG_1059-$ ; 1811
 35991 00005832 24041407                	dw 1060,MSG_1060-$ ; 1812
 35992 00005836 25041407                	dw 1061,MSG_1061-$ ; 1812
 35993 0000583A 27042A07                	dw 1063,MSG_1063-$ ; 1834
 35994 0000583E 28042907                	dw 1064,MSG_1064-$ ; 1833
 35995 00005842 29042807                	dw 1065,MSG_1065-$ ; 1832
 35996 00005846 2A042707                	dw 1066,MSG_1066-$ ; 1831
 35997 0000584A 2B042607                	dw 1067,MSG_1067-$ ; 1830
 35998 0000584E 2C042407                	dw 1068,MSG_1068-$ ; 1828
 35999 00005852 2D042B07                	dw 1069,MSG_1069-$ ; 1835
 36000 00005856 2E042B07                	dw 1070,MSG_1070-$ ; 1835
 36001 0000585A 2F042A07                	dw 1071,MSG_1071-$ ; 1834
 36002 0000585E 30042907                	dw 1072,MSG_1072-$ ; 1833
 36003                                  $M_ID_3_67:
 36004 00005862 31042E07                	dw 1073,MSG_1073-$ ; 1838
 36005 00005866 32043307                	dw 1074,MSG_1074-$ ; 1843
 36006 0000586A 33043807                	dw 1075,MSG_1075-$ ; 1848
 36007 0000586E 34043A07                	dw 1076,MSG_1076-$ ; 1850
 36008 00005872 35043907                	dw 1077,MSG_1077-$ ; 1849
 36009 00005876 36043D07                	dw 1078,MSG_1078-$ ; 1853
 36010 0000587A 37045407                	dw 1079,MSG_1079-$ ; 1876
 36011 0000587E 38045B07                	dw 1080,MSG_1080-$ ; 1883
 36012 00005882 39046D07                	dw 1081,MSG_1081-$ ; 1901
 36013 00005886 3C049407                	dw 1084,MSG_1084-$ ; 1940
 36014 0000588A 4204A007                	dw 1090,MSG_1090-$ ; 1952
 36015 0000588E 4304AA07                	dw 1091,MSG_1091-$ ; 1962
 36016 00005892 4404B407                	dw 1092,MSG_1092-$ ; 1972
 36017 00005896 4504BE07                	dw 1093,MSG_1093-$ ; 1982
 36018 0000589A 4604CF07                	dw 1094,MSG_1094-$ ; 1999
 36019 0000589E 4704E807                	dw 1095,MSG_1095-$ ; 2024
 36020 000058A2 48040108                	dw 1096,MSG_1096-$ ; 2049
 36021                                  $M_ID_3_84:
 36022 000058A6 B0042E08                	dw 1200,MSG_1200-$ ; 2094
 36023 000058AA 14052B08                	dw 1300,MSG_1300-$ ; 2091
 36024 000058AE 2805AE08                	dw 1320,MSG_1320-$ ; 2222
 36025 000058B2 2905EA08                	dw 1321,MSG_1321-$ ; 2282
 36026 000058B6 3C055709                	dw 1340,MSG_1340-$ ; 2391
 36027 000058BA 3D05AF09                	dw 1341,MSG_1341-$ ; 2479
 36028 000058BE 3E050E0A                	dw 1342,MSG_1342-$ ; 2574
 36029 000058C2 50059C0A                	dw 1360,MSG_1360-$ ; 2716
 36030 000058C6 7805B40A                	dw 1400,MSG_1400-$ ; 2740
 36031 000058CA 7905420B                	dw 1401,MSG_1401-$ ; 2882
 36032 000058CE 7A05A70B                	dw 1402,MSG_1402-$ ; 2983
 36033 000058D2 7B051A0C                	dw 1403,MSG_1403-$ ; 3098
 36034 000058D6 7C05580C                	dw 1404,MSG_1404-$ ; 3160
 36035 000058DA 8C05DC0C                	dw 1420,MSG_1420-$ ; 3292
 36036 000058DE A005630D                	dw 1440,MSG_1440-$ ; 3427
 36037 000058E2 A1058D0D                	dw 1441,MSG_1441-$ ; 3469
 36038                                  $M_ID_3_100:
 36039 000058E6 B4050D0E                	dw 1460,MSG_1460-$ ; 3597
 36040 000058EA B5056E0E                	dw 1461,MSG_1461-$ ; 3694
 36041 000058EE B605EE0E                	dw 1462,MSG_1462-$ ; 3822
 36042 000058F2 C8053A0F                	dw 1480,MSG_1480-$ ; 3898
 36043 000058F6 C905D90F                	dw 1481,MSG_1481-$ ; 4057
 36044 000058FA CA053310                	dw 1482,MSG_1482-$ ; 4147
 36045 000058FE CB059110                	dw 1483,MSG_1483-$ ; 4241
 36046 00005902 CC050811                	dw 1484,MSG_1484-$ ; 4360
 36047 00005906 CD05C411                	dw 1485,MSG_1485-$ ; 4548
 36048 0000590A CE055C12                	dw 1486,MSG_1486-$ ; 4700
 36049 0000590E CF05EF12                	dw 1487,MSG_1487-$ ; 4847
 36050 00005912 D0055213                	dw 1488,MSG_1488-$ ; 4946
 36051                                  $M_ID_3_112:
 36052 00005916 DC05E113                	dw 1500,MSG_1500-$ ; 5089
 36053 0000591A F0051C14                	dw 1520,MSG_1520-$ ; 5148
 36054 0000591E 04065614                	dw 1540,MSG_1540-$ ; 5206
 36055 00005922 0506B014                	dw 1541,MSG_1541-$ ; 5296
 36056 00005926 06061815                	dw 1542,MSG_1542-$ ; 5400
 36057 0000592A 18065015                	dw 1560,MSG_1560-$ ; 5456
 36058 0000592E 19068415                	dw 1561,MSG_1561-$ ; 5508
 36059 00005932 1A06FD15                	dw 1562,MSG_1562-$ ; 5629
 36060 00005936 1B062916                	dw 1563,MSG_1563-$ ; 5673
 36061 0000593A 1C065016                	dw 1564,MSG_1564-$ ; 5712
 36062 0000593E 1D068A16                	dw 1565,MSG_1565-$ ; 5770
 36063 00005942 1E06BB16                	dw 1566,MSG_1566-$ ; 5819
 36064 00005946 1F06E416                	dw 1567,MSG_1567-$ ; 5860
 36065 0000594A 20065A17                	dw 1568,MSG_1568-$ ; 5978
 36066 0000594E 2C06A317                	dw 1580,MSG_1580-$ ; 6051
 36067                                  $M_ID_3_127:
 36068 00005952 4006E717                	dw 1600,MSG_1600-$ ; 6119
 36069 00005956 41060018                	dw 1601,MSG_1601-$ ; 6144
 36070 0000595A 42065018                	dw 1602,MSG_1602-$ ; 6224
 36071 0000595E 54069A18                	dw 1620,MSG_1620-$ ; 6298
 36072 00005962 5506EE18                	dw 1621,MSG_1621-$ ; 6382
 36073 00005966 56066C19                	dw 1622,MSG_1622-$ ; 6508
 36074 0000596A 6806B419                	dw 1640,MSG_1640-$ ; 6580
 36075 0000596E 6906E519                	dw 1641,MSG_1641-$ ; 6629
 36076 00005972 7C06651A                	dw 1660,MSG_1660-$ ; 6757
 36077 00005976 9006A81A                	dw 1680,MSG_1680-$ ; 6824
 36078 0000597A A406CA1A                	dw 1700,MSG_1700-$ ; 6858
 36079 0000597E B806781B                	dw 1720,MSG_1720-$ ; 7032
 36080 00005982 CC06C71B                	dw 1740,MSG_1740-$ ; 7111
 36081 00005986 CD061F1C                	dw 1741,MSG_1741-$ ; 7199
 36082 0000598A E0068E1C                	dw 1760,MSG_1760-$ ; 7310
 36083 0000598E F406D71C                	dw 1780,MSG_1780-$ ; 7383
 36084                                  $M_ID_3_143:
 36085 00005992 08073F1D                	dw 1800,MSG_1800-$ ; 7487
 36086 00005996 0907891D                	dw 1801,MSG_1801-$ ; 7561
 36087 0000599A 1C07DD1D                	dw 1820,MSG_1820-$ ; 7645
 36088 0000599E 1D07211E                	dw 1821,MSG_1821-$ ; 7713
 36089 000059A2 3007A81E                	dw 1840,MSG_1840-$ ; 7848
 36090 000059A6 4407EF1E                	dw 1860,MSG_1860-$ ; 7919
 36091 000059AA 4507461F                	dw 1861,MSG_1861-$ ; 8006
 36092 000059AE 4607891F                	dw 1862,MSG_1862-$ ; 8073
 36093 000059B2 47070320                	dw 1863,MSG_1863-$ ; 8195
 36094 000059B6 4807A220                	dw 1864,MSG_1864-$ ; 8354
 36095 000059BA 49070521                	dw 1865,MSG_1865-$ ; 8453
 36096 000059BE 4A076C21                	dw 1866,MSG_1866-$ ; 8556
 36097 000059C2 5807D021                	dw 1880,MSG_1880-$ ; 8656
 36098 000059C6 59074422                	dw 1881,MSG_1881-$ ; 8772
 36099 000059CA 5A07BE22                	dw 1882,MSG_1882-$ ; 8894
 36100 000059CE 5B071123                	dw 1883,MSG_1883-$ ; 8977
 36101 000059D2 6C07B023                	dw 1900,MSG_1900-$ ; 9136
 36102 000059D6 8007C423                	dw 1920,MSG_1920-$ ; 9156
 36103 000059DA 8107F023                	dw 1921,MSG_1921-$ ; 9200
 36104                                  $M_ID_3_162:
 36105 000059DE 8207                    	dw 1922			; Message Number = 1922
 36106 000059E0 4324                    	dw MSG_1922-$ ; 9285	; Message offset from message number (5CCCh+2445h=8111h)
 36107                                  
 36108                                  ; ---------------------------------------------------------------------------
 36109                                  ; Class 3 messages
 36110                                  ; ---------------------------------------------------------------------------
 36111                                  	
 36112                                  	; 14/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36113                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:5CD0h
 36114                                  
 36115                                  MSG_1020:	; COMMON4
 36116 000059E2 0F                      	db 15	; (MSG_1015-MSG_1020)-1
 36117 000059E3 253120627974657320-     	db '%1 bytes free',0Dh,0Ah
 36117 000059EC 667265650D0A       
 36118                                  MSG_1015:	; COMMON18
 36119 000059F2 23                      	db 35
 36120 000059F3 46696C652063616E6E-     	db 'File cannot be copied onto itself',0Dh,0Ah
 36120 000059FC 6F7420626520636F70-
 36120 00005A05 696564206F6E746F20-
 36120 00005A0E 697473656C660D0A   
 36121                                  MSG_1004:	; COMMON20
 36122 00005A16 19                      	db 25
 36123 00005A17 496E73756666696369-     	db 'Insufficient disk space',0Dh,0Ah
 36123 00005A20 656E74206469736B20-
 36123 00005A29 73706163650D0A     
 36124                                  MSG_1026:	; COMMON22
 36125 00005A30 13                      	db 19
 36126 00005A31 496E76616C69642063-     	db 'Invalid code page',0Dh,0Ah
 36126 00005A3A 6F646520706167650D-
 36126 00005A43 0A                 
 36127                                  MSG_1031:	; COMMON23
 36128 00005A44 0E                      	db 14
 36129 00005A45 496E76616C69642064-     	db 'Invalid date',0Dh,0Ah
 36129 00005A4E 6174650D0A         
 36130                                  MSG_1035:	; COMMON24
 36131 00005A53 0E                      	db 14
 36132 00005A54 496E76616C69642074-     	db 'Invalid time',0Dh,0Ah
 36132 00005A5D 696D650D0A         
 36133                                  MSG_1062:	; COMMON25
 36134 00005A62 0E                      	db 14
 36135 00005A63 496E76616C69642070-     	db 'Invalid path',0Dh,0Ah
 36135 00005A6C 6174680D0A         
 36136                                  MSG_1028:	; COMMON28
 36137 00005A71 21                      	db 33
 36138 00005A72 507265737320616E79-     	db 'Press any key to continue . . .',0Dh,0Ah
 36138 00005A7B 206B657920746F2063-
 36138 00005A84 6F6E74696E7565202E-
 36138 00005A8D 202E202E0D0A       
 36139                                  MSG_1045:	; COMMON32
 36140 00005A93 1C                      	db 28
 36141 00005A94 556E61626C6520746F-     	db 'Unable to create directory',0Dh,0Ah
 36141 00005A9D 206372656174652064-
 36141 00005AA6 69726563746F72790D-
 36141 00005AAF 0A                 
 36142                                  MSG_1041:	; COMMON33
 36143 00005AB0 21                      	db 33
 36144 00005AB1 566F6C756D6520696E-     	db 'Volume in drive %1 has no label',0Dh,0Ah
 36144 00005ABA 206472697665202531-
 36144 00005AC3 20686173206E6F206C-
 36144 00005ACC 6162656C0D0A       
 36145                                  MSG_1042:	; COMMON34
 36146 00005AD2 1A                      	db 26
 36147 00005AD3 566F6C756D6520696E-     	db 'Volume in drive %1 is %2',0Dh,0Ah
 36147 00005ADC 206472697665202531-
 36147 00005AE5 2069732025320D0A   
 36148                                  MSG_1043:	; COMMON36
 36149 00005AED 1F                      	db 31  ; (MSG_1002-MSG_1043)-1
 36150 00005AEE 566F6C756D65205365-     	db 'Volume Serial Number is %1-%2',0Dh,0Ah
 36150 00005AF7 7269616C204E756D62-
 36150 00005B00 65722069732025312D-
 36150 00005B09 25320D0A           
 36151                                  MSG_1002:
 36152 00005B0D 27                              db 39
 36153 00005B0E 4475706C6963617465-     	db 'Duplicate file name or file not found',0Dh,0Ah
 36153 00005B17 2066696C65206E616D-
 36153 00005B20 65206F722066696C65-
 36153 00005B29 206E6F7420666F756E-
 36153 00005B32 640D0A             
 36154                                  MSG_1003:
 36155 00005B35 1B                      	db 27
 36156 00005B36 496E76616C69642070-     	db 'Invalid path or file name',0Dh,0Ah
 36156 00005B3F 617468206F72206669-
 36156 00005B48 6C65206E616D650D0A 
 36157                                  MSG_1007:
 36158 00005B51 1A                      	db 26
 36159 00005B52 4F7574206F6620656E-     	db 'Out of environment space',0Dh,0Ah
 36159 00005B5B 7669726F6E6D656E74-
 36159 00005B64 2073706163650D0A   
 36160                                  MSG_1008:
 36161 00005B6C 15                      	db 21
 36162 00005B6D 46696C652063726561-     	db 'File creation error',0Dh,0Ah
 36162 00005B76 74696F6E206572726F-
 36162 00005B7F 720D0A             
 36163                                  MSG_1009:
 36164 00005B82 14                      	db 20  ; (MSG_1010-MSG_1009)-1
 36165 00005B83 42617463682066696C-     	db 'Batch file missing',0Dh,0Ah
 36165 00005B8C 65206D697373696E67-
 36165 00005B95 0D0A               
 36166                                  MSG_1010:
 36167 00005B97 1F                      	db 31
 36168 00005B98 0D0A                    	db 0Dh,0Ah
 36169 00005B9A 496E73657274206469-     	db 'Insert disk with batch file',0Dh,0Ah
 36169 00005BA3 736B20776974682062-
 36169 00005BAC 617463682066696C65-
 36169 00005BB5 0D0A               
 36170                                  MSG_1011:
 36171 00005BB7 1A                      	db 26
 36172 00005BB8 42616420636F6D6D61-     	db 'Bad command or file name',0Dh,0Ah
 36172 00005BC1 6E64206F722066696C-
 36172 00005BCA 65206E616D650D0A   
 36173                                  MSG_1014:	; EXTEND5
 36174 00005BD2 10                      	db 16
 36175 00005BD3 416363657373206465-     	db 'Access denied ',0Dh,0Ah
 36175 00005BDC 6E696564200D0A     
 36176                                  MSG_1016:
 36177 00005BE3 29                      	db 41
 36178 00005BE4 436F6E74656E74206F-     	db 'Content of destination lost before copy',0Dh,0Ah
 36178 00005BED 662064657374696E61-
 36178 00005BF6 74696F6E206C6F7374-
 36178 00005BFF 206265666F72652063-
 36178 00005C08 6F70790D0A         
 36179                                  MSG_1017:
 36180 00005C0D 24                      	db 36
 36181 00005C0E 496E76616C69642066-     	db 'Invalid filename or file not found',0Dh,0Ah
 36181 00005C17 696C656E616D65206F-
 36181 00005C20 722066696C65206E6F-
 36181 00005C29 7420666F756E640D0A 
 36182                                  MSG_1018:
 36183 00005C32 13                      	db 19
 36184 00005C33 25312066696C652873-     	db '%1 file(s) copied',0Dh,0Ah
 36184 00005C3C 2920636F706965640D-
 36184 00005C45 0A                 
 36185                                  MSG_1019:
 36186 00005C46 0B                      	db 11
 36187 00005C47 25312066696C652873-     	db '%1 file(s) '
 36187 00005C50 2920               
 36188                                  MSG_1021:	; EXTEND15
 36189 00005C52 1D                      	db 29
 36190 00005C53 496E76616C69642064-     	db 'Invalid drive specification',0Dh,0Ah
 36190 00005C5C 726976652073706563-
 36190 00005C65 696669636174696F6E-
 36190 00005C6E 0D0A               
 36191                                  MSG_1022:
 36192 00005C70 26                      	db 38
 36193 00005C71 436F64652070616765-     	db 'Code page %1 not prepared for system',0Dh,0Ah
 36193 00005C7A 202531206E6F742070-
 36193 00005C83 726570617265642066-
 36193 00005C8C 6F722073797374656D-
 36193 00005C95 0D0A               
 36194                                  MSG_1023:
 36195 00005C97 2B                      	db 43
 36196 00005C98 436F64652070616765-     	db 'Code page %1 not prepared for all devices',0Dh,0Ah
 36196 00005CA1 202531206E6F742070-
 36196 00005CAA 726570617265642066-
 36196 00005CB3 6F7220616C6C206465-
 36196 00005CBC 76696365730D0A     
 36197                                  MSG_1024:
 36198 00005CC3 16                      	db 22
 36199 00005CC4 41637469766520636F-     	db 'Active code page: %1',0Dh,0Ah
 36199 00005CCD 646520706167653A20-
 36199 00005CD6 25310D0A           
 36200                                  MSG_1025:
 36201 00005CDA 17                      	db 23
 36202 00005CDB 4E4C5346554E43206E-     	db 'NLSFUNC not installed',0Dh,0Ah
 36202 00005CE4 6F7420696E7374616C-
 36202 00005CED 6C65640D0A         
 36203                                  MSG_1027:
 36204 00005CF2 20                      	db 32
 36205 00005CF3 43757272656E742064-     	db 'Current drive is no longer valid'
 36205 00005CFC 72697665206973206E-
 36205 00005D05 6F206C6F6E67657220-
 36205 00005D0E 76616C6964         
 36206                                  MSG_1029:
 36207 00005D13 11                      	db 17
 36208 00005D14 4C6162656C206E6F74-     	db 'Label not found',0Dh,0Ah
 36208 00005D1D 20666F756E640D0A   
 36209                                  MSG_1030:
 36210 00005D25 0E                      	db 14
 36211 00005D26 53796E746178206572-     	db 'Syntax error',0Dh,0Ah
 36211 00005D2F 726F720D0A         
 36212                                  MSG_1032:
 36213 00005D34 17                      	db 23
 36214 00005D35 43757272656E742064-     	db 'Current date is %1 %2',0Dh,0Ah
 36214 00005D3E 617465206973202531-
 36214 00005D47 2025320D0A         
 36215                                  MSG_1033:
 36216 00005D4C 15                      	db 21
 36217 00005D4D 53756E4D6F6E547565-     	db 'SunMonTueWedThuFriSat'
 36217 00005D56 576564546875467269-
 36217 00005D5F 536174             
 36218                                  MSG_1034:
 36219 00005D62 15                      	db 21
 36220 00005D63 456E746572206E6577-     	db 'Enter new date (%1): '
 36220 00005D6C 206461746520282531-
 36220 00005D75 293A20             
 36221                                  MSG_1036:
 36222 00005D78 14                      	db 20
 36223 00005D79 43757272656E742074-     	db 'Current time is %1',0Dh,0Ah
 36223 00005D82 696D65206973202531-
 36223 00005D8B 0D0A               
 36224                                  MSG_1037:
 36225 00005D8D 10                      	db 16
 36226 00005D8E 456E746572206E6577-     	db 'Enter new time: '
 36226 00005D97 2074696D653A20     
 36227                                  MSG_1038:
 36228 00005D9E 12                              db 18
 36229 00005D9F 2C2020202044656C65-     	db ',    Delete (Y/N)?'
 36229 00005DA8 74652028592F4E293F 
 36230                                  MSG_1039:
 36231 00005DB1 3C                              db 60
 36232 00005DB2 416C6C2066696C6573-     	db 'All files in directory will be deleted!',0Dh,0Ah
 36232 00005DBB 20696E206469726563-
 36232 00005DC4 746F72792077696C6C-
 36232 00005DCD 2062652064656C6574-
 36232 00005DD6 6564210D0A         
 36233 00005DDB 41726520796F752073-     	db 'Are you sure (Y/N)?'
 36233 00005DE4 7572652028592F4E29-
 36233 00005DED 3F                 
 36234                                  MSG_1040:
 36235 00005DEE 14                      	db 20
 36236 00005DEF 4D532D444F53205665-     	db 'MS-DOS Version %1.%2'
 36236 00005DF8 7273696F6E2025312E-
 36236 00005E01 2532               
 36237                                  MSG_1044:
 36238 00005E03 13                      	db 19
 36239 00005E04 496E76616C69642064-     	db 'Invalid directory',0Dh,0Ah
 36239 00005E0D 69726563746F72790D-
 36239 00005E16 0A                 
 36240                                  MSG_1046:
 36241 00005E17 36                      	db 54
 36242 00005E18 496E76616C69642070-     	db 'Invalid path, not directory,',0Dh,0Ah
 36242 00005E21 6174682C206E6F7420-
 36242 00005E2A 6469726563746F7279-
 36242 00005E33 2C0D0A             
 36243 00005E36 6F7220646972656374-     	db 'or directory not empty',0Dh,0Ah
 36243 00005E3F 6F7279206E6F742065-
 36243 00005E48 6D7074790D0A       
 36244                                  MSG_1047:
 36245 00005E4E 18                      	db 24
 36246 00005E4F 4D7573742073706563-     	db 'Must specify ON or OFF',0Dh,0Ah
 36246 00005E58 696679204F4E206F72-
 36246 00005E61 204F46460D0A       
 36247                                  MSG_1048:
 36248 00005E67 11                      	db 17
 36249 00005E68 4469726563746F7279-     	db 'Directory of %1',0Dh,0Ah
 36249 00005E71 206F662025310D0A   
 36250                                  MSG_1049:
 36251 00005E79 09                      	db 9
 36252 00005E7A 4E6F20506174680D0A      	db 'No Path',0Dh,0Ah
 36253                                  MSG_1050:
 36254 00005E83 1E                      	db 30
 36255 00005E84 496E76616C69642064-     	db 'Invalid drive in search path',0Dh,0Ah
 36255 00005E8D 7269766520696E2073-
 36255 00005E96 656172636820706174-
 36255 00005E9F 680D0A             
 36256                                  MSG_1051:
 36257 00005EA2 10                      	db 16
 36258 00005EA3 496E76616C69642064-     	db 'Invalid device',0Dh,0Ah
 36258 00005EAC 65766963650D0A     
 36259                                  MSG_1052:
 36260 00005EB3 16                      	db 22
 36261 00005EB4 464F522063616E6E6F-     	db 'FOR cannot be nested',0Dh,0Ah
 36261 00005EBD 74206265206E657374-
 36261 00005EC6 65640D0A           
 36262                                  MSG_1053:
 36263 00005ECA 25                      	db 37
 36264 00005ECB 496E7465726D656469-     	db 'Intermediate file error during pipe',0Dh,0Ah
 36264 00005ED4 6174652066696C6520-
 36264 00005EDD 6572726F7220647572-
 36264 00005EE6 696E6720706970650D-
 36264 00005EEF 0A                 
 36265                                  MSG_1054:
 36266 00005EF0 26                      	db 38
 36267 00005EF1 43616E6E6F7420646F-     	db 'Cannot do binary reads from a device',0Dh,0Ah
 36267 00005EFA 2062696E6172792072-
 36267 00005F03 656164732066726F6D-
 36267 00005F0C 206120646576696365-
 36267 00005F15 0D0A               
 36268                                  
 36269                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:6205h)
 36270                                  MSG_1055:
 36271 00005F17 0D                      	db 13
 36272 00005F18 425245414B20697320-     	db 'BREAK is %1',0Dh,0Ah
 36272 00005F21 25310D0A           
 36273                                  MSG_1056:
 36274 00005F25 0E                      	db 14
 36275 00005F26 564552494659206973-     	db 'VERIFY is %1',0Dh,0Ah
 36275 00005F2F 2025310D0A         
 36276                                  MSG_1057:
 36277 00005F34 0C                      	db 12
 36278 00005F35 4543484F2069732025-     	db 'ECHO is %1',0Dh,0Ah
 36278 00005F3E 310D0A             
 36279                                  MSG_1059:
 36280 00005F41 04                      	db 4
 36281 00005F42 6F666600                	db 'off',0
 36282                                  MSG_1060:
 36283 00005F46 03                      	db 3
 36284 00005F47 6F6E00                  	db 'on',0
 36285                                  MSG_1061:
 36286 00005F4A 19                      	db 25
 36287 00005F4B 4572726F7220777269-     	db 'Error writing to device',0Dh,0Ah
 36287 00005F54 74696E6720746F2064-
 36287 00005F5D 65766963650D0A     
 36288                                  MSG_1063:
 36289 00005F64 02                      	db 2
 36290 00005F65 2531                    	db '%1'
 36291                                  MSG_1064:
 36292 00005F67 02                      	db 2
 36293 00005F68 2531                    	db '%1'
 36294                                  MSG_1065:
 36295 00005F6A 02                      	db 2
 36296 00005F6B 2531                    	db '%1'
 36297                                  MSG_1066:
 36298 00005F6D 02                      	db 2
 36299 00005F6E 2531                    	db '%1'
 36300                                  MSG_1067:
 36301 00005F70 01                      	db 1
 36302 00005F71 09                      	db 9
 36303                                  MSG_1068:
 36304 00005F72 0A                      	db 10
 36305 00005F73 203C4449523E202020-     	db ' <DIR>    '
 36305 00005F7C 20                 
 36306                                  MSG_1069:
 36307 00005F7D 03                      	db 3
 36308 00005F7E 082008                  	db 8, 20h, 8
 36309                                  MSG_1070:	; CRLF		
 36310 00005F81 02                      	db 2
 36311 00005F82 0D                      	db 0Dh
 36312 00005F83 0A                      	db 0Ah
 36313                                  MSG_1071:
 36314 00005F84 02                      	db 2
 36315 00005F85 2531                    	db '%1'
 36316                                  MSG_1072:
 36317 00005F87 08                      	db 8
 36318 00005F88 6D6D2D64642D7979        	db 'mm-dd-yy'
 36319                                  MSG_1073:
 36320 00005F90 08                      	db 8
 36321 00005F91 64642D6D6D2D7979        	db 'dd-mm-yy'
 36322                                  MSG_1074:
 36323 00005F99 08                      	db 8
 36324 00005F9A 79792D6D6D2D6464        	db 'yy-mm-dd'
 36325                                  MSG_1075:
 36326 00005FA2 05                      	db 5
 36327 00005FA3 2531202532              	db '%1 %2'
 36328                                  MSG_1076:
 36329 00005FA8 02                      	db 2
 36330 00005FA9 2531                    	db '%1'
 36331                                  MSG_1077:
 36332 00005FAB 07                      	db 7
 36333 00005FAC 20253120202532          	db ' %1  %2'
 36334                                  MSG_1078:
 36335 00005FB3 1A                      	db 26
 36336 00005FB4 4469726563746F7279-     	db 'Directory already exists',0Dh,0Ah
 36336 00005FBD 20616C726561647920-
 36336 00005FC6 6578697374730D0A   
 36337                                  MSG_1079:
 36338 00005FCE 0A                      	db 10
 36339 00005FCF 25312062797465730D-     	db '%1 bytes',0Dh,0Ah
 36339 00005FD8 0A                 
 36340                                  MSG_1080:
 36341 00005FD9 15                      	db 21
 36342 00005FDA 546F74616C2066696C-     	db 'Total files listed:',0Dh,0Ah
 36342 00005FE3 6573206C6973746564-
 36342 00005FEC 3A0D0A             
 36343                                  MSG_1081:
 36344 00005FEF 2A                      	db 42
 36345 00005FF0 284572726F72206F63-     	db '(Error occurred in environment variable)',0Dh,0Ah
 36345 00005FF9 63757272656420696E-
 36345 00006002 20656E7669726F6E6D-
 36345 0000600B 656E74207661726961-
 36345 00006014 626C65290D0A       
 36346                                  MSG_1084:
 36347 0000601A 0F                      	db 15
 36348 0000601B 28636F6E74696E7569-     	db '(continuing %1)'
 36348 00006024 6E6720253129       
 36349                                  MSG_1090:
 36350 0000602A 0D                      	db 13
 36351 0000602B 5265766973696F6E20-     	db 'Revision %1',0Dh,0Ah
 36351 00006034 25310D0A           
 36352                                  MSG_1091:
 36353 00006038 0D                      	db 13
 36354 00006039 444F5320697320696E-     	db 'DOS is in ROM'
 36354 00006042 20524F4D           
 36355                                  MSG_1092:
 36356 00006046 0D                      	db 13
 36357 00006047 444F5320697320696E-     	db 'DOS is in HMA'
 36357 00006050 20484D41           
 36358                                  MSG_1093:
 36359 00006054 14                      	db 20
 36360 00006055 444F5320697320696E-     	db 'DOS is in low memory'
 36360 0000605E 206C6F77206D656D6F-
 36360 00006067 7279               
 36361                                  MSG_1094:
 36362 00006069 1C                      	db 28
 36363 0000606A 43616E6E6F74204C6F-     	db 'Cannot Loadhigh batch file',0Dh,0Ah
 36363 00006073 616468696768206261-
 36363 0000607C 7463682066696C650D-
 36363 00006085 0A                 
 36364                                  MSG_1095:
 36365 00006086 1C                      	db 28
 36366 00006087 4C6F6164486967683A-     	db 'LoadHigh: Invalid filename',0Dh,0Ah
 36366 00006090 20496E76616C696420-
 36366 00006099 66696C656E616D650D-
 36366 000060A2 0A                 
 36367                                  MSG_1096:
 36368 000060A3 30                      	db 48
 36369 000060A4 43616E6E6F74206F70-     	db 'Cannot open specified country information file',0Dh,0Ah
 36369 000060AD 656E20737065636966-
 36369 000060B6 69656420636F756E74-
 36369 000060BF 727920696E666F726D-
 36369 000060C8 6174696F6E2066696C-
 36369 000060D1 650D0A             
 36370                                  
 36371                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:63C2h)
 36372                                  MSG_1200:
 36373 000060D4 00                      	db 0	; /? unimplemented
 36374                                  	; (MSDOS 5.0 COMMAND.COM - TRANGROUP:63C3h)
 36375                                  MSG_1300:
 36376 000060D5 86                      	db 134
 36377 000060D6 53657473206F722063-     	db 'Sets or clears extended CTRL+C checking.',0Dh,0Ah
 36377 000060DF 6C6561727320657874-
 36377 000060E8 656E64656420435452-
 36377 000060F1 4C2B4320636865636B-
 36377 000060FA 696E672E0D0A       
 36378 00006100 0D0A                    	db 0Dh,0Ah
 36379 00006102 425245414B205B4F4E-     	db 'BREAK [ON | OFF]',0Dh,0Ah
 36379 0000610B 207C204F46465D0D0A 
 36380 00006114 0D0A                    	db 0Dh,0Ah
 36381 00006116 547970652042524541-     	db 'Type BREAK without a parameter to display the current BREAK setting.',0Dh,0Ah
 36381 0000611F 4B20776974686F7574-
 36381 00006128 206120706172616D65-
 36381 00006131 74657220746F206469-
 36381 0000613A 73706C617920746865-
 36381 00006143 2063757272656E7420-
 36381 0000614C 425245414B20736574-
 36381 00006155 74696E672E0D0A     
 36382                                  MSG_1320:
 36383 0000615C 3F                      	db 63
 36384 0000615D 446973706C61797320-     	db 'Displays or sets the active code page number.',0Dh,0Ah
 36384 00006166 6F7220736574732074-
 36384 0000616F 686520616374697665-
 36384 00006178 20636F646520706167-
 36384 00006181 65206E756D6265722E-
 36384 0000618A 0D0A               
 36385 0000618C 0D0A                    	db 0Dh,0Ah
 36386 0000618E 43484350205B6E6E6E-     	db 'CHCP [nnn]',0Dh,0Ah
 36386 00006197 5D0D0A             
 36387 0000619A 0D0A                    	db 0Dh,0Ah
 36388                                  MSG_1321:
 36389 0000619C 70                      	db 112
 36390 0000619D 20206E6E6E20202053-     	db '  nnn   Specifies a code page number.',0Dh,0Ah
 36390 000061A6 706563696669657320-
 36390 000061AF 6120636F6465207061-
 36390 000061B8 6765206E756D626572-
 36390 000061C1 2E0D0A             
 36391 000061C4 0D0A                    	db 0Dh,0Ah
 36392 000061C6 547970652043484350-     	db 'Type CHCP without a parameter to display the active code page number.',0Dh,0Ah
 36392 000061CF 20776974686F757420-
 36392 000061D8 6120706172616D6574-
 36392 000061E1 657220746F20646973-
 36392 000061EA 706C61792074686520-
 36392 000061F3 61637469766520636F-
 36392 000061FC 64652070616765206E-
 36392 00006205 756D6265722E0D0A   
 36393                                  MSG_1340:
 36394 0000620D 5B                      	db 91
 36395 0000620E 446973706C61797320-     	db 'Displays the name of or changes the current directory.',0Dh,0Ah
 36395 00006217 746865206E616D6520-
 36395 00006220 6F66206F7220636861-
 36395 00006229 6E6765732074686520-
 36395 00006232 63757272656E742064-
 36395 0000623B 69726563746F72792E-
 36395 00006244 0D0A               
 36396 00006246 0D0A                    	db 0Dh,0Ah
 36397 00006248 4348444952205B6472-     	db 'CHDIR [drive:][path]',0Dh,0Ah
 36397 00006251 6976653A5D5B706174-
 36397 0000625A 685D0D0A           
 36398 0000625E 43484449525B2E2E5D-     	db 'CHDIR[..]',0Dh,0Ah
 36398 00006267 0D0A               
 36399                                  MSG_1341:
 36400 00006269 62                      	db 98
 36401 0000626A 4344205B6472697665-     	db 'CD [drive:][path]',0Dh,0Ah
 36401 00006273 3A5D5B706174685D0D-
 36401 0000627C 0A                 
 36402 0000627D 43445B2E2E5D0D0A        	db 'CD[..]',0Dh,0Ah
 36403 00006285 0D0A                    	db 0Dh,0Ah
 36404 00006287 20202E2E2020205370-     	db '  ..   Specifies that you want to change to the parent directory.'
 36404 00006290 656369666965732074-
 36404 00006299 68617420796F752077-
 36404 000062A2 616E7420746F206368-
 36404 000062AB 616E676520746F2074-
 36404 000062B4 686520706172656E74-
 36404 000062BD 206469726563746F72-
 36404 000062C6 792E               
 36405 000062C8 0D0A                    	db 0Dh,0Ah
 36406 000062CA 0D0A                    	db 0Dh,0Ah
 36407                                  MSG_1342:
 36408 000062CC 91                      	db 145
 36409 000062CD 547970652043442064-     	db 'Type CD drive: to display the current directory in the specified '
 36409 000062D6 726976653A20746F20-
 36409 000062DF 646973706C61792074-
 36409 000062E8 68652063757272656E-
 36409 000062F1 74206469726563746F-
 36409 000062FA 727920696E20746865-
 36409 00006303 207370656369666965-
 36409 0000630C 6420               
 36410 0000630E 64726976652E0D0A        	db 'drive.',0Dh,0Ah
 36411 00006316 547970652043442077-     	db 'Type CD without parameters to display the current drive and directory.',0Dh,0Ah
 36411 0000631F 6974686F7574207061-
 36411 00006328 72616D657465727320-
 36411 00006331 746F20646973706C61-
 36411 0000633A 792074686520637572-
 36411 00006343 72656E742064726976-
 36411 0000634C 6520616E6420646972-
 36411 00006355 6563746F72792E0D0A 
 36412                                  MSG_1360:
 36413 0000635E 1B                      	db 27
 36414 0000635F 436C65617273207468-     	db 'Clears the screen.',0Dh,0Ah
 36414 00006368 652073637265656E2E-
 36414 00006371 0D0A               
 36415 00006373 0D0A                    	db 0Dh,0Ah
 36416 00006375 434C530D0A              	db 'CLS',0Dh,0Ah
 36417                                  MSG_1400:
 36418 0000637A 91                      	db 145
 36419 0000637B 436F70696573206F6E-     	db 'Copies one or more files to another location.',0Dh,0Ah
 36419 00006384 65206F72206D6F7265-
 36419 0000638D 2066696C657320746F-
 36419 00006396 20616E6F7468657220-
 36419 0000639F 6C6F636174696F6E2E-
 36419 000063A8 0D0A               
 36420 000063AA 0D0A                    	db 0Dh,0Ah
 36421 000063AC 434F5059205B2F4120-     	db 'COPY [/A | /B] source [/A | /B] [+ source [/A | /B] [+ ...]] [destination',0Dh,0Ah
 36421 000063B5 7C202F425D20736F75-
 36421 000063BE 726365205B2F41207C-
 36421 000063C7 202F425D205B2B2073-
 36421 000063D0 6F75726365205B2F41-
 36421 000063D9 207C202F425D205B2B-
 36421 000063E2 202E2E2E5D5D205B64-
 36421 000063EB 657374696E6174696F-
 36421 000063F4 6E0D0A             
 36422 000063F7 20205B2F41207C202F-     	db '  [/A | /B]] [/V]',0Dh,0Ah
 36422 00006400 425D5D205B2F565D0D-
 36422 00006409 0A                 
 36423 0000640A 0D0A                    	db 0Dh,0Ah
 36424                                  MSG_1401:
 36425 0000640C 68                      	db 104
 36426 0000640D 2020736F7572636520-     	db '  source       Specifies the file or files to be copied.',0Dh,0Ah
 36426 00006416 202020202020537065-
 36426 0000641F 636966696573207468-
 36426 00006428 652066696C65206F72-
 36426 00006431 2066696C657320746F-
 36426 0000643A 20626520636F706965-
 36426 00006443 642E0D0A           
 36427 00006447 20202F412020202020-     	db '  /A           Indicates an ASCII text file.',0Dh,0Ah
 36427 00006450 202020202020496E64-
 36427 00006459 69636174657320616E-
 36427 00006462 204153434949207465-
 36427 0000646B 78742066696C652E0D-
 36427 00006474 0A                 
 36428                                  MSG_1402:
 36429 00006475 76                      	db 118
 36430 00006476 20202F422020202020-     	db '  /B           Indicates a binary file.',0Dh,0Ah
 36430 0000647F 202020202020496E64-
 36430 00006488 696361746573206120-
 36430 00006491 62696E617279206669-
 36430 0000649A 6C652E0D0A         
 36431 0000649F 202064657374696E61-     	db '  destination  Specifies the directory and/or filename for the new file(s).',0Dh,0Ah
 36431 000064A8 74696F6E2020537065-
 36431 000064B1 636966696573207468-
 36431 000064BA 65206469726563746F-
 36431 000064C3 727920616E642F6F72-
 36431 000064CC 2066696C656E616D65-
 36431 000064D5 20666F722074686520-
 36431 000064DE 6E65772066696C6528-
 36431 000064E7 73292E0D0A         
 36432                                  MSG_1403:	
 36433 000064EC 41                      	db 65
 36434 000064ED 20202F562020202020-     	db '  /V           Verifies that new files are written correctly.',0Dh,0Ah
 36434 000064F6 202020202020566572-
 36434 000064FF 696669657320746861-
 36434 00006508 74206E65772066696C-
 36434 00006511 657320617265207772-
 36434 0000651A 697474656E20636F72-
 36434 00006523 726563746C792E0D0A 
 36435 0000652C 0D0A                    	db 0Dh,0Ah
 36436                                  MSG_1404:
 36437 0000652E 87                      	db 135
 36438 0000652F 546F20617070656E64-     	db 'To append files, specify a single file for destination, but multiple files',0Dh,0Ah
 36438 00006538 2066696C65732C2073-
 36438 00006541 706563696679206120-
 36438 0000654A 73696E676C65206669-
 36438 00006553 6C6520666F72206465-
 36438 0000655C 7374696E6174696F6E-
 36438 00006565 2C20627574206D756C-
 36438 0000656E 7469706C652066696C-
 36438 00006577 65730D0A           
 36439 0000657B 666F7220736F757263-     	db 'for source (using wildcards or file1+file2+file3 format).',0Dh,0Ah
 36439 00006584 6520287573696E6720-
 36439 0000658D 77696C646361726473-
 36439 00006596 206F722066696C6531-
 36439 0000659F 2B66696C65322B6669-
 36439 000065A8 6C653320666F726D61-
 36439 000065B1 74292E0D0A         
 36440                                  MSG_1420:
 36441 000065B6 8A                      	db 138
 36442 000065B7 4368616E6765732074-     	db 'Changes the terminal device used to control your system.',0Dh,0Ah
 36442 000065C0 6865207465726D696E-
 36442 000065C9 616C20646576696365-
 36442 000065D2 207573656420746F20-
 36442 000065DB 636F6E74726F6C2079-
 36442 000065E4 6F7572207379737465-
 36442 000065ED 6D2E0D0A           
 36443 000065F1 0D0A                    	db 0Dh,0Ah
 36444 000065F3 435454592064657669-     	db 'CTTY device',0Dh,0Ah
 36444 000065FC 63650D0A           
 36445 00006600 0D0A                    	db 0Dh,0Ah
 36446 00006602 202064657669636520-     	db '  device   The terminal device you want to use, such as COM1.',0Dh,0Ah
 36446 0000660B 202054686520746572-
 36446 00006614 6D696E616C20646576-
 36446 0000661D 69636520796F752077-
 36446 00006626 616E7420746F207573-
 36446 0000662F 652C20737563682061-
 36446 00006638 7320434F4D312E0D0A 
 36447                                  MSG_1440:
 36448 00006641 2D                      	db 45
 36449 00006642 446973706C61797320-     	db 'Displays or sets the date.',0Dh,0Ah
 36449 0000664B 6F7220736574732074-
 36449 00006654 686520646174652E0D-
 36449 0000665D 0A                 
 36450 0000665E 0D0A                    	db 0Dh,0Ah
 36451 00006660 44415445205B646174-     	db 'DATE [date]',0Dh,0Ah
 36451 00006669 655D0D0A           
 36452 0000666D 0D0A                    	db 0Dh,0Ah
 36453                                  MSG_1441:
 36454 0000666F 83                      	db 131
 36455 00006670 547970652044415445-     	db 'Type DATE without parameters to display the current date setting and',0Dh,0Ah
 36455 00006679 20776974686F757420-
 36455 00006682 706172616D65746572-
 36455 0000668B 7320746F2064697370-
 36455 00006694 6C6179207468652063-
 36455 0000669D 757272656E74206461-
 36455 000066A6 74652073657474696E-
 36455 000066AF 6720616E640D0A     
 36456 000066B6 612070726F6D707420-     	db 'a prompt for a new one.  Press ENTER to keep the same date.',0Dh,0Ah
 36456 000066BF 666F722061206E6577-
 36456 000066C8 206F6E652E20205072-
 36456 000066D1 65737320454E544552-
 36456 000066DA 20746F206B65657020-
 36456 000066E3 7468652073616D6520-
 36456 000066EC 646174652E0D0A     
 36457                                  MSG_1460:	
 36458 000066F3 64                      	db 100
 36459 000066F4 44656C65746573206F-     	db 'Deletes one or more files.',0Dh,0Ah
 36459 000066FD 6E65206F72206D6F72-
 36459 00006706 652066696C65732E0D-
 36459 0000670F 0A                 
 36460 00006710 0D0A                    	db 0Dh,0Ah
 36461 00006712 44454C205B64726976-     	db 'DEL [drive:][path]filename [/P]',0Dh,0Ah
 36461 0000671B 653A5D5B706174685D-
 36461 00006724 66696C656E616D6520-
 36461 0000672D 5B2F505D0D0A       
 36462 00006733 4552415345205B6472-     	db 'ERASE [drive:][path]filename [/P]',0Dh,0Ah
 36462 0000673C 6976653A5D5B706174-
 36462 00006745 685D66696C656E616D-
 36462 0000674E 65205B2F505D0D0A   
 36463 00006756 0D0A                    	db 0Dh,0Ah
 36464                                  MSG_1461:
 36465 00006758 83                      	db 131
 36466 00006759 20205B64726976653A-     	db '  [drive:][path]filename  Specifies the file(s) to delete.  Specify multiple',0Dh,0Ah
 36466 00006762 5D5B706174685D6669-
 36466 0000676B 6C656E616D65202053-
 36466 00006774 706563696669657320-
 36466 0000677D 7468652066696C6528-
 36466 00006786 732920746F2064656C-
 36466 0000678F 6574652E2020537065-
 36466 00006798 63696679206D756C74-
 36466 000067A1 69706C650D0A       
 36467 000067A7 202020202020202020-     	db '                          files by using wildcards.',0Dh,0Ah
 36467 000067B0 202020202020202020-
 36467 000067B9 202020202020202066-
 36467 000067C2 696C65732062792075-
 36467 000067CB 73696E672077696C64-
 36467 000067D4 63617264732E0D0A   
 36468                                  MSG_1462:
 36469 000067DC 4F                      	db 79
 36470 000067DD 20202F502020202020-     	db '  /P                      Prompts for confirmation before deleting each file.',0Dh,0Ah
 36470 000067E6 202020202020202020-
 36470 000067EF 202020202020202050-
 36470 000067F8 726F6D70747320666F-
 36470 00006801 7220636F6E6669726D-
 36470 0000680A 6174696F6E20626566-
 36470 00006813 6F72652064656C6574-
 36470 0000681C 696E67206561636820-
 36470 00006825 66696C652E0D0A     
 36471                                  MSG_1480:
 36472 0000682C A2                      	db 162
 36473 0000682D 446973706C61797320-     	db 'Displays a list of files and subdirectories in a directory.',0Dh,0Ah
 36473 00006836 61206C697374206F66-
 36473 0000683F 2066696C657320616E-
 36473 00006848 642073756264697265-
 36473 00006851 63746F726965732069-
 36473 0000685A 6E2061206469726563-
 36473 00006863 746F72792E0D0A     
 36474 0000686A 0D0A                    	db 0Dh,0Ah
 36475 0000686C 444952205B64726976-     	db 'DIR [drive:][path][filename] [/P] [/W] [/A[[:]attributes]]',0Dh,0Ah
 36475 00006875 653A5D5B706174685D-
 36475 0000687E 5B66696C656E616D65-
 36475 00006887 5D205B2F505D205B2F-
 36475 00006890 575D205B2F415B5B3A-
 36475 00006899 5D6174747269627574-
 36475 000068A2 65735D5D0D0A       
 36476 000068A8 20205B2F4F5B5B3A5D-     	db '  [/O[[:]sortorder]] [/S] [/B] [/L]',0Dh,0Ah
 36476 000068B1 736F72746F72646572-
 36476 000068BA 5D5D205B2F535D205B-
 36476 000068C3 2F425D205B2F4C5D0D-
 36476 000068CC 0A                 
 36477 000068CD 0D0A                    	db 0Dh,0Ah
 36478                                  MSG_1481:
 36479 000068CF 5D                      	db 93
 36480 000068D0 20205B64726976653A-     	db '  [drive:][path][filename]',0Dh,0Ah
 36480 000068D9 5D5B706174685D5B66-
 36480 000068E2 696C656E616D655D0D-
 36480 000068EB 0A                 
 36481 000068EC 202020202020202020-     	db '              Specifies drive, directory, and/or files to list.',0Dh,0Ah
 36481 000068F5 202020202053706563-
 36481 000068FE 696669657320647269-
 36481 00006907 76652C206469726563-
 36481 00006910 746F72792C20616E64-
 36481 00006919 2F6F722066696C6573-
 36481 00006922 20746F206C6973742E-
 36481 0000692B 0D0A               
 36482                                  MSG_1482:
 36483 0000692D 61                      	db 97
 36484 0000692E 20202F502020202020-     	db '  /P          Pauses after each screenful of information.',0Dh,0Ah
 36484 00006937 202020202050617573-
 36484 00006940 657320616674657220-
 36484 00006949 656163682073637265-
 36484 00006952 656E66756C206F6620-
 36484 0000695B 696E666F726D617469-
 36484 00006964 6F6E2E0D0A         
 36485 00006969 20202F572020202020-     	db '  /W          Uses wide list format.',0Dh,0Ah
 36485 00006972 202020202055736573-
 36485 0000697B 2077696465206C6973-
 36485 00006984 7420666F726D61742E-
 36485 0000698D 0D0A               
 36486                                  MSG_1483:	
 36487 0000698F 7A                      	db 122
 36488 00006990 20202F412020202020-     	db '  /A          Displays files with specified attributes.',0Dh,0Ah
 36488 00006999 202020202044697370-
 36488 000069A2 6C6179732066696C65-
 36488 000069AB 732077697468207370-
 36488 000069B4 656369666965642061-
 36488 000069BD 747472696275746573-
 36488 000069C6 2E0D0A             
 36489 000069C9 202061747472696275-     	db '  attributes   D  Directories                R  Read-only files',0Dh,0Ah
 36489 000069D2 746573202020442020-
 36489 000069DB 4469726563746F7269-
 36489 000069E4 657320202020202020-
 36489 000069ED 202020202020202020-
 36489 000069F6 522020526561642D6F-
 36489 000069FF 6E6C792066696C6573-
 36489 00006A08 0D0A               
 36490                                  MSG_1484:
 36491 00006A0A BF                      	db 191
 36492 00006A0B 202020202020202020-     	db '               H  Hidden files               A  Files ready for archiving',0Dh,0Ah
 36492 00006A14 202020202020482020-
 36492 00006A1D 48696464656E206669-
 36492 00006A26 6C6573202020202020-
 36492 00006A2F 202020202020202020-
 36492 00006A38 41202046696C657320-
 36492 00006A41 726561647920666F72-
 36492 00006A4A 20617263686976696E-
 36492 00006A53 670D0A             
 36493 00006A56 202020202020202020-     	db '               S  System files               -  Prefix meaning "not"',0Dh,0Ah
 36493 00006A5F 202020202020532020-
 36493 00006A68 53797374656D206669-
 36493 00006A71 6C6573202020202020-
 36493 00006A7A 202020202020202020-
 36493 00006A83 2D2020507265666978-
 36493 00006A8C 206D65616E696E6720-
 36493 00006A95 226E6F74220D0A     
 36494 00006A9C 20202F4F2020202020-     	db '  /O          List by files in sorted order.',0Dh,0Ah
 36494 00006AA5 20202020204C697374-
 36494 00006AAE 2062792066696C6573-
 36494 00006AB7 20696E20736F727465-
 36494 00006AC0 64206F726465722E0D-
 36494 00006AC9 0A                 
 36495                                  MSG_1485:
 36496 00006ACA 9B                      	db 155
 36497 00006ACB 2020736F72746F7264-     	db '  sortorder    N  By name (alphabetic)       S  By size (smallest first)',0Dh,0Ah
 36497 00006AD4 6572202020204E2020-
 36497 00006ADD 4279206E616D652028-
 36497 00006AE6 616C70686162657469-
 36497 00006AEF 632920202020202020-
 36497 00006AF8 53202042792073697A-
 36497 00006B01 652028736D616C6C65-
 36497 00006B0A 737420666972737429-
 36497 00006B13 0D0A               
 36498 00006B15 202020202020202020-     	db '               E  By extension (alphabetic)  D  By date & time (earliest first)',0Dh,0Ah
 36498 00006B1E 202020202020452020-
 36498 00006B27 427920657874656E73-
 36498 00006B30 696F6E2028616C7068-
 36498 00006B39 616265746963292020-
 36498 00006B42 442020427920646174-
 36498 00006B4B 6520262074696D6520-
 36498 00006B54 286561726C69657374-
 36498 00006B5D 206669727374290D0A 
 36499                                  MSG_1486:
 36500 00006B66 96                      	db 150
 36501 00006B67 202020202020202020-     	db '               G  Group directories first    -  Prefix to reverse order',0Dh,0Ah
 36501 00006B70 202020202020472020-
 36501 00006B79 47726F757020646972-
 36501 00006B82 6563746F7269657320-
 36501 00006B8B 666972737420202020-
 36501 00006B94 2D2020507265666978-
 36501 00006B9D 20746F207265766572-
 36501 00006BA6 7365206F726465720D-
 36501 00006BAF 0A                 
 36502 00006BB0 20202F532020202020-     	db '  /S          Displays files in specified directory and all subdirectories.',0Dh,0Ah
 36502 00006BB9 202020202044697370-
 36502 00006BC2 6C6179732066696C65-
 36502 00006BCB 7320696E2073706563-
 36502 00006BD4 696669656420646972-
 36502 00006BDD 6563746F727920616E-
 36502 00006BE6 6420616C6C20737562-
 36502 00006BEF 6469726563746F7269-
 36502 00006BF8 65732E0D0A         
 36503                                  MSG_1487:
 36504 00006BFD 66                      	db 102
 36505 00006BFE 20202F422020202020-     	db '  /B          Uses bare format (no heading information or summary).',0Dh,0Ah
 36505 00006C07 202020202055736573-
 36505 00006C10 206261726520666F72-
 36505 00006C19 6D617420286E6F2068-
 36505 00006C22 656164696E6720696E-
 36505 00006C2B 666F726D6174696F6E-
 36505 00006C34 206F722073756D6D61-
 36505 00006C3D 7279292E0D0A       
 36506 00006C43 20202F4C2020202020-     	db '  /L          Uses lowercase.',0Dh,0Ah
 36506 00006C4C 202020202055736573-
 36506 00006C55 206C6F776572636173-
 36506 00006C5E 652E0D0A           
 36507 00006C62 0D0A                    	db 0Dh,0Ah
 36508                                  MSG_1488:
 36509 00006C64 92                      	db 146
 36510 00006C65 537769746368657320-     	db 'Switches may be preset in the DIRCMD environment variable.  Override',0Dh,0Ah
 36510 00006C6E 6D6179206265207072-
 36510 00006C77 6573657420696E2074-
 36510 00006C80 686520444952434D44-
 36510 00006C89 20656E7669726F6E6D-
 36510 00006C92 656E74207661726961-
 36510 00006C9B 626C652E20204F7665-
 36510 00006CA4 72726964650D0A     
 36511 00006CAB 707265736574207377-     	db 'preset switches by prefixing any switch with - (hyphen)--for example, /-W.',0Dh,0Ah
 36511 00006CB4 697463686573206279-
 36511 00006CBD 20707265666978696E-
 36511 00006CC6 6720616E7920737769-
 36511 00006CCF 746368207769746820-
 36511 00006CD8 2D202868797068656E-
 36511 00006CE1 292D2D666F72206578-
 36511 00006CEA 616D706C652C202F2D-
 36511 00006CF3 572E0D0A           
 36512                                  MSG_1500:
 36513 00006CF7 3E                      	db 62
 36514 00006CF8 517569747320746865-     	db 'Quits the COMMAND.COM program (command interpreter).',0Dh,0Ah
 36514 00006D01 20434F4D4D414E442E-
 36514 00006D0A 434F4D2070726F6772-
 36514 00006D13 616D2028636F6D6D61-
 36514 00006D1C 6E6420696E74657270-
 36514 00006D25 7265746572292E0D0A 
 36515 00006D2E 0D0A                    	db 0Dh,0Ah
 36516 00006D30 455849540D0A            	db 'EXIT',0Dh,0Ah
 36517                                  MSG_1520:
 36518 00006D36 3D                      	db 61
 36519 00006D37 437265617465732061-     	db 'Creates a directory.',0Dh,0Ah
 36519 00006D40 206469726563746F72-
 36519 00006D49 792E0D0A           
 36520 00006D4D 0D0A                    	db 0Dh,0Ah
 36521 00006D4F 4D4B444952205B6472-     	db 'MKDIR [drive:]path',0Dh,0Ah
 36521 00006D58 6976653A5D70617468-
 36521 00006D61 0D0A               
 36522 00006D63 4D44205B6472697665-     	db 'MD [drive:]path',0Dh,0Ah
 36522 00006D6C 3A5D706174680D0A   
 36523                                  MSG_1540:
 36524 00006D74 5D                      	db 93
 36525 00006D75 446973706C61797320-     	db 'Displays or sets a search path for executable files.',0Dh,0Ah
 36525 00006D7E 6F7220736574732061-
 36525 00006D87 207365617263682070-
 36525 00006D90 61746820666F722065-
 36525 00006D99 786563757461626C65-
 36525 00006DA2 2066696C65732E0D0A 
 36526 00006DAB 0D0A                    	db 0Dh,0Ah
 36527 00006DAD 50415448205B5B6472-     	db 'PATH [[drive:]path[;...]]',0Dh,0Ah
 36527 00006DB6 6976653A5D70617468-
 36527 00006DBF 5B3B2E2E2E5D5D0D0A 
 36528 00006DC8 50415448203B0D0A        	db 'PATH ;',0Dh,0Ah
 36529 00006DD0 0D0A                    	db 0Dh,0Ah
 36530                                  MSG_1541:
 36531 00006DD2 6B                      	db 107
 36532 00006DD3 547970652050415448-     	db 'Type PATH ; to clear all search-path settings and direct MS-DOS to search',0Dh,0Ah
 36532 00006DDC 203B20746F20636C65-
 36532 00006DE5 617220616C6C207365-
 36532 00006DEE 617263682D70617468-
 36532 00006DF7 2073657474696E6773-
 36532 00006E00 20616E642064697265-
 36532 00006E09 6374204D532D444F53-
 36532 00006E12 20746F207365617263-
 36532 00006E1B 680D0A             
 36533 00006E1E 6F6E6C7920696E2074-     	db 'only in the current directory.',0Dh,0Ah
 36533 00006E27 68652063757272656E-
 36533 00006E30 74206469726563746F-
 36533 00006E39 72792E0D0A         
 36534                                  MSG_1542:	
 36535 00006E3E 3B                      	db 59
 36536 00006E3F 547970652050415448-     	db 'Type PATH without parameters to display the current path.',0Dh,0Ah
 36536 00006E48 20776974686F757420-
 36536 00006E51 706172616D65746572-
 36536 00006E5A 7320746F2064697370-
 36536 00006E63 6C6179207468652063-
 36536 00006E6C 757272656E74207061-
 36536 00006E75 74682E0D0A         
 36537                                  MSG_1560:
 36538 00006E7A 37                      	db 55
 36539 00006E7B 4368616E6765732074-     	db 'Changes the MS-DOS command prompt.',0Dh,0Ah
 36539 00006E84 6865204D532D444F53-
 36539 00006E8D 20636F6D6D616E6420-
 36539 00006E96 70726F6D70742E0D0A 
 36540 00006E9F 0D0A                    	db 0Dh,0Ah
 36541 00006EA1 50524F4D5054205B74-     	db 'PROMPT [text]',0Dh,0Ah
 36541 00006EAA 6578745D0D0A       
 36542 00006EB0 0D0A                    	db 0Dh,0Ah
 36543                                  MSG_1561:	
 36544 00006EB2 7C                      	db 124
 36545 00006EB3 202074657874202020-     	db '  text    Specifies a new command prompt.',0Dh,0Ah
 36545 00006EBC 205370656369666965-
 36545 00006EC5 732061206E65772063-
 36545 00006ECE 6F6D6D616E64207072-
 36545 00006ED7 6F6D70742E0D0A     
 36546 00006EDE 0D0A                    	db 0Dh,0Ah
 36547 00006EE0 50726F6D7074206361-     	db 'Prompt can be made up of normal characters and the following special codes:',0Dh,0Ah
 36547 00006EE9 6E206265206D616465-
 36547 00006EF2 207570206F66206E6F-
 36547 00006EFB 726D616C2063686172-
 36547 00006F04 61637465727320616E-
 36547 00006F0D 642074686520666F6C-
 36547 00006F16 6C6F77696E67207370-
 36547 00006F1F 656369616C20636F64-
 36547 00006F28 65733A0D0A         
 36548 00006F2D 0D0A                    	db 0Dh,0Ah
 36549                                  MSG_1562:
 36550 00006F2F 2F                      	db 47
 36551 00006F30 202024512020203D20-     	db '  $Q   = (equal sign)',0Dh,0Ah
 36551 00006F39 28657175616C207369-
 36551 00006F42 676E290D0A         
 36552 00006F47 202024242020202420-     	db '  $$   $ (dollar sign)',0Dh,0Ah
 36552 00006F50 28646F6C6C61722073-
 36552 00006F59 69676E290D0A       
 36553                                  MSG_1563:
 36554 00006F5F 2A                      	db 42
 36555 00006F60 202024542020204375-     	db '  $T   Current time',0Dh,0Ah
 36555 00006F69 7272656E742074696D-
 36555 00006F72 650D0A             
 36556 00006F75 202024442020204375-     	db '  $D   Current date',0Dh,0Ah
 36556 00006F7E 7272656E7420646174-
 36556 00006F87 650D0A             
 36557                                  MSG_1564:
 36558 00006F8A 3D                      	db 61
 36559 00006F8B 202024502020204375-     	db '  $P   Current drive and path',0Dh,0Ah
 36559 00006F94 7272656E7420647269-
 36559 00006F9D 766520616E64207061-
 36559 00006FA6 74680D0A           
 36560 00006FAA 202024562020204D53-     	db '  $V   MS-DOS version number',0Dh,0Ah
 36560 00006FB3 2D444F532076657273-
 36560 00006FBC 696F6E206E756D6265-
 36560 00006FC5 720D0A             
 36561                                  MSG_1565:
 36562 00006FC8 34                      	db 52
 36563 00006FC9 2020244E2020204375-     	db '  $N   Current drive',0Dh,0Ah
 36563 00006FD2 7272656E7420647269-
 36563 00006FDB 76650D0A           
 36564 00006FDF 202024472020203E20-     	db '  $G   > (greater-than sign)',0Dh,0Ah
 36564 00006FE8 28677265617465722D-
 36564 00006FF1 7468616E207369676E-
 36564 00006FFA 290D0A             
 36565                                  MSG_1566:
 36566 00006FFD 2C                      	db 44
 36567 00006FFE 2020244C2020203C20-     	db '  $L   < (less-than sign)',0Dh,0Ah
 36567 00007007 286C6573732D746861-
 36567 00007010 6E207369676E290D0A 
 36568 00007019 202024422020207C20-     	db '  $B   | (pipe)',0Dh,0Ah
 36568 00007022 2870697065290D0A   
 36569                                  MSG_1567:
 36570 0000702A 79                      	db 121
 36571 0000702B 202024482020204261-     	db '  $H   Backspace (erases previous character)',0Dh,0Ah
 36571 00007034 636B73706163652028-
 36571 0000703D 657261736573207072-
 36571 00007046 6576696F7573206368-
 36571 0000704F 61726163746572290D-
 36571 00007058 0A                 
 36572 00007059 202024452020204573-     	db '  $E   Escape code (ASCII code 27)',0Dh,0Ah
 36572 00007062 6361706520636F6465-
 36572 0000706B 202841534349492063-
 36572 00007074 6F6465203237290D0A 
 36573 0000707D 2020245F2020204361-     	db '  $_   Carriage return and linefeed',0Dh,0Ah
 36573 00007086 727269616765207265-
 36573 0000708F 7475726E20616E6420-
 36573 00007098 6C696E65666565640D-
 36573 000070A1 0A                 
 36574 000070A2 0D0A                    	db 0Dh,0Ah
 36575                                  MSG_1568:
 36576 000070A4 4C                      	db 76
 36577 000070A5 547970652050524F4D-     	db 'Type PROMPT without parameters to reset the prompt to the default setting.',0Dh,0Ah
 36577 000070AE 505420776974686F75-
 36577 000070B7 7420706172616D6574-
 36577 000070C0 65727320746F207265-
 36577 000070C9 736574207468652070-
 36577 000070D2 726F6D707420746F20-
 36577 000070DB 746865206465666175-
 36577 000070E4 6C742073657474696E-
 36577 000070ED 672E0D0A           
 36578                                  MSG_1580:
 36579 000070F1 47                      	db 71
 36580 000070F2 52656D6F7665732028-     	db 'Removes (deletes) a directory.',0Dh,0Ah
 36580 000070FB 64656C657465732920-
 36580 00007104 61206469726563746F-
 36580 0000710D 72792E0D0A         
 36581 00007112 0D0A                    	db 0Dh,0Ah
 36582 00007114 524D444952205B6472-     	db 'RMDIR [drive:]path',0Dh,0Ah
 36582 0000711D 6976653A5D70617468-
 36582 00007126 0D0A               
 36583 00007128 5244205B6472697665-     	db 'RD [drive:]path',0Dh,0Ah
 36583 00007131 3A5D706174680D0A   
 36584                                  MSG_1600:
 36585 00007139 1C                      	db 28
 36586 0000713A 52656E616D65732061-     	db 'Renames a file or files.',0Dh,0Ah
 36586 00007143 2066696C65206F7220-
 36586 0000714C 66696C65732E0D0A   
 36587 00007154 0D0A                    	db 0Dh,0Ah
 36588                                  MSG_1601:
 36589 00007156 53                      	db 83
 36590 00007157 52454E414D45205B64-     	db 'RENAME [drive:][path]filename1 filename2',0Dh,0Ah
 36590 00007160 726976653A5D5B7061-
 36590 00007169 74685D66696C656E61-
 36590 00007172 6D65312066696C656E-
 36590 0000717B 616D65320D0A       
 36591 00007181 52454E205B64726976-     	db 'REN [drive:][path]filename1 filename2',0Dh,0Ah
 36591 0000718A 653A5D5B706174685D-
 36591 00007193 66696C656E616D6531-
 36591 0000719C 2066696C656E616D65-
 36591 000071A5 320D0A             
 36592 000071A8 0D0A                    	db 0Dh,0Ah
 36593                                  MSG_1602:
 36594 000071AA 4D                      	db 77
 36595 000071AB 4E6F74652074686174-     	db 'Note that you cannot specify a new drive or path for your destination file.',0Dh,0Ah
 36595 000071B4 20796F752063616E6E-
 36595 000071BD 6F7420737065636966-
 36595 000071C6 792061206E65772064-
 36595 000071CF 72697665206F722070-
 36595 000071D8 61746820666F722079-
 36595 000071E1 6F7572206465737469-
 36595 000071EA 6E6174696F6E206669-
 36595 000071F3 6C652E0D0A         
 36596                                  MSG_1620:
 36597 000071F8 57                      	db 87
 36598 000071F9 446973706C6179732C-     	db 'Displays, sets, or removes MS-DOS environment variables.',0Dh,0Ah
 36598 00007202 20736574732C206F72-
 36598 0000720B 2072656D6F76657320-
 36598 00007214 4D532D444F5320656E-
 36598 0000721D 7669726F6E6D656E74-
 36598 00007226 207661726961626C65-
 36598 0000722F 732E0D0A           
 36599 00007233 0D0A                    	db 0Dh,0Ah
 36600 00007235 534554205B76617269-     	db 'SET [variable=[string]]',0Dh,0Ah
 36600 0000723E 61626C653D5B737472-
 36600 00007247 696E675D5D0D0A     
 36601 0000724E 0D0A                    	db 0Dh,0Ah
 36602                                  MSG_1621:
 36603 00007250 81                      	db 129
 36604 00007251 20207661726961626C-     	db '  variable  Specifies the environment-variable name.',0Dh,0Ah
 36604 0000725A 652020537065636966-
 36604 00007263 696573207468652065-
 36604 0000726C 6E7669726F6E6D656E-
 36604 00007275 742D7661726961626C-
 36604 0000727E 65206E616D652E0D0A 
 36605 00007287 2020737472696E6720-     	db '  string    Specifies a series of characters to assign to the variable.',0Dh,0Ah
 36605 00007290 202020537065636966-
 36605 00007299 696573206120736572-
 36605 000072A2 696573206F66206368-
 36605 000072AB 617261637465727320-
 36605 000072B4 746F2061737369676E-
 36605 000072BD 20746F207468652076-
 36605 000072C6 61726961626C652E0D-
 36605 000072CF 0A                 
 36606 000072D0 0D0A                    	db 0Dh,0Ah
 36607                                  MSG_1622:
 36608 000072D2 4B                      	db 75
 36609 000072D3 547970652053455420-     	db 'Type SET without parameters to display the current environment variables.',0Dh,0Ah
 36609 000072DC 776974686F75742070-
 36609 000072E5 6172616D6574657273-
 36609 000072EE 20746F20646973706C-
 36609 000072F7 617920746865206375-
 36609 00007300 7272656E7420656E76-
 36609 00007309 69726F6E6D656E7420-
 36609 00007312 7661726961626C6573-
 36609 0000731B 2E0D0A             
 36610                                  MSG_1640:
 36611 0000731E 34                      	db 52
 36612 0000731F 446973706C61797320-     	db 'Displays or sets the system time.',0Dh,0Ah
 36612 00007328 6F7220736574732074-
 36612 00007331 68652073797374656D-
 36612 0000733A 2074696D652E0D0A   
 36613 00007342 0D0A                    	db 0Dh,0Ah
 36614 00007344 54494D45205B74696D-     	db 'TIME [time]',0Dh,0Ah
 36614 0000734D 655D0D0A           
 36615 00007351 0D0A                    	db 0Dh,0Ah
 36616                                  MSG_1641:
 36617 00007353 83                      	db 131
 36618 00007354 547970652054494D45-     	db 'Type TIME with no parameters to display the current time setting and a prompt',0Dh,0Ah
 36618 0000735D 2077697468206E6F20-
 36618 00007366 706172616D65746572-
 36618 0000736F 7320746F2064697370-
 36618 00007378 6C6179207468652063-
 36618 00007381 757272656E74207469-
 36618 0000738A 6D652073657474696E-
 36618 00007393 6720616E6420612070-
 36618 0000739C 726F6D70740D0A     
 36619 000073A3 666F722061206E6577-     	db 'for a new one.  Press ENTER to keep the same time.',0Dh,0Ah
 36619 000073AC 206F6E652E20205072-
 36619 000073B5 65737320454E544552-
 36619 000073BE 20746F206B65657020-
 36619 000073C7 7468652073616D6520-
 36619 000073D0 74696D652E0D0A     
 36620                                  MSG_1660:
 36621 000073D7 46                      	db 70
 36622 000073D8 446973706C61797320-     	db 'Displays the contents of a text file.',0Dh,0Ah
 36622 000073E1 74686520636F6E7465-
 36622 000073EA 6E7473206F66206120-
 36622 000073F3 746578742066696C65-
 36622 000073FC 2E0D0A             
 36623 000073FF 0D0A                    	db 0Dh,0Ah
 36624 00007401 54595045205B647269-     	db 'TYPE [drive:][path]filename',0Dh,0Ah
 36624 0000740A 76653A5D5B70617468-
 36624 00007413 5D66696C656E616D65-
 36624 0000741C 0D0A               
 36625                                  MSG_1680:
 36626 0000741E 25                      	db 37
 36627 0000741F 446973706C61797320-     	db 'Displays the MS-DOS version.',0Dh,0Ah
 36627 00007428 746865204D532D444F-
 36627 00007431 532076657273696F6E-
 36627 0000743A 2E0D0A             
 36628 0000743D 0D0A                    	db 0Dh,0Ah
 36629 0000743F 5645520D0A              	db 'VER',0Dh,0Ah
 36630                                  MSG_1700:
 36631 00007444 B1                      	db 177
 36632 00007445 54656C6C73204D532D-     	db 'Tells MS-DOS whether to verify that your files are written correctly to a',0Dh,0Ah
 36632 0000744E 444F53207768657468-
 36632 00007457 657220746F20766572-
 36632 00007460 696679207468617420-
 36632 00007469 796F75722066696C65-
 36632 00007472 732061726520777269-
 36632 0000747B 7474656E20636F7272-
 36632 00007484 6563746C7920746F20-
 36632 0000748D 610D0A             
 36633 00007490 6469736B2E0D0A          	db 'disk.',0Dh,0Ah
 36634 00007497 0D0A                    	db 0Dh,0Ah
 36635 00007499 564552494659205B4F-     	db 'VERIFY [ON | OFF]',0Dh,0Ah
 36635 000074A2 4E207C204F46465D0D-
 36635 000074AB 0A                 
 36636 000074AC 0D0A                    	db 0Dh,0Ah
 36637 000074AE 547970652056455249-     	db 'Type VERIFY without a parameter to display the current VERIFY setting.',0Dh,0Ah
 36637 000074B7 465920776974686F75-
 36637 000074C0 74206120706172616D-
 36637 000074C9 6574657220746F2064-
 36637 000074D2 6973706C6179207468-
 36637 000074DB 652063757272656E74-
 36637 000074E4 205645524946592073-
 36637 000074ED 657474696E672E0D0A 
 36638                                  MSG_1720:              
 36639 000074F6 52                      	db 82
 36640 000074F7 446973706C61797320-     	db 'Displays the disk volume label and serial number, if they exist.',0Dh,0Ah
 36640 00007500 746865206469736B20-
 36640 00007509 766F6C756D65206C61-
 36640 00007512 62656C20616E642073-
 36640 0000751B 657269616C206E756D-
 36640 00007524 6265722C2069662074-
 36640 0000752D 686579206578697374-
 36640 00007536 2E0D0A             
 36641 00007539 0D0A                    	db 0Dh,0Ah
 36642 0000753B 564F4C205B64726976-     	db 'VOL [drive:]',0Dh,0Ah
 36642 00007544 653A5D0D0A         
 36643                                  MSG_1740:
 36644 00007549 5B                      	db 91
 36645 0000754A 43616C6C73206F6E65-     	db 'Calls one batch program from another.',0Dh,0Ah
 36645 00007553 206261746368207072-
 36645 0000755C 6F6772616D2066726F-
 36645 00007565 6D20616E6F74686572-
 36645 0000756E 2E0D0A             
 36646 00007571 0D0A                    	db 0Dh,0Ah
 36647 00007573 43414C4C205B647269-     	db 'CALL [drive:][path]filename [batch-parameters]',0Dh,0Ah
 36647 0000757C 76653A5D5B70617468-
 36647 00007585 5D66696C656E616D65-
 36647 0000758E 205B62617463682D70-
 36647 00007597 6172616D6574657273-
 36647 000075A0 5D0D0A             
 36648 000075A3 0D0A                    	db 0Dh,0Ah
 36649                                  MSG_1741:
 36650 000075A5 72                      	db 114
 36651 000075A6 202062617463682D70-     	db '  batch-parameters   Specifies any command-line information required by the',0Dh,0Ah
 36651 000075AF 6172616D6574657273-
 36651 000075B8 202020537065636966-
 36651 000075C1 69657320616E792063-
 36651 000075CA 6F6D6D616E642D6C69-
 36651 000075D3 6E6520696E666F726D-
 36651 000075DC 6174696F6E20726571-
 36651 000075E5 756972656420627920-
 36651 000075EE 7468650D0A         
 36652 000075F3 202020202020202020-     	db '                     batch program.',0Dh,0Ah
 36652 000075FC 202020202020202020-
 36652 00007605 202020626174636820-
 36652 0000760E 70726F6772616D2E0D-
 36652 00007617 0A                 
 36653                                  MSG_1760:	
 36654 00007618 4C                      	db 76
 36655 00007619 5265636F7264732063-     	db 'Records comments (remarks) in a batch file or CONFIG.SYS.',0Dh,0Ah
 36655 00007622 6F6D6D656E74732028-
 36655 0000762B 72656D61726B732920-
 36655 00007634 696E20612062617463-
 36655 0000763D 682066696C65206F72-
 36655 00007646 20434F4E4649472E53-
 36655 0000764F 59532E0D0A         
 36656 00007654 0D0A                    	db 0Dh,0Ah
 36657 00007656 52454D205B636F6D6D-     	db 'REM [comment]',0Dh,0Ah
 36657 0000765F 656E745D0D0A       
 36658                                  MSG_1780:
 36659 00007665 6B                      	db 107
 36660 00007666 53757370656E647320-     	db 'Suspends processing of a batch program and displays the message "'
 36660 0000766F 70726F63657373696E-
 36660 00007678 67206F662061206261-
 36660 00007681 7463682070726F6772-
 36660 0000768A 616D20616E64206469-
 36660 00007693 73706C617973207468-
 36660 0000769C 65206D657373616765-
 36660 000076A5 2022               
 36661 000076A7 507265737320616E79-     	db 'Press any',0Dh,0Ah
 36661 000076B0 0D0A               
 36662 000076B2 6B657920746F20636F-     	db 'key to continue...."',0Dh,0Ah
 36662 000076BB 6E74696E75652E2E2E-
 36662 000076C4 2E220D0A           
 36663 000076C8 0D0A                    	db 0Dh,0Ah
 36664 000076CA 50415553450D0A          	db 'PAUSE',0Dh,0Ah
 36665                                  MSG_1800:
 36666 000076D1 4D                      	db 77
 36667 000076D2 446973706C61797320-     	db 'Displays messages, or turns command-echoing on or off.',0Dh,0Ah
 36667 000076DB 6D657373616765732C-
 36667 000076E4 206F72207475726E73-
 36667 000076ED 20636F6D6D616E642D-
 36667 000076F6 6563686F696E67206F-
 36667 000076FF 6E206F72206F66662E-
 36667 00007708 0D0A               
 36668 0000770A 0D0A                    	db 0Dh,0Ah
 36669 0000770C 20204543484F205B4F-     	db '  ECHO [ON | OFF]',0Dh,0Ah
 36669 00007715 4E207C204F46465D0D-
 36669 0000771E 0A                 
 36670                                  MSG_1801:
 36671 0000771F 57                      	db 87
 36672 00007720 20204543484F205B6D-     	db '  ECHO [message]',0Dh,0Ah
 36672 00007729 6573736167655D0D0A 
 36673 00007732 0D0A                    	db 0Dh,0Ah
 36674 00007734 54797065204543484F-     	db 'Type ECHO without parameters to display the current echo setting.'
 36674 0000773D 20776974686F757420-
 36674 00007746 706172616D65746572-
 36674 0000774F 7320746F2064697370-
 36674 00007758 6C6179207468652063-
 36674 00007761 757272656E74206563-
 36674 0000776A 686F2073657474696E-
 36674 00007773 672E               
 36675 00007775 0D0A                    	db 0Dh,0Ah
 36676                                  MSG_1820:
 36677 00007777 47                      	db 71
 36678 00007778 44697265637473204D-     	db 'Directs MS-DOS to a labelled line in a batch program.',0Dh,0Ah
 36678 00007781 532D444F5320746F20-
 36678 0000778A 61206C6162656C6C65-
 36678 00007793 64206C696E6520696E-
 36678 0000779C 206120626174636820-
 36678 000077A5 70726F6772616D2E0D-
 36678 000077AE 0A                 
 36679 000077AF 0D0A                    	db 0Dh,0Ah
 36680 000077B1 474F544F206C616265-     	db 'GOTO label',0Dh,0Ah
 36680 000077BA 6C0D0A             
 36681 000077BD 0D0A                    	db 0Dh,0Ah
 36682                                  MSG_1821:
 36683 000077BF 8A                      	db 138
 36684 000077C0 20206C6162656C2020-     	db '  label   Specifies a text string used in the batch program as a label.',0Dh,0Ah
 36684 000077C9 205370656369666965-
 36684 000077D2 732061207465787420-
 36684 000077DB 737472696E67207573-
 36684 000077E4 656420696E20746865-
 36684 000077ED 206261746368207072-
 36684 000077F6 6F6772616D20617320-
 36684 000077FF 61206C6162656C2E0D-
 36684 00007808 0A                 
 36685 00007809 0D0A                    	db 0Dh,0Ah
 36686 0000780B 596F75207479706520-     	db 'You type a label on a line by itself, beginning with a colon.',0Dh,0Ah
 36686 00007814 61206C6162656C206F-
 36686 0000781D 6E2061206C696E6520-
 36686 00007826 627920697473656C66-
 36686 0000782F 2C20626567696E6E69-
 36686 00007838 6E6720776974682061-
 36686 00007841 20636F6C6F6E2E0D0A 
 36687                                  MSG_1840:
 36688 0000784A 4A                      	db 74
 36689 0000784B 4368616E6765732074-     	db 'Changes the position of replaceable parameters in a batch file.',0Dh,0Ah
 36689 00007854 686520706F73697469-
 36689 0000785D 6F6E206F6620726570-
 36689 00007866 6C61636561626C6520-
 36689 0000786F 706172616D65746572-
 36689 00007878 7320696E2061206261-
 36689 00007881 7463682066696C652E-
 36689 0000788A 0D0A               
 36690 0000788C 0D0A                    	db 0Dh,0Ah
 36691 0000788E 53484946540D0A          	db 'SHIFT',0Dh,0Ah
 36692                                  MSG_1860:
 36693 00007895 5A                      	db 90
 36694 00007896 506572666F726D7320-     	db 'Performs conditional processing in batch programs.',0Dh,0Ah
 36694 0000789F 636F6E646974696F6E-
 36694 000078A8 616C2070726F636573-
 36694 000078B1 73696E6720696E2062-
 36694 000078BA 617463682070726F67-
 36694 000078C3 72616D732E0D0A     
 36695 000078CA 0D0A                    	db 0Dh,0Ah
 36696 000078CC 4946205B4E4F545D20-     	db 'IF [NOT] ERRORLEVEL number command',0Dh,0Ah
 36696 000078D5 4552524F524C455645-
 36696 000078DE 4C206E756D62657220-
 36696 000078E7 636F6D6D616E640D0A 
 36697                                  MSG_1861:
 36698 000078F0 46                      	db 70
 36699 000078F1 4946205B4E4F545D20-     	db 'IF [NOT] string1==string2 command',0Dh,0Ah
 36699 000078FA 737472696E67313D3D-
 36699 00007903 737472696E67322063-
 36699 0000790C 6F6D6D616E640D0A   
 36700 00007914 4946205B4E4F545D20-     	db 'IF [NOT] EXIST filename command',0Dh,0Ah
 36700 0000791D 45584953542066696C-
 36700 00007926 656E616D6520636F6D-
 36700 0000792F 6D616E640D0A       
 36701 00007935 0D0A                    	db 0Dh,0Ah
 36702                                  MSG_1862:
 36703 00007937 7D                      	db 125
 36704 00007938 20204E4F5420202020-     	db '  NOT               Specifies that MS-DOS should carry out the command only',0Dh,0Ah
 36704 00007941 202020202020202020-
 36704 0000794A 202053706563696669-
 36704 00007953 65732074686174204D-
 36704 0000795C 532D444F532073686F-
 36704 00007965 756C64206361727279-
 36704 0000796E 206F75742074686520-
 36704 00007977 636F6D6D616E64206F-
 36704 00007980 6E6C790D0A         
 36705 00007985 202020202020202020-     	db '                    if the condition is false.',0Dh,0Ah
 36705 0000798E 202020202020202020-
 36705 00007997 202069662074686520-
 36705 000079A0 636F6E646974696F6E-
 36705 000079A9 2069732066616C7365-
 36705 000079B2 2E0D0A             
 36706                                  MSG_1863:
 36707 000079B5 A2                      	db 162
 36708 000079B6 20204552524F524C45-     	db '  ERRORLEVEL number Specifies a true condition if the last program run returned',0Dh,0Ah
 36708 000079BF 56454C206E756D6265-
 36708 000079C8 722053706563696669-
 36708 000079D1 657320612074727565-
 36708 000079DA 20636F6E646974696F-
 36708 000079E3 6E2069662074686520-
 36708 000079EC 6C6173742070726F67-
 36708 000079F5 72616D2072756E2072-
 36708 000079FE 657475726E65640D0A 
 36709 00007A07 202020202020202020-     	db '                    '
 36709 00007A10 202020202020202020-
 36709 00007A19 2020               
 36710 00007A1B 616E20657869742063-     	db 'an exit code equal to or greater than the number specified.',0Dh,0Ah
 36710 00007A24 6F646520657175616C-
 36710 00007A2D 20746F206F72206772-
 36710 00007A36 656174657220746861-
 36710 00007A3F 6E20746865206E756D-
 36710 00007A48 626572207370656369-
 36710 00007A51 666965642E0D0A     
 36711                                  MSG_1864:
 36712 00007A58 66                      	db 102
 36713 00007A59 2020636F6D6D616E64-     	db '  command           Specifies the command to carry out if the condition is',0Dh,0Ah
 36713 00007A62 202020202020202020-
 36713 00007A6B 202053706563696669-
 36713 00007A74 65732074686520636F-
 36713 00007A7D 6D6D616E6420746F20-
 36713 00007A86 6361727279206F7574-
 36713 00007A8F 206966207468652063-
 36713 00007A98 6F6E646974696F6E20-
 36713 00007AA1 69730D0A           
 36714 00007AA5 202020202020202020-     	db '                    met.',0Dh,0Ah
 36714 00007AAE 202020202020202020-
 36714 00007AB7 20206D65742E0D0A   
 36715                                  MSG_1865:
 36716 00007ABF 6A                      	db 106
 36717 00007AC0 2020737472696E6731-     	db '  string1==string2  Specifies a true condition if the specified text strings',0Dh,0Ah
 36717 00007AC9 3D3D737472696E6732-
 36717 00007AD2 202053706563696669-
 36717 00007ADB 657320612074727565-
 36717 00007AE4 20636F6E646974696F-
 36717 00007AED 6E2069662074686520-
 36717 00007AF6 737065636966696564-
 36717 00007AFF 207465787420737472-
 36717 00007B08 696E67730D0A       
 36718 00007B0E 202020202020202020-     	db '                    match.',0Dh,0Ah
 36718 00007B17 202020202020202020-
 36718 00007B20 20206D617463682E0D-
 36718 00007B29 0A                 
 36719                                  MSG_1866:
 36720 00007B2A 67                      	db 103
 36721 00007B2B 202045584953542066-     	db '  EXIST filename    Specifies a true condition if the specified filename',0Dh,0Ah
 36721 00007B34 696C656E616D652020-
 36721 00007B3D 202053706563696669-
 36721 00007B46 657320612074727565-
 36721 00007B4F 20636F6E646974696F-
 36721 00007B58 6E2069662074686520-
 36721 00007B61 737065636966696564-
 36721 00007B6A 2066696C656E616D65-
 36721 00007B73 0D0A               
 36722 00007B75 202020202020202020-     	db '                    exists.',0Dh,0Ah
 36722 00007B7E 202020202020202020-
 36722 00007B87 20206578697374732E-
 36722 00007B90 0D0A               
 36723                                  MSG_1880:
 36724 00007B92 77                      	db 119
 36725 00007B93 52756E732061207370-     	db 'Runs a specified command for each file in a set of files.',0Dh,0Ah
 36725 00007B9C 656369666965642063-
 36725 00007BA5 6F6D6D616E6420666F-
 36725 00007BAE 722065616368206669-
 36725 00007BB7 6C6520696E20612073-
 36725 00007BC0 6574206F662066696C-
 36725 00007BC9 65732E0D0A         
 36726 00007BCE 0D0A                    	db 0Dh,0Ah
 36727 00007BD0 464F52202576617269-     	db 'FOR %variable IN (set) DO command [command-parameters]',0Dh,0Ah
 36727 00007BD9 61626C6520494E2028-
 36727 00007BE2 7365742920444F2063-
 36727 00007BEB 6F6D6D616E64205B63-
 36727 00007BF4 6F6D6D616E642D7061-
 36727 00007BFD 72616D65746572735D-
 36727 00007C06 0D0A               
 36728 00007C08 0D0A                    	db 0Dh,0Ah
 36729                                  MSG_1881:
 36730 00007C0A 7D                      	db 125
 36731 00007C0B 202025766172696162-     	db '  %variable  Specifies a replaceable parameter.',0Dh,0Ah
 36731 00007C14 6C6520205370656369-
 36731 00007C1D 666965732061207265-
 36731 00007C26 706C61636561626C65-
 36731 00007C2F 20706172616D657465-
 36731 00007C38 722E0D0A           
 36732 00007C3C 202028736574292020-     	db '  (set)      Specifies a set of one or more files.  Wildcards may be used.',0Dh,0Ah
 36732 00007C45 202020205370656369-
 36732 00007C4E 666965732061207365-
 36732 00007C57 74206F66206F6E6520-
 36732 00007C60 6F72206D6F72652066-
 36732 00007C69 696C65732E20205769-
 36732 00007C72 6C646361726473206D-
 36732 00007C7B 617920626520757365-
 36732 00007C84 642E0D0A           
 36733                                  MSG_1882:
 36734 00007C88 56                      	db 86
 36735 00007C89 2020636F6D6D616E64-     	db '  command    Specifies the command to carry out for each file.',0Dh,0Ah
 36735 00007C92 202020205370656369-
 36735 00007C9B 666965732074686520-
 36735 00007CA4 636F6D6D616E642074-
 36735 00007CAD 6F206361727279206F-
 36735 00007CB6 757420666F72206561-
 36735 00007CBF 63682066696C652E0D-
 36735 00007CC8 0A                 
 36736 00007CC9 2020636F6D6D616E64-     	db '  command-parameters',0Dh,0Ah
 36736 00007CD2 2D706172616D657465-
 36736 00007CDB 72730D0A           
 36737                                  MSG_1883:
 36738 00007CDF A2                      	db 162
 36739 00007CE0 202020202020202020-     	db '             Specifies parameters or switches for the specified command.',0Dh,0Ah
 36739 00007CE9 202020205370656369-
 36739 00007CF2 666965732070617261-
 36739 00007CFB 6D6574657273206F72-
 36739 00007D04 207377697463686573-
 36739 00007D0D 20666F722074686520-
 36739 00007D16 737065636966696564-
 36739 00007D1F 20636F6D6D616E642E-
 36739 00007D28 0D0A               
 36740 00007D2A 0D0A                    	db 0Dh,0Ah
 36741 00007D2C 546F20757365207468-     	db 'To use the FOR command in a batch program, specify %%variable instead of',0Dh,0Ah
 36741 00007D35 6520464F5220636F6D-
 36741 00007D3E 6D616E6420696E2061-
 36741 00007D47 206261746368207072-
 36741 00007D50 6F6772616D2C207370-
 36741 00007D59 656369667920252576-
 36741 00007D62 61726961626C652069-
 36741 00007D6B 6E7374656164206F66-
 36741 00007D74 0D0A               
 36742 00007D76 257661726961626C65-     	db '%variable.',0Dh,0Ah
 36742 00007D7F 2E0D0A             
 36743                                  MSG_1900:
 36744 00007D82 17                      	db 23
 36745 00007D83 526573657276656420-     	db 'Reserved command name',0Dh,0Ah
 36745 00007D8C 636F6D6D616E64206E-
 36745 00007D95 616D650D0A         
 36746                                  MSG_1920:
 36747 00007D9A 2F                      	db 47
 36748 00007D9B 4C6F61647320612070-     	db 'Loads a program into the upper memory area.',0Dh,0Ah
 36748 00007DA4 726F6772616D20696E-
 36748 00007DAD 746F20746865207570-
 36748 00007DB6 706572206D656D6F72-
 36748 00007DBF 7920617265612E0D0A 
 36749 00007DC8 0D0A                    	db 0Dh,0Ah
 36750                                  MSG_1921:
 36751 00007DCA 58                      	db 88
 36752 00007DCB 4C4F41444849474820-     	db 'LOADHIGH [drive:][path]filename [parameters]',0Dh,0Ah
 36752 00007DD4 5B64726976653A5D5B-
 36752 00007DDD 706174685D66696C65-
 36752 00007DE6 6E616D65205B706172-
 36752 00007DEF 616D65746572735D0D-
 36752 00007DF8 0A                 
 36753 00007DF9 4C48205B6472697665-     	db 'LH [drive:][path]filename [parameters]',0Dh,0Ah
 36753 00007E02 3A5D5B706174685D66-
 36753 00007E0B 696C656E616D65205B-
 36753 00007E14 706172616D65746572-
 36753 00007E1D 735D0D0A           
 36754 00007E21 0D0A                    	db 0Dh,0Ah
 36755                                  MSG_1922:
 36756 00007E23 71                      	db 113
 36757 00007E24 2020706172616D6574-     	db '  parameters   Specifies any command-line information required by the',0Dh,0Ah
 36757 00007E2D 657273202020537065-
 36757 00007E36 63696669657320616E-
 36757 00007E3F 7920636F6D6D616E64-
 36757 00007E48 2D6C696E6520696E66-
 36757 00007E51 6F726D6174696F6E20-
 36757 00007E5A 726571756972656420-
 36757 00007E63 6279207468650D0A   
 36758 00007E6B 202020202020202020-     	db '               program you want to load.',0Dh,0Ah
 36758 00007E74 20202020202070726F-
 36758 00007E7D 6772616D20796F7520-
 36758 00007E86 77616E7420746F206C-
 36758 00007E8F 6F61642E0D0A       
 36759                                  
 36760                                  ; ---------------------------------------------------------------------------
 36761                                  
 36762                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36763                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8183h
 36764                                  
 36765                                  ; --------------- S U B R O U T I N E ---------------------------------------
 36766                                  
 36767                                  $M_CLS_3:
 36768 00007E95 0E                      	push	cs		; CLASS_F
 36769 00007E96 07                      	pop	es
 36770 00007E97 8D3E[5657]              	lea	di,$M_CLASS_3_STRUC ; LEA DI,$M_CLASS_3_STRUC
 36771                                  	; 15/04/2023
 36772                                  	;add	cx,10053	; ADD CX,$-$M_CLASS_3_STRUC ; 8189h-5A44h
 36773 00007E9B C3                      	retn
 36774                                  
 36775                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36776                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:818Eh
 36777                                  
 36778                                  ; ---------------------------------------------------------------------------
 36779                                  ; Class 1 messages
 36780                                  ; ---------------------------------------------------------------------------
 36781                                  	
 36782                                  $M_CLASS_1_STRUC:
 36783 00007E9C 01                      	db 1			; $M_CLASS_ID
 36784 00007E9D 0500                    	dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 36785 00007E9F 04                      	db 4			; Class_1_MessageCount
 36786                                  $M_ID_1_1:
 36787 00007EA0 0200                    	dw 2			; Message Number = 2
 36788 00007EA2 1000                    	dw EXTEND2-$+2 ; 10h	; Message offset from message number
 36789                                  $M_ID_1_2:
 36790 00007EA4 0300                    	dw 3			; Message Number = 3
 36791 00007EA6 1B00                    	dw EXTEND3-$+2 ; 1Bh	; Message offset from message number
 36792                                  $M_ID_1_3:
 36793 00007EA8 0800                    	dw 8			; Message Number = 8
 36794 00007EAA 2600                    	dw EXTEND8-$+2 ; 26h	; Message offset from message number
 36795                                  $M_ID_1_4:
 36796 00007EAC FFFF                    	dw 0FFFFh		; Message Number = -1
 36797 00007EAE 3600                    	dw EXTEND999-$+2 ; 36h	; Message offset from message number
 36798                                  
 36799                                  ; ---------------------------------------------------------------------------
 36800                                  
 36801                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81A2h
 36802                                  EXTEND2:
 36803 00007EB0 0E                      	db 14
 36804 00007EB1 46696C65206E6F7420-     	db 'File not found'
 36804 00007EBA 666F756E64         
 36805                                  EXTEND3:
 36806 00007EBF 0E                      	db 14
 36807 00007EC0 50617468206E6F7420-     	db 'Path not found'
 36807 00007EC9 666F756E64         
 36808                                  EXTEND8:
 36809 00007ECE 13                      	db 19
 36810 00007ECF 496E73756666696369-     	db 'Insufficient memory'
 36810 00007ED8 656E74206D656D6F72-
 36810 00007EE1 79                 
 36811                                  EXTEND999:
 36812 00007EE2 11                      	db 17
 36813 00007EE3 457874656E64656420-     	db 'Extended Error %1'
 36813 00007EEC 4572726F72202531   
 36814                                  
 36815                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36816                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81E6h
 36817                                  
 36818                                  ; --------------- S U B R O U T I N E ---------------------------------------
 36819                                  $M_MSGSERV_1:
 36820 00007EF4 0E                      	push	cs
 36821 00007EF5 07                      	pop	es
 36822 00007EF6 8D3E[9C7E]              	lea	di,$M_CLASS_1_STRUC
 36823                                  	; 15/04/2023
 36824                                  	;add	cx,94		; $-$M_CLASS_1_STRUC ; 81ECh-818Eh
 36825 00007EFA C3                      	retn
 36826                                  
 36827                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36828                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F0h
 36829                                  
 36830                                  ; ---------------------------------------------------------------------------
 36831                                  ; Class 2 messages
 36832                                  ; ---------------------------------------------------------------------------
 36833                                  	
 36834                                  $M_CLASS_2_STRUC:
 36835 00007EFB 02                      	db 2			; $M_CLASS_ID
 36836 00007EFC 0500                    	dw 5			; EXPECTED_VERSION (COMMAND.COM version)
 36837 00007EFE 01                      	db 1			; Class_2_MessageCount
 36838                                  $M_ID_2_1:
 36839 00007EFF FFFF                    	dw 0FFFFh		; Message Number = -1
 36840 00007F01 0400                    	dw PARSE999-$+2 ; 4	; Message offset from message number
 36841                                  ; ---------------------------------------------------------------------------
 36842                                  
 36843                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:81F8h
 36844                                  PARSE999:
 36845 00007F03 0E                      	db 14
 36846 00007F04 506172736520457272-     	db 'Parse Error %1'
 36846 00007F0D 6F72202531         
 36847                                  
 36848                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36849                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8207h
 36850                                  
 36851                                  ; --------------- S U B R O U T I N E ---------------------------------------
 36852                                  $M_MSGSERV_2:
 36853 00007F12 0E                      	push	cs
 36854 00007F13 07                      	pop	es
 36855 00007F14 8D3E[FB7E]              	lea	di,$M_CLASS_2_STRUC
 36856                                  	; 15/04/2023
 36857                                  	;add	cx,29	; $-$M_CLASS_2_STRUC ; 820Dh-81F0h
 36858 00007F18 C3                      	retn
 36859                                  
 36860                                  ;============================================================================
 36861                                  ; TRANMSG.ASM, MSDOS 6.0, 1991
 36862                                  ;============================================================================
 36863                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 36864                                  
 36865                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8211h
 36866                                  
 36867                                  ;****************************************************
 36868                                  ;* TRANSIENT MESSAGE POINTERS & SUBSTITUTION BLOCKS *
 36869                                  ;****************************************************
 36870                                  
 36871                                  msg_disp_class:
 36872 00007F19 FF                      	db	util_msg_class ; 0FFh
 36873                                  msg_cont_flag:
 36874 00007F1A 00                      	db	no_cont_flag ; 0
 36875                                  
 36876                                  ;  extended error string output
 36877                                  extend_buf_ptr:
 36878 00007F1B 0000                    	dw	0			;AN000;set to no message
 36879                                  extend_buf_sub:
 36880 00007F1D 00                      	db	0			;AN000;set to no substitutions
 36881 00007F1E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 36882 00007F1F 00                      	db	0			;AN000;reserved
 36883                                  extend_buf_off:
 36884 00007F20 [B58C]                  	dw	string_ptr_2		;AN000;offset of arg
 36885                                  extend_buf_seg:
 36886 00007F22 0000                    	dw	0			;AN000;segment of arg
 36887 00007F24 00                      	db	0			;AN000;first subst
 36888 00007F25 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 36889 00007F26 80                      	db	128			;AN000;maximum width
 36890 00007F27 00                      	db	0			;AN000;minimum width
 36891 00007F28 20                      	db	blank ; 20h		;AN000;pad character
 36892                                  
 36893                                  ;  "Duplicate file name or file not found"
 36894                                  RENERR_PTR:
 36895 00007F29 EA03                    	dw	1002			;AN000;message number
 36896 00007F2B 00                      	db	no_subst ; 0		;AN000;number of subst
 36897                                  
 36898                                  ;  "Invalid path or file name"
 36899                                  BADCPMES_PTR:
 36900 00007F2C EB03                    	dw	1003			;AN000;message number
 36901 00007F2E 00                      	db	no_subst ; 0		;AN000;number of subst
 36902                                  
 36903                                  ;  "Insufficient disk space"
 36904                                  NOSPACE_PTR:
 36905 00007F2F EC03                    	dw	1004			;AN000;message number
 36906 00007F31 00                      	db	no_subst ; 0		;AN000;number of subst
 36907                                  
 36908                                  ;  "Out of environment space"
 36909                                  ENVERR_PTR:
 36910 00007F32 EF03                    	dw	1007			;AN000;message number
 36911 00007F34 00                      	db	no_subst ; 0		;AN000;number of subst
 36912                                  
 36913                                  ;  "File creation error"
 36914                                  FULLDIR_PTR:
 36915 00007F35 F003                    	dw	1008			;AN000;message number
 36916 00007F37 00                      	db	no_subst ; 0		;AN000;number of subst
 36917                                  
 36918                                  ;  "Batch file missing",13,10
 36919                                  BADBAT_PTR:
 36920 00007F38 F103                    	dw	1009			;AN000;message number
 36921 00007F3A 00                      	db	no_subst ; 0		;AN000;number of subst
 36922                                  
 36923                                  ;  "Insert disk with batch file",13,10
 36924                                  NEEDBAT_PTR:
 36925 00007F3B F203                    	dw	1010			;AN000;message number
 36926 00007F3D 00                      	db	no_subst ; 0		;AN000;number of subst
 36927                                  
 36928                                  ;  "Bad command or file name",13,10
 36929                                  BADNAM_PTR:
 36930 00007F3E F303                    	dw	1011			;AN000;message number
 36931 00007F40 00                      	db	no_subst ; 0		;AN000;number of subst
 36932                                  
 36933                                  ;  "Access denied",13,10
 36934                                  ACCDEN_PTR:
 36935 00007F41 F603                    	dw	1014			;AN000;message number
 36936 00007F43 00                      	db	no_subst ; 0		;AN000;number of subst
 36937                                  
 36938                                  ;  "File cannot be copied onto itself",13,10
 36939                                  OVERWR_PTR:
 36940 00007F44 F703                    	dw	1015			;AN000;message number
 36941 00007F46 00                      	db	no_subst ; 0		;AN000;number of subst
 36942                                  
 36943                                  ;  "Content of destination lost before copy",13,10
 36944                                  LOSTERR_PTR:
 36945 00007F47 F803                    	dw	1016			;AN000;message number
 36946 00007F49 00                      	db	no_subst ; 0		;AN000;number of subst
 36947                                  
 36948                                  ;  "Invalid filename or file not found",13,10
 36949                                  INORNOT_PTR:
 36950 00007F4A F903                    	dw	1017			;AN000;message number
 36951 00007F4C 00                      	db	no_subst		;AN000;number of subst
 36952                                  
 36953                                  ;  "%1 File(s) copied",13,10
 36954                                  copied_ptr:
 36955 00007F4D FA03                    	dw	1018			;AN000;message number
 36956 00007F4F 01                      	db	1			;AN000;number of subst
 36957 00007F50 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 36958 00007F51 00                      	db	0			;AN000;reserved
 36959 00007F52 [B78C]                  	dw	Copy_num		;AN000;offset of arg
 36960 00007F54 0000                    	dw	0			;AN000;segment of arg
 36961 00007F56 01                      	db	1			;AN000;first subst
 36962 00007F57 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 36963                                  					;AN000;binary to decimal
 36964 00007F58 09                      	db	9			;AN000;maximum width
 36965 00007F59 09                      	db	9			;AN000;minimum width
 36966 00007F5A 20                      	db	blank ; 20h		;AN000;pad character
 36967                                  
 36968                                  ;  "%1 File(s) "
 36969                                  dirmes_ptr:
 36970 00007F5B FB03                    	dw	1019			;AN000;message number
 36971 00007F5D 01                      	db	1			;AN000;number of subst
 36972 00007F5E 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 36973 00007F5F 00                      	db	0			;AN000;reserved
 36974 00007F60 [BA8C]                  	dw	Dir_Num			;AN000;offset of arg
 36975 00007F62 0000                    	dw	0			;AN000;segment of arg
 36976 00007F64 01                      	db	1			;AN000;first subst
 36977 00007F65 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 36978                                  					;AN000;binary to decimal
 36979 00007F66 09                      	db	9			;AN000;maximum width
 36980 00007F67 09                      	db	9			;AN000;minimum width
 36981 00007F68 20                      	db	blank ; 20h		;AN000;pad character
 36982                                  
 36983                                  ;  "%1 bytes free",13,10
 36984                                  bytmes_ptr:
 36985 00007F69 FC03                    	dw	1020			;AN000;message number
 36986 00007F6B 01                      	db	1			;AN000;number of subst
 36987 00007F6C 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 36988 00007F6D 00                      	db	0			;AN000;reserved
 36989 00007F6E [BC8C]                  	dw	Bytes_Free		;AN000;offset of arg
 36990 00007F70 0000                    	dw	0			;AN000;segment of arg
 36991 00007F72 01                      	db	1			;AN000;first subst
 36992 00007F73 B1                      	db	0B1h ; Right_Align+Unsgn_Bin_DWord
 36993                                  					;AN000;long binary to decimal
 36994 00007F74 1C                      	db	28			;AN000;maximum width
 36995 00007F75 1C                      	db	28			;AN000;minimum width
 36996 00007F76 20                      	db	blank ; 20h		;AN000;pad character
 36997                                  
 36998                                  ;  "Invalid drive specification",13,10
 36999                                  baddrv_ptr:
 37000 00007F77 FD03                    	dw	1021			;AN000;message number
 37001 00007F79 00                      	db	no_subst ; 0		;AN000;number of subst
 37002                                  
 37003                                  ;  "Code page %1 not prepared for system",13,10
 37004                                  cp_not_set_ptr:
 37005 00007F7A FE03                    	dw	1022			;AN000;message number
 37006 00007F7C 01                      	db	1			;AN000;number of subst
 37007 00007F7D 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37008 00007F7E 00                      	db	0			;AN000;reserved
 37009 00007F7F [2F8C]                  	dw	system_cpage		;AN000;offset of arg
 37010 00007F81 0000                    	dw	0			;AN000;segment of arg
 37011 00007F83 01                      	db	1			;AN000;first subst
 37012 00007F84 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37013                                  					;AN000;binary to decimal
 37014 00007F85 05                      	db	5			;AN000;maximum width
 37015 00007F86 01                      	db	1			;AN000;minimum width
 37016 00007F87 20                      	db	blank ; 20h		;AN000;pad character
 37017                                  
 37018                                  ;  "Code page %1 not prepared for all devices",13,10
 37019                                  cp_not_all_ptr:
 37020 00007F88 FF03                    	dw	1023			;AN000;message number
 37021 00007F8A 01                      	db	1			;AN000;number of subst
 37022 00007F8B 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 37023 00007F8C 00                      	db	0			;AN000;reserved
 37024 00007F8D [2F8C]                  	dw	system_cpage		;AN000;offset of arg
 37025 00007F8F 0000                    	dw	0			;AN000;segment of arg
 37026 00007F91 01                      	db	1			;AN000;first subst
 37027 00007F92 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37028                                  					;AN000;binary to decimal
 37029 00007F93 05                      	db	5			;AN000;maximum width
 37030 00007F94 01                      	db	1			;AN000;minimum width
 37031 00007F95 20                      	db	blank ; 20h		;AN000;pad character
 37032                                  
 37033                                  ;  "Active code page: %1",13,10
 37034                                  cp_active_ptr:
 37035 00007F96 0004                    	dw	1024			;AN000;message number
 37036 00007F98 01                      	db	1			;AN000;number of subst
 37037 00007F99 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37038 00007F9A 00                      	db	0			;AN000;reserved
 37039 00007F9B [2F8C]                  	dw	system_cpage		;AN000;offset of arg
 37040 00007F9D 0000                    	dw	0			;AN000;segment of arg
 37041 00007F9F 01                      	db	1			;AN000;first subst
 37042 00007FA0 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37043                                  					;AN000;binary to decimal
 37044 00007FA1 05                      	db	5			;AN000;maximum width
 37045 00007FA2 01                      	db	1			;AN000;minimum width
 37046 00007FA3 20                      	db	blank ; 20h		;AN000;pad character
 37047                                  
 37048                                  ;  "NLSFUNC not installed",13,10
 37049                                  NLSFUNC_PTR:
 37050 00007FA4 0104                    	dw	1025			;AN000;message number
 37051 00007FA6 00                      	db	no_subst ; 0		;AN000;number of subst
 37052                                  
 37053                                  ;  "Invalid code page",13,10
 37054                                  INV_CODE_PAGE:
 37055 00007FA7 0204                    	dw	1026			;AN000;message number
 37056 00007FA9 00                      	db	no_subst ; 0		;AN000;number of subst
 37057                                  
 37058                                  ;  "Current drive is no longer valid"
 37059                                  BADCURDRV:
 37060 00007FAA 0304                    	dw	1027			;AN000;message number
 37061 00007FAC 00                      	db	no_subst ; 0		;AN000;number of subst
 37062                                  
 37063                                  ;  "Press any key to continue"
 37064                                  PAUSEMES_PTR:
 37065 00007FAD 0404                    	dw	1028			;AN000;message number
 37066 00007FAF 00                      	db	no_subst ; 0		;AN000;number of subst
 37067                                  
 37068                                  ;  "Label not found",13,10
 37069                                  BADLAB_PTR:
 37070 00007FB0 0504                    	dw	1029			;AN000;message number
 37071 00007FB2 00                      	db	no_subst ; 0		;AN000;number of subst
 37072                                  
 37073                                  ;  "Syntax error",13,10
 37074                                  SYNTMES_PTR:
 37075 00007FB3 0604                    	dw	1030			;AN000;message number
 37076 00007FB5 00                      	db	no_subst ; 0		;AN000;number of subst
 37077                                  
 37078                                  ;  "Invalid date",13,10
 37079                                  BADDAT_PTR:
 37080 00007FB6 0704                    	dw	1031			;AN000;message number
 37081 00007FB8 00                      	db	no_subst ; 0		;AN000;number of subst
 37082                                  
 37083                                  ;  "Current date is %1 %2",13,10
 37084                                  CurDat_Ptr:
 37085 00007FB9 0804                    	dw	1032			;AN000;message number
 37086 00007FBB 02                      	db	2			;AN000;number of subst
 37087 00007FBC 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37088 00007FBD 00                      	db	0			;AN000;reserved
 37089 00007FBE [318C]                  	dw	Arg_Buf			;AN000;offset of arg
 37090 00007FC0 0000                    	dw	0			;AN000;segment of arg
 37091 00007FC2 01                      	db	1			;AN000;first subst
 37092 00007FC3 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37093 00007FC4 03                      	db	3			;AN000;maximum width
 37094 00007FC5 03                      	db	3			;AN000;minimum width
 37095 00007FC6 20                       	db	blank ; 20h		;AN000;pad character
 37096 00007FC7 0B                      	db	parm_block_size 	;AN000;size of sublist
 37097 00007FC8 00                      	db	0			;AN000;reserved
 37098                                  CurDat_yr:
 37099 00007FC9 0000                    	dw	0			;AN000;year
 37100                                  CurDat_mo_day:
 37101 00007FCB 0000                    	dw	0			;AN000;month,day
 37102 00007FCD 02                      	db	2			;AN000;second subst
 37103 00007FCE 34                      	db	34h ; DATE_MDY_4	;AN000;date
 37104 00007FCF 0A                      	db	10			;AN000;maximum width
 37105 00007FD0 0A                      	db	10			;AN000;minimum width
 37106 00007FD1 20                      	db	blank ; 20h		;AN000;pad character
 37107                                  
 37108                                  ;  "SunMonTueWedThuFriSat"
 37109                                  WeekTab:
 37110 00007FD2 0904                    	dw	1033			;AN000;message number
 37111 00007FD4 00                      	db	no_subst ; 0		;AN000;number of subst
 37112                                  
 37113                                  ;  "Enter new date (%1):"
 37114                                  
 37115                                  NewDat_Ptr:
 37116 00007FD5 0A04                    	dw	1034			;AN000;message number
 37117 00007FD7 01                      	db	1			;AN000;number of subst
 37118 00007FD8 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37119 00007FD9 00                      	db	0			;AN000;reserved
 37120                                  NewDat_Format:
 37121 00007FDA 0000                    	dw	0			;AN000;offset of replacement
 37122 00007FDC 0000                    	dw	0			;AN000;segment of arg
 37123 00007FDE 01                      	db	1			;AN000;first subst
 37124 00007FDF 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37125 00007FE0 08                      	db	8			;AN000;maximum width
 37126 00007FE1 08                      	db	8			;AN000;minimum width
 37127 00007FE2 20                      	db	blank ; 20h		;AN000;pad character
 37128                                  
 37129                                  ;  "Invalid time",13,10
 37130                                  
 37131                                  BadTim_Ptr:
 37132 00007FE3 0B04                    	dw	1035			;AN000;message number
 37133 00007FE5 00                      	db	no_subst ; 0		;AN000;number of subst
 37134                                  
 37135                                  ;  "Current time is %1",13,10
 37136                                  CurTim_Ptr:
 37137 00007FE6 0C04                    	dw	1036			;AN000;message number
 37138 00007FE8 01                      	db	1			;AN000;number of subst
 37139 00007FE9 0B                      	db	parm_block_size 	;AN000;size of sublist
 37140 00007FEA 00                      	db	0			;AN000;reserved
 37141                                  CurTim_hr_min:
 37142 00007FEB 0000                    	dw	0			;AN000;hours,minutes
 37143                                  CurTim_Sec_hn:
 37144 00007FED 0000                    	dw	0			;AN000;seconds,hundredths
 37145 00007FEF 01                      	db	1			;AN000;first subst
 37146 00007FF0 A5                      	db	0A5h ; Right_Align+TIME_HHMMSSHH_Cty
 37147                                  					;AC059;time
 37148 00007FF1 0C                      	db	12			;AC059;maximum width
 37149 00007FF2 0C                      	db	12			;AC059;minimum width
 37150 00007FF3 20                      	db	blank ; 20h		;AN000;pad character
 37151                                  
 37152                                  ;  "Enter new time:"
 37153                                  NewTim_Ptr:
 37154 00007FF4 0D04                    	dw	1037			;AN000;message number
 37155 00007FF6 00                      	db	no_subst ; 0		;AN000;number of subst
 37156                                  
 37157                                  ;  ",    Delete (Y/N)?",13,10
 37158                                  Del_Y_N_Ptr:
 37159 00007FF7 0E04                    	dw	1038			;AN000;message number
 37160 00007FF9 00                      	db	no_subst ; 0		;AN000;number of subst
 37161                                  
 37162                                  ;  "All files in directory will be deleted!",13,10
 37163                                  ;  "Are you sure (Y/N)?",13,10
 37164                                  SureMes_Ptr:
 37165 00007FFA 0F04                    	dw	1039			;AN000;message number
 37166 00007FFC 00                      	db	no_subst ; 0		;AN000;number of subst
 37167                                  
 37168                                  ;  "Microsoft DOS Version %1.%2",13,10
 37169                                  VerMes_Ptr:
 37170 00007FFD 1004                    	dw	1040			;AN000;message number
 37171 00007FFF 02                      	db	2			;AN000;number of subst
 37172 00008000 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 37173 00008001 00                      	db	0			;AN000;reserved
 37174 00008002 [C08C]                  	dw	Major_Ver_Num		;AN000;offset of arg
 37175 00008004 0000                    	dw	0			;AN000;segment of arg
 37176 00008006 01                      	db	1			;AN000;first subst
 37177 00008007 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37178                                  					;AN000;binary to decimal
 37179 00008008 01                      	db	1			;AN000;maximum width
 37180 00008009 01                      	db	1			;AN000;minimum width
 37181 0000800A 20                      	db	blank ; 20h		;AN000;pad character
 37182 0000800B 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37183 0000800C 00                      	db	0			;AN000;reserved
 37184 0000800D [C28C]                  	dw	Minor_Ver_Num	;AN000;offset of arg
 37185 0000800F 0000                    	dw	0			;AN000;segment of arg
 37186 00008011 02                      	db	2			;AN000;second subst
 37187 00008012 A1                      	db	0A1h ; Right_Align+Unsgn_Bin_Word
 37188                                  					;AN000;binary to decimal
 37189 00008013 02                      	db	2			;AN000;maximum width
 37190 00008014 02                      	db	2			;AN000;minimum width
 37191 00008015 30                      	db	'0' ; 30h		;AN000;pad character
 37192                                  
 37193                                  ;  "Volume in drive %1 has no label",13,10
 37194                                  VolMes_Ptr_2:
 37195 00008016 1104                    	dw	1041			;AN000;message number
 37196 00008018 01                      	db	1			;AN000;number of subst
 37197 00008019 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 37198 0000801A 00                      	db	0			;AN000;reserved
 37199 0000801B [C68C]                  	dw	vol_drv			;AN000;offset of drive
 37200 0000801D 0000                    	dw	0			;AN000;segment of arg
 37201 0000801F 01                      	db	1			;AN000;first subst
 37202 00008020 00                      	db	0 ; Char_field_Char 	;AN000;character
 37203 00008021 80                      	db	128			;AN000;maximum width
 37204 00008022 01                      	db	1			;AN000;minimum width
 37205 00008023 20                      	db	blank ; 20h		;AN000;pad character
 37206                                  
 37207                                  ;  "Volume in drive %1 is %2",13,10
 37208                                  VolMes_Ptr:
 37209 00008024 1204                    	dw	1042			;AN000;message number
 37210 00008026 02                      	db	2			;AN000;number of subst
 37211 00008027 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37212 00008028 00                      	db	0			;AN000;reserved
 37213 00008029 [C68C]                  	dw	vol_drv			;AN000;offset of drive
 37214 0000802B 0000                    	dw	0			;AN000;segment of arg
 37215 0000802D 01                      	db	1			;AN000;first subst
 37216 0000802E 00                      	db	00000000b		;AN000;character
 37217 0000802F 80                      	db	128			;AN000;maximum width
 37218 00008030 01                      	db	1			;AN000;minimum width
 37219 00008031 20                      	db	blank ; 20h		;AN000;pad character
 37220 00008032 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37221 00008033 00                      	db	0			;AN000;reserved
 37222 00008034 [FF8A]                  	dw	CHARBUF			;AN000;offset of string
 37223 00008036 0000                    	dw	0			;AN000;segment of arg
 37224 00008038 02                      	db	2			;AN000;second subst
 37225 00008039 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37226 0000803A 80                      	db	128			;AN000;maximum width
 37227 0000803B 01                      	db	1			;AN000;minimum width
 37228 0000803C 20                      	db	blank ; 20h		;AN000;pad character
 37229                                  
 37230                                  ;  "Volume Serial Number is %1-%2",13,10
 37231                                  VolSerMes_Ptr:
 37232 0000803D 1304                    	dw	1043			;AN000;message number
 37233 0000803F 02                      	db	2			;AN000;number of subst
 37234 00008040 0B                      	db	parm_block_size ; 11  	;AN000;size of sublist
 37235 00008041 00                      	db	0			;AN000;reserved
 37236 00008042 [218E]                  	dw	vol_serial+2		;AN000;offset of serial
 37237 00008044 0000                    	dw	0			;AN000;segment of arg
 37238 00008046 01                      	db	1			;AN000;first subst
 37239 00008047 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word 
 37240                                  					;AN000;binary to hex
 37241 00008048 04                      	db	4			;AN000;maximum width
 37242 00008049 04                      	db	4			;AN000;minimum width
 37243 0000804A 30                      	db	'0' ; 30h		;AN000;pad character
 37244 0000804B 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37245 0000804C 00                      	db	0			;AN000;reserved
 37246 0000804D [1F8E]                  	dw	vol_serial		;AN000;offset of serial
 37247 0000804F 0000                    	dw	0			;AN000;segment of arg
 37248 00008051 02                      	db	2			;AN000;second subst
 37249 00008052 A3                      	db	0A3h ; Right_Align+Bin_Hex_Word
 37250                                  					;AN000;binary to hex
 37251 00008053 04                      	db	4			;AN000;maximum width
 37252 00008054 04                      	db	4			;AN000;minimum width
 37253 00008055 30                      	db	'0' ; 30h		;AN000;pad character
 37254                                  
 37255                                  ;  "Invalid directory",13,10
 37256                                  badcd_ptr:
 37257 00008056 1404                    	dw	1044			;AN000;message number
 37258 00008058 00                      	db	no_subst ; 0		;AN000;number of subst
 37259                                  
 37260                                  ;  "Unable to create directory",13,10
 37261                                  badmkd_ptr:
 37262 00008059 1504                    	dw	1045			;AN000;message number
 37263 0000805B 00                      	db	no_subst ; 0		;AN000;number of subst
 37264                                  
 37265                                  ;  "Invalid path, not directory,",13,10
 37266                                  ;  "or directory not empty",13,10
 37267                                  badrmd_ptr:
 37268 0000805C 1604                    	dw	1046			;AN000;message number
 37269 0000805E 00                      	db	no_subst ; 0		;AN000;number of subst
 37270                                  
 37271                                  ;  "Must specify ON or OFF",13,10
 37272                                  bad_on_off_ptr:
 37273 0000805F 1704                    	dw	1047			;AN000;message number
 37274 00008061 00                      	db	no_subst ; 0		;AN000;number of subst
 37275                                  
 37276                                  ;  "Directory of %1",13,10
 37277                                  dirhead_ptr:
 37278 00008062 1804                    	dw	1048			;AN000;message number
 37279 00008064 01                      	db	1			;AN000;number of subst
 37280 00008065 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 37281 00008066 00                      	db	0			;AN000;reserved
 37282 00008067 [CE8B]                  	dw	BWDBUF			;AN000;offset of arg
 37283 00008069 0000                    	dw	0			;AN000;segment of arg
 37284 0000806B 01                      	db	1			;AN000;first subst
 37285 0000806C 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37286 0000806D 80                      	db	128			;AN000;maximum width
 37287 0000806E 00                      	db	0			;AN000;minimum width
 37288 0000806F 20                      	db	blank ; 20h		;AN000;pad character
 37289                                  
 37290                                  ;  "No Path",13,10
 37291                                  NULLPATH_PTR:
 37292 00008070 1904                    	dw	1049			;AN000;message number
 37293 00008072 00                      	db	no_subst ; 0		;AN000;number of subst
 37294                                  
 37295                                  ;  "Invalid drive in search path",13,10
 37296                                  BADPMES_PTR:
 37297 00008073 1A04                    	dw	1050			;AN000;message number
 37298 00008075 00                      	db	no_subst ; 0		;AN000;number of subst
 37299                                  
 37300                                  ;  "Invalid device",13,10
 37301                                  BADDEV_PTR:
 37302 00008076 1B04                    	dw	1051			;AN000;message number
 37303 00008078 00                      	db	no_subst ; 0		;AN000;number of subst
 37304                                  
 37305                                  ;  "FOR cannot be nested",13,10
 37306                                  FORNESTMES_PTR:
 37307 00008079 1C04                    	dw	1052			;AN000;message number
 37308 0000807B 00                      	db	no_subst ; 0		;AN000;number of subst
 37309                                  
 37310                                  ;  "Intermediate file error during pipe",13,10
 37311                                  PIPEEMES_PTR:
 37312 0000807C 1D04                    	dw	1053			;AN000;message number
 37313 0000807E 00                      	db	no_subst ; 0		;AN000;number of subst
 37314                                  
 37315                                  ;  "Cannot do binary reads from a device",13,10
 37316                                  INBDEV_PTR:
 37317 0000807F 1E04                    	dw	1054			;AN000;message number
 37318 00008081 00                      	db	no_subst ; 0		;AN000;number of subst
 37319                                  
 37320                                  ;  "BREAK is %1",13,10
 37321                                  CtrlcMes_Ptr:
 37322 00008082 1F04                    	dw	1055			;AN000;message number
 37323 00008084 01                      	db	1			;AN000;number of subst
 37324 00008085 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37325 00008086 00                      	db	0			;AN000;reserved
 37326 00008087 0000                    	dw	0			;AN000;offset of on/off (new)
 37327 00008089 0000                    	dw	0			;AN000;segment of arg
 37328 0000808B 01                      	db	1			;AN000;first subst
 37329 0000808C 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37330 0000808D 80                      	db	128			;AN000;maximum width
 37331 0000808E 01                      	db	1			;AN000;minimum width
 37332 0000808F 20                      	db	blank ; 20h		;AN000;pad character
 37333                                  
 37334                                  ;  "VERIFY is %1",13,10
 37335                                  VeriMes_Ptr:
 37336 00008090 2004                    	dw	1056			;AN000;message number
 37337 00008092 01                      	db	1			;AN000;number of subst
 37338 00008093 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37339 00008094 00                      	db	0			;AN000;reserved
 37340 00008095 0000                    	dw	0			;AN000;offset of on/off (new)
 37341 00008097 0000                    	dw	0			;AN000;segment of arg
 37342 00008099 01                      	db	1			;AN000;first subst
 37343 0000809A 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37344 0000809B 80                      	db	128			;AN000;maximum width
 37345 0000809C 01                      	db	1			;AN000;minimum width
 37346 0000809D 20                      	db	blank ; 20h		;AN000;pad character
 37347                                  
 37348                                  ;  "ECHO is %1",13,10
 37349                                  EchoMes_Ptr:
 37350 0000809E 2104                    	dw	1057			;AN000;message number
 37351 000080A0 01                      	db	1			;AN000;number of subst
 37352 000080A1 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37353 000080A2 00                      	db	0			;AN000;reserved
 37354 000080A3 0000                    	dw	0			;AN000;offset of on/off (new)
 37355 000080A5 0000                    	dw	0			;AN000;segment of arg
 37356 000080A7 01                      	db	1			;AN000;first subst
 37357 000080A8 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37358 000080A9 80                      	db	128			;AN000;maximum width
 37359 000080AA 01                      	db	1			;AN000;minimum width
 37360 000080AB 20                      	db	blank ; 20h		;AN000;pad character
 37361                                  
 37362                                  ;  "off"
 37363                                  OFFMES_PTR:
 37364 000080AC 2304                    	dw	1059			;AN000;message number
 37365 000080AE 00                      	db	no_subst		;AN000;number of subst
 37366                                  
 37367                                  ;  "on"
 37368                                  ONMES_PTR:
 37369 000080AF 2404                    	dw	1060			;AN000;message number
 37370 000080B1 00                      	db	no_subst ; 0		;AN000;number of subst
 37371                                  
 37372                                  ;  "Error writing to device",13,10
 37373                                  DEVWMES_PTR:
 37374 000080B2 2504                    	dw	1061			;AN000;message number
 37375 000080B4 00                      	db	no_subst ; 0		;AN000;number of subst
 37376                                  
 37377                                  ;  "Invalid path",13,10
 37378                                  INVAL_PATH_PTR:
 37379 000080B5 2604                    	dw	1062			;AN000;message number
 37380 000080B7 00                      	db	no_subst ; 0		;AN000;number of subst
 37381                                  
 37382                                  ;  unformatted string output
 37383                                  arg_buf_ptr:
 37384 000080B8 2704                    	dw	1063			;AN000;message number
 37385 000080BA 01                      	db	1			;AN000;number of subst
 37386 000080BB 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37387 000080BC 00                      	db	0			;AN000;reserved
 37388 000080BD [318C]                  	dw	Arg_Buf 		;AN000;offset of arg
 37389 000080BF 0000                    	dw	0			;AN000;segment of arg
 37390 000080C1 01                      	db	1			;AN000;first subst
 37391 000080C2 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37392 000080C3 80                      	db	128			;AN000;maximum width
 37393 000080C4 00                      	db	0			;AN000;minimum width
 37394 000080C5 20                      	db	blank ; 20h		;AN000;pad character
 37395                                  
 37396                                  ;  file name output
 37397                                  file_name_ptr:
 37398 000080C6 2804                    	dw	1064			;AN000;message number
 37399 000080C8 01                      	db	1			;AN000;number of subst
 37400 000080C9 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37401 000080CA 00                      	db	0			;AN000;reserved
 37402 000080CB [348D]                  	dw	SrcBuf			;AN000;offset of arg
 37403 000080CD 0000                    	dw	0			;AN000;segment of arg
 37404 000080CF 01                      	db	1			;AN000;first subst
 37405 000080D0 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37406 000080D1 80                      	db	128			;AN000;maximum width
 37407 000080D2 00                      	db	0			;AN000;minimum width
 37408 000080D3 20                      	db	blank ; 20h		;AN000;pad character
 37409                                  
 37410                                  ;  file size output for dir
 37411                                  disp_file_size_ptr:
 37412 000080D4 2904                    	dw	1065			;AN000;message number
 37413 000080D6 01                      	db	1			;AN000;number of subst
 37414 000080D7 0B                      	db	parm_block_size ; 11 	;AN000;size of sublist
 37415 000080D8 00                      	db	0			;AN000;reserved
 37416 000080D9 [B18C]                  	dw	File_Size_Low		;AN000;offset of arg
 37417 000080DB 0000                    	dw	0			;AN000;segment of arg
 37418 000080DD 01                      	db	1			;AN000;first subst
 37419 000080DE B1                      	db	0B1h ; Right_Align+Unsgn_Bin_DWord
 37420                                  					;AN000;long binary to decimal
 37421 000080DF 0A                      	db	10			;AN000;maximum width
 37422 000080E0 0A                      	db	10			;AN000;minimum width
 37423 000080E1 20                      	db	blank ; 20h		;AN000;pad character
 37424                                  
 37425                                  ;  unformatted string output
 37426                                  ; %s
 37427                                  string_buf_ptr:
 37428 000080E2 2A04                    	dw	1066			;AN000;message number
 37429 000080E4 01                      	db	1			;AN000;number of subst
 37430 000080E5 0B                      	db	parm_block_size 	;AN000;size of sublist
 37431 000080E6 00                      	db	0			;AN000;reserved
 37432 000080E7 [B58C]                  	dw	string_ptr_2		;AN000;offset of arg
 37433 000080E9 0000                    	dw	0			;AN000;segment of arg
 37434 000080EB 01                      	db	1			;AN000;first subst
 37435 000080EC 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37436 000080ED 80                      	db	128			;AN000;maximum width
 37437 000080EE 00                      	db	0			;AN000;minimum width
 37438 000080EF 20                      	db	blank ; 20h		;AN000;pad character
 37439 000080F0 00                      	db	0			;AN000;
 37440                                  
 37441                                  ;  tab character
 37442                                  tab_ptr:
 37443 000080F1 2B04                    	dw	1067			;AN000;message number
 37444 000080F3 00                      	db	no_subst ; 0		;AN000;number of subst
 37445                                  
 37446                                  ;  " <DIR>   "
 37447                                  dmes_ptr:
 37448 000080F4 2C04                    	dw	1068			;AN000;message number
 37449 000080F6 00                      	db	no_subst ; 0		;AN000;number of subst
 37450                                  
 37451                                  ;  destructive back space
 37452                                  dback_ptr:
 37453 000080F7 2D04                    	dw	1069			;AN000;message number
 37454 000080F9 00                      	db	no_subst ; 0		;AN000;number of subst
 37455                                  
 37456                                  ;  carriage return / line feed
 37457                                  acrlf_ptr:
 37458 000080FA 2E04                    	dw	1070			;AN000;message number
 37459 000080FC 00                      	db	no_subst ; 0		;AN000;number of subst
 37460                                  
 37461                                  ;  "mm-dd-yy"
 37462                                  usadat_ptr:
 37463 000080FD 3004                    	dw	1072			;AN000;message number
 37464 000080FF 00                      	db	no_subst ; 0		;AN000;number of subst
 37465                                  
 37466                                  ;  "dd-mm-yy"
 37467                                  eurdat_ptr:
 37468 00008100 3104                    	dw	1073			;AN000;message number
 37469 00008102 00                      	db	no_subst ; 0		;AN000;number of subst
 37470                                  
 37471                                  ;  "yy-mm-dd"
 37472                                  japdat_ptr:
 37473 00008103 3204                    	dw	1074			;AN000;message number
 37474 00008105 00                      	db	no_subst ; 0		;AN000;number of subst
 37475                                  
 37476                                  ;  date string for prompt
 37477                                  promptdat_ptr:
 37478 00008106 3304                    	dw	1075			;AN000;message number
 37479 00008108 02                      	db	2			;AN000;number of subst
 37480 00008109 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37481 0000810A 00                      	db	0			;AN000;reserved
 37482 0000810B [318C]                  	dw	Arg_Buf			;AN000;offset of arg
 37483 0000810D 0000                    	dw	0			;AN000;segment of arg
 37484 0000810F 01                      	db	1			;AN000;first subst
 37485 00008110 10                      	db	10h ; Char_field_ASCIIZ ;AN000;character string
 37486 00008111 03                      	db	3			;AN000;maximum width
 37487 00008112 03                      	db	3			;AN000;minimum width
 37488 00008113 20                       	db	blank ; 20h		;AN000;pad character
 37489 00008114 0B                      	db	parm_block_size  ; 11	;AN000;size of sublist
 37490 00008115 00                      	db	0			;AN000;reserved
 37491                                  promptDat_yr:
 37492 00008116 0000                    	dw	0			;AN000;year
 37493                                  promptDat_moday:
 37494 00008118 0000                    	dw	0			;AN000;month,day
 37495 0000811A 02                      	db	2			;AN000;second subst
 37496 0000811B 34                       	db	34h ; DATE_MDY_4	;AN000;date
 37497 0000811C 0A                      	db	10			;AN000;maximum width
 37498 0000811D 08                      	db	8			;AN000;minimum width
 37499 0000811E 20                      	db	blank ; 20h		;AN000;pad character
 37500                                  
 37501                                  ;  Time for prompt
 37502                                  promtim_ptr:
 37503 0000811F 3404                    	dw	1076			;AN000;message number
 37504 00008121 01                      	db	1			;AN000;number of subst
 37505 00008122 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37506 00008123 00                      	db	0			;AN000;reserved
 37507                                  PromTim_hr_min:
 37508 00008124 0000                    	dw	0			;AN000;hours,minutes
 37509                                  PromTim_Sec_hn:
 37510 00008126 0000                    	dw	0			;AN000;seconds,hundredths
 37511 00008128 01                      	db	1			;AN000;first subst
 37512 00008129 A6                      	db	0A6h ; Right_Align+TIME_HHMMSSHH_24
 37513                                  					;AC013;time
 37514 0000812A 0B                      	db	11			;AN000;maximum width
 37515 0000812B 0B                      	db	11			;AC013;minimum width
 37516 0000812C 20                      	db	blank ; 20h		;AN000;pad character
 37517                                  
 37518                                  ;  Date and time for DIR
 37519                                  dirdattim_ptr:
 37520 0000812D 3504                    	dw	1077			;AN000;message number
 37521 0000812F 02                      	db	2			;AN000;number of subst
 37522 00008130 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37523 00008131 00                      	db	0			;AN000;reserved
 37524                                  DirDat_Yr:
 37525 00008132 0000                    	dw	0			;AN000;year
 37526                                  DirDat_Mo_Day:
 37527 00008134 0000                    	dw	0			;AN000;month,day
 37528 00008136 01                      	db	1			;AN000;first subst
 37529 00008137 A4                      	db	0A4h ; Right_Align+DATE_MDY_2
 37530                                  					;AN000;date
 37531 00008138 0A                      	db	10			;AN000;maximum width
 37532 00008139 08                      	db	8			;AN000;minimum width
 37533 0000813A 20                      	db	blank ; 20h		;AN000;pad character
 37534 0000813B 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37535 0000813C 00                      	db	0			;AN000;reserved
 37536                                  DirTim_Hr_Min:
 37537 0000813D 0000                    	dw	0			;AN000;hours,minutes
 37538                                  DirTim_Sec_hn:
 37539 0000813F 0000                    	dw	0			;AN000;seconds,hundredths
 37540 00008141 02                      	db	2			;AN000;second subst
 37541 00008142 85                      	db	85h ; Right_align+TIME_HHMM_Cty
 37542                                  					;AN000;time
 37543 00008143 06                      	db	6			;AN000;maximum width
 37544 00008144 06                      	db	6			;AN000;minimum width
 37545 00008145 20                      	db	blank ; 20h		;AN000;pad character
 37546                                  
 37547                                  ;  "Directory already exists"
 37548                                  MD_EXISTS_PTR:
 37549 00008146 3604                    	dw	1078			;AN000;message number
 37550 00008148 00                      	db	no_subst		;AN000;number of subst
 37551                                  
 37552                                  ;  "%1 bytes",13,10
 37553                                  bytes_ptr:
 37554 00008149 3704                    	dw	1079			; message number
 37555 0000814B 01                      	db	1			; number of subst
 37556 0000814C 0B                              db	parm_block_size ; 11	; size of sublist
 37557 0000814D 00                              db	0			; reserved
 37558 0000814E [F38A]                          dw	FileSiz			; offset of arg
 37559 00008150 0000                            dw	0			; segment of arg
 37560 00008152 01                              db	1			; first subst
 37561 00008153 B1                              db	0B1h ; Right_Align+Unsgn_Bin_DWord
 37562                                  					; long binary to decimal
 37563 00008154 0A                              db	10			; maximum width
 37564 00008155 0A                              db	10			; minimum width
 37565 00008156 20                              db	blank ; 20h		; pad character
 37566                                  
 37567                                  ;  "Total:",13,10
 37568                                  total_ptr:
 37569 00008157 3804                    	dw	1080			; message number
 37570 00008159 00                      	db	no_subst ; 0		; number of subst
 37571                                  
 37572                                  ;  "Error parsing environment variable:",13,10
 37573                                  errparsenv_ptr:
 37574 0000815A 3904                    	dw	1081			; message number
 37575 0000815C 00                      	db	no_subst ; 0		; number of subst
 37576                                  
 37577                                  ;  "(continuing %1)",13,10
 37578                                  dircont_ptr:
 37579 0000815D 3C04                    	dw	1084			;AN000;message number
 37580 0000815F 01                      	db	1			;AN000;number of subst
 37581 00008160 0B                      	db	parm_block_size ; 11	;AN000;size of sublist
 37582 00008161 00                      	db	0			;AN000;reserved
 37583 00008162 [CE8B]                  	dw	BWDBUF			;AN000;offset of arg
 37584 00008164 0000                    	dw	0			;AN000;segment of arg
 37585 00008166 01                      	db	1			;AN000;first subst
 37586 00008167 10                      	db	10h ; Char_field_ASCIIZ	;AN000;character string
 37587 00008168 80                      	db	128			;AN000;maximum width
 37588 00008169 00                      	db	0			;AN000;minimum width
 37589 0000816A 20                      	db	blank ; 20h		;AN000;pad character
 37590                                  
 37591                                  ;  "Revision %1",CR,LF
 37592                                  dosrev_ptr:
 37593 0000816B 4204                    	dw	1090
 37594 0000816D 01                      	db	1			; one substitution
 37595 0000816E 0B                      	db	parm_block_size ; 11
 37596 0000816F 00                      	db	0
 37597 00008170 [C48C]                  	dw	One_Char_Val		; ptr to char
 37598 00008172 0000                    	dw	0			; segment addr?
 37599 00008174 01                      	db	1			; 1st substitution
 37600 00008175 00                      	db	0 ; CHAR_FIELD_CHAR	; character
 37601 00008176 01                      	db	1			; max width
 37602 00008177 01                      	db	1			; min width
 37603 00008178 20                      	db	blank ; 20h		; pad char
 37604                                  
 37605                                  ;  "DOS is in ROM"
 37606                                  DosRom_Ptr:
 37607 00008179 4304                    	dw	1091
 37608 0000817B 00                      	db	no_subst ; 0		
 37609                                  
 37610                                  ;  "DOS is in HMA"
 37611                                  DosHma_Ptr:
 37612 0000817C 4404                    	dw	1092
 37613 0000817E 00                      	db	no_subst ; 0		
 37614                                  
 37615                                  ;  "DOS is in low memory"
 37616                                  DosLow_Ptr:
 37617 0000817F 4504                    	dw	1093
 37618 00008181 00                      	db	no_subst ; 0		
 37619                                  
 37620                                  ;  "Cannot Loadhigh batch file" ;M016
 37621                                  NoExecBat_Ptr:
 37622 00008182 4604                    	dw	1094			; M016
 37623 00008184 00                      	db	no_subst ; 0		; M016
 37624                                  
 37625                                  ;  "LoadHigh: Invalid filename" ; M016
 37626                                  LhInvFil_Ptr:
 37627 00008185 4704                    	dw	1095			; M016
 37628 00008187 00                      	db	no_subst ; 0		; M016
 37629                                  
 37630                                  ;  "Could not open specified country information file" ; M045
 37631                                  NoCntry_Ptr:
 37632 00008188 4804                    	dw	1096			; M045
 37633 0000818A 00                      	db	no_subst ; 0		; M045
 37634                                  
 37635                                  ; 15/04/2023
 37636                                  ; MSDOS 6.0 COMMAND.COM only !
 37637                                  %if 0
 37638                                  
 37639                                  ;* The next four errors emulate those reported by the normal parse
 37640                                  ;  mechanism, with a little more accurate wording; that parser has been
 37641                                  ;  replaced with a custom routine (ParseVar) for LoadHigh and DeviceHigh.
 37642                                  ;  These errors aren't normally generated by LoadHigh except by the normal
 37643                                  ;  parser, so they've been added here.
 37644                                  
 37645                                  ;  "LoadHigh: Invalid argument"
 37646                                  LhInvArg_Ptr:
 37647                                  	dw	1097
 37648                                  	db	no_subst ; 0		
 37649                                  
 37650                                  ;  "Required parameter missing"
 37651                                  ReqParmMiss:
 37652                                  	dw	1098
 37653                                  	db	no_subst ; 0		
 37654                                  
 37655                                  ;  "Unrecognized switch"
 37656                                  LhInvSwt_Ptr:
 37657                                  	dw	1099
 37658                                  	db	no_subst ; 0		
 37659                                  
 37660                                  ;  "A bad UMB number has been specified"
 37661                                  LhBadUMB_Ptr:
 37662                                  	dw	1100
 37663                                  	db	no_subst ; 0
 37664                                  %endif		
 37665                                  
 37666                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 37667                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8483h
 37668                                  ; ---------------------------------------------------------------------------
 37669                                  
 37670                                  PATH_TEXT:
 37671 0000818B 504154483D              	db	"PATH="
 37672                                  PROMPT_TEXT:
 37673 00008190 50524F4D50543D          	db	"PROMPT="
 37674                                  COMSPECSTR:
 37675 00008197 434F4D535045433D        	db	"COMSPEC="
 37676                                  DirEnvVar:
 37677 0000819F 444952434D443D          	db	"DIRCMD="		; DIR's environment variable
 37678                                  
 37679                                  ; 15/04/2023
 37680                                  %if 0
 37681                                  
 37682                                  ;============================================================================
 37683                                  ; TDATA.ASM, MSDOS 6.0, 1991
 37684                                  ;============================================================================
 37685                                  ; 30/09/2018 - Retro DOS v3.0
 37686                                  
 37687                                  ; TITLE	COMMAND Transient Initialized DATA
 37688                                  
 37689                                  ;The TRANDATA segment contains data that is assumed to have predefined
 37690                                  ;initial values at the beginning of each command cycle. It is
 37691                                  ;included in the transient checksum area. If values in TRANDATA
 37692                                  ;change, the transient will be reloaded for the next command cycle.
 37693                                  
 37694                                  align 16
 37695                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3730h
 37696                                  
 37697                                  PRINTF_TABLE:	db '0123456789ABCDEF'
 37698                                  _3740h:		db '%S',0
 37699                                  ARG_BUF_PTR:	dw _3740h
 37700                                  		dw _3747h
 37701                                  _3747h:		dw ARG_BUF ; _43E8h
 37702                                  _3749h:		db '%S ',0
 37703                                  STRINGBUF1PTR:	dw _3749h
 37704                                  		dw STRING_PTR_1 ; _4468h
 37705                                  _3751h:		db '%9ld',0
 37706                                  FSIZEMESPTR:	dw _3751h
 37707                                  		dw FILESIZE_L ; _446Ah
 37708                                  		dw FILESIZE_H ; _446Ch
 37709                                  _375Ch:		db '%S',0
 37710                                  STRINGBUF2PTR:	dw _375Ch
 37711                                  		dw STRING_PTR_2 ; _446Eh
 37712                                  _3763h:		db 9,0
 37713                                  TABPTR:		dw _3763h
 37714                                  _3767h:		db 0Dh,0Ah
 37715                                  		db 'Batch file missing',0Dh,0Ah,0
 37716                                  BADPATHPTR:	dw _3767h
 37717                                  _3780h:		db 0Dh,0Ah
 37718                                  		db 'Insert disk with batch file',0Dh,0Ah
 37719                                  		db 'and press any key when ready',0Dh,0Ah,0
 37720                                  INSERTDSKPTR:	dw _3780h
 37721                                  _37C0h:		db 'Bad command or file name',0Dh,0Ah,0
 37722                                  BADNAMPTR:	dw _37C0h
 37723                                  _37DDh:		db 'Duplicate file name or File not found',0Dh,0Ah,0
 37724                                  RENERRPTR:	dw _37DDh
 37725                                  _3807h:		db 'File not found',0Dh,0Ah,0
 37726                                  FNOTFOUNDPTR:	dw _3807h
 37727                                  _381Ah:		db 'Path not found',0Dh,0Ah,0
 37728                                  PNOTFOUNDPTR:	dw _381Ah
 37729                                  _382Dh:		db 'Access denied',0Dh,0Ah,0
 37730                                  ACCDENPTR:	dw _382Dh
 37731                                  _383Fh:		db 'Insufficient disk space',0Dh,0Ah,0
 37732                                  NOSPACEPTR:	dw _383Fh
 37733                                  _385Bh:		db 'Out of environment space',0Dh,0Ah,0
 37734                                  ENVERRPTR:	dw _385Bh
 37735                                  _3878h:		db 'File creation error',0Dh,0Ah,0
 37736                                  FULDIRPTR:	dw 3878h
 37737                                  _3890h:		db 'File cannot be copied onto itself',0Dh,0Ah,0
 37738                                  OVERWRPTR:	dw _3890h
 37739                                  _38B6h:		db 'Content of destination lost before copy',0Dh,0Ah,0
 37740                                  LOSTERRPTR:	dw _38B6h
 37741                                  _38E2h:		db 'Invalid filename or file not found',0Dh,0Ah,0
 37742                                  INORNOTPTR:	dw _38E2h
 37743                                  _3909h:		db '%9d File(s) copied',0Dh,0Ah,0
 37744                                  COPIEDPTR:	dw _3909h
 37745                                  		dw COPY_NUM ; _4470h
 37746                                  _3922h:		db '%9d File(s) ',0
 37747                                  DIRMESPTR:	dw _3922h
 37748                                  		dw DIR_NUM  ; _4477h
 37749                                  _3933h:		db '%9ld bytes free',0Dh,0Ah,0
 37750                                  BYTEMESPTR:	dw _3933h
 37751                                  		dw BYTES_FREE   ; _4479h
 37752                                  		dw BYTES_FREE+2 ; _447Bh
 37753                                  _394Bh:		db 'Invalid drive specification',0Dh,0Ah,0
 37754                                  BADDRVPTR:	dw _394Bh
 37755                                  _396Bh:		db 0Dh,0Ah
 37756                                  		db 'Code page %5d not prepared for system',0Dh,0Ah,0
 37757                                  CPNOTSETPTR:	dw _396Bh
 37758                                  		dw SYSTEM_CPAGE ; _3F2Fh
 37759                                  _3999h:		db 0Dh,0Ah
 37760                                  		db 'Code page %5d not prepared for all devices',0Dh,0Ah,0
 37761                                  CPNOTALLPTR:	dw _3999h
 37762                                  		dw SYSTEM_CPAGE ; _3F2Fh
 37763                                  _39CCh:		db 0Dh,0Ah
 37764                                  		db 'Active code page: %5d',0Dh,0Ah,0
 37765                                  CPACTIVEPTR:	dw _39CCh
 37766                                  		dw SYSTEM_CPAGE ; _3F2Fh
 37767                                  _39EAh:		db 'Current drive is no longer valid',0
 37768                                  BADCURDRVPTR:	dw _39EAh
 37769                                  _3A0Dh:		db 'Strike a key when ready . . . ',0
 37770                                  PAUSEMESPTR:	dw _3A0Dh
 37771                                  _3A2Eh:		db 'Invalid parameter',0Dh,0Ah,0
 37772                                  BADPARMPTR:	dw _3A2Eh
 37773                                  WEEKTAB:	db 'SunMonTueWedThuFriSat'
 37774                                  _3A59h:		db 0Dh,0Ah
 37775                                  		db 'Invalid date',0
 37776                                  BADDATPTR:	dw _3A59h
 37777                                  _3A6Ah:		db 'Current date is ',0
 37778                                  CURDATPTR:	dw _3A6Ah
 37779                                  _3A7Dh:		db 0Dh,0Ah
 37780                                  		db 'Enter new date ',0
 37781                                  NEWDATPTR:	dw _3A7Dh
 37782                                  _3A91h:		db '(mm-dd-yy): ',0
 37783                                  USADATPTR:	dw _3A91h
 37784                                  _3AA0h:		db '(dd-mm-yy): ',0
 37785                                  EURDATPTR:	dw _3AA0h
 37786                                  _3AAFh:		db '(yy-mm-dd): ',0
 37787                                  JAPDATPTR:	dw _3AAFh
 37788                                  _3ABEh:		db 0Dh,0Ah
 37789                                  		db 'Invalid time ',0
 37790                                  BADTIMPTR:	dw _3ABEh
 37791                                  _3AD0h:		db 'Current time is ',0
 37792                                  CURTIMPTR:	dw _3AD0h
 37793                                  _3AE3h:		db 0Dh,0Ah
 37794                                  		db 'Enter new time: ',0
 37795                                  NEWTIMPTR:	dw _3AE3h
 37796                                  _3AF8h:		db 'Are you sure (Y/N)?',0
 37797                                  SUREMESPTR:	dw _3AF8h
 37798                                  _3B0Eh:		db ' <DIR>   ',0
 37799                                  DMESPTR:	dw _3B0Eh
 37800                                  _3B1Ah:		db 'MS-DOS Version %1d.%02d                     ',0
 37801                                  VERMESPTR:	dw _3B1Ah
 37802                                  		dw MAJOR_VER_NUM ; _447Dh
 37803                                  		dw MINOR_VER_NUM ; _447Fh
 37804                                  _3B4Dh:		db '%C',0
 37805                                  ONECHRVALPTR:	dw _3B4Dh
 37806                                  		dw ONE_CHAR_VAL	; _4481h
 37807                                  _3B54h:		db ' Volume in drive %c %s',0
 37808                                  VOLMESPTR:	dw _3B54h
 37809                                  		dw VOL_DRV ; _4484h
 37810                                  		dw VOLNAME_ADDR ; _4482h
 37811                                  IS:		db 'is ',0
 37812                                  NOVOL:		db 'has no label',0
 37813                                  _3B82h:		db 'Invalid directory',0Dh,0Ah,0
 37814                                  BADCDPTR:	dw _3B82h
 37815                                  _3B98h:		db 'Unable to create directory',0Dh,0Ah,0
 37816                                  BADMKDPTR:	dw _3B98h
 37817                                  _3BB7h:		db 'Invalid path, not directory,',0Dh,0Ah
 37818                                  		db 'or directory not empty',0Dh,0Ah,0
 37819                                  BADRMDPTR:	dw _3BB7h
 37820                                  _3BF0h:		db 'Must specify ON or OFF',0Dh,0Ah,0
 37821                                  BADONOFFPTR:	dw _3BF0h
 37822                                  _3C0Bh:		db ' Directory of  %S',0Dh,0Ah,0
 37823                                  DIRHEADPTR:	dw _3C0Bh
 37824                                  		dw VOL_DIR ; _4485h
 37825                                  _3C23h:		db 'No Path',0
 37826                                  NULLPATHPTR:	dw _3C23h
 37827                                  PATH_TEXT:	db 'PATH='
 37828                                  PROMPT_TEXT:	db 'PROMPT='
 37829                                  COMSPEC_TEXT:	db 'COMSPEC='
 37830                                  _3C41h:		db 'Invalid drive in search path',0Dh,0Ah,0
 37831                                  BADPMESPTR:	dw _3C41h
 37832                                  _3C62h:		db 'Invalid device',0Dh,0Ah,0
 37833                                  BADDEVPTR:	dw _3C62h
 37834                                  _3C75h:		db 'Label not found',0Dh,0Ah,0
 37835                                  BADLABPTR:	dw _3C75h
 37836                                  _3C89h:		db 'Syntax error',0Dh,0Ah,0
 37837                                  SYNTMESPTR:	dw _3C89h
 37838                                  _3C9Ah:		db 0Dh,'FOR cannot be nested',0Dh,0Ah,0
 37839                                  FORNESTMESTR:	dw _3C9Ah
 37840                                  _3CB4h:		db 'Insufficient memory',0Dh,0Ah,0
 37841                                  INSFMEMMESPTR:	dw _3CB4h
 37842                                  _3CCCh:		db 'Intermediate file error during pipe',0Dh,0Ah,0
 37843                                  PIPEEMESPTR:	dw _3CCCh
 37844                                  _3CF4h:		db 'Cannot do binary reads from a device',0Dh,0Ah,0
 37845                                  INBDEVPTR:	dw _3CF4h
 37846                                  _3D1Dh:		db 'BREAK is ',0
 37847                                  CTRLMESPTR:	dw _3D1Dh
 37848                                  _3D29h:		db 'VERIFY is ',0
 37849                                  VERIMESPTR:	dw _3D29h
 37850                                  _3D36h:		db 'ECHO is ',0
 37851                                  ECHOMESPTR:	dw _3D36h
 37852                                  _3D41h:		db 'off',0Dh,0Ah,0
 37853                                  OFFMESPTR:	dw _3D41h
 37854                                  _3D49h:		db 'on',0Dh,0Ah,0
 37855                                  ONMESPTR:	dw _3D49h
 37856                                  _3D50h:		db 'Invalid path or file name',0Dh,0Ah,0
 37857                                  BADCPMESPTR:	dw _3D50h
 37858                                  _3D6Eh:		db 'Invalid number of parameters',0Dh,0Ah,0
 37859                                  BADARGSPTR:	dw _3D6Eh
 37860                                  _3D8Fh:		db 'Error writing to device',0Dh,0Ah,0
 37861                                  DEVWMESPTR:	dw _3D8Fh
 37862                                  _3DABh:		db 0Dh,0Ah,0
 37863                                  ACRLFPTR:	dw _3DABh
 37864                                  _3DB0h:		db 8
 37865                                  		db 20h
 37866                                  		db 8
 37867                                  		db 0
 37868                                  DBACKPTR:	dw _3DB0h
 37869                                  small_y:	db 'y'
 37870                                  small_n:	db 'n'
 37871                                  CAPITAL_Y:	db 'Y'
 37872                                  CAPITAL_N:	db 'N'
 37873                                  CLSSTRING:	db 4,1Bh,'[2J'	; ANSI Clear screen
 37874                                  PROMPT_TABLE:
 37875                                  		db 'B' ; 42h
 37876                                  		dw PRINT_B
 37877                                  		db 'D' ; 44h
 37878                                  		dw PRINT_DATE
 37879                                  		db 'E' ; 45h
 37880                                  		dw PRINT_ESC
 37881                                  		db 'G' ; 47h
 37882                                  		dw PRINT_G
 37883                                  		db 'H' ; 48h
 37884                                  		dw PRINT_BACK
 37885                                  		db 'L' ; 4Ch
 37886                                  		dw PRINT_L
 37887                                  		db 'N' ; 4Eh
 37888                                  		dw PRINT_DRIVE
 37889                                  		db 'P' ; 50h
 37890                                  		dw BUILD_DIR_FOR_PROMPT
 37891                                  		db 'Q' ; 51h
 37892                                  		dw PRINT_EQ
 37893                                  		db 'T' ; 54h
 37894                                  		dw PRINT_TIME
 37895                                  		db 'V' ; 56h
 37896                                  		dw PRINT_VERSION
 37897                                  		db '_' ; 5Fh
 37898                                  		dw CRLF2
 37899                                  		db '$' ; 24h
 37900                                  		dw PRINT_CHAR
 37901                                  		db 0
 37902                                  
 37903                                  		; Table of IF conditionals
 37904                                  IFTAB:
 37905                                  		db 3	; First byte is count
 37906                                  		db 'NOT'
 37907                                  		dw IFNOT
 37908                                  		db 10
 37909                                  		db 'ERRORLEVEL'
 37910                                  		dw IFERLEV
 37911                                  		db 5
 37912                                  		db 'EXIST'
 37913                                  		dw IFEXISTS
 37914                                  		db 0
 37915                                  
 37916                                  		; Table for internal command names
 37917                                  
 37918                                  COMTAB:		db 3
 37919                                  		db 'DIR'
 37920                                  		db 3
 37921                                  		dw CATALOG
 37922                                  		db 4
 37923                                  		db 'CALL'
 37924                                  		db 2
 37925                                  		dw _$CALL
 37926                                  		db 4
 37927                                  		db 'CHCP'
 37928                                  		db 2
 37929                                  		dw CHCP
 37930                                  		db 6
 37931                                  		db 'RENAME'
 37932                                  		db 1
 37933                                  		dw CRENAME
 37934                                  		db 3
 37935                                  		db 'REN'
 37936                                  		db 1
 37937                                  		dw CRENAME
 37938                                  		db 5
 37939                                  		db 'ERASE'
 37940                                  		db 1
 37941                                  		dw ERASE
 37942                                  		db 3
 37943                                  		db 'DEL'
 37944                                  		db 1
 37945                                  		dw ERASE
 37946                                  		db 4
 37947                                  		db 'TYPE'
 37948                                  		db 1
 37949                                  		dw TYPEFIL
 37950                                  		db 3
 37951                                  		db 'REM'
 37952                                  		db 2
 37953                                  		dw TCOMMAND
 37954                                  		db 4
 37955                                  		db 'COPY'
 37956                                  		db 3
 37957                                  		dw COPY
 37958                                  		db 5
 37959                                  		db 'PAUSE'
 37960                                  		db 2
 37961                                  		dw PAUSE
 37962                                  		db 4
 37963                                  		db 'DATE'
 37964                                  		db 2
 37965                                  		dw DATE
 37966                                  		db 4
 37967                                  		db 'TIME'
 37968                                  		db 0
 37969                                  		dw CTIME
 37970                                  		db 3
 37971                                  		db 'VER'
 37972                                  		db 0
 37973                                  		dw VERSION
 37974                                  		db 3
 37975                                  		db 'VOL'
 37976                                  		db 1
 37977                                  		dw VOLUME
 37978                                  		db 2
 37979                                  		db 'CD'
 37980                                  		db 1
 37981                                  		dw _$CHDIR
 37982                                  		db 5
 37983                                  		db 'CHDIR'
 37984                                  		db 1
 37985                                  		dw _$CHDIR
 37986                                  		db 2
 37987                                  		db 'MD'
 37988                                  		db 1
 37989                                  		dw _$MKDIR
 37990                                  		db 5
 37991                                  		db 'MKDIR'
 37992                                  		db 1
 37993                                  		dw _$MKDIR
 37994                                  		db 2
 37995                                  		db 'RD'
 37996                                  		db 1
 37997                                  		dw _$RMDIR
 37998                                  		db 5
 37999                                  		db 'RMDIR'
 38000                                  		db 1
 38001                                  		dw _$RMDIR
 38002                                  		db 5
 38003                                  		db 'BREAK'
 38004                                  		db 0
 38005                                  		dw CNTRLC
 38006                                  		db 6
 38007                                  		db 'VERIFY'
 38008                                  		db 0
 38009                                  		dw VERIFY
 38010                                  		db 3
 38011                                  		db 'SET'
 38012                                  		db 2
 38013                                  		dw ADD_NAME_TO_ENVIRONMENT
 38014                                  		db 6
 38015                                  		db 'PROMPT'
 38016                                  		db 2
 38017                                  		dw ADD_PROMPT
 38018                                  		db 4
 38019                                  		db 'PATH'
 38020                                  		db 2
 38021                                  		dw PATH
 38022                                  		db 4
 38023                                  		db 'EXIT'
 38024                                  		db 0
 38025                                  		dw _$EXIT
 38026                                  		db 4
 38027                                  		db 'CTTY'
 38028                                  		db 3
 38029                                  		dw CTTY
 38030                                  		db 4
 38031                                  		db 'ECHO'
 38032                                  		db 2
 38033                                  		dw _ECHO
 38034                                  		db 4
 38035                                  		db 'GOTO'
 38036                                  		db 2
 38037                                  		dw _GOTO
 38038                                  		db 5
 38039                                  		db 'SHIFT'
 38040                                  		db 2
 38041                                  		dw _SHIFT
 38042                                  		db 2
 38043                                  		db 'IF'
 38044                                  		db 2
 38045                                  		dw _$IF
 38046                                  		db 3
 38047                                  		db 'FOR'
 38048                                  		db 2
 38049                                  		dw _$FOR
 38050                                  		db 3
 38051                                  		db 'CLS'
 38052                                  		db 0
 38053                                  		dw CLS
 38054                                  		db 0
 38055                                  
 38056                                  CAPITAL_A:	db 'A'
 38057                                  VBAR:		db '|'
 38058                                  LABRACKET:	db '<' ; 3Ch
 38059                                  RABRACKET:	db '>' ; 3Eh
 38060                                  DOLLAR:		db '$'
 38061                                  LPAREN:		db '('
 38062                                  RPAREN:		db ')'
 38063                                  NULLRPAREN:	db ')' ; 29h
 38064                                  		db 0
 38065                                  IN_WORD:	db 'I','N'
 38066                                  DO_WORD	:	db 'D','O'
 38067                                  STAR:		db '*'
 38068                                  CHAR_SUB:	db '-' 
 38069                                  PLUS_CHR:	db '+'
 38070                                  CHAR_L:		db 'L'
 38071                                  char_l:		db 'l'
 38072                                  small_a:	db 'a'
 38073                                  small_z:	db 'z'
 38074                                  CHAR_D:		db 'D'
 38075                                  CHAR_C:		db 'C'
 38076                                  CHAR_S:		db 'S'
 38077                                  CHAR_X:		db 'X'
 38078                                  DOT_CHR:	db '.' 
 38079                                  DOT_QMARK:	dw '?.'  ; dw 2E3Fh
 38080                                  		db ','
 38081                                  TIMECHARS:	dw ':.'  ; dw 2E3Ah 	 
 38082                                  MNCHR:		db 'p'
 38083                                  SYSTEM_CPAGE:	db 0
 38084                                  		db 0
 38085                                  
 38086                                  COMEXT:		db '.COM'
 38087                                  EXEEXT:		db '.EXE'
 38088                                  BATEXT:		db '.BAT'
 38089                                  SWITCH_LIST:	db 'VBAPW'
 38090                                  BATBUFLEN:	dw BATLEN ; 32
 38091                                  
 38092                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3F44h
 38093                                  
 38094                                  TRANDATAEND:
 38095                                  
 38096                                  %endif
 38097                                  
 38098                                  ;============================================================================
 38099                                  ; TDATA.ASM, MSDOS 6.0, 1991
 38100                                  ;============================================================================
 38101                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38102                                  
 38103                                  	; 15/04/2023
 38104 000081A6 00                      	db	0
 38105 000081A7 90                      align 2
 38106                                  
 38107                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:849Eh
 38108                                  ; ---------------------------------------------------------------------------
 38109 000081A8 00                      	db 0
 38110                                  ; Lists of help message numbers for internal commands and /?
 38111                                  
 38112                                  ;;NoHelpMsgs:
 38113 000081A9 B0040000                	dw	1200,0		;M014
 38114                                  BreakHelpMsgs:
 38115 000081AD 14050000                	dw	1300,0
 38116                                  ChcpHelpMsgs:
 38117 000081B1 280529050000            	dw	1320,1321,0
 38118                                  CdHelpMsgs:
 38119 000081B7 3C053D053E050000        	dw	1340,1341,1342,0
 38120                                  ClsHelpMsgs:
 38121 000081BF 50050000                	dw	1360,0
 38122                                  CopyHelpMsgs:
 38123 000081C3 780579057A057B057C-     	dw	1400,1401,1402,1403,1404,0
 38123 000081CC 050000             
 38124                                  CttyHelpMsgs:
 38125 000081CF 8C050000                	dw	1420,0
 38126                                  DateHelpMsgs:
 38127 000081D3 A005A1050000            	dw	1440,1441,0
 38128                                  DelHelpMsgs:
 38129 000081D9 B405B505B6050000        	dw	1460,1461,1462,0
 38130                                  DirHelpMsgs:
 38131 000081E1 C805C905CA05CB05CC-     	dw	1480,1481,1482,1483,1484,1485,1486,1487,1488
 38131 000081EA 05CD05CE05CF05D005 
 38132                                  	; MSDOS 6.0 COMMAND.COM
 38133                                  	;dw	1489,1490,1491,1492
 38134 000081F3 0000                    	dw	0
 38135                                  ExitHelpMsgs:
 38136 000081F5 DC050000                	dw	1500,0
 38137                                  MdHelpMsgs:
 38138 000081F9 F0050000                	dw	1520,0
 38139                                  PathHelpMsgs:
 38140 000081FD 0406050606060000        	dw	1540,1541,1542,0
 38141                                  PromptHelpMsgs:
 38142 00008205 180619061A061B061C-     	dw	1560,1561,1562,1563,1564,1565,1566,1567,1568,0
 38142 0000820E 061D061E061F062006-
 38142 00008217 0000               
 38143                                  RdHelpMsgs:
 38144 00008219 2C060000                	dw	1580,0
 38145                                  RenHelpMsgs:
 38146 0000821D 4006410642060000        	dw	1600,1601,1602,0
 38147                                  SetHelpMsgs:
 38148 00008225 5406550656060000        	dw	1620,1621,1622,0
 38149                                  TimeHelpMsgs:
 38150 0000822D 680669060000            	dw	1640,1641,0
 38151                                  TypeHelpMsgs:
 38152 00008233 7C060000                	dw	1660,0
 38153                                  VerHelpMsgs:
 38154 00008237 90060000                	dw	1680,0
 38155                                  VerifyHelpMsgs:
 38156 0000823B A4060000                	dw	1700,0
 38157                                  VolHelpMsgs:
 38158 0000823F B8060000                	dw	1720,0
 38159                                  CallHelpMsgs:
 38160 00008243 CC06CD060000            	dw	1740,1741,0	;M014
 38161                                  RemHelpMsgs:
 38162 00008249 E0060000                	dw	1760,0		;M014
 38163                                  PauseHelpMsgs:
 38164 0000824D F4060000                	dw	1780,0		;M014
 38165                                  EchoHelpMsgs:
 38166 00008251 080709070000            	dw	1800,1801,0	;M014
 38167                                  GotoHelpMsgs:
 38168 00008257 1C071D070000            	dw	1820,1821,0	;M014
 38169                                  ShiftHelpMsgs:
 38170 0000825D 30070000                	dw	1840,0		;M014
 38171                                  IfHelpMsgs:
 38172 00008261 440745074607470748-     	dw	1860,1861,1862,1863,1864,1865,1866,0	;M014
 38172 0000826A 0749074A070000     
 38173                                  ForHelpMsgs:
 38174 00008271 580759075A075B0700-     	dw	1880,1881,1882,1883,0 ;M014
 38174 0000827A 00                 
 38175                                  TruenameHelpMsgs:
 38176 0000827B 6C070000                	 dw	1900,0		;M014
 38177                                  LoadhighHelpMsgs:
 38178 0000827F 800781078207            	dw	1920,1921,1922
 38179                                  	; MSDOS 6.0 COMMAND.COM
 38180                                  	;dw	1923,1924,1925,1926,1927 ;M014
 38181 00008285 0000                    	dw	0
 38182                                  
 38183                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8578h
 38184                                  CLSSTRING:
 38185 00008287 041B5B324A              	db	4,01Bh,"[2J"		; ANSI Clear screen
 38186                                  
 38187                                  PROMPT_TABLE:
 38188 0000828C 42                      	db	"B"
 38189 0000828D [FD1D]                  	dw	Print_B
 38190 0000828F 44                      	db	"D"
 38191 00008290 [CA36]                  	dw	PRINT_DATE
 38192 00008292 45                      	db	"E"
 38193 00008293 [F11D]                  	dw	PRINT_ESC
 38194 00008295 47                      	db	"G"
 38195 00008296 [F51D]                  	dw	PRINT_G
 38196 00008298 48                      	db	"H"
 38197 00008299 [E71D]                  	dw	PRINT_BACK
 38198 0000829B 4C                      	db	"L"
 38199 0000829C [F91D]                  	dw	PRINT_L
 38200 0000829E 4E                      	db	"N"
 38201 0000829F [0E1E]                  	dw	PRINT_DRIVE
 38202 000082A1 50                      	db	"P"
 38203 000082A2 [161E]                  	dw	build_dir_for_prompt
 38204 000082A4 51                      	db	"Q"
 38205 000082A5 [ED1D]                  	dw	PRINT_EQ
 38206 000082A7 54                      	db	"T"
 38207 000082A8 [842F]                  	dw	PRINT_TIME
 38208 000082AA 56                      	db	"V"
 38209 000082AB [7D1D]                  	dw	PRINT_VERSION
 38210 000082AD 5F                      	db	"_"
 38211 000082AE [D325]                  	dw	CRLF2
 38212 000082B0 24                      	db	"$"
 38213 000082B1 [FF1D]                  	dw	PRINT_CHAR
 38214 000082B3 00                      	db	0			; NUL TERMINATED
 38215                                  
 38216                                  ; Table of IF conditionals
 38217                                  IFTAB:
 38218 000082B4 034E4F54                	db	3,"NOT"			; First byte is count
 38219 000082B8 [E00A]                  	dw	IFNOT
 38220 000082BA 0A4552524F524C4556-     	db	10,"ERRORLEVEL"
 38220 000082C3 454C               
 38221 000082C5 [9F0B]                  	dw	IFERLEV
 38222 000082C7 054558495354            	db	5,"EXIST"
 38223 000082CD [340B]                  	dw	IFEXISTS
 38224 000082CF 00                      	db	0
 38225                                  
 38226                                  ; Table for internal command names
 38227                                  COMTAB:
 38228 000082D0 0344495203              	db	3,"DIR",fSwitchAllowed+fCheckDrive ; 3
 38229 000082D5 [6410]                  	dw	CATALOG			; In TCMD1.ASM
 38230 000082D7 [E181]                  	dw	DirHelpMsgs
 38231                                  
 38232 000082D9 0443414C4C02            	db	4,"CALL",fSwitchAllowed	; 2
 38233 000082DF [140C]                  	dw	_$CALL			; In TBATCH2.ASM
 38234 000082E1 [4382]                  	dw	CallHelpMsgs
 38235                                  
 38236 000082E3 044348435002            	db	4,"CHCP",fSwitchAllowed ; 2
 38237 000082E9 [5920]                  	dw	CHCP			; In TCMD2B.ASM
 38238 000082EB [B181]                  	dw	ChcpHelpMsgs
 38239                                  
 38240 000082ED 0652454E414D4503        	db	6,"RENAME",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 38241 000082F5 [431A]                  	dw	CRENAME			; In TCMD1.ASM
 38242 000082F7 [1D82]                  	dw	RenHelpMsgs
 38243                                  
 38244 000082F9 0352454E03              	db	3,"REN",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 38245 000082FE [431A]                  	dw	CRENAME			; In TCMD1.ASM
 38246 00008300 [1D82]                  	dw	RenHelpMsgs
 38247                                  	
 38248 00008302 05455241534503          	db	5,"ERASE",fSwitchAllowed+fCheckDrive	; 3
 38249 00008309 [C119]                  	dw	ERASE			; In TCMD1.ASM
 38250 0000830B [D981]                  	dw	DelHelpMsgs
 38251                                  	
 38252 0000830D 0344454C03              	db	3,"DEL",fSwitchAllowed+fCheckDrive	; 3
 38253 00008312 [C119]                  	dw	ERASE			; In TCMD1.ASM
 38254 00008314 [D981]                  	dw	DelHelpMsgs
 38255                                  	
 38256 00008316 045459504503            	db	4,"TYPE",fSwitchAllowed+fCheckDrive	; 3 ;AC018; P3903
 38257 0000831C [EA1A]                  	dw	TYPEFIL			; In TCMD1.ASM
 38258 0000831E [3382]                  	dw	TypeHelpMsgs
 38259                                  	
 38260 00008320 0352454D06              	db	3,"REM",fSwitchAllowed+fLimitHelp	; 6
 38261 00008325 [0401]                  	dw	TCOMMAND		; In TCODE.ASM
 38262 00008327 [4982]                  	dw	RemHelpMsgs
 38263                                  	
 38264 00008329 04434F505903            	db	4,"COPY",fSwitchAllowed+fCheckDrive	; 3
 38265 0000832F [1737]                  	dw	COPY			; In COPY.ASM
 38266 00008331 [C381]                  	dw	CopyHelpMsgs
 38267                                  	
 38268 00008333 05504155534506          	db	5,"PAUSE",fSwitchAllowed+fLimitHelp	; 6
 38269 0000833A [B519]                  	dw	PAUSE			; In TCMD1.ASM
 38270 0000833C [4D82]                  	dw	PauseHelpMsgs
 38271                                  	
 38272 0000833E 044441544502            	db	4,"DATE",fSwitchAllowed	; 2
 38273 00008344 [972E]                  	dw	DATE			; In TPIPE.ASM
 38274 00008346 [D381]                  	dw	DateHelpMsgs
 38275                                  	
 38276 00008348 0454494D4502            	db	4,"TIME",fSwitchAllowed ; 2		;AC018; P3903
 38277 0000834E [F62E]                  	dw	CTIME			; In TPIPE.ASM
 38278 00008350 [2D82]                  	dw	TimeHelpMsgs
 38279                                  	
 38280 00008352 0356455202              	db	3,"VER",fSwitchAllowed ; 2
 38281 00008357 [091D]                  	dw	VERSION			; In TCMD2.ASM
 38282 00008359 [3782]                  	dw	VerHelpMsgs
 38283                                  	
 38284 0000835B 03564F4C03              	db	3,"VOL",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 38285 00008360 [111C]                  	dw	VOLUME			; In TCMD1.ASM
 38286 00008362 [3F82]                  	dw	VolHelpMsgs
 38287                                  	
 38288 00008364 02434403                	db	2,"CD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 38289 00008368 [9C24]                  	dw	_$CHDIR			; In TENV.ASM
 38290 0000836A [B781]                  	dw	CdHelpMsgs
 38291                                  	
 38292 0000836C 05434844495203          	db	5,"CHDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 38293 00008373 [9C24]                  	dw	_$CHDIR			; In TENV.ASM
 38294 00008375 [B781]                  	dw	CdHelpMsgs
 38295                                  	
 38296 00008377 024D4403                	db	2,"MD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 38297 0000837B [0125]                  	dw	_$MKDIR			; In TENV.ASM
 38298 0000837D [F981]                  	dw	MdHelpMsgs
 38299                                  	
 38300 0000837F 054D4B44495203          	db	5,"MKDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 38301 00008386 [0125]                  	dw	_$MKDIR			; In TENV.ASM
 38302 00008388 [F981]                  	dw	MdHelpMsgs
 38303                                  	
 38304 0000838A 02524403                	db	2,"RD",fSwitchAllowed+fCheckDrive ; 3	;AC018; P3903
 38305 0000838E [4325]                  	dw	_$RMDIR			; In TENV.ASM
 38306 00008390 [1982]                  	dw	RdHelpMsgs
 38307                                  	
 38308 00008392 05524D44495203          	db	5,"RMDIR",fSwitchAllowed+fCheckDrive	;AC018; P3903
 38309 00008399 [4325]                  	dw	_$RMDIR			; In TENV.ASM
 38310 0000839B [1982]                  	dw	RdHelpMsgs
 38311                                  	
 38312 0000839D 05425245414B02          	db	5,"BREAK",fSwitchAllowed ; 2		;AC018; P3903
 38313 000083A4 [1436]                  	dw	CNTRLC			; In TUCODE.ASM
 38314 000083A6 [AD81]                  	dw	BreakHelpMsgs
 38315                                  	
 38316 000083A8 0656455249465902        	db	6,"VERIFY",fSwitchAllowed ; 2		;AC018; P3903
 38317 000083B0 [5636]                  	dw	VERIFY			; In TUCODE.ASM
 38318 000083B2 [3B82]                  	dw	VerifyHelpMsgs
 38319                                  	
 38320 000083B4 0353455406              	db	3,"SET",fSwitchAllowed+fLimitHelp ; 6
 38321 000083B9 [0622]                  	dw	ADD_NAME_TO_ENVIRONMENT	; In TENV.ASM
 38322 000083BB [2582]                  	dw	SetHelpMsgs
 38323                                  	
 38324 000083BD 0650524F4D505406        	db	6,"PROMPT",fSwitchAllowed+fLimitHelp ; 6
 38325 000083C5 [EC21]                  	dw	ADD_PROMPT		; In TENV.ASM
 38326 000083C7 [0582]                  	dw	PromptHelpMsgs
 38327                                  	
 38328 000083C9 045041544802            	db	4,"PATH",fSwitchAllowed ; 2
 38329 000083CF [7D1E]                  	dw	PATH			; In TCMD2.ASM
 38330 000083D1 [FD81]                  	dw	PathHelpMsgs
 38331                                  	
 38332 000083D3 044558495400            	db	4,"EXIT",0
 38333 000083D9 [4E21]                  	dw	_$EXIT			; In TCMD2.ASM
 38334 000083DB [F581]                  	dw	ExitHelpMsgs
 38335                                  	
 38336 000083DD 044354545903            	db	4,"CTTY",fCheckDrive+fSwitchAllowed ; 3
 38337 000083E3 [BB1F]                  	dw	CTTY			; In TCMD2.ASM
 38338 000083E5 [CF81]                  	dw	CttyHelpMsgs
 38339                                  	
 38340 000083E7 044543484F06            	db	4,"ECHO",fSwitchAllowed+fLimitHelp ; 6
 38341 000083ED [DB35]                  	dw	_ECHO			; In TUCODE.ASM
 38342 000083EF [5182]                  	dw	EchoHelpMsgs
 38343                                  	
 38344 000083F1 04474F544F06            	db	4,"GOTO",fSwitchAllowed+fLimitHelp
 38345 000083F7 [480C]                  	dw	_GOTO			; In TBATCH.ASM
 38346 000083F9 [5782]                  	dw	GotoHelpMsgs
 38347                                  	
 38348 000083FB 05534849465402          	db	5,"SHIFT",fSwitchAllowed ; 2
 38349 00008402 [CD0B]                  	dw	_SHIFT			; In TBATCH.ASM
 38350 00008404 [5D82]                  	dw	ShiftHelpMsgs
 38351                                  	
 38352 00008406 02494606                	db	2,"IF",fSwitchAllowed+fLimitHelp ; 6
 38353 0000840A [790A]                  	dw	_$IF			; In TBATCH.ASM
 38354 0000840C [6182]                  	dw	IfHelpMsgs
 38355                                  	
 38356 0000840E 03464F5206              	db	3,"FOR",fSwitchAllowed+fLimitHelp ; 6
 38357 00008413 [FD0E]                  	dw	_$FOR			; In TBATCH.ASM
 38358 00008415 [7182]                  	dw	ForHelpMsgs
 38359                                  	
 38360 00008417 03434C5300              	db	3,"CLS",0
 38361 0000841C [221F]                  	dw	CLS			; In TCMD2.ASM
 38362 0000841E [BF81]                  	dw	ClsHelpMsgs
 38363                                  	
 38364 00008420 08545255454E414D45-     	db	8,"TRUENAME",fSwitchAllowed+fCheckDrive	;AN000; P3903 changed
 38364 00008429 03                 
 38365 0000842A [D720]                  	dw	TRUENAME		;AN000;
 38366 0000842C [7B82]                  	dw	TruenameHelpMsgs
 38367                                  	
 38368 0000842E 084C4F414448494748-     	db	8,"LOADHIGH",fSwitchAllowed ; 2	; M003
 38368 00008437 02                 
 38369 00008438 [4856]                  	dw	LoadHigh		; In loadhi.asm ; M003
 38370 0000843A [7F82]                  	dw	LoadhighHelpMsgs	; M003
 38371                                  	
 38372 0000843C 024C4802                	db	2,"LH",fSwitchAllowed ; 2	; Short form; M003
 38373 00008440 [4856]                  	dw	LoadHigh		; In loadhi.asm ; M003
 38374 00008442 [7F82]                  	dw	LoadhighHelpMsgs	; M003
 38375                                  	
 38376 00008444 00                      	db	0			; Terminate command table
 38377                                  
 38378                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8736h
 38379                                  
 38380 00008445 2E434F4D                comext:	db	".COM"
 38381 00008449 2E455845                exeext:	db	".EXE"
 38382 0000844D 2E424154                batext:	db	".BAT"
 38383                                  
 38384                                  switch_list:
 38385 00008451 3F5642415057            	db	"?VBAPW"		; flags we can recognize
 38386                                  
 38387                                  AttrLtrs:
 38388 00008457 524853764441            	db	"RHSvDA"		; attribute letters for DIR
 38389                                  
 38390                                  ;	Attribute letters in AttrLtrs must appear in the order that
 38391                                  ;	attribute bits occur in the attribute byte returned by
 38392                                  ;	directory searches, starting with bit 0.
 38393                                  ;	The volume label attribute is lowercased to keep it from
 38394                                  ;	being matched (by an uppercase comparison).
 38395                                  
 38396                                  OrderLtrs:
 38397 0000845D 4E45445347              	db	"NEDSG"			; sort order letters for DIR
 38398                                  	; MSDOS 6.0 COMMAND.COM
 38399                                  	;db	"NEDSGC"		; sort order letters for DIR
 38400                                  
 38401                                  ;	Sort order letters stand for file name, extension,
 38402                                  ;	date/time, size, grouped (directory files before others),
 38403                                  ;	and compression ratio. DIR routines rely on the specific
 38404                                  ;	order of the letters in this list.
 38405                                  
 38406                                  comspec_flag:
 38407 00008462 00                      	db	0                       ;AN071;
 38408                                  
 38409                                  BATBUFLEN:
 38410 00008463 2000                    	dw	BatLen ; 32
 38411                                  
 38412                                  ; *****************************************************
 38413                                  ; EMG 4.00
 38414                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 38415                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 38416                                  ; *****************************************************
 38417                                  
 38418                                  ; COMMON PARSE BLOCKS
 38419                                  
 38420                                  ; Indicates no value list for PARSE.
 38421                                  
 38422                                  NO_VALUES:
 38423 00008465 0000                    	dw	0			;AN000;  no values
 38424                                  
 38425                                  NULL_VALUE_LIST:  ; for unvalidated value
 38426 00008467 00                       	db	0                       ; no value lists
 38427                                  
 38428                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38429                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8759h
 38430                                  
 38431                                  ; PARSE control block for a required file specification (upper cased)
 38432                                  
 38433                                  FILE_REQUIRED:
 38434 00008468 0002                    	dw	0200h			;AN000;  filespec - required
 38435 0000846A 0100                    	dw	1			;AN000;  capitalize - file table
 38436 0000846C [F495]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38437 0000846E [6584]                  	dw	NO_VALUES		;AN000;
 38438 00008470 00                      	db	0			;AN000;  no keywords
 38439                                  
 38440                                  ; PARSE control block for an optional file specification (upper cased)
 38441                                  ; or drive number
 38442                                  
 38443                                  FILE_OPTIONAL:
 38444 00008471 0103                    	dw	0301h			;AN000;  filespec or drive number
 38445                                  					;	 optional
 38446 00008473 0100                    	dw	1			;AN000;  capitalize - file table
 38447 00008475 [F495]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38448 00008477 [6584]                  	dw	NO_VALUES		;AN000;
 38449 00008479 00                      	db	0			;AN000;  no keywords
 38450                                  
 38451                                  ; PARSE control block for an optional file specification (upper cased)
 38452                                  
 38453                                  FILE_OPTIONAL2:
 38454 0000847A 0102                    	dw	0201h                   ;AN000;  filespec optional
 38455 0000847C 0100                    	dw	1                       ;AN000;  capitalize - file table
 38456 0000847E [F495]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38457 00008480 [6584]                  	dw	NO_VALUES		;AN000;
 38458 00008482 00                      	db	0			;AN000;  no keywords
 38459                                  
 38460                                  ; PARSE control block for an optional /P switch
 38461                                  
 38462                                  SLASH_P_SWITCH:
 38463 00008483 0000                    	dw	0			;AN000;  no match flags
 38464 00008485 0200                    	dw	2			;AN000;  capitalize - char table
 38465 00008487 [F495]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38466 00008489 [6584]                  	dw	NO_VALUES		;AN000;
 38467 0000848B 01                      	db	1			;AN000;  1 keyword
 38468                                  SLASH_P_SYN:
 38469 0000848C 2F5000                  	db	"/P",0                  ;AN000;  /P switch
 38470                                  
 38471                                  ; PARSE BLOCK FOR BREAK, VERIFY, ECHO
 38472                                  
 38473                                  ; The following parse control block can be used for any command which
 38474                                  ; needs only the optional "ON" and "OFF" keywords as operands. Allows
 38475                                  ; the equal sign as an additional delimiter. Returns verified result
 38476                                  ; in PARSE1_OUTPUT. Currently used for the BREAK, VERIFY, and ECHO
 38477                                  ; internal commands.
 38478                                  
 38479                                  PARSE_BREAK:
 38480 0000848F [9284]                  	dw	BREAK_PARMS		;AN000;
 38481 00008491 00                      	db	0			;AN032; no extra delimiter
 38482                                  
 38483                                  BREAK_PARMS:
 38484 00008492 0001                    	db	0,1			;AN000;  1 positional parm
 38485 00008494 [9884]                  	dw	BREAK_CONTROL1		;AN000;
 38486 00008496 00                      	db	0			;AN000;  no switches
 38487 00008497 00                      	db	0			;AN000;  no keywords
 38488                                  
 38489                                  BREAK_CONTROL1:
 38490 00008498 0120                    	dw	2001h			;AN000;  string value - optional
 38491 0000849A 0200                    	dw	2			;AN000;  capitalize - char table
 38492 0000849C [F495]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38493 0000849E [A184]                  	dw	BREAK_VALUES		;AN000;
 38494 000084A0 00                      	db	0			;AN000;  no keywords
 38495                                  
 38496                                  BREAK_VALUES:
 38497 000084A1 03                      	db	3			;AN000;
 38498 000084A2 00                      	db	0			;AN000;  no ranges
 38499 000084A3 00                      	db	0			;AN000;  no numeric values
 38500 000084A4 02                      	db	2			;AN000;  2 string values
 38501 000084A5 00                      	db	0			;AN000;  returned if ON
 38502 000084A6 [AB84]                  	dw	BREAK_ON		;AN000;  point to ON string
 38503 000084A8 66                      	db	'f'                     ;AN000;  returned if OFF
 38504 000084A9 [AE84]                  	dw	BREAK_OFF		;AN000;  point to OFF string
 38505                                  
 38506                                  BREAK_ON:
 38507 000084AB 4F4E00                  	db	"ON",0                  ;AN000;
 38508                                  BREAK_OFF:
 38509 000084AE 4F464600                	db	"OFF",0                 ;AN000;
 38510                                  
 38511                                  	; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38512                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:87A3h
 38513                                  
 38514                                  ; PARSE BLOCK FOR CHCP
 38515                                  
 38516                                  ; The following parse control block can be used for any command which
 38517                                  ; needs only one optional three digit decimal parameter for operands.
 38518                                  ; Returns verified result in PARSE1_OUTPUT. Currently used for the
 38519                                  ; CHCP internal command.
 38520                                  
 38521                                  CHCP_MINVAL	EQU	100			;AN000;
 38522                                  CHCP_MAXVAL	EQU	999			;AN000;
 38523                                  
 38524                                  PARSE_CHCP:
 38525 000084B2 [B584]                  	dw	CHCP_PARMS			;AN000;
 38526 000084B4 00                      	db	0				;AN000;  no extra delimiter
 38527                                  CHCP_PARMS:
 38528 000084B5 0001                    	db	0,1				;AN000;  1 positional parm
 38529 000084B7 [BB84]                  	dw	CHCP_CONTROL1			;AN000;
 38530 000084B9 00                      	db	0				;AN000;  no switches
 38531 000084BA 00                      	db	0				;AN000;  no keywords
 38532                                  
 38533                                  CHCP_CONTROL1:
 38534 000084BB 0180                    	dw	8001h				;AN000;  numeric value - optional
 38535 000084BD 0000                    	dw	0				;AN000;  no function flags
 38536 000084BF [F495]                  	dw	PARSE1_OUTPUT			;AN000;  result buffer
 38537 000084C1 [C484]                  	dw	CHCP_VALUES			;AN000;
 38538 000084C3 00                      	db	0				;AN000;  no keywords
 38539                                  
 38540                                  CHCP_VALUES:
 38541 000084C4 01                      	db	1				;AN000;
 38542 000084C5 01                      	db	1				;AN000;  1 range
 38543 000084C6 01                      	db	1				;AN000;  returned if result
 38544 000084C7 64000000E7030000        	dd	CHCP_MINVAL,CHCP_MAXVAL		;AN000;  minimum & maximum value
 38545 000084CF 00                      	db	0				;AN000;  no numeric values
 38546 000084D0 00                      	db	0				;AN000;  no string values
 38547                                  
 38548                                  ; PARSE BLOCK FOR DATE
 38549                                  
 38550                                  ; The following parse control block can be used for any command which
 38551                                  ; needs only an optional date string as an operand. Returns unverified
 38552                                  ; result in DATE_OUTPUT. Currently used for the DATE internal command.
 38553                                  
 38554                                  PARSE_DATE:
 38555 000084D1 [D484]                  	dw	DATE_PARMS			;AN000;
 38556 000084D3 00                      	db	0				;AN000;  no extra delimiter
 38557                                  DATE_PARMS:
 38558 000084D4 0001                    	db	0,1				;AN000;  1 positional parm
 38559 000084D6 [DA84]                  	dw	DATE_CONTROL1			;AN000;
 38560 000084D8 00                      	db	0				;AN000;  no switches
 38561 000084D9 00                      	db	0				;AN000;  no keywords
 38562                                  
 38563                                  DATE_CONTROL1:
 38564 000084DA 0110                    	dw	1001h				;AN000;  date - optional
 38565 000084DC 0000                    	dw	0				;AN000;  no function flags
 38566 000084DE [FC95]                  	dw	DATE_OUTPUT			;AN000;  result buffer
 38567 000084E0 [6584]                  	dw	NO_VALUES			;AN000;
 38568 000084E2 00                      	db	0				;AN000;  no keywords
 38569                                  
 38570                                  ; PARSE BLOCK FOR TIME
 38571                                  
 38572                                  ; The following parse control block can be used for any command which
 38573                                  ; needs only an optional time string as an operand. Returns unverified
 38574                                  ; result in TIME_OUTPUT. Currently used for the TIME internal command.
 38575                                  
 38576                                  PARSE_TIME:
 38577 000084E3 [E684]                  	dw	TIME_PARMS			;AN000;
 38578 000084E5 00                      	db	0				;AN000;  no extra delimiter
 38579                                  TIME_PARMS:
 38580 000084E6 0001                    	db	0,1				;AN000;  1 positional parm
 38581 000084E8 [EC84]                  	dw	TIME_CONTROL1			;AN000;
 38582 000084EA 00                      	db	0				;AN000;  no switches
 38583 000084EB 00                      	db	0				;AN000;  no keywords
 38584                                  
 38585                                  TIME_CONTROL1:
 38586 000084EC 0108                    	dw	0801h				;AN000;  TIME - optional
 38587 000084EE 0000                    	dw	0				;AN000;  no function flags
 38588 000084F0 [0496]                  	dw	TIME_OUTPUT			;AN000;  result buffer
 38589 000084F2 [6584]                  	dw	NO_VALUES			;AN000;
 38590 000084F4 00                      	db	0				;AN000;  no keywords
 38591                                  
 38592                                  ; PARSE BLOCK FOR VOL
 38593                                  
 38594                                  ; The following parse control block can be used for any command which
 38595                                  ; needs only an optional drive letter as an operand.  Returns unverified
 38596                                  ; drive number (one based) in DRIVE_OUTPUT. Currently used for the VOL
 38597                                  ; internal command.
 38598                                  
 38599                                  PARSE_VOL:
 38600 000084F5 [F884]                  	dw	VOL_PARMS			;AN000;
 38601 000084F7 00                      	db	0				;AN000;  no extra delimiter
 38602                                  VOL_PARMS:
 38603 000084F8 0001                    	db	0,1				;AN000;  1 positional parm
 38604 000084FA [FE84]                  	dw	DRIVE_CONTROL1			;AN000;
 38605 000084FC 00                      	db	0				;AN000;  no switches
 38606 000084FD 00                      	db	0				;AN000;  no keywords
 38607                                  
 38608                                  DRIVE_CONTROL1:
 38609 000084FE 0101                    	dw	0101h				;AN000;  DRIVE - optional
 38610 00008500 0100                    	dw	1				;AN000;  capitalize - file table
 38611 00008502 [0C96]                  	dw	DRIVE_OUTPUT			;AN000;  result buffer
 38612 00008504 [6584]                  	dw	NO_VALUES			;AN000;
 38613 00008506 00                      	db	0				;AN000;  no keywords
 38614                                  
 38615                                  ; PARSE BLOCK FOR MKDIR, RMDIR, TYPE
 38616                                  
 38617                                  ; The following parse control block can be used for any command which
 38618                                  ; needs only one required file specification as an operand. Returns a
 38619                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 38620                                  ; for the MKDIR, RMDIR, and TYPE internal commands.
 38621                                  
 38622                                  PARSE_MRDIR:
 38623 00008507 [0A85]                  	dw	MRDIR_PARMS			;AN000;
 38624 00008509 00                      	db	0				;AN000;  no extra delimiter
 38625                                  MRDIR_PARMS:
 38626 0000850A 0101                    	db	1,1				;AN000;  1 positional parm
 38627 0000850C [6884]                  	dw	FILE_REQUIRED			;AN000;
 38628 0000850E 00                      	db	0				;AN000;  no switches
 38629 0000850F 00                      	db	0				;AN000;  no keywords
 38630                                  
 38631                                  ; PARSE BLOCK FOR CHDIR, TRUENAME
 38632                                  
 38633                                  ; The following parse control block can be used for any command which
 38634                                  ; needs only one optional file specification an operand. Returns a
 38635                                  ; pointer to the unverified string in PARSE1_OUTPUT. Currently used
 38636                                  ; for the CHDIR and TRUENAME internal commands.
 38637                                  
 38638                                  PARSE_CHDIR:
 38639 00008510 [1385]                  	dw	CHDIR_PARMS			;AN000;
 38640 00008512 00                      	db	0				;AN000;  no extra delimiter
 38641                                  CHDIR_PARMS:
 38642 00008513 0001                    	db	0,1				;AN000;  1 positional parm
 38643 00008515 [7184]                  	dw	FILE_OPTIONAL			;AN000;
 38644 00008517 00                      	db	0				;AN000;  no switches
 38645 00008518 00                      	db	0				;AN000;  no keywords
 38646                                  
 38647                                  ; PARSE BLOCK FOR ERASE
 38648                                  
 38649                                  ; The following parse control block is used for the DEL/ERASE internal
 38650                                  ; commands. This command has one required file specification and an
 38651                                  ; optional switch (/p) as operands. The verified switch or unverified
 38652                                  ; file specification is returned in PARSE1_OUTPUT.
 38653                                  
 38654                                  PARSE_ERASE:
 38655 00008519 [1C85]                  	dw	ERASE_PARMS			;AN000;
 38656 0000851B 00                      	db	0				;AN000;  no extra delimiter
 38657                                  
 38658                                  ERASE_PARMS:
 38659 0000851C 0101                    	db	1,1				;AN000;  1 positional parm
 38660 0000851E [6884]                  	dw	FILE_REQUIRED			;AN000;
 38661 00008520 01                      	db	1				;AN000;  1 switch
 38662 00008521 [8384]                  	dw	SLASH_P_SWITCH			;AN000;
 38663 00008523 00                      	db	0				;AN000;  no keywords
 38664                                  
 38665                                  ; PARSE BLOCK FOR DIR
 38666                                  
 38667                                  ; The following parse control block is used for the DIR internal command.
 38668                                  ; This command has one optional file specification and several optional
 38669                                  ; switches. Switches, switch values, and the filespec are returned in 
 38670                                  ; PARSE1_OUTPUT.
 38671                                  ;
 38672                                  ; Switches are /a[value], /-a, /o[value], /-o, /s, /-s, /?, /b, /-b,
 38673                                  ; /w, /-w, /p, and /-p. The string values for /a and /o are optional,
 38674                                  ; do not require colons, and are not checked against a value list.
 38675                                  ;
 38676                                  ; Switch /h has been removed from the DIR command	;M008
 38677                                  ; Switch /? is no longer handled internally		;M008
 38678                                  ;
 38679                                  ; A list of pointers to all the switch synonyms is provided here to
 38680                                  ; help identify which switch has been matched.
 38681                                  
 38682                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 38683                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8815h
 38684                                  
 38685                                  PARSE_DIR:
 38686 00008524 [2785]                  	dw	DIR_PARMS
 38687 00008526 00                      	db	0			; no extra delimiters
 38688                                  DIR_PARMS:
 38689 00008527 0001                    	db	0,1			; 1 optional positional param
 38690 00008529 [7A84]                  	dw	FILE_OPTIONAL2
 38691 0000852B 02                      	db	2			; 2 kinds of switches
 38692 0000852C [3185]                  	dw	DIR_SW_VALUED
 38693 0000852E [4085]                  	dw	DIR_SW_UNVALUED
 38694 00008530 00                      	db	0			; no keywords
 38695                                  
 38696                                  DIR_SW_VALUED:
 38697 00008531 0120                    	dw	2001h			; optional string value
 38698 00008533 2100                    	dw	21h			; optional colon; capitalize 
 38699 00008535 [F495]                  	dw	PARSE1_OUTPUT		; result buffer
 38700 00008537 [6784]                  	dw	NULL_VALUE_LIST		; don't validate value
 38701                                  
 38702 00008539 02                      	db	2
 38703                                  
 38704                                  ; MSDOS 6.0 COMMAND.COM
 38705                                  ;ifdef DBLSPACE_HOOKS
 38706                                  ;	db	3		; 3 'synonyms'
 38707                                  ;else
 38708                                  ;	db	2		; 2 'synonyms'
 38709                                  ;endif
 38710                                  
 38711                                  DIR_SW_A:
 38712 0000853A 2F4100                  	db	"/A",0
 38713                                  DIR_SW_O:
 38714 0000853D 2F4F00                  	db	"/O",0
 38715                                  
 38716                                  ; MSDOS 6.0 COMMAND.COM
 38717                                  ;ifdef DBLSPACE_HOOKS
 38718                                  ;DIR_SW_C	db	"/C",0
 38719                                  ;endif
 38720                                  
 38721                                  DIR_SW_UNVALUED:
 38722 00008540 0000                    	dw	0			; no value
 38723 00008542 0000                    	dw	0			; no format functions
 38724 00008544 [F495]                  	dw	PARSE1_OUTPUT		; result buffer
 38725 00008546 [6584]                  	dw	NO_VALUES
 38726                                  
 38727                                  	; 15/04/2023 - Retro DOS v4.0 COMMAND.COM
 38728                                  	;db	12
 38729                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8839h
 38730 00008548 0E                      	db	14		; 14 'synonyms' !?
 38731                                  
 38732                                  ; MSDOS 6.0 COMMAND.COM
 38733                                  ;ifdef DBLSPACE_HOOKS
 38734                                  ;	db	13		; 13 'synonyms'
 38735                                  ;else
 38736                                  ;	db	12		; 12 'synonyms'
 38737                                  ;endif
 38738                                  
 38739                                  DIR_SW_NEG_A:
 38740 00008549 2F2D4100                	db	"/-A",0
 38741                                  DIR_SW_NEG_O:
 38742 0000854D 2F2D4F00                	db	"/-O",0
 38743                                  DIR_SW_S:
 38744 00008551 2F5300                  	db	"/S",0
 38745                                  DIR_SW_NEG_S:
 38746 00008554 2F2D5300                	db	"/-S",0
 38747                                  DIR_SW_B:
 38748 00008558 2F4200                  	db	"/B",0
 38749                                  DIR_SW_NEG_B:
 38750 0000855B 2F2D4200                	db	"/-B",0
 38751                                  DIR_SW_W:
 38752 0000855F 2F5700                  	db	"/W",0
 38753                                  DIR_SW_NEG_W:
 38754 00008562 2F2D5700                	db	"/-W",0
 38755                                  DIR_SW_P:
 38756 00008566 2F5000                  	db	"/P",0
 38757                                  DIR_SW_NEG_P:
 38758 00008569 2F2D5000                	db	"/-P",0
 38759                                  DIR_SW_L:
 38760 0000856D 2F4C00                  	db	"/L",0		;M010
 38761                                  DIR_SW_NEG_L:
 38762 00008570 2F2D4C00                	db	"/-L",0 	;M010
 38763                                  ; MSDOS 6.0 COMMAND.COM (DBLSPACE_HOOKS)
 38764                                  ;DIR_SW_NEG_C:
 38765                                  ;	db	"/-C",0
 38766                                  
 38767                                  ; Here's a list of pointers to DIR's switch synonyms, for easier
 38768                                  ; identification. Order is critical - DIR routines rely on the
 38769                                  ; specific order in this list. Negated options appear at odd 
 38770                                  ; positions in the list, and simple on/off options appear first.
 38771                                  
 38772                                  Dir_Sw_Ptrs:
 38773                                  	; MSDOS 5.0 COMMAND.COM
 38774 00008574 [6285]                  	dw	DIR_SW_NEG_W 
 38775                                  Dir_Sw_Ptrs_2:			; list of ptrs to switch synonyms
 38776                                  	; MSDOS 6.0 COMMAND.COM
 38777                                  	;dw	DIR_SW_NEG_C
 38778                                  	;dw	DIR_SW_C
 38779                                  	;dw	DIR_SW_NEG_W
 38780                                  	
 38781 00008576 [5F85]                  	dw	DIR_SW_W
 38782 00008578 [6985]                  	dw	DIR_SW_NEG_P
 38783 0000857A [6685]                  	dw	DIR_SW_P
 38784 0000857C [5485]                  	dw	DIR_SW_NEG_S
 38785 0000857E [5185]                  	dw	DIR_SW_S
 38786 00008580 [5B85]                  	dw	DIR_SW_NEG_B
 38787 00008582 [5885]                  	dw	DIR_SW_B
 38788 00008584 [7085]                  	dw	DIR_SW_NEG_L	;M010
 38789 00008586 [6D85]                  	dw	DIR_SW_L	;M010
 38790 00008588 [4D85]                  	dw	DIR_SW_NEG_O
 38791 0000858A [3D85]                  	dw	DIR_SW_O
 38792 0000858C [4985]                  	dw	DIR_SW_NEG_A
 38793 0000858E [3A85]                  	dw	DIR_SW_A
 38794                                  
 38795                                  ; PARSE BLOCK FOR RENAME
 38796                                  
 38797                                  ; The following parse control block can be used for any command which
 38798                                  ; needs only two required file specifications as operands. Returns
 38799                                  ; pointers to the unverified string in PARSE1_OUTPUT.
 38800                                  ; Currently used for the RENAME internal command.
 38801                                  
 38802                                  PARSE_RENAME:
 38803 00008590 [9385]                  	dw	RENAME_PARMS		;AN000;
 38804 00008592 00                      	db	0			;AN000;  no extra delimiter
 38805                                  RENAME_PARMS:
 38806 00008593 0202                    	db	2,2			;AN000;  2 positional parms
 38807 00008595 [6884]                  	dw	FILE_REQUIRED		;AN000;
 38808 00008597 [6884]                  	dw	FILE_REQUIRED		;AN000;
 38809 00008599 00                      	db	0			;AN000;  no switches
 38810 0000859A 00                      	db	0			;AN000;  no keywords
 38811                                  
 38812                                  ; PARSE BLOCK FOR CTTY
 38813                                  
 38814                                  ; The following parse control block can be used for any command which
 38815                                  ; needs one required device name as an operand. Returns a pointer to
 38816                                  ; unverified string in PARSE1_OUTPUT. Currently used for the CTTY
 38817                                  ; internal command.
 38818                                  
 38819                                  PARSE_CTTY:
 38820 0000859B [9E85]                  	dw	CTTY_PARMS		;AN000;
 38821 0000859D 00                      	db	0			;AN000;  no extra delimiter
 38822                                  CTTY_PARMS:
 38823 0000859E 0101                    	db	1,1			;AN000;  1 positional parm
 38824 000085A0 [A485]                  	dw	CTTY_CONTROL1		;AN000;
 38825 000085A2 00                      	db	0			;AN000;  no switches
 38826 000085A3 00                      	db	0			;AN000;  no keywords
 38827                                  CTTY_CONTROL1:
 38828 000085A4 0020                    	dw	2000h			;AN000;  string value - required
 38829 000085A6 1100                    	dw	11h			;AN000;  capitalize - file table
 38830                                  					;AN000;  remove colon at end
 38831 000085A8 [F495]                  	dw	PARSE1_OUTPUT		;AN000;  result buffer
 38832 000085AA [6584]                  	dw	NO_VALUES		;AN000;
 38833 000085AC 00                      	db	0			;AN000;  no keywords
 38834                                  
 38835                                  ; PARSE BLOCK FOR VER
 38836                                  
 38837                                  ; The following parse control block can be used for any command which
 38838                                  ; needs an optional switch "/debug". Currently used for the VER command.
 38839                                  
 38840                                  PARSE_VER:
 38841 000085AD [B085]                  	dw	VER_PARMS
 38842 000085AF 00                      	db	0			; no extra delimiters
 38843                                  VER_PARMS:
 38844 000085B0 0000                    	db	0,0			; no positional parameters
 38845                                  ; 20/07/2024 - Retro DOS v4.1 (&v4.0) COMMAND.COM
 38846                                  %if 0	; PCDOS 7.1 (& MSDOS 5.0-6.22) COMMAND.COM 
 38847                                  	db	1			; one switch
 38848                                  	dw	SLASH_R
 38849                                  %else
 38850                                  	; 20/07/2024 - Retro DOS v4-v5 COMMAND.COM
 38851 000085B2 02                      	db	2			; two switches
 38852 000085B3 [B885]                  	dw	SLASH_R
 38853 000085B5 [C485]                  	dw	SLASH_T ; Retro DOS v4-v5 COMMAND.COM switch
 38854                                  %endif
 38855 000085B7 00                      	db	0			; no keywords
 38856                                  SLASH_R:
 38857 000085B8 0000                    	dw	0			; no values
 38858 000085BA 0200                    	dw	2			; capitalize by filename table
 38859 000085BC [F495]                  	dw	PARSE1_OUTPUT		; result buffer
 38860 000085BE [6584]                  	dw	NO_VALUES		; no values
 38861 000085C0 01                      	db	1			; one synonym
 38862                                  SLASH_R_SYN:
 38863 000085C1 2F5200                  	db	"/R",0
 38864                                  
 38865                                  ; 20/07/2024 - Retro DOS v4.1 (&v4.0) COMMAND.COM
 38866                                  %if 1
 38867                                  SLASH_T:
 38868 000085C4 0000                    	dw	0			; no values
 38869 000085C6 0200                    	dw	2			; capitalize by filename table
 38870 000085C8 [F495]                  	dw	PARSE1_OUTPUT		; result buffer
 38871 000085CA [6584]                  	dw	NO_VALUES		; no values
 38872 000085CC 01                      	db	1			; one synonym
 38873                                  SLASH_T_SYN:
 38874 000085CD 2F5400                  	db	"/T",0
 38875                                  %endif
 38876                                  
 38877                                  ; M003 ; Start of changes for LoadHigh support
 38878                                  
 38879                                  ;Parse Control Block for LOADHIGH command
 38880                                  
 38881                                  Parse_LoadHi:
 38882 000085D0 [D385]                  	dw	LoadHi_Parms		;extended parm table
 38883 000085D2 00                      	db	0			;no extra delimiters
 38884                                  
 38885                                  LoadHi_Parms:
 38886 000085D3 0101                    	db	1,1			;min. 1 parm, max. 1 parm
 38887 000085D5 [6884]                  	dw	FILE_REQUIRED		;control struc for filename
 38888 000085D7 00                      	db	0			;no switches
 38889 000085D8 00                      	db	0			;no keywords
 38890                                  
 38891                                  ; M003 ; End of changes for LoadHigh support
 38892                                  
 38893                                  TempVarName:
 38894 000085D9 54454D503D00            	db	"TEMP=",0
 38895                                  
 38896                                  ; ---------------------------------------------------------------------------
 38897                                  ; 20/07/2024 - Retro DOS v4.1 (& v4.0) COMMAND.COM
 38898                                  %if 1
 38899 000085DF 0D0A                    RD4CMD_VER_MSG:	db 0Dh,0Ah
 38900 000085E1 526574726F20444F53-     		db 'Retro DOS v4 COMMAND.COM'
 38900 000085EA 20763420434F4D4D41-
 38900 000085F3 4E442E434F4D       
 38901 000085F9 0D0A                    		db 0Dh,0Ah 
 38902 000085FB 32303234202D204572-     		db '2024 - Erdogan Tan'
 38902 00008604 646F67616E2054616E 
 38903 0000860D 0D0A                    		db 0Dh,0Ah
 38904 0000860F 24                      		db '$'
 38905                                  %endif
 38906                                  ; ---------------------------------------------------------------------------
 38907                                  
 38908                                  	; 16/04/2023
 38909                                  TRANDATAEND:		; TRANGROUP:88C2h
 38910                                  
 38911                                  ;============================================================================
 38912                                  ; PSDATA.INC, MSDOS 6.0, 1991
 38913                                  ;============================================================================
 38914                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 38915                                  
 38916                                  ; 18/04/2023
 38917                                  TRANSPACESTART:
 38918                                  
 38919                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:88C2h
 38920                                  
 38921                                  ;********************** Local Data *************************************
 38922                                  
 38923                                  $P_ORDINAL:
 38924 00008610 0000                    	dw	0		;AN000; Operand ordinal save area
 38925                                  $P_RC:
 38926 00008612 0000                    	dw	0		;AN000; Return code from parser
 38927                                  $P_SI_Save:
 38928 00008614 0000                    	dw	0		;AN000; Pointer of command buffer
 38929                                  $P_DX:
 38930 00008616 0000                    	dw	0		;AN000; Return result buffer address
 38931                                  $P_Terminator:
 38932 00008618 00                      	db	0		;AN000; Terminator code (ASCII)
 38933                                  $P_DBCSEV_OFF:
 38934 00008619 0000                    	dw	0		;AN000; Offset of DBCS EV
 38935                                  $P_DBCSEV_SEG:
 38936 0000861B 0000                    	dw	0		;AN000; Segment of DBCS EV
 38937                                  $P_Flags:			;AN000; Parser internal flags
 38938                                  $P_Flags1:
 38939 0000861D 00                      	db	0		;AN038; to reference first byte flags
 38940                                  $P_Flags2:
 38941 0000861E 00                      	db	0		;AN038; to reference second byte flags only
 38942                                  $P_SaveSI_Cmpx:
 38943 0000861F 0000                    	dw	0		;AN000; save si for later use by complex
 38944                                  $P_KEYorSW_Ptr:
 38945 00008621 0000                    	dw	0		;AN000; points next to "=" or ":" code
 38946                                  $P_Save_EOB:
 38947 00008623 0000                    	dw	0		;AN000; save pointer to EOB
 38948                                  $P_Found_SYNONYM:
 38949 00008625 0000                    	dw	0		;AN000; es:@ points to found synonym
 38950                                  $P_STRING_BUF:
 38951 00008627 00<rep 80h>             	times  128 db 0		;AN000; Pick a operand from command line
 38952                                  $P_ORIG_ORD:
 38953 000086A7 0000                    	dw	0		;AN039; ORIGINAL ORDINAL FROM CX
 38954                                  $P_ORIG_STACK:
 38955 000086A9 0000                    	dw	0		;AN039; ORIGINAL VALUE OF STACK FROM SP
 38956                                  $P_ORIG_SI:
 38957 000086AB 0000                    	dw	0		;AN039; ORIGINAL START PARSE POINTER FROM SI
 38958                                  $P_Got_Time:
 38959 000086AD 00                      	db	0		;AN023; if 1, use Time delimiters
 38960                                  $P_Country_Info:
 38961 000086AE FFFF                    	dw	-1 ; 0FFFFh
 38962 000086B0 00<rep 20h>             	times	32 db 0	
 38963                                  $P_1st_Val:
 38964 000086D0 0000                    	dw	0		;AN000; used when process date or time
 38965                                  $P_2nd_Val:
 38966 000086D2 0000                    	dw	0		;AN000; used when process date or time
 38967                                  $P_3rd_Val:
 38968 000086D4 0000                    	dw	0		;AN000; used when process date or time
 38969                                  $P_4th_Val:
 38970 000086D6 0000                    	dw	0		;AN000; used when process date or time
 38971                                  $P_Char_CAP_Ptr:
 38972 000086D8 FF                      	db	0FFh		;AN000; info id
 38973 000086D9 0000                    	dw	0		;AN000; offset	of char case map table
 38974 000086DB 0000                    	dw	0		;AN000; segment of char case map table
 38975                                  $P_File_CAP_Ptr:
 38976 000086DD FF                      	db	0FFh		;AN000; info id
 38977 000086DE 0000                    	dw	0		;AN000; offset	of file case map table
 38978 000086E0 0000                    	dw	0		;AN000; segment of file case map table
 38979                                  
 38980                                  	; 18/04/2023
 38981                                  ;M029
 38982                                  ;!!!WARNING!!!
 38983                                  ; In routine SYSPARSE (parse.asm), $P_FileSp_Char is reinitialized using 
 38984                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 38985                                  ;changes need to be made in SYSPARSE
 38986                                  
 38987                                  $P_FileSp_Char:
 38988 000086E2 5B5D7C3C3E2B3D3B22      	db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 38989                                  $P_FileSp_Len equ $-$P_FileSp_Char ;AN000;
 38990                                  
 38991                                  ;filespec error flag
 38992                                  $P_err_flag:
 38993 000086EB 00                      	db	0		;AN033; flag set if filespec parsing error
 38994                                  				;AN033;  was detected.
 38995                                  
 38996                                  ;============================================================================
 38997                                  ; MSGSERV.ASM, MSDOS 6.0, 1991
 38998                                  ;============================================================================
 38999                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39000                                  
 39001                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:899Eh
 39002                                  
 39003                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 39004                                  ;;
 39005                                  ;; STRUCTURE: $M_RES_ADDRS
 39006                                  ;;
 39007                                  ;; Resident data area definition of variables
 39008                                  ;;
 39009                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 39010                                  
 39011                                  $M_RT:
 39012 000086EC 00<rep 8Dh>             	times $M_RES_ADDRS_SZ db 0   ; times 141 db 0
 39013                                  
 39014                                  ;============================================================================
 39015                                  ; COPYRIGHT.INC, MSDOS 6.0, 1993
 39016                                  ;============================================================================
 39017                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39018                                  
 39019                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:8A2Bh
 39020                                  ; ---------------------------------------------------------------------------
 39021                                  ;;M00 - changed to DOS 5.0 copyright - MD 9 Jul 90
 39022                                  ;;M031 - changed copyright to 1991
 39023                                  ;;9/16 - changed version to 6.0 and copyright to 1992
 39024                                  ;;9/21 - Added international translations, language passed through COUNTRY macro
 39025                                  ;;B49,50 - changed version to 6 and copyright to 1993
 39026                                  ; ---------------------------------------------------------------------------
 39027                                  
 39028                                  ;;ifdef USA
 39029                                  ;MsDosVer6_CCopy:
 39030                                  ;	db	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
 39031                                  ;	db	"Licensed Material - Property of Microsoft "
 39032                                  ;	db	"All rights reserved "
 39033                                  ;endif
 39034                                  
 39035                                  ; 15/04/2023
 39036                                  MsDosVer5_CCopy:
 39037 00008779 4D5320444F53205665-     	db	"MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp "
 39037 00008782 7273696F6E20352E30-
 39037 0000878B 3020284329436F7079-
 39037 00008794 726967687420313938-
 39037 0000879D 312D31393931204D69-
 39037 000087A6 63726F736F66742043-
 39037 000087AF 6F727020           
 39038 000087B3 4C6963656E73656420-     	db	"Licensed Material - Property of Microsoft "
 39038 000087BC 4D6174657269616C20-
 39038 000087C5 2D2050726F70657274-
 39038 000087CE 79206F66204D696372-
 39038 000087D7 6F736F667420       
 39039 000087DD 416C6C207269676874-     	db	"All rights reserved "
 39039 000087E6 732072657365727665-
 39039 000087EF 6420               
 39040                                  ; ---------------------------------------------------------------------------
 39041                                  ; 15/04/2023
 39042                                  	; 16/04/2023 - 21/04/2023
 39043                                  	;db 	0
 39044                                  	;db	0Dh,0Ah
 39045                                  	;db	'Retro DOS v4.0 (& v4.1) COMMAND.COM '
 39046                                  	;db	0
 39047                                  	;db	'by Erdogan Tan - 05/05/2023'
 39048                                  	;db	0
 39049                                  
 39050                                  ;============================================================================
 39051                                  ; TPRINTF.ASM, MSDOS 6.0, 1991
 39052                                  ;============================================================================
 39053                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39054                                  
 39055                                  PRINTF_HANDLE:
 39056 000087F1 0000                    	dw	0		;AC000;
 39057                                  
 39058                                  ; 15/047/2023
 39059                                  %if 0
 39060                                  
 39061                                  ;============================================================================
 39062                                  ; TSPC.ASM, MSDOS 6.0, 1991
 39063                                  ;============================================================================
 39064                                  ; 29/09/2018 - Retro DOS v3.0
 39065                                  
 39066                                  ;TITLE	COMMAND Transient Uninitialized DATA
 39067                                  
 39068                                  ;The TRANSPACE segment contains variable data that is considered
 39069                                  ;volatile between command cycles, and therefore is not included in the
 39070                                  ;transient checksum area. Contents of these variables MUST be
 39071                                  ;initialized before use, and must not be relied upon from command
 39072                                  ;cycle to command cycle.
 39073                                  ;
 39074                                  ;No constant data values should be stored here.
 39075                                  
 39076                                  ; ---------------------------------------------------------------------------
 39077                                  ; START OF UNITIALIZED DATA
 39078                                  ; ---------------------------------------------------------------------------
 39079                                  
 39080                                  ;	times 12 db 0
 39081                                  
 39082                                  align 16
 39083                                  
 39084                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3F50h
 39085                                  
 39086                                  PRINTF_LEFT:	db 0
 39087                                  PRINTF_LONG:	db 0
 39088                                  PRINTF_HEX:	db 0
 39089                                  TABLE_INDEX:	db 0
 39090                                  PRINTF_WIDTH:	dw 0
 39091                                  PRINTF_BASE:	dw 0
 39092                                  PAD_CHAR:	db 0
 39093                                  PRINTF_HANDLE:	dw 0
 39094                                  PRINTF_BUF: times 100 db 0
 39095                                  PRINTF_BUF_END: ; 30/09/2018
 39096                                  
 39097                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 3FBFh
 39098                                  
 39099                                  SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 39100                                  TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 39101                                  UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 39102                                  COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 39103                                  USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 39104                                  EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 39105                                  RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 39106                                  
 39107                                  ; Variables passed up from resident	; in the Resident portion: (initial values)	
 39108                                  HEADCALL:	dw 0			; TRANVARS  (dw THEADFIX)
 39109                                  RESSEG:		dw 0			; MYSEG     (dw 0) 	 	
 39110                                  TPA:		dw 0			; LTPA	    (dw 0)	
 39111                                  SWITCHAR:	db 0			; RSWITCHAR (db '-')
 39112                                  DIRCHAR:	db 0			; RDIRCHAR  (db '/')
 39113                                  EXEC_ADDR:	dd 0			; 	    (dw EXT_EXEC)	 
 39114                                  					; MYSEG1    (dw 0)	
 39115                                  RCH_ADDR:	dd 0			;	    (dw TREMCHECK) 	
 39116                                  					; MYSEG2    (dw 0)	
 39117                                  		dw 0			; RESTEST   (dw 0)	
 39118                                  TRAN_TPA:	dw 0			; RES_TPA   (dw 0)	
 39119                                  
 39120                                  CHKDRV:		db 0
 39121                                  IFNOTFLAG:
 39122                                  FILTYP:
 39123                                  RDEOF:		db 0			; Misc flags
 39124                                  CURDRV:		db 0
 39125                                  PARM1:
 39126                                  Concat:		db 0
 39127                                  PARM2:
 39128                                  ArgC:		db 0
 39129                                  COMSW:		dw 0			; Switches between command and 1st arg
 39130                                  ARG1S:		dw 0			; Switches between 1st and 2nd arg
 39131                                  ARG2S:					; Switches after 2nd arg		
 39132                                  DestSwitch:	dw 0
 39133                                  ARGTS:
 39134                                  AllSwitch:	dw 0			; ALL switches except for COMSW
 39135                                  CFLAG:		db 0
 39136                                  DestClosed:
 39137                                  SPECDRV:	db 0
 39138                                  BYTCNT:		dw 0			; Size of buffer between RES and TRANS
 39139                                  NXTADD:		dw 0
 39140                                  FRSTSRCH:	db 0
 39141                                  ;LeftOnLine:	db 0			; entries left on line u.b. DIR
 39142                                  ;PerLine:	db 0			; entries/line u.b. DIR
 39143                                  LINCNT:		db 0
 39144                                  LINLEN:		db 0
 39145                                  ;LeftOnPage:	dw 0			; lines left on page u.b. DIR
 39146                                  FILECNT:	dw 0			; file count u.b. DIR
 39147                                  ;FileSiz:	dd 0			; file size u.b. DIR
 39148                                  
 39149                                  ;		Note:  keep FileCntTotal through csecUsedTotal together!
 39150                                  ;
 39151                                  ;FileCntTotal:	dd 0			; total file count u.b. DIR
 39152                                  ;FileSizTotal:	dd 0			; total file size u.b. DIR
 39153                                  
 39154                                  	; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 42BBh
 39155                                  
 39156                                  CHARBUF:  times	80 db 0			;line byte character buffer for xenix write
 39157                                  DESTFCB2:
 39158                                  IDLEN:		db 0
 39159                                  ID:	  times	8  db 0
 39160                                  COM:	  times	3  db 0 
 39161                                  DEST:	  times 37 db 0
 39162                                  DESTNAME: times 11 db 0
 39163                                  DESTDIR:
 39164                                  DestFcb:  times DIRSTRLEN db 0 ; 67	; Directory for PATH searches
 39165                                  GOTOLEN:	; word
 39166                                  BWDBUF: 	; byte
 39167                                  EXEFCB: 	; word
 39168                                  DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 39169                                  
 39170                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 39171                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 39172                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 39173                                  DIRBUF_FDATE   equ DIRBUF+32  ; word	
 39174                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 39175                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 39176                                  
 39177                                  SDIRBUF:  times 12 db 0	
 39178                                  _BITS:		dw 0
 39179                                  PATHCNT:	dw 0
 39180                                  PATHPOS:	dw 0
 39181                                  PATHSW:		dw 0
 39182                                  ;AttrSpecified:	db 0			; attribute bits u.b. DIR
 39183                                  ;AttrSelect:	db 0			; attribute bits u.b. DIR
 39184                                  LINPERPAG:	db 0
 39185                                  		db 0
 39186                                  COMMA:		db 0			; flag set if +,, occurs
 39187                                  PLUS_COMMA:	db 0			; flag set if +,, occurs
 39188                                  
 39189                                  ;dirflag: 	db 0			;AN015; set when pathcrunch called from DIR
 39190                                  ;parse_last:	dw 0			;AN018; used to hold parsing position
 39191                                  ;system_cpage:	dw 0			;AC001; used for CHCP variable
 39192                                  
 39193                                  ARG_BUF:  times 128 db 0   ; _43E8h	
 39194                                  STRING_PTR_1:	dw 0	   ; _4468h	
 39195                                  FILESIZE_L:	dw 0	   ; _446Ah		
 39196                                  FILESIZE_H:	dw 0	   ; _446Ch	
 39197                                  STRING_PTR_2:	dw 0	   ; _446Eh	
 39198                                  
 39199                                  COPY_NUM:	dw 0
 39200                                  	  times 4 db 0 ; MSDOS 3.3 (unused bytes)
 39201                                  CPYFLAG:	db 0
 39202                                  DIR_NUM:	dw 0
 39203                                  BYTES_FREE:	dw 0
 39204                                  		dw 0
 39205                                  MAJOR_VER_NUM:	dw 0
 39206                                  MINOR_VER_NUM:	dw 0
 39207                                  ONE_CHAR_VAL:	db 0
 39208                                  		;db 0
 39209                                  VOLNAME_ADDR:	dw 0 ; MSDOS 3.3
 39210                                  VOL_DRV:	db 0
 39211                                  VOL_DIR:	dw 0 ; MSDOS 3.3
 39212                                  
 39213                                  ROM_CALL:	db 0			; flag for rom function
 39214                                  ROM_IP:		dw 0
 39215                                  ROM_CS:		dw 0
 39216                                  
 39217                                  DestVars:
 39218                                  DestIsDir:	db 0
 39219                                  DestSiz:	db 0
 39220                                  DestTail:	dw 0
 39221                                  DestInfo:	db 0
 39222                                  DESTBUF:  times	DIRSTRLEN+20 db 0 ; 87
 39223                                  ENDDESTBUF:
 39224                                  
 39225                                  DESTHAND:	dw 0
 39226                                  DESTISDEV:	db 0
 39227                                  FIRSTDEST:	db 0
 39228                                  MELCOPY:	db 0
 39229                                  MELSTART:	dw 0
 39230                                  
 39231                                  SrcVars:
 39232                                  SrcIsDir:	db 0
 39233                                  SrcSiz:		db 0
 39234                                  SrcTail:	dw 0
 39235                                  SrcInfo:	db 0
 39236                                  SrcBuf:   times	DIRSTRLEN+20 db 0 ; 87
 39237                                  
 39238                                  SRCHAND:	dw 0
 39239                                  SRCISDEV:	db 0
 39240                                  
 39241                                  SCANBUF:  times DIRSTRLEN+20 db 0 ; 87
 39242                                  
 39243                                  SRCPT:		dw 0
 39244                                  INEXACT:	db 0
 39245                                  		db 0 ; MSDOS 3.3 
 39246                                  NOWRITE:	db 0
 39247                                  BINARY:		db 0
 39248                                  WRITTEN:	dw 0
 39249                                  TERMREAD:	db 0
 39250                                  ASCII:		db 0
 39251                                  PLUS:		db 0
 39252                                  OBJCNT:		db 0			; Used in copy
 39253                                  CPDATE:		dw 0
 39254                                  CPTIME:		dw 0
 39255                                  
 39256                                  ;OFilePtr_Lo:	dw 0			; original file ptr for COPY when
 39257                                  ;OFilePtr_Hi:	dw 0			; 1st source is also destination
 39258                                  ;OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 39259                                  
 39260                                  BATHAND:	dw 0			; Batch handle
 39261                                  STARTEL:	dw 0
 39262                                  ELCNT:		db 0
 39263                                  ELPOS:		db 0
 39264                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 39265                                  MSDOS 5.0
 39266                                  SKPDEL:
 39267                                  SOURCE:   times	11 db 0
 39268                                  
 39269                                  ext_entered:	db 0			;AN005;
 39270                                  
 39271                                  ;display_ioctl	db 0			;AN000; info level
 39272                                  ;		db 0			;AN000; reserved
 39273                                  ;		dw crt_ioctl_ln		;AN000; length of data
 39274                                  ;		dw 0			;AN000; control flags
 39275                                  ;display_mode:	db 0			;AN000; display mode, colors
 39276                                  ;		db 0			;AN000; reserved
 39277                                  ;		dw 0			;AN023; colors
 39278                                  ;		dw 0			;AN000; display width (PELS)
 39279                                  ;		dw 0			;AN000; display length (PELS)
 39280                                  ;display_width:	dw 0			;AN000; display width
 39281                                  ;linperpag:	dw linesperpage		;AN000; display length (default to linesperpage)
 39282                                  ;
 39283                                  ;vol_ioctl_buf:				;AN000; buffer for ioctl volume label/serial call
 39284                                  ;		dw 0			;AN000; info level
 39285                                  ;vol_serial:	dd 0			;AN000; volume serial number
 39286                                  ;vol_label: times 11 db 20h ; " "	;AN000; volume label - init to blanks
 39287                                  ;	    times 8  db 20h ; " "       ;AN000; file system type
 39288                                  
 39289                                  EXPAND_STAR:	db 0
 39290                                  
 39291                                  ;msg_flag:	db 0			;AN022; flag set if non-utility message issued
 39292                                  ;msg_numb:	dw 0			;AN022; set with extended error message issued
 39293                                  ;append_exec:	db 0			;AN041; set if internal append executed
 39294                                  ;print_err_flag: dw 0			;AN000; flag set if error during sysdispmsg
 39295                                  ;subst_buffer: times parm_block_size*2 db 0 ;AN061;
 39296                                  
 39297                                  COMSPEC_FLAG:	db 0 ; MSDOS 3.3
 39298                                  
 39299                                  ; Data declarations taken out of parse.asm
 39300                                  
 39301                                  ; MSDOS 6.0
 39302                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 39303                                  ;argbufptr	dw	?		; index for argv[].argpointer
 39304                                  ;tpbuf		db	128   DUP (?)	; temporary buffer
 39305                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 39306                                  ;comptr		dw	?		; ptr into combuf
 39307                                  
 39308                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 45C9h
 39309                                  ARG:
 39310                                  ARG_ARGV:
 39311                                  ARGV0_ARGPOINTER: dw 0	; ARGV[0]
 39312                                  ARGV0_ARG_FLAGS:  db 0
 39313                                  ARGV0_ARGSTARTEL: dw 0
 39314                                  ARGV0_ARGLEN:	  dw 0
 39315                                  ARGV0_ARGSW_WORD: dw 0
 39316                                  ARGV0_OCOMPTR:	  dw 0
 39317                                  
 39318                                  ARGV1_ARGPOINTER: dw 0	; ARGV[1]	
 39319                                  	  times 5 db 0
 39320                                  ARGV1_ARGSW_WORD: dw 0
 39321                                  		  dw 0
 39322                                  
 39323                                  ARGV2_ARGPOINTER: dw 0	; ARGV[2]
 39324                                  	  times 5 db 0
 39325                                  ARGV2_ARGSW_WORD: dw 0
 39326                                  		  dw 0
 39327                                  
 39328                                  	times 671 db 0  ; ARGV[3] to ARGV[63]
 39329                                  	
 39330                                  ARG_ARGVCNT:	dw 0
 39331                                  ARG_ARGSWINFO:	dw 0
 39332                                  
 39333                                  ARG_ARGBUF:    	times 256 dw 0	; times ARGBLEN dw 0 
 39334                                  ARG_ARGFORCOMBUF: times 128 db 0  ; times COMBUFLEN db 0 
 39335                                  
 39336                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4B0Dh
 39337                                  
 39338                                  ARGBUFPTR:	dw 0			; index for argv[].argpointer
 39339                                  TPBUF:    times 128 db 0		; temporary buffer
 39340                                  LASTARG:	dw 0			; point at which to accumulate switch info
 39341                                  COMPTR:		dw 0			; ptr into combuf
 39342                                  
 39343                                  ; Data declarations taken out of path.asm
 39344                                  ;fbuf	find_buf	<>			; dma buffer for findfirst/findnext
 39345                                  ;pathinfo	DW	3 DUP (?)		; ES, SI(old), and SI(new) of user path
 39346                                  ;psep_char	DB	?			; '/' or '\'
 39347                                  ;search_best	DB	(?)			; best code, best filename so far
 39348                                  ;fname_max_len	equ	13
 39349                                  ;search_best_buf DB	fname_max_len DUP (?)
 39350                                  ;search_curdir_buf DB	64 DUP (?)		; a place for CurDir info, if successful
 39351                                  ;search_error	DW	(?)			; address of error message to be printed
 39352                                  
 39353                                  FINDBUFLEN equ FIND_BUF.size ; 43
 39354                                  
 39355                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4B93h
 39356                                  
 39357                                  FBUF:	  times	FINDBUFLEN db 0 ; times 43 db 0
 39358                                  FBUF_PNAME equ FBUF+30			; packed name, 13 bytes
 39359                                  PATHINFO:
 39360                                  PATHINFO_0:	dw 0
 39361                                  PATHINFO_2:	dw 0
 39362                                  PATHINFO_4:	dw 0
 39363                                  PSEP_CHAR:	db 0
 39364                                  SEARCH_BEST:	db 0
 39365                                  ;FNAME_MAX_LEN equ 13
 39366                                  SEARCH_BEST_BUF: times FNAME_MAX_LEN db 0 ; times 13 db 0
 39367                                  SEARCH_CURDIR_BUF: times 64 db 0
 39368                                  SEARCH_ERROR:	dw 0
 39369                                  
 39370                                  ; Data declarations taken out of tbatch.asm
 39371                                  
 39372                                  ;if_not_count	DW	?
 39373                                  ;
 39374                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 39375                                  ;
 39376                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 39377                                  
 39378                                  ; 31/03/2023
 39379                                  STACK:		;LABEL	WORD
 39380                                  
 39381                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4C15h
 39382                                  
 39383                                  IF_NOT_COUNT:	dw 0
 39384                                  ZFLAG:		db 0
 39385                                  	  times 256 db 0 	
 39386                                  STACK:
 39387                                  
 39388                                  ;INTERNATVARS	internat_block <>
 39389                                  ;		DB	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 39390                                  ;
 39391                                  ;;		Buffer for DOS function 64h (Get extended country information)
 39392                                  ;;		subfunctions 2, 4, 6, or 7:
 39393                                  ;
 39394                                  ;CountryPtrInfo	label	byte
 39395                                  ;CountryPtrId	db	?
 39396                                  ;CountryPtr	dd	?
 39397                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 39398                                  
 39399                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4D18h
 39400                                  
 39401                                  INTERNATVARS:	
 39402                                  DATE_TIME_FORMAT: dw 0			; 0-USA, 1-EUR, 2-JAP
 39403                                  CURRENCY_SYM: 	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 39404                                  THOUS_SEP:	db 0,0			; Thousands separator 2 bytes
 39405                                  DECIMAL_SEP:	db 0,0			; Decimal separator 2 bytes
 39406                                  DATE_SEP:	db 0,0			; Date separator 2 bytes
 39407                                  TIME_SEP:	db 0,0			; Time separator 2 bytes	
 39408                                  BIT_FIELD:	db 0			; Bit values
 39409                                  					;   Bit 0 = 0 if currency symbol first
 39410                                  					;	  = 1 if currency symbol last
 39411                                  					;   Bit 1 = 0 if No space after currency symbol
 39412                                  					;	  = 1 if space after currency symbol
 39413                                  CURRENCY_CENTS:	db 0			; Number of places after currency dec point
 39414                                  TIME_24:	db 0			; 1 if 24 hour time, 0 if 12 hour time
 39415                                  MAP_CALL:	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 39416                                  					; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 39417                                  					;  in pieces.
 39418                                  DATA_SEP:	db 0,0			; Data list separator character		
 39419                                  
 39420                                  		times 8 db 0
 39421                                  ;
 39422                                  ; Max size of the block returned by the INTERNATIONAL call
 39423                                  ;
 39424                                  INTERNAT_BLOCK_SIZE EQU	32
 39425                                  
 39426                                  BATLEN equ 32
 39427                                  		; MSDOS 3.3 COMMAND.COM (1987) Transient portion offset 4D38h		
 39428                                  
 39429                                  BATBUFPOS:	dw 0			; integer position in buffer of next byte
 39430                                  
 39431                                  BATBUF:	  times	BATLEN db 0 ; times 32 db 0
 39432                                  
 39433                                  BATBUFEND:	dw 0
 39434                                  
 39435                                  ;TypeFilSiz:	dd 0			; stores size of file to be typed
 39436                                  
 39437                                  TRANSPACEEND:	; 4D4Ch ; End of MSDOS 3.3 COMMAND.COM (1987) Transient portion
 39438                                  
 39439                                  ; 18/04/2023
 39440                                  ; ----------------------------------------------------------------------------
 39441                                  ; 09/01/2023
 39442                                  ;TRANSPACEEND	equ $ - TRANSIENTSTART ; 18/04/2023
 39443                                  
 39444                                  %endif
 39445                                  
 39446                                  ;============================================================================
 39447                                  ; TSPC.ASM, MSDOS 6.0, 1991
 39448                                  ;============================================================================
 39449                                  ; 15/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39450                                  
 39451                                  ;TITLE	COMMAND Transient Uninitialized DATA
 39452                                  
 39453                                  ;The TRANSPACE segment contains variable data that is considered
 39454                                  ;volatile between command cycles, and therefore is not included in the
 39455                                  ;transient checksum area. Contents of these variables MUST be
 39456                                  ;initialized before use, and must not be relied upon from command
 39457                                  ;cycle to command cycle.
 39458                                  ;
 39459                                  ;No constant data values should be stored here.
 39460                                  
 39461                                  ; ---------------------------------------------------------------------------
 39462                                  ; START OF UNITIALIZED DATA
 39463                                  ; ---------------------------------------------------------------------------
 39464                                  
 39465                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8AA5h
 39466                                  
 39467 000087F3 00<rep 57h>             SRCXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 39468 0000884A 00<rep 57h>             TRGXNAME: times	DIRSTRLEN+20 db 0 ; 87	; buffer for name translate
 39469 000088A1 00<rep 83h>             UCOMBUF:  times COMBUFLEN+3  db 0 ; 131	; Raw console buffer
 39470 00008924 00<rep 83h>             COMBUF:	  times COMBUFLEN+3  db 0 ; 131	; Cooked console buffer
 39471 000089A7 00<rep 46h>             USERDIR1: times	DIRSTRLEN+3  db 0 ; 70  ; Storage for users current directory
 39472 000089ED 00<rep 83h>             EXECPATH: times COMBUFLEN+3  db 0 ; 131 ; Path for external command
 39473 00008A70 00<rep 53h>             RE_INSTR: times DIRSTRLEN+16 db 0 ; 83  ; path for input to redirection
 39474                                  
 39475                                  ; Variables passed up from resident	; in the Resident portion: (initial values)	
 39476                                  HEADCALL:
 39477 00008AC3 0000                    	dw 0			; TRANVARS  (dw THEADFIX)
 39478 00008AC5 0000                    RESSEG:	dw 0			; MYSEG     (dw 0) 	 	
 39479 00008AC7 0000                    TPA:	dw 0			; LTPA	    (dw 0)	
 39480                                  SWITCHAR:
 39481 00008AC9 00                      	db 0			; RSWITCHAR (db '-')
 39482                                  DIRCHAR:
 39483 00008ACA 00                      	db 0			; RDIRCHAR  (db '/')
 39484                                  EXEC_ADDR:
 39485 00008ACB 00000000                	dd 0			; 	    (dw EXT_EXEC)	 
 39486                                  				; MYSEG1    (dw 0)	
 39487                                  RCH_ADDR:
 39488 00008ACF 00000000                	dd 0			;	    (dw TREMCHECK) 	
 39489                                  				; MYSEG2    (dw 0)	
 39490 00008AD3 0000                    	dw 0			; RESTEST   (dw 0)	
 39491                                  TRAN_TPA:
 39492 00008AD5 0000                    	dw 0			; RES_TPA   (dw 0)	
 39493                                  
 39494 00008AD7 00                      CHKDRV:	db 0
 39495                                  IFNOTFLAG:
 39496                                  FILTYP:
 39497 00008AD8 00                      RDEOF:	db 0			; Misc flags
 39498 00008AD9 00                      CURDRV:	db 0
 39499                                  PARM1:
 39500 00008ADA 00                      Concat:	db 0
 39501                                  PARM2:
 39502 00008ADB 00                      ArgC:	db 0
 39503 00008ADC 0000                    COMSW:	dw 0			; Switches between command and 1st arg
 39504 00008ADE 0000                    ARG1S:	dw 0			; Switches between 1st and 2nd arg
 39505                                  ARG2S:				; Switches after 2nd arg		
 39506                                  DestSwitch:
 39507 00008AE0 0000                    	dw 0
 39508                                  ARGTS:
 39509                                  AllSwitch:
 39510 00008AE2 0000                    	dw 0			; ALL switches except for COMSW
 39511 00008AE4 00                      CFLAG:	db 0
 39512                                  DestClosed:
 39513                                  SPECDRV:
 39514 00008AE5 00                      	db 0
 39515 00008AE6 0000                    BYTCNT:	dw 0			; Size of buffer between RES and TRANS
 39516 00008AE8 0000                    NXTADD:	dw 0
 39517                                  FRSTSRCH:
 39518 00008AEA 00                      	db 0
 39519                                  ; 15/04/2023
 39520                                  LeftOnLine:
 39521 00008AEB 00                      	db 0			; entries left on line u.b. DIR
 39522                                  PerLine:
 39523 00008AEC 00                      	db 0			; entries/line u.b. DIR
 39524 00008AED 00                      LINCNT:	db 0
 39525 00008AEE 00                      LINLEN:	db 0
 39526                                  LeftOnPage:
 39527 00008AEF 0000                    	dw 0			; lines left on page u.b. DIR
 39528                                  FileCnt:
 39529 00008AF1 0000                    	dw 0			; file count u.b. DIR
 39530                                  FileSiz:
 39531 00008AF3 00000000                	dd 0			; file size u.b. DIR
 39532                                  
 39533                                  ; Note: keep FileCntTotal through csecUsedTotal together!
 39534                                  
 39535                                  FileCntTotal:
 39536 00008AF7 00000000                	dd 0			; total file count u.b. DIR
 39537                                  FileSizTotal:
 39538 00008AFB 00000000                	dd 0			; total file size u.b. DIR
 39539                                  
 39540                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 8DAFh
 39541                                  CHARBUF:
 39542 00008AFF 00<rep 50h>             	times	80 db 0		;line byte character buffer for xenix write
 39543                                  DESTFCB2:
 39544 00008B4F 00                      IDLEN:	db 0
 39545 00008B50 00<rep 8h>              ID:	times	8  db 0
 39546 00008B58 00<rep 3h>              COM:	times	3  db 0 
 39547 00008B5B 00<rep 25h>             DEST:	times	37 db 0
 39548                                  DESTNAME:
 39549 00008B80 00<rep Bh>              	times	11 db 0
 39550                                  DESTDIR:
 39551                                  DestFcb:
 39552 00008B8B 00<rep 43h>             	times DIRSTRLEN db 0 ; 67 ; Directory for PATH searches
 39553                                  GOTOLEN: ; word
 39554                                  BWDBUF:  ; byte
 39555                                  EXEFCB:  ; word
 39556 00008BCE 00<rep 46h>             DIRBUF:	times DIRSTRLEN+3 db 0 ; 70
 39557                                  
 39558                                  DIRBUF_ATTRIB1 equ DIRBUF+19  ; byte	; INT 21h AH=11h (8+DIR_ENTRY struc)
 39559                                  DIRBUF_ATTRIB2 equ DIRBUF+21  ; byte	; INT 21h AH=4Eh (FIND_BUF struc)
 39560                                  DIRBUF_FTIME   equ DIRBUF+30  ; word
 39561                                  DIRBUF_FDATE   equ DIRBUF+32  ; word	
 39562                                  DIRBUF_FSIZ_L  equ DIRBUF+36  ; word
 39563                                  DIRBUF_FSIZ_H  equ DIRBUF+38  ; word
 39564                                  
 39565                                  	; 16/04/2023 - Retro DOS v4.0 (& v4.1) COMMAND.COM
 39566                                  SDIRBUF:
 39567 00008C14 00<rep Ch>              	times 12 db 0	
 39568                                  _Bits:
 39569 00008C20 0000                    	dw 0
 39570                                  PathCnt:
 39571 00008C22 0000                    	dw 0
 39572                                  PathPos:
 39573 00008C24 0000                    	dw 0
 39574 00008C26 0000                    PathSw:	dw 0
 39575                                  AttrSpecified:
 39576 00008C28 00                      	db 0			; attribute bits u.b. DIR
 39577                                  AttrSelect:
 39578 00008C29 00                      	db 0			; attribute bits u.b. DIR
 39579 00008C2A 00                      comma:	db 0			; flag set if +,, occurs
 39580                                  plus_comma:
 39581 00008C2B 00                      	db 0			; flag set if +,, occurs
 39582                                  DirFlag:
 39583 00008C2C 00                       	db 0			;AN015; set when pathcrunch called from DIR
 39584                                  parse_last:
 39585 00008C2D 0000                    	dw 0			;AN018; used to hold parsing position
 39586                                  system_cpage:
 39587 00008C2F 0000                    	dw 0			;AC001; used for CHCP variable
 39588                                  Arg_Buf:
 39589 00008C31 00<rep 80h>             	times 128 db 0	
 39590                                  File_Size_Low:
 39591 00008CB1 0000                    	dw 0	
 39592                                  File_Size_High:
 39593 00008CB3 0000                    	dw 0		
 39594                                  string_ptr_2:
 39595 00008CB5 0000                    	dw 0	
 39596                                  Copy_num:
 39597 00008CB7 0000                    	dw 0
 39598                                  cpyflag:
 39599 00008CB9 00                      	db 0
 39600                                  Dir_Num:
 39601 00008CBA 0000                    	dw 0
 39602                                  Bytes_Free:
 39603 00008CBC 00000000                	dd 0
 39604                                  
 39605                                  Major_Ver_Num:
 39606 00008CC0 0000                    	dw 0
 39607                                  Minor_Ver_Num:
 39608 00008CC2 0000                    	dw 0
 39609                                  
 39610                                  One_Char_Val:
 39611 00008CC4 00                      	db 0
 39612 00008CC5 00                      	db 0
 39613                                  vol_drv:
 39614 00008CC6 00                      	db 0
 39615                                  ROM_CALL:
 39616 00008CC7 00                      	db 0			; flag for rom function
 39617 00008CC8 0000                    ROM_IP:	dw 0
 39618 00008CCA 0000                    ROM_CS:	dw 0
 39619                                  
 39620                                  DestVars:
 39621                                  DestIsDir:
 39622 00008CCC 00                      	db 0
 39623                                  DestSiz:
 39624 00008CCD 00                      	db 0
 39625                                  DestTail:
 39626 00008CCE 0000                    	dw 0
 39627                                  DestInfo:
 39628 00008CD0 00                      	db 0
 39629                                  DestBuf:
 39630 00008CD1 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 39631                                  EndDestBuf:
 39632                                  DESTHAND:
 39633 00008D28 0000                    	dw 0
 39634                                  DESTISDEV:
 39635 00008D2A 00                      	db 0
 39636                                  FIRSTDEST:
 39637 00008D2B 00                      	db 0
 39638                                  MELCOPY:
 39639 00008D2C 00                      	db 0
 39640                                  MELSTART:
 39641 00008D2D 0000                    	dw 0
 39642                                  SrcVars:
 39643                                  SrcIsDir:
 39644 00008D2F 00                      	db 0
 39645 00008D30 00                      SrcSiz:	db 0
 39646                                  SrcTail:
 39647 00008D31 0000                    	dw 0
 39648                                  SrcInfo:
 39649 00008D33 00                      	db 0
 39650                                  SrcBuf:
 39651 00008D34 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 39652                                  SRCHAND:
 39653 00008D8B 0000                    	dw 0
 39654                                  SRCISDEV:
 39655 00008D8D 00                      	db 0
 39656                                  ScanBuf:
 39657 00008D8E 00<rep 57h>             	times DIRSTRLEN+20 db 0 ; 87
 39658                                  
 39659 00008DE5 0000                    SRCPT:	dw 0
 39660                                  INEXACT:
 39661 00008DE7 00                      	db 0
 39662                                  NOWRITE:
 39663 00008DE8 00                      	db 0
 39664                                  BINARY:
 39665 00008DE9 00                      	db 0
 39666                                  WRITTEN:
 39667 00008DEA 0000                    	dw 0
 39668                                  TERMREAD:
 39669 00008DEC 00                      	db 0
 39670 00008DED 00                      ASCII:	db 0
 39671 00008DEE 00                      PLUS:	db 0
 39672 00008DEF 00                      objcnt:	db 0			; Used in copy
 39673 00008DF0 0000                    CPDATE:	dw 0
 39674 00008DF2 0000                    CPTIME:	dw 0
 39675                                  
 39676                                  OFilePtr_Lo:
 39677 00008DF4 0000                    	dw 0			; original file ptr for COPY when
 39678                                  OFilePtr_Hi:
 39679 00008DF6 0000                    	dw 0			; 1st source is also destination
 39680 00008DF8 00                      OCtrlZ:	db 0			; original ctrl+Z for COPY when ditto
 39681                                  BATHAND:
 39682 00008DF9 0000                    	dw 0			; Batch handle
 39683                                  STARTEL:
 39684 00008DFB 0000                    	dw 0
 39685 00008DFD 00                      ELCNT:	db 0
 39686 00008DFE 00                      ELPOS:	db 0
 39687                                  
 39688                                  ; 28/03/2023 - Retro DOS v4.0 COMMAND.COM
 39689                                  ; MSDOS 5.0
 39690                                  SKPDEL:
 39691 00008DFF 00<rep Bh>              SOURCE:	times 11 db 0
 39692                                  
 39693                                  ext_entered:
 39694 00008E0A 00                      	db 0			;AN005;
 39695                                  
 39696                                  ; MSDOS 5.0 COMMAND.COM - TRANGROUP:90BCh
 39697                                  
 39698                                  Display_Ioctl:
 39699 00008E0B 00                      	db 0			;AN000; info level
 39700 00008E0C 00                      	db 0			;AN000; reserved
 39701 00008E0D 0E00                    	dw crt_ioctl_ln		;AN000; length of data
 39702 00008E0F 0000                    	dw 0			;AN000; control flags
 39703                                  display_mode:
 39704 00008E11 00                      	db 0			;AN000; display mode, colors
 39705 00008E12 00                      	db 0			;AN000; reserved
 39706 00008E13 0000                    	dw 0			;AN023; colors
 39707 00008E15 0000                    	dw 0			;AN000; display width (PELS)
 39708 00008E17 0000                    	dw 0			;AN000; display length (PELS)
 39709                                  display_width:
 39710 00008E19 0000                    	dw 0			;AN000; display width
 39711                                  LinPerPag:
 39712 00008E1B 1900                    	dw LINESPERPAGE	; 25	;AN000; display length (default to linesperpage)
 39713                                  
 39714                                  vol_ioctl_buf:			;AN000; buffer for ioctl volume label/serial call
 39715 00008E1D 0000                    	dw 0			;AN000; info level
 39716                                  vol_serial:
 39717 00008E1F 00000000                	dd 0			;AN000; volume serial number
 39718                                  vol_label:
 39719 00008E23 20<rep Bh>              	times 11 db 20h ; " "	;AN000; volume label - init to blanks
 39720 00008E2E 20<rep 8h>              	times 8  db 20h ; " "	;AN000; file system type
 39721                                  
 39722                                  expand_star:
 39723 00008E36 00                      	db 0
 39724                                  
 39725                                  msg_flag:
 39726 00008E37 00                      	db 0			;AN022; flag set if non-utility message issued
 39727                                  Msg_Numb:
 39728 00008E38 0000                    	dw 0			;AN022; set with extended error message issued
 39729                                  append_exec:
 39730 00008E3A 00                      	db 0			;AN041; set if internal append executed
 39731                                  print_err_flag:
 39732 00008E3B 0000                    	dw 0			;AN000; flag set if error during sysdispmsg
 39733                                  subst_buffer:
 39734 00008E3D 00<rep 16h>             	times parm_block_size*2 db 0 ; times 22 db 0 
 39735                                  				;AN061;
 39736                                  ; 15/04/2023
 39737 00008E53 00                      KPARSE:	db 0	; 3/3/KK	
 39738                                  
 39739                                  ; Data declarations taken out of parse.asm
 39740                                  
 39741                                  ; MSDOS 6.0
 39742                                  ;arg	arg_unit	<>		; pointers, arg count, string buffer
 39743                                  ;argbufptr	dw	?		; index for argv[].argpointer
 39744                                  ;tpbuf		db	128 DUP (?)	; temporary buffer
 39745                                  ;LAST_ARG	dw	?		; point at which to accumulate switch info
 39746                                  ;comptr		dw	?		; ptr into combuf
 39747                                  
 39748                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9105h
 39749                                  ARG:
 39750                                  ARG_ARGV:
 39751                                  ARGV0_ARGPOINTER:
 39752 00008E54 0000                    	dw 0	; ARGV[0]
 39753                                  ARGV0_ARG_FLAGS:
 39754 00008E56 00                      	db 0
 39755                                  ARGV0_ARGSTARTEL:
 39756 00008E57 0000                    	dw 0
 39757                                  ARGV0_ARGLEN:
 39758 00008E59 0000                    	dw 0
 39759                                  ARGV0_ARGSW_WORD:
 39760 00008E5B 0000                    	dw 0
 39761                                  ARGV0_OCOMPTR:
 39762 00008E5D 0000                    	dw 0
 39763                                  ARGV1_ARGPOINTER:
 39764 00008E5F 0000                    	dw 0	; ARGV[1]	
 39765 00008E61 00<rep 5h>              	times 5 db 0
 39766                                  ARGV1_ARGSW_WORD:
 39767 00008E66 0000                    	dw 0
 39768 00008E68 0000                    	dw 0
 39769                                  ARGV2_ARGPOINTER:
 39770 00008E6A 0000                    	dw 0	; ARGV[2]
 39771 00008E6C 00<rep 5h>              	times 5 db 0
 39772                                  ARGV2_ARGSW_WORD:
 39773 00008E71 0000                    	dw 0
 39774 00008E73 0000                    	dw 0
 39775 00008E75 00<rep 29Fh>            	times 671 db 0  ; ARGV[3] to ARGV[63]
 39776                                  ARG_ARGVCNT:
 39777 00009114 0000                    	dw 0
 39778                                  ARG_ARGSWINFO:
 39779 00009116 0000                    	dw 0
 39780                                  ARG_ARGBUF:
 39781 00009118 0000<rep 100h>          	times 256 dw 0	; times ARGBLEN dw 0 
 39782                                  ARG_ARGFORCOMBUF:
 39783 00009318 00<rep 80h>             	times 128 db 0  ; times COMBUFLEN db 0 
 39784                                  
 39785                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9649h
 39786                                  ARGBUF_PTR:
 39787 00009398 0000                    	dw 0			; index for argv[].argpointer
 39788 0000939A 00<rep 80h>             TPBUF:	times 128 db 0		; temporary buffer
 39789                                  LASTARG:
 39790 0000941A 0000                    	dw 0			; point at which to accumulate switch info
 39791 0000941C 0000                    COMPTR:	dw 0			; ptr into combuf
 39792                                  
 39793                                  ; Data declarations taken out of path.asm
 39794                                  ;fbuf	find_buf	<>		; dma buffer for findfirst/findnext
 39795                                  ;pathinfo	DW	3 DUP (?)	; ES, SI(old), and SI(new) of user path
 39796                                  ;psep_char	DB	?		; '/' or '\'
 39797                                  ;search_best	DB	(?)		; best code, best filename so far
 39798                                  ;fname_max_len	equ	13
 39799                                  ;search_best_buf DB	fname_max_len DUP (?)
 39800                                  ;search_curdir_buf DB	64 DUP (?)	; a place for CurDir info, if successful
 39801                                  ;search_error	DW	(?)		; address of error message to be printed
 39802                                  
 39803                                  FINDBUFLEN equ FIND_BUF.size ; 43
 39804                                  
 39805                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 96CFh
 39806                                  
 39807 0000941E 00<rep 2Bh>             FBUF:	times FINDBUFLEN db 0	; times 43 db 0
 39808                                  FBUF_PNAME equ FBUF+30		; packed name, 13 bytes
 39809                                  pathinfo:
 39810                                  ;pathinfo_0:
 39811 00009449 0000                    	dw 0
 39812                                  ;pathinfo_2:
 39813 0000944B 0000                    	dw 0
 39814                                  ;pathinfo_4:
 39815 0000944D 0000                    	dw 0
 39816                                  psep_char:
 39817 0000944F 00                      	db 0
 39818                                  search_best:
 39819 00009450 00                      	db 0
 39820                                  FNAME_MAX_LEN equ 13
 39821                                  search_best_buf:
 39822 00009451 00<rep Dh>              	times FNAME_MAX_LEN db 0 ; times 13 db 0
 39823                                  search_curdir_buf:
 39824 0000945E 00<rep 40h>             	times 64 db 0
 39825                                  search_error:
 39826 0000949E 0000                    	dw 0
 39827                                  
 39828                                  ; Data declarations taken out of tbatch.asm
 39829                                  
 39830                                  ;if_not_count	DW	?
 39831                                  ;
 39832                                  ;zflag		db	?		; Used by typefil to indicate ^Z's
 39833                                  ;
 39834                                  ;		DW	80H DUP(0)	; Init to 0 to make sure the linker is not fooled
 39835                                  
 39836                                  ; 31/03/2023
 39837                                  ;STACK:	;LABEL	WORD
 39838                                  
 39839                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9751h
 39840                                  
 39841                                  IF_NOT_COUNT:
 39842 000094A0 0000                    	dw 0
 39843 000094A2 00                      zflag:	db 0
 39844 000094A3 00<rep 100h>            	times 256 db 0 
 39845                                  	; 16/04/2023
 39846                                  	; MSDOS 5.0 COMMAND.COM - TRANGROUP:9854h
 39847                                  STACK:
 39848                                  
 39849                                  ;INTERNATVARS	internat_block <>
 39850                                  ;	db	(internat_block_max - ($ - INTERNATVARS)) DUP (?)
 39851                                  
 39852                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9854h
 39853                                  INTERNATVARS:
 39854                                  		; (24+8 = 32 bytes)
 39855                                  DATE_TIME_FORMAT:
 39856 000095A3 0000                    	dw 0			; 0-USA, 1-EUR, 2-JAP
 39857                                  CURRENCY_SYM:
 39858 000095A5 0000000000              	db 0,0,0,0,0 		; times 5 db 0	; Currency Symbol 5 bytes
 39859                                  THOUS_SEP:
 39860 000095AA 0000                    	db 0,0			; Thousands separator 2 bytes
 39861                                  DECIMAL_SEP:
 39862 000095AC 0000                    	db 0,0			; Decimal separator 2 bytes
 39863                                  DATE_SEP:
 39864 000095AE 0000                    	db 0,0			; Date separator 2 bytes
 39865                                  TIME_SEP:
 39866 000095B0 0000                    	db 0,0			; Time separator 2 bytes	
 39867                                  BIT_FIELD:
 39868 000095B2 00                      	db 0			; Bit values
 39869                                  				;   Bit 0 = 0 if currency symbol first
 39870                                  				;	  = 1 if currency symbol last
 39871                                  				;   Bit 1 = 0 if No space after currency symbol
 39872                                  				;	  = 1 if space after currency symbol
 39873                                  CURRENCY_CENTS:
 39874 000095B3 00                      	db 0			; Number of places after currency dec point
 39875                                  TIME_24:
 39876 000095B4 00                      	db 0			; 1 if 24 hour time, 0 if 12 hour time
 39877                                  MAP_CALL:
 39878 000095B5 00000000                	dw 0,0  ; dd 0 		; Address of case mapping call (DWORD)
 39879                                  				; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
 39880                                  				;  in pieces.
 39881                                  DATA_SEP:
 39882 000095B9 0000                    	db 0,0			; Data list separator character		
 39883                                  
 39884 000095BB 00<rep 8h>              	times 8 db 0
 39885                                  
 39886                                  ; Max size of the block returned by the INTERNATIONAL call
 39887                                  
 39888                                  INTERNAT_BLOCK_SIZE EQU	32
 39889                                  
 39890                                  ;;	Buffer for DOS function 64h (Get extended country information)
 39891                                  ;;	subfunctions 2, 4, 6, or 7:
 39892                                  ;
 39893                                  ;CountryPtrInfo	label	byte
 39894                                  ;CountryPtrId	db	?
 39895                                  ;CountryPtr	dd	?
 39896                                  ;		.erre	(($ - CountryPtrInfo) GE 5)
 39897                                  	
 39898                                  	; MSDOS 5.0 COMMAND.COM (1991) Transient portion offset 9874h
 39899                                  CountryPtrInfo:
 39900                                  CountryPtrId:	
 39901 000095C3 00                      	db 0
 39902                                  CountryPtr:
 39903 000095C4 00000000                	dd 0
 39904                                  
 39905                                  OldCtrlCHandler:
 39906 000095C8 00000000                	dd 0			; previous int 23 vector		
 39907                                  
 39908                                  BATLEN equ 32
 39909                                  
 39910                                  BATBUFPOS:
 39911 000095CC 0000                    	dw 0			; integer position in buffer of next byte
 39912                                  
 39913 000095CE 00<rep 20h>             BATBUF:	times BATLEN db 0 ; times 32 db 0
 39914                                  BATBUFEND:
 39915 000095EE 0000                    	dw 0
 39916                                  TypeFilSiz:
 39917 000095F0 00000000                	dd 0			; stores size of file to be typed
 39918                                  
 39919                                  ; *****************************************************
 39920                                  ; EMG 4.00
 39921                                  ; DATA STARTING HERE WAS ADDED BY EMG FOR 4.00
 39922                                  ; FOR IMPLEMENTATION OF COMMON PARSE ROUTINE
 39923                                  ; *****************************************************
 39924                                  ;
 39925                                  ; COMMON PARSE OUTPUT BLOCKS
 39926                                  
 39927                                  ; Common output blocks for PARSE number, complex, or string values.
 39928                                  
 39929                                  PARSE1_OUTPUT:
 39930                                  PARSE1_TYPE:
 39931 000095F4 00                      	db 0			;AN000;  type
 39932                                  PARSE1_CODE:
 39933 000095F5 00                      	db 0			;AN000;  return value
 39934                                  PARSE1_SYN:
 39935 000095F6 0000                    	dw 0			;AN000;  es offset of synonym
 39936                                  PARSE1_ADDR:
 39937 000095F8 00000000                	dd 0			;AN000;  numeric value / address
 39938                                  				;	 of string value
 39939                                  
 39940                                  ;  Common output block for PARSE date strings.
 39941                                  
 39942                                  DATE_OUTPUT:
 39943                                  DATE_TYPE:
 39944 000095FC 00                      	db 0			;AN000;  type
 39945 000095FD 00                      	db 0			;AN000;  return value
 39946 000095FE 0000                    	dw 0			;AN000;  es offset of synonym
 39947                                  DATE_YEAR:
 39948 00009600 0000                    	dw 0			;AN000;  year
 39949                                  DATE_MONTH:
 39950 00009602 00                      	db 0			;AN000;  month
 39951                                  DATE_DAY:
 39952 00009603 00                      	db 0			;AN000;  day
 39953                                  
 39954                                  ;  Common output block for PARSE time strings.
 39955                                  
 39956                                  TIME_OUTPUT:
 39957                                  TIME_TYPE:
 39958 00009604 00                      	db 0			;AN000;  type
 39959 00009605 00                      	db 0			;AN000;  return value
 39960 00009606 0000                    	dw 0			;AN000;  es offset of synonym
 39961                                  TIME_HOUR:
 39962 00009608 00                      	db 0			;AN000;  hour
 39963                                  TIME_MINUTES:
 39964 00009609 00                      	db 0			;AN000;  minutes
 39965                                  TIME_SECONDS:
 39966 0000960A 00                      	db 0			;AN000;  seconds
 39967                                  TIME_FRACTION:
 39968 0000960B 00                      	db 0			;AN000;  hundredths
 39969                                  
 39970                                  ;  Common output block for PARSE drive specifier (one based drive number).
 39971                                  
 39972                                  DRIVE_OUTPUT:
 39973                                  DRIVE_TYPE:
 39974 0000960C 00                      	db 0			;AN000;  type
 39975                                  DRIVE_VALUE:
 39976 0000960D 00                      	db 0			;AN000;  return value
 39977 0000960E 0000                    	dw 0			;AN000;  es offset of synonym
 39978                                  DRIVE_NUMBER:
 39979 00009610 00                      	db 0			;AN000;  drive number
 39980 00009611 000000                  	db 0,0,0		;AN000;  reserved
 39981                                  
 39982                                  	; 18/04/2023
 39983                                  	; 16/04/2023
 39984                                  ;TRANSPACEEND: ; 98C5h ; End of MSDOS 5.0 COMMAND.COM (1991) Transient portion
 39985                                  
 39986                                  ; ----------------------------------------------------------------------------
 39987                                  ; 20/04/2023
 39988                                  TRANSPACEEND equ ($-TRANSIENTSTART)	; Transient portion size
